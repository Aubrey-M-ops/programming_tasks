,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-3664,Bug,Trivial,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-14 12:07:21+00:00,2011-10-25 11:35:39+00:00,The toString in SamplingDefinition should cater for units may be null.,
0,CAMEL-3663,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Won't Fix,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-14 08:29:38+00:00,2011-10-25 11:35:20+00:00,"spring java config is now part of Spring Framework 3.0, and thus we can move it into the camel-spring component.
http://static.springsource.org/spring-javaconfig/README.TXT","davsclaus:1297644177:2011-02-14T08:42:57.124+0000:1297644177:2011-02-14T08:42:57.124+0000:Crap spring javaconfig requires CGLib, which we dont want to pollute regular camel-spring user with."
0,CAMEL-3662,Improvement,Major,2.6.0,None,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,David J. M. Karlsen,0,0,2011-02-12 13:42:01+00:00,2012-07-06 08:29:57+00:00,"Please upgrade (and note the changed groupId/artifactId) the nagios library to 2.0.1.


diff --git a/pays-core/pays-core-integration/pom.xml b/pays-core/pays-core-integration/pom.xml
index db6ec3b..259e8af 100644
— a/pays-core/pays-core-integration/pom.xml
+++ b/pays-core/pays-core-integration/pom.xml
@@ -50,6 +50,11 @@
 			<artifactId>camel-nagios</artifactId>
 		</dependency>
 		<dependency>
+			<groupId>com.googlecode.jsendnsca</groupId>
+			<artifactId>jsendnsca</artifactId>
+			<version>2.0.1</version>
+		</dependency>
+		<dependency>
 			<groupId>org.apache.camel</groupId>
 			<artifactId>camel-core</artifactId>
 		</dependency>
diff --git a/pom.xml b/pom.xml
index a4aca3f..ab54d27 100644
— a/pom.xml
+++ b/pom.xml
@@ -177,6 +177,12 @@
 				<artifactId>camel-nagios</artifactId>
 				<version>${camel.version}</version>
 				<scope>runtime</scope>
+				<exclusions>
+					<exclusion>
+						<groupId>com.googlecode</groupId>
+						<artifactId>jsendnsca-core</artifactId>
+					</exclusion>
+				</exclusions>
 			</dependency>","njiang:1297532303:2011-02-13T01:38:23.107+0000:1297532303:2011-02-13T01:38:23.107+0000:It looks like the com.googlecode.jsendnsca:jsendnsca is not in the central repo, and we also need to provide OSGi wrapper bundle before upgrade the version.
davsclaus:1297553255:2011-02-13T07:27:35.945+0000:1297553255:2011-02-13T07:27:35.945+0000:It's already a OSGi bundle. We can put the JARs in the fusesource repo which we have done with the existing 1.3.1 release.
It now depends on commons-lang 2.4. "
0,CAMEL-3661,New Feature,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-12 11:48:11+00:00,2011-10-25 11:35:36+00:00,"Allows to configure redelivery policy as global policies which you can refer to using the ref. This make it easier to define common policies which you can re-use in different routes and onException definitions.


Currently you would have to define it as a <bean> tag. We need a nice DSL for it in the <camelContext>","davsclaus:1297591212:2011-02-13T18:00:12.285+0000:1297591212:2011-02-13T18:00:12.285+0000:trunk: 1070270.

There is a new <redeliveryPolicyProfile> in the XML DSLs so you easily can define common policies to use in <errorHandler> or <onException>."
0,CAMEL-3660,Improvement,Minor,2.6.0,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Martin Krasser,hoopzhou,0,0,2011-02-12 02:09:02+00:00,2011-06-27 09:44:23+00:00,"In Japan the HL7 message require no start block, the start byte currently is mandatory in the camel-hl7 component. 
http://camel.465427.n5.nabble.com/How-to-configure-hl7-message-without-start-block-td3373015.html","davsclaus:1297553419:2011-02-13T07:30:19.017+0000:1297553419:2011-02-13T07:30:19.017+0000:Do you have a link to some spec or description about this?

mrt1nz:1297565924:2011-02-13T10:58:44.109+0000:1297565924:2011-02-13T10:58:44.109+0000:I'll also try to clarify this with some HL7 experts next week and see how this can be addressed.
hoopzhou:1297702792:2011-02-15T00:59:52.875+0000:1297702792:2011-02-15T00:59:52.875+0000:Sorry for response late. I did not find a formal specification of such a Japan lower layer protocol. And I am not very sure whether the absence of the <SB> character (<0x0B>) means that this is not compliant with the HL7 defined v2 MLLP. 
mrt1nz:1297724432:2011-02-15T07:00:32.596+0000:1297724432:2011-02-15T07:00:32.596+0000:I also checked that with the specs and some HL7 expert. Having no start byte is not covered by MLLP (and related best practices and IHE transactions). On the other hand, if support for missing start bytes is useful to camel-hl7 users, it makes sense to support it."
0,CAMEL-3659,Task,Major,None,None,"
None
",Closed,Won't Fix,2.7.0,Richard Kettelerij,Richard Kettelerij,0,1,2011-02-12 00:18:06+00:00,2011-03-02 21:06:06+00:00,"Spring Web Services 2.0 is out. It requires Spring 3 as minimum so it fits Camel 2.7 nicely.


The upgrade is very simple, we only need to change the version number in the POM of camel-parent. I've run all unit tests and done some manual testing using camel-example-spring-ws and everything looks ok.","joed:1297455184:2011-02-12T04:13:04.398+0000:1297455184:2011-02-12T04:13:04.398+0000:Thanks Richard.
muellerc:1297571793:2011-02-13T12:36:33.539+0000:1297571793:2011-02-13T12:36:33.539+0000:running
{code}
mvn -Pvalidate clean install
{code}
in camel/platforms fails with:
{code}
[INFO]  - step 1: Checking if all artifacts exist
java.lang.Exception: mvn:org.springframework.ws/spring-ws-core/2.0.0.RELEASE is not an OSGi bundle
        at org.apache.karaf.tooling.features.ValidateFeaturesMojo.validateBundlesAvailable(ValidateFeaturesMojo.java:316)
        at org.apache.karaf.tooling.features.ValidateFeaturesMojo.validate(ValidateFeaturesMojo.java:214)
        at org.apache.karaf.tooling.features.ValidateFeaturesMojo.execute(ValidateFeaturesMojo.java:155)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:107)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:534)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
{code}

We need an OSGIfied version of spring-ws-core. I wonder why the Spring guys didn't release this as an OSGI bundle...
rkettelerij:1297572968:2011-02-13T12:56:08.685+0000:1297573520:2011-02-13T13:05:20.865+0000:No kidding, I thought everything at SpringSource was OSGified? Especially since 1.5.9 was OSGi compatible. But you're right, there's already a ticket https://jira.springsource.org/browse/SWS-681.
rkettelerij:1297573357:2011-02-13T13:02:37.441+0000:1297573357:2011-02-13T13:02:37.441+0000:Do note that we still have CAMEL-3307 so I wonder how much of an issue this is for the Karaf users?
muellerc:1297580806:2011-02-13T15:06:46.956+0000:1297580806:2011-02-13T15:06:46.956+0000:Don't worry, I also thought everything at SpringSource is OSGified...
Every time you change something which affects the features file, it's a good idea to run 
{code}
mvm -Pvalidate clean install
{code}
in camel/platforms. This ensures all declared dependencies are valid and all dependencies could be resolved.

I would prefer to revert the changes in #1070022 and #r1070222 (my change from today which fixes the wrong dependency to spring-oxm) and upgrade to spring-ws 2.0.1, if it's out. This version should fix the issue we have with the 2.0.0 version.
I would not prefer to build an intermediate OSGIfied version by the ServiceMix guys.

Christian
rkettelerij:1297583695:2011-02-13T15:54:55.357+0000:1297583695:2011-02-13T15:54:55.357+0000:Agreed, would you mind doing the rollback?
muellerc:1297588553:2011-02-13T17:15:53.002+0000:1297588553:2011-02-13T17:15:53.002+0000:Yeah, but I would wait a bit whether somebody has doubts or a better idea...
davsclaus:1298861889:2011-02-28T10:58:09.978+0000:1298861889:2011-02-28T10:58:09.978+0000:Hmm a new SpringWS 2.0.1 release is not around the corner. 

I suggest to add this as a known issue. Then if SpringWS 2.0.1 is released then end users can upgrade and use that if they use Spring-WS in OSGi.
rkettelerij:1298948044:2011-03-01T10:54:04.684+0000:1298948044:2011-03-01T10:54:04.684+0000:Marking it as a known issue is fine as far as I'm concerned. Perhaps we should mention that folks who do want to use it in OSGi can still use 1.5.9 since the upgrade didn't break anything.
davsclaus:1298948748:2011-03-01T11:05:48.465+0000:1298948748:2011-03-01T11:05:48.465+0000:I have created CAMEL-3735 about the upgrade to Spring WS 2.0.1 having the OSGi fix. I will downgrade the camel-spring-ws feature to use the old 1.5.9 release. Then OSGi users can continue using that working version.
davsclaus:1298949990:2011-03-01T11:26:30.042+0000:1298949990:2011-03-01T11:26:30.042+0000:Hmm even the old 1.5.9 doesn't work with OSGi. So lets just wait for the Spring WS 2.0.1 release with the fix.
rkettelerij:1298955454:2011-03-01T12:57:34.912+0000:1298955454:2011-03-01T12:57:34.912+0000:Hmm strange, I looked at the manifest a couple of weeks ago and it's full of OSGi stuff.
muellerc:1298976215:2011-03-01T18:43:35.784+0000:1298976215:2011-03-01T18:43:35.784+0000:When we build a Camel release, is the validate Profile active? If it's active, we will run into this issue. Maybe it's important for Hadrian to know this...
rkettelerij:1298980195:2011-03-01T19:49:55.045+0000:1298980195:2011-03-01T19:49:55.045+0000:A snippet from the Spring 1.5.9 manifest:

Spring-WS-Version: 1.5.9
Implementation-Title: Spring WS Core
Implementation-Version: 1.5.9
Built-By: arjen
Tool: Bnd-0.0.357
Bundle-Name: Spring WS Core
Created-By: Apache Maven Bundle Plugin
Bundle-Vendor: SpringSource
Implementation-Vendor-Id: org.springframework.ws
Build-Jdk: 1.6.0_03-p3
Bundle-Version: 1.5.9
Bnd-LastModified: 1264761937395
Bundle-ManifestVersion: 2
Bundle-Description: Spring Web Services Core package.
Bundle-SymbolicName: org.springframework.bundle.ws.core
Import-Package: javax.activation;version=""1.1"",javax.servlet,javax.ser
 vlet.http,javax.wsdl;resolution:=optional,javax.wsdl.extensions;resol

It's OSGified.
muellerc:1298980703:2011-03-01T19:58:23.738+0000:1298980703:2011-03-01T19:58:23.738+0000:I added a warning on the camel-spring-ws component wiki page
muellerc:1298982909:2011-03-01T20:35:09.681+0000:1298982909:2011-03-01T20:35:09.681+0000:With 1.5.9, 
{code}
mvn -Pvalidate clean install
{code}
runs without problems.

spring-ws-core, spring-ws-support, spring-oxm and spring-xml are valid OSGI bundles.

@Claus, what do you suggest?
davsclaus:1299046157:2011-03-02T14:09:17.838+0000:1299046157:2011-03-02T14:09:17.838+0000:Yeah we can downgrade to 1.5.9 to have the validate work. I don't think the release process triggers this profile, so we should be safe anyway.

The unit tests in camel-itest-karaf cannot load the Spring WS 1.5.9 component. So the test is @Ignored. 
muellerc:1299062789:2011-03-02T18:46:29.267+0000:1299062789:2011-03-02T18:46:29.267+0000:We decided to downgrade to 1.5.9
muellerc:1299070792:2011-03-02T20:59:52.871+0000:1299070792:2011-03-02T20:59:52.871+0000:I think the problem with the camel-itest-karaf for camel-spring-ws is because bundle [org.springframework.bundle.ws.xml] imports javax.xml.stream;resolution:=optional (which implies version ""0.0.0"", when I remember right). The Servicemix stax-api bundle exports javax.xml.stream;uses:=""javax.xml.stream.events,javax.xml.namespace,javax.xml.stream.util,javax.xml.transform"";version=1.0.1.

I'm not sure how we should solve this.

{code}
Apache ServiceMix :: Specs :: Stax API 1.0 (70)
-----------------------------------------------
Manifest-Version = 1.0
Bnd-LastModified = 1294295628252
Tool = Bnd-0.0.357
Built-By = ffang
Implementation-Version = 1.7.0
Build-Jdk = 1.6.0_13
Created-By = Apache Maven Bundle Plugin
Implementation-Title = Apache ServiceMix

Bundle-Vendor = The Apache Software Foundation
Bundle-Activator = org.apache.servicemix.specs.locator.Activator
Bundle-Name = Apache ServiceMix :: Specs :: Stax API 1.0
Bundle-DocURL = http://www.apache.org/
Bundle-Description = This pom provides project information that is common to all ServiceMix branches.
Bundle-SymbolicName = org.apache.servicemix.specs.stax-api-1.0
Bundle-Version = 1.7.0
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2

Import-Package = 
        javax.xml.namespace,
        javax.xml.stream;version=1.0,
        javax.xml.stream.events;version=1.0,
        javax.xml.stream.util;version=1.0,
        javax.xml.transform,
        org.osgi.framework
Export-Package = 
        javax.xml.stream;uses:=""javax.xml.stream.events,javax.xml.namespace,javax.xml.stream.util,javax.xml.transform"";version=1.0.1,
        javax.xml.stream.util;uses:=""javax.xml.stream,javax.xml.stream.events,javax.xml.namespace"";version=1.0.1,
        javax.xml.stream.events;uses:=""javax.xml.namespace,javax.xml.stream"";version=1.0.1
{code}

{code}
Spring XML (124)
----------------
Manifest-Version = 1.0
Bnd-LastModified = 1264761895862
Tool = Bnd-0.0.357
Built-By = arjen
Spring-WS-Version = 1.5.9
Implementation-Version = 1.5.9
Build-Jdk = 1.6.0_03-p3
Implementation-Vendor-Id = org.springframework.ws
Created-By = Apache Maven Bundle Plugin
Implementation-Title = Spring XML

Bundle-Vendor = SpringSource
Bundle-Name = Spring XML
Bundle-Description = Various XML support classes for Spring Web Services
Bundle-SymbolicName = org.springframework.bundle.ws.xml
Bundle-Version = 1.5.9
Bundle-ManifestVersion = 2

Import-Package = 
        javax.xml.namespace,
        javax.xml.parsers,
        javax.xml.stream;resolution:=optional,
        javax.xml.stream.events;resolution:=optional,
        javax.xml.stream.util;resolution:=optional,
        javax.xml.transform,
        javax.xml.transform.dom,
        javax.xml.transform.sax,
        javax.xml.transform.stax;resolution:=optional,
        javax.xml.transform.stream,
        javax.xml.validation;resolution:=optional,
        javax.xml.xpath;resolution:=optional,
        org.apache.commons.logging,
        org.apache.ws.commons.schema;resolution:=optional,
        org.apache.ws.commons.schema.extensions;resolution:=optional,
        org.apache.ws.commons.schema.resolver;resolution:=optional,
        org.jaxen;resolution:=optional,
        org.jaxen.dom;resolution:=optional,
        org.springframework.beans;version=""[2.0,4.0)"",
        org.springframework.beans.factory;version=""[2.0,4.0)"",
        org.springframework.context;version=""[2.0,4.0)"",
        org.springframework.core;version=""[2.0,4.0)"",
        org.springframework.core.io;version=""[2.0,4.0)"",
        org.springframework.util;version=""[2.0,4.0)"",
        org.springframework.xml;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.dom;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.namespace;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.sax;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.stream;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.transform;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.validation;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.xpath;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.xsd;version=""[1.5.9,1.5.9]"",
        org.springframework.xml.xsd.commons;version=""[1.5.9,1.5.9]"",
        org.w3c.dom,
        org.xml.sax,
        org.xml.sax.ext,
        org.xml.sax.helpers
Export-Package = 
        org.springframework.xml.namespace;uses:=""org.springframework.util,javax.xml.namespace,org.w3c.dom"";version=1.5.9,
        org.springframework.xml;uses:=""org.springframework.util,org.springframework.core"";version=1.5.9,
        org.springframework.xml.dom;uses:=""org.springframework.util,org.w3c.dom,org.xml.sax"";version=1.5.9,
        org.springframework.xml.stream;
                uses:=""org.springframework.xml.namespace,
                        javax.xml.stream,
                        javax.xml.namespace,
                        org.xml.sax,
                        org.springframework.xml.sax,
                        org.springframework.util,
                        javax.xml.stream.util,
                        javax.xml.stream.events,
                        org.xml.sax.ext,
                        org.xml.sax.helpers"";
                version=1.5.9,
        org.springframework.xml.sax;uses:=""org.xml.sax.ext,org.xml.sax,org.springframework.core.io"";version=1.5.9,
        org.springframework.xml.transform;
                uses:=""org.springframework.xml.sax,
                        org.springframework.core.io,
                        javax.xml.transform.sax,
                        org.xml.sax,
                        org.springframework.xml.stream,
                        javax.xml.stream,
                        javax.xml.stream.util,
                        javax.xml.transform.stream,
                        org.apache.commons.logging,
                        org.springframework.util,
                        javax.xml.transform,
                        javax.xml.transform.stax,
                        org.xml.sax.ext,
                        org.w3c.dom,
                        org.springframework.xml,
                        javax.xml.transform.dom"";
                version=1.5.9,
        org.springframework.xml.xsd;
                uses:=""org.springframework.xml.sax,
                        org.springframework.util,
                        org.springframework.core.io,
                        javax.xml.parsers,
                        javax.xml.transform.dom,
                        org.springframework.xml.validation,
                        org.w3c.dom,
                        org.xml.sax,
                        javax.xml.namespace,
                        org.springframework.xml.namespace,
                        javax.xml.transform,
                        org.springframework.beans.factory,
                        org.springframework.xml"";
                version=1.5.9,
        org.springframework.xml.xsd.commons;
                uses:=""org.apache.ws.commons.schema,
                        org.springframework.util,
                        org.springframework.beans,
                        org.springframework.core.io,
                        org.springframework.xml.xsd,
                        org.apache.ws.commons.schema.extensions,
                        javax.xml.transform.dom,
                        org.w3c.dom,
                        org.springframework.xml.validation,
                        javax.xml.namespace,
                        javax.xml.transform,
                        javax.xml.transform.stream,
                        org.apache.ws.commons.schema.resolver,
                        org.springframework.xml.sax,
                        org.xml.sax,
                        org.apache.commons.logging,
                        org.springframework.context,
                        org.springframework.beans.factory"";
                version=1.5.9,
        org.springframework.xml.xpath;
                uses:=""org.w3c.dom,
                        javax.xml.transform,
                        org.springframework.xml.transform,
                        javax.xml.transform.dom,
                        org.jaxen,
                        org.jaxen.dom,
                        javax.xml.xpath,
                        javax.xml.namespace,
                        org.springframework.xml.namespace,
                        org.xml.sax,
                        javax.xml.transform.stream,
                        javax.xml.transform.sax,
                        org.springframework.xml,
                        org.apache.commons.logging,
                        org.springframework.util,
                        org.springframework.beans.factory"";
                version=1.5.9,
        org.springframework.xml.validation;
                uses:=""javax.xml.transform,
                        javax.xml.transform.stream,
                        javax.xml.parsers,
                        javax.xml.transform.dom,
                        javax.xml.transform.sax,
                        org.xml.sax.helpers,
                        org.xml.sax,
                        org.springframework.xml.sax,
                        org.springframework.core.io,
                        javax.xml.validation,
                        org.springframework.util,
                        org.springframework.xml.transform,
                        org.springframework.xml,
                        org.apache.commons.logging"";
                version=1.5.9

{code}

The exception we got:

{code}
org.osgi.framework.BundleException: Constraint violation for package 'javax.xml.stream' when resolving module 38.0 between existing import 0.javax.xml.stream BLAMED ON [[38.0] package; (package=javax.xml.stream)] and uses constraint 25.0.javax.xml.stream BLAMED ON [[38.0] package; (&(package=org.springframework.xml.transform)(version>=1.5.9)(version<=1.5.9)), [37.0] package; (package=javax.xml.stream)]
	at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3428)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1754)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1188)
	at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
	at java.lang.Thread.run(Thread.java:680)
RE: org.apache.felix.framework.resolver.ResolveException: Constraint violation for package 'javax.xml.stream' when resolving module 39.0 between existing import 25.0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=javax.xml.stream)(version>=1.0.0))] and uses constraint 0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=org.springframework.util.xml)(version>=2.0.0)(!(version>=4.0.0))), [13.0] package; (&(package=javax.xml.stream)(version>=0.0.0))]
ERROR: Error starting file:bundles/org.springframework.bundle.ws.core_1.5.9.jar (org.osgi.framework.BundleException: Constraint violation for package 'javax.xml.stream' when resolving module 39.0 between existing import 25.0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=javax.xml.stream)(version>=1.0.0))] and uses constraint 0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=org.springframework.util.xml)(version>=2.0.0)(!(version>=4.0.0))), [13.0] package; (&(package=javax.xml.stream)(version>=0.0.0))])
org.osgi.framework.BundleException: Constraint violation for package 'javax.xml.stream' when resolving module 39.0 between existing import 25.0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=javax.xml.stream)(version>=1.0.0))] and uses constraint 0.javax.xml.stream BLAMED ON [[39.0] package; (&(package=org.springframework.util.xml)(version>=2.0.0)(!(version>=4.0.0))), [13.0] package; (&(package=javax.xml.stream)(version>=0.0.0))]
	at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3428)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1754)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1188)
	at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
	at java.lang.Thread.run(Thread.java:680)
ERROR: Error starting file:bundles/org.apache.camel.camel-spring-ws_2.7.0.SNAPSHOT.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-spring-ws [40]: Unable to resolve 40.0: missing requirement [40.0] package; (&(package=org.springframework.ws)(version>=3.0.0)(!(version>=4.0.0))) - [40.0] package; (&(package=org.springframework.ws)(version>=3.0.0)(!(version>=4.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-spring-ws [40]: Unable to resolve 40.0: missing requirement [40.0] package; (&(package=org.springframework.ws)(version>=3.0.0)(!(version>=4.0.0))) - [40.0] package; (&(package=org.springframework.ws)(version>=3.0.0)(!(version>=4.0.0)))
	at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3421)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1754)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1188)
	at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
	at java.lang.Thread.run(Thread.java:680)
{code}
muellerc:1299071043:2011-03-02T21:04:03.336+0000:1299071043:2011-03-02T21:04:03.336+0000:downgrade to 1.5.9
Committed r1076374
muellerc:1299071166:2011-03-02T21:06:06.592+0000:1299071166:2011-03-02T21:06:06.592+0000:We will upgrade to Spring WS 2.0.1 with CAMEL-3735"
0,CAMEL-3658,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-11 15:51:22+00:00,2011-10-25 11:35:38+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-4-2-5-2-questions-about-RedeliveryPolicy-tag-tp3381184p3381184.html


The XML schema is locked at using double/boolean types etc. We need to relax that to String so we can support placeholders.",davsclaus:1297483493:2011-02-12T12:04:53.588+0000:1297483493:2011-02-12T12:04:53.588+0000:trunk: 1070059.
0,CAMEL-3657,Task,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-11 12:12:46+00:00,2011-10-25 11:36:02+00:00,"The test HawtDBAggregateRecoverDeadLetterChannelFailedTest may fail with a header missing. This seems really odd. And tracking this down to a thread visibility issue with the thread performing the assertion on the mock, and threads routing the messages in Camel. State on the mock should be volatile so changes is visible between the threads.


Also optimize getHeader on Message to check for any headers first, avoiding the lazy create a Map, when really not needed.",davsclaus:1297398767:2011-02-11T12:32:47.967+0000:1297398767:2011-02-11T12:32:47.967+0000:trunk: 1069776.
0,CAMEL-3656,New Feature,Major,2.6.0,Future,"

smpp

",Resolved,Later,Future,Unassigned,Jaco van Tonder,0,2,2011-02-11 10:26:32+00:00,2015-07-11 22:21:03+00:00,"Add support for asynchronous delivery from camel-smpp to the SMSC endpoint.


This allows for better throughput to the SMSC, meaning messages will get delivered in higher volumes.


The end user should be allowed to supply the following configurables:



asynchronous = [true,false]
Maximum number of outstanding messages.
?



The jSMPP code has a pretty neat example on how to implement asynchronous sending.


We might have to re-think how we will tie back the message id's, as those will not be available immediately in the same way that the synchronized sending makes them available.","muellerc:1297607408:2011-02-13T22:30:08.586+0000:1297607408:2011-02-13T22:30:08.586+0000:Jaco, which sample do you mean? The AsyncSubmitReceiveDeliverSmExample sample send the short messages synchronous and receive the DeliveryReceipt asynchronous. But this is already implemented in camel-smpp.
In my opinion, jsmpp didn't support this feature out of the box. We could only increase the throughput if we send the short message in it's own thread and using the [Asynchronous Routing Engine|http://camel.apache.org/asynchronous-routing-engine.html] to propagate the messageId back to the caller. I think this is a bit more complicated to implement, but I will try it...
Christian
muellerc:1319204722:2011-10-21T21:45:22.671+0000:1319204722:2011-10-21T21:45:22.671+0000:Jaco, any news here?

Christian
davsclaus:1436624463:2015-07-11T22:21:03.783+0000:1436624463:2015-07-11T22:21:03.783+0000:No feedback from reporter"
0,CAMEL-3655,Improvement,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,1,2011-02-11 10:22:43+00:00,2012-05-01 14:19:13+00:00,"See nabble
http://camel.465427.n5.nabble.com/Event-driven-FTP-consumer-tp3376242p3376242.html


The PollingConsumer should only poll once and thus it should not be schedule based, and it should disconnect after polling.","rkettelerij:1297403480:2011-02-11T13:51:20.410+0000:1297403543:2011-02-11T13:52:23.199+0000:@Claus,

Thanks for creating the ticket (was about to do it myself but you were quicker ;)). Anyway the issue I faced with the FTP component was that there's no option to read files on-demand from FTP (or plain filesystem) in the middle of a route. The only way to read files is to use a continuously polling consumer, which is fine it a lot of case I guess.

Now this can be solved by having a consumer that polls once and disconnects so you can use it a content enricher. This should allow folks to download multiple files in one poll and continue the route. Hadrian suggested using it in a pipeline (using {{to()}}) but this requires a producer that can read from FTP instead of a consumer (CAMEL-3397).

Also this might be a more general issue, shouldn't all polling consumers allow for this behavior? It certainly also affects the file: component.
davsclaus:1309156144:2011-06-27T14:29:04.590+0000:1309156144:2011-06-27T14:29:04.590+0000:We may want to require that pollEnrich with file/ftp requires a file name to be specified? It seems a bit arbitrary to enrich a message with whatever the file/ftp consumer can scan and find in the directories.

So I most likely add that as a requirement and check that a fileName is specified and fail if not.
davsclaus:1309218833:2011-06-28T07:53:53.714+0000:1309218833:2011-06-28T07:53:53.714+0000:Ah I spotted likely an easy solution which is to resume/suspend the consumer upon demand. Then the ftp consumer should not keep polling as its suspended, if not in demand.

I will test that and see if we can use that as a workaround for Camel 2.8. And then talk about a solution for Camel 2.9 where we develop a dedicated polling consumer for file/ftp that isn't scheduled based.
davsclaus:1309232821:2011-06-28T11:47:01.962+0000:1309232821:2011-06-28T11:47:01.962+0000:I found a better solution for Camel 2.8. So now it should work with FTP.
rkettelerij:1309352158:2011-06-29T20:55:58.432+0000:1309352238:2011-06-29T20:57:18.101+0000:Nice work Claus. Seems like quite a change, I'll try testing it out when I get the chance.
essiambl:1335853153:2012-05-01T14:19:13.672+0000:1335853153:2012-05-01T14:19:13.672+0000:Is it possible to know what the solution is? Because I can't get this thing to work. I basically have to download a file when receiving a JMS message."
0,CAMEL-3654,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-11 08:50:25+00:00,2011-10-25 11:35:55+00:00,We should introduce a new matches method which is used by mock's when they report failure messages. The new method should return the failure message which ensures we dont have to store state on the binary predicate instance.,davsclaus:1297388326:2011-02-11T09:38:46.345+0000:1297388326:2011-02-11T09:38:46.345+0000:trunk: 1069721.
0,CAMEL-3653,Task,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Tracy J. Snell,Tracy J. Snell,0,0,2011-02-11 01:45:53+00:00,2011-10-25 11:35:29+00:00,Grunt work but getting rid 62 critical issues. I'm assuming Sonar is fine with autoboxing.,"tjsnell:1297372146:2011-02-11T05:09:06.255+0000:1297372146:2011-02-11T05:09:06.255+0000:all of them fixed except the 2 in CustomerEntity. Not sure what's up there.
davsclaus:1297373359:2011-02-11T05:29:19.779+0000:1297373359:2011-02-11T05:29:19.779+0000:trunk: 1069675."
0,CAMEL-3652,Improvement,Major,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-02-10 21:43:55+00:00,2011-10-25 11:36:03+00:00,No Desc,"muellerc:1297345467:2011-02-10T21:44:27.844+0000:1297345467:2011-02-10T21:44:27.844+0000:See http://sonar.apache.org/drilldown/violations/org.apache.camel:camel?priority=CRITICAL&rule=findbugs%3AWMI_WRONG_MAP_ITERATOR#
muellerc:1297348711:2011-02-10T22:38:31.507+0000:1297348711:2011-02-10T22:38:31.507+0000:Committed r1069596"
0,CAMEL-3651,New Feature,Major,None,None,"
None
",Closed,Fixed,2.7.0,James Strachan,James Strachan,0,0,2011-02-10 15:48:19+00:00,2011-10-25 11:35:44+00:00,"see these discussions for background


http://camel.465427.n5.nabble.com/implementing-Protocols-or-a-way-to-make-it-easier-to-black-box-routes-and-compose-them-with-other-ros-td3218777.html#a3218777
http://camel.465427.n5.nabble.com/Abstracting-Routes-using-Components-td3234703.html


but basically I'm hoping for a simpler alternative than RouteBox...
http://camel.apache.org/routebox.html


for a way to take a set of Routes; wrap them up as a CamelContext, register it into the Registry (Spring / JNDI / Guice / OSGi etc) and then refer to the endpoints inside the black box in a simple way.


The idea is similar to: https://issues.apache.org/jira/browse/CAMEL-3563 - though a different motivation. This issue is about composition; taking a CamelContext making it a black box object in the Registry then having a simple naming convention to refer to its endpoints.


To better describe this issue I'll post to the mailing list and document it in the wiki and post links to this issue...","jstrachan:1297328431:2011-02-10T17:00:31.521+0000:1297328431:2011-02-10T17:00:31.521+0000:Here's some documentation around the current spike...
https://cwiki.apache.org/confluence/display/CAMEL/Context

as well as some test cases to show it in action

* simple URIs: http://svn.apache.org/viewvc/camel/trunk/components/camel-context/src/test/java/org/apache/camel/component/context/JavaDslBlackBoxTest.java?revision=1069442&view=markup

* verbose qualified URIs: http://svn.apache.org/viewvc/camel/trunk/components/camel-context/src/test/java/org/apache/camel/component/context/JavaDslBlackBoxWithVerboseUriTest.java?revision=1069442&view=markup
jstrachan:1297328596:2011-02-10T17:03:16.515+0000:1297328596:2011-02-10T17:03:16.515+0000:further background and discussions here: http://camel.465427.n5.nabble.com/Turning-CamelContexts-into-black-boxes-for-reuse-and-composition-was-Re-Abstracting-Routes-using-Coms-td3379673.html
jstrachan:1297389547:2011-02-11T09:59:07.930+0000:1297389547:2011-02-11T09:59:07.930+0000:Code complete and tested though we could do with some Spring based tests too....
davsclaus:1298861541:2011-02-28T10:52:21.382+0000:1298861541:2011-02-28T10:52:21.382+0000:Java DSL works fine.

We will have to revisit XML DSLs as startup ordering play a trick here with Spring Framework."
0,CAMEL-3650,Bug,Critical,2.6.0,2.7.0,"

smpp

",Closed,Fixed,2.7.0,Christian Müller,Jaco van Tonder,0,0,2011-02-10 10:49:42+00:00,2011-10-25 11:35:22+00:00,"It took me a bit of time to put my finger on this problem.


When an unbind PDU is sent from the SMSC side to a camel-smpp endpoint, a cascading amount reconnect threads are spawned by the reconnect code. I can reliably re-produce this problem having a simple smpp consumer to a SMSC / simulator and issuing an unbind from the SMSC / simulator.


Here are some logs (I have added additional debug messages to the SmppConsumer to show the object references and state of the SmppSession objects):



2011-02-10 12:23:05,931 [ing.Main.main()] INFO  MainSupport          - Apache Camel 2.6.0 starting
2011-02-10 12:23:06,338 [ing.Main.main()] INFO  amelNamespaceHandler - OSGi environment not detected.
2011-02-10 12:23:06,338 [ing.Main.main()] DEBUG amelNamespaceHandler - Using org.apache.camel.spring.CamelContextFactoryBean as CamelContextBeanDefinitionParser
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelProducerTemplateFactoryBean with id: template on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,764 [ing.Main.main()] DEBUG amelNamespaceHandler - Registered default: org.apache.camel.spring.CamelConsumerTemplateFactoryBean with id: consumerTemplate on camel context: camelTestRouteBuilderContext
2011-02-10 12:23:06,965 [ing.Main.main()] DEBUG SpringCamelContext   - Set the application context classloader to: java.net.URLClassLoader@16e7eec9
2011-02-10 12:23:06,984 [ing.Main.main()] DEBUG elContextFactoryBean - Found JAXB created routes: []
2011-02-10 12:23:06,990 [ing.Main.main()] DEBUG SpringCamelContext   - Adding routes from builder: Routes: []
2011-02-10 12:23:07,059 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is starting
2011-02-10 12:23:07,059 [ing.Main.main()] INFO  SpringCamelContext   - JMX enabled. Using ManagedManagementStrategy.
2011-02-10 12:23:07,106 [ing.Main.main()] DEBUG faultManagementAgent - Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@7e3b014c
2011-02-10 12:23:07,168 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:23:07,194 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters ...
2011-02-10 12:23:07,194 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/camel/camel-core/2.6.0/camel-core-2.6.0.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,195 [ing.Main.main()] INFO  nTypeConverterLoader - Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/home/jacovt/.m2/repository/org/apache/activemq/activemq-camel/5.3.1-fuse-02-00/activemq-camel-5.3.1-fuse-02-00.jar!/META-INF/services/org/apache/camel/TypeConverter
2011-02-10 12:23:07,196 [ing.Main.main()] DEBUG ageScanClassResolver - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.activemq.camel.converter]
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG ageScanClassResolver - Found: [class org.apache.camel.component.file.GenericFileConverter, class org.apache.camel.component.bean.BeanConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.TimePatternConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.activemq.camel.converter.ActiveMQConverter, class org.apache.activemq.camel.converter.ActiveMQMessageConverter]
2011-02-10 12:23:07,474 [ing.Main.main()] INFO  nTypeConverterLoader - Found 4 packages with 15 @Converter classes to load
2011-02-10 12:23:07,474 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.file.GenericFileConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.component.bean.BeanConverter
2011-02-10 12:23:07,479 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CamelConverter
2011-02-10 12:23:07,482 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.CollectionConverter
2011-02-10 12:23:07,483 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.IOConverter
2011-02-10 12:23:07,488 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.NIOConverter
2011-02-10 12:23:07,490 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.ObjectConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.TimePatternConverter
2011-02-10 12:23:07,491 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.DomConverter
2011-02-10 12:23:07,492 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
2011-02-10 12:23:07,494 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
2011-02-10 12:23:07,499 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQConverter
2011-02-10 12:23:07,501 [ing.Main.main()] DEBUG nTypeConverterLoader - Loading converter class: org.apache.activemq.camel.converter.ActiveMQMessageConverter
2011-02-10 12:23:07,507 [ing.Main.main()] DEBUG DefaultTypeConverter - Loading type converters done
2011-02-10 12:23:07,508 [ing.Main.main()] INFO  DefaultTypeConverter - Loaded 150 type converters in 0.313 seconds
2011-02-10 12:23:07,516 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:23:07,525 [ing.Main.main()] DEBUG dProducerServicePool - Starting service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:23:07,534 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:23:07,542 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:23:07,555 [ing.Main.main()] DEBUG ultComponentResolver - Found component: smpp via type: org.apache.camel.component.smpp.SmppComponent via: META-INF/services/org/apache/camel/component/smpp
2011-02-10 12:23:07,590 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:23:07,591 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01], path=[ubankmobile01@127.0.0.1:2775], parameters=[{amp;enquireLinkTimer=55000, amp;systemType=ubankmobile01, amp;transactionTimer=15000, password=u$@nk01}]
2011-02-10 12:23:07,605 [ing.Main.main()] DEBUG SpringCamelContext   - smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=u%24%40nk01 converted to endpoint: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] by component: org.apache.camel.component.smpp.SmppComponent@517c804b
2011-02-10 12:23:07,615 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:23:07,655 [ing.Main.main()] DEBUG ultComponentResolver - Found component: log via type: org.apache.camel.component.log.LogComponent via: META-INF/services/org/apache/camel/component/log
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:23:07,661 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[log://SmppIn], path=[SmppIn], parameters=[{}]
2011-02-10 12:23:07,666 [ing.Main.main()] DEBUG SpringCamelContext   - log://SmppIn converted to endpoint: Endpoint[log://SmppIn] by component: org.apache.camel.component.log.LogComponent@4633c1aa
2011-02-10 12:23:07,669 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:23:07,712 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:23:07,747 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:23:07,754 [ing.Main.main()] DEBUG SpringCamelContext   - Warming up route id: SmppConsumerRoute having autoStartup=true
2011-02-10 12:23:07,772 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:23:07,774 [ing.Main.main()] DEBUG ProcessorEndpoint$1  - Starting producer: Producer[log://SmppIn]
2011-02-10 12:23:07,775 [ing.Main.main()] DEBUG ProducerCache        - Adding to producer cache with key: Endpoint[log://SmppIn] for producer: Producer[log://SmppIn]
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:23:07,797 [ing.Main.main()] DEBUG cutorServiceStrategy - Created new scheduled thread pool for source: DefaultErrorHandler[TraceInterceptor[To[log:SmppIn]]] with name: ErrorHandlerRedeliveryTask. [poolSize=10]. -> java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:23:07,844 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-10 12:23:07,873 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:23:07,884 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:23:07,922 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:23:07,923 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-10 12:23:07,923 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:07,925 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:10,913 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-10 12:23:10,915 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:23:10,916 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: BOUND_RX
2011-02-10 12:23:10,916 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-10 12:23:10,916 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:23:10,917 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:23:10,918 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-10 12:23:10,919 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@774e1f2b
2011-02-10 12:23:10,925 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-10 12:23:10,926 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 3.866 seconds
2011-02-10 12:23:10,935 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:23:10,936 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:11,408 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:16,413 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:18,851 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:18,852 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:23,853 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:24,854 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:24,854 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:29,859 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:30,938 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:30,938 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:35,943 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:37,901 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:37,901 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:42,906 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:45,256 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:45,256 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:50,261 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:51,232 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:51,232 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:23:56,237 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:23:57,208 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:23:57,208 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:02,211 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:03,277 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:03,277 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:08,281 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-10 12:24:09,436 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,437 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-10 12:24:09,821 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:09,821 [pool-1-thread-3] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-10 12:24:09,822 [pool-1-thread-3] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@501b2cb9]




Everything is perfectly fine up to this point. It is here that the SMSC / simulator issues an unbind request towards the camel-smpp consumer.



2011-02-10 12:24:09,937 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-10 12:24:14,826 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,827 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:14,827 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:14,829 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:19,829 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:19,830 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:19,830 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@1b6b7f83]
2011-02-10 12:24:19,831 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:22,834 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:22,835 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:22,837 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@1b6b7f83]




The above negative bind responseis due to the fact that only a single smpp RX bind is allowed to the SMSC / simulator. I suspect the underlying problem is how the exception is handled here, but I might be wrong.



2011-02-10 12:24:22,838 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:22,838 [Thread-10      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:22,838 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:22,838 [Thread-9       ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:22,838 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:27,838 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:27,839 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,839 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:27,839 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:27,840 [Thread-11      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:27,840 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:27,840 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3e30e173]




OK, wait, we have 2 SMPPSession object references now? Seems like we have 2 Threads running that tries to re-connect...



2011-02-10 12:24:27,841 [Thread-12      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:31,035 [pool-3-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:31,035 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:31,035 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@62bc184]
2011-02-10 12:24:31,036 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:31,036 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:31,036 [Thread-11      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:31,036 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:31,037 [Thread-13      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,846 [Thread-12      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:32,982 [pool-4-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:32,982 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@3e30e173]
2011-02-10 12:24:32,982 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:32,982 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:32,983 [Thread-12      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:32,983 [Thread-14      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:32,983 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:32,983 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:36,037 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:36,037 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...




Some more re-connect threads...



2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:36,038 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:36,038 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:36,039 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:36,039 [Thread-15      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:36,039 [Thread-16      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,983 [Thread-14      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:37,984 [Thread-14      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:37,984 [Thread-14      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,984 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:37,985 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:37,985 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:37,985 [Thread-17      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:37,987 [Thread-18      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:38,831 [pool-6-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:38,831 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:38,831 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@7f21c5df]
2011-02-10 12:24:38,832 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:38,832 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:38,832 [Thread-19      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:38,832 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:38,832 [Thread-16      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:38,833 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:40,957 [pool-5-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:40,957 [Thread-10      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:40,957 [Thread-10      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@782bbb7b]
2011-02-10 12:24:40,958 [Thread-10      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:40,958 [Thread-20      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:40,958 [Thread-15      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:40,958 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:40,958 [Thread-10      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:40,959 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:42,821 [pool-8-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:42,821 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:42,822 [Thread-8       ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@38a3c5b6]
2011-02-10 12:24:42,822 [Thread-8       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,822 [Thread-21      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:42,822 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:42,822 [Thread-8       ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:42,822 [Thread-18      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:42,823 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:42,988 [Thread-17      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:43,832 [Thread-19      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-13      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #2...
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:43,833 [Thread-19      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,833 [Thread-13      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:43,833 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:43,834 [Thread-13      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:43,834 [Thread-22      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:43,834 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:43,835 [Thread-23      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:44,972 [pool-7-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:44,972 [Thread-14      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:44,972 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@6a754384]
2011-02-10 12:24:44,973 [Thread-14      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:44,973 [Thread-14      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:44,973 [Thread-24      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
2011-02-10 12:24:44,973 [Thread-17      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:44,973 [Thread-14      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:44,974 [Thread-14      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:45,958 [Thread-20      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:45,958 [Thread-20      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-10      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #3...
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:45,959 [Thread-20      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,959 [Thread-10      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:45,959 [Thread-20      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@684be8b8]
2011-02-10 12:24:45,960 [Thread-10      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:45,960 [Thread-25      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:45,960 [Thread-10      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@79b7d13e]
2011-02-10 12:24:45,960 [Thread-26      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:47,018 [pool-9-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:47,018 [Thread-19      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:47,018 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@18dd7404]
2011-02-10 12:24:47,019 [Thread-19      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,019 [Thread-19      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:47,019 [Thread-22      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:47,019 [Thread-19      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:47,020 [Thread-27      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis




Even more re-connect threads being spawned...



2011-02-10 12:24:47,823 [Thread-21      ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #4...
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:47,823 [Thread-21      ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,823 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-10 12:24:47,823 [Thread-21      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@490eb6ae]
2011-02-10 12:24:47,824 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-10 12:24:47,824 [Thread-28      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:47,824 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@3b4d82e1]
2011-02-10 12:24:47,825 [Thread-29      ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-10 12:24:48,838 [Thread-23      ] DEBUG SMPPSession          - No activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-10 12:24:48,962 [ool-10-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 0000000d, 1)
2011-02-10 12:24:48,962 [Thread-13      ] DEBUG AbstractSession      - bind response received
2011-02-10 12:24:48,962 [Thread-13      ] ERROR SMPPSession          - Receive negative bind response
org.jsmpp.extra.NegativeResponseException: Negative response 0000000d found
	at org.jsmpp.session.AbstractSession.validateResponse(AbstractSession.java:215)
	at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:271)
	at org.jsmpp.session.SMPPSession.sendBind(SMPPSession.java:294)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:232)
	at org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
	at org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:161)
	at org.apache.camel.component.smpp.SmppConsumer.access$500(SmppConsumer.java:54)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:223)
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> CLOSED[org.jsmpp.session.SMPPSession@53606bf5]
2011-02-10 12:24:48,963 [Thread-13      ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@501b2cb9], session state: CLOSED
2011-02-10 12:24:48,963 [Thread-13      ] INFO  SmppConsumer         - Failed to reconnect to smpp://ubankmobile01@127.0.0.1:2775, sessionState == CLOSED
2011-02-10 12:24:48,963 [Thread-23      ] INFO  SMPPSession          - PDUReaderWorker stop
2011-02-10 12:24:48,963 [Thread-13      ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:48,964 [Thread-30      ] INFO  SmppConsumer         - Schedule reconnect after 5000 millis
^C2011-02-10 12:24:49,726 [Thread-5       ] INFO  rt$HangupInterceptor - Received hang up - stopping the main instance.
2011-02-10 12:24:49,726 [Thread-5       ] INFO  MainSupport          - Apache Camel 2.6.0 stopping
2011-02-10 12:24:49,727 [Thread-5       ] DEBUG MainSupport          - Stopping Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af
2011-02-10 12:24:49,733 [Thread-5       ] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextClosedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@4c9549af: startup date [Thu Feb 10 12:23:05 SAST 2011]; root of context hierarchy]
2011-02-10 12:24:49,735 [Thread-5       ] DEBUG ledConnectionFactory - Stop the PooledConnectionFactory, number of connections in cache: 0
2011-02-10 12:24:49,736 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext:camelTestRouteBuilderContext) is shutting down
2011-02-10 12:24:49,737 [Thread-5       ] INFO  aultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 300 seconds)
2011-02-10 12:24:49,738 [Thread-5       ] DEBUG cutorServiceStrategy - Created new single thread pool for source: org.apache.camel.impl.DefaultShutdownStrategy@6e267b76 with name: ShutdownTask. -> java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG aultShutdownStrategy - There are 1 routes to shutdown
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Disconnecting from: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Closing session: org.jsmpp.session.SMPPSession@501b2cb9
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@501b2cb9]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - calling super.doStop()
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG SmppConsumer         - Stopping consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,742 [ - ShutdownTask] DEBUG ProcessorEndpoint$1  - Stopping producer: Producer[log://SmppIn]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  SmppConsumer         - Disconnected from: smpp://ubankmobile01@127.0.0.1:2775
2011-02-10 12:24:49,743 [ - ShutdownTask] DEBUG aultShutdownStrategy - Shutdown complete for: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-10 12:24:49,743 [ - ShutdownTask] INFO  aultShutdownStrategy - Route: SmppConsumerRoute shutdown complete, was consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?amp%3BenquireLinkTimer=55000&amp%3BsystemType=ubankmobile01&amp%3BtransactionTimer=15000&password=******]
2011-02-10 12:24:49,744 [Thread-5       ] INFO  aultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=routes,name=""SmppConsumerRoute""
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x59c27402)
2011-02-10 12:24:49,745 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=processors,name=""to1""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=context,name=""camelTestRouteBuilderContext""
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.Executors$FinalizableDelegatedExecutorService@6ea53502
2011-02-10 12:24:49,747 [Thread-5       ] INFO  ltInflightRepository - Shutting down with no inflight exchanges.
2011-02-10 12:24:49,747 [Thread-5       ] DEBUG dProducerServicePool - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@15dbac11
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG cutorServiceStrategy - ShutdownNow ExecutorService: java.util.concurrent.ScheduledThreadPoolExecutor@55fe910c
2011-02-10 12:24:49,748 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=threadpools,name=DefaultErrorHandler(0xa62b39f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""smpp""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultExecutorServiceStrategy(0x4d12ee4f)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""log://SmppIn""
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=ProducerCache(0x3a67ad79)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultTypeConverter(0x61e481c1)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=SharedProducerServicePool(0x15dbac11)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=tracer,name=Tracer(0x3761f888)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultShutdownStrategy(0x6e267b76)
2011-02-10 12:24:49,749 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=components,name=""log""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=services,name=DefaultInflightRepository(0xf7b650a)
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""smpp://ubankmobile01@127.0.0.1:2775""
2011-02-10 12:24:49,750 [Thread-5       ] DEBUG faultManagementAgent - Unregistered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)""
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Uptime: 1 minute
2011-02-10 12:24:49,750 [Thread-5       ] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) is shutdown in 0.014 seconds




The above thread-spawning quickly gets out of hand with thousands being created.


Note however that this problem does not seem to happen when the smsc goes down (session is closed and a connection refused pops up), but only when an unbind happens and then a negative bind.","muellerc:1297319700:2011-02-10T14:35:00.797+0000:1297319700:2011-02-10T14:35:00.797+0000:Will have a look on it later today...
muellerc:1297342335:2011-02-10T20:52:15.478+0000:1297342335:2011-02-10T20:52:15.478+0000:Committed r1069564
muellerc:1297342436:2011-02-10T20:53:56.150+0000:1297342436:2011-02-10T20:53:56.150+0000:Jaco, I applied a patch to truck. It would be nice, if you could check whether this patch solves your problem (It's a bit tricky to test).
jacovt:1297388037:2011-02-11T09:33:57.907+0000:1297388037:2011-02-11T09:33:57.907+0000:Christian,

Thanks for the quick patch. On first glance it seems to do the trick, I would just like to do a couple more tests to see how it behaves with multiple SMPP consumers, different providers, etc.

I see the same reconnect also lives in the SmppProducer class. Could we perhaps get the fix in there too?

Thanks again. :)

---Jaco
muellerc:1297388263:2011-02-11T09:37:43.668+0000:1297388263:2011-02-11T09:37:43.668+0000:This should also be fixed in SmppProducer
muellerc:1297428157:2011-02-11T20:42:37.712+0000:1297428157:2011-02-11T20:42:37.712+0000:Committed r1069950
muellerc:1297428256:2011-02-11T20:44:16.570+0000:1297428256:2011-02-11T20:44:16.570+0000:Jaco, I also fixed this issue in SmppProducer. Would be nice, if you also could check, whether this works also for the SMSC you can test with.
jacovt:1297531250:2011-02-13T01:20:50.554+0000:1297531250:2011-02-13T01:20:50.554+0000:Hello Christian,

I have tested a bit more and after the lock change, it seems that it triggers some more exceptions down the line that stops the threads from reconnecting completely now.

Here the the full debug session:

{code}
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Route: SmppConsumerRoute >>> EventDrivenConsumerRoute[Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000] -> Instrumentation:route[UnitOfWork(Channel[sendTo(Endpoint[log://SmppIn])])]]
2011-02-13 03:09:30,907 [ing.Main.main()] DEBUG SpringCamelContext   - Starting consumer (order: 1000) on route: SmppConsumerRoute
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=consumers,name=SmppConsumer(0x3cee5a06)
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Connecting to: smpp://ubankmobile01@127.0.0.1:2775...
2011-02-13 03:09:30,918 [ing.Main.main()] DEBUG SmppConsumer         - Starting consumer: SmppConsumer[smpp://ubankmobile01@127.0.0.1:2775]
2011-02-13 03:09:30,958 [ing.Main.main()] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:09:30,959 [ing.Main.main()] INFO  SMPPSession          - Connected
2011-02-13 03:09:30,959 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:30,961 [Thread-6       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,005 [pool-1-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG AbstractSession      - bind response received
2011-02-13 03:09:33,007 [ing.Main.main()] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:09:33,008 [ing.Main.main()] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: BOUND_RX
2011-02-13 03:09:33,008 [Thread-7       ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:09:33,008 [ing.Main.main()] INFO  SmppConsumer         - Connected to: smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:09:33,009 [ing.Main.main()] INFO  SpringCamelContext   - Route: SmppConsumerRoute started and consuming from: Endpoint[smpp://ubankmobile01@127.0.0.1:2775?enquireLinkTimer=10000&initialReconnectDelay=30000&password=******&reconnectDelay=15000&transactionTimer=15000]
2011-02-13 03:09:33,010 [ing.Main.main()] DEBUG DefaultComponent     - Creating endpoint uri=[spring-event://default], path=[default], parameters=[{}]
2011-02-13 03:09:33,011 [ing.Main.main()] DEBUG SpringCamelContext   - spring-event://default converted to endpoint: Endpoint[spring-event://default] by component: org.apache.camel.component.event.EventComponent@110f965e
2011-02-13 03:09:33,017 [ing.Main.main()] DEBUG faultManagementAgent - Registered MBean with objectname: org.apache.camel:context=jacovt-notebook/camelTestRouteBuilderContext,type=endpoints,name=""spring-event://default""
2011-02-13 03:09:33,017 [ing.Main.main()] INFO  SpringCamelContext   - Total 1 routes, of which 1 is started.
2011-02-13 03:09:33,018 [ing.Main.main()] INFO  SpringCamelContext   - Apache Camel 2.6.0 (CamelContext: camelTestRouteBuilderContext) started in 2.886 seconds
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:33,020 [pool-1-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:09:33,027 [ing.Main.main()] DEBUG MainSupport          - Starting Spring ApplicationContext: org.springframework.context.support.ClassPathXmlApplicationContext@46eff545
2011-02-13 03:09:33,028 [ing.Main.main()] DEBUG SpringCamelContext   - onApplicationEvent: org.springframework.context.event.ContextStartedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@46eff545: startup date [Sun Feb 13 03:09:29 SAST 2011]; root of context hierarchy]
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:43,048 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:45,075 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:45,076 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:09:55,085 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:09:55,137 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:09:55,138 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:05,143 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:05,199 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:05,199 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:15,209 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:15,261 [pool-1-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:15,261 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:10:25,264 [Thread-6       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:10:25,323 [pool-1-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:25,323 [Thread-7       ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:10:31,359 [pool-1-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:10:31,359 [pool-1-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:10:31,360 [pool-1-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:31,825 [Thread-7       ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,367 [Thread-6       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:10:36,367 [Thread-6       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@69d1964d]
2011-02-13 03:10:36,369 [Thread-8       ] INFO  SmppConsumer         - Schedule reconnect after 30000 millis
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SmppConsumer         - Trying to reconnect to smpp://ubankmobile01@127.0.0.1:2775 - attempt #1...
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@69d1964d], session state: CLOSED
2011-02-13 03:11:06,370 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-13 03:11:06,370 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-13 03:11:06,371 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:06,371 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,426 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-13 03:11:08,426 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
2011-02-13 03:11:08,427 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-13 03:11:08,427 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-13 03:11:08,427 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@71b456f], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:08,449 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-13 03:11:18,453 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:18,454 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:18,488 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:18,488 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:28,498 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:28,547 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:28,548 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:38,548 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:38,612 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:38,612 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:48,622 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:48,674 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:48,674 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:11:58,684 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:11:58,733 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-13 03:11:58,733 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-13 03:12:08,743 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-13 03:12:08,795 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-13 03:12:08,795 [pool-2-thread-2] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-13 03:12:08,796 [pool-2-thread-2] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@71b456f]
2011-02-13 03:12:13,802 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-13 03:12:13,802 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@71b456f]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
2011-02-13 03:12:23,744 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop

{code}

After this line nothing seems to happen at all, and all threads are dead. Here is a complete thread dump:

{code}

2011-02-13 03:18:56
Full thread dump Java HotSpot(TM) 64-Bit Server VM (19.0-b09 mixed mode):

""RMI TCP Connection(3)-172.17.5.113"" daemon prio=10 tid=0x0000000042254000 nid=0x236f runnable [0x00007feee3161000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee284830> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8d548> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Connection(2)-172.17.5.113"" daemon prio=10 tid=0x00000000417ff800 nid=0x236d runnable [0x00007feee3262000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000000ee145210> (a java.io.BufferedInputStream)
	at java.io.FilterInputStream.read(FilterInputStream.java:66)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:517)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8cd40> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""JMX server connection timeout 41"" daemon prio=10 tid=0x00000000417ef800 nid=0x236a in Object.wait() [0x00007feee3363000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000edf12f50> (a [I)
	at com.sun.jmx.remote.internal.ServerCommunicatorAdmin$Timeout.run(ServerCommunicatorAdmin.java:150)
	- locked <0x00000000edf12f50> (a [I)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI Scheduler(0)"" daemon prio=10 tid=0x00000000417ee800 nid=0x2369 waiting on condition [0x00007feee3464000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000edc9f6d0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:198)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.DelayQueue.take(DelayQueue.java:164)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:609)
	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:602)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""RMI TCP Connection(1)-172.17.5.113"" daemon prio=10 tid=0x0000000041c90800 nid=0x2368 in Object.wait() [0x00007feee3665000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer.fetchNotifications(ArrayNotificationBuffer.java:417)
	- locked <0x00000000ee15ea40> (a com.sun.jmx.remote.internal.ArrayNotificationBuffer)
	at com.sun.jmx.remote.internal.ArrayNotificationBuffer$ShareBuffer.fetchNotifications(ArrayNotificationBuffer.java:209)
	at com.sun.jmx.remote.internal.ServerNotifForwarder.fetchNotifs(ServerNotifForwarder.java:258)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1227)
	at javax.management.remote.rmi.RMIConnectionImpl$2.run(RMIConnectionImpl.java:1225)
	at javax.management.remote.rmi.RMIConnectionImpl.fetchNotifications(RMIConnectionImpl.java:1231)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)
	at sun.rmi.transport.Transport$1.run(Transport.java:159)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:155)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- <0x00000000edd8c518> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)

""RMI TCP Accept-0"" daemon prio=10 tid=0x0000000041f21000 nid=0x2366 runnable [0x00007feee3ffe000]
   java.lang.Thread.State: RUNNABLE
	at java.net.PlainSocketImpl.socketAccept(Native Method)
	at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:390)
	- locked <0x00000000edca3180> (a java.net.SocksSocketImpl)
	at java.net.ServerSocket.implAccept(ServerSocket.java:462)
	at java.net.ServerSocket.accept(ServerSocket.java:430)
	at sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:34)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:369)
	at sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:341)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Attach Listener"" daemon prio=10 tid=0x0000000041b8b000 nid=0x2364 waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""pool-2-thread-3"" prio=10 tid=0x0000000041b8c000 nid=0x21a9 waiting on condition [0x00007feee3871000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-2"" prio=10 tid=0x0000000041c90000 nid=0x21a3 waiting on condition [0x00007feee3c75000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-2-thread-1"" prio=10 tid=0x0000000041b8a000 nid=0x21a1 waiting on condition [0x00007feee3a73000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ed1215e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x0000000041c8f800 nid=0x2173 waiting on condition [0x00007feee8372000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00000000418fa800 nid=0x2168 waiting on condition [0x00007feee3b74000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00000000418f9000 nid=0x2166 waiting on condition [0x00007feee8170000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000ec845238> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:1987)
	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:399)
	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""org.apache.camel.spring.Main.main()"" prio=10 tid=0x00007feee4420000 nid=0x2164 waiting on condition [0x00007feee8270000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0x00000000f7bd6a28> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.apache.camel.impl.MainSupport.waitUntilCompleted(MainSupport.java:309)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:139)
	at org.apache.camel.impl.MainSupport.run(MainSupport.java:322)
	at org.apache.camel.spring.Main.main(Main.java:72)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:415)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-5"" prio=10 tid=0x00007feee43a2800 nid=0x213b in Object.wait() [0x00007feee8bc9000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-4"" prio=10 tid=0x00007feee42a7800 nid=0x213a in Object.wait() [0x00007feee8cca000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-3"" prio=10 tid=0x00000000419b2000 nid=0x2134 in Object.wait() [0x00007feee8dcb000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-2"" prio=10 tid=0x00007feee449a800 nid=0x2133 in Object.wait() [0x00007feee8ecc000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""pool-1-thread-1"" prio=10 tid=0x00007feee4400000 nid=0x2132 in Object.wait() [0x00007feee8fcd000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at java.lang.Object.wait(Object.java:485)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:316)
	- locked <0x00000000c4b050f8> (a hidden.edu.emory.mathcs.backport.java.util.concurrent.LinkedBlockingQueue$SerializableLock)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:994)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1054)
	at hidden.edu.emory.mathcs.backport.java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:575)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None

""Low Memory Detector"" daemon prio=10 tid=0x0000000041704800 nid=0x212c runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread1"" daemon prio=10 tid=0x00007feee406d800 nid=0x212b waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""CompilerThread0"" daemon prio=10 tid=0x00007feee406a800 nid=0x212a waiting on condition [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Signal Dispatcher"" daemon prio=10 tid=0x00007feee4068800 nid=0x2129 runnable [0x0000000000000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Finalizer"" daemon prio=10 tid=0x00007feee404a000 nid=0x2128 in Object.wait() [0x00007feee98b4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
	- locked <0x00000000c467df20> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

   Locked ownable synchronizers:
	- None

""Reference Handler"" daemon prio=10 tid=0x00007feee4048000 nid=0x2127 in Object.wait() [0x00007feee99b5000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:485)
	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
	- locked <0x00000000c467deb8> (a java.lang.ref.Reference$Lock)

   Locked ownable synchronizers:
	- None

""main"" prio=10 tid=0x00000000416e3000 nid=0x2121 in Object.wait() [0x00007feeee8c4000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000f7bd56c0> (a java.lang.Thread)
	at java.lang.Thread.join(Thread.java:1186)
	- locked <0x00000000f7bd56c0> (a java.lang.Thread)
	at org.apache.camel.maven.RunMojo.joinThread(RunMojo.java:511)
	at org.apache.camel.maven.RunMojo.joinNonDaemonThreads(RunMojo.java:503)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:430)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

   Locked ownable synchronizers:
	- None

""VM Thread"" prio=10 tid=0x00007feee4044000 nid=0x2126 runnable 

""GC task thread#0 (ParallelGC)"" prio=10 tid=0x00000000416f6000 nid=0x2122 runnable 

""GC task thread#1 (ParallelGC)"" prio=10 tid=0x00000000416f8000 nid=0x2123 runnable 

""GC task thread#2 (ParallelGC)"" prio=10 tid=0x00000000416fa000 nid=0x2124 runnable 

""GC task thread#3 (ParallelGC)"" prio=10 tid=0x00000000416fb800 nid=0x2125 runnable 

""VM Periodic Task Thread"" prio=10 tid=0x000000004170f000 nid=0x212d waiting on condition 

JNI global references: 1696
{code}

It seems that this might be triggered by a bug in jsmpp itself (The concurrent modification exception)

Thanks,
---Jaco
muellerc:1297604648:2011-02-13T21:44:08.463+0000:1297604648:2011-02-13T21:44:08.463+0000:Jaco,
thanks for reporting this and your very useful tests. I found an issue in SmppConsumer and fixed it. Could you please test the latest version again.
Thanks,
Christian
jacovt:1297653110:2011-02-14T11:11:50.809+0000:1297653110:2011-02-14T11:11:50.809+0000:Hello Christian,

Just had a quick test, the same problem seems to persist even after the latest bugfix. Here are the logs:

{code}
2011-02-14 12:54:57,128 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@590a8143], session state: CLOSED
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SMPPSession          - Connect and bind to 127.0.0.1 port 2775
2011-02-14 12:54:57,129 [Thread-8       ] INFO  SMPPSession          - Connected
2011-02-14 12:54:57,129 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- CLOSED --> OPEN[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:57,130 [Thread-9       ] INFO  SMPPSession          - Starting PDUReaderWorker with processor degree:3 ...
2011-02-14 12:54:59,726 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:54:59,727 [pool-2-thread-1] DEBUG SMPPSessionOpen      - Bind Response header (30, 80000001, 00000000, 1)
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG AbstractSession      - bind response received
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- OPEN --> BOUND_RX[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:54:59,727 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
2011-02-14 12:54:59,728 [Thread-10      ] INFO  SMPPSession          - Starting EnquireLinkSender
2011-02-14 12:54:59,728 [Thread-8       ] INFO  SmppConsumer         - Reconnected to smpp://ubankmobile01@127.0.0.1:2775
2011-02-14 12:54:59,728 [Thread-8       ] DEBUG SmppConsumer         - Session info: [org.jsmpp.session.SMPPSession@5d748654], session state: BOUND_RX
[WARNING] an additional exception was thrown
java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:127)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1239)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:431)
	at org.apache.camel.component.smpp.SmppConsumer$3.run(SmppConsumer.java:248)
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:00,062 [pool-2-thread-2] DEBUG SMPPSession          - Sending enquire_link_resp
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:10,072 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:11,802 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:11,802 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:21,803 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:24,858 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:24,858 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:34,868 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:36,067 [pool-2-thread-2] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:36,067 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - No activity notified
2011-02-14 12:55:46,076 [Thread-9       ] DEBUG SMPPSession          - Sending enquire link notify
2011-02-14 12:55:48,176 [pool-2-thread-3] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:48,176 [Thread-10      ] DEBUG AbstractSession      - enquire_link response received
2011-02-14 12:55:58,174 [pool-2-thread-1] DEBUG stractSessionContext - Activity notified
2011-02-14 12:55:58,174 [pool-2-thread-1] INFO  ericSMPPSessionBound - Receving unbind request
2011-02-14 12:55:58,175 [pool-2-thread-1] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- BOUND_RX --> UNBOUND[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:55:58,179 [Thread-10      ] INFO  SMPPSession          - EnquireLinkSender stop
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>>>>>>>>>>> STATE CHANGE -- UNBOUND --> CLOSED[org.jsmpp.session.SMPPSession@5d748654]
2011-02-14 12:56:03,138 [Thread-9       ] WARN  SmppConsumer         - Loost connection to: smpp://ubankmobile01@127.0.0.1:2775 - trying to reconnect...
2011-02-14 12:56:03,138 [Thread-9       ] DEBUG SmppConsumer         - >>>>>>>>>> Closing SMPP session [org.jsmpp.session.SMPPSession@5d748654]
[WARNING] an additional exception was thrown
java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.jsmpp.session.AbstractSessionContext.fireStateChanged(AbstractSessionContext.java:76)
	at org.jsmpp.session.SMPPSessionContext.changeState(SMPPSessionContext.java:61)
	at org.jsmpp.session.AbstractSessionContext.close(AbstractSessionContext.java:62)
	at org.jsmpp.session.AbstractSession.close(AbstractSession.java:198)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.readPDU(SMPPSession.java:575)
	at org.jsmpp.session.SMPPSession$PDUReaderWorker.run(SMPPSession.java:539)
{code}

The first exception bugs be a bit, I don't think that the locking / unlocking of the thread is working as expected. Reason I am saying this is that it throws that IllegalMonitorStateException the very first time it reaches the unlock() portion of the reconnect code.

Hope this helps.
---Jaco
jacovt:1297657955:2011-02-14T12:32:35.019+0000:1297657955:2011-02-14T12:32:35.019+0000:Hello Christian,

I have spotted where the IllegalMonitorStateException comes from: in the reconnect method, the recconectLock is locked outside of the new thread that gets spawned to reconnect the smpp session, but the unlock() is done inside of the thread that gets created, meaning that the inner thread does not own the lock.

Would it not make more sense to make this whole reconnect method synchronized?

Thank you! :)
---Jaco
muellerc:1297766859:2011-02-15T18:47:39.199+0000:1297766859:2011-02-15T18:47:39.199+0000:Yeah, well spotted. I wanted check the java doc for the ReentrantLock, but I forgot it... :-(
Anyway, I think I could solve it. The lock is now released in the same thread (Committed r1071012).

Could you check it again, please? And by the way, do you use a open source or free ware tool for your tests which I could also use?

Christian
jacovt:1297823209:2011-02-16T10:26:49.594+0000:1297823209:2011-02-16T10:26:49.594+0000:Christian,

Thanks for the patch. I have just updated and tested it a bit. The ConcurrentModificationException persists. This seems to have something to do with the way the JSMPP session is disposed of (I don't think it actually dies). I can see this when I have visualvm connected to the JMX endoint exposed from camel. For every reconnect the live thread count increases (meaning those old threads never seems to die).

I am in the process of creating a thread dump to attach to this issue so you can have a better look. I could possibly also create the actual dump (including heap and references) that you can inspect?

I am currently not using a simulator for this testing, SMPPsim does not have unbind available from the simulator side. I did ask the developers over there to implement that functionality, but they are lacking time at the moment to do so. I have added you on gtalk to discuss a possible testing scenario from your side. I assume you have gtalk access?

---Jaco
muellerc:1298781813:2011-02-27T12:43:33.904+0000:1298781813:2011-02-27T12:43:33.904+0000:The ConcurrentModificationException is thrown inside the jsmpp library when I remove the sessionStateListener and call unbindAndClose:
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I removed the calls to removeSessionStateListener which should work around this issue:

{code}
session.unbindAndClose();
{code}

This should not be a problem, but without a good test SMSC it's hard to test it.

I will work on a simple SMSC test implementation with which we can automate out integration unit tests.

@Jaco: Could you please test the latest trunk version!?
muellerc:1298781821:2011-02-27T12:43:41.875+0000:1298781821:2011-02-27T12:43:41.875+0000:Committed r1075042
muellerc:1298782717:2011-02-27T12:58:37.217+0000:1298782717:2011-02-27T12:58:37.217+0000:Report the jsmpp issue: http://code.google.com/p/jsmpp/issues/detail?id=93
jacovt:1298867257:2011-02-28T12:27:37.421+0000:1298867257:2011-02-28T12:27:37.421+0000:Hello Christian,

Thanks for the updates and the defect that you logged over at jsmpp.

I had a quick look at the code, and yes, you are right. The bug seems to be inside of jsmpp when removing the session from an array that is not 100% thread safe.

From my side I would suggest we keep the call to session.removeSessionStateListener() in the camel-smpp code. This is the correct behavior from camel's point of view. The ConcurrentModificationException *should* not have an effect on the camel route, but it will definitely keep the thread alive (as witnessed in the stack trace / thread dump a couple of comments above) because of the still-active listener.

Even with the current trunk version of the code (the code that removed session.removeSessionStateListener()) the threads will stay alive, since there is still a listener attached.

As a workaround in the camel-smpp code, I wonder if it would be possible to surround this with a try/catch block to catch the ConcurrentModificationException: 
{code}
session.removeSessionStateListener(this.sessionStateListener);
session.unbindAndClose();
{code}

I know that would not be the cleanest solution in the world, but doing it that way, we can warn the user about the problem (LOG.warn() on exception comes to mind) and the code will not have to change once jsmpp fixes the bug. Or should we rather let the exception boil all the way up and let onException() in camel handle it? We would have to document this on the camel-smpp wiki page though. This will also not fix the memory leak, but at least the code will work out of the box when the jsmpp bug is fixed and the new bundle is dropped into servicemix.

I also suggest we try to get a patch together to fix the jsmpp bug and submit it. I will see if I can get around to do that. That way we can see how quickly we can get the bug fixed in jsmpp and let the nice folk over at servicemix build an updated OSGi-aware bundle for jsmpp.

Ideas?

Thank you,
---Jaco
muellerc:1298889587:2011-02-28T18:39:47.171+0000:1298889587:2011-02-28T18:39:47.171+0000:I will go for the following solution:
{code}
session.removeSessionStateListener(this.sessionStateListener);
// remove this hack after http://code.google.com/p/jsmpp/issues/detail?id=93 is fixed
try {
    Thread.sleep(1000);
    session.unbindAndClose();
} catch (Exception e) {
    LOG.warn(""Could not close session "" + session);
}
session = null;
{code}

With a little sleep which only has an affect if we shutdown the component or if we have to reconnect, the problem could be solved (I will test it when we have a good test SMSC implementation we can use).
However, I added also the try catch block to be sure, the ConcurrentModificationException will not boil all the way up to our user.

Do you agree?

Christian
muellerc:1298889704:2011-02-28T18:41:44.282+0000:1298889704:2011-02-28T18:41:44.282+0000:Committed r1075473"
0,CAMEL-3649,Task,Major,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-02-09 17:51:32+00:00,2011-10-25 11:35:35+00:00,Then we have all pieces in the same component for JDBC using spring JdbcTemplate,"davsclaus:1298256302:2011-02-21T10:45:02.868+0000:1298256302:2011-02-21T10:45:02.868+0000:Christian it would be nice to have this ticket resolved, so its not a blocker for the early Camel 2.7 release.
muellerc:1298302073:2011-02-21T23:27:53.663+0000:1298302073:2011-02-21T23:27:53.663+0000:Committed r1073186
muellerc:1298302096:2011-02-21T23:28:16.538+0000:1298302096:2011-02-21T23:28:16.538+0000:Will update the documentation tomorrow..."
0,CAMEL-3648,New Feature,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-02-09 17:49:20+00:00,2011-10-25 11:35:53+00:00,No Desc,muellerc:1297261309:2011-02-09T22:21:49.806+0000:1297261309:2011-02-09T22:21:49.806+0000:Committed r1069147
0,CAMEL-3647,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-02-09 17:38:15+00:00,2011-10-25 11:35:53+00:00,"The Camel Sonar Pilot lists 4 blocker for Camel [1]. All in org.apache.camel.impl.converter.AnnotationTypeConverterLoader because it use the URL.equals() and URL.hashCode() methods.You can find the explanation in [2] why this is not a good idea. I would like to change it url.toURI()? Any doubt?


[1] http://sonar.apache.org/drilldown/violations/org.apache.camel:camel?priority=BLOCKER#
[2] http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html",muellerc:1297249804:2011-02-09T19:10:04.323+0000:1297249804:2011-02-09T19:10:04.323+0000:Committed r1069034
0,CAMEL-3646,New Feature,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-09 14:05:59+00:00,2011-10-25 11:36:16+00:00,"Add example showing how to use RMI with Camel. For example to have Camel expose a service over RMI in a Camel route.
And a standalone client being able to invoke this service.","davsclaus:1297231917:2011-02-09T14:11:57.371+0000:1297231917:2011-02-09T14:11:57.371+0000:trunk: 1068899.

instructions in README.txt file"
0,CAMEL-3645,Improvement,Minor,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-09 12:41:18+00:00,2011-10-25 11:35:38+00:00,"Currently you would have to do this in Java code to set the remote interfaces.


We need a bit logic in RmiComponent to help us when using XML.",davsclaus:1297226542:2011-02-09T12:42:22.752+0000:1297226542:2011-02-09T12:42:22.752+0000:trunk: 1068866.
0,CAMEL-3644,Improvement,Minor,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-09 11:53:22+00:00,2011-10-25 11:35:47+00:00,"We have listed




    @XmlElement(name = ""endpoint"", required = false)
    private List<CamelEndpointFactoryBean> endpoints;




in the camel-spring, but we dont have getter/setter.


We should enforce this by adding getter/setter in camel-core-xml which we have for most of the stuff.","davsclaus:1297223654:2011-02-09T11:54:14.549+0000:1297223654:2011-02-09T11:54:14.549+0000:Also check camel-blueprint as it may already have the getter/setters.
davsclaus:1297375405:2011-02-11T06:03:25.445+0000:1297375405:2011-02-11T06:03:25.445+0000:trunk: 1069679."
0,CAMEL-3643,Improvement,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Willem Jiang,0,0,2011-02-09 09:14:00+00:00,2011-10-25 11:35:27+00:00,"When using MTOM with CXF endpoints the MTOM-streams are propagated to Camel-Attachments. This is very nice, but has a side effect. By default the the attachment(s) are still there when it is time to send the output, this means the Camel-Attachments will be added to the CXF response as SoapAttachments. Since the response does in general not expects attachments this gives an error (see below).


org.apache.cxf.interceptor.Fault: Could not write attachments.
at org.apache.cxf.interceptor.AttachmentOutInterceptor$AttachmentOutEndingInterceptor.handleMessage(AttachmentOutInterceptor.java:98)[141:org.apache.cxf.bundle:2.2.11.fuse-00-00]
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)[141:org.apache.cxf.bundle:2.2.11.fuse-00-00]
at org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:78)[141:org.apache.cxf.bundle:2.2.11.fuse-00-00]
...


Camel by default copies the entire input message to the output message, including any attachments. Unless a custom processor is put in place that removes these attachments, the CXF consumer endpoint will try to send the attachments back to the client. Since the WSDL did not define any further attachments it raises the error above.","njiang:1297214175:2011-02-09T09:16:15.711+0000:1297214175:2011-02-09T09:16:15.711+0000:When the camel-cxf component is working in POJO data format, we barely access the attachments from the camel message directly as the attachments can be accessed from the message body.
I think we should not exposing the CXF message attachments detail to Camel message, or copying the Camel attachments to the CXF message, if the camel-cxf endpoint is working in POJO data format."
0,CAMEL-3642,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-09 07:57:17+00:00,2011-10-25 11:36:12+00:00,"See forum
http://fusesource.com/forums/thread.jspa?threadID=2654&tstart=0",davsclaus:1297209503:2011-02-09T07:58:23.586+0000:1297209503:2011-02-09T07:58:23.586+0000:trunk: 1068776.
0,CAMEL-3641,New Feature,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-08 15:56:45+00:00,2011-10-25 11:36:03+00:00,"See discussion at dev forum
http://camel.465427.n5.nabble.com/DISCUSS-JMX-Enlisting-MBeans-only-during-starting-routes-tp3371184p3371184.html",davsclaus:1297325055:2011-02-10T16:04:15.858+0000:1297325055:2011-02-10T16:04:15.858+0000:trunk: 1069446.
0,CAMEL-3640,Bug,Minor,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-08 08:51:38+00:00,2011-10-25 11:35:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-camel-lucene-component-tp3369088p3369088.html",davsclaus:1297375765:2011-02-11T06:09:25.445+0000:1297375765:2011-02-11T06:09:25.445+0000:trunk: 1069680.
0,CAMEL-3639,Task,Trivial,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Tracy J. Snell,Tracy J. Snell,0,0,2011-02-07 18:31:08+00:00,2011-10-25 11:35:33+00:00,"Silly short but gets rid of the Sonar issue and the code is slightly cleaner.


 Dodgy - Method uses the same code for two branches : Method org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(boolean, boolean, boolean, boolean, Collection) uses the same code for two branches","davsclaus:1297126597:2011-02-08T08:56:37.206+0000:1297126597:2011-02-08T08:56:37.206+0000:Please categorize this as task as its not a bug
davsclaus:1297373140:2011-02-11T05:25:40.056+0000:1297373140:2011-02-11T05:25:40.056+0000:trunk: 1069674."
0,CAMEL-3638,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Schneider,Christian Schneider,0,0,2011-02-07 14:57:49+00:00,2011-10-25 11:36:01+00:00,"According to Guillaume Nodet we should try to upgrade to the 1.3.4 version of the maven bundle plugin as it simplyfies several osgi related definitions.
I will do a full build before committing but as far as I know we do not test in osgi so we need some testing in osgi too. Perhaps Willem can run some servicemix tests.","davsclaus:1297062105:2011-02-07T15:01:45.730+0000:1297062105:2011-02-07T15:01:45.730+0000:There is osgi and karaf tests in the tests directory. They use pax-exam and run in felix/equinox.
gnodet:1297062154:2011-02-07T15:02:34.456+0000:1297062154:2011-02-07T15:02:34.456+0000:We do have integration tests that use OSGi ...
They may not cover every part, but if it's completly broken, it should show up."
0,CAMEL-3637,Bug,Major,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-02-07 07:47:05+00:00,2011-10-25 11:35:31+00:00,"The Camel Karaf feature camel-eventAdmin is not correct.


The features is described as follow:
<feature name=""camel-eventAdmin"" version=""2.6.0"">
  <feature version=""2.6.0"">camel-core</feature>
  <bundle>mvn:org.apache.camel/camel-eventAdmin/2.6.0</bundle>
</feature>


but the camel-eventAdmin artifact correct name is camel-eventadmin:
http://repo2.maven.org/maven2/org/apache/camel/camel-eventadmin/2.6.0/camel-eventadmin-2.6.0.jar


This typo mistake provides:
Downloading: http://repo1.maven.org/maven2/org/apache/camel/camel-eventAdmin/2.6.0/camel-eventAdmin-2.6.0.jar
[INFO] Unable to find resource 'org.apache.camel:camel-eventAdmin:jar:2.6.0' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Can't resolve bundle org.apache.camel:camel-eventAdmin:jar:2.6.0
[INFO] ------------------------------------------------------------------------


I'm gonna submit a patch to fix that.","davsclaus:1297042880:2011-02-07T09:41:20.364+0000:1297042880:2011-02-07T09:41:20.364+0000:trunk: 1067890.

Thanks for patch."
0,CAMEL-3636,Task,Minor,None,None,"
None
",Resolved,Fixed,None,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-02-07 00:11:05+00:00,2011-02-07 05:36:05+00:00,"Notifications are currently sent to the old amq address camel-dev@actimveq.apache.org.
It should be dev@camel.apache.org",hadrian:1297028165:2011-02-07T05:36:05.000+0000:1297028165:2011-02-07T05:36:05.000+0000:Seems to be working.
0,CAMEL-3635,Improvement,Major,None,,"
None
",Resolved,Duplicate,None,Unassigned,Mark Borner,0,1,2011-02-06 22:30:35+00:00,2011-02-06 23:00:12+00:00,"I'm in a bit of a pickle.  I'm trying to use a JPA endpoint as a consumer.
I first started by using the ""consumer.namedQuery"" option to use Hibernate
HQL from the entity's @NamedQuery annotation.  This worked well and the
endpoint return the persistence entity.


Now I've had to modify my SQL to use the fragment ""FETCH FIRST 1 ROW ONLY"".
This fragment isn't supported by HQL - in fact there is no way that I've
found to limit results using HQL (if there is one, please let me know!).


So I've switched the JPA endpoint to use the ""consumer.nativeQuery"" (which
uses the SQL specified on the nativeQuery parameter).  This works, but per
the documentation, it doesn't return the persistence entity - it returns an
array of String's representing the returned columns of the query.


So I'm stuck - I can't use ""consumer.namedQuery"" and I can't use
""consumer.nativeQuery"" to retrieve the persistence entity.


For reference, here is my native SQL:


select * from GTWY.EXPORT_MESSAGE x where x.STATUS in ('RECEIVED', 'RERUN')
and x.INTERNAL_ID = (select y.INTERNAL_ID from GTWY.EXPORT_MESSAGE y join
GTWY.MESSAGE m on m.INTERNAL_ID = y.INTERNAL_ID where y.HISTORY_ID =
x.HISTORY_ID order by m.CREATED ASC fetch first 1 row only)


I'm wondering why the choice was made to return an array of String's when
using the nativeQuery option?  In QueryBuilder.nativeQuery() it is calling
entityManager.createNativeQuery(nativeQuery).  If it called
EntityManager.createNativeQuery(String sqlString, Class resultClass) or
even EntityManager.createNativeQuery(String sqlString, *String
resultSetMapping*) we could return the actually persistence entity,
correct?  Would you consider making this enhancement?",muellerc:1297004412:2011-02-06T23:00:12.294+0000:1297004412:2011-02-06T23:00:12.294+0000:See CAMEL-3634
0,CAMEL-3634,New Feature,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Müller,Claus Ibsen,0,0,2011-02-06 10:23:11+00:00,2011-10-25 11:35:55+00:00,"See nabble
http://camel.465427.n5.nabble.com/JPA-Quandary-tp3370395p3370395.html","muellerc:1297004155:2011-02-06T22:55:55.080+0000:1297004155:2011-02-06T22:55:55.080+0000:Committed r1067791
muellerc:1297004343:2011-02-06T22:59:03.622+0000:1297004343:2011-02-06T22:59:03.622+0000:Mark, you are welcome to test the patch which I have applied to trunk.
I also update the wiki."
0,CAMEL-3633,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-06 09:48:47+00:00,2011-10-25 11:36:04+00:00,"This is really terrible that Terracotta added a 'malware' kinda feature in Quartz that automatic checks if there is a new version of Quartz. WTF that doesn't work nice in enterprises, where they want to be in control of their communication.


We should force disabling this.


See more details here:
http://forums.terracotta.org/forums/posts/list/3395.page#19058
https://jira.terracotta.org/jira/browse/QTZ-29","davsclaus:1296957453:2011-02-06T09:57:33.643+0000:1296957453:2011-02-06T09:57:33.643+0000:trunk: 1067624.

No more 'phone home' by Quartz.

Wonder if Terracotta slipped it in to collect usage stats! And they enabled it by default, tsk tsk"
0,CAMEL-3632,Improvement,Major,2.6.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,1,4,2011-02-06 07:46:44+00:00,2011-10-25 07:56:41+00:00,"The jms consumer which is not bound to send back a reply, and is not in transacted mode, could leverage the async processing.","davsclaus:1310026277:2011-07-07T16:11:17.186+0000:1310026277:2011-07-07T16:11:17.186+0000:See nabble as well
http://camel.465427.n5.nabble.com/Each-concurrentConsumer-on-JMS-Topic-receives-ALL-msgs-tp4558687p4558687.html
davsclaus:1312858793:2011-08-09T10:59:53.459+0000:1312858793:2011-08-09T10:59:53.459+0000:Okay there is a couple of drawbacks when using async routing engine
- JMS exception listener
- JMS error handler
on the jms consumer endpoint, will not be able to kick in, as the onMessage method will exit when the async routing engine kick ins. So if processing of the exchange failed, then any unhandled exceptions is to be handled by Camel (using org.apache.camel.spi.ExceptionHandler, which will log the exception by default).

Also for a single threaded consumer the order of the processed messages will not be in sequence, as the async routing engine takes over processing the exchange. 

People can turn this on/off using the synchronous option on the JmsEndpoint. We could leave this option as synchronous=true by default. Then people can turn that off, in case they want to leverage the async routing engine.

The benefit is scalability. With this no threads will block and we can process a higher number of messages using the same resources. 
davsclaus:1312864015:2011-08-09T12:26:55.132+0000:1312864015:2011-08-09T12:26:55.132+0000:See discuss on camel @dev
http://camel.465427.n5.nabble.com/DISCUSS-JmsConsumer-support-for-asynchronous-routing-engine-Higher-scalability-tp4681859p4681859.html
davsclaus:1312864075:2011-08-09T12:27:55.143+0000:1312864075:2011-08-09T12:27:55.143+0000:Work in progress patch
davsclaus:1317794626:2011-10-05T14:03:46.397+0000:1317794626:2011-10-05T14:03:46.397+0000:End user requesting this
http://camel.465427.n5.nabble.com/Can-t-get-camel-threads-to-work-tp4872181p4872181.html
ee7arh:1319430754:2011-10-24T12:32:34.303+0000:1319430754:2011-10-24T12:32:34.303+0000:Hi all, we have the following use-case: Our application processes Asynchronous events from a queue using Camel for the routing. We specify XX concurrentThreads available for this queue. If the threads block due to redelivery, it doesn't take long until no more threads are available and our application is effectively unavailable. We could design around this of course but we want to keep things simple. This great new option ""asyncDelayedRedelivery"" would mean our application can continue to serve new requests even when others are delivering and so having it available on JMS InOnly is invaluable to us.

Thanks
Andrew
davsclaus:1319500600:2011-10-25T07:56:40.927+0000:1319500600:2011-10-25T07:56:40.927+0000:There is now a new option asyncConsumer you can enable to let the consumer process the exchange async. See more details on the jms wiki page."
0,CAMEL-3631,Improvement,Major,2.6.0,None,"
None
",Resolved,Later,3.0.0,Ashwin J. Karpe,Claus Ibsen,0,0,2011-02-05 13:01:03+00:00,2013-05-02 02:29:38+00:00,"We should improved the graceful shutdown to be more verbose and provide more detailed information when it appears in-flight exchange(s) appear to be hung.


We have the created timestamp on the exchange, and if we let in flight repo, track each exchange, then we can grab the exchange and thus know how long time it currently has been in-flight. And then if the time is > threshold, we can output that in the logs.


It requires the in flight registry now also keep track of each exchange. We may consider this as an optional feature you should enable, as it requires us to put/remove Exchange into a ConcurrentMap to keep track of each exchange.","davsclaus:1296882115:2011-02-05T13:01:55.125+0000:1296882115:2011-02-05T13:01:55.125+0000:See nabble
http://camel.465427.n5.nabble.com/Getting-rid-of-inflight-changes-tp3366187p3366187.html
akarpe:1301072386:2011-03-26T00:59:46.930+0000:1301072386:2011-03-26T00:59:46.930+0000:Hi Claus & other committer colleagues,

I have added a patch for this particular issue based on the Nabble description and the CAMEL-3631 description for the issue above.

Can you please take a look and let me know what you think. 

I have done all the camel-core unit tests checkstyle checks and the code works fine pretty well under concurrency and debug checks. I have also tried to be optimal since this is a high touch segment of code.

I will add unit tests for DefaultEndpointInflightExchangeData shortly, but would like to see whether this code satisfies the original intent in the issue.
 
Comments and thoughts appreciated...

Cheers,

Ashwin...
akarpe:1301073565:2011-03-26T01:19:25.132+0000:1301073565:2011-03-26T01:19:25.132+0000:Hi,

Please be aware that the logUndeliveredInflightExchanges() code is commented. This patch is not intended for commit. I will uncomment the code of course when I have your comments and feedback. Obviously, I will add unit tests as well. I am working on them right now...

Cheers,

Ashwin...
davsclaus:1301205980:2011-03-27T14:06:20.568+0000:1301205980:2011-03-27T14:06:20.568+0000:Thanks Ashwin.

I had a brief look and I think there are ways we can do this a bit simpler, and also more informative for the end user, so he can get details ""where the msg is stuck"" etc.. So wait committing anything.
davsclaus:1301297696:2011-03-28T15:34:56.991+0000:1301297696:2011-03-28T15:34:56.991+0000:Ashwin I think we should keep the contract as is, but store the Exchange in the inflight registry in the ConcurrentMap instead of just the exchangeId. So the key = exchangeId, value = exchange. That allow us to use the concurrent map with an atomic operation using the putIfAbsent.

Then we can have access to the Exchange during shutdown. And thus we can gather more details such as
- age of exchange
- message history of exchange
- current node / route

And thus be able to add logic which kinda traverse the inflight registry and
- if exchange > XX age &&
- exchange ""stuck"" at same X position since X time -> log
- then log a WARN.

We should not add new SPI interfaces etc. Also we should only add an option for end user to configure on GracefulShudown the XXX threshold for exchange ""stuck"". So the end user can say, eg 5 seconds. So if a message is at the same position > 5 secs then its regarded as stuck. And also there should be an option to set the ""age"" threshold as well. So if the message > 20 sec. then the message is considering being old, and a candidate for being stuck.
akarpe:1303478964:2011-04-22T21:29:24.270+0000:1303478964:2011-04-22T21:29:24.270+0000:Hi Claus,

No problem. I can store the exchange in the ConcurrentMap. I was hesitating to store the exchange itself due to the runtime implications of doing this.

At runtime,this could require a copy of the exchange to be saved in the Map until the exchange was delivered and could lead to significant memory growth if the exchange payloads were quite large. Can you please provide your thoughts on this.

I could definitely redesign the code to not add more interfaces to the SPI.

Cheers,

Ashwin... 
  
davsclaus:1303514766:2011-04-23T07:26:06.272+0000:1303515021:2011-04-23T07:30:21.330+0000:Its just a reference to the Exchange you put in the Map, so it wont eat up memory. However it would do it anyway and thats because of the defensive copy nature in the Camel routing engine (scheduled to be improved in Camel 3.0). The reference stored in the Map would be for the input Exchange. And because of the routing engine would defensively copy to a new Exchange during routing, that reference eat up memory pointing to the input Exchange (which otherwise could get GC'ed). 

So I actually suggest to move this ticket to be resolved after we have improved the routing engine, to avoid the defensive copy of the Exchange during routing.

akarpe:1303804062:2011-04-26T15:47:42.227+0000:1303804062:2011-04-26T15:47:42.227+0000:Hi Claus,

Ok... no worries. I was afraid of these copies and have been burnt by it when using ProducerTemplates to push exchanges to several different destinations using a cache. I was hence very wary of this and implemented my solution the way I did.

I do take you point and if you think this is best implemented after improving the routing engine, then I am happy to stop further work on this issue for the time being.

Cheers,

Ashwin...
akarpe:1303804116:2011-04-26T15:48:36.883+0000:1303804116:2011-04-26T15:48:36.883+0000:Further work on this issue has been temporarily halted until we make improvements to the Camel routing engine
akarpe:1303982729:2011-04-28T17:25:29.312+0000:1303982729:2011-04-28T17:25:29.312+0000:This fix for this issue is postponed until improvements are made to the routing engine in 3.0 to avoid deep copies of exchanges.

This is to avoid degrading the performance of Camel while fixing this issue in the current version"
0,CAMEL-3630,Task,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-05 12:32:29+00:00,2011-10-25 11:35:39+00:00,"As part of the Spring 3.0x upgrade, we can upgrade to SI 2.x as it requires Spring 3.0","rkettelerij:1296882769:2011-02-05T13:12:49.625+0000:1296882769:2011-02-05T13:12:49.625+0000:Claus, I already created CAMEL-3361 some time ago. Can you close/mark one of the two issues as duplicate?
davsclaus:1297406357:2011-02-11T14:39:17.119+0000:1297406357:2011-02-11T14:39:17.119+0000:trunk: 1069819."
0,CAMEL-3629,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Claus Ibsen,0,0,2011-02-05 11:57:41+00:00,2011-10-25 11:35:42+00:00,"In CamelConduit the follow code just creates a new camel context on-demand. This is plain wrong. Any components shouldn't just go around creating new camel contexts. Instead the component should fail if a CamelContext hasn't been injected.




    public CamelContext getCamelContext() {
        if (camelContext == null) {
            getLogger().log(Level.INFO, ""No CamelContext injected, create a default one"");
            camelContext = new DefaultCamelContext();
        }
        return camelContext;
    }",
0,CAMEL-3628,Improvement,Minor,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Carl Johan Erik Edstrom,Claus Ibsen,0,0,2011-02-05 11:55:34+00:00,2011-10-25 11:35:43+00:00,Use slf4j logging instead of JUL logging in camel-cxf.,"tjsnell:1296973291:2011-02-06T14:21:31.278+0000:1296973291:2011-02-06T14:21:31.278+0000:CXF not only uses JUL they require it in some cases when you implement some abstract CXF classes. I've converted all non dependent uses of JUL to slf4j and renamed the remaining loggers JUL_LOG where we still had to use JUL.

Best we can do for now. But only 4 files require JUL now.
davsclaus:1296975016:2011-02-06T14:50:16.460+0000:1296975016:2011-02-06T14:50:16.460+0000:Are you camel-cxf code fully up to date. I get a patch rejected on some files when trying to apply patch from trunk.

{code}
davsclaus:(svn)camel[trunk:1067657]/$ patch -p0 < ~/Downloads/cxf-jul.txt 
patching file components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
Hunk #1 FAILED at 39.
1 out of 9 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/AbstractDataFormatFeature.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/MessageDataFormatFeature.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/feature/PayLoadDataFormatFeature.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java
Hunk #2 FAILED at 47.
1 out of 13 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java
Hunk #2 FAILED at 43.
1 out of 7 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
Hunk #1 FAILED at 63.
1 out of 18 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java
Hunk #1 FAILED at 67.
1 out of 25 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java
Hunk #1 FAILED at 32.
1 out of 9 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfHeaderFilterStrategy.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java
Hunk #1 succeeded at 45 with fuzz 2.
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/DefaultCxfBeanBinding.java
Hunk #1 FAILED at 28.
1 out of 7 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/DefaultCxfBeanBinding.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanDestination.java
Hunk #1 FAILED at 31.
1 out of 4 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanDestination.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTransportFactory.java
Hunk #1 FAILED at 27.
1 out of 2 hunks FAILED -- saving rejects to file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/cxfbean/CxfBeanTransportFactory.java.rej
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/SoapMessageHeaderFilter.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/converter/CxfConverter.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/DataInInterceptor.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/DataOutInterceptor.java
patching file components/camel-cxf/src/main/java/org/apache/camel/component/cxf/util/CxfEndpointUtils.java
patching file components/camel-cxf/src/main/resources/schema/configuration/camel.xsd
patching file components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd
patching file components/camel-cxf/src/main/resources/bus-extensions.xml
{code}
tjsnell:1296993771:2011-02-06T20:02:51.326+0000:1296993771:2011-02-06T20:02:51.326+0000:svn diff was failing to create a usable patch file. Switch to diff and all is well (and got rid of extraneous format change only files).

Let me know if this one fails. Just tested fine for me.
joed:1296996638:2011-02-06T20:50:38.851+0000:1296996638:2011-02-06T20:50:38.851+0000:Applies cleanly on trunk, osgi manifests and imports use 1.5 as version for slf4j.
Tests pass fine.
joed:1296997207:2011-02-06T21:00:07.571+0000:1296997207:2011-02-06T21:00:07.571+0000:Closed, thanks for the patch Tracy."
0,CAMEL-3627,Task,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-05 08:25:04+00:00,2011-10-25 11:35:40+00:00,Groovy 1.7.7 has been released. It's already OSGi compliant.,davsclaus:1296958368:2011-02-06T10:12:48.058+0000:1296958368:2011-02-06T10:12:48.058+0000:trunk: 1067628.
0,CAMEL-3626,Task,Major,2.6.0,None,"
None
",Resolved,Fixed,2.8.0,Ashwin J. Karpe,Hadrian Zbarcea,0,0,2011-02-05 04:03:33+00:00,2011-07-07 09:16:45+00:00,Currently camel uses an ancient <qpid-version>0.5.0</qpid-version>,"davsclaus:1297036831:2011-02-07T08:00:31.297+0000:1297036831:2011-02-07T08:00:31.297+0000:I just noticed in parent/pom.xml there is some osgi version ranges for qpid. So remember to keep that updated.
akarpe:1309859022:2011-07-05T17:43:42.422+0000:1309859022:2011-07-05T17:43:42.422+0000:While performing the upgrade, I noticed that the osgi versions from qpid come from the servicemix bundles set at qpid-0.8.0_2.

In addition these bundles do not contain qpid-broker.jar needed by camel unit tests (currently ignored due to errors, but fixable with latest jars).

Thq Qpid project itself does not use Maven and hence jars need to be manually added to apache repositories and there is currently only version 0.5.0 whose version does not correlate to the current Qpid project version 0.10.

What is the best way to resolve this?

BTW, I have also raised a bug SMX4-875 to seek to address this in the Servicemix project as well. If they update their repo and add a fresh version wit qpid-broker, I can proceed to fix this issue in the cleanest way possible.

I could also do a mvn install of the latest qpid version into the apache repositories, but do not understand the process/permissions for doing so...

Please advise.

Cheers,

Ashwin...
dkulp:1309860106:2011-07-05T18:01:46.908+0000:1309860106:2011-07-05T18:01:46.908+0000:
Actually, in maven central, they have deployed 0.10:

http://repo1.maven.org/maven2/org/apache/qpid/qpid-client/

However, again, it's just the common and client jars and not the broker.   The best coarse of action would be to file an issue with QPID and see if they can get the broker added.   Alternatively, follow the instructions at:

https://docs.sonatype.org/display/Repository/Uploading+3rd-party+Artifacts+to+Maven+Central

to get the 0.10 broker jar added.




jbonofre:1309861932:2011-07-05T18:32:12.645+0000:1309861932:2011-07-05T18:32:12.645+0000:I'm gonna create a new SMX bundle for qpid.
akarpe:1309862272:2011-07-05T18:37:52.364+0000:1309862272:2011-07-05T18:37:52.364+0000:Thanks Dan, I have created a new Improvement request in the Qpid project Jira requesting them to add their jars to Apache and Maven Central repositories. The issue is listed as https://issues.apache.org/jira/browse/QPID-3336

Jean-Baptiste, thanks for helping create the new SMX qpid bundle.

Cheers,

Ashwin...
akarpe:1309862337:2011-07-05T18:38:57.625+0000:1309862337:2011-07-05T18:38:57.625+0000:I will add the jar independently to Maven Central just in case.

- Ashwin...
akarpe:1309867342:2011-07-05T20:02:22.367+0000:1309868110:2011-07-05T20:15:10.135+0000:Tried adding the qpid-broker-0.10.jar to the maven central repo but ran into several issues with lack of javadocs, unverifiable source issues among others.

Unable to add the qpid-broker at this time. The best way forward at the moment is to wait for the Qpid community of for the Servicemix community to load a servicemix/qpid bundle with the qpid-broker-0.10.jar integrated in it.
akarpe:1309868033:2011-07-05T20:13:53.512+0000:1309868033:2011-07-05T20:13:53.512+0000:Modified the camel parent to use latest qpid version 0.10 of the Qpid project.

Commented out qpid-broker dependency which was used by an ignored Unit test.

qpid-broker is not officially released as a jar in Maven Central. The version 0.5.0 was an older version that was missing certain classes. Hence the unit test was not working and marked as ignore.

Once the Qpid community uploads this jar to Maven Central with sources and javadocs, we will then be able to fix the unit test.

Alternatively if Sevicemix releases an OSGi bundle version of the jar, we can then fix the unit test. Is continues to be marked as @Ignore as in previous versions. 
akarpe:1309868695:2011-07-05T20:24:55.286+0000:1309868757:2011-07-05T20:25:57.652+0000:Fixed and released to the Camel trunk as version r1143191

Updated the qpid version to 0.10 (latest release version for Qpid). 

In this fix the qpid-broker has been commented out since it is used by an ignored unit test and an official jar is not currently available.
njiang:1309996090:2011-07-07T07:48:10.937+0000:1309996109:2011-07-07T07:48:29.566+0000:we also need to provide an OSGi bundle for Qpid in ServiceMix if the Qpid 0.10 is not OSGi ready.
jbonofre:1310001405:2011-07-07T09:16:45.807+0000:1310001405:2011-07-07T09:16:45.807+0000:Yes, I do it also. Thanks for the reminder Willem."
0,CAMEL-3625,Improvement,Minor,None,None,"
None
",Resolved,Not A Problem,2.11.0,Carl Johan Erik Edstrom,Carl Johan Erik Edstrom,2,2,2011-02-04 22:13:39+00:00,2012-08-15 17:25:40+00:00,"When running camel-components tests in Intellij IDEA you frequently run into



java.lang.NoClassDefFoundError: org/apache/camel/core/xml/CamelJMXAgentDefinition
	at org.apache.camel.spring.CamelBeanPostProcessor.canPostProcessBean(CamelBeanPostProcessor.java:209)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:89)
	at org.apache.camel.test.junit4.CamelTestSupport.postProcessTest(CamelTestSupport.java:190)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:133)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65)




The following would handle the issue 



Index: components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java
===================================================================
--- components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java	(revision 1065694)
+++ components/camel-spring/src/main/java/org/apache/camel/spring/CamelBeanPostProcessor.java	(revision )
@@ -192,6 +192,17 @@
      * @return true to process it
      */
     protected boolean canPostProcessBean(Object bean, String beanName) {
+
+         //Let us check if we can load this class...
+        ClassLoader classLoader = getCamelContext().getClassResolver().getClass().getClassLoader();
+
+        try {
+            Class aClass = classLoader.loadClass(""org.apache.camel.core.xml.CamelJMXAgentDefinition"");
+            //Keep going.
+        } catch (ClassNotFoundException e) {
+           return false;
+        }
+
         // the JMXAgent is a bit strange and causes Spring issues if we let it being
         // post processed by this one. It does not need it anyway so we are good to go.
         if (bean instanceof CamelJMXAgentDefinition) {","davsclaus:1301714130:2011-04-02T11:15:30.869+0000:1301714130:2011-04-02T11:15:30.869+0000:I have not seen this issue before. Can you provide an example of a component which does that?
joed:1302078911:2011-04-06T16:35:11.664+0000:1302078911:2011-04-06T16:35:11.664+0000:Camel - cxf
charly:1302081079:2011-04-06T17:11:19.347+0000:1302081079:2011-04-06T17:11:19.347+0000:I ran into this in the camel-jdbc component also.
rkettelerij:1307271392:2011-06-05T18:56:32.924+0000:1307274695:2011-06-05T19:51:35.619+0000:I've encountered this issue multiple times in IntelliJ (v10.0.3 CE on OSX 10.6.7 with JDK 10.6.24). Pretty annoying. 

Johan's fix resolves it, but I'm a little hesitant to commit the fix because it doesn't take Camel's {{ClassResolver}} abstracting into account. Sure it calls {{getCamelContext().getClassResolver().getClass().getClassLoader()}} but this isn't any different from {{this.getClass().getClassLoader()}}. Perhaps we can introduce a system property that devs can enable in their IntelliJ configuration:

{code}         //Let us check if we can load this class...
        if (System.getProperty(""camel.enableIntellijWorkaround"") != null) {
            ClassLoader classLoader = getClass().getClassLoader();
            try {
                Class aClass = classLoader.loadClass(""org.apache.camel.core.xml.CamelJMXAgentDefinition"");
            //Keep going.
            } catch (ClassNotFoundException e) {
                return false;
            }
        }
{code}

Of course all of this won't be necessary if someone know the root cause...
boday:1321526740:2011-11-17T18:45:40.081+0000:1321526740:2011-11-17T18:45:40.081+0000:any update on this?  I've been seeing this issue as well...we should at least add the property approach suggested by Richard
joed:1321526894:2011-11-17T18:48:14.902+0000:1321526894:2011-11-17T18:48:14.902+0000:I like Richards update as well :) What I did was out of pure anger so it may not have been the sexiest.
joed:1321528323:2011-11-17T19:12:03.983+0000:1321528323:2011-11-17T19:12:03.983+0000:What about just doing this?
if( getCamelContext().getClassResolver().resolveClass(""org.apache.camel.core.xml.CamelJMXAgentDefinition"") == null) {
            return false;
        }

davsclaus:1341534547:2012-07-06T08:29:07.897+0000:1341534547:2012-07-06T08:29:07.897+0000:Can people try with Camel 2.10 and latest IDEA.

I have newer seen this problem, and I have been using IDEA a lot.
boday:1342165277:2012-07-13T15:41:17.923+0000:1342165277:2012-07-13T15:41:17.923+0000:I haven't seen this issue in a while either...been using IDEA 11.0.2 on Mac
davsclaus:1345022740:2012-08-15T17:25:40.924+0000:1345022740:2012-08-15T17:25:40.924+0000:Lets assume this seems working on later IDEA release. "
0,CAMEL-3624,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-02-04 17:37:54+00:00,2011-10-25 11:35:42+00:00,See Nabble,"muellerc:1296812950:2011-02-04T17:49:10.952+0000:1296812950:2011-02-04T17:49:10.952+0000:Committed r1067240
muellerc:1296813080:2011-02-04T17:51:20.598+0000:1296813080:2011-02-04T17:51:20.598+0000:Alex, thanks for reporting this. I applied a fix on trunk. Feel free to test whether it resolves your issue. Unfortunately I don't have a workaround for your for the actual version(s).
madmind:1296842096:2011-02-05T01:54:56.339+0000:1296842148:2011-02-05T01:55:48.674+0000:Added your changes to camel-smpp 2.6.0, recompiled, works great.
Thank you a lot!
muellerc:1296868316:2011-02-05T09:11:56.547+0000:1296868316:2011-02-05T09:11:56.547+0000:I'm pleased I could resolve your issue (I didn't thought recompiling camel-smpp 2.6.0 is a solution for you...)."
0,CAMEL-3623,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-04 14:51:15+00:00,2011-04-08 16:18:15+00:00,"Redeliveries is using a scheduled thread pool if asyncDelayed is enabled.
We should allow yo configure the thread pool size for that. Currently it uses the default profile which is 10.","davsclaus:1296802289:2011-02-04T14:51:29.313+0000:1296802289:2011-02-04T14:51:29.313+0000:See nabble
http://camel.465427.n5.nabble.com/Message-blocks-route-until-all-redelivery-attempts-are-exhausted-tp472319p472319.html
davsclaus:1302250695:2011-04-08T16:18:15.121+0000:1302250695:2011-04-08T16:18:15.121+0000:There is an executorServiceRef which can be configured on error handlers."
0,CAMEL-3622,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Tracy J. Snell,Tracy J. Snell,0,0,2011-02-04 14:45:44+00:00,2013-05-02 02:29:36+00:00,I converted camel-jetty to use AvailablePortFinder instead of a random port over 23000.,"tjsnell:1296822919:2011-02-04T20:35:19.205+0000:1296822919:2011-02-04T20:35:19.205+0000:Note camel-3593 must be installed first.
davsclaus:1298327540:2011-02-22T06:32:20.674+0000:1298327540:2011-02-22T06:32:20.674+0000:Tracy when you are a committer you can do this yourself :)
tjsnell:1303022051:2011-04-17T14:34:11.069+0000:1303022051:2011-04-17T14:34:11.069+0000:Committed revision 1094149.
"
0,CAMEL-3621,New Feature,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Jean-Baptiste Onofré,0,0,2011-02-04 13:17:21+00:00,2015-07-09 11:10:18+00:00,"We added a new feature in Karaf to be able to display detailed information about a bundle.
The purpose is to create a kind of man page for the bundle.


I could be helpful to add this kind of resources into Camel bundles.","jbonofre:1296796738:2011-02-04T13:18:58.648+0000:1296796738:2011-02-04T13:18:58.648+0000:Here is an example of bundle.info file including ASCII special characters:
http://svn.apache.org/repos/asf/servicemix/smx4/bundles/trunk/commons-jexl-1.1/src/main/resources/OSGI-INF/bundle.info"
0,CAMEL-3620,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Guillaume Nodet,Gert Vanthienen,1,0,2011-02-03 20:49:12+00:00,2011-10-25 11:35:51+00:00,"When a Blueprint file contains both a route and a component bean definition, the Camel routes get started correct but the Blueprint container will go to status 'GracePeriod'.  


An example:



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint
    xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""
      http://www.osgi.org/xmlns/blueprint/v1.0.0
      http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
      <route>
        <from uri=""file:activemq/input""/>
        <to uri=""file:activemq/output""/>

        <setBody>
          <simple>
            FileMovedEvent(file: ${file:name}, timestamp: ${date:now:hh:MM:ss.SSS})
          </simple>
        </setBody>
        <to uri=""amq://events"" />
      </route>
    </camelContext>

    <bean id=""amq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
      <property name=""brokerURL"" value=""vm://default?create=false&amp;waitForStart=10000""/>
    </bean>

</blueprint>




After the 5 minute time-out period, the routes are stopped and we end up with this message in the log file.



Unable to start blueprint container for bundle activemq2.xml due to unresolved dependencies 
  [(&(component=log)(objectClass=org.apache.camel.spi.ComponentResolver)), 
   (&(component=amq)(objectClass=org.apache.camel.spi.ComponentResolver))]","davsclaus:1298327674:2011-02-22T06:34:34.268+0000:1298327674:2011-02-22T06:34:34.268+0000:Guillaume do you have a clue why this happen?
justinbeck:1298478786:2011-02-24T00:33:06.797+0000:1298478786:2011-02-24T00:33:06.797+0000:I experienced this today.  It appeared to be unrelated to whether I defined components in the same file as routes.  My temporary fix was to add ""blueprint.graceperiod:=false"" to the Bundle-SymbolicName in the pom for this bundle.
gnodet:1298503539:2011-02-24T07:25:39.480+0000:1298503624:2011-02-24T07:27:04.607+0000:Yes, I understand what's going on.  I'll see if I can do something, but I'm not sure that there's a nice way out.

@Justin: if you define the component in a different bundle that should work, but splitting into multiples blueprint files in the same bundle has no effect at all for blueprint.
gnodet:1298514357:2011-02-24T10:25:57.562+0000:1298514357:2011-02-24T10:25:57.562+0000:Fixed by switching the service reference to optional if there's a bean defined with the same name."
0,CAMEL-3619,Improvement,Minor,2.4.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Xavier Coulon,0,1,2011-02-03 15:10:39+00:00,2011-09-10 05:45:40+00:00,"The example below contains a syntax error that is not detected at runtime (a '.' before the 'regex' operator at line 3) : 



 <choice> 
  <when> 
    <simple>${in.body}.regex '^D1.*$'</simple> 
    <to uri=""seda:dataintegration.filtered.elements"" /> 
  </when> 
  <otherwise> 
    <to uri=""seda:dataintegration.ignored.elements"" /> 
  </otherwise> 
</choice>



In that situation, all messages are sent to the first endpoint, no matter what their body contains.


See the discussion thread : http://camel.465427.n5.nabble.com/Filtering-messages-with-simple-regex-td3369198.html","davsclaus:1309139462:2011-06-27T09:51:02.729+0000:1309139473:2011-06-27T09:51:13.312+0000:We may consider a real grammar for the simple language.
davsclaus:1315604740:2011-09-10T05:45:40.503+0000:1315604740:2011-09-10T05:45:40.503+0000:The simple language now has improved syntax parser which reports errors with precise detail what is wrong and where the problem is"
0,CAMEL-3618,Task,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-03 14:17:45+00:00,2011-10-25 11:35:50+00:00,"Jackson 1.7 has been released. We should upgrade to it, eg 1.7.1 is the latest currently
http://jackson.codehaus.org/",davsclaus:1298328102:2011-02-22T06:41:42.411+0000:1298328102:2011-02-22T06:41:42.411+0000:trunk: 1073229.
0,CAMEL-3617,Bug,Major,"2.5.0, 2.6.0",2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Jean-Michel Morel,0,0,2011-02-03 14:00:24+00:00,2011-10-25 11:35:30+00:00,"Unless I miss a point, when I use the following endpoint, the file:name value is incorrect and is equal to file:absolute.path


<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&include=.*\.dat&move=${queue.done.folder}/$simple

{file:name}

&moveFailed=${queue.failed.folder}/$simple

{file:name}

"" />


${queue.input.folder}, ${queue.done.folder} and ${queue.failed.folder} are absolute paths resolved by Spring.


In fact, Camel tries to move the file to ${queue.done.folder}/${queue.input.folder}/$simple

{file:name}

I've also tried using $simple

{header.CamelFileName}

 instead of $simple

{file:name}

 and it gives the same result.


For now, I've found a workaround using a processor which put the CamelFileName header value into a ""destFile"" property 
<endpoint id=""fileEndpoint"" uri=""file:${queue.input.folder}?recursive=true&include=.*\.dat&move=${queue.done.folder}/$simple

{property.destFile}&moveFailed=${queue.failed.folder}/$simple{property.destFile}

"" />","davsclaus:1296718521:2011-02-03T15:35:21.285+0000:1296718521:2011-02-03T15:35:21.285+0000:Can you try with Camel 2.6 which has been released?
jmmorel:1296778354:2011-02-04T08:12:34.478+0000:1296778354:2011-02-04T08:12:34.478+0000:this doesn't work either with 2.6.0.
davsclaus:1296778787:2011-02-04T08:19:47.186+0000:1296778787:2011-02-04T08:19:47.186+0000:Can you post an example of the paths from
- ${queue.input.folder}
- ${queue.done.folder}

And when you drop a file in the input folder, is that in the ""root"" or in a sub folder? You have recursive=true enabled.
davsclaus:1296782499:2011-02-04T09:21:39.689+0000:1296782499:2011-02-04T09:21:39.689+0000:I found the problem, which happens when using absolute paths. There was an issue resolving the relative name of ${file:name} which didn't work properly and the name was computed as the absolute name instead.
davsclaus:1296784626:2011-02-04T09:57:06.051+0000:1296784626:2011-02-04T09:57:06.051+0000:trunk: 1067124.
davsclaus:1296791312:2011-02-04T11:48:32.955+0000:1296791312:2011-02-04T11:48:32.955+0000:And this fixes a test on windows: 1067159
davsclaus:1296791344:2011-02-04T11:49:04.416+0000:1296791344:2011-02-04T11:49:04.416+0000:This should be fixed on trunk now."
0,CAMEL-3616,Bug,Major,"2.6.0, 2.7.0",2.7.0,"
None
",Closed,Fixed,2.7.0,Robert Davies,Robert Davies,0,0,2011-02-02 15:04:33+00:00,2011-10-25 11:35:46+00:00,No Desc,rajdavies:1296630450:2011-02-02T15:07:30.126+0000:1296630450:2011-02-02T15:07:30.126+0000:Fixed by SVN revision 1066494
0,CAMEL-3615,Task,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Claus Ibsen,0,0,2011-02-02 09:57:42+00:00,2011-02-03 19:03:18+00:00,We should release camel-extra 2.6.0 which is upgraded to use camel 2.6.,"hekonsek:1296691464:2011-02-03T08:04:24.124+0000:1296691464:2011-02-03T08:04:24.124+0000:Camel-extra 2.6.0 artifacts released.

Now I need only to upgrade version of project to 2.7-SNAPSHOT (i.e. migrate commons-logging to SLF4J).
hekonsek:1296730998:2011-02-03T19:03:18.894+0000:1296730998:2011-02-03T19:03:18.894+0000:Migrated to SLF4J and upgraded version to 2.7-SNAPSHOT."
0,CAMEL-3584,Bug,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,1,1,2011-01-24 15:17:07+00:00,2011-10-25 11:35:48+00:00,"See nabble
http://camel.465427.n5.nabble.com/Using-Splitter-and-file-producer-with-option-fileExist-Append-failed-tp3353618p3353618.html


We need to synchronize on the file name to avoid concurrent writes to the same file.","davsclaus:1295853474:2011-01-24T15:17:54.517+0000:1295853474:2011-01-24T15:17:54.517+0000:The workaround is to use {{threads(1)}} before the file endpoint to force single threaded access to the file producer.
davsclaus:1297150524:2011-02-08T15:35:24.451+0000:1297150524:2011-02-08T15:35:24.451+0000:trunk: 1068443."
0,CAMEL-3583,Task,Major,None,2.8.0,"
None
",Resolved,Duplicate,2.8.0,Unassigned,Claus Ibsen,0,0,2011-01-24 14:54:04+00:00,2011-06-27 09:53:22+00:00,"This prevents test failures due ""port number in use"" failures due using hardcoded port numbers.


See camel-netty how we have implement a dynamic port number assignment.


The Apache CXF project itself has also some support for this. This may be worth checking. Dan Kulp knows more about that at the CXF side.",
0,CAMEL-3582,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-24 14:30:29+00:00,2011-06-10 14:12:58+00:00,"Double check the cleanup logic when Camel shutdown that it unregister all MBeans.


In the JMX based unit tests add logic to ""cleanup"" JMX before tests starts so we can reliable perform tests. It may oddly fail on CI servers or whatnot due sideeffects from other failed tests.",davsclaus:1307686378:2011-06-10T14:12:58.198+0000:1307686378:2011-06-10T14:12:58.198+0000:The JMX tests are fine now. 
0,CAMEL-3581,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Schneider,Christian Schneider,0,0,2011-01-24 13:38:05+00:00,2011-10-25 11:36:05+00:00,"When calling a CXF service from a camel route the reponse code from CXF should be set on the camel exachange.


Currently this is not done. So when CXF sets the reponse code to e.g. 403 camel still sends 200 and the client will not be able to work with this reponse.",
0,CAMEL-3580,Improvement,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Stephan Siano,0,0,2011-01-24 13:03:17+00:00,2011-10-25 11:35:26+00:00,"In the current implementation a cxfEndpoint in PAYLOAD mode will only be able to communicate with another cxfEndpoint but not with any other endpoint like xslt without explicit type conversion. This happens because cxfEndpoints in PAYLOAD mode require payloads of the CXFPayload type and there are no type converters for this type.


Since the CXFPayload type is actually less or more a wrapped DOM tree, it is pretty easy to provide a set of type converters for this datatype (reusing the existing type converters for DOM elements). The attached patch does this.","njiang:1296432688:2011-01-31T08:11:28.637+0000:1296432688:2011-01-31T08:11:28.637+0000:Applied patch with thanks Stephan, also fixed some Check style issues."
0,CAMEL-3579,Improvement,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Unassigned,Sergey Zhemzhitsky,0,0,2011-01-23 14:26:36+00:00,2011-10-25 11:35:46+00:00,"Current implementation of camel-quartz component does not allow to use multiple quartz schedulers because of static ""scheduler"" and ""JOBS"" fields in the QuartzComponent.
Moreover in the OSGi environment it is not possible to configure a separate scheduler per bundle.","szhemzhitsky:1295764400:2011-01-23T14:33:20.139+0000:1295764434:2011-01-23T14:33:54.366+0000:The behavior of the attached patch allows to
1. use one scheduler per camel context by default
2. use multiple schedulers in the same camel context by means of setScheduler(Scheduler)  and setFactory(SchedulerFactory) methods because ""scheduler"" and ""JOBS"" fields are no longer static
3. use different schedulers in separate bundles in the OSGi environment for the same reason ( ""scheduler"" and ""JOBS"" are not static)
davsclaus:1295766445:2011-01-23T15:07:25.010+0000:1295766445:2011-01-23T15:07:25.010+0000:This is by design that one scheduler is enforced.
davsclaus:1295767391:2011-01-23T15:23:11.668+0000:1295767391:2011-01-23T15:23:11.668+0000:The patch looks fairly okay. Lets take a look in Camel 2.7.

Would like some more unit testing, especially in OSGi environments.

szhemzhitsky:1295767776:2011-01-23T15:29:36.570+0000:1295767776:2011-01-23T15:29:36.570+0000:What was the reason to enforce a single scheduler? 
For example in an OSGi environment or any other environment where there are multiple application I would expect a separate configuration/scheduler per application.
In the current implementation one application can influence other apps by invoking setScheduler(final Scheduler scheduler). I think it is not an expected behavior. 
Please correct me if I'm wrong.


szhemzhitsky:1295771329:2011-01-23T16:28:49.520+0000:1295771329:2011-01-23T16:28:49.520+0000:>> Would like some more unit testing, especially in OSGi environments
It would be nice. 

Thanks a lot.
davsclaus:1296957368:2011-02-06T09:56:08.260+0000:1296957368:2011-02-06T09:56:08.260+0000:Thanks for the patch Sergey.

trunk: 1067624.

I did some tests on OSGi and managed to get it working there as well.
szhemzhitsky:1297032733:2011-02-07T06:52:13.416+0000:1297032733:2011-02-07T06:52:13.416+0000:You're welcome )"
0,CAMEL-3578,New Feature,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,1,1,2011-01-23 12:31:49+00:00,2011-10-25 11:35:55+00:00,"See nabble
http://camel.465427.n5.nabble.com/Unit-Testing-Route-td3284803.html


The idea is to be able to mock any endpoint on a route and thus be able to set expectations.
In the 2.x architecture we will have to implement this using the adviceWith as the route must be re-processed so we can add the interceptor logic to mock
any endpoints.


In Camel 3.x this could be applied dynamically on the Channel.","davsclaus:1295759372:2011-01-23T13:09:32.313+0000:1295759372:2011-01-23T13:09:32.313+0000:I got the following experimental working.

Notice we use an {{AdviceWithRouteBuilder}} which has extended features such as the {{mockEndpoints()}} which tell Camel to mock all endpoints.
The mocks will have the naming scheme {{mock:uri}} here {{uri}} was the real endpoint uri. 

Notice the example only has one mock endpoint in the route from the start, which is {{""mock:result""}}.
We could in fact remove it and the route would not have any mocks from the start.

{code}
    // START SNIPPET: e1
    public void testAdvisedMockEndpoints() throws Exception {
        // advice the first route using the inlined AdviceWith route builder
        // which has extended capabilities than the regular route builder
        context.getRouteDefinitions().get(0).adviceWith(context, new AdviceWithRouteBuilder() {
            @Override
            public void configure() throws Exception {
                // mock all endpoints
                mockEndpoints();
            }
        });

        getMockEndpoint(""mock:direct://start"").expectedBodiesReceived(""Hello World"");
        getMockEndpoint(""mock:direct://foo"").expectedBodiesReceived(""Hello World"");
        getMockEndpoint(""mock:log://foo"").expectedBodiesReceived(""Bye World"");
        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Bye World"");

        template.sendBody(""direct:start"", ""Hello World"");

        assertMockEndpointsSatisfied();
    }
    // END SNIPPET: e1

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").to(""direct:foo"").to(""log:foo"").to(""mock:result"");

                from(""direct:foo"").transform(constant(""Bye World""));
            }
        };
    }
{code}
davsclaus:1295831610:2011-01-24T09:13:30.422+0000:1295831636:2011-01-24T09:13:56.398+0000:In Spring XML you can add a spring bean to enable mocking
{code:xml}
    <!-- bean which enables mocking all endpoints -->
    <bean id=""mockAllEndpoints"" class=""org.apache.camel.impl.InterceptSendToMockEndpointStrategy""/>

    <!-- the camel context with the routs we want to test -->
    <camelContext xmlns=""http://camel.apache.org/schema/spring"">

        <route>
            <from uri=""direct:start""/>
            <to uri=""direct:foo""/>
            <to uri=""log:foo""/>
            <to uri=""mock:result""/>
        </route>

        <route>
            <from uri=""direct:foo""/>
            <transform>
                <constant>Bye World</constant>
            </transform>
        </route>

    </camelContext>
{code}

It supports a pattern so you can for example say to only mock all log endpoints:
{code:xml}
<bean id=""mockAllEndpoints"" class=""org.apache.camel.impl.InterceptSendToMockEndpointStrategy"">
      <constructor-arg index=""0"" name=""log*""/>
</bean>
{code}

davsclaus:1295831727:2011-01-24T09:15:27.891+0000:1295831727:2011-01-24T09:15:27.891+0000:Camel will log at INFO level the endpoints it mocks
{code}
2011-01-24 10:13:30,720 [main           ] INFO  ceptSendToMockEndpointStrategy - Adviced endpoint [direct://start] with mock endpoint [mock:direct:start]
2011-01-24 10:13:30,790 [main           ] INFO  ceptSendToMockEndpointStrategy - Adviced endpoint [direct://foo] with mock endpoint [mock:direct:foo]
2011-01-24 10:13:30,978 [main           ] INFO  ceptSendToMockEndpointStrategy - Adviced endpoint [log://foo] with mock endpoint [mock:log:foo]
{code}
davsclaus:1295832249:2011-01-24T09:24:09.698+0000:1295832249:2011-01-24T09:24:09.698+0000:The Spring XML version supports using include, so you can leave the original XML file untouched

For example if that file is named {{camel-route.xml}}, you can add a 2nd file, eg {{camel-test.xml}} as shown below:
{code:xml}
    <import resource=""camel-route.xml""/>

    <!-- bean which enables mocking all endpoints -->
    <bean id=""mockAllEndpoints"" class=""org.apache.camel.impl.InterceptSendToMockEndpointStrategy""/>
{code}

Then boot-up the {{camel-test.xml}} file as a plain spring app for testing.
davsclaus:1296199934:2011-01-28T15:32:14.570+0000:1296199934:2011-01-28T15:32:14.570+0000:trunk: 1064732.

Need wiki documentation

davsclaus:1296352252:2011-01-30T09:50:52.304+0000:1296352252:2011-01-30T09:50:52.304+0000:Documentation updated."
0,CAMEL-3577,Improvement,Minor,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-23 12:02:39+00:00,2011-10-25 11:36:17+00:00,"Usually end users of ProducerTemplate use the synchronous API. And thus we should lazy initialize the executor service if needed, when using the asyncXXX methods.",davsclaus:1296436803:2011-01-31T09:20:03.502+0000:1296436803:2011-01-31T09:20:03.502+0000:trunk: 1065534.
0,CAMEL-3576,Improvement,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-22 08:23:42+00:00,2011-10-25 11:36:12+00:00,"When using camel-jms the consumers dont provide a default task executor. That means spring just creates a thread manually and dont reuse the thread.


We should provided a task executor from camel using the ExecutorServiceStrategy. This allows us to use human readable thread names which can provide details about the consumer. The thread pool is also managed and even a 3rd party provider can manage thread creation.


This only works when using Spring 3 as the task executor API is now aligned with the executor service api from the JDK.
For Spring 2.x users we should not do this. We will then have to detect the spring version in use.","davsclaus:1296969912:2011-02-06T13:25:12.042+0000:1296969912:2011-02-06T13:25:12.042+0000:trunk: 1067658.
davsclaus:1296977058:2011-02-06T15:24:18.810+0000:1296977058:2011-02-06T15:24:18.810+0000:trunk: 1067682.

Don't use thread pool for single threaded reply manager as Spring DMLC is a bit pants as it will keep using new tasks every second when idle, and that just confuses people, as task count will grow very large."
0,CAMEL-3575,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Ashwin J. Karpe,Ricardo Veguilla,0,0,2011-01-21 19:37:37+00:00,2011-10-25 11:35:30+00:00,"The current implementation of ScheuledRoutePolicy only supports one type of action (start,stop,resume,pause) for only one route.  If, for example,  you attempt to configure a CronScheduleRoutePolicy with a routeStartTime and routeStopTime, only the one will by handled because ScheduleRoutePolicy (super-class of CronScheduleRoutePolicy) only store one action and one route in the SchedulerContext:


 protected void loadCallbackDataIntoSchedulerContext(Action action, Route route) throws SchedulerException {
       getScheduler().getContext().put(SCHEDULED_ACTION, action);
        getScheduler().getContext().put(SCHEDULED_ROUTE, route);
}


with the effect of creating two timers (one for startTime, the other for stopTime) that execute the same action (the last call to scheduleRoute).","rveguilla:1295610024:2011-01-21T19:40:24.221+0000:1295610024:2011-01-21T19:40:24.221+0000:The following patch is a preliminary solution which stores ScheduledJobState info (action and route) using the jobDetail.getName() as key. 
davsclaus:1295613226:2011-01-21T20:33:46.849+0000:1295613226:2011-01-21T20:33:46.849+0000:We have code freeze on the trunk, so we will look at this in the next release
akarpe:1296054585:2011-01-26T23:09:45.816+0000:1296054756:2011-01-26T23:12:36.767+0000:Hi,

I am not sure that this is an issue... It is indeed possible to set a start and stop time using a single policy for a given route. The only difference is that it sets two separate triggers to handle the start and stop based on my understanding. I will create unit tests to test if this is an issue and validate this behavior and if needed use the patch above to fix it if it does the trick.

The patch above is missing unit tests to validate that it indeed works...

There is however a problem in being able to apply multiple policies (policy lists on a given route in CAMEL-3254).

I will be working on this over the next few days and will apply a fix for this as well as CAMEL-3254 in 2.7.0, following the release of 2.6.0

Cheers,

Ashwin...

P.S: Please hold off on applying the above patch...

akarpe:1296110548:2011-01-27T14:42:28.318+0000:1296110548:2011-01-27T14:42:28.318+0000:Hi,

I confirmed that this is an issue with a unit test. Will look into the patch and see if it can be applied without sideeffects.

Cheers,

Ashwin...
akarpe:1296114108:2011-01-27T15:41:48.914+0000:1296114108:2011-01-27T15:41:48.914+0000:Thanks to Ricardo Veguilla for the patch.

Fix applied along with a unit test and removal of an unnecessary Routebuilder import in ScheduledJobState.

Committed to the Camel trunk as revision r1064154.

Cheers,

Ashwin...


rveguilla:1296207267:2011-01-28T17:34:27.002+0000:1296207267:2011-01-28T17:34:27.002+0000:Ashwin, should this issue be reclassified as a bug?

Anyway, thanks for your prompt response.
akarpe:1296225041:2011-01-28T22:30:41.322+0000:1296225041:2011-01-28T22:30:41.322+0000:Reclassified as a bug and closed..."
0,CAMEL-3574,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Tarun Ramakrishna Elankath,0,0,2011-01-21 14:44:51+00:00,2011-10-25 11:36:19+00:00,"<redeliveryPolicy> doesn't support the 'id' attribute, see 'tns:redeliveryPolicyDefinition"" in camel-spring.xsd. It has a 'ref' attribute definition, indicating that re-use is meant by intent. But an  'id' attribute definition is missing. This prevents a <redeliveryPolicy> from being re-used across multiple <errorHandler>'s.","davsclaus:1295594324:2011-01-21T15:18:44.883+0000:1295594324:2011-01-21T15:18:44.883+0000:See nabble
http://camel.465427.n5.nabble.com/How-to-re-use-same-redeliveryPolicy-across-multiple-errorHandler-s-tp3351423p3351423.html

This should also be possible to define in <routesContext>
davsclaus:1298328317:2011-02-22T06:45:17.989+0000:1298328317:2011-02-22T06:45:17.989+0000:We have introduced a <redeliveryPolicyProfile> which you can refer to reuse. See release notes which has a link to more details."
0,CAMEL-3573,Improvement,Major,2.5.0,None,"
None
",Closed,Fixed,2.7.0,Christian Müller,Christian Müller,0,0,2011-01-21 12:28:01+00:00,2011-10-25 11:35:56+00:00,see Nabble,"muellerc:1295595407:2011-01-21T15:36:47.771+0000:1295595407:2011-01-21T15:36:47.771+0000:Attached the proposed patch which I will commit *AFTER* Camel 2.6 is out.
I changed the places where I had access to the Camel context (only in the camel-jms component) to obtain the ClassResolver instance.
All unit tests and itests run without a failure.

muellerc:1296566135:2011-02-01T21:15:35.726+0000:1296566135:2011-02-01T21:15:35.726+0000:Committed r1066201"
0,CAMEL-3572,Bug,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Schneider,Christian Schneider,0,0,2011-01-21 10:41:03+00:00,2011-10-25 11:35:37+00:00,"I encountered a problem that happens if you run a route like
from(""servlet:///test"").to(""direct:cxfendpoint"")


Behind the direct endpoint there is a cxf jax-rs endpoint that is secured by spring-security. If spring security denies access based on method annotations it throws an AccessDeniedException. As JAX-RS does not handle it the exception hits the CamelDestination. There it is only logged and swallowed. As the client then gets no error it tries to handle the reponse with jaxb which fails. (See below)


21.01.2011 11:19:51 org.apache.cxf.jaxrs.provider.AbstractJAXBProvider handleJAXBException
WARNUNG: javax.xml.bind.UnmarshalException



with linked exception:
[com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col 
{unknown-source}]: [1,0]]
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:426)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.unmarshalFromInputStream(JAXBElementProvider.java:229)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.doUnmarshal(JAXBElementProvider.java:195)
	at org.apache.cxf.jaxrs.provider.JAXBElementProvider.readFrom(JAXBElementProvider.java:166)
	at org.apache.cxf.jaxrs.client.AbstractClient.readBody(AbstractClient.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.handleResponse(ClientProxyImpl.java:463)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.doChainedInvocation(ClientProxyImpl.java:445)
	at org.apache.cxf.jaxrs.client.ClientProxyImpl.invoke(ClientProxyImpl.java:177)
	at $Proxy18.getUsers(Unknown Source)
	at client.RESTClient.sayHelloAsUser(RESTClient.java:63)
	at client.RESTClient.main(RESTClient.java:34)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}
]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:682)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2090)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:1996)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1100)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:160)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
	... 11 more","cschneider:1295577894:2011-01-21T10:44:54.532+0000:1295577894:2011-01-21T10:44:54.532+0000:I have tracked the problem to:

public class CamelDestination extends AbstractDestination implements Configurable {
protected class ConsumerProcessor implements Processor {
        public void process(Exchange exchange) {
            try {
                incoming(exchange);
            } catch (Throwable ex) {
                getLogger().log(Level.WARNING, ""Failed to process incoming message: "", ex);
                
            }
        }
    }
}

By exchanging the logging with
exchange.setException(ex);

The processing error is correctly transmitted to the client and the exception on client side does not happen anymore.

cschneider:1295579382:2011-01-21T11:09:42.729+0000:1295579382:2011-01-21T11:09:42.729+0000:Committed the fix. As we are near the release date please review
njiang:1295583548:2011-01-21T12:19:08.587+0000:1295583548:2011-01-21T12:19:08.587+0000:@Christian
Can I have a look at the configure of the a cxf jax-rs endpoint ?
Here is an unit test[1] which works with old CamelDestination,  I'm not sure how the 
{code}
incoming(exchange)
{code}
 throw the exception.

As the below code will take care or the exception which is thrown from ServiceImplementor.
{code}
incomingObserver.onMessage(inMessage);
{code}

[1]https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-cxf/src/test/java/org/apache/camel/example/camel/transport/CamelTransportClientServerTest.java
cschneider:1295584155:2011-01-21T12:29:15.568+0000:1295584155:2011-01-21T12:29:15.568+0000:The jaxrs server is configured like below. The exception is thrown by Spring Security when it intercepts the call the the implementation method

     <global-method-security jsr250-annotations=""enabled"" xmlns=""http://www.springframework.org/schema/security""/>

     <jaxrs:server id=""hello_rest"" address=""camel://direct:HelloWorldRestServerEndpoint"">
       <jaxrs:serviceBeans>
         <ref bean=""hello-world-bean""/>
       </jaxrs:serviceBeans>
       <jaxrs:features>
         <bean class=""org.apache.cxf.feature.LoggingFeature"" />
       </jaxrs:features>
     </jaxrs:server>
     
     <bean id=""hello-world-bean"" class=""server.HelloWorldImpl""/>

The impl class has this method:
@RolesAllowed(""ROLE_ADMIN"")
    public Map<Integer, User> getUsers()

Sergey already told me that I should use an interceptor to handle the exception from spring security and translate it. Still I think we should handle any exceptions in the CamelDestination that slip thorugh.

njiang:1295586469:2011-01-21T13:07:49.747+0000:1295586469:2011-01-21T13:07:49.747+0000:@Christian,
If we just throw the exception into camel route,  you need to take care the marshal the exception into the stream as not all the camel component support it out of box.


njiang:1295586519:2011-01-21T13:08:39.542+0000:1295586519:2011-01-21T13:08:39.542+0000:BTW, I think this change should be OK.
cschneider:1295587723:2011-01-21T13:28:43.765+0000:1295587723:2011-01-21T13:28:43.765+0000:Yes. You are right about the marshalling but it is not so important as the exception in this place is rather a last resort. Normally the exceptions should be handled by cxf interceptors.
"
0,CAMEL-3571,Improvement,Minor,2.5.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2011-01-21 09:59:11+00:00,2015-02-17 07:07:08+00:00,"Instead of having to set trim = true on each data field you may want to set a global trim option on the @FixedLengthRecord. to auto trim fields.


The problem could be having the data field trim option override the global if it has been configured. For example if there is a special field which should not be trimmed.","taariql:1305785110:2011-05-19T14:05:10.863+0000:1305785110:2011-05-19T14:05:10.863+0000:I assume backward compatibility is really important here?

Because with the DataField having a default of false it will override the FixedLengthRecord's setting.

But if the DataField has an enum instead of a boolean then there are more options. 
Lets say NEVER_TRIM(never, ever trim), TRIM(Always trim) and NO_TRIM_UNLESS_FORCED(No trimming unless the FixedLengthRecord insists).

It can default to NO_TRIM_UNLESS_FORCED, and if the FixedLengthRecord defaults to TRIM_CONSERVATIVELY then we have the current behaviour of not trimming anything unless DataField is set to TRIM.

FixedLengthRecord can also be set to TRIM_ALL which then trims everything including DataFields with trim set to NO_TRIM_UNLESS_FORCED, but excluding DataFields set to NEVER_TRIM.

So even if FixedLengthRecord is set to TRIM_ALL you annotate the special DataFields with NEVER_TRIM and you get the desired behaviour."
0,CAMEL-3570,Improvement,Trivial,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-21 09:38:27+00:00,2011-10-25 11:36:12+00:00,"See nabble
http://camel.465427.n5.nabble.com/password-shown-in-plain-text-in-the-log-file-while-starting-amp-stopping-context-td3347883.html


The password should be masked which can be done by overriding toString and mask it in the output.",davsclaus:1298862711:2011-02-28T11:11:51.688+0000:1298862711:2011-02-28T11:11:51.688+0000:trunk: 1075292.
0,CAMEL-3569,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-01-21 04:45:37+00:00,2011-10-25 11:35:32+00:00,"Sample output:




[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-xxx ---
[WARNING] File encoding has not been set, using platform encoding MacRoman, i.e. build is platform dependent!
[INFO] Compiling 4 source files to /w1/apache/camel/projects/camel-xxx/target/classes
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[28,7] org.apache.camel.example.HelloWorldConsumer is not abstract and does not override abstract method poll() in org.apache.camel.impl.ScheduledPollConsumer
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[38,19] poll() in org.apache.camel.example.HelloWorldConsumer cannot override poll() in org.apache.camel.impl.ScheduledPollConsumer; attempting to use incompatible return type
found   : void
required: int
[ERROR] /w1/apache/camel/projects/camel-xxx/src/main/java/org/apache/camel/example/HelloWorldConsumer.java:[36,4] method does not override or implement a method from a supertype
[INFO] 3 errors","hadrian:1295557267:2011-01-21T05:01:07.139+0000:1295557267:2011-01-21T05:01:07.139+0000:Fixed in r1061633.

Problem caused by changed api and archetype code not updated."
0,CAMEL-3568,Improvement,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Hadrian Zbarcea,0,0,2011-01-21 04:19:30+00:00,2011-10-25 11:36:07+00:00,"Camel archetypes use the old descriptor format and give the following output:



[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] project created from Old (1.x) Archetype in dir: /w1/apache/camel/projects/camel-xxx




We need to update to use the archetype-metadata.xml descriptor","davsclaus:1298328381:2011-02-22T06:46:21.098+0000:1298328381:2011-02-22T06:46:21.098+0000:Jonathan do you mind looking at this? You got a couple of archetypes ticket already, and is our archetype expert :)
janstey:1298350007:2011-02-22T12:46:47.723+0000:1298350007:2011-02-22T12:46:47.723+0000:Yeah, no prob. I actually had a dup of this ticket assigned to me (CAMEL-3611) so I'll close the other one.
janstey:1298355358:2011-02-22T14:15:58.516+0000:1298355358:2011-02-22T14:15:58.516+0000:I just updated the camel-java archetype to use the new descriptor format in rev 1073333. The conversion is a bit tedious so I'll pick at this over the next few days as I have time.
davsclaus:1298861791:2011-02-28T10:56:31.051+0000:1298861791:2011-02-28T10:56:31.051+0000:The old format still works. Jonathan feel free to upgrade as you have time. Just make sure its all done for the next 2.8 release :)
davsclaus:1299135521:2011-03-03T14:58:41.698+0000:1299135521:2011-03-03T14:58:41.698+0000:Migrated activemq and component archetypes.
davsclaus:1299141174:2011-03-03T16:32:54.503+0000:1299141174:2011-03-03T16:32:54.503+0000:light-war and spring migrated
davsclaus:1299142295:2011-03-03T16:51:35.339+0000:1299142295:2011-03-03T16:51:35.339+0000:scala migrated
davsclaus:1299143440:2011-03-03T17:10:40.251+0000:1299143440:2011-03-03T17:10:40.251+0000:Okay the last one missing is webconsole which is a bit bigger than they others. I will look at it tomorrow."
0,CAMEL-3567,Sub-task,Minor,None,None,"
None
",Closed,Fixed,2.6.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2011-01-20 20:17:36+00:00,2011-10-25 11:36:02+00:00,"Update camel-bindy document to reflect the change in behavior of FixedLength record.


Add details about the new annotation parameter 'trim' and add a warning to the docs stating the behavior change as of Camel 2.6",akarpe:1295525899:2011-01-20T20:18:19.103+0000:1295525899:2011-01-20T20:18:19.103+0000:Fixed the documentation and made the necessary changes to the camel wiki
0,CAMEL-3566,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-20 15:01:53+00:00,2011-10-25 11:36:03+00:00,"If you dont care about an InOnly MEP exchange which uses an jms endpoint that has a replyTo set, then it woud log that at WARN that the reply to is being discarded. This happens at WARN level. Some people may just want to ignore this, and thus we need a logWarnWhenReplyToIsDiscarded option they can set to false.","hadrian:1295507894:2011-01-20T15:18:14.139+0000:1295507894:2011-01-20T15:18:14.139+0000:The MEP of the route is totally irrelevant for a particular processor on the route (it is relevant to the from consumer).
If replyTo is set on a JMS endpoint, that would be an InOut exchange and it's most likely by intent. I agree that logging at WARN is a sure way to make camel look lousy. 

My proposal is to log at INFO, not add config.
davsclaus:1295508456:2011-01-20T15:27:36.707+0000:1295508456:2011-01-20T15:27:36.707+0000:trunk: 1061339.
hadrian:1295510352:2011-01-20T15:59:12.353+0000:1295510352:2011-01-20T15:59:12.353+0000:@Claus, could you please revert the patch (unless you want me to) and have a discussion between implementing a solution (see my previous comment).

I really think two bad things don't cancel each other. Logging at WARN should be done only when there's something to warn about, not something to *potentially* warn about. Adding extra configuration to avoid that, is imho, uhm, bizarre.
jstrachan:1295510675:2011-01-20T16:04:35.565+0000:1295510675:2011-01-20T16:04:35.565+0000:Whether a user wants a WARN about this or not sounds like a config issue. If a user knows its fine, they can configure it right? Why do you have an issue with letting a user configure things to work as they wish?
hadrian:1295510686:2011-01-20T16:04:46.946+0000:1295510686:2011-01-20T16:04:46.946+0000:Just to be clear, I think you're absolutely right, I would add that: *most of the people* would want to ignore it. 

On production systems logging is normally a WARN and up. Thinking more about it, even logging at DEBUG would do. Either one is fine with me.
davsclaus:1295510787:2011-01-20T16:06:27.791+0000:1295510787:2011-01-20T16:06:27.791+0000:Sorry didnt see your comment, as JIRA isnt interactive like gmail. I often have the ticket handy for a comment and resolve when its a simple issue.
hadrian:1295511242:2011-01-20T16:14:02.522+0000:1295511454:2011-01-20T16:17:34.398+0000:@james, I have no issue with configuring things to work as they wish. We configure a bunch of stuff in camel.

However, you know this better than anybody, camel is about simplifying integration. That's why camel has a brilliant way of using convention over configuration to achieve that. Thanks in most part to you!

In this particular case, I personally see no value in extra configuration to not warn of something we should not warn in the first place. It looks like the thing we need to clarify is if that WARN should really be a warn or not. 
hadrian:1295511372:2011-01-20T16:16:12.191+0000:1295511372:2011-01-20T16:16:12.191+0000:@Claus, I didn't see your post while I was writing my previous post. I'll take back my previous statement, sorry.
davsclaus:1295512603:2011-01-20T16:36:43.018+0000:1295512603:2011-01-20T16:36:43.018+0000:Yeah what about removing the new option and change the WARN -> DEBUG logging. 

INFO is used in production systems. They like to be able to see in the logs when the server start/stop which is usually at INFO level.
davsclaus:1295512793:2011-01-20T16:39:53.924+0000:1295512793:2011-01-20T16:39:53.924+0000:trunk: 1061381.

Reverted and changed from WARN to DEBUG.
cschneider:1295512821:2011-01-20T16:40:21.063+0000:1295512821:2011-01-20T16:40:21.063+0000:+1 for logging on DEBUG
hadrian:1295513121:2011-01-20T16:45:21.414+0000:1295513121:2011-01-20T16:45:21.414+0000:Thanks Claus!"
0,CAMEL-3565,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Andreas Asmuss,0,0,2011-01-20 11:27:35+00:00,2011-10-25 11:35:24+00:00,"If Camel reads a property from a properties-file that has a space at the end of a line like:


some.property = theValue <---


Camel will resolve ""theValue "" and then crash at route creation. Should be ""theValue"".","hadrian:1295507328:2011-01-20T15:08:48.853+0000:1295507328:2011-01-20T15:08:48.853+0000:@Andreas, thanks for reporting this.

This is a fairly easy fix and we love contributions. Do you want to try working on a patch? If not please let us know and one of us will take care of it. Hopefully in time for 2.6, which is scheduled to be built tomorrow.
davsclaus:1295507583:2011-01-20T15:13:03.523+0000:1295507583:2011-01-20T15:13:03.523+0000:Yeah I dont think there is any uses cases where you want property values that either start or end with spaces. I think we should trim the value.
I do think we use the properties API from the JDK to load it, so its kinda a flaw / missing feature in the JDK.

And its common for some guys to space around the = sign in properties file
davsclaus:1295569556:2011-01-21T08:25:56.147+0000:1295569556:2011-01-21T08:25:56.147+0000:What JDK and OS are you using?
And can you post your properties file?

I cannot reproduce this.
davsclaus:1295570098:2011-01-21T08:34:58.635+0000:1295570098:2011-01-21T08:34:58.635+0000:Ah I can only reproduce it by writing a file using Java code to ensure there is a trailing space. The editor strips the spaces as it knows its a properties file :)
davsclaus:1295571810:2011-01-21T09:03:30.937+0000:1295571810:2011-01-21T09:03:30.937+0000:trunk: 1061692."
0,CAMEL-3564,New Feature,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-20 09:15:54+00:00,2011-10-25 11:35:27+00:00,"See nabble
http://camel.465427.n5.nabble.com/Set-exchange-property-to-a-Map-tp3349171p3349171.html


This is needed for folks using XML routing. An expression which can refer to something from the registry.
We can also add a ref function to the simple language so you can use that as well.


In simple the function should be ref:id where id is the id to lookup.


For example



<bean id=""foo"" class=...>
   <!-- options -->
</bean>

<setProperty name=""myFoo"">
<ref id=""foo""/>
</setProperty>




And when using simple



<setProperty name=""myFoo"">
<simple>${ref:foo}</simple>
</setProperty>","davsclaus:1295496594:2011-01-20T12:09:54.696+0000:1295496594:2011-01-20T12:09:54.696+0000:I have adde the ref function to simple in trunk: 1061262.
Will be part of Camel 2.6
unmarshall:1295511191:2011-01-20T16:13:11.842+0000:1295511191:2011-01-20T16:13:11.842+0000:Hi Claus,

This feature is required for <camel:setHeader> as well.

Best Regards,
Madhav
davsclaus:1295564914:2011-01-21T07:08:34.996+0000:1295564914:2011-01-21T07:08:34.996+0000:We could also do like
{code:xml}
<ref>foo</ref>
{code}

unmarshall:1295586019:2011-01-21T13:00:19.621+0000:1295586019:2011-01-21T13:00:19.621+0000:There is another problem.
If you check DefaultCxfBinding class there is a method: propagateHeadersFromCamelToCxf which would propagate the headers from camel to CXF.

The transport headers have been defined as:
Map<String, List<String>> transportHeaders = new HashMap<String, List<String>>();

Now when you allow people to set an Object as a value against a key as header then you will have to change this to Map<String, Object>. I tried to set a Map object against the key and it converted the value to the default string representation of the Map which is not what is desired.

Best Regards,
Madhav
davsclaus:1295590887:2011-01-21T14:21:27.910+0000:1295590887:2011-01-21T14:21:27.910+0000:Madhav i dont see the point.

We are talking about a Camel expression to refer an object, which you lookup using an id, and find it in a registry such as the Spring XML file (its app context).

Then someone asked if you can use this <ref> expression with the <seetHeader>. Yes you can as shown:
{code}
<setHeader headerName=""myFoo"">
<simple>${ref:foo}</simple>
</setHeader>
{code}

What you refer to is some internals of camel-cxf which seems to store some transports headers in a map structure. 
That map structure is not the Camel Headers Map structure. Those 2 are not related.

hadrian:1295599450:2011-01-21T16:44:10.674+0000:1295599450:2011-01-21T16:44:10.674+0000:@madhav, @claus, 

I added an extra test in r1061887 to assert that the fix in the SimpleLanguage does return the expected object (not a string representation), which should eliminate doubts.

I like the current solution, it addresses the requirement, and I don't think we should add a <ref> to the dsl as we already have a clean solution. I recommend closing this issue as resolved in 2.6.0 (and will do it if no objection in the next few hours).

@madhav, if you see another problem with camel-cxf, I'd recommend opening a separate issue.
davsclaus:1295779078:2011-01-23T18:37:58.893+0000:1295779078:2011-01-23T18:37:58.893+0000:From a tooling perspective and maybe also as an end user, you would maybe better be able to figure out how to refer to a bean if we had a
{code:xml}
<ref>foo</ref>
{code}
element as an expression. Then it's listed in the XSD schema and the editor can show it for you.

Also we can list it at the website, as we do with the others
http://camel.apache.org/languages

I am not sure that a new user would be able to understand he can use the simple expression language to resolve his issue?

We could of course add a FAQ entry and have an example, that would help some users.

That said, I would think from a tooling perspective that the {{<ref>}} element would help there as well.
I think we should re-consider this for Camel 2.7."
0,CAMEL-3563,Improvement,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,James Strachan,James Strachan,0,0,2011-01-20 08:39:08+00:00,2011-10-25 11:35:33+00:00,"Imagine you have a camelContext.xml for production use (e.g. you're creating an OSGi bundle with a camelContext.xml) but you want to create an integration test case that tests out your route.


So you want to create a new Camel XML file, testCamel.xml which includes the camelContext.xml and interacts with it. You now have 2 camelContexts. The test route needs to be able to refer to any endpoints inside the other camelContext.xml.


CamelContext has an ID (by default camelContext IIRC).


so if we have 


camelContext.xml



<camelContext id=""prod"" ...>
  <route> 
    <from uri=""direct:foo"">
     ...





testCamelContext.xml



<camelContext id=""test"" ...>
  <route> 
    <from uri=""direct:start"">
    <to uri=""prod:direct:foo""/>
   </route>
  <route> 
    <from uri=""prod:seda:bar"">
    <to uri=""mock:results""/>
   </route>




i.e. in the test case we are routing from our local CamelContext into the production camel context's ""direct:start"" endpoint and consuming from its ""seda:bar"" endpoint.


i.e. we use ""prod"" as a name, look it up in the IoC context (just like any other Component), but if its a CamelContext we (via TypeConverters) turn it into a Component that resolves the rest of the name","jstrachan:1295485983:2011-01-20T09:13:03.759+0000:1295485983:2011-01-20T09:13:03.759+0000:in pure Spring / web app worlds, we can rely on the lookup by name of a component in the local Spring ApplicationContext.

In OSGi any bundle can expose a CamelContext, so the name tends to use a bundle prefix. We may wish to use a few different naming schemes to lookup a CamelContext. So by default Camel already looks up a scheme as a simple name in the local context; we can piggy back on that for non-OSGi simple web apps.

Then maybe we provide a few different OSGi naming schemes to lookup a CamelContext (or endpoint or component). e.g. looking up via bundle ID or only look in the local bundle or query the OSGi registry etc
hadrian:1295507142:2011-01-20T15:05:42.658+0000:1295507142:2011-01-20T15:05:42.658+0000:@James, I think that not having a predefined component scheme would unnecessarily complicate implementation and would create confusion if the contextId would match the one of a predefined component, such as say ""cache"". I would prefer one of the 2 alternatives:
{code}
<to uri=""context:prod:direct:foo""/>
{code}
{code}
<to context=""prod"" uri=""direct:foo""/>
{code}
After only a few minutes of thought I think I am getting slightly partial to the former, as having all the info in the uri in one place.
cschneider:1295578518:2011-01-21T10:55:18.586+0000:1295578518:2011-01-21T10:55:18.586+0000:As it is not yet clear how to solve this I propose to move this issue to Camel 2.7.0. 
jstrachan:1295583554:2011-01-21T12:19:14.182+0000:1295583554:2011-01-21T12:19:14.182+0000:@Hadrian

Right now any bean in the Spring context which is convertable to a Component or Endpoint can be used directly in Camel, making a new URI scheme on the fly. This has been there for 3 years and is a great feature.  This is how you can do things like:

{code}
<bean id=""mqSeries"" class=""org.apache.camel.jms.JmsComponent"">
...

<bean id=""tibco"" class=""org.apache.camel.jms.JmsComponent"">
...
{code}

So you can take a generic component (JMS) and make specific configured instances; which then act like a separate URI scheme.

Then in code you can refer to **mqSeries:SomeQueue** and **tibco:AnotherQueue**

Are you proposing we go back in time 3 years and avoid doing such a thing because you could possibly hide one of the standard URI schemes? Hiding URI schemes is another great feature - it lets you stub out middleware in test cases with mock endpoints by just adding beans to your context but reusing a route definition as is.


So for this specific issue,  I'm proposing we add a CamelContextComponent which takes a CamelContext in the constructor which just exposes its endpoints. Then any endpoint can be prefixed by the ID of the camelContext in which its defined and hey presto - in a nice neat URI naming scheme - we get an easy way to route between CamelContext instances.

I'm not suggesting making any changes to how Camel URIs work (they've been great for years).


If you really want an explicit URI prefix to make URIs extra long and verbose, we could also add a ""camelContext:"" URI scheme which just takes the next name on the path and looks up the CamelContext in the Spring context and then uses the same CamelContextComponent I mention above.

In this case both: ""camelContext:foo:direct:bar"" and ""foo:direct:bar"" would work.

Though the genie was let out of the bottle 3 years ago with respect to being able to hide the default URI scheme implementations. Overriding the mapping of URI scheme name to an implementation is actually a good thing
davsclaus:1295597542:2011-01-21T16:12:22.986+0000:1295597542:2011-01-21T16:12:22.986+0000:We have code freeze on the 2.6 release. This must be moved to 2.7.
davsclaus:1297368381:2011-02-11T04:06:21.591+0000:1297368381:2011-02-11T04:06:21.591+0000:Ashwin, James is already working on this. I am closing this one.
jstrachan:1297389520:2011-02-11T09:58:40.355+0000:1297389520:2011-02-11T09:58:40.355+0000:See the documentation: https://cwiki.apache.org/confluence/display/CAMEL/Context"
0,CAMEL-3562,Improvement,Major,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2011-01-20 00:35:27+00:00,2011-10-25 11:35:19+00:00,"BindyFixedLengthDataFormat does a trim on Fixed Length record, although Fixed Length recordare strictly positional in nature and may contain lot of fillers with empty spaces, doing a trim causes Bindy to fail the message length validation and exception is thrown on message length 


// Read the line 
String line = scanner.nextLine().trim(); 


Should be changed to 


// Read the line 
String line = scanner.nextLine(); 


Or a conditional option should be provided in FixedLengthRecord annotation whether or not to trim the entire record","akarpe:1295514607:2011-01-20T17:10:07.125+0000:1295514607:2011-01-20T17:10:07.125+0000:Please find attached a patch that fixes this issue by adding another option to the FIxedLengthRecord annotation called trimRecordOnUnmarshal with default value set to true. The user can then alter this behavior to achieve the effect needed.

Unit tests are provided...

Cheers,

Ashwin...
davsclaus:1295516540:2011-01-20T17:42:20.080+0000:1295516540:2011-01-20T17:42:20.080+0000:I think the option {{trimRecordOnUnmarshal}} is a bit to verbose. Is it possible to name it {{trim}}.

I think frankly it should not trim by default (although it does this now).
Then you get the fixed length as is, which you feels more natural fixed lengtth formats.

Any thoughts?



akarpe:1295518543:2011-01-20T18:15:43.225+0000:1295518543:2011-01-20T18:15:43.225+0000:Committed patch to trunk under revisions  r1061411, r1061413, r1061420,  r1061425,  r1061426.


akarpe:1295523083:2011-01-20T19:31:23.639+0000:1295523225:2011-01-20T19:33:45.400+0000:Hi Claus,

I was a little conflicted about it. I wanted to use something that would indicate that trimming was only applicable to the Unmarshal phase.

I will also change the default as you suggest. I guess given that it is a different camel version, so long as the documentation is good it should suffice. I will make both the changes you suggest.

Cheers,

Ashwin...
akarpe:1295524007:2011-01-20T19:46:47.654+0000:1295524007:2011-01-20T19:46:47.654+0000:Hi Claus,

I have added an updated bindy patch that takes care of both the changes you recommended. I have also updated the camel unit tests to works appropriately.

I will update the wiki documentation to reflect the change (documentation still work in progress) following the commit to the trunk.

Cheers,

Ashwin...
akarpe:1295524445:2011-01-20T19:54:05.614+0000:1295524445:2011-01-20T19:54:05.614+0000:Updated behavior committed to the camel trunk as r1061479. 
davsclaus:1295558579:2011-01-21T05:22:59.416+0000:1295558579:2011-01-21T05:22:59.416+0000:Ashwin sorry I was maybe a bit to jumpy. 15 min after I turned off the computer I kinda thought of this again.

The trimming is when you unmarshal, suppose we have this record format (I use dash as space in this example)

Claus------------Ibsen-------------1233

Then when I unmarshal to a pojo having
- String firstName
- String lastName
- int id

I would like it to be mapped as
- firstName = ""Claus""
- lastName = ""Ibsen""
- id = 1234

eg the data is trimmed.

Now with the new {{trim}} or {{trimOnUnmarshal}} option set to false I would get

- firstName = ""Claus-------------""
- lastName = ""Ibsen--------------""
- id = 1234

And frankly this last situation is not what you want by default. So I think we should switch back and have {{trim}} set to {{true}} as you did in the first place.
njiang:1295559926:2011-01-21T05:45:26.662+0000:1295559926:2011-01-21T05:45:26.662+0000:I don't think current Camel code hononor the ""trim = true"" attribute of the DataField when doing the unmarshal work.
{code}
@DataField(pos = 1, length=10, trim=true)
private String userID;
{code}

But for the marshal part, if we hononor this the trim attribute that will cause the CAMEL-3562 issue.

Can we just trim the String when BindyFixedLengthDataFormat does the marshal work ?
  
davsclaus:1295575853:2011-01-21T10:10:53.890+0000:1295575853:2011-01-21T10:10:53.890+0000:We actually fixed the wrong problem.

If you have a fixed length record with leading and/or trailing spaces such as (I use dash as space)

""----30Claus-----------Ibsen---------""

Then what bindy did was trim that

""30Claus-----------Ibsen""

Which is just plain wrong, it should never trim it. 

I have removed this new option and improve the unit test to test for a record with trailing spaces.
davsclaus:1295576412:2011-01-21T10:20:12.651+0000:1295576412:2011-01-21T10:20:12.651+0000:Fixed trim option now working on @DataField as reported by willem

trunk: 1061719."
0,CAMEL-3561,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,James Strachan,0,0,2011-01-19 11:14:52+00:00,2011-10-25 11:35:43+00:00,"We're missing some plugin versions in the generated pom.xml files...


[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing. @ line 61, column 15","davsclaus:1295474847:2011-01-20T06:07:27.189+0000:1295474847:2011-01-20T06:07:27.189+0000:Jonathan could you take a look when you are having a moment with love for maven archtetypes :)
hadrian:1295554997:2011-01-21T04:23:17.954+0000:1295556578:2011-01-21T04:49:38.737+0000:Fixed in r1061624, 1061632.

Reproduced the issue with maven 3.0.2 and tested the fix for all archetypes (except the scala one). Used the current maven-compiler-plugin:2.3.2 version. Applied second patch using a parameterized value for the maven-compiler-plugin version.
janstey:1295586071:2011-01-21T13:01:11.463+0000:1295586071:2011-01-21T13:01:11.463+0000:Cool. I wait one day and my assigned issue gets completed automatically :D"
0,CAMEL-3560,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-19 11:05:18+00:00,2011-10-25 11:35:33+00:00,"The Camel routing engines will handle this in 99.9% of the cases, but when you shutdown a Spring AC then Spring may stop beans in whatever order and this can cause those beans to fail operating during a graceful shutdown. And in worst case exceptions is thrown in situations where they are not normally done.


To cater for that and other situations the UoWProcessor should detect this and act accordingly.


This ensure the in flight registry will be tracked and we are not stuck with a missing inflight message, causing Camel to wait for the 300 sec timeout to shutdown.


For example just try hitting ctrl + c in that camel-example-management and you can see such an example.",davsclaus:1295407160:2011-01-19T11:19:20.206+0000:1295407160:2011-01-19T11:19:20.206+0000:trunk: 1060768.
0,CAMEL-3559,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-18 14:31:47+00:00,2011-10-25 11:36:18+00:00,"See nabble
http://camel.465427.n5.nabble.com/Last-Aggregated-Exchange-lost-Aggregator-with-a-Batch-Consumer-and-persistent-AggregationRepository-tp3346214p3346214.html",davsclaus:1295334445:2011-01-18T15:07:25.940+0000:1295334445:2011-01-18T15:07:25.940+0000:trunk: 1060406.
0,CAMEL-3558,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2011-01-18 12:34:42+00:00,2011-10-25 11:35:30+00:00,"The exception will be thrown if the message body parameter size is not match with the operation expect size.
We need to tell the use current camel-cxf is using POJO DataFormat.",
0,CAMEL-3557,Improvement,Major,2.5.0,Future,"
None
",Resolved,Later,Future,Unassigned,Claus Ibsen,0,2,2011-01-18 11:33:48+00:00,2015-07-10 07:02:10+00:00,"Check the EIP patterns
http://camel.apache.org/enterprise-integration-patterns.html


And add missing Java DSL and/or XML examples. Apparently XML end users aren't good at using the XML Schema to known how to configure an EIP pattern.
So we should improve the documentation and add examples for both DSL flavors.","davsclaus:1309139661:2011-06-27T09:54:21.188+0000:1309139661:2011-06-27T09:54:21.188+0000:Ben do you mind looking at all the EIP pages and write down any EIPs which dont have one Java + XML example?
boday:1309169201:2011-06-27T18:06:41.847+0000:1309169201:2011-06-27T18:06:41.847+0000:Claus, I'll pull this list together soon.  I've been trying to pick a few off here and there, but haven't had time to finish them all...
boday:1309177045:2011-06-27T20:17:25.341+0000:1309444842:2011-06-30T22:40:42.705+0000:here is the list...I'll continue to pick these off, but feel free to reassign or split this up if necessary...

#missing both java and spring examples

Message Channel
Message Endpoint
Point to Point Channel
Guaranteed Delivery
Message Bus
Correlation Identifier
Messaging Mapper
Event Driven Consumer
Message Dispatcher
Messaging Gateway

boday:1311684477:2011-07-26T20:47:57.711+0000:1311684477:2011-07-26T20:47:57.711+0000:still a few of these that need examples...
sabre1041:1409685243:2014-09-03T03:14:03.119+0000:1409685243:2014-09-03T03:14:03.119+0000:I'd like to contribute to enhancing the documentation on the EIP patterns addressed previously. What is the best way to submit updates?
davsclaus:1409695875:2014-09-03T06:11:15.136+0000:1409695875:2014-09-03T06:11:15.136+0000:Great to hear Andrew.

You can read about how to contribute and improve / edit the docs here
http://camel.apache.org/contributing.html
sabre1041:1410463209:2014-09-12T03:20:09.122+0000:1410463209:2014-09-12T03:20:09.122+0000:Java and XML examples have been added to the EIP wiki pages previously mentioned by [~boday]. Verified each page on Enterprise Integration Patterns has Java and XML examples"
0,CAMEL-3556,New Feature,Major,2.5.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-18 10:24:07+00:00,2011-04-10 14:38:22+00:00,"Those EIPs copy the incoming Exchange which is send to the recipients.


The copy is a reference copy of the message payload. In some cased end users may need to do a deep clone copy or control this copy process themselves.
We should add a callback feature where they can do this.


See nabble
http://camel.465427.n5.nabble.com/Camel-2-5-Multicast-Component-Body-References-Concurrency-Copying-tp3339259p3339259.html","davsclaus:1302320184:2011-04-09T11:36:24.782+0000:1302320184:2011-04-09T11:36:24.782+0000:You may also want this on WireTap EIP. So it are potential other EIPs as well.

We could just use the process API which allows end user access to the Exchange where they can manipulate the payload beforehand.

davsclaus:1302328510:2011-04-09T13:55:10.424+0000:1302328510:2011-04-09T13:55:10.424+0000:Implemented for multicast, recipient list and splitter. There is now a onPrepare option. Updated wiki page as well.
davsclaus:1302402674:2011-04-10T10:31:14.254+0000:1302402674:2011-04-10T10:31:14.254+0000:Added to wireTap as well. And introduced fluent builders on wireTap in Java DSL."
0,CAMEL-3555,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-18 08:02:25+00:00,2011-10-25 11:35:53+00:00,"When you use request/reply over JMS a JMSReplyTo destination must be computed which happens async by the MessageListenerContainer which is to listen for the replies.
The currently logic uses some low-level thread wait/notify scheme.


We should change that to use the concurrency API using a countdown latch. That's much better.",davsclaus:1295318591:2011-01-18T10:43:11.929+0000:1295318591:2011-01-18T10:43:11.929+0000:trunk: 1060239
0,CAMEL-3554,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Schneider,Christian Schneider,0,0,2011-01-18 07:53:01+00:00,2011-10-25 11:35:24+00:00,"Currently the camel transport only filters out certian headers. The CXF bean component also maps some headers. 


If you publish a cxf service using camel and access it via the browser you get an exception as the http method is not mapped. With mapping in place this should also work",
0,CAMEL-3553,Task,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Claus Ibsen,0,0,2011-01-18 07:06:47+00:00,2011-10-25 11:35:36+00:00,We should upgrade to Apache CXF 2.3.2 when it has been released.,njiang:1295571123:2011-01-21T08:52:03.222+0000:1295571123:2011-01-21T08:52:03.222+0000:Just committed the change as the CXF 2.3.2 is promoted into maven central repo.
0,CAMEL-3552,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,2,8,2011-01-18 07:05:27+00:00,2015-07-13 06:53:39+00:00,"Apache PDFBox could be integrated to Camel to turn Camel into a printout system by composing PDF documents.


In the same way, Camel will be able to read PDF documents (consumer mode).","jbonofre:1295306511:2011-01-18T07:21:51.155+0000:1295306511:2011-01-18T07:21:51.155+0000:Patch in progress.
davsclaus:1341534378:2012-07-06T08:26:18.621+0000:1341534378:2012-07-06T08:26:18.621+0000:Any update on this? If you got any work in progress, maybe attach as patch, so other ppl can help / continue your work.
And maybe unassign if you dont have the time to work on this.
jbonofre:1341535022:2012-07-06T08:37:02.564+0000:1341535022:2012-07-06T08:37:02.564+0000:Thanks for the reminder Claus.

I have something ready that I will attach to this Jira.

Regards
JB
hekonsek:1341536768:2012-07-06T09:06:08.145+0000:1341536768:2012-07-06T09:06:08.145+0000:Jean, you can assign this task to me if you want to. I'll be happy to finish the component for you.
jbonofre:1358326750:2013-01-16T16:59:10.708+0000:1358326750:2013-01-16T16:59:10.708+0000:My bad, I forgot to commit the component. I will attach the patch (for trunk) in this Jira, like this you would be able to complete.
davsclaus:1369531685:2013-05-26T09:28:05.111+0000:1369531685:2013-05-26T09:28:05.111+0000:Jean, so did you have any code to attach?
davsclaus:1393389673:2014-02-26T12:41:13.616+0000:1393389673:2014-02-26T12:41:13.616+0000:It would be good if there as a pdfbox component to extract content from an existing PDF document. Then people can use that in their Content Based Router.


jbonofre:1393405435:2014-02-26T17:03:55.481+0000:1393405435:2014-02-26T17:03:55.481+0000:I will push my two components:
- one use pdfbox (for pdf templating/output)
- the other one use OpenOffice (for docx/odt/etc templating and docx/odt/pdf/etc outputs)
davsclaus:1395966704:2014-03-28T08:31:44.822+0000:1395966704:2014-03-28T08:31:44.822+0000:[~jbonofre] sorry to bother you again, but did you find your code? We would love to have better pdf components for Camel, so if you had some code that would be nice. You can also just .zip and attach to this JIRA , then we can take a look from there.
jbonofre:1395971732:2014-03-28T09:55:32.303+0000:1395971732:2014-03-28T09:55:32.303+0000:Yes I have, I gonna push it (sorry I was with a customer and in travel).
nkukhar:1426798818:2015-03-20T05:00:18.271+0000:1426798818:2015-03-20T05:00:18.271+0000:Hi,
I can try to implement this component. Does anyone have an idea what would be the most desirable use case of it? I would say send a string to pdf producer and it will create a pdf file and save it to file-system. Thoughts? 
davsclaus:1426806232:2015-03-20T07:03:52.342+0000:1426806232:2015-03-20T07:03:52.342+0000:Yeah but not save it to the file, as we can use the file component for that. It should create the pdf as a byte[] or stream or some other kind of object that holds the content.
jbonofre:1426806488:2015-03-20T07:08:08.904+0000:1426806488:2015-03-20T07:08:08.904+0000:Let me push it, I have something ready (just need to update to the Camel master).
githubbot:1429224865:2015-04-17T06:54:25.715+0000:1429224865:2015-04-17T06:54:25.715+0000:GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/495

    [CAMEL-3552] Added PDF component to camel.

    OK so this component ended up being quite bigger than I expected initially. This is my first component so feel free to review and suggest any modifications.
    
    Basically this component supports following operations:
    - create (creates new pdf document)
    - append (appends provided text to provided pdf document)
    - extractText (extracts text from provided document)
    
    Also it has two writing strategies: 
    - lineTermination (default) - takes provided text, splits it by line termination(\n) and writes these line to pdf document regardless lime fits in the document or not. With this strategy its users responsibility to provide text that will fit in the pdf document.
     - autoFormatting - this strategy is a little more complicated. It takes provided text and splits it by words.  Then it builds lines with a maximum amount of words that fit in the line. 
    
    This component supports only default PDFBox fonts (which are ASCII).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-3552

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/495.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #495
    
----
commit 7bd0b557e57fba66d23e31248f581125bedaefdb
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-04-17T06:29:14Z

    PDF component created.

commit c46e7f5792d3891d16d25578cb59672cc6bcb447
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-04-17T06:30:40Z

    Merge branch 'master' into CAMEL-3552

commit 382656c3874b48bf5fcef2ffcf5a178d3f08bacb
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-04-17T06:38:56Z

    Logging level reduced to INFO for tests.

commit 40f313bf44e9df9eb6007d44034ab86e8885e3df
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-04-17T06:39:29Z

    Mandatory title added to component endpoint description.

----

davsclaus:1429404910:2015-04-19T08:55:10.763+0000:1429404910:2015-04-19T08:55:10.763+0000:Thanks to nkukhar we have a camel-pdf component for producing pdf documents.

We need to add documentation to component list
And add camel-pdf as a karaf feature
githubbot:1429435511:2015-04-19T17:25:11.712+0000:1429435511:2015-04-19T17:25:11.712+0000:Github user nkukhar closed the pull request at:

    https://github.com/apache/camel/pull/495

davsclaus:1429483935:2015-04-20T06:52:15.610+0000:1429483935:2015-04-20T06:52:15.610+0000:We now have the karaf features
nkukhar:1429657186:2015-04-22T06:59:46.116+0000:1429657186:2015-04-22T06:59:46.116+0000:I can add documentation but I will be busy for next couple on weeks. So if someone willing to pick it up from here you are welcome otherwise I'll do it later. 
nkukhar:1431812580:2015-05-17T05:43:00.103+0000:1431812580:2015-05-17T05:43:00.103+0000:Can someone give me access to camel website and I'll add documentation for this component.
davsclaus:1431813775:2015-05-17T06:02:55.109+0000:1431813775:2015-05-17T06:02:55.109+0000:Nazaril

See this guide how to be able to edit the docs
http://camel.apache.org/how-do-i-edit-the-website.html
davsclaus:1436624508:2015-07-11T22:21:48.924+0000:1436624508:2015-07-11T22:21:48.924+0000:[~nkukhar] did you have any luck with working on the documentation?
nkukhar:1436736039:2015-07-13T05:20:39.093+0000:1436736039:2015-07-13T05:20:39.093+0000:I've added some basic documentation http://camel.apache.org/pdf.html 
If we also add some code examples I guess it should be enough to start.
davsclaus:1436741619:2015-07-13T06:53:39.913+0000:1436741619:2015-07-13T06:53:39.913+0000:Thanks that is lovely."
0,CAMEL-3551,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Jean-Baptiste Onofré,2,3,2011-01-18 07:01:47+00:00,2012-04-11 02:11:27+00:00,"A new Camel FOP component could be helpful to turn Camel into a kind of printout and report generation system.


A typical use case could be something like:


from(""amq:my.document.queue"")
  .to(""xslt:mystylesheet.xsl"")
  .to(""fop:pdf?some.extra.options.here"")
  .to(""file:outputdirectory"")
  .to(""printer:some.printer"");","jbonofre:1295306564:2011-01-18T07:22:44.556+0000:1295306564:2011-01-18T07:22:44.556+0000:Patch in progress.
bibryam:1320380144:2011-11-04T12:15:44.547+0000:1320380144:2011-11-04T12:15:44.547+0000:A camel-fop component that generates PDF (and other formats) using Apache FOP project
muellerc:1320477645:2011-11-05T15:20:45.917+0000:1320477645:2011-11-05T15:20:45.917+0000:org.apache.xmlgraphics:fop (and may some additional dependencies) is not an OSGI bundle. We need the SMX guys first to provide an OSGI bundle for the needed dependencies. I will request it on the SMX site...
bibryam:1320478381:2011-11-05T15:33:01.974+0000:1320478381:2011-11-05T15:33:01.974+0000:Thanks Christian, I forgot this part. I think this is the only dependency needed. 
Tests also use apache pdfbox to read the pdf content but I'm not sure if test dependencies need to be as OSGI bundle
muellerc:1320478646:2011-11-05T15:37:26.883+0000:1320478646:2011-11-05T15:37:26.883+0000:From the pom, I see the following dependencies where we doesn't have an OSGI bundle:
org.apache.xmlgraphics:fop:1.0
org.apache.xmlgraphics:xmlgraphics-commons:1.4
org.apache.xmlgraphics:batik-svg-dom:1.7
org.apache.xmlgraphics:batik-bridge:1.7
org.apache.xmlgraphics:batik-awt-util:1.7
org.apache.xmlgraphics:batik-gvt:1.7
org.apache.xmlgraphics:batik-transcoder:1.7
org.apache.xmlgraphics:batik-extension:1.7
org.apache.xmlgraphics:batik-ext:1.7
org.apache.avalon.framework:avalon-framework-api:4.3.1
org.apache.avalon.framework:avalon-framework-impl:4.3.1

A lot...
muellerc:1320479802:2011-11-05T15:56:42.429+0000:1320479802:2011-11-05T15:56:42.429+0000:I raised a JIRA for XML Graphics to get OSGI bundles in the future...

https://issues.apache.org/bugzilla/show_bug.cgi?id=52140
muellerc:1320479970:2011-11-05T15:59:30.645+0000:1320479970:2011-11-05T15:59:30.645+0000:For 
org.apache.avalon.framework:avalon-framework-api:4.3.1
org.apache.avalon.framework:avalon-framework-impl:4.3.1
SMX already provides OSGI bundles...
muellerc:1320569723:2011-11-06T16:55:23.554+0000:1320569723:2011-11-06T16:55:23.554+0000:We may also need an OSGI bundle for pdfbox, because we want also provide OSGI integration test for all our components. But may we can ""wrap"" the pdfbox and generate the OSGI bundle on the fly...
Jean-Baptiste, what do you think?
bibryam:1330850797:2012-03-04T16:46:37.686+0000:1330850797:2012-03-04T16:46:37.686+0000:I'm working on committing my old patch here, but I'm not sure how karaf/sevicemix works. 
Looking at SMX4-963, I see there are 3 boundles: batik, for and xmlgraphiocs. Do I need to add all of them camel platform features or only fop bunlde?
jbonofre:1332847610:2012-03-27T19:26:50.321+0000:1332847610:2012-03-27T19:26:50.321+0000:Hi Bilgin, I gonna help you on this part.
bibryam:1332848879:2012-03-27T19:47:59.115+0000:1332848879:2012-03-27T19:47:59.115+0000:Thanks Jean, I already committed it to trunk, I only have to add the documentation, which I am hoping to do these days
bibryam:1334081487:2012-04-11T02:11:27.097+0000:1334081487:2012-04-11T02:11:27.097+0000:Documentation added."
0,CAMEL-3550,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-18 06:08:03+00:00,2011-10-25 11:35:34+00:00,"When using Camel the type converters is loaded on the classpath using AnnotationTypeConverterLoader. We should let it thrown an exception if it could not find any type converters as it would cause Camel to startup with a very few type converter. This causes problems for end users when the cannot easily convert from XML-String, File-String etc.


This can happen in runtimes such as OSGi, JBoss, or other containers where classloading can play tricks.","davsclaus:1295316024:2011-01-18T10:00:24.176+0000:1295316024:2011-01-18T10:00:24.176+0000:Lets target this for 2.6.

We have seen to many end users in trouble due type converters couldn't load in their funky runtime container.
davsclaus:1295318464:2011-01-18T10:41:04.663+0000:1295318464:2011-01-18T10:41:04.663+0000:trunk: 1060291.
davsclaus:1295318556:2011-01-18T10:42:36.837+0000:1295318556:2011-01-18T10:42:36.837+0000:See nabble
http://camel.465427.n5.nabble.com/HEADS-UP-Camel-will-now-fail-on-startup-if-annotation-type-converter-could-not-find-any-converters-td3345966.html"
0,CAMEL-3549,Improvement,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Christian Schneider,Christian Schneider,0,0,2011-01-17 13:31:56+00:00,2011-10-25 11:35:40+00:00,"The spring security example uses two different spring contexts.


The first is pulled up using the spring ContextLoaderListener. It is used to hook spring security into a filter.
The second is pulled up by the CamelHttpTransportServlet. There is the main configuration includeing the camel context.


I think this is quite ugly and makes things more complicated than they need to be. Especially if you also need the camel context outside the camel servlet.


So I propose to change the code of the Camel Servlet component to simply use the spring context from the ContextLoaderListener. I can try to do the change myself but would be happy for any comments why this was designed so and where I have to be careful.","njiang:1295243097:2011-01-17T13:44:57.497+0000:1295243097:2011-01-17T13:44:57.497+0000:@Christian,

If you can make sure the camel context is loaded after the starting of  CamelHttpTransportServlet,  you will have no any trouble to do it.
Please check out my recent change CAMEL-3485 for camel-servlet component which does the same thing in OSGi.
davsclaus:1298328475:2011-02-22T06:47:55.891+0000:1298328475:2011-02-22T06:47:55.891+0000:Christian dont you have a similar ticket?
cschneider:1298333857:2011-02-22T08:17:37.983+0000:1298333857:2011-02-22T08:17:37.983+0000:Hmm, I worked on the OSGi ticket above. But this one is about non OSGi. I am not yet sure how to do it exactly but the basic idea is to let the endpoint start up without waiting for the servlet and let the servlet later pick up the connections. 
So we would not have the requirement anymore that the servlet must start first. Do you think that could work?
cschneider:1298335006:2011-02-22T08:36:46.718+0000:1298335006:2011-02-22T08:36:46.718+0000:Hi Claus,
I found the duplicate and closed the other issue
cmoulliard:1298335555:2011-02-22T08:45:55.108+0000:1298335555:2011-02-22T08:45:55.108+0000:Maybe we need two different mechanisms, one for OSGI and non OSGI. For OSGI we could call OSGI Service to find the HTTP Service on which the CamelHttpTransportServlet has been registered. So the endpoint could be started and could wait that the Servlet is there to attach it. The drawback is that we have to wait ....
cschneider:1298336510:2011-02-22T09:01:50.366+0000:1298336510:2011-02-22T09:01:50.366+0000:Hi Charles, 

for OSGi we have a nice solution already. The servlet can be registered using the OsgiServletRegisterer. As this happens in the spring context there is no need to wait. Additionally the servlet can be registered in OSGi using the interface CamelServletService so it can be refrerenced from other bundles which will then wait for it to go active like with any other OSGi service.

I think we could make this even better using the whiteboard pattern. So every servlet endpoint could register itself as an OSGi service as well as every camel servlet. Then we could have an extender that listens for both and registers the endpoints with the correct servlets. This would nicely decouple endpoints from servlets. As we have a service registry in camel we could perhaps even do this style outside of OSGi.

Christian

cmoulliard:1298338953:2011-02-22T09:42:33.771+0000:1298338953:2011-02-22T09:42:33.771+0000:Hi Christian,

The solution that you suggest (Pax Whiteboard or Apache Felix HTTP Whiteboard) is outside of the scope of camel. So even if this approach is correct and approve by all of us, that means that we become depend on Whiteboard which is not a ""standard"" like OSGI Service. Is it the right choice ?

Charles
cschneider:1298339557:2011-02-22T09:52:37.079+0000:1298339557:2011-02-22T09:52:37.079+0000:Hi Charles,

I did not mean to use the pax whiteboard extender but to rather use the whiteboard pattern to do something similar for connecting endpoints to servlets. So this should then run on any OSGi server.

Christian

davsclaus:1298969621:2011-03-01T16:53:41.636+0000:1298969621:2011-03-01T16:53:41.636+0000:Spring removed the servlet loader in Spring 3 :(

Here is a use case from user on forum with this issue
http://camel.465427.n5.nabble.com/Camel-Servlet-Tomcat-Problem-tp3405032p3405032.html
davsclaus:1298969753:2011-03-01T16:55:53.742+0000:1298969753:2011-03-01T16:55:53.742+0000:I think Willem created it like that from the start. Yes its in fact not so well designed with a hard dependency on Spring. It would be best if camel-servlet could avoid any dependency on Spring at all. Not everyone is using Spring.
davsclaus:1298973423:2011-03-01T17:57:03.717+0000:1298973423:2011-03-01T17:57:03.717+0000:Christian I got some prototype code working now. You now use pure Spring to start and then you need to define 1 CamelServlet.
I will polish a bit more on this tomorrow.
davsclaus:1299030289:2011-03-02T09:44:49.337+0000:1299030304:2011-03-02T09:45:04.656+0000:Christian I got most of the stuff going now. Now the ordering of whether the CamelServlet or the Spring listener starts first doesn't matter.

Also there was a gremlin in the unit tests, which forced the servlet to start first. So I had to remove that as well. I need to polish the code a bit, and make some code comments.

I have seen there is a OsgiServletRegisterer which I assume is for registering the servlet in OSGi Service Registry. Unfortunately it depends on Spring. I think we should do this the propert OSGi way. Then it should work for spring-dm, blueprint, or whatever you use. PS: In fact I think this is not really a service Camel should offer but the OSGi container itself. So you should be able to configure Apache Karaf to enlist Servlet, and maybe JMX/REST management as well. Then that's generic and not Camel specific.

What's your use case for this?
davsclaus:1299032282:2011-03-02T10:18:02.915+0000:1299032282:2011-03-02T10:18:02.915+0000:trunk: 1076163.

Pending is the OSGi register which depends on spring. We should avoid this.
cmoulliard:1299034432:2011-03-02T10:53:52.557+0000:1299034432:2011-03-02T10:53:52.557+0000:To avoid to use Spring to register the servlet with OSGI, we should use the OSGI HTTP Service like described here with a simple example (see white-board) --> http://www.knopflerfish.org/osgi_service_tutorial.html
davsclaus:1299046324:2011-03-02T14:12:04.769+0000:1299046324:2011-03-02T14:12:04.769+0000:Thanks Charles. I still think this doesn't belong in Camel but in Karaf. eg to offer Karaf end users to track Servlet's in the OSGi registry. So I think we should add a ticket in Apache Karaf JIRA and remove the code from camel-servlet.
cschneider:1299064314:2011-03-02T19:11:54.303+0000:1299064314:2011-03-02T19:11:54.303+0000:I have a first version running using a registry. It implements something similar to a whiteboard. The consumers and servlets register themselves and are connected to each other. I am currently running some more tests on it so I did not yet commit this to svn. 
cmoulliard:1299132245:2011-03-03T14:04:05.339+0000:1299132245:2011-03-03T14:04:05.339+0000:Claus. From discussion that I have had some weeks ago with Guillaume, this code should be place in karaf project of camel instead inside karaf.
davsclaus:1299222531:2011-03-04T15:08:51.529+0000:1299222531:2011-03-04T15:08:51.529+0000:Christian what's status on this?

Would be great to have 2.7 code freeze this weekend, so we can focus on stability on CI tests and bug fixes.
Then by next week Hadrian is back from vacation and he have a ""go"" for creating the release.
davsclaus:1299228060:2011-03-04T16:41:00.160+0000:1299228060:2011-03-04T16:41:00.160+0000:Thanks for committing your work.

I spotted these

[03/04/2011 -:- 05:30:52 PM] <cibsen> cschneide nice patch - we usually use DefaultXXX for the default impl of our interfaces instead of xxxImpl
[03/04/2011 -:- 05:31:19 PM] <cibsen> i wonder if a serial version uid is needed on a servlet? can you really serialize it and send it accross the wire?
[03/04/2011 -:- 05:31:52 PM] <cibsen> and prefer to use final modifier for memebers if possible
[03/04/2011 -:- 05:32:02 PM] <cibsen> eg the consumers map on the servlet
[03/04/2011 -:- 05:32:15 PM] <cibsen> eg the compiler helps catch if something by mistake reassign it
[03/04/2011 -:- 05:34:01 PM] <cibsen> i wonder if setServletName should be removed
[03/04/2011 -:- 05:34:06 PM] <cibsen> the name is set during the ctr
[03/04/2011 -:- 05:34:24 PM] <cibsen> and you send it 2x times CamelServlet and the CamelHttpTransport again
[03/04/2011 -:- 05:34:56 PM] <cibsen> and in this code
[03/04/2011 -:- 05:34:56 PM] <cibsen> throw new RuntimeException(""Invalid consumer type. Must be ServletEndpoint"");
[03/04/2011 -:- 05:35:13 PM] <cibsen> maybe add the consumer type so you know what type it was when it failed
[03/04/2011 -:- 05:36:28 PM] <cibsen> the log debug style is wrong
[03/04/2011 -:- 05:36:29 PM] <cibsen>     LOG.debug(""Registering consumer for path"" + consumer.getPath() + "" providers present: "" + providers.size());
[03/04/2011 -:- 05:36:35 PM] <cibsen> you should not concat strings
[03/04/2011 -:- 05:36:44 PM] <cibsen> either use isDebugEnabled as guard
[03/04/2011 -:- 05:36:52 PM] <cibsen> or use the {} placeholders that slf4j offers
[03/04/2011 -:- 05:36:59 PM] <cibsen> although you can only use at most 2 placeholders
cschneider:1299230544:2011-03-04T17:22:24.750+0000:1299230544:2011-03-04T17:22:24.750+0000:Thanks for taking the time to review. Some comments inline

<cibsen> i wonder if a serial version uid is needed on a servlet? can you really serialize it and send it accross the wire?
The compiler showed a warning on this so I thought it would not hurt

<cibsen> i wonder if setServletName should be removed
The problem with the servlet name is that it is normally fed by the config which is set during init. I first also thought we could remove it. The problem is in OSGi. The Httpregistry is notified of new servlets using a service listener. This happens in parallel to the registration of the servlet. So the http registry may get the signal before the servlet name is set using the init method. So I also set it in the HttpRegistry.

I have fixed the other things you mentioned
davsclaus:1299541620:2011-03-08T07:47:00.136+0000:1299541620:2011-03-08T07:47:00.136+0000:In this method
public void register(CamelServlet provider, Map properties)

In DefaultHttpRegistry you do some instanceof check. But the parameter is the same type, so the instanceof check will always be true. Maybe you intended that the parameter should be javax.servlet.Servlet type instead?
If not then the instanceof check can be removed."
0,CAMEL-3548,Improvement,Major,2.5.0,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,1,2011-01-17 11:43:22+00:00,2012-07-06 08:25:33+00:00,"See discussion
http://camel.465427.n5.nabble.com/DISCUSS-Route-scoped-onCompletion-tp3344202p3344202.html","davsclaus:1295235891:2011-01-17T11:44:51.094+0000:1295235891:2011-01-17T11:44:51.094+0000:A patch which implements most of this feature. Need more unit tests and maybe that {{atThisRouteOnly}} option to control the behavior as in the discussion
davsclaus:1341534333:2012-07-06T08:25:33.247+0000:1341534333:2012-07-06T08:25:33.247+0000:Lets keep the current behavior."
0,CAMEL-3547,New Feature,Minor,2.5.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Dan Checkoway,1,3,2011-01-16 16:29:29+00:00,2012-06-03 11:23:01+00:00,"I find Camel's property placeholder support clumsy.  I already use Spring's PropertyPlaceholderConfigurer, and I feel like Camel should be able to harness that.  I realize Spring doesn't make it easy to access those properties, but I have come up with a way to enable Camel to use them...


By simply extending PropertyPlaceholderConfigurer, we will be able to intercept and absorb the properties that Spring has access to:


{{
import java.util.Properties;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;


public class CamelPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {
    private final Properties properties = new Properties();


    @Override
    protected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props) 

{
        super.processProperties(beanFactory, props);
        // ""Absorb"" all properties that pass through so we can expose them later
        properties.putAll(props);
    }


    /** Expose all absorbed properties */
    public final Properties getProperties() 

{
        return properties;
    }

}
}}


It means users who want to take advantage of this would need to instantiate this instead of the stock PropertyPlaceholderConfigurer, but that's no problem:


  <bean class=""org.apache.camel.impl.CamelPropertyPlaceholderConfigurer"">
    <p:location=""...""/>
  </bean>


That way, you wouldn't need to declare a ""duplicating"" <propertyPlaceholer> in the CamelContext.  What do you think, is this feasible?","davsclaus:1295253929:2011-01-17T16:45:29.042+0000:1295253929:2011-01-17T16:45:29.042+0000:We'll it would be much better if the community vote on this ticket in Spring Framework:
https://jira.springframework.org/browse/SPR-4466

But I guess since the issue is almost 3 years old and still no sign from SS to raise to the occasion, we should consider alternatives.


davsclaus:1338687825:2012-06-03T09:43:45.230+0000:1338687825:2012-06-03T09:43:45.230+0000:Updated docs at
https://cwiki.apache.org/confluence/display/CAMEL/Using+PropertyPlaceholder
dcheckoway:1338693781:2012-06-03T11:23:01.640+0000:1338693781:2012-06-03T11:23:01.640+0000:Thanks, Claus!"
0,CAMEL-3546,New Feature,Major,None,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Tracy J. Snell,0,2,2011-01-15 22:28:41+00:00,2011-03-31 19:48:08+00:00,Jason Whaley has stepped up and offered to start work on an S3 component to add to camel-aws.,"rkettelerij:1295103398:2011-01-15T22:56:38.606+0000:1295103398:2011-01-15T22:56:38.606+0000:FWIW, there's also a Camel S3 component available at https://github.com/synergyj/camel-s3
muellerc:1295106874:2011-01-15T23:54:34.347+0000:1295106874:2011-01-15T23:54:34.347+0000:Cool, I would also like to add this feature to camel-aws.
muellerc:1295107394:2011-01-16T00:03:14.712+0000:1295107394:2011-01-16T00:03:14.712+0000:Tracy, do you plan to provide a contribution for this feature?
tjsnell:1295108822:2011-01-16T00:27:02.006+0000:1295108822:2011-01-16T00:27:02.006+0000:Yes, well Jason Whaley is looking to get more involved and volunteered to start the effort. I didn't know about camel-s3 but it uses jetss3 lib and one of my goals on camel-aws was reliance on the amazon java lib for all  the components.

I setup a github  project to collaborate with him on it https://github.com/tjsnell/camel-aws

muellerc:1300920824:2011-03-24T06:53:44.030+0000:1300920824:2011-03-24T06:53:44.030+0000:Tracy, any progress here?
I also played a bit with the Amazon S3 service and have a working sample in my workspace. I would like to merge it with your work and fix this issue in the next couple of days.
whaley:1300946630:2011-03-24T14:03:50.350+0000:1300946630:2011-03-24T14:03:50.350+0000:Christian - I'd say go ahead.  I haven't had the copious free time I expected to work on this.  If Tracy doesn't respond I can get your changes in to either the s3 branch or in master. 
muellerc:1301561249:2011-03-31T16:47:29.375+0000:1301561249:2011-03-31T16:47:29.375+0000:Committed r1087367
muellerc:1301564871:2011-03-31T17:47:51.775+0000:1301564871:2011-03-31T17:47:51.775+0000:Committed r1087383
tjsnell:1301565895:2011-03-31T18:04:55.276+0000:1301565982:2011-03-31T18:06:22.122+0000:Thanks Christian!  I've been swamped with a new job and pending family vacation and haven't had any spare time. Hoping to dive back in later this month.
muellerc:1301571725:2011-03-31T19:42:05.320+0000:1301571725:2011-03-31T19:42:05.320+0000:Committed r1087422
muellerc:1301571988:2011-03-31T19:46:28.284+0000:1301571988:2011-03-31T19:46:28.284+0000:Tracy, don't worry...
Maybe you can find the time to review the contribution?
muellerc:1301572021:2011-03-31T19:47:01.014+0000:1301572021:2011-03-31T19:47:01.014+0000:Wiki pages updated."
0,CAMEL-3545,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Christian Müller,0,1,2011-01-15 14:29:46+00:00,2011-10-25 11:36:01+00:00,"I tried to refactor


org.apache.camel.model.language.MethodCallExpression.java
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            return new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }




to


org.apache.camel.model.language.MethodCallExpression.java
    public Expression createExpression(CamelContext camelContext) {
        Expression answer;

        if (beanType != null) {            
            instance = ObjectHelper.newInstance(beanType);
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else if (instance != null) {
            answer = new BeanExpression(instance, getMethod(), parameterType); // <--
        } else {
            String ref = beanName();
            // if its a ref then check that the ref exists
            BeanHolder holder = new RegistryBean(camelContext, ref);
            // get the bean which will check that it exists
            instance = holder.getBean();
            answer = new BeanExpression(ref, getMethod(), parameterType);
        }

        // validate method
        validateHasMethod(camelContext, instance, getMethod(), parameterType);

        return answer;
    }




so that the created BeanExpression is also validate if you provide the bean type or an instance. With this change, some tests in org.apache.camel.language.SimpleTest fails.
I'm not sure whether the tests are faulty or if it's a bug.
Also not sure whether this should fixed in 2.6.","davsclaus:1295076980:2011-01-15T15:36:20.670+0000:1295076980:2011-01-15T15:36:20.670+0000:I polished the code and added a comment why we only validate the last use-case.
davsclaus:1295079952:2011-01-15T16:25:52.110+0000:1295079952:2011-01-15T16:25:52.110+0000:See CAMEL-2920

I improved the validation check to test in all 3 cases now.

trunk: 1059363."
0,CAMEL-3544,Task,Major,None,2.8.0,"
None
",Resolved,Not A Problem,2.8.0,Tracy J. Snell,Tracy J. Snell,0,0,2011-01-14 20:12:27+00:00,2011-04-15 15:37:27+00:00,No Desc,"muellerc:1295063591:2011-01-15T11:53:11.749+0000:1295063591:2011-01-15T11:53:11.749+0000:Hello Tracy,
good to see that you work on the documentation.
But the problem here is, that we target aws-sns to Camel 2.7. In the next days, Hadrian will start working to release Camel 2.6 and also the user manual. Because you already added the aws-sns documenation, it will be part of the Camel 2.6 user manual what is wrong. Could you please backup the documentation, remove/change the following pages and add the documentation again, if we released Camel 2.6.
- https://cwiki.apache.org/confluence/display/CAMEL/Component+List
- https://cwiki.apache.org/confluence/display/CAMEL/aws-sns
- https://cwiki.apache.org/confluence/display/CAMEL/Polling+Consumer
- https://cwiki.apache.org/confluence/display/CAMEL/aws

Sorry for the inconvenience...

Cheers,
Christian
rkettelerij:1295066644:2011-01-15T12:44:04.464+0000:1295066644:2011-01-15T12:44:04.464+0000:Perhaps it's an option to hide the content using:
{code}
{excerpt:hidden=true}Blah blah blah.{excerpt}
{code}
tjsnell:1295069716:2011-01-15T13:35:16.027+0000:1295069716:2011-01-15T13:35:16.027+0000:No problem! Hard part isn't copy and pasting already written docs (and that's mostly what I did any way just using docs Mark Ford wrote). 

For the SQS docs I used {show-to:user=tjsnell} I'll add that back in. I'd use group= but don't know the Jira group names or the group the script that gens the site runs as.

https://cwiki.apache.org/confluence/display/CAMEL/aws-sns  Should be fine though as long as nothing points to it correct? I can remove the page if not, Just checking for future doc tasks. Otherwise we're all set.

All references pulled or hidden using show-to.

https://cwiki.apache.org/confluence/display/CAMEL/Book+Component+Appendix also.
tjsnell:1295090603:2011-01-15T19:23:23.161+0000:1295090603:2011-01-15T19:23:23.161+0000:In the mean time I also moved the SQS page from sqs to aws-sqs and updated all the links.
rkettelerij:1302853047:2011-04-15T15:37:27.039+0000:1302853047:2011-04-15T15:37:27.039+0000:I'm marking this issue as resolved since the docs are already up for some time now at http://camel.apache.org/aws-sns."
0,CAMEL-3543,Bug,Minor,2.6.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-14 14:25:58+00:00,2011-10-25 11:36:08+00:00,"We have shared logic in camel-core-xml to use when build / loading routes from XML using JAXB. The routes must be prepared before they are usable for creating the runtime processors.


The logic should be moved into camel-core in the model package so we have it centralized and its more easy to reuse


See nabble
http://camel.465427.n5.nabble.com/Loading-routes-from-XML-files-with-Camel-2-4-0-tp3340082p3340082.html","davsclaus:1294990831:2011-01-14T15:40:31.343+0000:1294990831:2011-01-14T15:40:31.343+0000:trunk: 1059045.
davsclaus:1295070423:2011-01-15T13:47:03.878+0000:1295070423:2011-01-15T13:47:03.878+0000:trunk: 1059327."
0,CAMEL-3542,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-14 07:02:52+00:00,2011-10-25 11:36:23+00:00,This allows to process replies concurrently.,"davsclaus:1294966658:2011-01-14T08:57:38.561+0000:1294966658:2011-01-14T08:57:38.561+0000:After looking into this, its actually best to leverage the Camel {{threads}} to process replies concurrently.

The Spring DefaultMessageListenerContainer doesn't work well for concurrent processing of replies.
davsclaus:1295409901:2011-01-19T12:05:01.166+0000:1295409901:2011-01-19T12:05:01.166+0000:See section _Request-reply over JMS_ at
http://camel.apache.org/jms"
0,CAMEL-3541,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-13 17:31:43+00:00,2011-10-25 11:35:26+00:00,"If you have



        <onException>
            <handled>
                <constant>true</constant>
            </handled>
            <to uri=""mock:error""/>
        </onException>




That should validate that an exception class has specified. As it should be.



        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <to uri=""mock:error""/>
        </onException>




The Java DSL also requires at least 1 exception class defined.",davsclaus:1294962444:2011-01-14T07:47:24.330+0000:1294962444:2011-01-14T07:47:24.330+0000:trunk: 1058879.
0,CAMEL-3540,Bug,Minor,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,João Loureiro,0,1,2011-01-13 15:53:34+00:00,2011-10-25 11:36:07+00:00,"Jt400DataQueueConsumer implementation of receive(long) passes the timeout argument directly to com.ibm.as400.access.DataQueue.read(int), not performing unit conversion. However, Jt400DataQueueConsumer.receive(long) accepts milliseconds, whereas DataQueue.read(int) accepts seconds as the time unit.


Also, invoking Jt400DataQueueConsumer.receive() results in a call to DataQueue.read(), which is not a blocking call; on the contrary, it will not wait for entries.


Code snippet below.


Jt400DataQueueConsumer.java
        DataQueue queue = endpoint.getDataQueue();
        try {
            DataQueueEntry entry;
            if (timeout >= 0) {
                entry = queue.read((int)timeout);
            } else {
                entry = queue.read();
            }




Note that the submitted patch floors the timeout value when converting to seconds, but different rounding might be desired, which should be specified in the class documentation.",davsclaus:1294909181:2011-01-13T16:59:41.374+0000:1294909181:2011-01-13T16:59:41.374+0000:trunk: 1058659.
0,CAMEL-3539,New Feature,Minor,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,2,2011-01-13 13:42:34+00:00,2015-02-17 07:09:45+00:00,"For example



...
<to uri=""route:sendMail""/>
...




And then we can have a route for that



<route>
   <from uri=""route:sendMail""/>
   ...
</route>




In reality its just like a direct: endpoint but using route as scheme name. And in this case the id of the route will use the name from the uri, so it will name the route sendMail. Then you dont need to assign an explicit id.


Now suppose the sendMail route also have another source input such as from a jms queue



<route id=""sendMail>
   <from uri=""jms:queue:mail.out""/>
   ...
</route>




This  route is now having the id sendMail which you can send message to using the scheme route:sendMail.
But the route also consumes messages from a JMS queue.","boday:1300780818:2011-03-22T16:00:18.340+0000:1300780818:2011-03-22T16:00:18.340+0000:This seems to overlap with new context/routebox components...is it still a desired feature?
boday:1302193632:2011-04-08T00:27:12.115+0000:1302193632:2011-04-08T00:27:12.115+0000:here is an initial patch attempt which does the following...

-add new route component (as alias of direct)
-enhance context.getEndpoint() to also find by routeId when ""route"" scheme is used
-default the routeId for route components
-add route component test case
-add spring route component test case

its a bit rough in areas...I'm hoping some feedback will help tighten it up...thanks

davsclaus:1302230092:2011-04-08T10:34:52.763+0000:1302230092:2011-04-08T10:34:52.763+0000:Thanks Ben we will look at it in a bit later. It complicates things a bit by having a ""direct"" under the covers to be able to send a message to that route. We may need a better way to do that under the covers.

boday:1302252758:2011-04-08T16:52:38.193+0000:1302252758:2011-04-08T16:52:38.193+0000:I originally created Route component classes that extended the Direct component with the hopes of simply overriding APIs to support this use case.  Instead though, I ended up needing to modify the CamelContext's getEndpoint() method (to avoid more invasive framework changes).  So, I minimized the Route component to just using the Direct component classes directly.  Either way, if this is not an acceptable approach, I'll rework it...thanks
boday:1302867881:2011-04-15T19:44:41.973+0000:1302867881:2011-04-15T19:44:41.973+0000:please review
davsclaus:1310258217:2011-07-10T08:36:57.864+0000:1310258217:2011-07-10T08:36:57.864+0000:IMHO it should be based on the {{routeId}} and not endpoint uri. 

To keep it simple we can do
{code:xml}
<route id=""sendMail>
   <from uri=""seda:mail""/>
   ...
</route>
{code}

And then you can send a message to the route
{code}
template.sendBodyAndHeader(""route:sendMail"", ""Hello this is a mail to send"", ""to"", ""someone@somewhere.com"");
{code}

The trick is how to send the message to the route, either using a ""hidden"" direct component. Or some other means of sending the message to the route.

Lets revisit this when we have improved the routing engine to be more dynamic. Then we got better hooks for that
http://camel.apache.org/camel-30-roadmap.html"
0,CAMEL-3538,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-13 09:54:51+00:00,2011-10-25 11:36:08+00:00,"See nabble
http://camel.465427.n5.nabble.com/how-to-find-out-if-a-ftp-file-consumer-has-finished-reading-all-files-available-tp3337532p3337532.html


Having the number of messages polled allows end users to react accordingly. For example if there is 0 then they can do something special.","davsclaus:1294891415:2011-01-13T12:03:35.211+0000:1294891415:2011-01-13T12:03:35.211+0000:trunk: 1058525.
njiang:1295761246:2011-01-23T13:40:46.127+0000:1295761246:2011-01-23T13:40:46.127+0000:This patch changed the poll method return type which may break the build of user class which extends the *ScheduledPollConsumer*.
We need add some document in the ReleaseNote.
davsclaus:1295761835:2011-01-23T13:50:35.817+0000:1295761835:2011-01-23T13:50:35.817+0000:I have updated release notes under API breakings"
0,CAMEL-3537,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-13 08:12:15+00:00,2011-10-25 11:35:58+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-snmp-2-5-problems-tp3339373p3339373.html",davsclaus:1294878038:2011-01-13T08:20:38.188+0000:1294878038:2011-01-13T08:20:38.188+0000:trunk: 1058457
0,CAMEL-3536,Task,Major,2.6.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-13 05:40:37+00:00,2011-10-25 11:35:44+00:00,in the camel-aws component there is a SksComponent which should have a aws- prefix in its scheme name. This avoid any clash with any new components which may have a more natural fit using sks as its scheme name.,
0,CAMEL-3535,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Brian Feaver,0,0,2011-01-12 20:43:57+00:00,2011-10-25 11:36:00+00:00,"When creating a route that contains an aggregation, if that aggregation is preceded by a bean or process, it will fail to call AggregateOnCompletion.onComplete(). I've attached a unit test that can show you the behavior. Trace level loggging will need to be enabled to see the difference. With the call to the bean, it won't show the following log entry:



TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: ab]



If you remove the bean call, it'll start calling onComplete() again.


What I've noticed is that if this call is not made, it ends up in a memory leak since the inProgressCompleteExchanges HashSet in AggregateProcessor never has any exchange ID's removed.","davsclaus:1294870756:2011-01-13T06:19:16.088+0000:1294870756:2011-01-13T06:19:16.088+0000:Works fine in trunk
bfeaver:1294915484:2011-01-13T18:44:44.616+0000:1294915484:2011-01-13T18:44:44.616+0000:I noticed in the test that you committed, that you changed it to use a completion size instead of a completion interval or timeout. After running it against trunk with completion size, I see it does in fact call the AggregateOnCompletion.onComplete(). However, I'm still noticing that if you set an interval or timeout, it doesn't appear to hit that method.
davsclaus:1294917642:2011-01-13T19:20:42.658+0000:1294917642:2011-01-13T19:20:42.658+0000:Brain this route works fine as well
{code}
                from(""seda:start"")
                    .bean(TestBean.class)
                    .aggregate(constant(""true""), new BodyInAggregatingStrategy())
                        .completionInterval(2000)
                        .to(""mock:result"");
{code}

Trace logging show the interval task triggers and invokes the onComplete
{code}

2011-01-13 20:20:06,218 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval triggered for correlation key: true
2011-01-13 20:20:06,219 [eTimeoutChecker] DEBUG AggregateProcessor             - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,221 [eTimeoutChecker] DEBUG AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B]
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Processing aggregated exchange: Exchange[Message: A+B] complete.
2011-01-13 20:20:06,223 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2011-01-13 20:20:06,223 [eTimeoutChecker] TRACE AggregateProcessor             - Completion interval task complete
{code}
bfeaver:1294921606:2011-01-13T20:26:46.615+0000:1294921606:2011-01-13T20:26:46.615+0000:Even in your output the line I'm expecting is missing. Hope this clears up what I'm seeing. Here's the output when it works

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@77546dbc
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

Here's the output when it doesn't

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval triggered for correlation key: true
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Aggregation complete for correlation key true sending aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] DEBUG org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB]
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Processing aggregated exchange: Exchange[Message: AB] complete.
[main] INFO test.AggregationTest - Testing done: test.AggregationTest@614a75bb
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Completion interval task complete
{noformat}

The difference between the two is the following line:

{noformat}
[Camel (camel-1) thread #0 - AggregateTimeoutChecker] TRACE org.apache.camel.processor.aggregate.AggregateProcessor - Aggregated exchange onComplete: Exchange[Message: AB]
{noformat}

This would be written to the log in AggregateProcesor$AggregateOnCompletion.onComplete() on or around line 544 in AggregateProcessor.

{code}        public void onComplete(Exchange exchange) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Aggregated exchange onComplete: "" + exchange);
            }

            // only confirm if we processed without a problem
            try {
                aggregationRepository.confirm(exchange.getContext(), exchangeId);
                // and remove redelivery state as well
                redeliveryState.remove(exchangeId);
            } finally {
                // must remember to remove in progress when we are complete
                inProgressCompleteExchanges.remove(exchangeId);
            }
        }
{code}

The lack of the inProgressCompleteExchanges.remove(exchangeId); call is precisely what's causing inProgressCompleteExchanges to grow larger and not get cleaned up.
bfeaver:1294939845:2011-01-14T01:30:45.376+0000:1294939845:2011-01-14T01:30:45.376+0000:Looking through it a bit more, I believe the problem is related to the Pipeline that is created when there is a bean before the aggregation. Without the Pipeline, each exchange's unit of work is done after each iteration of the aggregation. When there is a pipeline, the pipeline is creating the next exchange as a copy of the first exchange and the unit of work for the copy is what is done instead of the original exchange. But the exchange that is stored within the aggregation repository is the original exchange, still with a unit of work defined (it hasn't been done, and therefore hasn't been set to null). When the aggregation completes, the UnitOfWorkProcessor finds the unit of work in the original exchange and doesn't complete that unit of work (process() method in UnitOfWorkProcessor).

{code}
// There was an existing UoW, so we should just pass through..
// so that the guy the initiated the UoW can terminate it.
return processor.process(exchange, callback);
{code}

Since the unit of work never gets done, it never calls the AggregateOnCompletion.onComplete() method. In a debugger, I ended up nulling out the UnitOfWork on the exchange before it finished the aggregation and it worked as expected.
davsclaus:1294969545:2011-01-14T09:45:45.883+0000:1294969545:2011-01-14T09:45:45.883+0000:Thanks Brian for explaining it in more details. I will look into it.
davsclaus:1294972652:2011-01-14T10:37:32.345+0000:1294972652:2011-01-14T10:37:32.345+0000:trunk: 1058930.

Thanks Brian it should be fixed now. Can you test it on yours side as well.
bfeaver:1294995771:2011-01-14T17:02:51.066+0000:1294995771:2011-01-14T17:02:51.066+0000:Confirmed. Working for me as well."
0,CAMEL-3503,Task,Minor,None,None,"
None
",Closed,Duplicate,2.7.0,Unassigned,Henryk Konsek,0,0,2011-01-05 18:24:17+00:00,2011-02-05 02:51:11+00:00,"I wanted to release Camel-extra 2.5.0.


I see that Claus updated all snapshots to 2.5.0. Can I just create SVN tag 2.5.0 from trunk and then change POMs version to 2.6-SNAPSHOT?


There is a Maven:release configured but: 
a) there where problems when I tried to use it on the Camel-extra some time ago
b) we cannot use release plugin when there's no snapshot versions in the project POMs


Actually I would be happy if we can just release camel-extra 2.5.0 ""manually"" (without release plugin) and try to get back it during the 2.6.0 release.","davsclaus:1294271446:2011-01-06T07:50:46.955+0000:1294271446:2011-01-06T07:50:46.955+0000:Yeah actually I don't know how camel-extra 1.0 was released in aug 2008.
http://code.google.com/p/camel-extra/source/browse/#svn%2Fmaven2%2Freleases%2Forg%2Fapache%2Fcamel%2Fextra%2Fcamel-esper

I think the maven pom.xml file have some settings for _releasing_ to that repo at google code. So if we can get version 2.5 out, that would be great.
Later we can work on having those JARs synced to central maven repo, or fusesource repo.

hekonsek:1294580712:2011-01-09T21:45:12.129+0000:1294580712:2011-01-09T21:45:12.129+0000:I've deployed version 2.5.0 of extra to extra-repo so now people can just use stable version of Camel-extra 2.5.0 (after adding extra-repo to their POM files).

I've also created 2.5.0 tag and changed trunk version to 2.6-SNAPSHOT.

While releasing 2.6.0 version I'll figure out what's wrong with the release plugin configuration to automatize the process.
davsclaus:1294704899:2011-01-11T08:14:59.708+0000:1294704899:2011-01-11T08:14:59.708+0000:We will release camel-extra *after* Camel 2.6 has been released, so I set the fix version to the next release.
hadrian:1296845471:2011-02-05T02:51:11.229+0000:1296845471:2011-02-05T02:51:11.229+0000:Duplicate of CAMEL-3615"
0,CAMEL-3502,New Feature,Major,2.6.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Olivier Roger,0,1,2011-01-05 17:24:08+00:00,2011-01-11 10:05:38+00:00,"The patch provided is an implementation of a Aggregator for JDBC.


It implements org.apache.camel.spi.AggregationRepository (2.4+) and has been tested on Camel 2.4 and 2.6.
Some details have been disscussed on the mailling list with Claus.


The implementation is very similar to the one for HawtDB. 
Unit tests have been included and use the H2 in-memory database.


About that, the Test JdbcAggregateLoadAndRecoverTest has been adapted to exclude the redeliveries from the failling messages. It is possible for a message to be sent due to a scan() background operation evn before it is send by the onCompletion() method ? 


Here is a small documentation



Database
To be operational, each aggregator uses two table: the aggregation and completed one. By convention the completed has the same name as the aggregation one suffixed with ""COMPLETED"". The name must be configured in the Spring bean with the _RepositoryName property. In the following example aggregation will be used.
The table structure definition of both table are identical: in both case a String value is used as key (id) whereas a Blob contains the exchange serialized in byte array.
However one difference should be remembered: the id field does not have the same content depending on the table.
In the aggregation table id holds the correlation Id used by the component to aggregate the messages. In the completed table, id holds the id of the exchange stored in corresponding the blob field.
Here is the SQL query used to create the tables, just replace ""aggregation"" with your aggregator repository name.

CREATE TABLE aggregation (
    id varchar(255) NOT NULL,
    exchange blob NOT NULL,
    constraint aggregation_pk PRIMARY KEY (id)
);
CREATE TABLE aggregation_completed (
    id varchar(255) NOT NULL,
    exchange blob NOT NULL,
    constraint aggregation_completed_pk PRIMARY KEY (id)
);


Codec (Serialization)
Since they can contain any type of payload, Exchanges are not serializable by design. It is converted into a byte array to be stored in a database BLOB field.
All those conversions are handled by the JdbcCodec class. One detail of the code requires your attention: the ClassLoadingAwareObjectInputStream.
The ClassLoadingAwareObjectInputStream has been reused from the ActiveMQ project. It wraps an ObjectInputStream and use it with the ContextClassLoader rather than the currentThread one. The benefit is to be able to load classes exposed by other bundles.
This allows the exchange body and headers to have custom types object references.
Transactional 
TransactionTemplate is use to wrap all the calls to the database.
Therefore a Transaction Manager is required (see bean-declaration)
Service (Start/Stop)
The JdbcAggregationRepository extends ServiceSupport. This includes the components in Camel component life cycle. 
The start() method verify the connection of the database and the presence of the required tables.
Aggregator configuration
Depending on the targeted environment, the aggregator might need some configuration. As you already know, each aggregator should have its own repository (with the corresponding pair of table created in the database) and a data source. If the default lobHandler is not adapted to your database system, it can be injected with the lobHandler property.
Here is the declaration for Oracle :

    <bean id=""lobHandler"" class=""org.springframework.jdbc.support.lob.OracleLobHandler"">
        <property name=""nativeJdbcExtractor"" ref=""nativeJdbcExtractor""/>
    </bean>

    <bean id=""nativeJdbcExtractor"" class=""org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor""/>

    <bean id=""repo"" class=""org.apache.camel.component.jdbc.aggregationRepository.JdbcAggregationRepository"">
        <constructor-arg name=""transactionManager"" ref=""transactionManager""/>
        <constructor-arg name=""repositoryName"" value=""aggregation""/>
        <constructor-arg name=""dataSource"" ref=""dataSource""/>
        <!-- Only with Oracle, else use default -->
        <property name=""lobHandler"" ref=""lobHandler""/>
    </bean>


Feature
A feature has been created : camel-jdbc-aggregator.","davsclaus:1294270767:2011-01-06T07:39:27.267+0000:1294270767:2011-01-06T07:39:27.267+0000:Oliver this is great. 

Do you mind attaching a ZIP file with the {{camel-jdbc-aggregator}} directory?
And maybe attach a smaller patch for the changes requires (excluding the stuff in the camel-jdbc-aggregator directory).

davsclaus:1294270957:2011-01-06T07:42:37.897+0000:1294270957:2011-01-06T07:42:37.897+0000:Oh can you please change the package name to *not* use any upper case letters.

org.apache.camel.component.jdbc.aggregationRepository
-->
org.apache.camel.component.jdbc.aggregationrepository

olivier.roger:1294272910:2011-01-06T08:15:10.531+0000:1294272910:2011-01-06T08:15:10.531+0000:I attached the differents requested files:

* *jdbc-aggregator.patch* is a corrected version of the patch without uppercase
* *camel-jdbc-aggregator.zip* is the component directory archive
* *jdbc-aggregator-other-changes.patch* for all the other changes
davsclaus:1294273423:2011-01-06T08:23:43.963+0000:1294273423:2011-01-06T08:23:43.963+0000:Thanks Oliver that was fast. So lets try to get it included in Camel 2.6.

Do you have access to edit the wiki pages? In case you want to add documentation and in general help improve the documentation?
olivier.roger:1294273944:2011-01-06T08:32:24.852+0000:1294273944:2011-01-06T08:32:24.852+0000:I just registered for a new user account. I don't have access at the moment.
davsclaus:1294275043:2011-01-06T08:50:43.072+0000:1294275043:2011-01-06T08:50:43.072+0000:Oliver we should improve the {{JdbcAggregationRepository}} to have a default constructor so you dont have to do the ugly constructor-arg stuff in spring xml file.
If we have getter/setters then tooling can better assist you as they have auto completion in spring XML files.

And we can check that all options has been set in the doStart method, this is the Camel idiom.

We can revisit this when the patch has been commited to trunk.
olivier.roger:1294275858:2011-01-06T09:04:18.085+0000:1294275858:2011-01-06T09:04:18.085+0000:Sure !

Having properties instead of constructor arguments would be nice.
davsclaus:1294277149:2011-01-06T09:25:49.391+0000:1294277149:2011-01-06T09:25:49.391+0000:Thanks Oliver for donating this great work. I have committed it to trunk: 1055799.

I added missing licenses and fixed checkstyle
http://camel.apache.org/building.html

Oliver would be nice if you could work on the properties for the options and provide a patch for that.
olivier.roger:1294282716:2011-01-06T10:58:36.420+0000:1294282716:2011-01-06T10:58:36.420+0000:Attached the patch to replace constructor arguments by properties.

davsclaus:1294290780:2011-01-06T13:13:00.709+0000:1294290780:2011-01-06T13:13:00.709+0000:trunk: 1055860.

Thanks Oliver.
olivier.roger:1294711538:2011-01-11T10:05:38.295+0000:1294711538:2011-01-11T10:05:38.295+0000:About the documentation,

I created a user on Camel Confluence instance: 

{quote}
Full Name: Olivier Roger
Email: olivier.roger@bsb.com 
{quote}

I might not have a full documentation ready for Camel 2.6 release but I can still improve it later."
0,CAMEL-3501,New Feature,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Ashwin J. Karpe,James Strachan,0,0,2011-01-05 16:11:51+00:00,2011-10-25 11:35:37+00:00,"Here's a list of pattern and property that has missing @Required annotation. There might be a few others I've missed, but at first look these look likely candidates



 ConvertBody . type
 ExpressionDefinition . expression
 LoadBalance . ref
 Log . logName
 Marshal . ref
 Process . ref
 SetHeader . headerName
 SetOutHeader . headerName
 SetProperty . propertyName
 Unmarshal . ref","akarpe:1296563317:2011-02-01T20:28:37.337+0000:1296563317:2011-02-01T20:28:37.337+0000:Updated the listed Model Definitions to add the @Required annotations on specific setter methods
akarpe:1296564843:2011-02-01T20:54:03.683+0000:1296564843:2011-02-01T20:54:03.683+0000:Committed to the Camel trunk following unit tests as revision r1066201"
0,CAMEL-3500,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-05 15:06:23+00:00,2011-10-25 11:35:46+00:00,"When routing messages in Camel, they may have some pre-set headers which Camel has set. Those headers all start with ""Camel"". Those keys should be intern so we can reduce memory consumption.",davsclaus:1294212798:2011-01-05T15:33:18.834+0000:1294212798:2011-01-05T15:33:18.834+0000:trunk: 1055489.
0,CAMEL-3499,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Moulliard Charles,0,0,2011-01-05 10:07:27+00:00,2011-01-06 10:08:48+00:00,"I would like to use camel-soap into the following camel route


   <cxf:cxfEndpoint id=""busServicesFinder""
                    address=""http://localhost:8282/cxf/serviceFinder""
                    serviceClass=""fr.client.proxy.Services"">
   </cxf:cxfEndpoint>


   <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">


       <dataFormats>
           <soapjaxb id=""soap"" contextPath=""fr.client.proxy""/>
       </dataFormats>


       <route>
           <from uri=""cxf:bean:busServicesFinder?dataFormat=MESSAGE""/>
           <log message=""WebService called"" loggingLevel=""INFO""/>
           <!-- <convertBodyTo type=""String""/> -->
           <unmarshal ref=""soap""/>
           ...


but I get the following error in karaf when CXF extract the content and parse it with JAXB


Additional info


>  * which jaxb bundle is/are deployed ?
[ 200] [Active     ] [            ] [       ] [   60] Apache
ServiceMix :: Bundles :: jaxb-impl (2.1.13.1)


>  * does the system bundle export the sun packages ?
No


200 com.sun.xml.bind.v2
  200 com.sun.xml.bind.v2.model.annotation
  200 com.sun.xml.bind.unmarshaller
  200 com.sun.xml.bind.api.impl
  200 com.sun.xml.bind.v2.schemagen.episode
  200 com.sun.xml.bind.v2.util
  200 com.sun.xml.bind.v2.runtime.unmarshaller
  200 com.sun.xml.bind.marshaller
  200 com.sun.xml.bind.v2.model.runtime
  200 com.sun.xml.bind.v2.runtime.reflect.opt
  200 com.sun.xml.bind.v2.schemagen.xmlschema
  200 com.sun.xml.bind
  200 com.sun.xml.bind.v2.model.core
  200 com.sun.xml.bind.v2.runtime.output
  200 com.sun.xml.bind.v2.bytecode
  200 com.sun.xml.bind.api
  200 com.sun.xml.bind.v2.model.impl
  200 com.sun.xml.bind.v2.model.nav
  200 com.sun.xml.bind.v2.schemagen
  200 com.sun.xml.bind.util
  200 com.sun.xml.bind.v2.runtime.reflect
  200 com.sun.xml.bind.v2.runtime
  200 com.sun.xml.bind.annotation
  200 com.sun.xml.bind.v2.runtime.property


>  * is there a boot delegation on the com.sun.* packages from the jre ?
Yes (karaf - 2.1-SNAPSHOT)



as thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Unable to create context
       at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:223)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:200)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:113)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:68)[600:org.apache.camel.camel-cxf:2.5.0]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[598:org.apache.cxf.bundle:2.2.11]
       at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_22]
       at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_22]
       at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_22]
       at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:111)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:311)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:275)[598:org.apache.cxf.bundle:2.2.11]
       at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)[598:org.apache.cxf.bundle:2.2.11]
       at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.Server.handle(Server.java:326)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
       at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)[569:org.apache.servicemix.bundles.jetty-bundle:6.1.22.1]
Caused by: java.io.IOException: Unable to create context
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:80)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.IOHelper.createIOException(IOHelper.java:72)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:151)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.unmarshal(SoapJaxbDataFormat.java:226)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:51)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:174)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[202:org.apache.camel.camel-core:2.5.0]
       at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:80)[600:org.apache.camel.camel-cxf:2.5.0]
       ... 23 more
Caused by: javax.xml.bind.JAXBException: Unable to create context
 - with linked exception:
[java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:72)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:77)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:73)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       at org.apache.camel.dataformat.soap.SoapJaxbDataFormat.createContext(SoapJaxbDataFormat.java:286)[603:org.apache.camel.camel-soap:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.getContext(JaxbDataFormat.java:183)[602:org.apache.camel.camel-jaxb:2.5.0]
       at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:126)[602:org.apache.camel.camel-jaxb:2.5.0]
       ... 47 more
Caused by: java.lang.NoSuchMethodException:
com.sun.xml.bind.v2.ContextFactory.createContext(java.lang.String,
java.lang.ClassLoader)
       at java.lang.Class.getMethod(Class.java:1605)[:1.6.0_22]
       at javax.xml.bind.ContextFinder.find(ContextFinder.java:69)[198:org.apache.servicemix.specs.jaxb-api-2.1:1.5.0]
       ... 53 more","njiang:1294255927:2011-01-06T03:32:07.991+0000:1294255927:2011-01-06T03:32:07.991+0000:@ Charles,
As you know, JDK 1.6 also shipped the jaxb impl. If you enable the boot delegation,  there could be more then two jaxb implementation will be located by the jaxb-api.
Can you try to run the test case within JDK 1.5 or don't enable the boot delegation of ""com.sun.xml"" and try again?

BTW, I committed an OSGi unit test with pax exam into camel trunk, it works well.
cmoulliard:1294271586:2011-01-06T07:53:06.665+0000:1294271586:2011-01-06T07:53:06.665+0000:I have removed the two bundles providing JAXB support to only use what is provided by JDK 1.6

[  61] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.5.0
[  63] [Active     ] [            ] [       ] [   60] mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.13_1

BUT now I'm faced to the following error with camel-soap bundle

It cannot find the following packages

javax.xml.ws;version=""[2.1,3)"",
org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

but javax.xml.ws is well exported by JDK ....
njiang:1294273825:2011-01-06T08:30:25.762+0000:1294273825:2011-01-06T08:30:25.762+0000:The jaxax.xml.ws is exported by JDK, the package has no version range, 
if we install other JAXWS API bundle,  I'm not sure the OSGi platform can help us to resolve it.

""org.xmlsoap.schemas.soap.envelope"" is exported by camel-soap bundle, it should not export the package which it exports.
cmoulliard:1294274288:2011-01-06T08:38:08.525+0000:1294274288:2011-01-06T08:38:08.525+0000:I propose that we remove the version range of camel-soap to allow to work with packages exported by JDK

{code}
Import-Package = 
	javax.jws;version=""[2.0,3)"",
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws;version=""[2.1,3)"",
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)"",
	org.xmlsoap.schemas.soap.envelope;version=""[2.5,3)""

{code}

--> should become

{code}
Import-Package = 
	javax.jws,
	javax.xml.bind,
	javax.xml.bind.annotation,
	javax.xml.namespace,
	javax.xml.ws,
	org.apache.camel;version=""[2.5,2.6)"",
	org.apache.camel.component.bean;version=""[2.5,2.6)"",
	org.apache.camel.converter.jaxb;version=""[2.5,2.6)"",
	org.apache.camel.spi;version=""[2.5,2.6)""
{code}
cmoulliard:1294279387:2011-01-06T10:03:07.906+0000:1294279387:2011-01-06T10:03:07.906+0000:If we want to support packages exported by JRE/JDK while packages exported by ServiceMix bundles or specs, then we should add as version range like this

ex: javax.jws;version=""[0,3)"",

I have made the change manually into the manifest of camel-soap and being able to deploy my camel route
njiang:1294279728:2011-01-06T10:08:48.063+0000:1294279728:2011-01-06T10:08:48.063+0000:committed the patch into Camel trunk repository."
0,CAMEL-3498,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Ralf Steppacher,0,0,2011-01-05 09:38:56+00:00,2011-10-25 11:36:05+00:00,"Setting 'streaming = ""true""' breaks error handling:
If an exception is thrown in a processor, the exception in the subExchange is copied to the original exchange in MulticastProcessor line 554. In Splitter line 140 the original exchange is copied, including the exception that was thrown while processing the previous exchange. This prevents all subsequent exchanges from being processed successfully.","davsclaus:1294195405:2011-01-05T10:43:25.160+0000:1294195405:2011-01-05T10:43:25.160+0000:Try with 2.6-SNAPSHOT as said on user forum and if its still an issue (you think) then attach a test case / sample. And pin point what you expect to happen.

davsclaus:1294195430:2011-01-05T10:43:50.534+0000:1294195430:2011-01-05T10:43:50.534+0000:See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html
rsteppac:1294277346:2011-01-06T09:29:06.884+0000:1294277346:2011-01-06T09:29:06.884+0000:The problem is still present in the 2.6-SNAPSHOT.

Expectation: 
If in a route like below an exception is raised in the line validation processor, then that exception should be logged once and the message exchange for that particular source line should not be forwarded to the destination. Subsequent source lines that pass validation should be forwarded to the destination.

Actual:
The first source line failing validation/raising an exception prevents all subsequent source lines from being forwarded to the destination. For every subsequent source line the exception of the one failing line is logged again.

<camel:route id=""fileConsumer1"">
	<camel:from uri=""file://c:/tmp/"" />
	<camel:split streaming=""true"">
		<camel:tokenize token=""\r\n"" />
		<camel:process ref=""myValidationProcessorThrowingExceptionsOnFail"" />
		<camel:to uri=""activemq:queue:MY.TOKEN.QUEUE"" />
	</camel:split>
</camel:route>
davsclaus:1294293615:2011-01-06T14:00:15.457+0000:1294293615:2011-01-06T14:00:15.457+0000:It doesn't matter if you use streaming or not.

davsclaus:1294300545:2011-01-06T15:55:45.331+0000:1294300545:2011-01-06T15:55:45.331+0000:trunk: 1055913"
0,CAMEL-3497,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Ralf Steppacher,0,0,2011-01-05 09:21:34+00:00,2011-10-25 11:35:36+00:00,"Setting 'streaming=""true"" parallelProcessing=""true""' consumes large amounts of heap space for big original messages. E.g. 1024m of heap is not enough to process an 80Mb with 500'000 lines, splitting it line by line.
The problem seems to be the ArrayList in MulticastProcessor line 224. It contains a Future<Exchange> object for every token delivered by the java.util.Scanner. The list is only cleared (going out of scope) after all Future objects have been completed.","davsclaus:1294195458:2011-01-05T10:44:18.126+0000:1294195458:2011-01-05T10:44:18.126+0000:See nabble
http://camel.465427.n5.nabble.com/2-Bugs-in-Splitter-Camel-2-5-0-tp3326727p3326727.html
davsclaus:1294201048:2011-01-05T12:17:28.479+0000:1294201048:2011-01-05T12:17:28.479+0000:Yeah the tasks list is only used for cancelling tasks which isn't needed to be processed anymore due we are done due timeout or stop on exception. So it should be possible to refactor the code to not use a task list for that. 
davsclaus:1294211018:2011-01-05T15:03:38.001+0000:1294211018:2011-01-05T15:03:38.001+0000:The CompletionService holds a reference to the Future so there is no gain really.
davsclaus:1294220188:2011-01-05T17:36:28.336+0000:1294220188:2011-01-05T17:36:28.336+0000:The issue is the splitter copies the exchange for each splitted message. And the CompletionService keeps reference to all exchanges, which means we end up with a lot of Exchange at once in memory which eats up memory.

Will have to come up with some way of discarding not needed exchanges during processing. Maybe even using something else than the CompletionService if its the culprint.
I added this to the known issues to Camel 2.5 release notes.
davsclaus:1294277736:2011-01-06T09:35:36.683+0000:1294277736:2011-01-06T09:35:36.683+0000:Camel 3.0 will have internal optimization which helps reducing memory footprint used during routing.
davsclaus:1294380448:2011-01-07T14:07:28.441+0000:1294380448:2011-01-07T14:07:28.441+0000:trunk on Camel 2.6 in rev 1056325:
Cancelling future tasks is now done using a running boolean instead of a keeping a big array list with the future references.
davsclaus:1294389811:2011-01-07T16:43:31.281+0000:1294389811:2011-01-07T16:43:31.281+0000:trunk on Camel 2.6 in rev 1056380:

I have reduced memory consumption used, which should allow it to be a bit better. But the splitter still uses a bit additional memory due the splitting is based on a copy of the input message for each splitted message.

Ralf you are welcome to test again and see if you can process a bit more than previously.
davsclaus:1294454973:2011-01-08T10:49:33.991+0000:1294454973:2011-01-08T10:49:33.991+0000:Okay good news. I refactored the logic so Camel now aggregates the parallel tasks on-the-fly.

This makes a tremendous difference. Now I can split a file into 50.000 sub messages and process that in 7 sec, using at most 18mb.
Before I would hit an issue at about 25.000-30.000 message and hit OOME with 130mb.

Since the logic is more complex because there is a separate tasks which aggregates on the fly, while the other task submit new tasks, there is logic to signal between the two tasks. They kinda need to agree when there are no more messages to split, and when it has aggregated all of those.
davsclaus:1294478825:2011-01-08T17:27:05.135+0000:1294478825:2011-01-08T17:27:05.135+0000:I ran a test with 1.000.000 rows in a file
{code}
2011-01-08 18:25:44,216 [read #9 - Split] INFO  split                          - Received: 1000000 messages so far. Last group took: 50 millis which is: 20,000 messages per second. average: 17,775.566
2011-01-08 18:25:44,217 [main           ] INFO  SplitterParallelBigFileTest    - Took 57.423 seconds
2011-01-08 18:25:44,218 [://target/split] INFO  route1                         - Done splitting bigfile.txt
{code}

And the memory usage was at most 33mb at peak.
davsclaus:1294478997:2011-01-08T17:29:57.556+0000:1294478997:2011-01-08T17:29:57.556+0000:trunk: 1056744.

Now it should run with low memory consumption and you should be able to process very big files.

Ralf fell free to test with latest code on your system.
davsclaus:1294624786:2011-01-10T09:59:46.762+0000:1294624786:2011-01-10T09:59:46.762+0000:Fixed rare potential deadlock issue with aggregate task not being given time to run due thread pool overloaded when running in parallel mode on multicast/splitter.

trunk: 1057139."
0,CAMEL-3496,Improvement,Major,2.5.0,2.16.0,"
None
",Resolved,Implemented,2.16.0,Claus Ibsen,Claus Ibsen,1,3,2011-01-05 08:51:56+00:00,2015-08-08 15:04:43+00:00,"1)
The bindy API is unfortunately a bit cumbersome because it stores its result in a List<Map<String, Object>> structure. 
Instead it should store the object directly in the List<Object>
End users would expect this instead of the cumbersome API.


2)
Also the marshal and unmarshal operators should take an optional class name so you know which class to use in case you use a package which has other @CsvRecord classes in the same package. Then you can tell Camel to use this class in case of ambiguity.


3)
And if you use multiple objects for one @Record we should introduce an option on the @Record to mark the class as the top class (the starting class).


4)
And the source code could use a bit of love here and there, and most likely add more checks and throw better exceptions so end users better understand what would be wrong.


This will break backwards comp. so let's try to do this for Camel 3.0","davsclaus:1335762557:2012-04-30T13:09:17.783+0000:1335762557:2012-04-30T13:09:17.783+0000:Made it a bit better as you can specify the class type directly instead of the package, which makes it stand out which type you use.
The problem with 2+ models in the same package still stands. But that takes much more work to fix.
davsclaus:1335762605:2012-04-30T13:10:05.358+0000:1335762605:2012-04-30T13:10:05.358+0000:Also if you use a type class, and there is only 1 pojo, then the pojo is not wrapped in a list. This makes it easier for 1:1 mappings.
cmoulliard:1367275164:2013-04-30T06:39:24.322+0000:1367275164:2013-04-30T06:39:24.322+0000:1)
The bindy API is unfortunately a bit cumbersome because it stores its result in a List<Map<String, Object>> structure. 
Instead it should store the object directly in the List<Object>
End users would expect this instead of the cumbersome API.

>> I know that when I have created camel-bindy and decided to use List<Map<String, Object>>, the choice to adopt this structure was not evident and will complicate data extraction, ... Anyway, I don't thing that replacing it by List<Object> is also the solution as the model could contain several objects of different types (e.g. List(Order, Person, Record, ...) 

2)
Also the marshal and unmarshal operators should take an optional class name so you know which class to use in case you use a package which has other @CsvRecord classes in the same package. Then you can tell Camel to use this class in case of ambiguity.

>> Can you provide an example as I don't really see the advantage / added value of that ? 

3)
And if you use multiple objects for one @Record we should introduce an option on the @Record to mark the class as the top class (the starting class).

>> As we also have Footer, Header or Trailer classes for FixedLengthDataFormat, we should certainly find a more general mechanism to define if a class is top/trailer or header/core/footer

davsclaus:1439017483:2015-08-08T15:04:43.825+0000:1439017483:2015-08-08T15:04:43.825+0000:Lets assume most of this is done with the bindy contribution we got for 2.16 that do not use package name anymore."
0,CAMEL-3495,New Feature,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2011-01-05 07:37:31+00:00,2011-10-25 11:35:27+00:00,"Tracy, could you work on this as you suggested?
We need a wiki page for this component. Also the following sites must be update:



https://cwiki.apache.org/confluence/display/CAMEL/Batch+Consumer
https://cwiki.apache.org/confluence/display/CAMEL/Components
https://cwiki.apache.org/confluence/display/CAMEL/Component+List
https://cwiki.apache.org/confluence/display/CAMEL/Book+Component+Appendix
https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.6.0+Release","tjsnell:1294201196:2011-01-05T12:19:56.619+0000:1294201196:2011-01-05T12:19:56.619+0000:Already started work on it yesterday. I'll get it wrapped up.
tjsnell:1294206148:2011-01-05T13:42:28.949+0000:1294206148:2011-01-05T13:42:28.949+0000:https://cwiki.apache.org/confluence/display/CAMEL/aws
https://cwiki.apache.org/confluence/display/CAMEL/sqs

Added and other pages have been updated.

Still tweaking the SQS page and will close as soon as I think it's good for a first pass.
muellerc:1294224230:2011-01-05T18:43:50.891+0000:1294224230:2011-01-05T18:43:50.891+0000:I like it. It looks really good.
A few remarks:
- document the amazonSQSClient option
- default value for deleteAfterRead is true (in my opinion it makes more sense)
- document the visibilityTimeout option
- document the defaultVisibilityTimeout option
- document the attributeNames option
- document the maxMessagesPerPoll option
muellerc:1294395288:2011-01-07T18:14:48.591+0000:1294395288:2011-01-07T18:14:48.591+0000:I check the documentation and added some information. Now, we are finish.
muellerc:1294395455:2011-01-07T18:17:35.315+0000:1294395455:2011-01-07T18:17:35.315+0000:Thank you Tracy for your good work. Looking forward of the sns component...
tjsnell:1294397717:2011-01-07T18:55:17.087+0000:1294397717:2011-01-07T18:55:17.087+0000:Thanks for finishing the docs! Just went to edit it and your changes hadn't pushed. Nice surprise."
0,CAMEL-3494,Improvement,Major,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2011-01-05 07:00:28+00:00,2011-10-25 11:35:21+00:00,"Current CXF RefectServiceFactoryBean doesn't support to look up the ServiceName and EndpointName from WSDL, an customer ServiceConfiguration can help us to do it.",
0,CAMEL-3493,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jim Newsham,0,0,2011-01-05 01:09:05+00:00,2011-10-25 11:35:51+00:00,"I get the following exception in DefaultCamelContext.removeRouteDefinitions().  We are removing route definitions from multiple threads.  I see synchronization in various other methods, but not this one. 


Caused by: java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at java.util.AbstractCollection.removeAll(AbstractCollection.java:336)
	at org.apache.camel.impl.DefaultCamelContext.removeRouteDefinitions(DefaultCamelContext.java:588)","jn:1294161251:2011-01-05T01:14:11.102+0000:1294161251:2011-01-05T01:14:11.102+0000:We are also adding routes from multiple threads.  Although I haven't seen a problem yet, from looking at the source code it looks like the same problem exists with addRouteDefinitions().
davsclaus:1294180748:2011-01-05T06:39:08.990+0000:1294180748:2011-01-05T06:39:08.990+0000:trunk: 1055309"
0,CAMEL-3492,Task,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2011-01-05 00:00:26+00:00,2013-05-02 02:29:35+00:00,"jackson-core-asl and jackson-mapper-asl 1.6.4 is available and a required dependency of aws-java-sdk
http://repository.codehaus.org/org/codehaus/jackson/jackson-core-asl/1.6.4/",
0,CAMEL-3491,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Pavel Grushetzky,0,1,2011-01-04 23:55:50+00:00,2012-07-06 08:23:46+00:00,"Introduce DSL to generate exchanges



periodically, with a defined interval between fires. This is synonymous to timer component
per cron schedule, just like  quartz component does



The resulting DSL intends to be a shortcut/replacement to ""from"" clause for typical schedule-triggered routes.","pagrus:1294156622:2011-01-04T23:57:02.296+0000:1294156622:2011-01-04T23:57:02.296+0000:Attaching patch that builds on top of CAMEL-3439
pagrus:1294158859:2011-01-05T00:34:19.465+0000:1294158859:2011-01-05T00:34:19.465+0000:Basically, attached patch introduces one shortcut for timer, and another one for quartz.

{code}
schedule(""myTimer"") every(2 minutes 30 seconds) to(""whatever"")
{code}

{code}
schedule(""myTimer"") cron(""0 0/15 * * * ?"") to(""whatever"")
{code}

timer name is optional; one can use
{code}
schedule every(2 minutes 30 seconds) to(""whatever"")
{code}
{code}
schedule cron(""0 0/15 * * * ?"") to(""whatever"")
{code}
and then generated timer name will be ""scalaScheduleN"", where N is a static counter.


Both single-line and block syntax supported, _but_ this patch introduces ""block"" keyword to make that happen. 
{code}
schedule every(2 minutes 30 seconds) block {
  to(""foo"")
  to(""bar"")
}
{code}
{code}
schedule cron(""0 0/15 * * * ?"") block {
  to(""foo"")
  to(""bar"")
}
{code}
""block"" is an alias for ""==>"" . The problem it solves is operator precedence: ""==>"" has higher precedence, thus alphanumeric infix operators on left hand side won't evaluate properly. ""block"" is of same precedence, so it will work. Mode details in section ""6.12.3 Inﬁx Operations"" from [scala spec|http://www.scala-lang.org/docu/files/ScalaReference.pdf]


davsclaus:1341534225:2012-07-06T08:23:45.994+0000:1341534225:2012-07-06T08:23:45.994+0000:We should keep the DSLs in sync between java/xml/scala/groovy etc."
0,CAMEL-3490,New Feature,Major,2.5.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Guillaume Nodet,0,1,2011-01-04 22:13:59+00:00,2011-10-25 11:36:11+00:00,No Desc,"gnodet:1294150496:2011-01-04T22:14:56.608+0000:1294150496:2011-01-04T22:14:56.608+0000:See http://karaf.922171.n3.nabble.com/Jetty-security-camel-servlet-td2120289.html
njiang:1294636809:2011-01-10T13:20:09.189+0000:1294638425:2011-01-10T13:47:05.889+0000:camel-sevlet can't know the aliens, servlet name and http context before it registers the servlet into the OSGi http service.
It should be done in the customer bundle like the Web.xml does.

In CAMEL-3485 you can bind the CamelServlet with the Camel-Servlet component easily, if the customer bundle activator export the Servlet as a CamelServletService like this.
{code}
<osgi:reference id=""camelHttpTransportServlet""    interface=""org.apache.camel.component.servlet.CamelServletService""/>
        
   <bean id=""servlet"" class=""org.apache.camel.component.servlet.ServletComponent"">
      <property name = ""camelServletService"" ref=""camelHttpTransportServlet"" />
   </bean>

   <bean id=""servletProcessor"" class=""org.apache.camel.itest.osgi.servlet.ServletProcessor"" />
  
   <camelContext xmlns=""http://camel.apache.org/schema/spring"">
     <camel:route>
       <camel:from uri=""servlet:///hello""/>
       <camel:process ref=""servletProcessor""/>
     </camel:route>
   </camelContext>
{code}

cschneider:1296881730:2011-02-05T12:55:30.686+0000:1296881730:2011-02-05T12:55:30.686+0000:Hi Willem,

I also had the problem of registering the camel servlet in osgi. I think I have found a quite nice solution. The source is attached. Perhaps this could solve this issue.

The ServletRegisterer could be put in the camel servlet code. The beans.xml should be put in the META-INF/spring directory of the user.

What do you think?

Christian

njiang:1296933360:2011-02-06T03:16:00.663+0000:1296933360:2011-02-06T03:16:00.663+0000:Hi Christian,

I think the ServletRegisterer can help the user set the aliens, servlet name and http context. 
+1 for putting this file into the camel-servlet component.
But I think the user should write the beans.xml himself to load the camel context, and setup the servlet.

Willem
cschneider:1296964204:2011-02-06T11:50:04.064+0000:1296964204:2011-02-06T11:50:04.064+0000:I have committed the OsgiServletRegisterer. What about the CamelServletService? I guess it could still be needed to share a servlet among several bundles.

Btw. I thought about a completely different solution to this for OSGI. We could create a Servlet for each endpoint, register it when the endpoint comes up and deregister it when it goes down. At least in OSGI I think this would be much simpler. I don´t know though if the same can be d done for servlets ouside osgi.

davsclaus:1296965937:2011-02-06T12:18:57.246+0000:1296965937:2011-02-06T12:18:57.246+0000:Christian I think you must put the osgi code in a sub package, eg

org.apache.camel.component.servlet.osgi

This ensures the classloader in non osgi environments will not barf
about not able to find OSGI JARs.
We do the same in camel-core, see the Activator class in the core, as
its in a .osgi sub package.
cschneider:1296985065:2011-02-06T17:37:45.030+0000:1296985065:2011-02-06T17:37:45.030+0000:Done. I am curious though why it is necessary. Is it because of the package scan for components? In normal class loading I thought each class would be loaded on it´s own.
davsclaus:1298329039:2011-02-22T06:57:19.569+0000:1298329039:2011-02-22T06:57:19.569+0000:What's the status of this ticket?
njiang:1298330812:2011-02-22T07:26:52.990+0000:1298330812:2011-02-22T07:26:52.990+0000:I think we can resolve this issue as user can use the ServletRegiester to deploy the servlet into the OSGi as they want, and the bean.xml shows how to load the camel context at the same time.
cschneider:1298332132:2011-02-22T07:48:52.934+0000:1298332132:2011-02-22T07:48:52.934+0000:Yes .. I first thought we could do even better by registering one servlet per endpoint. Now I found that this is only possible for osgi at the moment. I don´t think it would be a goo idea to have osgi and non osgi so different. So I think what we now have with the OsgiServletRegisterer is a good as we can get it before we can use servlet 3.0 so let´s close this."
0,CAMEL-3489,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Steven Lewis,0,0,2011-01-04 19:32:53+00:00,2011-10-25 11:35:47+00:00,"Attempting to unmarshall a pipe delimited CSV file into a POJO using Bindy causese the first and last character the the line processed to be dropped.  It appears that the BindyCsvDataFormat class removes the first and the last character from the line read from the CSV if the seperator is > 1 characters in length (see below or line 162-165 in BindyCsvDataFormat).  For pipe delimited files, you need to specify | as the seperator, as | is not evaluated correctly as a java regex by the split fuction.  This leads to the first and last character for the line being parsed being dropped.  From the comments it appears a ""fix"" was added to remove the first and last character of the line when the seperator contains quotes or double quotes.  Making this determination using the length of the seperator, rather than evaluating using a regex seems to be a poor solution that breaks other CSV delimiters.


See Attached for an code example.","steven.lewis:1294141039:2011-01-04T19:37:19.481+0000:1294141039:2011-01-04T19:37:19.481+0000:place bug.txt in a directory called bug
davsclaus:1294191051:2011-01-05T09:30:51.542+0000:1294191051:2011-01-05T09:30:51.542+0000:trunk: 1055373.

Also fixed issue with using quoted csv records."
0,CAMEL-3488,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Marco Zapletal,0,1,2011-01-04 18:35:54+00:00,2011-10-25 11:35:38+00:00,"JpaTraceEventMessage has a bunch of String attributes defined. Applying no annotations on String attributes of an @Entity result in generated database columns with a constrained length (e.g., using EclipseLink and MySQL, a String attribute of an @Entity is mapped to a VARCHAR(255) field).


Several values of JpaTraceEventMessage are probably carrying values larger than 255 characters. Using JPAs @Lob annotation tackles this problem by generating (C)LOB fields. 


The attached patch defines the @Lob annotation on attributes which are expected to carry such large values.","davsclaus:1294186853:2011-01-05T08:20:53.028+0000:1294186853:2011-01-05T08:20:53.028+0000:trunk: 1055348.

Thanks for the patch."
0,CAMEL-3487,Bug,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Tracy J. Snell,0,0,2011-01-04 17:49:31+00:00,2011-10-25 11:36:16+00:00,Needed servlet-api,"hadrian:1294140746:2011-01-04T19:32:26.477+0000:1294140746:2011-01-04T19:32:26.477+0000:Patch applied (r1055149) with thanks to Tracy. Great contribution, keep them coming."
0,CAMEL-3486,Improvement,Trivial,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-04 17:18:57+00:00,2011-10-25 11:35:49+00:00,This helps use of NotifyBuilder as matches doesn't operate until you have created the notifier.,davsclaus:1294132836:2011-01-04T17:20:36.194+0000:1294132836:2011-01-04T17:20:36.194+0000:trunk: 1055107
0,CAMEL-3485,Improvement,Major,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2011-01-04 12:58:59+00:00,2011-10-25 11:35:56+00:00,"Current camel-servlet doesn't support to use the servlet which export in the OSGi Service Registry.
CXFServletService can help the ServletComponent connect or disconnect the HttpConsumer with the Servlet service.",
0,CAMEL-3484,Bug,Major,None,None,"
None
",Closed,Fixed,2.6.0,Tracy J. Snell,Tracy J. Snell,0,0,2011-01-04 01:58:33+00:00,2011-01-04 02:36:30+00:00,The spring feature won't load because the feature has the dependencies in the wrong order. Looks like it happened at revision 949956.,"njiang:1294078758:2011-01-04T02:19:18.156+0000:1294078758:2011-01-04T02:19:18.156+0000:@Tracy,
Can you also past the stack trace?
The spring feature wasn't changed for a long time, I'm not sure why the bundle dependencies order can cause this kind error.
 
tjsnell:1294079760:2011-01-04T02:36:00.099+0000:1294079760:2011-01-04T02:36:00.099+0000:Haha. Can we delete this issue and pretend it didn't happen. As a simplistic test I did
{code}install -s ....{code}
for each bundle in the feature. Which of course would give and error if the order was incorrect. However, order doesn't matter in features since each bundled is installed then after all are installed they are each started. Stupid shortcut test on my part!


tjsnell:1294079790:2011-01-04T02:36:30.192+0000:1294079790:2011-01-04T02:36:30.192+0000:Let's just pretend this never happened."
0,CAMEL-3483,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2011-01-03 22:53:23+00:00,2012-02-07 15:08:16+00:00,See discussion in Nabble: http://camel.465427.n5.nabble.com/csv-unmarshal-uses-default-encoding-td3325474.html,
0,CAMEL-3482,Task,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Christian Müller,0,0,2011-01-03 22:43:08+00:00,2011-10-25 11:35:42+00:00,"Site mailing lists has a broken link to tips for getting help. The wiki page can be found at Tips for getting help, but I cannot find the page on the Apache site.",davsclaus:1294122630:2011-01-04T14:30:30.686+0000:1294122630:2011-01-04T14:30:30.686+0000:I linked it to the support page.
0,CAMEL-3481,Improvement,Major,2.5.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Aaron Mulder,0,2,2011-01-03 20:32:49+00:00,2011-07-28 02:45:17+00:00,"In an OSGi environment, the ScriptEngineManager that ScriptBuilder uses can't find any scripting engines except the ones packaged in the JDK (Rhino, maybe AppleScript, etc.).  It's possible that setting a better ClassLoader would work, or perhaps using a singleton ScriptEngineManager and setting up the scripting engines in an OSGi Activator instead of relying on the META-INF lookup every time a script is invoked.","ammulder:1294929302:2011-01-13T22:35:02.861+0000:1294929302:2011-01-13T22:35:02.861+0000:I have a patch that resolves this issue.  It relies on looking for script engines in org.apache.camel.impl.osgi.Activator (same as when it looks for components and data formats and the like).  Then in ScriptBuider in camel-script, if the normal mechanism for loading script engines fails, it checks whether OSGi is available and attempts to load the script engines found by the Activator.

The main issue with this approach is that it adds a dependency on javax.script to camel-core (where the OSGi Activator lives).  It uses the same pattern as the other stuff in there -- a ScriptEngineResolver that uses the ScriptEngineFactory and so on.  This is fine for Java 6 and up (where javax.script is integrated).  I'm not clear whether people feel it's OK to add the javax.script dependency for Java 5 support.

Thoughts on that?

I also have a new test for camel-itest-osgi that demonstrates the problem and solution, and I will go ahead and commit that in any case.  However, the test will be @Ignore'd because it doesn't run even with the new code without a JRuby OSGi bundle and the default JRuby distribution in Maven does not seem to work for that.
ammulder:1294942695:2011-01-14T02:18:15.494+0000:1294942695:2011-01-14T02:18:15.494+0000:Patch files for review.  Note that the camel-core patch introduces a dependency on javax.script
davsclaus:1294954868:2011-01-14T05:41:08.911+0000:1294954868:2011-01-14T05:41:08.911+0000:Camel 3.0 will be JDK 1.6+ only so we target this for Camel 3
toulmean:1299686569:2011-03-10T00:02:49.653+0000:1299686569:2011-03-10T00:02:49.653+0000:Claus, Camel 2.7 is JDK6 now, so can we integrate this patch ?
hadrian:1299686953:2011-03-10T00:09:13.949+0000:1299686953:2011-03-10T00:09:13.949+0000:Yes, but we need to wait a few days until 2.7.0 is officially released.
davsclaus:1299706273:2011-03-10T05:31:13.821+0000:1299706273:2011-03-10T05:31:13.821+0000:Yep lets push this for 2.8. Thanks for the reminder.
davsclaus:1299708843:2011-03-10T06:14:03.074+0000:1299708843:2011-03-10T06:14:03.074+0000:Aaron I looked at the patch and it looks good. Just a few minor comments
- checkstyle
- you should prefer to use try .. finally when changing the ClassLoader

About checkstyle, you can see more here
http://camel.apache.org/building.html

We prefer the code to pass the checkstyle before committing. Especially for the core and most used components.
davsclaus:1299895689:2011-03-12T10:08:09.441+0000:1299895689:2011-03-12T10:08:09.441+0000:The code in camel-script would be better to be moved into camel-core-osgi so we can use the OSGi API directly instead of all the hacked reflection invocations.

We have X number of resolvers in camel-core-osgi that does that.

Willem can you take a look?
Would be nice to get this working as ppl want to use eg Groovy scripts in OSGi/SMX
njiang:1302760355:2011-04-14T13:52:35.724+0000:1302760355:2011-04-14T13:52:35.724+0000:Applied patch with thanks to Aaron.
I did some change on the patch of ScriptBuilder which leverage the Activator to detect the OSGi environment and moved the most reflection invocations into the Activator.

When I did some OSGi integration test on the script code, I just found using the org.apache.servicemix.specs.scripting-api-1.0 spec bundle code work around such issue, as the scripting api can find the script engine from OSGi rightly.

Anyway, current patch can help us to use the scripting api which provides by the JVM rightly.


davsclaus:1302762028:2011-04-14T14:20:28.997+0000:1302762028:2011-04-14T14:20:28.997+0000:Willem can you add the try .. finally in the code where you change the classloader on the context. We must be sure we don't mess with that, in case an exception or something happens.

njiang:1302800081:2011-04-15T00:54:41.364+0000:1302800081:2011-04-15T00:54:41.364+0000:@Claus,

I just found you already updated the code, thanks :)
davsclaus:1302822372:2011-04-15T07:06:12.582+0000:1302822372:2011-04-15T07:06:12.582+0000:Yeah I had some issue with Apache for Git and had to try a simple commit and push to see if it worked. So I remembered this one.
ceefour:1311792280:2011-07-28T02:44:40.303+0000:1311792280:2011-07-28T02:44:40.303+0000:In my experience, ""the ScriptEngineManager that ScriptBuilder uses can't find any scripting engines except the ones packaged in the JDK"" seems incorrect assumption, at least on ServiceMix 4.3.0 / Camel 2.6.0, as I got this:

09:39:26,649 | ERROR | rint Extender: 2 | BlueprintContainerImpl           | 7 - org.apache.aries.blueprint - 0.2.0.incubating | Unable to start blueprint container for bundle marioteguh-to-tumblr_v2.blueprint.xml due to unresolved dependencies [(&(language=simple)(objectClass=org.apache.camel.spi.LanguageResolver)), (&(component=rss)(objectClass=org.apache.camel.spi.ComponentResolver)), (&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver)), (&(component=smtp)(objectClass=org.apache.camel.spi.ComponentResolver))]
java.util.concurrent.TimeoutException
        at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:273)[7:org.apache.aries.blueprint:0.2.0.incubating]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.6.0_22]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.6.0_22]
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.6.0_22]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:165)[:1.6.0_22]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:266)[:1.6.0_22]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)[:1.6.0_22]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)[:1.6.0_22]
        at java.lang.Thread.run(Thread.java:679)[:1.6.0_22]

This seems to be the culprit:

  (&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))

I can confirm that there seems to be no bundle that exports this service:

camel-script (210) provides:
----------------------------
language = 
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 350
----
objectClass = org.apache.camel.spi.LanguageResolver
resolver = default
service.id = 351

I reported this as bug SMXCOMP-895."
0,CAMEL-3480,New Feature,Minor,None,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Dan Checkoway,0,0,2011-01-03 16:33:05+00:00,2013-05-02 02:29:35+00:00,"I'm proposing that some adapted open-source code for producing to/consuming from Kestrel be added as an official Camel component.  Currently the code lives here: https://github.com/dcheckoway/camel-kestrel


Please assign this to me if you'd like me to own this.","davsclaus:1294044356:2011-01-03T16:45:56.130+0000:1294044356:2011-01-03T16:45:56.130+0000:What license does Kestrel use?
davsclaus:1294044576:2011-01-03T16:49:36.336+0000:1294044576:2011-01-03T16:49:36.336+0000:Dan you may wanna take a look at this guide
http://camel.apache.org/add-new-component-guide.html
dcheckoway:1294044647:2011-01-03T16:50:47.314+0000:1294044647:2011-01-03T16:50:47.314+0000:It's licensed under Apache 2:

https://github.com/robey/kestrel/blob/master/LICENSE

Also FWIW, camel-kestrel relies on spymemcached, which uses the MIT License:

http://code.google.com/p/spymemcached/
https://github.com/dustin/java-memcached-client/blob/master/LICENSE.txt
dcheckoway:1294045519:2011-01-03T17:05:19.554+0000:1294045519:2011-01-03T17:05:19.554+0000:I opened https://issues.apache.org/jira/browse/SMX4-730 to request an OSGI-ified bundle of spymemcached 2.5, which is a dependency of camel-kestrel.
dcheckoway:1294135009:2011-01-04T17:56:49.299+0000:1294135009:2011-01-04T17:56:49.299+0000:Attached is a patch containing everything (I believe) needed to add the camel-kestrel component.

Spymemcached 2.5 (the only dependency) is now an OSGI-ified bundle in SMX4.

The source submitted in the patch passes -Psourcecheck.

I added the feature to platforms/karaf -- you'll probably want to double check me on that.

I submitted a signed ICLA to secretary@.

What's next?
hadrian:1294142622:2011-01-04T20:03:42.206+0000:1294142671:2011-01-04T20:04:31.106+0000:@Dan, thanks for the contribution!

Your icla is on file and if you could let me know what your wiki username is I will grant you karma to edit the wiki and document the new component.

Now we wait for SMX to release the spymemcached bundle (not yet available in the repos). 

It looks good, but it needs more tests. The endpoint configuration is unit tested, but no messages are being sent, no routes created. A spring xml based test would be good too. A few other minor changes are needed, like dropping the hardcoded dependency on camel-2.5.0, but those are easily handled. 

Component dependencies (below) also look good.

{code}
[INFO] Building Camel :: Kestrel
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.apache.camel:camel-kestrel:bundle:2.6-SNAPSHOT
[INFO] +- commons-logging:commons-logging-api:jar:1.1:compile
[INFO] +- org.apache.camel:camel-core:jar:2.6-SNAPSHOT:compile
[INFO] |  \- org.fusesource.commonman:commons-management:jar:1.0:compile
[INFO] +- spy:memcached:jar:2.5:compile
[INFO] +- org.apache.camel:camel-test:jar:2.6-SNAPSHOT:test
[INFO] |  +- org.apache.camel:camel-spring:jar:2.6-SNAPSHOT:test
[INFO] |  |  +- org.springframework:spring-context:jar:3.0.5.RELEASE:test
[INFO] |  |  |  +- org.springframework:spring-beans:jar:3.0.5.RELEASE:test
[INFO] |  |  |  +- org.springframework:spring-core:jar:3.0.5.RELEASE:test
[INFO] |  |  |  +- org.springframework:spring-expression:jar:3.0.5.RELEASE:test
[INFO] |  |  |  \- org.springframework:spring-asm:jar:3.0.5.RELEASE:test
[INFO] |  |  +- org.springframework:spring-aop:jar:3.0.5.RELEASE:test
[INFO] |  |  |  \- aopalliance:aopalliance:jar:1.0:test
[INFO] |  |  \- org.springframework:spring-tx:jar:3.0.5.RELEASE:test
[INFO] |  \- junit:junit:jar:4.8.1:test
[INFO] \- commons-logging:commons-logging:jar:1.1.1:test
{code}

dcheckoway:1294143169:2011-01-04T20:12:49.443+0000:1294143169:2011-01-04T20:12:49.443+0000:Thanks Hadrian.  My wiki username is dcheckoway.

I'll work on some additional unit tests.  I figure at least a producer/consumer test, and I'll work on the spring xml based test as well.  What's the best way for me to submit the changes to you going forward?  Should I just submit an updated full patch, or attach just the test code/resources?  I assume you've tweaked at least pom.xml based on the camel-2.6-SNAPSHOT change...lemme know what's easiest.  Sorry to be a noob...
hadrian:1294145316:2011-01-04T20:48:36.681+0000:1294145316:2011-01-04T20:48:36.681+0000:@Dan, you should now have the necessary karma to edit the wiki. Can you please confirm?

Yes, I did remove camel-version from the pom. It's up to you if you want to add small diff patches or full patches, I'd say the former is easier, but it's entirely up to you.

Thanks again for the contribution and don't hesitate to ask if you have any question.
dcheckoway:1294147034:2011-01-04T21:17:14.849+0000:1294147034:2011-01-04T21:17:14.849+0000:@Hadrian, good to go on the wiki edit karma, thanks.
dcheckoway:1294182244:2011-01-05T07:04:04.910+0000:1294182244:2011-01-05T07:04:04.910+0000:@Hadrian, attached is an updated full patch.  Fixes include:

- explicit camel-2.5.0 dependency has been removed
- additional unit tests added: producer, produce-and-consume, and spring xml
- a couple of minor tweaks & fixes...in particular:
   - don't log warnings in the consumer threads when the camel context is shutting down
   - default waitTimeMs is now 100 (was 0)

Hopefully the source tree is good to go now.  I'll be working on adding documentation for camel-kestrel on the wiki now...
dcheckoway:1294286629:2011-01-06T12:03:49.919+0000:1294286629:2011-01-06T12:03:49.919+0000:I documented the Kestrel component on the wiki:

https://cwiki.apache.org/confluence/display/CAMEL/Kestrel
https://cwiki.apache.org/confluence/display/CAMEL/Component+List
https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.6.0+Release

Please let me know if there's anything else I need to do to.  Thanks!
dcheckoway:1294287150:2011-01-06T12:12:30.560+0000:1294287150:2011-01-06T12:12:30.560+0000:A patch to the patch...I've added camel-kestrel to parent/pom.xml and apache-camel/src/main/descriptors/common-bin.xml.
davsclaus:1294540052:2011-01-09T10:27:32.152+0000:1294540052:2011-01-09T10:27:32.152+0000:Dan can you take a look at the SedaConsumer from the camel-core component. And see how the Thread modeling is done there.
As we should prefer to use the Camel {{ExecutorServiceStrategy}} API which allows Camel to control thread pools etc.

http://camel.apache.org/threading-model.html

If you got the Camel book then check chapter 10.


dcheckoway:1294551674:2011-01-09T13:41:14.461+0000:1294551674:2011-01-09T13:41:14.461+0000:Will do...
dcheckoway:1294613149:2011-01-10T06:45:49.180+0000:1294613149:2011-01-10T06:45:49.180+0000:Claus,

Attached is an updated full patch that supersedes all the patches I submitted previously.  I made the following changes:

1. As you recommended, use ExecutorServiceStrategy to let Camel manage the thread pools.
2. Validate the specified value of concurrentConsumers=... to make sure it's > 0.
3. Optimized the case where concurrentConsumers=1 and added a respective unit test for it.
4. Changed the Log instances to static final transient LOG to be more conformant.

I think this is pretty close to ready.  Let me know if you spot anything else in there...thanks!
davsclaus:1294635534:2011-01-10T12:58:54.241+0000:1294635534:2011-01-10T12:58:54.241+0000:Thanks dan.

I have polished the code a bit. Can you test it on your system with a real Kestrel server?

Also we should consider to see what it takes to build a test with can embed a Kestrel server.
dcheckoway:1294639316:2011-01-10T14:01:56.658+0000:1294639316:2011-01-10T14:01:56.658+0000:Claus, do you have an updated patch for me to test?  I didn't see it committed on trunk or attached here.

It's no problem to embed a Kestrel server in a test.  Easy to embed it as a jar in any app.  The only catch is that Kestrel isn't *published* in jar form.  I suppose the test could download the distro, build it on the fly, and then grab the jar from there.

The other thing that complicates things is that Kestrel is written in scala, so whoever needs to build it needs the scala environment, sbt (scala build tool), etc.  It would be much more straightforward if Kestrel were published as a jar.  Do you think SMX folks would be willing to make it available as an OSGI bundle?

I'm not sure what the best approach would be for the embedded setup.  I assume you've had to cross this bridge in the past for other components?
davsclaus:1294639981:2011-01-10T14:13:01.931+0000:1294639981:2011-01-10T14:13:01.931+0000:Dan sorry. I got side tracked as it required an updated in camel-core. And then I founder another issue to fix as well. So I am running tests now to see all is okay before committing.

The fix in core is because you use @EndpointInject in the unit tests which didn't let the component be started before it creates the endpoint. So that is good we found a bug.
I have moved the init logic in KestrelComponent into doStart.
davsclaus:1294642055:2011-01-10T14:47:35.451+0000:1294642055:2011-01-10T14:47:35.451+0000:trunk: 1057218.

Dan give the component a test with the commit from the trunk.
dcheckoway:1294643825:2011-01-10T15:17:05.605+0000:1294643825:2011-01-10T15:17:05.605+0000:Claus, looks good. All tests passed (I temporarily uncommented the @Ignore annotations...thanks for adding those).

The only catch is that assertions need to be disabled if camel-kestrel uses want to take advantage of ?waitTimeMs=... on a kestrel endpoint.  Long story short, spymemcached uses assertions to ensure that the key returned from memcached (or kestrel in this case) matches the key requested.  It's kinda funky, because you request ""myqueue/t=200"" (where 200 is the waitTimeMs value) from the server, and it returns ""myqueue""....which is totally valid and expected in our case.  But the assertion fails.  If we were talking to memcached, that would make sense, but the ""extensions"" that kestrel provides require that the returned key be slightly different than the requested key.

By default, the JVM disables assertions at runtime.  So I'm not sure why spymemcached author(s) chose to use that mechanism.  Although it's convenient that they did, because that's what lets us use spymemcached to talk to kestrel!

However...mvn test enables JVM assertions, so this needs to be added to pom.xml to get the tests to work:

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <enableAssertions>false</enableAssertions>
        </configuration>
      </plugin>
    </plugins>
  </build>

I'll update the Kestrel page on the Camel wiki, making a NOTE about the effect of assertions, and the requirement for assertions to be disabled for spymemcached to work with kestrel.

davsclaus:1294647322:2011-01-10T16:15:22.690+0000:1294647322:2011-01-10T16:15:22.690+0000:I have updated the pom to ignore jvm assertions.
dcheckoway:1294657653:2011-01-10T19:07:33.988+0000:1294657653:2011-01-10T19:07:33.988+0000:Looks great.  I've updated the wiki with a ""Limitations"" note explaining the conflict with assertions.

https://cwiki.apache.org/confluence/display/CAMEL/Kestrel

As far as I can tell, we're good to go on this component & this ticket...thanks to everybody who helped!
rkettelerij:1294667663:2011-01-10T21:54:23.294+0000:1294667703:2011-01-10T21:55:03.268+0000:@Dan.
Out of curiosity: is this component bound to Kestrel? As far as I can see the component only depends on SpyMemcached, would it make sense to turn it into a general memcached component (say camel-memcached)? Or does this component  depend on certain Kestrel semantics? Thanks for the contribution btw.

dcheckoway:1294671345:2011-01-10T22:55:45.013+0000:1294671345:2011-01-10T22:55:45.013+0000:@Richard, on the consumer side it's fairly specific to Kestrel, since it polls a queue -- a concept that memcached proper doesn't support per se.  On the producer side, however, it could easily be adapted to become an ""out only"" endpoint that would write key/value pairs to memcached.

For that matter, a consumer could be written so that it periodically ""polls"" memcached for a given key being present.  When found, it could process an Exchange and delete the value from the cache.  I'm not sure if this is as realistic of a use case as the ""out only"" producer, but I guess it's doable.

I looked at the Cache component, which does similar things...but that has the luxury of being tied into an in-JVM instance of ehcache.  The notion of polling memcached for a value to appear isn't as sophisticated as being able to detect ""events"" like the Cache component can with ADD/UPDATE/DELETE/DELETEALL event handlers.

Anyway, that's my brain dump on that idea for now.  Holler if you think there's demand for a general memcached component."
0,CAMEL-3479,Bug,Major,"2.4.0, 2.5.0",2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2011-01-03 13:01:08+00:00,2011-10-25 11:35:56+00:00,"CAMEL-2986 fixes some issue with the CamelContinationServlet.


However under extreme load and under some circumstances you can still get a NPE.


The Jetty guides for writing and using continuation at
http://wiki.eclipse.org/Jetty/Feature/Continuations


Shows a different style for suspend/resume than we currently have implemented. 
I think it's best practice that we refactor the code in camel-jetty to be aligned with the Jetty guide.


I will follow the Suspend Resume Pattern style listed on the Jetty guide.",davsclaus:1294032981:2011-01-03T13:36:21.147+0000:1294032981:2011-01-03T13:36:21.147+0000:trunk: 1054613.
0,CAMEL-3478,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Tracy J. Snell,Hendy Irawan,0,1,2011-01-01 13:51:08+00:00,2011-10-25 11:36:06+00:00,"XMPP Consumer should pass XMPP headers as message headers, just like XMPP Producer accepts message headers as XMPP headers.","ceefour:1294349327:2011-01-07T05:28:47.638+0000:1294349327:2011-01-07T05:28:47.638+0000:Thank you Claus! Much appreciated.


-- 
Sent from my mobile device

Hendy Irawan
www.CariDuitInternet.com
www.HendyIrawan.com

tjsnell:1294408977:2011-01-07T22:02:57.116+0000:1294408977:2011-01-07T22:02:57.116+0000:Added XmppConstants and the following items to the message headers:

Message type, Subject, Thread ID, From, Packet ID and To.
tjsnell:1294409863:2011-01-07T22:17:43.562+0000:1294409863:2011-01-07T22:17:43.562+0000:I'm going to rename the constants. New patch in a bit.
tjsnell:1294415350:2011-01-07T23:49:10.997+0000:1294415350:2011-01-07T23:49:10.997+0000:Fixed the Constant values. All set.
davsclaus:1294447476:2011-01-08T08:44:36.831+0000:1294447476:2011-01-08T08:44:36.831+0000:trunk: 1056660.

Thanks Tracy for the patch."
0,CAMEL-3477,New Feature,Major,None,None,"
None
",Closed,Duplicate,2.7.0,Tracy J. Snell,Tracy J. Snell,0,0,2010-12-31 16:46:33+00:00,2013-05-02 02:29:35+00:00,After Mark uploads his code granting rights to Apache I'll refactor it into the camel-aws component.,tjsnell:1293789087:2010-12-31T17:51:27.834+0000:1293789087:2010-12-31T17:51:27.834+0000:dupe of 3476
0,CAMEL-3476,New Feature,Minor,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Tracy J. Snell,Mark Ford,0,4,2010-12-31 14:12:25+00:00,2011-08-30 20:33:04+00:00,"CAMEL-3468 contributes a new component for interacting with the Amazon SQS service. The camel-sns component allows users to publish/subscribe to topics on Amazon's Simple Notification Service. 


This code is currently hosted as a google code project here:


http://code.google.com/p/camel-sns/


I'll coordinate with Tracy (developer of camel-aws) in the creation of the patch.","tjsnell:1293878778:2011-01-01T18:46:18.474+0000:1293878778:2011-01-01T18:46:18.474+0000:I've repackaged the code in prep for Mark to submit it but waiting on Amazon to figure out my SNS access issue to confirm tests.
tjsnell:1294645482:2011-01-10T15:44:42.311+0000:1294645482:2011-01-10T15:44:42.311+0000:Code repacked. Some minor tweaks. Ready for Mark to submit.
massfords:1294687053:2011-01-11T03:17:33.420+0000:1294687053:2011-01-11T03:17:33.420+0000:Attached is my camel-sns contribution that has been repackaged by Tracy Snell. This code should be merged with the camel-aws contribution in order to leverage code between the SQS and SNS components.

Note that some of the integration tests with SNS are slow due to the delay involved in propagating the permissions for the target queue. At one point the advertised propagation time was 60 seconds but in practice it was over 90 seconds. All of the integration tests that rely on this propagation wait 120 seconds to be sure. A better approach would be to setup a single queue for the integration tests and reuse it for all of the tests. This is left for a future submission (i.e. from Tracy).

Additionally, some of the suggestions for the SQS component submission apply here as well. For example, the setting of the Amazon API object, public key, etc would be nice improvements. 

There are a few FIXME's left undone but they don't affect the functionality. One is a minor tweak and two are missing tests. I'm submitting as is in the interest of making it available for others to work on if interested.

Enjoy


tjsnell:1294689237:2011-01-11T03:53:57.348+0000:1294689237:2011-01-11T03:53:57.348+0000:Christian I'll merge up the two components and submit a new patch.

Thanks Mark!
muellerc:1294840570:2011-01-12T21:56:10.237+0000:1294840570:2011-01-12T21:56:10.237+0000:Ok, sounds good. Looking forward for it...
davsclaus:1294869349:2011-01-13T05:55:49.689+0000:1294869349:2011-01-13T05:55:49.689+0000:Please prefix the component scheme name with {{aws-}} so it would be {{aws-sns}}.
This is done by naming the file {{aws-sns}} in the META-INF/services/ ... /components directory.
tjsnell:1295006885:2011-01-14T20:08:05.262+0000:1295006885:2011-01-14T20:08:05.262+0000:Made a number of changes to the code. Added several new classes. Improved and added some tests.

Code coverage is high with integration testing on. More tests I'll add later when I look for areas of reuse between the 2 components. Should build clean and pass sourcecheck.
davsclaus:1295049089:2011-01-15T07:51:29.165+0000:1295049089:2011-01-15T07:51:29.165+0000:The keys for the headers can we avoid the colon?
{code}
 String SNS_SUBJECT = ""SNS:Subject"";
{code}
davsclaus:1295049152:2011-01-15T07:52:32.703+0000:1295049152:2011-01-15T07:52:32.703+0000:And it would be good to avoid system out but using logger, even in unit tests.
davsclaus:1295049271:2011-01-15T07:54:31.410+0000:1295049271:2011-01-15T07:54:31.410+0000:@author tags should also be removed.
davsclaus:1295049646:2011-01-15T08:00:46.815+0000:1295049646:2011-01-15T08:00:46.815+0000:Please adjust logging to a sensible level DEBUG is to verbost. Adjust some of the DEBUG to TRACE level.

For example debug logging ""Starting"" doesnt provide much value. Instead log maybe at INFO level that the consumer is starting and listening on XXX endpoint / queue or whatever it listen. Likewise when it stops. 

Camel core itself has logging when it starts/stops consumers/producer etc so we got plenty of generic logging for that.

Loading resources / classes from classpath should *always* use the API from CamelContext. There is a ClassResolver. It ensures it can be loaded in OSGI, JBoss and whatever platform
{code}
 String s = IOUtils.toString(SnsConsumer.class.getResourceAsStream(""/default-sqs-policy-template.json""));
{code}
tjsnell:1295071606:2011-01-15T14:06:46.532+0000:1295071606:2011-01-15T14:06:46.532+0000:- Almost removed the System.out calls from the tests then I wasn't sure if they were allowed or not. Pulling them.
- Colon for Headers can be removed. I went with Mark's convention there thinking it'd be OK.
- I saw a few other @author tags in the tree so left it in. Didn't want to be pulling the original author's name if it was allowed. :)
- I'll adjust logging
- Fixing the resource loading.

If this is not going out in 2.6 I think I'll merge back into Mark's google code repository. He has some test enhancements he'd like to add. Then we can resubmit the patch.

muellerc:1295071966:2011-01-15T14:12:46.352+0000:1295071966:2011-01-15T14:12:46.352+0000:We will add this new component into Camel 2.7. Hadrian will start building the release in the next couple of days...
I will have a look on it next week.
tjsnell:1295072822:2011-01-15T14:27:02.406+0000:1295072822:2011-01-15T14:27:02.406+0000:I've made the changes Claus recommended. I'm going to push the code back into google code so Mark can review and add the improvements he was thinking. Then we'll get a new patch here early in the week. That work?
muellerc:1295073076:2011-01-15T14:31:16.972+0000:1295073076:2011-01-15T14:31:16.972+0000:Perfect.
tjsnell:1296159610:2011-01-28T04:20:10.466+0000:1296159610:2011-01-28T04:20:10.466+0000:Should be close now. Give it a look and let me know if I missed anything.
tjsnell:1298475980:2011-02-23T23:46:20.120+0000:1298475980:2011-02-23T23:46:20.120+0000:Amazon has changed their public key. I need to add a patch to fix that issue.
davsclaus:1298862005:2011-02-28T11:00:05.023+0000:1298862005:2011-02-28T11:00:05.023+0000:Tracy any update on the patch?
tjsnell:1298877639:2011-02-28T15:20:39.442+0000:1298877639:2011-02-28T15:20:39.442+0000:Finally not traveling this week. Should be able to make the change and get things updated.
muellerc:1298995099:2011-03-01T23:58:19.856+0000:1298995099:2011-03-01T23:58:19.856+0000:I'm thinking about the SnsConsumer. In this patch, the SnsConsumer is in fact a SqsConsumer. It polls the messages from a Amazon SQS queue which is subscribed to the SNS topic. The additional functionality in the SnsConsumer is to create a subscribtion from a SQS queue to the SNS topic when we start the SnsConsumer and unsubscribe if we stop the SnsConsumer (and the deleteTopicOnStop option is set to true - I think we can find a better name like unsubscribeOnStop or so). I'm wondering if this is really a functionality we need here. I think most people (or maybe all) will configure the subscription once with the [Amazon Management Console|http://aws.amazon.com/console/] and not make the subscription on the fly with Camel.
I would like to remove the SnsConsumer (or not add) and keep the code as simple as possible because I do not see an useful use case for it.
What do you think? Any doubts?

Christian
massfords:1298996186:2011-03-02T00:16:26.539+0000:1298996186:2011-03-02T00:16:26.539+0000:I think there's value in having a way to stand up a subscription to a topic from camel. Imagine if the AMQP or JMS components didn't offer this ability. I know it's slightly different because of how those protocols are implemented but I think this is part of the value of camel's endpoint abstraction. The value add from the use of the component is that it encapsulates the additional administrative details. Changing from Amazon SNS to AMQP should be a simple matter of changing the endpoint URI's in your config and then changing the dependencies. Requiring an additional administrative step to go the Amazon admin console doesn't sound right.

I don't know how many people would use it this way versus administering it outside of camel but it's nice to have the option. 
tjsnell:1299042611:2011-03-02T13:10:11.082+0000:1299042611:2011-03-02T13:10:11.082+0000:I was mistaken on the public key. It did change but the SNS code grabs a new copy each run so should be good to go there.
massfords:1299044927:2011-03-02T13:48:47.586+0000:1299044927:2011-03-02T13:48:47.586+0000:Doesn't the SNS code cache the AWS key in a static as opposed to ""each run""? I think a better approach would be to periodically refresh the key.
muellerc:1299062078:2011-03-02T18:34:38.937+0000:1299062078:2011-03-02T18:34:38.937+0000:I'm still not convinced because of the following reasons:
- I dislike the code duplication in SnsConsumer.
- In my opinion, nobody should use the deleteQueueOnStop option in SnsConsumer. It can be result in loosing messages, if the SnsConsumer is down (e.g. for maintenance reasons) and new messages arrives in the SNS topic.
- And if you don't use the deleteQueueOnStop option, it's useless to make a new subscription each time the SnsConsumer starts.
- In the Amazon Management Console it's only a few clicks to configure it and I in my opinion, that's different thing than creation the ActiveMQ queues/topics by hand.

Any other opinions?

I would like to solve this issue today or tomorrow...
massfords:1299063140:2011-03-02T18:52:20.446+0000:1299063140:2011-03-02T18:52:20.446+0000:The issue of code duplication is orthogonal to the discussion. This is an implementation detail and something that Tracy will likely correct in a future patch.

As for the loss of messages, wouldn't you lose messages if the consumer was down in other pub/sub frameworks? I know there are such things as durable subscriptions but there are also ephemeral subscriptions as well. The SNSConsumer as it is now supports both.

As for the deleteQueueOnStop option, I'll admit that I didn't give too much thought to how these options would be used beyond my initial use case which was a project for a graduate course I was taking. I can't defend the particular settings or defaults but I will attempt to defend the concept of a temporary queue. If you think that temporary queues have value, then this and other options will likely need to be reviewed to see how best the semantics should be modeled within the URI options.

If you require the creation of the subscription through the admin console or something outside of the realm of camel, then I think you're making it more difficult to support dynamic endpoint addressing. My apps are a mix of static and dynamic routes. In some cases contexts are assembled on the fly and routes established to meet the needs of some relatively short lived processing chain. If I needed to support Amazon AWS (which I don't) and I wanted it to work in a dynamic capacity then I would need to include the AWS API into my codebase. This would break the encapsulation I'm getting from camel with respect to nearly all of the other endpoints the app supports (AMQP, UDP, TCP, JMS). 


muellerc:1299079133:2011-03-02T23:18:53.407+0000:1299079133:2011-03-02T23:18:53.407+0000:Ok, I will keep this functionality. Still do some housekeeping...
muellerc:1300719991:2011-03-21T23:06:31.118+0000:1300719991:2011-03-21T23:06:31.118+0000:Committed r1084013
muellerc:1300801436:2011-03-22T21:43:56.702+0000:1300801436:2011-03-22T21:43:56.702+0000:@Mark & Tracy: Thank you again for this contribution and your work.

I polished the patch and applied them yesterday. I only include the SNS producer code, because of my personal opinion and after a few talks with my colleges, I still think configuring the subscription to an Amazon SNS service is not the job we have to solve with Camel. The configuration is done in a few clicks in the [AWS Management Console|https://console.aws.amazon.com/sns/home?region=us-east-1#s=TopicDetails] and it sounds not useful for me to develop a Camel route and provide a JSON template to do it. 
Now, our users have the possibility to send messages to an Amazon SNS service and receive messages from an Amazob SQS service. He only has to configure the subscription with the [AWS Management Console|https://console.aws.amazon.com/sns/home?region=us-east-1#s=TopicDetails], which is typical done once. 

Apologze, if you don't share my opinions.
Christian


massfords:1300810559:2011-03-23T00:15:59.552+0000:1300810559:2011-03-23T00:15:59.552+0000:Christian,

I don't share your opinions and find it disappointing and a bad precedent that you've cited the counsel of others that was made off list. I was hoping that these differences would be resolved within the camel community either on this issue or within the developer list. If your colleagues have new views that weren't already addressed then I would have welcomed them here. I don't know what new points I could offer here that weren't already covered above.
hadrian:1300813586:2011-03-23T01:06:26.125+0000:1300813586:2011-03-23T01:06:26.125+0000:Mark, Christian,

I reopened the issue as an attempt to get some consensus here. I respect the fact that you have different views and I feel we'll be able to clarify them quickly.

I don't have a strong opinion yet, but I get Mark's point. Christian, I am not sure I get your objection.
muellerc:1300837449:2011-03-23T07:44:09.105+0000:1300837449:2011-03-23T07:44:09.105+0000:Sorry Mark, it was not my intention to disappoint you. English is not my first language, so it's a bit harder for me to express me correct. I will take some more time to make my opinions more clear.

I still think the SNS component should not have a consumer. A consumer make no sense and is not supported by the Amazon API.

My first reservation is that the SNS consumer had the ability to poll a SQS queue. We already have this functionality in the SNS consumer and there is the right place place for it. I see no reason to have two different components with the same functionality.

My second reservation is that the *SNS consumer* had the ability to make the subscription to a SQS queue. What, if the next user want to make a subscription to http(s) or smtp or ... and not to a SQS queue? What is your position to this feature?

I think the right place to make a subscription (if we want do this) is the SNS producer - not the consumer. If you also agree about this, we could start to discuss whether and how we could implement this (which protocols ...).

Christian 
massfords:1300853747:2011-03-23T12:15:47.159+0000:1300853747:2011-03-23T12:15:47.159+0000:I was not disappointed in your decision but only in the lack of discussion. In each one of the exchanges above we appeared to reach consensus and then suddenly you changed your mind based on conversations offline. I appreciate the chance to resolve this with input from others.

The overlap in functionality doesn't concern me. There are often different ways to accomplish things in Camel and other frameworks. For example, the timer and quartz components offer similar functionality and yet both exist. I would argue that the SQS and SNS components are complementary as opposed to mere duplication. 

I don't understand your comment about a consumer not making sense or not being supported by the Amazon API. First, it makes sense because without consumers, there is no reason to ever publish a message. Second, it is supported by the Amazon API because the Amazon API allows you to create a subscription. The subscription endpoint receives the notification messages and by any definition is a consumer.

I intentionally did not support the http, http(s), or smtp protocols because I didn't need them for my use case and in fact don't think I would ever use them in a production environment. Most of my Camel deployments live behind a corporate firewall and as such it is difficult to provide an externally available endpoint. I don't have any experience with the SNS platform in production so I don't know how popular the different subscription types are. As an enterprise user, the SQS subscription type that allowed me to poll for messages seemed good enough. If there was a call from other users to support other subscription types, then I'm sure it could be implemented if necessary although this would greatly expand the dependencies and scope of the component. That said, I've seen done this before for a proprietary WS-Notification/WS-Eventing Camel component that leveraged Jetty for the subscription endpoint.

I don't understand your comment about putting the subscription control into the SNS Producer. It seems weird that you'd create a subscription or check for its creation each time the producer executed.

The simplest use case I can think of that shows the merit of having an SNS consumer is wanting to have a Camel route where the subscription to the topic is temporary. When the route starts, data flows from the topic into the route as messages become available. When the route stops, the flow of data stops. I don't see how you could support this use case. 

Of course, there are other use cases that may or may not involve using the Amazon Console to create subscriptions out of band. As I see it, the SNS consumer as it exists in the original submission supports all styles. 
- sns consumer with temporary queue 
- sns consumer with permanent queue (by name or ARN)
- mix of sqs consumer and AWS console

You're proposing to only support the last in the above list. I think the others have value.

Finally, I think it makes sense from an end user perspective to try and abstract the subscription details away from a user if possible. I don't really care how I receive the messages from the topic, just as long as I get them and that they're verified as coming from SNS. The SNS consumer provides this functionality by bundling the creation of the subscription and the temporary queue in a single endpoint URI. If you separate them, then you're requiring additional configuration from the end user in terms of the subscription and message processing. The user will then need to configure their routes in advance with the additional SQS endpoint and then possibly provide a custom processor on the route to verify the headers for each message. Again, this code is trivial, but why make them go to the trouble when it could all be done for them?
muellerc:1300877919:2011-03-23T18:58:39.410+0000:1300877919:2011-03-23T18:58:39.410+0000:It looks like I was too impatient... ;-)

To clarify the naming:
- SQS producer: A class which extends the DefaultProducer to implement the event driven consumer enterprise integration pattern. Used to consume message exchanges and send it to the Amazon SQS service (SendMessageRequest).
- SQS consumer: A class which extends the ScheduledPollConsumer to poll messages from an Amazon SQS service (ReceiveMessageRequest) and create message exchanges from this.
- SNS producer: A class which extends the DefaultProducer to implement the event driven consumer enterprise integration pattern. Used to consume message exchanges and send it to the Amazon SNS service (PublishRequest).
- SNS consumer (not exists yet): A class which extends the DefaultConsumer (or ScheduledPollConsumer) to receive (or poll) messages from an Amazon SQS service and create message exchanges from this.

Because the AmazonSNSClient doesn't offer a readXXX(), receiveXXX(), ... method to receive messages, I think a SNS consumer make no sense. Creating a subscription to an Amazon SNS service/topic has nothing to do with with consuming messages from this endpoint and so it's not a SNS consumer.

The subscription can be made to an Amazon SQS queue, to an HTTP(S) endpoint or to an e-Mail. For *all* this protocols/endpoints, Camel already offer consumers.

The only thing Camel at present do not support is the subscription to an Amazon SNS service/topic. If we really want/need this, I think the SNS producer should support this. He can do this in the doStart() method and not each time a message exchange receive (creating the SNS topic, creating the SQS queue, making the subscription). And in your second route you use the SQS consumer to consume the messages.

As you say, the timer and quartz component offer *similar* functionality. But if the SNS consumer consumes messages from an Amazob SQS queue, the SNS consumer and SQS consumer offer the *same* functionality. This makes no sense.

I don't understand your last paragraph. I think you cannot ""hide"" or abstract the subscription. The user which receives the messages, send to an Amazon SNS service/topic has to know, where the messages are forwarded to.

And I think the subscription is not so easy as you think. In my opinion, the value of this Amazon SNS service is to broadcast one message to multiple recipients (and not to work around a firewall issue). How would you handle/implement multiple subscriptions? Some subscriptions like e-Mail requires an acknowledgement (a response mail of the subscription mail) before a message is forwarded. If this component cannot handle these, I think most (if not all) of the subscriptions must be made by hand.

Christian
massfords:1300879701:2011-03-23T19:28:21.310+0000:1300879701:2011-03-23T19:28:21.310+0000:I don't understand why the producer would create the subscription. Why would you tightly couple the production of messages with the consumption of messages? 

The duplication of code is irrelevant. Tracy can refactor this so the SNS consumer is nothing more than an instantiation of the SQS consumer.

Multiple subscribers already work with the SNS component as it is. Each route would create the from with the same topic name or ARN and then use their own SQS endpoint (by name or ARN) to receive the messages. 

I think I've already encapsulated the details of the subscription pretty well in the component. When I am creating a route to read messages from an endpoint, I am only focused on the messages I'm receiving and not how I am receiving them. These details are encapsulated in the component with the creation of a temporary queue. With your model, you must configure the subscription externally. 
muellerc:1300884898:2011-03-23T20:54:58.945+0000:1300884898:2011-03-23T20:54:58.945+0000:I don't agree, the SNS consumer is not only a ""SQS consumer"". It must be also a HTTP/Jetty consumer and a Mail consumer to support all subscriptions.

However, I think we have two different position and both are probably valid. But I think we make no progress here.

@Hadrian: You reopened this issue (what was right). What are your thoughts?
@Claus+Willem: You also shared your thoughts with me/us. What you are thinking now?
@all others: What you have in mind?

Christian


massfords:1300886847:2011-03-23T21:27:27.553+0000:1300886847:2011-03-23T21:27:27.553+0000:I think we've made a good deal of progress. The only point you've raised for which I don't have an answer is the lack of support for http(s) and email. I have no plans on implementing these subscription models. Perhaps Tracy or someone else does. 

If the consensus is that components must offer all or no functionality then I can see where you would view the submission as a partial implementation and reject it. I can accept that and leave it to the community to implement all of the subscription models if desired.


tjsnell:1300887569:2011-03-23T21:39:29.767+0000:1300887569:2011-03-23T21:39:29.767+0000:My plan has always been to add support for email and http/https to the consumer. Mark wrote the SNS code independently (and before) I wrote the SQS code. First pass was just to get it into the component then add support for the other two protocols so in the end the SNS consumer would delegate all three and handle the message format.
hadrian:1300889498:2011-03-23T22:11:38.856+0000:1300889498:2011-03-23T22:11:38.856+0000:I also think we made good progress and we'll sort this one out.

I think Mark is more focused on the problem, and I agree with his assessment. Christian seems to have objections related mostly to the solution, and to me it only means that we need to find a better one. 

I also believe that while the SNS consumer it not a listener on a particular protocol, which is what Christian pointed out, it does however make sense to talk about an SNS consumer. The SNS consumer sits at the receiving end of the event driven consumer eip and handles messages coming to an SNS endpoint. The fact that it has to delegate to protocol specific consumers for part of the job is an implementation detail. The hardest part will be imho to get the definition of the sns endpoint URI right.

Mark, it seems, provided a solution to his immediate problem, which sparked the discussion, In his last comment though he seems to agree that the solution could/should be more general, however the non SQS stuff is not on his radar and he'll leave it to the community to implement that. Looks like Tracy will come up with something what will make everybody happy. Tracy, does it brew coffee too?


muellerc:1300889758:2011-03-23T22:15:58.181+0000:1300889758:2011-03-23T22:15:58.181+0000:There is no all or nothing rule I know. I only try to think one step further...

The next issue could be, if the owner of the SNS topic is another as the SQS queue. Than you have to have both credentials to set up the subscription...
massfords:1301046016:2011-03-25T17:40:16.819+0000:1301046016:2011-03-25T17:40:16.819+0000:I don't think you need two sets of credentials. Assume that User-1 creates the topic. If User-2 wishes to subscribe to the topic, then they need to create the route with the appropriate URI that includes the ARN of the topic. The newly created SQS queue will be owned by User-2 and not require the credentials for User-1. The permissions on the newly created queue are configured to allow the messages from the topic ARN to arrive.

*Note: I have not tested with multiple AWS accounts.*

One assumption is that the topic setup by User-1 is configured to allow User-2 to subscribe. This may be done a number of ways through the admin console. I could see where it would be nice for the component to configure the topic permissions during the creation of the topic. Perhaps this is something the producer could do.

In either case, I don't see needing multiple credentials here.


muellerc:1301573121:2011-03-31T20:05:21.353+0000:1301573121:2011-03-31T20:05:21.353+0000:Tracy, because you will work further on this issue, you should be the ticket holder. ;o)
I will watch this issue and review the further contributions...
massfords:1305826179:2011-05-20T01:29:39.737+0000:1305826179:2011-05-20T01:29:39.737+0000:I think the addition of the consumer to the API should split out to its own issue since 2.8.0 will include the producer. I recall seeing some traffic on the dev/user list with a use case request that would be addressed by the addition of the consumer so I think there's still value in having an sns consumer. 
megachucky:1314663489:2011-08-30T08:18:09.029+0000:1314663489:2011-08-30T08:18:09.029+0000:Hey guys,

one great thing about Camel is to do very easy integrations within routes. You can (but you do not have to) specify almost all configurations in the endpoints. This is awesome if you need to change an endpoint to another technology - also for playing around, evaluating and testing technologies.

I have played around with the camel-aws component this week. In my opinion, there should be a consumer which is able to subscribe to topics, otherwise Camel is missing a key part of the AWS SNS service! 
I have written a blog about the camel-aws component and mentioned this discussion (http://www.kai-waehner.de/blog/2011/08/30/cloud-integration-with-apache-camel-and-amazon-web-services-aws-s3-sqs-and-sns). Maybe more people will contribute their opinion.

Best regards,
Kai
muellerc:1314706900:2011-08-30T20:21:40.166+0000:1314706900:2011-08-30T20:21:40.166+0000:Kai, I added a link from our [Artices site|https://cwiki.apache.org/confluence/display/CAMEL/Articles] to your blog.
muellerc:1314707584:2011-08-30T20:33:04.190+0000:1314707584:2011-08-30T20:33:04.190+0000:Kai, I looking forward for the community feedback you are asking for.
In the meantime, you have to configure the subscription once via the AWS web console. Than you can use a Camel consumer (SQS, Mail, HTTP or HTTP4) to consume the messages.

And as you probably know, we love contributions... :-)

Best,
Christian"
0,CAMEL-3475,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Jaco van Tonder,0,0,2010-12-31 13:16:23+00:00,2011-10-25 11:35:57+00:00,"We need a way to identify an incoming message type from a camel-smpp consumer.


Currently there is no clear indication if the incoming message is SMS, a delivery notification or an alert notification, as all these messages are converted to a camel SmppMessage.


We could add an additional header to the exchange to identify the message type, or add an attribute to SmppMessage?","davsclaus:1293774794:2010-12-31T13:53:14.899+0000:1293774794:2010-12-31T13:53:14.899+0000:Good idea Jaco. Do you can to work on a patch?

Also if there is a specialized SmppMessage, you can add methods like

isSms
isNotification
isAlert

On the SmppMessage if that helps as well.

But having headers on the message helps with content based router and Camel in general as its easy to use in the routing DSL.
muellerc:1293877626:2011-01-01T18:27:06.806+0000:1293877658:2011-01-01T18:27:38.961+0000:Workaround until Camel 2.6:
{code}
SmppMessage smppMessage = ...;
boolean isAlertNotification = smppMessage.getCommand() instanceof AlertNotification;
boolean isDataSm = smppMessage.getCommand() instanceof DataSm;
boolean isDeliveryReceipt = smppMessage.getCommand() instanceof DeliverSm && ((DeliverSm) smppMessage.getCommand()).isSmscDeliveryReceipt();
boolean isDeliverSm = smppMessage.getCommand() instanceof DeliverSm && !((DeliverSm) smppMessage.getCommand()).isSmscDeliveryReceipt();
{code}
muellerc:1293878944:2011-01-01T18:49:04.674+0000:1293878944:2011-01-01T18:49:04.674+0000:Upadated the Camel SMPP [wiki page|https://cwiki.apache.org/confluence/display/CAMEL/SMPP]
jacovt:1294010115:2011-01-03T07:15:15.370+0000:1294010115:2011-01-03T07:15:15.370+0000:Thanks for the patch, Christian. This definitely will make it a lot easier to work with."
0,CAMEL-3474,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Invalid,2.6.0,Unassigned,Lifan Yang,0,0,2010-12-31 07:54:25+00:00,2011-04-24 09:57:25+00:00,"I know resource classes in CXF RS just like a configuration, used to map rest paths with operation names.  After doing that, I have to use the operation name to navigator to the real method which implement the logic. Or I have to reflect to invoke the methods of resource classes, like the way to invoke the method of BookStoreImpl, in ""camel-example-cxf"".


So my question is why Camel do not provide the function to simplify that. I do not think the programer should write code to reflect method invocation.


P.S. what's the pros and cons, compare with use CXF directly and use Camel CXF component  as a Web Service server.","davsclaus:1293756977:2010-12-31T08:56:17.141+0000:1293756977:2010-12-31T08:56:17.141+0000:Please prefer to use the mailing list or discussion forums for this kind of questions.
This involves the community and then later there may be a consensus that there is an issue with Camel, and then after that a JIRA ticket can be logged.

http://camel.apache.org/discussion-forums.html
http://camel.apache.org/mailing-lists.html


davsclaus:1303610245:2011-04-24T09:57:25.550+0000:1303610245:2011-04-24T09:57:25.550+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3473,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Tracy J. Snell,skydjol,0,0,2010-12-29 14:33:08+00:00,2011-10-25 11:36:06+00:00,"When you declare in camel context


<camel:endpoint id=""cache1"" uri=""cache:cache1"" />
<camel:endpoint id=""cache2"" uri=""cache:cache2"" />
<camel:endpoint id=""cache3"" uri=""cache:cache3"" />


CamelCacheProducer produce systematically  in same cache because in CacheComponent, CacheConfiguration is modified by method createEndpoint


CamelCacheProducer.java

public void process(Exchange exchange) throws Exception {
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Cache Name: "" + config.getCacheName());
        }

        if (cacheManager.cacheExists(config.getCacheName())) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Found an existing cache: "" + config.getCacheName());
                LOG.trace(""Cache "" + config.getCacheName() + "" currently contains ""
                        + cacheManager.getCache(config.getCacheName()).getSize() + "" elements"");
            }
            cache = cacheManager.getCache(config.getCacheName());
        } else {
            cache = new Cache(config.getCacheName(),
                    config.getMaxElementsInMemory(),
                    config.getMemoryStoreEvictionPolicy(),
                    config.isOverflowToDisk(),
                    config.getDiskStorePath(),
                    config.isEternal(),
                    config.getTimeToLiveSeconds(),
                    config.getTimeToIdleSeconds(),
                    config.isDiskPersistent(),
                    config.getDiskExpiryThreadIntervalSeconds(),
                    null);
            cacheManager.addCache(cache);
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Added a new cache: "" + cache.getName());
            }
        }

        String key = exchange.getIn().getHeader(CacheConstants.CACHE_KEY, String.class);
        String operation = exchange.getIn().getHeader(CacheConstants.CACHE_OPERATION, String.class);

        if (operation == null) {
            throw new CacheException(""Operation not specified in the message header ["" + CacheConstants.CACHE_KEY + ""]"");
        }
        if ((key == null) && (!operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL))) {
            throw new CacheException(""Cache Key is not specified in message header header or endpoint URL."");
        }

        performCacheOperation(exchange, operation, key);
    }




CacheComponent.java

   public class CacheComponent extends DefaultComponent {
    private CacheConfiguration config;
    private CacheManagerFactory cacheManagerFactory = new CacheManagerFactory();
    
    public CacheComponent() {
        config = new CacheConfiguration();
    }

    public CacheComponent(CamelContext context) {
        super(context);
        config = new CacheConfiguration();
    }

    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }

    public CacheManagerFactory getCacheManagerFactory() {
        return cacheManagerFactory;
    }

    public void setCacheManagerFactory(CacheManagerFactory cacheManagerFactory) {
        this.cacheManagerFactory = cacheManagerFactory;
    }

    @Override
    protected void doStart() throws Exception {
        super.doStart();
        ServiceHelper.startService(cacheManagerFactory);
    }

    @Override
    protected void doStop() throws Exception {
        ServiceHelper.stopService(cacheManagerFactory);
        super.doStop();
    }
}




The resolution could be in CacheComponent


CacheComponent.java
    @Override
    @SuppressWarnings(""unchecked"")
    protected Endpoint createEndpoint(String uri, String remaining, Map parameters) throws Exception {
        CacheConfiguration   config = new CacheConfiguration();
        config.parseURI(new URI(uri));
        
        CacheEndpoint cacheEndpoint = new CacheEndpoint(uri, this, config, cacheManagerFactory);
        setProperties(cacheEndpoint.getConfig(), parameters);
        return cacheEndpoint;
    }","davsclaus:1293757258:2010-12-31T09:00:58.213+0000:1293757258:2010-12-31T09:00:58.213+0000:Can you elaborate a bit more whats the problem?

Can you attach a test case which demonstrates the issue?

And we love contributions, so you are welcome to work on a patch.
http://camel.apache.org/contributing.html
tjsnell:1294073155:2011-01-04T00:45:55.239+0000:1294073155:2011-01-04T00:45:55.239+0000:I think I follow his issue, I hit it in camel-aws. If the configuration is per component that assumes that all endpoints share the same configuration. In camel-aws' case this meant that you couldn't have a route that consumed from one aws account and produced to another (among other things). In this case the URI points to the URI of the last endpoint created, for all endpoints. His change would move the config to the endpoint and solve the problem.

I'll be glad to make the code change and test if no one else is.
davsclaus:1294111831:2011-01-04T11:30:31.137+0000:1294111831:2011-01-04T11:30:31.137+0000:Ah yeah Tracy that would be the problem. See the camel-mail component where the Configuration instance is defensively copied when creating an endpoint.
tjsnell:1294121116:2011-01-04T14:05:16.596+0000:1294121116:2011-01-04T14:05:16.596+0000:Changed to defensively copy the config to each endpoint on creation. Added a simple test to confirm.
davsclaus:1294121853:2011-01-04T14:17:33.791+0000:1294121853:2011-01-04T14:17:33.791+0000:Thanks Tracy for the patch.

trunk: 1055051."
0,CAMEL-3472,New Feature,Minor,2.6.0,None,"
None
",Closed,Fixed,2.6.0,Christian Müller,Richard Kettelerij,0,0,2010-12-29 10:59:25+00:00,2011-10-25 11:35:35+00:00,In addition to CAMEL-3105 I've created an example that demonstrates the camel-spring-ws component. The example is structured similar to the other examples available in Camel and contains a README file to get users started. Running the example simply involves a mvn clean install jetty:run.,"rkettelerij:1293591636:2010-12-29T11:00:36.031+0000:1293591717:2010-12-29T11:01:57.729+0000:See attached patch. I'll add docs in Confluence if the example is integrated in Camel's codebase.
davsclaus:1293592641:2010-12-29T11:17:21.963+0000:1293592641:2010-12-29T11:17:21.963+0000:Christian do you have time to look at this and add the patch to the trunk?
muellerc:1293595032:2010-12-29T11:57:12.908+0000:1293595032:2010-12-29T11:57:12.908+0000:Yes, I can do this at this weekend...
muellerc:1294241894:2011-01-05T23:38:14.317+0000:1294241894:2011-01-05T23:38:14.317+0000:Added with Rev 1055686
Thank you Richard for this contribution!
@Richard: Would you work on the documentation as you suggested?
davsclaus:1294360900:2011-01-07T08:41:40.149+0000:1294360900:2011-01-07T08:41:40.149+0000:Yeah Richard would be nice with a little wiki page we can add here
http://camel.apache.org/examples
rkettelerij:1294504943:2011-01-09T00:42:23.444+0000:1294504943:2011-01-09T00:42:23.444+0000:Added documentation in Confluence: https://cwiki.apache.org/confluence/display/CAMEL/spring+ws+example."
0,CAMEL-3471,New Feature,Major,2.5.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Chad Beaulac,Christian Müller,4,6,2010-12-28 21:52:17+00:00,2013-05-02 02:29:41+00:00,Apache Mina 2.0.3 is out: http://mina.apache.org/downloads.html,"muellerc:1293778192:2010-12-31T14:49:52.901+0000:1293778192:2010-12-31T14:49:52.901+0000:Because of the major release upgrade, some code changes were necessary. At present my code compiles, but a few test fails with ""java.net.BindException: Address already in use"" exception. I have to spend more time on this issue.
I have also to check, whether all current Mina 1.x options are still supported in Mina 2.x.
jeffrey.knight:1298488334:2011-02-24T03:12:14.922+0000:1298492492:2011-02-24T04:21:32.317+0000:One example: IoFilter was reoganized to a new package:

- mina-core-1.1.7.jar:/org/apache/mina/common/IoFilter.class
- mina-core-2.0.2.jar:/org/apache/mina/core/filterchain/IoFilter.class

Mina 1x vs 2x:
- http://mina.apache.org/changes-between-2x-and-1x.html


muellerc:1298544786:2011-02-24T18:53:06.077+0000:1298544786:2011-02-24T18:53:06.077+0000:Jeff,
we love contributions. If you have some work done and you would like to share it with us, you are welcome.

Attach the diff (actual TRUNK and your code) to this issue and check the ""Grant license to ASF for inclusion in ASF works (as per the Apache License §5)"" box. You also have to fill out the [Individual Contributor License Agreement|http://www.apache.org/licenses/icla.txt] and send it to us (you will find the details in there).

In your mail you wrote your code compile but some of the unit tests fails. Do you also get the ""java.net.BindException: Address already in use""? May be this is a (known) Mina issue? Or we do something wrong when we close our connections? Do you have time and pleasure to investigate this issue?

Christian
jeffrey.knight:1298653729:2011-02-26T01:08:49.052+0000:1298653729:2011-02-26T01:08:49.052+0000:I do not get the BindException. Most of the exceptions I'm getting are around connections not being in the correct state. I'll put some more time into it and will hopefully get it up and running.

Mina 2 removed ""ThreadModel"" which is used widely by camel-mina, so I'm trying to get this integrated back in:
""In 2.x, you have to add an ExecutorFilter by yourself explicitly, of course only when you want to add it."" [1]

[1] http://mina.apache.org/changes-between-2x-and-1x.html#ChangesBetween2.xand1.x-%257B%257BIoService%257D%257Dconfigurationhasbeensimplified.
muellerc:1298889966:2011-02-28T18:46:06.343+0000:1298889966:2011-02-28T18:46:06.343+0000:Jeffrey,
if you could add a diff to this issue, I could have a look on the code.
I think I solved these issues, but got the ""java.net.BindException: Address already in use"" exception. 
Maybe we can solve this issue together... :-)

Christian
weihsiu:1299195673:2011-03-04T07:41:13.184+0000:1299195673:2011-03-04T07:41:13.184+0000:Can we expect non-blocking(async) InOut support as well?
davsclaus:1299197091:2011-03-04T08:04:51.160+0000:1299197091:2011-03-04T08:04:51.160+0000:Walter that's another story, that would be best to discuss at the mailing list, so more people can get involved.

You would need a strategy for how to correlate the replies, which must be part of the protocol. So the end user must have a way of telling the camel-mina how it should correlate replies with the request messages.

And the camel-mina component need to have logic where it stackup requests, and accepts incoming replies, and correlate those. And it may have to handle timeout, and unknown replies coming back etc. All kinda of logic we already have in the camel-jms, so its possible.

thxmasj:1300245327:2011-03-16T11:15:27.426+0000:1300245327:2011-03-16T11:15:27.426+0000:What's the status for this issue now? I would like to use Mina 2 with Camel 2.6.0, because I need simple connection throttling (using unbind/bind with closeOnDeactivation=false through an IoFilter). 
muellerc:1300271374:2011-03-16T18:29:34.449+0000:1300271374:2011-03-16T18:29:34.449+0000:Hello Thomas!
Camel 2.6 is already out and Camel 2.7 will be released this month (we already have a feature freeze). This issue is actual target for Camel 2.8.
Cheers,
Christian
thxmasj:1300283213:2011-03-16T21:46:53.970+0000:1300283213:2011-03-16T21:46:53.970+0000:Hi Christian, I'm already using Camel 2.6. I suspect that a camel-mina using Mina 2 would simplify my throttling implementation. Currently (using Camel 2.6) I have to:

1. Extend MinaComponent with an overridden createSocketEndpoint(String,MinaConfiguration), which is a copy/paste where I'm using MySocketAcceptor instead of SocketAcceptor and have disconnectOnUnbind on acceptorConfig configurable.
2. Extend SocketAcceptor with methods bind() and unbind() (which use cached parameters from previous bind(...) and unbind(...)).

Not pretty...
 
So I understand camel-mina with Mina 2 will arrive with Camel 2.8. I was really wondering if a working camel-mina-2.8 beta was released shortly, and if I could use that with camel-core-2.6?

Cheers :)
muellerc:1300292194:2011-03-17T00:16:34.295+0000:1300292194:2011-03-17T00:16:34.295+0000:Thomas,
I attached my current status of work (diff against trunk). I think I updated all pieces of the code correct, but some of the tests didn't work.
At present, 6 test of 82 fails or has errors. I don't know what the problems are. I will have a second look in the next days...

You are more then welcome to help us out to solve this issue, if you want. We love contributions... ;-)

Cheers,
Christian
muellerc:1300363071:2011-03-17T19:57:51.054+0000:1300363071:2011-03-17T19:57:51.054+0000:I attached my latest patch, which unfortunately doesn't work to 100%:

I think the issues are in Mina, but I do not have any prove. But it's very strange, when I send 3 messages and I receive 13000 messages... :-(
I will posted this on the Mina user list to get help from the Mina guys. I hope someone else who is more familiar with Mina can help out!?

[1] http://old.nabble.com/Problems-by-upgrading-the-Apache-Camel-Mina-component-from-Mina-1.1.7-to-2.0.2-td31175927.html

Christian
hadrian:1300363959:2011-03-17T20:12:39.028+0000:1300363959:2011-03-17T20:12:39.028+0000:Just a reminder (probably useless). Please don't commit such non trivial patches until the camel-2.7.0 vote passes.
muellerc:1307537156:2011-06-08T20:45:56.612+0000:1307537156:2011-06-08T20:45:56.612+0000:I will give up this issue to someone who has more experience with Apache Mina because I couldn't solve the issue.
cabeaulac:1307541715:2011-06-08T22:01:55.512+0000:1307541715:2011-06-08T22:01:55.512+0000:I could do this and provide a Mina codec for Google Protocol Buffers. I developed a protobuf codec for Mina 1.x and 2.x.
davsclaus:1307563598:2011-06-09T04:06:38.834+0000:1307563598:2011-06-09T04:06:38.834+0000:Thanks Chad. There is also the camel-hl7 component which is a mina codec. It may also need an API upgrade.
cabeaulac:1307591280:2011-06-09T11:48:00.949+0000:1307591280:2011-06-09T11:48:00.949+0000:Hi Claus. Updating the hl7 codec shouldn't be a problem. You want to assign it to me and I'll give it a whack? Seems like I don't have that permission on your Jira instance.
davsclaus:1307592747:2011-06-09T12:12:27.855+0000:1307592757:2011-06-09T12:12:37.520+0000:Chad I upgraded your account so you can assign tickets.
cabeaulac:1307776150:2011-06-11T15:09:10.047+0000:1307776150:2011-06-11T15:09:10.047+0000:Modified description. Apache Mina 2.0.3 is out.
cabeaulac:1310882963:2011-07-17T14:09:23.774+0000:1310884096:2011-07-17T14:28:16.766+0000:I'm working through Camel maven build dependencies. I'm in the process of adding a Mina UDP no-Camel test to indicate where the UDP test problems reside. I've hit another issue in the dependencies: camel-quickfix depends on QuickFixJ 1.5.0 which uses Mina 1.0.x. How can I update Mina in Camel to 2.0.x and support the camel-quickfix component at the same time? Should I put a mina-core dependency for 1.0.x in camel-quickfix?

Ok, that's what I did. I put a dependency in camel-quickfix for mina 1.1.7.
cabeaulac:1310886217:2011-07-17T15:03:37.829+0000:1310886282:2011-07-17T15:04:42.342+0000:Updated camel-quickfix to use Mina 1.1.7. This overrides the global Mina version of 2.x. Updated camel-hl7 codec to use the Mina 2.x API. Removed slf4j-api excludes from camel-hl7 so it could resolve dependencies. Added aQute repository to camel-itest-osgi pom. All source and tests in my sandbox compile now.
(I'd log this in the work log but it seems I don't have that permission)

cabeaulac:1310971472:2011-07-18T14:44:32.994+0000:1310971472:2011-07-18T14:44:32.994+0000:The UDP endpoint works when you have a codec configured. If not, you receive messages over and over until you run out of RAM and the test dies.
cabeaulac:1311050726:2011-07-19T12:45:26.936+0000:1311050726:2011-07-19T12:45:26.936+0000:I added this unit test to my git-svn Camel sandbox. It tests that we can setup a Mina UDP server and client and send multiple messages. This indicates that the UDP problems in camel-mina are in the camel-mina Component impl.
davsclaus:1319514560:2011-10-25T11:49:20.813+0000:1319514560:2011-10-25T11:49:20.813+0000:We should create a new camel-mina2 component. Then we can keep the old camel-mina for Mina 1.x end users. 
cabeaulac:1319649072:2011-10-27T01:11:12.202+0000:1319649072:2011-10-27T01:11:12.202+0000:Excellent idea. Much less breakage. I'll update my Git repo from svn HEAD and add the mina2 component to it.

cabeaulac:1319877927:2011-10-29T16:45:27.679+0000:1319877927:2011-10-29T16:45:27.679+0000:Added a new camel-mina2 component to my Git-svn sandbox.
Finally tracked down the UDP issue to the TypeConverter!
thxmasj:1322446364:2011-11-28T10:12:44.179+0000:1322446364:2011-11-28T10:12:44.179+0000:When can I expect a Camel release which includes this component? And in the mean time, will the component be accessible from some other place, and be compatible with Camel 2.8/2.9?
cabeaulac:1322457451:2011-11-28T13:17:31.765+0000:1322457451:2011-11-28T13:17:31.765+0000:Hi Thomas. There are currently 4 unit tests failing for the mina2 component. The failures are unrelated to the original UDP issues. I'll work to get them resolved and post a patch. This by itself does not help with CAMEL-1075 and CAMEL-2624 for asynchronous message processing which is what I'm most interested in. The java.nio framework lends itself to asynchronous processing. The TemplateProducer and mina(1) component are geared toward synchronous request-reply processing. So, I've been wondering if we should support all of the synchronous use cases that mina(1) does like using the template.requestBody methods or if mina2 should move to full asynchronous processing only? A full asynchronous implementation will be easier but it does not provide a smooth transition for mina(1) users. Receiving a response would be done asynchronously in a Mina2 IoHandlerAdapter. I've been thinking about how to inject an IoHandlerAdapter into the Mina2Producer when using TemplateProducer. I'll have a patch soon. It's a straight port of mina(1) and doesn't cover the Jira tickets referenced. Finishing CAMEL-1075 and CAMEL-2624 is a top priority of mine as soon as this ticket is resolved.
cabeaulac:1325309297:2011-12-31T13:28:17.080+0000:1325309297:2011-12-31T13:28:17.080+0000:Finally. All 81 unit tests pass. Now I'm working on adding unit tests for CAMEL-1075 and CAMEL-2624 because that's the functionality I need.
muellerc:1325310009:2011-12-31T13:40:09.010+0000:1325310009:2011-12-31T13:40:09.010+0000:I am pleased to see some progress here. :-)
davsclaus:1325310136:2011-12-31T13:42:16.584+0000:1325310136:2011-12-31T13:42:16.584+0000:Chad could we get this ticket resolved first, eg a camel-mina2 component that is similar to the existing. Then after this focus on those 2 other JIRA tickets. Then its easier to track.

So if you can attach a patch what you got now would be great.
cabeaulac:1325310432:2011-12-31T13:47:12.222+0000:1325310432:2011-12-31T13:47:12.222+0000:No problem. We can resolve 3471 first.
cabeaulac:1325311318:2011-12-31T14:01:58.157+0000:1325311318:2011-12-31T14:01:58.157+0000:I need to do the following before providing the patch
* Merge with upstream changes (in progress)
* Clean build and resolve any issues
* Build with checkstyle and resolve any issues

I have not added a wiki page for this new component yet. So, we'll have to do that too.

The asynchronous use cases could modify some behavior significantly as the current implementation uses blocking I/O with CountDownLatch like the mina 1 component. I was thinking of providing a Mina2 IoHandlerAdapter to the Mina2Endpoint to be able to send ""n"" messages and receive ""m"" messages asynchronously on a single TCP stream.
cabeaulac:1325321952:2011-12-31T16:59:12.912+0000:1325321952:2011-12-31T16:59:12.912+0000:All tests pass in this patch. The port works like the Mina-1 endpoint using CountDownLatch to block for responses.
Checkstyle build passes.
davsclaus:1325491065:2012-01-02T15:57:45.628+0000:1325491065:2012-01-02T15:57:45.628+0000:Thanks for the patch.

I have applied it to trunk. I polished a few minor issues such as removing some not needed logging, as well logging to a file during testing.
The Apache Mina 2 JARs is already OSGi bundles, so no need for a SMX wrapper. 

We will need though to ensure the imports of camel-mina is limited to 1.x. Where as camel-mina2 should be 2.x+. Will look into this later.
davsclaus:1325492324:2012-01-02T16:18:44.223+0000:1325492324:2012-01-02T16:18:44.223+0000:Okay I got the osgi imports fixed so camel-mina and camel-mina2 component have the correct version ranges.

cabeaulac:1325568590:2012-01-03T13:29:50.409+0000:1325568590:2012-01-03T13:29:50.409+0000:Patch has been applied to SVN HEAD. Created subtask to add the wiki page for the new component. It isn't assigned to anybody yet."
0,CAMEL-3470,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2010-12-28 18:28:59+00:00,2011-10-25 11:35:49+00:00,"Document the procedure of adding new components (check the license, check the contributed source code, run the tests and look on the test coverage, run check style, provide a feature file, ...). I think this will help new committers and also contributors to provide ""better"" patches.","muellerc:1293942754:2011-01-02T12:32:34.092+0000:1293942754:2011-01-02T12:32:34.092+0000:Added the wiki page [Add new component guide|https://cwiki.apache.org/confluence/display/CAMEL/Add+new+component+guide].
Would be good if an English native speaker and one of the core committers could review this page.
muellerc:1293943046:2011-01-02T12:37:26.965+0000:1293943046:2011-01-02T12:37:26.965+0000:The new wiki page is not shown in the [Developers|https://cwiki.apache.org/confluence/display/CAMEL/Developers] wiki page. The same for [Upgrade dependency guide|https://cwiki.apache.org/confluence/display/CAMEL/Upgrade+dependency+guide]. Could someone tell me why?
tjsnell:1293989924:2011-01-03T01:38:44.043+0000:1293989924:2011-01-03T01:38:44.043+0000:I handled the native English edit.
davsclaus:1294005024:2011-01-03T05:50:24.815+0000:1294005024:2011-01-03T05:50:24.815+0000:Ah sorry the page is now online at
http://camel.apache.org/add-new-component-guide.html

And listed on the developer page
http://camel.apache.org/developers.html

Its just that the auto export (cwiki -> static html) may play tricks on us sometimes and take rather long time to update and include new pages.
davsclaus:1294005534:2011-01-03T05:58:54.806+0000:1294005534:2011-01-03T05:58:54.806+0000:Nice. 

I added a note about you need to add the new component to the manual

One last note is actually to add the new component to the distribution kit. Its something like the following:

Add the new component in the following files:
- parent/pom.xml
- apache-camel/src/main/descriptors/common-bin.xml 

Build the kit by running: mvn clean install from the apache-camel directory. And check the generated .zip file from the target folder contains the new component.
muellerc:1294016175:2011-01-03T08:56:15.329+0000:1294016175:2011-01-03T08:56:15.329+0000:@Tracy, Claus: Cool and thanks again!
tjsnell:1294206078:2011-01-05T13:41:18.284+0000:1294206078:2011-01-05T13:41:18.284+0000:Shouldn't this:
Add the new component to the Component List wiki page.
Add a new wiki page under the Components wiki page.
be reworded to

Add a new wiki page under the Components wiki page by adding to the Component List wiki page.

Or something like that. They wouldn't need to edit the Components wiki page at all.

Love this page btw. Nice work!
muellerc:1294206340:2011-01-05T13:45:40.192+0000:1294206340:2011-01-05T13:45:40.192+0000:Tracy, sounds good for me (you are the English native speeker) ;-)
tjsnell:1294208680:2011-01-05T14:24:40.717+0000:1294208680:2011-01-05T14:24:40.717+0000:Changed."
0,CAMEL-3469,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2010-12-28 18:19:17+00:00,2011-04-24 09:58:05+00:00,"Upgrading to newer versions of the dependencies is indeed normally a simple procedure. If we add a wiki page with the procedure (which pom should be updated and checked, do we need an OSGI bundle from the ServiceMix guys, run the full test suite, ...), it could be one of the ""low hanging fruits"" for new contributors/committers to work on Camel.","muellerc:1293544512:2010-12-28T21:55:12.522+0000:1293544512:2010-12-28T21:55:12.522+0000:I will document this procedure by working on [CAMEL-3471|https://issues.apache.org/jira/browse/CAMEL-3471]
muellerc:1293549041:2010-12-28T23:10:41.599+0000:1293549041:2010-12-28T23:10:41.599+0000:Added the wiki page [Upgrade dependency guide|https://cwiki.apache.org/confluence/display/CAMEL/Upgrade+dependency+guide]. Would be nice if an English native speaker and one of the core committer could review this page.
davsclaus:1303610285:2011-04-24T09:58:05.442+0000:1303610285:2011-04-24T09:58:05.442+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3468,New Feature,Major,None,None,"
None
",Closed,Fixed,2.6.0,Christian Müller,Tracy J. Snell,0,1,2010-12-28 04:27:07+00:00,2013-05-02 02:29:35+00:00,"I've started a new component to interface with Amazon Web Services. This first pass includes just a Simple Queue Service component. Additional services will be added soon. I used the Amazon AWS SDK for Java to interface with AWS. Uses Apache 2.0 as it's license.


Let me know if I need to change things or any thoughts/suggestions and I'll be glad to make the adjustments.","tjsnell:1293481733:2010-12-28T04:28:53.566+0000:1293481733:2010-12-28T04:28:53.566+0000:Once this code is in trunk I'll create the component documentation for the web site.
massfords:1293526636:2010-12-28T16:57:16.769+0000:1293526636:2010-12-28T16:57:16.769+0000:I created one for the SNS back in May 2010. It's up on google code. Perhaps the two should merge?

http://code.google.com/p/camel-sns/


tjsnell:1293534088:2010-12-28T19:01:28.819+0000:1293534088:2010-12-28T19:01:28.819+0000:Mark that would rock! I'll merge them up if you don't mind.
tjsnell:1293534274:2010-12-28T19:04:34.969+0000:1293534274:2010-12-28T19:04:34.969+0000:I debated a good bit if this should be camel-sqs or part of a larger camel-aws. I went with the same route as camel-gae and opted for camel-aws. Still almost 50/50 on which is better. 
massfords:1293535236:2010-12-28T19:20:36.872+0000:1293535236:2010-12-28T19:20:36.872+0000:You're welcome to take as much or as little of the code from my camel-sns component. I was reluctant to contribute it earlier since the tests require an AWS account and I wasn't sure how this would work during regular builds. Looking back on the code now I should have split the tests into unit tests and integration tests.

I've only setup subscribing to an SNS topic with a SQS endpoint. I didn't see a lot of value from the camel perspective of supporting the email/http/https delivery endpoints but perhaps others will disagree. As far as I remember, the tests were working and everything documented on the google code site is functional. 

tjsnell:1293570578:2010-12-29T05:09:38.887+0000:1293570578:2010-12-29T05:09:38.887+0000:Christian, let me know what's missing to make this as easy as possible to add. First time I've tried to write a component so not positive I covered everything.  I did get a clean mvn -Psourcecheck clean install
 but not sure what all I need. The unit testing relies on a mock since connecting to AWS requires user creds. Thought about adding a profile with a test that used a live queue. Devs would have to enter their AWS creds then make sure to delete them. Bailed on that and decided a simple example in the examples dir may be better and have less of a risk of someones creds getting posted in a patch or to svn.
muellerc:1293673194:2010-12-30T09:39:54.877+0000:1293673194:2010-12-30T09:39:54.877+0000:Hello Tracy,
I will have a look on it tomorrow or at the weekend. Running 
{code}
mvn -Psourcecheck clean install
{code}
is always a good idea :-). I will also have a look on the test coverage and, if it's free and simple to get an account by amazon, I will also run a integration test. I wonder this integration test could be part of the test suite, but annotated with 
{code}
@Test
@Ignore(""Must be manually tested"")
{code}
like the SmppComponentIntegrationTest. A separate example for this component is also a good idea, but requires more work (a README.txt, may be a wiki page like these [1], ...). Would you also like to work on it? And maybe improve this example over the time if we add more features to this component?

By the way, I will also document the procedure of adding new components to Camel: [CAMEL-3470|https://issues.apache.org/jira/browse/CAMEL-3470]

[1] http://camel.apache.org/examples.html
muellerc:1293718432:2010-12-30T22:13:52.696+0000:1293718432:2010-12-30T22:13:52.696+0000:Hello Tracy,
today I had a first look at this new component. It looks good and I think a cool contribution. However, I will make some little changes. ;-)
I also made an integration test to verify this component works as expected. At present it fails, but I think i get it working the next few days, hopefully before Hadrian cut the 2.6. release...

{code}
public class SqsComponentIntegrationTest extends CamelTestSupport {
    
    @EndpointInject(uri = ""direct:start"")
    private ProducerTemplate template;
    
    @EndpointInject(uri = ""mock:result"")
    private MockEndpoint result;
    
    @Test
    //@Ignore(""Must be manually tested"")
    public void sendInOnly() throws Exception {
        result.expectedMessageCount(1);
        
        Exchange exchange = template.send(""direct:start"", ExchangePattern.InOnly, new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(""This is my message text."");
            }
        });
        
        assertMockEndpointsSatisfied();
        
        Exchange resultExchange = result.getExchanges().get(0);
        assertEquals(""This is my message text."", resultExchange.getIn().getBody());
        assertNotNull(resultExchange.getIn().getHeader(SqsBinding.MESSAGE_ID));
        assertNotNull(resultExchange.getIn().getHeader(SqsBinding.RECEIPT_HANDLE));
        assertEquals(""6a1559560f67c5e7a7d5d838bf0272ee"", resultExchange.getIn().getHeader(SqsBinding.MD5_OF_BODY));
        
        assertNotNull(exchange.getIn().getHeader(SqsBinding.MESSAGE_ID));
        assertEquals(""6a1559560f67c5e7a7d5d838bf0272ee"", resultExchange.getIn().getHeader(SqsBinding.MD5_OF_BODY));
    }
    
    @Test
    //@Ignore(""Must be manually tested"")
    public void sendInOut() throws Exception {
        result.expectedMessageCount(1);
        
        Exchange exchange = template.send(""direct:start"", ExchangePattern.InOut, new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(""This is my message text."");
            }
        });
        
        assertMockEndpointsSatisfied();
        
        Exchange resultExchange = result.getExchanges().get(0);
        assertEquals(""This is my message text."", resultExchange.getIn().getBody());
        assertNotNull(resultExchange.getIn().getHeader(SqsBinding.RECEIPT_HANDLE));
        assertNotNull(resultExchange.getIn().getHeader(SqsBinding.MESSAGE_ID));
        assertEquals(""6a1559560f67c5e7a7d5d838bf0272ee"", resultExchange.getIn().getHeader(SqsBinding.MD5_OF_BODY));
        
        assertNotNull(exchange.getOut().getHeader(SqsBinding.MESSAGE_ID));
        assertEquals(""6a1559560f67c5e7a7d5d838bf0272ee"", resultExchange.getOut().getHeader(SqsBinding.MD5_OF_BODY));
    }
    
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                    .to(""sqs://MyQueue?accessKey=xxx&secretKey=yyy"");
                
                from(""sqs://MyQueue?accessKey=xxx&secretKey=yyy"")
                    .to(""mock:result"");
            }
        };
    }
}
{code}
muellerc:1293718887:2010-12-30T22:21:27.116+0000:1293718887:2010-12-30T22:21:27.116+0000:Mark,
I had also a look on your component and I would also like to add your component into the camel-aws component. Could you please open a new JIRA for it and attach your source code? Don't forget to grant the Apache license so we can use it.
Thanks in advance,
Christian
tjsnell:1293723139:2010-12-30T23:32:19.315+0000:1293723139:2010-12-30T23:32:19.315+0000:MessageID, MD5 and RecipientHandle are not part of the message attributes so weren't propagating. Adding them now. Can I see SqsBinding?

tjsnell:1293724453:2010-12-30T23:54:13.124+0000:1293724453:2010-12-30T23:54:13.124+0000:Just need to add these 3 lines (no diff since it's not in svn yet) in the SqsConsumer poll method:

{code}
            Map<String, Object> attributes = new HashMap<String, Object>(msg.getAttributes());

            // Add message attributes to the header map
            attributes.put(SqsBinding.MESSAGE_ID, msg.getMessageId());
            attributes.put(SqsBinding.RECEIPT_HANDLE, msg.getReceiptHandle());
            attributes.put(SqsBinding.MD5_OF_BODY, msg.getMD5OfBody());

            message.setHeaders(attributes);
{code}

That runs cleanly for everything but the last 2 lines of sendInOut()
{code}
assertNotNull(exchange.getOut().getHeader(""messageId""));
assertEquals(""6a1559560f67c5e7a7d5d838bf0272ee"", resultExchange.getOut().getHeader(""mD5OfBody""));
{code}

Also you have exchange in the first line and resultExchange in the second (doesn't matter since out isn't set in either exhange). Looking at the out issue now.
davsclaus:1293765377:2010-12-31T11:16:17.565+0000:1293765377:2010-12-31T11:16:17.565+0000:Lets see if we can get this in Camel 2.6, if not postpone it to 2.7
muellerc:1293770869:2010-12-31T12:47:49.731+0000:1293770869:2010-12-31T12:47:49.731+0000:We need an OSGI-fied version of the aws-java-sdk. Normally the ServiceMix guys will provide one for us.
muellerc:1293771704:2010-12-31T13:01:44.499+0000:1293771704:2010-12-31T13:01:44.499+0000:@Claus: I think we should postpone it to 2.7, because we also need the OSGI-fied version of the aws-java-sdk.

@Tracy: The resultExchange in the last line was a typo.
The SqsBinding only holds the SQS constants. Maybe we find a better name for it...
{code}
public class SqsBinding {

    public static final String MD5_OF_BODY = ""CamelSqsMD5OfBody"";
    public static final String MESSAGE_ID = ""CamelSqsMessageId"";
    public static final String RECEIPT_HANDLE = ""CamelSqsReceiptHandle"";
}
{code}
The integration test is now working fine. I would like to add/change the following thinks:
- deleting of consumed messages after the successful processing in Camel
- provide the option to configure a client in the URL like ""sqs://MyQueue?accessKey=xxx&secretKey=yyy&client=#myAmazonSQSClient"" to have the possibility to share and mock the client
- provide the option to configure a header filter strategy. All not filtered header will be send as message attributes to SQS
- add some log statements
- add some ""real"" Camel tests which use an AmazonSQSClient mock
tjsnell:1293773344:2010-12-31T13:29:04.921+0000:1293773344:2010-12-31T13:29:04.921+0000:I don't understand this item:

- provide the option to configure a client in the URL like ""sqs://MyQueue?accessKey=xxx&secretKey=yyy&client=#myAmazonSQSClient"" to have the possibility to share and mock the client

What is myAmazonSQSClient?

Side note, should all the class names be Sqs... or SQS...? I like the latter actually. 
massfords:1293775571:2010-12-31T14:06:11.591+0000:1293775571:2010-12-31T14:06:11.591+0000:@Christian - I'll create the issue to add my camel-sns component and coordinate with Tracy.

@Tracy - client=#myAmazonSQSClient is a property on the endpoint URI that allows a developer to configure the component with their own SQS client object. The developer would have configured the spring context or camel registry with a bean mapped to that key. The component checks that property and uses the client object there instead of creating their own. This allows the developer to handle the mock objects or otherwise override the behavior for the API. Obviously the object they provide must implement the same interface or extend the same class as what you're expecting for the Amazon API object.
tjsnell:1293776940:2010-12-31T14:29:00.406+0000:1293776940:2010-12-31T14:29:00.406+0000:Hah, that's kind of obvious post morning caffeine intake!

It's possible they've configured the AWS keys in the client also. Should we removed the keys as required parameters? Of course they could just set them to random values to. If they could optionally set the keys then the code would need to support that but should be very easy.
tjsnell:1293785111:2010-12-31T16:45:11.059+0000:1293785111:2010-12-31T16:45:11.059+0000:Creating a new Jira for the SNS code.
tjsnell:1293860696:2011-01-01T13:44:56.484+0000:1293860696:2011-01-01T13:44:56.484+0000:Christian, have you made any other changes?

I'm merging in Mark's code with mine and I'm just going to use his repo at Google code until I have a new patch with both SQS and SNS in it.
muellerc:1293872825:2011-01-01T17:07:05.816+0000:1293872825:2011-01-01T17:07:05.816+0000:Attached the patch for [SMX4-723|https://issues.apache.org/jira/browse/SMX4-723]
muellerc:1293873187:2011-01-01T17:13:07.729+0000:1293873187:2011-01-01T17:13:07.729+0000:Tracy, I would prefer a new patch for it because I made some other changes:
- refactored the functionality of SqsQueue into SqsEndpoint, SqsProducer and SqsConsumer because I think we don't need this additional abstraction
- SqsConsumer: delete the message after successful processing in Camel if so configured (not before)
- SqsConfiguration: rename delete in deleteAfterRead
- SqsConsumer + SqsProducer: remove the endpoint instance variable because the super class hold this reference
- ...
tjs@snagdata.com:1293879096:2011-01-01T18:51:36.391+0000:1293879096:2011-01-01T18:51:36.391+0000:That's fine.

SqsQueue was just to make testing a bit easier. AWS has screwed up my account and I can't get access to SNS right now anyway.





muellerc:1293944954:2011-01-02T13:09:14.829+0000:1293944954:2011-01-02T13:09:14.829+0000:@Tracy, don't worry about this. At present I have enough to do.. ;-) 
muellerc:1293945598:2011-01-02T13:19:58.834+0000:1293945598:2011-01-02T13:19:58.834+0000:@Claus: Do we add new components (like this one) and provide the feature definition later (maybe with a separate issue)?

I ask because I think I could finish this work in the next days, but I think the ServiceMix release of OSGI-fied version from aws-java-sdk (what we need for the feature definition) will take some more time. I think it will not be available when we release Camel 2.6.
I would prefer to add this component to Camel 2.6 and provide the feature definition for 2.7 (with a separate issue). Then our users can use this new component in Camel 2.6 in non OSGI environments and provide temporarily its own feature definition in OSGI environments when the OSGI bundle of aws-java-sdk is released from the ServiceMix guys (or they use the SNAPSHOT version).
muellerc:1293982237:2011-01-02T23:30:37.631+0000:1293982237:2011-01-02T23:30:37.631+0000:Hello Tracy,
I attached the patch which I will commit after Claus give me his ok. Feel free to test it. Every feedback is welcome.
davsclaus:1294006654:2011-01-03T06:17:34.305+0000:1294006685:2011-01-03T06:18:05.691+0000:Code review
==========

1)
Prefer to throw IllegalArgumentException instead of CamelException for invalid configuration.
eg: throw new CamelException(""Queue name not specified."");

2)
There is a <a/> in the javadoc of SqsConfiguration

3)
Why do you use Integer and not int for the properties in SqsConfiguration? You use boolean. Maybe use Boolean so they are all non primitive types, or use int, so they are all primitive.

4)
The consumer is scheduled poll based - and it polls X number of messages. Maybe it can be a {{BatchConsumer}} as well?
See the camel-mail component for an example.

5)
The logic to delete message after read in the consumer, should preferred to be in a on completion. This ensures it works well with the asynchronous routing engine. See MailConsumer for an example.

6)
Prefer to use {{handleException(e);}} instead of logging exceptions which was thrown. This allows to re-use logic to handle this. See MailConsumer for example.

7)
In the producer you don't propagate headers if its a InOut MEP, in the getMessageForResponse method. You most likely want to copy the headers from the IN message to OUT to preserve those. If you dont do this, then end users will suffer from the ""where the f*** is my headers."" issue.





muellerc:1294017060:2011-01-03T09:11:00.007+0000:1294017060:2011-01-03T09:11:00.007+0000:Claus, thanks for the review. I will work on it today evening.
After that, I will commit this new component so it is part of the 2.6 release. Jean-Baptiste also resolved [SMX4-723|https://issues.apache.org/jira/browse/SMX4-723]. This means I can provide the features definition with a dependency to a snapshot version of the aws-java-sdk OSGI bundle from ServiceMix. Maybe we can force a release version of the aws-java-sdk OSGI bundle before Camel 2.6 will be released.
davsclaus:1294017473:2011-01-03T09:17:53.261+0000:1294017473:2011-01-03T09:17:53.261+0000:Christian it only makes sense to implement {{BatchConsumer}} if it makes sense from AWS point of view. For example it would read *a lot* of messages, and with the batch consumer you may want to limit that to eg X number of messages per time.

For example a mailbox may have 10000 mails, and you may want to limit it to 100 mails / poll. Likewise for file consumer etc.
So if AWS has the same ""issue"". then implement the BatchConsumer. If not then its fine as is.
davsclaus:1294017550:2011-01-03T09:19:10.342+0000:1294017550:2011-01-03T09:19:10.342+0000:And btw yes it makes sense to push it for 2.6 even if we dont have OSGi bundles and features file. There are a lot of end users not using OSGi and it helps get it out and used by end users, which may find bugs and provide ideas for improvements.
hadrian:1294034845:2011-01-03T14:07:25.564+0000:1294034845:2011-01-03T14:07:25.564+0000:Yes, it *should* implement BatchConsumer. I have some concerns about testing this component though.
It is not easy to test with good feature coverage, it depends on aws and could be time consuming. Attention to such details is highly appreciated.
muellerc:1294037627:2011-01-03T14:53:47.095+0000:1294037627:2011-01-03T14:53:47.095+0000:Hadrian, I think we covered this. We build integration tests which can be executed manualy to test the behavior against the real AWS (annotated with @Ignore). And we mocked the Amazon SQS client and uses this mock in our real unit tests to not depend on the real AQS.
muellerc:1294051010:2011-01-03T18:36:50.586+0000:1294051010:2011-01-03T18:36:50.586+0000:My code review comments:
1) fixed as you suggested
2) ok, removed
3) Because I have to differentiate between unset and default values. I changed the code to use only the wrapper types (Boolean, Integer, ...)
4) ok, implement the BatchConsumer and ShutdownAware interfaces
5) ok, implemented as suggested
6) not needed anymore
7) ok, fixed

I will add some more unit tests for the BatchConsumer stuff before I commit this.
muellerc:1294156964:2011-01-05T00:02:44.135+0000:1294156964:2011-01-05T00:02:44.135+0000:aws-java-sdk use jackson-core-asl 1.6.4
muellerc:1294184360:2011-01-05T07:39:20.386+0000:1294184360:2011-01-05T07:39:20.386+0000:Added with revision 1055335

Thank you Tracy for the contribution!
davsclaus:1294185953:2011-01-05T08:05:53.680+0000:1294185953:2011-01-05T08:05:53.680+0000:Christian, are you sure you must do during a for loop?
{code}
      iterator.remove();
{code}

That would mean you would skip every 2nd because you remove the next during the looping.
If its on purpose, then please add a code comment why.


I think I spotted this in a mock class in this commit.
muellerc:1294187585:2011-01-05T08:33:05.675+0000:1294187585:2011-01-05T08:33:05.675+0000:Claus I think my code works fine. It removes one element for each iteration (not every 2nd). The Java doc says:

{code}
    /**
     * 
     * Removes from the underlying collection the last element returned by the
     * iterator (optional operation).  This method can be called only once per
     * call to <tt>next</tt>.  The behavior of an iterator is unspecified if
     * the underlying collection is modified while the iteration is in
     * progress in any way other than by calling this method.
     *
     * @exception UnsupportedOperationException if the <tt>remove</tt>
     *		  operation is not supported by this Iterator.
     
     * @exception IllegalStateException if the <tt>next</tt> method has not
     *		  yet been called, or the <tt>remove</tt> method has already
     *		  been called after the last call to the <tt>next</tt>
     *		  method.
     */
    void remove();
{code}"
0,CAMEL-3467,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Chad Wilson,0,0,2010-12-28 03:20:21+00:00,2011-04-24 09:57:25+00:00,"I think it'd be worth clarifying in the documentation for showStackTrace at http://camel.apache.org/log.html that you must have one of showAll, showException or showCaughtException defined for this property to be respected. This wasn't clear to me from the documentation so caused some head scratching for a while (but is clear from the source code!).


Suggested clarification:



Camel 2.0: Show the stack trace, if an exchange has an exception. Only effective if one of showAll, showException or showCaughtException are true on the endpoint.",davsclaus:1303610245:2011-04-24T09:57:25.271+0000:1303610245:2011-04-24T09:57:25.271+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3466,New Feature,Minor,2.5.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,0,2010-12-27 09:56:50+00:00,2015-02-17 07:02:21+00:00,This allows end users to transfer serialized objects over HTTP for example to bridge two Camel applications.,"davsclaus:1293427825:2010-12-27T13:30:25.975+0000:1293427825:2010-12-27T13:30:25.975+0000:Polished camel-http a bit: 1053064.
davsclaus:1293585760:2010-12-29T09:22:40.629+0000:1293585760:2010-12-29T09:22:40.629+0000:polished: 1053575.
davsclaus:1293606793:2010-12-29T15:13:13.101+0000:1293606793:2010-12-29T15:13:13.101+0000:If anyone wanna try implementing this then take a look at camel-mina and its PayloadHelper class. This allows you to grab the message body depending on whether transferExchange has been enabled or not.

Something similar is needed in camel-http.

In the HttpProducer, DefaultHttpBinding, and HttpPollingConsumer.


davsclaus:1293606887:2010-12-29T15:14:47.645+0000:1293606887:2010-12-29T15:14:47.645+0000:And maybe polish a bit the logic in HttpHelper and DefaultHttpBinding which reads/writes to/from the HttpServletRequest, HttpServletResponse
davsclaus:1293606937:2010-12-29T15:15:37.874+0000:1293606937:2010-12-29T15:15:37.874+0000:And remember any changes in camel-http has to be mirrored into camel-http4 as well."
0,CAMEL-3465,Improvement,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,1,2010-12-25 08:59:41+00:00,2011-10-25 11:35:46+00:00,We should upgrade camel-restlet to use the Restlet 2.x API.,davsclaus:1299812763:2011-03-11T11:06:03.917+0000:1299812763:2011-03-11T11:06:03.917+0000:Already done
0,CAMEL-3464,Bug,Major,2.5.0,,"
None
",Closed,Fixed,None,Carl Johan Erik Edstrom,Martin Cleaver,0,0,2010-12-24 16:53:14+00:00,2011-04-24 09:57:50+00:00,"[11:26am] MartinCleaver: ok, well I did build it against trunk, I used ""svn co http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-gae camel-example-gae""
[11:26am] MartinCleaver: but the pom.xml didn't work for me
[11:27am] MartinCleaver: maybe I installed google app engine incorrectly, the instructions felt vague
[11:27am] joed: You are buidling a snapshot, you don't have any of the parent pom deps, you'll need the whole source tree most likely.
[11:29am] MartinCleaver: ah - is this mentioned on http://camel.apache.org/tutorial-for-camel-on-google-app-engine.html ? I should have checked out google app engine rather than just a ""Install the http://code.google.com/appengine/downloads.html""
[11:31am] MartinCleaver: and, did installing google app engine not install the parent pom deps?
[11:33am] joed: I just tried that too and that also works fine with mvn clean install
[11:33am] MartinCleaver: ok, so I've screwed up somewhere.
[11:33am] tjsnell: you have snapshot in your repo already though
[11:33am] tjsnell: hrmm
[11:33am] joed: True.
[11:34am] joed: One sec.
[11:34am] tjsnell: trying a clean repo?
[11:34am] MartinCleaver: I was surprised I needed to edit the pom.xml file, but perhaps that's just my naivety
[11:35am] joed: Yeah, those instructions won't work.
[11:35am] MartinCleaver: ah!
[11:36am] • MartinCleaver feels a little vindicated, but mostly thankful
[11:36am] tjsnell: heh
[11:36am] joed: MartinCleaver: you are right, since you followed the instructions - the example gets the null: basically because you have the project only and no the parent poms.
[11:36am] joed: not*
[11:36am] tjsnell: can he set the version to a realeased version not snapshot?
[11:37am] tjsnell: should pull the poms then right?
[11:38am] joed: If you were to build against trunk, it'll work fine
[11:38am] joed: tjsnell: Don't think so, since properties/version/parent/etc still is missing.
[11:39am] tjsnell: ahh
[11:39am] tjsnell: yeah
[11:39am] joed: MartinCleaver: the quickest fix is this : svn co http://svn.apache.org/repos/asf/camel/trunk camel ; cd camel/examples/camel-example-gae ; mvn clean install
[11:40am] joed: We need to improve the wiki page though.","joed:1293193372:2010-12-24T20:22:52.570+0000:1293193372:2010-12-24T20:22:52.570+0000:Fixed svn co instructions on Wiki. 
davsclaus:1303610270:2011-04-24T09:57:50.354+0000:1303610270:2011-04-24T09:57:50.354+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3463,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-24 14:47:10+00:00,2011-04-24 09:58:26+00:00,"When end users provide a JMSReplyTo in either a header or endpoint configuration as a String.


It should be normalized so we cater for queue and topic prefixes. So if end user does: queue:foo we will remove the queue: prefix to avoid creating a destination which would be queue://queue:foo.","davsclaus:1293238677:2010-12-25T08:57:57.195+0000:1293238691:2010-12-25T08:58:11.756+0000:Part of CAMEL-3462 commit in rev: 1052759.
davsclaus:1303610306:2011-04-24T09:58:26.196+0000:1303610306:2011-04-24T09:58:26.196+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3462,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-24 14:05:33+00:00,2011-10-25 11:36:15+00:00,"This allows you to with a InOnly MEP exchange to send the message to a JMS queue with a JMSReplyTo.


Then you may have another route which can pickup and process those messages coming back to the JMSReplyTo queue.


See nabble
http://camel.465427.n5.nabble.com/JMS-ReplyTo-not-sent-for-InOnly-Pattern-td3250344.html","davsclaus:1293238655:2010-12-25T08:57:35.169+0000:1293238655:2010-12-25T08:57:35.169+0000:trunk: 1052759.
davsclaus:1295502228:2011-01-20T13:43:48.114+0000:1295502228:2011-01-20T13:43:48.114+0000:trunk: 1061298.

Fixed an issue that {{preserveMessageQos=true}} should always be configured to allow JMSReplyTo to be send in InOnly mode."
0,CAMEL-3461,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,1,2010-12-24 09:11:42+00:00,2012-03-08 13:44:05+00:00,"There some important information such as ServletRequest can be access from the CXF Message, we need to let DefaultCXFBinding copy the CXFMessage into camel message to access these information from the Camel route.","davsclaus:1303610252:2011-04-24T09:57:32.529+0000:1303610252:2011-04-24T09:57:32.529+0000:Closing all resolved tickets from 2010 or older
sruehl:1331185445:2012-03-08T13:44:05.296+0000:1331185445:2012-03-08T13:44:05.296+0000:Could this possible also be added to DefaultCxfRsBinding?"
0,CAMEL-3460,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-24 08:53:20+00:00,2011-04-24 09:57:28+00:00,"This allows end user to know the maximum, and therefore also compute if its the last redelivery attempt.
For example when they use onRedelivery feature.


See nabble
http://camel.465427.n5.nabble.com/Unable-to-retrieve-Exchange-REDELIVERY-EXHAUSTED-header-tp3313157p3313157.html","davsclaus:1293155405:2010-12-24T09:50:05.293+0000:1293155405:2010-12-24T09:50:05.293+0000:trunk: 1052470.
davsclaus:1303610248:2011-04-24T09:57:28.507+0000:1303610248:2011-04-24T09:57:28.507+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3459,Bug,Major,2.6.0,None,"
None
",Closed,Not A Problem,2.6.0,Claus Ibsen,Michael Van Geertruy,0,0,2010-12-23 16:42:26+00:00,2011-04-24 09:58:13+00:00,"Currently dozer releases two versions of its product, dozer (a non-bundled .jar file) and dozer-osgi (an osgi bundle).  Supporting Camel's direction moving to a tighter integration with OSGi, we should use dozer-osgi instead of dozer.  To implement this, change line 44 of the camel-dozer pom.xml document from 


            <artifactId>dozer</artifactId>


to


            <artifactId>dozer-osgi</artifactId>


This is related to ticket 3228 which is currently in a hold status. Regardless of the changes made to dozer to make it work in OSGi, we will still need to use the dozer-osgi bundle as long as the dozer project creates a seperate bundle. As such, this change should be made prior to the dozer release fixing thier ability to run in Camel.


I have attached a patched pom.xml file that implements this change","karafman:1293093806:2010-12-23T16:43:26.886+0000:1293093862:2010-12-23T16:44:22.845+0000:Added a patched version of pom.xml.
karafman:1293109708:2010-12-23T21:08:28.184+0000:1293109708:2010-12-23T21:08:28.184+0000:Updated the pom.xml file to include a dependency on commons-lang which kept it from building.
karafman:1293109912:2010-12-23T21:11:52.606+0000:1293109912:2010-12-23T21:11:52.606+0000:Added a dependency (commons-lang) to allow the build to complete.
karafman:1293110921:2010-12-23T21:28:41.429+0000:1293110921:2010-12-23T21:28:41.429+0000:Added commons-beanutils and slf4j dependencies.  All tests now appear to pass.
davsclaus:1293155747:2010-12-24T09:55:47.556+0000:1293155747:2010-12-24T09:55:47.556+0000:There is a Karaf feature for dozer, which is the way you should install and use dozer in osgi.

https://svn.apache.org/repos/asf/camel/trunk/platforms/karaf/features/src/main/resources/features.xml
{code:xml}
  <feature name='camel-dozer' version='${pom.version}'> 
    <feature version='${pom.version}'>camel-core</feature> 
    <bundle>mvn:org.ops4j.pax.web/pax-web-jsp/${pax.web.version}</bundle> 
    <bundle>mvn:net.sf.dozer/dozer-osgi/${dozer-bundle-version}</bundle> 
    <bundle>mvn:commons-lang/commons-lang/${commons-lang-version}</bundle> 
    <bundle>mvn:commons-collections/commons-collections/${commons-collections-version}</bundle> 
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlbeans/${xmlbeans-bundle-version}</bundle> 
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-beanutils/${commons-beanutils-bundle-version}</bundle> 
    <bundle>mvn:org.apache.camel/camel-dozer/${pom.version}</bundle> 
  </feature> 
{code}

As you can see it uses the dozer-osgi bundle.

So we keep the pom.xml as usual for maven users.
And the features is for OSGi users.
davsclaus:1303610293:2011-04-24T09:58:13.234+0000:1303610293:2011-04-24T09:58:13.234+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3458,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-23 16:19:16+00:00,2011-04-24 09:57:43+00:00,"Adding a new option to bindy annotation




    /**
     * Indicates to clip data in the field if it exceeds the allowed length when using fixed length.
     */
    boolean clip() default false;




Then if enabled it will clip the data so it can fit the length.
Also now Camel throws an exception if the data is too long and you have clip set as false.","davsclaus:1293092380:2010-12-23T16:19:40.016+0000:1293092380:2010-12-23T16:19:40.016+0000:See nabble
http://camel.465427.n5.nabble.com/Bindy-fixed-length-length-attribute-and-truncate-tp3312636p3312636.html
davsclaus:1293092674:2010-12-23T16:24:34.186+0000:1293092674:2010-12-23T16:24:34.186+0000:trunk: 1052312.
davsclaus:1303610263:2011-04-24T09:57:43.859+0000:1303610263:2011-04-24T09:57:43.859+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3457,New Feature,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Claus Ibsen,0,0,2010-12-22 06:41:02+00:00,2011-04-24 09:58:27+00:00,"gnodet wrote a couple of OSGi Camel components
http://gnodet.blogspot.com/2010/09/two-karaf-related-camel-components.html


https://github.com/gnodet/camel/tree/trunk/components/camel-eventadmin
https://github.com/gnodet/camel/tree/trunk/components/camel-paxlogging


We should port those to apache trunk","gnodet:1293010923:2010-12-22T17:42:03.519+0000:1293010923:2010-12-22T17:42:03.519+0000:Added some docs at 
  * https://cwiki.apache.org/confluence/display/CAMEL/Pax-Logging
  * https://cwiki.apache.org/confluence/display/CAMEL/EventAdmin
davsclaus:1303610307:2011-04-24T09:58:27.782+0000:1303610307:2011-04-24T09:58:27.782+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3456,New Feature,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Jim Newsham,0,0,2010-12-21 21:38:51+00:00,2014-08-23 08:10:28+00:00,"Long-running requests (requests which take many minutes or possibly hours) over jms are currently problematic:



When the ""requestTimeout"" parameter on the producer is exceeded, the producer will give up waiting for a response and log an exception.  To prevent this, the requestTimeout parameter could be set to a much higher value, but this doesn't seem reasonable, because the producer needs some way to know when the consumer is not really handling the request; the 20 second default for this parameter seems reasonable for this purpose.  Instead, there should probably  be some way for the consumer to communicate to the producer that the long-running request is still in progress.  I would suggest that the jms consumer could automatically send a periodic heartbeat message to the producer to let it know that the request is still being handled.




Long-running requests which occupy a pooled thread while waiting can exhaust the thread pool.




If Camel is restarted, the exchange will be lost.



See http://camel.465427.n5.nabble.com/long-running-requests-over-jms-td3312711.html",
0,CAMEL-3455,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.6.0,Ashwin J. Karpe,Ashwin J. Karpe,0,1,2010-12-21 14:34:41+00:00,2011-10-25 11:36:14+00:00,No Desc,akarpe:1294128451:2011-01-04T16:07:31.620+0000:1294128451:2011-01-04T16:07:31.620+0000:Added Routebox documentation to the Camel Wiki and updated the Component List
0,CAMEL-3454,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.6.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-12-21 14:33:01+00:00,2011-10-25 11:35:31+00:00,No Desc,"akarpe:1294386153:2011-01-07T15:42:33.616+0000:1294386153:2011-01-07T15:42:33.616+0000:Attached is the patch that allows the routebox to be deployed to an OSGi container (servicemix) as a karaf feature
akarpe:1294386531:2011-01-07T15:48:51.173+0000:1294386531:2011-01-07T15:48:51.173+0000:Committed the patch to the Camel trunk as revision r1056360"
0,CAMEL-3423,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-13 11:18:54+00:00,2011-04-24 09:57:18+00:00,"See nabble
http://camel.465427.n5.nabble.com/Refreshing-at-runtime-an-Idempotent-Consumer-tp3302147p3302147.html","davsclaus:1292214896:2010-12-13T12:34:56.280+0000:1292214896:2010-12-13T12:34:56.280+0000:trunk: 1045095.
davsclaus:1303610238:2011-04-24T09:57:18.134+0000:1303610238:2011-04-24T09:57:18.134+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3422,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-12-10 02:06:28+00:00,2011-04-24 09:57:16+00:00,No Desc,davsclaus:1303610236:2011-04-24T09:57:16.144+0000:1303610236:2011-04-24T09:57:16.144+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3421,Test,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Tracy J. Snell,0,0,2010-12-09 23:54:58+00:00,2011-04-24 09:57:42+00:00,I forgot to add these 3 tests to subversion so svn diff didn't pick them up. So here's three new test files.,"njiang:1291917923:2010-12-10T02:05:23.818+0000:1291917923:2010-12-10T02:05:23.818+0000:Applied the patch with thanks to Tracy.
davsclaus:1303610262:2011-04-24T09:57:42.959+0000:1303610262:2011-04-24T09:57:42.959+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3420,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,William Tam,William Tam,0,1,2010-12-09 18:53:15+00:00,2015-07-11 22:23:51+00:00,"Please see the cross reference in org.apache.camel.component.cxf.CxfMixedModeRouterTest.  We set the data format in the exchange properties.   If we want to support mixed mode in a same route more seamlessly, we should make the component detect data format based on message type to avoid burdening the users to reset the property back to match the from endpoint's data format.","njiang:1294271960:2011-01-06T07:59:20.720+0000:1294271960:2011-01-06T07:59:20.720+0000:@William,
I think the end user should be certain of what data format that he working with, as there are lots of auto converter can help the user to change the message body.
If the user don't know what exactly the message body is, they may hit other issues.

davsclaus:1436624631:2015-07-11T22:23:51.646+0000:1436624631:2015-07-11T22:23:51.646+0000:Old ticket and following willems adivce to leave as-is"
0,CAMEL-3419,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Marco Zapletal,0,0,2010-12-09 12:00:28+00:00,2011-04-24 09:58:14+00:00,"The timestamp property in the JpaTraceEventMessage does not specify a temporal type. This results in an exception using EclipseLink 2.1.0 (and maybe using other JPA frameworks, too). 


Using the annotation  @Temporal(TemporalType.TIMESTAMP) on timestamp should solve this issue.","davsclaus:1291871428:2010-12-09T13:10:28.217+0000:1291871428:2010-12-09T13:10:28.217+0000:Thanks for reporting.

trunk: 1043957.
davsclaus:1303610294:2011-04-24T09:58:14.964+0000:1303610294:2011-04-24T09:58:14.964+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3418,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-09 09:42:30+00:00,2011-04-24 09:58:21+00:00,"Add matchesMockWaitTime which uses the timeout value defined from the mock endpoints. This allows you to avoid having to specify a timeout value yourself, and have to import those pesky time unit classes (why are they not in java.lang) or that some new java.XXX package was automatic there so no need to import.","davsclaus:1291860103:2010-12-09T10:01:43.940+0000:1291860103:2010-12-09T10:01:43.940+0000:trunk: 1043877
davsclaus:1303610301:2011-04-24T09:58:21.804+0000:1303610301:2011-04-24T09:58:21.804+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3417,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-09 09:35:00+00:00,2011-04-24 09:58:12+00:00,"This allows notify builder and the likes to be fired after UoW which you most often want, as the UoW may do some after work, such as deleting files, or rows from a database that was successfully consumed.


This makes it easier to use NotifyBuilder in unit tests with components that uses UoW on completions.","davsclaus:1291860406:2010-12-09T10:06:46.742+0000:1291860406:2010-12-09T10:06:46.742+0000:trunk: 1043879
davsclaus:1303610292:2011-04-24T09:58:12.923+0000:1303610292:2011-04-24T09:58:12.923+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3416,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-09 06:02:14+00:00,2011-04-24 09:57:40+00:00,"See nabble
http://camel.465427.n5.nabble.com/Do-I-have-to-give-a-ScheduledExecutorService-instance-when-initializing-DefualtTimeoutMap-tp3298252p3298252.html","davsclaus:1291847875:2010-12-09T06:37:55.424+0000:1291847875:2010-12-09T06:37:55.424+0000:trunk: 1043844.
davsclaus:1303610260:2011-04-24T09:57:40.622+0000:1303610260:2011-04-24T09:57:40.622+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3415,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Aaron Mulder,Aaron Mulder,0,0,2010-12-09 00:09:38+00:00,2011-04-24 09:58:13+00:00,"It would be nice if you could use an expression returning an Iterable with a splitter.  It presently handles Iterator or Collection but not Iterable, which is a little challenging for expression languages that expect getters (so they can't invoke iterator() on an Iterable).","ammulder:1291831451:2010-12-09T02:04:11.023+0000:1291831451:2010-12-09T02:04:11.023+0000:Committed revision 1043819.
davsclaus:1303610293:2011-04-24T09:58:13.950+0000:1303610293:2011-04-24T09:58:13.950+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3414,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-12-08 22:08:54+00:00,2011-04-24 09:57:44+00:00,No Desc,"gnodet:1291817628:2010-12-08T22:13:48.682+0000:1291817628:2010-12-08T22:13:48.682+0000:Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
	A	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelProxyFactoryBean.java
	A	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelRouteContextFactoryBean.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/handler/CamelNamespaceHandler.java
	M	components/camel-blueprint/src/main/resources/org/apache/camel/blueprint/jaxb.index
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/OSGiBlueprintTestSupport.java
	A	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/TestProxySender.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-11.xml
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-12.xml
Committed r1043725

davsclaus:1303610264:2011-04-24T09:57:44.020+0000:1303610264:2011-04-24T09:57:44.020+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3413,Bug,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Ivanhoe Abrahams,0,0,2010-12-08 19:28:32+00:00,2010-12-09 17:04:23+00:00,"Hi 


I am trying to get the Java based RouteBuilder to work using the simple ""camel-osgi-example"" project.
I have downloaded and installed karaf 2.1.2
I also downloaded the latest 2.6-SNAPSHOT build of Camel (8 Dec 2010).


I proceeded to unzip the camel download an in Karaf I installed the ""camel-core"" and ""camel-blueprint"" bundles, (I also installed the servicemix jaxb-impl jar)


I then amended the ""camel-osgi-example"" project blueprint.xml file, so that it creates the example RouteBuilder as a bean, and the references the bean from the CamelContext.


Below is the bluerint.xml file contents,


<?xml version=""1.0"" encoding=""UTF-8""?>


<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.0.0""
	xmlns:tx=""http://aries.apache.org/xmlns/transactions/v1.0.0""
	xmlns:camel=""http://camel.apache.org/schema/blueprint""
	default-activation=""eager"" default-availability=""optional"">


	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<camel:routeBuilder ref=""routeBuilder""/>
<!--		<camel:route>-->
<!--			<camel:from uri=""timer://myTimer?fixedRate=true&period=2000"" />-->
<!--			<camel:bean ref=""myTransform"" method=""transform"" />-->
<!--			<camel:to uri=""log:ExampleRouter"" />-->
<!--		</camel:route>-->
	</camelContext>


	<bean id=""myTransform"" class=""org.apache.camel.example.osgi.MyTransform"">
		<property name=""prefix"" value=""SpringDSL"" />
	</bean>


</blueprint>


Now when I deploy this bundle in Karaf I encounter the following exception.


org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to initialize camel context factory
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:271)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:479)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:299)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:213)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_21]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_21]
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)[:1.6.0_21]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_21]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_21]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Bean[org.apache.camel.example.osgi.MyTransform@7439aca7] <<< in route: Route[[From[timer://myTimer?fixedRate=true&period=2000]] -> ... because of org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:773)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:654)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1559)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1348)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1257)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1235)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:79)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:72)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:269)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	... 11 more
Caused by: org.apache.camel.RuntimeCamelException: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:56)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:115)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.component.bean.BeanProcessor.<init>(BeanProcessor.java:60)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.BeanDefinition.createProcessor(BeanDefinition.java:170)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:403)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:174)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:770)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 22 more
Caused by: org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'CamelBeanParameterMappingStrategy' could be found
	at org.apache.aries.blueprint.container.DependencyGraph.getSortedRecipes(DependencyGraph.java:51)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:214)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:702)[7:org.apache.aries.blueprint:0.2.0.incubating]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)[52:org.apache.camel.camel-blueprint:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54)[51:org.apache.camel.camel-core:2.6.0.SNAPSHOT]
	... 28 more


Regards 
Ivanhoe","gnodet:1291817281:2010-12-08T22:08:01.992+0000:1291817281:2010-12-08T22:08:01.992+0000:This exception should already been fixed.  Could you try again tomorrow, or building camel yourself ?

FWIW, I'm actively working on the blueprint stuff to bring it on par with the spring support, so let me know if you have any more problems.
gnodet:1291818858:2010-12-08T22:34:18.225+0000:1291818858:2010-12-08T22:34:18.225+0000:Btw, I have a unit test case working already in trunk, so I think this problem has been solved already.  Just make sure to use the latest version.
ivanhoe.abrahams:1291885374:2010-12-09T17:02:54.749+0000:1291885374:2010-12-09T17:02:54.749+0000:Hi Guillaume

Sorry for taking so long, I can only do the nice OSGI stuff at home, at work people dont seem to see it as an elegant solution to the modularization problems we have. 
 
Yes I downloaded the latest snapshot version -> 2.6-SNAPSHOT,  and now the example works, also with the java-based RouteBuilder referenced from within the  camelcontext . Thanks

I will try to make a more complex example, maybe one with CXF and JMS components, to see if I hit any other issues.

Thanx

Regards
Ivanhoe
ivanhoe.abrahams:1291885463:2010-12-09T17:04:23.427+0000:1291885463:2010-12-09T17:04:23.427+0000:Referencing a Java based routeBuilder from within the CamelContext in blueprint now works."
0,CAMEL-3412,Task,Minor,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-12-08 17:18:57+00:00,2011-04-24 09:57:32+00:00,"Shrio 1.1.0 has been released.


A ServiceMix OSGi bundle has been created to fix the org.slf4j import statement.","hadrian:1291808676:2010-12-08T19:44:36.718+0000:1291808676:2010-12-08T19:44:36.718+0000:@JB, again a snapshot. We need to wait for the release.
jbonofre:1291808975:2010-12-08T19:49:35.818+0000:1291808975:2010-12-08T19:49:35.818+0000:ServiceMix bundles release is in preparation right now. I will submit to vote in few hours.

As soon as the vote is closed, I will resubmit new patches with released versions of the bundles.
davsclaus:1292304361:2010-12-14T13:26:01.132+0000:1292304361:2010-12-14T13:26:01.132+0000:trunk: 1049076.
davsclaus:1303610252:2011-04-24T09:57:32.374+0000:1303610252:2011-04-24T09:57:32.374+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3411,Task,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Hadrian Zbarcea,0,0,2010-12-08 16:43:05+00:00,2011-04-24 09:57:25+00:00,"There is a lot of unit test overlap and duplicated tests. Consolidating them would reduce the number of files, sizes of jars and more importantly reduce testing time.","davsclaus:1291798770:2010-12-08T16:59:30.370+0000:1291798770:2010-12-08T16:59:30.370+0000:Which duplicated test? Can you give some examples?

davsclaus:1291799662:2010-12-08T17:14:22.753+0000:1291799662:2010-12-08T17:14:22.753+0000:I think if we should cut down testing times we should look for tests which has Thread.sleep() and replace that with NotifyBuilder which can be used to ""wake up"" when a condition is meet. NotifyBuilder is a fairly new feature and thus wasn't avail at that time, so we most likely just used Thread.sleep.


davsclaus:1291860889:2010-12-09T10:14:49.802+0000:1291860889:2010-12-09T10:14:49.802+0000:I have cut down tests times 2-3 min on camel-core by using NotifyBuilder and reducing wait times in other tests.
davsclaus:1303610245:2011-04-24T09:57:25.836+0000:1303610245:2011-04-24T09:57:25.836+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3410,Task,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Jean-Baptiste Onofré,0,0,2010-12-08 12:38:48+00:00,2011-04-24 09:57:24+00:00,"To avoid to go on JBoss repository, Camel should use the Jain SIP API and RI provided by ServiceMix.","hadrian:1291801119:2010-12-08T17:38:39.811+0000:1291801119:2010-12-08T17:38:39.811+0000:Patch applied in r1043538. @JB, thanks for your excellent contributions and we'd like to see more of the same coming from you.
jbonofre:1291801660:2010-12-08T17:47:40.281+0000:1291801660:2010-12-08T17:47:40.281+0000:Thanks Hadrian :)

I have other patches in progress (new Camel components such as the camel-pdf one).
I just need some more times as I have lot of work on ServiceMix and Karaf too :)
davsclaus:1303610244:2011-04-24T09:57:24.537+0000:1303610244:2011-04-24T09:57:24.537+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3409,Task,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-12-08 11:38:29+00:00,2011-04-24 09:58:05+00:00,"As CXF 2.3.1 is released recently, it's time to upgrade the CXF version in Camel.",davsclaus:1303610285:2011-04-24T09:58:05.286+0000:1303610285:2011-04-24T09:58:05.286+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3408,New Feature,Major,2.5.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-08 11:03:08+00:00,2011-08-03 08:02:32+00:00,"Currently we rely on the Spring JMX annotations.


We should look into provide our own set of annotations to avoid the deps on Spring.


Apache CXF did this. Maybe if Apache created a common project we can leverage that.
All we need is just the annotations, to have a thin JAR which is stable.


The Spring JARs contains all kind of other stuff you dont need.
And some people want to be independent of Spring","davsclaus:1293766356:2010-12-31T11:32:36.640+0000:1293766356:2010-12-31T11:32:36.640+0000:Lets try to get this done in Camel 3.0 so we can drop using the spring JARs for its @ JMX annotations.
davsclaus:1309139867:2011-06-27T09:57:47.164+0000:1309139867:2011-06-27T09:57:47.164+0000:Moving forward to be less dependent on Spring in Camel. So we should have JMX without Spring JARs
davsclaus:1312329752:2011-08-03T08:02:32.835+0000:1312329752:2011-08-03T08:02:32.835+0000:Updated wiki page with details as well"
0,CAMEL-3407,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-12-08 11:00:55+00:00,2011-04-24 09:58:06+00:00,"To avoid to go on the restlet repository, I created a ServiceMix OSGi bundle for restlet 1.1.10.


Camel should use this bundle.","davsclaus:1292301947:2010-12-14T12:45:47.358+0000:1292301947:2010-12-14T12:45:47.358+0000:trunk: 1049067.
davsclaus:1292307868:2010-12-14T14:24:28.555+0000:1292307868:2010-12-14T14:24:28.555+0000:I had to rever this commit: 1049102.

The restlet JARs is already OSGi bundles. And they work out of the box.
The SMX bundle did not work.

We should prefer to use the OSGi bundles from the source, if they do the effort to create OSGi bundles.
And it would be nice if some Apache guy could promote and upload their JARs to central maven repo.
davsclaus:1303610286:2011-04-24T09:58:06.351+0000:1303610286:2011-04-24T09:58:06.351+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3406,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-12-08 10:21:27+00:00,2011-04-24 09:57:35+00:00,"To avoid to go to the JBoss maven repository, I created a ServiceMix OSGi bundle for javassist 3.9.0.GA.


Camel should use this bundle in the Karaf features descriptor.","hadrian:1291794644:2010-12-08T15:50:44.828+0000:1291794644:2010-12-08T15:50:44.828+0000:The following change will prevent us from releasing (the SNAPSHOT part):
+    <javassist-bundle-version>3.9.0.GA_1-SNAPSHOT</javassist-bundle-version>

This has to become a released version before we can apply this patch. Other than that it looks great, thanks for the contribution!



jbonofre:1291795018:2010-12-08T15:56:58.976+0000:1291795018:2010-12-08T15:56:58.976+0000:Thanks Hadrian for reviewing the patch.

I will submit the bundles to vote soon (tomorrow). I will keep you posted when they have been released.
davsclaus:1292300344:2010-12-14T12:19:04.622+0000:1292300344:2010-12-14T12:19:04.622+0000:trunk: 1049060.
davsclaus:1303610255:2011-04-24T09:57:35.829+0000:1303610255:2011-04-24T09:57:35.829+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3405,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-12-08 08:21:27+00:00,2011-04-24 09:57:44+00:00,"To avoid to go on the JBoss maven repository, I created a ServiceMix netty OSGi bundle.


This bundle could be used by Camel in the Karaf features descriptor.","davsclaus:1292299935:2010-12-14T12:12:15.394+0000:1292299935:2010-12-14T12:12:15.394+0000:The caveat doing this with the SMX bundles is that its then harder to try out and upgrade to never releases, as you just upgrade the version number.

Now you have to figure out how to add the jboss repo to have it easily download that new version.
OSGi gotta learn to use maven JARs out of the box, as is!!!
davsclaus:1292302324:2010-12-14T12:52:04.573+0000:1292302324:2010-12-14T12:52:04.573+0000:trunk: 1049070.
davsclaus:1303610264:2011-04-24T09:57:44.286+0000:1303610264:2011-04-24T09:57:44.286+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3404,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-12-08 07:50:42+00:00,2011-04-24 09:57:21+00:00,"As hawtbuf and hawtdb bundles are available on the central repo, it's not necessary to go to the fusesource one.","davsclaus:1291848884:2010-12-09T06:54:44.544+0000:1291848884:2010-12-09T06:54:44.544+0000:trunk: 1043847.
davsclaus:1303610241:2011-04-24T09:57:21.659+0000:1303610241:2011-04-24T09:57:21.659+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3403,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-08 07:44:26+00:00,2011-04-24 09:58:08+00:00,"See nabble
http://camel.465427.n5.nabble.com/InterceptSendToEndpoint-Http-Component-tp3296620p3296620.html","davsclaus:1291767370:2010-12-08T08:16:10.214+0000:1291767370:2010-12-08T08:16:10.214+0000:trunk: 1043330.
davsclaus:1303610288:2011-04-24T09:58:08.377+0000:1303610288:2011-04-24T09:58:08.377+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3402,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Jean-Baptiste Onofré,0,0,2010-12-08 07:05:10+00:00,2011-04-24 09:58:02+00:00,"In order to avoid to go on the googlecode maven repository, I provided a ServiceMix OSGi bundle for guice.


This bundle could be used by Camel in the Karaf features descriptor.","njiang:1291779328:2010-12-08T11:35:28.731+0000:1291779328:2010-12-08T11:35:28.731+0000:Applied the patch with thanks to JB.
davsclaus:1303610282:2011-04-24T09:58:02.859+0000:1303610282:2011-04-24T09:58:02.859+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3401,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,None,Unassigned,Moulliard Charles,0,0,2010-12-07 15:53:34+00:00,2011-10-28 13:23:41+00:00,"I try to use camel-jetty in a camel route usign LDAP authentication. The authentication mechanisms of Jetty works fine as I'm able to authenticate a LDAP user from the web page but the camel route is not called.


Here is the camel route



    <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

        <route>
            <from uri=""jetty:http://localhost:8080/services?handlers=securityHandler&amp;matchOnUriPrefix=true""/>
            <onException>
                <exception>java.lang.Exception</exception>
                <!-- we can set the redelivery policy here as well -->
                <redeliveryPolicy maximumRedeliveries=""1""/>
                <handled>
                    <constant>true</constant>
                </handled>
                <transform>
                    <simple>Due to something went wrong</simple>
                </transform>
                <setHeader headerName=""Exchange.HTTP_RESPONSE_CODE"">
                    <simple>500</simple>
                </setHeader>
            </onException>

            <bean ref=""responseBean""/>
        </route>
    </camelContext>




REMARK : the camel route works fine when authentication is disabled


and the error



14:56:31,587 | WARN  | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | /services: java.lang.NullPointerException
14:56:31,587 | DEBUG | 0-98 - /services | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.NullPointerException
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:489)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:113)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.handle(Server.java:347)[67:org.eclipse.jetty.server:7.1.6.v20100715]","njiang:1291725426:2010-12-07T20:37:06.456+0000:1291725426:2010-12-07T20:37:06.456+0000:@Charles
How did you setup the security handler to make the LDAP works for the webpage?
Camel manages the connector and handlers itself In the camel-jetty component, so you may need to some way to make sure the security handler is configured rightly. 
cmoulliard:1291765352:2010-12-08T07:42:32.192+0000:1291765352:2010-12-08T07:42:32.192+0000:@Willem,

Of course that the security is enabled and works !

{code}
    <bean id=""loginService"" class=""org.eclipse.jetty.plus.jaas.JAASLoginService"">
        <property name=""name"" value=""ldap""/>
        <property name=""loginModuleName"" value=""ldap""/>
        <property name=""roleClassNames"">
            <list>
                <value>org.apache.karaf.jaas.modules.RolePrincipal</value>
            </list>
        </property>
    </bean>

    <bean id=""constraint"" class=""org.eclipse.jetty.http.security.Constraint"">
        <property name=""name"" value=""BASIC""/>
        <property name=""roles"" value=""system""/>
        <property name=""authenticate"" value=""true""/>
    </bean>

    <bean id=""constraintMapping"" class=""org.eclipse.jetty.security.ConstraintMapping"">
        <property name=""constraint"" ref=""constraint""/>
        <property name=""pathSpec"" value=""/*""/>
    </bean>

    <bean id=""securityHandler"" class=""org.eclipse.jetty.security.ConstraintSecurityHandler"">
        <property name=""authenticator"">
            <bean class=""org.eclipse.jetty.security.authentication.BasicAuthenticator""/>
        </property>
        <property name=""constraintMappings"">
            <list>
                <ref bean=""constraintMapping""/>
            </list>
        </property>
        <property name=""loginService"" ref=""loginService""/>
        <property name=""strict"" value=""false""/>
    </bean>
{code}

I don t know if this is related or not but during camel starting up, the following WARN is generated I have checked the doc of Jetty and I don t know how to setup IdentityService for JAAS authentication

{code}
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   70 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | STARTED org.eclipse.jetty.plus.jaas.JAASLoginService@2433cf0f
18:38:41,711 | WARN  | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   40 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | FAILED ConstraintSecurityHandler@617ce686: java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
18:38:41,711 | DEBUG | ExtenderThread-4 | log                              | .eclipse.jetty.util.log.Slf4jLog   80 | 61 - org.eclipse.jetty.util - 7.1.6.v20100715 | EXCEPTION 
java.lang.IllegalStateException: No IdentityService for org.eclipse.jetty.security.authentication.BasicAuthenticator@455ef45a in ConstraintSecurityHandler@617ce686
	at org.eclipse.jetty.security.authentication.LoginAuthenticator.setConfiguration(LoginAuthenticator.java:37)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.SecurityHandler.doStart(SecurityHandler.java:333)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.security.ConstraintSecurityHandler.doStart(ConstraintSecurityHandler.java:229)[68:org.eclipse.jetty.security:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:92)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.server.Server.doStart(Server.java:242)[67:org.eclipse.jetty.server:7.1.6.v20100715]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:55)[61:org.eclipse.jetty.util:7.1.6.v20100715]
	at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:233)[73:org.apache.camel.camel-jetty:2.5.0]
	at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)[60:org.apache.camel.camel-http:2.5.0]
	at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:52)[60:org.apache.camel.camel-http:2.5.0]

{code}

cmoulliard:1292455460:2010-12-16T07:24:20.421+0000:1292455460:2010-12-16T07:24:20.421+0000:Problem solved with last JAAS module of Karaf and workaround exist (adding an IdentityService in the spring xml file)
metatech:1319779421:2011-10-28T13:23:41.523+0000:1319779421:2011-10-28T13:23:41.523+0000:The line to add is the following : 
<bean id=""identityService"" class=""org.eclipse.jetty.security.DefaultIdentityService""/>
"
0,CAMEL-3400,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Markus Rahm,0,0,2010-12-07 14:03:13+00:00,2011-04-24 09:58:08+00:00,"When using the XSLT Component with huge files it is necessary, to use output=file to not consume too much memory. Therefore an explicit filename hast to be set via header. The temp file doesn't get deleted afterwards so further logic needs to be done to not fill up the HDDs with tempfiles.
An improvement could be, to have an option to delete the tempfile after processing.
Furthermore could the java.io.tmpdir Property be default for the tempfile storage so no Header must be explicitly set.","davsclaus:1291964557:2010-12-10T15:02:37.300+0000:1291964557:2010-12-10T15:02:37.300+0000:trunk: 1044391.
davsclaus:1303610288:2011-04-24T09:58:08.217+0000:1303610288:2011-04-24T09:58:08.217+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3399,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-07 07:34:52+00:00,2011-04-24 09:58:15+00:00,"The management strategy should be


1) use ManagementAware if implemented on bean
2) use @ManagedResource if provided on bean
3) otherwise use default


Consider using fallback from 1->2 which is the current behavior. If we change this we will break backwards compatibility.
But in essence we should had Camel fail if (1) cannot be registered, and not just fallback to use (2) as it does today.","davsclaus:1291686561:2010-12-07T09:49:21.361+0000:1291686561:2010-12-07T09:49:21.361+0000:trunk: 1042949.
davsclaus:1303610295:2011-04-24T09:58:15.662+0000:1303610295:2011-04-24T09:58:15.662+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3398,Bug,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-12-06 22:20:15+00:00,2011-04-24 09:57:47+00:00,No Desc,"gnodet:1291649047:2010-12-06T23:24:07.903+0000:1291649047:2010-12-06T23:24:07.903+0000:This issue seems much more complicated than it seems.
The reason is that in order for the camel blueprint namespace handler to find the dependencies (such as components, etc...) so that the route will wait until components are available, the handler does initialize the CamelContextFactoryBean while the handler is parsing the xml.  The bad effect is that beans that are declared after the camel context won't be available yet in the blueprint metadata registry.

I need to investigate a work around for that.
gnodet:1291705036:2010-12-07T14:57:16.834+0000:1291705036:2010-12-07T14:57:16.834+0000:The drawback is that you can't inject an initialized CamelContext into something else, as the initialization is done after all singletons are built.
davsclaus:1303610267:2011-04-24T09:57:47.336+0000:1303610267:2011-04-24T09:57:47.336+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3397,Improvement,Major,2.5.0,Future,"
None
",Resolved,Won't Fix,Future,Hadrian Zbarcea,Hadrian Zbarcea,0,2,2010-12-06 17:58:51+00:00,2015-07-11 22:25:32+00:00,"Currently we only support in-only for file: and ftp: endpoints, in the sense that the content of the message is written to a file and no output gets produced.


It would be useful to support a scenario in which one could send an empty message to a file with a GET operation such that the content of the file is retrieved as an out instead of written to the file.","davsclaus:1291774307:2010-12-08T10:11:47.328+0000:1291774307:2010-12-08T10:11:47.328+0000:To leverage all the existing functionally on the consumer side, eg. what should happen with the file after the exchange has been processed? should it be deleted, moved, etc.

Then it would most likely to leverage a PollingConsumer for the GET command and retrieve the file that way. That will use the consumer under the hood.
Then you just check if the Exchange returned is null or not. If null then no filed existed.

And you will then have to transfer the synchronization from the returned Exchange to the existing Exchange, as it contains the on completion logic.
See the PollEnrich EIP pattern for similar details.
hadrian:1297158500:2011-02-08T17:48:20.965+0000:1297158500:2011-02-08T17:48:20.965+0000:I am not sure this has to offer the full functionality available via pollEnrich. That's the thing I would like to avoid, using a consumer to implement the producer.
davsclaus:1436624732:2015-07-11T22:25:32.177+0000:1436624732:2015-07-11T22:25:32.177+0000:The producer has too much logic that are bound for writing files. 
The EIP is to use a consumer to read files."
0,CAMEL-3396,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Incomplete,2.6.0,Claus Ibsen,Carlos Eduardo Leite,0,1,2010-12-06 17:28:04+00:00,2011-10-25 11:36:10+00:00,"I have an application where I used jms camel2.4 Websphere MQ after upgrading to version 2.5 of camel noticed that after some time the messages were no longer removed from the reply queue and following error occurs:


[12/4/10 13:46:23:173 WGT] 00000587 SystemOut     O INFO  2010-12-04 13:46:21,508 [DefaultMessageListenerContainer-56] org.apache.camel.component.jms.reply.PersistentQue


ueReplyManager$PersistentQueueMessageListenerContainer: Setup of JMS message listener invoker failed for destination 'OUT.QUEUE' - trying to recover. Cause: null


java.lang.StackOverflowError


        at com.ibm.disthub2.impl.matching.MatchingContext.fmtMsgAccess(MatchingContext.java:133)


        at com.ibm.disthub2.impl.matching.MatchingContext.getIdentifierValue(MatchingContext.java:121)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:145)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:174)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:174)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:175)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:175)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:175)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:175)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.eval(Evaluator.java:76)


        at com.ibm.disthub2.impl.matching.selector.Evaluator.evalInternal(Evaluator.java:175)


I wonder if this might be a error since the class: org.apache.camel.component.jms.reply.PersistentQueueReplyManager only exists in version 2.5.","rkettelerij:1291640459:2010-12-06T21:00:59.906+0000:1291640459:2010-12-06T21:00:59.906+0000:What Spring version do you use? The camel-jms component is build on Spring, in fact the message you're seeing (""Setup of JMS message listener invoker failed for destination....."") is logged by Spring.
davsclaus:1291697227:2010-12-07T12:47:07.280+0000:1291697227:2010-12-07T12:47:07.280+0000:Well its WebSphere that goes in some internal loop.

Do you got some more stacktrace or logging to help?
davsclaus:1293765142:2010-12-31T11:12:22.157+0000:1293765142:2010-12-31T11:12:22.157+0000:What's your route, can you post it here?


davsclaus:1295163002:2011-01-16T15:30:02.249+0000:1295163002:2011-01-16T15:30:02.249+0000:No response from Carlos."
0,CAMEL-3395,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-06 15:02:27+00:00,2011-04-24 09:57:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/Splitted-exchange-has-incorrect-correlation-ID-tp3289354p3289354.html","davsclaus:1291620548:2010-12-06T15:29:08.117+0000:1291620548:2010-12-06T15:29:08.117+0000:trunk: 1042676.
davsclaus:1303610263:2011-04-24T09:57:43.433+0000:1303610263:2011-04-24T09:57:43.433+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3394,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,1,2010-12-06 12:59:58+00:00,2012-11-23 13:52:30+00:00,"See nabble
http://camel.465427.n5.nabble.com/Cannot-handle-Exception-thrown-from-Splitter-Expression-tp3286043p3286043.html","davsclaus:1291616458:2010-12-06T14:20:58.573+0000:1291616458:2010-12-06T14:20:58.573+0000:trunk: 1042656.
davsclaus:1303610252:2011-04-24T09:57:32.220+0000:1303610252:2011-04-24T09:57:32.220+0000:Closing all resolved tickets from 2010 or older
chris889:1353649950:2012-11-23T13:52:30.347+0000:1353649950:2012-11-23T13:52:30.347+0000:{code}
Can it be that the issue here is back since version 2.9.4? 

The following route works ok in camel 2.9.3 -> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.

from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();

{code}
"
0,CAMEL-3393,Task,Minor,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-06 07:24:29+00:00,2011-04-24 09:58:03+00:00,Most likely an osgi wrapped bundle is needed by SMX,"jbonofre:1291683325:2010-12-07T08:55:25.336+0000:1291683325:2010-12-07T08:55:25.336+0000:I have created the ServiceMix bundle for Lucene 3.0.3.

I'm preparing the patch for Camel.
davsclaus:1291696766:2010-12-07T12:39:26.491+0000:1291696766:2010-12-07T12:39:26.491+0000:trunk: 1043010.
davsclaus:1303610283:2011-04-24T09:58:03.459+0000:1303610283:2011-04-24T09:58:03.459+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3392,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-06 06:26:05+00:00,2011-04-24 09:57:18+00:00,"The process DSL should wrap the processor if its not a Service so we can have it enlisted as a service and managed in JMX.


Also the ObjectName for Processor should use the id of the node instead of the classname.","davsclaus:1291593767:2010-12-06T08:02:47.509+0000:1291593767:2010-12-06T08:02:47.509+0000:trunk: 1042541.
davsclaus:1303610238:2011-04-24T09:57:18.414+0000:1303610238:2011-04-24T09:57:18.414+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3391,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-06 06:21:17+00:00,2011-04-24 09:57:16+00:00,"Quartz 1.8.4 has been released and its in maven central repo.


It looks like it now uses slf4j so we need to add some JARs to the pom.xml.


Also an osgi wrapped bundle is needed on the SMX side.","jbonofre:1291677649:2010-12-07T07:20:49.121+0000:1291677649:2010-12-07T07:20:49.121+0000:ServiceMix bundle for Quartz 1.8.4 is ready to be released.

I'm submitting the patch for Camel.
davsclaus:1291695962:2010-12-07T12:26:02.991+0000:1291695962:2010-12-07T12:26:02.991+0000:Jean thanks for the patch

trunk: 1043000.
davsclaus:1291696020:2010-12-07T12:27:00.037+0000:1291696020:2010-12-07T12:27:00.037+0000:Ah damn forgot about the slf4j, we most likely need to add that to the pom of camel-quartz.

On the osgi side Jean must make sure its in place as well.
davsclaus:1303610236:2011-04-24T09:57:16.991+0000:1303610236:2011-04-24T09:57:16.991+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3390,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Ivanhoe Abrahams,0,0,2010-12-05 09:40:53+00:00,2011-04-24 09:57:14+00:00,"I amended the camel-example-osgi project so as to use the Java RouteBuilder, the MyRouteBuilder class in that project


I changed the blueprint.xml file to the following


	<bean id=""routeBuilder"" class=""org.apache.camel.example.osgi.MyRouteBuilder"" />
	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
			<routeBuilder ref=""routeBuilder""/>
	</camelContext>


However nothing happens, no error message is displayed either.
If I leave the example in its original state, in other words using the xml-based dsl, then it works.
Maybe this is somehow related to the fact that packageScan does not work???


Regards 
Ivanhoe",davsclaus:1303610234:2011-04-24T09:57:14.384+0000:1303610234:2011-04-24T09:57:14.384+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3389,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-12-05 09:04:35+00:00,2011-04-24 09:57:15+00:00,"See more here
http://fusesource.com/forums/thread.jspa?threadID=2447&tstart=0","davsclaus:1291517852:2010-12-05T10:57:32.718+0000:1291517852:2010-12-05T10:57:32.718+0000:trunk: 1042312.
pchandler:1291624458:2010-12-06T16:34:18.264+0000:1291624458:2010-12-06T16:34:18.264+0000:Thanks, 
davsclaus:1303610235:2011-04-24T09:57:15.055+0000:1303610235:2011-04-24T09:57:15.055+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3388,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Aaron Mulder,0,0,2010-12-04 22:32:09+00:00,2011-04-24 09:57:58+00:00,"When you invoke a bean with a method signature like this in Camel 2.5.0/HEAD, the in and out message both are null (the ""Hello!"" value just disappears):



    public String doTest(@Body Object body, @Headers Map headers, @OutHeaders Map outHeaders) {
        return ""Hello!"";
    }




The same thing without the headers works OK:



    public String doTest(@Body Object body) {
        return ""Hello!"";
    }




See camel-core/src/test/java/org/apache/camel/component/bean/BeanWithHeadersAndBodyInject3Test.java","ammulder:1291473691:2010-12-04T22:41:31.619+0000:1291473691:2010-12-04T22:41:31.619+0000:Seems to happen when @OutHeaders is used?

{code:java}
    public String doTest(@OutHeaders Map headers) {
        return ""Hello!"";
    }
{code}

does not work but this does:

{code:java}
    public String doTest(@Headers Map headers) {
        return ""Hello!"";
    }
{code}

ammulder:1291479084:2010-12-05T00:11:24.338+0000:1291479183:2010-12-05T00:13:03.899+0000:The problem seems to lie in Pipeline.createNextExchange

It looks like if you use @OutHeaders then you force an out message to be created, which means in this pipeline method it will overwrite the in message (containing your bean return value) with the out message (containing only headers).

I'm not sure what the appropriate resolution is.  If it's an InOnly exchange then it probably doesn't make sense to overwrite the in message with the out message.  But just having the out headers you wrote disappear doesn't seem right either.

It seems like if you write to the out headers in a bean method you are trying to control what headers are present in the message after the bean method invocation completes.  Perhaps if it's an InOnly exchange then no out message should be generated by using @OutHeaders, it should just supply a new empty map, and after the invocation has completed, replace the in headers with the new map?

You might say that you shouldn't use @OutHeaders for an InOnly exchange, but in some cases (JMS, or a reusable bean component) you might not know whether it's an InOnly or InOut exchange just based on the route definition, and it doesn't seem like you should need different bean methods and a content based router that looks at the exchange pattern just because you always want to put some headers into the output message.
davsclaus:1291517160:2010-12-05T10:46:00.268+0000:1291517160:2010-12-05T10:46:00.268+0000:trunk: 1042310.

@OutHeaders is now only bound if MEP is out capable. If you send an InOnly then it will be null.
The @Body and other parameters is now not affected.
davsclaus:1303610278:2011-04-24T09:57:58.891+0000:1303610278:2011-04-24T09:57:58.891+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3387,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Christian Müller,0,0,2010-12-03 23:17:20+00:00,2013-05-02 02:29:34+00:00,Apache Velocity 1.7 is released with a few bug fixes: http://velocity.apache.org/engine/devel/changes-report.html,"muellerc:1291389804:2010-12-03T23:23:24.208+0000:1291389804:2010-12-03T23:23:24.208+0000:platforms/karaf/features/pom.xml still needs to be updated after [SMX4-691|https://issues.apache.org/jira/browse/SMX4-691] is resolved.
jbonofre:1291767538:2010-12-08T08:18:58.634+0000:1291767538:2010-12-08T08:18:58.634+0000:ServiceMix Velocity 1.7 bundle is available.
muellerc:1291814757:2010-12-08T21:25:57.110+0000:1291814757:2010-12-08T21:25:57.110+0000:In which repo? I can't find it in http://repository.apache.org/snapshots or http://repo2.maven.org/maven2 (the repos where Camel is looking for it)

{code}
Downloading: http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.velocity/1.7_1/org.apache.servicemix.bundles.velocity-1.7_1.jar
[INFO] Unable to find resource 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:jar:1.7_1' in repository central (http://repo1.maven.org/maven2)
org.apache.maven.artifact.resolver.ArtifactNotFoundException: Unable to download the artifact from any repository

Try downloading the file manually from the project website.

Then, install it using the command: 
    mvn install:install-file -DgroupId=org.apache.servicemix.bundles -DartifactId=org.apache.servicemix.bundles.velocity -Dversion=1.7_1 -Dpackaging=jar -Dfile=/path/to/file

Alternatively, if you host your own repository you can deploy the file there: 
    mvn deploy:deploy-file -DgroupId=org.apache.servicemix.bundles -DartifactId=org.apache.servicemix.bundles.velocity -Dversion=1.7_1 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]


  org.apache.servicemix.bundles:org.apache.servicemix.bundles.velocity:jar:1.7_1

from the specified remote repositories:
  apache.snapshots (http://repository.apache.org/snapshots),
  central (http://repo1.maven.org/maven2)
{code}
jbonofre:1291815172:2010-12-08T21:32:52.590+0000:1291815172:2010-12-08T21:32:52.590+0000:I've just deployed a snapshot:
http://repository.apache.org/snapshots/org/apache/servicemix/bundles/org.apache.servicemix.bundles.velocity/1.7_1-SNAPSHOT/org.apache.servicemix.bundles.velocity-1.7_1-20101208.213112-1.jar
muellerc:1291815910:2010-12-08T21:45:10.320+0000:1291815910:2010-12-08T21:45:10.320+0000:Thanks JB.
jbonofre:1291816666:2010-12-08T21:57:46.773+0000:1291816666:2010-12-08T21:57:46.773+0000:Be careful Christian, Velocity bundle is a snapshot for now.

The ServiceMix bundles release is in progress.

This task should be reopen. I will submit a new patch as soon as the bundles have been released.
muellerc:1291816875:2010-12-08T22:01:15.109+0000:1291816875:2010-12-08T22:01:15.109+0000:Will resolve this issue, if version 1.7_1 is available.
davsclaus:1303610306:2011-04-24T09:58:26.911+0000:1303610306:2011-04-24T09:58:26.911+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3386,New Feature,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,William Tam,William Tam,0,0,2010-12-03 23:10:09+00:00,2011-04-24 09:57:26+00:00,"So far, users can only send requests to REST/SOAP service endpoints that have been explicitly defined in Camel routes.  Sometimes, it is useful to override the destination address at runtime (eliminating the need of adding an explicit route or the need of knowing about ""future""  service endpoint deployment at the configuring time).  The assumption is these service endpoints are identical but running at different locations.  This feature can greatly simplify the route configuration if there are tens (or hundreds) of identical services to be invoked.


With the included patch, CxfProvider and CxfrsProvider will honor the CamelDestinationOverrideUrl header and use the value as the target address.","wtam:1291620573:2010-12-06T15:29:33.844+0000:1291620573:2010-12-06T15:29:33.844+0000:Committed to trunk revision 1042677.

njiang:1291728885:2010-12-07T21:34:45.681+0000:1291728885:2010-12-07T21:34:45.681+0000:Hi William

I'm sorry I just have a chance to review your patch. Here is my inputs:

1. You introduced a new header to override the target address CxfProvider and CxfRsProvider,  which is same as the CXF Message.ENDPOINT_ADDRESS does.
    You and find the unit test of override the target address here[1]
2. As CXF create the interceptor chain dynamically,  you don't need to create a new Client for each new address,  your solution is more like a Recipient List thing.

[1]https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java
wtam:1291730234:2010-12-07T21:57:14.181+0000:1291730234:2010-12-07T21:57:14.181+0000:Hi Willem,

Even the interceptor chain is created dynamically, it created based on the service endpoint configured in the route.  However, you point is well taken that we probably don't need to maintain client cache if we can set CXF's Exchange.ENDPOINT_ADDRESS in the Request Context to override the address.  I'll look into removing the client cache.

The new property in Camel was created with the intention that it can be reused by other component.   So, that probably will stay.

Thanks.
wtam:1291734241:2010-12-07T23:04:01.308+0000:1291734241:2010-12-07T23:04:01.308+0000:@Willem

I removed the client cache in CxfProducer as suggested.  The client factory bean cache in CxfrsProducer provider should probably stay.   There is no easy way to get at the request context.  If we find a way, It is probably a back door way.  The factory bean cache is light weight (not caching the client itself) and it uses SoftReference.  
Committed revision 1043223.

davsclaus:1303610246:2011-04-24T09:57:26.523+0000:1303610246:2011-04-24T09:57:26.523+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3385,Improvement,Major,None,None,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Daniel Kulp,0,0,2010-12-03 21:45:38+00:00,2011-04-24 09:57:27+00:00,There are a bunch of repository entries in the poms that aren't really needed.  Will attach a patch.,"dkulp:1291383990:2010-12-03T21:46:30.608+0000:1291383990:2010-12-03T21:46:30.608+0000:
This builds and tests cleanly with maven3 with an empty ~/.m2/repository as well.
hadrian:1291387018:2010-12-03T22:36:58.229+0000:1291387018:2010-12-03T22:36:58.229+0000:Testing patch with a clean local repository with both maven 2.2.1 and 3.0.1. Many thanks for the contribution.
hadrian:1291402685:2010-12-04T02:58:05.256+0000:1291402685:2010-12-04T02:58:05.256+0000:Committed in r1042087. Thanks for the patch. Keep them coming.
davsclaus:1291513670:2010-12-05T09:47:50.255+0000:1291513670:2010-12-05T09:47:50.255+0000:Reverted back to use jsch 0.1.44 which has important bug fixes for SFTP

trunk: 1042298.
davsclaus:1303610247:2011-04-24T09:57:27.786+0000:1303610247:2011-04-24T09:57:27.786+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3384,Task,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-12-03 03:34:53+00:00,2011-04-24 09:58:06+00:00,Apache pom 8 is out with a few enhancements and plugin upgrades.,"hadrian:1291353980:2010-12-03T13:26:20.003+0000:1291353980:2010-12-03T13:26:20.003+0000:Done. r1041801.
davsclaus:1303610286:2011-04-24T09:58:06.020+0000:1303610286:2011-04-24T09:58:06.020+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3383,New Feature,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Guillaume Nodet,1,2,2010-12-02 19:10:51+00:00,2011-06-11 08:03:54+00:00,"Being able to list CamelContext, routes, endpoints, display routes, start/stop them, etc...","jbonofre:1291706723:2010-12-07T15:25:23.260+0000:1291706723:2010-12-07T15:25:23.260+0000:Totally agree. I add it in my TODO, it will be really awesome to get these kinds of commands.
boday:1292415757:2010-12-15T20:22:37.517+0000:1292415757:2010-12-15T20:22:37.517+0000:is this a duplicate of CAMEL-743?
jbonofre:1305511215:2011-05-16T10:00:15.305+0000:1305511215:2011-05-16T10:00:15.305+0000:This patch contains the following commands:
- camel:list-contexts to display the Camel contexts available. A CamelContextCompleter provides completion for this command.
- camel:info-context to display detailed information about a Camel context. The output use ASCII rendering (bold, colored characters). This command also uses the CamelContextCompleter. The endpoints, components, routes, etc are displayed.
- camel:start-context starts a Camel Context and all routes. This command also uses the CamelContextCompleter.
- camel:stop-context stops a Camel Context and all routes. This command also uses the CamelContextCompleter.
- camel:list-routes displays all routes available. The Camel context argument is optional.
- camel:info-route displays detailed information about a route. It includes statistics (number of exchanges, uptime, etc) and dump the XML route definition also. This command uses a RouteCompleter for completion.
- camel:show-route displays the XML definition of a route. This commands also uses the RouteCompleter.
- camel:start-route start a specific route. This command also uses the RouteCompleter.
- camel:stop-route stop a specific route. This command also uses the RouteCompleter.

I plan to add command to manipulate route definition (set the delayer, etc), but this first patch could be useful :)
davsclaus:1305588479:2011-05-17T07:27:59.131+0000:1305588479:2011-05-17T07:27:59.131+0000:Sorry I am applying this patch to trunk now.
davsclaus:1305588856:2011-05-17T07:34:16.590+0000:1305588856:2011-05-17T07:34:16.590+0000:I get this split package when compiling
{code}
[WARNING] Warning building bundle org.apache.camel.karaf:org.apache.camel.karaf.commands:bundle:2.8-SNAPSHOT : Split package org/apache/karaf/util
Use directive -split-package:=(merge-first|merge-last|error|first) on Export/Private Package instruction to get rid of this warning
Package found in   [Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.util]
Reference from     /Users/davsclaus/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.2.1/org.apache.karaf.util-2.2.1.jar
Classpath          [Jar:., Jar:camel-core, Jar:commons-management, Jar:slf4j-api, Jar:org.apache.karaf.shell.console, Jar:jline, Jar:jansi, Jar:org.osgi.core, Jar:org.osgi.compendium, Jar:org.apache.karaf.jaas.modules, Jar:org.apache.karaf.jaas.config, Jar:org.apache.karaf.jaas.boot, Jar:org.apache.aries.blueprint, Jar:org.apache.aries.util, Jar:org.apache.aries.testsupport.unit, Jar:org.apache.aries.proxy.api, Jar:org.apache.felix.gogo.runtime, Jar:org.apache.karaf.util]
{code}
davsclaus:1305589005:2011-05-17T07:36:45.180+0000:1305589005:2011-05-17T07:36:45.180+0000:Thanks Jean for the patch. Committed in rev: 1104036.
jbonofre:1305589615:2011-05-17T07:46:55.986+0000:1305589615:2011-05-17T07:46:55.986+0000:I gonna add another patch to include commands into the camel feature.
jbonofre:1305592296:2011-05-17T08:31:36.680+0000:1305592296:2011-05-17T08:31:36.680+0000:Upgrade of the Camel features descriptor.
davsclaus:1305595058:2011-05-17T09:17:38.861+0000:1305595058:2011-05-17T09:17:38.861+0000:I renamed the artifact id to be aligned with the other camel artifcats. So its now: camel-karaf-commands
eg using dashes instead of dots.
davsclaus:1306636019:2011-05-29T10:26:59.145+0000:1306636019:2011-05-29T10:26:59.145+0000:Jean I added a ticket CAMEL-4029 to add a little documentation about this new karaf command.

We should then close this ticket as we are narrowing down on Camel 2.8 release.
You can then open a new ticket later if you have improvement patches etc to the karaf command.
davsclaus:1307750634:2011-06-11T08:03:54.950+0000:1307750634:2011-06-11T08:03:54.950+0000:Open new tickets if there is new features to the camel karaf command"
0,CAMEL-3382,New Feature,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-12-02 19:09:05+00:00,2011-04-24 09:57:12+00:00,Starting routes for example should generate such events.,davsclaus:1303610232:2011-04-24T09:57:12.947+0000:1303610232:2011-04-24T09:57:12.947+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3381,New Feature,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-12-02 19:08:18+00:00,2015-07-20 08:18:27+00:00,No Desc,davsclaus:1303610235:2011-04-24T09:57:15.197+0000:1303610235:2011-04-24T09:57:15.197+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3380,New Feature,Major,None,None,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Jean-Baptiste Onofré,0,0,2010-11-30 07:01:47+00:00,2011-04-24 09:57:12+00:00,"As we have now camel-quickfix component, a Karaf feature should be provided for this component.


I will provide a patch for that.","hadrian:1291703818:2010-12-07T14:36:58.552+0000:1291703818:2010-12-07T14:36:58.552+0000:Patch applied in r1043063. Many thanks for the contribution.
davsclaus:1303610232:2011-04-24T09:57:12.259+0000:1303610232:2011-04-24T09:57:12.259+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3379,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Paul Mietz Egli,0,0,2010-11-29 20:05:15+00:00,2011-04-24 09:57:33+00:00,"After spending my holiday weekend trying to get the Jetty MultipartFilter class to work properly in our application, I finally gave up and modified a local build of camel-jetty so we could use our own multipart filter implementation in place of the standard one.  This seemed generally useful, so here's a patch against trunk if you would like to put it in.","pegli:1291032386:2010-11-29T20:06:26.352+0000:1291032386:2010-11-29T20:06:26.352+0000:patch against trunk that allows custom multipart filters for camel-jetty
hadrian:1291040939:2010-11-29T22:28:59.635+0000:1291040939:2010-11-29T22:28:59.635+0000:@Paul, thanks for the contribution. Can we get a unit test for it as well?
njiang:1291086630:2010-11-30T11:10:30.349+0000:1291086630:2010-11-30T11:10:30.349+0000:@Paul, The patch looks good to me. Please create a unit test with a customer filter like this[1]
 https://svn.apache.org/repos/asf/camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/MultiPartFormTest.java
pegli:1291107732:2010-11-30T17:02:12.721+0000:1291107866:2010-11-30T17:04:26.794+0000:Here's a unit test based on MultiPartFormTest which sets a custom filter and tests to see if that filter was used for processing.  
pegli:1291107851:2010-11-30T17:04:11.835+0000:1291107851:2010-11-30T17:04:11.835+0000:Just wanted to note that setting the multipartFilterRef parameter on the endpoint will also set enableMultipartFilter to true, since it doesn't make sense to provide a custom filter implementation and turn it off at the same time.  This behavior should probably be noted in the docs.
hadrian:1291131618:2010-11-30T23:40:18.981+0000:1291131618:2010-11-30T23:40:18.981+0000:Patch committed with thanks to Paul (r1040823 and minor checkstyle fixes in r1040824).
Documentation updated in wiki.

Many thanks for the contribution.
davsclaus:1303610253:2011-04-24T09:57:33.081+0000:1303610253:2011-04-24T09:57:33.081+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3378,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-29 13:03:18+00:00,2011-04-24 09:57:30+00:00,"Currently you got to battle with JAXB to do this. But we should add method to do this in few lines of code.



        InputStream is = getClass().getResourceAsStream(""barRoute.xml"");
        RoutesDefinition routes = context.loadRoutesDefinition(is);
        context.addRouteDefinitions(routes.getRoutes());","davsclaus:1291007145:2010-11-29T13:05:45.576+0000:1291007145:2010-11-29T13:05:45.576+0000:trunk: 1040099.
davsclaus:1291008350:2010-11-29T13:25:50.526+0000:1291008350:2010-11-29T13:25:50.526+0000:https://cwiki.apache.org/confluence/display/CAMEL/Loading+routes+from+XML+files
davsclaus:1303610250:2011-04-24T09:57:30.094+0000:1303610250:2011-04-24T09:57:30.094+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3377,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-29 09:40:03+00:00,2011-04-24 09:58:04+00:00,"See nabble
http://camel.465427.n5.nabble.com/Integration-camel-and-spring-integration-tp3284105p3284105.html","davsclaus:1290997798:2010-11-29T10:29:58.549+0000:1290997798:2010-11-29T10:29:58.549+0000:trunk: 1040056.
davsclaus:1303610284:2011-04-24T09:58:04.584+0000:1303610284:2011-04-24T09:58:04.584+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3376,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Jean-Baptiste Onofré,0,0,2010-11-29 06:11:08+00:00,2011-04-24 09:57:48+00:00,"To avoid to go on the Springsource repo, I've created a ServiceMix Castor OSGi bundle.
We could use it in the Camel features descriptor.","davsclaus:1292300186:2010-12-14T12:16:26.826+0000:1292300186:2010-12-14T12:16:26.826+0000:trunk: 1049059.
davsclaus:1303610268:2011-04-24T09:57:48.835+0000:1303610268:2011-04-24T09:57:48.835+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3375,Improvement,Minor,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Carl Johan Erik Edstrom,Carl Johan Erik Edstrom,0,0,2010-11-28 19:49:23+00:00,2011-04-24 09:58:21+00:00,"The components that communicate over http are in many cases using 200 only as a valid response code.
Per spec responses < 208 are all valid and good responses.


Modules that need investigation


spring-ws,
http,
http4,
cxf,
restlet,
cometd,
jetty","rkettelerij:1290991814:2010-11-29T08:50:14.325+0000:1290991814:2010-11-29T08:50:14.325+0000:The spring-ws component doesn't do anything with HTTP response codes.
rkettelerij:1290991864:2010-11-29T08:51:04.127+0000:1290991881:2010-11-29T08:51:21.746+0000:Also don't forget the servlet component as it extends the HTTP component
davsclaus:1303610301:2011-04-24T09:58:21.968+0000:1303610301:2011-04-24T09:58:21.968+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3374,New Feature,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Steve Bate,0,1,2010-11-28 15:17:56+00:00,2011-04-24 09:58:00+00:00,"Also supporting configuration of QFJ ""forced shutdown"" option. Added related unit test and Spring context-based test. I will update the Wiki after the changes have been committed.","davsclaus:1290983116:2010-11-29T06:25:16.884+0000:1290983116:2010-11-29T06:25:16.884+0000:trunk: 1040021.

Thanks Steve for the patch.

I applied checkstyle on the patch and added camel-spring as dependency in pom.xml as you now uses Spring JARs in the component.
http://camel.apache.org/building.html

sbate:1291051786:2010-11-30T01:29:46.941+0000:1291051786:2010-11-30T01:29:46.941+0000:Thanks for committing the changes. I've updated the wiki page. I'll also study the build instructions and set up that environment before submitting future patches.
davsclaus:1303610280:2011-04-24T09:58:00.023+0000:1303610280:2011-04-24T09:58:00.023+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3343,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Boris Terzic,0,0,2010-11-17 21:16:22+00:00,2011-10-25 11:36:01+00:00,"In my usage of CXF-RS with Camel through the camel-cxf component I ran into a NullpointerException, the specific case is described in some detail on StackOverflow: http://stackoverflow.com/questions/4198461/why-do-i-get-a-nullpointerexception-when-invoking-the-cxf-rs-endpoint-of-a-camel 


Specifically I run into a NullpointerException:



Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.getContinuation(CxfRsInvoker.java:63)
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:52)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:89)
        ... 33 more




I was assuming I was misconfiguring something but didn't find any alternative way so I started digging in the camel-cxf source code.


I found that such a ""getContinuation"" method also exists for the org.apache.camel.component.cxf.CxfConsumer as well as for the CxfRsInvoker (where it was failing for me). However in the case of the CxfConsumer there is a guard on the ContinuationProvider so that if it is null, then null is returned:



return provider == null ? null : provider.getContinuation();




CxfRsInvoker does not have this guard, but it does have code to deal with a ""null"" Continuation at the calling site (line 52, in performInvocation). Therefore I assumed this was a bug and patched the guard into the CxfRsInvoker as well.


My program now seems to work correctly. I assume this is a bug.


For completeness sake, this is what getContinuation now looks like for me:



    private Continuation getContinuation(Exchange cxfExchange) {
        ContinuationProvider provider = 
            (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
        return provider == null ? null : provider.getContinuation();
    }","njiang:1290040601:2010-11-18T08:36:41.582+0000:1290040621:2010-11-18T08:37:01.936+0000:Yes, It's a bug of camel-cxfrs, I just committed a quick fix for it  and updated the CxfRsInvoker  to use CXF 2.3.0 continuation API.
Please check out the latest Camel 2.6-SNAPSHOT for verification.

boristerzic:1294057822:2011-01-03T20:30:22.987+0000:1294057822:2011-01-03T20:30:22.987+0000:Confirmed that this works with the current trunk 2.6-SNAPSHOT version of camel-cxf."
0,CAMEL-3342,Improvement,Major,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-17 12:49:26+00:00,2011-04-24 09:57:45+00:00,"As we can't support the continuation API of CXF 2.2.x and CXF 2.3.x at the same time, and there are some short comings of CXF 2.2.x continuation.
It's better to call the continuation API when working with CXF 2.3.x.","njiang:1290040701:2010-11-18T08:38:21.728+0000:1290040701:2010-11-18T08:38:21.728+0000:Also updated the CxfRsInvoker for it.
davsclaus:1303610265:2011-04-24T09:57:45.600+0000:1303610265:2011-04-24T09:57:45.600+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3341,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Caspar MacRae,0,1,2010-11-17 12:01:27+00:00,2011-04-24 09:57:21+00:00,"I've a very simple unit test (based on http://camel.apache.org/using-camelproxy.html) that works fine when using endpoint uri ""direct:start"" but fails with the following exception when using ""activemq:somequeue""


java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at org.apache.camel.component.bean.CamelInvocationHandler.invoke(CamelInvocationHandler.java:65)
	at $Proxy7.sayWordTo(Unknown Source)
	at net.earcam.cdosgi.remoteserviceadmin.CamelProxyTest.simpleArgTest(CamelProxyTest.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


Looks like the problem is simply that the producer isn't started so never creates a UuidGenerator (needed for the JMS Reply-To)


org.apache.camel.component.bean.ProxyHelper - lines 45 - 51, needs to start producer (for JmsProducer)
    /**



Creates a Proxy which sends PojoExchange to the endpoint.
     */
    @SuppressWarnings(""unchecked"")
    public static <T> T createProxy(Endpoint endpoint, ClassLoader cl, Class[] interfaces, MethodInfoCache methodCache) throws Exception 
{
        return (T) createProxyObject(endpoint, endpoint.createProducer(), cl, interfaces, methodCache);
    }



As a workaround, simply create the producer, start it and use the overloaded method createProxy that takes a producer parameter.","earcam:1289966530:2010-11-17T12:02:10.750+0000:1289966530:2010-11-17T12:02:10.750+0000:
Can't see any side effects of applying this.
davsclaus:1289987648:2010-11-17T17:54:08.365+0000:1289987648:2010-11-17T17:54:08.365+0000:Thanks for reporting and well spotted.

Yes the producer needs to be started beforehand.

The patch looks good.
However we can use ServiceHelper.startService to have it log the event that this service/producer is being started.

davsclaus:1290041170:2010-11-18T08:46:10.147+0000:1290041170:2010-11-18T08:46:10.147+0000:trunk: 1036350.

Thanks for reporting.
earcam:1290041343:2010-11-18T08:49:03.561+0000:1290041343:2010-11-18T08:49:03.561+0000:
Thanks Claus.
davsclaus:1303610241:2011-04-24T09:57:21.953+0000:1303610241:2011-04-24T09:57:21.953+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3340,Task,Critical,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Claus Ibsen,0,0,2010-11-15 08:17:48+00:00,2011-10-25 11:35:30+00:00,"According to Hadrian the release guide is outdated and needs to be updated. This is important to ensure its up to date


See nabble
http://camel.465427.n5.nabble.com/Re-svn-commit-r1034252-camel-trunk-apache-camel-pom-xml-td3262078.html#a3262078",
0,CAMEL-3339,New Feature,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Benjamin P. O'Day,Claus Ibsen,0,0,2010-11-14 11:04:08+00:00,2011-10-25 11:35:52+00:00,"When people run Camel standalone they may only use camel-core (and not camel-spring). And therefore they would like a Main class in camel-core JAR which works similar to the Main class from camel-spring. Must noticeable it should be able to start and then block until the app is terminated (the shutdown hook).


See for example nabble
http://camel.465427.n5.nabble.com/Filtering-an-xml-directory-tp3264230p3264230.html","davsclaus:1289703899:2010-11-14T11:04:59.670+0000:1289703899:2010-11-14T11:04:59.670+0000:Currently there is the MainSupport in org.apache.camel.util package which we should extend. The MainSupport lacks the shutdown hook and it got some abstract methods which you must implement. Having a simple to use Main class in camel-core is easier for Camel end users.
tjsnell:1290317853:2010-11-21T13:37:33.388+0000:1290317853:2010-11-21T13:37:33.388+0000:The maven plugin would also need a goal that supports it. 
davsclaus:1290325365:2010-11-21T15:42:45.513+0000:1290325365:2010-11-21T15:42:45.513+0000:You can use the generic mvn exec:java goal for starting any Java main class.
davsclaus:1293766649:2010-12-31T11:37:29.220+0000:1293766649:2010-12-31T11:37:29.220+0000:Anyone in the community wanna help?

Basically move some of the logic from the Main class in camel-spring to camel-core. So you can kinda startup Camel and have it keep running until you terminate the JVM. (eg the shutdown hook etc.)


boday:1294491371:2011-01-08T20:56:11.678+0000:1294491371:2011-01-08T20:56:11.678+0000:I'm looking into this...
boday:1294495550:2011-01-08T22:05:50.000+0000:1294501066:2011-01-08T23:37:46.683+0000:question...given that the CamelNamespaceHandler code is in camel-spring, how would the camel-core Main class create an application context?  Are you wanting to move/replicate this namespace handling code in camel-core?  Or should I try to remove the need tor the namespace handling altogether and just create the CamelContext manually?
boday:1294504253:2011-01-09T00:30:53.374+0000:1294504253:2011-01-09T00:30:53.374+0000:Alright, I think I answered my own question.  Here is a stab at this assuming we are manually creating a context w/o spring support...

run with: mvn exec:java -Dexec.mainClass=""org.apache.camel.Main""

davsclaus:1294541513:2011-01-09T10:51:53.252+0000:1294541513:2011-01-09T10:51:53.252+0000:trunk: 1056911.

Thanks Ben for the patch. I move the hangup stuff into MainSupport so we can reuse it between core and spring
davsclaus:1294543420:2011-01-09T11:23:40.067+0000:1294543420:2011-01-09T11:23:40.067+0000:Added documentation
https://cwiki.apache.org/confluence/display/CAMEL/Running+Camel+standalone+and+have+it+keep+running"
0,CAMEL-3338,Improvement,Minor,2.5.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2010-11-14 08:41:00+00:00,2013-08-08 12:00:28+00:00,"See nabble
http://camel.465427.n5.nabble.com/Singleton-Pattern-extended-to-Consumer-Producer-can-be-contradictory-to-Endpoint-singleton-setting-td3263948.html#a3263948","bibryam:1328539902:2012-02-06T22:51:42.685+0000:1328539902:2012-02-06T22:51:42.685+0000:I wonder what needs to be done for this issue, it seems an easy change?
davsclaus:1369531472:2013-05-26T09:24:32.553+0000:1369531472:2013-05-26T09:24:32.553+0000:Yeah we can try to get this into Camel 2.12."
0,CAMEL-3337,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Bryan Keller,0,0,2010-11-13 19:39:31+00:00,2011-04-24 09:58:20+00:00,"My app is having memory issues due to the use of an aggregator. My app is fairly straightforward. It reads from a CSV using streaming, tokenizes it by line, passes the result to a processor, aggregates the result, then puts this on a JMS queue. Here is the route definition (for Spring):



<route>
  <from ""file:in"" />
  <split streaming=""true"">
    <tokenize token=""\n"" regex=""false"" />
    <unmarshal><csv /></unmarshal>
    <bean ref=""myBean"" method=""translate"" />
    <aggregate strategyRef=""myAggregationStrategy"">
    <correlationExpression><constant>true</constant></correlationExpression>
    <completionTimeout><simple>1000</simple></completionTimeout>
    <completionSize><simple>100</simple></completionSize>
    <to uri=""activemq:queue:myQueue""/>   		
  </aggregate>
  </split>
</route>




The problem happens when the consumer of ""myQueue"" is not as fast as the file reading and parsing. With a slow consumer, ActiveMQ will eventually throttle the producer so the message queue doesn't use up all memory and/or disk space.


As messages are passed to the aggregator, it internally submits jobs to an executor which will then put the message in the queue. This executor uses an unbounded queue. If the message producer has been throttled, then the process jobs cannot queue the messages quickly enough, and the executor's queue will continue to back up until all memory is used.


As a workaround, I am thinking I could implement my own executor service which is synchronous or at least blocks when the queue size reaches a certain size. I haven't yet firgured out how to configure this however.","bryanck:1289648899:2010-11-13T19:48:19.973+0000:1289648899:2010-11-13T19:48:19.973+0000:The actual lines of code at issue are:

AggregateProcessor.java, line 387 - job submit to the executor
AggregateDefinition.java, line 156 - creation of the executor with an unbounded queue
ExecutorServiceHelper.java, line 142 - call to Executors.newSingleThreadExecutor()

(Note that newSingleThreadExecutor() is called is when not using parallel processing.)

Executors.newSingleThreadExecutor(), creates an Executor that uses a single worker thread operating off an unbounded queue, which is the problem.
bryanck:1289655860:2010-11-13T21:44:20.271+0000:1289655860:2010-11-13T21:44:20.271+0000:An additional problem with the job queue is that if the server goes down, everything in this queue is obviously lost, as it is not persistent or anything.

In any event, I was able to work around this issue by creating my own executor service that is synchronous (i.e. the execute() method merely calls Runnable.run()), and has no job queue. I set the aggregator to use it by using the ""executorServiceRef"" attribute.
davsclaus:1289691784:2010-11-14T07:43:04.781+0000:1289691784:2010-11-14T07:43:04.781+0000:Not a bug as its how its designed. Its after all memory based by default. 

But we should look into offering an option to limit the task queue.

davsclaus:1289691848:2010-11-14T07:44:08.292+0000:1289691848:2010-11-14T07:44:08.292+0000:You can persist using HawtDB
http://camel.apache.org/hawtdb

Or implement your own persistent store. Some one in the community is working on a JDBC based store.
davsclaus:1289692065:2010-11-14T07:47:45.428+0000:1289692065:2010-11-14T07:47:45.428+0000:Yeah you should be able to set the parallel option and provide it a custom executor service which has a task queue with a limited size
http://camel.apache.org/threading-model.html


davsclaus:1289692507:2010-11-14T07:55:07.561+0000:1289692507:2010-11-14T07:55:07.561+0000:If you set core pool size and max pool size to 0 then Camel will created a synchronous queue, eg using the same thread.
{code:xml}
 <threadPoolProfile id=""myAgg"" poolSize=""0"" maxPoolSize=""0""/>
{code}

And then refer to it from the aggregator
{code:xml}
<aggregate strategyRef=""myAggregationStrategy"" executorServiceRef=""myAgg"">
...
{code}
bryanck:1289695860:2010-11-14T08:51:00.628+0000:1289695860:2010-11-14T08:51:00.628+0000:I noticed in the code about setting pool size to 0 will create a synchronous queue, however there is a check to ensure it is set to something greater than zero and thus fails. Also, I tried creating a synchronous queue in my own executor and it didn't work.

Finally, a persistent store will not solve the problem with data loss. The persistent store is used for the aggregation cache, NOT the job queue. If you have 500 completion jobs queued with the executor, they will be lost on server shutdown even with persistence.

davsclaus:1289696539:2010-11-14T09:02:19.880+0000:1289696539:2010-11-14T09:02:19.880+0000:There is a {{RecoverableAggregationRepository}} which can resubmit failed / uncompleted tasks.
Its documented a bit on the hawtdb wiki page.

Camel in Action book chapter 8 goes much more deeper with this.
davsclaus:1289697093:2010-11-14T09:11:33.512+0000:1289697093:2010-11-14T09:11:33.512+0000:Yeah I have found the bug with the pool size 0 to create the synchronous queue. Will get that fixed.

You need to use the caller runs policy to have it piggy back and use the caller thread if the queue is full
{code}
        if (rejectedExecutionHandler == null) {
            rejectedExecutionHandler = new ThreadPoolExecutor.CallerRunsPolicy();
        }
{code}
davsclaus:1289697365:2010-11-14T09:16:05.425+0000:1289697365:2010-11-14T09:16:05.425+0000:The problem with the synchronous queue is that you still have a consumer thread, and when its not avail to process the task, it will use the caller runs policy. So you may actually end up using 2 threads at the same time (consumer + caller) and thus it can still be _parallel_.

A possible solution is to introduce a new rejectedExecutionHandler which just blocks until the consumer thread is avail.

Or write a custom ExecutorService which is not thread pool based but uses the caller thread all the time.
bryanck:1289697634:2010-11-14T09:20:34.854+0000:1289697848:2010-11-14T09:24:08.648+0000:Right. I created an executor doesn't use a queue, it just calls Runnable.run() so it is synchronous.
{code}
public class SynchronousExecutorService extends AbstractExecutorService {

    @Override
    public void execute(final Runnable job) {
        job.run();
    }

etc...

}
{code}
davsclaus:1289697709:2010-11-14T09:21:49.852+0000:1289697709:2010-11-14T09:21:49.852+0000:trunk: 1034962.

Fixed creating the thread pool with 0 in core  and max pool size as the synchronous thread pool
davsclaus:1289711300:2010-11-14T13:08:20.895+0000:1289711300:2010-11-14T13:08:20.895+0000:trunk: 1034992.
davsclaus:1303610300:2011-04-24T09:58:20.881+0000:1303610300:2011-04-24T09:58:20.881+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3336,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,S. Ali Tokmen,0,0,2010-11-12 09:44:24+00:00,2010-11-12 12:35:06+00:00,"Hello


I have run into two issues using camel-quartz with old versions of Quartz (Quartz 1.6 and 1.7):


1. With Quartz 1.6, at shutdown, I get a message:



2010-11-12 02:41:22,965 DefaultShutdownStrategy.shutdownNow Error occurred while shutting down route: Consumer[quartz://importAnnuaireAgentsTimer?cron=0+30+2+*+*+%3F]. This exception will be ignored.
java.lang.NoSuchMethodError: org.quartz.SchedulerMetaData.isJobStoreClustered()Z
	at org.apache.camel.component.quartz.QuartzComponent.isClustered(QuartzComponent.java:278)
	at org.apache.camel.component.quartz.QuartzComponent.removeJob(QuartzComponent.java:238)
	at org.apache.camel.component.quartz.QuartzEndpoint.removeTrigger(QuartzEndpoint.java:84)
	at org.apache.camel.component.quartz.QuartzEndpoint.consumerStopped(QuartzEndpoint.java:221)
	at org.apache.camel.component.quartz.QuartzConsumer.doStop(QuartzConsumer.java:44)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:98)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:122)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:99)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:235)
	at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:386)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)




2. Starting of a delayed timer fails. I think warning the user would be a better idea.


Patch is attached (it basically catches the NoSuchMethodError exceptions and acts accordingly)","alitokmen:1289526306:2010-11-12T09:45:06.734+0000:1289526306:2010-11-12T09:45:06.734+0000:Attached patch generated against the CAMEL Quartz trunk rev. 1031971
davsclaus:1289527737:2010-11-12T10:08:57.857+0000:1289527737:2010-11-12T10:08:57.857+0000:There is no guarantee that we support older versions of quartz. The component is build with 1.8.x.
davsclaus:1289528469:2010-11-12T10:21:09.306+0000:1289528469:2010-11-12T10:21:09.306+0000:trunk: 1034337.
davsclaus:1289528481:2010-11-12T10:21:21.562+0000:1289528481:2010-11-12T10:21:21.562+0000:Thanks for the patch.
alitokmen:1289535213:2010-11-12T12:13:33.545+0000:1289535213:2010-11-12T12:13:33.545+0000:Hi Claus

Thank you for having applied the patch. I know CAMEL is not supposed to support all versions of Quartz, but the patch being simple and useful for some use cases I did provide it.

Cheers
davsclaus:1289536050:2010-11-12T12:27:30.629+0000:1289536050:2010-11-12T12:27:30.629+0000:Yeah the patch is great. Just that it should not have been categories as a bug :)
alitokmen:1289536506:2010-11-12T12:35:06.271+0000:1289536506:2010-11-12T12:35:06.271+0000:You're probably right... :) Thank you"
0,CAMEL-3335,Bug,Major,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Sergey Zhemzhitsky,0,1,2010-11-12 09:12:54+00:00,2011-04-24 09:58:16+00:00,"Here is code from the org.apache.camel.component.jpa.JpaConsumer class


protected String getEntityName(Class<?> clazz) {


    Entity entity = clazz.getAnnotation(Entity.class);


    // Check if the property name has been defined for Entity annotation
    if (!entity.name().equals("""")) 

{ // line 307
        return entity.name();
    }

 else 

{
        return null;
    }


}


When trying to consume entities from jpa endpoint exception occurs


java.lang.NullPointerException
	at org.apache.camel.component.jpa.JpaConsumer.getEntityName(JpaConsumer.java:307)
	at org.apache.camel.component.jpa.JpaConsumer.createQueryFactory(JpaConsumer.java:287)
	at org.apache.camel.component.jpa.JpaConsumer.getQueryFactory(JpaConsumer.java:196)
	at org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:83)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:82)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:80)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:78)
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:79)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)


This is because there is no @Entity annotation and persistence is configured by means of orm.xml.


To fix the problem change line 307 to
if (entity != null && !entity.name().equals(""""))","davsclaus:1289527675:2010-11-12T10:07:55.844+0000:1289527675:2010-11-12T10:07:55.844+0000:Thanks for reporting

trunk: 1034325.
szhemzhitsky:1289528200:2010-11-12T10:16:40.143+0000:1289528200:2010-11-12T10:16:40.143+0000:You're welcome
davsclaus:1303610296:2011-04-24T09:58:16.276+0000:1303610296:2011-04-24T09:58:16.276+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3334,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Aaron Mulder,0,0,2010-11-12 08:48:47+00:00,2012-11-23 13:58:01+00:00,"BeanShell 2.0b5 has the JSR-223 integration, but it implements Compilable, when in fact it throws an exception if you call compile.


Camel calls compile for any language that implements Compilable, therefore you get an exception every time your route has BeanShell in it.


I notice the BeanShell tests are commented-out in camel-script.


Also, the Camel Wiki page for BeanShell is stupendously vague on actual usage.","davsclaus:1289525574:2010-11-12T09:32:54.376+0000:1289525574:2010-11-12T09:32:54.376+0000:Thanks for the patch and updating the wiki. Keep it up.

trunk: 1034306.
davsclaus:1303610246:2011-04-24T09:57:26.126+0000:1303610246:2011-04-24T09:57:26.126+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3333,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-12 08:30:47+00:00,2011-04-24 09:57:20+00:00,"See nabble
http://camel.465427.n5.nabble.com/Multicast-inside-splitter-tp3261288p3261288.html","davsclaus:1289627045:2010-11-13T13:44:05.617+0000:1289627045:2010-11-13T13:44:05.617+0000:trunk: 1034759.
davsclaus:1303610240:2011-04-24T09:57:20.896+0000:1303610240:2011-04-24T09:57:20.896+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3332,Improvement,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Aaron Mulder,0,0,2010-11-11 22:09:25+00:00,2011-04-24 09:57:17+00:00,"For instance, it would be nice if createApplicationContext() could return a http://static.springsource.org/osgi/docs/1.2.1/api/org/springframework/osgi/context/support/OsgiBundleXmlApplicationContext.html","davsclaus:1289520995:2010-11-12T08:16:35.839+0000:1289520995:2010-11-12T08:16:35.839+0000:We will do a special camel-osgi-test component for unit testing with OSGi
ammulder:1289523805:2010-11-12T09:03:25.498+0000:1289523805:2010-11-12T09:03:25.498+0000:That's OK if you want yet another copy of all the test support classes...

But what if there's some other reason to want a different kind of Spring context?  Nothing in Camel appears to depend on it being an AbstractXMLApplicationContext.
njiang:1289524783:2010-11-12T09:19:43.361+0000:1289524783:2010-11-12T09:19:43.361+0000:Let the createApplicationContext return the AbstractRefreshableConfigApplicationContext that is acceptable :) .
davsclaus:1289525640:2010-11-12T09:34:00.487+0000:1289525640:2010-11-12T09:34:00.487+0000:Ah okay yeah that could be a good idea, I had the hunt that you wanted some osgi support in camel-test. Which is being provided in a new separate test kit.
davsclaus:1289525991:2010-11-12T09:39:51.436+0000:1289525991:2010-11-12T09:39:51.436+0000:trunk: 1034309.

The winner is the {{AbstractApplicationContext}} class
davsclaus:1303610237:2011-04-24T09:57:17.411+0000:1303610237:2011-04-24T09:57:17.411+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3331,New Feature,Minor,2.5.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Aaron Mulder,0,0,2010-11-11 21:53:17+00:00,2011-04-24 09:57:23+00:00,"This came up for an application where it's inconvenient to access the filesystem and desirable to embed as much as possible in the Camel routes.  In particular, to write an inline XSLT sheet instead of referring to an external one.


The XsltComponent (among many others) uses a Spring ResourceLoader to load resources, and while it supports things like classpath: or file: or http: there's no way to cause it to just read the rest of the URI and make that a String and use it as the resource.


I'm looking for something like this:


<to uri=""xslt:string:<xsl:transform ... >"" />


In practice you need to turn < and > into & lt; and & gt; and do something with ? (to avoid problems when it looks for ?option=value), but stuff like that aside, it appears to work to extend DefaultResourceLoader to use a ByteArrayResource based on the remainder of the URI","davsclaus:1289521112:2010-11-12T08:18:32.146+0000:1289521112:2010-11-12T08:18:32.146+0000:It would be better if you can provide the template in a header, like what velocity can do.

See section _Dynamic templates_
http://camel.apache.org/velocity
ammulder:1289523898:2010-11-12T09:04:58.268+0000:1289523898:2010-11-12T09:04:58.268+0000:That would be another option.

FWIW, it seemed to be agreed on IRC that it would be a good idea to support inline strings in the default ResourceLoader for all components.
davsclaus:1289524906:2010-11-12T09:21:46.111+0000:1289524906:2010-11-12T09:21:46.111+0000:Its best to make the components behave the same and have similar options/features.
davsclaus:1289524941:2010-11-12T09:22:21.214+0000:1289524941:2010-11-12T09:22:21.214+0000:And having a XSLT template which tend to get big and contains a lot of XML elements, which you then need to escape just complicates matters.
davsclaus:1289525025:2010-11-12T09:23:45.314+0000:1289525025:2010-11-12T09:23:45.314+0000:We could also introduce a ref so you can look a bean in the registry to use as the template

{code}
bean id=""xxx"" class=""com.foo.MyTemplate"">

<to uri=""xstl:ref:xxx""/>
{code}

ammulder:1289546960:2010-11-12T15:29:20.820+0000:1289546960:2010-11-12T15:29:20.820+0000:To give more background:

In this system the user does things in the UI, and as a result, Camel routes are generated automatically and executed.  As well, there's a strong preference for avoiding any files on disk.  But also, writing beans would be best avoided since it invokes a compile phase (unless the bean is specifically built beforehand and added to a generic ""bean library"" that can be called on four the routes).  So when the user clicks a button, the app assembles a Camel Spring XML in memory and loads it.

Since it's all automated, it's not so onerous to put an escaped XSL into a URI even though it looks a little ugly when done by hand.  It may desirable to do that for other things too, it's just that XSLT is the first we've come across so far.

It would be possible to instead construct the route with a setHeader(constant(XSLT)) type arrangement, but we'd also need to change the URI processing for the XSLT component for it to read an XSL out of a header, right?  And then you'd probably want to clear that header to avoid propagating that header to your outbound endpoint.  Plus, that solves it only for the one component, whereas the proposal to accept inline strings in the URI would be more generally applicable.

It would be possible to create a bean where you you just paste the XSLT into a property in the bean definition and it spits it back when its method is invoked.  But if you're going to be changing the URI processing anyway (to support beans), why make it the case that the user always has to write some code (the bean) in order to take advantage of it?  Instead of just letting them put the configuration data right there in the URI.
massfords:1289549352:2010-11-12T16:09:12.431+0000:1289549352:2010-11-12T16:09:12.431+0000:I can't imagine anyone configuring the xslt endpoint with the template embedded (and escaped) within the endpoint URI. I understand your use case where you're dynamically constructing the spring config. As a result it's trivial to embed the escaped values with code. However, this is not something you'd see in practice in other use cases.

My preference would be for a feature that worked well in both environments. I think the Dynamic templates from Velocity is a reasonable approach. Supporting a reference would also be good. 
hadrian:1289552477:2010-11-12T17:01:17.340+0000:1289552477:2010-11-12T17:01:17.340+0000:@Mark. I agree.
davsclaus:1303610243:2011-04-24T09:57:23.204+0000:1303610243:2011-04-24T09:57:23.204+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3330,Improvement,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Tracy J. Snell,0,0,2010-11-11 19:55:51+00:00,2011-04-24 09:58:06+00:00,"Write an example using the camel-jmx component.


I have this done just cleaning it up and writing some notes and will submit it shortly.","tjsnell:1289512780:2010-11-12T05:59:40.591+0000:1289512780:2010-11-12T05:59:40.591+0000:Here's the diff for camel-example-jmx

I didn't provide an ant task to run the test. Just mvn camel:run. Should I add it? My ant is very rusty and I bailed.
davsclaus:1289521453:2010-11-12T08:24:13.119+0000:1289521453:2010-11-12T08:24:13.119+0000:Its fine to omit the ANT stuff. We can look at that later.

However the patch seems to have some un complete OSGi features stuff.
The example doesn't have to be an OSGi bundle either.

At first just create an example that you can run from the command line. No need to make it more complex.
tjsnell:1289537177:2010-11-12T12:46:17.019+0000:1289537177:2010-11-12T12:46:17.019+0000:Ugh! I meant to pull the OSGi stuff. I'll do that.

By run from the command line do you mean maven or should I add a main to it so it can be started just using java from the command line?

Also, should I start a documentation page for it? If so I'll just start it in a comment here until we want to move it to confluence.

Thanks.
davsclaus:1289612502:2010-11-13T09:41:42.290+0000:1289612502:2010-11-13T09:41:42.290+0000:Yeah its fine with maven from command like. Just as you can do for the other examples.

Either run
mvn camel:run

Or some uses Jetty (if they are web based)
mvn jetty:run

davsclaus:1289612553:2010-11-13T09:42:33.626+0000:1289612553:2010-11-13T09:42:33.626+0000:If you want a full blown example then documentation should be here in a child page
http://camel.apache.org/examples

And then you can refer to this example from the JMX component page, so people can see how it works.
tjsnell:1289839681:2010-11-16T00:48:01.812+0000:1289839681:2010-11-16T00:48:01.812+0000:Cleaned up a bit. camel mvn:run works fine.
tjsnell:1289839804:2010-11-16T00:50:04.340+0000:1289839804:2010-11-16T00:50:04.340+0000:I've started working on the documentation page:

[http://camel.apache.org/jmx-component-example.html]

When the code gets into trunk I'll add a link from [http://camel.apache.org/examples] (it's already there just hidden with show-to)


njiang:1289968958:2010-11-17T12:42:38.652+0000:1289968958:2010-11-17T12:42:38.652+0000:Applied patch with thanks to Tracy.

tjsnell:1289980843:2010-11-17T16:00:43.110+0000:1289980843:2010-11-17T16:00:43.110+0000:Added the documentation page to the examples.html page. I'll add some more details to the docs.
davsclaus:1290039811:2010-11-18T08:23:31.503+0000:1290039811:2010-11-18T08:23:31.503+0000:trunk: 1036339.

Polished the example and fixed CS.
davsclaus:1303610286:2011-04-24T09:58:06.714+0000:1303610286:2011-04-24T09:58:06.714+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3329,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Georg Henzler,0,0,2010-11-11 15:38:40+00:00,2011-04-24 09:57:31+00:00,"When retrieving many users from an LDAP server, an LDAP error is thrown  ""Ldap error 4 Size Limit Exceeded"". This can sometimes be configured on the LDAP server, but in my case the limit is fixed and set to 1000 (ALUI Directory Server doesn't seem to support changing this setting).


As a workaround PagedResultsControl in combination with LdapContext could be used if a parameter ""pageSize"" is given in the endoint url.","joed:1289463532:2010-11-11T16:18:52.478+0000:1289463532:2010-11-11T16:18:52.478+0000:Junit test from apacheDS

http://svn.apache.org/viewvc/directory/apacheds/tags/1.5.5/server-integ/src/test/java/org/apache/directory/server/operations/search/PagedSearchIT.java?view=markup
henzlerg:1289463909:2010-11-11T16:25:09.571+0000:1289463909:2010-11-11T16:25:09.571+0000:ALUI Directory Server != Apache Directory Server


davsclaus:1289521197:2010-11-12T08:19:57.044+0000:1289521197:2010-11-12T08:19:57.044+0000:Georg I assume you are working on a patch for this?
henzlerg:1289523902:2010-11-12T09:05:02.310+0000:1289523902:2010-11-12T09:05:02.310+0000:Yes, you can assign it to me! 
henzlerg:1289731055:2010-11-14T18:37:35.497+0000:1289731055:2010-11-14T18:37:35.497+0000:Patch for the camel-ldap component that introduces two new options:

|| Name ||	Default 	||Description||
|pageSize |	no paging used |  When specified the ldap module uses paging to retrieve all results (most LDAP Servers throw an exception when trying to retrieve more than 1000 entries in one query). To be able to use this a LdapContext (subclass of DirContext) has to be passed in as ldapServerBean (otherwise an exception is thrown)   |
|returnedAttributes| depends on LDAP Server (could be all or none) | Comma-separated list of attributes that should be set in each entry of the result |
davsclaus:1289780930:2010-11-15T08:28:50.618+0000:1289780930:2010-11-15T08:28:50.618+0000:trunk: 1035175.

Thanks for the patch and documentation.
davsclaus:1303610251:2011-04-24T09:57:31.399+0000:1303610251:2011-04-24T09:57:31.399+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3328,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Lars Gohlke,0,1,2010-11-11 14:25:35+00:00,2011-04-24 09:58:20+00:00,"simply request reply with ActiveMQ 5.4.1 using a queue is failing in v2.5 instead is running in v.2.4



 
import static org.junit.Assert.assertTrue;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RequestReplyFailureTest
{
	private Endpoint			endpoint;
	private Producer			producer;
	private DefaultCamelContext	camel;

	@Before
	public void before() throws Exception
	{
		String brokerUrl = ""tcp://localhost:61616"";
		camel = new DefaultCamelContext();
		camel.addComponent(""jms"", JmsComponent.jmsComponentAutoAcknowledge(new ActiveMQConnectionFactory(brokerUrl)));

		final String url = ""jms:queue:test"";
		endpoint = camel.getEndpoint(url);

		camel.addRoutes(new RouteBuilder()
		{
			@Override
			public void configure() throws Exception
			{
				from(url).process(new Processor()
				{
					@Override
					public void process(Exchange exchange) throws Exception
					{
						// simply set 'pong' as response
						exchange.getOut().setBody(""pong"");
					}
				});
			}
		});

		System.out.println(camel.getVersion());
		camel.start();

		producer = endpoint.createProducer();
	}

	@After
	public void after() throws Exception
	{
		camel.stop();
	}

	/**
	 * @throws Exception
	 */
	@Test
	public void testInOut() throws Exception
	{
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOut);
		exchange.getIn().setBody(""ping"");
		producer.process(exchange);

		assertTrue(""pong"".equals(exchange.getOut().getBody()));
	}","lkwg:1289457552:2010-11-11T14:39:12.998+0000:1289457552:2010-11-11T14:39:12.998+0000:formatting
davsclaus:1289459567:2010-11-11T15:12:47.264+0000:1289459567:2010-11-11T15:12:47.264+0000:What error do you get? Can you post your stacktrace.

The unit test works fine for me, however I use the Camel Test Kit for the unit test as it will be part of camel-jms unit tests.
davsclaus:1289459641:2010-11-11T15:14:01.685+0000:1289459641:2010-11-11T15:14:01.685+0000:See this unit test which works
http://svn.apache.org/viewvc?rev=1033961&view=rev
lkwg:1289459826:2010-11-11T15:17:06.692+0000:1289459826:2010-11-11T15:17:06.692+0000:sry, this is my stacktrace

java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:140)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.impl.DefaultAsyncProducer.process(DefaultAsyncProducer.java:37)
	at de.lgohlke.services.simulate.RequestReplyFailureTest.testInOut(RequestReplyFailureTest.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


lkwg:1289463402:2010-11-11T16:16:42.812+0000:1289463402:2010-11-11T16:16:42.812+0000:ur posted test runs in both versions,

what is different or wrong?

I dont see the point.
davsclaus:1289463507:2010-11-11T16:18:27.984+0000:1289463507:2010-11-11T16:18:27.984+0000:Lars, you need to start your producer before you can use it

{code}
producer = endpoint.createProducer();
producer.start();
{code}

Likewise you should stop it when you are done using it, eg when you test is done
lkwg:1289466057:2010-11-11T17:00:57.150+0000:1289466057:2010-11-11T17:00:57.150+0000:ok, this solved my issue;

Maybe you can put a hint beside the NPE that, the producer should be started before using.

thx anyway
davsclaus:1289466920:2010-11-11T17:15:20.212+0000:1289466920:2010-11-11T17:15:20.212+0000:trunk: 1034004.

camel-jms now throws an exception if it hasnt been started tell the end user that it must be started before it can be used
davsclaus:1303610300:2011-04-24T09:58:20.753+0000:1303610300:2011-04-24T09:58:20.753+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3327,Task,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-11 10:56:47+00:00,2011-10-25 11:35:27+00:00,"As CXF 2.3.0 is using JAXWS 2.2, JAXB 2.2 , JARS 1.1 and Jetty 7, need to update the karaf feature files for it.","njiang:1290041046:2010-11-18T08:44:06.103+0000:1290041046:2010-11-18T08:44:06.103+0000:Updated the camel-cxf feature to use JAXWS 2.2 , JAXRS 1.1 and Jetty7 with release version.
Need updated the JAXB 2.2 when servicemix released the wrap bundle.

davsclaus:1293156147:2010-12-24T10:02:27.497+0000:1293156147:2010-12-24T10:02:27.497+0000:Is this not already done? If not please work on this so we would be ready to do a 2.6 release soon
njiang:1293501065:2010-12-28T09:51:05.929+0000:1293501065:2010-12-28T09:51:05.929+0000:Updated apache-camel feature to use JAXB 2.2.x.
njiang:1294106952:2011-01-04T10:09:12.759+0000:1294704386:2011-01-11T08:06:26.535+0000:If we use servicemix spec 1.6.0 of the JAXB API 2.2 bundle, we will get this error.
{code}
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from URL 
[bundle://50.0:0/org/apache/camel/itest/osgi/servlet/CamelServletContext.xml]; nested exception is java.lang.NoSuchMethodError: 
javax.xml.bind.ContextFinder.find(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/Map;)Ljavax/xml/bind/JAX
BContext;
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412)
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
...
Caused by: java.lang.NoSuchMethodError: javax.xml.bind.ContextFinder.find(Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/Map;)Ljavax/xml/bind/JAXBContext;
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:412)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:375)
        at org.apache.camel.spring.handler.CamelNamespaceHandler.createJaxbContext(CamelNamespaceHandler.java:187)
        at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:174)
        at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:257)

{code}

Servicemix spec 1.7-SNAPSHOT fixed this issue.
davsclaus:1294556718:2011-01-09T15:05:18.417+0000:1294556718:2011-01-09T15:05:18.417+0000:Willem when 1.7 spec is in central maven repo then updated and fix this ticket.
njiang:1294704358:2011-01-11T08:05:58.679+0000:1294704358:2011-01-11T08:05:58.679+0000:Just updated the servicemix spec to 1.7.0."
0,CAMEL-3326,Task,Minor,None,2.6.0,"
None
",Closed,Duplicate,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-11 10:37:52+00:00,2011-04-24 09:57:11+00:00,Wonder if we need an OSGi bundle of it for Karaf?,"davsclaus:1289443100:2010-11-11T10:38:20.011+0000:1289443100:2010-11-11T10:38:20.011+0000:Looks like it
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/
davsclaus:1293766425:2010-12-31T11:33:45.226+0000:1293766425:2010-12-31T11:33:45.226+0000:We have upgraded
davsclaus:1303610231:2011-04-24T09:57:11.968+0000:1303610231:2011-04-24T09:57:11.968+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3325,New Feature,Major,2.6.0,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Mark Ford,0,1,2010-11-10 16:45:33+00:00,2011-05-20 06:04:00+00:00,"The current version of the camel-jmx component allows for the forwarding of JMX notifications from an mbean into the route. In addition to receiving notifications, a user may want to monitor an mbean. The consumer currently doesn't have any special handling for monitor beans. The user would need to write a few lines of Java code to create their monitor and deploy it. Once deployed, the monitor bean could use the objectName for the monitor bean in conjunction with the camel-jmx component to forward events into the route.


For example:



CounterMonitor monitor = new CounterMonitor();
monitor.addObservedObject(makeObjectName(""simpleBean""));
monitor.setObservedAttribute(""MonitorNumber"");
monitor.setNotify(true);
monitor.setInitThreshold(1);
monitor.setGranularityPeriod(500);
registerBean(monitor, makeObjectName(""counter""));
monitor.start();




The proposed new feature is to add a new type of consumer that automatically creates and registers a monitor bean for the specified objectName and attribute. Additional endpoint attributes would be added to allow the user to specify the attribute to monitor, type of monitor to create, and any other required properties. The code snippet above could be condensed into a set of endpoint properties. The consumer would use these properties to create the CounterMonitor, register it, and then subscribe to its changes.


For example:



from(""jmx:platform?objectDomain=myDomain&objectName=simpleBean&monitorType=counter&observedAttribute=MonitorNumber&initThreshold=1&granularityPeriod=500"").to(""mock:sink"");




New endpoint attributes:





property
type
applies to
description


 monitorType 
enum
 all 
  one of counter, guage, string 


 observedAttribute 
string
 all 
 the attribute being observed 


 granualityPeriod 
long
 all 
 granularity period (in millis) for the attribute being observed. As per JMX, default is 10 seconds 


 initThreshold 
number
 counter 
 initial threshold value 


 offset 
number
 counter 
 offset value 


 modulus 
number
 counter 
 modulus value 


 differenceMode 
 boolean 
 counter, gauge 
 true if difference should be reported, false for actual value 


 notifyHigh 
 boolean 
 gauge 
 high notification on/off switch 


 notifyLow 
 boolean 
 gauge 
 low notification on/off switch 


 highThreshold 
 number 
 gauge 
 threshold for reporting high notification 


 lowThreshold 
 number 
 gauge 
 threshold for reporting low notificaton 


 notifyDiffer 
 boolean 
 string 
 true to fire notification when string differs 


 notifyMatch 
 boolean 
 string 
 true to fire notification when string matches 


 stringToCompare 
 string 
 string 
 string to compare against the attribute value 





Other considerations



If the mbeanserver is remote, then the JMXRemote library or similar solution is required to register the monitor bean
name of the monitor bean should be derived from the observed object
if the observed bean is unregistered then the route should send some notification or exception through its route to signal the processors","massfords:1293705998:2010-12-30T18:46:38.251+0000:1293705998:2010-12-30T18:46:38.251+0000:The patch provides for all of the functionality described in the issue when connecting to the platform server. A remote server is problematic since it requires a library (JMXRemote) on both the client and the server and I don't think it's worth pursuing at this time.

Some notes for commits:
main src
- JMXConsumer: extracted add/removeNotificationListener methods to allow for override
- JMXEndpoint: added new uri properties for monitor type consumer
- JMXMonitorConsumer: new type of consumer that adds a monitor bean to monitor the specified attribute
- JMXUriBuilder: added monitor type properties

tests
- new tests for monitor consumer
- extracted various assertions to MockEndpointFixture
- added new property to test SimpleBean to allow for counter and gauge monitors
rkettelerij:1293710572:2010-12-30T20:02:52.654+0000:1293710572:2010-12-30T20:02:52.654+0000:Hi Mark,

Looks like a really useful addition to the JMX component you wrote. Just one minor comment, I think the dependency on {{commons-lang}} can be avoided. There's a {{isEmpty()}} method in the {{ObjectHelper}} class available in {{camel-core}}.

Richard
massfords:1293711334:2010-12-30T20:15:34.613+0000:1293711334:2010-12-30T20:15:34.613+0000:Good suggestion by Richard to remove the commons-lang dependency. I'm using the ObjectHelper now for isEmpty checks.


davsclaus:1293757054:2010-12-31T08:57:34.822+0000:1293757054:2010-12-31T08:57:34.822+0000:Christian do you have time to look into this patch?
muellerc:1293766006:2010-12-31T11:26:46.931+0000:1293766006:2010-12-31T11:26:46.931+0000:Claus, I think I'm busy the next two weeks with [CAMEL-3468|https://issues.apache.org/jira/browse/CAMEL-3468], [CAMEL-3472|https://issues.apache.org/jira/browse/CAMEL-3472], [CAMEL-3471|https://issues.apache.org/jira/browse/CAMEL-3471], [CAMEL-3470|https://issues.apache.org/jira/browse/CAMEL-3470] and [CAMEL-3311|https://issues.apache.org/activemq/browse/CAMEL-3311].
Depending of the release date for Camel 2.6 and the priority of the other issues (may be I can reschedule [CAMEL-3471|https://issues.apache.org/jira/browse/CAMEL-3471] and/or other issues), I can do it in the remaining time. But I'm probably not an JMX expert... ;-)
massfords:1304573579:2011-05-05T13:32:59.669+0000:1304573579:2011-05-05T13:32:59.669+0000:Is this issue waiting for anything further from me? 
muellerc:1304601895:2011-05-05T21:24:55.363+0000:1304601895:2011-05-05T21:24:55.363+0000:No, unfortunately I'm the bottle neg...
I will try to have a second look on it next week.
muellerc:1305806306:2011-05-19T19:58:26.579+0000:1305806306:2011-05-19T19:58:26.579+0000:Committed r1125078
Thanks to Mark Ford for this contribution
muellerc:1305807088:2011-05-19T20:11:28.629+0000:1305807088:2011-05-19T20:11:28.629+0000:Mark, do you have time in the near future to help with the [JMX|http://camel.apache.org/jmx.html] documentation of this new feature?
If you do not have the karma to edit the wiki page, you can find [here|http://camel.apache.org/how-do-i-edit-the-website.html] how to get it.
muellerc:1305807206:2011-05-19T20:13:26.195+0000:1305807206:2011-05-19T20:13:26.195+0000:And of cures, we have to add it to the [Camel 2.8.0 release notes|https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.8.0+Release].
massfords:1305807821:2011-05-19T20:23:41.083+0000:1305807821:2011-05-19T20:23:41.083+0000:I have time and karma. I'll look at updating the documentation within the next day or so. 
massfords:1305825604:2011-05-20T01:20:04.873+0000:1305825604:2011-05-20T01:20:04.873+0000:I updated both. Can you review and let me know of any necessary edits? 
muellerc:1305842588:2011-05-20T06:03:08.955+0000:1305842588:2011-05-20T06:03:08.955+0000:It looks good for me."
0,CAMEL-3324,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-10 11:47:06+00:00,2011-04-24 09:57:33+00:00,"This makes it much easier when running multiple Camel applications in the same JVM. You may have assigned a duplicate name in the CamelContext but in different WARs / bundles etc. Then previously Camel would not be able to start the 2nd application as the 1st had already taking the MBean name.


Instead Camel should auto remedy this by computing a free name to use instead.


For example


WAR-a



<camelContext id=""foo"">
...
</camelContext>




WAR-b



<camelContext id=""foo"">
...
</camelContext>




Now what happens is that



WAR-a : DEBUG Registered MBean with objectname: org.apache.camel:context=localhost/foo,type=context,name=""foo""
...
WAR-b: WARN This CamelContext(foo) will be registered using the name: foo-2 due to clash with an existing name already registered in MBeanServer.
WAR-b DEBUG Registered MBean with objectname: org.apache.camel:context=localhost/foo-2,type=context,name=""foo""




As you can see WAR-b has the MBean name reassigned to foo-2 to avoid the clash.","davsclaus:1289364819:2010-11-10T12:53:39.879+0000:1289364819:2010-11-10T12:53:39.879+0000:trunk: 1033440.
davsclaus:1289371928:2010-11-10T14:52:08.707+0000:1289371928:2010-11-10T14:52:08.707+0000:trunk: 1033501.

 OSGi will prepend the bundle id in the JMX name so they are nicely sorted by bundle id in the JMX consoles.
davsclaus:1303610253:2011-04-24T09:57:33.813+0000:1303610253:2011-04-24T09:57:33.813+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3323,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-09 07:44:33+00:00,2011-04-24 09:57:10+00:00,"The Camel manual lacks all the data formats.
We should include them just like we do with the components.",davsclaus:1303610230:2011-04-24T09:57:10.456+0000:1303610230:2011-04-24T09:57:10.456+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3322,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-09 04:54:44+00:00,2011-04-24 09:58:08+00:00,No Desc,davsclaus:1303610288:2011-04-24T09:58:08.502+0000:1303610288:2011-04-24T09:58:08.502+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3321,Bug,Major,"2.4.0, 2.5.0",2.6.0,"
None
",Closed,Fixed,2.6.0,Christian Müller,Vincenzo Cacurri,0,0,2010-11-08 11:29:11+00:00,2011-04-24 09:58:15+00:00,"When an SMSC sends the DeliverSm with the short message data inside the message_payload field (in the OptionalParameter) the method
createSmppMessage(DeliverSm deliverSm) in the SmppBinding class raises a nullPointerException at the following line:


else {
            smppMessage.setBody(String.valueOf(new String(deliverSm.getShortMessage(),  


this happen because deliverySm.getShortMessage return null","davsclaus:1289193574:2010-11-08T13:19:34.411+0000:1289193574:2010-11-08T13:19:34.411+0000:Is it possible to create an unit test which demonstrates this bug?
muellerc:1289210723:2010-11-08T18:05:23.111+0000:1289210723:2010-11-08T18:05:23.111+0000:Will have a look on it this evening...

Christian
muellerc:1289230159:2010-11-08T23:29:19.676+0000:1289230159:2010-11-08T23:29:19.676+0000:Vincenzo, thanks for reporting the issue and providing the patch.
davsclaus:1303610295:2011-04-24T09:58:15.299+0000:1303610295:2011-04-24T09:58:15.299+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3320,Task,Minor,None,,"
None
",Closed,Fixed,None,Christian Müller,Christian Müller,0,0,2010-11-07 15:22:45+00:00,2011-04-24 09:57:04+00:00,Page mailing-lists has invalid links to Nabble.,"muellerc:1289114985:2010-11-07T15:29:45.806+0000:1289114985:2010-11-07T15:29:45.806+0000:I updated the page.
davsclaus:1303610224:2011-04-24T09:57:04.096+0000:1303610224:2011-04-24T09:57:04.096+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3319,Bug,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0, 2.4.0, 2.5.0",None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-07 04:23:55+00:00,2011-04-24 09:58:10+00:00,"Here is the mail thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/camel-cxf-exception-when-parsing-cxf-schemaLocation-element-td3253254.html#a3253254","njiang:1289147075:2010-11-08T00:24:35.133+0000:1289147075:2010-11-08T00:24:35.133+0000:Applied the patch into trunk in reversion 1032256 
davsclaus:1303610290:2011-04-24T09:58:10.453+0000:1303610290:2011-04-24T09:58:10.453+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3318,Improvement,Minor,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Steve Bate,0,0,2010-11-06 12:46:07+00:00,2011-10-21 04:53:12+00:00,"The SLF4J (needed to use log4j) was missing from the 2.5 implementation of the Quickfix component. The modifications support this and allow custom QFJ plugins (log, message store, message factory) to be explicitly specified on the component (e.g., injected by Spring IoC).


I'll update the documentation wiki after the patch is applied (with a note that the updates will be released in 2.6).","davsclaus:1289025045:2010-11-06T14:30:45.107+0000:1289025045:2010-11-06T14:30:45.107+0000:patch applied to trunk: 1032071.
davsclaus:1289040385:2010-11-06T18:46:25.359+0000:1289040385:2010-11-06T18:46:25.359+0000:Steve please update the wiki documentation.
davsclaus:1289091746:2010-11-07T09:02:26.748+0000:1289091746:2010-11-07T09:02:26.748+0000:Documentation is updated. Thanks Steve.
davsclaus:1303610280:2011-04-24T09:58:00.632+0000:1303610280:2011-04-24T09:58:00.632+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3317,Bug,Major,2.5.0,2.7.0,"
None
",Closed,Cannot Reproduce,2.7.0,Claus Ibsen,Glenn Moss,0,0,2010-11-05 18:25:28+00:00,2011-10-25 11:35:35+00:00,"When running Camel when the HawtDB file does not exist, and is created on startup we see errors like this after running for a short time:



2010-11-30 11:51:21.649587500 [DefaultMessageListenerContainer-1] WARN  org.apache.camel.component.hawtdb.HawtDBFile - Error executing work Removing key [24053] will do rollback.
2010-11-30 11:51:21.649589500 org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.649589500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 11:51:21.649590500 	at org.fusesource.hawtdb.internal.page.Extent.freeLinked(Extent.java:234)
2010-11-30 11:51:21.649601500 	at org.fusesource.hawtdb.internal.page.Extent.pagesLinked(Extent.java:190)
2010-11-30 11:51:21.649602500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.pagesLinked(AbstractStreamPagedAccessor.java:77)
2010-11-30 11:51:21.649602500 	at org.fusesource.hawtdb.internal.page.Batch.performDeferredUpdates(Batch.java:184)
2010-11-30 11:51:21.649603500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.storeBatches(HawtTxPageFile.java:599)
2010-11-30 11:51:21.649605500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.flush(HawtTxPageFile.java:522)
2010-11-30 11:51:21.649605500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:163)
2010-11-30 11:51:21.649606500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 11:51:21.649606500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.remove(HawtDBAggregationRepository.java:179)
2010-11-30 11:51:21.649609500 	at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:352)
2010-11-30 11:51:21.649610500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:264)
2010-11-30 11:51:21.649610500 	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:185)
2010-11-30 11:51:21.649612500 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
2010-11-30 11:51:21.649613500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.649613500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.649613500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.649615500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.649616500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.649616500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.649629500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.649629500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.649630500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.649630500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.649632500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.649633500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.649633500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
2010-11-30 11:51:21.649633500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
2010-11-30 11:51:21.649634500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.649635500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.649636500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.649636500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.649638500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:198)
2010-11-30 11:51:21.649639500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:152)
2010-11-30 11:51:21.649640500 	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
2010-11-30 11:51:21.649641500 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
2010-11-30 11:51:21.649642500 	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:145)
2010-11-30 11:51:21.649642500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:120)
2010-11-30 11:51:21.649644500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:91)
2010-11-30 11:51:21.649645500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:100)
2010-11-30 11:51:21.649645500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.649647500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.649648500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.649648500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.649649500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.649650500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.649651500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.649651500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.649652500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.649653500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.649654500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.649654500 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)
2010-11-30 11:51:21.649657500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.649657500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.649658500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.649658500 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
2010-11-30 11:51:21.649668500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.649668500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
2010-11-30 11:51:21.649669500 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
2010-11-30 11:51:21.649669500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
2010-11-30 11:51:21.649671500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
2010-11-30 11:51:21.649672500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
2010-11-30 11:51:21.649675500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
2010-11-30 11:51:21.649676500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
2010-11-30 11:51:21.649677500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
2010-11-30 11:51:21.649678500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
2010-11-30 11:51:21.649679500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
2010-11-30 11:51:21.649681500 	at java.lang.Thread.run(Thread.java:662)
2010-11-30 11:51:21.650683500 [DefaultMessageListenerContainer-1] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID:a511-qa.boi.kount.net-43748-1289356219750-4:78314:-1:1:1. Exhausted after delivery attempt: 1 caught: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.650685500 org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.650686500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 11:51:21.650690500 	at org.fusesource.hawtdb.internal.page.Extent.freeLinked(Extent.java:234)
2010-11-30 11:51:21.650691500 	at org.fusesource.hawtdb.internal.page.Extent.pagesLinked(Extent.java:190)
2010-11-30 11:51:21.650691500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.pagesLinked(AbstractStreamPagedAccessor.java:77)
2010-11-30 11:51:21.650692500 	at org.fusesource.hawtdb.internal.page.Batch.performDeferredUpdates(Batch.java:184)
2010-11-30 11:51:21.650694500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.storeBatches(HawtTxPageFile.java:599)
2010-11-30 11:51:21.650694500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.flush(HawtTxPageFile.java:522)
2010-11-30 11:51:21.650697500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:163)
2010-11-30 11:51:21.650697500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 11:51:21.650698500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.remove(HawtDBAggregationRepository.java:179)
2010-11-30 11:51:21.650698500 	at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:352)
2010-11-30 11:51:21.650700500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:264)
2010-11-30 11:51:21.650700500 	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:185)
2010-11-30 11:51:21.650701500 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
2010-11-30 11:51:21.650713500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.650713500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.650714500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.650715500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.650718500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.650718500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.650719500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.650719500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.650721500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.650721500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.650722500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.650722500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.650724500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
2010-11-30 11:51:21.650724500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
2010-11-30 11:51:21.650725500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.650725500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.650727500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.650728500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.650728500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:198)
2010-11-30 11:51:21.650729500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:152)
2010-11-30 11:51:21.650730500 	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
2010-11-30 11:51:21.650731500 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
2010-11-30 11:51:21.650732500 	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:145)
2010-11-30 11:51:21.650733500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:120)
2010-11-30 11:51:21.650734500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:91)
2010-11-30 11:51:21.650736500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:100)
2010-11-30 11:51:21.650736500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.650737500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.650737500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.650739500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.650739500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.650740500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.650740500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.650749500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.650749500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.650750500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.650753500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.650753500 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)
2010-11-30 11:51:21.650753500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.650754500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.650756500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.650756500 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
2010-11-30 11:51:21.650757500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.650757500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
2010-11-30 11:51:21.650759500 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
2010-11-30 11:51:21.650759500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
2010-11-30 11:51:21.650760500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
2010-11-30 11:51:21.650762500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
2010-11-30 11:51:21.650763500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
2010-11-30 11:51:21.650763500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
2010-11-30 11:51:21.650765500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
2010-11-30 11:51:21.650766500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
2010-11-30 11:51:21.650768500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
2010-11-30 11:51:21.650768500 	at java.lang.Thread.run(Thread.java:662)
2010-11-30 11:51:21.650960500 [DefaultMessageListenerContainer-1] WARN  org.apache.camel.spring.spi.TransactionErrorHandler - Transaction rollback (0x2eb80f1c) for ExchangeId: ID:a511-qa.boi.kount.net-43748-1289356219750-4:78314:-1:1:1 due exception: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.651647500 [DefaultMessageListenerContainer-1] ERROR org.apache.camel.component.jms.EndpointMessageListener - Caused by: [org.apache.camel.RuntimeCamelException - org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2]
2010-11-30 11:51:21.651648500 org.apache.camel.RuntimeCamelException: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.651649500 	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)
2010-11-30 11:51:21.651653500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:163)
2010-11-30 11:51:21.651654500 	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
2010-11-30 11:51:21.651655500 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
2010-11-30 11:51:21.651662500 	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:145)
2010-11-30 11:51:21.651662500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:120)
2010-11-30 11:51:21.651665500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:91)
2010-11-30 11:51:21.651666500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:100)
2010-11-30 11:51:21.651666500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.651667500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.651668500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.651669500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.651669500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.651670500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.651671500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.651672500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.651672500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.651674500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.651675500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.651675500 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)
2010-11-30 11:51:21.651676500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.651677500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.651678500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.651678500 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
2010-11-30 11:51:21.651679500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.651680500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
2010-11-30 11:51:21.651681500 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
2010-11-30 11:51:21.651681500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
2010-11-30 11:51:21.651684500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
2010-11-30 11:51:21.651684500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
2010-11-30 11:51:21.651685500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
2010-11-30 11:51:21.651687500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
2010-11-30 11:51:21.651687500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
2010-11-30 11:51:21.651689500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
2010-11-30 11:51:21.651690500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
2010-11-30 11:51:21.651696500 	at java.lang.Thread.run(Thread.java:662)
2010-11-30 11:51:21.651696500 Caused by: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.651697500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 11:51:21.651697500 	at org.fusesource.hawtdb.internal.page.Extent.freeLinked(Extent.java:234)
2010-11-30 11:51:21.651699500 	at org.fusesource.hawtdb.internal.page.Extent.pagesLinked(Extent.java:190)
2010-11-30 11:51:21.651700500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.pagesLinked(AbstractStreamPagedAccessor.java:77)
2010-11-30 11:51:21.651700500 	at org.fusesource.hawtdb.internal.page.Batch.performDeferredUpdates(Batch.java:184)
2010-11-30 11:51:21.651701500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.storeBatches(HawtTxPageFile.java:599)
2010-11-30 11:51:21.651702500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.flush(HawtTxPageFile.java:522)
2010-11-30 11:51:21.651703500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:163)
2010-11-30 11:51:21.651703500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 11:51:21.651703500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.remove(HawtDBAggregationRepository.java:179)
2010-11-30 11:51:21.651706500 	at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:352)
2010-11-30 11:51:21.651706500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:264)
2010-11-30 11:51:21.651707500 	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:185)
2010-11-30 11:51:21.651708500 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
2010-11-30 11:51:21.651709500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.651709500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.651710500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.651711500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.651712500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.651712500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.651715500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.651715500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.651715500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.651716500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.651718500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.651718500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.651718500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
2010-11-30 11:51:21.651719500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
2010-11-30 11:51:21.651719500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.651721500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.651721500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.651722500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.651728500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:198)
2010-11-30 11:51:21.651729500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:152)
2010-11-30 11:51:21.651729500 	... 34 more
2010-11-30 11:51:21.653106500 [DefaultMessageListenerContainer-1] WARN  org.springframework.jms.listener.DefaultMessageListenerContainer - Execution of JMS message listener failed, and no ErrorHandler has been set.
2010-11-30 11:51:21.653107500 org.apache.camel.RuntimeCamelException: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.653108500 	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)
2010-11-30 11:51:21.653108500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:163)
2010-11-30 11:51:21.653113500 	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
2010-11-30 11:51:21.653114500 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
2010-11-30 11:51:21.653114500 	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:145)
2010-11-30 11:51:21.653116500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:120)
2010-11-30 11:51:21.653117500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:91)
2010-11-30 11:51:21.653119500 	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:100)
2010-11-30 11:51:21.653120500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.653120500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.653121500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.653123500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.653123500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.653124500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.653124500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.653126500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.653126500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.653127500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.653129500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.653129500 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)
2010-11-30 11:51:21.653130500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
2010-11-30 11:51:21.653130500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.653132500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.653132500 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
2010-11-30 11:51:21.653133500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.653133500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
2010-11-30 11:51:21.653140500 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
2010-11-30 11:51:21.653141500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
2010-11-30 11:51:21.653144500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
2010-11-30 11:51:21.653144500 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
2010-11-30 11:51:21.653145500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
2010-11-30 11:51:21.653147500 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:241)
2010-11-30 11:51:21.653147500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1056)
2010-11-30 11:51:21.653149500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1048)
2010-11-30 11:51:21.653150500 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
2010-11-30 11:51:21.653152500 	at java.lang.Thread.run(Thread.java:662)
2010-11-30 11:51:21.653152500 Caused by: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 2
2010-11-30 11:51:21.653153500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 11:51:21.653154500 	at org.fusesource.hawtdb.internal.page.Extent.freeLinked(Extent.java:234)
2010-11-30 11:51:21.653155500 	at org.fusesource.hawtdb.internal.page.Extent.pagesLinked(Extent.java:190)
2010-11-30 11:51:21.653155500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.pagesLinked(AbstractStreamPagedAccessor.java:77)
2010-11-30 11:51:21.653156500 	at org.fusesource.hawtdb.internal.page.Batch.performDeferredUpdates(Batch.java:184)
2010-11-30 11:51:21.653156500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.storeBatches(HawtTxPageFile.java:599)
2010-11-30 11:51:21.653158500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile.flush(HawtTxPageFile.java:522)
2010-11-30 11:51:21.653158500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:163)
2010-11-30 11:51:21.653159500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 11:51:21.653159500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.remove(HawtDBAggregationRepository.java:179)
2010-11-30 11:51:21.653162500 	at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:352)
2010-11-30 11:51:21.653162500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:264)
2010-11-30 11:51:21.653163500 	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:185)
2010-11-30 11:51:21.653164500 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
2010-11-30 11:51:21.653165500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.653165500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.653166500 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
2010-11-30 11:51:21.653167500 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
2010-11-30 11:51:21.653168500 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
2010-11-30 11:51:21.653168500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.653169500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.653175500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.653175500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.653176500 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
2010-11-30 11:51:21.653176500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.653178500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.653178500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
2010-11-30 11:51:21.653179500 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
2010-11-30 11:51:21.653179500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
2010-11-30 11:51:21.653180500 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:62)
2010-11-30 11:51:21.653181500 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
2010-11-30 11:51:21.653181500 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
2010-11-30 11:51:21.653182500 	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:198)
2010-11-30 11:51:21.653184500 	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:152)
2010-11-30 11:51:21.653185500 	... 34 more




It appears that Camel can continue to process messages until we see almost the exact same error, but instead of ""Error executing work Removing key"" we see ""Error executing work Getting key"" and in both cases, the key shown is the value of the correlation expression for the aggregator. Once these errors start showing up Camel does not process any more messages. I infer from their text that the error of ""Removing key"" occurs after aggregation is complete, but the error of ""Getting key"" occurs when trying to aggregate a new message. It's therefore understandable why camel would stop being able to process messages if it's unable to retrieve the already aggregated exchange from the repository.


When you restart Camel and the HawtDB file that was created from the previous run still exists, Camel fails to properly start and you get:



2010-11-30 14:16:15.579433500 [main] INFO  org.apache.camel.impl.MainSupport - Apache Camel 2.5.0 starting
2010-11-30 14:16:15.604250500 [main] INFO  org.springframework.context.support.FileSystemXmlApplicationContext - Refreshing org.springframework.context.support.FileSystemXmlApplicationContext@4d125127: startup date [Tue Nov 30 14:16:15 PST 2010]; root of context hierarchy
2010-11-30 14:16:15.646720500 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from URL [file:/opt/camel/etc/camel.xml]
2010-11-30 14:16:15.913909500 [main] INFO  org.apache.camel.spring.handler.CamelNamespaceHandler - OSGi environment not detected.
2010-11-30 14:16:16.374117500 [main] INFO  org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loading XML bean definitions from file [/opt/camel/deploy/ens/ens.xml]
2010-11-30 14:16:16.438684500 [main] INFO  org.springframework.beans.factory.support.DefaultListableBeanFactory - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@2682d210: defining beans [activemqPrefetchPolicy,jmsConnectionFactory,jmsTransactionManager,activemq,template,consumerTemplate,camel:beanPostProcessor,camel,ensRouteBuilder]; root of factory hierarchy
2010-11-30 14:16:16.866101500 [main] INFO  org.apache.camel.impl.converter.AnnotationTypeConverterLoader - Found 5 packages with 17 @Converter classes to load
2010-11-30 14:16:16.904649500 [main] INFO  org.apache.camel.impl.converter.DefaultTypeConverter - Loaded 158 type converters in 0.302 seconds
2010-11-30 14:16:17.016405500 [main] INFO  org.apache.camel.impl.DefaultCamelContext - Apache Camel 2.5.0 (CamelContext: camel) is starting
2010-11-30 14:16:17.016490500 [main] INFO  org.apache.camel.impl.DefaultCamelContext - JMX enabled. Using ManagedManagementStrategy.
2010-11-30 14:16:17.772785500 [main] INFO  org.apache.camel.component.hawtdb.HawtDBFile - Aggregation repository data store loaded using file: /opt/activemq/data/camel/ens/hawtdb.dat containing 2 repositories.
2010-11-30 14:16:17.804277500 [main] WARN  org.apache.camel.component.hawtdb.HawtDBFile - Error executing work Size[kountAg] will do rollback.
2010-11-30 14:16:17.804278500 org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 195
2010-11-30 14:16:17.804279500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 14:16:17.804279500 	at org.fusesource.hawtdb.internal.page.Extent.readOpen(Extent.java:94)
2010-11-30 14:16:17.804280500 	at org.fusesource.hawtdb.internal.page.ExtentInputStream.read(ExtentInputStream.java:92)
2010-11-30 14:16:17.804288500 	at java.io.DataInputStream.readFully(DataInputStream.java:178)
2010-11-30 14:16:17.804288500 	at java.io.DataInputStream.readFully(DataInputStream.java:152)
2010-11-30 14:16:17.804288500 	at org.fusesource.hawtbuf.codec.AbstractBufferCodec.decode(AbstractBufferCodec.java:40)
2010-11-30 14:16:17.804289500 	at org.fusesource.hawtbuf.codec.AbstractBufferCodec.decode(AbstractBufferCodec.java:30)
2010-11-30 14:16:17.804291500 	at org.fusesource.hawtdb.internal.index.BTreeNode.read(BTreeNode.java:207)
2010-11-30 14:16:17.804291500 	at org.fusesource.hawtdb.internal.index.BTreeNode$DataPagedAccessor.decode(BTreeNode.java:228)
2010-11-30 14:16:17.804292500 	at org.fusesource.hawtdb.internal.index.BTreeNode$DataPagedAccessor.decode(BTreeNode.java:214)
2010-11-30 14:16:17.804306500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.load(AbstractStreamPagedAccessor.java:64)
2010-11-30 14:16:17.804306500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile$ReadCache.cacheLoad(HawtTxPageFile.java:907)
2010-11-30 14:16:17.804307500 	at org.fusesource.hawtdb.internal.page.HawtTransaction.get(HawtTransaction.java:151)
2010-11-30 14:16:17.804307500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.loadNode(BTreeIndex.java:231)
2010-11-30 14:16:17.804309500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.root(BTreeIndex.java:158)
2010-11-30 14:16:17.804309500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.size(BTreeIndex.java:101)
2010-11-30 14:16:17.804310500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository$8.execute(HawtDBAggregationRepository.java:360)
2010-11-30 14:16:17.804310500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository$8.execute(HawtDBAggregationRepository.java:357)
2010-11-30 14:16:17.804312500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:159)
2010-11-30 14:16:17.804312500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 14:16:17.804313500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.size(HawtDBAggregationRepository.java:357)
2010-11-30 14:16:17.804315500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.doStart(HawtDBAggregationRepository.java:492)
2010-11-30 14:16:17.804315500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804316500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804316500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804318500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804318500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doStart(AggregateProcessor.java:776)
2010-11-30 14:16:17.804319500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804319500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804321500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804321500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804322500 	at org.apache.camel.processor.DelegateProcessor.doStart(DelegateProcessor.java:76)
2010-11-30 14:16:17.804322500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804322500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804325500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804325500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804326500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.804326500 	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:423)
2010-11-30 14:16:17.804328500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804328500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804328500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804329500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804330500 	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:841)
2010-11-30 14:16:17.804331500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804331500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804332500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804337500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804339500 	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:143)
2010-11-30 14:16:17.804340500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804340500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804340500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:77)
2010-11-30 14:16:17.804341500 	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:644)
2010-11-30 14:16:17.804342500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804343500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804343500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804344500 	at org.apache.camel.processor.WrapProcessor.doStart(WrapProcessor.java:42)
2010-11-30 14:16:17.804344500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804345500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804346500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804346500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804347500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.804349500 	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:423)
2010-11-30 14:16:17.804349500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804350500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804350500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804352500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804352500 	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:841)
2010-11-30 14:16:17.804353500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804353500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804354500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804355500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804355500 	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:143)
2010-11-30 14:16:17.804356500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804356500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804358500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804359500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804359500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.804359500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804361500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804361500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804362500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.804362500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.804364500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804364500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804365500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.804365500 	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:233)
2010-11-30 14:16:17.804370500 	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:136)
2010-11-30 14:16:17.804373500 	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1694)
2010-11-30 14:16:17.804373500 	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1620)
2010-11-30 14:16:17.804374500 	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1419)
2010-11-30 14:16:17.804374500 	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1314)
2010-11-30 14:16:17.804376500 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1213)
2010-11-30 14:16:17.804376500 	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)
2010-11-30 14:16:17.804377500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.804377500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.804378500 	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1191)
2010-11-30 14:16:17.804379500 	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
2010-11-30 14:16:17.804379500 	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
2010-11-30 14:16:17.804380500 	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:237)
2010-11-30 14:16:17.805978500 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
2010-11-30 14:16:17.805979500 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
2010-11-30 14:16:17.805979500 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
2010-11-30 14:16:17.805986500 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
2010-11-30 14:16:17.805986500 	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:140)
2010-11-30 14:16:17.805987500 	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:94)
2010-11-30 14:16:17.805989500 	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:209)
2010-11-30 14:16:17.805989500 	at org.apache.camel.spring.Main.doStart(Main.java:173)
2010-11-30 14:16:17.805990500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.805990500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.805993500 	at org.apache.camel.impl.MainSupport.run(MainSupport.java:114)
2010-11-30 14:16:17.805993500 	at org.apache.camel.impl.MainSupport.run(MainSupport.java:291)
2010-11-30 14:16:17.805994500 	at org.apache.camel.spring.Main.main(Main.java:97)
2010-11-30 14:16:17.807821500 [main] INFO  org.apache.camel.impl.DefaultCamelContext - Apache Camel 2.5.0 (CamelContext:camel) is shutting down
2010-11-30 14:16:17.808227500 [main] INFO  org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 0 routes (timeout 300 seconds)
2010-11-30 14:16:17.809961500 [main] INFO  org.apache.camel.impl.DefaultShutdownStrategy - Graceful shutdown of 0 routes completed in 0 seconds
2010-11-30 14:16:17.814781500 [main] INFO  org.apache.camel.impl.DefaultInflightRepository - Shutting down with no inflight exchanges.
2010-11-30 14:16:17.815443500 [main] INFO  org.apache.camel.impl.DefaultCamelContext - Uptime: 0.799 seconds
2010-11-30 14:16:17.815545500 [main] INFO  org.apache.camel.impl.DefaultCamelContext - Apache Camel 2.5.0 (CamelContext: camel) is shutdown in 0.008 seconds
2010-11-30 14:16:17.815665500 [main] INFO  org.apache.camel.impl.MainSupport - Apache Camel 2.5.0 stopping
2010-11-30 14:16:17.815764500 Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 195
2010-11-30 14:16:17.815892500 	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1140)
2010-11-30 14:16:17.815928500 	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
2010-11-30 14:16:17.815962500 	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:237)
2010-11-30 14:16:17.815995500 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
2010-11-30 14:16:17.816031500 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
2010-11-30 14:16:17.816067500 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
2010-11-30 14:16:17.816102500 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
2010-11-30 14:16:17.816137500 	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:140)
2010-11-30 14:16:17.816171500 	at org.springframework.context.support.FileSystemXmlApplicationContext.<init>(FileSystemXmlApplicationContext.java:94)
2010-11-30 14:16:17.816205500 	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:209)
2010-11-30 14:16:17.816237500 	at org.apache.camel.spring.Main.doStart(Main.java:173)
2010-11-30 14:16:17.816269500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.816301500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.816333500 	at org.apache.camel.impl.MainSupport.run(MainSupport.java:114)
2010-11-30 14:16:17.816364500 	at org.apache.camel.impl.MainSupport.run(MainSupport.java:291)
2010-11-30 14:16:17.816396500 	at org.apache.camel.spring.Main.main(Main.java:97)
2010-11-30 14:16:17.816446500 Caused by: org.fusesource.hawtdb.api.IOPagingException: Invalid extent read request.  The requested page was not an extent: 195
2010-11-30 14:16:17.816481500 	at org.fusesource.hawtdb.internal.page.Extent.readHeader(Extent.java:85)
2010-11-30 14:16:17.816514500 	at org.fusesource.hawtdb.internal.page.Extent.readOpen(Extent.java:94)
2010-11-30 14:16:17.816547500 	at org.fusesource.hawtdb.internal.page.ExtentInputStream.read(ExtentInputStream.java:92)
2010-11-30 14:16:17.816579500 	at java.io.DataInputStream.readFully(DataInputStream.java:178)
2010-11-30 14:16:17.816611500 	at java.io.DataInputStream.readFully(DataInputStream.java:152)
2010-11-30 14:16:17.816644500 	at org.fusesource.hawtbuf.codec.AbstractBufferCodec.decode(AbstractBufferCodec.java:40)
2010-11-30 14:16:17.816678500 	at org.fusesource.hawtbuf.codec.AbstractBufferCodec.decode(AbstractBufferCodec.java:30)
2010-11-30 14:16:17.816714500 	at org.fusesource.hawtdb.internal.index.BTreeNode.read(BTreeNode.java:207)
2010-11-30 14:16:17.816749500 	at org.fusesource.hawtdb.internal.index.BTreeNode$DataPagedAccessor.decode(BTreeNode.java:228)
2010-11-30 14:16:17.816783500 	at org.fusesource.hawtdb.internal.index.BTreeNode$DataPagedAccessor.decode(BTreeNode.java:214)
2010-11-30 14:16:17.816818500 	at org.fusesource.hawtdb.api.AbstractStreamPagedAccessor.load(AbstractStreamPagedAccessor.java:64)
2010-11-30 14:16:17.816852500 	at org.fusesource.hawtdb.internal.page.HawtTxPageFile$ReadCache.cacheLoad(HawtTxPageFile.java:907)
2010-11-30 14:16:17.816885500 	at org.fusesource.hawtdb.internal.page.HawtTransaction.get(HawtTransaction.java:151)
2010-11-30 14:16:17.816918500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.loadNode(BTreeIndex.java:231)
2010-11-30 14:16:17.816950500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.root(BTreeIndex.java:158)
2010-11-30 14:16:17.816982500 	at org.fusesource.hawtdb.internal.index.BTreeIndex.size(BTreeIndex.java:101)
2010-11-30 14:16:17.817018500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository$8.execute(HawtDBAggregationRepository.java:360)
2010-11-30 14:16:17.817085500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository$8.execute(HawtDBAggregationRepository.java:357)
2010-11-30 14:16:17.817122500 	at org.apache.camel.component.hawtdb.HawtDBFile.doExecute(HawtDBFile.java:159)
2010-11-30 14:16:17.817153500 	at org.apache.camel.component.hawtdb.HawtDBFile.execute(HawtDBFile.java:106)
2010-11-30 14:16:17.817183500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.size(HawtDBAggregationRepository.java:357)
2010-11-30 14:16:17.817212500 	at org.apache.camel.component.hawtdb.HawtDBAggregationRepository.doStart(HawtDBAggregationRepository.java:492)
2010-11-30 14:16:17.817241500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817271500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.817299500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.817327500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.817355500 	at org.apache.camel.processor.aggregate.AggregateProcessor.doStart(AggregateProcessor.java:776)
2010-11-30 14:16:17.817382500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817410500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.817437500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.817464500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.817492500 	at org.apache.camel.processor.DelegateProcessor.doStart(DelegateProcessor.java:76)
2010-11-30 14:16:17.817519500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817546500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.817573500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.817601500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.817629500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.817657500 	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:423)
2010-11-30 14:16:17.817684500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817711500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.817739500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.817766500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.817793500 	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:841)
2010-11-30 14:16:17.817821500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817848500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.817875500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.817903500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.817930500 	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:143)
2010-11-30 14:16:17.817957500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.817985500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818012500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:77)
2010-11-30 14:16:17.818040500 	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:644)
2010-11-30 14:16:17.818067500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818094500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818121500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818156500 	at org.apache.camel.processor.WrapProcessor.doStart(WrapProcessor.java:42)
2010-11-30 14:16:17.818184500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818211500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818239500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818267500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.818294500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.818322500 	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:423)
2010-11-30 14:16:17.818349500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818377500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818404500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818431500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.818459500 	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:841)
2010-11-30 14:16:17.818486500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818513500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818540500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818567500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.818595500 	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:143)
2010-11-30 14:16:17.818622500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818649500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818676500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818704500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.818731500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.818759500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818786500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818814500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818841500 	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:63)
2010-11-30 14:16:17.818869500 	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)
2010-11-30 14:16:17.818896500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.818923500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.818950500 	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:52)
2010-11-30 14:16:17.818978500 	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:233)
2010-11-30 14:16:17.819005500 	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:136)
2010-11-30 14:16:17.819033500 	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1694)
2010-11-30 14:16:17.819061500 	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1620)
2010-11-30 14:16:17.819096500 	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1419)
2010-11-30 14:16:17.819124500 	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1314)
2010-11-30 14:16:17.819152500 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1213)
2010-11-30 14:16:17.819179500 	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)
2010-11-30 14:16:17.819207500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)
2010-11-30 14:16:17.819247500 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
2010-11-30 14:16:17.819277500 	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1191)
2010-11-30 14:16:17.819304500 	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
2010-11-30 14:16:17.819332500 	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
2010-11-30 14:16:17.819364500 	... 14 more
2010-11-30 14:16:17.819904500 [Thread-1] INFO  org.apache.camel.spring.Main$HangupInterceptor - Received hang up - stopping the main instance.




The page number (in this case 34) varies from run to run.","davsclaus:1289003324:2010-11-06T08:28:44.908+0000:1289003324:2010-11-06T08:28:44.908+0000:Can you try with Camel 2.5.0 which has been released.
And make sure you use the latest release of HawtDB (It should be 1.5.0 afair)

And what do you mean by ""still running""?

And how do you start/stop your application?
gim:1289208284:2010-11-08T17:24:44.102+0000:1289208284:2010-11-08T17:24:44.102+0000:We were using HawtDB 1.5, but were still using the 2.5-SNAPSHOT. I will try again with the official 2.5 release code.

What I meant was that if the HawtDB repository file does not exist on startup, it is created, and Camel starts ""successfully"" (but we still see these errors.) When Camel is stopped and then started again, (the same HawtDB repository file exists that was created from the first run) it does not successfully start, as I showed in the above log. After producing an error, Camel terminates itself.

We run Camel by invoking the org.apache.camel.spring.Main class, passing it a Spring bean file with the -fa argument.
davsclaus:1289448091:2010-11-11T12:01:31.476+0000:1289448091:2010-11-11T12:01:31.476+0000:Do you have a lot of data in the repo?

Do you see this issue immediately? Or do you have to pump in a lot of data to see it?

And what OS and JDK are you using?


gim:1291127742:2010-11-30T22:35:42.783+0000:1291127742:2010-11-30T22:35:42.783+0000:I have tested this again with the official 2.5.0 code, and I see almost the same behavior. The error messages are slightly different, so I will update the issue description with the latest output I've seen.

bq. Do you have a lot of data in the repo?
Initially, the repository file does not exists, so it is empty. After seeing these kinds of errors, if Camel is shut down, then started again, it will fail to successfully start, unless the repository file is removed again.

bq. Do you see this issue immediately? Or do you have to pump in a lot of data to see it?
We're putting somewhere on the order of 3 messages per second in to the ActiveMQ queue, and we see the errors show up in about 8 seconds.

bq. And what OS and JDK are you using?
Ubuntu 8.04
{noformat}
$ /usr/bin/java -version
java version ""1.6.0_22""
Java(TM) SE Runtime Environment (build 1.6.0_22-b04)
Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03, mixed mode)
{noformat}
gim:1291128972:2010-11-30T22:56:12.940+0000:1291128972:2010-11-30T22:56:12.940+0000:Please note that in addition to updating the log output, I also provided some addition explanation of my problem.
davsclaus:1291698003:2010-12-07T13:00:03.160+0000:1291698003:2010-12-07T13:00:03.160+0000:Can you post the Camel route you use?
gim:1291715642:2010-12-07T17:54:02.668+0000:1291715642:2010-12-07T17:54:02.668+0000:{code}
from(""activemq:events"")
  .transacted()
  .log(""Aggregating event ${header.ens-event-id} "" +
      ""on callback ${header.ens-callback-id}"")
  .aggregate(header(""ens-callback-id""), new EnsAggregationStrategy())
  .aggregationRepository(
      new HawtDBAggregationRepository(
        ""events"", this.persistenceFile))
  .completionSize(header(""ens-batch-size""))
  .completionInterval(this.completionInterval)
  .to(""activemq:eventOutbox"")
  .log(""Aggregated events ${header.ens-event-ids} "" +
      ""on callback ${header.ens-callback-id}"");
{code}
davsclaus:1291779651:2010-12-08T11:40:51.013+0000:1291779651:2010-12-08T11:40:51.013+0000:I have added an unit test to Camel source code which is based on your route.

I cannot reproduce the issue.
Can you try this test on your system and maybe try to adjust it? For example try to use the same kind of payloads you use?

commit log
http://svn.apache.org/viewvc?rev=1043354&view=rev

It most likely need a 2nd test case where it uses more groups so the db store contains multiple inprogress exchanges.
When you see the problem? Has any aggregated messages been completed yet?

And what parameters do you use the completion interval? And whats the typical completion size?

And what logic do you have in your aggregation strategy? It could potential affect because it dictates what is to be stored as data.
davsclaus:1291785953:2010-12-08T13:25:53.635+0000:1291785953:2010-12-08T13:25:53.635+0000:btw if you run long lasting tests then consider removing the mocks because they store the received exchanges in memory, so you will eat up memory over time.
davsclaus:1293765756:2010-12-31T11:22:36.671+0000:1293765756:2010-12-31T11:22:36.671+0000:Glenn any update on this?

Can you post the source code for your {{EnsAggregationStrategy}} ?
gim:1294127014:2011-01-04T15:43:34.903+0000:1294127014:2011-01-04T15:43:34.903+0000:I haven't had a chance to run the unit test you wrote, or come up with one that reproduces the problem. I will do this as soon as I can.

Here's the source for EnsAggregationStrategy:
{code}

package com.kount.ens.camel;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;

import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.processor.aggregate.AggregationStrategy;

import org.apache.log4j.Logger;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * ENS Aggregation Strategy.
 *
 * @author Glenn Moss <gim@keynetics.com>
 * @version SVN: $Id$
 * @copyright 2010 Keynetics Inc.
 */
public class EnsAggregationStrategy implements AggregationStrategy {

  /**
   * Logger.
   */
  private Logger log;

  /**
   * Document builder.
   */
  private DocumentBuilder db;

  /**
   * Transformer.
   */
  private Transformer trans;

  /**
   * Constructor.
   */
  public EnsAggregationStrategy () {
    this.log = Logger.getLogger(this.getClass());

    try {
      this.db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    } catch (ParserConfigurationException e) {
      throw new EnsConfigurationException(
          ""Unable to instantiate a DocumentBuilder"", e);
    }
    try {
      this.trans = TransformerFactory.newInstance().newTransformer();
      this.trans.setOutputProperty(OutputKeys.INDENT, ""yes"");
    } catch (TransformerConfigurationException e) {
      throw new EnsConfigurationException(
          ""Unable to instantiate a Transformer"", e);
    }
  }

  /**
   * Aggregates an old and new exchange together to create a single combined
   * exchange.
   *
   * @param oldExchange the oldest exchange (is null on first aggregation as we
   * only have the new exchange)
   * @param newExchange the newest exchange (can be null if there was no data
   * possible to acquire)
   * @return a combined composite of the two exchanges
   */
  public Exchange aggregate (Exchange oldExchange, Exchange newExchange) {
    String ids = """";
    Document oldDoc;
    Element root;
    if (null == oldExchange) {
      // No old message, so create a new XML DOM
      oldDoc = this.db.newDocument();
      root = oldDoc.createElement(""events"");
      root.setAttribute(""total"", ""0"");
      oldDoc.appendChild(root);

      oldExchange = newExchange;
    } else {
      // Turn the old message into an XML DOM
      String oldBody = oldExchange.getIn().getBody(String.class);
      oldDoc = this.parseDocument(oldBody);
      root = (Element) oldDoc.getFirstChild();

      // Get the Event IDs represented in the old message
      ids = (String) oldExchange.getIn().getHeader(""ens-event-ids"");
    }

    Message newMessage = newExchange.getIn();
    Message oldMessage = oldExchange.getIn();

    // Add the incoming Event's ID to the list of aggregated IDs
    ids += newMessage.getHeader(""ens-event-id"") + "","";
    oldMessage.removeHeader(""ens-event-id"");

    oldMessage.setHeader(""ens-event-ids"", ids);

    String newBody = newMessage.getBody(String.class);
    try {
      // Get the Event XML from the new message and append it to the aggregated
      // XML, incrementing the ""total"" attribute
      Document newDoc = this.parseDocument(newBody);
      Node newEvent = newDoc.getFirstChild();

      Node impEvent = oldDoc.importNode(newEvent, true);
      root.appendChild(impEvent);

      int oldTotal = Integer.parseInt(root.getAttribute(""total""));
      root.setAttribute(""total"", Integer.toString(oldTotal + 1));

      // Output the resulting aggregated XML text as the body of the
      // aggregated message
      StreamResult result = new StreamResult(new StringWriter());
      this.trans.transform(new DOMSource(oldDoc), result);
      oldMessage.setBody(result.getWriter().toString());
    } catch (TransformerException e) {
      throw new EnsAggregationException(""Unable to transform DOM to XML text"",
          e);
    }

    this.log.info(""Aggregated events "" + ids);

    return oldExchange;
  }

  /**
   * Parse XML text.
   *
   * @param input XML text
   * @return Parsed Document
   */
  private Document parseDocument (String input) {
    try {
      return this.db.parse(new InputSource(new StringReader(input)));
    } catch (SAXException e) {
      throw new EnsAggregationException(""Unable to parse XML text"", e);
    } catch (IOException e) {
      throw new EnsAggregationException(""Unable to read XML text"", e);
    }
  }
}
{code}
davsclaus:1294971629:2011-01-14T10:20:29.277+0000:1294971629:2011-01-14T10:20:29.277+0000:We spotted a bug in the aggregator under certain conditions may omit confirm exchanges. See CAMEL-3535.

When the fix is committed you should rebuild from source and test with that."
0,CAMEL-3316,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Daniel Kulp,0,0,2010-11-05 15:25:04+00:00,2011-04-24 09:57:54+00:00,"When the version changed from 2.5.0-SNAP to 2.6.0-SNAP, the parent was not in the local repo and maven3 complains it cannot find it.   Adding relative paths to everything fixes it.   patch will be supplied.


BTW: having a ""build system"" component in JIRA for these types of things would probably be a good idea.","davsclaus:1288943525:2010-11-05T15:52:05.407+0000:1288943525:2010-11-05T15:52:05.407+0000:Seems a bit odd?

When there is such a major change I usually do as follows
{code}
mvn clean install -Dtest=false
{code}

from the root of the Camel project. Why can't Maven 3.0 work likewise without all the relative hints?
dkulp:1288943831:2010-11-05T15:57:11.564+0000:1288943831:2010-11-05T15:57:11.564+0000:
I honestly have no idea.    However, it's still good to have so you could just go into a particular component and build without building everything first.


davsclaus:1289003214:2010-11-06T08:26:54.845+0000:1289003214:2010-11-06T08:26:54.845+0000:trunk: 1031971.
davsclaus:1303610274:2011-04-24T09:57:54.993+0000:1303610274:2011-04-24T09:57:54.993+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3315,Task,Minor,2.5.0,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2010-11-05 14:18:01+00:00,2011-10-25 11:36:22+00:00,"Jasypt 1.7 has trimmed down on the 3rd party dependencies which means we can get rid of some libraries
http://www.jasypt.org/whatsnew17.html","davsclaus:1293766739:2010-12-31T11:38:59.090+0000:1293766739:2010-12-31T11:38:59.090+0000:We may have to have the SMX team create a new OSGi bundle for Jasypt 1.7
tjsnell:1294255466:2011-01-06T03:24:26.225+0000:1294255466:2011-01-06T03:24:26.225+0000:They have 1.7
http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.jasypt/1.7_1/


davsclaus:1294267910:2011-01-06T06:51:50.088+0000:1294267910:2011-01-06T06:51:50.088+0000:Tracy I think the SMX bundle is *wrong* as Jasypt 1.7 got rid of commons-lang and commons-codec (the latter has bugs).
http://www.jasypt.org/whatsnew17.html

So we need an updated SMX bundle which *do not* important/use any of those commons stuff.
jbonofre:1294268730:2011-01-06T07:05:30.419+0000:1294268730:2011-01-06T07:05:30.419+0000:I raised SMX4-736 about that and I'm fixing it right now.
jbonofre:1294269344:2011-01-06T07:15:44.442+0000:1294269344:2011-01-06T07:15:44.442+0000:I fixed it in ServiceMix Jasypt 1.7 bundle and deployed 1.7_2-SNAPSHOT artifact.

I plan a ServiceMix bundles release end of this week.
davsclaus:1298329288:2011-02-22T07:01:28.537+0000:1298329288:2011-02-22T07:01:28.537+0000:I would like to upgrade to Jasypt 1.7 as we can lose the JDK1.5 stuff and other dependencies which is no longer needed.

davsclaus:1298588283:2011-02-25T06:58:03.735+0000:1298588283:2011-02-25T06:58:03.735+0000:trunk: 1074408."
0,CAMEL-3314,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Andreas Asmuss,0,0,2010-11-05 13:29:34+00:00,2011-04-24 09:57:18+00:00,"The 2.5 feature: ""The EIP now supports property placeholders in the String based options (a few spots in Java DSL where its not possible). For example: 
<convertBodyTo type=""String"" charset=""foo.myCharset""/>"" does not work correctly when ie nested in a <choice> tag.


See discussion: http://camel.465427.n5.nabble.com/Camel-2-5-Propertyplaceholders-and-Spring-DSL-still-not-working-td3251608.html#a3251608


Example route:


This works: 
<route> 
        <from uri=""direct:in"" /> 
        <convertBodyTo type=""String"" charset=""charset.external"" />	
        <log message=""Charset: charset.external"" /> 
        <to uri=""mock:out"" /> 
</route> 


This fails: 
<route> 
        <from uri=""direct:in"" /> 
        <choice> 
                <when> 
                        <constant>true</constant> 
                        <convertBodyTo type=""String"" charset=""charset.external"" />	
                </when> 
        </choice> 
        <to uri=""mock:out"" /> 
</route>","davsclaus:1288936991:2010-11-05T14:03:11.721+0000:1288936991:2010-11-05T14:03:11.721+0000:trunk: 1031566.

Now its fixed. Thanks for reporting.
davsclaus:1303610238:2011-04-24T09:57:18.292+0000:1303610238:2011-04-24T09:57:18.292+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3313,Improvement,Trivial,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Fernando Ribeiro,0,0,2010-11-05 01:34:24+00:00,2011-04-24 09:57:43+00:00,"If the names of the failing XSLT templates was in the error messages, it would be easier to debug when the component is used several times in the same route.","davsclaus:1288908018:2010-11-05T06:00:18.127+0000:1288908018:2010-11-05T06:00:18.127+0000:It really helps if you put in a bit more details such as an example of the current error message and suggestion how it should be altered.

And even better a patch.
davsclaus:1288910181:2010-11-05T06:36:21.723+0000:1288910181:2010-11-05T06:36:21.723+0000:You know get this caused exception message
{code}
Caused by: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet class path resource [org/apache/camel/component/xslt/invalid.xsl]
{code}
davsclaus:1288910505:2010-11-05T06:41:45.453+0000:1288910505:2010-11-05T06:41:45.453+0000:trunk: 1031452.
davsclaus:1303610263:2011-04-24T09:57:43.313+0000:1303610263:2011-04-24T09:57:43.313+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3312,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Duplicate,2.6.0,Unassigned,Fernando Ribeiro,0,0,2010-11-05 01:33:17+00:00,2011-04-24 09:57:13+00:00,"If the names of the failing XQuery templates was in the error messages, it would be easier to debug when the component is used several times in the same route.",davsclaus:1303610233:2011-04-24T09:57:13.518+0000:1303610233:2011-04-24T09:57:13.518+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3311,New Feature,Minor,2.5.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Christian Müller,Claus Ibsen,0,1,2010-11-04 16:39:52+00:00,2011-01-16 08:33:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/Ambiguous-method-invocations-in-bean-binding-tp3248536p3248536.html


We should introduce a type option so you for example can set it to java.io.InputStream to force Camel to pick a method which this type in the method signature.
This can reduce problems with ambiguous methods, when people haver overloaded methods.","muellerc:1294410511:2011-01-07T22:28:31.885+0000:1294410511:2011-01-07T22:28:31.885+0000:start working on the
{code}
.to(""bean:foo?method=bar&type=java.io.InputStream"")
{code}
feature...
muellerc:1294482442:2011-01-08T18:27:22.966+0000:1294482442:2011-01-08T18:27:22.966+0000:Now, you can use the *type* option to give Camel a hint which method should be called if you have multiple methods with the same name but different parameter types (method overloading) and you want not to fail with an AmbiguousMethodCallException:

{code}
.to(""bean:foo?method=bar&type=java.io.InputStream"")
{code}

I introduce also a new type converter which converts a String to a Class. I was wondering it doesn't exist, but I couldn't find one.
I hope you like it...
muellerc:1294561869:2011-01-09T16:31:09.690+0000:1294561869:2011-01-09T16:31:09.690+0000:We should rename the option from {{type}} to {{parameterType}} to be more clear for what this option is used.
muellerc:1295073630:2011-01-15T14:40:30.694+0000:1295073630:2011-01-15T14:40:30.694+0000:Update the wiki page for the renamed option.
Commit the changes Claus suggested.
davsclaus:1295075493:2011-01-15T15:11:33.199+0000:1295075493:2011-01-15T15:11:33.199+0000:Christian

I dont you should have spend time adding that parameterType in all the expression and where else it was needed. Because it would have been much better to implement a simple logic for methodName to support the type directly.

{code}
method=doSomething(Customer)
{code}

Then we avoid adding a lot of new methods to RouteBuilder and what else. We do have plenty of methods already.

I think we should revert all these changes and implement the parenthesis solution in Camel 2.7.

If we keep parameterType its not a very powerful addition as the parenthesis solution would be as it can support multiple types
{code}
method=doSomething(Customer,Boolean)
{code}

davsclaus:1295075623:2011-01-15T15:13:43.309+0000:1295075623:2011-01-15T15:13:43.309+0000:We can also support using wildcards, reg exp, or a ends with check in the type name. So if you have a domain object with the FQN {{com.mycompany.myproject.foo.bar.Customer}}, then it would be a tedious to have to type that, instead you can do

{code}
method=doSomething(*Customer)
{code}
Using a * for wildcard. We could even just default that, so people dont have to type FQN. Which they still can do if needed.
muellerc:1295080255:2011-01-15T16:30:55.483+0000:1295080255:2011-01-15T16:30:55.483+0000:Will revert this change as Claus suggested.
davsclaus:1295080661:2011-01-15T16:37:41.338+0000:1295080661:2011-01-15T16:37:41.338+0000:Christian we can keep most of your logic. Is just that adding the {{parameterType}} as a 3rd parameter, just adds a log of new methods in many different places.

Something that you actually discovered today. Implementing the ( ) parser is fairly easy to do already, if you want to keep the logic to solve ambiguity. We can also improve it in 2.7.

You can keep some of the code if you like and add a TODO. Just that the public API should not have this new method, because if it's there then people will start using it, and then its harder to remove in 2.7, when we introduce the parenthesis parser.

BTW: its good work and its great that you _dare_ to work on this as its inside the camel-core library.

Don't be afraid to try implement / fix other tickets in camel-core. Its great that we have more committers getting their hands dirty in the core.
davsclaus:1295080807:2011-01-15T16:40:07.614+0000:1295080807:2011-01-15T16:40:07.614+0000:Oh and you spotted bug CAMEL-3545, which we got fixed - thats good.
muellerc:1295137809:2011-01-16T08:30:09.325+0000:1295137809:2011-01-16T08:30:09.325+0000:I reverted the changes by applying the following diffs:

svn diff -r 1059343:1059327 > diff_1059343_1059327.txt
svn diff -r 1056749:1056745 > diff_1056749_1056745.txt

and merged the conflicts by hand.
I didn't reverted the String to Class Converter and its unit tests.

I will implement this feature in a better solution in Camel 2.7 with [CAMEL-3515|https://issues.apache.org/jira/browse/CAMEL-3515].

muellerc:1295137910:2011-01-16T08:31:50.340+0000:1295137910:2011-01-16T08:31:50.340+0000:I will implement this feature with issue [CAMEL-3515|https://issues.apache.org/jira/browse/CAMEL-3515]"
0,CAMEL-3310,Bug,Major,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Daniel Kulp,0,0,2010-11-04 15:42:46+00:00,2011-04-24 09:57:51+00:00,The camel-soap component does not build with the update to CXF 2.3.   patch will be supplied.,"cschneider:1288857016:2010-11-04T15:50:16.411+0000:1288857016:2010-11-04T15:50:16.411+0000:Hi Dan,

you changed from ${cxf-version} to 2.3.0. Shouldn´t we rather update the property to reflect this?
Apart from this the changed artifacts will of course make sense.

Christian
dkulp:1288857277:2010-11-04T15:54:37.012+0000:1288857277:2010-11-04T15:54:37.012+0000:
Well, it would involve creating a new property, which is definitely a valid option.

With 2.3.0, the xjc utilities that we have were pulled out into a subproject of CXF that is not likely to be released as part of the fixes and such of the rest of CXF.   Thus, the version for those is separate than for the rest of the cxf dependencies that are used in Camel.


dkulp:1288857415:2010-11-04T15:56:55.340+0000:1288857415:2010-11-04T15:56:55.340+0000:
new patch with new property
cschneider:1288882820:2010-11-04T23:00:20.243+0000:1288882820:2010-11-04T23:00:20.243+0000:I was just trying to apply your patch but it looks a bit strange
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml

Do you compare two checkouts there? When I apply this in subversion it does not find any matches. Does this have to do with git?
dkulp:1288883178:2010-11-04T23:06:18.881+0000:1288883178:2010-11-04T23:06:18.881+0000:Yea. It's a git diff. Usually a patch -p1 should do it. 
njiang:1288908678:2010-11-05T06:11:18.124+0000:1288908678:2010-11-05T06:11:18.124+0000:Applied patch with thanks to DanK.
davsclaus:1288917737:2010-11-05T08:42:17.146+0000:1288917737:2010-11-05T08:42:17.146+0000:This cannot compile with JDK 1.5


davsclaus:(svn)camel[trunk:1031468]/components/camel-soap$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_24
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.4"" arch: ""i386"" Family: ""unix""


{code}
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure

/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[56,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[59,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
/Users/davsclaus/workspace/camel/components/camel-soap/target/generated/src/test/java/com/example/customerservice2/CustomerServiceService.java:[63,8] cannot find symbol
symbol  : constructor Service(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service
{code}
davsclaus:1288917794:2010-11-05T08:43:14.340+0000:1288917794:2010-11-05T08:43:14.340+0000:Compiling with 1.6 works fine.
cschneider:1288919688:2010-11-05T09:14:48.887+0000:1288919745:2010-11-05T09:15:45.168+0000:I guess the dependency to the jaxb and jaxws annotations apis are missing. I can not correct this from work but I can take a look from home later today. It would be nice to only add the jars for jdk 1.5 builds. I have seen that we already have a profile for jdk 1.5. 
njiang:1288919929:2010-11-05T09:18:49.245+0000:1288919929:2010-11-05T09:18:49.245+0000:When build the camel-soap with JDK 1.5, cxf will try to load the JAXWS 2.2 API instead of JAXWS 2.1 API which will introduce the below issue.
dkulp:1288940920:2010-11-05T15:08:40.218+0000:1288940920:2010-11-05T15:08:40.218+0000:

The two new deps need to move to normal scope, not test scope:

diff --git a/components/camel-soap/pom.xml b/components/camel-soap/pom.xml
index e610f4a..a1583f9 100644
--- a/components/camel-soap/pom.xml
+++ b/components/camel-soap/pom.xml
@@ -60,18 +60,16 @@
             <artifactId>jaxb-impl</artifactId>
         </dependency>
 
-               <!-- JAXWS api jars -->
-               <dependency>
+       <!-- JAXWS api jars -->
+       <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-ws-metadata_2.0_spec</artifactId>
             <version>1.1.2</version>
-            <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.apache.geronimo.specs</groupId>
             <artifactId>geronimo-jaxws_2.2_spec</artifactId>
             <version>1.0</version>
-            <scope>test</scope>
         </dependency>
 
         <!-- for testing -->

njiang:1288985368:2010-11-06T03:29:28.456+0000:1288985368:2010-11-06T03:29:28.456+0000:Just applied the patch that DanK provided, now the camel-soap should be OK now.
davsclaus:1303610271:2011-04-24T09:57:51.087+0000:1303610271:2011-04-24T09:57:51.087+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3309,Improvement,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Bengt Rodehav,0,0,2010-11-04 08:06:09+00:00,2012-09-06 20:59:39+00:00,"In Camel 2.5, the logic for changing directory for ftp/ftps/sftp has changed in order to fix the problems discussed in the following thread:


 http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-td2806817.html#a2807611


In Camel 2.5 changing of the remote directory is now done in a stepwise manner. This is a strategy not fit for production since it assumes that the logged in ftp/ftps/sftp user has access to all intermediate directories all the way down to its home directory. This is rarely the case.


Also, when testing ftp/sftp on Serv-U, a Windows based ftp/ftps/sftp server, it turns out that it reports the current directory in a ""Windows way"", e g /C:/temp/servu/user/sample/file2sftp. The topmost folder is not ""/"" but ""/C:"". This also breaks the new stepwise way of changing directory since it always tries to change to ""/"" if an absolute path is used.


I propose to introduce a configuration property to enable/disable stepwise changing of directories where disabling it should be the default. I will upload a patch shortly.","davsclaus:1288830405:2010-11-04T08:26:45.476+0000:1288830405:2010-11-04T08:26:45.476+0000:The stepwise is the behavior used in Camel 1.x and frankly we should have used all the time.

Just that in 2.0 we optimized this to avoid doing any CD commands. But as said on the mailing list, this doesn't work well with all FTP servers which expect you to traverse the folders using CD, in a stepwise manner.


rodehav:1288831456:2010-11-04T08:44:16.054+0000:1288831456:2010-11-04T08:44:16.054+0000:I must say I strongly disagree Claus. For the stepwise CD to work, the following must be true:

- The user's home directory is reported as ""/"" by the ftp server...
- ...OR the user is given access rights to all intermediate folders down to the home folder

The first prerequisite is probably rather common but nowhere near 100%, probably far less. The second prerequisite must be very unusual and more regarded as something missed by the ftp server administrator.

Add the fact that the implementation of the stepwise CD doesn't always work on Windows servers (or maybe just not on Serv-U, I don't really know), I think this is not a good default configuration. I would guess that the problems solved by stepwise CD are far less than the problems introduced.

Nevertheless, if there is a workaround via a configuration property I can accept (although I don't agree) that stepwise CD is the default. Remember that introducing this in Camel 2.5 actually did break code in Camel 2.4 regardless of how things were implemented in Camel 1.x.

Also, I would suggest you add a note on the documentation page about those two requisites above.

For me this is a critical showstopper, having it marked as an improvement is no good. Waiting for Camel 2.6 is not good enough either. Will you release a 2.5.1 in the near future?
davsclaus:1288832669:2010-11-04T09:04:29.044+0000:1288832669:2010-11-04T09:04:29.044+0000:Read the release notes, in the important chantes to consider when upgrading
http://camel.apache.org/camel-250-release.html

* The user's home directory is reported as ""/"" by the ftp server...
Well other ftp server may report differently. 

No we do not do minor releases. The next release will be 2.6. This is how we always have done it for Apache Camel.
Only when a release is in maintenance mode such as 1.x we do minor releases.

If you want supported and released versions of custom components etc. then consider looking at the professional support offerings out there.
Or do as many do, support it in-house.
rodehav:1288833611:2010-11-04T09:20:11.810+0000:1288833611:2010-11-04T09:20:11.810+0000:Claus, I don't want to make this into a long grunty discussion but..

I did read the release notes looking for ""ftp"". I did see the note about changing the ""cd <dir>, list files in cur dir"" style to the ""list files <dir>"" style. I didn't see anything wrong with that and I still don't. The problem is HOW you change directory not that you change directory. It's the stepwise approach that fails.

If you refer to ""If you use the FTP component (consumers) make sure to test it throughly as it has changed how it traverse the file structure."", I would argue that this is actually what I'm doing right now. I'm trying to verify that Camel 2.5 works before actually upgrading.

I guess I'll have to roll my own in-house version for a while longer then. Will upload a patch though that you can have a look at.
davsclaus:1288835182:2010-11-04T09:46:22.243+0000:1288835182:2010-11-04T09:46:22.243+0000:Yeah we love contributions

I would suggest to try changing the FtpConsumer to *not* CD into the home directory before it start polling for files.
I think this is your problem with the CD into / folder.

Then you can test if the remainder of the stepwise approach works with your systems.
If not then a bigger patch is needed to work more like it did before.
rodehav:1288835450:2010-11-04T09:50:50.103+0000:1288835450:2010-11-04T09:50:50.103+0000:This patch introduces the property ""enableStepwiseChangeDir"" with the default value of false.

rodehav:1288835799:2010-11-04T09:56:39.277+0000:1288835799:2010-11-04T09:56:39.277+0000:Sorry Claus, didn't see your suggestions in your last comment before I uploaded the patch.

Can you take a look at my patch. It's a very simple change. I guess you might want to change the default value to use stepwise changing of directory as default...

Actually, my problem is not the CD into the home directory before it starts polling for files. It's ALL CD's using an absolute path. If I use a relative path in my URI (which I normally do) then I later get the problem when camel-ftp is going back to the home directory after having listed (as a consumer). I also get the problem in sftp after having created the directory (as a producer).
davsclaus:1288836025:2010-11-04T10:00:25.857+0000:1288836025:2010-11-04T10:00:25.857+0000:Can you do a proper patch?
rodehav:1288836393:2010-11-04T10:06:33.689+0000:1288836393:2010-11-04T10:06:33.689+0000:OK, I guess I used the wrong ""diff tool"". Do you mean using ""svn diff"" instead?
davsclaus:1288836773:2010-11-04T10:12:53.858+0000:1288836773:2010-11-04T10:12:53.858+0000:Yes using svn diff from the camel-ftp directory. Then you got 1 file with all the changes.

See _creating patches_ here
http://camel.apache.org/contributing.html
rodehav:1288846692:2010-11-04T12:58:12.858+0000:1288846692:2010-11-04T12:58:12.858+0000:Svn patch format this time.
davsclaus:1288847201:2010-11-04T13:06:41.641+0000:1288847201:2010-11-04T13:06:41.641+0000:Have you tested your patch that it works on your system?
rodehav:1288847588:2010-11-04T13:13:08.027+0000:1288847588:2010-11-04T13:13:08.027+0000:I've only tested against Serv-U. I've tested ftp (consumer and producer) and sftp (consumer and producer). 

With the default value (stepwise disabled) all of these work. When I enable stepwise only ftp producer works (since for some reason the buildDirectory() method in FtpOperations never does stepwise CD).
davsclaus:1288908749:2010-11-05T06:12:29.349+0000:1288908749:2010-11-05T06:12:29.349+0000:Do you use recursive option for the consumer? If not can you test your patch with this option enabled and having files in different directories to be polled.
rodehav:1288918442:2010-11-05T08:54:02.916+0000:1288918442:2010-11-05T08:54:02.916+0000:I have never used the recursive option before which means that I can't tell you how it used to work for me before. However, I did some tests using my patch - not with good results at all:

It seems that Camel creates the local directories in the wrong place which gives me the wrong local (much too deep) directory structure. It's hard to explain exactly what it looks like but I suspect Camel is positioned on the wrong local directory - perhaps it is not correctly going back to the parent directory?

The interesting part is that I get the exact same failure regardless if I'm enabling stepwise or not, and actually regardless if I'm setting the recursive option to true or false. It seems that the very existence of a subdirectory in the polled directory is enough to trigger this error.

Do you know if any tests have been made with subdirectories? I don't know if this is a general problem or just a Serv-U problem, neither if it's a Camel 2.5 regression or not.
davsclaus:1288919551:2010-11-05T09:12:31.721+0000:1288919551:2010-11-05T09:12:31.721+0000:Yeah there are a lot of unit tests for camel-ftp. with and without recursive folders and whatnot.

I really suspected your patch to not work and hence wanted you to confirm.

Again I think your problem is that Camel will CD into the starting directory before polling and thats the root cause of your problem since it will then CD into /.
Try avoid doing this.
davsclaus:1288920687:2010-11-05T09:31:27.478+0000:1288920687:2010-11-05T09:31:27.478+0000:What version of FTP Server are you using?
And how is the ftp endpoint configured?

It would be easier if I can setup some test environment which resembles yours.
rodehav:1288951640:2010-11-05T18:07:20.862+0000:1288951640:2010-11-05T18:07:20.862+0000:I have now done a couple of recursive tests on Serv-U 10.2.0.2 and Filezilla Server 0.9.33 beta. Serv-U can be downloaded and evaluated for a month, Filezilla is freeware.

I think I was wrong when I said that the very existence of a subdirectory causes problems. It seems that ""recursive=true"" is required. I've done the following test on Serv-U - both without locking the user to the home directory and when I lock the user to the home directory. The latter will report the home directory as ""/"" and thus avoids the original ""stepwise"" problem. I've also done the test on Filezilla server to verify that it's not a Serv-U problem.

I have reverted to camel-ftp from the released Camel 2.5 version to exclude myself (and my patch) from disturbing the test. My test environment is a bit complex since I create the route with a lot of other options automatically (like for archiving, exception handling and such). The route I describe here is therefore not identical to what I've tested but I think it's close enough for you to reproduce the error.

My basic route is as follows:

from(""ftp://user@localhost/sample/file2ftp?password=password&recursive=true"").
to(""file:C:/temp/sample/file2ftp"");

If I drop a folder called ""connect"" with a subfolder called ""samples"" into <HOME>/sample/file2ftp then the folder hierarch being created in my local file system becomes:

C:/temp/sample/file2ftp/connect/connect
                                                 /samples/connect/samples 

Thus I get an extra ""connect/samples"" under the ""connect/samples"" directory.

I think this has to do with me not polling the ftp home directory but a directory two levels down in the home directory. If I change the route to

from(""ftp://user@localhost/?password=password&recursive=true"").
to(""file:C:/temp/sample/file2ftp"");

and drop the ""connect"" folder (with subfolder ""samples"") direct into <HOME> then it works correctly.

Thus, I think the problem with recursive is a bug in Camel 2.5 that is unrelated to the ""stepwise"" problem that this issue is about.

I'm interested to see whether you get the same results as me. If so, then one of us should create a new JIRA ticket for the recursive problem. As far as I can tell my patch works for the ""stepwise"" issue but I hope you will examine it as well.
rodehav:1288958659:2010-11-05T20:04:19.237+0000:1288958659:2010-11-05T20:04:19.237+0000:I've tested again using unaltered Camel 2.5 and now my recursive tests fail all the time. I can't seem to reproduce the scenario where it worked (dropping the hierarchy directly into <HOME>).

I'd appreciate if you would do some tests against either Serv-U or Filezilla Claus...
davsclaus:1289014652:2010-11-06T11:37:32.484+0000:1289014652:2010-11-06T11:37:32.484+0000:I setup tests on Windows with FileZilla Server. I just created one user (scott/tiger) and assigned a home directory for this user in
e:\ftp-home

Then I put in files in that folder as follows:
{code}
E:\ftp-home>dir /s /b
E:\ftp-home\foo.txt
E:\ftp-home\sub-a
E:\ftp-home\sub-a\a.txt
{code}

And then I did 2 tests with the following routes
{code}
                from(""ftp:localhost?username=scott&password=tiger&noop=true"")
                    .to(""file:target/ftptest"")
                    .to(""mock:result"");
{code}

And the recursive route
{code}
                from(""ftp:localhost?username=scott&password=tiger&noop=true&recursive=true"")
                    .to(""file:target/ftptest"")
                    .to(""mock:result"");
{code}

When running both tests they both works
davsclaus:1289014772:2010-11-06T11:39:32.068+0000:1289014772:2010-11-06T11:39:32.068+0000:Tests from the 1st route (non recursive)

FileZilla log
{code}
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> USER scott
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> 331 Password required for scott
(000010)06/11/2010 12:37:29 - (not logged in) (127.0.0.1)> PASS *****
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 230 Logged on
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> TYPE A
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 200 Type set to A
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> SYST
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 215 UNIX emulated by FileZilla
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> PORT 127,0,0,1,10,107
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 200 Port command successful
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> LIST
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 150 Opening data channel for directory list.
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 226 Transfer OK
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> PWD
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 257 ""/"" is current directory.
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> PORT 127,0,0,1,10,108
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 200 Port command successful
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> RETR foo.txt
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 150 Opening data channel for file transfer.
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 226 Transfer OK
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> CWD /
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> QUIT
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> 221 Goodbye
(000010)06/11/2010 12:37:29 - scott (127.0.0.1)> disconnected.
{code}

And the dir structure of the downloads
{code}
E:\workspace\camel\components\camel-ftp\target\ftptest>dir /s /b
E:\workspace\camel\components\camel-ftp\target\ftptest\foo.txt
{code}

In this simple test it download the foo.txt file from the FileZilla server and put the file in the expected directory on the consumer side.
davsclaus:1289014853:2010-11-06T11:40:53.826+0000:1289014853:2010-11-06T11:40:53.826+0000:Test from the 2nd route (recursive)

FileZilla log
{code}
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> USER scott
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> 331 Password required for scott
(000011)06/11/2010 12:40:07 - (not logged in) (127.0.0.1)> PASS *****
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 230 Logged on
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> TYPE A
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 Type set to A
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> SYST
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 215 UNIX emulated by FileZilla
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PORT 127,0,0,1,10,124
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 Port command successful
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> LIST
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 150 Opening data channel for directory list.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 226 Transfer OK
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CWD sub-a
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 250 CWD successful. ""/sub-a"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PORT 127,0,0,1,10,125
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 Port command successful
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> LIST
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 150 Opening data channel for directory list.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 226 Transfer OK
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CDUP
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 CDUP successful. ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PWD
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 257 ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PORT 127,0,0,1,10,126
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 Port command successful
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> RETR foo.txt
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 150 Opening data channel for file transfer.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 226 Transfer OK
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CWD /
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PWD
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 257 ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CWD /
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CWD sub-a
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 250 CWD successful. ""/sub-a"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> PORT 127,0,0,1,10,127
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 200 Port command successful
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> RETR a.txt
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 150 Opening data channel for file transfer.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 226 Transfer OK
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> CWD /
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> QUIT
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> 221 Goodbye
(000011)06/11/2010 12:40:07 - scott (127.0.0.1)> disconnected.
{code}

And the dir structure of the downloads
{code}
E:\workspace\camel\components\camel-ftp\target\ftptest>dir /s /b
E:\workspace\camel\components\camel-ftp\target\ftptest\foo.txt
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-a
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-a\a.txt
{code}

In this simple test it download the foo.txt file from the FileZilla server and put the file in the expected directory on the consumer side.

davsclaus:1289016324:2010-11-06T12:05:24.063+0000:1289016324:2010-11-06T12:05:24.063+0000:I have done another test with another user (camel/camel) which has its ftp home folder with the following structure
{code}
E:\ftp-camel>dir /s/b
E:\ftp-camel\one
E:\ftp-camel\one\two
E:\ftp-camel\one\two\foo.txt
E:\ftp-camel\one\two\sub-a
E:\ftp-camel\one\two\sub-b
E:\ftp-camel\one\two\sub-a\a.txt
E:\ftp-camel\one\two\sub-b\b.txt
{code}

As you can see this structure has 2 leading directories one/tow. And there are 2 sub folders (sub-a and sub-b)

The routes testing this is as follows:
{code}
                from(""ftp:localhost/one/two?username=camel&password=camel&noop=true"")
                    .to(""file:target/ftptest"")
                    .to(""mock:result"");
{code}

And the route with recursive
{code}
                from(""ftp:localhost/one/two?username=camel&password=camel&recursive=true&noop=true"")
                    .to(""file:target/ftptest"")
                    .to(""mock:result"");
{code}

davsclaus:1289016489:2010-11-06T12:08:09.403+0000:1289016534:2010-11-06T12:08:54.712+0000:If we run the first test (non recursive) we get

FileZilla log
{code}
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> USER camel
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> 331 Password required for camel
(000018)06/11/2010 13:06:43 - (not logged in) (127.0.0.1)> PASS *****
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 230 Logged on
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> TYPE A
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 200 Type set to A
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> PWD
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD one
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD two
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> SYST
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 215 UNIX emulated by FileZilla
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> PORT 127,0,0,1,7,140
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 200 Port command successful
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> LIST
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 226 Transfer OK
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD /
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> PWD
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD one
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD two
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> PORT 127,0,0,1,7,141
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 200 Port command successful
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> RETR foo.txt
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 226 Transfer OK
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> CWD /
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> QUIT
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> 221 Goodbye
(000018)06/11/2010 13:06:43 - camel (127.0.0.1)> disconnected.
{code}

And the downloaded file structure is as follows:
{code}
E:\workspace\camel\components\camel-ftp\target\ftptest>dir /s/b
E:\workspace\camel\components\camel-ftp\target\ftptest\foo.txt
{code}

n this simple test it download the foo.txt file from the FileZilla server and put the file in the expected directory on the consumer side.
Notice that we don't have the leading one/two folders in the downloaded structure which is expected.
davsclaus:1289016641:2010-11-06T12:10:41.808+0000:1289016641:2010-11-06T12:10:41.808+0000:In the recursive test we expect it to be able to download all 3 files

FileZilla log
{code}
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> USER camel
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> 331 Password required for camel
(000020)06/11/2010 13:09:37 - (not logged in) (127.0.0.1)> PASS *****
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 230 Logged on
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> TYPE A
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 Type set to A
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PWD
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD one
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD two
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> SYST
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 215 UNIX emulated by FileZilla
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PORT 127,0,0,1,7,235
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> LIST
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD sub-a
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-a"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PORT 127,0,0,1,7,236
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> LIST
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CDUP
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 CDUP successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD sub-b
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-b"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PORT 127,0,0,1,7,237
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> LIST
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CDUP
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 CDUP successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD /
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PWD
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD one
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD two
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> PORT 127,0,0,1,7,238
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> RETR foo.txt
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> CWD /
(000020)06/11/2010 13:09:37 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> PWD
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD one
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD two
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD sub-a
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-a"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> PORT 127,0,0,1,7,239
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> RETR a.txt
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD /
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> PWD
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD one
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD two
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD sub-b
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-b"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> PORT 127,0,0,1,7,240
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 200 Port command successful
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> RETR b.txt
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 226 Transfer OK
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> CWD /
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> QUIT
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> 221 Goodbye
(000020)06/11/2010 13:09:38 - camel (127.0.0.1)> disconnected.
{code}

And the downloaded file structure is as follows:
{code}
E:\workspace\camel\components\camel-ftp\target\ftptest>dir /s/b
E:\workspace\camel\components\camel-ftp\target\ftptest\foo.txt
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-a
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-b
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-a\a.txt
E:\workspace\camel\components\camel-ftp\target\ftptest\sub-b\b.txt
{code}

In this simple test it download the 3 files from the FileZilla server and put the file in the expected directory on the consumer side.
Notice that we don't have the leading one/two folders in the downloaded structure which is expected.

rodehav:1289021164:2010-11-06T13:26:04.138+0000:1289021164:2010-11-06T13:26:04.138+0000:Very impressive testing Claus. I think we must assume that the recursive polling works in Camel 2.5 given your tests. I'll have to figure out why I get my strange results but lets ignore that for now.

Back to this issue (3309) then. I tested the recursive stuff on your request. Apparently there is something in my environment that causes problems with the recursive option but I get the exact same results whether I use plain Camel 2.5 or my patch. I think my patch solves the problems I'm experiencing with the stepwise change of directory. In fact if I set ""enableStepwiseChangeDir=true"" then my patch doesn't really change anything from Camel 2.5 (so it should be harmless). If I set ""enableStepwiseChangeDir=false"", then the directory is always changed in one go instead of stepwise. This has solved my problems with Serv-U and causes no problems with Filezilla. If you decide to introduce this option (or something similar) I truly believe that stepwise changing of directory should not be default but for those (rare in my opinion) cases where it's needed then it can be manually configured using this option.

davsclaus:1289023602:2010-11-06T14:06:42.448+0000:1289023602:2010-11-06T14:06:42.448+0000:The next test is to store the files using an absolute path as Bengt did in his tests.

So we have this route, notice it stores the file in E:\temp\sample\file2ftp folder
{code}
                from(""ftp:localhost/one/two?username=camel&password=camel&recursive=true&noop=true"")
                    .to(""file:E:/temp/sample/file2ftp"")
                    .to(""mock:result"");
{code}

And the log from File Zilla
{code}
FileZilla Server version 0.9.37 beta
Copyright 2001-2010 by Tim Kosse (tim.kosse@filezilla-project.org)
Connecting to server...
Connected, waiting for authentication
Logged on
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> USER camel
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> 331 Password required for camel
(000021)06/11/2010 15:04:06 - (not logged in) (127.0.0.1)> PASS *****
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 230 Logged on
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> TYPE A
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Type set to A
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PWD
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD one
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD two
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> SYST
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 215 UNIX emulated by FileZilla
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,94
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> LIST
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD sub-a
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-a"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,95
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> LIST
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CDUP
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 CDUP successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD sub-b
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-b"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,96
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> LIST
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CDUP
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 CDUP successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD /
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PWD
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD one
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD two
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,97
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> RETR foo.txt
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD /
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PWD
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD one
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD two
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD sub-a
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-a"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,98
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> RETR a.txt
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD /
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PWD
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 257 ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD one
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD two
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD sub-b
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/one/two/sub-b"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> PORT 127,0,0,1,17,99
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 200 Port command successful
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> RETR b.txt
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 226 Transfer OK
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> CWD /
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 250 CWD successful. ""/"" is current directory.
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> QUIT
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> 221 Goodbye
(000021)06/11/2010 15:04:06 - camel (127.0.0.1)> disconnected.
{code}

And the downloaded file structure is as follows:
{code}
E:\temp\sample\file2ftp>dir /s/b
E:\temp\sample\file2ftp\foo.txt
E:\temp\sample\file2ftp\sub-a
E:\temp\sample\file2ftp\sub-b
E:\temp\sample\file2ftp\sub-a\a.txt
E:\temp\sample\file2ftp\sub-b\b.txt
{code}

As you can see the files are now downloaded to the absolute path and in the expected directory structure
davsclaus:1289023697:2010-11-06T14:08:17.806+0000:1289023697:2010-11-06T14:08:17.806+0000:Bengt what FTP server do you using in production? And what OS are you using?
rodehav:1289033759:2010-11-06T16:55:59.132+0000:1289033759:2010-11-06T16:55:59.132+0000:We use Serv-U in production running on Windows 2003 Server. However, our ftp server (Serv-U) is currently not used by our own software (using Camel). We run a hosting setup for our customer. When our customer's partners send or receive files to/from our customer then they are clients to Serv-U. When our customer needs to send or receive files to its partners, then our software is used as a client to the partners' servers. This is done using ftp, ftps or sftp (and Camel) depending on partner.

I honestly don't know what ftp servers the partners use. I know that at least one runs on z/OS. I will try to find that out but not everyone in the finance business wants to expose what internal software they use. I did check one of their servers (which we communicate with using sftp) using a GUI based sftp client. I could then see that the home directory was not referred to as ""/"" and that we did not have access to the intermediate folders leading down to the home directory. This was one of the reasons I created this JIRA ticket since stepwise changing of directory will not work.
rodehav:1289049955:2010-11-06T21:25:55.139+0000:1289049955:2010-11-06T21:25:55.139+0000:Like I wrote earlier, the URI I use is a bit more complicated than I wrote here since my software has logic for changing the URI in different ways. I've picked my URI apart bit by bit to see if I can get the recursive method to work (like it works for you Claus). I turns out that I always add the following option to the ""toUri"":

  ?tempFileName=${file:name.noext}.tmp

This is to make sure that any software reading the file that is being transferred don't start reading the file before it is completely transferred. Although it might not make sense to have this on the to(""file:...""), it does so in our case. This is because we download files into a DMZ. We then have another instance of our software (using Camel) that moves the files from the DMZ into the secure zone. We don't want that other instance to start reading the files to early. Now that I think of it, the other instance of our software actually acts as a client to Serv-U contrary to what I wrote before.

It seems like this option is causing the problems. Claus, can you add the above option to your ""toUri"" to see if you get the same problem?
davsclaus:1289092617:2010-11-07T09:16:57.130+0000:1289092617:2010-11-07T09:16:57.130+0000:I ran the last test (from above) using Camel 2.4.0.

FileZilla logs
{code}
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> Connected, sending welcome message...
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> 220-FileZilla Server version 0.9.37 beta
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> 220-written by Tim Kosse (Tim.Kosse@gmx.de)
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> 220 Please visit http://sourceforge.net/projects/filezilla/
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> USER camel
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> 331 Password required for camel
(000005)07/11/2010 10:13:03 - (not logged in) (127.0.0.1)> PASS *****
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 230 Logged on
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> TYPE A
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Type set to A
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> SYST
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 215 UNIX emulated by FileZilla
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,122
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> LIST one/two
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,123
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> LIST one/two/sub-a
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,124
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> LIST one/two/sub-b
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for directory list.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,125
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> RETR one/two/foo.txt
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,126
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> RETR one/two/sub-a/a.txt
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> PORT 127,0,0,1,4,127
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 200 Port command successful
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> RETR one/two/sub-b/b.txt
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 150 Opening data channel for file transfer.
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 226 Transfer OK
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> QUIT
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> 221 Goodbye
(000005)07/11/2010 10:13:03 - camel (127.0.0.1)> disconnected.
{code}

As you can see Camel 2.4.0 does not use any CD command at all.
However as said some FTP servers doesn't handle this. For example they can't even do a LIST xxx where xxx is directory name.

Bengt I suspect in your case you connect to some partner servers using SFTP, and those servers are likely mainframes AS/400 z/os as the likes.
And they may not have setup FTP in a sensible way. So when you login you are not confined to an user directory. And they may not use symbolic links to let you
the ftp user traverse directories which are physically outside the FTP home structure.

To support your kind of use-cases, we would have to incorporate both ways
- as in 2.4.0
- the new way using CD


rodehav:1289094345:2010-11-07T09:45:45.364+0000:1289094345:2010-11-07T09:45:45.364+0000:Yes the Camel 2.4 way will work for me. However, as I've said before, the problem is not about changing the directory or not. I haven't found a case where changing the directory leads to any problems. It's how Camel changes the directory that is the problem. Changing the directory stepwise will only work when a user is confined to the home directory AND the ftp server reports the home directory as root. I've done a whole lot of ftp'ing in my days and I can assure you that lots of real world ftp servers will be inaccessible if this technique is used.

Since changing the directory is not a known problem I think it's better to stay with changing the directory (since that solves a number of problems that you described) but not necessarily in a stepwise manner. If not, then there is no way to support servers that require you to be in the current directory in order to list files but that do not work with the stepwise changing of directories.

Complete flexibility would of course be the best. Then you would have on option, similar to the one in my patch, that allows to enable/disable stepwise changing of directory as well as another option that allows you to enable/disable whether to change directory at all. My suggestion for defaults would be to change directory but not in a stepwise manner.

Did you have a chance to do the recursive tests with the ""tempFileName"" option? It seems to me that this is a bug regarding recursive that is unrelated to this isssue. If you can verify my results then we should create a JIRA ticket for it.


rodehav:1289096919:2010-11-07T10:28:39.267+0000:1289096919:2010-11-07T10:28:39.267+0000:I got another idea Claus. I still prefer the two configuration options I wrote about (enable/disable changing of directory and enable/disable stepwise). But, lets put some intelligence in the option that controls the stepwise changing of directory. Let it have three allowed values:

- enable. This would force camel to change directory stepwise.
- disable. This would force camel to change directory in one go (not stepwise).
- auto. Camel would check if the initial directory entered (the home directory) is reported as ""/"" or not. If yes, then stepwise would be enabled otherwise it would be disabled. This option would be the default and I think that it would very rarely need to be overridden.

What do you think?
davsclaus:1289102163:2010-11-07T11:56:03.529+0000:1289102163:2010-11-07T11:56:03.529+0000:Yeah good idea Bengt.

However at first I have restored the Came 2.4 behavior when you set the option {{stepwise=false}}.
I did test this locally and added unit tests etc. so it seems working as it did in Camel 2.4.

Could you test from latest source code on your system?

trunk: 1032261

Then we can work on finding a good name for the option and the number of option it should support.

I am a bit unsure about the auto because it enforces more complex logic in Camel to detect the situation. I have not seen any FTP server not return back that the initial home directory is ""/"", or that it does not start with ""/"". 
rodehav:1289141542:2010-11-07T22:52:22.138+0000:1289141542:2010-11-07T22:52:22.138+0000:Most things work with your change but not all. The ftp/sftp consumers work. The ftp producer work but that was never a problem because for some reason stepwise changing of directory wasn't used there.

What doesn't work is sftp producer. I don't get an exception in the log but I get the following:


2010-11-07 23:35:27,382 | WARN  | sample/file2sftp | RemoteFileProducer               | t.file.remote.RemoteFileProducer   72 | Writing file failed with: Cannot change directory to: /

I haven't had time to look further into why this happens but there is still a problem.

What about the recursive problems? Could you verify the error if you added the following option?

   ?tempFileName=${file:name.noext}.tmp
rodehav:1289174805:2010-11-08T08:06:45.237+0000:1289175109:2010-11-08T08:11:49.466+0000:I've looked into this further. The problem is in the buildDirectory() method of SftpOperations. At the end of the method an attempt is made to go back to the original directory. This is being done stepwise. If you change the following line:
\\
\\
{code}
  changeCurrentDirectory(originalDirectory);
{code}

to this:

{code}
  try {
    channel.cd(originalDirectory);
  } catch (SftpException e) {
    throw new GenericFileOperationFailedException(""Cannot change directory to: "" + originalDirectory, e);
  }
{code}

...then it works.
davsclaus:1289179794:2010-11-08T09:29:54.849+0000:1289179794:2010-11-08T09:29:54.849+0000:Thanks Bengt. I have updated the source code.

Can you re-test it on your system?
davsclaus:1289184302:2010-11-08T10:45:02.910+0000:1289184302:2010-11-08T10:45:02.910+0000:I have updated the wiki documentation at FTP about the stepwise option
https://cwiki.apache.org/confluence/display/CAMEL/FTP2
rodehav:1289184390:2010-11-08T10:46:30.245+0000:1289184390:2010-11-08T10:46:30.245+0000:I've now tested ftp(consumer and producer) as well as sftp(consumer and producer) ant it works. I haven't tested ftps since I think it reuses the logic from ftp - right?

The four tests succeed when I set ""stepwise=false"", otherwise they fail. I assume this is your intention.

When looking at the code it seems like you've changed your approach a little bit (correct me if I'm wrong). The stepwise parameter is now used in two different ways:

1. When consuming, the directory is not changed at all if stepwise=false
2. When producing, the directory is changed (because it has to I guess) but it's not done in a stepwise manner if stepwise=false

In summary, stepwise=false sometimes prevents changing of directory at all and sometimes just prevents the changing of directory to be done in a stepwise manner (as the name implies). It works but it's a bit confusing what the stepwise parameter actually means. Perhaps we should start thinking about how many configuration parameters we need and what they shall be called?

rodehav:1289189660:2010-11-08T12:14:20.440+0000:1289189660:2010-11-08T12:14:20.440+0000:Somehow I had missed your last post about the wiki - just saw it...

The documentation is very thorough(and good). However, the ""stepwise"" option is a bit confusing as I wrote in my last post. Like you say in the wiki, when stepwise=true, the directory is changed stepwise but when stepwise=false, the directory is not changed at all.

If this were the only effect then the option should be called something like ""changeDirectoryWhenListing"" or ""consumerChangeDirectory"" (bad names but you get the idea). However, when producing files (""PUT""), the directory is changed (contrary to what the wiki says) but the stepwise option then controls whether it's done stepwise or in one go. In this respect the name of the option seems more correct than in the consumer case.

I think we must use two different options rather than reusing the same option for two purposes. We need one option that controls whether or not to change directory in a consuming situation and another option that controls whether any change of directory should be done stepwise or not.

Also, I think a little warning regarding the stepwise=true scenario is appropriate, e g:
\\
\\
{code}
Note that stepwise changing of directory will in most cases only work when the user is confined to it's home directory and when the home directory is reported as ""/"".
{code}


davsclaus:1289191754:2010-11-08T12:49:14.253+0000:1289191754:2010-11-08T12:49:14.253+0000:It would be too much work having 2 options which renders 2x2 = 4 combinations.
We'll keep what we got now which supports both the old behavior from 2.4 and the new from 2.5 onwards.

We should however use a better option name than {{stepwise}} as you say.
davsclaus:1289196114:2010-11-08T14:01:54.159+0000:1289196146:2010-11-08T14:02:26.228+0000:I have updated the wiki
- your note
- the fact that stepwise is meant for the consumer, but the fact that the producer may use CD if you upload a file and have autoCreate=true

Now we are left with finding a good name for this new {{stepwise}} option.

It may not even have to be a boolean, we can use a String so we can introduce different modes in the future
- consumerMode
- consumerChangeDirectoryMode
- mode
- changeDirectoryMode
- etc.

And then have current values for the option
- default
- stepwise
rodehav:1289203374:2010-11-08T16:02:54.375+0000:1289203374:2010-11-08T16:02:54.375+0000:I'll have to think a little more about the name - it's tricky...

I looked at your wiki changes and they look fine except for one thing:
\\
\\
{code}
Camel FTP do not use the stepwise option when uploading files.
{code}
\\
Is this correct? From what I saw before, it looked like the buildDirectory() method would use the changeCurrentDirectory() method which
in turn checks the stepwise option. This means that the producer will change directory in a stepwise manner or not depending on 
the ""stepwise"" option. Perhaps the buildDirectory() method should not call the changeCurrentDirectory() method at all but always change
directory in one go. This is how it was done in FtpOperations before (but not in SftpOperations).

davsclaus:1289203732:2010-11-08T16:08:52.536+0000:1289203732:2010-11-08T16:08:52.536+0000:Yes its correct and its documented that it may have to use the CD command when uploading a file and it has to create the directory. You can control this using the autoCreate option. How Camel creates this directory is not dependent on whether you have configured stepwise=true or false.
rodehav:1289211009:2010-11-08T18:10:09.106+0000:1289211009:2010-11-08T18:10:09.106+0000:Claus, I kind of thought that this was your intention but that's not how it works. I confirmed in my tests that I have to set
stepwise=true even for the producer to work. The reason is that in the buildDirectory() method there is a finally block
that calls changeCurrentDirectory() which acts differently depending on the stepwise parameter. A few posts back I
showed how that code could be changed in SftpOperations to become independent of the stepwise parameter. It's in
the post with the timestamp ""08/Nov/10 03:06 AM"". FtpOperations must be changed in a similar way to become 
independent of the stepwise parameter. If you change in those two places then the code will be in accord with the wiki.

About the recursive problem Claus. Do you want me to create a JIRA ticket for that? I wanted to wait until you have
verified the problem I found just to make sure the problem isn't specific to my local environment.
davsclaus:1289285039:2010-11-09T14:43:59.497+0000:1289285039:2010-11-09T14:43:59.497+0000:What do you mean about the recursive problem?
The option tempFileName is only for the producer. So it makes no sense with recursive, as recursive option is only for the consumer.

So can you tell me what you mean the problem is?
davsclaus:1289285263:2010-11-09T14:47:43.866+0000:1289285263:2010-11-09T14:47:43.866+0000:I have updated the wiki about stepwise and producer, telling that its used if autoCreate is enabled as well.
rodehav:1289300347:2010-11-09T18:59:07.417+0000:1289300347:2010-11-09T18:59:07.417+0000:The wiki is looking good Claus.
\\
\\
Remember you asked me to try my patch with recursive=true? I got problems with this but all your tests succeeded. I then 
found out that I only got problems when using the tempFileName option. I explained this in the comment with the timestamp
""06/Nov/10 05:25 PM"" above. Therefore I would like you to test a route similar to this:
\\
\\
{code}
from(""ftp:user@localhost?password=password&recursive=true"")
.to(""file:target/ftptest?tempFileName=${file:name.noext}.tmp"");
{code}
\\
\\
The created local directory structure is not correct when I do this test. It seems like the combination of a recursive consumer
and a producer using tempFileName doesn't work correctly.
davsclaus:1289348117:2010-11-10T08:15:17.176+0000:1289348117:2010-11-10T08:15:17.176+0000:You have to use {{file:onlyname.noext}} 

{code}
from(""ftp:user@localhost?password=password&recursive=true"")
.to(""file:target/ftptest?tempFileName=${file:onlyname.noext}.tmp"");
{code}
rodehav:1289365728:2010-11-10T13:08:48.444+0000:1289365728:2010-11-10T13:08:48.444+0000:Yes, of course Claus. Sorry for taking your time with this - stupid mistake on my part.
davsclaus:1289521255:2010-11-12T08:20:55.571+0000:1289521255:2010-11-12T08:20:55.571+0000:Lets keep it as is. 
rodehav:1289528279:2010-11-12T10:17:59.444+0000:1289528279:2010-11-12T10:17:59.444+0000:Yes Claus, I think all known issues are addressed. If the future shows us more combinations that must be supported then we can deal with them at that time.

Thanks for your help.
davsclaus:1289528646:2010-11-12T10:24:06.324+0000:1289528646:2010-11-12T10:24:06.324+0000:Bengt the community thanks you for reporting this issue and helping with finding the solution.
And sorry for causing you trouble with  the Camel 2.5 changes. However looks like we have a solution which supports a broader range of end users.
davsclaus:1303610245:2011-04-24T09:57:25.117+0000:1303610245:2011-04-24T09:57:25.117+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3308,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-04 07:49:17+00:00,2011-04-24 09:57:07+00:00,We could leverage some new features of CXF 2.3.x by doing this.,"njiang:1288829322:2010-11-04T08:08:42.306+0000:1288829322:2010-11-04T08:08:42.306+0000:As the continuation API change since CXF 2.3.0, camel-cxf will not support the latest CXF 2.2.x after this change.
But if you set the Synchronous option to be true, you can still let camel-cxf play with CXF 2.2.x.
wtam:1288849997:2010-11-04T13:53:17.753+0000:1288849997:2010-11-04T13:53:17.753+0000:Just stating the obvious, but please make sure camel-cxf 2.6 is backward compatible (in APIs and config) and fully support CXF 2.2.x if we do upgrade to CXF 2.3 in Camel 2.6.
njiang:1288851683:2010-11-04T14:21:23.141+0000:1288851683:2010-11-04T14:21:23.141+0000:@William,

Yeah, we need to keep the backward compatible, I will revert the change of CxfConsumer to see if the change can work with the latest CXF 2.2.x.

davsclaus:1288852032:2010-11-04T14:27:12.911+0000:1288852032:2010-11-04T14:27:12.911+0000:Why do we need to be compatible with CXF 2.2?

We have upgraded from CXF 2.0 -> 2.1 and 2.1 -> 2.2 in previous Camel releases.
And CXF 2.2.x is reaching end of line. Dan Kulp says that there is one last release of 2.2.x planned.
njiang:1288853374:2010-11-04T14:49:34.488+0000:1288853374:2010-11-04T14:49:34.488+0000:@ Claus 
There may be some user still want to use CXF 2.2.x and Camel 2.6.0.

FYI, I cannot make camel-cxf compile with CXF 2.2.11 and CXF 2.3.0 at the same time due to the InterceptorProvider API change.

wtam:1288853574:2010-11-04T14:52:54.221+0000:1288853574:2010-11-04T14:52:54.221+0000:@clause

we brought up the question to user/dev lists.
davsclaus:1288853814:2010-11-04T14:56:54.069+0000:1288853814:2010-11-04T14:56:54.069+0000:@Tam

Ah that is very good way to get more feedback. Good call.
davsclaus:1288853841:2010-11-04T14:57:21.058+0000:1288853841:2010-11-04T14:57:21.058+0000:See nabble
http://camel.465427.n5.nabble.com/DISCUSS-CXF-2-3-upgrade-in-Camel-2-6-tp3250145p3250145.html
dkulp:1288854088:2010-11-04T15:01:28.139+0000:1288854088:2010-11-04T15:01:28.139+0000:

Willem,

It won't COMPILE with 2.2, but I THINK it should still RUN with 2.2 as it's just the generics.  I'm not 100% sure on that, but is that easily checkable?
wtam:1288856862:2010-11-04T15:47:42.048+0000:1288856862:2010-11-04T15:47:42.048+0000:@dan

Junit tests only test against CXF 2.3, then?  So, testing with CXF 2.2 is pretty much done by hand?
njiang:1288894103:2010-11-05T02:08:23.799+0000:1288894103:2010-11-05T02:08:23.799+0000:I did some tests on camel-cxf by using CXF 2.3.0 and CXF 2.2.11,  after revert the change of CxfConsumer, all the tests were passed.
Just as Dan said camel-cxf.jar can run with CXF 2.2.11, now the camel-cxf can still support CXF 2.2.x and CXF 2.3.x at the same time :)

I will committed the change of CxfConsumer into the trunk after we fork Camel 2.x branch.
hadrian:1288894163:2010-11-05T02:09:23.543+0000:1288894163:2010-11-05T02:09:23.543+0000:@william, it doesn't have to be done by hand, it's just hard to do it in the camel-cxf component as you cannot depend on two different versions of the same artifact. It is however entirely possible to test it automatically in a separate project.
njiang:1288894255:2010-11-05T02:10:55.420+0000:1288894255:2010-11-05T02:10:55.420+0000:@William
I added a profile of cxf-2.2.x, so you can run ""mvn test -Pcxf-2.2.x"" after compiling the camel-cxf with ""mvn install"".
The tests should be ran with CXF 2.2.11 now.

davsclaus:1303610227:2011-04-24T09:57:07.245+0000:1303610227:2011-04-24T09:57:07.245+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3307,Sub-task,Minor,None,None,"
None
",Closed,Fixed,2.7.0,Richard Kettelerij,Claus Ibsen,0,0,2010-11-04 07:17:21+00:00,2011-10-25 11:36:17+00:00,We need to add the new camel-spring-ws component as a feature.,"davsclaus:1288833726:2010-11-04T09:22:06.758+0000:1288833726:2010-11-04T09:22:06.758+0000:Got started on the feature in rev: 1030865.

However for some odd reason the SpringWsTest in camel-itest-karaf does not register the spring-ws component and thus it fails.
I can't see any errors in the feature file.
davsclaus:1298329315:2011-02-22T07:01:55.641+0000:1298329315:2011-02-22T07:01:55.641+0000:We have a features file now"
0,CAMEL-3306,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Madhav Bhargava,0,0,2010-11-03 16:33:38+00:00,2011-04-24 09:57:49+00:00,"The description of this issue is at [1].


[1] http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3248727",davsclaus:1303610269:2011-04-24T09:57:49.145+0000:1303610269:2011-04-24T09:57:49.145+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3305,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2010-11-03 13:27:26+00:00,2015-02-02 18:21:00+00:00,"See this blog
http://www.cowtowncoder.com/blog/archives/2010/10/entry_431.html",davsclaus:1422872460:2015-02-02T18:21:00.558+0000:1422872460:2015-02-02T18:21:00.558+0000:We did this for Camel 2.15
0,CAMEL-3304,New Feature,Major,None,2.6.0,"
None
",Closed,Invalid,2.6.0,Unassigned,Claus Ibsen,2,2,2010-11-03 09:55:15+00:00,2011-10-25 11:36:19+00:00,"We need a feature for installing camel-web into Apache Karaf. It can be a bit of pain doing this the osgi way so we should provide such a feature.


Look at the AMQ web console feature how it may be done.","davsclaus:1288749822:2010-11-03T10:03:42.293+0000:1288749822:2010-11-03T10:03:42.293+0000:See
http://repo2.maven.org/maven2/org/apache/activemq/activemq-karaf/5.4.1/activemq-karaf-5.4.1-features.xml
http://repo2.maven.org/maven2/org/apache/activemq/activemq-web-console/5.4.1/activemq-web-console-5.4.1.pom
boday:1294215858:2011-01-05T16:24:18.679+0000:1294215858:2011-01-05T16:24:18.679+0000:if someone has the steps to successfully deploy this in Karaf (no luck myself, see [CAMEL-2366|https://issues.apache.org/jira/browse/CAMEL-2366]), I'll add this feature to the camel features.xml...
davsclaus:1294556804:2011-01-09T15:06:44.536+0000:1294556804:2011-01-09T15:06:44.536+0000:This ticket seems fucked after the JIRA migrating. I will have to created a new ticket."
0,CAMEL-3303,Bug,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0, 2.4.0, 2.5.0",None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-03 02:32:18+00:00,2011-04-24 09:58:27+00:00,"Here is the mailing thread[1] about it.


[1] http://camel.465427.n5.nabble.com/CXF-Startup-issue-with-Camel-in-OSGI-runtime-tp3241913p3247484.html","njiang:1288726458:2010-11-03T03:34:18.518+0000:1288726458:2010-11-03T03:34:18.518+0000:Exporting the META-INF.cxf.camel instead of META-INF.cxf to avoid the package conflict of cxf-bundle.
Now you should use
{code}
<import resource=""classpath:META-INF/cxf/camel/cxf-extension-camel.xml"" />
{code}

instead of 
{code}
<import resource=""classpath:META-INF/cxf/cxf-extension-camel.xml"" />
{code}
to use the camel transport module in OSGi with spring.
davsclaus:1303610307:2011-04-24T09:58:27.650+0000:1303610307:2011-04-24T09:58:27.650+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3302,Bug,Major,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Freeman Yue Fang,0,0,2010-11-02 12:02:50+00:00,2011-04-24 09:57:48+00:00,This is necessary when use JBI packaging for servicemix-camel ServiceUnit  so that we get chance to use SU classloader to scan packages in the ServiceUnit,"ffang:1288670680:2010-11-02T12:04:40.375+0000:1288670680:2010-11-02T12:04:40.375+0000:append patch to fix this issue
njiang:1288828259:2010-11-04T07:50:59.103+0000:1288828259:2010-11-04T07:50:59.103+0000:Applied the patch with thanks to Freeman, I also added an unit test to make sure the fallback is working.
davsclaus:1292670009:2010-12-18T19:00:09.134+0000:1292670009:2010-12-18T19:00:09.134+0000:There is an issue with concurrency in this, see CAMEL-3442
davsclaus:1303610268:2011-04-24T09:57:48.062+0000:1303610268:2011-04-24T09:57:48.062+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3301,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Bengt Rodehav,0,0,2010-11-02 09:34:28+00:00,2011-04-24 09:57:10+00:00,A new version of JSch has been released. The sftp implementation in camel-ftp uses JSch.,"jb@nanthrax.net:1288662309:2010-11-02T09:45:09.441+0000:1288662309:2010-11-02T09:45:09.441+0000:SMX4-659 will provide the jsch 0.1.44 bundle.
njiang:1288731770:2010-11-03T05:02:50.084+0000:1288731770:2010-11-03T05:02:50.084+0000:Update the parent/pom.xml and feature pom.xml for it in revision 1030334.
davsclaus:1303610230:2011-04-24T09:57:10.728+0000:1303610230:2011-04-24T09:57:10.728+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3300,Task,Minor,2.6.0,None,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Freeman Yue Fang,0,0,2010-11-02 06:20:11+00:00,2011-04-24 09:57:51+00:00,"when I use mvn -Psetup.eclipse I get some error complaining 
${jaxb-version} and ${jaxb-api-version} can't get resolved","ffang:1288650123:2010-11-02T06:22:03.291+0000:1288650123:2010-11-02T06:22:03.291+0000:attach patch which fix this issue
davsclaus:1288650886:2010-11-02T06:34:46.805+0000:1288650886:2010-11-02T06:34:46.805+0000:See nabble
http://camel.465427.n5.nabble.com/HEADS-UP-Removed-some-old-cruff-in-root-pom-xml-tp3241732p3241732.html
davsclaus:1288651642:2010-11-02T06:47:22.103+0000:1288651642:2010-11-02T06:47:22.103+0000:trunk: 1029961.
davsclaus:1303610271:2011-04-24T09:57:51.523+0000:1303610271:2011-04-24T09:57:51.523+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3299,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Dmitry Drozdov,0,0,2010-11-02 00:12:36+00:00,2011-04-24 09:57:29+00:00,"I'm calling a Camel proxy and passing it a single argument of type LinkedHashMap.
On the service side I'm waiting for a java.util.Map, so the converter BeanInvocation -> java.util.Map is called.
Finally it comes to BeanConverter:convertTo with type=java.util.Map and value class=BeanInvocation


then it goes to
            // maybe from is already the type we want
            if (from.isAssignableFrom(type)) 

{
                return body;
            }

where from=LinkedHashMap
and... the condition is false!


The LinkedHashMap is not assignable from java.util.Map,
but java.util.Map is assignable from LinkedHashMap and, I guess, that is what we want.


Please fix?



if (from.isAssignableFrom(type)) {
+ if (type.isAssignableFrom(from)) {","njiang:1288639116:2010-11-02T03:18:36.003+0000:1288639116:2010-11-02T03:18:36.003+0000:This bug was fixed in CAMEL-3082, please check out the latest released Camel 2.5.0 for it.
davsclaus:1303610249:2011-04-24T09:57:29.378+0000:1303610249:2011-04-24T09:57:29.378+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3298,Bug,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Willem Jiang,0,0,2010-11-01 08:38:50+00:00,2011-04-24 09:58:04+00:00,"Here is a the mail thread[1] which is discussing about it.
http://camel.465427.n5.nabble.com/XMPP-communication-not-closed-and-new-message-rejected-td3236657.html#a3236657","njiang:1288913547:2010-11-05T07:32:27.397+0000:1288913547:2010-11-05T07:32:27.397+0000:Applied the patch into revision 1031458.
davsclaus:1303610284:2011-04-24T09:58:04.152+0000:1303610284:2011-04-24T09:58:04.152+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3297,Task,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-31 07:52:26+00:00,2011-04-24 09:57:20+00:00,No Desc,"davsclaus:1288515357:2010-10-31T16:55:57.423+0000:1288515357:2010-10-31T16:55:57.423+0000:trunk: 1029409.
davsclaus:1303610240:2011-04-24T09:57:20.192+0000:1303610240:2011-04-24T09:57:20.192+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3296,Task,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Hadrian Zbarcea,Carl Johan Erik Edstrom,1,0,2010-10-30 05:29:42+00:00,2011-10-25 11:35:40+00:00,"Publish camel-blueprint schema(s) for easy inclusion in IDE tooling. 
Just like these exist http://camel.apache.org/schema/


Having camel-blueprint XSD validation in your IDE would help greatly.","davsclaus:1288483039:2010-10-31T07:57:19.755+0000:1288483039:2010-10-31T07:57:19.755+0000:Hadrian maybe you can take a look at this when you publish the XSD for the Camel 2.5 release. To include the schemas generated from camel-blueprint component.
gnodet:1291787692:2010-12-08T13:54:52.832+0000:1291787692:2010-12-08T13:54:52.832+0000:Btw, publishing the schema for 2.5 would be handy for existing users, and I suppose we need to improve the release process doc to make sure this one is also published.
hadrian:1294040707:2011-01-03T15:45:07.453+0000:1294040707:2011-01-03T15:45:07.453+0000:Done a few weeks back."
0,CAMEL-3295,Bug,Minor,2.5.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Carl Johan Erik Edstrom,0,0,2010-10-30 05:02:36+00:00,2011-04-24 09:57:44+00:00,"This is just a placeholder - things like this should work.



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0
            http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">


    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""camelBlueprint"">
        <route>
            <from uri=""jms:queue""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""connectionFactory"" ref=""jmsConnectionPool""/>
    </bean>

    <reference id=""jmsConnectionPool"" interface=""javax.jms.ConnectionFactory""/>

</blueprint>




Currently the jmsConnectionPool is not at all passed to the JmsComponent.
The usage of JmsTemplate as debated on the mailinglists I think is of a (currently) much lesser concern.
Especially comparing a little to the ProducerCode in the servicemix-jms components.",davsclaus:1303610264:2011-04-24T09:57:44.440+0000:1303610264:2011-04-24T09:57:44.440+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3294,New Feature,Major,2.4.0,Future,"
None
",Resolved,Duplicate,Future,Unassigned,Łukasz Dywicki,1,0,2010-10-29 15:05:17+00:00,2015-02-17 07:11:37+00:00,"Current dependency to org.springframework.osgi.context to versions [1.2.0,2.0.0) does not allow to run Camel with new version of SpringDM.","njiang:1288644707:2010-11-02T04:51:47.329+0000:1288644707:2010-11-02T04:51:47.329+0000:It looks like the Spring DM 2.x is not keeping update for a while, we could update the version rang if the 2.0.0 is released."
0,CAMEL-3263,Improvement,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Olivier Roger,0,0,2010-10-21 08:35:27+00:00,2011-10-25 11:36:13+00:00,"It would be more user friendly if it a String could be also be given instead of a Java List object.
In that case a separator would be necessary but I guess a blank space could be the default value. 


Sample of usage :



            <!-- optional -->
            <setHeader headerName=""CamelExecCommandSeparator"">
                <constant>,</constant>
            </setHeader>

            <setHeader headerName=""CamelExecCommandArgs"">
                <simple>arg1,arg2,arg3</simple> <!-- of course simple offers many more advance possibilities -->
            </setHeader> 




For more details, please see The mailling list discution on that topic","davsclaus:1287622789:2010-10-21T08:59:49.212+0000:1287622789:2010-10-21T08:59:49.212+0000:This applies in fact for Java DSL as well. The problem is to provide multiple args as a header, regardless if its Java DSL or Spring XML.
And you would like to have a single String with the args separated.

We should probably add an option to specify the separator and use comma as default.
- CamelExecCommandSeparator
Then you can set the header in case you use something else than comma

davsclaus:1287624858:2010-10-21T09:34:18.307+0000:1287624858:2010-10-21T09:34:18.307+0000:I got this working now. The component had already a String -> args parser which wasn't in use when using headers. But it was when using endpoint.
So I will fix this.

Then you separate args using space, just as you would type on the cmd line in the shell.
olivier.roger:1287624994:2010-10-21T09:36:34.790+0000:1287624994:2010-10-21T09:36:34.790+0000:That's great news.

I also think blank space is more fitted than comma since it will reproduce the shell behavior.
davsclaus:1287625037:2010-10-21T09:37:17.173+0000:1287625037:2010-10-21T09:37:17.173+0000:trunk: 1025906.

Now you can for example do, separated by space.
{code:xml}
<simple>arg1 arg2 arg3</simple>
{code}
olivier.roger:1295940462:2011-01-25T15:27:42.805+0000:1295940462:2011-01-25T15:27:42.805+0000:Claus,

Shouldn't the document be updated with this change ?
As far as I can see, only the *java.util.List<String>* is document for now.

http://camel.apache.org/exec.html
davsclaus:1295942148:2011-01-25T15:55:48.080+0000:1295942148:2011-01-25T15:55:48.080+0000:I added a row for the message headers using a String as the type."
0,CAMEL-3262,Improvement,Major,2.4.0,None,"
None
",Closed,Won't Fix,2.7.0,Christian Schneider,Christian Schneider,0,0,2010-10-21 06:39:05+00:00,2011-01-17 13:15:24+00:00,"I just found the jaxb2 reflection library. It parses jaxb annotated classes and returns infos on them. In camel soap we curently do this by hand.
Perhaps this lib can make the code easier.","davsclaus:1293156097:2010-12-24T10:01:37.708+0000:1293156097:2010-12-24T10:01:37.708+0000:Christian do you intend to work on this in the near future? If not push it for version 2.7
cschneider:1293157179:2010-12-24T10:19:39.252+0000:1293157179:2010-12-24T10:19:39.252+0000:Moved it to 2.7 as I am currently working mostly on CXF stuff.
cschneider:1295241324:2011-01-17T13:15:24.549+0000:1295241324:2011-01-17T13:15:24.549+0000:Checked the liberary ... I think it will not help us much in this case"
0,CAMEL-3261,Task,Minor,None,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Hadrian Zbarcea,Alexis Hassler,0,0,2010-10-20 16:12:07+00:00,2011-10-25 11:35:32+00:00,"Same pages containing broken links :


http://camel.apache.org/components.html
http://docs.jboss.org/hibernate/stable/validator/reference/en/html_single/
http://apache.org/cxf/
http://camel.apache.org/jms.html
http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/apcs02.html
http://camel.apache.org/transport.html
http://apache.org/cxf/
http://camel.apache.org/uris.html
http://docs.jboss.org/hibernate/stable/validator/reference/en/html_single/
http://apache.org/cxf/
http://http/hadoop.apache.org/hdfs/


==================


Some broken anchors


http://camel.apache.org/configuring-camel.html#ConfiguringCamel-SeeAlso anchor occurs multiple times


http://camel.apache.org/cxf.html#CXF-HowtoenableCXF%2527sLoggingOutInterceptorinMESSAGEmode not found
http://camel.apache.org/cxf.html#CXF-AvailableinRelease1.6.1andafter%2528onlyinPOJOmode%2529 not found
http://camel.apache.org/cxf.html#CXF-Howtopropagateacamelcxfendpoint%2527srequestandresponsecontext not found


http://camel.apache.org/enterprise-integration-patterns.html#EnterpriseIntegrationPatterns-Resources not found


http://camel.apache.org/intercept.html#Intercept-Intercept anchor occurs multiple times
http://camel.apache.org/intercept.html#Intercept-UsingfromSpringDSL anchor occurs multiple times


http://camel.apache.org/jbi.html#JBI-URIformat anchor occurs multiple times
http://camel.apache.org/jbi.html#JBI-Examples anchor occurs multiple times


http://camel.apache.org/oncompletion.html#OnCompletion-UsingonCompletionfromSpringDSL anchor occurs multiple times


(Created with Xenu Link Sleuth)","hadrian:1287565531:2010-10-20T17:05:31.854+0000:1287565531:2010-10-20T17:05:31.854+0000:Alexis, thanks for reporting this!"
0,CAMEL-3260,Improvement,Minor,2.5.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-20 14:00:15+00:00,2011-05-07 10:44:52+00:00,"When using lazy loading type converter and Spring XML you will trigger the type converters to be loaded on startup due XML configuration needs to convert from String -> other types etc.


So we should let Camel always load the type converters from camel-core as they are essential. Then the package scanning converters can be loaded on demand later.",
0,CAMEL-3259,Bug,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Alexis Hassler,0,0,2010-10-20 13:42:32+00:00,2011-04-24 09:57:39+00:00,"On the http://camel.apache.org/component.html, the link to the CamelContext class JavaDoc point to the old http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html URL, which is a dead link. There some additional dead links to other JavaDoc items.


Same issue on the following pages :
http://camel.apache.org/camelcontext.html
http://camel.apache.org/error-handler.html","davsclaus:1287555454:2010-10-20T14:17:34.783+0000:1287555454:2010-10-20T14:17:34.783+0000:Thanks for reporting.

If you find additional then fell free to comment or create a new ticket.
davsclaus:1303610259:2011-04-24T09:57:39.369+0000:1303610259:2011-04-24T09:57:39.369+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3258,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Not A Problem,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-20 13:03:00+00:00,2011-04-24 09:57:26+00:00,"If no completion configured then the aggregator will not send out messages.


You can have conditions in the headers at runtime so we should only WARN and not fail.","davsclaus:1290747138:2010-11-26T12:52:18.364+0000:1290747138:2010-11-26T12:52:18.364+0000:The aggregator EIP already validate this on startup
davsclaus:1303610246:2011-04-24T09:57:26.963+0000:1303610246:2011-04-24T09:57:26.963+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3257,Task,Trivial,2.5.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Martin Krasser,0,0,2010-10-20 05:26:08+00:00,2011-04-24 09:57:42+00:00,This should avoid https://issues.apache.org/activemq/browse/AMQ-2935,"davsclaus:1287524005:2010-10-20T05:33:25.452+0000:1287524005:2010-10-20T05:33:25.452+0000:And whats the reason for this?

There is also a 5.4.0 which Camel 2.4 was tested against?
mrt1nz:1287524405:2010-10-20T05:40:05.027+0000:1287524405:2010-10-20T05:40:05.027+0000:As described in https://issues.apache.org/activemq/browse/AMQ-2935 this is a race condition during shutdown of ActiveMQ. I found that when testing some Camel apps. The reason that this doesn't come up when running the Camel tests can either be that the race conditions are by chance different during test runs or the index is always re-created from scratch. Since all tests are running properly with ActiveMQ 5.3.2 (just ran all camel-jms tests with it), we're on the safe side when going back to 5.3.2.
njiang:1287529427:2010-10-20T07:03:47.172+0000:1287529427:2010-10-20T07:03:47.172+0000:I saw the same error when I run the test of cameinaction appendC without clean up the activemq-data directory yesterday.
+1 for changing the ActiveMQ version and we should add this known issue to Camel 2.5.0 release note. 
davsclaus:1287530134:2010-10-20T07:15:34.054+0000:1287530134:2010-10-20T07:15:34.054+0000:Okay let me downgrade it to 5.3.2.

In terms of known issues, its a known AMQ issue so we should add it to their documentation.
davsclaus:1287537692:2010-10-20T09:21:32.719+0000:1287537692:2010-10-20T09:21:32.719+0000:trunk: 1024561.
davsclaus:1303610262:2011-04-24T09:57:42.554+0000:1303610262:2011-04-24T09:57:42.554+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3256,Task,Critical,2.5.0,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Claus Ibsen,0,0,2010-10-20 05:14:47+00:00,2011-04-24 09:58:10+00:00,"See 
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-5-0-tp3216830p3216830.html


Using Maven assembly plugin 2.2-beta-4 works as we have used that for the previous releases.
Its the beta-5 which has this bug.


However the 2.2 GA has also been released so we could try this version as well?","hadrian:1288012501:2010-10-25T21:15:01.818+0000:1288012501:2010-10-25T21:15:01.818+0000:The upgrade of maven-assembly-plugin to 2.2 fixes the issue.
davsclaus:1303610290:2011-04-24T09:58:10.755+0000:1303610290:2011-04-24T09:58:10.755+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3255,New Feature,Minor,"2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Mark Ford,0,1,2010-10-19 20:09:37+00:00,2011-04-24 09:57:36+00:00,"The loading of type converters was changed from a lazy loading to an up front loading in a Camel 2.2. See issue CAMEL-2392 for details. Accordingly to the logging, it takes approximately 300 millis for this process to complete. 


The proposal is to allow the configuration of this loading strategy for cases where the initialization time of contexts is more important than the loading of type converters. The ""lazyLoadTypeConverters"" property on the context will default to false to preserve the current up front loading behavior as the default. If this value is set to true, then the loading of the type converters will happen when accessed.","massfords:1287490768:2010-10-19T20:19:28.252+0000:1287490768:2010-10-19T20:19:28.252+0000:Patch adds the property to the context and encapsulates the loading of the type converters using the strategy pattern. Unit test is included.

For example:

    protected static interface LoadTypeConvertersStrategy {
        public void starting() throws Exception;
        public void accessing();
        public void stopping();
    }

The default implementation of loading up front loads the type converters when the DefaultTypeConverter is started and is a no-op for the accessing method. The stopping method clears the type mappings. The benefit of the up front loading is that there are no synchronization points at runtime. The cost is that it takes longer to initialize the context.

The lazy load implementation defers the loading until the synchronized accessing method is invoked. The benefit of the lazy loading is that the context initializes faster. The cost is that there are synchronization points at runtime.

davsclaus:1287524771:2010-10-20T05:46:11.262+0000:1287524771:2010-10-20T05:46:11.262+0000:We should expose this option in the XML as well. I will work on that.
davsclaus:1287525558:2010-10-20T05:59:18.899+0000:1287525558:2010-10-20T05:59:18.899+0000:Hmm I still don't think its good to have synchronized blocks in the default case.
type converters is a bottleneck and hence there should be no contention issues at runtime.

Instead we should provide 2 kinds of type converters. The default, and the Lazy version. Then the lazy can use synchronized blocks in the code.
davsclaus:1287533204:2010-10-20T08:06:44.120+0000:1287533204:2010-10-20T08:06:44.120+0000:davsclaus:(svn)camel[trunk:1024541]/$ svn commit --message ""CAMEL-3255: Type converters can now be lazy loaded. Thanks to Mark Ford for patch which I can leverage pieces from.""
Sending        camel-core/src/main/java/org/apache/camel/CamelContext.java
Sending        camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java
Adding         camel-core/src/main/java/org/apache/camel/impl/converter/BaseTypeConverterRegistry.java
Replacing      camel-core/src/main/java/org/apache/camel/impl/converter/DefaultTypeConverter.java
Adding         camel-core/src/main/java/org/apache/camel/impl/converter/LazyLoadingTypeConverter.java
Sending        camel-core/src/main/java/org/apache/camel/spi/TypeConverterAware.java
Sending        camel-core/src/test/java/org/apache/camel/converter/JaxpTest.java
Adding         camel-core/src/test/java/org/apache/camel/impl/DefaultCamelContextLazyLoadTypeConvertersTest.java
Sending        camel-core/src/test/resources/log4j.properties
Sending        components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
Sending        components/camel-blueprint/src/test/resources/test.xml
Sending        components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java
Sending        components/camel-spring/src/main/java/org/apache/camel/spring/CamelContextFactoryBean.java
Adding         components/camel-spring/src/test/java/org/apache/camel/spring/CamelContextLazyLoadTypeConvertersTest.java
Sending        components/camel-spring/src/test/resources/log4j.properties
Adding         components/camel-spring/src/test/resources/org/apache/camel/spring/CamelContextLazyLoadTypeConvertersTest.xml
Transmitting file data ................
Committed revision 1024542.
massfords:1287550977:2010-10-20T13:02:57.531+0000:1287550977:2010-10-20T13:02:57.531+0000:Thanks for implementing this and adding the xml support. 

I'm just curious about your comment where you saw synchronization in the default case. While both states for the DefaultTypeConverter required invoking the accessing method at various times, only the strategy for the lazy load implemented a synchronized method for accessing. The result is that there was no synchronization for the default case.


davsclaus:1287553571:2010-10-20T13:46:11.990+0000:1287553571:2010-10-20T13:46:11.990+0000:Mark my bad, yeah it was only sync on the lazy.

Anyway we got a base class now and 2 diff impls. Easier in the future for a new variation.
davsclaus:1287553590:2010-10-20T13:46:30.773+0000:1287553590:2010-10-20T13:46:30.773+0000:And the logger now logs the classname with the version you use
massfords:1287634637:2010-10-21T12:17:17.483+0000:1287634637:2010-10-21T12:17:17.483+0000:Claus,

I respectively disagree that having a base class makes it easier for a future variation. I think the strategy pattern works better here than inheritance since it isolates the differences in behavior. It's conceivable that additional variations would want to change behavior in your base class but also have variations on their resource loading strategies. Inheritance will result in a proliferation of classes.

The problem I see with both implementations is that the check for whether the types converters are loaded is in many places. I based my restoration of the checks on the diff from CAMEL-2392. I'm assuming you did the same either by following my changes or referring back to the issue. In my solution it's troubling since the calls are hard to find since they're buried in method bodies in some places (as was done originally). In yours, it's obvious but awkward since the subclass does nothing but override a number of methods to do the check before calling super. It's not a good use of inheritance here.

A better solution in both cases would be to refactor the code to have a single point for accessing the type mappings. This single point could then invoke the strategy method to see if they were loaded or not. I was going to do this in a second pass after I had a little more time but figured I'd start with a smaller change. If there's interest on your part, I'm willing to submit another patch along these lines.
davsclaus:1287637509:2010-10-21T13:05:09.606+0000:1287637509:2010-10-21T13:05:09.606+0000:Yeah

We love contributions so you are welcome to work on improved patch.
I can also see your point.

But my solution ensure all access to the type converter ensures the lazy loading has occurred.
In your solution this check is buried in the code and you could potentially miss a couple of checks and then its flawed.

As the type converter is a bottleneck in Camel we must ensure the default setting is as fast as possible.
The lazy loading option is a niche feature.
davsclaus:1303610256:2011-04-24T09:57:36.841+0000:1303610256:2011-04-24T09:57:36.841+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3254,Improvement,Major,2.4.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Ashwin J. Karpe,Fintan Bolton,0,1,2010-10-19 14:04:14+00:00,2011-10-25 11:36:10+00:00,"The Spring grammar does not seem to provide a way of specifying multiple policies. E.g.


<route routePolicyRef=""myFirstPolicy"">
   ...
</route>


There is nowhere to inject a second policy, because there is only one attribute provided.


While it is possible to set multiple unrelated policies (for e.g ScheduledRoutePolicy and say Shiro SecurityPolicy) which necessitate a different Spring XML fragment, it is not possible at the moment to set multiple policy sets in Spring against a route. It is possible to set up different start, stop, suspend & resume times in the same policy.","davsclaus:1287468581:2010-10-19T14:09:41.804+0000:1287468581:2010-10-19T14:09:41.804+0000:The shiro is actually done on the route

{code}
<route>
   <poiicy ref=""shiroStuff""/>
   ..
</route>
{code}

But nevertheless I guess you may want multiple route policies, to throttle and have a ""sleep for the night"" policy.
You may also have a ""sorry this app is in maintenance mode"" policy where you can control it some custom way.

So a good idea to support.

An idea could be to support having support for specifying multiple in XML separated using comma
{code:xml}
<route routePolicyRef=""myFirstPolicy, mySecondPolicy, myThirdPolicy"">
...
</route>
{code}

davsclaus:1287468645:2010-10-19T14:10:45.266+0000:1287468645:2010-10-19T14:10:45.266+0000:And btw we should make sure you can specify multiple in Java DSL
You may do the same by using comma.

I think the current logic in the code is that there is only 1 policy supported currently.

akarpe:1296221040:2011-01-28T21:24:00.350+0000:1296221179:2011-01-28T21:26:19.694+0000:Attached a patch for this issue. This fix involves two components camel-core and camel-quartz. The unit tests for the fix are in camel-quartz.

Added both Spring and code based unit tests for the fix. Ran all tests for core and camel-quartz to verify that there are no side-effects of any kind.

I will be committing this fix to the 2.7.0 snapshot trunk and update the documentation.

Cheers,

Ashwin...


akarpe:1296222290:2011-01-28T21:44:50.017+0000:1296222290:2011-01-28T21:44:50.017+0000:Committed to the trunk as revision r1064901


davsclaus:1296257544:2011-01-29T07:32:24.021+0000:1296257544:2011-01-29T07:32:24.021+0000:Great, Ashwin do you mind adding an unit test to camel-spring.

We should have some existing route policy tests there. Its best when we have unit tests in the ""core"" components (core,spring) when it comes to testing features on the DSL.
And we need the documentation to be updated 
http://camel.apache.org/routepolicy.html

And a note on the release notes about this new improvement
http://camel.apache.org/camel-270-release.html
davsclaus:1296274626:2011-01-29T12:17:06.467+0000:1296274626:2011-01-29T12:17:06.467+0000:A few comments
=============

1)
dont add camel-core-xml or camel-core-osgi as dep. in maven. Those are _abstract_ components which gets embedded into spring / blueprint components.

2)
I have modified the logic a bit so {{RoutePolicyProcessor}} includes the list of policies. This avoid chaining a new processor for each policy.
This just makes the runtime route even longer and just a bit more hazzle when debugging etc.

The processor performs the same work for 1 or N route policy defined. It performs the begin/done callbacks.

3)
The DSL should be adjusted in both Java DSL and Spring XML.
When we added support for multiple route policies you could not set those in the Java DSL using objects. You would have to use the ref.
So I had added that. Also the javadoc should be updated to indicate that the {{routePolicyRef}} accepts multiple refs separated by comma.

4)
I will also add the unit test to spring component. Its important that the DSL is tested well in camel-core and camel-spring.


davsclaus:1296276898:2011-01-29T12:54:58.222+0000:1296276898:2011-01-29T12:54:58.222+0000:Implemented the 4 items above

trunk: 1065012.
akarpe:1296281782:2011-01-29T14:16:22.270+0000:1296281969:2011-01-29T14:19:29.619+0000:Hi Claus,

I was unsure about camel-core-xml since I was geting a CamelJMX... classloaderexception in eclipse when I tried to junit debug my code in unit tests with eclipse. It seemed to fix it and so I let it stay there. I guess I could have removed the dependency.
 
Thanks for the updates and unit tests. I was not sure where to add the unit tests and went with camel-quatz since it was a identified against a JIRA issue there.

I will be sure to add unit tests in camel-core/camel-spring when I make any changes to core next time.

Cheers,

Ashwin... "
0,CAMEL-3253,Task,Major,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Guillaume Nodet,Claus Ibsen,0,0,2010-10-19 12:36:07+00:00,2011-04-24 09:58:25+00:00,"This is a ticket as I kinda remember the camel-blueprint may lack the <errorHandler> in the XML.


So this is just a ticket so we wont forget to look into this if its the case.","gnodet:1291818951:2010-12-08T22:35:51.696+0000:1291818951:2010-12-08T22:35:51.696+0000:Btw, the current <errorHandler> support in spring also adds transactions support, but this is built into camel-spring, so I may go without transactions for now and see how to support those later.
gnodet:1292809869:2010-12-20T09:51:09.545+0000:1292809869:2010-12-20T09:51:09.545+0000:Committing to https://svn.apache.org/repos/asf/camel/trunk ...
	D	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/ErrorHandlerDefinition.java
	M	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelContextFactoryBean.java
	A	components/camel-blueprint/src/main/java/org/apache/camel/blueprint/CamelErrorHandlerFactoryBean.java
	M	components/camel-blueprint/src/main/resources/org/apache/camel/blueprint/jaxb.index
	M	tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/blueprint/CamelBlueprintTest.java
	A	tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-14.xml
Committed r1051031

davsclaus:1303610305:2011-04-24T09:58:25.559+0000:1303610305:2011-04-24T09:58:25.559+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3252,Bug,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-10-19 10:56:07+00:00,2011-04-24 09:58:28+00:00,"When I try to run the CamelInAction code with Camel 2.5.0, I found this warning message.




[                          main] DefaultConsumerTemplate        WARN  Exception occurred during done UnitOfWork for Exchange: null. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultConsumerTemplate.doneUoW(DefaultConsumerTemplate.java:229)[camel-core-2.5.0.jar:2.5.0]
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:168)[camel-core-2.5.0.jar:2.5.0]
	at camelinaction.OrderCollectorBean.getOrders(OrderCollectorBean.java:17)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/classes/:]
	at camelinaction.ConsumerTemplateTest.testConsumerTemplate(ConsumerTemplateTest.java:46)[file:/Users/jiangning/work/camel/camelinaction/appendixC/consumer/target/test-classes/:]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)[junit-4.8.1.jar:]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)[junit-4.8.1.jar:]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)[junit-4.8.1.jar:]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)[junit-4.8.1.jar:]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)[junit-4.8.1.jar:]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)[junit-4.8.1.jar:]
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:59)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:115)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:102)[surefire-api-2.5.jar:2.5]
	at org.apache.maven.surefire.Surefire.run(Surefire.java:180)[surefire-api-2.5.jar:2.5]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_20]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_20]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_20]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_20]
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:350)[surefire-booter-2.5.jar:2.5]
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1021)[surefire-booter-2.5.jar:2.5]",davsclaus:1303610308:2011-04-24T09:58:28.123+0000:1303610308:2011-04-24T09:58:28.123+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3251,Improvement,Major,2.4.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Łukasz Dywicki,Łukasz Dywicki,0,0,2010-10-19 07:33:08+00:00,2011-04-24 09:57:30+00:00,No Desc,"davsclaus:1287446819:2010-10-19T08:06:59.191+0000:1287446819:2010-10-19T08:06:59.191+0000:Yeah XSLT is an option.

I wonder if Karaf supports include files where you can ""override"" properties.

Then you can have
- spring 2 file
- spring file (the standard file)
- common file

Where the spring files you set the spring version they use and include the common file.

ldywicki:1287454922:2010-10-19T10:22:02.418+0000:1287454922:2010-10-19T10:22:02.418+0000:XSLT injected into Maven POM on generate resources phase.
gnodet:1287460442:2010-10-19T11:54:02.890+0000:1287460442:2010-10-19T11:54:02.890+0000:What about introducing ranges in feature dependencies, so that we can have camel-spring depend on spring with [2.5,4) and let the features service choose to reuse an already installed version or install one if needed.

Also the spring dependency should be moved from camel-core to camel-spring, as camel-core itself does not require spring.
ldywicki:1287461732:2010-10-19T12:15:32.326+0000:1287461732:2010-10-19T12:15:32.326+0000:Hi Guillaume,
Thank you for reminder about feature dependencies - I'll modify xslt to support it too.
gnodet:1287556384:2010-10-20T14:33:04.976+0000:1287556384:2010-10-20T14:33:04.976+0000:I've raise KARAF-251 and KARAF-252 and committed some patches.  The first one implements version ranges and should thus allow using a single feature descriptor.
davsclaus:1287618006:2010-10-21T07:40:06.898+0000:1287618006:2010-10-21T07:40:06.898+0000:Nice so lets wait for Karaf 2.2 then we can have a single features file.
davsclaus:1303610250:2011-04-24T09:57:30.247+0000:1303610250:2011-04-24T09:57:30.247+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3250,Improvement,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Daniel Bevenius,0,0,2010-10-19 06:50:17+00:00,2011-04-24 09:57:30+00:00,"It would be nice to be able to create a PropertiesComponent instance and at the same time specify the locations like this:


context.addComponent(""properties"", new PropertiesComponent(""classpath:org/apache/camel/component/properties/myproperties.properties""));","davsclaus:1287465840:2010-10-19T13:24:00.483+0000:1287465840:2010-10-19T13:24:00.483+0000:trunk: 1024230.

Thanks for the patch. Anything to make things easier :)
davsclaus:1303610250:2011-04-24T09:57:30.828+0000:1303610250:2011-04-24T09:57:30.828+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3249,Bug,Major,"2.3.0, 2.4.0, 2.5.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Hiram R. Chirino,Glenn Moss,0,0,2010-10-18 23:19:41+00:00,2011-04-24 09:57:18+00:00,"When using an aggregator with the HawtDB persistent store, the file grows indefinitely until it fills the volume on which it's stored. This prevents the persistence from being used in any kind of long-running production deployment.","davsclaus:1287481737:2010-10-19T17:48:57.111+0000:1287481737:2010-10-19T17:48:57.111+0000:Can you post how you have setup this?


gim:1287495423:2010-10-19T21:37:03.633+0000:1287495423:2010-10-19T21:37:03.633+0000:Here's how I've used the aggregator:

{code}
from(""activemq:source"")
  .aggregate(header(""some-id""), new MyAggregationStrategy())
  .aggregationRepository(new HawtDBAggregationRepository(""repo"", ""hawtdbfile""))
  .to(""activemq:destination"");
{code}

I've replicated the behaviour with only HawtDB. By opening a new HawtDB file, and only putting in data of a fixed size into the identical key, the file size grows indefinitely, depending on the size of the data. In the following code, the breakpoint appears to be at 489 characters of data. The file size remains constant with 488 character string, but grows indefinitely with a 489-character string. I think this probably has something to do with how the size of the data relates to the page size (set on TxPageFileFactory).

{code}
public class App {
  public static void main (String[] args) {
    String filename = args[0];
    int dataSize = Integer.parseInt(args[1]);

    BTreeIndexFactory<String, String> indexFact =
        new BTreeIndexFactory<String, String>();
    indexFact.setKeyCodec(StringCodec.INSTANCE);
    indexFact.setValueCodec(StringCodec.INSTANCE);
    indexFact.setDeferredEncoding(true);

    TxPageFileFactory pageFact = new TxPageFileFactory();
    pageFact.setFile(new File(filename));
    pageFact.setPageSize((short)512);
    pageFact.setMappingSegementSize(8 * 1024 * 1024);
    pageFact.setSync(true);
    pageFact.open();
    TxPageFile pageFile = pageFact.getTxPageFile();

    Transaction tx = pageFile.tx();
    if (!tx.allocator().isAllocated(0)) {
        SortedIndex<String, String> created = indexFact.create(tx);
    }
    tx.commit();
    pageFile.flush();

    String data = """";
    for (int i = 0; i < dataSize; i++) {
      data += ""0"";
    }

    try {
      while (true) {
        tx = pageFile.tx();
        SortedIndex<String, String> index = indexFact.open(tx);

        index.put(""foo"", data);

        tx.commit();
        pageFile.flush();
      }
    } finally {
      pageFact.close();
    }
  }
}
{code}
davsclaus:1287523874:2010-10-20T05:31:14.808+0000:1287523874:2010-10-20T05:31:14.808+0000:Ah your problem is that you do not have any completion conditions. So data is never gone be sent out of the aggregator, and hence why the hawtdb file keeps growing.

You need to add 1 .. n completion conditions. See more at
http://camel.apache.org/aggregator2

For example a completionTimeout or completionSize etc.

Also Camel in Action chapter 8 covers the aggregator pattern and how to use it with HawtDB
gim:1287570497:2010-10-20T18:28:17.421+0000:1287570497:2010-10-20T18:28:17.421+0000:Sorry, in sanitizing the code, I did leave the completion condition out, but be assured that I do have one. As I detailed in the remainder of my comment, the problem is reproducible with only HawtDB code, and appears to not be dependent on the aggregator component.
davsclaus:1287574029:2010-10-20T19:27:09.418+0000:1287574029:2010-10-20T19:27:09.418+0000:Please leave all details its important.

What version of HawtDB are you using?

What JDK are you using?

gim:1287589234:2010-10-20T23:40:34.758+0000:1287589234:2010-10-20T23:40:34.758+0000:We're using HawtDB 1.4 and JDK 1.6. (I don't have the exact version number as I don't have access to the machine I was using for testing right now.)
davsclaus:1287617867:2010-10-21T07:37:47.720+0000:1287617867:2010-10-21T07:37:47.720+0000:Hiram can you take a look.

It looks like HawtDB doesn't register the old data as free.

I have created an unit test in camel-hawtdb
org.apache.camel.component.hawtdb.HawtDBGrowIssueTest


davsclaus:1287645237:2010-10-21T15:13:57.729+0000:1287645237:2010-10-21T15:13:57.729+0000:Hiram is working on a fix so we should try to get it fixed in Camel 2.5. eg a new release of hawtDB that camel-hawtdb uses.
chirino:1287645621:2010-10-21T15:20:21.948+0000:1287645621:2010-10-21T15:20:21.948+0000:Thanks for the test case.  I found an allocation leak in HawtDB.  I've got it fixed in the latest snapshot now and am working on spinning a new release so you guys can pick the fix up.
davsclaus:1287649960:2010-10-21T16:32:40.807+0000:1287649960:2010-10-21T16:32:40.807+0000:Also remember to update the release notes and camel-hawtdb that v1.5 is required due the bug in older releases
davsclaus:1287654765:2010-10-21T17:52:45.360+0000:1287654765:2010-10-21T17:52:45.360+0000:trunk: 1026081.

Gleen HawtDB 1.5 has been released which has the fix. So you should be able to upgrade and use that version.
Thanks for reporting.

Its already in central maven repo
gim:1287821913:2010-10-23T16:18:33.131+0000:1287821913:2010-10-23T16:18:33.131+0000:Thanks for your work on this. I'm currently out if the office for a while, but I'm excited to try it out once I'm back. 
davsclaus:1303610238:2011-04-24T09:57:18.834+0000:1303610238:2011-04-24T09:57:18.834+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3248,Bug,Major,None,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Jean-Baptiste Onofré,1,1,2010-10-18 12:18:34+00:00,2011-04-24 09:57:59+00:00,"camel-exec component is not present in the feature descriptor.


I'm gonna submit a patch for that component.","davsclaus:1287434441:2010-10-19T04:40:41.200+0000:1287434441:2010-10-19T04:40:41.200+0000:Thanks for the patch. There is however a features-spring2.xml file as well for end users using Spring 2.5.6 with OSGi.

BTW: We actually need a better way than having 2 separate files. Would be better if the spring2.xml file was auto generated.
davsclaus:1287434483:2010-10-19T04:41:23.323+0000:1287434483:2010-10-19T04:41:23.323+0000:And you can add an unit test in tests/camel-itest-karaf
It just tests that the feature can be deployed on karaf.
ldywicki:1287440891:2010-10-19T06:28:11.353+0000:1287440891:2010-10-19T06:28:11.353+0000:The generation of the second features.xml may be done by XSLT. What do you think?
jb@nanthrax.net:1287444276:2010-10-19T07:24:36.459+0000:1287444276:2010-10-19T07:24:36.459+0000:Thanks a lot Claus for your comment.

I will submit a new patch including both feature updated and itests.
njiang:1287450291:2010-10-19T09:04:51.307+0000:1287450291:2010-10-19T09:04:51.307+0000:@Lukasz,
There is a component which is not support by spring 2.2.x.
camel-spring-javaconfig , please filtered it when you are using the XSLT to do the job.
davsclaus:1287618079:2010-10-21T07:41:19.019+0000:1287618079:2010-10-21T07:41:19.019+0000:Jean maybe you can attach the patch with the features.xml features-spring2.xml so we can get that into the kit.

Hadrian may very well start creating a new 2.5 RC so better get this fixed. Then we can add the unit tests later.
jb@nanthrax.net:1287618326:2010-10-21T07:45:26.442+0000:1287618326:2010-10-21T07:45:26.442+0000:I already have the patch with both features updated.

Anyway, I begun to add camel-itests, camel-itests-karaf and camel-itests-osgi test case.

I speed up the unit test completion and provide the patch.
jb@nanthrax.net:1287636609:2010-10-21T12:50:09.225+0000:1287636609:2010-10-21T12:50:09.225+0000:This new patch provides both features descriptor updated and itests.
davsclaus:1287655917:2010-10-21T18:11:57.034+0000:1287655917:2010-10-21T18:11:57.034+0000:trunk: 1026089.

Thanks for the patch.
davsclaus:1303610279:2011-04-24T09:57:59.310+0000:1303610279:2011-04-24T09:57:59.310+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3247,Task,Trivial,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Fernando Ribeiro,0,0,2010-10-18 01:31:59+00:00,2011-04-24 09:57:29+00:00,The list currently in the documentation needs to be updated to 2.4.0.,"davsclaus:1287346940:2010-10-18T04:22:20.606+0000:1287346940:2010-10-18T04:22:20.606+0000:Can you post the link to the documentation you are referring?
fribeiro:1287420313:2010-10-19T00:45:13.275+0000:1287420313:2010-10-19T00:45:13.275+0000:Sure, it is the list at http://camel.apache.org/list-of-type-conversions.html.
davsclaus:1287962525:2010-10-25T07:22:05.671+0000:1287962525:2010-10-25T07:22:05.671+0000:Thanks I have removed that page because it isn't updated and the tooling hasn't been either.
davsclaus:1303610249:2011-04-24T09:57:29.664+0000:1303610249:2011-04-24T09:57:29.664+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3246,New Feature,Major,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,Jean-Baptiste Onofré,0,0,2010-10-17 20:13:05+00:00,2011-04-24 09:57:10+00:00,"I'm working on a camel-vfs component.


It's quite similar than the camel-ftp, extending the RemoteFileComponent using commons-vfs to support a large scope of filesystems (WebDAV, CIFS, HTTP, etc).


I will provide the patch soon.","rkettelerij:1287319934:2010-10-17T20:52:14.405+0000:1287319934:2010-10-17T20:52:14.405+0000:FYI, have you seen CAMEL-1241?
davsclaus:1303610230:2011-04-24T09:57:10.992+0000:1303610230:2011-04-24T09:57:10.992+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3245,Improvement,Major,2.4.0,2.6.0,"
None
",Closed,Duplicate,2.6.0,Claus Ibsen,Martin Krasser,0,0,2010-10-17 18:36:51+00:00,2011-10-25 11:36:14+00:00,No Desc,"davsclaus:1293156184:2010-12-24T10:03:04.480+0000:1293156184:2010-12-24T10:03:04.480+0000:Martin do you have time to work on this in the near future? If not push it for v2.7
davsclaus:1294646243:2011-01-10T15:57:23.339+0000:1294646243:2011-01-10T15:57:23.339+0000:I needed this today so I have implemented it."
0,CAMEL-3244,Task,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Martin Krasser,Claus Ibsen,0,0,2010-10-17 07:06:23+00:00,2011-04-24 09:58:01+00:00,GAE 1.3.8 is out. We are currently using 1.3.6 in Camel.,davsclaus:1303610281:2011-04-24T09:58:01.218+0000:1303610281:2011-04-24T09:58:01.218+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3243,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-17 06:55:16+00:00,2011-04-24 09:57:24+00:00,"When using camel-restlet you need to include a restlet engine in the classpath.


And therefore you need to add
     <groupId>com.noelios.restlet</groupId>
      <artifactId>com.noelios.restlet</artifactId>      


to the runtime classpath. We have it defined as test scope in the pom.xml. We should change that to compile.","davsclaus:1292307749:2010-12-14T14:22:29.851+0000:1292307749:2010-12-14T14:22:29.851+0000:trunk: 1049102.
davsclaus:1303610244:2011-04-24T09:57:24.374+0000:1303610244:2011-04-24T09:57:24.374+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3242,Improvement,Minor,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-16 12:28:41+00:00,2011-04-24 09:57:38+00:00,You can only use retryWhile on the onException. It should be possible from errorHandler as well.,"davsclaus:1287208778:2010-10-16T13:59:38.629+0000:1287208778:2010-10-16T13:59:38.629+0000:We should expose an option to set a retryWhileRef in the Spring DSL.
davsclaus:1287443036:2010-10-19T07:03:56.775+0000:1287443036:2010-10-19T07:03:56.775+0000:trunk: 1024138.
davsclaus:1303610258:2011-04-24T09:57:38.788+0000:1303610258:2011-04-24T09:57:38.788+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3241,New Feature,Major,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-16 11:35:17+00:00,2011-04-24 09:58:04+00:00,"See
http://davsclaus.blogspot.com/2010/10/paris-and-easier-camel-route-debugging.html","davsclaus:1288239271:2010-10-28T12:14:31.887+0000:1288239271:2010-10-28T12:14:31.887+0000:trunk: 1028270.
davsclaus:1303610284:2011-04-24T09:58:04.299+0000:1303610284:2011-04-24T09:58:04.299+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3240,Improvement,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Benjamin P. O'Day,Claus Ibsen,0,1,2010-10-16 07:13:31+00:00,2011-10-25 11:36:21+00:00,"Graceful shutdown will force shutting down routes if timeout triggeres.


We should add option to let end user control this. So Camel instead just gives up. Then end user can take action, such as trying to shutdown again or whatever.","boday:1294668733:2011-01-10T22:12:13.924+0000:1294668733:2011-01-10T22:12:13.924+0000:how would this behavior differ from what ""shutdownNowOnTimeout=false"" currently does?
davsclaus:1294699291:2011-01-11T06:41:31.613+0000:1294699291:2011-01-11T06:41:31.613+0000:The difference is that graceful shutdown will always shutdown. After the timeout period is hit, it will shutdown now (abrupt).

This most likely only comes handy if you for example stop a route using JMX and for some reason this route keeps running and isn't capable of stopping within the timeout period.


davsclaus:1294699357:2011-01-11T06:42:37.643+0000:1294699357:2011-01-11T06:42:37.643+0000:If you do a full CamelContext shutdown then the problem could be that X number of servies/routes did managed to stop. So when we give up, you would end up with a system which is partly shutdown.
boday:1294937636:2011-01-14T00:53:56.120+0000:1294937636:2011-01-14T00:53:56.120+0000:here is a stab at adding ""give up"" support for stopping a route...as always, feedback is welcome
njiang:1294943377:2011-01-14T02:29:37.609+0000:1294943377:2011-01-14T02:29:37.609+0000:Applied patch with thanks to Ben.
boday:1294949806:2011-01-14T04:16:46.580+0000:1294949806:2011-01-14T04:16:46.580+0000:here is another patch to cleanup some checkstyle issues and also contains the unit test that wasn't committed (if desired)...
davsclaus:1294955600:2011-01-14T05:53:20.038+0000:1294955600:2011-01-14T05:53:20.038+0000:Thanks for working on this Ben

I got comments

1)
In CamelContext the new method must have javadoc provided

2)
It should return a boolean to indicate if the route was stopped or not. true = stopped, false = it gave up

3)
Wonder if there is a better word than ""giveUp"" - a more formal and industry word we can use

4)
This method should be added to {{ManagedCamelContext}}

5)
And we need an unit test which tests it being operated using JMX (see unit tests in management package)

6)
Javadoc on ShutdownStrategy should also be updated to document the new feature, eg a @return is missing


boday:1294991545:2011-01-14T15:52:25.845+0000:1294991545:2011-01-14T15:52:25.845+0000:thanks for the feedback Claus, I'm working on these changes now.  Also, I'm going to change the ""giveUp"" flag to ""abortAfterTimeout""...
boday:1294997584:2011-01-14T17:33:04.029+0000:1294997584:2011-01-14T17:33:04.029+0000:here is another patch with the following changes:

-changed flag from ""giveUp"" to ""abortAfterTimeout""
-added a ManagedRoute API top stop with timeout and abort flag (and corresponding unit test)
-updated unit tests to try both abortAfterTimeout=true and abortAfteTimeout=false modes


boday:1295003711:2011-01-14T19:15:11.332+0000:1295003711:2011-01-14T19:15:11.332+0000:I think this change needs to be reverted from the trunk (sorry, I didn't think it would be considered until 2.7 and a few rounds of feedback/testing).  It seems that after aborting, though the route's isStarted() returns ""true"", it isn't accepting messages.  I believe I need to also revert the operations in ShutdownTask to restore the route to a usable state (restart the consumer, etc).  Anyways, I'm working on this now, but am concerned that what has been committed is complete...please revert until I can prepare a proper patch.

  
boday:1295010037:2011-01-14T21:00:37.842+0000:1295010037:2011-01-14T21:00:37.842+0000:Alright, here is another patch to make sure the route is usable after a shutdown is aborted.  I modified the ShutdownTask.run() to handle the abort mode appropriately and updated the unit tests to resume using the route after the abort to insure that it still works.  Please review...
boday:1295015016:2011-01-14T22:23:36.724+0000:1295015016:2011-01-14T22:23:36.724+0000:updated the patch to make the ShutdownStrategy.shutdown() API only support a single route when using abortAfterTimeout mode.  Handling this abort case for multiple routes at once isn't supported yet...
hadrian:1295020827:2011-01-15T00:00:27.371+0000:1295020827:2011-01-15T00:00:27.371+0000:I don't think 'making sure the route is usable after a shutdown is aborted' is possible in the general case. Right now I am not even sure if we should revert it and go for 2.7 or leave it in for 2.6. While doing some tests with your patch you also added another one.

I will let it sit until Sun, in case you want to test it more, and I will take the last patch available then. Could you also please remove older patches, or give patches a running number so it's obvious (more obvious than just using the date). I will look at it on Sun again, and if it doesn't make things worse (which seems to be the case right now) I will apply it and we'll have it in 2.6. We can also improve later.

Thanks for the contribution.
boday:1295034442:2011-01-15T03:47:22.521+0000:1295034442:2011-01-15T03:47:22.521+0000:Hadrian, sorry for all the updates...this has evolved a bit based on testing/feedback.  I removed the old patch files and will version future ones (if any)...

As for the functionality, my goal with the latest patch was to limit the API to only allow aborting shutdown for a single route at a time, and to allow the route to be used after an attempted shutdown is aborted.  Otherwise, the route would be ""started"" but not able to consume messages, etc.

Claus, can you review this and clarify how it should work?

thanks guys


hadrian:1295036618:2011-01-15T04:23:38.918+0000:1295036618:2011-01-15T04:23:38.918+0000:Ben, think of the following scenario. You have 5 routes, you attempt shutdown. Two routes shutdown gracefully, the 3rd one times out. Leaving that 3rd route in a limbo state is not right, that's fairly clear, so what one could try is to start it again. Let alone the fact that even that is not guaranteed to succeed, it may not do any good to your application with the first two routes stopped already.

 
davsclaus:1295048738:2011-01-15T07:45:38.715+0000:1295048817:2011-01-15T07:46:57.226+0000:Hadrian you are tight that aboutOnTimeout feature should only be offered for one *single* route. It doesn't apply when you shutdown the entire CamelContext. 

Ben, if we about on timeout, then we need to start the route again. The consumer on the route could have been suspended/stopped to prevent intaking new messages.
We can check the status on the consumer and if its not started, then start it.
boday:1295087937:2011-01-15T18:38:57.028+0000:1295087937:2011-01-15T18:38:57.028+0000:Claus/Hadrian, I attached an updated patch (camel-core-stop-route-abortAfterTimeout .v2.txt) which explicitly calls startRouteService(routeService, false) if a route shutdown is aborted.  This should ensure that the route is properly restarted when an abort occurs.  My unit tests verify this as well...  

Please review...thanks again
davsclaus:1295135486:2011-01-16T07:51:26.449+0000:1295135486:2011-01-16T07:51:26.449+0000:Thanks Ben I will get your patch into the trunk.
davsclaus:1295138240:2011-01-16T08:37:20.785+0000:1295138240:2011-01-16T08:37:20.785+0000:trunk: 1059513.

Thanks for the patch Ben."
0,CAMEL-3239,Improvement,Minor,2.4.0,"2.6.0, 2.7.0","
None
",Closed,Fixed,"2.6.0, 2.7.0",Tracy J. Snell,Bengt Rodehav,0,0,2010-10-15 18:22:14+00:00,2011-10-25 11:35:37+00:00,"I'm using camel-quartz (Camel 2.4) and have some problems with the timer name (part of the URI).


It seems that if I have two different routes (using camel-quartz) with the same timername, only one of the quartz endpoints will be activated, e g:


from(""quartz://mytimername""?cron=0+?+*"").to(endpoint1)
from(""quartz://mytimername""?cron=30+?+*"").to(endpoint2)


If I make sure that the timernames are unique, both quartz endpoints will work. Thus I conclude that the timername must be unique (maybe this is a quartz thing and not a camel-quartz thing).


However, I get no indication that something is wrong since the camel route is started and looks fine although the quartz endpoint will never trigger. This is not a good situation. In my case I use this for monitoring purposes. I thought that the monitoring worked fine but it was actually never triggered at all.


I'm not sure if this due to camel-quartz or quartz itself. However, if it is possible for camel-quartz to determine that the endpoint was created OK (not OK if duplicate timer names), then this should case the camel context to fail.


I run this in an OSGi environment (Karaf 1.6.0). Thus routes like the above can be created independent of each other which makes it hard to guarantee that the timername is unique.","davsclaus:1291013024:2010-11-29T14:43:44.971+0000:1291013024:2010-11-29T14:43:44.971+0000:Can you try with Camel 2.5 as camel-quartz have been improved.

I think currently it will update the cron trigger if you got the same trigger name.
We could introduce some option you can enable to let Camel barf if an existing trigger name exists. 

rodehav:1291028601:2010-11-29T19:03:21.882+0000:1291028601:2010-11-29T19:03:21.882+0000:Claus,

I just tried with Camel 2.5.0 but unfortunately I get the same error.
davsclaus:1293761605:2010-12-31T10:13:25.287+0000:1293761605:2010-12-31T10:13:25.287+0000:A member of the Camel community is working on a patch for this.
rodehav:1294029866:2011-01-03T12:44:26.974+0000:1294029866:2011-01-03T12:44:26.974+0000:Thanks Claus. I'll test the patch when it's available.
tjsnell:1294072789:2011-01-04T00:39:49.985+0000:1294072789:2011-01-04T00:39:49.985+0000:Here's the code from  QuartzComponent that's the issue:
{code}
    private void doAddJob(JobDetail job, Trigger trigger) throws SchedulerException {
        JOBS.incrementAndGet();

        Trigger existingTrigger = getScheduler().getTrigger(trigger.getName(), trigger.getGroup());
        if (existingTrigger == null) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Adding job using trigger: "" + trigger.getGroup() + ""/"" + trigger.getName());
            }
            getScheduler().scheduleJob(job, trigger);
        } else if (hasTriggerChanged(existingTrigger, trigger)) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Trigger: "" + trigger.getGroup() + ""/"" + trigger.getName() + "" already exists and will be updated by Quartz."");
            }
            scheduler.addJob(job, true);
            trigger.setJobName(job.getName());
            scheduler.rescheduleJob(trigger.getName(), trigger.getGroup(), trigger);
        } else {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Trigger: "" + trigger.getGroup() + ""/"" + trigger.getName() + "" already exists and will be resumed automatically by Quartz."");
            }
            if (!isClustered()) {
                scheduler.resumeTrigger(trigger.getName(), trigger.getGroup());
            }
        }
    }
{code}

Thinking out loud...

One issue is a job could be clustered. 
- We'll need to check the local endpoint for dupes, not see if it's already in the scheduler. 
- What if the same timer name is in 2 different contexts? Do we assume that's intentional and let it happen or error on that also?
rodehav:1294096363:2011-01-04T07:12:43.837+0000:1294096363:2011-01-04T07:12:43.837+0000:Tracy,

I haven't used Quartz in clustered mode although I do realize that it does complicate things considerably. I guess clustered mode is why the code needs to ""reschedule"" and ""resume"" jobs - right? Otherwise my immediate reaction would be to always throw an exception if the trigger already exists. Is there any way to recognize if a job is clustered so that ""reschedule"" and ""resume"" would only be allowed in those cases? Maybe we need to ""mark"" clustered triggers in the endpoint URI somehow?

In my scenario, I create my Quartz routes in different camel contexts. They are totally unaware of each other which is why it's hard to ensure that the trigger names are unique. If the camel context could act as some sort of namespace for the trigger, then the trigger name would only have to be unique within the same camel context which is probably a bit easier to ensure. Not sure how that would work with clustering though...
tjsnell:1294143001:2011-01-04T20:10:01.766+0000:1294143001:2011-01-04T20:10:01.766+0000:When a quartz consumer is stopped the following happens

if running in clustered mode then 
  nothing but a log statement
else
  if the job is volatile then 
    unschedule the job 
  else 
    pause the job (this is where our trouble is).

So in the last case when jobs are being added in the code above it assumes that if the job exists it was just paused. So resume it (or restart if it changed). When your second endpoint with a job of the same name is started it hits doAddJob and goes the paused job route.

One solution would be to add the context.getName() + endpoint.getID() to the job name.

Still pondering a bit to make sure I fully understand it all before doing too much.

rodehav:1294181743:2011-01-05T06:55:43.476+0000:1294181743:2011-01-05T06:55:43.476+0000:Since the pause/resume logic relies on being able to correctly identify the job, it does make sense to strengthen that area. Adding information from the Camel context and the endpoint to the job name therefore sounds wise to me. In my particular case, adding the name of the context to the job name would suffice since I start new contexts for the different jobs. However, in the general case, I guess including the endpoint id as well is a good idea.
tjsnell:1294235310:2011-01-05T21:48:30.100+0000:1294235310:2011-01-05T21:48:30.100+0000:I think just context would be better. If you have 2 timers in the same context they really should have unique names in my opinion.

Easy fix I'll code it up tonight but get more feedback before posting anything.
tjsnell:1294249869:2011-01-06T01:51:09.396+0000:1294249869:2011-01-06T01:51:09.396+0000:The only time to check for dupes is when adding it to the scheduler so was pondering.
{code}
    private void doAddJob(JobDetail job, Trigger trigger) throws SchedulerException {
        JOBS.incrementAndGet();

        String triggerName = trigger.getName();
        if (!isClustered()){
            // add the context name so different contexts can have the same timer name
            triggerName = getCamelContext().getName() + ""-"" + getCamelContext().getName();
        }
...
        // adjust the rest of the method to handle collisions.
{code}

If the job is clustered then we don't want to append anything. It's the users responsibility to be aware that names are global inside the cluster. This keeps the trigger name set by the user in the actual Trigger instance. Now if they they tried to get a trigger directly from the scheduler then they would have to append ""-"" + context.getName. Again it relies on the user being aware of how trigger names are put into the scheduler. Not ideal but I haven't thought of a better way (yet) to support restart/resume and prevent duplicate names in a camel context.

Thoughts?

davsclaus:1294270119:2011-01-06T07:28:39.229+0000:1294270119:2011-01-06T07:28:39.229+0000:Hmm I dont like hardcoding the name with the camel context name in osgi. As most often the camel context name is auto assigned using the bundle id as prefix. So the trigger name can change if you uninstall / install the application (ie the osgi container assigns a new bundle id to the application).

Since we have camel-quartz installed as a shared bundle in osgi container, it would be best if quartz had API to tell you which trigger names it has registered. Then we can react to that. For example throwing an exception, if you want to have unique names.

We could then introduce an option in the quartz endpoint to prefix the trigger name with the camel context name, so the end user _on purpose_ can mitigate this. That option could be default true if it makes most sense. At least we should give the end user the choice to turn it on/off.
tjsnell:1294291674:2011-01-06T13:27:54.279+0000:1294291674:2011-01-06T13:27:54.279+0000:I don't like hard coding the name at all. Just throwing out ideas for discussion as I try to figure out an approach. OSGI makes it even more likely you could have something with the same name and not know it.

I think I've been over complicating this because right now the code for adding jobs doesn't know if it's a restart/resume or if it's a new endpoint. Moving a check for the timer name during endpoint creation should solve the issue without ugly hacks. Should work inside of OSGI also. I'll go try it out. 

Thanks for the comments.
tjsnell:1294302340:2011-01-06T16:25:40.435+0000:1294302340:2011-01-06T16:25:40.435+0000:Patch coming soon. Easier than I thought.

Also I'm making a change to the component stop unless someone knows why I shouldn't.

{code}
@Override
protected void doStop() throws Exception {
    super.doStop();

    if (scheduler != null) {
        int number = JOBS.get();
        if (number > 0 && isClustered()) {
            LOG.info(""Cannot shutdown Quartz scheduler: "" + scheduler.getSchedulerName() + "" as there are still "" + number + "" jobs registered."");
        } else {
            // no more jobs then shutdown the scheduler
            LOG.info(""There are no more jobs registered, so shutting down Quartz scheduler: "" + scheduler.getSchedulerName());
            scheduler.shutdown();
            scheduler = null;
        }
    }
}
{code}

I added the isClustered() . If we're shutting down and not clustered then the jobs need to go away even if they are pending since the route to handle them is gone.

davsclaus:1294302639:2011-01-06T16:30:39.819+0000:1294302639:2011-01-06T16:30:39.819+0000:Tracy that stop logic is correct as it is. The reason is OSGi.

In OSGi we have one camel-bundle installed, which means there is one quartz scheduler.
So if you have 2 camel apps using quartz (app A, app B).
So if you stop app A then B should continue to run.

tjsnell:1294304136:2011-01-06T16:55:36.431+0000:1294304136:2011-01-06T16:55:36.431+0000:Ahh. OK. removed the isClustered(). So Quartz will just have orphaned jobs sometimes but that shouldn't be an issue.
tjsnell:1294347178:2011-01-07T04:52:58.266+0000:1294347178:2011-01-07T04:52:58.266+0000:Fixed without all the crazy hacked name stuff I pondered early on. Still a dire need for another set of eyes and a sanity check. Should be pretty easy to follow the changes.

 
Quick summary. Added a check on endpoint creation that checks with the scheduler to see if a job with the name/group already exists. Added a shutdown hook in QuartzEndpoint and refactored some names so they were a bit clearer.
QuartzComponent
- Added a check in createEndpoint to see if the job name already exists. (only if running in non clustered mode

- New method deleteJob called by the endpoint when it's shutting down to remove the job from the scheduler
- Renamed removeJob to pauseJob Removed the job.isVolatile check. Volatility tells the scheduler if it should persist a job through reboots. Doesn't make sense here. 

QuartzEndpoint
- changed implements Service to ShutdownableService
- Added deleteTrigger
- Renamed removeTrigger to pauseTrigger
- Added shutdown to use to remove the trigger/job

QuartzNameCollisionTest
- New tests to check for various name collision scenarios

davsclaus:1294375216:2011-01-07T12:40:16.029+0000:1294375216:2011-01-07T12:40:16.029+0000:Personally I dislike the
{code}
 @Test (expected = FailedToCreateRouteException.class)
{code}

As you dont really test when the exception occurred and what information it contains.
In your unit test it could be because of anything. Even when starting the first Camel instance.

What you want to test that it happens when starting the 2nd because of duplicate name. So you need to try .. catch and check the exception message contains this information.

Remember this exception is what the Camel end user see and all he got as information to know why it fails.
tjsnell:1294380267:2011-01-07T14:04:27.172+0000:1294380267:2011-01-07T14:04:27.172+0000:I'm overly fond of expected :)

Fixed.
davsclaus:1294381376:2011-01-07T14:22:56.021+0000:1294381376:2011-01-07T14:22:56.021+0000:trunk: 1056333.

Thanks Tracy. I polished the patch a bit improving the logging and the assertion in the thrown exception that it contains the name/group so the end user which one was duplicated.
bryanck:1296487128:2011-01-31T23:18:48.168+0000:1296487128:2011-01-31T23:18:48.168+0000:This change caused a regression in my application. If you are using a StatefulJob and not using a clustered job store, you will get a failure upon startup of the route after the first time.

e.g. Using an endpoint such as:
{code}
<endpoint id=""pingSchedule"" uri=""quartz://myapp/ping?cron=${ping.cron}&amp;stateful=true"" />
{code}

Configure the Quartz job store to NOT be clustered (org.quartz.jobStore.isClustered = false). Start the app. Then shut it down. Now start it up a second time. The following exception is thrown:
{code}
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz://myapp/ping?cron=0+0+23+*+*+%3F&stateful=true due to: A Quartz job already exists with the name/group: myapp/ping
{code}

It seems that this code change is not compatible when using stateful jobs in a non-clustered environment.
tjsnell:1296551129:2011-02-01T17:05:29.624+0000:1296551129:2011-02-01T17:05:29.624+0000:I'll get a fix in in the next couple of days. Dealing with the mother of all snow storms right now!
tjsnell:1296636672:2011-02-02T16:51:12.961+0000:1296636672:2011-02-02T16:51:12.961+0000:Added a check for stateful jobs and if they are no name collision check is done.
davsclaus:1296882259:2011-02-05T13:04:19.063+0000:1296882259:2011-02-05T13:04:19.063+0000:Tracy is this patch OK to be committed?

I wonder if we should add an option so you can enable/disable this check. Then end users in the future may disable this if they hit some issue?
tjsnell:1296907469:2011-02-05T20:04:29.991+0000:1296907469:2011-02-05T20:04:29.991+0000:I think it's fine. A stateful job has the potential to already be running so we do need to not check for dupes. Ditto for clustered. In those cases it's up to the user to be careful. I can't think of another scenario where the check would cause problems (but this is my first exposure to Quartz so I've been learning).
davsclaus:1296953383:2011-02-06T08:49:43.694+0000:1296953383:2011-02-06T08:49:43.694+0000:Thanks for the patch.

trunk: 1067615."
0,CAMEL-3238,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.6.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-10-15 16:20:43+00:00,2011-04-24 09:58:05+00:00,"Create Documentation for the Weighted Load Balancing feature.


Looks like the other links to the other Load Balancing features are broken and do not get resolved. Check this out and if documentation does not exist for these load balancing features, create it...","davsclaus:1287140133:2010-10-15T18:55:33.777+0000:1287140133:2010-10-15T18:55:33.777+0000:What do you mean? The LB is here
http://camel.apache.org/load-balancer.html

That's where it should be documented.
akarpe:1287140416:2010-10-15T19:00:16.962+0000:1287140478:2010-10-15T19:01:18.610+0000:HI Claus,

Yes on that link, the individual Policy links do not work. If you click on each of the links (Round Robin etc) the following error is thrown

""The requested URL /maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/RoundRobinLoadBalancer.html was not found on this server.""

I went to the wiki and found that the child pages are absent.

Cheers,

Ashwin...
davsclaus:1287140801:2010-10-15T19:06:41.155+0000:1287140801:2010-10-15T19:06:41.155+0000:Ashwin read the url! its just a link to the javadoc. 

The most used LBs is documented on the same page. The sticky and topic is very seldom used. So please add the weighted on this page.
And you can fix the javadoc links.

You can find the links to working javadoc here
http://camel.apache.org/javadoc.html

Or in fact just remove the javadoc links as we dont have the problem to keep them working in the future.
akarpe:1288063260:2010-10-26T11:21:00.424+0000:1288063260:2010-10-26T11:21:00.424+0000:Documentation added to the Load Balancer page http://camel.apache.org/load-balancer.html
davsclaus:1303610285:2011-04-24T09:58:05.722+0000:1303610285:2011-04-24T09:58:05.722+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3237,Bug,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Mário Homem,0,1,2010-10-15 16:01:15+00:00,2011-04-24 09:57:59+00:00,"XmppEndPoint myXmppEndPoint = new XmppEndPoint();
(...)
myXmppEndPoint.setCreateAccount(true);
myXmppEndPoint .setLogin(false);
(...)




This will result in ""no action"" in xmpp server, if setLogin true the account is created and the user stays online.


I believe it's because of the logic used in createConnection() method of XmppEndPoint that could be changed to:



if (!connection.isAuthenticated()) {
            if (user != null) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in to XMPP as user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }
                if (password == null) {
                    LOG.warn(""No password configured for user: "" + user + "" on connection: "" + getConnectionMessage(connection));
                }

                if (createAccount) {
                    AccountManager accountManager = new AccountManager(connection);
                    accountManager.createAccount(user, password);
                }
                if(login){
                	if (resource != null) {
                		connection.login(user, password, resource);
                	} else {
                		connection.login(user, password);
                	}
                }
            } else {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Logging in anonymously to XMPP on connection: ""  + getConnectionMessage(connection));
                }
                connection.loginAnonymously();
            }","davsclaus:1287206905:2010-10-16T13:28:25.410+0000:1287206905:2010-10-16T13:28:25.410+0000:What is it you suggest to be changed in the code?
davsclaus:1287206939:2010-10-16T13:28:59.769+0000:1287206939:2010-10-16T13:28:59.769+0000:Added code snippet to easier read the code
jb@nanthrax.net:1287317148:2010-10-17T20:05:48.750+0000:1287317148:2010-10-17T20:05:48.750+0000:I reproduce the issue.

createAccount shouldn't be affected by the login attribute.

I submit a patch in that way.
mdhomem:1287383635:2010-10-18T14:33:55.646+0000:1287383635:2010-10-18T14:33:55.646+0000:Hi,

Ok Jean the patch resolves the issue.

Claus thanks for the tip about ""code snippet"".
davsclaus:1289447931:2010-11-11T11:58:51.748+0000:1289447931:2010-11-11T11:58:51.748+0000:trunk: 1033904.

Thanks for the patch.
davsclaus:1303610279:2011-04-24T09:57:59.894+0000:1303610279:2011-04-24T09:57:59.894+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3236,New Feature,Major,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Tracy J. Snell,0,1,2010-10-15 11:38:39+00:00,2011-04-24 09:58:13+00:00,Mark Ford is donating his Camel-JMX component. Providing a Jira for the code to be submitted.,"massfords:1287324803:2010-10-17T22:13:23.882+0000:1287324803:2010-10-17T22:13:23.882+0000:I have repackaged the code from my google code project so it matches the conventions of the other components. The build works and the included unit tests put the coverage up around 90%. 

The code is commented with Javadoc and some inline comments. Additional user documentation is available here:

http://code.google.com/p/camel-jmx/

Let me know if there's anything else needed to complete this donation.
davsclaus:1287961969:2010-10-25T07:12:49.513+0000:1287961969:2010-10-25T07:12:49.513+0000:Thanks for donating this to Apache. We will work on getting this into the next release, e.g. Camel 2.6.
davsclaus:1288827248:2010-11-04T07:34:08.781+0000:1288827248:2010-11-04T07:34:08.781+0000:We should prefer to use JAXB for generating the XML schema. I have created a ticket for this
http://code.google.com/p/camel-jmx/issues/detail?id=7

davsclaus:1288914156:2010-11-05T07:42:36.988+0000:1288914156:2010-11-05T07:42:36.988+0000:Thanks Mark for the donation to Apache.

trunk: 1031461.

I had to disable a couple of tests with @Ignore. They fail due some XML timestamp comparison. Please take a look if you got the time.
eg check out the source from Apache Camel and see if you can fix it and supply a patch.

{code}

<?xml version=""1.0"" encoding=""UTF-8""?><NotificationEvent xmlns=""urn:org.apache.camel.component:jmx""><source>TestDomain:name=simpleBean</source><message>I was touched</message><sequence>0</sequence><timestamp>1262856615000</timestamp><dateTime>2010-01-07T10:30:15.000+01:00</dateTime><type>touched</type></NotificationEvent>Nov 5, 2010 8:42:32 AM ClientCommunicatorAdmin restart

java.lang.AssertionError: junit.framework.AssertionFailedError: org.custommonkey.xmlunit.Diff
[different] Expected text value '1262878215000' but was '1262856615000' - comparing <timestamp ...>1262878215000</timestamp> at /NotificationEvent[1]/timestamp[1]/text()[1] to <timestamp ...>1262856615000</timestamp> at /NotificationEvent[1]/timestamp[1]/text()[1]

	at junit.framework.Assert.fail(Assert.java:47)
	at org.custommonkey.xmlunit.XMLAssert.assertXMLEqual(XMLAssert.java:125)
	at org.custommonkey.xmlunit.XMLAssert.assertXMLEqual(XMLAssert.java:113)
	at org.apache.camel.component.jmx.XmlFixture.assertXMLIgnorePrefix(XmlFixture.java:76)
	at org.apache.camel.component.jmx.SimpleBeanFixture.assertMessageReceived(SimpleBeanFixture.java:255)
	at org.apache.camel.component.jmx.JMXRemoteTest.notification(JMXRemoteTest.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
{code}
davsclaus:1288915379:2010-11-05T08:02:59.944+0000:1288915379:2010-11-05T08:02:59.944+0000:Added osgi feature: 1031466.
massfords:1288968160:2010-11-05T22:42:40.725+0000:1288968160:2010-11-05T22:42:40.725+0000:The timestamp error is likely due to the difference in our timezones. I was using a fixed datetime for the unit tests but neglecting to set the timezone in the pattern. The attached patch includes this fix.  
davsclaus:1288998727:2010-11-06T07:12:07.087+0000:1288998727:2010-11-06T07:12:07.087+0000:Thanks for the patch. We are getting closer

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.jmx.JMXRemoteTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.79 sec <<< FAILURE!
notification(org.apache.camel.component.jmx.JMXRemoteTest)  Time elapsed: 0.776 sec  <<< FAILURE!
java.lang.AssertionError: junit.framework.AssertionFailedError: org.custommonkey.xmlunit.Diff
[different] Expected text value '2010-01-07T10:30:15.000-05:00' but was '2010-01-07T16:30:15.000+01:00' - comparing <dateTime ...>2010-01-07T10:30:15.000-05:00</dateTime> at /NotificationEvent[1]/dateTime[1]/text()[1] to <dateTime ...>2010-01-07T16:30:15.000+01:00</dateTime> at /NotificationEvent[1]/dateTime[1]/text()[1]

	at junit.framework.Assert.fail(Assert.java:47)
{code}


davsclaus:1288998747:2010-11-06T07:12:27.471+0000:1288998747:2010-11-06T07:12:27.471+0000:Failed tests: 
  attributeChange(org.apache.camel.component.jmx.JMXConsumerTest)
  notification(org.apache.camel.component.jmx.JMXConsumerTest)
  userData(org.apache.camel.component.jmx.JMXConsumerTest)
  jmxConnection(org.apache.camel.component.jmx.JMXConsumerTest)
  mbeanServerNotification(org.apache.camel.component.jmx.JMXConsumerTest)
  relationNotification(org.apache.camel.component.jmx.JMXConsumerTest)
  timerNotification(org.apache.camel.component.jmx.JMXConsumerTest)
  notification(org.apache.camel.component.jmx.JMXRemoteTest)
davsclaus:1288999143:2010-11-06T07:19:03.376+0000:1288999143:2010-11-06T07:19:03.376+0000:I wonder if the unit tests can be compatible with JDK 1.5.

When you compile with 1.5 you get this compilation error
/Users/davsclaus/workspace/camel/components/camel-jmx/src/test/java/org/apache/camel/component/jmx/SimpleBeanFixture.java:[27,24] cannot find symbol
symbol  : class JMX
location: package javax.management

Its because that JMX class is only from JDK 1.6+.
massfords:1289016117:2010-11-06T12:01:57.005+0000:1289016117:2010-11-06T12:01:57.005+0000:It would be easier if you'd just move to my timezone. ;) 

As for JDK 1.5, I've been developing in 1.6 since 1.5 entered its end of life phase. I'll switch back and make the changes if camel is still on 1.5. At some point, camel needs to make the switch since there are many environments where 1.5 is no longer allowed to run.
davsclaus:1289022896:2010-11-06T13:54:56.975+0000:1289022896:2010-11-06T13:54:56.975+0000:Mark maybe its possible to set maven to only compile and test if JDK 1.6 or better.
That way you can keep the test source code as is.

Camel 3.0 will be JDK 1.6+
But we will keep Camel 2.x compatible with JDK 1.5.

Yeah the timezone testing is a bugger. Maybe you can just test by the date, eg YYYY-mm-DD. 

massfords:1289023274:2010-11-06T14:01:14.108+0000:1289023274:2010-11-06T14:01:14.108+0000:I have other tests where I'm stripping the timestamp/datetime before doing the assertion. I'll use that same technique for these tests.

I'll look at the JDK 1.5 shortly.
massfords:1289030419:2010-11-06T16:00:19.667+0000:1289030419:2010-11-06T16:00:19.667+0000:I fixed the timestamp by using XSLT to strip the timestamp and datetime from the xml prior to the assertion. I use xpath to validate that the timestamp and datetime elements exist but avoid the datetime format due to the timezone issue.

I added a profile to the pom.xml to add the required dependencies for jaxb when running in jdk 1.5. I also modified the unit tests to not use the JMX helper class and instead use the long way around to create the proxy. 

I'm still having trouble with the relationNotification test so I added the ignore flag on that one. The notification created by the simple bean apparently isn't valid according to the rules in 1.5 although it worked fine in 1.6. I'll look at this at some point in the future.
davsclaus:1289037904:2010-11-06T18:05:04.590+0000:1289037904:2010-11-06T18:05:04.590+0000:We are getting closer

I get some timestamp errors still
{code}

org.junit.ComparisonFailure: 
Expected :1262878215000
Actual   :1262856615000
	at org.junit.Assert.assertEquals(Assert.java:123)
	at org.junit.Assert.assertEquals(Assert.java:145)
	at org.apache.camel.component.jmx.SimpleBeanFixture.assertMessageReceived(SimpleBeanFixture.java:288)
	at org.apache.camel.component.jmx.JMXConsumerTest.waitAndAssertMessageReceived(JMXConsumerTest.java:94)
	at org.apache.camel.component.jmx.JMXConsumerTest.attributeChange(JMXConsumerTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
{code}

All 7 tests fail on JMXConsumerTest on both JDK 1.5 and 1.6.

And the change to pom.xml was not needed as camel-core will bring in the JAXB stuff if on JDK 1.5. I got some maven activation for that.
I will apply the patch but keep the JMXConsumerTest at @Ignore
davsclaus:1289038163:2010-11-06T18:09:23.461+0000:1289038163:2010-11-06T18:09:23.461+0000:Latest patch in trunk: 1032126.
massfords:1289039384:2010-11-06T18:29:44.966+0000:1289039384:2010-11-06T18:29:44.966+0000:Wow, three attempts to fix a timestamp issue. This is going to look bad on my permanent record.

This patch replaces the assertion on the value of the timestamp with an assertion on its existence. I also noticed that SimpleBeanMBean was not part of the update but was included in the previous patch. I am including this file again as part of this patch. I believe it is necessary when registering the test bean under jdk 1.5.
davsclaus:1289040306:2010-11-06T18:45:06.321+0000:1289040306:2010-11-06T18:45:06.321+0000:trunk: 1032130.

Mark it works now. Thanks for all the patches and donating it to Apache.

Btw just wait to we get the CI servers testing this on AIX, HP-UX and other eccentric platforms. Then we may get other weird test errors :)
davsclaus:1303610293:2011-04-24T09:58:13.802+0000:1303610293:2011-04-24T09:58:13.802+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3235,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Duplicate,2.5.0,Willem Jiang,Auke van Leeuwen,0,0,2010-10-14 10:26:35+00:00,2011-04-24 09:58:26+00:00,"Scenario: I create two simple routes in different bundles:


  <route id=""jettyRoute1"">
    <from uri=""jetty:http://0.0.0.0:15000/jetty?matchOnUriPrefix=true""/>
    <to uri=""log:nl.example.jetty.jetty1?showAll=true&level=INFO""/>
  </route>


and (the other bundle):


  <route id=""jettyRoute2"">
    <from uri=""jetty:http://0.0.0.0:16000/jetty?matchOnUriPrefix=true""/>
    <to uri=""log:nl.example.jetty.jetty2?showAll=true&level=INFO""/>
  </route>


When I go to http://localhost:15000/jetty or http://localhost:16000/jetty I get both log message in my log. My routes are working. However when I restart one of those bundles both jetty servers are killed and only one is restarted.


See also http://servicemix.396122.n5.nabble.com/Jetty-connector-stops-unexpectedly-td3208647.html","aukevanleeuwen:1287023492:2010-10-14T10:31:32.962+0000:1287023546:2010-10-14T10:32:26.292+0000:Added:
- Log from servicemix (fuse version)
- Projects to build the two bundles.
njiang:1287103054:2010-10-15T08:37:34.581+0000:1287103054:2010-10-15T08:37:34.581+0000:This issue is resolved the in CAMEL-3047.
davsclaus:1303610306:2011-04-24T09:58:26.773+0000:1303610306:2011-04-24T09:58:26.773+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3234,Bug,Major,None,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Daniel Kulp,0,0,2010-10-14 18:31:13+00:00,2011-04-24 09:57:23+00:00,"If you use -Psetup.eclipse or eclipse:eclipse to setup the projects, it sets the execution environment to J2SE-1.5.  HOWEVER, if using Java6, it doesn't include many of the dependencies that are required for Java 5, like JAXB and activation and such.


I'm attaching a patch that, when you use -Psetup.eclipse, changes the compiler plugin to 1.6 when using 1.6 ONLY for that profile.   This, in effect, sets the execution environment to workspace default (which will likely be 1.6 if using 1.6) and thus things build.   The projects then import correctly and build.


FYI: this was taken from CXF's build system.","hadrian:1287080499:2010-10-15T02:21:39.047+0000:1287080499:2010-10-15T02:21:39.047+0000:Patch applied at rev: 1022811. Thanks again Dan.
davsclaus:1303610243:2011-04-24T09:57:23.662+0000:1303610243:2011-04-24T09:57:23.662+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3233,Bug,Major,None,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Daniel Kulp,0,0,2010-10-14 17:17:50+00:00,2011-04-24 09:57:04+00:00,The eclipse setups in the poms generates invalid  projects for camel-blueprint and camel-spring due to refering to source directories outside of the basedir.,"dkulp:1287047921:2010-10-14T17:18:41.304+0000:1287047921:2010-10-14T17:18:41.304+0000:
Use antrun to add the extra sources into the sources jar.
hadrian:1287052010:2010-10-14T18:26:50.218+0000:1287052010:2010-10-14T18:26:50.218+0000:Patch working with java5 and committed at rev: 1022639. Testing with java6 now.
Dan, thanks for the contribution!
davsclaus:1303610224:2011-04-24T09:57:04.678+0000:1303610224:2011-04-24T09:57:04.678+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3232,Test,Major,2.5.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-10-14 17:16:28+00:00,2011-04-24 09:57:06+00:00,"Running camel-ftp tests fails with java 1.5 with a few of the previous versions of ftpserver, but it passes with java 6. 
This is only a blocker for the 2.5.0 release.","hadrian:1287054256:2010-10-14T19:04:16.959+0000:1287054256:2010-10-14T19:04:16.959+0000:As I suspected, this is interference between tests. Running with forkMode=perTest works. Just a matter of finding the offending code, but we have a workaround. Downgrading to major and it is no longer blocking the release. Will still try to resolve it though in the next hours.
njiang:1287091595:2010-10-15T05:26:35.164+0000:1287091595:2010-10-15T05:26:35.164+0000:@Hadrain,

Which version of JDK 5 are you using?
Did you have change to use the latest JDK 1.5.0-24 to run the test?

Claus said it's OK for him to run with it
{code}
Works fine for me

davsclaus:(svn)camel[trunk:1021991]/components/camel-ftp$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_24
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.4"" arch: ""i386"" Family: ""unix""
davsclaus:(svn)camel[trunk:1021991]/components/camel-ftp$ mvn clean install
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: FTP
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------

...

[INFO] Installing
org/apache/camel/camel-ftp/2.5-SNAPSHOT/camel-ftp-2.5-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5 minutes 54 seconds
[INFO] Finished at: Wed Oct 13 06:37:32 CEST 2010
[INFO] Final Memory: 31M/86M
[INFO] ------------------------------------------------------------------------
davsclaus:(svn)camel[trunk:1021991]/components/camel-ftp$

{code}
hadrian:1287123171:2010-10-15T14:12:51.945+0000:1287123209:2010-10-15T14:13:29.761+0000:It does not work with this version of java:
{code}
java version ""1.5.0_19""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_19-b02-304)
Java HotSpot(TM) Client VM (build 1.5.0_19-137, mixed mode, sharing)
{code}

I upgraded to 
{code}
java version ""1.5.0_24""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_24-b02-357-10M3065)
Java HotSpot(TM) Client VM (build 1.5.0_24-149, mixed mode, sharing)
{code}

{code}
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6 minutes 8 seconds
{code}


and I can confirm that it works. I will release note this and close this issue (it would be nice to know what the issue really was, but I guess we'll never know now)

Thanks!
davsclaus:1303610226:2011-04-24T09:57:06.821+0000:1303610226:2011-04-24T09:57:06.821+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3231,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Beat Glattfelder,0,0,2010-10-13 14:34:23+00:00,2011-04-24 09:57:51+00:00,"registering the Initiator before it has been started will not register the sessions mbeans with JMX. So the acceptors are ther, but no initiators.","bglattfelder:1286951807:2010-10-13T14:36:47.871+0000:1286951807:2010-10-13T14:36:47.871+0000:Moved the JMX registration to the start() method
bglattfelder:1286955364:2010-10-13T15:36:04.985+0000:1286955364:2010-10-13T15:36:04.985+0000:... and the updated unit test
hadrian:1286963097:2010-10-13T17:44:57.309+0000:1286963097:2010-10-13T17:44:57.309+0000:Hi Beat,

It is easier to review if you attach just the patch, not the whole file. I edited the files manually and created the patch that reflects your changes (`svn diff > patch.txt` if you use svn).

However I get 2 QFJ mbean not registered errors this patch seems to introduce and I'll have to look into before applying it (unless you beat me to it).

Many thanks for the patch!
bglattfelder:1287019053:2010-10-14T09:17:33.563+0000:1287019053:2010-10-14T09:17:33.563+0000:Where do you get the errors, in the unit tests?
hadrian:1287028939:2010-10-14T12:02:19.739+0000:1287028939:2010-10-14T12:02:19.739+0000:Yes, 2 of the tests in QuickfixjEngineTest.
bglattfelder:1287030359:2010-10-14T12:25:59.008+0000:1287030359:2010-10-14T12:25:59.008+0000:I have patched both ""enableJmx.."" test methods and they both passed
davsclaus:1287056376:2010-10-14T19:39:36.328+0000:1287056376:2010-10-14T19:39:36.328+0000:trunk: 1022678.

Thanks Beat for the patch.

Tested it with both JDK 1.5 and 1.6.
davsclaus:1303610271:2011-04-24T09:57:51.230+0000:1303610271:2011-04-24T09:57:51.230+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3230,Improvement,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-10-13 03:59:54+00:00,2011-04-24 09:57:04+00:00,"As the cachedTheadPool profile is deprecated, we need to do some change for it.",davsclaus:1303610224:2011-04-24T09:57:04.297+0000:1303610224:2011-04-24T09:57:04.297+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3229,Task,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Daniel Kulp,0,0,2010-10-12 19:53:19+00:00,2011-04-24 09:58:16+00:00,The poms currently generate a bunch of warnings with Maven 3.   Fixing those should help make the builds more reproducible and start making it work better with Maven 3.,"dkulp:1286884489:2010-10-12T19:54:49.196+0000:1286884489:2010-10-12T19:54:49.196+0000:
I'm attaching a patch that fixes all the warnings EXCEPT those due to the use of the java.net maven 1 repo.   Maven 3 does not support the legacy format anymore.  Thus, that repo needs to be removed.   I'll work on that in a subsequent  patch, but this patch is at least a start.
hadrian:1286962130:2010-10-13T17:28:50.329+0000:1286962130:2010-10-13T17:28:50.329+0000:Patch applied (rev: 1022200) with thanks to Dan. We need more from you!
davsclaus:1303610296:2011-04-24T09:58:16.740+0000:1303610296:2011-04-24T09:58:16.740+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3228,Improvement,Major,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Dmitry Buzdin,0,1,2010-10-12 19:50:13+00:00,2011-10-25 11:36:05+00:00,"Dozer 5.3.0 has been released. It has changes in internal API, which make usage of dozer-camel impossible with the most recent version.
As Dozer maintainer I could contribute a patch upgrading camel-dozer module to use 5.3.0.","davsclaus:1287058287:2010-10-14T20:11:27.230+0000:1287058287:2010-10-14T20:11:27.230+0000:Yeah we love patches. So please contribute a patch so we can upgrade to use Dozer 5.3
dmitry_buzdin:1287661344:2010-10-21T19:42:24.410+0000:1287661344:2010-10-21T19:42:24.410+0000:Here you go.
Should be working fine. Now it is possible to define mappings in programmatic way using builders. This is a second supported format in Dozer since version 5.3.0.

I can update documentation page as well if you could give me access to the Wiki.
dmitry_buzdin:1287661416:2010-10-21T19:43:36.556+0000:1287661416:2010-10-21T19:43:36.556+0000:Changed fix version to 2.5.0 as this is the one in pom.xml right now.
davsclaus:1287711776:2010-10-22T09:42:56.407+0000:1287711776:2010-10-22T09:42:56.407+0000:Whats the difference between dozer and dozer-osgi artifacts?
davsclaus:1287712175:2010-10-22T09:49:35.770+0000:1287712175:2010-10-22T09:49:35.770+0000:In the OSGi test I get this constraint error
{code}
ERROR: Error starting file:bundles/net.sf.dozer.dozer-osgi_5.3.0.jar (org.osgi.framework.BundleException: Unresolved constraint in bundle net.sf.dozer.dozer-osgi [33]: package; (package=org.hibernate.proxy))
org.osgi.framework.BundleException: Unresolved constraint in bundle net.sf.dozer.dozer-osgi [33]: package; (package=org.hibernate.proxy)
        at org.apache.felix.framework.Felix.resolveBundle(Felix.java:3263)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:1597)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1077)
        at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:264)
        at java.lang.Thread.run(Thread.java:637)
{code}

What Hibernate JAR are you using?
davsclaus:1287712332:2010-10-22T09:52:12.954+0000:1287712332:2010-10-22T09:52:12.954+0000:trunk: 1026271.

Thanks for the patch. I have applied it.
However the OSGi feature for camel-dozer fails to be installed in Karaf as shown above.
dmitry_buzdin:1287714234:2010-10-22T10:23:54.070+0000:1287714234:2010-10-22T10:23:54.070+0000:We use hibernate-core 3.5.0. This is optional runtime dependency. Dozer works without that, only one implementation of SPI interface depends on Hibernate.
dozer-osgi is simply osgified version of dozer with help of Felix maven plugin. How do we deal with this issue?
davsclaus:1287720298:2010-10-22T12:04:58.609+0000:1287720298:2010-10-22T12:04:58.609+0000:I pulled out the MANIFEST.MF from the JAR
{code}

Manifest-Version: 1.0
Export-Package: org.dozer.factory;uses:=""org.dozer.config,org.dozer,or
 g.slf4j,org.dozer.util,javax.xml.datatype"",org.dozer.converters;uses:
 =""org.apache.commons.beanutils,javax.xml.datatype,org.apache.commons.
 lang,org.apache.commons.beanutils.converters,org.apache.commons.lang.
 builder,org.dozer,org.dozer.cache"",org.dozer.spring;uses:=""org.spring
 framework.core.io,org.dozer,org.springframework.beans.factory"",org.do
 zer.propertydescriptor;uses:=""org.dozer.factory,org.dozer.fieldmap,or
 g.dozer,org.dozer.classmap,org.dozer.util"",org.dozer.loader;uses:=""or
 g.dozer.loader.xml,org.dozer.fieldmap,org.dozer.converters,org.dozer.
 classmap,org.slf4j,org.dozer.util,org.apache.commons.lang"",org.dozer.
 classmap;uses:=""org.dozer.fieldmap,org.dozer.converters,org.apache.co
 mmons.lang.builder,org.dozer.util,org.apache.commons.lang"",org.dozer.
 util;uses:=""org.apache.commons.beanutils,org.dozer.factory,org.dozer.
 converters,org.dozer.propertydescriptor,org.dozer.classmap,org.slf4j,
 org.apache.commons.lang,org.hibernate.proxy,org.dozer.config,org.doze
 r.fieldmap,org.apache.commons.lang.builder,org.dozer,org.dozer.cache""
 ,org.dozer.loader.xml;uses:=""javax.el,org.dozer.loader,javax.xml.pars
 ers,org.dozer.classmap,org.dozer.util,org.slf4j,org.w3c.dom,org.apach
 e.commons.lang,org.xml.sax,org.dozer.config,org.dozer,org.xml.sax.hel
 pers"",org.dozer.config;uses:=""org.dozer.loader.xml,org.slf4j,org.doze
 r.util"",org.dozer.fieldmap;uses:=""org.dozer.factory,org.dozer.propert
 ydescriptor,org.apache.commons.lang.builder,org.dozer.classmap,org.sl
 f4j,org.dozer.util"",org.dozer.event;uses:=""org.dozer.fieldmap,org.doz
 er,org.dozer.classmap,org.dozer.util"",org.dozer.stats;uses:=""org.doze
 r.config,org.apache.commons.lang.builder,org.slf4j,org.dozer.util"",or
 g.dozer.loader.api;uses:=""org.dozer.loader,org.dozer.classmap,org.apa
 che.commons.lang"",org.dozer;uses:=""org.dozer.factory,org.dozer.conver
 ters,org.dozer.loader,javax.management,org.dozer.classmap,org.dozer.u
 til,org.slf4j,org.apache.commons.lang,org.dozer.loader.xml,org.dozer.
 config,org.dozer.fieldmap,org.dozer.event,org.dozer.stats,org.dozer.l
 oader.api,org.dozer.jmx,org.dozer.cache"",org.dozer.cache;uses:=""org.d
 ozer.stats,org.apache.commons.lang.builder,org.dozer.util,org.slf4j"",
 org.dozer.jmx;uses:=""org.dozer.config,org.dozer.stats,javax.managemen
 t,org.slf4j""
Private-Package: !*
Built-By: buzdin
Tool: Bnd-0.0.227
Bundle-Name: dozer-osgi
Created-By: Apache Maven Bundle Plugin
Build-Jdk: 1.6.0_15
Bundle-Version: 5.3.0
Bnd-LastModified: 1286913037471
Bundle-ManifestVersion: 2
Bundle-Description: dozer.osgi
Bundle-SymbolicName: net.sf.dozer.dozer-osgi
Embed-Dependency: *;scope=provided;type=!pom;inline=true
Import-Package: javax.el,javax.management,javax.xml.datatype,javax.xml
 .parsers,org.apache.commons.beanutils,org.apache.commons.beanutils.co
 nverters,org.apache.commons.lang,org.apache.commons.lang.builder,org.
 dozer,org.dozer.cache,org.dozer.classmap,org.dozer.config,org.dozer.c
 onverters,org.dozer.event,org.dozer.factory,org.dozer.fieldmap,org.do
 zer.jmx,org.dozer.loader,org.dozer.loader.api,org.dozer.loader.xml,or
 g.dozer.propertydescriptor,org.dozer.spring,org.dozer.stats,org.dozer
 .util,org.hibernate.proxy,org.slf4j,org.springframework.beans.factory
 ,org.springframework.core.io,org.w3c.dom,org.xml.sax,org.xml.sax.help
 ers
Originally-Created-By: Apache Maven
Archiver-Version: Plexus Archiver
{code}


davsclaus:1287720374:2010-10-22T12:06:14.198+0000:1287720374:2010-10-22T12:06:14.198+0000:I will let the Maven OSGi experts have a go at this.

I think you can specify that hibernate stuff as being optional.
Also I think there is a rule of thumb to *not* import the same packages you export. But will leave it up to the OSGi maven experts to tell.
njiang:1287725375:2010-10-22T13:29:35.648+0000:1287725375:2010-10-22T13:29:35.648+0000:There is two issues of the dozer MANIFEST.MF,
1. The export packages don't specify the version.
2. It imports the same packages which it exports.

If there are two doze bundles installed, the OSGi platform will be confused as it don't know which package which right version should be exported or imported.

To fix this issue we could create a OSGi wrap bundle in ServiceMix, as Camel 2.5.0 is cutting today, I doubt we can do it on time.
Maybe we can put it as a known issue in the release note and let user use the bundle of ServiceMix.
davsclaus:1287725724:2010-10-22T13:35:24.725+0000:1287725724:2010-10-22T13:35:24.725+0000:Yeah we should help Dmitry to have the Dozer project being able to generate a better OSGi MANIFEST.MF.

We will put this on known issue for Camel 2.5, and then in Camel 2.6 we could have this fixed when the next release of Dozer is out and have the OSGi stuff improved.
davsclaus:1287725777:2010-10-22T13:36:17.060+0000:1287725777:2010-10-22T13:36:17.060+0000:There are a zillion options and tweaks you can do in the maven bundle plugin, so maybe Willem can help you to improve that in your pom.xml.
I assume you have used that to generate the osgi metadata.
dmitry_buzdin:1287727557:2010-10-22T14:05:57.047+0000:1287727557:2010-10-22T14:05:57.047+0000:Would gladly accept help. I am not an OSGi expert (or even a user). Here is the pom.xml of the dozer-osgi. 
http://dozer.svn.sourceforge.net/viewvc/dozer/trunk/osgi/pom.xml?revision=1084&view=markup

And pom.xml of dozer itself. Just in case.
http://dozer.svn.sourceforge.net/viewvc/dozer/trunk/core/pom.xml?revision=1084&view=markup
njiang:1287728616:2010-10-22T14:23:36.561+0000:1287728616:2010-10-22T14:23:36.561+0000:@ Dmitry
I just created a JIRA in SMX4-613, maybe you can take a look at the patch and publish a new Dozer-OSGI bundle.
In this way we don't need to update the camel feature for it.

dmitry_buzdin:1287729358:2010-10-22T14:35:58.343+0000:1287729358:2010-10-22T14:35:58.343+0000:I could do this over the weekend and release 5.3.1.
njiang:1287730259:2010-10-22T14:50:59.629+0000:1287730259:2010-10-22T14:50:59.629+0000:@Dmitry,
Here is the osgi pom, that I just changed.

Can dozer run with commons-lang 2.4 ?
If not you can specify the version rang of commons-lang as you need.
As the package of javax*, and org.xml* are export default by OSGi, we don't need to specify the version.

For the hibernate, spring and sl4j packages you may also need to specify the version number.


dmitry_buzdin:1287966514:2010-10-25T08:28:34.901+0000:1287966514:2010-10-25T08:28:34.901+0000:Did OSGi tricks you suggested. Thanks!
commons-lang 2.4 is not a problem.
Hibernate and Spring are optional dependencies. Also put some version ranges.
Please test the attached Jar and if it works I will put it to Maven repo.
davsclaus:1287988443:2010-10-25T14:34:03.446+0000:1287988443:2010-10-25T14:34:03.446+0000:Looks like the new JAR can be loaded in OSGi now.

Just that loading the mapping file from classpath now fails. Yeah OSGi influence this as well
{code}
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)
        at org.apache.camel.core.osgi.OsgiTypeConverter.mandatoryConvertTo(OsgiTypeConverter.java:94)
        at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
        ... 58 more
Caused by: org.dozer.MappingException: Unable to locate dozer mapping file [org/apache/camel/itest/osgi/dozer/dozer-mapping.xml] in the classpath!
        at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:93)
        at org.dozer.util.MappingValidator.validateURL(MappingValidator.java:61)
        at org.dozer.loader.CustomMappingsLoader.loadFromFiles(CustomMappingsLoader.java:101)
        at org.dozer.loader.CustomMappingsLoader.load(CustomMappingsLoader.java:56)
        at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:159)
        at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:142)
        at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:98)
        at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:46)
        at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:50)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:181)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:136)
        ... 60 more
{code}
dmitry_buzdin:1288050917:2010-10-26T07:55:17.671+0000:1288050917:2010-10-26T07:55:17.671+0000:Dozer test wants to load Xml resource from classpath. I am not sure that this is Dozer bundle responsibility to restrict or allow such operations or am I wrong?
Is it possible to tell that Dozer is eligible to load any classpath resources somehow? This also is actual for classes, because some custom features could be implemented in application and then plugged in into Dozer mappings, which requires access to these classes in runtime.
davsclaus:1288054439:2010-10-26T08:53:59.676+0000:1288054439:2010-10-26T08:53:59.676+0000:Dmitry

Yeah the new JAR is much better than the old one. So I think you should go ahead and do a 5.3.1 release.

In terms of classloading. I would suggest to provide a SPI for end users so they can provide URL or InputStream or something to load the resources.
This allows them to use Dozer in various servers which otherwise would have difficulty otherwise. For example JBoss, WebSphere may have issues loading on classpath.
BEA WebLogic as well. etc.

In the camel-dozer component it allows us from Camel to use the SPI to ensure the resources can be loaded using the Camel ClassResolver SPI
which we have adapters for OSGi, JBoss, WebSphere etc.

If you want to let OSGi be able to load from classpath and the end user can in fact put the mapping files in any classpath they like.
So to remedy that you may have to enable the dynamic imports. 

In the pom.xml you can do:
<DynamicImport-Package>*</DynamicImport-Package>

This may give some other problems in the longer run.
dmitry_buzdin:1288148547:2010-10-27T11:02:27.610+0000:1288148547:2010-10-27T11:02:27.610+0000:We already have SPI for classloading. What is left is implementation of Resource loading. I will do that and release 5.3.1.
Hope this does not impact your release schedule. If you need that by specific data please tell, otherwise it will be prepared at end of this week.
davsclaus:1288227702:2010-10-28T09:01:42.056+0000:1288227702:2010-10-28T09:01:42.056+0000:It wont make it in Camel 2.5. But sure for Camel 2.6 it will.

And this is only an issue when using OSGi. So people with Camel 2.5 can use Dozer.
And people in OSGi can upgrade to Dozer 5.3.1 to get a bit further ahead. Only the last piece of classloading their mapping files may require a bit of OSGi configuration trouble to get working.

If Dozer offers the SPI for Camel to leverage later one then it should work out of the box for the end user when using Camel and Dozer.

If you look at, and see the method - loadMappings
https://svn.apache.org/repos/asf/camel/trunk/components/camel-dozer/src/main/java/org/apache/camel/converter/dozer/DozerTypeConverterLoader.java

You can see we use the Camel ClassResolver.

Its just that I think {{DozerBeanMapper}} is not having such a SPI for 3rd party to leverage for classloading pain

davsclaus:1289285406:2010-11-09T14:50:06.027+0000:1289285406:2010-11-09T14:50:06.027+0000:Dmitry how is it going with Dozer and OSGi?
dmitry_buzdin:1289286024:2010-11-09T15:00:24.261+0000:1289286024:2010-11-09T15:00:24.261+0000:I am publishing 5.3.1 release this week. Fixed a couple of bugs together with OSGi stuff.
dmitry_buzdin:1289793474:2010-11-15T11:57:54.257+0000:1289793474:2010-11-15T11:57:54.257+0000:Claus, Dozer release is ready and will be published to Maven repository tonight. SPI interface for resource loading has also been added. 
The problem with itest you posted is related to the fact Dozer is initialized by Spring without Camel-Dozer infrastructure thus the standard resource loading policy is invoked instead of the one provided by extension module.
I will *not* put <DynamicImport-Package>*</DynamicImport-Package> for now. Lets try to solve it differently.
njiang:1289794290:2010-11-15T12:11:30.572+0000:1289794290:2010-11-15T12:11:30.572+0000:@Dmitry

I will update the Dozer version once the artifacts appears in the Maven repository.
dmitry_buzdin:1290648615:2010-11-25T09:30:15.481+0000:1290648615:2010-11-25T09:30:15.481+0000:dozer 5.3.1 is already in Maven. Let me know if you need any additional changes.
njiang:1290668092:2010-11-25T14:54:52.537+0000:1290668092:2010-11-25T14:54:52.537+0000:@Dmitry

I just ran a test with the latest dozer-osgi 5.3.1,  and got the same error as claus got.
It looks like the classloader for the MappingValidator  is not set rightly.

{code}
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.itest.osgi.dozer.service.Customer to the required type: org.apache.camel.itest.osgi.dozer.model.Customer with value org.apache.camel.itest.osgi.dozer.service.Customer@5e149a
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)
	at org.apache.camel.core.osgi.OsgiTypeConverter.mandatoryConvertTo(OsgiTypeConverter.java:94)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
	... 55 more
Caused by: org.dozer.MappingException: Unable to locate dozer mapping file [org/apache/camel/itest/osgi/dozer/dozer-mapping.xml] in the classpath!
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:93)
	at org.dozer.util.MappingValidator.validateURL(MappingValidator.java:63)
	at org.dozer.loader.CustomMappingsLoader.loadFromFiles(CustomMappingsLoader.java:101)
	at org.dozer.loader.CustomMappingsLoader.load(CustomMappingsLoader.java:56)
	at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:210)
	at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:185)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:111)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:46)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:50)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:181)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:136)
	... 57 more

{code}
dmitry_buzdin:1290668355:2010-11-25T14:59:15.380+0000:1290668355:2010-11-25T14:59:15.380+0000:@Willem the problem is that integration test creates Dozer instance via Spring directly, but not with help of dozer-camel component.
If you do create a raw instance of dozer then it is not osgi compatible out of the box. Take a look at tests in camel-dozer module to see the proper initialization code.
njiang:1290745452:2010-11-26T12:24:12.907+0000:1290745452:2010-11-26T12:24:12.907+0000:@Dmitry,

I dig the code of the DozerTypeConverterLoader, it works as I expected which can load the customer mapper file from OSGi bundle.
But when the DozerTypeConverter tries convert the objects , it will use the DozerBeanMapper which is not injected with right class loader.

I'm trying to set the ClassMap into the DozerBeanMapper, but I can't do it without changing the code of DozerBeanMapper.
Can you double check the DozerBeanMapper ?
davsclaus:1290746413:2010-11-26T12:40:13.496+0000:1290746413:2010-11-26T12:40:13.496+0000:Yeah the last time I looked at it the DozerBeanMapper lacks an API to let 3rd party better control class loading.
davsclaus:1291792713:2010-12-08T15:18:33.032+0000:1291792713:2010-12-08T15:18:33.032+0000:Konstantin are you considering adding some way for Camel to provide a classloader for the DozerBeanMapper ?
Thats whats needed to have it working with OSGi or in fact other platforms. A way to provide a custom classloader.
karafman:1293093125:2010-12-23T16:32:05.860+0000:1293093125:2010-12-23T16:32:05.860+0000:From Willem Jiang on the camel users mailing list:

Hi,

Please feel free to create a JIRA in Camel, so we can keep trace with
it. There are some known issue[1] about using dozer in osgi, hope we can
address it in the next version of dozer.

[1]https://issues.apache.org/jira/browse/CAMEL-3228

Willem 
davsclaus:1293155963:2010-12-24T09:59:23.699+0000:1293155963:2010-12-24T09:59:23.699+0000:Dozer 5.3.1 is *still* still doesn't work with OSGi as it doesn't offer an API to provide the classloader to use for loading Dozer configuration files.

The Dozer team must provide such an API to be fully OSGi complaint.
dmitry_buzdin:1294736261:2011-01-11T16:57:41.498+0000:1294736261:2011-01-11T16:57:41.498+0000:Hi guys,

There is some stupid thing. My account has been hijacked or ""taken over by accident"" by Konstantin.
Sorry for being off the thread.

Dozer does have a mechanism to override class and resource loading policies.
This is the reference to SPI interface JavaDoc http://dozer.sourceforge.net/apidocs/org/dozer/util/DozerClassLoader.html

Additionaly camel-dozer plugin osgfies Dozer by itself. The integration test which is failing is using Dozer without plugin support (e.g. directly) and neither override SPI interface.

The options are either to rewrite itest to use dozer plugin instead of pure dozer or add camel specific implementation of DozerClassLoader iface.

I am eager to get it solved this week, so I will keep in touch.

Dmitry
dmitry_buzdin:1294738077:2011-01-11T17:27:57.973+0000:1294738077:2011-01-11T17:27:57.973+0000:Here is a description on how to change the implementaiton type. In our case System.setProperty is the only way as loading dozer properties file requires changed behavior already.
http://dozer.sourceforge.net/documentation/configuration/configuration.html

In case of other necessary modifications next 5.3.2 version will be ready to ship in January.
njiang:1294766498:2011-01-12T01:21:38.445+0000:1294766498:2011-01-12T01:21:38.445+0000:@Dmitry,

If you take a look at the CamelContext.xml[1] of the camel dozer osgi test, you will find we used the DozerTypeConverterLoader for testing.
And the configuration of replacing the SPI cannot help me to replace the DozerClassLoader with the instance of Camel one.

Please update the code of  DozerBeanMapper to help us inject the class loader of camel.
[1]https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/dozer/CamelContext.xml
dmitry_buzdin:1294885879:2011-01-13T10:31:19.073+0000:1294885879:2011-01-13T10:31:19.073+0000:Something like the following should do the thing.

{code}
        CamelToDozerAdapter adapter = new CamelToDozerAdapter(camelContext);
        BeanContainer.getInstance().setClassLoader(adapter);
{code}

{code}
    private static class CamelToDozerAdapter implements DozerClassLoader {

        private final ClassResolver classResolver;

        private CamelToDozerAdapter(CamelContext camelContext) {
            classResolver = camelContext.getClassResolver();
        }

        public Class<?> loadClass(String s) {
            return classResolver.resolveClass(s);
        }

        public URL loadResource(String s) {
            return classResolver.loadResourceAsURL(s);
        }
    }
{code}

I am now looking for the best place to add this code. The trick it to overwrite the behavior early so Dozer loads all resources using that.
dmitry_buzdin:1294891203:2011-01-13T12:00:03.261+0000:1294891203:2011-01-13T12:00:03.261+0000:CamelClassResolver integration
dmitry_buzdin:1294891323:2011-01-13T12:02:03.139+0000:1294891323:2011-01-13T12:02:03.139+0000:@Willem

I have attached a patch. Could you please test it. I have difficulties running osgi integration tests. The idea is that DozerMapper instance is provided to DozerTypeConverterLoader and it changes the internal behavior of class loading.
This should work with existing 5.3.1 version.
njiang:1294900162:2011-01-13T14:29:22.428+0000:1294900162:2011-01-13T14:29:22.428+0000:@Dmitry,
Thanks for your contribution.
I just committed your patch with some change to get the OSGi integration test passed.
1. Using the classloader of DozerClassLoader as a fallback for LoadResource
2. Fixing the CamelContext.xml issue of OSGi DozerTest

dmitry_buzdin:1294900326:2011-01-13T14:32:06.494+0000:1294900326:2011-01-13T14:32:06.494+0000:@Willem 

Glad to hear that! Thanks for the support."
0,CAMEL-3227,Test,Trivial,None,None,"
None
",Closed,Fixed,2.6.0,Willem Jiang,Carl Johan Erik Edstrom,0,0,2010-10-12 19:14:04+00:00,2011-04-24 09:57:58+00:00,"Camel-Bean-Validator, patch for new osgi test.","njiang:1287620088:2010-10-21T08:14:48.116+0000:1287620088:2010-10-21T08:14:48.116+0000:Will apply it after camel 2.5.0 released, as it require a new service validator bundle which is not released yet.
njiang:1289238343:2010-11-09T01:45:43.927+0000:1289238343:2010-11-09T01:45:43.927+0000:Applied patch with thanks to Johan.
davsclaus:1303610278:2011-04-24T09:57:58.551+0000:1303610278:2011-04-24T09:57:58.551+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3226,Task,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-12 18:23:02+00:00,2011-04-24 09:58:07+00:00,"http://maven.reucon.com/public is unreliable and not avail today


I will attach the local .jar I got. Then someone can get it into a reliable repo","davsclaus:1286882556:2010-10-12T19:22:36.703+0000:1286882556:2010-10-12T19:22:36.703+0000:Thanks to Dan Kulp for syncing the smack jars to central maven repo.
davsclaus:1303610287:2011-04-24T09:58:07.945+0000:1303610287:2011-04-24T09:58:07.945+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3225,Task,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Daniel Kulp,0,0,2010-10-12 16:37:10+00:00,2011-04-24 09:58:03+00:00,"Since 2.5 will not be updated to CXF 2.3.0 and 2.3.0 may cause issues when used in conjunction with 2.5, the OSGi manifest should lock CXF down to [2.2.10,2.3).


Patch:


diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xml
index 2bff9de..775aea2 100644
— a/components/camel-cxf/pom.xml
+++ b/components/camel-cxf/pom.xml
@@ -39,6 +39,7 @@
       javax.jws*;version=""[0.0,3)"",
       javax.xml.stream*;version=""[0.0,2)"",
       javax.xml.ws*;version=""[0.0,3.0)"",
+      org.apache.cxf*;version=""[2.2.10,2.3)"",
       org.apache.camel.*;${camel.osgi.import.camel.version},
       ${camel.osgi.import.defaults},
       ${camel.osgi.import.additional},","davsclaus:1286878565:2010-10-12T18:16:05.840+0000:1286878565:2010-10-12T18:16:05.840+0000:trunk: 1021871.
davsclaus:1303610283:2011-04-24T09:58:03.879+0000:1303610283:2011-04-24T09:58:03.879+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3224,Task,Major,None,2.6.0,"
None
",Closed,Duplicate,2.6.0,Willem Jiang,Claus Ibsen,0,1,2010-10-12 15:20:04+00:00,2011-04-24 09:58:27+00:00,"Should we upgrade to CXF 2.3 on the next 2.x release, eg 2.6?
Or wait for Camel 3.0?","davsclaus:1286878000:2010-10-12T18:06:40.318+0000:1286878000:2010-10-12T18:06:40.318+0000:Remember to update the OSGi version in the pom.xml for CXF to be 2.3 as minimum range.
davsclaus:1288830169:2010-11-04T08:22:49.263+0000:1288830169:2010-11-04T08:22:49.263+0000:Duplicate of 3308
davsclaus:1303610307:2011-04-24T09:58:27.081+0000:1303610307:2011-04-24T09:58:27.081+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3223,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Madhav Bhargava,1,0,2010-10-12 14:41:54+00:00,2011-04-24 09:57:42+00:00,"org.apache.camel.component.file.GenericFileProducer
Method: writeFile


This method has the following statement:
InputStream payload = exchange.getIn().getBody(InputStream.class);


This internally results in calling a TypeConverter to convert an object into InputStream type. However this InputStream has not been used and is eventually closed in the finally block. 


In the same method calling method storeFile on FileOperations (boolean success = operations.storeFile(fileName, exchange) also opens an InputStream on the same message.","mukundha_g:1286873593:2010-10-12T16:53:13.894+0000:1286873593:2010-10-12T16:53:13.894+0000:Fix for Issue CAMEL-3223: GenericFileProducer.writeFile method creates instance of un-used InputStream
* src\main\java\org\apache\camel\component\file\GenericFileProducer.java
   writeFile(): Removed the InputStream variable initialization

Patch by: Mukundha Madhavan
njiang:1286926688:2010-10-13T07:38:08.143+0000:1286926688:2010-10-13T07:38:08.143+0000:@Claus, 
I'm not sure what's the payload InputStream for, it looks like useless, Can you confirm it?
davsclaus:1287056554:2010-10-14T19:42:34.555+0000:1287056554:2010-10-14T19:42:34.555+0000:Yeah its an oversight we didnt remove during the big file/ftp refactoring.
We should remove it.

I am running tests now with it removed.
davsclaus:1287058160:2010-10-14T20:09:20.344+0000:1287058160:2010-10-14T20:09:20.344+0000:trunk: 1022687.
davsclaus:1303610262:2011-04-24T09:57:42.278+0000:1303610262:2011-04-24T09:57:42.278+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3222,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-12 11:19:16+00:00,2011-04-24 09:58:05+00:00,"When you output a route definition as XML then all the boolean types and whatnot get outputted using their default values.


For example inheritErrorHandler=true.


This reduces the XML and keeps it much smaller.","davsclaus:1286854929:2010-10-12T11:42:09.134+0000:1286854929:2010-10-12T11:42:09.134+0000:We can get this into 2.5.
davsclaus:1286865577:2010-10-12T14:39:37.366+0000:1286865577:2010-10-12T14:39:37.366+0000:The last item is to remove auto assigned id on <to> and the likes. This work is non trivial as JMX / Tracer needs an unique id and hence they force the id to be generated.

davsclaus:1286877868:2010-10-12T18:04:28.830+0000:1286877868:2010-10-12T18:04:28.830+0000:trunk: 1021867.
davsclaus:1303610285:2011-04-24T09:58:05.149+0000:1303610285:2011-04-24T09:58:05.149+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3221,Task,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-10-12 08:05:35+00:00,2011-04-24 09:58:26+00:00,"camel-cxf supports to use the wsdl instead of the SEI if the dataformat is not POJO, we need to clean up the camel-example-cxf-proxy for it.","njiang:1286845544:2010-10-12T09:05:44.737+0000:1286845544:2010-10-12T09:05:44.737+0000:Also added an unit test for it.
davsclaus:1303610306:2011-04-24T09:58:26.346+0000:1303610306:2011-04-24T09:58:26.346+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3220,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-12 06:43:10+00:00,2011-04-24 09:58:09+00:00,"See nabble
http://camel.465427.n5.nabble.com/ThreadPoolExecutor-configuration-tp3207845p3207845.html","davsclaus:1286838875:2010-10-12T07:14:35.597+0000:1286838875:2010-10-12T07:14:35.597+0000:trunk: 1021642.
davsclaus:1303610289:2011-04-24T09:58:09.235+0000:1303610289:2011-04-24T09:58:09.235+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3219,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-12 05:23:29+00:00,2011-04-24 09:57:40+00:00,"See nabble
http://camel.465427.n5.nabble.com/Big-problem-with-csv-tab-separator-file-and-bindy-data-format-tp3207520p3207520.html","davsclaus:1286834076:2010-10-12T05:54:36.565+0000:1286834076:2010-10-12T05:54:36.565+0000:trunk: 1021635.
davsclaus:1303610260:2011-04-24T09:57:40.871+0000:1303610260:2011-04-24T09:57:40.871+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3218,New Feature,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Arno Noordover,0,0,2010-10-11 19:26:43+00:00,2011-04-24 09:57:45+00:00,"When using the http-component in combination with the proxy facility of camel exceptions don't get thrown as exceptions defined by the interface.
It would be nice if an exception in the response of a servlet called from a http component would be converted to normal objects.
Currently you have to use org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean. In combination with the solution of jira issue 3025 the response will be converted to normal java objects.
It would be nice if we could use the http component.","davsclaus:1286832117:2010-10-12T05:21:57.217+0000:1286832117:2010-10-12T05:21:57.217+0000:See nabble
http://camel.465427.n5.nabble.com/proxy-using-camel-http-td3207221.html#a3207221
davsclaus:1287963459:2010-10-25T07:37:39.272+0000:1287963459:2010-10-25T07:37:39.272+0000:Arno do you want to work on a patch?
anoordover:1288695551:2010-11-02T18:59:11.148+0000:1288695551:2010-11-02T18:59:11.148+0000:I'm afraid that i'm not proficient enough in Java to work on a patch for this feature.
davsclaus:1293337651:2010-12-26T12:27:31.001+0000:1293337651:2010-12-26T12:27:31.001+0000:I think we can try implementing the transferExchange feature in camel-http/camel-jetty/camel-servlet. Then you can enable that option and it will transfer the exchange as a serialized object over http.
davsclaus:1293413716:2010-12-27T09:35:16.302+0000:1293413716:2010-12-27T09:35:16.302+0000:trunk: 1053029.

There is now a {{transferException}} option you can use.
davsclaus:1293413746:2010-12-27T09:35:46.049+0000:1293413746:2010-12-27T09:35:46.049+0000:Also response send back using the application/x-java-serialized-object content type will now automatic be deserialzed as java objects.
davsclaus:1293414846:2010-12-27T09:54:06.924+0000:1293414846:2010-12-27T09:54:06.924+0000:ported to camel-http4 as well in rev 1053033.
davsclaus:1293610888:2010-12-29T16:21:28.041+0000:1293610888:2010-12-29T16:21:28.041+0000:Implemented this on jetty http producer and camel-servlet as well.

Also improved so both producer and consumer side supports content type with serialized java objects for the regular payload as well (not only when transferException=true).

trunk: 1053667.
davsclaus:1293612078:2010-12-29T16:41:18.528+0000:1293612078:2010-12-29T16:41:18.528+0000:Ported changes to camel-http4 in rev: 1053671.
davsclaus:1303610265:2011-04-24T09:57:45.022+0000:1303610265:2011-04-24T09:57:45.022+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3217,Test,Trivial,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Carl Johan Erik Edstrom,Carl Johan Erik Edstrom,0,1,2010-10-11 16:35:09+00:00,2012-07-06 08:16:43+00:00,"Trivial AMQP test for PAX Exam.


http://github.com/seijoed/camel/commit/baf8aaedb9f975e4e467829dd6464616fa9bca3e","davsclaus:1301714528:2011-04-02T11:22:08.741+0000:1301714528:2011-04-02T11:22:08.741+0000:Johan you are a committer now. Can you port your unit test to Apache?
davsclaus:1341533803:2012-07-06T08:16:43.036+0000:1341533803:2012-07-06T08:16:43.036+0000:Lets close old ticket that are not in demand."
0,CAMEL-3216,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-10-11 15:25:12+00:00,2011-04-24 09:57:57+00:00,"scheduled consumers such as file / ftp uses ScheduledPollConsumer to poll. If a throwable is thrown then the thread may die due it throws that to the JDK.
We should avoid this and ensure to catch all exceptions, otherwise the thread may die, and the JDK will not re-schedule a new thread.


This cause it to stop polling.


See
http://fusesource.com/forums/thread.jspa?threadID=2320&tstart=0","davsclaus:1286783879:2010-10-11T15:57:59.594+0000:1286783879:2010-10-11T15:57:59.594+0000:trunk: 1021396.
davsclaus:1303610277:2011-04-24T09:57:57.817+0000:1303610277:2011-04-24T09:57:57.817+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3215,New Feature,Minor,2.4.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2010-10-09 12:58:50+00:00,2013-08-26 12:32:35+00:00,"This is just an idea. Suppose you have a RouteBuilder in Java DSL and you need a timeout value to be defined in a properties file



aggregateTimeout=20000




And then you want to use this timeout value in the RouteBuilder



from(""xxx"").aggregate(header(""group""), myStrategy).completionTimeout(timeout).to(""zzz"");




The problem is that the DSL requires the timeout to be an integer because that makes sense. So we can't use the property placeholder directly in the DSL as its a String type.
eg. the following is not possible



from(""xxx"").aggregate(header(""group""), myStrategy).completionTimeout(""{{aggregationTimeout}}"").to(""zzz"");




What we may need is to inject the timeout value in the RouteBuilder in a field



@PropertyInjected(""aggregationTimeout"")
private int timeout;




The @PropertyInjected annotation tells Camel to go look for the aggregationTimeout property and convert the value to the same type of the field, which is an int.
Now you can use that value in the Java DSL


There may be other or standard annotations/injections possible.


Any though?","davsclaus:1286600435:2010-10-09T13:00:35.401+0000:1286600435:2010-10-09T13:00:35.401+0000:We already got @EndpointInjected which we could improve. However I only think it works on a certain number of field types such as Endpoint, ProducerTemplate. You cannot define it on any kind of type such as Integer, int etc.

Also we could consider make it more generic so you can evaluate a script such and have the result converted to the field type.
davsclaus:1376448729:2013-08-14T10:52:09.059+0000:1376448729:2013-08-14T10:52:09.059+0000:See also SO
http://stackoverflow.com/questions/18210717/apache-camel-fields-injection/18229762#18229762
davsclaus:1377491555:2013-08-26T12:32:35.415+0000:1377491555:2013-08-26T12:32:35.415+0000:There is now a new @ProjectInject. See details at the using property placeholder doc page."
0,CAMEL-3214,New Feature,Minor,2.4.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2010-10-09 12:39:33+00:00,2014-11-04 08:53:43+00:00,"If you have a route and you have externalized the incoming endpoint uri using property placeholder



from(""{{inputA}}"").to(""xxx"");




Then you may want to support that inputA can contain 1..n endpoints.



inputA=direct:start
inputA=activemq:queue:foo,cxf:bean:foo




The placeholder can contain multiple entries separated by a token such as comma.
All we essentially need is to use the ObjectHelper.createIterator on the value and then add inputs to the route.


It should trim the values so you can have space between the comma, so its easier to read.",davsclaus:1415062423:2014-11-04T08:53:43.613+0000:1415062423:2014-11-04T08:53:43.613+0000:We want Camel 3.0 to be only one input per route
0,CAMEL-3183,New Feature,Minor,2.4.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Claus Ibsen,Stefan Below,0,0,2010-09-30 15:23:07+00:00,2015-07-11 22:27:39+00:00,"At the moment, there is no easy way to create a ""routeAware"" Consumer. Route aware means that the behavior of the consumer depends on the route id.


A nice (simple?) solution woulb be be an abstract createRouteAwareEndpoint(String remaining, String uri, String routeID, ProcessComponent processComponent) Method...",
0,CAMEL-3182,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-30 10:06:26+00:00,2011-04-24 09:57:11+00:00,"Currently you have to do:



import static org.apache.camel.builder.xml.XPathBuilder.xpath;
...
mock.message(0).body().matches(xpath(""/foo/text() = 'Hello World'"").booleanResult());




Which we should make it easier to do.","davsclaus:1285882953:2010-10-01T05:42:33.032+0000:1285882953:2010-10-01T05:42:33.032+0000:You can now do
{code}
mock.message(0).body().matches().xpath(""/foo/text() = 'Hello World'"");
{code}
davsclaus:1285883187:2010-10-01T05:46:27.195+0000:1285883187:2010-10-01T05:46:27.195+0000:And you can do
{code}
mock.message(0).predicate().xpath(""/foo/text() = 'Hello World'"");
{code}
davsclaus:1285884814:2010-10-01T06:13:34.266+0000:1285884814:2010-10-01T06:13:34.266+0000:trunk: 1003398.
davsclaus:1303610231:2011-04-24T09:57:11.296+0000:1303610231:2011-04-24T09:57:11.296+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3181,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Adrian Trenaman,0,0,2010-09-30 09:13:07+00:00,2011-04-24 09:57:05+00:00,"If you create CXF endpoint, like this, without the address attribute, 



	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>




... then you get a really confusing error when you deploy the endpoint in ServiceMix: the error is 



Caused by: java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint 
does not implement createEndpointUri() to create a default value
	at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:83)
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onEndpointAdd(DefaultManagementLifecycleStrategy.java:205)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:386)




We find that if you explicitly set the address then the problem goes away (see below)



 
	<cxf:cxfEndpoint 
		id=""greeting"" 
		wsdlURL=""greeting.wsdl""
		address=""http://localhost:9000/GreeterContext/SOAPMessageService""
		serviceClass=""tutorial.hanbo.webservice.Greeting""
		>
	</cxf:cxfEndpoint>




On camel-cxf web page, the 'address' attribute is not mentioned anywhere in the table of URI properties, so you might be lead to believe that it's not necessary.","njiang:1285809568:2010-09-30T09:19:28.094+0000:1285809568:2010-09-30T09:19:28.094+0000:The CXF should pick up the Address information from the WSDL, I will dig the Exception to see how to fix it.
adrian.trenaman:1285810313:2010-09-30T09:31:53.144+0000:1285810313:2010-09-30T09:31:53.144+0000:Nice one Willem - much appreciated! 
njiang:1285826279:2010-09-30T13:57:59.710+0000:1285826279:2010-09-30T13:57:59.710+0000:Hi Adrian,

I tried the reproduce the error in the camel trunk and I found this issue had been fixed about 2 month ago by CAMEL-2997.
Please try the latest Camel 2.5-SNAPSHOT to verify it.



njiang:1285827125:2010-09-30T14:12:05.415+0000:1285827125:2010-09-30T14:12:05.415+0000:Just one more note, if the wsdl has multiple service or port, you need to specify the service name and endpoint name like this.
{code}
  <cxf:cxfEndpoint id=""routerEndpoint"" address=""http://localhost:8092/PersonService/""
                   serviceClass=""org.apache.camel.wsdl_first.Person""
                   endpointName=""person:soap""
                   serviceName=""person:PersonService""
                   wsdlURL=""person.wsdl""
                   xmlns:person=""http://camel.apache.org/wsdl-first""/>
{code}


davsclaus:1303610225:2011-04-24T09:57:05.678+0000:1303610225:2011-04-24T09:57:05.678+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3180,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-29 12:36:49+00:00,2011-04-24 09:58:27+00:00,"Currently you have to stop the route with a timeout to force it to stop because the current Exchange is still in progress (its not done yet).


So it should be possible to defer this stop till after the UoW is done on the Exchange","davsclaus:1285896267:2010-10-01T09:24:27.487+0000:1285896267:2010-10-01T09:24:27.487+0000:To do this you should unregister yourself from inflight before stopping the route such as
{code}
            context.getInflightRepository().remove(exchange);
            context.stopRoute(""myCoolRoute"");
{code}
njiang:1286048043:2010-10-03T03:34:03.675+0000:1286048043:2010-10-03T03:34:03.675+0000:@Claus,

I think we need add an entry of FAQ for this, and also need to update the Chapter 13 of Camel in Action for it.
davsclaus:1286058879:2010-10-03T06:34:39.374+0000:1286058879:2010-10-03T06:34:39.374+0000:Yeah I am aware that chapter 13 needs updates based on improvements in Camel 2.5 I am waiting for that chapter to be ready for AR :)
davsclaus:1286059664:2010-10-03T06:47:44.484+0000:1286059664:2010-10-03T06:47:44.484+0000:I added a FAQ
https://cwiki.apache.org/confluence/display/CAMEL/How+can+I+stop+a+route+from+a+route
davsclaus:1303610307:2011-04-24T09:58:27.350+0000:1303610307:2011-04-24T09:58:27.350+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3179,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Claus Ibsen,1,1,2010-09-29 09:54:47+00:00,2011-04-24 09:57:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/FTP-creating-connections-for-every-file-name-in-the-uri-tp478938p478938.html


This makes it work better out of the box so you can use dynamic recipient list and have  the file name in the endpoint uri.
The ftp producer should then be able to re-use pooled ftp producer despite the filename was in the endpoint uri","davsclaus:1293682549:2010-12-30T12:15:49.451+0000:1293682549:2010-12-30T12:15:49.451+0000:Implementing this requires too much work and refactoring of existing code.

This is *only* a problem when providing the file name in the endpoint uri. If you re-use existing endpoints and provide file name as a header, then that works fine, as it can re-use existing producer from the producer pool.
davsclaus:1303610277:2011-04-24T09:57:57.400+0000:1303610277:2011-04-24T09:57:57.400+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3178,New Feature,Trivial,None,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Henryk Konsek,0,0,2010-09-29 08:28:54+00:00,2011-04-24 09:57:32+00:00,"I had to perform some Hibernate to Db4o (http://www.db4o.com) integration task. I needed to monitor SQL database for inserts, process them and save to the NoSQL Db4o store for further processing. I achieved that with Hibernate component (http://camel.apache.org/hibernate.html) and my custom Spring-Bean objects accessing db4o.


However I think that if we already got Hibernate support in Camel, it would be nice to provide similar component for db4o. I extracted core logic from my Db4o Spring Bean and created Db4o component from it. I'm attaching patch with the code (patch to Camel-Extra since db4o is licensed on *GPL).


This is basic yet usable version of db4o component. It is much simpler than Spring Bean I used to resolve my Hibernate->Db4o issue. No advanced configuration, no complex customization. Just core idea extracted from it. If you think that Camel can make use of this db4o component and add it to the codebase, then I can make it more configurable and flexible.","davsclaus:1285811478:2010-09-30T09:51:18.389+0000:1285811478:2010-09-30T09:51:18.389+0000:Henryk do you mind working on documentation as well? We always need documentation for any camel component we provide. Whether or not its at camel-extra or at Apache.


hekonsek:1285811710:2010-09-30T09:55:10.138+0000:1285811710:2010-09-30T09:55:10.138+0000:Sure. I'll attach it here soon.
hekonsek:1285822373:2010-09-30T12:52:53.795+0000:1285822373:2010-09-30T12:52:53.795+0000:Where can I find documentation sources?
davsclaus:1285882252:2010-10-01T05:30:52.981+0000:1285882252:2010-10-01T05:30:52.981+0000:Documentation is in wiki
http://camel.apache.org/how-do-i-edit-the-website.html

You can also provide documentation in a txt file or something and attach to this JIRA ticket. Then I can do the wiki stuff.

However signing that ICLA is one step closer to be a committer at Apache as you must have a signed ICLA.
hekonsek:1286176766:2010-10-04T15:19:26.677+0000:1286176766:2010-10-04T15:19:26.677+0000:Ok. I've just send signed copy of ICLA to @secretary.

Now I have to wait for the response. In the meantime I'll create the documentation in the txt file and send it here.
hadrian:1286177290:2010-10-04T15:28:10.760+0000:1286177290:2010-10-04T15:28:10.760+0000:You may not get a reply from secretary@, but I will know when your iclas gets filed and give you the necessary karma. Do you have a wiki account? It's different than this jira account.
hekonsek:1286177951:2010-10-04T15:39:11.465+0000:1286177951:2010-10-04T15:39:11.465+0000:Just created one. Login - hekonsek .
hekonsek:1286178546:2010-10-04T15:49:06.379+0000:1286178546:2010-10-04T15:49:06.379+0000:Until I'm not authorized to modify wiki I attach documentation for Db4o component. It is based on the Hibernate Component documentation since usage of both is very similar.

Could somebody add it to the wiki?
hadrian:1286303055:2010-10-06T02:24:15.263+0000:1286303055:2010-10-06T02:24:15.263+0000:Henrik, you should now have the necessary karma to edit the wiki. Please let me know if you have difficulties.
hekonsek:1286356848:2010-10-06T17:20:48.275+0000:1286356848:2010-10-06T17:20:48.275+0000:I've added wiki page for Db4o component [1] and updated components list page [2].

[1] https://cwiki.apache.org/confluence/display/CAMEL/Db4o
[2] https://cwiki.apache.org/confluence/display/CAMEL/Component+List

Could somebody commit component code to the camel-extra codebase?
davsclaus:1286360468:2010-10-06T18:21:08.297+0000:1286360468:2010-10-06T18:21:08.297+0000:Can we uses a stable version of db4o? I prefer not to use SNAPSHOT if possible.
hekonsek:1286360700:2010-10-06T18:25:00.299+0000:1286360700:2010-10-06T18:25:00.299+0000:I'll check out if there's Maven repo with stable version.
davsclaus:1286362211:2010-10-06T18:50:11.237+0000:1286362211:2010-10-06T18:50:11.237+0000:Comitted to camel-extra in rev: 303.

Thanks for the contribution and the documentation. Keep it up.
hekonsek:1286413888:2010-10-07T09:11:28.391+0000:1286413888:2010-10-07T09:11:28.391+0000:I asked on db4o forum [1] is there any Maven repository with stable releases, but unfortunately there is no such. I voted for the Jira issue regarding this topic [2].

However it will be nice to remove the SNAPSHOT dependency before db4o guys put stable releases to the repo. Can we put and host stable releases downloaded from the db4o site [3] somewhere in the apache/camel public repo?

[1] http://developer.db4o.com/Forums/tabid/98/aft/10236/Default.aspx
[2] http://tracker.db4o.com/browse/COR-1986
[3] http://www.db4o.com/DownloadNow.aspx
davsclaus:1286414623:2010-10-07T09:23:43.888+0000:1286414623:2010-10-07T09:23:43.888+0000:Well its really unprofessional not to release stable releases once in a while for a product you own/maintain.

And if they can't see the value in that, then they will loose out as people will go find something else.
hekonsek:1286414930:2010-10-07T09:28:50.561+0000:1286414930:2010-10-07T09:28:50.561+0000:I agree.

But what do we choose? Waiting for their stable repo or creating our own?
davsclaus:1286415240:2010-10-07T09:34:00.563+0000:1286415240:2010-10-07T09:34:00.563+0000:Well db4o is on camel-extra and i think we have a maven repo there as well, so we can put a .jar in there which we can give a timestamp as the version number.

In fact we are looking for people who want to help maintain camel-extra and do releases and whatnot.
hekonsek:1286416105:2010-10-07T09:48:25.227+0000:1286416105:2010-10-07T09:48:25.227+0000:We don't need to timestamp the jar - we can just download stable version from the web site. I'll check out camel-extra repo and contribute solution proposal.

I can help you with maintenance of camel-extra if you need another pair of hands. What exactly has to be done?
davsclaus:1286419066:2010-10-07T10:37:46.600+0000:1286419066:2010-10-07T10:37:46.600+0000:Ah that is perfect yeah if there is .jar from their website we can download which matches the SNAPSHOT, eg it works as well. Then we can use that .jar.

I think you got the ICLA signed for Apache. 
If you got a google account then I can invite you in on the camel-extra team so you can commit.

I think we need help to ensure the camel-extra project is maintained and kept working with the Camel trunk.
And then to do releases, maybe in sync when we do Apache releases.

So when we do a Camel 2.5 it would be nice to do that for camel-extra as well.

I think the pom.xml has some stuff in there for doing the release and uploading to a maven repo at camel-extra.

davsclaus:1286419087:2010-10-07T10:38:07.209+0000:1286419087:2010-10-07T10:38:07.209+0000:If we cant put the .jar there then as a fallback I can put it on fusesource repo.
hadrian:1286429402:2010-10-07T13:30:02.442+0000:1286429402:2010-10-07T13:30:02.442+0000:@Claus,

As a friendly suggestion, please refrain from qualifying other people's work. I'd recommend better help out and work with that community to publish their artifacts in the central maven repo if you are dissatisfied. Much better alternative then using the fusesource repo, and it will benefit others as well.
davsclaus:1286432007:2010-10-07T14:13:27.936+0000:1286432007:2010-10-07T14:13:27.936+0000:@Hadrian

Thanks for advice.

That community already have a ticket about publishing their own product into their own maven repo. So that said community is aware of the need.
The fusesource repo is an alternative if they do not rise to the occasion.

hekonsek:1286711845:2010-10-10T19:57:25.865+0000:1286711845:2010-10-10T19:57:25.865+0000:@Claus - My gmail is hekonsek@. Can you invite me to the camel-extra on google-code?

In this week I'll try to work on:
* synchronizing camel-extra releases and codebase with apache-camel trunk
* keeping camel-extra page up to date
davsclaus:1286749686:2010-10-11T06:28:06.187+0000:1286749686:2010-10-11T06:28:06.187+0000:Great I have added you to the project.
davsclaus:1303610252:2011-04-24T09:57:32.938+0000:1303610252:2011-04-24T09:57:32.938+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3177,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,maozuoyun,0,0,2010-09-29 07:28:38+00:00,2011-04-24 09:58:03+00:00,"When i use ProducerCache.acquireProducer() method to fetch a producer for an endpoint. Just I want to acquire a producer from cache at twice time.Once time ,I found it works create a new producer,not from cache pool,then i switch to debug mode.and found core problem is that In DefaultServicePool.addAndAcquire method,It doesn't put new service into cache,
Then I try to modify code like below,then i works well.but i don't know whether I does effect other function. Please give me some advice!
Thanks you!


// add at 20100929 for producer pool doesn't cache service problem
try {
   entry.put(service);
} catch (InterruptedException ie) {
   log.error(""Error put service to pool:"" + ie.getMessage(), ie);
}","davsclaus:1285718047:2010-09-29T07:54:07.176+0000:1285718047:2010-09-29T07:54:07.176+0000:Please use the mailing list first and read the javadoc of the ServicePool.

You have to release it back to the pool when you are done using it.
rocky:1285720002:2010-09-29T08:26:42.422+0000:1285720002:2010-09-29T08:26:42.422+0000: Do you meant that I should call ProducerCache.releaseProducer after
finished post the request?




davsclaus:1285721112:2010-09-29T08:45:12.367+0000:1285721112:2010-09-29T08:45:12.367+0000:Yes you need to release it back.

But all this is usual internal only so why are you using the producer cache directly?

And please use the mailing list
davsclaus:1303610283:2011-04-24T09:58:03.581+0000:1303610283:2011-04-24T09:58:03.581+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3176,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,maozuoyun,0,0,2010-09-29 07:14:59+00:00,2011-04-24 09:57:21+00:00,"I use camel-mina for app-client  to corresponding  to a TCP Server in IN-OUT way, it can send request message to server,but Cannot get response data from server. It printed ""No response received from remote server"" 。
Endpoint configuration url=mina:tcp://172.22.1.128:9998?encoding=GBK&disconnect=true&timeout=30000&lazySessionCreation=true&textline=true&sync=true


Where does wrong with my code?


Below are app logs:
2010-09-29 15:10:06,721 [Error][CI20100929151002034994]Error ServiceRouteProcessor.dispatchServiceError adapt:No response received from remote server: mina:tcp://172.22.1.128:9998?encoding=GBK&disconnect=true&timeout=30000&lazySessionCreation=true&textline=true&sync=true. Exchange[Message: [B@c08534]


com.whbcn.channels.cai.exception.CAIException: Error adapt:No response received from remote server: mina:tcp://172.22.1.128:9998?encoding=GBK&disconnect=true&timeout=30000&lazySessionCreation=true&textline=true&sync=true. Exchange[Message: [B@c08534]
	at com.whbcn.channels.cai.adapter.AbstractAdapter.adapt(AbstractAdapter.java:76)
	at com.whbcn.channels.cai.platform.processor.ServiceRouteProcessor.dispatchService(ServiceRouteProcessor.java:67)
	at com.whbcn.channels.cai.platform.route.RouterManager.routeMessage(RouterManager.java:49)
	at com.whbcn.channels.cai.platform.ServiceFacade.sendRequest(ServiceFacade.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:260)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:164)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:159)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:74)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:95)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:65)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:290)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:202)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:290)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:202)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:290)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:202)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:334)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:274)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:179)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:97)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
	at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:98)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:423)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:178)
	at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:142)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)
	at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857)
	at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)
	at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.CamelExchangeException: No response received from remote server: mina:tcp://172.22.1.128:9998?encoding=GBK&disconnect=true&timeout=30000&lazySessionCreation=true&textline=true&sync=true. Exchange[Message: [B@c08534]
	at org.apache.camel.component.mina.MinaProducer.process(MinaProducer.java:132)
	at com.whbcn.channels.cai.adapter.AbstractAdapter.adapt(AbstractAdapter.java:64)
	... 121 more


TCPServer.java:
public class TcpServer {


	public static void main(String[] args) 

{
		TcpServer server = new TcpServer();
	}


	public TcpServer() 

{
		start();
	}


	private void start() {
		try {
			ServerSocket serverSocket = new ServerSocket(9998,1);
			while (true) 

{
				Socket socket = serverSocket.accept();
				Thread thread = new AcceptThread(socket);
			}

		} catch (Exception e) 

{
			e.printStackTrace();
		}


	}


}





class AcceptThread extends Thread {





	Socket socket = null;





	public AcceptThread(Socket socket) {
		this.socket = socket;
		start();
	}





	public void run() {





		try {
			InputStream inputStream = socket.getInputStream();
			
			byte[] reqBytes = new byte[1024*20];
			
			inputStream.read(reqBytes);
			
			System.out.println(""receive bytes=""+new String(reqBytes));
			
			OutputStream outputStream = socket.getOutputStream();
			outputStream.write(""Hello!!@"".getBytes());
			outputStream.flush();
			System.out.println(""receive line!"");
		} catch (Exception e) {			e.printStackTrace();		}

 finally {
			try 

{
				socket.close();
			}

 catch (Exception e) 

{
				e.printStackTrace();
			}

		}


	}
}","davsclaus:1285717822:2010-09-29T07:50:22.279+0000:1285717822:2010-09-29T07:50:22.279+0000:Please use the mailing list for help and check unit tests in camel-mina for examples.

And when using textline encoding you have to use \n to denote the end of the textline, hence why its called textline.
And look at Apache Mina as well for examples with their textline encoder.
davsclaus:1303610241:2011-04-24T09:57:21.492+0000:1303610241:2011-04-24T09:57:21.492+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3175,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Cannot Reproduce,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-29 06:52:45+00:00,2011-04-24 09:58:21+00:00,"See fuse forum
http://fusesource.com/forums/thread.jspa?threadID=2284&tstart=0","davsclaus:1293683890:2010-12-30T12:38:10.961+0000:1293683890:2010-12-30T12:38:10.961+0000:Is already implemented
davsclaus:1303610301:2011-04-24T09:58:21.047+0000:1303610301:2011-04-24T09:58:21.047+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3174,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-29 06:38:12+00:00,2011-04-24 09:57:37+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-to-change-directory-while-using-sftp-component-tp2806817p2806817.html","davsclaus:1285724753:2010-09-29T09:45:53.707+0000:1285724753:2010-09-29T09:45:53.707+0000:Already fixed for FTP.

Fixed this for SFTP as well in trunk: 1002541.
davsclaus:1285759917:2010-09-29T19:31:57.759+0000:1285759917:2010-09-29T19:31:57.759+0000:changing dir is now done folder at a time, trunk: 1002821.
davsclaus:1286063850:2010-10-03T07:57:30.715+0000:1286063850:2010-10-03T07:57:30.715+0000:improved a bit more: 1003927.
davsclaus:1286323759:2010-10-06T08:09:19.926+0000:1286323759:2010-10-06T08:09:19.926+0000:Improved to let it work with absolute paths: 1004923.
davsclaus:1303610257:2011-04-24T09:57:37.216+0000:1303610257:2011-04-24T09:57:37.216+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3173,Improvement,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-29 05:29:57+00:00,2011-04-24 09:58:22+00:00,"Karaf 2.1.0 is out, it's time to upgrade.","davsclaus:1286437230:2010-10-07T15:40:30.230+0000:1286437230:2010-10-07T15:40:30.230+0000:trunk: 1002479
davsclaus:1303610302:2011-04-24T09:58:22.932+0000:1303610302:2011-04-24T09:58:22.932+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3172,New Feature,Minor,None,None,"
None
",Closed,Fixed,2.6.0,Tracy J. Snell,Tracy J. Snell,0,1,2010-09-28 15:35:55+00:00,2010-11-18 04:01:00+00:00,We should have a JMX-Component in the next week or so. I'll start the documentation process keeping notes here until the component is released.,"tjsnell:1286972232:2010-10-13T20:17:12.519+0000:1286972232:2010-10-13T20:17:12.519+0000:h1.JMX Component
Component allows consumers to subscribe to an mbean's Notifications. The component supports passing the Notification object directly through the Exchange or serializing it to XML according to the schema provided within this project. This is a consumer only component. Exceptions are thrown if you attempt to create a producer for it.

h2.URI Format
The component can connect to the local platform mbean server with the following URI:

{code}jmx://platform?options{code}
A remote mbean server url can be provided following the initial JMX scheme like so:

{code}jmx:service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi?options{code}
You can append query options to the URI in the following format, ?options=value&option2=value&...

h2.Endpoint Properties
h3.Consumer Only Properties
||Property	||Required	||Default	||Description
|format	 |-	 |xml	 |Format for the message body. Either ""xml"" or ""raw"". If xml, the notification is serialized to xml. If raw, then the raw java object is set as the body.
|user	 |-	 |-	 |credentials for making a remote connection
|password	 |-	 |-	 |credentials for making a remote connection
|objectDomain	 |yes	 |-	 |The domain for the mbean you're connecting to
|objectName	 |-	 |-	 |The name key for the mbean you're connecting to. This value is mutually exclusive with the object properties that get passed. (see below)
|notificationFilter	 |-	 |-	 |Reference to a bean that implements the NotificationFilter?. The #ref syntax should be used to reference the bean via the spring or camel registry. This is mutually exclusive with the filterClass property.
|handback	 |-	 |-	 |Value to handback to the listener when a notification is received. This value will be put in the message header with the key ""jmx.handback""

h3.ObjectName? Construction
The URI must always have the objectDomain property. In addition, the URI must contain either objectName or one or more properties that start with ""key.""

h3.Domain with Name property
When the objectName property is provided, the following constructor is used to build the ObjectName? for the mbean:

{code}ObjectName(String domain, String key, String value) {code}
The key value in the above will be ""name"" and the value will be the value of the objectName property.

h3.Domain with Hashtable
{code}ObjectName(String domain, Hashtable<String,String> table){code}
The Hashtable is constructed by extracting properties that start with ""key."" The properties will have the ""key."" prefixed stripped prior to building the Hashtable. This allows the URI to contain a variable number of properties to identify the mbean.
davsclaus:1288916400:2010-11-05T08:20:00.436+0000:1288916400:2010-11-05T08:20:00.436+0000:Thanks Tracy, do you mind creating an example as well? This helps the documentation.
davsclaus:1288916845:2010-11-05T08:27:25.475+0000:1288916845:2010-11-05T08:27:25.475+0000:The documentation is here
https://cwiki.apache.org/confluence/display/CAMEL/JMX
massfords:1288979351:2010-11-06T01:49:11.406+0000:1288979351:2010-11-06T01:49:11.406+0000:Claus,

Are you looking for some samples for the wiki? If so, I could repurpose some of the unit tests to demonstrate the basic functionality. 
davsclaus:1289001112:2010-11-06T07:51:52.727+0000:1289001112:2010-11-06T07:51:52.727+0000:Yeah Mark

Some examples from the unit test is a good idea. Its often how we do it. You can even add some SNIPPET comments in the source code.
And then have the wiki slurp the source code from SVN.
tjsnell:1289022859:2010-11-06T13:54:19.488+0000:1289022859:2010-11-06T13:54:19.488+0000:Nice! I didn't know about SNIPPET. Docs on how that works?
davsclaus:1289023131:2010-11-06T13:58:51.220+0000:1289023131:2010-11-06T13:58:51.220+0000:I dont think we got docs on how the snippet works.

You can see this source file
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DelayInterceptorTest.java

eg all you do is the START and END SNIPPET stuff.

Then in the wiki documentation you add the following to refer to it
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpRemoteFileFilterTest.java}

You can do this in XML files as well
tjsnell:1289536990:2010-11-12T12:43:10.281+0000:1289536990:2010-11-12T12:43:10.281+0000:I created an example ( [jira 3330|https://issues.apache.org/activemq/browse/CAMEL-3330]) and added SNIPPET in there. I'll evolve that example and try to keep samples pulling from there to keep them auto updated to the current version.
tjsnell:1290011820:2010-11-18T00:37:00.511+0000:1290011820:2010-11-18T00:37:00.511+0000:example is live, I'll tie it in.
tjsnell:1290013319:2010-11-18T01:01:59.508+0000:1290013319:2010-11-18T01:01:59.508+0000:Should be good to go."
0,CAMEL-3171,Improvement,Major,2.4.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,1,1,2010-09-28 12:34:31+00:00,2011-10-25 11:36:12+00:00,"When using Spring XML or blueprint there is a XSD defining what types the EIP attributes uses.


For example a timeout would be xs:int, and there could be xs:boolean etc.
But you may want to use property placeholders so you can do



timeout=""{{foo.myTimeout}}""




Where foo.myTimeout is the properties stuff.","davsclaus:1285654695:2010-09-28T14:18:15.188+0000:1285654695:2010-09-28T14:18:15.188+0000:Defining the routes in the <routeContext> tag allow us to be in control. Where as inside the <camelContext> we are in the mercy of Spring namespace handler which has some serious limitations in terms of property placeholders resolution.

davsclaus:1286256270:2010-10-05T13:24:30.242+0000:1286256270:2010-10-05T13:24:30.242+0000:We could have special type converter which converts from String -> String and detects any property placeholders and does the lookup.

This allows you to use the properties placeholders in any xs:string type in the XSD.
gnodet:1286258551:2010-10-05T14:02:31.560+0000:1286258551:2010-10-05T14:02:31.560+0000:Not sure to understand the issue.  Is the issue in the xsd (which defines for example xsd:int, so can't be validated) or in the namespace handler?
The only way to fix the xsd would be to relax the schema generation and use strings somehow (i guess there are jaxb2 annotation to enforce the xsd:type to use).

Not sure what the problem / limitations with placeholders you're talking about are.
davsclaus:1286262338:2010-10-05T15:05:38.242+0000:1286262338:2010-10-05T15:05:38.242+0000:Yeah its primary the XSD. Because it will spit our xs:int, xs:boolean etc.

The 2nd objective (we should maybe create a new ticket for that) is to let Camel be able to support property placeholders in any attribute in the XSD.

For example <convertBodyTo charset=""{{myCoolCharset}}""/> is not possible today. To support this we need to do this custom on the EIP pattern. Instead it would be nice with a more generic solution.
davsclaus:1295411368:2011-01-19T12:29:28.672+0000:1295411368:2011-01-19T12:29:28.672+0000:See irc chat on this date
http://irclogs.dankulp.com/logs/irclogger_log/camel?date=2011-01-19,Wed&raw=on
davsclaus:1295413168:2011-01-19T12:59:28.734+0000:1295413168:2011-01-19T12:59:28.734+0000:I cannot find out how to define a a custom type with restrictions

CXF has this file:
 http://cxf.apache.org/schemas/configuration/parameterized-types.xsd

Which they use for the types.

We could maybe handcraft this file and somehow find out how you can do an import in the generated XSD.

Then we need to map from those types to the real type. JAXB got javax.xml.bind.annotation.adapters.XmlAdapter but its a bit limited.
We need to hook into the namespace handler and inject a custom bean mapper which at runtime has access to the camel context and can resolve the properties.
davsclaus:1295413223:2011-01-19T13:00:23.696+0000:1295413223:2011-01-19T13:00:23.696+0000:We can define types at package level so eg we can define all boolean as
{code}
@javax.xml.bind.annotation.XmlSchemaType(name = ""myBoolean"", type = java.lang.Boolean.class)
package org.apache.camel.model;
{code}

But adding that to the {{package-info.java}} file in the org.apache.camel.model package.


davsclaus:1298343540:2011-02-22T10:59:00.808+0000:1298343540:2011-02-22T10:59:00.808+0000:I wonder if there's a way of kinda adding this 'at the side' in XML land so it doesn't mess with jaxb/schemagen/the AST model?

e.g. <split timeout=""100"" prop:timeout=""foo.bar"">....

So it will use the foo.bar property if defined, and if not fallback and use 100.
davsclaus:1298358662:2011-02-22T15:11:02.449+0000:1298358662:2011-02-22T15:11:02.449+0000:trunk: 1073359."
0,CAMEL-3170,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-28 11:54:26+00:00,2011-04-24 09:57:48+00:00,"You should be able to set ftp endpoint uri as:



""ftp://scott@localhost:"" + getPort() + ""/deletefile?password=tiger&binary=false&delete=true""




And when using password and username in the userinfo part of the uri:



""ftp://tiger:scott@localhost:"" + getPort() + ""/deletefile?binary=false&delete=true""




The latter didn't work","davsclaus:1285646487:2010-09-28T12:01:27.861+0000:1285646487:2010-09-28T12:01:27.861+0000:trunk: 1002131.
davsclaus:1303610268:2011-04-24T09:57:48.223+0000:1303610268:2011-04-24T09:57:48.223+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3169,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-28 10:12:23+00:00,2011-04-24 09:57:12+00:00,"As the CamelAsyncProcess always takes some time to do it job, we barely hit the upper situation, but it still has chance to hit this situation.","mrt1nz:1285641868:2010-09-28T10:44:28.840+0000:1285641868:2010-09-28T10:44:28.840+0000:Hi Willem,

I had a similar problem in the CamelContinuationServlet in camel-jetty and could solve it without using exclusive locks (i.e. synchronization). 

https://svn.apache.org/repos/asf/camel/trunk/components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java

I didn't investigate the CxfConsumer and CXF continuations in all details but I think the solution pattern from camel-jetty is also applicable here. Thoughts?


njiang:1285645463:2010-09-28T11:44:23.569+0000:1285645463:2010-09-28T11:44:23.569+0000:Hi Martin

As CXF 2.2.x is using Jetty6 style continuation, and the camel-jetty is using Jetty7, we are facing different continuation implementation.
in CXF 2.2.x, you need to call the AsyncProcess process API before call the suspend, so the continuation.resume() could be called before continuation.suspend().
And the AsyncCallback done() is called always after the suspend, I don't think CamelContinuationServlet will have the issue that CXF continuation is faced.

mrt1nz:1285647944:2010-09-28T12:25:44.908+0000:1285648041:2010-09-28T12:27:21.995+0000:{quote}
As CXF 2.2.x is using Jetty6 style continuation, and the camel-jetty is using Jetty7, we are facing different continuation implementation.
in CXF 2.2.x, you need to call the AsyncProcess process API before call the suspend, so the continuation.resume() could be called before continuation.suspend().
{quote}

ah, just looked at the jetty 6 docs (and also a CXF continuation example), they're using exclusive locks. Not sure if it is used only by this example or if it is required in general. Will dig in further when I find some time. Or do you have a link to documentation that is more clear about that?

{quote}
And the AsyncCallback done() is called always after the suspend, I don't think CamelContinuationServlet will have the issue that CXF continuation is faced.
{quote}

Not in the version that I linked before because that's the fixed version of the CamelContinuationServlet. The issue was in Camel 2.4.0

https://svn.apache.org/repos/asf/camel/tags/camel-2.4.0/components/camel-jetty/src/main/java/org/apache/camel/component/jetty/CamelContinuationServlet.java

See also CAMEL-2986

njiang:1285652052:2010-09-28T13:34:12.302+0000:1285652052:2010-09-28T13:34:12.302+0000:Hi Martin,

In Jetty6, the continuation suspend is implemented by throwing a runtime exception, so you need to set up the async call back before calling the continuation suspend.
In Jetty7, you can set up the async call back after calling the suspend method of continuation, and patch of CAMEL-2986 works perfect for you.

Because the continuation of CXF 2.2.x is based on thrown a runtime exception, I can't change the code as you do in CAMEL-2986.
I already did some work in CXF-2982[1],  and I will updated the camel-cxf code once upgrade CXF version to 2.3.0.  

[1]https://issues.apache.org/jira/browse/CXF-2982

Willem
njiang:1286465235:2010-10-07T23:27:15.416+0000:1286465235:2010-10-07T23:27:15.416+0000:Applied the patch in revision #1002095.
davsclaus:1303610232:2011-04-24T09:57:12.826+0000:1303610232:2011-04-24T09:57:12.826+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3168,New Feature,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2010-09-28 04:25:29+00:00,2015-03-25 08:27:23+00:00,"We need a REST based example to show how to do that.


It should accept XML/JSON as input.","cookj02:1288400867:2010-10-30T09:07:47.452+0000:1288400867:2010-10-30T09:07:47.452+0000:Isn't there already an example here: http://camel.apache.org/cxfrs.html
davsclaus:1309317034:2011-06-29T11:10:34.790+0000:1309317034:2011-06-29T11:10:34.790+0000:Chris Love said on twitter he is working on a REST example for Camel
bibryam:1330347034:2012-02-27T20:50:34.040+0000:1330347034:2012-02-27T20:50:34.040+0000:I've created a simple REST based CRUD application with Restlet and JDCB components here 
http://www.ofbizian.com/2012/02/apache-camel-rest-example.html

I think it might be a good match for this issue and CAMEL-3096 combined.
WDYT?
davsclaus:1330376747:2012-02-28T05:05:47.354+0000:1330376747:2012-02-28T05:05:47.354+0000:Yeah that is a good start.
davsclaus:1427243243:2015-03-25T08:27:23.793+0000:1427243243:2015-03-25T08:27:23.793+0000:There is a few rest-dsl examples"
0,CAMEL-3167,New Feature,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-28 04:18:57+00:00,2011-04-24 09:58:12+00:00,"For example you want to do



<setHeader headerName=""Exchange.CONTENT_TYPE"">
<constant>application/exi</constant>
</setHeader>




By using the constants on Exchange you can have Camel check this on startup, that the constant exists and use its value. This ensures that any spelling errors is detected on startup. So if you typed:



<setHeader headerName=""Exchange.CNTENT_TYP"">
<constant>application/exi</constant>
</setHeader>




Then Camel can see there is no constant with the name CNTENT_TYP and throw an exception on startup.


This also makes it easier to do a 1:1 between Java DSL and Spring XML.


See also
http://fusesource.com/forums/thread.jspa?threadID=2285&tstart=0","davsclaus:1290753593:2010-11-26T14:39:53.645+0000:1290753593:2010-11-26T14:39:53.645+0000:trunk: 1039384.
davsclaus:1303610292:2011-04-24T09:58:12.056+0000:1303610292:2011-04-24T09:58:12.056+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3166,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-27 12:36:57+00:00,2011-04-24 09:57:26+00:00,"Current CxfProducer just throw the exception out and don't set the camel out message with the response context, it make it possible for the user who want to access the soap header infor from the soap fault message.",davsclaus:1303610246:2011-04-24T09:57:26.399+0000:1303610246:2011-04-24T09:57:26.399+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3165,Task,Minor,None,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Sebb,0,0,2010-09-27 09:44:09+00:00,2011-10-25 11:35:24+00:00,"http://camel.apache.org/download-archives.html has a list of previous (and current) releases, which point to the release notes for each release, for example:
http://camel.apache.org/camel-150-release.html


This is very useful.


However, the download links in the release-specific pages all point to the mirror system.
This is not ideal, as superseded releases should removed from the mirroring system, thus breaking the links.


Most other projects I know include the link to archive.apache.org in the main download page, and don't include it in the release notes.


That makes it easier to maintain the website without making it harder to find the archives.


In summary what I'm suggesting as a fix is:



Change the ""Getting past releases"" section in the main download page to point to archive.apache.org.
remove the Binary Distributions and Source Distributions sections from the Getting the Distributions section of the all release notes, both existing and future","hadrian:1285556895:2010-09-27T11:08:15.843+0000:1285556895:2010-09-27T11:08:15.843+0000:Thanks sebb, I'll take care of this today.
hadrian:1285558295:2010-09-27T11:31:35.192+0000:1285558295:2010-09-27T11:31:35.192+0000:Looks like http://archive.apache.org/dist/camel/apache-camel/ is missing releases older than 1.6.0. Need a bit of detective work.

I will remove the older releases from dist, no need to have them in both places, but I'd like to better understand the infra backup process first.
sebb:1285561781:2010-09-27T12:29:41.897+0000:1285561781:2010-09-27T12:29:41.897+0000:The backup works by mirroring the dist files from www.apache.org/dist to archive.apache.org/dist.
However, the mirroring does not delete from archive.apache.org, it only copies new files.

See: http://www.apache.org/dev/release.html#how-to-archive

sebb:1285562029:2010-09-27T12:33:49.554+0000:1285562029:2010-09-27T12:33:49.554+0000:Camel used to be part of ActiveMQ, so much older releases are here:

http://archive.apache.org/dist/activemq/apache-camel/

Could add this link alongside 

http://archive.apache.org/dist/camel/apache-camel/

on the download page.
davsclaus:1295163360:2011-01-16T15:36:00.910+0000:1295163360:2011-01-16T15:36:00.910+0000:I have updated the download archives with instructions
https://cwiki.apache.org/confluence/display/CAMEL/Download+Archives"
0,CAMEL-3164,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-27 08:13:12+00:00,2011-04-24 09:57:11+00:00,"Karaf 2.1.0 is using aries 0.2-incubating, it's time to upgrade aries version for camel now.",davsclaus:1303610231:2011-04-24T09:57:11.581+0000:1303610231:2011-04-24T09:57:11.581+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3163,New Feature,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,1,1,2010-09-27 06:54:17+00:00,2011-04-24 09:57:49+00:00,"Its still common to transfer data using files and using a marker file when the data is ready.


We should have a feature on the file consumer, so it can be used to scan for marker files, and then use the real file as the message body.
And then when its done it can delete/move both files.


The problem is how to define an easy way of correlating the marker file to the real file. We can use an Expression for that.


For example maybe something like, (use better option names)
realFile=${file:name.noext}.csv&include=.*.ready


Then Camel will react when there is a .ready file in the folder. And evaluate the expression and see if a file with that result exists.


When it's done the marker file should be deleted, and the real file should be moved using the existing options for that.","julian.cable:1287167056:2010-10-16T02:24:16.399+0000:1287167056:2010-10-16T02:24:16.399+0000:This would be really useful.

Maybe we could have something as simple as

{{readyExt=mrk}}

But Claus' specification seems just right.


davsclaus:1292549919:2010-12-17T09:38:39.307+0000:1292549919:2010-12-17T09:38:39.307+0000:This is a bit more tricky as we have to support two kinds
a) 1 done file per real file
b) 1 done file per directory

Supporting (a) is more simple because its easy to correlate to the real file.

Supporting (b) is more tricky as what should be the rules when the done file is safe to be deleted?
That all the files in the directory has been processed? Such as the directory being empty?

For starters I think we will go with (a) and then consider if (b) is used out in the real life? I do have a vague idea that it is.
julian.cable:1292638943:2010-12-18T10:22:23.438+0000:1292638943:2010-12-18T10:22:23.438+0000:I haven't come across (b) - (a) will certainly meet my needs.

Julian
davsclaus:1292826224:2010-12-20T14:23:44.691+0000:1292826224:2010-12-20T14:23:44.691+0000:trunk: 1051127.

Wiki documentation already updated.
davsclaus:1303610269:2011-04-24T09:57:49.259+0000:1303610269:2011-04-24T09:57:49.259+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3162,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,Christian Müller,0,0,2010-09-26 15:43:18+00:00,2011-04-24 09:58:10+00:00,"I defined the to endpoint in my properties file as ""file://target/outBox?fileName=test-${date:now:yyyyMMdd}.txt"" and the written file has the name ""test-now:yyyyMMdd.txt"" instead of ""test-20100926"".


See also CAMEL-304","muellerc:1285487257:2010-09-26T15:47:37.442+0000:1285487257:2010-09-26T15:47:37.442+0000:Attached a unit test which reproduce the issue.
davsclaus:1285488590:2010-09-26T16:09:50.025+0000:1285488590:2010-09-26T16:09:50.025+0000:Its a Spring problem.

When you use {{ignoreUnresolvablePlaceholders}} in Spring then it do *not* the endpoint uri as is, but it removes the ${ } anyway.
And therefore Camel cannot see those.

Create a ticket at Spring to add an option or change the behavior its {{ignoreUnresolvablePlaceholders}} so it leave the ${ } as is.

But we have just today added an alternative simple language syntax so you can use $simple{ } to avoid the Spring clash.

Also Spring has options to configure its start/end token AFAIK so you can use those to change Spring to *not* use ${ } but something else.
davsclaus:1285488643:2010-09-26T16:10:43.542+0000:1285488643:2010-09-26T16:10:43.542+0000:Christian try with latest code from trunk and use $simple{ } in the .properties file
davsclaus:1285490518:2010-09-26T16:41:58.824+0000:1285490518:2010-09-26T16:41:58.824+0000:Christian you are welcome to add your test case to camel-spring source code, for example to help ensure the test keep passing and we wont break it in the future.


muellerc:1285574803:2010-09-27T16:06:43.036+0000:1285574803:2010-09-27T16:06:43.036+0000:I was not sure what is the best place for this test... :-)

I added the test which uses the syntax ""$simple{}"".

I also opened the ticket [SPR-7593|https://jira.springsource.org/browse/SPR-7593] in Spring Core, because Spring 3.0.3 breaks the PropertyPlaceholderConfigurer behavior compared to version 2.5.6. Jürgen scheduled this fix for Spring 3.0.5.
Because this issue also breaks the Camel behavior from 2.2.0 to 2.4.0, I also added the test which uses the syntax ""${}"" and annotated this test with ""@Ignore"". We should enable this test if we upgrade to Spring 3.0.5 or newer...

May be an information for our users is also useful, because if they upgrade from FUSE ESB 4.2 to 4.3 (as we), they will run into this problems too.

Christian
davsclaus:1303610290:2011-04-24T09:58:10.298+0000:1303610290:2011-04-24T09:58:10.298+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3161,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-26 11:48:23+00:00,2011-04-24 09:57:57+00:00,"For example if end user does



from(""direct:start"")
    .loadBalance().failover().roundRobin()
    .to(A, B, C);




And believing that he have configured the failover LB to use round robin mode. However what happens is there are 2 LB's.


In those cases Camel should throw an exception on startup that this is invalid.","davsclaus:1290912811:2010-11-28T10:53:31.660+0000:1290912811:2010-11-28T10:53:31.660+0000:trunk: 1039865.
davsclaus:1303610277:2011-04-24T09:57:57.693+0000:1303610277:2011-04-24T09:57:57.693+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3160,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-26 06:28:07+00:00,2011-04-24 09:57:30+00:00,"When using Spring property placeholders it will scan for ${ } tokens, which is the same set the Camel Simple language uses.


This makes it harder to configure file endpoints where the file name is a simple expression because Spring interferes.
So by introducing the $simple{ as alternative start token, we can avoid the clash.","davsclaus:1285456021:2010-09-26T07:07:01.405+0000:1285456021:2010-09-26T07:07:01.405+0000:trunk: 1001371.
davsclaus:1303610250:2011-04-24T09:57:30.692+0000:1303610250:2011-04-24T09:57:30.692+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3159,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-26 05:55:20+00:00,2011-04-24 09:58:05+00:00,"See nabble
http://camel.465427.n5.nabble.com/Aggregator-Howto-remove-from-persistency-tp2852702p2852702.html


> I was thinking about something like a removeOnTimeout (default=false of
> course) that would use the existing completionTimeout attribute but change
> its behavior to remove the aggregated message instead of publishing it.
> –


Yeah I can kinda see an use case for this. You are using the timeout
as a last resort to just say hey we could not aggregate this in lets
say 4 hours.
So lets just ignore the message.


Having an option on the aggregate to just auto discard those message
on timeout would help there to avoid the CBR and checking yourself.


Just wondering if this is a use case others use? Its still kinda
dangerous to discard messages.","davsclaus:1285482692:2010-09-26T14:31:32.493+0000:1285482692:2010-09-26T14:31:32.493+0000:trunk: 1001436.
davsclaus:1285627439:2010-09-28T06:43:59.003+0000:1285627439:2010-09-28T06:43:59.003+0000:trunk: 1002036.
davsclaus:1303610285:2011-04-24T09:58:05.868+0000:1303610285:2011-04-24T09:58:05.868+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3158,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Alexander Azarov,0,1,2010-09-25 12:18:09+00:00,2011-04-24 09:58:20+00:00,"I have a subclass of PollingConsumerSupport and create it in a subclass of DefaultPollingEndpoint. The problem is that DefaultPollingEndpoint wraps PollingConsumer into DefaultScheduledPollConsumer and the latter does not call PollingConsumerSupport.start:


DefaultScheduledPollConsumer.java:


    @Override
    protected void doStart() throws Exception 

{
        pollingConsumer = getEndpoint().createPollingConsumer();
        super.doStart();
    }","davsclaus:1285452380:2010-09-26T06:06:20.992+0000:1285452380:2010-09-26T06:06:20.992+0000:trunk: 1001365.

Thanks for reporting.
davsclaus:1303610300:2011-04-24T09:58:20.399+0000:1303610300:2011-04-24T09:58:20.399+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3157,Improvement,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-25 10:38:18+00:00,2011-04-24 09:58:17+00:00,The Exchange java doc should be updated to help end users more about the API of the Exchange,"davsclaus:1285383374:2010-09-25T10:56:14.942+0000:1285383374:2010-09-25T10:56:14.942+0000:See current source code for update
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/Exchange.java

Feedback welcome
tarjei@scanmine.com:1285504643:2010-09-26T20:37:23.605+0000:1285504643:2010-09-26T20:37:23.605+0000:Good work!

If I may add something, then maybe a comment that the getOut/getIn methods does not map to the InOut/InOnly patterns. 
davsclaus:1285568196:2010-09-27T14:16:36.410+0000:1285568196:2010-09-27T14:16:36.410+0000:Thanks Tarjei I have added more notes to Exchange java doc.
davsclaus:1303610297:2011-04-24T09:58:17.803+0000:1303610297:2011-04-24T09:58:17.803+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3156,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-09-24 18:29:29+00:00,2011-04-24 09:57:31+00:00,"Add documentation for the new ScheduledRoutePolicy support.


Explain both the CronScheduledRoutePolicy and SimpleScheduledRoutePolicy on separate pages and link it to RoutePolicy.","akarpe:1285855243:2010-09-30T22:00:43.090+0000:1285855243:2010-09-30T22:00:43.090+0000:Documentation task completed in Confluence
davsclaus:1303610251:2011-04-24T09:57:31.269+0000:1303610251:2011-04-24T09:57:31.269+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3155,Improvement,Minor,2.4.0,2.6.0,"
None
",Closed,Not A Problem,2.6.0,Claus Ibsen,Malachi de AElfweald,0,0,2010-09-24 18:09:22+00:00,2011-04-24 09:57:53+00:00,"If I do a .choice().when(xpath(""//rootnode"")) it fails to find any matches unless I preprocess and remove the xmlns=""blah"" (autogenerated by JAXB on the other end)","davsclaus:1285366265:2010-09-25T06:11:05.483+0000:1285366265:2010-09-25T06:11:05.483+0000:This is how the XPath works in the JDK.

But the other day I thought this was annoying as well, for example if there is only one default namespace in the message.
Then it would be great if the xpath could cater for this anyhow.

davsclaus:1285367283:2010-09-25T06:28:03.980+0000:1285367283:2010-09-25T06:28:03.980+0000:See for example
http://www.edankert.com/defaultnamespaces.html
davsclaus:1285368787:2010-09-25T06:53:07.726+0000:1285368787:2010-09-25T06:53:07.726+0000:There is not mich you can do as how the XPath works in the JDK in terms of default namespaces and omitting prefixes in the xpath string
http://stackoverflow.com/questions/1730710/xpath-is-there-a-way-to-set-a-default-namespace-for-queries

Anybody aware of a solution to this?
malachid:1285404843:2010-09-25T16:54:03.496+0000:1285404843:2010-09-25T16:54:03.496+0000:I brought this issue up with the JDOM list back in 2003.

Currently, this is a real hassle because to use xpath and jaxb together in camel, you have to remove the namespace from the string before when(xpath()) then add it back in for each of them that want to process with jaxb.

Do you know of a better way around it?
davsclaus:1285450366:2010-09-26T05:32:46.978+0000:1285450366:2010-09-26T05:32:46.978+0000:You need to use a namespace in your xpath expression. It can use any kind of prefix, but the uri must match the default namespace from your xml.

See for example
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/builder/xml/XPathNamespaceTest.java
davsclaus:1285450589:2010-09-26T05:36:29.591+0000:1285450616:2010-09-26T05:36:56.051+0000:And no I could not find a solution with the XPath API to let it be aware of the default namesapce. There seems to be no good hooks for such kind.

Even if I added what may be a default namespace to the NamespaceContext the xpath would still fail. The only solution I could get working is to use namespace prefixes in the xpath expressions.

And the XPathExpression does not offer any callbacks or hooks to influence the compiling. And I bet doing a string based manipulation of the given String for the namespace is hard because people can use a lot of different combinations.

So if you have a simple expression like
{code}
/foo/bar
{code}

Then it may be possible to manipulate it beforehand and do
{code}
/c:foo/c:bar
{code}

And register c as a namespace with the uri from the XML message.

But when the xpath expression becomes more complex, its much harder.

So I wonder there must be better ways that this?
davsclaus:1287963053:2010-10-25T07:30:53.089+0000:1287963053:2010-10-25T07:30:53.089+0000:Not possible with the JDK XPath
davsclaus:1303610273:2011-04-24T09:57:53.637+0000:1303610273:2011-04-24T09:57:53.637+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3154,Improvement,Trivial,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Henryk Konsek,0,0,2010-09-24 13:42:55+00:00,2011-04-24 09:57:51+00:00,"AbstractXStreamWrapper#createXStream uses hardcoded default XStream constructor. Such design makes impossible to set custom HierarchicalStreamDriver to the XStream instance.


It would be nice to provide an ability to configure AbstractXStreamWrapper with optional HierarchicalStreamDriver instance.


I created patch which adds AbstractXStreamWrapper#xstreamDriver property (+test).


Patch also adds XML attribute 'driverRef' to Spring configuration (org.apache.camel.model.dataformat.XStreamDataFormat). However this new attribute of Spring DSL doesn't work because I got no idea how to wire existing Spring bean into the created dataFormat instance (since org.apache.camel.model.dataformat.XStreamDataFormat is Spring-unaware).


Could somebody take a look at it, fix Spring DSL support and probably commit it to the codebase?","njiang:1285356075:2010-09-25T03:21:15.170+0000:1285356075:2010-09-25T03:21:15.170+0000:Applied patch with thanks to Henryk.
davsclaus:1285365215:2010-09-25T05:53:35.559+0000:1285365215:2010-09-25T05:53:35.559+0000:Willem please add a spring XML based unit test as well to ensure the XML is correct and that it works.
njiang:1285378443:2010-09-25T09:34:03.718+0000:1285378443:2010-09-25T09:34:03.718+0000:@Claus,

After adding the Spring configure test, I found the patch was not working for at all, I will did a quick fix for it.
njiang:1285379425:2010-09-25T09:50:25.055+0000:1285379425:2010-09-25T09:50:25.055+0000:Done, commit a patch into Revision: 1001177

davsclaus:1303610271:2011-04-24T09:57:51.668+0000:1303610271:2011-04-24T09:57:51.668+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3153,Improvement,Trivial,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Henryk Konsek,0,0,2010-09-24 08:47:41+00:00,2011-04-24 09:58:06+00:00,"XStream allows to ignore selected fields for particular classes
(kind of ""transient"" fields). This feature is descibed here - Tweaking
XStream output (http://xstream.codehaus.org/manual-tweaking-output.html).


I needed to use that functionality in the Camel XStream data
transformation. AbstractXStreamWrapper provides support for aliases
and implicit collections but doesn't for XStream#omitField.


At this moment this problem can be handled with custom XStream Spring
FactoryBean and AbstractXStreamWrapper#setXStream method (just like I
did). However this solution is quite verbose. I think that if
AbstractXStreamWrapper supports both aliases and implicit collections
configuration, it should also supports fields omitting.


I've created patch for AbstractXStreamWrapper and unit test for it.
Maybe somebody could submit it to the codebase?","davsclaus:1285292261:2010-09-24T09:37:41.061+0000:1285292261:2010-09-24T09:37:41.061+0000:trunk: 1000776.

Thanks for the patch. I had to do a bit extra work to expose it in Spring XML as well.
davsclaus:1303610286:2011-04-24T09:58:06.154+0000:1303610286:2011-04-24T09:58:06.154+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3152,Task,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-23 12:04:39+00:00,2011-04-24 09:57:35+00:00,"camel-spring and camel-blueprint both uses a shared component camel-core-xml and camel-core-osgi for having shared code between the two of them.
This ensure the code is in sync, and makes it easier to develop and maintain Camel.


However the generated -source.jar for camel-spring and camel-blueprint does not contain the source code for camel-core-XXX. See if its possible to instruct maven to include the source code for those 2 projects.


This allows for example Eclipse to be able to see all the source code and make it easier to debug etc.","davsclaus:1285222514:2010-09-23T14:15:14.043+0000:1285222514:2010-09-23T14:15:14.043+0000:trunk: 1000479.
davsclaus:1303610255:2011-04-24T09:57:35.679+0000:1303610255:2011-04-24T09:57:35.679+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3151,Bug,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Stephan Siano,0,0,2010-09-23 10:57:23+00:00,2011-04-24 09:57:33+00:00,"When I am trying to send the content of a file to an CXF endpoint in PAYLOAD format, I get a NullPointerException in line 603 of the CXFEndpoint class (in the current trunk). The offending coding is:
                CxfPayload<?> payload = (CxfPayload<?>)params[0];
                List<Element> elements = payload.getBody();


The params are set in line 282 of the CxfProducer class:
            params = new Object[1];
            // TODO: maybe it should be mandatory body?
            params[0] = exchange.getIn().getBody(CxfPayload.class);


The fix is most probably trivial (change to getMandatoryBody()) and add a throws InvalidPayloadException to the getParams() method of CxfProducer). After this is fixed (the same for the MESSAGE format two lines lower), the example will still not work, but I get a meaningful error message saying that there is no type converter between GenericFile and CxfPayload.


One could argue, that under some circumstances null payloads may be legal (I just don't see any), but in this case the CxfEndpoint class would have to be modified to avoid the NullPointerException. As the coding is a missing converter or a null payload will trigger NullPointerExceptions for CxfEndpoints unconditionally.","davsclaus:1285386745:2010-09-25T11:52:25.068+0000:1285386745:2010-09-25T11:52:25.068+0000:Can you attach a small unit test which demonstrates this?

And what content in the message do you send?
siano:1285556158:2010-09-27T10:55:58.506+0000:1285556158:2010-09-27T10:55:58.506+0000:Actually it is an issue in error handling, so I don't really know how to write a unit test for that. 

Maybe it helps explaining what I actually do:
I have a beans.xml that looks like that:

<?xml version=""1.0""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	   xmlns:camel=""http://camel.apache.org/schema/spring""
	   xmlns:cxf=""http://camel.apache.org/schema/cxf""
	   xmlns:http-conf=""http://cxf.apache.org/transports/http/configuration""
	   xmlns:sample=""http://services.samples/xsd""
	   xsi:schemaLocation=""
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
         http://cxf.apache.org/transports/http/configuration
         http://cxf.apache.org/schemas/configuration/http-conf.xsd
         http://camel.apache.org/schema/cxf
         http://camel.apache.org/schema/cxf/camel-cxf.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<import resource=""classpath:META-INF/cxf/cxf.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-soap.xml"" />
	<import resource=""classpath:META-INF/cxf/cxf-extension-http.xml""/>  
     
	<cxf:cxfEndpoint id=""serviceEndpoint""
        		     address=""http://myhost:8080/MockServices/EchoService""
        		     wsdlURL=""EchoService.wsdl""
        		     endpointName=""sample:EchoServicePort"" 
        		     serviceName=""sample:EchoService"">
		<cxf:properties>
			<entry key=""dataFormat"" value=""PAYLOAD"" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""file://c:/temp/camel/poller"" />
			<!-- The wsdl contains multiple operations, so we select one -->
			<camel:setHeader headerName=""operationName"">
				<camel:constant>buyStocksOperation1K</camel:constant>
			</camel:setHeader>	
			<camel:to uri=""cxf:bean:serviceEndpoint"" />
		</camel:route>
	</camel:camelContext>
</beans>

You can use any wsdl for that (even for a webservice that does not exist, because it will not get called). Then put a xml-file matching the request type of the endpoint into the /temp/camel/poller directory. You will encounter a NullPointerException. After the getBody() statements are replaced by getMandatoryBody() statements, the scenario does still not work, but now you get a (IMO much better) TypeConversionException that indicates the reason for the issue.

Mid-term it might be a good idea to have a TypeConverter for CxfPayload type messages. If that is there, the fix will not show up anymore in this scenario (but maybe in other scenarios where no type converter is available).
davsclaus:1286073085:2010-10-03T10:31:25.527+0000:1286073085:2010-10-03T10:31:25.527+0000:So the file contains the XML for the SOAP message? You can use the SOAP data format to transform that file into SOAP.

But yes I wonder if the camel-cxf can have a type converter which can do that as well?
davsclaus:1286075278:2010-10-03T11:07:58.529+0000:1286075278:2010-10-03T11:07:58.529+0000:trunk: 1003946.

Now uses mandatory body.
siano:1286148081:2010-10-04T07:21:21.281+0000:1286148081:2010-10-04T07:21:21.281+0000:The file contains the XML for the Payload of the SOAP message (without the SOAP Envelope). If the file did contain the whole SOAP message (with envelope and all) this would be MESSAGE data format and that works.

Writing a type converter for camel-cxf is pretty easy. The CXFPayload contains two lists, one for headers, that can remain empty for this use case and one for the body, which is a list of DOM elements, so it's actually pretty easy to have a type converter between NodeList, Document or Element and CXFPayload. This can be glued together with other type converters by a default converter.

I have already done so (about 100 lines of code), however before I can provide the code we need to undergo some outbound open source process, which will take some weeks, sorry for that.

Nevertheless, I think this fix here is useful, even if these type converters where there, because there could still be some StrangeMessageWithoutConverters and it is helpful to get the error message that there is no type converter for that instead of a NullPointerException.
davsclaus:1303610253:2011-04-24T09:57:33.387+0000:1303610253:2011-04-24T09:57:33.387+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3150,New Feature,Minor,2.4.0,2.6.0,"
None
",Closed,Duplicate,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-23 08:16:49+00:00,2011-04-24 09:57:46+00:00,"To make it easy for end users to install camel-web-console.


Look at the activemq feature file as it has a activemq-web-console in there we can see how its done","davsclaus:1285201299:2010-09-23T08:21:39.141+0000:1285201299:2010-09-23T08:21:39.141+0000:Mind that the web console does not auto discover all the Camel applications in the OSGi container.

It's currently tied to the CamelContext which is embedded inside it.
Having it being able to list and work on all the Camel applications in the OSGi container would be a nice new feature. However we have to do this in a neutral way so camel-web can be used outside OSGi as well.
davsclaus:1303610266:2011-04-24T09:57:46.362+0000:1303610266:2011-04-24T09:57:46.362+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3149,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Lorrin Nelson,0,0,2010-09-23 00:34:45+00:00,2011-04-24 09:57:13+00:00,"Currently writing a Processor to e.g. delete a file on an FTP endpoint requires explicitly coding for a specific implementation:


       RemoteFileOperations<ChannelSftp.LsEntry> ops = new SftpOperations();
       ops.setEndpoint(endpoint);


This could be avoided by making createRemoteFileOperations() a public (rather than protected) member of the RemoteFileEndpoint interface?


Along those lines there's a lot of useful logic in GenericFileProducer.createFileName() that would be useful when using the file operations directly.


See email discussion w/ Claus Ibsen on dev@ Sept 2,7,9.


Proposed patch makes those methods as well as a few others public.","davsclaus:1285219907:2010-09-23T13:31:47.600+0000:1285219907:2010-09-23T13:31:47.600+0000:trunk: 1000459.
davsclaus:1303610233:2011-04-24T09:57:13.934+0000:1303610233:2011-04-24T09:57:13.934+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3148,Improvement,Minor,2.4.0,"2.7.1, 2.8.0","
None
",Closed,Fixed,"2.7.1, 2.8.0",Unassigned,Claus Ibsen,0,0,2010-09-22 13:51:58+00:00,2011-10-25 11:35:37+00:00,"The features in the Camel features.xml file has the following 3 which ought to be standard out of the box from Karaf



spring
spring-dm
http done



We should consider removing those from the Camel features.xml file, so it only contains 100% Camel features for the components.","njiang:1285135782:2010-09-22T14:09:42.089+0000:1285135782:2010-09-22T14:09:42.089+0000:Hi Claus,

Camel has its own spring, spring-dm, http is that I want to make the camel-feature support different version of karaf at same time.
in this way we can deploy the came feature into karaf 1.4 or karaf 2.0 at the same time.
If we are using karaf's spring, spring-dm, http, we need to specify the karaf feature repository into the camel feature, it will stop us to do that.

Willem

davsclaus:1285471547:2010-09-26T11:25:47.014+0000:1285471547:2010-09-26T11:25:47.014+0000:Ah thanks Willem

I think Gert said he wanted to work on this when he got time, so Karaf was smarter in this regard.

davsclaus:1301714737:2011-04-02T11:25:37.920+0000:1301714737:2011-04-02T11:25:37.920+0000:Karaf 2.2 onwards now support this. So we only have Camel specific features in Camel features files."
0,CAMEL-3147,Improvement,Minor,2.4.0,None,"
None
",Resolved,Later,Future,Claus Ibsen,Dmitry Drozdov,0,0,2010-09-22 11:39:04+00:00,2011-06-10 14:17:09+00:00,"From commons-csv r966014 it is now possible to specify the row delimiter in CSVStrategy.
Please depend on this version.","davsclaus:1285127585:2010-09-22T11:53:05.865+0000:1285127585:2010-09-22T11:53:05.865+0000:Is it an official release?

And is it published to central apache maven repo?
di_m_an:1285132028:2010-09-22T13:07:08.062+0000:1285132028:2010-09-22T13:07:08.062+0000:No, I'm afraid.
They do really have problems with releasing the library, official page says: ""There are currently no official downloads, and will not be until CSV moves out of the Sandbox.""
I also found out that r966014 still doesn't allow to configure the row delimiter for CSVWriter :( (created SANDBOX-329 with the patch to solve this).
Will it possible for you to release commons-csv and put it to some Camel maven repo?
If not, consider moving from commons-csv to something that have the normal build cycle :)
davsclaus:1285134933:2010-09-22T13:55:33.798+0000:1285134933:2010-09-22T13:55:33.798+0000:There are other CSV components like flatpack and bindy.

Yes we can build and publish a CSV jar to the FuseSource maven repo. But CSV is an Apache project and the guys ought to get a grip and get the project on track.
di_m_an:1286924406:2010-10-13T07:00:06.894+0000:1286924406:2010-10-13T07:00:06.894+0000:My patch for SANDBOX-329 has been applied in commit r1003046.
Would you please build it, publish on Fuse repo, and update features.xml?
davsclaus:1293764983:2010-12-31T11:09:43.345+0000:1293764983:2010-12-31T11:09:43.345+0000:Dmitry can you build the commons-csv JAR and attach here to the JIRA ticket.
davsclaus:1307686629:2011-06-10T14:17:09.641+0000:1307686629:2011-06-10T14:17:09.641+0000:Closing old tickets with no progress"
0,CAMEL-3146,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Lars Gohlke,0,0,2010-09-22 10:00:28+00:00,2011-04-24 09:57:44+00:00,"What about using jnotify?


JNotify java API
JNotify is a java library that allow java application to listen to file system events, such as:



File created
File modified
File renamed
File deleted



Supported platforms



Windows (2000 or newer) Windows notes
Linux with INofity support (2.6.14 or newer) Linux notes
Mac OS X (10.5 or newer) Mac OS notes



The fallback could be always the old behaviour, but in case it could be used it would be an really good improvement in terms of performance


sample from http://jnotify.sourceforge.net/sample.html


public void sample() throws Exception {
    // path to watch
    String path = System.getProperty(""user.home"");


    // watch mask, specify events you care about,
    // or JNotify.FILE_ANY for all events.
    int mask = JNotify.FILE_CREATED  | 
               JNotify.FILE_DELETED  | 
               JNotify.FILE_MODIFIED | 
               JNotify.FILE_RENAMED;


    // watch subtree?
    boolean watchSubtree = true;


    // add actual watch
    int watchID = JNotify.addWatch(path, mask, watchSubtree, new Listener());


    // sleep a little, the application will exit if you
    // don't (watching is asynchronous), depending on your
    // application, this may not be required
    Thread.sleep(1000000);


    // to remove watch the watch
    boolean res = JNotify.removeWatch(watchID);
    if (!res) 

{
      // invalid watch ID specified.
    }

  }
  class Listener implements JNotifyListener {
    public void fileRenamed(int wd, String rootPath, String oldName,
        String newName) 

{
      print(""renamed "" + rootPath + "" : "" + oldName + "" -> "" + newName);
    }

    public void fileModified(int wd, String rootPath, String name) 

{
      print(""modified "" + rootPath + "" : "" + name);
    }

    public void fileDeleted(int wd, String rootPath, String name) 

{
      print(""deleted "" + rootPath + "" : "" + name);
    }

    public void fileCreated(int wd, String rootPath, String name) 

{
      print(""created "" + rootPath + "" : "" + name);
    }

    void print(String msg) 

{
      System.err.println(msg);
    }

  }","davsclaus:1285123808:2010-09-22T10:50:08.298+0000:1285123808:2010-09-22T10:50:08.298+0000:No we cannot use 3rd party jars in the camel-core as we want to keep it light-weight.

People are welcome to implement custom components, and the file component can be easily extended. For example the FTP does that.

Also the JDK will in the future provide API for file notifications. I think thats part of NIO2, which comes in JDK 7.
davsclaus:1303610264:2011-04-24T09:57:44.722+0000:1303610264:2011-04-24T09:57:44.722+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3145,Bug,Trivial,2.4.0,2.5.0,"
None
",Closed,Duplicate,2.5.0,Claus Ibsen,Lars Gohlke,0,0,2010-09-22 09:21:57+00:00,2011-04-24 09:57:13+00:00,"when the first time the file consumer, poll for changes, this exception comes up


not on configuring route


java.lang.IllegalArgumentException: Only directory is supported. Endpoint must be configured with a valid starting directory: /tmp/camel-tmp-575302/nix7543804947501517726.temp_d
	at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:54)
	at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:32)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:60)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:132)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1328)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1256)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:952)
	at de.lgohlke.services.wnotify.DataBaseChangeListenerServiceTest.setup(DataBaseChangeListenerServiceTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:44)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)","lkwg:1285118606:2010-09-22T09:23:26.546+0000:1285118606:2010-09-22T09:23:26.546+0000:        
this is the source of the error, why not use ' !file.isDirectory() ' ?

// we assume its a file if the name has a dot in it (eg foo.txt)
        if (file.getName().contains(""."")) {
            throw new IllegalArgumentException(""Only directory is supported. Endpoint must be configured with a valid starting directory: "" + file);
        }
davsclaus:1285119723:2010-09-22T09:42:03.673+0000:1285119723:2010-09-22T09:42:03.673+0000:file.isDirectory does not work on all systems.

I think we should just remove this check, and then it's end user to configure as starting path.
davsclaus:1285119840:2010-09-22T09:44:00.817+0000:1285119840:2010-09-22T09:44:00.817+0000:Duplicate of CAMEL-3063
davsclaus:1285119947:2010-09-22T09:45:47.929+0000:1285119947:2010-09-22T09:45:47.929+0000:This is already fixed on trunk.
lkwg:1285120327:2010-09-22T09:52:07.219+0000:1285120327:2010-09-22T09:52:07.219+0000:maybe a warning on platforms this is not working, would be nice, else it could be used
davsclaus:1303610233:2011-04-24T09:57:13.638+0000:1303610233:2011-04-24T09:57:13.638+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3144,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Raphaël Luta,0,1,2010-09-21 19:59:32+00:00,2011-04-24 09:57:57+00:00,"when using a route with ftp producer such as :


 <to uri=""ftp://user@host/?fileExist=Fail&fileName=test&password=mypass"" />


The route will not correctly fail if the fileName already exists.


It will work in any sub-directory:


 <to uri=""ftp://user@host/mydir?fileExist=Fail&fileName=test&password=mypass"" />


The root cause of the bug is an incorrect test in org.apache.camel.util.FileUtil.onlyPath() in component camel-core.
This method returns null when the parameter string is ""/"". It should return ""/"".


The attached patch fixes the issue.","hadrian:1285107750:2010-09-22T06:22:30.446+0000:1285107750:2010-09-22T06:22:30.446+0000:Patch applied with minor changes and checkstyle fixes. Thanks Raphael for spotting this.
davsclaus:1285107979:2010-09-22T06:26:19.260+0000:1285107979:2010-09-22T06:26:19.260+0000:Hadrian I am adding additional unit test for this in camel-core and camel-ftp
davsclaus:1285109734:2010-09-22T06:55:34.067+0000:1285109734:2010-09-22T06:55:34.067+0000:Btw the patch is buggy. It should return null if there is no path, but it returns the name of the file. I have fixed that as well.
Running full tests before committing fixes and additional unit tests.

Hadrian we should take time to add tests for patches when they discover a bug in which we don't have an unit test for.
davsclaus:1285110713:2010-09-22T07:11:53.116+0000:1285110713:2010-09-22T07:11:53.116+0000:Okay unit test added and file util fixed as well.
raphael@apache.org:1285111988:2010-09-22T07:33:08.185+0000:1285111988:2010-09-22T07:33:08.185+0000:You're right, the patch is buggy. I should have tested it with more use cases than my own before attaching, sorry about this.

Actually, I'm not even sure it is the correct fix because other components may depend on the FileUtil.onlyPath(""/"") == null behavior for correct operation.
I'm unsure of the expected semantics of the operation in root directory on a file system rather than remote file system.

An alternate fix with less potential side effects would be to directly fix FtpOperations to better handle a return null from onlyPath(), something like:

--- FtpOperations.java	2010-09-22 09:16:25.000000000 +0200
+++ FtpOperations.java.patched	2010-09-22 09:18:51.000000000 +0200
@@ -381,7 +381,7 @@
         // check whether a file already exists
         String directory = FileUtil.onlyPath(name);
         if (directory == null) {
-            return false;
+	    directory = ""/"";
         }
 
         String onlyName = FileUtil.stripPath(name);

davsclaus:1285114848:2010-09-22T08:20:48.720+0000:1285114848:2010-09-22T08:20:48.720+0000:Raphael can you test source from trunk as I also modified camel-ftp as well.
raphael@apache.org:1285210697:2010-09-23T10:58:17.716+0000:1285210697:2010-09-23T10:58:17.716+0000:I've created a test environment using camel-2.5-SNAPSHOT artefacts and could not reproduce the bug.

A tcpdump trace shows that camel-ftp now correctly tries to list the target directory before attempting to write the file.
davsclaus:1285219024:2010-09-23T13:17:04.331+0000:1285219024:2010-09-23T13:17:04.331+0000:Ah this is great news. Thanks for testing Raphael.
davsclaus:1303610277:2011-04-24T09:57:57.269+0000:1303610277:2011-04-24T09:57:57.269+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3143,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claes Redestad,0,0,2010-09-21 19:40:01+00:00,2011-04-24 09:58:02+00:00,"The showed up when using dozer as shown in http://camel.apache.org/dozer-type-conversion.html, whose DozerTypeConverterLoader tries to get the type converter registry using: {{

{TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();}

}}


Plausible error:


OsgiDefaultCamelContext.java
   @Override
    protected TypeConverter createTypeConverter() {
        return new OsgiTypeConverter(bundleContext, getInjector());
    }




DefaultCamelContext.java
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof DefaultTypeConverter) {
                typeConverterRegistry = (DefaultTypeConverter) typeConverter;
            }
        }
        return typeConverterRegistry;
    }




Error:
getTypeConverter() returns an OsgiTypeConverter 
OsgiTypeConverter does not inherit from DefaultTypeConverter, thus the instanceof returns false
=> null is returned


Solution:
Lots of different ways to do this, and it's getting late here. In this case, maybe it's OsgiDefaultCamelContext's responsibility to also override getTypeConverterRegistry with something along the lines of:



@Override
public TypeConverterRegistry getTypeConverterRegistry() {
        if (typeConverterRegistry == null) {
            // init type converter as its lazy
            if (typeConverter == null) {
                getTypeConverter();
            }
            // type converter is usually the default one that also is the registry
            if (typeConverter instanceof OsgiDefaultTypeConverter) {
                typeConverterRegistry = ((OsgiDefaultTypeConverter) typeConverter).getRegistry();
            }
        }
        return typeConverterRegistry;
    }




We've employed an (ugly) workaround in a local version of DozerTypeConverterLoader.java:



        TypeConverter typeConverter = camelContext.getTypeConverter();
        DefaultTypeConverter registry = null;
        if (typeConverter instanceof DefaultTypeConverter) {
            registry = (DefaultTypeConverter)typeConverter;
        } else if (typeConverter instanceof OsgiTypeConverter) {
            OsgiTypeConverter osgiTypeConverter = (OsgiTypeConverter)typeConverter;
            registry = osgiTypeConverter.getRegistry();
        }","davsclaus:1285108310:2010-09-22T06:31:50.822+0000:1285108310:2010-09-22T06:31:50.822+0000:Yeah lets add a dozer test in camel-itest-osgi. Then we can look at a nicer solution to this
davsclaus:1285117389:2010-09-22T09:03:09.261+0000:1285117389:2010-09-22T09:03:09.261+0000:Dozer is not OSGi compliant. 

The Dozer team is working on integration out of the box with Apache Camel.
davsclaus:1285118654:2010-09-22T09:24:14.684+0000:1285118654:2010-09-22T09:24:14.684+0000:Looking into the source code of Dozer its really not well designed for 3rd party to influence loading of resources, overriding classes or hooking into custom logic.


davsclaus:1285118993:2010-09-22T09:29:53.259+0000:1285118993:2010-09-22T09:29:53.259+0000:See here
http://sourceforge.net/tracker/?func=detail&aid=3022810&group_id=133517&atid=727371

As far as in the current camel-dozer component we cannot make it osgi compliant due {{DozerBeanMapper}} being poorly configurable. So we cannot configure how the mapping files should be loaded, by using a custom loader.


davsclaus:1285119112:2010-09-22T09:31:52.416+0000:1285119112:2010-09-22T09:31:52.416+0000:Also {{MappingProcessor}} which does the actual mapping is also a big heavy weight and not easily customizable.

The {{DozerBeanMapper}} will load the mapping files using thread context classloader which doesnt work in that way in OSGi land.
So we end up with this error

{code}
Caused by: org.dozer.MappingException: Unable to locate dozer mapping file [org/apache/camel/itest/osgi/dozer/dozer-mapping.xml] in the classpath!
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:93)
	at org.dozer.util.MappingValidator.validateURL(MappingValidator.java:61)
	at org.dozer.loader.CustomMappingsLoader.loadFromFiles(CustomMappingsLoader.java:101)
	at org.dozer.loader.CustomMappingsLoader.load(CustomMappingsLoader.java:57)
	at org.dozer.DozerBeanMapper.loadCustomMappings(DozerBeanMapper.java:153)
	at org.dozer.DozerBeanMapper.getMappingProcessor(DozerBeanMapper.java:136)
	at org.dozer.DozerBeanMapper.map(DozerBeanMapper.java:92)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:46)
	at org.apache.camel.converter.dozer.DozerTypeConverter.convertTo(DozerTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:181)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:136)
{code}
davsclaus:1285119642:2010-09-22T09:40:42.567+0000:1285119642:2010-09-22T09:40:42.567+0000:Fixed the OSGi type converter stuff.

trunk: 999836.

But Dozer is still not working in OSGi when loading the mapping files from classpath. Or can you get it working?
bjornbength:1285120109:2010-09-22T09:48:29.070+0000:1285120109:2010-09-22T09:48:29.070+0000:Hello Claus,

I'm a colleague of Claes, 
This ticket (as I assume you understand) is not related directly to Dozer. The same null pointer is encountered for me
when i try to explicitly add type converters and fallback converters using java code in our routebuilders in servicemix 4.3.


About dozer:
I can confirm that Dozer could be simpler to use in OSGi but we currently have it running in a few bundles in camel contexts 
in ServiceMix 4.2 with mapping files. 
An upgrade to ServiceMix 4.3 encountered this problem that Claes did work around . However, as you you know,
the camel and osgi refactoring last time around seems to have hidden a few camel osgi packages as private, which means that, with this workaround we need access to these hidden osgi classes. But thats another story..



davsclaus:1285120600:2010-09-22T09:56:40.895+0000:1285120600:2010-09-22T09:56:40.895+0000:Thanks Bjorn.

I have fixed it so the {{getTypeConverterRegistry}} on {{CamelContext}} returns the osgi aware which is now also a {{TypeConverterRegistry}} so you can add your custom type converters directly to it. So the ugly hack is not needed.

Also I have refined the code in {{DozerTypeConverterLoader}} to not use the Dozer CustomerMappingLoader which doesn't work in OSGi.
Now the mapping files can be correctly loaded in OSGi.

However Dozer bits me later when you use the {{DozerBeanMapper}} because it want's to load the mapping file once again.
And the Dozer API is unfriendly to customize so we can't work around this.
cl4es:1285128580:2010-09-22T12:09:40.240+0000:1285128580:2010-09-22T12:09:40.240+0000:Nicely done! 

 We've gotten dozer to work in ServiceMix 4.3 by explicitly importing the resource folder which contains the dozer mapping file, i.e. {{<Export-Package>mappings</Export-Package>}} in the maven felix plugin. 

 We had to get this to work inside ServiceMix 4.3, so we improved the previous temporary workaround some to account for camel-core-osgi being a private package with an even *uglier* hack to account for the mindboggling fact that OSGi can load stuff in different classloaders, making us unable to actually cast to OsgiTypeConverter (as in our previous workaround - test code first, good, yes yes):

{code}

    TypeConverter typeConverter = camelContext.getTypeConverter();
    try { 
        Method method = typeConverter.getClass().getMethod(""getRegistry"");
        registry = (DefaultTypeConverter)method.invoke(typeConverter);
    } catch (Throwable t) {
        registry = (DefaultTypeConverter)typeConverter; 
    }
{code}

Cheers! 
davsclaus:1303610282:2011-04-24T09:58:02.083+0000:1303610282:2011-04-24T09:58:02.083+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3142,New Feature,Minor,2.4.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,1,2,2010-09-21 13:40:48+00:00,2016-11-17 14:40:12+00:00,"See
http://fusesource.com/forums/thread.jspa?threadID=2256&tstart=0


The best solution is to add a JpaPollingConsumer implementation so it works better with pollEnrich","davsclaus:1309317297:2011-06-29T11:14:57.982+0000:1309317297:2011-06-29T11:14:57.982+0000:This is a bit better now as the scheduled consumer will be suspended/resumed automatic.

But I guess if the JPA returns X rows, we ought to set that as a List<X> in the message body.
So we need a JpaPollingConsumer class to handle this.
mrlalonde:1315050721:2011-09-03T19:52:01.436+0000:1315050721:2011-09-03T19:52:01.436+0000:I'll have time this (long) weekend to work on this.
mrlalonde:1315129882:2011-09-04T17:51:22.732+0000:1315129882:2011-09-04T17:51:22.732+0000:I've attached some minor changes to fix the warnings.

I @deprecated the JpaEndpoint constructors that didn't have required parameters to call their non-deprecated super(...).  Let me know if that's ok or if you spot other problems with this.
davsclaus:1315180259:2011-09-05T07:50:59.857+0000:1315180259:2011-09-05T07:50:59.857+0000:Thanks for the polish, I have committed the patch.
mrlalonde:1315199147:2011-09-05T13:05:47.812+0000:1315228356:2011-09-05T21:12:36.596+0000:*Status Update* (with less confusion this time)

At the moment I have a JpaPollingConsumer that returns a list of polled entities. It supports all the PollingConsumer interface returning null when it couldn't poll anything. It supports maxMessagesPerPoll but maybe it shouldn't since it puts all the entities as a List in one message.
Here is a snippet that shows how I implemented receive(timeout).  Added delay (consumer.delay works as well) as an option with 500 ms as default. It is used as well by the ScheduledPolled JPA consumer.  Let me know if you'd prefer a new option altogether for JpaPollingConsumer.

{code}
    public Exchange receive(long timeout) {
        final StopWatch stopWatch = new StopWatch();
        stopWatch.restart();
        
        List<?> polledEntities = doReceive();
        while (polledEntities == null && stopWatch.taken() < timeout) {
            try {
                Thread.sleep(delay);
                polledEntities = doReceive();
            } catch (InterruptedException e) {
                log.trace(""received(long timeout) interrupted after {} ms: Are we stopping: {}"", stopWatch.taken(), isStopping());
            }
        }
        
        return createExchange(polledEntities);
    }
{code}




mrlalonde:1315233982:2011-09-05T22:46:22.381+0000:1315233982:2011-09-05T22:46:22.381+0000:The attached patch adds a JpaPollingConsumer along with some unit tests.

I wasn't sure how to best factor out reusable logic between JpaConsumer & JpaPollingConsumer so I created JpaHelper (see TODO comment) & QueryFactoryBuilder.  I didn't think inheritance was right there.

The patch only contains changes to JpaEndpoint.  If you like the JpaHelper, I can patch JpaConsumer to make use of it as well.

Thanks for your patience,
Mathieu
davsclaus:1462063456:2016-05-01T08:44:16.041+0000:1462063456:2016-05-01T08:44:16.041+0000:JPA now includes a JpaPollingConsumer implementation that better supports Content Enricher using pollEnrich to do a on-demand poll that returns either none, one or a list of entities as the result. "
0,CAMEL-3141,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Achim Nierbeck,0,0,2010-09-21 12:31:10+00:00,2011-04-24 09:58:09+00:00,"Using Camel 2.4 I want to make the usage of a certain route configurable through properties. 



<camelContext id=""camel"" trace=""true""
	xmlns=""http://camel.apache.org/schema/spring"">
	
	<route id=""configurable_1"" autoStartup=""{{startup_1}}"">
		<from uri=""direct:start_1""/>
		<to uri=""mock:end_1""/>
	</route>
		
	<route id=""configurable_2"" autoStartup=""{{startup_2}}"">
		<from uri=""direct:start_2""/>
		<to uri=""mock:end_2""/>
	</route>

</camelContext>




But if I do use the PropertyPlaceholder on the CamelContext like below it works. 



<camelContext id=""camel"" trace=""true"" autoStartup=""{{startup_context}}""




So is this a bug or should this work this way?","davsclaus:1285044102:2010-09-21T12:41:42.457+0000:1285044102:2010-09-21T12:41:42.457+0000:Are you saying it only works on <camelContext> level, and not on <route> level?
achim_nierbeck:1285044330:2010-09-21T12:45:30.950+0000:1285044330:2010-09-21T12:45:30.950+0000:Exactly, 

here probably the relevant part of the exception: 


{code}
Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '{{startup_1}}' is not a valid value for 'boolean'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
{code}
davsclaus:1285044498:2010-09-21T12:48:18.635+0000:1285044498:2010-09-21T12:48:18.635+0000:Thanks, the <route> tag should have the attributes define as String types so the properties resolver can kick in there as well, just as the <camelContext> does
davsclaus:1285049864:2010-09-21T14:17:44.822+0000:1285049864:2010-09-21T14:17:44.822+0000:trunk: 999428.
davsclaus:1303610289:2011-04-24T09:58:09.397+0000:1303610289:2011-04-24T09:58:09.397+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3140,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Martin Krasser,Martin Krasser,0,0,2010-09-21 07:15:18+00:00,2011-04-24 09:57:59+00:00,"Use JavaUuidGenerator in GAE environment, otherwise use ActiveMQUuidGenerator as default UuidGenerator.","davsclaus:1285029853:2010-09-21T08:44:13.471+0000:1285029853:2010-09-21T08:44:13.471+0000:In the camel-gae component I will set the UUID to be the JavaUUIDGenerator explicitly.
{code}
     @Override
     protected void doStart() throws Exception {
-        disableJMX(); // JMX not allowed on GAE
+        // JMX not allowed on GAE
+        disableJMX();
+        // use java uuid generator as ActiveMQ uses JDK API which is not allowed on GAE
+        setUuidGenerator(new JavaUuidGenerator());
+
         super.doStart();
     }
{code}
davsclaus:1285030002:2010-09-21T08:46:42.809+0000:1285030002:2010-09-21T08:46:42.809+0000:Ah we should only change the generator if its the AMQ one so the code should be
{code}
        if (getUuidGenerator() instanceof ActiveMQUuidGenerator) {
            // use java uuid generator as ActiveMQ uses JDK API which is not allowed on GAE
            setUuidGenerator(new JavaUuidGenerator());
        }
{code}
mrt1nz:1285031212:2010-09-21T09:06:52.551+0000:1285031212:2010-09-21T09:06:52.551+0000:When an application uses the GAE-specific CamelContext implementations provided by camel-gae, then your changes free applications from doing any additional configurations. With this ticket I was mainly referring to cases where applications use the camel-spring XML namespaces for configuring a SpringCamelContext (this became possible after GAE introduced support for JAXB). In these cases the apps need to change the UUID generator explicitly. Maybe we can free applications from doing that as well by introducing an environment-sensitive UUID generator factory (i.e. one that detects wether it is running on GAE). I'll think about that and come up with a proposal. (Hope to find some time tomorrow).
davsclaus:1285031588:2010-09-21T09:13:08.214+0000:1285031588:2010-09-21T09:13:08.214+0000:@Martin

Ah that is a good idea. 
mrt1nz:1285131859:2010-09-22T13:04:19.057+0000:1285131859:2010-09-22T13:04:19.057+0000:Will add something like the following to {{DefaultCamelContext}}

{code:java|title=DefaultCamelContext.java}
    // ...
    private UuidGenerator uuidGenerator = createDefaultUuidGenerator();
    // ...
    private static UuidGenerator createDefaultUuidGenerator() {
        if (System.getProperty(""com.google.appengine.runtime.environment"") != null) {
            // either ""Production"" (on GAE) or ""Development"" (on local development server)
            return new JavaUuidGenerator();
        } else {
            return new ActiveMQUuidGenerator();
        }
    }
{code}

Then we can also revert the changes made to {{GaeDefaultCamelContext}} and {{GaeSpringCamelContext}}. Still need to test it on GAE, then I'll commit.
mrt1nz:1285237442:2010-09-23T18:24:02.030+0000:1285237442:2010-09-23T18:24:02.030+0000:Revision: 1000565

davsclaus:1303610279:2011-04-24T09:57:59.161+0000:1303610279:2011-04-24T09:57:59.161+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3139,Improvement,Minor,"2.1.0, 2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-21 06:32:37+00:00,2011-04-24 09:58:20+00:00,"The Java UUID is too slow. Switching back to AMQ based will improve performance.


We should just have to switch to use the JDK UUID for the camel-gae component as it cannot use the AMQ based.","davsclaus:1285022387:2010-09-21T06:39:47.255+0000:1285022387:2010-09-21T06:39:47.255+0000:Some numbers on my laptop from a single threaded test looping 500k 

2010-09-21 08:33:14,070 [main           ] INFO  JavaUuidGeneratorTest          - First id: 1c236cdc-2aeb-41dc-b5ee-815aa35a8e38
2010-09-21 08:33:16,782 [main           ] INFO  JavaUuidGeneratorTest          - Last id:  9650cb32-34fd-47c5-a65b-c3eab6cbfd7d
2010-09-21 08:33:16,787 [main           ] INFO  JavaUuidGeneratorTest          - Took 2.713 seconds

2010-09-21 08:42:41,132 [main           ] INFO  ActiveMQUuidGeneratorTest      - First id: ID-davsclaus.local/51388-1285051361028/1-1
2010-09-21 08:42:41,303 [main           ] INFO  ActiveMQUuidGeneratorTest      - Last id:  ID-davsclaus.local/51388-1285051361028/1-500002
2010-09-21 08:42:41,309 [main           ] INFO  ActiveMQUuidGeneratorTest      - Took 0.172 seconds

2010-09-21 08:37:31,807 [main           ] INFO  SimpleUuidGeneratorTest        - First id: 1
2010-09-21 08:37:31,905 [main           ] INFO  SimpleUuidGeneratorTest        - Last id:  500002
2010-09-21 08:37:31,910 [main           ] INFO  SimpleUuidGeneratorTest        - Took 0.099 seconds
davsclaus:1285031613:2010-09-21T09:13:33.528+0000:1285031613:2010-09-21T09:13:33.528+0000:trunk: 999283.
davsclaus:1303610300:2011-04-24T09:58:20.120+0000:1303610300:2011-04-24T09:58:20.120+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3138,Improvement,Minor,2.5.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-21 05:52:43+00:00,2011-04-24 09:57:26+00:00,"See
http://camel.apache.org/uuidgenerator.html


We should consider switching back to ActiveMQ style as its faster. And therefore the DefaultUuidGenerator is not a good name.","davsclaus:1285021337:2010-09-21T06:22:17.963+0000:1285021337:2010-09-21T06:22:17.963+0000:trunk: 999235.
davsclaus:1303610246:2011-04-24T09:57:26.264+0000:1303610246:2011-04-24T09:57:26.264+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3137,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-20 07:01:00+00:00,2011-04-24 09:57:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/anonymous-FTP-login-fails-tp2846235p2846235.html","davsclaus:1284938463:2010-09-20T07:21:03.703+0000:1284938463:2010-09-20T07:21:03.703+0000:trunk: 998815.
davsclaus:1303610261:2011-04-24T09:57:41.407+0000:1303610261:2011-04-24T09:57:41.407+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3136,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Dmitry Drozdov,0,0,2010-09-19 13:18:14+00:00,2011-04-24 09:57:08+00:00,"... this makes it impossible to inject properties to the @WebService class


<camelContext>
        <route>
            <from uri=""...."" />
            <to uri=""cxfbean:handler"" />
        </route>
</camelContext>


<bean id=""handler"" class=""a.b.c.Handler"">
        <property name=""prop1"" value=""5"" />
</bean>


when ""handler"" is created by Spring, its 'prop1' is set to '5'


when the cxfbean:handler is triggered, the 'prop1' is null, because CXF created another instance of Handler instead of using the one created by Spring","davsclaus:1284875800:2010-09-19T13:56:40.372+0000:1284875800:2010-09-19T13:56:40.372+0000:Please take more time to write down details when creating tickets.

Just providing a title is not sufficient to go after.
More details and source code helps us to go track down what you mean.


di_m_an:1284880178:2010-09-19T15:09:38.579+0000:1284880178:2010-09-19T15:09:38.579+0000:Done
davsclaus:1284880430:2010-09-19T15:13:50.116+0000:1284880430:2010-09-19T15:13:50.116+0000:What version of Spring are you using as Spring 2.5 and 3.0 is different how Spring does IoC internally which somehow could cause an issue, so its great to know which version of Spring you use.
di_m_an:1284881263:2010-09-19T15:27:43.055+0000:1284881263:2010-09-19T15:27:43.055+0000:I use Spring 3.0.3

As far as I could understand, for some reason CXF uses SingletonFactory to get (create) the bean, but should use SpringBeanFactory.
davsclaus:1284881415:2010-09-19T15:30:15.717+0000:1284881415:2010-09-19T15:30:15.717+0000:I have re-produced the issue in an unit test in camel-cxf.

I think I have it fixed, but running tests to ensure it wont break stuff.
davsclaus:1284882449:2010-09-19T15:47:29.022+0000:1284882449:2010-09-19T15:47:29.022+0000:trunk: 998687.

Feel free to test the fix in your system as well.
di_m_an:1284885174:2010-09-19T16:32:54.146+0000:1284885174:2010-09-19T16:32:54.146+0000:Great! Tested and it works now, thanks!
davsclaus:1303610228:2011-04-24T09:57:08.486+0000:1303610228:2011-04-24T09:57:08.486+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3135,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,0,2010-09-19 09:30:40+00:00,2015-07-11 22:28:49+00:00,For example if you create temporary routes which are short lived and you don't want those enlisted for management.,"davsclaus:1284859872:2010-09-19T09:31:12.878+0000:1284859895:2010-09-19T09:31:35.148+0000:You should be able to specify a route to not be enlisted in JMX. 

{code}
from(""xxx"").disableJMX().to(""yyy"");
{code}

And in XML
{code:xml}
<route disableJMX=""true"">
   <from uri=""xxx""/>
   <to uri=""yyy""/>
</route>
{code}

The trick is the current API in Camel enlists in JMX by default if its enabled. It could take a bit of refactoring to have it being able know that the route is not enlisted. For example the consumers/endpoints/services which is created by that particular route should also *not* be enlisted in JMX. And hence they need to be able to understand this, by asking their parent route if JMX is disabled or not.
"
0,CAMEL-3134,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Tim Cull,0,0,2010-09-18 05:15:25+00:00,2011-04-24 09:57:46+00:00,"When connecting to a somewhat unstable FTP server, I occasionally have issues where the FTP poller dies (for all practical purposes because it stops polling, not sure what state it's actually in) if it encounters a connection issue in the middle of downloading a file.  At the bottom of this issue is an example stack trace from when this issue occurs.


I believe the exception is caused by a network-level issue with the connection to the remote FTP server.  This belief is based on the comment by Guy Rouillier in this issue:  
https://issues.apache.org/jira/browse/NET-160


The best fix is probably to put some retry logic in org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory() such that if this line throws and exception:
result = client.retrieveFile(onlyName, os);


then it closes the local file output stream, deletes the local file (if there's anything there), disconnects from the FTP server, reconnects, and then tries the download again.


[17/09/10 08:24:20:020 EDT] ERROR remote.FtpConsumer: Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - File operation failed
: 125 Data connection open; transfer starting.
 IOException caught while copying.. Code: 125]
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 125 Data connection open; transfer starting.
 IOException caught while copying.. Code: 125
        at org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory(FtpOperations.java:310)
        at org.apache.camel.component.file.remote.FtpOperations.retrieveFile(FtpOperations.java:235)
        at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:254)
        at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:137)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:103)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(Unknown Source)
        at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Unknown Source)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Unknown Source)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.commons.net.io.CopyStreamException: IOException caught while copying.
        at org.apache.commons.net.io.Util.copyStream(Util.java:129)
        at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1286)
        at org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory(FtpOperations.java:307)
        ... 14 more
[","davsclaus:1284851574:2010-09-19T07:12:54.868+0000:1284851574:2010-09-19T07:12:54.868+0000:trunk: 998603.

Thanks for reporting. I have committed a fix which closes the stream and deletes the temp file.
Can you test it out on your system?

You can use a PollingConsumerPollStrategy as the logic to retry in case the poll failed.
trcull:1284880721:2010-09-19T15:18:41.772+0000:1284880721:2010-09-19T15:18:41.772+0000:Wow that was fast thanks!  I'll check it out
davsclaus:1303610266:2011-04-24T09:57:46.920+0000:1303610266:2011-04-24T09:57:46.920+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3103,Sub-task,Major,None,None,"
None
",Closed,Fixed,None,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-09-03 18:42:38+00:00,2011-04-24 09:57:18+00:00,No Desc,"akarpe:1283516174:2010-09-03T20:16:14.017+0000:1283516174:2010-09-03T20:16:14.017+0000:Documentation added to the Camel wiki for the properties component illustrating how a System property could override an existing property setting.
davsclaus:1303610238:2011-04-24T09:57:18.557+0000:1303610238:2011-04-24T09:57:18.557+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3102,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,1,2010-09-03 14:37:06+00:00,2011-04-24 09:57:23+00:00,"See nabble
http://camel.465427.n5.nabble.com/Setting-JMS-ReplyTo-tp2800345p2800345.html


At first you must also enable preserveMessageQos=true when sending the InOnly message with a JMSReplyTo header to force Camel to use it.
ActiveMQ is clever that it can auto create the JMSReplyTo destination to set on the javax.jms.Message based from a String as it has a type converter String -> Destination.


But other brokers may fail that. So we should let JmsProducer help here with



lookup destination using destination resolver
fallback and create the destination","davsclaus:1283500606:2010-09-03T15:56:46.679+0000:1283500606:2010-09-03T15:56:46.679+0000:trunk: 992341.
davsclaus:1303610243:2011-04-24T09:57:23.510+0000:1303610243:2011-04-24T09:57:23.510+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3101,Bug,Major,2.3.0,2.5.0,"
None
",Closed,Duplicate,2.5.0,Claus Ibsen,maozuoyun,0,0,2010-09-03 01:52:50+00:00,2011-04-24 09:58:25+00:00,"I find an ftp operations error in camel in version 2.3.0.
In FtpOperations and SFTP Operations listFiles Method，should change direcory to root('/')，if not ,may occur an error that doesn't work well.
Example:
I configured from endpoint like:ftp://username@localhost:21/app/recfiles/TXN_JRNL_*.txt?password=pwd&binary=true&delay=1000&noop=true , I want to download files(/app/recfiles/TXN_JRNL_.txt) from server,if i don't use root user and direct to ftp user's HOME direcory not root directory('/').In RemoteFileConfiguration.java ,directory is changed to app/recfiles/TXN_JRNL_.txt，then problem occured.


Can you know what i meant?
My english is poor, please forgive me.","davsclaus:1283460205:2010-09-03T04:43:25.138+0000:1283460222:2010-09-03T04:43:42.860+0000:Please try Camel 2.5 when its released. Or try a snapshot here
http://camel.apache.org/download

As this should be fixed in the 2.5 release.
rocky:1283463843:2010-09-03T05:44:03.365+0000:1283463843:2010-09-03T05:44:03.365+0000:Dear Claus,

 *Camel2.5 can not be download in  *http://camel.apache.org/download.

When I Click download url:
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.5.0/apache-camel-2.5.0-src.zip
.

Show error that it's not found source.

Please help me.



rocky:1283464544:2010-09-03T05:55:44.716+0000:1283464544:2010-09-03T05:55:44.716+0000:Dear Claus,

 *Camel2.5 can not be download in  *http://camel.apache.org/download.

When I Click download url:
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.5.0/apache-camel-2.5.0-src.zip
.

Show error that it's not found source.

Please help me.


davsclaus:1283467502:2010-09-03T06:45:02.334+0000:1283467502:2010-09-03T06:45:02.334+0000:Download the jars manually
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/

Or use maven which is explain on that download page


davsclaus:1303610305:2011-04-24T09:58:25.719+0000:1303610305:2011-04-24T09:58:25.719+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3100,Bug,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-02 03:48:33+00:00,2011-04-24 09:57:14+00:00,"--- camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(revision 991781)
+++ camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java	(working copy)
@@ -122,7 +122,8 @@
             message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
             message.setHeader(Exchange.FILE_PARENT, getParent());
     
-            if (getFileLength() > 0) {
+            if (getFileLength() >= 0) {
                 message.setHeader(""CamelFileLength"", getFileLength());
             }
             if (getLastModified() > 0) {","njiang:1283375633:2010-09-02T05:13:53.035+0000:1283375633:2010-09-02T05:13:53.035+0000:Applied patch into camel trunk.
davsclaus:1303610234:2011-04-24T09:57:14.916+0000:1303610234:2011-04-24T09:57:14.916+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3099,Improvement,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Lorrin Nelson,0,1,2010-09-01 21:46:04+00:00,2011-04-24 09:57:27+00:00,"URIs with sensitive data are common and that URIs are frequently logged. I bumped into this myself most recently with an FTP consumer. I ended up with log messages like this:


RemoteFileProducer 2010-08-31 16:21:45,459 – INFO – Connected and logged in to: Endpoint[sftp://myusername@my.host.name/var/my/path?fileName=myFile.txt&password=yikesMyPassword]


I propose a sane-defaults patch of modifying DefaultEndoint.java's toString to sanitize the URI by looking for URI params containing the tokens ""password"" or ""passphrase"" and rendering their value as ""*******"" instead of the actual value. Obviously this isn't always the right thing to do in every situation, but it seems appropriate for many endpoints. Any for which it is not appropriate could override toString.","lorrin:1283349709:2010-09-01T22:01:49.123+0000:1283349709:2010-09-01T22:01:49.123+0000:proposed patch.
hadrian:1283357371:2010-09-02T00:09:31.569+0000:1283357371:2010-09-02T00:09:31.569+0000:Thanks for reporting this and thanks for the patch. While your patch does the job, let me look a bit into a more general solution.
njiang:1283359820:2010-09-02T00:50:20.554+0000:1283359820:2010-09-02T00:50:20.554+0000:@Hadrain,
I think the patch should be fine, as this patch doesn't touch the endpointUri which could be use for the caching the endpoint.
BTW a more general thing is we could support to encrypt these sensible options of the URI.
hadrian:1283361709:2010-09-02T01:21:49.677+0000:1283361709:2010-09-02T01:21:49.677+0000:@Willem,
Encryption has nothing to do with this, the issue is not not display a password in clear in logs, jmx consoles etc. The patch hardcodes password and passphrase to be considered as secrets. Always. Which may or may not be the case. 

If you saw my comment in the message Lorrin sent to the users@ list, I was thinking about the same issue and a solution I am working on now is to annotate with @Secret fields that are considered, well, secrets and must never be displayed in clear. I think that is a more general solution. We will then need to document how to best provide secrets to camel, like properties files with 400 permissions, not use them as arguments in command lines, etc.

Obviously the credit still goes to Lorrin for reporting this :).



hadrian:1283362656:2010-09-02T01:37:36.680+0000:1283362656:2010-09-02T01:37:36.680+0000:Thinking more about it, secret fields should probably be stripped from the uri completely. It's getting a bit late, give me until tomorrow to finish the patch.
lorrin:1283370615:2010-09-02T03:50:15.516+0000:1283370615:2010-09-02T03:50:15.516+0000:Hi Hadrian, thanks for giving this prompt attention.

I think it is better to censor the values of the secret fields rather than strip them completely. When you're debugging you often want to know what fields were supplied. Stripping them completely will create confusion.
hadrian:1283405772:2010-09-02T13:36:12.265+0000:1283405772:2010-09-02T13:36:12.265+0000:@Lorrin, fair point.
davsclaus:1283406388:2010-09-02T13:46:28.613+0000:1283406388:2010-09-02T13:46:28.613+0000:Looks okay since its only in the {{toString}} method and hence wont affect any internal logic which leverages {{endpointUri}} or {{endpointKey}}.

Would like to have that reg exp unit test though. So if the patch could add tests which ensures the reg exp does as expected.
And obviously that import of sun internal class should not be included.

Camel should also compile on IBM and other JDKs
davsclaus:1283406434:2010-09-02T13:47:14.144+0000:1283406434:2010-09-02T13:47:14.144+0000:The unit test could just be a simple Junit TestCase where the reg exp is copied and tested throughly.
lorrin:1283422141:2010-09-02T18:09:01.588+0000:1283422141:2010-09-02T18:09:01.588+0000:This patch adds unit tests. It also cleans up the errant imports. Rather than copy the regex I factored out execution of the regex into a helper method and unit test that.
davsclaus:1283461894:2010-09-03T05:11:34.943+0000:1283461894:2010-09-03T05:11:34.943+0000:Thanks for the patch.

trunk: 992207.
davsclaus:1303610247:2011-04-24T09:57:27.523+0000:1303610247:2011-04-24T09:57:27.523+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3098,Sub-task,Major,None,None,"
None
",Resolved,Abandoned,3.0.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-09-01 19:37:12+00:00,2015-02-17 07:02:35+00:00,No Desc,davsclaus:1283406614:2010-09-02T13:50:14.642+0000:1283406614:2010-09-02T13:50:14.642+0000:Ashwin you dont have to create sub tickets for simple documentation updates. 
0,CAMEL-3097,Improvement,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-09-01 13:14:52+00:00,2011-04-24 09:58:07+00:00,"Using sortBy=file:size is intuitive.


Currently you have to do sortBy=file:length.","davsclaus:1283318153:2010-09-01T13:15:53.077+0000:1283318153:2010-09-01T13:15:53.077+0000:trunk: 991522.
davsclaus:1303610287:2011-04-24T09:58:07.483+0000:1303610287:2011-04-24T09:58:07.483+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3096,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,6,2010-09-01 08:03:33+00:00,2013-08-21 13:32:55+00:00,"A simple JDBC example using camel-jdbc (Spring JdbcTemplate) which is a really good JdbcTemplate.


And show how to deply and run it in OSGi.


The other database examples is based on jpa crapola which is complex and overkill for most people. So having an easy to understand and use example would be great.
We can use an in memory database such as HSQLDB.","alanfoster:1354887154:2012-12-07T21:32:34.403+0000:1354887177:2012-12-07T21:32:57.817+0000:bq. The other database examples is based on jpa crapola which is complex and overkill for most people

Where is the link for this?
bvahdat:1354893725:2012-12-07T23:22:05.818+0000:1354893725:2012-12-07T23:22:05.818+0000:It's here:
http://camel.apache.org/etl-example.html

Also note that as *in the meanwhile* we make use of Apache Derby for the Camel's own unit-tests (see CAMEL-4734) and as you will provide unit-tests for the example itself, IMHO it would be better to make use of Derby instead of HSQLDB. Though not really sure what Claus thinks about this.
muellerc:1354894324:2012-12-07T23:32:04.688+0000:1354894324:2012-12-07T23:32:04.688+0000:If there is no reason not to use Derby, than this example should also use Derby.
davsclaus:1355032381:2012-12-09T13:53:01.236+0000:1355032381:2012-12-09T13:53:01.236+0000:Yeah its fine to use Derby, just that we need a database that is in memory and easy to setup and use. In the older days we preferred using HSQLDB. But I guess in recent time we have aligned to use Derby in testing/examples etc. 
alanfoster:1355644203:2012-12-16T15:50:03.088+0000:1355644203:2012-12-16T15:50:03.088+0000:Can I just clarify whether this example should be using the 'camel-jdbc' component?
Or if you are after an example which uses camel + jdbc spring templates? IE inject the datasource into a bean, instantiate a jdbc template and use a route which sends the exchange to the bean?
Could you let me know if you are after the first or second scenario please

Alan
davsclaus:1355695116:2012-12-17T05:58:36.569+0000:1355695116:2012-12-17T05:58:36.569+0000:Alan, I think its up to you what you consider a simple example.

The camel-jdbc is very simple as you don't need to write code. Though its also a bit limited, and when you need a bit more, then maybe a bean using spring jdbc template is also a simple solution (for people okay with writing a bit of code).

The camel-sql is a bit special IMHO as you have the query in the uri, which maybe is not so nice for bigger queries. Though you can set the SQL query as a header as well. I think camel-sql uses prepared statements so maybe its overall better. 




muellerc:1355737572:2012-12-17T17:46:12.409+0000:1355737572:2012-12-17T17:46:12.409+0000:Yeah, choose what ever you want to show and it's not already covered in our examples.
Make sure you focus on one thing (or may be two if you want to show camel-jdbc and camel-sql in one example).
saltnlight5:1376743438:2013-08-17T20:43:58.701+0000:1376743438:2013-08-17T20:43:58.701+0000:Hi, I have few examples usage on camel-jdbc and I would be happy to contrite to the project. 

BTW, is DERBY a must? My samples are all using H2. The H2 comes with a web console that's very productive to verify and query data during testing. If not, then I have to reconfigure it to use DERBY.
saltnlight5:1376769769:2013-08-18T04:02:49.400+0000:1376769769:2013-08-18T04:02:49.400+0000:Here is a patch that contains my example files. See README.txt for usage.
muellerc:1376790996:2013-08-18T09:56:36.960+0000:1376790996:2013-08-18T09:56:36.960+0000:It would be good, if you could update the example to use Derby. In this case it's easier for us to support the examples and we do not have to maintain an additional dependency.
saltnlight5:1376810559:2013-08-18T15:22:39.570+0000:1376810559:2013-08-18T15:22:39.570+0000:Sure, see CAMEL-3096_v2.patch - uses DERBY DB instead.
bibryam:1376974589:2013-08-20T12:56:29.853+0000:1376974589:2013-08-20T12:56:29.853+0000:FYI I added restlet-jdbc example based on https://github.com/bibryam/camel-example-restlet-jdbc
davsclaus:1377063175:2013-08-21T13:32:55.954+0000:1377063175:2013-08-21T13:32:55.954+0000:Thanks for the contribution. 

"
0,CAMEL-3095,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-01 02:46:41+00:00,2011-04-24 09:57:05+00:00,No Desc,davsclaus:1303610225:2011-04-24T09:57:05.270+0000:1303610225:2011-04-24T09:57:05.270+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3094,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-09-01 02:35:54+00:00,2011-04-24 09:57:43+00:00,"As CXF provides async and sync API at the same time, we should let user have the choice to chose which kind of API he want to use.","njiang:1283381947:2010-09-02T06:59:07.619+0000:1283381947:2010-09-02T06:59:07.619+0000:updated the wiki page for it.
davsclaus:1303610263:2011-04-24T09:57:43.725+0000:1303610263:2011-04-24T09:57:43.725+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3093,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Christian Müller,Christian Müller,0,0,2010-08-31 19:35:11+00:00,2010-08-31 20:48:05+00:00,Currently camel-smpp doesn't honor the encoding option by creating the consumer/producer.,muellerc:1283258848:2010-08-31T20:47:28.486+0000:1283258848:2010-08-31T20:47:28.486+0000:added the new option dataCoding and updated the wiki page
0,CAMEL-3092,Task,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Jonathan Anstey,0,0,2010-08-31 16:38:19+00:00,2011-04-24 09:58:21+00:00,We currently have the subscriptionDurable option to force Camel to try and create a durable subscription. This gives a user the option of say only setting the durableSubscriptionName and trying to create a durable sub without a clientId. I think we should deprecate subscriptionDurable or at least log a WARN that both clientId and durableSubscriptionName are needed.,"davsclaus:1283492293:2010-09-03T13:38:13.108+0000:1283492293:2010-09-03T13:38:13.108+0000:trunk: 992293.

Camel now requires the {{clientId}} option to be configured if you have set {{durableSubscriptionName}} option.
Also the {{subscriptionDurable}} option is @deprecated and not used.
davsclaus:1283492485:2010-09-03T13:41:25.310+0000:1283492485:2010-09-03T13:41:25.310+0000:If {{clientId}} is not configured then an IllegalArgumentException is thrown on startup.
davsclaus:1303610301:2011-04-24T09:58:21.203+0000:1303610301:2011-04-24T09:58:21.203+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3091,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-08-31 01:58:16+00:00,2011-04-24 09:57:50+00:00,"Looks like the job.name argument is not se properly on the endpoint and defaults to the uri path.


Another nastier issue (for which I should have probably created a separate issue) is that the uri gets messed up if it does not have the double slashes after the scheme (as in ""quartz:<uri>"" vs ""quartz://<uri>"") and the @cron argument contains '?'. The workaround (arguably) is to start the uri with ""quartz://..."".


See nabble thread. Many thanks to SK for reporting this.","hadrian:1283193373:2010-08-31T02:36:13.483+0000:1283193373:2010-08-31T02:36:13.483+0000:The job name part is resolved in r991060.
hadrian:1283194564:2010-08-31T02:56:04.469+0000:1283194564:2010-08-31T02:56:04.469+0000:Added failing test in {{QuartzEndpointConfigureTest}} that shows the problem.
davsclaus:1283233600:2010-08-31T13:46:40.392+0000:1283233600:2010-08-31T13:46:40.392+0000:trunk: 991189.

Fixed the parameter parsing bug in camel-core due the ? mark in the cron expression
davsclaus:1303610270:2011-04-24T09:57:50.203+0000:1303610270:2011-04-24T09:57:50.203+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3090,Improvement,Minor,2.4.0,2.8.0,"
None
",Resolved,Duplicate,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-30 14:54:36+00:00,2011-06-10 14:17:58+00:00,OpenJPA 2.0 has been released and it requires a bit of migration to have it work with camel-bam and camel-jpa.,davsclaus:1307686678:2011-06-10T14:17:58.848+0000:1307686678:2011-06-10T14:17:58.848+0000:There is another ticket about OpenJPA upgrade
0,CAMEL-3089,Task,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-30 09:38:53+00:00,2011-04-24 09:57:29+00:00,"Karaf 2.0.0 is released, we need to update the feature plugin for it.",davsclaus:1303610249:2011-04-24T09:57:29.248+0000:1303610249:2011-04-24T09:57:29.248+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3088,Task,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-30 09:37:12+00:00,2011-04-24 09:57:35+00:00,"PAX-Exam released 1.2.1 recently, we should use it when running the OSGi unit tests.",davsclaus:1303610255:2011-04-24T09:57:35.254+0000:1303610255:2011-04-24T09:57:35.254+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3087,Bug,Major,2.2.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,Christian Müller,0,0,2010-08-29 19:43:33+00:00,2011-04-24 09:58:12+00:00,"All of our routes are defined in the following way:



from(""direct:start"").id(MyRoute.class.getName() + "".main"")
...
.to(""mock:result"");




but in some situations, the route name exposed in JMX is ""routeX"" instead of ""com.company.MyRoute.main""","davsclaus:1283112051:2010-08-30T04:00:51.033+0000:1283112051:2010-08-30T04:00:51.033+0000:You should use {{routeId}} to assign the id of the route
muellerc:1283124061:2010-08-30T07:21:01.472+0000:1283124061:2010-08-30T07:21:01.472+0000:Hello Claus!

Thank you for the quick answer and sorry for the incorrect issue.

Cheers,
Christian
davsclaus:1283124954:2010-08-30T07:35:54.568+0000:1283124954:2010-08-30T07:35:54.568+0000:No problem.

Yeah we had issues in the past in the Java DSL to assign id to the routes, because {{id}} will clash with setting id on each of the processors in the route. Hence why we created {{routeId}} to be used for setting the route id. And therefore we don't have clashes/issues anymore.
davsclaus:1303610292:2011-04-24T09:58:12.363+0000:1303610292:2011-04-24T09:58:12.363+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3086,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-27 13:23:54+00:00,2011-04-24 09:58:17+00:00,"CXF has a continuation API which is perfect match with Camel async process API.
We can leverage it to make camel-cxf support more concurrent long process request.","davsclaus:1282886874:2010-08-27T13:27:54.763+0000:1282886874:2010-08-27T13:27:54.763+0000:Ah for the Camel CxfConsumer?

I assume this continuation API is available in CXF 2.2.10?
njiang:1282887202:2010-08-27T13:33:22.919+0000:1282887202:2010-08-27T13:33:22.919+0000:Yes, CXF provides this API about a year ago.
I should let CxfConsumer use it from Camel 2.4.0 :).
davsclaus:1303610297:2011-04-24T09:58:17.169+0000:1303610297:2011-04-24T09:58:17.169+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3085,Task,Trivial,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Glen Mazza,0,0,2010-08-27 12:45:40+00:00,2011-04-24 09:57:38+00:00,"Running ""mvn -DskipTests clean install"" from the Camel root folder as per the instructions[1] returns this error when Maven tries to build Camel :: Jetty:


[INFO] Building Camel :: Jetty
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean 

{execution: default-clean}

]
Downloading: http://repo1.maven.org/maven2/javax/mail/mail/1.4.3/mail-1.4.3.pom
[INFO] Unable to find resource 'javax.mail:mail:pom:1.4.3' in repository central (http://repo1.maven.org/maven2)
Downloading: http://repo1.maven.org/maven2/javax/mail/mail/1.4.3/mail-1.4.3.jar
[INFO] Unable to find resource 'javax.mail:mail:jar:1.4.3' in repository central (http://repo1.maven.org/maven2)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.


Missing:
----------
1) javax.mail:mail:jar:1.4.3


  Try downloading the file manually from the project website.


  Then, install it using the command: 
      mvn install:install-file -DgroupId=javax.mail -DartifactId=mail -Dversion=1.4.3 -Dpackaging=jar -Dfile=/path/to/file


  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=javax.mail -DartifactId=mail -Dversion=1.4.3 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]


  Path to dependency: 
  	1) org.apache.camel:camel-jetty:bundle:2.5-SNAPSHOT
  	2) javax.mail:mail:jar:1.4.3


----------
1 required artifact is missing.


for artifact: 
  org.apache.camel:camel-jetty:bundle:2.5-SNAPSHOT


from the specified remote repositories:
  apache.snapshots (http://repository.apache.org/snapshots),
  central (http://repo1.maven.org/maven2)


------------------------------------------


Apparently the java.net repository needs to be added to the POM file.[2]  Alternatively, if there is manual modification we need to do in order for the build instructions to work (strange, as the Maven commands should ideally work out-of-the-box), to add those instructions to the build page[1] so people trying to build Camel aren't lost.


[1] http://camel.apache.org/building.html
[2] http://camel.465427.n5.nabble.com/Problem-building-camel-trunk-javax-mail-not-found-td510279.html#a510279","davsclaus:1282885694:2010-08-27T13:08:14.913+0000:1282885694:2010-08-27T13:08:14.913+0000:Workaround build camel-mail first as it will download the mail jar.

Actually wonder why camel-jetty need a mail jar for testing?
davsclaus:1282885736:2010-08-27T13:08:56.541+0000:1282885736:2010-08-27T13:08:56.541+0000:trunk: 990136.
davsclaus:1282888957:2010-08-27T14:02:37.327+0000:1282888957:2010-08-27T14:02:37.327+0000:mail API is not needed for tests, so I will remove it.
davsclaus:1303610258:2011-04-24T09:57:38.098+0000:1303610258:2011-04-24T09:57:38.098+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3084,Bug,Minor,2.5.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-26 12:11:43+00:00,2011-04-24 09:57:58+00:00,This only affects the refactored camel-jms component.,"davsclaus:1282796452:2010-08-26T12:20:52.254+0000:1282796452:2010-08-26T12:20:52.254+0000:trunk: 989637.
davsclaus:1303610278:2011-04-24T09:57:58.266+0000:1303610278:2011-04-24T09:57:58.266+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3083,Improvement,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-26 07:09:42+00:00,2011-04-24 09:57:10+00:00,"As Jetty 7 provides a more stable version of SslSelectorChannelConnector, we should use it instead of SslSocketConnector to leverage the power of NIO.","njiang:1282796217:2010-08-26T12:16:57.049+0000:1282796217:2010-08-26T12:16:57.049+0000:Updated the wiki page for it.
davsclaus:1303610230:2011-04-24T09:57:10.593+0000:1303610230:2011-04-24T09:57:10.593+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3082,Bug,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-26 07:00:15+00:00,2011-04-24 09:57:15+00:00,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Bug-in-the-BeanConverter-class-td2653552.html#a2653552",davsclaus:1303610235:2011-04-24T09:57:15.451+0000:1303610235:2011-04-24T09:57:15.451+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3081,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Anand,0,0,2010-08-25 15:45:27+00:00,2011-04-24 09:57:43+00:00,"eventhough message was received by netty procuder, it thows a timeout exception after 30 secs. here is the route and log. as this is a basic functionality I think this is critical priority.


		from(""netty:tcp://localhost:6205?textline=true&sync=true"").process(new Processor() {
		    int i=0;
			public void process(Exchange exchange) throws Exception 

{
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		       // if(i++%2==1) throw new IOException(""custom exception"");
		    }

		});


		from(""file:///test/test/response"")
		.convertBodyTo(String.class)
		.threads(1)
		.to(ExchangePattern.InOut,""netty:tcp://localhost:6205?textline=true&sync=true"")
		.to(""log:+++ reply++++"");


2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG Total 1 files to consume
2010-08-25 11:33:29,963 [1 - file:///test/test/response] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\hello1.txt]]
2010-08-25 11:33:31,510 [      Camel Thread 6 - Threads] SendProcessor                  DEBUG >>>> Endpoint[tcp://localhost:6205] Exchange[GenericFileMessage with body: hello1]
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Creating connector to address: localhost:6205
2010-08-25 11:33:31,682 [      Camel Thread 6 - Threads] NettyProducer                  DEBUG Writing body: hello1


2010-08-25 11:33:31,697 [    New I/O client worker #1-1] NettyProducer                  DEBUG Operation complete org.jboss.netty.channel.DefaultChannelFuture@944dbd
2010-08-25 11:33:31,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Incoming message: hello1
2010-08-25 11:33:36,697 [    New I/O server worker #1-1] ServerChannelHandler           DEBUG Writing body: Bye 1hello1


2010-08-25 11:33:36,697 [    New I/O client worker #1-1] ClientChannelHandler           DEBUG Message received: Bye 1hello1
2010-08-25 11:33:36,697 [    New I/O client worker #1-1] SendProcessor                  DEBUG >>>> Endpoint[log://+++ reply++++] Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] +++ reply++++                  INFO  Exchange[ExchangePattern:InOut, BodyType:String, Body:Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\hello1.txt] using exchange: Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\hello1.txt.camelLock with result: true
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\hello1.txt] to: GenericFile[C:\test\test\response\.camel\hello1.txt]
2010-08-25 11:33:36,713 [    New I/O client worker #1-1] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\hello1.txt to: C:\test\test\response\.camel\hello1.txt with result: true
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            DEBUG Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. On delivery attempt: 0 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
2010-08-25 11:34:06,886 [         Hashed wheel timer #1] DefaultErrorHandler            ERROR Failed delivery for exchangeId: f5eb372d-a214-4418-a60f-62c0557768d2. Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis. Exchange[GenericFileMessage with body: Bye 1hello1]","davsclaus:1282723276:2010-08-25T16:01:16.628+0000:1282723276:2010-08-25T16:01:16.628+0000:See the release notes for Camel 2.4.0
http://camel.apache.org/camel-240-release.html

It explains that you must set the timeout to 0 as it doesnt work in Camel 2.4.

Try using 2.5-SNAPSHOT
skusma@arccorp.com:1282723947:2010-08-25T16:12:27.190+0000:1282723947:2010-08-25T16:12:27.190+0000:changing from critical to major becuase it doesn't crash but does trigger false failure alerts.
skusma@arccorp.com:1282724663:2010-08-25T16:24:23.307+0000:1282724663:2010-08-25T16:24:23.307+0000:as you are fixing it in next release, I guess this bug can be closed?. sorry, I didn't realise it was in release notes.
skusma@arccorp.com:1282725115:2010-08-25T16:31:55.190+0000:1282725115:2010-08-25T16:31:55.190+0000:I tried with timeout as zero, it doesn't generate that exception any more.i hope 2.5 still runs in a async mode fine. I am thinking timeout is applicable only for sync mode?.
davsclaus:1282781012:2010-08-26T08:03:32.546+0000:1282781012:2010-08-26T08:03:32.546+0000:trunk: 989516.

Removed the {{timeout}} option as it was flawed.
davsclaus:1303610263:2011-04-24T09:57:43.137+0000:1303610263:2011-04-24T09:57:43.137+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3080,New Feature,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-25 15:31:06+00:00,2011-04-24 09:57:42+00:00,So you can for example group 100 lines when scanning log files etc. Currently you will get 1 Exchange per line.,"davsclaus:1282721545:2010-08-25T15:32:25.748+0000:1282721545:2010-08-25T15:32:25.748+0000:trunk: 989172.
davsclaus:1303610262:2011-04-24T09:57:42.839+0000:1303610262:2011-04-24T09:57:42.839+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3079,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Ingo Düppe,0,1,2010-08-25 15:26:15+00:00,2011-04-24 09:58:14+00:00,"Currently stateful cron jobs are identified by their group name, job name and the cron expression. This prevents an easy rescheduling of cron jobs. For instance, stopping a camel context, rescheduling the cron job by editing the cron expressing and restart will end up in an exception. This will happen because the rescheduled job will be added as an additional job. The already existing job will produce an exception because the corresponding endpoint doesn't exist anymore. The previous solution deleting all triggers on shutdown doesn't work in a cluster scenario. 


I suggest to identify cron jobs only by their group and job name. On startup it will check if a trigger already exists and check if the cron expression has changed. If so it will be rescheduled.


Also the current explicit resuming of stateful jobs will produce an exception during startup, because the scheduler automatically finds and resumes stored triggers.","idueppe:1282721235:2010-08-25T15:27:15.197+0000:1282721235:2010-08-25T15:27:15.197+0000:Patch is for the current trunk version of 2.5-SNAPSHOT.
davsclaus:1282722387:2010-08-25T15:46:27.999+0000:1282722387:2010-08-25T15:46:27.999+0000:trunk: 989179.

Thanks for the patch.
davsclaus:1303610294:2011-04-24T09:58:14.472+0000:1303610294:2011-04-24T09:58:14.472+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3078,Bug,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,John Ellis,0,0,2010-08-25 03:29:07+00:00,2011-04-24 09:58:22+00:00,"In Spring, if one attempts to specify a cache endpoint as:
<endpoint id=""myCache"" uri=""cache://MyCache?memoryStoreEvictionPolicy=MemoryStoreEvictionPolicy.FIFO""/>
an exception will be thrown that the String ""MemoryStoreEvictionPolicy.FIFO"" was not a proper Java Object and no TypeConverter is available. This can be worked-around by manually creating a type converter that performs:
    String policyName = evictionPolicy.replace(""MemoryStoreEvictionPolicy."", """");
    return MemoryStoreEvictionPolicy.fromString(policyName);


Or one could just try to create a new instance from reflection. Above way is a bit more manageable however, since EhCache is taking care of the conversion for you.","davsclaus:1282709429:2010-08-25T12:10:29.420+0000:1282709429:2010-08-25T12:10:29.420+0000:trunk: 989045.

Thanks for reporting. You can now just assign the option the value as {{FIFO}}. 
davsclaus:1303610302:2011-04-24T09:58:22.139+0000:1303610302:2011-04-24T09:58:22.139+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3077,Bug,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,John Ellis,0,0,2010-08-25 03:22:51+00:00,2011-04-24 09:57:39+00:00,"EhCache often has a bit of lag time when invalidating expired cache elements, first setting the Element value to null and then removing the key. If you are hitting a cache rapidly one often will run across a key that is present in the cache that still has a null element entry.


The logic for successfully key retrieval just needs to be slightly tweaked to check for null values.","deckerego:1282678461:2010-08-25T03:34:21.827+0000:1282678461:2010-08-25T03:34:21.827+0000:If it helps, steps to reproduce:
1) Set timeToLiveSeconds to something like 30 seconds
2) Add an entry in a route
3) Wait 30-ish seconds
4) Attempt to make several GETs around the expiry time. One will likely result in an NPE as the entry is being removed by the EhCache monitor
davsclaus:1282708351:2010-08-25T11:52:31.134+0000:1282708351:2010-08-25T11:52:31.134+0000:trunk: 989026.

Thanks for the patch.
davsclaus:1303610259:2011-04-24T09:57:39.105+0000:1303610259:2011-04-24T09:57:39.105+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3076,Task,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Hadrian Zbarcea,0,0,2010-08-25 01:15:31+00:00,2011-04-24 09:58:01+00:00,"The quickfixj project recently released version 1.5.0.


Unfortunately the jars are not available in the central m2 repo. I will try to ping the quickfix guys to see if there are any plans to push it to central, otherwise we'll have to republish it in some repo.","davsclaus:1282690578:2010-08-25T06:56:18.468+0000:1282690578:2010-08-25T06:56:18.468+0000:trunk: 988826.
davsclaus:1303610281:2011-04-24T09:58:01.645+0000:1303610281:2011-04-24T09:58:01.645+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3075,Improvement,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-24 10:50:21+00:00,2011-04-24 09:57:40+00:00,The simple language currently only allows using and or or operators once in the expression. We should allow unlimited usages of those.,"davsclaus:1282645216:2010-08-24T18:20:16.167+0000:1282645216:2010-08-24T18:20:16.167+0000:trunk: 988647.
davsclaus:1303610260:2011-04-24T09:57:40.193+0000:1303610260:2011-04-24T09:57:40.193+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3074,New Feature,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-24 10:46:50+00:00,2011-04-24 09:57:57+00:00,"The routing slip currently requires the slip to be evaluated once.


We should allow a dynamic slip which evaluates on-demand and keep routing until the evaluation returns null or false.
Then you can use it as a decision point and as the dynamic router EIP pattern.","davsclaus:1283125213:2010-08-30T07:40:13.631+0000:1283125213:2010-08-30T07:40:13.631+0000:We will introduce a new {{dynamicRouter}} in the DSL.

This allows you to use for example a bean to compute the next step(s) to do. And Camel will invoke the bean repeatedly until it returns {{null}}.
This allows you to decide during the routing.

The route slip on the other hand, had to compute the entire slip beforehand.
But by using this new {{dynamicRouter}} you can compute the slip on-the-fly.

Just be sure to return {{null}} so the dynamic router know that it should stop. Otherwise it will keep running forever.
davsclaus:1283127147:2010-08-30T08:12:27.769+0000:1283127147:2010-08-30T08:12:27.769+0000:trunk: 990724.
davsclaus:1303610277:2011-04-24T09:57:57.547+0000:1303610277:2011-04-24T09:57:57.547+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3073,Task,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Christian Müller,0,0,2010-08-24 07:38:57+00:00,2011-04-24 09:57:44+00:00,"Site http://camel.apache.org/type-converter.html has some broken links:



to http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/TypeConverter.html
to http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/impl/converter/DefaultTypeConverter.html
to http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/impl/converter/TypeConverterLoader.html
and so on...",davsclaus:1303610264:2011-04-24T09:57:44.590+0000:1303610264:2011-04-24T09:57:44.590+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3072,New Feature,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Lorrin Nelson,0,0,2010-08-23 19:22:42+00:00,2011-04-24 09:57:55+00:00,"I would like to enable splitEntries in camel-atom so that each feed item is processed as a distinct message. However, I'd like to process each message as soon as it is available rather than spacing each entry out by consumer-delay. This patch creates a new flag, throttleEntries. Yields existing behavior when enabled (default). When disabled, all entries found on the Atom feed are processed with no delay.","davsclaus:1282610989:2010-08-24T08:49:49.736+0000:1282610989:2010-08-24T08:49:49.736+0000:trunk: 988435.

Thanks for the patch Lorrin.
davsclaus:1303610275:2011-04-24T09:57:55.438+0000:1303610275:2011-04-24T09:57:55.438+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3071,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-08-23 16:11:47+00:00,2011-04-24 09:57:58+00:00,Add a feature to deploy the Camel SIP component to the Servicemix Container. (CAMEL-2943),"akarpe:1282636212:2010-08-24T15:50:12.808+0000:1282636743:2010-08-24T15:59:03.983+0000:The attached patch contains the modification to the features.xml and features-spring2.xml in platform/karaf/features.

I have verified that it works and deploys successfully in a Servicemix container.
akarpe:1282636727:2010-08-24T15:58:47.948+0000:1282636727:2010-08-24T15:58:47.948+0000:Committed to the SVN trunk as revision r988607
davsclaus:1303610278:2011-04-24T09:57:58.690+0000:1303610278:2011-04-24T09:57:58.690+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3070,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-08-23 16:10:14+00:00,2011-04-24 09:57:54+00:00,Add documentation to the Camel wiki for the Camel SIP component (CAMEL-2943),"akarpe:1282735325:2010-08-25T19:22:05.480+0000:1282735325:2010-08-25T19:22:05.480+0000:Hi Claus,

I have added documentation or the Camel SIP component and also updated the components list to show the new component.

Cheers,

Ashwin...
hadrian:1282756689:2010-08-26T01:18:09.255+0000:1282756689:2010-08-26T01:18:09.255+0000:Excellent Ashwin, thanks!
davsclaus:1303610274:2011-04-24T09:57:54.060+0000:1303610274:2011-04-24T09:57:54.060+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3069,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-23 15:28:16+00:00,2011-04-24 09:57:53+00:00,The statistics for routes is correct. However for processors the stats is wrong. For example ExchangesCompleted appears to be doubled.,"davsclaus:1282555327:2010-08-23T17:22:07.277+0000:1282555327:2010-08-23T17:22:07.277+0000:trunk: 988215.
davsclaus:1303610273:2011-04-24T09:57:53.921+0000:1303610273:2011-04-24T09:57:53.921+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3068,Sub-task,Major,None,None,"
None
",Closed,Fixed,None,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-08-23 14:13:15+00:00,2011-04-24 09:57:57+00:00,Add documentation for the new capability to add a custom channel pipeline Factory in Netty to create custom pipeline instances.,"akarpe:1282551281:2010-08-23T16:14:41.843+0000:1282551281:2010-08-23T16:14:41.843+0000:Documentation has been added to the wiki page and should show up shortly after the site is refreshed.

Cheers,

Ashwin...
davsclaus:1303610277:2011-04-24T09:57:57.976+0000:1303610277:2011-04-24T09:57:57.976+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3067,Task,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-21 11:31:36+00:00,2011-04-24 09:58:18+00:00,No Desc,"davsclaus:1282454699:2010-08-22T13:24:59.439+0000:1282454699:2010-08-22T13:24:59.439+0000:trunk: 987900.
davsclaus:1303610298:2011-04-24T09:58:18.450+0000:1303610298:2011-04-24T09:58:18.450+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3066,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,Ramon van den Hoven,0,0,2010-08-20 14:37:31+00:00,2011-04-24 09:57:36+00:00,"When calling a stored procedure in the following form 

{call lsuser.liq_vortex.LIQ_VORTEX_ALL_STRUCT(?,?,?,?,?)}

 where the last ? is an OUT param, the result is null.


See for comments in the following function in the  IbatisProducer class
Look for the NOTE:


private void doQueryForObject(Exchange exchange) throws Exception {
        SqlMapClient client = endpoint.getSqlMapClient();


        Object result;
        Object in = exchange.getIn().getBody();
        if (in != null) {
            if (LOG.isTraceEnabled()) 

{
                LOG.trace(""QueryForObject: "" + in + ""  using statement: "" + statement);
            }


            result = client.queryForObject(statement, in);
NOTE: The in parameter has the resultset, in my case a HashMap, isn't it always a Map?
should be something like:
        result = in.get(outParameterKey)


        } else {
            if (LOG.isTraceEnabled()) 

{
                LOG.trace(""QueryForObject using statement: "" + statement);
            }

            result = client.queryForObject(statement);
        }


        doProcessResult(exchange, result);
    }","davsclaus:1282362097:2010-08-21T11:41:37.070+0000:1282362097:2010-08-21T11:41:37.070+0000:So you are saying the result from the {{client.queryForObject}} operation is a Map of some sort.

In which there is an OUT param (in that Map) and you want the camel-ibatis component to figure this out, and take out that OUT param and use as the result?

Can you put together a small example project / unit test we can use for unit testing?
davsclaus:1282881604:2010-08-27T12:00:04.497+0000:1282881604:2010-08-27T12:00:04.497+0000:Ramon do you care to follow up on this and help out?
ramonus:1283132214:2010-08-30T09:36:54.560+0000:1283132214:2010-08-30T09:36:54.560+0000:Yes sorry, I was on holiday for a week.
It's hard to create a unit test for this one, since it connects to an oracle database.
I'm questioning if it is a camel issue, maybe it's a ibatis issue;


The statement: 
result = client.queryForObject(statement, in);
expects a statement: in my case a stored procedure:
{call lsuser.liq_vortex.LIQ_VORTEX_ALL_STRUCT(?,?,?,?,?)} 
The in parameter is a Map, where I defined the input parameters for the stored procedure
The last parameter in the Map is the out parameter. So my results are in the Map indeed and not in the return value of the method.
This way no results will be passed on in the camel route.
I will try to create a simple project.









davsclaus:1283141861:2010-08-30T12:17:41.053+0000:1283141861:2010-08-30T12:17:41.053+0000:Ramon, thanks for reporting back.

How do you map the last parameter as OUT? How do you tell iBatis that it's an OUT parameter?
ramonus:1283143251:2010-08-30T12:40:51.530+0000:1283143251:2010-08-30T12:40:51.530+0000:I solved it this way:

I added a key value pair in the parameterMap.
(key=outParamName, value=<the key of the out parameter)
this way I know what the out parameter is.
I don't believe it's a very nice solution but, it works for me right now



 private void doQueryForObject(Exchange exchange) throws Exception {
        SqlMapClient client = endpoint.getSqlMapClient();

        Object result;
        Object in = exchange.getIn().getBody();
        if (in != null) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""QueryForObject: "" + in + ""  using statement: "" + statement);
            }
            result = client.queryForObject(statement, in);
            
            if (result == null){
            	if (in instanceof Map){
            		Map m = ((Map)in);
            		result = m.get(m.get(""outParamName""));
            	}
            }
            
            
        } else {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""QueryForObject using statement: "" + statement);
            }
            result = client.queryForObject(statement);
        }

        doProcessResult(exchange, result);
    }
davsclaus:1283402565:2010-09-02T12:42:45.603+0000:1283402565:2010-09-02T12:42:45.603+0000:You can always extra that last Map element in a processor afterwards

{code}
from(""xxx"")
   .to(""ibatis:xxx"")
   .process(new MyExtractStoredProcedureResult());
{code}

I don't see this as a bug, because Camel returns the result that iBatis returned back. And hence Camel should not try to _alter_ that response.
davsclaus:1303610256:2011-04-24T09:57:36.123+0000:1303610256:2011-04-24T09:57:36.123+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3065,Improvement,Minor,2.4.0,3.0.0,"
None
",Resolved,Abandoned,3.0.0,Ashwin J. Karpe,Claus Ibsen,0,1,2010-08-19 15:07:14+00:00,2015-02-17 07:01:31+00:00,"See nabble
http://camel.465427.n5.nabble.com/netty-issue-tp2639835p2639835.html","davsclaus:1282213100:2010-08-19T18:18:20.219+0000:1282213100:2010-08-19T18:18:20.219+0000:The consumer needs to have a sync option.

So we may want to rename it to {{sendReply=true|false}} so its more obvious what it does.
Then the producer side uses the MEP of the Exchange to decide if it should wait for a reply or not. So the option only apply for the consumer.
davsclaus:1282453551:2010-08-22T13:05:51.563+0000:1282453551:2010-08-22T13:05:51.563+0000:However the sync option was inspired from the camel-mina component which has this option.
akarpe:1283340932:2010-09-01T19:35:32.298+0000:1283341292:2010-09-01T19:41:32.629+0000:Hi Claus,

I have fixed this rather straightforward issue and attached a diff file for your review.

It is a very simple change for changing sync to sendReply along with its getter/setter. I did have to fix a whole lot of tests along with some netty classes that looked up sync to use sendReply instead of sync.

Can you please let me know what you think. I will check it in following your +1.

Cheers,

Ashwin...
hadrian:1283346861:2010-09-01T21:14:21.910+0000:1283357171:2010-09-02T00:06:11.260+0000:@Ashwin, 
Thanks for the patch, it is indeed straightforward. Two comments though:
1. i think {{sendReply}} is equally confusing (in a different way) and my preference would be {{inOut}}. Since this is what happens anyway, the exchange will be InOut, it is imho clearer what the semantics of this option is. Or, if you want, you can have it as a String instead of boolean and call it {{mep}} (better then just {{pattern}} I guess, with possible values inOnly or inOut with the former being the default). 
2. You are now a committer, so please free to commit the code unless you have doubts in which case attaching a patch or adding a link to a git branch is ok. I doubt you had doubts in this case :).

One more thing. I am not sure if this is necessary, camel-netty being fairly new, but if you want to just deprecate @sync, you can mark isSync() and setSync as @deprecated and have them get/set {{inOut}} (assuming you will use that instead of {{sendReply}}).
davsclaus:1283371884:2010-09-02T04:11:24.785+0000:1283371884:2010-09-02T04:11:24.785+0000:Actually I think we should change this for Camel 3.0, to keep the old behavior in the 2.x.
Because both camel-netty and camel-mina have the {{sync}} option.

In Camel 3.0 we can change that to check the MEP of the Exchange being InOut and then automatic expect a reply.
Hence I would like to wait with this for Camel 3.0, and also update camel-mina as well.
akarpe:1283405332:2010-09-02T13:28:52.012+0000:1283405332:2010-09-02T13:28:52.012+0000:Hi Hadrian & Claus,

I will change the code to use inOut instead of sendReply. I will attach and commit a fresh patch.

Claus, would you rather this fix go in 3.x or would you prefer that I mark sync as deprecated and introduce a new inOut as an option. This will not break anybody in 2.x but will create the necessary capability for future adopters.

Please let me know.

Cheers,

Ashwin...   
davsclaus:1283406499:2010-09-02T13:48:19.851+0000:1283406499:2010-09-02T13:48:19.851+0000:Ashwin the patch will affect current logic, as they don't consider the MEP at all.

So we should wait until Camel 3.0 to change this. Then we can alter both camel-netty and camel-mina to use the new behavior.

davsclaus:1283406532:2010-09-02T13:48:52.765+0000:1283406532:2010-09-02T13:48:52.765+0000:Do the same fix on camel-mina as well, when implement this ticket.
akarpe:1283407150:2010-09-02T13:59:10.635+0000:1283407150:2010-09-02T13:59:10.635+0000:Sure Claus.

I will make this fix on Netty and Mina in version 3.0.

Cheers,

Ashwin...
davsclaus:1424127691:2015-02-17T07:01:31.215+0000:1424127691:2015-02-17T07:01:31.215+0000:Lets keep as-is"
0,CAMEL-3064,Bug,Major,1.6.3,1.6.4,"
None
",Closed,Fixed,1.6.4,Claus Ibsen,Claus Ibsen,0,0,2010-08-19 14:03:53+00:00,2011-01-17 16:50:49+00:00,We should use try .. catch to catch custom exceptions being thrown from AggregationStrategy,"davsclaus:1282200374:2010-08-19T14:46:14.735+0000:1282200374:2010-08-19T14:46:14.735+0000:trunk: 987166.

This issue only applies for 1.x.
davsclaus:1295254249:2011-01-17T16:50:49.743+0000:1295254249:2011-01-17T16:50:49.743+0000:Closing all 1.x tickets"
0,CAMEL-3063,Improvement,Trivial,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Daniel Bevenius,0,0,2010-08-19 09:43:58+00:00,2011-04-24 09:57:40+00:00,"While creating an example for the Camel-Smooks integration I wanted to be able to specify the directory that a FileConsumer will read from as the current working directory. I was not able to specify this as with out modifying FileEndpoint as described in the patch attached to this jira. 
This is what I'd like to be able to do:
<route>
	<from uri=""file:.?fileName=input-message.edi&noop=true""/>
	<log message=""Before unmarshal  ${body}""/>
	<unmarshal ref=""smooks""/>
	...
</route>","davsclaus:1282187062:2010-08-19T11:04:22.637+0000:1282187062:2010-08-19T11:04:22.637+0000:trunk: 987124.

Thanks Daniel for the patch. I have applied it to trunk.
davsclaus:1303610260:2011-04-24T09:57:40.751+0000:1303610260:2011-04-24T09:57:40.751+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3062,Improvement,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-19 09:40:29+00:00,2011-04-24 09:58:02+00:00,"As ActiveMQ 5.4.0 is released, we could use it for the camel daily test.",davsclaus:1303610282:2011-04-24T09:58:02.548+0000:1303610282:2011-04-24T09:58:02.548+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3061,Improvement,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Christian Müller,0,0,2010-08-18 21:41:43+00:00,2011-04-24 09:57:06+00:00,"It's not possible to write the following route:



from(""direct:saveOrderInDB"")
.transacted(""PROPAGATION_REQUIRES_NEW"")
.onException(UpdateException.class, InsertException.class)
.markRollbackOnlyLast().end()
.beanRef(""orderDAO"", ""updateOrInsertOrder"");




You have to specify the route in the following way:



from(""direct:saveOrderInDB"")
.transacted(""PROPAGATION_REQUIRES_NEW"")
.onException(InsertException.class)
.onException(UpdateException.class)
.markRollbackOnlyLast().end()
.beanRef(""orderDAO"", ""updateOrInsertOrder"");




But if you use a global onException() definition, you can write:



.onException(UpdateException.class, InsertException.class)
.markRollbackOnlyLast()
...




Should we add this missing method?","davsclaus:1282184671:2010-08-19T10:24:31.999+0000:1282184671:2010-08-19T10:24:31.999+0000:Yeah Christian please add that method
davsclaus:1282713625:2010-08-25T13:20:25.706+0000:1282713625:2010-08-25T13:20:25.706+0000:trunk: 989092.
davsclaus:1303610226:2011-04-24T09:57:06.302+0000:1303610226:2011-04-24T09:57:06.302+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3060,Bug,Minor,2.3.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Vid Cheruvu,0,0,2010-08-18 13:52:41+00:00,2011-04-24 09:57:13+00:00,"Camel-File component throws heap memory issue when processing csv file which is about 45MB with 218k Lines. 


http://camel.465427.n5.nabble.com/Java-heap-space-issue-with-reading-large-CSV-file-tt2638903.html#a2638903","davsclaus:1282160840:2010-08-19T03:47:20.454+0000:1282160840:2010-08-19T03:47:20.454+0000:trunk: 987008.
davsclaus:1303610233:2011-04-24T09:57:13.366+0000:1303610233:2011-04-24T09:57:13.366+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3059,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Chris Nelson,0,0,2010-08-17 19:28:53+00:00,2011-04-24 09:57:48+00:00,"I am trying to create an HTTP proxy that will support mulitpart requests. I was hoping I could do something like below, but the attachments do not get sent out. The attachments are parsed by the Jetty MultiPart filter and put into the in message, but they do not get sent out by the HTTP client.


from(""jetty:http://xxx?bridgeEndpoint=true"").to(""http://xxx?bridgeEndpoint=true"");


To workaround this problem, I modified the JettyHttpComponent and JettyHttpEndpoint classes to use a new enableMultipartFilter flag. If this is set to false it will not enable the Jetty multipart filter, and thus the entire request will be proxied through. In the case of the bridgeEndpoint it seems like this should be the default, but I wasn't sure what else this might break. I have attached patches against the 2.5.0 codebase for these two classes and a test case that shows how it can be used. In the test case you will notice I have to override the the outbound filter strategy so that it passes the original headers (i.e. content type). Again this seems like something that would be the default for the bridged endpoint.","njiang:1282273641:2010-08-20T11:07:21.338+0000:1282273641:2010-08-20T11:07:21.338+0000:Applied patch with thanks to Chris.
davsclaus:1282786955:2010-08-26T09:42:35.917+0000:1282786955:2010-08-26T09:42:35.917+0000:Willem remember to update the wiki documentation of camel-jetty with the new {{enableMultipartFilter}} option
davsclaus:1282793870:2010-08-26T11:37:50.028+0000:1282793870:2010-08-26T11:37:50.028+0000:I have updated the wiki page
njiang:1282796259:2010-08-26T12:17:39.436+0000:1282796259:2010-08-26T12:17:39.436+0000:Thanks Claus for doing it.
davsclaus:1303610268:2011-04-24T09:57:48.990+0000:1303610268:2011-04-24T09:57:48.990+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3058,Task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-17 09:33:27+00:00,2011-04-24 09:57:56+00:00,"As CXF 2.2.10 is released recently, we should use the released version instead of the SNAPSHOT one.","davsclaus:1282454050:2010-08-22T13:14:10.153+0000:1282454050:2010-08-22T13:14:10.153+0000:Willem in the parent/pom.xml there is this osgi version stuff
{code}
org.apache.cxf.*;version=""[2.2.9,3)""
{code}

I wonder if we should bump this to 2.2.10 due that async routing change?
njiang:1282497383:2010-08-23T01:16:23.416+0000:1282497383:2010-08-23T01:16:23.416+0000:Done.
Thanks for pointing that out.
davsclaus:1303610276:2011-04-24T09:57:56.539+0000:1303610276:2011-04-24T09:57:56.539+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3057,Improvement,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,1,0,2010-08-17 09:31:57+00:00,2011-04-24 09:58:24+00:00,"Here is a mail thread which discusses about it.
http://camel.465427.n5.nabble.com/camel-cxfrs-with-custom-http-headers-tp2636965p2636965.html","njiang:1282160291:2010-08-19T03:38:11.536+0000:1282160291:2010-08-19T03:38:11.536+0000:Applied the patch into camel trunk.
davsclaus:1303610304:2011-04-24T09:58:24.840+0000:1303610304:2011-04-24T09:58:24.840+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3056,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Drew Varner,0,0,2010-08-14 12:49:37+00:00,2011-04-24 09:57:17+00:00,"The documentation for the Mail component (http://camel.apache.org/mail.html) indicates that the dummyTrustManager option will allow you to skip over the certificate check. Using that option in a Mail component's URI results in:



Caused by: java.io.IOException: Couldn't connect using SSL socket factory class null to host, port: my.email.server.com, -1; Exception: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory
	at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:216)
	at com.sun.mail.iap.Protocol.<init>(Protocol.java:109)
	at com.sun.mail.imap.protocol.IMAPProtocol.<init>(IMAPProtocol.java:104)
	at com.sun.mail.imap.IMAPStore.protocolConnect(IMAPStore.java:585)
	... 13 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.component.mail.security.DummySSLSocketFactory


This is because of a decision made in CAMEL-1215 to move it to test. I think the documentation implies that this is a tool you could use (cautiously) in the development phase, and shouldn't be restricted to the unit tests. Either way, the class needs to be moved back into camel-mail.jar or the documentation needs to remove this option.","davsclaus:1281772149:2010-08-14T15:49:09.876+0000:1281772149:2010-08-14T15:49:09.876+0000:Thanks I have updated the documentation.
https://cwiki.apache.org/confluence/display/CAMEL/Mail
davsclaus:1303610237:2011-04-24T09:57:17.982+0000:1303610237:2011-04-24T09:57:17.982+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3055,New Feature,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,William Tam,William Tam,0,0,2010-08-13 20:57:38+00:00,2011-04-24 09:57:08+00:00,camel-cxf component to support SOAP with Attachment in Payload mode,"wtam:1281704350:2010-08-13T20:59:10.116+0000:1281704350:2010-08-13T20:59:10.116+0000:Committed revision 985362.

wtam:1282035062:2010-08-17T16:51:02.973+0000:1282035062:2010-08-17T16:51:02.973+0000:svn ci -m ""[CAMEL-3055] made CxfMtomDisabledProducerPayloadModeTest more reliable by not depending on mailcap setting in the environment""
Sending        camel-cxf/src/test/java/org/apache/camel/component/cxf/mtom/CxfMtomDisabledProducerPayloadModeTest.java
Transmitting file data .
Committed revision 986392.
wtam@lenw500:~/repos/apache/camel/trunk/components/camel-cxf$ 
davsclaus:1303610228:2011-04-24T09:57:08.146+0000:1303610228:2011-04-24T09:57:08.146+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3054,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Edward Dale,0,0,2010-08-13 11:57:56+00:00,2011-04-24 09:58:25+00:00,"To allow a header to be coaxed to a certain class, a headerAs ""function"" would be useful in the Simple language. It would provide the same function as the current bodyAs.


One possible use case for this is:


simple(""${in.header.foo} > 100"")


which would fail if foo is a string. Casting it to an integer with headerAs would solve this, as would #CAMEL-3052.","davsclaus:1281680450:2010-08-13T14:20:50.008+0000:1281680450:2010-08-13T14:20:50.008+0000:trunk: 985206.
davsclaus:1303610305:2011-04-24T09:58:25.871+0000:1303610305:2011-04-24T09:58:25.871+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3023,New Feature,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,1,1,2010-08-03 14:01:22+00:00,2011-04-24 09:57:54+00:00,"If you send multiple messages to destinations you may want the multicast processor to enforce a timeout so for example if processing one message is too slow.


The Future API offers timeout support. So its a matter of exposing it in the API. Also the @RecipientList need an attribute for the timeout.
This allows to use timeouts for



multicast EIP
recipient list EIP
splitter EIP



See nabble
http://camel.465427.n5.nabble.com/recipientList-aggregationStrategy-timeout-tp2262937p2262937.html","davsclaus:1280822147:2010-08-03T15:55:47.389+0000:1280822147:2010-08-03T15:55:47.389+0000:Well the most beautiful would be to add a 2nd method on {{AggregationStrategy}} to be invoked when timeout occurred.

But this is an API break. So when a timeout occurs a dummy exchange is send in as new exchange with an {{org.apache.camel.ExchangeTimedOutException}} set as exception in the {{getException}} method.
davsclaus:1280822218:2010-08-03T15:56:58.861+0000:1280822218:2010-08-03T15:56:58.861+0000:btw we should move the {{AggregationStrategy}} to the {{org.apache.camel}} package as its a central piece of functionality also used by other EIPs.
So its a bit hidden all the way down in the {{org.apache.camel.processor.aggregate}} package.
davsclaus:1280822960:2010-08-03T16:09:20.246+0000:1280822960:2010-08-03T16:09:20.246+0000:We could add another option to indicate if we should ignore timeouts, or have them be aggregated as well.

The latter may needed so you know which one timed out etc. If ignored then Camel will skip aggregating the timed out and continue.
davsclaus:1280883015:2010-08-04T08:50:15.518+0000:1280883015:2010-08-04T08:50:15.518+0000:trunk: 982161.
davsclaus:1280884510:2010-08-04T09:15:10.820+0000:1280884510:2010-08-04T09:15:10.820+0000:Wiki documentation
https://cwiki.apache.org/confluence/display/CAMEL/Recipient+List
davsclaus:1283153026:2010-08-30T15:23:46.206+0000:1283153026:2010-08-30T15:23:46.206+0000:trunk: 990821.

Passing in original Exchange if timeout occurred an no aggregation has been done yet.
davsclaus:1303610274:2011-04-24T09:57:54.218+0000:1303610274:2011-04-24T09:57:54.218+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3022,Bug,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-08-03 13:52:03+00:00,2011-04-24 09:57:05+00:00,"CxfConsumer will try to cast the fault message body to a Throwable, if  the fault message body is any other message, it will cause some trouble like this.



java.lang.ClassCastException: javax.xml.transform.dom.DOMSource cannot be cast to java.lang.Throwable
at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:99)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
at java.util.concurrent.FutureTask.run(FutureTask.java:138)
at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:110)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
at org.mortbay.jetty.Server.handle(Server.java:322)
at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)",davsclaus:1303610225:2011-04-24T09:57:05.990+0000:1303610225:2011-04-24T09:57:05.990+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3021,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-03 13:27:59+00:00,2011-04-24 09:58:08+00:00,"from(""direct:start"").to(""restlet:http://localhost:9080/users/{id}/basic?restletMethod=get"");




The id should be subbed at runtime with the value of the id header of the Camel Message. If header is absent an exception should be thrown.
So if the id is 123 then the uri to be getted would be: http://localhost:9080/users/123/basic","davsclaus:1280813293:2010-08-03T13:28:13.699+0000:1280813293:2010-08-03T13:28:13.699+0000:See nabble
http://camel.465427.n5.nabble.com/Setting-url-params-in-REST-call-with-Camel-tp2257861p2257861.html
davsclaus:1280814894:2010-08-03T13:54:54.944+0000:1280814894:2010-08-03T13:54:54.944+0000:I have committed an unit test which shows the issue: RestletProducerTest
davsclaus:1282785907:2010-08-26T09:25:07.474+0000:1282785907:2010-08-26T09:25:07.474+0000:trunk: 989557.
davsclaus:1303610288:2011-04-24T09:58:08.786+0000:1303610288:2011-04-24T09:58:08.786+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3020,Task,Trivial,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-08-03 11:24:49+00:00,2011-04-24 09:57:05+00:00,We are using Jetty 7.1.4. but 7.1.6 has been released.,"davsclaus:1280808208:2010-08-03T12:03:28.756+0000:1280808208:2010-08-03T12:03:28.756+0000:trunk: 981830.
davsclaus:1303610225:2011-04-24T09:57:05.393+0000:1303610225:2011-04-24T09:57:05.393+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3019,New Feature,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Norman Maurer,0,2,2010-08-02 12:22:01+00:00,2011-04-24 09:57:48+00:00,Please add Blob to JMSMessageType so the activemq-jms component can easily support this.,"norman:1280724189:2010-08-02T12:43:09.004+0000:1280724189:2010-08-02T12:43:09.004+0000:This patch add the needed type. It checks if the implementation support BlobMessage and if not it throw an IllegalArgumentException once Blob is given as JmsMessageType. Beside that it make it easier to override how the body is mapped to a specific JmsMessageType to make it easier toadd BlobMessage support to the camel-activemq component
davsclaus:1280727253:2010-08-02T13:34:13.212+0000:1280727253:2010-08-02T13:34:13.212+0000:trunk: 981506.

Thanks Norman for the patch.
davsclaus:1303610268:2011-04-24T09:57:48.711+0000:1303610268:2011-04-24T09:57:48.711+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3018,Bug,Major,None,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Norman Maurer,0,0,2010-08-02 11:49:46+00:00,2011-04-24 09:57:50+00:00,"maven3 is a way stricter with duplicated specified dependencies, so its not possible to compile camel with it.","norman:1280721015:2010-08-02T11:50:15.495+0000:1280721015:2010-08-02T11:50:15.495+0000:This patch fix it
davsclaus:1280724902:2010-08-02T12:55:02.678+0000:1280724902:2010-08-02T12:55:02.678+0000:trunk: 981492.

Thanks Norman for the patch. I have applied it to trunk.
danielbevenius:1282787929:2010-08-26T09:58:49.253+0000:1282787929:2010-08-26T09:58:49.253+0000:I'm having issues when using maven3 as well. I get the following;

c-dc9ee055:camel-web danbev$ mvn clean install
[INFO] Scanning for projects...
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel-parent:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from java.net.m2
[INFO] snapshot org.apache.camel:camel:2.5-SNAPSHOT: checking for updates from fusesource.snapshots
[ERROR] The build could not read 1 project -> [Help 1]
[ERROR]   The project org.apache.camel:camel-web:2.5-SNAPSHOT (/Users/danbev/work/apache/camel/trunk/components/camel-web/pom.xml) has 1 error
[ERROR]     'repositories.repository.id' must be unique: glassfish-repo-archive -> http://maven.glassfish.org/content/groups/glassfish vs http://maven.glassfish.org/content/groups/glassfish
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException

There is indeed a duplicate in components/web/pom.xml (pom.patch attached). 

Using the patch I'm able to build but I get failures during the test phase which I'm looking into at the moment. 



danielbevenius:1282788062:2010-08-26T10:01:02.876+0000:1282788062:2010-08-26T10:01:02.876+0000:patch for components/camel-web/pom.xml
davsclaus:1282793179:2010-08-26T11:26:19.560+0000:1282793179:2010-08-26T11:26:19.560+0000:Daniel you have to attached the file with copyright assigned to Apache. eg there must be this apache feather logo on the attached file.
danielbevenius:1282793574:2010-08-26T11:32:54.363+0000:1282793574:2010-08-26T11:32:54.363+0000:Checked the wrong box when attaching previously.
davsclaus:1282794142:2010-08-26T11:42:22.297+0000:1282794142:2010-08-26T11:42:22.297+0000:Thanks Daniel. I have applied the patch to trunk: 989608.
danielbevenius:1282880348:2010-08-27T11:39:08.128+0000:1282880348:2010-08-27T11:39:08.128+0000:Sorry about adding comments this jira but I found another issue...
Problem
=======
Running 'mvn eclipse:eclipse' using maven3 causes the following build failure:
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.220s
[INFO] Finished at: Fri Aug 27 12:25:55 CEST 2010
[INFO] Final Memory: 59M/117M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-eclipse-plugin:2.9-SNAPSHOT:eclipse (default-cli) on project camel-core: Unable to resolve resource location: /camel-eclipse-checkstyle -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-core


When running with maven2 these are the dependencies for the maven-eclipse-plugin:
[DEBUG] Plugin dependencies for:

org.apache.maven.plugins:maven-eclipse-plugin:2.5.1

are:

org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile
org.codehaus.plexus:plexus-archiver:jar:1.0-alpha-7:runtime
org.apache.maven:maven-project:jar:2.0.8:runtime
org.apache.maven:maven-plugin-api:jar:2.0.8:runtime
org.apache.maven:maven-model:jar:2.0.8:runtime
org.apache.maven:maven-artifact-manager:jar:2.0.8:runtime
org.apache.maven:maven-artifact:jar:2.0.8:runtime
org.codehaus.plexus:plexus-utils:jar:1.4.5:runtime
org.codehaus.plexus:plexus-interactivity-jline:jar:1.0-alpha-5:runtime
org.apache.maven:maven-archiver:jar:2.2:runtime
org.codehaus.plexus:plexus-resources:jar:1.0-alpha-4:runtime
biz.aQute:bndlib:jar:0.0.145:runtime
org.apache.maven.shared:maven-osgi:jar:0.2.0:runtime
org.eclipse.core:resources:jar:3.3.0-v20070604:runtime

Notice how 'org.apache.camel:camel-buildtools:jar:2.5-SNAPSHOT:compile' in the list above. This the jar that camel-eclipse-checkstyle is in but when running with maven3 it is not. 
I've added 'camel-buildtools' as a dependency to the eclipse-maven-plugin in parent/pom.xml (attached pom.patch) and this then worked for both maven2 and maven3.

danielbevenius:1282880396:2010-08-27T11:39:56.995+0000:1282880396:2010-08-27T11:39:56.995+0000:Patch for parent/pom.xml
davsclaus:1282880800:2010-08-27T11:46:40.563+0000:1282880800:2010-08-27T11:46:40.563+0000:why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse? Would make more sense as maintaining the eclipse stuff is done by Eclipse itself and not from eg Camel.


njiang:1282881507:2010-08-27T11:58:27.264+0000:1282881507:2010-08-27T11:58:27.264+0000:@Claus,
The eclipse plugin needs to set up the checkstyle configure on the eclipse project, and the checkstyle file is part of camel-buildtools.
I think it make sense to add this module dependency on the parent pom.

danielbevenius:1282881635:2010-08-27T12:00:35.537+0000:1282881635:2010-08-27T12:00:35.537+0000:> why is mvn eclipse:eclipse needed? Can't you just open a pom.xml from Eclipse?
Old habit :) I'll try that instead. Thanks
davsclaus:1282882603:2010-08-27T12:16:43.167+0000:1282882603:2010-08-27T12:16:43.167+0000:Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file. 

I will apply the patch. But first I give it a run on my maven 2.2.1.

danielbevenius:1282883627:2010-08-27T12:33:47.423+0000:1282883627:2010-08-27T12:33:47.423+0000:>Daniel let us know if Eclipse got smart and is capable of loading a pom.xml file.
Worked like a charm. Thanks!
davsclaus:1282885831:2010-08-27T13:10:31.437+0000:1282885831:2010-08-27T13:10:31.437+0000:Applied patch to trunk: 990132
davsclaus:1303610270:2011-04-24T09:57:50.815+0000:1303610270:2011-04-24T09:57:50.815+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3017,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Not A Problem,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-30 15:25:30+00:00,2011-04-24 09:58:02+00:00,"See nabble
http://old.nabble.com/SecurityException-not-delegated-to-Camel--td29305408.html#a29305408


This test from AMQ shows some pieces to setup AMQ with security we can use in camel-jms to setup such a scenario
org.apache.activemq.security.SimpleSecurityBrokerSystemTest","davsclaus:1280797633:2010-08-03T09:07:13.865+0000:1280797633:2010-08-03T09:07:13.865+0000:The unit test is here
https://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/security/SimpleSecurityBrokerSystemTest.java
davsclaus:1280811570:2010-08-03T12:59:30.226+0000:1280811570:2010-08-03T12:59:30.226+0000:See this unit test: JmsToJmsTransactedSecurityTest

You need to use sync send to be able to catch security exceptions when sending.
davsclaus:1303610282:2011-04-24T09:58:02.998+0000:1303610282:2011-04-24T09:58:02.998+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3016,New Feature,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-30 13:45:30+00:00,2011-04-24 09:57:39+00:00,"To make it easier to suspend a route, as you would have to do this on its consumer.


If you invoke stop on the route, it will unload processors and clear JMX stats and whatnot. So having a suspend/resume is more gentle.","davsclaus:1280474391:2010-07-30T15:19:51.218+0000:1280474391:2010-07-30T15:19:51.218+0000:The shutdown operation in JMX should not unregister JMX Mbeans. Then after you have used it the route is gone :)

In fact we should let MBean unregister in a special method. Then end user can chose this if they want the JMX stuff gone.
And then CamelContext can just unregister the MBean at the end, which is does by default.
davsclaus:1280624564:2010-08-01T09:02:44.335+0000:1280624564:2010-08-01T09:02:44.335+0000:trunk: 981180.

Work in progress
davsclaus:1280625617:2010-08-01T09:20:17.802+0000:1280625617:2010-08-01T09:20:17.802+0000:trunk: 981184.

Added operations to JMX to suspend/resume a route mbean
davsclaus:1280701345:2010-08-02T06:22:25.289+0000:1280701345:2010-08-02T06:22:25.289+0000:We should enforce a route must be stopped before you can shutdown and remove it, as a fail safe.
davsclaus:1280703084:2010-08-02T06:51:24.033+0000:1280703084:2010-08-02T06:51:24.033+0000:trunk: 981382.

Improved stop route to use graceful shutdown
Only routes which support suspension is suspended, if not it will fallback to start/stop the route.

davsclaus:1280707571:2010-08-02T08:06:11.772+0000:1280707571:2010-08-02T08:06:11.772+0000:Lifecycle operations in JMX not check state before use

trunk: 981401.
davsclaus:1303610259:2011-04-24T09:57:39.776+0000:1303610259:2011-04-24T09:57:39.776+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3015,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-30 09:21:09+00:00,2011-04-24 09:57:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/Mail-component-velocity-and-NullpointerException-td2256742.html#a2259340


This ensure the mail message is kept and we can do commit/rollback without impact of mail message being lost during the routing","davsclaus:1280454409:2010-07-30T09:46:49.262+0000:1280454409:2010-07-30T09:46:49.262+0000:trunk: 980707.
davsclaus:1303610261:2011-04-24T09:57:41.270+0000:1303610261:2011-04-24T09:57:41.270+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3014,Improvement,Major,None,None,"
None
",Closed,Fixed,"1.6.4, 2.5.0",Willem Jiang,Willem Jiang,0,0,2010-07-30 02:23:48+00:00,2011-01-17 16:50:49+00:00,Here is the mail thread which discusses about it.,davsclaus:1295254249:2011-01-17T16:50:49.362+0000:1295254249:2011-01-17T16:50:49.362+0000:Closing all 1.x tickets
0,CAMEL-3013,Improvement,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-29 12:10:28+00:00,2011-04-24 09:57:34+00:00,Also need to merge this change into camel-http4.,davsclaus:1303610254:2011-04-24T09:57:34.256+0000:1303610254:2011-04-24T09:57:34.256+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3012,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-29 10:53:02+00:00,2011-04-24 09:57:30+00:00,"CamelContext should support 2 kind of restarts



start/stop = cold. where stop will shutdown camel and release all resources. so when you start again its starting from scratch.
suspend/resume = warm. the resources and state will be kept as is. its the routes which are suspended.



The current implementation of start/stop is flawed. The stop will release all resources, but the routes are still warm which causes a mix of warm/cold restart when start is invoked.","davsclaus:1280381433:2010-07-29T13:30:33.357+0000:1280381433:2010-07-29T13:30:33.357+0000:trunk: 980445.

event notifications is emitted now
davsclaus:1280451355:2010-07-30T08:55:55.502+0000:1280451355:2010-07-30T08:55:55.502+0000:trunk: 980685.

See wiki page
https://cwiki.apache.org/confluence/display/CAMEL/CamelContext
davsclaus:1303610250:2011-04-24T09:57:30.388+0000:1303610250:2011-04-24T09:57:30.388+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3011,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-29 10:03:58+00:00,2011-04-24 09:58:25+00:00,"The default will by default only register the first CamelContext. Which is used in non statefull jobs to lookup endpoints etc.


Instead the camel-quartz component should keep track of all the different camel contexts and use the id of the context on the job so it can lookup the context.","davsclaus:1280369418:2010-07-29T10:10:18.729+0000:1280369418:2010-07-29T10:10:18.729+0000:trunk: 980386.

Also fixed potential issue with restarting/resuming a route which adds a job premature and causing the job to fire before the route has been fully started. Now adding jobs is deferred.
davsclaus:1280369489:2010-07-29T10:11:29.316+0000:1280369489:2010-07-29T10:11:29.316+0000:For example you could have multiple camel contexts running and suspend one of them, this means the scheduler is still started and active for the other camel context. Now resuming the first context will re-add the job to the scheduler. Which must be deferred so the route is fully started, so when the job is triggered it has a fully started route to process.
davsclaus:1303610305:2011-04-24T09:58:25.261+0000:1303610305:2011-04-24T09:58:25.261+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3010,Improvement,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-29 10:03:39+00:00,2011-04-24 09:57:55+00:00,As we update the spring version and changed apache-camel lib structure since Camel 2.4.0. we need to update the common-build.xml file for it.,davsclaus:1303610275:2011-04-24T09:57:55.327+0000:1303610275:2011-04-24T09:57:55.327+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3009,New Feature,Minor,2.4.0,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Claus Ibsen,1,0,2010-07-29 08:12:39+00:00,2011-04-24 09:57:05+00:00,"Quartz scheduler may by default try to catch up if a quartz consumer has been stopped for a while.


Then when its started it may trigger a series of jobs due they were supposed to be triggered if the consumer has been always running.
We should make it easy to configure an option to tell Camel to ignore those jobs.


For example if you have a trigger to run every 5th second. And you pause a consumer for 2 hours. You may not want quartz to fire 12 * 60 * 2 jobs when its started to catch up for those 2 hours.


Quartz itself may have an option you can configure on the job but it may not be obviously how to do this.","boday:1282511413:2010-08-23T05:10:13.677+0000:1282511413:2010-08-23T05:10:13.677+0000:I've been looking into this a bit.  I thought I could simply use Quartz's misfire modes (via ""trigger.misfireInstruction"" parameter) to get the desired behavior, but I couldn't get it to work for this case (I'll log this separately).

So, here is a first pass at adding support for this.  I added a parameter to the Quartz endpoint definition called ""skipMissedJobs"".  When set to ""true"", the endpoint is configured to only execute the last missed run of a job (prior runs are skipped entirely)...  

Some more investigation/advanced tests are necessary.  I've attached a preliminary patch for comments before taking it any further...
davsclaus:1282714755:2010-08-25T13:39:15.394+0000:1282714755:2010-08-25T13:39:15.394+0000:Yeah I would have though quartz had a nice option for this as well. Especially when you pause the jobs.

But I also think having a simple option in camel-quartz makes it much easier for end users, which may not dig deep into the many quartz options and instructions it provides.

I would argue that the skipMissedJobs should skip all past jobs. And hence only execute any jobs which triggers in the future from when the endpoint was resumed again.
boday:1282717963:2010-08-25T14:32:43.014+0000:1282717963:2010-08-25T14:32:43.014+0000:The issue with skipping all delayed jobs, is that if a job is delayed by just a few millis (because of high system load, etc), then it would be skipped.  If we wanted to go this route, then we'd have to set a threshold and allow the user to specify this as well (i.e. skip any jobs delayed by more than X millis, etc). 

Instead, my approach protects against this by only preventing multiple delayed jobs from running back-to-back.  So, it will always run a delayed job no matter how long it was delayed, but will never run the job multiple times just to catch up, etc.  If we choose this approach, perhaps there is a better name for the parameter to make this clear (""runOnlyLastMissedJob"", etc). 

Either way, I'm still confused why I can't get Quart's ""trigger.misfireInstruction"" parameters to work because I don't want to reinvent the wheel.  I was hoping someone from the Camel team had some insight on this.  I noticed that there weren't any unit tests for the trigger misfire modes.  I can try to add a few unit tests to prove this out a bit if we think its worthwhile...let me know.

davsclaus:1282798032:2010-08-26T12:47:12.932+0000:1282798032:2010-08-26T12:47:12.932+0000:The problem with keep the last misfired is that what if you have a cron which should trigger at noon every wednesday.

Then you suspend the Camel app (with this quartz job) on monday, and resume it on friday. Then you may not want the misfired job to trigger asap, but instead wait for next wednesday to fire.

So at least there should be an option to select the strategy. For example we could introduce an enum with the choices such as:

{{onResumeRunMissedJobs}}
- none
- onlyLast
- all

boday:1282923973:2010-08-27T23:46:13.481+0000:1282923973:2010-08-27T23:46:13.481+0000:I ran into an issue with skipping all missed jobs.  This is because a job's scheduledFireTime is ALWAYS before the current time.  This difference is usually just a few millis, but can be much longer depending on system load.  So, unless I assume an allowable delay to account for this, every run looks like a delayed job...  

So, I settled on a simpler solution for now.  The attached patch just adds a ""maxTimeDelay"" attribute to skip jobs that have been delayed by more than a specified value (in millis).  When a context/route is suspended/resumed, only the jobs that have been delayed less than the maxTimeDelay will be executed.  This should handle the majority of cases for long delays and prevent multiple ""catch up"" jobs from running.  

Some examples,

trigger every 5s with maxTimeDelay=2000 (ms)
consumer is paused for 2 hours
at most, a single ""catch up"" job will execute

trigger every Wed at noon, maxTimeDelay=60000
consumer paused on Tuesday, resumes on Thursday
missed job is skipped, next job will run the following Wed at noon

The one remaining case is where you want the delayed job to run (regardless of the delay), but only once.  This was my original patch, but seems less useful (and more confusing) than just specifying the max allowed delay.  If you think this mode is still valuable, let me know and I can add this back in as well...


hadrian:1282967574:2010-08-28T11:52:54.879+0000:1282967574:2010-08-28T11:52:54.879+0000:I wonder if this option is really needed. I think camel can infer the needed info.

Storing the timestamp of the last start or resume allows camel to know if the last job should have been executed and should not skip missed jobs because of milliseconds (or longer delays). If it doesn't behave like this it should be fixed. This should sort out your issue with skipping all missed job.

The second issue that refers to how many past jobs to rerun, imho is a non issue, because the value of your cron trigger is application dependent and you have the option of keeping camel active or paused. (I'll take a look at trigger.misfireInstruction too).

Personally I prefer to keep the camel interface as simple as possible.

hadrian:1283021740:2010-08-29T02:55:40.518+0000:1283021740:2010-08-29T02:55:40.518+0000:@Ben, what was the problem you hit to get the misfireInstruction to work? From looking at it a bit today, it looks like it would satisfy your requirement. Is that correct?
boday:1283085675:2010-08-29T20:41:15.557+0000:1283085675:2010-08-29T20:41:15.557+0000:Hadrian/Claus, 

I found out why I couldn't get the trigger.misfireInstruction modes to work.  There is a property called ""org.quartz.jobStore.misfireThreshold"" which defaults to 60s.  This is used to determine is a job is marked as ""misfired""...by default, this happens only if the job is 60s behind.  My unit tests were never reaching this threshold, so the misfire logic never kicked-in and all jobs just ran immediately when resumed.  I changed this threshold to 1s and my test now behaves appropriately (no catchup jobs, etc).

So, I think the misfire handling works as desired for all jobs that are more than 60s late (or less if configured explicitly)...no patch required.

davsclaus:1283142448:2010-08-30T12:27:28.689+0000:1283142536:2010-08-30T12:28:56.451+0000:Thanks Ben for reporting back.

Yeah the {{org.quartz.jobStore.misfireThreshold}} option is to configure this. However Quartz doesn't have a nice API to set that from Java API.
Getting the JobStore is not easy and the SPI interface doesn't expose this setter. Its only avail on specialized JobStore instances and whatnot.

So end users most often have to use a quartz.properties file to configure it and have the Camel Quartz Component pickup this quartz.properties file.
But that's the standard way with Quartz, so let's keep it as is.
davsclaus:1303610225:2011-04-24T09:57:05.854+0000:1303610225:2011-04-24T09:57:05.854+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3008,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-29 04:03:16+00:00,2011-04-24 09:58:26+00:00,"I recall some user saying something about JMX appears to not be loaded if he has autoStartup=false on the CamelContext.
It should only be the routes which are not started. The other stuff should start.


You may need to use JMX to start the routes there after","davsclaus:1280473875:2010-07-30T15:11:15.305+0000:1280473875:2010-07-30T15:11:15.305+0000:trunk: 980821.
davsclaus:1303610306:2011-04-24T09:58:26.620+0000:1303610306:2011-04-24T09:58:26.620+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3007,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-29 04:01:07+00:00,2011-04-24 09:57:57+00:00,"If a route is adding after CamelContext has been started, then it's autoStartup flag should be honored. In case the flag is autoStartup=false, the route should not be auto started.","davsclaus:1280347289:2010-07-29T04:01:29.140+0000:1280347289:2010-07-29T04:01:29.140+0000:See nabble
http://camel.465427.n5.nabble.com/Auto-Start-up-issue-when-adding-RouteDefintions-tp2256671p2256671.html
davsclaus:1280347450:2010-07-29T04:04:10.805+0000:1280347450:2010-07-29T04:04:10.805+0000:Also routes loaded form XML stream may have to have it prepared before it can be added as a route. e.g. setting parent, onException etc. like we do for camel-spring.
davsclaus:1280895091:2010-08-04T12:11:31.046+0000:1280895091:2010-08-04T12:11:31.046+0000:trunk: 982228.
davsclaus:1303610277:2011-04-24T09:57:57.115+0000:1303610277:2011-04-24T09:57:57.115+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3006,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-29 03:45:34+00:00,2011-04-24 09:57:41+00:00,No Desc,davsclaus:1303610261:2011-04-24T09:57:41.168+0000:1303610261:2011-04-24T09:57:41.168+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-3005,Sub-task,Major,None,None,"
None
",Closed,Fixed,None,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-07-28 22:38:11+00:00,2011-04-24 09:58:13+00:00,No Desc,"njiang:1280346098:2010-07-29T03:41:38.925+0000:1280346098:2010-07-29T03:41:38.925+0000:Shiro is not osgi ready, we need to wrap it into servicemix bundle.

davsclaus:1280347087:2010-07-29T03:58:07.342+0000:1280347087:2010-07-29T03:58:07.342+0000:Willem maybe we could work with Les to make Shiro OSGi bundle out of the box?
akarpe:1281360785:2010-08-09T21:33:05.172+0000:1281360785:2010-08-09T21:33:05.172+0000:Hi Willem and Claus,

Is this currently being worked out with Les@Shiro. 

For now, I will create a Servicemix patch using the OPS4J wrap plugin which could of course be modified at a later point. If this is in progress and will be resolved in the next couple of days, I am willing to wait...

Cheers,

Ashwin...
davsclaus:1281394338:2010-08-10T06:52:18.779+0000:1281394338:2010-08-10T06:52:18.779+0000:I think willem created a wrapped osgi bundle and an unit test for it in camel-itest-osgi.
Willem is this correct?
njiang:1281395229:2010-08-10T07:07:09.046+0000:1281395229:2010-08-10T07:07:09.046+0000:@Claus
Yes, you are right.

As Shiro has no other third party dependency, you can use the wrap url in you feature file, and OPS4J URL will take care of it.
When the Shiro release OSGi bundle ,we can replace it with a real bundle :)

akarpe:1282132213:2010-08-18T19:50:13.021+0000:1282132213:2010-08-18T19:50:13.021+0000:Hi Willem and Claus,

I have created the features based on what you suggested and have used ""wrap:mvn:https://repository.apache.org/..."" to pull in the shiro core as a bundle. 

I have verified that it works and installs camel-shiro in Servicemix. I will check it in shortly.

Cheers,

Ashwin...
akarpe:1282132586:2010-08-18T19:56:26.380+0000:1282132586:2010-08-18T19:56:26.380+0000:Committed to SVN repository as revision r986892
davsclaus:1303610293:2011-04-24T09:58:13.369+0000:1303610293:2011-04-24T09:58:13.369+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3004,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-07-28 22:36:12+00:00,2011-04-24 09:57:27+00:00,Write Documentation for the Shiro Security Component on the Camel Wiki,"akarpe:1280638141:2010-08-01T12:49:01.251+0000:1280638175:2010-08-01T12:49:35.715+0000:Hi Claus,

I have added a page on Shiro Security but am not sure under what section I should place/classify the page. I see that Spring Security is also not listed under Components and I wonder whether this choice is intentional. 

Is the plan to have a separate page like DataFormats (for e.g Route Security) and list Spring Security and Shiro Security under this...

Can you please let me know how to proceed.

Cheers,

Ashwin...  
davsclaus:1280708021:2010-08-02T08:13:41.497+0000:1280708021:2010-08-02T08:13:41.497+0000:Yeah lets add a Security page. After all security is a major topic.

So we can have some intro on this page. And then have links to security components such as
- spring security
- shiro
- and some of the data formats which can encrypt/decrypt etc.

And links to other components who have security built in such as Jetty

Then we can add a menu item to it from the front page, so it has great exposure.
akarpe:1280737911:2010-08-02T16:31:51.914+0000:1280737911:2010-08-02T16:31:51.914+0000:Hi Claus,

I have added a security page under the Architecture section of the Camel Documentation Wiki

https://cwiki.apache.org/confluence/display/CAMEL/Security

Can you please let me know what you think. Also, I believe the recent documentation updates have not been published to the camel site, yet. Not sure whether this is due to a schedule whereby the new documentation updates are pushed to the site or whether there is another issue.

Cheers,

Ashwin... 
akarpe:1280738150:2010-08-02T16:35:50.456+0000:1280738150:2010-08-02T16:35:50.456+0000:Documentation has been added along with an additional page to provide architectural guidance and coverage for the topic of Camel Security.
 
davsclaus:1303610247:2011-04-24T09:57:27.385+0000:1303610247:2011-04-24T09:57:27.385+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3003,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-28 08:09:55+00:00,2011-04-24 09:58:25+00:00,"See nabble
http://camel.465427.n5.nabble.com/File-component-language-preMove-only-tp1843111p1843111.html


So you can pre move files, have it processed, and then the noop=true will keep the file as is.","davsclaus:1280280500:2010-07-28T09:28:20.141+0000:1280280500:2010-07-28T09:28:20.141+0000:trunk: 980003.

Also the delete option can be used together with preMove now.

And this applies for the ftp component as well.
davsclaus:1303610305:2011-04-24T09:58:25.418+0000:1303610305:2011-04-24T09:58:25.418+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3002,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,1,1,2010-07-27 16:21:35+00:00,2011-04-24 09:57:24+00:00,"The option is already there. Its just a matter of exposing it in the RecipientListDefintion and @RecipientList.


See MulticastDefinition for an example","davsclaus:1280218943:2010-07-27T16:22:23.452+0000:1280218943:2010-07-27T16:22:23.452+0000:See nabble
http://camel.465427.n5.nabble.com/recipientList-parallelProcessing-aggregationStrategy-tp2255971p2255971.html
davsclaus:1303610244:2011-04-24T09:57:24.239+0000:1303610244:2011-04-24T09:57:24.239+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3001,Bug,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,William Tam,0,0,2010-07-27 15:46:57+00:00,2011-04-24 09:57:37+00:00,"The change (r979549) made by CAMEL-2991 causes every single endpoint to be recreated instead of restarted which takes Camel a (quite big) step back.  It is bad for the following reasons:


1) recreating services associated could be expensive (the design should not assume recreating the services is cheap).
2) states (if any) in Endpoint/Service could not be preserved (stop does not mean destroy after all).   
3) it is unnecessary to recreate to the whole shebank and it is an unexpected behavior for the users.  (Users think stop but it is gone.)


In the code (DefaultCamelContext.doStartCamel()), one can clearly see the original intent of the author (who even bothered to put in a nice comment) is to avoid re-initialization the route definition after stopping the camel context.  (Well, things may change but not necessarily for the better.)



       // To avoid initiating the routeDefinitions after stopping the camel context
        if (!routeDefinitionInitiated) {
            startRouteDefinitions(routeDefinitions);
            routeDefinitionInitiated = true;
        }




But, the change simply reset the routeDefinitionInitiated flag in doStop() which is the exact opposite of the original intention and routeDefinitionInitiated is unless pretty much.","davsclaus:1280217937:2010-07-27T16:05:37.556+0000:1280217937:2010-07-27T16:05:37.556+0000:Thanks for being so cheerful.

Stopping a CamelContext means shutting it down. It's primary intent is to shutdown in a reliable and graceful manner!

A CamelContext is *not* meant to be pause and resumed on-the-fly at your will.

You can do that on the consumers, if you want to pause activity in Camel.
And some consumer is specialized for that as they are {{SuspendableService}}


davsclaus:1280297103:2010-07-28T14:05:03.425+0000:1280297116:2010-07-28T14:05:16.940+0000:I am working on adding a
- {{suspend}}
- {{resume}}

methods to {{CamelContext}}. This allows you to suspend Camel, which suspends/stops all the active routes. This ensure the other stuff is still _warm_ which makes resuming {{CamelContext}} faster as its a matter of resuming/starting the previously suspended routes.

The implication is as with graceful shutdown, the ordering of how this is done between the routes matter. So the logic need to cater for this.
davsclaus:1280365962:2010-07-29T09:12:42.339+0000:1280365962:2010-07-29T09:12:42.339+0000:trunk: 980370.

Committed suspend/resume to CamelContext to be used for hot restarts.
davsclaus:1280372080:2010-07-29T10:54:40.411+0000:1280372080:2010-07-29T10:54:40.411+0000:Created a new ticket to better name the intend.

Just from a single test I did with the CxfBeanTest
- cold restart = 1.2 sec
- warm restart = 0.2 sec
davsclaus:1303610257:2011-04-24T09:57:37.834+0000:1303610257:2011-04-24T09:57:37.834+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-3000,Improvement,Trivial,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Karl Palsson,0,0,2010-07-27 14:33:21+00:00,2011-04-24 09:58:03+00:00,"When the default shutdown kicks in, and tries to gracefully shutdown, it would be nice to know when it will finish, if at all.


Instead of showing just:  



Waiting as there are still 26 inflight and pending exchanges to complete before we can shutdown
Waiting as there are still 26 inflight and pending exchanges to complete before we can shutdown
Waiting as there are still 26 inflight and pending exchanges to complete before we can shutdown
Waiting as there are still 25 inflight and pending exchanges to complete before we can shutdown




Show something more like:



Waiting as there are still 6 inflight and pending exchanges to complete, timeout in 68 seconds
Waiting as there are still 6 inflight and pending exchanges to complete, timeout in 67 seconds
Waiting as there are still 6 inflight and pending exchanges to complete, timeout in 66 seconds
Waiting as there are still 5 inflight and pending exchanges to complete, timeout in 65 seconds","karlp:1280212495:2010-07-27T14:34:55.405+0000:1280212495:2010-07-27T14:34:55.405+0000:This is _intended_ to be granted to ASF, but I do _not_ (yet) have a CLA signed.  This is still getting held up in corporate here......
njiang:1280249859:2010-07-28T00:57:39.944+0000:1280249859:2010-07-28T00:57:39.944+0000:Hi Karl,

Thanks for you contribution, AFAIK, we don't need a CLA signed if the patch is granted with ASF license.
So I'm heading to apply your patch shortly.
njiang:1280252654:2010-07-28T01:44:14.502+0000:1280252654:2010-07-28T01:44:14.502+0000:Applied patch with thanks to Karl.
davsclaus:1303610283:2011-04-24T09:58:03.308+0000:1303610283:2011-04-24T09:58:03.308+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2999,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-27 12:33:27+00:00,2011-04-24 09:58:01+00:00,Add option directoryMustExist to configure file consumer to fail if starting directory doesn't exist. In case people don't like the autoCreate option to auto create the starting directory. For example if starting directory is to be owned by another user or something.,"davsclaus:1280206150:2010-07-27T12:49:10.093+0000:1280206150:2010-07-27T12:49:10.093+0000:We could have 2 options

{{startingDirectoryMustExist}} for the staring folder
{{directoryMustExist}} during polling, such as recursive folders

If the dir doesn't exit then an exception is thrown so monitoring can detect this and react.
davsclaus:1280267523:2010-07-28T05:52:03.341+0000:1280267523:2010-07-28T05:52:03.341+0000:trunk: 979953.
davsclaus:1280267768:2010-07-28T05:56:08.144+0000:1280267768:2010-07-28T05:56:08.144+0000:Wiki documentation

|| option || default || description
| {{startingDirectoryMustExist}} | {{false}} | *Camel 2.5:* Whether the starting directory must exist. Mind that the {{autoCreate}} option is default enabled, which means the starting directory is normally auto created if it doesn't exist. You can disable {{autoCreate}} and enable this to ensure the starting directory must exist. Will thrown an exception if the directory doesn't exist. |
| {{directoryMustExist}} | {{false}} | *Camel 2.5:* Similar to {{startingDirectoryMustExist}} but this applies during polling recursive sub directories. |


davsclaus:1303610281:2011-04-24T09:58:01.492+0000:1303610281:2011-04-24T09:58:01.492+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2998,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,0,0,2010-07-27 06:20:59+00:00,2011-04-24 09:58:12+00:00,"Endpoints is personal to a given CamelContext and should not be shared among other CamelContext's.


However when using Spring <endpoint> you can actually create endpoints which can be referred by other CamelContext.


See nabble
http://camel.465427.n5.nabble.com/Visibility-between-camel-contexts-tp2255423p2255423.html",davsclaus:1303610292:2011-04-24T09:58:12.484+0000:1303610292:2011-04-24T09:58:12.484+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2997,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-27 04:42:40+00:00,2011-04-24 09:57:46+00:00,Here is the mail thread which discusses about it.,"njiang:1280213554:2010-07-27T14:52:34.983+0000:1280213554:2010-07-27T14:52:34.983+0000:Also fix the same issue of camel-cxfrs endpoint.
davsclaus:1303610266:2011-04-24T09:57:46.077+0000:1303610266:2011-04-24T09:57:46.077+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2996,Improvement,Major,"2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Unassigned,Ilya,0,0,2010-07-26 21:56:35+00:00,2011-04-24 09:58:07+00:00,"Currently, camel-jetty will handle multi-part requests with MultiPartFilter, which will read the whole body of the request and store it in exchange. 
In our project, we'd like to implement our own handling of multi-part requests, but currently it is not possible, since there is no option to disable MultiPartFilter.","davsclaus:1282776858:2010-08-26T06:54:18.413+0000:1282776858:2010-08-26T06:54:18.413+0000:I think there is a similar/related ticket about this reported as well.
njiang:1282777602:2010-08-26T07:06:42.498+0000:1282777602:2010-08-26T07:06:42.498+0000:This issue has been resolved in CAMEL-3059
davsclaus:1303610287:2011-04-24T09:58:07.044+0000:1303610287:2011-04-24T09:58:07.044+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2995,Bug,Major,2.3.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,0,0,2010-07-26 14:21:25+00:00,2011-04-24 09:58:12+00:00,"See nabble
http://camel.465427.n5.nabble.com/issue-with-encoding-when-using-HTTP-component-td2227887.html#a2227887


I bet many systems may report charset in different ways such as



Content-Type:text/xml;charset=""utf-8"" 
Content-Type:text/xml;charset='utf-8' 
Content-Type:text/xml;charset=utf-8 




We should ensure that we support all ways of setting this. And there may also be spaces between so we should trim and whatnot.


The code in 2.4 may have been improved. Just creating a ticket to be sure.","davsclaus:1280183202:2010-07-27T06:26:42.486+0000:1280183202:2010-07-27T06:26:42.486+0000:Maybe camel-mail also have such an issue?

If possible create a util method in camel-core so it can be used in other components.
davsclaus:1303610292:2011-04-24T09:58:12.216+0000:1303610292:2011-04-24T09:58:12.216+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2994,Bug,Major,2.5.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,0,0,2010-07-26 11:21:48+00:00,2011-04-24 09:57:55+00:00,"Run the test CXFWsdlOnlyTest


Because CXF invokes the CxfClientCallback 2 times there is a race condition with 2 threads wanting to complete routing the Exchange.


You can then end up with errors such as



>>>>>>>>>
2010-07-26 13:22:13,305 [default-workqueue-1                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-1"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)
2010-07-26 13:22:13,305 [default-workqueue-2                ] INFO  Logger                         - Exchange[Message: [Body is instance of java.io.InputStream]]
Exception in thread ""default-workqueue-2"" java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:153)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:77)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:55)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2144)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)




CXF should only invoke the org.apache.cxf.endpoint.ClientCallback one time as we have only registered this once.","davsclaus:1280114559:2010-07-26T11:22:39.821+0000:1280114559:2010-07-26T11:22:39.821+0000:In the log above there is race with 2 threads
- ""default-workqueue-1""
- ""default-workqueue-2""

njiang:1280122147:2010-07-26T13:29:07.131+0000:1280122147:2010-07-26T13:29:07.131+0000:
RawMessageContentRedirectInterceptor should not close the OutputStream as it will be closed by the interceptor chain.
I just committed a patch for it.
davsclaus:1303610275:2011-04-24T09:57:55.608+0000:1303610275:2011-04-24T09:57:55.608+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2993,Improvement,Major,"2.1.0, 2.2.0, 2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Max Ullinger,1,0,2010-07-26 08:37:09+00:00,2011-04-24 09:57:26+00:00,"The camel-web allows a user to deploy and manipulate routes.


It seems currently impossible to delete routes through camel-web.
A delete operation on the route to be deleted would complete the REST interface: 
http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services
e.g.:


RouteResource.java


@Delete
    public void removeRoute() 

{
        getCamelContext().removeRouteDefinition(this.name);
    }","boday:1282140348:2010-08-18T22:05:48.746+0000:1282140348:2010-08-18T22:05:48.746+0000:This patch adds the following:

-REST support for removing a route via URI /route/<routeid>/remove
-a new column to the route list page with a link to remove a given route
-a basic unit test of this API

Let me know if you have any feedback on this approach.
davsclaus:1282211774:2010-08-19T17:56:14.161+0000:1282211774:2010-08-19T17:56:14.161+0000:trunk: 987250.

Thanks Max for the patch.
boday:1282221880:2010-08-19T20:44:40.866+0000:1282222034:2010-08-19T20:47:14.181+0000:Claus, just an FYI...I submitted that patch.  I assume it was reviewed prior to committing, but since it was my first patch, I wanted to make sure...thx


davsclaus:1282284746:2010-08-20T14:12:26.019+0000:1282284746:2010-08-20T14:12:26.019+0000:Ah thanks Ben for the patch.

I have though, maybe the remove button should only be visible when the route has been stopped first.
This ensures its a 2 way step to remove a route. 1 = stop, 2 = remove. 
This is the same way you have to do it from JMX.

For example to avoid troubles if you accidentally press the wrong button on a running route.
boday:1282287693:2010-08-20T15:01:33.753+0000:1282287693:2010-08-20T15:01:33.753+0000:sure, new patch is attached to only show the 'remove' link when the route ""is.Startable""...thanks Claus
davsclaus:1282452438:2010-08-22T12:47:18.165+0000:1282452438:2010-08-22T12:47:18.165+0000:Ben thanks for the 2nd patch. I have committed it to trunk: 987891.
davsclaus:1303610246:2011-04-24T09:57:26.816+0000:1303610246:2011-04-24T09:57:26.816+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2992,Task,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-25 10:18:33+00:00,2011-04-24 09:57:27+00:00,"It's just a hazzle to keep supporting both 1.1 and 1.0.2 API in the codebase as you need to duplicate code.


And support for 1.0.2 API has been @deprecated for a long time now.","davsclaus:1280030771:2010-07-25T12:06:11.732+0000:1280030771:2010-07-25T12:06:11.732+0000:trunk: 979027.
davsclaus:1303610247:2011-04-24T09:57:27.942+0000:1303610247:2011-04-24T09:57:27.942+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2991,Bug,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,William Tam,0,0,2010-07-25 03:02:17+00:00,2011-04-24 09:58:12+00:00,"A route that sends to a CxfBean destination is unusable after the CamelContext has been stopped and re-started.  The following is an example of a route that demonstrates the problem.



	<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
		<route>
			<from uri=""jetty:http://localhost:9000?matchOnUriPrefix=true"" />
			<to uri=""cxfbean:customerServiceBean"" />
		</route>
	</camelContext>

	<util:list id=""customerServiceBean"">
		<bean class=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />
	</util:list>




The follow issues have been identified.


1) SendProcessor should implement the Navigate interface so that its children (if they are Services) can be managed by the lifecycle methods.  This will address any destination endpoint that requires services to be re-started.


2) CxfBeanEndpoint should be a Service itself.  The reason why the start() on CxfBeanEndpoint gets called during the first start is because CxfBeanComponent.start() gets invoked during route definition initialization.   The problem is that re-starting doesn't trigger the CxfBeanComponent.start() method.  Therefore, putting the hook in CxfBeanComponent to start/stop CxfBeanEndpoint was a bug.


3) The default type converter which is a Service won't get ""re-started' as the (lazy-instantiation) getTypeConverter() method won't perform addService() on a created but ""stopped' typeConverter.  We need to discuss the correct remedy since I am not sure how to fix it.  It is kind of strange that the type converter is a service (which has the start/stop semantics) and yet it can be used even the CamelContext is stopped (or never started).  In the patch, I just set the type converter to null in DefaultCamelContext doStop() for now.","davsclaus:1280011845:2010-07-25T06:50:45.440+0000:1280011845:2010-07-25T06:50:45.440+0000:Which runtime are you using? OSGi or something else?
davsclaus:1280012024:2010-07-25T06:53:44.318+0000:1280012024:2010-07-25T06:53:44.318+0000:BTW Doing a stop/start of CamelContext is not 100% safe to be totally possible to restart.
The mantra is to create a new context instead. 
davsclaus:1280014102:2010-07-25T07:28:22.342+0000:1280014102:2010-07-25T07:28:22.342+0000:trunk: 978994.

I have fixed the issue in CamelContext to re-initialize type converter registry on restart
davsclaus:1280095375:2010-07-26T06:02:55.702+0000:1280095375:2010-07-26T06:02:55.702+0000:trunk: 979164.

a)
Endpoint is now a Service which means (#2) CxfBeanEndpoint is now also a Service.

b)
TypeConverter now check state that it's started when being used.
davsclaus:1280100697:2010-07-26T07:31:37.710+0000:1280100697:2010-07-26T07:31:37.710+0000:Hmm the logic in {{CxfBeanDestination}} is a bit peculiar

The {{active}} method is invoked when {{org.apache.cxf.endpoint.Server}} is started from {{CxfBeanEndpoint}} in the {{createServer}} method.
Then the {{active}} method will lookup a shared {{CxfBeanEndpoint}} which is stored on {{CxfBeanComponent}}.

The problem is that this shared endpoint instance will have the {{setProcessor}} invoked, which then *overrides* a previously set processor.

I don't know a good solution to this at this point. Maybe there is a bit impedance mismatch between the CXF API lifecycle and Camel's lifecycle API.
davsclaus:1280101497:2010-07-26T07:44:57.371+0000:1280101497:2010-07-26T07:44:57.371+0000:I found a problem in {{CamelDestination}} as it just creates a new {{DefaultCamelContext}}

{code}
    public CamelContext getCamelContext() {
        if (camelContext == null) {
            getLogger().log(Level.INFO, ""No CamelContext injected, create a default one"");
            camelContext = new DefaultCamelContext();
        }
        return camelContext;
    }
{code}

This is a big no no. And I have fixed the issue as the CamelContext can be obtained from the {{CxfBeanComponent}} which has the context injected.

Also there was an issue when creating a CxfConsumer and if that failed with an Exception it was just logged. Instead a FailedToCreateConsumerException should be thrown. We should fail fast in such cases.


Fixed the above issue and polished the code and javadoc

trunk: 979188.
wtam:1280130652:2010-07-26T15:50:52.065+0000:1280130652:2010-07-26T15:50:52.065+0000:@claus  I tried your fixes but my route is still unusable after CamelContext is restarted.  I attached the test case and assign to you.  Thanks for looking at it.
davsclaus:1280183016:2010-07-27T06:23:36.591+0000:1280183016:2010-07-27T06:23:36.591+0000:trunk: 979549.

I found an issue in camel-core and the test now works.
davsclaus:1303610292:2011-04-24T09:58:12.623+0000:1303610292:2011-04-24T09:58:12.623+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2990,Sub-task,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-24 06:07:44+00:00,2011-04-24 09:57:19+00:00,See parent ticket,"davsclaus:1280022509:2010-07-25T09:48:29.451+0000:1280022509:2010-07-25T09:48:29.451+0000:trunk: 979012.

Added new option {{throwExceptionOnConnectFailed}}

See the unit test - FtpConsumerThrowExceptionOnLoginFailedTest
davsclaus:1303610239:2011-04-24T09:57:19.160+0000:1303610239:2011-04-24T09:57:19.160+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2989,New Feature,Major,2.4.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Unassigned,James Strachan,0,2,2010-07-23 13:35:17+00:00,2013-05-24 09:48:16+00:00,"many components like file, activemq, nmr, jbi, database all are capable of browsing the available endpoints that a user could use from, say, a command line tool or from camel-web.


So we should add a browse API that lets you query a component for available endpoints.


Maybe allow things to be browsed in a tree kind of way - maybe with a text search type thing (for completion boxes etc)","boday:1295375256:2011-01-19T02:27:36.269+0000:1295375256:2011-01-19T02:27:36.269+0000:hey James, I started looking into adding to camel-web's endpoints page.  Any reason we couldn't use the CamelContext getEndpointMap() API for this?  Something like this could return all endpoints matching a given pattern (component prefix, etc.)...

        //find all file endpoints
        String filter = ""file:"";
        Map<String, Endpoint> map = this.context.getEndpointMap();
        Set<Map.Entry<String, Endpoint>> entries = map.entrySet();
        ArrayList<String> matches = new ArrayList<String>();
        for (Map.Entry<String, Endpoint> entry : entries) {
            if(entry.getKey().indexOf(filter) != -1) {
                matches.add(entry.getKey());
            }
        }        
        System.out.println(""matches->"" + matches);

davsclaus:1295475422:2011-01-20T06:17:02.505+0000:1295475490:2011-01-20T06:18:10.601+0000:Ben the idea is much more complicated :)

James want the component to discover the _possibilities_. For example a file component, should traverse the file system and report back.

The idea is to assist tooling so you can smart complete or the likes.

So if you have a file structure

/myapp/order
/myapp/order/foo
/myapp/order/bar
/myapp/order/bar/sub

And the endpoint was {{file:/myapp/order}}
Then it would return back a list of
{code}
file:/myapp/order/foo
file:/myapp/order/bar
file:/myapp/order/bar/sub
{code}

We may omit the existing endpoint prefix and return, if that makes more sense.
{code}
foo
bar
bar/sub
{code}

And the structure should maybe be a tree like if thats possible
{code}
foo
bar
 \ sub
{code}
cschneider:1295477879:2011-01-20T06:57:59.981+0000:1295477879:2011-01-20T06:57:59.981+0000:I basically like the idea but we should perhaps do this outside of the component project. So perhaps there should be a tooling support project for the component that does such a thing.

The reason is that browsing features could make a component much more complex. Additionally you will sometimes have to use special APIs to do the browsing internally. For example jms is not able to provide the browsing but e.g. for tibco ems there is a special proprietary API for browsing the queues. So in this case it would make sense to have something like camel-browsing-tibco-ems project that delivers the implementation for this jms case.

Additionally to browsing we could also support monitoring and management. For example you could want to see how many messages are in a queue or you could want to remove a single message. As this is typically production stuff UIs for montioring and management will often run in the browser. So we could provide a URL to the management console for e.g. a queue.
Something like http://management.myorg.net/<queuename>. So the tooling could add this link to the endoint for easy access.
boday:1295514008:2011-01-20T17:00:08.448+0000:1295514008:2011-01-20T17:00:08.448+0000:Alright, thanks for the clarification.  Sounds like this would require component specific implementations, but perhaps an interface could be added to the core to provide a framework for this.  Overall, this starts to overlap with enhancing the management/monitoring of runtime routes/endpoints/exchanges, etc.  I've used JMX for specific requirements for this in the past (AMQ queue mgmt, route start/stop/stats, etc)...but a more general framework for this would be nice.  I'll think about this a bit...
jstrachan:1369359995:2013-05-24T09:46:35.961+0000:1369359995:2013-05-24T09:46:35.961+0000:[~chris@die-schneider.net] I agree that tooling in general is complex and that not all endpoints can easily complete themselves. That doesn't mean we shouldn't offer a hook for components that can complete themselves. Then folks can create new components that grok the completion (e.g. a camel-tibco-ems component which groks how to query EMS for the queue names)
jstrachan:1369360080:2013-05-24T09:48:00.789+0000:1369360080:2013-05-24T09:48:00.789+0000:I missed this issue when searching for it ;) we now have a simple hook API called EndpointCompleter that a Component can choose to implement.

https://cwiki.apache.org/confluence/display/CAMEL/EndpointCompleter

if a component doesn't implement it, then no completions are created. So its no biggie that only some endpoints can or do offer completion"
0,CAMEL-2988,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-23 13:26:59+00:00,2011-04-24 09:57:48+00:00,"It should support uri patterns so you can remove all endpoints using wild cards etc.


removeEndpoints(""activemq:queue:foo*"")
removeEndpoints(""ftp:*"")","davsclaus:1279862923:2010-07-23T13:28:43.069+0000:1279862923:2010-07-23T13:28:43.069+0000:trunk: 967091.
davsclaus:1303610268:2011-04-24T09:57:48.565+0000:1303610268:2011-04-24T09:57:48.565+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2987,New Feature,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-07-23 04:44:38+00:00,2011-04-24 09:58:18+00:00,"We should add a feature to the properties component and simple language so it can resolve encrypted usernames/passwords etc.


We can use Jasypt as the library
http://www.jasypt.org/


And then add a prefix to the components component



foo.properties
username=#ENC#4fg48dgh58747f744#ENC#




Just figuring our what the prefix/suffix tokens should be. Most likely something better than #ENC#


The simple language could have a built in function for this as well.","davsclaus:1279831575:2010-07-23T04:46:15.375+0000:1279831575:2010-07-23T04:46:15.375+0000:See also: https://issues.apache.org/jira/browse/KARAF-34
davsclaus:1283393153:2010-09-02T10:05:53.441+0000:1283393153:2010-09-02T10:05:53.441+0000:Coordinate with Dejan as he starts working on this feature for ActiveMQ (AMQ-2460).
davsclaus:1283494080:2010-09-03T14:08:00.783+0000:1283494080:2010-09-03T14:08:00.783+0000:Ashwin we need something similar to what Dejan did with AMQ
http://activemq.apache.org/encrypted-passwords.html

1)
A new camel component, camel-jasypt to contain the implementation to avoid having deps on 3rd party jars in camel-core

2)
A SPI interface in org.apache.camel.spi as neutral interface for this feature. So we can plugin and use other frameworks in the future.

3)
Hook into the Properties component from camel-core and use the pluggable SPI if it has been configured and leverage it to decrypt the text
(eg it scans for ENC( ) tokens), which I assume is a standard feature by Jasypt.

4)
Provide tooling in camel-jasypt like Dejan did, so you can run it from the cmd line to generate those tokens for your passwords

5)
Allow configuration of camel-jasypt to define algorithm and whatnot which is jasypt specific.
In fact it could just be a standard Camel component which you can use to encrypt/decrypt as well.

You have done these kind of components before. Then we can let end users use it for their messages as well.

davsclaus:1283576543:2010-09-04T13:02:23.068+0000:1283576543:2010-09-04T13:02:23.068+0000:Ashwin I got start a bit on this and I got a #4 done with a little tooling to allow end users to create the encrypted values.

I will integrate this with the properties component in a pluggable fashion, then we got the important pieces in place.
Then its easier for you to help, for example by creating the Camel component of jasypt which can be used in the routes. (eg to(""jasypt:xxxx"").
davsclaus:1283578751:2010-09-04T13:39:11.205+0000:1283578751:2010-09-04T13:39:11.205+0000:I got an initial code for #1, #2 and #3 committed to trunk.

I will continue to work a bit to have the moving parts working. Then I most likely will leave parts of the actual JasyptComponent, JasyptEndpoint and the JasyptProducer up in the air, in case you want to give a go.
davsclaus:1283584151:2010-09-04T15:09:11.306+0000:1283584151:2010-09-04T15:09:11.306+0000:Its now integrated with Spring XML so you can do
{code:xml}

    <!-- START SNIPPET: e1 -->
    <!-- define the jasypt properties parser with the given password to be used -->
    <bean id=""jasypt"" class=""org.apache.camel.component.jasypt.JasyptPropertiesParser"">
        <!-- password is mandatory, you can prefix it with sysenv: or sys: to indicate it should use
             an OS environment or JVM system property value, so you dont have the master password defined here -->
        <property name=""password"" value=""secret""/>
    </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <!-- define the camel properties placeholder, and let it leverage jasypt -->
        <propertyPlaceholder id=""properties""
                             location=""classpath:org/apache/camel/component/jasypt/myproperties.properties""
                             propertiesParserRef=""jasypt""/>
        <route>
            <from uri=""direct:start""/>
            <to uri=""{{cool.result}}""/>
        </route>
    </camelContext>
    <!-- END SNIPPET: e1 -->
{code}

Now imagine the to uri was a ftp endpoint, then you could have used a placeholder for the password value in the endpoint uri, and have that password stored in the properties file:
{code}
ftp.username=scott
ftp.password=ENC(bsW9uV37gQ0QHFu7KO03Ww==)
{code}

And you dont have to restrict to password, as we can have any value encrypted.
davsclaus:1283649046:2010-09-05T09:10:46.935+0000:1283649046:2010-09-05T09:10:46.935+0000:I started adding documentation at
https://cwiki.apache.org/confluence/display/CAMEL/Jasypt
davsclaus:1283649790:2010-09-05T09:23:10.882+0000:1283649790:2010-09-05T09:23:10.882+0000:camel-jasypt is now in the kit

trunk: 992744.
davsclaus:1283654952:2010-09-05T10:49:12.499+0000:1283654952:2010-09-05T10:49:12.499+0000:We may want to provide a .bat and a .sh file to easily run the tooling. Eg so it can help setup the classpath to run it from the kit

Where <CAMEL> is the unzipped folder where Camel .ZIP is downloaded

{code}
cd <CAMEL>
jasypt.sh -c encrypt -p secret -i tiger
{code}

Where we provide a {{jasypt.sh}} and a {{jasypt.bar}} file for end users to access the tooling easily from command line.
Otherwise they gotta fight with setting up the classpath. Yikes java still sucks here.

However I wonder how to include those files in the kit with maven, and where we should put such files?
davsclaus:1283747759:2010-09-06T12:35:59.809+0000:1283747759:2010-09-06T12:35:59.809+0000:We need a feature for this so you can easily install it in OSGi.
davsclaus:1283815295:2010-09-07T07:21:35.158+0000:1283815295:2010-09-07T07:21:35.158+0000:Added feature for camel-jasypt

trunk: 993248.
davsclaus:1283820025:2010-09-07T08:40:25.794+0000:1283820025:2010-09-07T08:40:25.794+0000:Now running the tooling from cmd line has been made easy. See updated wiki documentation.
davsclaus:1303610298:2011-04-24T09:58:18.577+0000:1303610298:2011-04-24T09:58:18.577+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2986,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Martin Krasser,Martin Krasser,0,0,2010-07-22 19:19:11+00:00,2011-04-24 09:58:10+00:00,"Reason is a race between continuation.suspend() and continuation.resume(). It can occur that continuation.resume() is executed before continuation.suspend() leading to an IllegalStateException thrown by Jetty:



java.lang.IllegalStateException: DISPATCHED,initial
    at org.eclipse.jetty.server.AsyncContinuation.dispatch(AsyncContinuation.java:364)
    at org.eclipse.jetty.server.AsyncContinuation.resume(AsyncContinuation.java:769)
    at org.apache.camel.component.jetty.CamelContinuationServlet$1.done(CamelContinuationServlet.java:85)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:104)
    at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:262)
    at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:302)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)




This is the case when an async completion callback is faster than the thread that is concurrently executing the if (continuation.isInitial()) block. 


I'll commit a fix soon that also follows the recommendations in http://wiki.eclipse.org/Jetty/Feature/Continuations to always call continuation.suspend() before registering the continuation with a callback handler.","mrt1nz:1279798034:2010-07-22T19:27:14.699+0000:1279798034:2010-07-22T19:27:14.699+0000:Fixed with revision 966815
davsclaus:1303610290:2011-04-24T09:58:10.176+0000:1303610290:2011-04-24T09:58:10.176+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2985,Improvement,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-22 02:47:39+00:00,2011-04-24 09:57:53+00:00,"Here is the mail thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/HTTP-HTTP4-issue-with-accept-content-content-encoding-tp1698061p1698061.html",davsclaus:1303610273:2011-04-24T09:57:53.792+0000:1303610273:2011-04-24T09:57:53.792+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2984,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Paul Mietz Egli,0,0,2010-07-22 00:11:27+00:00,2011-04-24 09:58:18+00:00,"I've edited and expanded the documentation page for the camel-spring-security component, adding a section about where to put Authentication/Subject objects and adding more detail on some of the authorizationPolicy parameters.  The updated doc is in cwiki here:


https://cwiki.apache.org/confluence/display/test/DRAFT+camel-spring-security


Feel free to use any or all of this documentation.","njiang:1279762456:2010-07-22T09:34:16.851+0000:1279762456:2010-07-22T09:34:16.851+0000:Hi Paul,

I just reviewed your document, it's good to see your document explains the whole camel-spring-security.
So I copy your whole document into camel-spring-security.

Thanks for you contribution.

Willem
davsclaus:1279831798:2010-07-23T04:49:58.648+0000:1279831798:2010-07-23T04:49:58.648+0000:Paul thanks for contributing improved documentation. Really appreciated.
davsclaus:1303610298:2011-04-24T09:58:18.129+0000:1303610298:2011-04-24T09:58:18.129+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2983,New Feature,Major,None,None,"
None
",Resolved,Implemented,3.4.0,Onder Sezgin,Claus Ibsen,3,8,2010-07-21 15:34:02+00:00,2020-05-19 07:42:02+00:00,"Consider JBoss RestEasy which has been released under ASL 2.0 license now.


http://jboss.org/resteasy","rjakubco:1436834292:2015-07-14T08:38:12.573+0000:1436834292:2015-07-14T08:38:12.573+0000:Hi [~davsclaus],
I created Camel component based on RestEasy project as part of my diploma thesis. The code can be found here: https://github.com/romanjakubco/camel-resteasy
 
I would like to contribute to Camel project if the component is good enough for distribution. But I was looking at requirements for new component and there is a part with OSGi. The problem is that RestEasy is not working great in OSGi environment at the moment and I don't know if it ever will...
davsclaus:1436834497:2015-07-14T08:41:37.165+0000:1436834497:2015-07-14T08:41:37.165+0000:Hi Roman

Yay that is great. We will take a look at your work.

Its okay for a Camel component to not support OSGi - after all its often where that 3rd party support OSGi or not. There is a few Camel components that do not support OSGi. And also OSGi support can possible be added later. And there is a lot more Camel users not using OSGi so they should benefit.

Do you know if there is more work to be done on your resteasy component? Maybe if you could upgrade to latest Camel release as we would apply the code for master branch and thus uses latest Camel.
garethahealy:1437528475:2015-07-22T09:27:55.892+0000:1437528475:2015-07-22T09:27:55.892+0000:Has anything happened with this? I can't see the camel-resteasy doc page, so i presume not. But the github repo is still active.
rjakubco:1437529724:2015-07-22T09:48:44.914+0000:1437529724:2015-07-22T09:48:44.914+0000:I am currently working on pull request to master branch of Camel, but I have few issues with tests because of Arquillian that is used in them.  I am using ShrinkWrap for creation of war file used for testing and ShrinkWrap uses Maven.resolver for resolving dependencies from pom.xml which are required for bundle that is deployed into the wildfly.

I spent whole yesterday looking for cause of the problem and I think it is because of [1] file is imported into the maven when build is executed and this property {{<url>@localRepositoryUrl@</url>}} is the main problem for Maven.resolver in ShrinkWrap. I need to find a way to bypass this or rewrite tests so that they are executable in Camel repo. So I will try to do this as soon as possible.




[1] https://github.com/romanjakubco/camel/blob/camel-resteasy/tooling/maven/camel-api-component-maven-plugin/src/it/settings.xml
davsclaus:1437896903:2015-07-26T15:48:23.458+0000:1437896903:2015-07-26T15:48:23.458+0000:Sounds good.

Unfortunately testing with a real container is harder. We have much more luck with just testing with camel-jetty as the HTTP server. Then you can test all in the same JVM which is much easier and faster.

Wonder if you could take that approach, as we want the code to be easy to maintain for us.
rjakubco:1437964076:2015-07-27T10:27:56.293+0000:1437964076:2015-07-27T10:27:56.293+0000:I will check the possibility but I am not really sure if it will be possible , but I will give a shot. I was also looking at other Camel components and I think I could take similar approach to tests as camel-servlet component. 

When I will have some results I will let you know.


davsclaus:1438137549:2015-07-29T10:39:09.653+0000:1438137549:2015-07-29T10:39:09.653+0000:Sounds good.
aefox:1480851747:2016-12-04T19:42:27.436+0000:1480851747:2016-12-04T19:42:27.436+0000:[~davsclaus] I've seen that resteasy reached 3.0.x in the meantime. Is there any need for this anymore?
davsclaus:1480853931:2016-12-04T20:18:51.656+0000:1480853931:2016-12-04T20:18:51.656+0000:Yeah sure it should be latest version of RestEasy. At this time its 3.x
onders:1589803421:2020-05-18T20:03:41.082+0000:1589803421:2020-05-18T20:03:41.082+0000:thanks [~rjakubco] for the base project and done a rework and get it merged in camel 3.4.0"
0,CAMEL-2982,Improvement,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Christian Müller,Christian Müller,0,0,2010-07-21 15:12:41+00:00,2011-04-24 09:57:21+00:00,"If you use a 'heavy' normalized database schema, the switch from EntityManager.merge(entity) to EntityManager.persist(entity) could bring a performance boost.


The reason is, that by using EntityManager.merge(entity) the EntityManager will query the database for each entity if this entity already exists in the database. EntityManager.persist(entity) doesn't query the database before the entity is persisted.
In our case, the entities are all new entities, if the Id is null and we think we could improve our throughput with this improvement.


Christian","muellerc:1279721718:2010-07-21T22:15:18.747+0000:1279721718:2010-07-21T22:15:18.747+0000:Running the [JpaTest.java|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java?view=markup], we can see the following log comments:

{code}
...
22143  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 232003191> executing prepstmnt 957929250 SELECT t0.address FROM SendEmail t0 WHERE t0.id = ? [params=(long) 0]
22144  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 232003191> [1 ms] spent
22244  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 824055564> executing prepstmnt 113256058 SELECT SEQUENCE_VALUE FROM OPENJPA_SEQUENCE_TABLE WHERE ID = ? FOR UPDATE WITH RR [params=(int) 0]
22246  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 824055564> [1 ms] spent
22326  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 824055564> executing prepstmnt 1865566999 UPDATE OPENJPA_SEQUENCE_TABLE SET SEQUENCE_VALUE = ? WHERE ID = ? AND SEQUENCE_VALUE = ? [params=(long) 151, (int) 0, (long) 101]
22338  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 824055564> [11 ms] spent
22384  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 957509009> executing prepstmnt 1211729930 INSERT INTO SendEmail (id, address) VALUES (?, ?) [params=(long) 101, (String) foo@bar.com]
22402  camel  TRACE  [main] openjpa.jdbc.SQL - <t 533209608, conn 957509009> [18 ms] spent
...
{code}

using persist instead of merge, you can see the following output (note on the missing 'SELECT t0.address FROM SendEmail t0 WHERE t0.id = ?'):

{code}
...
13837  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 272890728> executing prepstmnt 1989444474 SELECT SEQUENCE_VALUE FROM OPENJPA_SEQUENCE_TABLE WHERE ID = ? FOR UPDATE WITH RR [params=(int) 0]
13839  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 272890728> [0 ms] spent
13946  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 272890728> executing prepstmnt 1102050319 UPDATE OPENJPA_SEQUENCE_TABLE SET SEQUENCE_VALUE = ? WHERE ID = ? AND SEQUENCE_VALUE = ? [params=(long) 251, (int) 0, (long) 201]
13958  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 272890728> [12 ms] spent
14006  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 568097598> executing prepstmnt 436762492 INSERT INTO SendEmail (id, address) VALUES (?, ?) [params=(long) 201, (String) foo@bar.com]
14023  camel  TRACE  [main] openjpa.jdbc.SQL - <t 1954210149, conn 568097598> [16 ms] spent
...
{code}

Christian
muellerc:1279839352:2010-07-23T06:55:52.752+0000:1279839352:2010-07-23T06:55:52.752+0000:Updated the wiki page.
davsclaus:1279840097:2010-07-23T07:08:17.636+0000:1279840097:2010-07-23T07:08:17.636+0000:Remember to add *Camel 2.5:* to indicate its an option new in 2.5 to the wiki page
muellerc:1279842966:2010-07-23T07:56:06.028+0000:1279842966:2010-07-23T07:56:06.028+0000:Done. I thought of it, 5 minutes after saving the page and sitting in my
car... :o)

davsclaus:1303610241:2011-04-24T09:57:21.356+0000:1303610241:2011-04-24T09:57:21.356+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2981,Improvement,Minor,"2.3.0, 2.4.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Patrick Dumontel,0,1,2010-07-21 15:10:56+00:00,2011-04-24 09:57:45+00:00,"Line 126 in DefaultHttpBinding checks if the request's method is POST and the content type is ""application/x-www-form-urlencoded"". This unfortunately fails to populate the request parameters of a POST request where the content type includes the charset, e.g. ""application/x-www-form-urlencoded; charset=UTF-8"". 


Could the equals be changed to startsWith?","njiang:1279759631:2010-07-22T08:47:11.674+0000:1279759631:2010-07-22T08:47:11.674+0000:Applied patch with thanks to Patrick, also merge the change into camel-http4.
davsclaus:1303610265:2011-04-24T09:57:45.474+0000:1303610265:2011-04-24T09:57:45.474+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2980,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Christian Müller,Christian Müller,0,0,2010-07-21 14:55:03+00:00,2011-04-24 09:57:46+00:00,"The EntityManager.merge(entity) method returns the merged entity. The exchange in message body should be updated with the merged entity (what camel-jpa currently not do).
I running into this problem, because after saving an entity in the database, the id field was still null. So, we don't know, which entity in the database is the corresponding to this entity... 


Have a look in the process method of JpaProducer and the Java doc from the EntityManager.


Christian","muellerc:1279722609:2010-07-21T22:30:09.294+0000:1279722609:2010-07-21T22:30:09.294+0000:I modified in my workspace the [JpaTest.java|http://svn.apache.org/viewvc/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/component/jpa/JpaTest.java?view=markup].

old:
{code}
        template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
{code}

new:
{code}
        Exchange returnedExchange = template.send(endpoint, new Processor() {
            public void process(Exchange exchange) {
                exchange.getIn().setBody(new SendEmail(""foo@bar.com""));
            }
        });
        
        SendEmail sendEmail = returnedExchange.getIn().getBody(SendEmail.class);
        assertEquals(""address property"", ""foo@bar.com"", sendEmail.getAddress());
        assertNotNull(""id property should set"", sendEmail.getId());
{code}

This fails with:
{code}
java.lang.AssertionError: id property should set
	at org.junit.Assert.fail(Assert.java:91)
	...
{code}

After switching from EntityManager.merge(entity) to EntityManager.persist(entity), the test succeed.

Because of this and [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982], my question is: ""Should we in general switch from EntityManager.merge(entity) to EntityManager.persist(entity)?"" Is there a reason to use EntityManager.merge(entity)?

Christian
muellerc:1279805453:2010-07-22T21:30:53.311+0000:1279805453:2010-07-22T21:30:53.311+0000:The following two posts explains, why we need the EntityManager.merge(entity) method. In short, we need it (only) for updates:
- http://openjpa.apache.org/builds/1.2.2/apache-openjpa-1.2.2/docs/manual/jpa_overview_em_lifecycle.html
- http://openjpa.208410.n2.nabble.com/persisting-an-entity-and-JPA-behaviour-with-referenced-entities-td210469.html

I'm wondering, if EntityManager.persist(entity) is a better default than EntityManager.merge(entity)? I could imagine, that most of the user insert a new entity in the database instead of updating an existing entity.
- Pro: EntityManager.persist(entity) do not execute a select query for each entity which should be stored.
- Con: EntityManager.persist(entity) doesn't work for detached entities (executing an UPDATE instead of an INSERT).

Christian
davsclaus:1279831735:2010-07-23T04:48:55.810+0000:1279831735:2010-07-23T04:48:55.810+0000:Christian I think we should add an option so end users can choose if they want to use {{merge}} or {{persist}}. The default value could be the current one.
davsclaus:1280031802:2010-07-25T12:23:22.913+0000:1280031802:2010-07-25T12:23:22.913+0000:Christian I think you have fixed this with the new option? If so close this ticket
muellerc:1280150905:2010-07-26T21:28:25.837+0000:1280151012:2010-07-26T21:30:12.974+0000:Unfortunately not. I have fixed [CAMEL-2982|https://issues.apache.org/activemq/browse/CAMEL-2982] with the new 'usePersist' option. What I have to change for this issue is something like this:

is:
{code}
entityManager.merge(entity); 
{code}

shall:
{code}
Object managedEntity = entityManager.merge(entity);
exchange.getIn().setBody(managedEntity);
{code}

But this is not so trivial, because the input could be not only an annotated entity, it could also be a list, map, ... and in the current implementation we iterate over a collection (which may be only have one entry):

{code}
public void process(Exchange exchange) {
  exchange.getIn().setHeader(JpaConstants.JPA_TEMPLATE, endpoint.getTemplate());
  final Object values = expression.evaluate(exchange, Object.class);
  if (values != null) {
    template.execute(new JpaCallback() {
      public Object doInJpa(EntityManager entityManager) throws PersistenceException {
        Iterator iter = ObjectHelper.createIterator(values);
          Object value = iter.next();
          if (endpoint.isUsePersist()) {
            entityManager.persist(value);
          } else {
            entityManager.merge(value);
          }
        }
        if (endpoint.isFlushOnSend()) {
          entityManager.flush();
        }
        return null;
      }
    });
  }
  exchange.getIn().removeHeader(JpaConstants.JPA_TEMPLATE);
} 
{code}

Christian
muellerc:1280152367:2010-07-26T21:52:47.827+0000:1280152367:2010-07-26T21:52:47.827+0000:The Camel JPA [wiki page|http://camel.apache.org/jpa.html] explains, that: ""_The body of the In message is assumed to be an entity bean (that is, a POJO with an @Entity annotation on it)._""
I wonder, whether the wiki page is outdated (because the code looks like that we support also collections, ... as body). To be sure, first I will write some unit tests for this...

Christian
davsclaus:1303610266:2011-04-24T09:57:46.761+0000:1303610266:2011-04-24T09:57:46.761+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2979,Bug,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Andreas Asmuss,0,0,2010-07-21 09:07:59+00:00,2011-04-24 09:57:22+00:00,"In a route such as below a second connection to the ftp server is opened if the login fails.


<route> 
        <from uri=""ftp:localhost/inbox/?username=usr&password=pwd&disconnect=true&consumer.delay=60s&maximumReconnectAttempts=0"" /> 
        <to uri=""file:test_data"" /> 
</route> 


Further description: http://camel.465427.n5.nabble.com/FTP-Try-login-once-and-disconnect-if-failure-td1692660.html#a1692660","davsclaus:1279780335:2010-07-22T14:32:15.700+0000:1279780335:2010-07-22T14:32:15.700+0000:Ah yeah Camel will re-connect if the first connection fails. I am fixing this so it will not do this if {{maximumReconnectAttempts=0}} as you have configured.

So when you configure {{maximumReconnectAttempts=0}} then Camel should never try to re-connect.
davsclaus:1279782059:2010-07-22T15:00:59.557+0000:1279782059:2010-07-22T15:00:59.557+0000:trunk: 966699, 966700.


davsclaus:1279784345:2010-07-22T15:39:05.298+0000:1279784345:2010-07-22T15:39:05.298+0000:Andreas if you want to test this you need to update both camel-core and camel-ftp to 2.5-SNAPSHOT versions.

Apache should build and upload SNAPSHOTs nighly on their maven server. You can see details here
http://camel.apache.org/download.html

Otherwise I can attach the .jars to this ticket.
ankelee:1279856732:2010-07-23T11:45:32.427+0000:1279856732:2010-07-23T11:45:32.427+0000:Hi I've tested this and it works.

When logging in with incorrect user/pass it only polls once and skips, which is nice.
However could it be possible for the component to throw an exception as I would like to catch this exception and make sure that no further polls are done to the ftp (ie shut down the route/application).
davsclaus:1303610242:2011-04-24T09:57:22.108+0000:1303610242:2011-04-24T09:57:22.108+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2978,Bug,Major,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Sean Parsons,0,0,2010-07-20 22:46:40+00:00,2011-04-24 09:57:29+00:00,"I've got a unit test that works fine with Apache Camel 2.3.0, but as soon as I upgraded to 2.4.0 it consistently started to fail.


It performs a number of concurrent requests using this url:
netty:tcp://localhost:2048?sync=true
In both the client and server side of the unit test.


There's also a sister test which does the same thing with Netty directly and that works in isolation, so it would appear something has been broken in the transition to 2.4.0.  Previously this code was also using a beta version of Netty, but even updating that specific dependency has made no difference.","hadrian:1279638441:2010-07-20T23:07:21.079+0000:1279638441:2010-07-20T23:07:21.079+0000:Sean, could you attach the unit test so that we take a look?
davsclaus:1279668826:2010-07-21T07:33:46.494+0000:1279668826:2010-07-21T07:33:46.494+0000:Camel 2.4 uses the latest release of Netty which is 3.2.1. Camel 2.3 used an older release.
seanparsons:1279715227:2010-07-21T20:27:07.577+0000:1279715227:2010-07-21T20:27:07.577+0000:This Groovy file manifests the issue, the @Grab annotation for camel-netty can be changed between 2.3.0 and 2.4.0 with the latter throwing the exceptions.  This also uses the latest version of Netty in both cases.
davsclaus:1280031249:2010-07-25T12:14:09.865+0000:1280031249:2010-07-25T12:14:09.865+0000:You should *not* create a new instance of producer template when sending
{code}
 def producerTemplate = context.createProducerTemplate();
{code}

See this FAQ
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html
seanparsons:1280035277:2010-07-25T13:21:17.180+0000:1280035277:2010-07-25T13:21:17.180+0000:Updated script to not create the ProducerTemplate on each send.
seanparsons:1280035343:2010-07-25T13:22:23.996+0000:1280035343:2010-07-25T13:22:23.996+0000:The issue still occurs even if the ProducerTemplate isn't being created on each send.
davsclaus:1280052852:2010-07-25T18:14:12.842+0000:1280052852:2010-07-25T18:14:12.842+0000:Can you create an example in pure java. For example as a JUnit test. Then we can use that as a test in camel-netty and much easier to use to lookup into the issue.
seanparsons:1280056309:2010-07-25T19:11:49.988+0000:1280056309:2010-07-25T19:11:49.988+0000:One Java based unit test that causes the same issue.
davsclaus:1280121256:2010-07-26T13:14:16.487+0000:1280121256:2010-07-26T13:14:16.487+0000:Sean

Thanks for the test. I am looking into it right now and appears to have a fix.

Can you try with Camel 2.4.0 to disable timeout. You do this to set {{timeout=0}} in the endpoint uri.
The bug seems to be a timeout timer from Jetty which should have been shared and not prototype scoped :)
davsclaus:1280122424:2010-07-26T13:33:44.247+0000:1280122424:2010-07-26T13:33:44.247+0000:trunk: 979276.

Sean fell free to also test with latest code from trunk.
davsclaus:1303610249:2011-04-24T09:57:29.953+0000:1303610249:2011-04-24T09:57:29.953+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2977,Task,Major,2.4.0,None,"
None
",Closed,Fixed,2.4.0,Christian Müller,Christian Müller,0,0,2010-07-20 21:01:03+00:00,2011-04-24 09:57:17+00:00,Components in Camel-Extra need to be upgraded to Camel 2.4.0,"muellerc:1279631174:2010-07-20T21:06:14.091+0000:1279631174:2010-07-20T21:06:14.091+0000:Resolved with [revision 299|http://code.google.com/p/camel-extra/source/detail?r=299]
davsclaus:1303610237:2011-04-24T09:57:17.685+0000:1303610237:2011-04-24T09:57:17.685+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2976,New Feature,Major,2.4.0,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,James Strachan,1,1,2010-07-20 15:40:27+00:00,2012-07-06 08:11:35+00:00,"we should be able to add some kind of listener to camel-web so that as routes are changed at runtime, we can save the updated routes as an XML file somewhere so that folks can permanently store changed routes back in their source code if they want.


e.g. we could add some kind of CamelContextAware listener which on change of a route adds/updates/removes an XML file from a known directory - using maybe ${routeId}.xml as the filename?","julian.cable:1308927984:2011-06-24T23:06:24.582+0000:1308927984:2011-06-24T23:06:24.582+0000:That would be nice. As would being able to use the IDE to create/edit the route. The graphical part of the IDE is of limited use, but the property sheets are very useful.

Julian
davsclaus:1308962757:2011-06-25T08:45:57.603+0000:1308962757:2011-06-25T08:45:57.603+0000:You can use the LifecycleStrategy and you have listeners when routes is added/remove. Then you can just marshal the route to XML using the JAXB APIs.
davsclaus:1341533495:2012-07-06T08:11:35.142+0000:1341533495:2012-07-06T08:11:35.142+0000:This is hard to do on a generic way. There is hot deploy containers that can do this like jetty/tomcat for web apps, and karaf/smx for osgi apps etc."
0,CAMEL-2975,Improvement,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,1,2010-07-20 15:33:20+00:00,2011-04-24 09:57:38+00:00,"If Camel end uses add temporary routes on the fly, and then want those temp routes to be deleted, they need to shutdown the route.


And we should then unregister the associated JMX mbeans that the route solely uses. This can be a bit tricky to do as the current architecture will unregister mbeans on camel shutdown.","davsclaus:1279611247:2010-07-20T15:34:07.206+0000:1279611247:2010-07-20T15:34:07.206+0000:See nabble
http://camel.465427.n5.nabble.com/Stopping-and-removing-a-route-programmatically-tp1223859p1223859.html
davsclaus:1284859769:2010-09-19T09:29:29.450+0000:1284859769:2010-09-19T09:29:29.450+0000:If you stop -> remove route then it will be disposed from JMX
davsclaus:1303610258:2011-04-24T09:57:38.257+0000:1303610258:2011-04-24T09:57:38.257+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2974,Task,Major,2.4.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-20 14:04:24+00:00,2011-04-24 09:58:19+00:00,"Spring 3.0.3 uses 11 spring jars for all the camel components which deps on spring.



        <include>aopalliance:aopalliance</include>
        <include>org.springframework:spring-aop</include>
        <include>org.springframework:spring-asm</include>
        <include>org.springframework:spring-beans</include>
        <include>org.springframework:spring-context</include>
        <include>org.springframework:spring-spring-context-supportl</include>
        <include>org.springframework:spring-core</include>
        <include>org.springframework:spring-expression</include>
        <include>org.springframework:spring-jms</include>
        <include>org.springframework:spring-test</include>
        <include>org.springframework:spring-tx</include>
        <include>org.springframework:spring-web</include>




Maybe we should consider just adding the uber spring jar instead?


And spring 3.0 seems to no longer include the aop alliance api which you need to use with spring aop.","davsclaus:1279607294:2010-07-20T14:28:14.417+0000:1279607294:2010-07-20T14:28:14.417+0000:trunk: 965860.

I have added the needed spring jars to the kit.

davsclaus:1279607738:2010-07-20T14:35:38.019+0000:1279607738:2010-07-20T14:35:38.019+0000:Also we should move the jdk1.5 stuff into lib/jdk15 so users of jdk1.6 dont need to bother with those jars.


davsclaus:1279608154:2010-07-20T14:42:34.775+0000:1279608154:2010-07-20T14:42:34.775+0000:There is no uber spring 3.0.x jar so we gotta stick with the individual jars
davsclaus:1279609825:2010-07-20T15:10:25.458+0000:1279609825:2010-07-20T15:10:25.458+0000:Okay got the following structure now
{code}
camel-amqp-2.5-SNAPSHOT.jar                     camel-lucene-2.5-SNAPSHOT.jar
camel-atom-2.5-SNAPSHOT.jar                     camel-mail-2.5-SNAPSHOT.jar
camel-bam-2.5-SNAPSHOT.jar                      camel-mina-2.5-SNAPSHOT.jar
camel-bean-validator-2.5-SNAPSHOT.jar           camel-msv-2.5-SNAPSHOT.jar
camel-bindy-2.5-SNAPSHOT.jar                    camel-mvel-2.5-SNAPSHOT.jar
camel-blueprint-2.5-SNAPSHOT.jar                camel-nagios-2.5-SNAPSHOT.jar
camel-cache-2.5-SNAPSHOT.jar                    camel-netty-2.5-SNAPSHOT.jar
camel-castor-2.5-SNAPSHOT.jar                   camel-ognl-2.5-SNAPSHOT.jar
camel-cometd-2.5-SNAPSHOT.jar                   camel-printer-2.5-SNAPSHOT.jar
camel-core-2.5-SNAPSHOT.jar                     camel-protobuf-2.5-SNAPSHOT.jar
camel-crypto-2.5-SNAPSHOT.jar                   camel-quartz-2.5-SNAPSHOT.jar
camel-csv-2.5-SNAPSHOT.jar                      camel-quickfix-2.5-SNAPSHOT.jar
camel-cxf-2.5-SNAPSHOT.jar                      camel-restlet-2.5-SNAPSHOT.jar
camel-dozer-2.5-SNAPSHOT.jar                    camel-rmi-2.5-SNAPSHOT.jar
camel-eclipse-2.5-SNAPSHOT.jar                  camel-rss-2.5-SNAPSHOT.jar
camel-ejb-2.5-SNAPSHOT.jar                      camel-ruby-2.5-SNAPSHOT.jar
camel-exec-2.5-SNAPSHOT.jar                     camel-saxon-2.5-SNAPSHOT.jar
camel-flatpack-2.5-SNAPSHOT.jar                 camel-scala-2.5-SNAPSHOT.jar
camel-freemarker-2.5-SNAPSHOT.jar               camel-script-2.5-SNAPSHOT.jar
camel-ftp-2.5-SNAPSHOT.jar                      camel-servlet-2.5-SNAPSHOT.jar
camel-gae-2.5-SNAPSHOT.jar                      camel-smpp-2.5-SNAPSHOT.jar
camel-groovy-2.5-SNAPSHOT.jar                   camel-snmp-2.5-SNAPSHOT.jar
camel-guice-2.5-SNAPSHOT.jar                    camel-soap-2.5-SNAPSHOT.jar
camel-hawtdb-2.5-SNAPSHOT.jar                   camel-spring-2.5-SNAPSHOT.jar
camel-hl7-2.5-SNAPSHOT.jar                      camel-spring-integration-2.5-SNAPSHOT.jar
camel-http-2.5-SNAPSHOT.jar                     camel-spring-javaconfig-2.5-SNAPSHOT.jar
camel-http4-2.5-SNAPSHOT.jar                    camel-spring-security-2.5-SNAPSHOT.jar
camel-ibatis-2.5-SNAPSHOT.jar                   camel-sql-2.5-SNAPSHOT.jar
camel-irc-2.5-SNAPSHOT.jar                      camel-stream-2.5-SNAPSHOT.jar
camel-jackson-2.5-SNAPSHOT.jar                  camel-stringtemplate-2.5-SNAPSHOT.jar
camel-javaspace-2.5-SNAPSHOT.jar                camel-tagsoup-2.5-SNAPSHOT.jar
camel-jaxb-2.5-SNAPSHOT.jar                     camel-test-2.5-SNAPSHOT.jar
camel-jcr-2.5-SNAPSHOT.jar                      camel-velocity-2.5-SNAPSHOT.jar
camel-jdbc-2.5-SNAPSHOT.jar                     camel-xmlbeans-2.5-SNAPSHOT.jar
camel-jetty-2.5-SNAPSHOT.jar                    camel-xmlsecurity-2.5-SNAPSHOT.jar
camel-jing-2.5-SNAPSHOT.jar                     camel-xmpp-2.5-SNAPSHOT.jar
camel-jms-2.5-SNAPSHOT.jar                      camel-xstream-2.5-SNAPSHOT.jar
camel-josql-2.5-SNAPSHOT.jar                    commons-logging-1.1.1.jar
camel-jpa-2.5-SNAPSHOT.jar                      commons-management-1.0.jar
camel-jt400-2.5-SNAPSHOT.jar                    jdk15
camel-juel-2.5-SNAPSHOT.jar                     optional
camel-jxpath-2.5-SNAPSHOT.jar                   spring
camel-ldap-2.5-SNAPSHOT.jar

./jdk15:
activation-1.1.jar      jaxb-api-2.1.jar        jaxb-impl-2.1.13.jar    stax-api-1.0-2.jar

./optional:
commons-beanutils-1.8.0.jar                     geronimo-j2ee-management_1.0_spec-1.1.jar
commons-collections-3.2.1.jar                   geronimo-jms_1.1_spec-1.1.1.jar
commons-dbcp-1.3.jar                            log4j-1.2.16.jar
commons-pool-1.5.4.jar                          slf4j-api-1.6.0.jar
geronimo-j2ee-jacc_1.0_spec-1.1.jar             slf4j-log4j12-1.6.0.jar

./spring:
aopalliance-1.0.jar                             spring-expression-3.0.3.RELEASE.jar
spring-aop-3.0.3.RELEASE.jar                    spring-jdbc-3.0.3.RELEASE.jar
spring-asm-3.0.3.RELEASE.jar                    spring-jms-3.0.3.RELEASE.jar
spring-beans-3.0.3.RELEASE.jar                  spring-orm-3.0.3.RELEASE.jar
spring-context-3.0.3.RELEASE.jar                spring-test-3.0.3.RELEASE.jar
spring-context-support-3.0.3.RELEASE.jar        spring-tx-3.0.3.RELEASE.jar
spring-core-3.0.3.RELEASE.jar                   spring-web-3.0.3.RELEASE.jar
{code}
davsclaus:1279609911:2010-07-20T15:11:51.101+0000:1279609911:2010-07-20T15:11:51.101+0000:trunk: 965873.
davsclaus:1303610299:2011-04-24T09:58:19.243+0000:1303610299:2011-04-24T09:58:19.243+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2943,New Feature,Major,None,None,"
None
",Closed,Fixed,None,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-07-14 04:55:27+00:00,2011-04-24 09:57:40+00:00,"The Telco SIP protocol has operations to perform Publish and Subscribe of Telecom events via a Presence Agent (similar to a Broker) as an intermediary.


Develop a Camel SIP Component that can communicate with a Presence Agent (also add a basic Presence Agent with no persistence). The SIP Component should as a consumer, subscribe to messages from a Presence Agent and support the SIP protocol handshake and as a Producer publish messages to a Presence Agent.


The SIP protocol involves communication over HTTP with specific acknowledgements that need to cater for different situations. This communication pattern and handshake must be properly supported.","akarpe:1279055832:2010-07-14T05:17:12.791+0000:1279055832:2010-07-14T05:17:12.791+0000:Hi Claus, Hadrian & Willem,

I have developed an SIP component that supports the Publish/Subscribe pattern via a Presence Agent. 

This component has been developed using the Jain-SIP API version 1.2. I have attached the supporting jars for your review (jain-sip.zip). Since the jars are not available in public Maven repositories, the jain-sip.zip file contains a shell script with commands to add the jars to a local repository. Once accepted these jars will need to be hosted via the public Apache Maven repository. 

The jars are fully compatible with Apache License model and are releases by nist.gov. The links is given below
https://jain-sip.dev.java.net/

The JAIN-SIP Reference implementation is a product of the Advanced Networking Technologies Division at the National Institute of Standards and Technology (NIST). The JAIN SIP RI, TCK and tools published by this project are in the public domain.

A basic Presence Agent is also available with the Camel SIP component. This agent does not support persistence and other high end stateful capabilities seen with Telecom Presence Agents and is not intended for industrial use but rather for testing and proving out the capabilities of the SIP component and endpoints.   

Can you please review and let me know what you think. I would be happy to incorporate any thoughts and comments you might have. When you think everything looks good, I will be happy to commit the changes to the trunk.

Cheers,

Ashwin... 

davsclaus:1279056661:2010-07-14T05:31:01.226+0000:1279056661:2010-07-14T05:31:01.226+0000:Ashwin we will take a look after the dust of the Camel 2.4 release has settled. 

Please refrain from committing big changes to the trunk, in case a new 2.4 release has to be cut etc. Its best to only commit bug fixes until the 2.4 is GA.
njiang:1279080356:2010-07-14T12:05:56.321+0000:1279080356:2010-07-14T12:05:56.321+0000:Hi Ashwin,

I just found there are some jain-sip artifacts in http://download.java.net/maven/2/javax/sip, can you check if you can use them ?
akarpe:1279109132:2010-07-14T20:05:32.461+0000:1279109132:2010-07-14T20:05:32.461+0000:Hi Willem,

Cool, I was not aware of this site. I will check out my code using the jars on this site.

Cheers,

Ashwin...
hadrian:1279135555:2010-07-15T03:25:55.285+0000:1279135555:2010-07-15T03:25:55.285+0000:A sip component is a very interesting one and I talked to Chris about this not long ago. For integration with a pbx we were looking at [asterisk-java|http://asterisk-java.org/]. Testing could be a bit of a problem as I am not aware of a mock and this may require some hardware/service to test.
akarpe:1279378152:2010-07-17T22:49:12.376+0000:1279378152:2010-07-17T22:49:12.376+0000:Hi Hadrian,

I used the OpenXCAP as part of an engagement to prove that the solution works. Unfortunately OpenXCAP has a GPL License version 2 which is not compatible with the Apache 2 License.

In the absence of this I developed my own presence agent which can be instantiated as an endpoint by the SIP component and used for Unit and Integration Testing. It works well and can be used to prove the capability of SIP endpoints doing publish/subscribe.

I have included a unit test with the SIP component that shows this in action.

Hope this helps.

Cheers,

Ashwin...

 
akarpe:1279667947:2010-07-21T07:19:07.859+0000:1279667947:2010-07-21T07:19:07.859+0000:Hi Claus,

I just saw that the 2.4 release is now GA. Do you have any edits or comments on this component submission.

I would like to commit the changes and move on to other bugs/fixes and also add documentation etc.

Cheers,

Ashwin... 
akarpe:1281361445:2010-08-09T21:44:05.748+0000:1281361445:2010-08-09T21:44:05.748+0000:Hi All,

Can you please review and let me know if I can go ahead and commit this new component.

 I have not had much feedback thus far and I am happy to make any changes based on your thoughts and comments.

Cheers,

Ashwin...
davsclaus:1281397002:2010-08-10T07:36:42.805+0000:1281397002:2010-08-10T07:36:42.805+0000:What does this code do?
{code}
  Integer.toHexString((int) (Math.random() * Integer.MAX_VALUE))
{code}

And if exceptions is thrown you catch and log them. Is this the best we can do?

Is an ACK anything but a 200?
{code}
  if (response.getStatusCode() !=  200) {
+            LOG.debug(""Ack received from Subscriber"");
+        }
{code}


There are a couple of places where you drop the message like this
{code}
+            if (LOG.isDebugEnabled()) {
+                LOG.debug(""Stray response -- dropping "");
+            }
{code}
Maybe it should be WARN level? Or does this happen very often?
And maybe you can log a bit more about the stray response? So the end user have more information to track down with.

You may want to provide a better error message if a mandatory header is missing, as you can't see from the error message that its a header and what the key is for it
{code}
 ObjectHelper.notNull(exchange.getIn().getHeader(""REQUEST_METHOD""), ""Request Method"");
{code}

Instead of type casting use the Camel API for that
{code}
String requestMethod = (String) exchange.getIn().getHeader(""REQUEST_METHOD"");
{code}
Should just be
{code}
String requestMethod = exchange.getIn().getHeader(""REQUEST_METHOD"", String.class);
{code}


Should the doStop method in {{SipSubscriber}} be empty?


Also ensure the code is valid according to checkstyle using the mvn goal:
{code}
mvn compile -Psourcecheck
{code}
akarpe:1282543125:2010-08-23T13:58:45.130+0000:1282543125:2010-08-23T13:58:45.130+0000:Hi Claus,

I have made all the changes based on your recommendations and am attaching a fresh snapshot for your review.

Can you please let me know what you think. The changes I have made are as follows

a> The line you identified was a spurious line (harmless though) that was replaced with the earlier line which used the UUID instead of a random value to set up the Tag for the SipStack.

b> Addressed this by adding a fresh interface that offers all the known SIP status codes (SipMessageCodes.java) and implementing it in the SipPresenceAgent. Also changed the code to 

{code}
    public synchronized void processResponse(ResponseEvent responseReceivedEvent) {
        Response response = (Response) responseReceivedEvent.getResponse();
        Integer statusCode = response.getStatusCode();
        if (SIP_MESSAGE_CODES.containsKey(statusCode)) {
            LOG.debug(SIP_MESSAGE_CODES.get(statusCode) + "" received from Subscriber"");
        }
    }
{code} 

c> Changed the Log message to a Warning. The chances of this happening are low but can happen in the absence of a dialog or transaction...

d> Changed the code to deal with the missing Header situation in a better way.

{code}
        String requestMethod = exchange.getIn().getHeader(""REQUEST_METHOD"", String.class);
        if (requestMethod == null) {
            throw new CamelException(""Missing mandatory Header in REQUEST_HEADER in exchange"");
        }
{code}

e> Changed the typecast based on your recommendation. (see above code)

Hope this helps.

Cheers,

Ashwin...
akarpe:1282543350:2010-08-23T14:02:30.728+0000:1282543350:2010-08-23T14:02:30.728+0000:Hi Claus & Willem,

BTW, I also found that the JBoss Repository (same as Netty) keeps up-to-date versions of the Jain-Sip jars. I modified my POM and the parent/pom.xml to use the jar versions from this repository.

Now there is no need for the jars to be installed by hand or stored in the Camel repository.

Cheers,

Ashwin...


davsclaus:1282543544:2010-08-23T14:05:44.366+0000:1282543544:2010-08-23T14:05:44.366+0000:You should use {{CamelExchangeException}} if throwing a checked exception when something is wrong with the Exchange. Then it will automatic log some details about the exchange, so you just write what is wrong, such as a header is missing.

We could also consider adding {{getMandatoryHeader}} on the {{Message}} API if its to be used more? Then Camel will auto throw exception if the header is missing.
davsclaus:1282543788:2010-08-23T14:09:48.146+0000:1282543788:2010-08-23T14:09:48.146+0000:There is some code which is commented out
{code}
+    /*public SipProvider getProvider() {
+        return provider;
+    }
+
+    public void setProvider(SipProvider provider) {
+        this.provider = provider;
+    }*/
{code}
davsclaus:1282544026:2010-08-23T14:13:46.424+0000:1282544026:2010-08-23T14:13:46.424+0000:The maven repo we have listed in our pom.xml should generally use the same id.

So can you lookup an existing component which uses the jboss repo such as camel-netty and use the same id as it?
{code}
	<id>sip</id>
{code}

Nexus servers and whatnot requires to use consistent ids.
davsclaus:1282544050:2010-08-23T14:14:10.003+0000:1282544050:2010-08-23T14:14:10.003+0000:And remember to run checkstyle as well.

Otherwise its great and a +1 from me.
akarpe:1282544872:2010-08-23T14:27:52.348+0000:1282544872:2010-08-23T14:27:52.348+0000:Hi Claus,

I did run checkstyle. It did not seem to pick up anything. The earlier iteration did indeed get flagged by checkstyle.

Oh yikes!!. Did not see the commented code. Will remove right away. Will also make the change in the POM and use the same id for the JBoss repo.

Cheers,

Ashwin...
akarpe:1282549270:2010-08-23T15:41:10.109+0000:1282549270:2010-08-23T15:41:10.109+0000:Hi Claus,

Please find a new diff and zip file with the latest set of changes.

I have removed the commented API's (thanks for spotting that), updated the repository to the one used in Netty using the same ID. I also found a newer version of the sip jars (1.2.153). I have changed the link in the parent/pom.xml to use the latest version. I have also verified that the tests work fine against the newer version.

I have verified the code using sourcecheck (checkstyle) and everything is in order.

Cheers,

Ashwin...

P.S: I will be checking in this version of the code.
akarpe:1282550875:2010-08-23T16:07:55.067+0000:1282550920:2010-08-23T16:08:40.853+0000:Committed to the Subversion trunk as revision r988163 
davsclaus:1303610260:2011-04-24T09:57:40.469+0000:1303610260:2011-04-24T09:57:40.469+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2942,Bug,Major,2.3.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Brian Stiles,0,0,2010-07-13 17:18:30+00:00,2011-04-24 09:57:05+00:00,"CamelHttpTransportServlet.destroy removes the servlet from a static map named CAMEL_SERVLET_MAP prior to stopping its associated Spring application context.  If that context defines a route using a servletEndpoint, the route is shutdown AFTER the servlet is removed from the map.  The shutdown code then looks for the servlet in the map by calling CamelHttpTransportServlet.getCamelServlet.  The servlet can't be found, and the ensuing exception is logged (copied below).


It seems to me that CamelHttpTransportServlet.destroy should be defined like this:


    public void destroy() {
        // Removal was here
        if (applicationContext != null) 

{
            applicationContext.stop();
        }

        // Moved the removal to here
        CAMEL_SERVLET_MAP.remove(servletName);
    }


so that the servlet is removed from the map after the context is stopped.


I know for sure that removal of the servlet from the map before the context is stopped causes this problem when my route is shutdown.  I DON'T know for sure that my overall configuration is correct, though I think it is valid.


If the above change is not obviously correct, or if there are further questions, please let me know, and I'll work up a sample that demonstrates the problem to help answer any questions.


–


2010-07-13 09:06:23,918 [Camel Thread 0 - ShutdownTask] WARN  org.apache.camel.impl.DefaultShutdownStrategy at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:219)
         Error occurred while shutting down route: Consumer[/relay]. This exception will be ignored.
java.lang.IllegalArgumentException: Cannot find the deployed servlet, please configure the ServletComponent or configure a org.apache.camel.component.servlet.CamelHttpTransportServlet servlet in web.xml 
	at org.apache.camel.component.servlet.ServletComponent.getCamelServlet(ServletComponent.java:55)
	at org.apache.camel.component.servlet.ServletComponent.disconnect(ServletComponent.java:116)
	at org.apache.camel.component.http.HttpEndpoint.disconnect(HttpEndpoint.java:152)
	at org.apache.camel.component.http.HttpConsumer.doStop(HttpConsumer.java:56)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:86)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:107)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:100)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdownNow(DefaultShutdownStrategy.java:217)
	at org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask.run(DefaultShutdownStrategy.java:413)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)","njiang:1279042307:2010-07-14T01:31:47.815+0000:1279042307:2010-07-14T01:31:47.815+0000:Yeah, we need to remove the the ServletMap after the application context is stopped.
Thanks for pointing that out, I will commit the fix shortly.

bstiles@bstiles.net:1279042822:2010-07-14T01:40:22.017+0000:1279042822:2010-07-14T01:40:22.017+0000:Fantastic.  Thanks for the quick response!
njiang:1279042894:2010-07-14T01:41:34.419+0000:1279042894:2010-07-14T01:41:34.419+0000:Committed the patch with thanks to Brian.
davsclaus:1303610225:2011-04-24T09:57:05.149+0000:1303610225:2011-04-24T09:57:05.149+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2941,Task,Minor,2.4.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,0,0,2010-07-13 14:01:29+00:00,2011-04-24 09:58:02+00:00,"In 2.4.0 onwards the camel-spring has been merged to include osgi stuff. 


The logging info



2010-07-13 15:58:58,444 [                     main] INFO  CamelNamespaceHandler          - camel-osgi.jar/camel-spring-osgi.jar not detected in classpath




Should be changed accordingly to report about OSGi detection.",davsclaus:1303610282:2011-04-24T09:58:02.203+0000:1303610282:2011-04-24T09:58:02.203+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2940,Bug,Major,2.5.0,None,"
None
",Closed,Fixed,2.5.0,Moulliard Charles,Moulliard Charles,0,0,2010-07-12 15:12:16+00:00,2011-04-24 09:57:35+00:00,"[  86] [Installed  ] [            ] [   60] camel-spring (2.5.0.SNAPSHOT)
karaf@root> start 86
Error executing command: Unresolved constraint in bundle org.apache.camel.camel-spring [86]: Unable to resolve 86.0: missing requirement [86.0] package; (&(package=org.ap
ache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1))) - [86.0] package; (&(package=org.apache.camel.component.test)(version>=2.5.0)(!(version>=2.5.1)))
karaf@root> headers 86

camel-spring (86)
-----------------
Bnd-LastModified = 1278946400750
Build-Jdk = 1.6.0_20
Built-By = Charlesm
Bundle-Activator = org.apache.camel.osgi.Activator
Bundle-Description = Camel Spring support
Bundle-DocURL = http://www.apache.org/
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2
Bundle-Name = camel-spring
Bundle-SymbolicName = org.apache.camel.camel-spring
Bundle-Vendor = The Apache Software Foundation
Bundle-Version = 2.5.0.SNAPSHOT
Created-By = Apache Maven Bundle Plugin
Export-Package = org.apache.camel.spring.spi;uses:=""org.springframework.context,org.apache.camel.spi,org.springframework.beans.factory,org.apache.camel,org.springframewor
k.beans.factory.config,org.apache.camel.builder,org.springframework.transaction,org.apache.commons.logging,org.apache.camel.processor.exceptionpolicy,org.apache.camel.pro
cessor,org.apache.camel.util,org.apache.camel.model,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.util;uses:=""org.apache.camel
,org.springframework.context,org.apache.camel.util,org.apache.commons.logging,org.springframework.beans.factory,org.springframework.util"";version=""2.5.0.SNAPSHOT"",org.apa
che.camel.spring.remoting;uses:=""org.apache.camel.util,org.springframework.remoting.support,org.apache.camel.component.bean,org.apache.camel,org.springframework.beans,org
.springframework.context,org.apache.camel.spi,org.apache.camel.spring.util,org.springframework.beans.factory"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring;uses:=""org.
apache.camel.impl,org.apache.camel.util,org.apache.commons.logging,org.apache.camel,org.springframework.beans,org.springframework.context,org.springframework.util,org.spr
ingframework.beans.factory.config,org.apache.camel.spring.util,javax.xml.bind.annotation,org.springframework.beans.factory,org.apache.camel.builder,org.apache.camel.model
.dataformat,org.springframework.context.event,org.apache.camel.model.config,org.apache.camel.model,org.apache.camel.spi,org.apache.camel.spring.spi,org.apache.camel.view,
org.springframework.context.support,org.apache.camel.spring.handler,javax.xml.bind,org.apache.camel.component.bean,org.apache.camel.component.event,org.springframework.tr
ansaction,org.springframework.transaction.support"";version=""2.5.0.SNAPSHOT"",org.apache.camel.spring.handler;uses:=""org.springframework.beans.factory.support,org.springfra
mework.core,org.springframework.util,org.springframework.beans.factory.xml,org.w3c.dom,org.springframework.beans,org.springframework.beans.factory.config,org.springframew
ork.beans.factory.parsing,org.apache.camel.model.dataformat,org.apache.camel.model.config,org.apache.camel.util,org.apache.camel.model,org.apache.camel.spring,javax.xml.b
ind,org.springframework.beans.factory,org.apache.camel.view,org.apache.commons.logging,org.apache.camel.model.loadbalancer,org.apache.camel.builder.xml,org.apache.camel.s
pring.remoting,org.apache.camel.spi,org.apache.camel,org.apache.camel.model.language,org.apache.camel.processor"";version=""2.5.0.SNAPSHOT"",org.apache.camel.osgi;uses:=""org
.osgi.framework,org.apache.camel.impl,org.springframework.osgi.context,org.apache.commons.logging,javax.xml.bind.annotation,org.springframework.context,org.apache.camel.s
pring,org.apache.camel.model,org.apache.camel.model.loadbalancer,org.apache.camel,org.apache.camel.model.language,org.springframework.beans.factory.xml,org.apache.camel.m
odel.dataformat,org.apache.camel.spring.handler,org.apache.camel.model.config,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component;uses:=""org.apache.
camel.impl,org.apache.commons.logging,org.springframework.core.io,org.apache.camel,org.apache.camel.converter,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT"",org.apache.ca
mel.component.event;uses:=""org.apache.camel,org.springframework.context,org.apache.camel.impl,org.springframework.beans,org.apache.camel.util,org.apache.camel.processor.l
oadbalancer"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.test;uses:=""org.apache.camel.impl,org.apache.camel.util,org.apache.camel,org.apache.commons.logging,org.a
pache.camel.component.mock"";version=""2.5.0.SNAPSHOT"",org.apache.camel.component.validator;uses:=""javax.xml.transform,org.springframework.core.io,javax.xml.transform.strea
m,org.apache.camel.processor.validation,org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel"";version=""2.5.0.SNAPSHOT"",org.apache.
camel.component.xslt;uses:=""org.apache.camel.impl,org.apache.camel.component,org.apache.commons.logging,org.apache.camel,org.springframework.core.io,org.apache.camel.buil
der.xml,org.apache.camel.util,javax.xml.transform,org.apache.camel.converter.jaxp,org.apache.camel.spi"";version=""2.5.0.SNAPSHOT""
Ignore-Package = org.apache.camel.spring.remoting,org.apache.camel.component,org.apache.camel.component.validator,org.apache.camel.component.xslt,org.apache.camel.spring.
spi,org.apache.camel.spring,org.apache.camel.osgi,org.apache.camel.spring.handler,org.apache.camel.component.event,org.apache.camel.spring.util
Implementation-Title = Camel :: Spring
Implementation-Vendor = The Apache Software Foundation
Implementation-Vendor-Id = org.apache.camel
Implementation-Version = 2.5-SNAPSHOT
Import-Package = javax.xml.bind,javax.xml.bind.annotation,javax.xml.bind.annotation.adapters,javax.xml.transform,javax.xml.transform.stream,org.apache.camel;version=""[2.5
.0,2.5.1)"",org.apache.camel.builder;version=""[2.5.0,2.5.1)"",org.apache.camel.builder.xml;version=""[2.5.0,2.5.1)"",org.apache.camel.component.bean;version=""[2.5.0,2.5.1)"",o
rg.apache.camel.component.mock;version=""[2.5.0,2.5.1)"",org.apache.camel.component.properties;version=""[2.5.0,2.5.1)"",org.apache.camel.component.test;version=""[2.5.0,2.5.1
)"",org.apache.camel.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.converter.jaxp;version=""[2.5.0,2.5.1)"",org.apache.camel.impl;version=""[2.5.0,2.5.1)"",org.apache.cam
el.impl.converter;version=""[2.5.0,2.5.1)"",org.apache.camel.management;version=""[2.5.0,2.5.1)"",org.apache.camel.model;version=""[2.5.0,2.5.1)"",org.apache.camel.model.config
;version=""[2.5.0,2.5.1)"",org.apache.camel.model.dataformat;version=""[2.5.0,2.5.1)"",org.apache.camel.model.language;version=""[2.5.0,2.5.1)"",org.apache.camel.model.loadbala
ncer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.exceptionpolicy;version=""[2.5.0,2.5.1)"",org.apache.camel.proces
sor.interceptor;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.loadbalancer;version=""[2.5.0,2.5.1)"",org.apache.camel.processor.validation;version=""[2.5.0,2.5.1)"",org.
apache.camel.spi;version=""[2.5.0,2.5.1)"",org.apache.camel.util;version=""[2.5.0,2.5.1)"",org.apache.camel.view;version=""[2.5.0,2.5.1)"",org.apache.commons.logging,org.osgi.f
ramework;version=""[1.3,2)"",org.osgi.util.tracker;version=""[1.3,2)"",org.springframework.beans;version=""[2.5,4)"",org.springframework.beans.factory;version=""[2.5,4)"",org.spr
ingframework.beans.factory.config;version=""[2.5,4)"",org.springframework.beans.factory.parsing;version=""[2.5,4)"",org.springframework.beans.factory.support;version=""[2.5,4)
"",org.springframework.beans.factory.xml;version=""[2.5,4)"",org.springframework.context;version=""[2.5,4)"",org.springframework.context.event;version=""[2.5,4)"",org.springfram
ework.context.support;version=""[2.5,4)"",org.springframework.core;version=""[2.5,4)"",org.springframework.core.io;version=""[2.5,4)"",org.springframework.osgi.context;version=
""[1.2,2)"",org.springframework.remoting.support;version=""[2.5,4)"",org.springframework.transaction;version=""[2.5,4)"",org.springframework.transaction.support;version=""[2.5,4
)"",org.springframework.util;version=""[2.5,4)"",org.w3c.dom
Manifest-Version = 1.0
Specification-Title = Camel :: Spring
Specification-Vendor = The Apache Software Foundation
Specification-Version = 2.5-SNAPSHOT
Tool = Bnd-0.0.357","cmoulliard:1278998915:2010-07-13T13:28:35.309+0000:1278998915:2010-07-13T13:28:35.309+0000:code committed
davsclaus:1303610255:2011-04-24T09:57:35.541+0000:1303610255:2011-04-24T09:57:35.541+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2939,New Feature,Major,2.3.0,None,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Scott Clasen,2,10,2010-07-12 13:39:14+00:00,2015-02-23 10:16:28+00:00,"Take a look at http://github.com/ticktock/camel-cassandra, its a Cassandra component for Camel. 


Please pull into the camel codebase if its up to snuff, or let me know what I need to do to get it there","davsclaus:1278913715:2010-07-12T13:48:35.039+0000:1278913726:2010-07-12T13:48:46.297+0000:We will pull it over when Apache Camel upgrades to be JDK 1.6 as minimum.
Currently Camel supports JDK 1.5+.

Casandra requires JDK 1.6+
davsclaus:1278913788:2010-07-12T13:49:48.884+0000:1278913788:2010-07-12T13:49:48.884+0000:And of course we can only pull it over if the authors of the component is willing to donate to Apache.
scott.clasen:1278915008:2010-07-12T14:10:08.468+0000:1278915008:2010-07-12T14:10:08.468+0000:I'm the author, and certainly willing to donate it.

The component only uses the cassandra thrift API and does not run in process with cassandra. The tests currently would require JDK1.6 to run cassandra in process, but I would think the actual component would work with JDK 1.5...not sure if this makes a difference or not. 
davsclaus:1278916079:2010-07-12T14:27:59.069+0000:1278916079:2010-07-12T14:27:59.069+0000:Scott that's awesome.

Currently the Camel release is build and tested using JDK 1.5. Hence if your component is capable of doing that then we may be able to pull it over sooner.
We could then state on the wiki pages for it, that at runtime it requires JDK 1.6.

We will open a discussion on the camel dev list about when we should make the jump and go for JDK 1.6 as minimum. However as there are many stakeholders and end users still on 1.5 it may not be super easy to jump asap.


scott.clasen:1278918223:2010-07-12T15:03:43.330+0000:1278918223:2010-07-12T15:03:43.330+0000:Looks like the component cant do that currently, I think I would have to build a 1.5 version of the Cassandra Thrift API, and then also skip the tests, which need 1.6...

Understood that JDK 1.6 will take some time.

Let me know if you need any other info.



scott.clasen:1278999917:2010-07-13T13:45:17.353+0000:1278999917:2010-07-13T13:45:17.353+0000:Has there been any thought in the past to creating submodules like camel-mustang and camel-dolphin, compiled with JDK 6 and 7, to allow for components to require JDK6 or 7? Similar to the way spring had spring-tiger for so many years?

It may have made more sense for JDK5 than for 6, but I could see people wanting to leverage some of the new stuff in JDK7 for camel components right away, NIO2 Fork-Join, etc...(if we ever see a JDK7 :) )
scott.clasen:1279643694:2010-07-21T00:34:54.943+0000:1279643694:2010-07-21T00:34:54.943+0000:Claus-

   See my comments on AMQ-2826. Similar techniques could be applied to get the cassandra component to build under 1.5. (It would be slightly cleaner than the activemq persistence adapter wrestling I had to do)

But as my comments said, this gets you a working build, but relies on an external cassandra instance if you actually want to run the tests, which isnt great for future maintainability or development.

Worth Doing anyhow?


davsclaus:1279832318:2010-07-23T04:58:38.368+0000:1279832318:2010-07-23T04:58:38.368+0000:We could maybe start to add JDK 1.6 only components to Camel and have profiles in maven to only compile/build/test if running under JDK 1.6.
We do have a CI setup which runs all platforms on JDK 1.5 and 1.6. So this allows us to test it anyway.

However I wonder if this impacts the release process? I think Hadrian already uses JDK 1.6 but let's touch base with him.

davsclaus:1309317528:2011-06-29T11:18:48.071+0000:1309317528:2011-06-29T11:18:48.071+0000:Scott would you like to donate your cassandra component for Apache Camel? If so could you attach a zip/tar with the source code to this JIRA and mark [x] in grant license to Apache.

Then we can get that into the next upcoming Camel release.
t1ckt0ck:1326881302:2012-01-18T18:08:22.708+0000:1326881302:2012-01-18T18:08:22.708+0000:Uploaded the current source.
davsclaus:1326881391:2012-01-18T18:09:51.225+0000:1326881391:2012-01-18T18:09:51.225+0000:Thanks Scott.

Assigning this for the next 2.10 release.
cemmersb:1343135099:2012-07-24T21:04:59.332+0000:1343135099:2012-07-24T21:04:59.332+0000:Dear all,
I was just checking on the progress of the camel-cassandra component integration and could not discover anything un 2.10
Did I miss anything? It would be really great if the component could be pulled into one of the next releases.

Many greets and kind regards,

Christoph
muellerc:1343221217:2012-07-25T21:00:17.283+0000:1343221217:2012-07-25T21:00:17.283+0000:Thanks for the reminder. I think we missed this. I'm sure a committer will have a look at it soon.
cemmersb:1343304004:2012-07-26T20:00:04.460+0000:1343304004:2012-07-26T20:00:04.460+0000:Seems like it is not that easy getting it up and running again since it is based on cascal and the cascal repo seems to be down.
So I wonder if Scott is still able to provide a working build.
t1ckt0ck:1343731953:2012-07-31T18:52:33.953+0000:1343731953:2012-07-31T18:52:33.953+0000:So yeah, the camel-connector is based on a pretty old version of cassandra and cascal now has a new maintainer

https://github.com/ticktock/camel-cassandra  is the connector 

https://github.com/Shimi/cascal is the maintained fork of cascal

I wont have time immediately to take pass at updating this, but will try to make some time relatively soon. If anyone else wants to do so please go ahead, there shouldnt be any coding just getting the new versions of cascal and cassandra into the pom
davsclaus:1344828746:2012-08-13T11:32:26.410+0000:1344828746:2012-08-13T11:32:26.410+0000:The component would be more useable for people if it was java code only, as then you dont drag along scala dependency. All the camel components is in java code, which makes them easy for everyone to fix and improve.
aynalem:1365409219:2013-04-08T16:20:19.694+0000:1365409219:2013-04-08T16:20:19.694+0000:I've forked Scott's work and started rewriting the camel-cassandra module without the scala dependency using the java cassandra thrift api
https://github.com/mayn/camel-cassandra

still in progress, feedback appreciated.
davsclaus:1365409773:2013-04-08T16:29:33.483+0000:1365409773:2013-04-08T16:29:33.483+0000:Matthew this sounds great. Thanks for stepping up.
gquintana:1411301286:2014-09-21T20:08:06.968+0000:1411301286:2014-09-21T20:08:06.968+0000:I tried to write my own Cassandra component. It's completly different from the previous one since it's based on the CQL3 API (not the Thrift one) and the Java Driver by DataStax (Apache License). 
https://github.com/gquintana/camel/tree/camel-cassandraql/components/camel-cassandraql

I have a some doubts about:
* The component name: Cassandra? CQL? I choose CassandraQL thinking about a potential CassandraThrift component
* How to inject a CQL query in the endpoint using the URI without messing the URI parser? I might borrow ideas from SQL component.

Feedback appreciated
davsclaus:1419301491:2014-12-23T10:24:51.886+0000:1419301491:2014-12-23T10:24:51.886+0000:Thanks Gerald

Going to merge your PR. Do you mind help with documentation?
And are there still things to do?

The CQL can maybe be injected using property placeholders,
For example as we do in the sql example
http://camel.apache.org/sql-example.html

and also you can maybe refer to a bean to lookup in the registry that provides the query.

githubbot:1420013770:2014-12-31T16:16:10.281+0000:1420013770:2014-12-31T16:16:10.281+0000:Github user gquintana closed the pull request at:

    https://github.com/apache/camel/pull/327

acosentino:1420420733:2015-01-05T09:18:53.289+0000:1420420733:2015-01-05T09:18:53.289+0000:I've been working on another one component similar to this. I don't think it will be merged in camel, anyway I will update this issue and the dev mailing list when this component will be ready.
gquintana:1420421516:2015-01-05T09:31:56.880+0000:1420421692:2015-01-05T09:34:52.083+0000:I can help documentation, what is the process? I have a Camel Confluence account but I am not granted to edit pages. Or should I improve the Markdown page...

TODO: Fix the paragraph about Cassandra in http://camel.apache.org/clustering-and-loadbalancing.html
gquintana:1420421601:2015-01-05T09:33:21.005+0000:1420421601:2015-01-05T09:33:21.005+0000:We can join our efforts to make this component better.
acosentino:1420534398:2015-01-06T16:53:18.463+0000:1420534398:2015-01-06T16:53:18.463+0000:For sure :-)

This is the first version of the component:

https://github.com/oscerd/camel-cassandra

I was thinking to release this as an external camel component to install as OSGI bundle.

Anyway I'd really like to help with the ""official"" cassandra camel component.

Andrea
acosentino:1420534642:2015-01-06T16:57:22.058+0000:1420534642:2015-01-06T16:57:22.058+0000:Documentation will be available soon :-)
gquintana:1420595246:2015-01-07T09:47:26.121+0000:1420595246:2015-01-07T09:47:26.121+0000:Started wiki page https://cwiki.apache.org/confluence/display/CAMEL/Cassandra
robd:1421217969:2015-01-14T14:46:09.977+0000:1421217969:2015-01-14T14:46:09.977+0000:There's a bug in this new component in CassandraProducer when you try to do a select as an enricher.

There's no component yet for this in Jira (so hence logged bug here).

My route:

 <route id=""organisationCacheUpdater"">
        	<from uri=""quartz://orgRefresh?trigger.repeatInterval=60000""/>
        	<to uri=""cql:orgCassandra?hosts=localhost&amp;port=9042&amp;keyspace=foo&amp;cql=select * from organisations""/>
        	.. snip
</route>

The bug happens because getCqlParams is always called and the component always try to prepare a statement even for just a simple query with no params.

I had to totally hack the route to get this to work:

Even setting body to [] (no params didn't work).

<route id=""organisationCacheUpdater"">
        	<from uri=""quartz://orgRefresh?trigger.repeatInterval=60000""/>
        	<setBody>
               <groovy>""0""</groovy>
            </setBody>
        	<to uri=""cql:orgCassandra?hosts=localhost&amp;port=9042&amp;keyspace=foo&amp;cql=select * from organisations where token(key) %3c token(?)""/>
        	.. snip
</route>
gquintana:1421221367:2015-01-14T15:42:47.803+0000:1421221367:2015-01-14T15:42:47.803+0000:Tested with the URI ""cql://localhost/camel_ks?cql=select login, first_name, last_name from camel_user"" and a body containing an empty collection (Collections.emptyList()), and it works.

Yet I understand your problem, what kind of solution would you suggest to disable parameter binding when it's not required? 
* Test if body contains some special value (null, empty array, empty collection...)?
* Test if header/URI contains some special flag to disable parameter binding?
* Parse CQL statement to check whether there are ""?"" or "":paramName"" tokens?
* Introduce a pluggable ""parameter binding strategy""?

robd:1421222300:2015-01-14T15:58:20.866+0000:1421222300:2015-01-14T15:58:20.866+0000:I keep getting when I pass in Collections.emptyList() or []:

com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.exceptions.DriverException: Host replied with server error: java.lang.IndexOutOfBoundsException: Not enough readable bytes - Need 4, maximum is 0))

Perhaps it is dependent on the version of Cassandra.  Currently running DSE 3.1.6 (which we run in production so somewhat tied to this).

Certainly supporting a check on either an empty [] or empty collection and not doing parameter binding in this case would be very useful.
gquintana:1421225892:2015-01-14T16:58:12.878+0000:1421225892:2015-01-14T16:58:12.878+0000:Check if this branch solves your problem:
https://github.com/gquintana/camel/tree/camel-component-bugfixes
robd:1421305090:2015-01-15T14:58:10.739+0000:1421305090:2015-01-15T14:58:10.739+0000:Thanks for the update.

I got this to work with your new parameter prepareStatements=false in the url.

Without that it still failed at line 117 of CassandraProducer

resultSet = session.execute(lPreparedStatement.bind());

with

com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.exceptions.DriverException: Host replied with server error: java.lang.IndexOutOfBoundsException: Not enough readable bytes - Need 4, maximum is 0)) [See nested exception: com.datastax.driver.core.exceptions.NoHostAvailableException: All host(s) tried for query failed (tried: localhost/127.0.0.1:9042 (com.datastax.driver.core.exceptions.DriverException: Host replied with server error: java.lang.IndexOutOfBoundsException: Not enough readable bytes - Need 4, maximum is 0))]

Again this could be cause of the version of Cassandra I'm running (DSE 3..1.6).  I doesn't appear to like binding with no parameters.
gquintana:1421306394:2015-01-15T15:19:54.173+0000:1421306394:2015-01-15T15:19:54.173+0000:Great I'll do pull request from this branch. Thanks for reporting.
DSE 3.1.6 is Cassandra 1.2, CQL3 was pretty young by this time. You may post this error on Cassandra ML or SO.
davsclaus:1423191988:2015-02-06T11:06:28.683+0000:1423191988:2015-02-06T11:06:28.683+0000:Is there any of those latest bug reports / fixed needed to be included in the Apache Camel release? If so please submit a patch so we can include it.
githubbot:1424182145:2015-02-17T22:09:05.309+0000:1424182145:2015-02-17T22:09:05.309+0000:GitHub user gquintana opened a pull request:

    https://github.com/apache/camel/pull/397

    CAMEL-2939: Cassandra component improvement and bugfixes

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gquintana/camel camel-2939-cassandra-component-bugfixes

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/397.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #397
    
----
commit cbdfa4be0bab60a31a0a95d9a5ee604d5d09780e
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2015-01-14T15:55:07Z

    CAMEL-2939: Allow to use statements without parameters

commit b33a52acf0572c437bd8bb14572366de789f022f
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2015-01-14T16:54:08Z

    CAMEL-2939: Allow to use unprepared statements

commit 80b774e0a8685ed3cc4459e83af870c985c73d68
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-01-14T20:50:09Z

    CAMEL-2939: Make AggregationRepository recoverable

commit b6b3c8ebe80a386dc9199afbb465a04b081c6fd5
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-01-17T21:25:21Z

    CAMEL-2939: Add unnamed repositories for aggregation and idempotent

commit 89e549a8e04d43c1daad4101aab1e0d716053c2c
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-01-18T16:14:55Z

    CAMEL-2939: Use QueryBuilder to generate CQL instead of StringBuilder

commit 87e83af3f4a261b457342bc942c2ffb598713366
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-01-18T16:15:37Z

    CAMEL-2939: Fix SLF4J warning in unit tests

commit 336d17395539647b8cc7f782cc7100113a8a716f
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-01-18T20:29:41Z

    CAMEL-2939: Support for RegularStatement in messages processed by Producer

commit 24f185b5326ef1774ba55a8222747035d3c82882
Author: Gerald Quintana <gerald.quintana@gmail.com>
Date:   2015-02-17T22:05:24Z

    CAMEL-2939: Fix Cassandra IdempotentRepository boolean return values

----

gquintana:1424182193:2015-02-17T22:09:53.138+0000:1424182193:2015-02-17T22:09:53.138+0000:Just submitted PR https://github.com/apache/camel/pull/397
davsclaus:1424221917:2015-02-18T09:11:57.024+0000:1424221917:2015-02-18T09:11:57.024+0000:Thanks the PR has been merged
githubbot:1424657788:2015-02-23T10:16:28.514+0000:1424657788:2015-02-23T10:16:28.514+0000:Github user gquintana closed the pull request at:

    https://github.com/apache/camel/pull/397
"
0,CAMEL-2938,Improvement,Major,None,None,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Moulliard Charles,0,0,2010-07-12 10:46:13+00:00,2011-04-24 09:58:17+00:00,"The wiki web page of dataset is not up to date http://camel.apache.org/dataset.html


1 ) Option minRate is not described
2) ActiveMq loadtesting of Camel does not exist anymore --> https://svn.apache.org/repos/asf/activemq/trunk/activemq-camel-loadtest/","cmoulliard:1278904395:2010-07-12T11:13:15.642+0000:1278904395:2010-07-12T11:13:15.642+0000:wiki page updated for option minRate

Can we remove the section ""Load testing ActiveMQ with Camel"" ?
davsclaus:1278906477:2010-07-12T11:47:57.484+0000:1278906477:2010-07-12T11:47:57.484+0000:Yeah please remove that section 
cmoulliard:1278979398:2010-07-13T08:03:18.121+0000:1278979398:2010-07-13T08:03:18.121+0000:Section removed

Question : Is the definition of the parameter : minRate correct ?

minRate = Wait till that the minimum rate of messages is raised 
davsclaus:1303610297:2011-04-24T09:58:17.042+0000:1303610297:2011-04-24T09:58:17.042+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2937,Bug,Major,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-07-11 16:26:41+00:00,2013-05-02 02:30:57+00:00,"Since the stream could be System.out or System.err, the producer does not close the stream ever. It should close all streams with the noted exceptions.","hadrian:1278837397:2010-07-11T16:36:37.702+0000:1278837397:2010-07-11T16:36:37.702+0000:r963105
davsclaus:1303610281:2011-04-24T09:58:01.328+0000:1303610281:2011-04-24T09:58:01.328+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2936,New Feature,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-07-10 16:59:46+00:00,2011-04-24 09:57:15+00:00,"A ScheduledRoutePolicy which can suspend/resume routes based on a user configuration.
The scheduled should invoke a callback on regular bases where end user can determine if the routes should be active nor not.
For example we may even let it be defined using cron or the likes.","akarpe:1283518925:2010-09-03T21:02:05.266+0000:1283519125:2010-09-03T21:05:25.392+0000:Hi Claus,

Is this a policy that will be registered against a camel context to provide guidance on how/which routes may be started/stopped.

BTW, I recently put together a cool piece of code that does route mutations of producers/consumers on the fly based on JMX event notifications. I wonder if I could roll this kind of capability with the camel context as well allowing a user to mutate a route on the fly.

Please let me know.

Cheers,

Ashwin... 
davsclaus:1283570480:2010-09-04T11:21:20.039+0000:1283570480:2010-09-04T11:21:20.039+0000:Ashwin check this documentation
http://camel.apache.org/routepolicy.html

The idea is to assign routes with a policy which dictates when those routes is active.

The policy should have it easy to define rules such as based on CRON or a simple rules based on a window opening (eg. 8am to 6pm).
The trick is with CRON we have to leverage quartz as it got a CRON parser. Or in the future Spring 3 which may also have one.

But for starters go for the simple solution with something that is easy to configure out of the box.
Sometimes people want routes to be inactive during night time when backup and other jobs may run.
akarpe:1284646575:2010-09-16T22:16:15.657+0000:1284646611:2010-09-16T22:16:51.706+0000:Hi Claus, 

The real challenge with the scheduled route policy support it seems is in re-starting the route or a consumer at a given time and the most elegant and only real way is to use a CRON parser. 

I looked for a way to implement this capability in camel-core, however, I find that I will need to edit the pom and add a quartz dependency which I would like to avoid. Given this, it seems like only other way is to offer this via the camel-quartz component and not camel-core. In this case, I will be able to get add a comprehensive, extensive & rich set of policies utilizing quartz scheduling capabilities. 

Please let me know what you think. If there is any other way to do this please let me know. 

I will proceed along the lines described above and avoid mucking up the camel core with this dependency unless you recommend otherwise. 

Cheers, 

Ashwin...
akarpe:1284646775:2010-09-16T22:19:35.511+0000:1284646775:2010-09-16T22:19:35.511+0000:Hi Claus,

I am extending the abstract RoutePolicySupport class and add a ScheduledRoutePolicySupport class in the camel core which I intend to use in the Scheduled RoutePolicy code...

Cheers,

Ashwin...
davsclaus:1284675821:2010-09-17T06:23:41.103+0000:1284675821:2010-09-17T06:23:41.103+0000:Yeah perfect to supply the cron based in camel-quartz.

You can have some base class on camel-core if that makes sense.
akarpe:1285320234:2010-09-24T17:23:54.819+0000:1285320234:2010-09-24T17:23:54.819+0000:Hi Claus,

I am attaching 2 patches (1 for camel core, 1 for camel quartz) for this ScheduledRoutePolicy feature in Camel. I am offering both a Cron based and Simple ScheduledRoutePolicy support.

I could have come up with one patch, but the core patch could be added independent of the quartz patch.
In the core patch, I have added an extra API to the RoutePolicy support for stopRoute() which takes into account an ability to provide a timeout for graceful shutdown before shutting down a route.

I have unit-tested & source-checked the feature and am offering the capability for your comment. I will check it in shortly.

Cheers,

Ashwin...
akarpe:1285327432:2010-09-24T19:23:52.769+0000:1285327432:2010-09-24T19:23:52.769+0000:Hi Claus,

I did a thorough re-check of the policy feature and find everything in compliance with the things you have typically identified in the past. I will check in the ScheduledRoutePolicy for now. I will of course be happy to perform any edits based on your thoughts and comments.

Cheers,

Ashwin...  
akarpe:1285327680:2010-09-24T19:28:00.315+0000:1285327680:2010-09-24T19:28:00.315+0000:Checked in camel-core patch as revision r1001004
Checked in camel-quartz patch as revisions (r1001028 & r1001031)
davsclaus:1285365902:2010-09-25T06:05:02.830+0000:1285365942:2010-09-25T06:05:42.043+0000:Looks good, however there are two issue = OSGi & not re-using existing quartz scheduler.

Loading properties should be using the {{ClassResolver}} from {{CamelContext}}. See the {{loadProperties}} method in {{QuartzComponent}}.

But I think a better solution would be to re-use the {{QuartzComponent}} in the route policy. As the component has all the quartz scheduler bits already and working in OSGi.
Also people want to use the same quartz scheduler for route policies and if they use quartz in the camel routes as well. 

You can get the quartz component from the {{onInit}} method

{code}
QuartzComponent quartz = route.getRouteContext().getCamelContext().getComponent(""quartz"", QuartzComponent.class);
{code}

So your class {[ScheduledRoutePolicy}} should use {{QuartzComponent}}. 

You may need to alter the API in QuartzCompent a bit if there is some pieces missing for you.
davsclaus:1285366087:2010-09-25T06:08:07.247+0000:1285366087:2010-09-25T06:08:07.247+0000:And we need unit tests which is using Spring XML as well.

And would be nice with java doc on the some of the methods that the Camel end user can configure. Just so he understands what it does, eg {{setRouteStopGracePeriod}}
akarpe:1285390348:2010-09-25T12:52:28.658+0000:1285390348:2010-09-25T12:52:28.658+0000:Hi Claus,

Sure thing. I will check out the Quartz Component and use its capabilities to loadProperties and link the Route Policy more closely to the QuartzComponent. 

Will add Spring tests to the component as well.

Cheers,

Ashwin...
akarpe:1285677968:2010-09-28T20:46:08.523+0000:1285678060:2010-09-28T20:47:40.225+0000:Hi Claus,

Please find attached an update patch for the ScheduledRoutePolicy support
I have modified the code to make use of the QuartzComponent and use its API's to get a reference to the scheduler. I have also added Spring unit tests and verified that everything is in order including checkstyle checks to ensure the code is style compliant.

Please let me know if you have would like any other updates. I will check this in and will be happy to incorporate any changes or updates you seek.

Cheers,

Ashwin...  
akarpe:1285680208:2010-09-28T21:23:28.989+0000:1285680208:2010-09-28T21:23:28.989+0000:Committed camel-quartz updated patch as revision r1002354
davsclaus:1303610235:2011-04-24T09:57:15.576+0000:1303610235:2011-04-24T09:57:15.576+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2935,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Martin Krasser,0,0,2010-07-10 10:01:35+00:00,2011-04-24 09:57:26+00:00,"The recent change in ProducerCache.send


ProducerCache.java
    public void send(Endpoint endpoint, Exchange exchange) {
        try {
            sendExchange(endpoint, null, null, exchange);
            // RECENT CHANGE HERE:
            // ensure that CamelExecutionException is always thrown
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
        } catch (Exception e) {
            throw wrapCamelExecutionException(exchange, e);
        }
    }




that throws a CamelExecutionException if exchange.getException is not null, makes it impossible for DefaultProducerTemplate.asyncCallback to report failures (other than fault messages) asynchronously via Synchronization.onFailure


DefaultProducerTemplate.java
    public Future<Exchange> asyncCallback(final Endpoint endpoint, final Exchange exchange, final Synchronization onCompletion) {
        Callable<Exchange> task = new Callable<Exchange>() {
            public Exchange call() throws Exception {

                // FIXME: exception is thrown in Camel 2.4 where a normal return with answer.getException != null was done in Camel 2.3
                Exchange answer = send(endpoint, exchange);

                if (answer.isFailed()) {
                    onCompletion.onFailure(answer);
                } else {
                    // ...
                }
                return answer;
            }
        };
        // ...
    }




This was working in Camel 2.3 (but unfortunately there wasn't any test case for it). I attached a patch for DefaultProducerTemplateAsyncTest that demonstrates the problem. I didn't commit a fix yet because I'm unsure at the moment about the best way to fix that. Of course I tried a naive fix in the DefaultProducerTemplate.asyncCallback methods which causes the test (in the patch) to pass but I'd like to hear other opinions before I continue.","davsclaus:1278728286:2010-07-10T10:18:06.411+0000:1278728362:2010-07-10T10:19:22.055+0000:Ah well spotted. We should definitely have an unit test for this so callbacks *always* can handle the reply.

I would suggest to change the internals of producer template to have a *send* method to be used for the sync cases (the one we got now, so no changes needed for the sync cases).

However for the async we should introduce a new {{sendAsync}} variation that the various {{asyncCallback}} methods leverage.
Then that method is used in the {{call}} method as shown above.
mrt1nz:1278728686:2010-07-10T10:24:46.523+0000:1278728686:2010-07-10T10:24:46.523+0000:Thanks for your feedback Claus. Sounds good to me, I'll try that.
davsclaus:1278729461:2010-07-10T10:37:41.531+0000:1278729461:2010-07-10T10:37:41.531+0000:In fact you may want to ensure sendAsync never throws exception, but instead always set the thrown exception on the Exchange. This ensure that in the {{call}} method we can invoke the {{onFailure}} method on the {{onCompletion}} callback.
mrt1nz:1278732924:2010-07-10T11:35:24.528+0000:1278732986:2010-07-10T11:36:26.839+0000:Claus, I'd like to first suggest a solution as implemented by {{on-failure.patch}}. This is a solution that fixes the problem with only minimal changes (i.e. without introducing new {{sendAsync}} methods). In this patch I simply moved

{code:java}
            if (exchange.getException() != null) {
                exchange.setException(wrapCamelExecutionException(exchange, exchange.getException()));
            }
{code} 

from {{ProducerCache.send(Endpoint, Exchange)}} to {{ProducerTemplate.send(Endpoint, Exchange)}} because it is the *only* user of  {{ProducerCache.send(Endpoint, Exchange)}}. In {{ProducerCache.asyncCallback(Endpoint, Exchange, Synchronization)}} the {{ProducerCache.send(Endpoint, Exchange)}} is now used directly (and this again re-introduces the same behaviour as in Camel 2.3). All the camel-core tests run through locally (except SplitterStreamCache test but it also fails without the changes ... so it must be something else).

Although, I see this issue as resolved with this patch, I still don't understand why the if-statement above was introduced only for {{ProducerCache.send(Endpoint, Exchange)}} and not for the other {{ProducerCache.send}} methods as well. This looks somehow inconsistent to me. Maybe I just miss something obvious. 

If you are fine with the provided patch, please let me know and I'll commit the changes.
davsclaus:1278737491:2010-07-10T12:51:31.697+0000:1278737491:2010-07-10T12:51:31.697+0000:Okay I had a look at the patch and have been fixed the issue.

The problem was that {{ProducerTemplate}} interface has been tighten up a bit to ensure that all methods will thrown a {{CamelExecutionException}} if any of the {{send}} or {{request}} methods is invoked. This ensures its consistent. Before there where a few methods which didn't do this. This causes the end user to be a bit confused and they would then have to double check with try .. catch and the Exchange as well.

Unfortunately the fix was done at {{ProoducerCache}} instead on {{DefaultProducerTemplate}} itself. So I have fixed this. Running full test before committing.


mrt1nz:1278738653:2010-07-10T13:10:53.236+0000:1278738653:2010-07-10T13:10:53.236+0000:Great, thanks!
davsclaus:1278738909:2010-07-10T13:15:09.396+0000:1278738909:2010-07-10T13:15:09.396+0000:In fact I am tighten up a bit on the {{ProducerCache}} as well and ensuring the javadoc states the contract. 

Now exceptions is not thrown but stored on the returned Exchange which ensures a friendly API which caters for both the synchronous and asynchronous routing engine in Camel.

davsclaus:1278743166:2010-07-10T14:26:06.127+0000:1278743228:2010-07-10T14:27:08.748+0000:I have to fix some unit tests which was relying on the old behavior of {{template.send(Exchange)}} and {{template.request(Exchange)}} not throwing an exception, which wasn't entirely covered by the first fix. Now with all the template methods fixed they surface some tests which now fails due to the tighten contract.

davsclaus:1278750086:2010-07-10T16:21:26.930+0000:1278750086:2010-07-10T16:21:26.930+0000:I have cleared the confusing of the {{ProducerTemplate}} and {{ProducerCache}} API.

I had made a minor mistake before which causes several tests to fail. I have corrected this and the problem is in fact just the async behavior Martin reported.

Running full tests now, before committing.
davsclaus:1278766608:2010-07-10T20:56:48.296+0000:1278766608:2010-07-10T20:56:48.296+0000:trunk: 962915.
mrt1nz:1278808764:2010-07-11T08:39:24.810+0000:1278808764:2010-07-11T08:39:24.810+0000:Just upgraded Akka to the latest Camel 2.4-SNAPSHOT and all tests are now running through. Thanks again!
davsclaus:1303610246:2011-04-24T09:57:26.674+0000:1303610246:2011-04-24T09:57:26.674+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2934,New Feature,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-10 06:50:56+00:00,2011-07-01 09:40:53+00:00,"The changed read lock
http://camel.apache.org/file2.html


Is currently only avail for the file component. We should make it generic to leverage the operations API so we can use it from FTP also.
And we should allow URI parameters to configure it using readLock. prefix, so you can do


readLock.timeout=5000&readLock.changedInterval=2000


This means the readLockTimeout should be @deprecated as we just leverage the Camel prefix properties mechanism to auto set the options.


The changed read lock should also have a new option to set the steady interval. The time period in which the file must not have been changed. Currently its fixed to 1 second. But end users could set it to 5 sec. to ensure that the file hasn't been touched for that min. period.","tricasoft:1309321737:2011-06-29T12:28:57.198+0000:1309321737:2011-06-29T12:28:57.198+0000:Modified files in
trunk/components/camel-ftp/src/main/resources/META-INF/services/org/apache/camel/component :
ftp, ftps, sftp

Added package strategy
trunk/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/strategy

Added 4 java files in package strategy:
FtpChangedLockStrategy.java
FtpProcessStrategyFactory.java
SftpChangedLockStrategy.java
SftpProcessStrategyFactory.java
davsclaus:1309401884:2011-06-30T10:44:44.429+0000:1309401884:2011-06-30T10:44:44.429+0000:Thanks for the patch. I had to do a few adjustments to keep the current behavior for the other read lock options.

We may want to improve and look into if its possible to gather file modification / file size details without doing a list dir operation.

I set the default interval to 5 sec and timeout for 20 sec for FTP. For files its 1 sec and 10 sec.
tricasoft:1309484453:2011-07-01T09:40:53.402+0000:1309484453:2011-07-01T09:40:53.402+0000:I'm glad I could help.
I think we could improve the gathering of file modification / size details but we need to add specific operations to the FtpOperations and Sftpperations classes - and surely to the GenericFileOperations - that get this info by sending a specific command to the servers."
0,CAMEL-2933,Improvement,Major,None,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-10 06:46:41+00:00,2020-05-18 21:15:54+00:00,"Currently you need to enlist JmxEventNotifier to have JMX event notifications.


It's much more intuitive that these notifications is exposed from the existing CamelContext MBean.
Then end users dont have to remember to enlist the JmxEventNotifier, as they notifications is provided out of the box.","davsclaus:1282614708:2010-08-24T09:51:48.856+0000:1282614708:2010-08-24T09:51:48.856+0000:Lets keep it as is. The JMX MBeanName is using an easy to use default name so management tooling can easily attach listeners if they want.

However end users need to enable notification by registering {{JmxNotificationEventNotifier}} as an event listener.
davsclaus:1303610233:2011-04-24T09:57:13.231+0000:1303610233:2011-04-24T09:57:13.231+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2932,Task,Minor,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Claus Ibsen,0,0,2010-07-09 15:08:44+00:00,2011-04-24 09:58:04+00:00,Google GAE 1.3.5 is out,"njiang:1282862511:2010-08-27T06:41:51.512+0000:1282862511:2010-08-27T06:41:51.512+0000:The latest GAE is 1.3.6.

njiang:1282866825:2010-08-27T07:53:45.368+0000:1282866825:2010-08-27T07:53:45.368+0000:Done,  camel-gae is using the API 1.3.6.
davsclaus:1303610284:2011-04-24T09:58:04.850+0000:1303610284:2011-04-24T09:58:04.850+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2931,Task,Minor,2.3.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-09 14:59:26+00:00,2011-04-24 09:58:23+00:00,No Desc,"davsclaus:1278659068:2010-07-09T15:04:28.010+0000:1278659068:2010-07-09T15:04:28.010+0000:Upgraded stuff at Camel side. Now we need an updated OSGi wrapped bundle at SMX.
davsclaus:1278715166:2010-07-10T06:39:26.132+0000:1278715178:2010-07-10T06:39:38.754+0000:Okay this requires SMX upgraded as well so the OSGi itests can run because they reuse the protoc generated classes from camel-protobuf.

When the SMX bundle has been upgraded then reverse merge this commit rev:
{code}
svn merge --change -962769 .
{code}

And upgrade the version in the features.
davsclaus:1279486008:2010-07-19T04:46:48.989+0000:1279486008:2010-07-19T04:46:48.989+0000:trunk: 965352.
davsclaus:1279496982:2010-07-19T07:49:42.850+0000:1279496982:2010-07-19T07:49:42.850+0000:trunk: 965379.

Fixed osgi test
davsclaus:1303610303:2011-04-24T09:58:23.903+0000:1303610303:2011-04-24T09:58:23.903+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2930,Task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-07-09 14:35:38+00:00,2011-04-24 09:58:11+00:00,"Now that we ship with Spring 3.0.x as the default, lets target camel-spring-security for Spring 3.0.x as well.","njiang:1278695647:2010-07-10T01:14:07.166+0000:1278695647:2010-07-10T01:14:07.166+0000:There are some API change between Spring security 2.x and Spring security 3.x, so it may need us take some time to upgrade the spring security version from 2.0.5 to 3.0.x.
davsclaus:1278713386:2010-07-10T06:09:46.382+0000:1278713386:2010-07-10T06:09:46.382+0000:Willem no rush, we have set this as a target for Camel 2.5.
njiang:1278722167:2010-07-10T08:36:07.649+0000:1278722167:2010-07-10T08:36:07.649+0000:Committed the change and update the Release Note for it.
davsclaus:1303610291:2011-04-24T09:58:11.500+0000:1303610291:2011-04-24T09:58:11.500+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2929,Task,Trivial,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-09 14:23:52+00:00,2011-04-24 09:58:00+00:00,No Desc,davsclaus:1303610280:2011-04-24T09:58:00.470+0000:1303610280:2011-04-24T09:58:00.470+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2928,Task,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-07-09 05:55:31+00:00,2011-04-24 09:57:09+00:00,"SMX 4.4 will ship and use Spring 3.0.x as the default version. See SMX4-551


We should consider upgrading to Spring 3.0.x as the default version of Camel as well.
But we should keep it backwards comp to Spring 2.5. 


This requires though that we setup a test that uses Spring 2.5 as we have today with Spring 2.0.


In terms of the features file we may want to just keep the spring 3.x file and don't supply any spring 2.5 files?
Since Camel 2.4 is supposed to run in SMX 4.4 onwards.","davsclaus:1278636677:2010-07-09T08:51:17.593+0000:1278636677:2010-07-09T08:51:17.593+0000:Willem can you upgraded to spring version 3.0.3

Also the spring javaconfig project should use the 3.0.3 version.
njiang:1278637547:2010-07-09T09:05:47.974+0000:1278637547:2010-07-09T09:05:47.974+0000:@Claus,
Well spot, I just updated the default spring version to 3.0.3.RELEASE.

Now you can use spring-2.x profile if you want to build the camel with spring 2.5.6.
 
njiang:1278638266:2010-07-09T09:17:46.948+0000:1278638266:2010-07-09T09:17:46.948+0000:Also updated the wiki build page for it.
davsclaus:1278640269:2010-07-09T09:51:09.959+0000:1278640269:2010-07-09T09:51:09.959+0000:Added an itest for spring 2.5

trunk: 962467
davsclaus:1303610229:2011-04-24T09:57:09.109+0000:1303610229:2011-04-24T09:57:09.109+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2927,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Not A Problem,2.4.0,Claus Ibsen,Richard Burton,0,0,2010-07-08 20:40:29+00:00,2011-04-24 09:57:54+00:00,"The following code generates a compile time exception:


from(""direct:example"")
    .log(""This will break during compile time."")
    .aggregate().constant(true).completionSize(2)
    .completionTimeout(500L)
    .to(""mock:result"")
    ;


Compile time exception:


symbol  : method completionSize(int)
location: class java.lang.Object


When removing .log(""This will break during compile time.""), the project compiles successfully. I verified this holds true for .to and .wireTap as well.


Taking the example from https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregateGroupedExchangeBatchSizeTest.java and placing a .log or .to after the .from(..) reproduces the problem as well.","davsclaus:1278626416:2010-07-09T06:00:16.718+0000:1278626416:2010-07-09T06:00:16.718+0000:If you supply the expression as a parameter then you wont confuse the JDK compiler.

{code}
aggregate().constant(true).completionSize(2)
{code}

Should be
{code}
aggregate(constant(true)).completionSize(2)
{code}

Java Generics is really stretched to a max in terms of creating a DSL. And you can hit some odd combos with expressions and EIP patterns with sub routes (such as splitter, aggregator, choice etc.). The rule of thumb is to provide the expression as a parameter instead of the fluent builder.
davsclaus:1278626719:2010-07-09T06:05:19.402+0000:1278626719:2010-07-09T06:05:19.402+0000:I have updated the examples. But we can't fix the limitation of generics as a means of DSL in Java.

trunk: 962423.
davsclaus:1278633780:2010-07-09T08:03:00.387+0000:1278633780:2010-07-09T08:03:00.387+0000:We should most likely @deprecate those fluent builder methods which can lead to this issue, to force end users to provide the expression as a parameter. This only applies for the complex EIPs such as Aggregator, Splitter etc.
davsclaus:1303610274:2011-04-24T09:57:54.379+0000:1303610274:2011-04-24T09:57:54.379+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2926,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Ryan Callaghan,0,1,2010-07-08 19:09:19+00:00,2011-04-24 09:58:17+00:00,"The component is quite nice - however a good improvement would be allowing properties to be injected through Spring.


Currently there are two ways to do this using Spring.


1) Declare a bean with an id of properties:



<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""location"" value=""classpath:com/mycompany/myprop.properties""/>
</bean>




This would be improved if we could simply say:



<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""location"" ref=""myPropertiesBean""/>
</bean>




This would allow properties to be declared in Spring using <util:properties/>.  The same properties grouping could be injected into Camel as is injected into other beans.


2) Inline within the camelContext defined in Spring:



<camelContext ...>
   <propertyPlaceholder id=""properties"" location=""com/mycompany/myprop.properties""/>
</camelContext>




Similarly it would be nice to say:



<camelContext ...>
   <propertyPlaceholder id=""properties"" ref=""myPropertiesBean"" />
</camelContext>




I noticed CAMEL-2791 is out there to access JVM system properties - it would be good to not have to load as a system property to access them in Camel.","pegli:1278658626:2010-07-09T14:57:06.761+0000:1278658626:2010-07-09T14:57:06.761+0000:As a side note, this would be awesome for those of us who are using Camel inside an OSGi container and getting properties from the OSGi CM service!
davsclaus:1278660851:2010-07-09T15:34:11.216+0000:1278660851:2010-07-09T15:34:11.216+0000:Okay anything for OSGi.

I am adding a {{ref}} scheme so you can do

{code:xml}
<camelContext ...>
   <propertyPlaceholder id=""properties"" location=""ref:someId""/>
</camelContext>
{code}

Where {{someId}} is a id of a {{java.util.Properties}} to lookup in the {{Registry}}. Which in OSGi will check the OSGi service registry.
davsclaus:1278662406:2010-07-09T16:00:06.114+0000:1278662406:2010-07-09T16:00:06.114+0000:trunk: 962581.
davsclaus:1303610297:2011-04-24T09:58:17.327+0000:1303610297:2011-04-24T09:58:17.327+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2925,Improvement,Major,2.3.0,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-07-08 15:27:35+00:00,2011-04-24 09:57:49+00:00,"We need to reduce the testing time in Camel since we got so many tests now. For this to work wee need to make sure there are no side effects outside of a test (which is not always simple).


Side effects usually stem from using static fields in classes shared across multiple tests (such as caches of Exchanges, or whatnot), which should be avoided.","davsclaus:1278651036:2010-07-09T12:50:36.111+0000:1278651036:2010-07-09T12:50:36.111+0000:Nice even camel-spring is faster now, but also thanks to the Spring 3.0 upgrade.
hadrian:1278919361:2010-07-12T15:22:41.120+0000:1278919361:2010-07-12T15:22:41.120+0000:The important part is done camel-core and camel-spring, but there are a few components left that don't cleanup properly, such as jms and cxf.
Moving the rest of the work to 2.5.
davsclaus:1282873787:2010-08-27T09:49:47.485+0000:1282873787:2010-08-27T09:49:47.485+0000:Hadrian the most parts is done. Fell free to open tickets for JMS or CXF if you really want to attempt to make those run test in one JVM as well.
davsclaus:1303610269:2011-04-24T09:57:49.412+0000:1303610269:2011-04-24T09:57:49.412+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2924,Bug,Major,2.3.0,None,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Marco Crivellaro,0,0,2010-07-08 15:04:24+00:00,2011-04-24 09:57:32+00:00,"getting the endpoint URI of an HTTP EndPoint with httpClient.soTimeout property set won't return the property


i.e: ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"" is returned as ""http://crive.optadev.com/valde/utils/posttest.php""



I have noticed this using ExchangeHelper.resolveEndpoint:
String uri = ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"";
uri = ExchangeHelper.resolveEndpoint(exchange, uri.trim()).getEndpointUri();
//uri is now missing httpClient.soTimeout=5000




it is also happening reading @Header(Exchange.TO_ENDPOINT)



this is not happening when using the soTimeout option in FTP component.


I think this is a major issue as recipientList is making use of ExchangeHelper and therefore the option will be ingored.","crive:1278572840:2010-07-08T15:07:20.346+0000:1278572840:2010-07-08T15:07:20.346+0000:please ignore my last sentence about recipientList
davsclaus:1278627381:2010-07-09T06:16:21.726+0000:1278627381:2010-07-09T06:16:21.726+0000:What's your problem?

crive:1278632545:2010-07-09T07:42:25.709+0000:1278632545:2010-07-09T07:42:25.709+0000:calling

uriCamel = ExchangeHelper.resolveEndpoint(exchange, ""http://crive.optadev.com/valde/utils/posttest.php?httpClient.soTimeout=5000"").getEndpointUri();

will result in uriCamel = ""http://crive.optadev.com/valde/utils/posttest.php""

so without the ""httpClient.soTimeout=5000""

I've noticed the same behaviour using a retryUntil bean getting the header Exchange.TO_ENDPOINT: @Header(Exchange.TO_ENDPOINT) String target

target variable will be set to: ""http://crive.optadev.com/valde/utils/posttest.php""
davsclaus:1278633473:2010-07-09T07:57:53.844+0000:1278633473:2010-07-09T07:57:53.844+0000:But what do you use the resolveEndpoint for?

The getEndpointUri is important for Camel to use a consistent uri so it can lookup endpoints in its registry.

The http endpoint has lenient parameters, which means that you want to use the *same* http endpoint but being able to send different parameters to the http server

{code}
http://foo.com?a=foo
http://foo.com?a=bar
http://foo.com?a=foo&beer=yes
{code}
Should all use the same http endpoint, and thus get endpoint uri returns the same for all 3 instances.
This is by design.

The httpClient parameters is passed to the underlying HTTPClient instance which does the actual HTTP work.

crive:1278634270:2010-07-09T08:11:10.103+0000:1278634270:2010-07-09T08:11:10.103+0000:I am using a recipientList, in order to get additional parameters needed in my process (each for every endpoint)
I make use of resolveEndpoint to get the URI Camel is using internally to identify the endpoint (using a map with the URI as the key).

I thought this was a bug, as this is by design I will change the way I am currently creating the recipientList (by fist getting URI out of resolveEndpoint).


I've got a side question about this ""lenient parameters"":
would it be possible to have them in FTP component as well?
we are currently facing the problem that delivering several files (different file names) to a given FTP is creating a new FTP endpoint (and therefore connection) each time;
I know we can set the option to disconnect after every delivery but I think it would improve performances if we do not connect/disconnect on each file (we are sending a huge amount of data).
I can create a new ticket for this if you think it is sensible.

Thank you for the reply I really appreciate the responses I receive each time.


davsclaus:1278634938:2010-07-09T08:22:18.218+0000:1278634938:2010-07-09T08:22:18.218+0000:The FTP component supports providing the file name as a header. Use {{Exchange.FILE_NAME}} then you can reuse the same FTP endpoint and thus the same connection.
crive:1278635665:2010-07-09T08:34:25.923+0000:1278635665:2010-07-09T08:34:25.923+0000:Thank you.
njiang:1279246321:2010-07-16T10:12:01.759+0000:1279246321:2010-07-16T10:12:01.759+0000:I think we can close this issue, as it is fixed by CAMEL-2924.
davsclaus:1303610252:2011-04-24T09:57:32.794+0000:1303610252:2011-04-24T09:57:32.794+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2923,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-08 06:49:21+00:00,2011-04-24 09:57:09+00:00,"To allow to be notified when processing caused an Exception.
And also an event if Camel is performing a redelivery attempt.","davsclaus:1278648713:2010-07-09T12:11:53.948+0000:1278648713:2010-07-09T12:11:53.948+0000:trunk: 962496

There is a now a redelivery event, which you can listen to receive the caused exception if needed. And if there was no redelivery then the existing {{ExchangeFailedEvent}} can be used to see why it failed.
davsclaus:1303610229:2011-04-24T09:57:09.376+0000:1303610229:2011-04-24T09:57:09.376+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2922,Bug,Major,"2.1.0, 2.2.0, 2.3.0",2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,1,2010-07-08 05:13:50+00:00,2011-04-24 09:57:31+00:00,No Desc,"davsclaus:1278537285:2010-07-08T05:14:45.997+0000:1278537285:2010-07-08T05:14:45.997+0000:See CAMEL-1476

{quote}
The patch for this bug was removed in revision 779121. The result is that the XMPPConsumer does not remove the message from the MultiUserChat and the possibility for an OutOfMemoryException still exists.
The OOM occurs because the org.jivesoftware.smackx.muc.RoomListenerMultiplexor is a packet listener that contains a collector that stores all of the messages received up to a hard coded limit of 65k messages. These messages are not removed unless muc.pollMessage() or muc.nextMessage() is called. I'm not sure the reason behind storing these messages in a collector.

I have tested this in 2.1.0 and 2.3.0 and reviewed the code in 2.4-SNAPSHOT. I can supply a test case if needed.
{quote}
mark.ford:1279049237:2010-07-14T03:27:17.097+0000:1279049237:2010-07-14T03:27:17.097+0000:I haven't had a chance to look at integrating my test into the integration tests for this component. 

However, the snippet below is almost the same as what was originally applied and mistakenly overwritten. My only change is to call the non-blocking pollMessage() instead of nextMessage(). The non-blocking call seems safer in case the packet listener that's doing the collecting hasn't been called yet.

The diff below is from the 2.1.0 base. The method (public void processMessage(Chat chat, Message message)) is the same in the 2.4-SNAPSHOT version.

Index: XmppConsumer.java
===================================================================
--- XmppConsumer.java	(revision 960908)
+++ XmppConsumer.java	(working copy)
@@ -130,5 +130,9 @@
         } catch (Exception e) {
             exchange.setException(e);
         }
+        
+        if (muc != null) {
+            muc.pollMessage();
+        }
     }
 }

davsclaus:1279053376:2010-07-14T04:36:16.290+0000:1279053376:2010-07-14T04:36:16.290+0000:Thanks Mark for pointing this out. I have committed a fix and polished the logging a bit.

trunk: 963946.
davsclaus:1303610251:2011-04-24T09:57:31.803+0000:1303610251:2011-04-24T09:57:31.803+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2921,New Feature,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Hadrian Zbarcea,Mark Proctor,0,1,2010-07-08 03:17:50+00:00,2019-03-01 13:36:15+00:00,"It would be nice if we could customise DataFormatDefinitions inline:
marshal( ""jaxb?contextPath=org.domain.package"" )


Here is an outline of some code I think that would achieve this, however to be safe (imho) the resolver should only ever returned ""cloned"" copies of any registered DataFormatDefinition; to save the originally source from being altered.


I found this library (BSD license) that provides for reflection based cloning:
http://commonj.googlecode.com/svn/trunk/src/org/jcommon/clone/
Based on a blog  I read here:
http://www.matthicks.com/2008/05/fastest-deep-cloning.html


DataFormatDefinition



    public static DataFormat getDataFormat(RouteContext routeContext, DataFormatDefinition type, String ref) {
        if (type == null) {
            ObjectHelper.notNull(ref, ""ref or type"");
            
            // try to let resolver see if it can resolve it, its not always possible
            int pos = ref.indexOf( '?' );
            if ( pos < 0 ) {                                
                type = routeContext.getCamelContext().resolveDataFormatDefinition( ref );
            } else {
                type = routeContext.getCamelContext().resolveDataFormatDefinition( ref.substring(0, pos -1 ) );
            }        

            if (type != null &&  pos >= 0 ) {
                try {
                    Map<String, Object> parameters = URISupport.parseQuery( ref.substring( pos ) ); 
                    try {
                        IntrospectionSupport.setProperties(routeContext.getCamelContext().getTypeConverter(), type, parameters);
                    } catch (Exception e) {
                        throw new RuntimeException( ""Unable to set DataFormatDefinition properties '"" + ref + ""'"", e);
                    }
                } catch (URISyntaxException e) {
                    throw new RuntimeException( ""Unable to parse parameters "" + ref, e);
                }
                
                return type.getDataFormat(routeContext);
            }

            DataFormat dataFormat = routeContext.getCamelContext().resolveDataFormat(ref);
            if (dataFormat == null) {
                throw new IllegalArgumentException(""Cannot find data format in registry with ref: "" + ref);
            }

            return dataFormat;
        } else {
            return type.getDataFormat(routeContext);
        }
    }","mdproctor:1278605536:2010-07-09T00:12:16.690+0000:1278605536:2010-07-09T00:12:16.690+0000:This won't work for the moment, seems I need to get a better understanding of Dataformat and DataFormatDefinition resolving.
If seems that DataFormatDefintions are only created for customed dataformats, such as in the spring <dataformats> xml or by the user.

if you just do:
marshall( ""xstream"" )

That will not create a DataFormatDefinition, instead it creates DataFormat directly from the factory finder; based on the discovery of :
META-INF/services/org/apache/camel/dataforamt/xstream

Imho it would be cleaner for it to always return a DataFormatDefinition,  whichh would better support runtime augmentation by policy.

So when you do marshall( ""xstream"" ). Instead of creating the DataFormat directly, via the factory finder, it should instead create the DataFormatDefintion for xtream and then store that in the context's map of data format definitions; so that future resolving comes directly from there (don't forget to clone the dataformatdefinition before using). This should also add an over all level of consistency.

At the moment the factoryfinder points to the DataFormat class, instead that should be updated to point to the DataFormatDefinition class; this will need to be updated for all data format implementations.


mdproctor:1278605647:2010-07-09T00:14:07.535+0000:1278605647:2010-07-09T00:14:07.535+0000:I should add that doing this allows url like parameters to be easily supported. As those parameters just map to fields in the DataFormatDefinition; but ""xstream"" needs to return DataFormatDefinition for this to work, and not the xstream DataFormat.
davsclaus:1278650969:2010-07-09T12:49:29.813+0000:1278650969:2010-07-09T12:49:29.813+0000:Lets take a look at this after the 2.4 release.
davsclaus:1282714025:2010-08-25T13:27:05.867+0000:1282714025:2010-08-25T13:27:05.867+0000:Moving to Camel 3.0 as API changes.
davsclaus:1436625062:2015-07-11T22:31:02.147+0000:1436625062:2015-07-11T22:31:02.147+0000:There is the data format component
http://camel.apache.org/dataformat-component.html
davsclaus:1461625823:2016-04-26T07:10:23.500+0000:1461625823:2016-04-26T07:10:23.500+0000:You can use the data format component"
0,CAMEL-2920,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,James Strachan,0,0,2010-07-07 16:43:09+00:00,2011-04-24 09:58:11+00:00,"it seems you can dynamically create invalid routes which don't fail fast if there are errors.


e.g.



from(""seda:foo"").beanRef(""doesNotExist"", ""noMethodCalledThis"")




its only if a message is sent to ""seda:foo"" that the whole thing barfs. We should maybe check that the to can be validated first before allowing the consumer to startup? If nothing else failing faster and earlier helps users spot errors sooner","davsclaus:1278537139:2010-07-08T05:12:19.678+0000:1278537139:2010-07-08T05:12:19.678+0000:Yeah we should take a 2nd look at each processor and validate in the start method.
davsclaus:1278631533:2010-07-09T07:25:33.075+0000:1278631533:2010-07-09T07:25:33.075+0000:bean and method call using ref now check on startup if the bean exists in the registry

trunk: 962430.
jstrachan:1278632784:2010-07-09T07:46:24.126+0000:1278632784:2010-07-09T07:46:24.126+0000:great stuff! :)
davsclaus:1278636931:2010-07-09T08:55:31.315+0000:1278636931:2010-07-09T08:55:31.315+0000:trunk: 962451.

Method name is now also validated
davsclaus:1303610291:2011-04-24T09:58:11.926+0000:1303610291:2011-04-24T09:58:11.926+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2919,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-07 13:20:15+00:00,2011-04-24 09:57:29+00:00,"Introduce a Debugger API in SPI which can be leveraged by tooling and 3rd party.


To set breakpoints and the likes to debug message flows.","davsclaus:1278488346:2010-07-07T15:39:06.976+0000:1278488346:2010-07-07T15:39:06.976+0000:trunk: 961408

First spike of the API
davsclaus:1278546276:2010-07-08T07:44:36.190+0000:1278546276:2010-07-08T07:44:36.190+0000:trunk: 961615.

Now before/after process and added breakpoints for exchange events
davsclaus:1278563031:2010-07-08T12:23:51.884+0000:1278563031:2010-07-08T12:23:51.884+0000:trunk: 961732.

Added single step feature
davsclaus:1278627250:2010-07-09T06:14:10.021+0000:1278627250:2010-07-09T06:14:10.021+0000:The is now a basic API for debugger.

We can improve it later when we get more hands on experience using the API with a 3rd party Camel tooling.
davsclaus:1303610249:2011-04-24T09:57:29.812+0000:1303610249:2011-04-24T09:57:29.812+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2918,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-07 08:15:34+00:00,2011-04-24 09:57:39+00:00,No Desc,davsclaus:1303610259:2011-04-24T09:57:39.634+0000:1303610259:2011-04-24T09:57:39.634+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2917,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-07 06:09:59+00:00,2011-04-24 09:58:26+00:00,"a SPI to allow a custom hook to create processors based on the model definitions. The hook could also just alter the model defs before the processors is created, such as configuring new options or altering existing options etc.


See CAMEL-2914","davsclaus:1278460137:2010-07-07T07:48:57.301+0000:1278460137:2010-07-07T07:48:57.301+0000:Added wiki documentation
davsclaus:1303610306:2011-04-24T09:58:26.466+0000:1303610306:2011-04-24T09:58:26.466+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2916,Improvement,Minor,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-07-07 03:17:38+00:00,2011-04-24 09:57:28+00:00,"Some tests are only restricted to a few platforms using a canRunOnThisPlatform().


Instead of making this check in every test, a better implementation is to override runBare() and only check once. This method should also be provided in TestSupport actually, to make this feature available to the whole test suite.","hadrian:1278446429:2010-07-07T04:00:29.320+0000:1278446429:2010-07-07T04:00:29.320+0000:Running all tests now. I actually forgot that we have a few definitions of TestSupport and CamelTestSupport, plus the junit4 to be dealt with :(. There is more consolidation that would be good do be done sooner.
davsclaus:1278456024:2010-07-07T06:40:24.944+0000:1278456024:2010-07-07T06:40:24.944+0000:Nice
davsclaus:1278457157:2010-07-07T06:59:17.490+0000:1278457157:2010-07-07T06:59:17.490+0000:I wonder if there was a problem with the commit. I got this compiler error now
{code}
/Users/davsclaus/workspace/camel/components/camel-test/src/main/java/org/apache/camel/test/TestSupport.java:[65,12] cannot find symbol
symbol  : variable TestSupportNodeIdFactory
location: class org.apache.camel.test.TestSupport
{code}
davsclaus:1278457590:2010-07-07T07:06:30.007+0000:1278457590:2010-07-07T07:06:30.007+0000:Okay I got it and will commit a fix in about 20 min
hadrian:1278458058:2010-07-07T07:14:18.066+0000:1278458058:2010-07-07T07:14:18.066+0000:Sorry, my mistake. Added missing class. Thanks for pointing it out.
davsclaus:1303610248:2011-04-24T09:57:28.209+0000:1303610248:2011-04-24T09:57:28.209+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2915,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Mark Proctor,0,0,2010-07-07 02:49:12+00:00,2011-04-24 09:58:28+00:00,"Current the XStream DataFormatDefinition cannot be configured, beyond encoding. At a minimum it shoul support Converters, Aliases an Implicit Collections.","hadrian:1278446560:2010-07-07T04:02:40.996+0000:1278446560:2010-07-07T04:02:40.996+0000:Excellent contribution. I have to run all the tests for this one and take care of minor checkstyle fixes. Many thanks!
davsclaus:1278448408:2010-07-07T04:33:28.814+0000:1278448408:2010-07-07T04:33:28.814+0000:Do *not* use {{Class.forName}} to load classes. This doens't go well in various runtime environments such as OSGi, J2EE servers and whatnot.

Camel provides an API for loading classes, you access from {{CamelContext}}, using {{getClassResolver}} which then has methods for loading classes.
davsclaus:1278448558:2010-07-07T04:35:58.468+0000:1278448558:2010-07-07T04:35:58.468+0000:And when supplying patches then please respect the existing code format and do not re-format all the classes to a 80 char max length.

Patches is best when they only *alter* whats new and changed.
mdproctor:1278512993:2010-07-07T22:29:53.645+0000:1278512993:2010-07-07T22:29:53.645+0000:I had discussed the classloader issue with hadrain already, I wasn't sure of the correct way for that to happen in Camel, so I did something simple so Hadrian could easily correct the ""camel way"". I'm guessing he'll fix that as part of applying the patch his end.

I applied the Camel eclipse code formatter on those classes before committing. Maybe the formatter needs some tweaking?
davsclaus:1278536495:2010-07-08T05:01:35.694+0000:1278536495:2010-07-08T05:01:35.694+0000:We do have a checkstyle profile which you can run from maven, which we generally run from time to time to ensure the code adheres to it.

However there is no _code formatter_ we officially uses. There may be a very old profile for that somewhere in the etc folder. But don't use it.
So the rule of thump is to format the code in a human friendly way and use 140-160 line width etc.

And if in doubt just look at the existing source. However there may be some less used camel components which have a older style, eg. how they where donated to us.
But camel-core etc is generally showing the style we prefer.
davsclaus:1278536568:2010-07-08T05:02:48.362+0000:1278536568:2010-07-08T05:02:48.362+0000:Just out of curiosity

I could probably look in the XStream documentation, but I wonder what you need all those additional options for? Is it for fine grained control of the mapping?
And in which situations would you use that, over the default convention over configuration?


davsclaus:1278536646:2010-07-08T05:04:06.029+0000:1278536646:2010-07-08T05:04:06.029+0000:I noticed you added a driver option to the xstream data format.

Btw the json data format has a type option you can chose the library being used
- XStream (default)
- Jackson


davsclaus:1278536707:2010-07-08T05:05:07.620+0000:1278536707:2010-07-08T05:05:07.620+0000:You can read about checkstyle here and how to run it from mvn
http://camel.apache.org/building.html
mdproctor:1278568291:2010-07-08T13:51:31.321+0000:1278568291:2010-07-08T13:51:31.321+0000:""I could probably look in the XStream documentation, but I wonder what you need all those additional options for? Is it for fine grained control of the mapping?
And in which situations would you use that, over the default convention over configuration?""

The default xstream output is pretty verbose, these are the main configurations I use when customising the format of xml. We have put a lot of effort into trying to create an xml which is more user friendly.

""I noticed you added a driver option to the xstream data format.

Btw the json data format has a type option you can chose the library being used

    * XStream (default)
    * Jackson""

The existing json format uses xstream, but it is not tied to it. As such it would not make sense to start to add xstream specific configurations to that data format definition; they would not be relevant if you selected jackon. So if I want to use xstream's json but I want to have some mapping configurations, it will need to be done as part of the xstream dataformatdefinition.
davsclaus:1278568598:2010-07-08T13:56:38.749+0000:1278568598:2010-07-08T13:56:38.749+0000:Mark this is perfect. Thanks for taking the time to explain.
hadrian:1278587126:2010-07-08T19:05:26.565+0000:1278592709:2010-07-08T20:38:29.490+0000:Committed core patch at r961881.
Committed xstream patch at r961922.

Need to update documentation and then I'll close this. Mark, thanks for the patches!
mdproctor:1278610767:2010-07-09T01:39:27.996+0000:1278610767:2010-07-09T01:39:27.996+0000:This patch allows an XStream instance to be optionally injected via constructor or method for the instantiated Converters
davsclaus:1278649849:2010-07-09T12:30:49.421+0000:1278649849:2010-07-09T12:30:49.421+0000:Thanks Mark

I have applied your instance patch to trunk: 962504.
davsclaus:1303610308:2011-04-24T09:58:28.259+0000:1303610308:2011-04-24T09:58:28.259+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2914,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Mark Proctor,0,0,2010-07-06 19:30:13+00:00,2011-04-24 09:57:06+00:00,"Currently a Policy cannot change the child processor definitions, and the processor instances are created prior to wrap being called. I would like to see the child Processsor defintions passed to wrap, and the processor instances created afterwards.


As discussed in this mailing list post:
http://camel.465427.n5.nabble.com/Using-Policy-to-alter-Definitions-before-building-tt696567.html#a696567","hadrian:1278442268:2010-07-07T02:51:08.092+0000:1278442268:2010-07-07T02:51:08.092+0000:Patch applied with thanks to Mark: r961060.

I had to make a few changes for checkstyle and I changed the order of params in the swap method to be more like the existing Policy. Then I had to change a bit the test to change the ExpressionClause for the body to be reset.
hadrian:1278443595:2010-07-07T03:13:15.243+0000:1278443595:2010-07-07T03:13:15.243+0000:I have to update the wiki documentation tomorrow morning and then we can close this issue.

A slightly better variation of this would be to modify the signature of the wrap() method in PolicyDefinition itself and get rid of the DefinitionAwarePolicy class. Now we have these 2 different iterfaces that both represent policies that can inject code to be invoked during processing, but the DefinitionAwarePolicy is also capable of altering the route. No need for both, I think, the implementer of a Policy, could just ignore the last argument if it has no need to alter the route. Although a binary incompatible change, the migration is trivial.

I'll make this change tomorrow morning too, if there's no objection.
davsclaus:1278448082:2010-07-07T04:28:02.577+0000:1278448082:2010-07-07T04:28:02.577+0000:Damn we are still debating a solution on the mailing list. 

So please *don't* be so jumpy and apply patches so fast. I am not convinced this is the best solution right now.
Using policy to hack into the model is not the way to go.

Please discuss the proposal of a new SPI allowing to register a custom hook which can listen and react when the runtime processor model is created.
Then you can register the hook without using Policy or _polluting_ the routes.
hadrian:1278451615:2010-07-07T05:26:55.735+0000:1278451615:2010-07-07T05:26:55.735+0000:There are already a lot of users who use different uris for the endpoints in different environments (such as using mock endpoints in test environments). Using properties for these uris works very well. What camel lacks is a way to not only substitute endpoint uri values, but also parts of the routes do deal with slas and what not.

I agree that an spi for manipulating the entire ast is a great improvement, but that is not defined yet and this is a simple and non-intrusive solution that allows one to enhance (as opposed to pollute) a route. I don't feel strongly about modifying the Policy interface, we could leave the DefinitionAwarePolicy and deprecate it later if/when the spi will provide a better way.
davsclaus:1278452661:2010-07-07T05:44:21.544+0000:1278452684:2010-07-07T05:44:44.028+0000:Hadrian Camel already have an API for manipulating the routes before they are created
{{CamelContext.getRouteDefinition}} gives your the route in which you can manipulate all the way you like.

Its just that out of the box Camel will auto start the routes and there is not a super duper easy way of adding a hook which allows you to easily manipulate the route definitions.
See the discussion on the mailing list for a better alternative.

Hacking the policy is not the way to go. 

I am cooking up the {{ProcessorFactory}} SPI now so we have a easy way to register a custom hook.

For example this is from an unit test I got so far, which does what the PolicyAware stuff did.

{code}
    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext context = super.createCamelContext();
        // register our custom factory
        context.setProcessorCreatorFactory(new MyFactory());
        return context;
    }

    public static class MyFactory implements ProcessorFactory {

        public Processor createChildProcessor(RouteContext routeContext, ProcessorDefinition definition, boolean mandatory) throws Exception {
            return null;
        }

        public Processor createProcessor(RouteContext routeContext, ProcessorDefinition definition) throws Exception {
            if (definition instanceof SetBodyDefinition) {
                SetBodyDefinition set = (SetBodyDefinition) definition;
                set.setExpression(new ConstantExpression(""body was altered""));
            }

            // return null to let the default implementation create the processor, we just wanted to alter the definition
            // before the processor was created
            return null;
        }
    }
{code}


davsclaus:1278455870:2010-07-07T06:37:50.067+0000:1278455870:2010-07-07T06:37:50.067+0000:Adjusted the SPI a bit to have a {{beforeWrap}} method which ensure the {{Policy}} contract is kept in the wrap method.

{code}

    /**
     * Callback invoked before the wrap.
     * <p/>
     * This allows you to do any custom logic before the processor is wrapped. For example to
     * manipulate the {@link org.apache.camel.model.ProcessorDefinition definiton}
     *
     * @param routeContext   the route context
     * @param definition     the processor definition
     */
    void beforeWrap(RouteContext routeContext, ProcessorDefinition<?> definition);
{code}

trunk: 961251.
hadrian:1278497538:2010-07-07T18:12:18.919+0000:1278497538:2010-07-07T18:12:18.919+0000:As the beforeWrap cannot be used without Policy so moving the method to Policy instead of having a separate interface makes more sense. The binary incompatibility needs documenting. The solution to migrate is simple, only need to implement beforeWrap() as an empty method.

Commit done r961439. Awaiting documentation.
davsclaus:1278537038:2010-07-08T05:10:38.906+0000:1278537038:2010-07-08T05:10:38.906+0000:I added a note in the 2.4 release notes about the API change
https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.4.0+Release
davsclaus:1303610226:2011-04-24T09:57:06.131+0000:1303610226:2011-04-24T09:57:06.131+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2913,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,James Strachan,James Strachan,0,0,2010-07-06 14:46:55+00:00,2011-10-25 11:35:39+00:00,"we should be able to introspect the model and be able to see that, say, ToDefintion.uri or BeanDefinition.ref is required for UI type tooling where users can build routes visually",jstrachan:1278398878:2010-07-06T14:47:58.557+0000:1278398878:2010-07-06T14:47:58.557+0000:added a @Required annotation on setter methods to mark things that a UI should require
0,CAMEL-2912,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Mattias Severson,0,0,2010-07-06 13:32:24+00:00,2011-04-24 09:57:36+00:00,"Currently, SFTP throws an ResolveEndpointFailed exception if the option ""ftpClient.connectionTimeout"" is provided as a part of the URI. This could be fixed by calling the Session.connect(int timeout) method of JSCH. Some investigation reveals that this method eventually calls Socket.setSoTimeout(int timeout), which implies that the time unit of the timeout is milliseconds.


http://grepcode.com/file/repo1.maven.org/maven2/com.jcraft/jsch/0.1.42/com/jcraft/jsch/Session.java#Session.connect%28int%29


Example:


sftp://user@host/dir?password=secret&ftpClient.connectionTimeout=30000&disconnect=true&passiveMode=true


ResolveEndpointFailedException:
[...]
There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{ftpClient.connectionTimeout=30000}

]","davsclaus:1278401221:2010-07-06T15:27:01.237+0000:1278401221:2010-07-06T15:27:01.237+0000:I have introduced new timeout options in the FTP endpoint uri so its easier to configure.

See wiki page
https://cwiki.apache.org/confluence/display/CAMEL/FTP2

davsclaus:1303610256:2011-04-24T09:57:36.284+0000:1303610256:2011-04-24T09:57:36.284+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2911,New Feature,Minor,2.3.0,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Ulrik Einarson,0,0,2010-07-06 13:31:13+00:00,2011-04-24 09:57:58+00:00,"Java mail supports imap idle events:


http://java.sun.com/products/javamail/javadocs/com/sun/mail/imap/IMAPStore.html#idle()


It would be nice to have this support in camel mail so that we do not have to poll the server so often.","davsclaus:1283150719:2010-08-30T14:45:19.411+0000:1283150719:2010-08-30T14:45:19.411+0000:This seems SUN specific?

We generally want Camel to be JVM agnostic so people on AIX and in the cloud etc isn't affected by being dependent on SUN.
davsclaus:1303610278:2011-04-24T09:57:58.140+0000:1303610278:2011-04-24T09:57:58.140+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2910,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,James Strachan,James Strachan,0,0,2010-07-06 12:04:50+00:00,2011-04-24 09:57:16+00:00,No Desc,"jstrachan:1278389242:2010-07-06T12:07:22.758+0000:1278389242:2010-07-06T12:07:22.758+0000:DescriptionDefintion now has optional XML attribute properties for layout(X,Y,Width,Height)
davsclaus:1303610236:2011-04-24T09:57:16.412+0000:1303610236:2011-04-24T09:57:16.412+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2909,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Max Matveev,0,1,2010-07-05 14:11:36+00:00,2010-07-09 08:29:17+00:00,"Oracle AQ does not support the JMSReplyTo property and therefore throws a ""JMS-102: Feature not supported"" exception when the JMS provider tries to get it.","davsclaus:1278311657:2010-07-05T14:34:17.030+0000:1278311657:2010-07-05T14:34:17.030+0000:Could you add information such as:
- What version of the Oracle AQ are you using?
- What OS are you using
- The stacktrace
- For example related Camel configuration

And what do you mean by JMS provider? Where does the exception happen precisely? 

Link to Oracle AQ documentation about the lack of support for the JMSReplyTo would be great as well.
mmatveev:1278312947:2010-07-05T14:55:47.451+0000:1278313101:2010-07-05T14:58:21.390+0000:I'm using Oracle AQ 10.2.0.2, reproduced this error on Windows XP and RHEL 5 linux.

This exception will appear in few different places, namel everywhere where jmsMessage.getReplyTo() is called. For example in public Map extractHeadersFromJms(Message, Exchange) method in JmsBinding class (line number 174 in 2.3.0 version):
       map.put(""JMSReplyTo"", jmsMessage.getJMSReplyTo());

Stacktrace is the following:
org.apache.camel.RuntimeCamelException: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:181)
	at org.apache.camel.component.jms.JmsMessage.populateInitialHeaders(JmsMessage.java:191)
	at org.apache.camel.impl.DefaultMessage.createHeaders(DefaultMessage.java:178)
	at org.apache.camel.component.jms.JmsMessage.ensureInitialHeaders(JmsMessage.java:176)
	at org.apache.camel.component.jms.JmsMessage.setHeader(JmsMessage.java:152)
	at org.apache.camel.processor.RedeliveryErrorHandler.incrementRedeliveryCounter(RedeliveryErrorHandler.java:524)
	at org.apache.camel.processor.RedeliveryErrorHandler.handleException(RedeliveryErrorHandler.java:294)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:101)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: oracle.jms.AQjmsException: JMS-102: Feature not supported 
	at oracle.jms.AQjmsError.throwEx(AQjmsError.java:288)
	at oracle.jms.AQjmsAdtMessage.getJMSReplyTo(AQjmsAdtMessage.java:145)
	at org.apache.camel.component.jms.JmsBinding.extractHeadersFromJms(JmsBinding.java:174)
	... 24 more

I meant Camel JMS Component, not Provider, sorry.

For your reference: similar bug was in Mule framework: http://www.mulesoft.org/jira/browse/MULE-489 and it was fixed by ignoring this exception for Oracle AQ.

Related config is:
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""jms:topic:TOPIC_NAME""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>

    <bean id=""aqConfiguration"" class=""com.example.aqsupport.AqJmsConfiguration"">
        <property name=""connectionFactory"" ref=""aqConnectionFactory""/>
        <property name=""destinationResolver"" ref=""aqDestinationResolver""/>
        <property name=""durableSubscriptionName"" value=""SUBSCRIPTION_NAME""/>
        <property name=""subscriptionDurable"" value=""true""/>
    </bean>

    <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""configuration"" ref=""aqConfiguration""/>
    </bean>

    <bean id=""aqDestinationResolver"" class=""com.example.aqsupport.AqDestinationResolver"">
        <property name=""ownerName"" value=""OWNER""/>
    </bean>

    <bean id=""oracleAqJdbcDataSource"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""oracle.jdbc.driver.OracleDriver""/>
        <property name=""url"" value=""jdbc:oracle:thin:host:port:schema""/>
        <property name=""username"" value=""USERNAME""/>
        <property name=""password"" value=""PASSWORD""/>
    </bean>

    <bean id=""aqConnectionFactory"" class=""oracle.jms.AQjmsFactory"" factory-method=""getQueueConnectionFactory"">
        <constructor-arg index=""0"" ref=""oracleAqJdbcDataSource""/>
    </bean>

AqDestinationResolver is DestinationResolver thaht supports AQ's Owner property, actually there is 1 line of code there:
public class AqDestinationResolver implements DestinationResolver {
    private String ownerName;
    public void setOwnerName(String ownerName) {
        this.ownerName = ownerName;
    }
    public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {
        return ((AQjmsSession) session).getTopic(ownerName, destinationName);
    }
}
AqJmsConfiguration class extends camel' JmsConfiguration class by adding support for custom MessageListenerContainer, it is needed to support Oracle AQ Payload Factory
public class AqJmsConfiguration extends JmsConfiguration {
    @Override
    public AbstractMessageListenerContainer createMessageListenerContainer(JmsEndpoint endpoint) {
        AbstractMessageListenerContainer messageListenerContainer = new AqMessageListenerContainer();
        configureMessageListenerContainer(messageListenerContainer, endpoint);
        return messageListenerContainer;
    }
}
and AqMessageListenerContainer is 
public class AqMessageListenerContainer extends DefaultMessageListenerContainer {
    @Override
    protected MessageConsumer createConsumer(Session session, Destination destination) throws JMSException {
        TopicSubscriber consumer = ((AQjmsSession) session).getDurableSubscriber((Topic) destination,
                getDurableSubscriptionName(), new ExamplePayloadFactory());
        return consumer;
    }
}

Sorry, cannot find related Oracle docs.
mmatveev:1278377484:2010-07-06T08:51:24.241+0000:1278377484:2010-07-06T08:51:24.241+0000:Small addition: The ""JMSType"" property is not supported as well for Oracle AQ messages with ADT type payload.
davsclaus:1278378095:2010-07-06T09:01:35.274+0000:1278378095:2010-07-06T09:01:35.274+0000:trunk: 960845.

Will now ignore this exception and log a message at TRACE level in case you want to see the thrown exception.
mmatveev:1278379040:2010-07-06T09:17:20.138+0000:1278379040:2010-07-06T09:17:20.138+0000:Sorry for bothering Claus, but same fix should be applied for ""JMSType"" property in JmsBinding class (two lines below the ""JMSReplyTo"")
Thanks.
davsclaus:1278582693:2010-07-08T17:51:33.449+0000:1278582693:2010-07-08T17:51:33.449+0000:Max sorry I missed your update on this ticket.

I actually stumbled across this ticket
http://jira.springframework.org/browse/INT-1229

Which indicated that the 2nd field needed to be fixed, so I was just about to comment here about the fix.
davsclaus:1278582836:2010-07-08T17:53:56.901+0000:1278582836:2010-07-08T17:53:56.901+0000:trunk: 961847.

Max feel free to test with latest source code.
mmatveev:1278635357:2010-07-09T08:29:17.857+0000:1278635357:2010-07-09T08:29:17.857+0000:Everything is working, thanks"
0,CAMEL-2908,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-05 09:57:32+00:00,2011-04-24 09:57:14+00:00,Which makes it easy to transfer String over Netty. Currently you gotta do a bit of leg work to setup this yourself.,"davsclaus:1278366877:2010-07-06T05:54:37.029+0000:1278366877:2010-07-06T05:54:37.029+0000:trunk: 960792.
davsclaus:1303610234:2011-04-24T09:57:14.630+0000:1303610234:2011-04-24T09:57:14.630+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2907,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-05 09:55:59+00:00,2011-04-24 09:57:52+00:00,No Desc,"davsclaus:1278314353:2010-07-05T15:19:13.298+0000:1278314353:2010-07-05T15:19:13.298+0000:trunk: 960621.

The NettyProducer is now async and ill not block waiting for the operation to complete.
davsclaus:1303610272:2011-04-24T09:57:52.095+0000:1303610272:2011-04-24T09:57:52.095+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2906,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-07-05 03:16:54+00:00,2011-04-24 09:57:19+00:00,It should be easy to turn an expression into predicate,"davsclaus:1278278677:2010-07-05T05:24:37.448+0000:1278278677:2010-07-05T05:24:37.448+0000:I polished it a bit by introducing {{SimpleBuilder}} to make it easy to use simple in the Java DSL as both predicates and expressions

trunk: 960448.
davsclaus:1303610239:2011-04-24T09:57:19.012+0000:1303610239:2011-04-24T09:57:19.012+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2904,Bug,Major,None,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-07-03 09:20:46+00:00,2011-04-24 09:57:19+00:00,"Here is the mail thread which discusses about it.
http://camel.465427.n5.nabble.com/proxy-export-don-t-support-setting-camel-context-tp547161p547161.html",davsclaus:1303610239:2011-04-24T09:57:19.793+0000:1303610239:2011-04-24T09:57:19.793+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2903,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Paul Mietz Egli,0,0,2010-07-02 19:06:08+00:00,2011-04-24 09:57:19+00:00,"The latest version of Commons Codec is available as an OSGi bundle, so it would be nice to update the features file for Camel 2.3 to use that version:



<bundle>mvn:commons-codec/commons-codec/1.4</bundle>




I've been installing 1.4 by hand and removing the org.apache.servicemix.bundles.commons-codec/1.3_2 without any ill effects on camel-http.","njiang:1278117621:2010-07-03T08:40:21.118+0000:1278117621:2010-07-03T08:40:21.118+0000:Update the Commons Codec version with thanks to Paul.
davsclaus:1303610239:2011-04-24T09:57:19.912+0000:1303610239:2011-04-24T09:57:19.912+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2902,New Feature,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,3,2,2010-07-02 14:41:13+00:00,2015-07-11 22:31:44+00:00,"Look into if we can have Spring TM leverage suspend/resume so we can have transactions span threads and thus supported by the asynchronous routing engine.


The trick is most likely the Spring DMLC. However we have contributions from a community member who looked into this as well.


gnodet have coded suspend/resume for Aries:
https://svn.apache.org/repos/asf/incubator/aries/trunk/transaction/transaction-manager/src/main/java/org/apache/aries/transaction/GeronimoPlatformTransactionManager.java",
0,CAMEL-2901,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2010-07-02 13:12:52+00:00,2011-04-24 10:01:39+00:00,"HawtDB 1.1 has been released.  Change log at: http://github.com/chirino/hawtdb/blob/master/changelog.md
We should upgrade to pick up the listed bug fixes:




Fixing BTree node next linking.. It was possible that a next link would not properly get set in some conditions during a node removal.
You can add get callbacks when a commit gets flushed to disk.
Changed the way the journal was handling callback based write completed notifications. They are now delivered in batch form to a single JournalListener. This reduces thread contention and increases throughput.
Moved the built in predicate implementations into a Predicates class.
Added close method to the Transaction interface. Implementation now asserts it is no longer used after a close.
Making the appender's max write batch size configurable.
Revamped how Update and DefferedUpdates track shadow pages. A little easier to follow now. - changed the interface to PagedAccessor so that instead of removing the linked pages, it just needs to report what the linked pages are.
Got rid of the WriteKey wrapper class, updated logging.
Better looking printStrucuture BTree method
Added a few Logging classes to reduce the number of places we need to update if in case we decided to switch logging APIs.
Fixing free page allocation bug when using deferred updates.
Javadoc improvements
Expose a config property to control the read cache size.
Reworked how snapshot tracking was being done. Fixes errors that occurred during heavy concurrent access.
Added a non-blocking flush method to the TxPageFile
Read cache was not getting updated when a update batch was performed. Cached entries that were updated and flushed to disk continued returning stale data.
Fixed an recovery edge cases
Don't start the thread from the thread factory. that causes illegal state exceptions
Fixed journal bug where getting next location could return a the current location
Renamed EncoderDecoder to PagedAccessor
The util.buffer package has moved into it's own project at http://github.com/chirino/hawtbuf
Fixes #4 : Errors occur when you re-open an empty data file.
Extracted a SortedIndex interface from the Index interface to non sorted indexes having to deal with that leaky abstraction.
added a free() method to the Paged for symmetry with the alloc() method.
Improved website documentation","chirino:1278047598:2010-07-02T13:13:18.554+0000:1278047598:2010-07-02T13:13:18.554+0000:upgraded trunk.
davsclaus:1303610499:2011-04-24T10:01:39.522+0000:1303610499:2011-04-24T10:01:39.522+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2900,Improvement,Minor,2.3.0,2.5.0,"
None
",Closed,Cannot Reproduce,2.5.0,Hadrian Zbarcea,Karl Palsson,0,1,2010-07-02 12:23:28+00:00,2012-08-15 07:48:33+00:00,"when an ftp consumer gives up retrying connections, (because the default is 3) the consumer status (read via JMX) is still listed as ""Started""  It would be nice, and certainly have helped debugging why things weren't working, if this said something like ""Stopped-Retries Exceeded"" or something.","davsclaus:1278278888:2010-07-05T05:28:08.414+0000:1278278888:2010-07-05T05:28:08.414+0000:The consumer is still started and will retry on next poll.

What you are looking for is notifications to be emitted when a consumer failed. For example to JMX or whatever.
For that we got the EventNotifier, which we maybe could extend to have a {{ConsumerFailedEvent}} which we can hook into the ExceptionHandler that the DefaultConsumer provides. Then we can let exceptions be handled by it and it can emit the notification.


karlp:1278988231:2010-07-13T10:30:31.792+0000:1278988231:2010-07-13T10:30:31.792+0000:I find that hard to believe.  If the consumer really was started, and was going to retry on the next poll, I would never have noticed a problem.  It would have  just retried 5 seconds later, and all would have been good.

The fact is it _didn't_ retry.  It just sat there, pretending to be ""started"" until I pressed stop/start again myself. (after noticing I wasn't getting any responses out of the system for an hour or so, and that response files were queueing up on the remote ftp server.
hadrian:1278996589:2010-07-13T12:49:49.351+0000:1278996589:2010-07-13T12:49:49.351+0000:Hi Karl,

At every poll(), the FtpConsumer will do a prePollCheck() which leads eventually to a connectIfNecessary(). That means that although not connected, it is still started and will attempt to fetch files and attempt to reconnect if necessary, which means that it is started. You are also correct that it only tries to connect endpoint.getMaximumReconnectAttempts() times. This is controlled by the {{int attempt}} variable which stars from 0 with every poll. The max reconnect attempts is per poll, not for the lifetime of the consumer.

Do you have a test case for that, or do you think it would be hard to put one together? There is a fair amount of tracing at debug level in that area, so at the very least logging at debug level and attaching the log would help. If there is an issue in that area we need to understand it better and fix it.

karlp:1278997219:2010-07-13T13:00:19.161+0000:1278997219:2010-07-13T13:00:19.161+0000:I wish I could put a test case together, but I can't trigger this condition.  It's only happened a couple of times so far, and only in production, never in test.  Last time it happened, the config didn't allow me to turn debug on while it was still running. (I've fixed that now)

I know that 2.4.x included a raft of FTP fixes, but it wasn't ready by the time we went live.  I fully expect to update to 2.4 this week or next week, and will be keeping any eye on it.  If I see it again, I will enable debug for org.apache.camel.* and see what I see.


hadrian:1279120378:2010-07-14T23:12:58.106+0000:1279120378:2010-07-14T23:12:58.106+0000:Thanks Karl. I will assign this to me and will keep an eye on it for a few weeks. If nothing comes up, I'd suggest we close it in a few weeks and we can reopen and create one again if/when more info is available.
davsclaus:1303610267:2011-04-24T09:57:47.057+0000:1303610267:2011-04-24T09:57:47.057+0000:Closing all resolved tickets from 2010 or older
hefiso:1344988113:2012-08-15T07:48:33.092+0000:1344988113:2012-08-15T07:48:33.092+0000:I have also stumbled into this problem recently. We were using camel 2.9.0 and having a FTP-consumer with disconnect=false which suddenly (and silently) stopped consuming. This has only happened to us once.

Our log files did *not* contain messages about the FTP-consumer reconnecting to the server and JMX reported no errors.

We decided to try to fix the problem by using disconnect=true and upgrade to latest version of camel. Time will tell if the solution solves the problem ;-)"
0,CAMEL-2899,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Karl Palsson,0,0,2010-07-02 11:49:32+00:00,2011-04-24 09:57:21+00:00,"2010-07-02 11:38:07,439 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 10]   - <Consumer Consumer[my_ftp_URI_here caused by: Java heap space>
java.lang.OutOfMemoryError: Java heap space


My remote FTP server has ~60k 100 byte files, and the camel endpoint consumer falls over and doesn't start again.  I can use JMX to stop/start the consumer, (it still has status ""started"") and it will log in to the remote server again, but then fall over with the out of heap space.


I can work around this by increasing the heap, or by moving some of the files aside,  but I don't think camel should care how many files there are, or at least, I think it should deal with it more gracefully.","gertvanthienen:1278043172:2010-07-02T11:59:32.741+0000:1278043172:2010-07-02T11:59:32.741+0000:I think you can already configure that with the *{{maxMessagesPerPoll}}* URI parameter to limit the number of files being processing in a single poll (cfr. http://camel.apache.org/file2.html) - could you give that a try to see if it solves your problem?
karlp:1278061643:2010-07-02T17:07:23.205+0000:1278061643:2010-07-02T17:07:23.205+0000:Seemed very reasonable, but unfortunately, it doesn't help....

2010-07-02 17:02:42,327 FATAL Consumer Consumer[ftp://sms02@localhost:2121/autre
q/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.process
ed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localho
st:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&
move=.processed&passiveMode=true&password=sms02 caused by: Java heap space
java.lang.OutOfMemoryError: Java heap space

I tried again without file filter, (just an ant pattern name matcher) in case that was causing any problems, but it still fails.
karlp:1278067516:2010-07-02T18:45:16.347+0000:1278067516:2010-07-02T18:45:16.347+0000:Some stack traces...

This is without having a file name pattern match filter


 FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:613)
	at java.util.concurrent.ConcurrentHashMap.<init>(ConcurrentHashMap.java:652)
	at org.apache.camel.impl.DefaultExchange.getProperties(DefaultExchange.java:168)
	at org.apache.camel.impl.DefaultExchange.setProperty(DefaultExchange.java:153)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:96)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



The two below here were when I had an ant pattern match filter.  From the debug logs, it filtered _every_ file, regardless of the max messages per poll

FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)



FATAL [org.apache.camel.component.file.remote.FtpConsumer:CamelThread 4]   - <Consumer Consumer[ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02] could not poll endpoint: ftp://sms02@localhost:2121/autreq/ok?delay=5000&filter=%23conaxRequestFilter&maxMessagesPerPoll=50&move=.processed&passiveMode=true&password=sms02 caused by: Java heap space>

java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2882)
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)
	at java.lang.StringBuilder.append(StringBuilder.java:119)
	at org.apache.camel.component.file.GenericFile.populateHeaders(GenericFile.java:118)
	at org.apache.camel.component.file.remote.RemoteFile.populateHeaders(RemoteFile.java:39)
	at org.apache.camel.component.file.GenericFile.bindToExchange(GenericFile.java:99)
	at org.apache.camel.component.file.remote.RemoteFileEndpoint.createExchange(RemoteFileEndpoint.java:50)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:87)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
davsclaus:1278116788:2010-07-03T08:26:28.823+0000:1278116788:2010-07-03T08:26:28.823+0000:We could either

a)
Use lightweight record structure for the 160K list of files instead of turning them into Exchange objects which carries extra load

b)
Alter so the maxMessagesPerPoll will be effective earlier. Currently it loads the entire list, then you can filter, sort etc. And after all this it will cut down the list.
If we apply the maxMessagesPerPoll earlier we can't really be able to sort the entire list etc. And the filter could also cut out some from the max list.
Or in other words we will have to re-add files until we hit that limit if there are more files.

In your case I don't think you care about sorting/filtering etc. You just want to poll X number of files per go to avoid excessive memory overhead. So I think we could add an option in the uri for solution b.

Anyone got a good name for such an option?

Any thoughts?
davsclaus:1278375740:2010-07-06T08:22:20.167+0000:1278375740:2010-07-06T08:22:20.167+0000:The {{maxMessagesPerPoll}} option is now applied earlier for the file/ftp components so we avoid creating so many Exchange objects which are then afterwards discarded.

trunk: 960839.

Notice there is no limit in the java.io.File or FTP API to tell it to only list at most X number of files.
davsclaus:1303610241:2011-04-24T09:57:21.197+0000:1303610241:2011-04-24T09:57:21.197+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2898,Sub-task,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,0,2010-07-02 11:39:59+00:00,2011-04-24 09:57:49+00:00,No Desc,"njiang:1278454064:2010-07-07T06:07:44.546+0000:1278454064:2010-07-07T06:07:44.546+0000:Attached the patch here, as we need to wait for CXF 2.2.10 release with https://issues.apache.org/jira/browse/CXF-2884
davsclaus:1278461486:2010-07-07T08:11:26.966+0000:1278461486:2010-07-07T08:11:26.966+0000:Great Willem

You can extend {{DefaultAsyncProducer}} which allows you to just implement the async process method. 
njiang:1279778852:2010-07-22T14:07:32.515+0000:1279778852:2010-07-22T14:07:32.515+0000:As the cxf client async and sync api is implement different, so we don't delegate the sync process call to the async process. 
davsclaus:1303610269:2011-04-24T09:57:49.555+0000:1303610269:2011-04-24T09:57:49.555+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2897,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-02 08:22:01+00:00,2011-04-24 10:00:40+00:00,No Desc,"davsclaus:1278030154:2010-07-02T08:22:34.330+0000:1278030154:2010-07-02T08:22:34.330+0000:This problem occurs on Windows which has a lock on the file.
Unix and Mac works fine.

See nabble
http://camel.465427.n5.nabble.com/File-can-t-be-moved-or-deleted-on-Windows-tp512484p512484.html
davsclaus:1278030396:2010-07-02T08:26:36.739+0000:1278030396:2010-07-02T08:26:36.739+0000:trunk: 959916.
davsclaus:1303610440:2011-04-24T10:00:40.995+0000:1303610440:2011-04-24T10:00:40.995+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2896,Task,Trivial,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-07-02 07:44:00+00:00,2011-04-24 10:01:07+00:00,No Desc,"davsclaus:1278027887:2010-07-02T07:44:47.719+0000:1278027887:2010-07-02T07:44:47.719+0000:trunk: 959896.
davsclaus:1303610467:2011-04-24T10:01:07.413+0000:1303610467:2011-04-24T10:01:07.413+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2895,Bug,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-07-02 06:54:04+00:00,2011-04-24 10:00:54+00:00,"After I applied the patch of CAMEL-2894, I can't get let camel load the router with package scan option.


As the Bundle.getResources(String name), can't work as the ClassLoader.getResources(String name).
So we have to use Bundle.findEntries() to check the package's resource.",davsclaus:1303610454:2011-04-24T10:00:54.565+0000:1303610454:2011-04-24T10:00:54.565+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2894,Bug,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-07-02 06:47:32+00:00,2011-04-24 10:00:39+00:00,"When I was running some OSGi tests with Camel 2.4-SNAPSHOT, I got this UnsupportedOperationExcpetion,
This is stack trace



Caused by: java.lang.UnsupportedOperationException
	at java.util.AbstractCollection.add(AbstractCollection.java:221)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.addClassLoader(DefaultPackageScanClassResolver.java:58)
	at org.apache.camel.spring.PackageScanRouteBuilderFinder.<init>(PackageScanRouteBuilderFinder.java:52)
	at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuildersByPackageScan(CamelContextFactoryBean.java:183)





After digging the code , I found current OsgiPackageScanClassResolver only supports to turn the bundle classloader, so we need to check this kind of error.",davsclaus:1303610439:2011-04-24T10:00:39.409+0000:1303610439:2011-04-24T10:00:39.409+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2893,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,James Strachan,James Strachan,0,0,2010-07-01 17:24:32+00:00,2011-04-24 10:00:43+00:00,looks like a simple logic bug to me. Have a fix locally - just checking it works...,"jstrachan:1277976298:2010-07-01T17:24:58.296+0000:1277976298:2010-07-01T17:24:58.296+0000:this only tends to affect graph drawing tools btw :)
davsclaus:1303610443:2011-04-24T10:00:43.226+0000:1303610443:2011-04-24T10:00:43.226+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2862,Improvement,Major,2.4.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-27 11:26:06+00:00,2011-04-24 10:01:16+00:00,"ProducerTemplate is not UoW scoped as well which causes the notify builder to react only producers sending in messages to routes.


This is a bit confusing when using jms, seda style as then it would cause 2 uow (1=consumer,1=producer).
And people normally only want to react on the routes.","davsclaus:1277671328:2010-06-28T04:42:08.344+0000:1277671328:2010-06-28T04:42:08.344+0000:trunk: 958456.
davsclaus:1303610476:2011-04-24T10:01:16.660+0000:1303610476:2011-04-24T10:01:16.660+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2861,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Not A Problem,2.4.0,Claus Ibsen,Fintan Bolton,0,0,2010-06-25 14:11:42+00:00,2011-04-24 10:00:49+00:00,"The current implementation of EndpointHelper.matchPattern() is inconsistent, because it tries to combine glob-style wildcards and regex matching in a single function. Currently, if you pass a pattern such as name*, this will match any string with the prefix, name. Any other pattern will be interpreted as a regex. This is pretty confusing and non-intuitive. It would be better to split this into two separate functions like wildcardMatch() and regexMatch() and to call whichever of these functions makes sense, depending on the context.


I came across this issue while documenting the removeHeaders() method, which takes a pattern as its argument.,","davsclaus:1277446770:2010-06-25T14:19:30.713+0000:1277446770:2010-06-25T14:19:30.713+0000:This is *not* inconsistent. This is how the endpoint wildcard matching works in Camel for its interceptors and whatnot.
Its documented in the javadoc of the method how it matches.

Its much easier for end users to just type {{jdbc*}} to match anything related to JDBC endpoints. With regular exp which some end users is not good at you have to do it like {{jdbc.*}} and whatnot.

This is by design it works as it does.
fbolton:1277448906:2010-06-25T14:55:06.975+0000:1277448906:2010-06-25T14:55:06.975+0000:Ok! It just seemed a bit complicated to explain in the docs. But if users find the alternative syntax more confusing, I guess we should leave it as it is.
davsclaus:1277507029:2010-06-26T07:03:49.173+0000:1277507029:2010-06-26T07:03:49.173+0000:trunk: 958191.

I polished the code a bit
davsclaus:1303610449:2011-04-24T10:00:49.772+0000:1303610449:2011-04-24T10:00:49.772+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2860,Bug,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0",2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,2,0,2010-06-25 11:53:34+00:00,2011-04-24 10:00:37+00:00,"FTP Servers expect clients to use absolute paths, so camel-ftp clients should not clip any leading /


We could consider adding a flag to preserve the old behavior to have people if they rely on the old behavior be able to switch that flag on.","davisond:1277438642:2010-06-25T12:04:02.611+0000:1277438642:2010-06-25T12:04:02.611+0000:I think it's worth pointing out that this must have changed recently as camel-1.6 doesn't exhibit this problem, so the ""old"" behaviour is the correct behaviour that we should revert to.  

Most FTP clients send absolute paths to the server.  It is the server's responsibility to decide what absolute means (usually a protected FTP root dir is configured in the server and FTP clients cannot escape this regardless of paths used).  If the server allows full f/s access via FTP then that's either up to the server admin or a fault in the FTP server software.  Either way, it should *not* be down to camel-ftp to make unilateral, non-overridable, backwards-incompatible decisions about potential server software configuration.

Personally, I vote for this to be fixed and backported to current production versions.
davsclaus:1277512092:2010-06-26T08:28:12.938+0000:1277512092:2010-06-26T08:28:12.938+0000:Looking into camel 1.6 I cannot see it send absolute paths.

It just change dir to current dir at first. And current dir is from the start /. 
And then cd into the starting directory (configured from the endpoint uri). 
So that together makes it appear as it works absolute.


Camel 2.x will not change into current dir at first.
But list files without changing current directory


davsclaus:1277517291:2010-06-26T09:54:51.112+0000:1277517291:2010-06-26T09:54:51.112+0000:trunk: 958207.

You can now specify absolute paths on the endpoint uri, by using double / slashes. Since the first is part of the URI

{{ftp:admin:secret@someserver//foo}}

Notice how we use {{//}} in the uri above to denote an absolute starting path.
davsclaus:1277942868:2010-07-01T08:07:48.032+0000:1277942868:2010-07-01T08:07:48.032+0000:Use // slashes in the endpoint uri to denote an absolute starting path.
davsclaus:1303610437:2011-04-24T10:00:37.452+0000:1303610437:2011-04-24T10:00:37.452+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2859,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-25 11:24:31+00:00,2011-04-24 10:01:14+00:00,No Desc,"davsclaus:1277445441:2010-06-25T13:57:21.124+0000:1277445441:2010-06-25T13:57:21.124+0000:trunk: 957944.
davsclaus:1277448297:2010-06-25T14:44:57.958+0000:1277448297:2010-06-25T14:44:57.958+0000:trunk: 957996.
davsclaus:1303610474:2011-04-24T10:01:14.731+0000:1303610474:2011-04-24T10:01:14.731+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2858,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Fintan Bolton,0,0,2010-06-25 11:06:01+00:00,2011-04-24 10:01:29+00:00,"The org.apache.camel.model.OnExceptionDefinition class defines useOriginalBody() in the fluent API. This should actually be useOriginalMessage(), in accordance with CAMEL-1820.",davsclaus:1303610489:2011-04-24T10:01:29.864+0000:1303610489:2011-04-24T10:01:29.864+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2857,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-06-25 08:32:00+00:00,2011-04-24 10:01:45+00:00,We will use the JVM default charset by default.,davsclaus:1303610505:2011-04-24T10:01:45.171+0000:1303610505:2011-04-24T10:01:45.171+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2856,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-25 07:50:55+00:00,2011-04-24 10:01:21+00:00,No Desc,"davsclaus:1277423522:2010-06-25T07:52:02.580+0000:1277423522:2010-06-25T07:52:02.580+0000:Check that scheduler if its running in cluster mode or not. If so it should not pause jobs on shutdown.

And also add option to select if the scheduler should be auto started or not.
davsclaus:1277427189:2010-06-25T08:53:09.664+0000:1277427189:2010-06-25T08:53:09.664+0000:trunk: 957850.

The scheduler will now keep the jobs running if in clustered mode, so they can keep running on the other nodes.

davsclaus:1303610481:2011-04-24T10:01:21.333+0000:1303610481:2011-04-24T10:01:21.333+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2855,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-25 05:15:04+00:00,2011-04-24 10:01:15+00:00,No Desc,"davsclaus:1277414919:2010-06-25T05:28:39.313+0000:1277414919:2010-06-25T05:28:39.313+0000:Added {{startDelayedSeconds}} option to quartz component

trunk: 957803.
davsclaus:1277420642:2010-06-25T07:04:02.503+0000:1277420642:2010-06-25T07:04:02.503+0000:trunk: 957823.

Introduced {{StartupListener}} to use callbacks which is invoked when the {{CamelContext}} have just been started. This allows us to start the quartz scheduler at very last.
davsclaus:1277430527:2010-06-25T09:48:47.657+0000:1277430527:2010-06-25T09:48:47.657+0000:trunk: 957866.
davsclaus:1303610475:2011-04-24T10:01:15.007+0000:1303610475:2011-04-24T10:01:15.007+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2854,Bug,Critical,2.2.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Michael Chen,0,0,2010-06-24 23:47:08+00:00,2011-04-24 10:01:25+00:00,"The following warning in log4j log shows up with no predictable reason:


2010-06-24 14:07:01,090  WARN [DefaultMessageListenerContainer-7:DirectProducer.java:42] No consumers available on endpoint: Endpoint[direct://UserCancelJobRequest] to process: Exchange[JmsMessage: RunnerBase

{locationToRunId='DV02YcABTE43HTRPATEGCBFk0m0', jobrun_id=1234, requestOrigId='null', secretKey='null', replyToQueueOrTopic='null', corrolationId='null', requestCreationTime=Thu Jun 24 14:07:01 PDT 2010}

]


The endpoint [direct://UserCancelJobRequest] could be a number of different endpoints in our application and all of them are of ""direct:"" type.  When this happens, all messages that run through that endpoint will fail, and it will never recover unless the application is restarted.


Also, if I restart the application and use that route immediately, that warning will not occur and the request will finish successfully.  It seems to happen to routes that have not been used for a while after startup.


When this happens, I can find the exact Camel endpoint/route/processor in JConsole, and nothing seems to be wrong.  How can a ""direct:"" endpoint runs out of consumer?  Isn't the thread that product this warning THE thread to process the message?


We recently upgraded from 5.2 to 5.3.2 and this starts to show up randomly. It is a show stopper!


--Michael","njiang:1277429822:2010-06-25T09:37:02.568+0000:1277429822:2010-06-25T09:37:02.568+0000:What's your route looks like ?
Did you do some thing to start or stop the route which has the direct endpoints ?
mwc_tonesoft:1277456583:2010-06-25T17:03:03.008+0000:1277456583:2010-06-25T17:03:03.008+0000:No, we never explicitly start or stop any endpoint. We only rely on the route-builder to setup the routes during startup.

We do have some cases where the endpoint is ""obtained"" during run-time and added to the route-slip. Still we never start or stop any endpoint.

My colleague discovered that in one instance, we hold on to the reference of an endpoint and got the same warning. It turns out Camel context has a little LRUCache that discards older endpoint instances. We fixed that one place, but it still does not explain all other instances of this problem.
hadrian:1277471104:2010-06-25T21:05:04.447+0000:1277471104:2010-06-25T21:05:04.447+0000:Michael, if there is a problem, we'll fix it, but it's not clear what you're doing.

If you have a route that starts with;
{code}
from(""direct:UserCancelJobRequest"").[...]
{code}
then you will have a consumer for that direct endpoint. So it looks to me that you don't have such a route and hence no such consumer, yet you try to send messages to such an endpoint from another route using something like:
{code}
from(some-endpoint-probably-jms).[...].to(""direct:UserCancelJobRequest"")[...];
{code}

My guess though is that you are actually using camel embedded in activemq and your activemq upgrade from 5.2.0 to 5.3.2 caused an upgrade of camel from 1.5.0 to 2.2.0. There are slight changes in camel 2.x, including the dsl syntax, that you should take a look at. I am fairly certain that your route syntax is not totally right with camel 2.2.0. 

I hope this helps. Showing us your route or posting a unit test will allow us understand what's going on and help you better. If you have concerns about posting things that may be proprietary to your organization you could also ask for help on the [#camel irc channel|http://camel.apache.org/irc-room.html].


mwc_tonesoft:1277711311:2010-06-28T15:48:31.094+0000:1277711311:2010-06-28T15:48:31.094+0000:As I said before, the route DOES WORK -- most of the time. Therefore, there is no issue of spelling or Camel syntax.

If I can reliably reproduce this problem with a simple unit-test, then I can debug into the Camel code and tell you exactly what this bug is.

Unfortunately, the ""most of the time"" part makes it difficult to reproduce. Also, as I mentioned before, when it does NOT work, I can find and confirm that the route DOES exist and DOES have a consumer in JConsole, even though the warning says otherwise.

Have you look into what I said about Camel's LRUcache? I hope a second look from folks familiar with the code can come up with some educated guess.

Thanks

--Michael
davsclaus:1277765342:2010-06-29T06:49:02.386+0000:1277765342:2010-06-29T06:49:02.386+0000:Michael

Do you send messages to a lot of different Camel endpoints? For example do you use any of the dynamic EIP patterns such as recipient list or routing slip.
And when the issue happens, is that after a long period without sending messages to that given endpoint?

Do you have other direct endpoints at the same time working?

How many routes do you have in your application? And can you see a lot of endpoints listed in JConsole?
davsclaus:1277765874:2010-06-29T06:57:54.951+0000:1277765874:2010-06-29T06:57:54.951+0000:And can you attach the route which fails?
davsclaus:1277766103:2010-06-29T07:01:43.414+0000:1277766103:2010-06-29T07:01:43.414+0000:And can you attach the route which consumes as well?

And this route is not stopped in any way? The code will when its stopped, remove itself as consumer on the endpoint, and the reason why the producer then says there are no consumers.
davsclaus:1277766640:2010-06-29T07:10:40.892+0000:1277766640:2010-06-29T07:10:40.892+0000:Okay I have reproduced a litte unit test
davsclaus:1277774411:2010-06-29T09:20:11.185+0000:1277774411:2010-06-29T09:20:11.185+0000:Fixed the issue.

trunk: 958893.

A workaround for you would be to use multiple CamelContext's if possible to reduce the chance of hitting this issue in Camel 2.2.
mwc_tonesoft:1277800270:2010-06-29T16:31:10.079+0000:1277800270:2010-06-29T16:31:10.079+0000:

Yes, we have pervasive use of dynamically constructed routing slip.




Yes, it seems so. As I mentioned before, if you restart the app and run the
same route immediately, the problem does NOT occur as before.



Yes, most of them works, including the ones that have problems most of the
time.



We have close to 140 endpoints.

I see that you created a unit test. May I have that unit test?  Would you
please also explain the bug in more detail?

Thank you

--Michael

davsclaus:1277800633:2010-06-29T16:37:13.187+0000:1277800633:2010-06-29T16:37:13.187+0000:I have put the rev number in the comment so you can find the commit log and the unit test etc.
davsclaus:1277800667:2010-06-29T16:37:47.781+0000:1277800667:2010-06-29T16:37:47.781+0000:See source here
http://svn.apache.org/viewvc/camel/trunk/
davsclaus:1277800711:2010-06-29T16:38:31.762+0000:1277800711:2010-06-29T16:38:31.762+0000:Ah and the Fisheye tab in JIRA also works, just click it to see the code changes.
davsclaus:1277800814:2010-06-29T16:40:14.665+0000:1277800883:2010-06-29T16:41:23.417+0000:The issue was how Camel kept the list of active direct consumers on the endpoint, and not on the component.
Then if that endpoint was evicted from the LRUCache (due not used in long time) that link to the consumer would be lost.
And then you hit that {{No consumers ...}} warning.

By keeping it around all the time on the component we can always lookup the active consumers.

And the warning have been changed into thrown an exception so your app logic can catch it, eg rollback etc.
mwc_tonesoft:1277801056:2010-06-29T16:44:16.279+0000:1277801056:2010-06-29T16:44:16.279+0000:Claus,

This is not a fix. How did a ""direct:"" route lose its consumer in the first
place?  It's like a Java program cannot call a method it has previously
called successfully.  The fix should be on that issue. Otherwise, it is
still a fatal run-time error.

BTW, I found the unit test in source control.

--Michael




mwc_tonesoft:1277801287:2010-06-29T16:48:07.434+0000:1277801287:2010-06-29T16:48:07.434+0000:Claus,

Revision 958852 you submitted only contains the throwing exception change. I don't see the ""By keeping it around all the time on the component we can always lookup the active consumers"" part in the fix.  Do you mean user code has to do that?

Thanks

--Michael
davsclaus:1277802164:2010-06-29T17:02:44.966+0000:1277802164:2010-06-29T17:02:44.966+0000:You may not know Camel that well to question the fix.

The Java compiler will link method invocations at compile time, so its hardcoded in the byte code.

There is no Camel compiler, so Camel will link the routes at runtime. After all you define the endpoints using String (eg uris).
So it have to figure out this at runtime. And thus its *not hardcoded in the bytecode* and it can in fact loose the _link_.

And I would suggest that you take the time to look into the fix, apply the patches on your system and test it before ranting.
davsclaus:1277802291:2010-06-29T17:04:51.735+0000:1277802291:2010-06-29T17:04:51.735+0000:Lowering the priority to critical as
- the app can run, it *unfortunately* have to be restarted to fix the issue on his end.
- and by not using a lot of dynamic endpoints you wont hit this issue.

A blocker is something that you can't work around at all.
mwc_tonesoft:1277803688:2010-06-29T17:28:08.937+0000:1277803688:2010-06-29T17:28:08.937+0000:I have no disrespect towards you.

Your fix does not prevent the ""No consumer..."" condition from happening. Agree? You also said,

  ""By keeping it around all the time on the component we can always lookup the active consumers.""

How do I accomplish that without applying major changes like using multiple Camel context?

If there is a limit on the total number of endpoints, then it should be documented. If this is related to the LRCcache, then can I increase the cache size?

Thanks

--Michael
mwc_tonesoft:1277816879:2010-06-29T21:07:59.153+0000:1277819334:2010-06-29T21:48:54.875+0000:Here how the route is built:

    from(""direct:UserCancelJobRequest"").process(new Processor() {
            public void process(Exchange exchange) throws Exception {
                ....
            }
        }).
        to(""direct:JobRunInstanceUpdate""). ...

We use dynamically constructed routing slip or template to send messages to the ""direct:UserCancelJobRequest"" endpoint.

There should always be consumers for this. Otherwise Camel would be to unpredictable to use. That is the real bug that needs to be fixed.

Thanks

--Michael
davsclaus:1277841823:2010-06-30T04:03:43.057+0000:1277841823:2010-06-30T04:03:43.057+0000:Yes it fixes the issue.

See the source code
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/component/direct/

davsclaus:1277842123:2010-06-30T04:08:43.503+0000:1277842123:2010-06-30T04:08:43.503+0000:The LRUCache cannot be changed.
The endpoints should be safe to re-create again. And the cache keeps preventing having Camel hooking up memory when end users uses many different endpoints.
So it keep the last 1000 endpoints around in the cache.

Its just the direct component which had an issue, storing state on the endpoint. Which should have been stored on the component instead.
The seda component works this way btw.


davsclaus:1277849675:2010-06-30T06:14:35.520+0000:1277849675:2010-06-30T06:14:35.520+0000:The unit test is here
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/component/direct/SendingToAlotOfDifferentDirectEndpointTest.java

You can run it on 2.2 and see it should fail. And then on trunk to see it pass.
davsclaus:1303610485:2011-04-24T10:01:25.207+0000:1303610485:2011-04-24T10:01:25.207+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2853,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Later,2.4.0,Stanley J. Lewis,Stanley J. Lewis,0,1,2010-06-24 19:19:05+00:00,2011-10-25 11:35:37+00:00,"Should support something like how tail --retry works, basically to try and re-open a file if it gets completely overwritten or deleted/rewritten.","slewis:1277378600:2010-06-24T19:23:20.339+0000:1277378600:2010-06-24T19:23:20.339+0000:Sending        src/main/java/org/apache/camel/component/stream/StreamConsumer.java
Sending        src/test/java/org/apache/camel/component/stream/ScanStreamFileTest.java
Transmitting file data ..
Committed revision 957691.

slewis:1277378772:2010-06-24T19:26:12.577+0000:1277378772:2010-06-24T19:26:12.577+0000:Should mention you get this behavior now when you specify scanStream=true.
howesro:1296955864:2011-02-06T09:31:04.470+0000:1296955864:2011-02-06T09:31:04.470+0000:Although the benefit in being able to retry overwritten files is extremely useful, this change also has resulted in the side effect of having scanStream now continually loop over the existing file. 

I would have expected that the improvement result in retrying the file only on being overwritten and not on reaching the EOS, and based on the description below would say that the change made is not implemented as intended.

Worth noting that I have only tried this on Windows and have not confirmed the behaviour on UNIX.
slewis:1297096169:2011-02-08T00:29:29.502+0000:1297096169:2011-02-08T00:29:29.502+0000:Will have a look, the test doesn't appear to show this behavior if I adjust it so it expects an exact number of items...
howesro:1297129226:2011-02-08T09:40:26.681+0000:1297129226:2011-02-08T09:40:26.681+0000:I have created a simple test project that demonstrates the issue and attached.

Again, I have only run this in Windows but see a clear difference when switching from:
* *Camel 2.4.0* - continuous iteration over the same 2 lines
* *Camel 2.3.0* - only iterates once over the 2 lines
slewis:1297153576:2011-02-08T16:26:16.379+0000:1297153576:2011-02-08T16:26:16.379+0000:Unfortunately it looks like this feature may have to wait for Java 7 to be fully realized, as there's no reliable way to detect when a file has been deleted/recreated without having to resort to JNI.  Using a WatchService would make it possible to implement this, see here - http://java.sun.com/developer/technicalArticles/javase/nio/#6
howesro:1297230598:2011-02-09T13:49:58.036+0000:1297230598:2011-02-09T13:49:58.036+0000:Ah ok - thanks for looking into this.

Perhaps it would be worth adding an attribute *retry* on StreamEndpoint that defaults to false that preserves the pre-Camel 2.4.0 behaviour of scanStream?

This way people upgrading don't have to make any changes and those users who need the retry logic can set the flag to true.
slewis:1297230814:2011-02-09T13:53:34.521+0000:1297230814:2011-02-09T13:53:34.521+0000:Yeah, I like that, will work on getting that added
slewis:1297231482:2011-02-09T14:04:42.090+0000:1297231482:2011-02-09T14:04:42.090+0000:Committed r1068896
	M	components/camel-stream/src/test/java/org/apache/camel/component/stream/ScanStreamFileTest.java
	M	components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamConsumer.java
	M	components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamEndpoint.java

Now I'll just update the wiki
howesro:1297252062:2011-02-09T19:47:42.233+0000:1297252062:2011-02-09T19:47:42.233+0000:Thanks for this patch - works great.
slewis:1297252266:2011-02-09T19:51:06.298+0000:1297252266:2011-02-09T19:51:06.298+0000:Cool!  I'll probably create another Jira to keep track of the fact that this should be revisited in the future"
0,CAMEL-2852,New Feature,Minor,2.3.0,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Karl Palsson,0,0,2010-06-24 16:18:58+00:00,2011-06-10 14:19:58+00:00,"with a routes like  from(""direct:openSubscription"").to(""mock:blah""), All the routes get created as route1, route2, route3.  This is used as the class name when using the logging EIP (the .log() in the DSL since v2.2) and also as the node name in the JMX tree of all the routes.


You can do this: from(""direct:openSubscription"").routeId(""direct:openSubscription"").to(""mock:blah"") but it would be nice if the defaults could perhaps be based on the base of the URI, as is being done for thread names in CAMEL-2847


pure wishlist though","karlp:1277369564:2010-06-24T16:52:44.006+0000:1277369564:2010-06-24T16:52:44.006+0000:Also, if you log from a route, using the 2.2 DSL, because the ""class"" name is just the routeId, there's no easy way to group them together in log4j.properties. Perhaps they could all be prefixed with ""route."" or something?  Then a config like...  {{log4j.category.route=DEBUG}} would work to filter in/out all the route logging.
davsclaus:1283150588:2010-08-30T14:43:08.852+0000:1283150588:2010-08-30T14:43:08.852+0000:I think the best we could do is to introduce a {{RouteNamingStrategy}} having the default as the current implementation.

Then people could switch and we could maybe also distribute one which does as you suggest, in case we can find a good name for the class :)
davsclaus:1307686798:2011-06-10T14:19:58.125+0000:1307686798:2011-06-10T14:19:58.125+0000:Lets keep the route name as they are. There may be clashes and whatnot if using parts of endpoint uris and whatnot."
0,CAMEL-2851,Bug,Trivial,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Karl Palsson,0,0,2010-06-24 14:23:24+00:00,2011-04-24 10:00:46+00:00,"@ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long qeueSize() {
        return endpoint.getExchanges().size();
    }




Should be 



    @ManagedOperation(description = ""Current number of Exchanges in Queue"")
    public long queueSize() {
        return endpoint.getExchanges().size();
    }","davsclaus:1277428020:2010-06-25T09:07:00.529+0000:1277428020:2010-06-25T09:07:00.529+0000:trunk: 957856.

Thanks Karl for reporting.
davsclaus:1303610446:2011-04-24T10:00:46.502+0000:1303610446:2011-04-24T10:00:46.502+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2850,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 13:24:41+00:00,2011-04-24 10:00:43+00:00,No Desc,"davsclaus:1277366059:2010-06-24T15:54:19.888+0000:1277411298:2010-06-25T04:28:18.511+0000:trunk: 957588.

Now using Jetty continuations and the async jetty http client so both consumer and producer is as async as they can be.
davsclaus:1303610443:2011-04-24T10:00:43.072+0000:1303610443:2011-04-24T10:00:43.072+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2849,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 13:23:58+00:00,2011-04-24 09:57:55+00:00,No Desc,"davsclaus:1278294928:2010-07-05T09:55:28.857+0000:1278294928:2010-07-05T09:55:28.857+0000:trunk: 960507.

They are now compatible, however they dont leverage the async routing engine to the fullest. The caller thread will block while the tasks is running and afterwards handle the aggregation and continue routing.

Doing parallel async is a bit of a challenge to do properly and with code which is maintainable. The challenge is in fact the splitter in streaming mode which would require the async callbacks to even handle looping the iterator etc. Also while they need to determine among them which one should be the one who has the honor of continue routing async when all tasks is done etc.
davsclaus:1303610275:2011-04-24T09:57:55.764+0000:1303610275:2011-04-24T09:57:55.764+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2848,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 12:51:47+00:00,2011-04-24 10:01:38+00:00,To make it consistent so its always a CamelExecutionException which is thrown with the cause exception wrapped.,"davsclaus:1277355292:2010-06-24T12:54:52.893+0000:1277355292:2010-06-24T12:54:52.893+0000:trunk: 957535.
davsclaus:1303610498:2011-04-24T10:01:38.913+0000:1303610498:2011-04-24T10:01:38.913+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2847,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 11:28:58+00:00,2011-04-24 10:01:28+00:00,"By default thread names from consumers have the endpoint uri in the name, but those can become long



Camel Thread 1 - ftp://sms01@localhost:2121/autreq/err?delay=5000&filter=%23conaxRequestFilter&move=.processed&passiveMode=true&password=sms01]




So we should change {$name} to be just the endpoint without all the parameters. Eg clip after the first ? so it becomes



Camel Thread 1 - ftp://sms01@localhost:2121/autreq/err]




So we should change it to be



${name} the new short handed syntax
${fullName} as now with everything","karlp:1277352667:2010-06-24T12:11:07.479+0000:1277352667:2010-06-24T12:11:07.479+0000:In the meantime, here's how to change the naming via the java DSL

{code}
class blah extends RouteBuilder {
  public void configure() {
     // other routes go here...
     getContext().getExecutorServiceStrategy().setThreadNamePattern(""some thread prefix ${counter}"");
  }
}
{code}

davsclaus:1277356537:2010-06-24T13:15:37.496+0000:1277356537:2010-06-24T13:15:37.496+0000:trunk: 957540.

There is now a ${longName} to use for the old long names.
davsclaus:1303610488:2011-04-24T10:01:28.346+0000:1303610488:2011-04-24T10:01:28.346+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2846,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 07:01:20+00:00,2011-04-24 10:00:54+00:00,"You may by mistake use 



.bean(""myCoolBean"") 




Instead of



.beanRef(""myCoolBean"") 




To use a reference to a bean.


The former will see this as a String class. We should add validation on .bean to reject any standard Java types. eg all from java. So you can only pass in custom instances.","davsclaus:1277942021:2010-07-01T07:53:41.510+0000:1277942021:2010-07-01T07:53:41.510+0000:trunk: 959549.
davsclaus:1303610454:2011-04-24T10:00:54.232+0000:1303610454:2011-04-24T10:00:54.232+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2845,Task,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-06-24 04:45:56+00:00,2011-04-24 09:57:15+00:00,"This starts to become a bit funny. Quartz have just released 1.8.1, 1.8.2 and now 1.8.3 in a very short period of time. 1.8.3 should fix some serious memory issues found in 1.8.1.


Quartz 1.8.3 has just been released
We need an OSGi wrapped bundle for it as well.","davsclaus:1277882136:2010-06-30T15:15:36.796+0000:1277882136:2010-06-30T15:15:36.796+0000:Willem have the quartz bundle been released, so we can use the non SNAPSHOT version?

As we are targeting for a 2.4 release in the near time.
davsclaus:1303610235:2011-04-24T09:57:15.710+0000:1303610235:2011-04-24T09:57:15.710+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2844,Sub-task,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-24 04:19:22+00:00,2011-04-24 10:01:04+00:00,"So end users can specify the location of the quartz.properties file they want to use.


And we should maybe load the properties file and provide it to Quartz so we ensure it can be loaded correctly in OSGi environments.","davsclaus:1277324410:2010-06-24T04:20:10.674+0000:1277324410:2010-06-24T04:20:10.674+0000:Also check the volatile job stuff, and the CamelJob and CamelStatefulJob are serializable etc.
davsclaus:1277327962:2010-06-24T05:19:22.628+0000:1277327962:2010-06-24T05:19:22.628+0000:trunk: 957419.

Location of properties file can now be set on quartz component.
davsclaus:1277329316:2010-06-24T05:41:56.353+0000:1277329316:2010-06-24T05:41:56.353+0000:I wonder what would be the way to configure a custom quartz.properties in OSGi?

The camel-quartz bundle is installed from a feature and the Quartz component is started lazy when needed for the first time.
So if there is a custom app using Quartz how would you have configured the camel-quartz bundle to let it know where to find your custom quartz.properties file.

You may need to use OSGi service registry or other stuff to register the properties there. But then you need to have that information given to the QuartzComponent so it knows to use that OSGi properties.
davsclaus:1277413662:2010-06-25T05:07:42.998+0000:1277413662:2010-06-25T05:07:42.998+0000:Only unschedule volatile jobs on shutdown to by default let the jobs be kept in the database.

trunk: 957796.
davsclaus:1303610464:2011-04-24T10:01:04.037+0000:1303610464:2011-04-24T10:01:04.037+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2843,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-23 11:25:20+00:00,2011-04-24 09:57:53+00:00,"See SMX4-417


This is the ticket to fix this issue.","davsclaus:1277263997:2010-06-23T11:33:17.306+0000:1277263997:2010-06-23T11:33:17.306+0000:trunk: 957165.
davsclaus:1303610273:2011-04-24T09:57:53.246+0000:1303610273:2011-04-24T09:57:53.246+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2842,Improvement,Major,2.4.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Bengt Rodehav,0,0,2010-06-23 09:44:25+00:00,2011-04-24 10:01:31+00:00,The sftp support in camel-ftp uses Jsch. However there is no logger attached to Jsch which means that any logging from Jsch turns up in Camel's log files. Attached is a patch that directs Jsch logging to Camel's log file.,"davsclaus:1277262544:2010-06-23T11:09:04.645+0000:1277262544:2010-06-23T11:09:04.645+0000:trunk: 957155.

Thanks for the patch.
davsclaus:1303610491:2011-04-24T10:01:31.346+0000:1303610491:2011-04-24T10:01:31.346+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2841,Improvement,Major,"2.0-M1, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0, 2.2.0, 2.3.0",2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-06-23 07:47:54+00:00,2011-04-24 10:00:42+00:00,As we can change the CXF interceptors behavior by add the properties into the response context. so we need to make the DefaultCXFBinding support this.,davsclaus:1303610442:2011-04-24T10:00:42.555+0000:1303610442:2011-04-24T10:00:42.555+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2840,New Feature,Major,None,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Vikas Gupta,0,1,2010-06-23 05:11:54+00:00,2011-04-24 10:01:34+00:00,"Remove/move a particular message from the queue without being consumed others. 
like after filtering, Queue should contain all other messages intact and reordered. 


As of now, route can filter out the required message to desired endpoint but it drains out other messages as well for e.g.


from(""activemq:queue:Q1"").filter(header(""myType"").isEqualTo(""TEST"")).to(""activemq:queue:Q2"")


It successfully moves the messages to the required queue but after being consumed all other messages.","davsclaus:1277241970:2010-06-23T05:26:10.295+0000:1277241970:2010-06-23T05:26:10.295+0000:Please ask at the user mailing list first.

You need to use JMS selectors to filter messages on the JMS broker level.
vikasg:1277242771:2010-06-23T05:39:31.525+0000:1277242771:2010-06-23T05:39:31.525+0000:Already posted the query for the same and got feedback to create a feature request.

http://camel.465427.n5.nabble.com/Remove-a-particular-message-without-being-consumed-Others-in-queue-td510105.html#a510311
davsclaus:1277243986:2010-06-23T05:59:46.909+0000:1277243986:2010-06-23T05:59:46.909+0000:Still the solution is to use JMS selectors which offers this out of the box.
davsclaus:1277244292:2010-06-23T06:04:52.489+0000:1277244292:2010-06-23T06:04:52.489+0000:All you have to do is

{code}
from(""activemq:queue:Q1?selector=myType='TEST'"").to(""activemq:queue:Q2"")
{code}

vikasg:1277252086:2010-06-23T08:14:46.185+0000:1277252086:2010-06-23T08:14:46.185+0000:Thanks Claus.

I wonder about the reordering of the messages of the queue. Since, the placeholder would get emptied after the message got removed. 

Will it itself reorder the queue? 
davsclaus:1277256274:2010-06-23T09:24:34.666+0000:1277256274:2010-06-23T09:24:34.666+0000:Read about JMS selectors on the web
http://activemq.apache.org/selectors.html

The order of the messages on the queue is not changed. Its just that the client will _only see_ the messages which passes the filter. And thus only consume those messages. 
vikasg:1277329984:2010-06-24T05:53:04.056+0000:1277329984:2010-06-24T05:53:04.056+0000:from(""activemq:queue:Q1?selector=myType='TEST'"").to(""activemq:queue:Q2"") 

Its consuming the required message from the queue but not forwarding to the next specified endpoint.

Is there anything that i am missing?


davsclaus:1277355010:2010-06-24T12:50:10.683+0000:1277355010:2010-06-24T12:50:10.683+0000:Vikas use the mailing for help with Camel.
davsclaus:1303610494:2011-04-24T10:01:34.664+0000:1303610494:2011-04-24T10:01:34.664+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2839,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-22 13:20:24+00:00,2011-04-24 10:01:07+00:00,No Desc,"davsclaus:1277355319:2010-06-24T12:55:19.840+0000:1277355319:2010-06-24T12:55:19.840+0000:trunk: 957535.
davsclaus:1303610467:2011-04-24T10:01:07.158+0000:1303610467:2011-04-24T10:01:07.158+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2838,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-22 13:13:46+00:00,2011-04-24 10:00:39+00:00,No Desc,"davsclaus:1277183658:2010-06-22T13:14:18.124+0000:1277183658:2010-06-22T13:14:18.124+0000:The MulticastProcessor is leveraged by those 3 EIPs so we can have it supports for all of those.
davsclaus:1277187118:2010-06-22T14:11:58.551+0000:1277187118:2010-06-22T14:11:58.551+0000:trunk: 956902.

The major work is now done, only a few bits left.
davsclaus:1277262061:2010-06-23T11:01:01.895+0000:1277262061:2010-06-23T11:01:01.895+0000:trunk: 957153.
davsclaus:1277356901:2010-06-24T13:21:41.290+0000:1277356901:2010-06-24T13:21:41.290+0000:Okay whats left is to look into if its even somehow possible to support if when using {{parallelProcessing}} as well. The game plan changes a bit when using that.
davsclaus:1303610439:2011-04-24T10:00:39.120+0000:1303610439:2011-04-24T10:00:39.120+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2837,Improvement,Major,2.4.0,None,"
None
",Closed,Fixed,2.4.0,Christian Müller,Christian Müller,0,0,2010-06-21 17:38:53+00:00,2011-04-24 10:01:19+00:00,"The org.apache.camel.model.dataformat.CsvDataFormat doesn't support any attributes or nested elements in the XML DSL. So, currently it is not possible for the XML/Spring DSL to change the token delimiter as it is possible in the Java DSL.


See Nabble","muellerc:1277643775:2010-06-27T21:02:55.594+0000:1277643775:2010-06-27T21:02:55.594+0000:updated the wiki page
davsclaus:1303610479:2011-04-24T10:01:19.868+0000:1303610479:2011-04-24T10:01:19.868+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2836,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-21 13:46:45+00:00,2011-04-24 10:01:19+00:00,No Desc,"davsclaus:1277099280:2010-06-21T13:48:00.499+0000:1277099280:2010-06-21T13:48:00.499+0000:When you develop a custom interceptor using {{InterceptStrategy}} you return a Processor instance. Its preferred that instance is a {{AsyncProcessor}} to play well with the async routing engine.

We should use an internal bridge to adapt in case end user returns a plain Processor instance. Then we tap the process invocation to invoke the async version under the hood.
davsclaus:1277452262:2010-06-25T15:51:02.278+0000:1277452262:2010-06-25T15:51:02.278+0000:trunk: 958008.
davsclaus:1303610479:2011-04-24T10:01:19.390+0000:1303610479:2011-04-24T10:01:19.390+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2835,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-21 11:32:44+00:00,2011-04-24 10:00:50+00:00,No Desc,"davsclaus:1277101863:2010-06-21T14:31:03.342+0000:1277101863:2010-06-21T14:31:03.342+0000:trunk: 956598.
davsclaus:1303610450:2011-04-24T10:00:50.112+0000:1303610450:2011-04-24T10:00:50.112+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2834,Task,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Niall Pemberton,0,0,2010-06-21 09:53:55+00:00,2011-04-24 10:01:02+00:00,"The download links for Camel 2.3.0 on the following page point to the wrong location:



http://camel.apache.org/camel-230-release.html



They currently point to the old activemq location here:



http://www.apache.org/dyn/closer.cgi/activemq/apache-camel/2.3.0/apache-camel-2.3.0.zip



Rather than Camel's new location here:



http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.3.0/apache-camel-2.3.0.zip



I only checked the current 2.3.0 release - may also be true for older releases","davsclaus:1277102854:2010-06-21T14:47:34.477+0000:1277102854:2010-06-21T14:47:34.477+0000:Thanks. I have fixed the 2.3 release notes.

The 2.2 release notes was already correct.
davsclaus:1303610462:2011-04-24T10:01:02.026+0000:1303610462:2011-04-24T10:01:02.026+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2833,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Nick Heudecker,0,0,2010-06-20 23:55:08+00:00,2011-04-24 10:01:06+00:00,"Presently, the HTTP Component doesn't support transferring binary files.  The attached patch adds support.  Tested successfully using a file -> http route with a PUT.","njiang:1277056194:2010-06-21T01:49:54.362+0000:1277056194:2010-06-21T01:49:54.362+0000:Applied patch with thanks to Nick, also merged the patch into camel-http4 and added a unit test for it.
davsclaus:1277066274:2010-06-21T04:37:54.989+0000:1277066274:2010-06-21T04:37:54.989+0000:Willem you forgot to add the java.jpg file to SVN
{code}
Caused by: java.io.FileNotFoundException: src/test/resources/java.jpg (No such file or directory)
{code}


davsclaus:1277069841:2010-06-21T05:37:21.672+0000:1277069841:2010-06-21T05:37:21.672+0000:Willem I have committed a fix to fix the broken tests: 956460.

The IOHelper.getCharSet will fallback and return UTF-8 which broke the test in {{HttpBindingPreservePostFormUrlEncodedBodyTest}}.
I add a 2nd method to *not* fallback and use the default charset to have the test working and it to do as it did before.

That jpg file is still missing so please commit it.

And please run tests of camel-http and camel-jetty on your computer before committing. They dont take that long time to run, approx 5 min.
njiang:1277072364:2010-06-21T06:19:24.525+0000:1277072364:2010-06-21T06:19:24.525+0000:I'm sorry not running the test for the whole component and just committed the java.jpg file.
davsclaus:1303610466:2011-04-24T10:01:06.973+0000:1303610466:2011-04-24T10:01:06.973+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2832,Task,Minor,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-20 08:14:33+00:00,2011-04-24 10:01:09+00:00,"Dozer 5.2.2 has not a OSGi bundle as well, which means we dont have to maintain it at SMX bundles","davsclaus:1276993585:2010-06-20T08:26:25.132+0000:1276993585:2010-06-20T08:26:25.132+0000:trunk: 956327.
davsclaus:1276996632:2010-06-20T09:17:12.090+0000:1276996632:2010-06-20T09:17:12.090+0000:Hmm maybe the dozer osgi jar is not a valid osgi bundle?

We get this validation error running {{]/platforms/karaf/features$ mvn install -Pvalidate}}

{code}
[WARNING] Failed to validate feature camel-dozer
[WARNING] No export found to match org.apache.commons.beanutils (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
[WARNING] No export found to match org.apache.commons.lang (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
[WARNING] No export found to match javax.el (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
[WARNING] No export found to match org.apache.commons.lang.builder (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
[WARNING] No export found to match org.apache.xmlbeans (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
[WARNING] No export found to match org.apache.commons.beanutils.converters (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
java.lang.Exception: 6 unresolved imports in feature camel-dozer
{code}
davsclaus:1276997147:2010-06-20T09:25:47.454+0000:1276997147:2010-06-20T09:25:47.454+0000:Okay I got it down to 1 missing
{code}
[WARNING] Failed to validate feature camel-dozer
[WARNING] No export found to match javax.el (imported by mvn:net.sf.dozer/dozer-osgi/5.2.2)
java.lang.Exception: 1 unresolved imports in feature camel-dozer
{code}
davsclaus:1276997703:2010-06-20T09:35:03.485+0000:1276997703:2010-06-20T09:35:03.485+0000:So we need a javax.el bundle JAR
davsclaus:1276998033:2010-06-20T09:40:33.740+0000:1276998033:2010-06-20T09:40:33.740+0000:Okay got it working now
{code}
[INFO]     OK: imports resolved for camel-dozer
{code}

Springsource have a javax.el bundle jar
davsclaus:1276998104:2010-06-20T09:41:44.205+0000:1276998104:2010-06-20T09:41:44.205+0000:trunk: 956339.
njiang:1276998297:2010-06-20T09:44:57.722+0000:1276998297:2010-06-20T09:44:57.722+0000:Hi Claus,

We are using the 
{code}
<bundle>mvn:org.ops4j.pax.web/pax-web-jsp/0.7.2</bundle>
{code}
for the javax.el package.

You can take the camel-juel feature as an example.

davsclaus:1277022699:2010-06-20T16:31:39.143+0000:1277022699:2010-06-20T16:31:39.143+0000:Thx Willem will change it
davsclaus:1277023276:2010-06-20T16:41:16.583+0000:1277023276:2010-06-20T16:41:16.583+0000:I now get this issue if using that jsp bundle instead
{code}
[WARNING] Failed to validate feature camel-dozer
[WARNING] No export found to match javax.servlet.resources;version=""[2.3.0,3.0.0)"" (imported by mvn:org.ops4j.pax.web/pax-web-jsp/0.7.2)
java.lang.Exception: 1 unresolved imports in feature camel-dozer
{code}


davsclaus:1303610469:2011-04-24T10:01:09.411+0000:1303610469:2011-04-24T10:01:09.411+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2831,Task,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-06-20 07:51:47+00:00,2011-04-24 10:01:35+00:00,"See CAMEL-2808


Quartz 1.8.2 has just been released
We need an OSGi wrapped bundle for it as well.",davsclaus:1303610495:2011-04-24T10:01:35.888+0000:1303610495:2011-04-24T10:01:35.888+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2830,New Feature,Minor,2.3.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,0,0,2010-06-18 14:33:32+00:00,2015-02-17 06:57:24+00:00,"Suppose you are processing a big file with many CSV rows. 
And you map those using bindy to objects. Now some of the CSV rows is invalid, which would cause Bindy to thrown an exception.


We should add an option so end user can suppress this and let bindy continue and collect those failed rows.
Then those rows could be set as a header on the message.


You may need some container object to store the validation errors, or offer a interface for callbacks when a validation error was found.
For example like the org.xml.sax.ErrorHandler interface which is callback based.","davsclaus:1276842869:2010-06-18T14:34:29.777+0000:1276842869:2010-06-18T14:34:29.777+0000:See nabble
http://camel.465427.n5.nabble.com/Bindy-CsvRecord-handling-bad-records-on-batch-processing-tp473119p473119.html
cmoulliard:1276843873:2010-06-18T14:51:13.114+0000:1276843873:2010-06-18T14:51:13.114+0000:That means that we should create a specific error for that case to avoid that IllegalArgumentException (used for the moment) or FormatNumberException will be by passed. "
0,CAMEL-2829,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Bengt Rodehav,0,0,2010-06-18 12:41:02+00:00,2011-04-24 10:00:58+00:00,"When using ftps with a secure data channel, camel-ftp cannot recover from a lost connection. This is due to a bug/flaw in the SFTPClient class in commons-net. Once a secure data channel has been established, SFTPClient replaces the connection factory with one that does not provide support for creating ""unconnected sockets"".


While waiting for a fix from the commons-net team (should they chosse to create one), a work-around in camel-ftp is to always create a new instance of SFTPClient for every connect attempt.


Attached are patches containing an attempt to implement the mentioned work-around. The classes, FtpsOperations, FtpsEndpoint and FtpOperations are involved.","rodehav:1276836215:2010-06-18T12:43:35.169+0000:1276836215:2010-06-18T12:43:35.169+0000:Diff files relative to revision 955969.
davsclaus:1277082836:2010-06-21T09:13:56.019+0000:1277082836:2010-06-21T09:13:56.019+0000:trunk: 956507.

Bengt I have committed a fix for better re-connect logic in camel-ftp. Could you test it on your system?
davsclaus:1277082856:2010-06-21T09:14:16.944+0000:1277082856:2010-06-21T09:14:16.944+0000:See nabble
http://camel.465427.n5.nabble.com/Unconnected-sockets-not-implemented-exception-in-camel-ftp-when-using-ftps-tp509695p509695.html
davsclaus:1277082882:2010-06-21T09:14:42.641+0000:1277082882:2010-06-21T09:14:42.641+0000:Link to created ticket at Apache Commons Net
https://issues.apache.org/jira/browse/NET-327
rodehav:1277120326:2010-06-21T19:38:46.430+0000:1277120326:2010-06-21T19:38:46.430+0000:Claus, I've tested your new re-connect logic and it works fine. So far I've only tested the producer side. Will try to test the consumer side as well.
rodehav:1277122059:2010-06-21T20:07:39.041+0000:1277122059:2010-06-21T20:07:39.041+0000:I've now tested the consumer side as well. Seems to work as well. If I poll via ftps and then stop the ftps server (Filezilla) then I can see the ""unconnected sockets"" in the log. When I start Filezilla again, camel manages to recover and re-connect.
davsclaus:1277152570:2010-06-22T04:36:10.038+0000:1277152570:2010-06-22T04:36:10.038+0000:Yeah thanks a lot Bengt for reporting and helping with resolving this issue. Great work digging into the source and identify the root cause and testing it with live systems.

Community works!
davsclaus:1303610458:2011-04-24T10:00:58.296+0000:1303610458:2011-04-24T10:00:58.296+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2828,Sub-task,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-18 10:39:00+00:00,2011-04-24 10:01:40+00:00,"The current seda component have options to control timeout and waiting for task etc, which causes it to wait (block).


The new asynchronous routing engine does not block so we ought to offer a new seda component that leverages this.
And also a queue component to just transfer an Exchange to, without worrying about waiting for reply etc.","davsclaus:1277448312:2010-06-25T14:45:12.814+0000:1277448312:2010-06-25T14:45:12.814+0000:trunk: 957996.
davsclaus:1303610500:2011-04-24T10:01:40.292+0000:1303610500:2011-04-24T10:01:40.292+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2827,Improvement,Major,None,None,"
None
",Closed,Fixed,1.6.4,Willem Jiang,Willem Jiang,0,0,2010-06-17 09:56:48+00:00,2011-01-17 16:50:48+00:00,"When I updated the CXF version to 2.2.9 in camel-1.x branch, the CamelTransportClientServerTest of camel-example-cxf was failed.
To fix it, we need to merge http chucked option support from camel trunk to camel 1.x branch.",davsclaus:1295254248:2011-01-17T16:50:48.563+0000:1295254248:2011-01-17T16:50:48.563+0000:Closing all 1.x tickets
0,CAMEL-2826,Bug,Critical,1.6.3,1.6.4,"
None
",Closed,Fixed,1.6.4,Willem Jiang,Ron Gavlin,0,0,2010-06-17 08:56:11+00:00,2011-01-17 16:50:48+00:00,"When a route contains an exception handler clause, a stream based message being redelivered asynchronously after an error is not readable. The cached streams must be reset before redelivery so that they can be read again by the target endpoint. See CAMEL-1834 for a similar problem.","rgavlin:1276736319:2010-06-17T08:58:39.748+0000:1276736319:2010-06-17T08:58:39.748+0000:I plan to submit a patch shortly for this issue.
rgavlin:1276744948:2010-06-17T11:22:28.780+0000:1276744948:2010-06-17T11:22:28.780+0000:DeadLetterChannel patch for 1.x branch.
davsclaus:1276808382:2010-06-18T04:59:42.030+0000:1276808382:2010-06-18T04:59:42.030+0000:Thanks for the patch Ron. Willem have committed it to 1.x so it will be part of the 1.6.4 release.
davsclaus:1276808817:2010-06-18T05:06:57.511+0000:1276808817:2010-06-18T05:06:57.511+0000:1.x: 955817
davsclaus:1295254248:2011-01-17T16:50:48.170+0000:1295254248:2011-01-17T16:50:48.170+0000:Closing all 1.x tickets"
0,CAMEL-2825,Bug,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-17 07:16:29+00:00,2011-04-24 10:01:37+00:00,Continued is in fact just like handled by will not break out but continue routing as if the exception didnt occur. So we should not log the exception by default.,"davsclaus:1276731735:2010-06-17T07:42:15.124+0000:1276731735:2010-06-17T07:42:15.124+0000:trunk: 955499.
davsclaus:1303610497:2011-04-24T10:01:37.083+0000:1303610497:2011-04-24T10:01:37.083+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2824,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Tarjei Huse,0,0,2010-06-16 19:43:30+00:00,2011-04-24 10:01:07+00:00,"After running a camel route with a camel Aggregator for a while, I get a deadlock in  org.apache.camel.util.DefaultTimeoutMap. A full processdump is attached to this bug.


I have also tried to recreate this as failing testcase, but without any luck so far.","tarjei@scanmine.com:1276688680:2010-06-16T19:44:40.578+0000:1276688680:2010-06-16T19:44:40.578+0000:The attached processdump shows the deadlock as well as the running threads. 
tarjei@scanmine.com:1276690278:2010-06-16T20:11:18.659+0000:1276690278:2010-06-16T20:11:18.659+0000:I have managed to recreate the deadlock using the testcase above on a different computer, linux kernel and JVM. 

Found one Java-level deadlock:
=============================
""Camel Thread 0 - AggregateTimeoutChecker"":
  waiting for ownable synchronizer 0xb0ff7060, (a java.util.concurrent.locks.ReentrantLock$FairSync),
  which is held by ""main""
""main"":
  waiting for ownable synchronizer 0xb0ffef28, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
  which is held by ""Camel Thread 0 - AggregateTimeoutChecker""

Java stack information for the threads listed above:
===================================================
""Camel Thread 0 - AggregateTimeoutChecker"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ff7060> (a java.util.concurrent.locks.ReentrantLock$FairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$FairSync.lock(ReentrantLock.java:201)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:575)
	at org.apache.camel.processor.aggregate.AggregateProcessor$AggregationTimeoutMap.onEviction(AggregateProcessor.java:548)
	at org.apache.camel.util.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:166)
	at org.apache.camel.util.DefaultTimeoutMap.run(DefaultTimeoutMap.java:121)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
""main"":
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <0xb0ffef28> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
	at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)
	at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
	at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:78)
	at org.apache.camel.processor.aggregate.AggregateProcessor.isCompleted(AggregateProcessor.java:318)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:235)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)


	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:230)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:209)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:208)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:118)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:104)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:344)
	at org.apache.camel.core.DeadlockTestCase.sendMsg(DeadlockTestCase.java:82)
	at org.apache.camel.core.DeadlockTestCase.testDeadlock(DeadlockTestCase.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
	at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
	at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
	at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.run(SurefireBooter.java:241)
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:537)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)

Found 1 deadlock.

tarjei@scanmine.com:1276690684:2010-06-16T20:18:04.901+0000:1276690684:2010-06-16T20:18:04.901+0000:This is the basic contextfile I use to run the deadlock testcase.
davsclaus:1276810612:2010-06-18T05:36:52.690+0000:1276810612:2010-06-18T05:36:52.690+0000:trunk: 955841.

Tarjei thanks for the dump and reporting this issue.

I have committed a fix. Can you test it on your system with the fix?
davsclaus:1276810869:2010-06-18T05:41:09.594+0000:1276810869:2010-06-18T05:41:09.594+0000:This dead lock only occurs when using timeout as completion condition and Camel is currently aggregating while a timeout condition occurs and there is an Exchange to be evicted.
tarjei@scanmine.com:1276826281:2010-06-18T09:58:01.979+0000:1276826281:2010-06-18T09:58:01.979+0000:I can confirm that the deadlock test I created does not fail in multiple runs. The change has been implemented to the system so we'll see if it works. 
davsclaus:1277163594:2010-06-22T07:39:54.070+0000:1277163594:2010-06-22T07:39:54.070+0000:trunk: 956800.

Tarjei I have improved the locking logic so there is only 1 lock in use which should prevent any dead locks. Feel free to give it a test in your system.
davsclaus:1303610467:2011-04-24T10:01:07.591+0000:1303610467:2011-04-24T10:01:07.591+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2823,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Andreas Asmuss,4,3,2010-06-16 08:53:11+00:00,2014-03-04 07:20:51+00:00,"Many endpoints have a ""delay"" option. There should also be the option to use a cron-expression directly in the URI.


This would mean that batch-endpoints like file/ftp could fetch a batch of files per ""cron-trigger"" instead of enriching a single quartz message with a the payload of a single file.


This would also mean that one wouldn't have to do workarounds trying to handle route lifecycles manually like here:
http://camel.465427.n5.nabble.com/Route-does-not-shut-down-if-there-is-no-message-on-poll-td476108.html#a476108","davsclaus:1276650156:2010-06-16T09:02:36.426+0000:1276650156:2010-06-16T09:02:36.426+0000:Andreas we already got a couple of tickets on this matter to have CRON style scheduling for consumers which supports scheduling.

ankelee:1276651003:2010-06-16T09:16:43.483+0000:1276651003:2010-06-16T09:16:43.483+0000:Alright, my bad.

Is it on its way? It should be a pretty normal use case that I can't find any solution for.
davsclaus:1276657871:2010-06-16T11:11:11.159+0000:1276657871:2010-06-16T11:11:11.159+0000:Its on the roadmap for the future.

We will introduce a DSL so you can define a nice way of specifying the scheduling.
Also the CRON parsers must be pluggable so you can use Spring CRON or Quartz CRON etc. So its not super easy to implement.

However its most likely not on the 2.4 timeframe as we got major goals with OSGi and Async stuff to work with.
davsclaus:1393888851:2014-03-04T07:20:51.250+0000:1393888851:2014-03-04T07:20:51.250+0000:See the scheduler polling consumer which has support for scheduler, where you can use quartz2/spring which support cron
http://camel.apache.org/polling-consumer"
0,CAMEL-2822,New Feature,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Andreas Asmuss,0,0,2010-06-16 08:36:33+00:00,2013-05-02 02:30:57+00:00,"Sometimes you need to send a special site command to an FTP server, for example before uploading files.


The FTP endpoint should support this in the URI.","davsclaus:1281417461:2010-08-10T13:17:41.680+0000:1281417461:2010-08-10T13:17:41.680+0000:Wonder if you need to differentiate between sending site command(s)
- just after connecting (and therefore not before every upload)
- or always before every upload

And what about the consumer side (eg when downloading)?
Do you need it there as well?
ankelee:1281485827:2010-08-11T08:17:07.451+0000:1281485827:2010-08-11T08:17:07.451+0000:Personally I would only need it ""just after connecting"" but I'm unsure if there could be other use cases that would need commands before every upload. I doubt it though - maybe Bengt has an opinion: http://camel.465427.n5.nabble.com/camel-ftp-and-login-script-td599274.html#a599274

Consumer side: Personally I don't need it but I suppose there could be uses for it.

A site specific command could be anything really. So I would think that all the combinations theoretically could be relevant - I don't know how often though.
davsclaus:1281584156:2010-08-12T11:35:56.579+0000:1281584156:2010-08-12T11:35:56.579+0000:trunk: 984720.

Andreas I have committed a feature for sending site commands.
It's executed after every successful login attempts.

You can separate multiple commands using new line char (\n).

Care to test it?
davsclaus:1303610253:2011-04-24T09:57:33.653+0000:1303610253:2011-04-24T09:57:33.653+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2821,Bug,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-16 04:14:55+00:00,2011-04-24 10:01:32+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-ftp-cannot-create-directory-using-sftp-tp479092p479092.html","davsclaus:1276633025:2010-06-16T04:17:05.493+0000:1276633025:2010-06-16T04:17:05.493+0000:trunk: 955123
davsclaus:1303610492:2011-04-24T10:01:32.410+0000:1303610492:2011-04-24T10:01:32.410+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2820,New Feature,Major,2.3.0,2.5.0,"
None
",Closed,Incomplete,2.5.0,Claus Ibsen,Fernando Ribeiro,0,0,2010-06-16 02:54:57+00:00,2013-09-27 21:10:13+00:00,"When users want to aggregate XML messages, they should be able to use XQuery or XSLT, instead of manipulating XML by hand.","davsclaus:1283150446:2010-08-30T14:40:46.569+0000:1283150446:2010-08-30T14:40:46.569+0000:Could you post more details what you mean?
davsclaus:1303610259:2011-04-24T09:57:39.506+0000:1303610259:2011-04-24T09:57:39.506+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2819,New Feature,Major,2.3.0,,"
None
",Closed,Incomplete,None,Claus Ibsen,Fernando Ribeiro,0,1,2010-06-16 02:26:43+00:00,2011-04-24 09:58:01+00:00,"When users want to create XML messages from exceptions in fault processors, they should be able to use XQuery or XSLT, instead of creating XML by hand.","davsclaus:1283150417:2010-08-30T14:40:17.889+0000:1283150417:2010-08-30T14:40:17.889+0000:Could you post more details what you mean?
davsclaus:1284857317:2010-09-19T08:48:37.142+0000:1284857317:2010-09-19T08:48:37.142+0000:There is plenty of XML API in the JDK to use.
davsclaus:1303610281:2011-04-24T09:58:01.076+0000:1303610281:2011-04-24T09:58:01.076+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2818,Improvement,Trivial,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Karl Palsson,0,0,2010-06-15 22:29:22+00:00,2011-04-24 09:58:18+00:00,"On http://camel.apache.org/tutorial-example-reportincident-part4.html in the section labelled: Adding the RouteBuilder, there is some code labelled as being inside the web service operation...



public OutputReportIncident reportIncident(InputReportIncident parameters) {
        Object mailBody = context.createProducerTemplate().sendBody(""direct:start"", parameters);
        System.out.println(""Body:"" + mailBody);

        // return an OK reply
        OutputReportIncident out = new OutputReportIncident();
        out.setCode(""OK"");
        return out;
    }




The commentary underneath makes special note of obtaining the producerTemplate with context.createProducerTemplate() 


However, using this example code will result in leaks of DirectProducer objects (under camel 2.1.x) or ThreadPoolExecutors (under camel 2.3.x) and eventual heap exhaustion.


A web service implementation class should create a single producer template, and reuse it.  Alternatively, there's something wild and wooly going on that's preventing the template from being garbage collected.","davsclaus:1278378893:2010-07-06T09:14:53.962+0000:1278378893:2010-07-06T09:14:53.962+0000:Updated the docs
davsclaus:1303610298:2011-04-24T09:58:18.740+0000:1303610298:2011-04-24T09:58:18.740+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2817,Bug,Major,2.1.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Karl Palsson,0,1,2010-06-15 22:17:11+00:00,2011-04-24 10:00:55+00:00,"I have an ftp consumer endpoint URI like: 
ftp://conaxTest@localhost:2121/autreq/ok?passiveMode=true&amp;password=conaxTest&move=.processed&delay=5000


From my ftp server logs, I can see files being downloaded, and then renamed...



[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006331.emm>
[org.apache.ftpserver.command.impl.RETR:pool-2-thread-56] - <File downloaded /autreq/ok/vp006332.emm>
[org.apache.ftpserver.impl.DefaultFtpHandler:pool-2-thread-57] - <Session idle, closing>
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-56] - <File rename from ""/autreq/ok/vp006331.emm"" to ""/autreq/ok/.processed/vp006331.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006332.emm"" to ""/autreq/ok/.processed/vp006332.emm"">
[org.apache.ftpserver.command.impl.RNTO:pool-2-thread-54] - <File rename from ""/autreq/ok/vp006333.emm"" to ""/autreq/ok/.processed/vp006333.emm"">


Note, that vp006333.emm is renamed, but was never downloaded.  There's no other mention of the file in my logs.  On the camel ftp consumer side, I see that camel attempted to download the file, but ended up with a null...



[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006331.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006331 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006332.emm]>
[is.vf.conan.ConanCore:Camel thread 7: seda://updateOk] - <updating operation txid:006332 with the results: OK>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <handling: GenericFile[vp006333.emm]>
[is.vf.conan.conax.FileParser:Camel thread 7: seda://updateOk] - <Requested parse of an empty file!>


The ""requested parse of an empty file"" is logged when ex.getIn().getBody(String.class) is empty or blank for the file object.


I had a look through the bugs fixed for 2.3.0, but I don't see anything that would be related to this at all.","davsclaus:1276634214:2010-06-16T04:36:54.403+0000:1276634214:2010-06-16T04:36:54.403+0000:Karl how often can you reproduce this issue?
davsclaus:1276634955:2010-06-16T04:49:15.992+0000:1276634955:2010-06-16T04:49:15.992+0000:trunk: 955126.

I found an issue and have fixed this. You are welcome to test with 2.4-SNAPSHOT jars on your system.
The fix is in camel-core so you need to upgrade all Camel JARs to 2.4-SNAPSHOT
davsclaus:1303610455:2011-04-24T10:00:55.901+0000:1303610455:2011-04-24T10:00:55.901+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2816,Improvement,Minor,2.2.0,2.4.0,"
None
",Closed,Not A Problem,2.4.0,Claus Ibsen,ray,0,0,2010-06-15 13:40:04+00:00,2011-04-24 09:58:11+00:00,"But Came only works with the following spec:  fromURL=""someQ?selector=CamelFileNameOnly like 'SomeFile%25'""


In summary the standard JMS selector wilcard (x like '%y%') is not supported. 


Instead the % must be encoded as %25 (hex value for %), which is ugly.","davsclaus:1278378500:2010-07-06T09:08:20.321+0000:1278378541:2010-07-06T09:09:01.492+0000:This is because you set the configuration using endpoint URI which is encoded according to the standards
http://en.wikipedia.org/wiki/URI_encoding

{quote}
*Current standard*
The generic URI syntax mandates that new URI schemes that provide for the representation of character data in a URI must, in effect, represent characters from the unreserved set without translation, and should convert all other characters to bytes according to UTF-8, and then percent-encode those values. This requirement was introduced in January 2005 with the publication of RFC 3986. URI schemes introduced before this date are not affected.
{quote}

Since the {{%}} char is *not* from the _unreserved set_ it falls into the rule of having to be converted to bytes and then percent-encoded.

So the implementation in Camel is correct.
davsclaus:1303610291:2011-04-24T09:58:11.632+0000:1303610291:2011-04-24T09:58:11.632+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2815,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Darren Davison,0,0,2010-06-15 10:32:38+00:00,2011-04-24 10:01:05+00:00,"camel-castor specifies a non-flexible version dependency on Castor 1.2.0.  Ideally should be changed to [1.2.0,2.0) to allow later versions of Castor to be deployed.  Castor 1.2 was released in Feb 2008, 1.3 was first released in Feb 2009",davsclaus:1303610465:2011-04-24T10:01:05.379+0000:1303610465:2011-04-24T10:01:05.379+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2814,Task,Minor,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-15 05:44:20+00:00,2011-04-24 10:01:30+00:00,No Desc,"davsclaus:1276551907:2010-06-15T05:45:07.851+0000:1276551907:2010-06-15T05:45:07.851+0000:trunk: 954713.
davsclaus:1303610490:2011-04-24T10:01:30.006+0000:1303610490:2011-04-24T10:01:30.006+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2813,Task,Major,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Christian Müller,Christian Müller,0,0,2010-06-14 21:30:50+00:00,2011-04-24 10:01:17+00:00,No Desc,"muellerc:1276522538:2010-06-14T21:35:38.990+0000:1276522538:2010-06-14T21:35:38.990+0000:Revision [298|http://code.google.com/p/camel-extra/source/detail?r=298]
davsclaus:1303610477:2011-04-24T10:01:17.361+0000:1303610477:2011-04-24T10:01:17.361+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2782,Improvement,Critical,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Christian Müller,Jaco van Tonder,0,0,2010-06-02 10:11:10+00:00,2011-04-24 10:00:41+00:00,"The camel-smpp conponent should reconnect to the SMSC after a connection failure.


Currently, if there is a connection failure between the Camel SMPP endpoint and the SMSC, the connection will just die, although the route will still show up as active. The expected behavior is that once the connection dies, the session state change must trigger a reconnect to the SMSC.


The session state monitoring is provided by the SessionStateListener class of the jsmpp implementation that is used for camel-smpp.


Patches to follow.","hadrian:1275458478:2010-06-02T14:01:18.465+0000:1275458478:2010-06-02T14:01:18.465+0000:Thanks. Patches are highly appreciated.
muellerc:1275641933:2010-06-04T16:58:53.593+0000:1275641933:2010-06-04T16:58:53.593+0000:Jaco,
thanks for your mail and the patch. I added it to my workspace and worked further on it. I think we solved this issue. Currently I adding some more unit test to this component, using the jsmpp SMPPServerSimulator. I hope with this we could also test more difficult scenarios like lost connections.

I would also like to use this issue thread for further discussions about this issue. May be a smarter guy than me has a better solution... :-)

Cheers,
Christian
muellerc:1276437591:2010-06-13T21:59:51.897+0000:1276437591:2010-06-13T21:59:51.897+0000:I updated the wiki.

@Jaco: Feel free to test the current trunk, if the fix fits your needs.
davsclaus:1303610441:2011-04-24T10:00:41.608+0000:1303610441:2011-04-24T10:00:41.608+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2781,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-06-02 09:37:47+00:00,2011-04-24 10:00:42+00:00,No Desc,"gnodet:1275456961:2010-06-02T13:36:01.804+0000:1275456961:2010-06-02T13:36:01.804+0000:Deleting       components/camel-osgi/src/test/java/org/apache/camel/core
Deleting       components/camel-osgi/src/test/java/org/apache/camel/osgi
Deleting       components/camel-osgi/src/test/resources/META-INF/services
Deleting       components/camel-osgi/src/test/resources/org/apache/camel/osgi
Sending        components/camel-spring/pom.xml
Adding         components/camel-spring/src/main/java/org/apache/camel/osgi
Sending        components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java
Sending        components/camel-spring/src/main/resources/META-INF/spring.handlers
Sending        components/camel-spring/src/main/resources/META-INF/spring.schemas
Adding         components/camel-spring/src/main/resources/camel-osgi.xsd
Adding         components/camel-spring/src/main/resources/org/apache/camel/osgi
Adding         components/camel-spring/src/test/java/org/apache/camel/core
Adding         components/camel-spring/src/test/java/org/apache/camel/osgi
Adding         components/camel-spring/src/test/resources/META-INF/services
Adding         components/camel-spring/src/test/resources/org/apache/camel/osgi
Deleting       components/camel-spring-osgi
Sending        components/pom.xml
Sending        platforms/karaf/features/src/main/resources/features-spring3.xml
Sending        platforms/karaf/features/src/main/resources/features.xml
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/MailRouteTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/OSGiIntegrationTestSupport.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/VelocityTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jaxb/JaxbFallbackConverterSpringTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jaxb/JaxbFallbackConverterTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jpa/JpaRouteTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/protobuf/ProtobufRouteTest.java
Sending        tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/ServletComponentTest.java
Sending        tests/pom.xml
Transmitting file data ................
Committed revision 950563.

davsclaus:1303610442:2011-04-24T10:00:42.428+0000:1303610442:2011-04-24T10:00:42.428+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2780,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-06-02 08:44:17+00:00,2011-04-24 10:01:20+00:00,"In this way , user don't need to set the message header with operation name and operation namespace every time.
Here is the mail thread which discusses about it.",davsclaus:1303610480:2011-04-24T10:01:20.024+0000:1303610480:2011-04-24T10:01:20.024+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2779,New Feature,Major,None,None,"
None
",Closed,Fixed,2.5.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-06-02 05:07:54+00:00,2011-04-24 09:57:41+00:00,"Looks like Apache Shiro could be a good security framework
http://incubator.apache.org/shiro/index.html","akarpe:1279035323:2010-07-13T23:35:23.735+0000:1279035323:2010-07-13T23:35:23.735+0000:Hi Claus, Willem & Hadrian,

I have developed a component for Shiro security (both Authentication and Authorization) and am submitting it for your review. 

Can you please let me know what you think and whether you would like to see any edits or updates. I will commit the changes following your go-ahead to do so.

Cheers,

Ashwin...  
davsclaus:1279056680:2010-07-14T05:31:20.310+0000:1279056680:2010-07-14T05:31:20.310+0000:Ashwin we will take a look after the dust of the Camel 2.4 release has settled. 

Please refrain from committing big changes to the trunk, in case a new 2.4 release has to be cut etc. Its best to only commit bug fixes until the 2.4 is GA.
akarpe:1279667827:2010-07-21T07:17:07.633+0000:1279668023:2010-07-21T07:20:23.308+0000:Hi Claus,

I just saw that the 2.4 release is now GA. Do you have any edits or comments on this component submission.

I would like to commit the changes, complete the documentation process and move on to other bugs/fixes.

BTW, I have submitted a camel-sip component as well and would appreciate your comments on that components as well.

Cheers,

Ashwin... 
davsclaus:1279670007:2010-07-21T07:53:27.114+0000:1279670007:2010-07-21T07:53:27.114+0000:Looks good a couple of comments

- You may have to close streams after usage. You got a bit of input stream which most often need to be closed after usage
- Why does the component deps on camel-spring? Is spring really needed for Shiro? If not remove this dep.
- I think there is a bit too much DEBUG logging. Some of them can be turned into TRACE.
- In authenticateUser why do you wrap the thrown exceptions? Isn't it possible to throw the exceptions as is? eg just add throws Exception to the method signature? I assume Shiro contains detailed information why the exception was thrown.

- The AuthenticationPolicy need to support async routing engine. This is something I can help with when we got the other sorted out. (The same most likely applies for camel-spring-security)


akarpe:1279720948:2010-07-21T22:02:28.286+0000:1279720948:2010-07-21T22:02:28.286+0000:Hi Claus,

Thanks for your comments and input. I will make the necessary changes you recommend and re-submit the component.

I will also check out the new async routing engine and see how it works.

Cheers,

Ashwin...
 
lhazlewood:1279792974:2010-07-22T18:02:54.497+0000:1279792974:2010-07-22T18:02:54.497+0000:Hi Ashwin, Claus,

A quick note:  Shiro does not require Spring - it can work in any environment.

I also have some minor questions about the current ShiroSecurityPolicy implementation (in the diff file):

Why does it have a DefaultBlockCipherService reference instead of just CipherService (an interface)?  That way an end-user could configure whatever Cipher mechanism they want.  Also, since you're using Blowfish by default, you might want to use the already-available BlowfishCipherService instead of manually configuring a DefaultBlockCipherService implementation (minor, but still). 

Finally, and this is very minor - while Blowfish has not been susceptible to modern cryptanalyst attacks with a sufficient key size (e.g. 128 bits or more), AES has been approved for highest U.S. government top-secret clearance (at 256 bit keysize).  A lot of people end up choosing AES by default just because of the extra scrutiny it has been through, making them feel a little 'safer'.  Why not default to an AesCipherService by default?

Anyway, just trying to help!

Cheers,

Les
(Apache Shiro team)
akarpe:1279820090:2010-07-23T01:34:50.169+0000:1279820149:2010-07-23T01:35:49.327+0000:Hi Les,

Thanks for your input. I am currently refactoring the code to incorporate suggestions by Claus and will incorporate all your suggestions into the new re-factored version.

BTW, though the implementation defaults to Blowfish it is definitely possible to use AES as well. It just needs a different constructor/setter.  In any event, your points are well taken and I will make the changes you recommend.

Thanks and Regards,

Ashwin...
davsclaus:1279831644:2010-07-23T04:47:24.938+0000:1279831644:2010-07-23T04:47:24.938+0000:Les, thanks a lot for your feedback.

Much appreciated you take time to help us.
akarpe:1280232666:2010-07-27T20:11:06.237+0000:1280232666:2010-07-27T20:11:06.237+0000:Hi Claus,

I have attached a new zip file and camel-shiro.diff file which incorporates all the changes recommended by you and Les Hazelwood from the Shiro team. 

The Default CipherService has now been switched to AES 128 bit encryption. I have also incorporated the AsyncProcessor & Callback support into the ShiroSecurityPolicy. I am not quite sure how to write a test for this. I would be happy to incorporate some unit tests to showcase the capability.

I have ensured that both Authentication and Authorization unit tests work with the changes I have made. 

Can you please let me know what you think. I would be happy to incorporate any further thoughts or comments.

Cheers,

Ashwin... 
davsclaus:1280263547:2010-07-28T04:45:47.923+0000:1280263547:2010-07-28T04:45:47.923+0000:Les / Ashwin

I assume the {{IniSecurityManagerFactory}} loads the .ini file from classpath
What if you want to load the ini file from file system?

And does the loading from Classpath support OSGi environments?
We need to add a test for this in camel/tests/camel-itest-osgi
Is Apache Shirino jar OSGi bundles?


Ashwin I wonder if loading from an ini file is the most common thing, we could maybe make the policy a one liner
{code}
+        Factory<SecurityManager> factory = new IniSecurityManagerFactory(""./src/test/resources/securityconfig.ini"");
+        SecurityManager securityManager = factory.getInstance();
+        final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy(securityManager, passPhrase, true, permissionsList);
+        
{code}

Could be
{code}
+        final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("".src/test/resources/securityconfig.ini"", passPhrase, true, permissionsList);
+        
{code}

davsclaus:1280263662:2010-07-28T04:47:42.959+0000:1280263662:2010-07-28T04:47:42.959+0000:This method most likely need to close the outputs stream after usage
{code}
+    public ByteSource encrypt() throws Exception {
+        ByteArrayOutputStream stream = new  ByteArrayOutputStream();
+        ObjectOutput serialStream = new ObjectOutputStream(stream);
+        serialStream.writeObject(securityToken);
+        ByteSource byteSource = cipherService.encrypt(stream.toByteArray(), passPhrase);
+        return byteSource;
+        
+    }
+
{code}

Also there is an empty line at the end, and a double space. The checkstyle of Camel will pickup this
http://camel.apache.org/building.html
davsclaus:1280263704:2010-07-28T04:48:24.942+0000:1280263704:2010-07-28T04:48:24.942+0000:And you setup a LOG which you never use as well in the  same class
davsclaus:1280264462:2010-07-28T05:01:02.096+0000:1280264462:2010-07-28T05:01:02.096+0000:The async processor is a bit wrong.

See the unit test from camel-core: AsyncEndpointPolicyTest

You only need to do the complex async stuff in case the policy must do some *after* work, i.e. do some work after the Exchange has been processed.
If not then you have a simple situation.

But we can take a 2nd look at this after the component has been committed. Then we can add unit test for async support and ensure it works nicely.

akarpe:1280286349:2010-07-28T11:05:49.658+0000:1280286766:2010-07-28T11:12:46.392+0000:Hi Claus,

I will make the changes you recommend.

BTW, The Ini file is not the only way to instantiate the ShiroSecurityPolicy. The way you recommend was the way I had it at first pass. You could hand-create an Ini object, pass in a resource, or handcraft a SecurityManager as well. Hence I chose the SecurityManager as a option since it is the key entity irrespective of how the Ini was created. 

For example

{code}Ini ini = new Ini();
Ini.Section section = ini.addSection(IniSecurityManagerFactory.MAIN_SECTION_NAME);
section.put(""propsRealm"", PropertiesRealm.class.getName());
section.put(""propsRealm.resourcePath"",
       ""classpath:org/apache/shiro/config/IniSecurityManagerFactoryTest.propsRealm.properties"");

IniSecurityManagerFactory factory = new IniSecurityManagerFactory(ini);
SecurityManager sm = factory.getInstance();
{code}

I am of course be happy to modify the API to support the different options and will submit with the necessary changes. 

Cheers,

Ashwin...
akarpe:1280313342:2010-07-28T18:35:42.810+0000:1280313413:2010-07-28T18:36:53.563+0000:Hi Claus,

I have made the changes you suggested and have also modified the AsyncProcessor code.

Please find attached the latest diff and zip file. 

The unit tests are in good working order. If you agree, and have no further comments, I will go ahead and commit the component to the trunk.

Cheers,

Ashwin...
davsclaus:1280313924:2010-07-28T18:45:24.228+0000:1280313924:2010-07-28T18:45:24.228+0000:Dont commit the eclipse .project file :)

+1 to commit
akarpe:1280327420:2010-07-28T22:30:20.846+0000:1280327420:2010-07-28T22:30:20.846+0000:Committed into the Camel trunk as version r980172
akarpe:1280327519:2010-07-28T22:31:59.219+0000:1280327519:2010-07-28T22:31:59.219+0000:Need to correctly specify fix version for this issue
akarpe:1280327549:2010-07-28T22:32:29.435+0000:1280327549:2010-07-28T22:32:29.435+0000:Changed fix version from Future to 2.5.0
lhazlewood:1280335227:2010-07-29T00:40:27.025+0000:1280335227:2010-07-29T00:40:27.025+0000:Sorry this comment is a little late, but for posterity, the configuration options for the IniSecurityManagerFactory are listed here:

http://incubator.apache.org/shiro/configuration.html#Configuration-CreatingaSecurityManagerfromINI

You can load a .ini resource from the classpath, file system, or from any url.  If you don't want to use these three, you can alternatively programmatically construct an Ini instance and use that directly.  In fact, the resource-based options do exactly this internally and reduce to an Ini instance. 

But if you use the Shiro resource prefixes, you could have your one-liner be something like this:

{code}
final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy(resourcePath, passPhrase, true, permissionsList);
{code}

where 'resourcePath' is something like ""classpath:com/company/security/myShiroConfig.ini"" or ""file:///home/username/.apache/camel/shiroConfig.ini"" or ""url:http://configHost.company.com/foo/bar/shiro.ini"".  Whatever you want.

Also note that the IniRealm is typically easier to read and more widely used (read: better community tested) than the older, somewhat defunct PropertiesRealm.

HTH!

Best,

Les
njiang:1280346284:2010-07-29T03:44:44.797+0000:1280346284:2010-07-29T03:44:44.797+0000:@Claus
As Les said if the resourcePath supports ""classpath"",  ""file"", ""url"", I think it should work in OSGi platform.
akarpe:1280384429:2010-07-29T14:20:29.617+0000:1280384429:2010-07-29T14:20:29.617+0000:Hi Les & William,

I believe your above comments are currently being supported in the component. I have made the changes you seek in the committed version of the code. 

Hope this helps.

Cheers,

Ashwin...
davsclaus:1303610261:2011-04-24T09:57:41.854+0000:1303610261:2011-04-24T09:57:41.854+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2778,Bug,Major,2.3.0,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Roland Knight,0,0,2010-06-02 00:42:54+00:00,2011-04-24 10:01:09+00:00,There is a bug in http4 HttpProducer that is unescaping URL query and path components too early. Patch fix attached.,"njiang:1275411670:2010-06-02T01:01:10.180+0000:1275411670:2010-06-02T01:01:10.180+0000:Hi Roland,

Thanks for your patch. Can you also add a unit test for it?

scrutinizer:1275413102:2010-06-02T01:25:02.021+0000:1275413102:2010-06-02T01:25:02.021+0000:Can't compile the tests due to missing handler package (don't have time to
investigate why). Assuming the request sets the HTTP_PATH header (big
assumption on my part - I am not that familiar with this code), the code
below should work:

HttpPathTest
    @Test
    public void httpEscapedPath() throws Exception {
        Exchange exchange = template.request(""http4://"" + getHostName() +
"":"" + getPort() + ""/search%20more"", new Processor() {
            public void process(Exchange exchange) throws Exception {
            }
        });

        assertExchange(exchange);

 assert(""/search%20more"".equals(exchange.getIn().getHeader(Exchange.HTTP_PATH));
    }


If this code works, the same needs to be done for HTTP_QUERY.

Also, note that I have only fixed these two cases in http4. There may be
more cases in http4 and http.





njiang:1275438834:2010-06-02T08:33:54.595+0000:1275438834:2010-06-02T08:33:54.595+0000:@Roland
I just committed a patch into camel-http4 and also merged the changed into camel-http.
Please feel free to try the Camel 2.4-SNAPSHOT to verify the fix.
davsclaus:1303610469:2011-04-24T10:01:09.057+0000:1303610469:2011-04-24T10:01:09.057+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2777,Bug,Minor,2.3.0,,"
None
",Closed,Not A Problem,None,Unassigned,Roland Knight,0,0,2010-06-01 23:43:27+00:00,2010-06-02 04:03:55+00:00,"The get methods such as getOut() should not modify (or change the behaviour) of the Exchange object. For example simply by invoking getOut(), the behaviour of the next step is changed since the out object is created (and is empty - causing a blow up!). This is very easy to do when turning on debugging or inspecting/watching variables.","davsclaus:1275422635:2010-06-02T04:03:55.040+0000:1275422635:2010-06-02T04:03:55.040+0000:Please discuss this at the developer mailinglist.

We have debated this a lot. And this was how Camel was designed and inspired from JBI.
You can use the hasOut to detect if an OUT message has been set.
"
0,CAMEL-2776,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Roland Knight,0,0,2010-06-01 20:17:08+00:00,2011-04-24 10:00:41+00:00,"Cached streams larger than the threshold (64K by default) are almost impossible to work with since when a cached stream is closed, the cached file is deleted. This occurs as a side effect of converting the associated body to string which can occur frequently if tracing is turned on. The net result is file not found errors shown below. The only workaround is to increase the threshold to a large value to keep the body in memory.


It seems that if stream caching is to be useful, the cached files should be kept in a map and cleaned up and the end of the route, rather than upon close.


Work around (set threshold to 10M):
    camelContext.getProperties().put(CachedOutputStream.THRESHOLD, ""10000000"");


Error without work around:


16:09:49.278 [main] ERROR o.a.c.c.t.TimerConsumer - Error processing exchange. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: [org.apache.camel.RuntimeCamelException - java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)]
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:65)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:106)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:344)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:111)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:80)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:44)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:106)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:189)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:103)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:87)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:173)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:75)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:102)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
Caused by: java.io.FileNotFoundException: C:\Users\ROLAND~1\AppData\Local\Temp\camel-tmp-594543\cos3643004935230268170.tmp (The system cannot find the file specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:63)
	... 36 common frames omitted","davsclaus:1275422715:2010-06-02T04:05:15.724+0000:1275422715:2010-06-02T04:05:15.724+0000:The stream cache should be changed to use HawtDB or the likes for a better cache store and leverage Exchange OnCompletion to cleanup the cache. This will ensure the ""file"" is not deleted pre mature.


njiang:1275439973:2010-06-02T08:52:53.613+0000:1275439973:2010-06-02T08:52:53.613+0000:We can't just delete the cached file on Exchange OnCompletion, as we may still need to access the CachedInputStream after that. 
You can see it from https://issues.apache.org/activemq/browse/CAMEL-2636.
I think we can mark the CachedInputStream can delete the file when the exchange onCompletion is called, and then the CachedInputStream is closed we can delete the file.
We don't delete the file before the onCompletion even the CachedInputStream is closed.

When we change to using HawtDB, we can do the same thing.
davsclaus:1275442358:2010-06-02T09:32:38.228+0000:1275442358:2010-06-02T09:32:38.228+0000:@Willem

Yeah that is right. I kinda thought of that too this morning.

So if the OnCompletion will _enrich_ the stream with a DeleteFileOnCloseStream then the Camel component can use the stream to send back the reply and when it closes it, the file will be deleted as well.

The only concern would be what if that stream is *not* closed or used after the on completion? Then the file is not deleted and kept on file system to take up space.


njiang:1275614698:2010-06-04T09:24:58.885+0000:1275614698:2010-06-04T09:24:58.885+0000:@Claus,
I think user has the responsibility to close the stream that he don't want to use.
Maybe we can address this issue by using HawtDB.

njiang:1275846274:2010-06-07T01:44:34.235+0000:1275846274:2010-06-07T01:44:34.235+0000:Committed a patch in revision 951337 and created a JIRA CAMEL-2794 for using the HawtDB to store the cached file.
davsclaus:1303610441:2011-04-24T10:00:41.295+0000:1303610441:2011-04-24T10:00:41.295+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2775,Task,Trivial,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-01 09:47:46+00:00,2011-04-24 10:01:24+00:00,"When you list the Camel features in Karaf



 features:addUrl mvn:org.apache.camel.karaf/apache-camel/2.3.0/xml/features
 
karaf@root> features:list
State         Version       Name                     Repository
[uninstalled] [2.5.6.SEC01] spring                   karaf-1.6.0
[uninstalled] [1.2.0      ] spring-dm                karaf-1.6.0
[uninstalled] [1.6.0      ] wrapper                  karaf-1.6.0
[uninstalled] [1.6.0      ] obr                      karaf-1.6.0
[uninstalled] [1.6.0      ] http                     karaf-1.6.0
[uninstalled] [1.6.0      ] war                      karaf-1.6.0
[uninstalled] [1.6.0      ] webconsole               karaf-1.6.0
[installed  ] [1.6.0      ] ssh                      karaf-1.6.0
[installed  ] [1.6.0      ] management               karaf-1.6.0
[uninstalled] [2.5.6.SEC01] spring                   repo-0
[uninstalled] [1.2.0      ] spring-dm                repo-0
[uninstalled] [2.3.0      ] http                     repo-0
[uninstalled] [2.3.0      ] camel                    repo-0
[uninstalled] [2.3.0      ] camel-core               repo-0
[uninstalled] [2.3.0      ] camel-spring-osgi        repo-0
[uninstalled] [2.3.0      ] camel-test               repo-0
[uninstalled] [2.3.0      ] camel-cxf                repo-0
[uninstalled] [2.3.0      ] camel-cache              repo-0
[uninstalled] [2.3.0      ] camel-castor             repo-0
[uninstalled] [2.3.0      ] camel-crypto             repo-0
[uninstalled] [2.3.0      ] camel-dozer              repo-0
[uninstalled] [2.3.0      ] camel-http               repo-0
[uninstalled] [2.3.0      ] camel-http4              repo-0
[uninstalled] [2.3.0      ] camel-mina               repo-0
[uninstalled] [2.3.0      ] camel-jetty              repo-0
[uninstalled] [2.3.0      ] camel-servlet            repo-0
[uninstalled] [2.3.0      ] camel-jms                repo-0
[uninstalled] [2.3.0      ] camel-amqp               repo-0
[uninstalled] [2.3.0      ] camel-atom               repo-0
[uninstalled] [2.3.0      ] camel-bam                repo-0
[uninstalled] [2.3.0      ] camel-bindy              repo-0
[uninstalled] [2.3.0      ] camel-cometd             repo-0
[uninstalled] [2.3.0      ] camel-csv                repo-0
[uninstalled] [2.3.0      ] camel-flatpack           repo-0
[uninstalled] [2.3.0      ] camel-freemarker         repo-0
[uninstalled] [2.3.0      ] camel-ftp                repo-0
[uninstalled] [2.3.0      ] camel-guice              repo-0
[uninstalled] [2.3.0      ] camel-groovy             repo-0
[uninstalled] [2.3.0      ] camel-hl7                repo-0
[uninstalled] [2.3.0      ] camel-hawtdb             repo-0
[uninstalled] [2.3.0      ] camel-ibatis             repo-0
[uninstalled] [2.3.0      ] camel-irc                repo-0
[uninstalled] [2.3.0      ] camel-jackson            repo-0
[uninstalled] [2.3.0      ] camel-jaxb               repo-0
[uninstalled] [2.3.0      ] camel-jcr                repo-0
[uninstalled] [2.3.0      ] camel-jing               repo-0
[uninstalled] [2.3.0      ] camel-jdbc               repo-0
[uninstalled] [2.3.0      ] camel-josql              repo-0
[uninstalled] [2.3.0      ] camel-jpa                repo-0
[uninstalled] [2.3.0      ] camel-jxpath             repo-0
[uninstalled] [2.3.0      ] camel-juel               repo-0
[uninstalled] [2.3.0      ] camel-ldap               repo-0
[uninstalled] [2.3.0      ] camel-lucene             repo-0
[uninstalled] [2.3.0      ] camel-mail               repo-0
[uninstalled] [2.3.0      ] camel-msv                repo-0
[uninstalled] [2.3.0      ] camel-mvel               repo-0
[uninstalled] [2.3.0      ] camel-nagios             repo-0
[uninstalled] [2.3.0      ] camel-netty              repo-0
[uninstalled] [2.3.0      ] camel-ognl               repo-0
[uninstalled] [2.3.0      ] camel-printer            repo-0
[uninstalled] [2.3.0      ] camel-protobuf           repo-0
[uninstalled] [2.3.0      ] camel-quartz             repo-0
[uninstalled] [2.3.0      ] camel-restlet            repo-0
[uninstalled] [2.3.0      ] camel-rmi                repo-0
[uninstalled] [2.3.0      ] camel-rss                repo-0
[uninstalled] [2.3.0      ] camel-saxon              repo-0
[uninstalled] [2.3.0      ] camel-scala              repo-0
[uninstalled] [2.3.0      ] camel-script             repo-0
[uninstalled] [2.3.0      ] camel-smpp               repo-0
[uninstalled] [2.3.0      ] camel-snmp               repo-0
[uninstalled] [2.3.0      ] camel-soap               repo-0
[uninstalled] [2.3.0      ] camel-spring-integration repo-0
[uninstalled] [2.3.0      ] camel-sql                repo-0
[uninstalled] [2.3.0      ] camel-stream             repo-0
[uninstalled] [2.3.0      ] camel-string-template    repo-0
[uninstalled] [2.3.0      ] camel-tagsoup            repo-0
[uninstalled] [2.3.0      ] camel-velocity           repo-0
[uninstalled] [2.3.0      ] camel-xmlbeans           repo-0
[uninstalled] [2.3.0      ] camel-xmlsecurity        repo-0
[uninstalled] [2.3.0      ] camel-xmpp               repo-0
[uninstalled] [2.3.0      ] camel-xstream            repo-0
[uninstalled] [2.3.0      ] camel-bean-validator     repo-0




Notice that camel-bean-validator is listed last. We should sort it A-Z. And maybe have some of the mandatory in top: camel, camel-core, camel-spring-osgi etc","davsclaus:1275357549:2010-06-01T09:59:09.102+0000:1275357549:2010-06-01T09:59:09.102+0000:Just a sub note. Install camel-cxf feature makes it list Axiom twice
{code}
[  84] [Active     ] [            ] [       ] [   60] Axiom API (1.2.8)
[  85] [Active     ] [            ] [       ] [   60] Axiom API (1.2.8)
{code}

I wonder if its 2 different .jars but having the same description
gertvanthienen:1275361973:2010-06-01T11:12:53.805+0000:1275361973:2010-06-01T11:12:53.805+0000:Yes, those are two seperate JARs that happen to have the same Bundle-Name.

If you do osgi:headers <bundle id> for those two bundles, you'll notice that the Bundle-SymbolicName is different though: *{{org.apache.ws.commons.axiom.axiom-impl}}* and *{{org.apache.ws.commons.axiom.axiom-api}}*
davsclaus:1277023715:2010-06-20T16:48:35.358+0000:1277023715:2010-06-20T16:48:35.358+0000:Reordered them a bit
davsclaus:1303610484:2011-04-24T10:01:24.629+0000:1303610484:2011-04-24T10:01:24.629+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2774,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-06-01 06:39:52+00:00,2011-04-24 10:01:04+00:00,"Apache Commons FTP requires you to set soTimeout on the FTPClient after the connection has been established.
I think that its stated in the javadoc etc.


We should try to support this setting out of the box.
It may cause a NPE otherwise.


See nabble
http://old.nabble.com/Camel-FTP-is-not-responding-and-returning-code-0-as-connectiontime-out-ts28693025.html","davsclaus:1275858875:2010-06-07T05:14:35.598+0000:1275858875:2010-06-07T05:14:35.598+0000:trunk: 952103.
davsclaus:1303610464:2011-04-24T10:01:04.922+0000:1303610464:2011-04-24T10:01:04.922+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2773,Bug,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Moulliard Charles,Claus Ibsen,0,0,2010-06-01 06:33:40+00:00,2011-04-24 10:00:54+00:00,"See nabble
http://old.nabble.com/Bindy-CSV-not-Marshaling-ts28719942.html","cmoulliard:1276239606:2010-06-11T15:00:06.938+0000:1276239606:2010-06-11T15:00:06.938+0000:I have committed the fix
davsclaus:1303610454:2011-04-24T10:00:54.093+0000:1303610454:2011-04-24T10:00:54.093+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2772,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-06-01 00:55:21+00:00,2011-04-24 09:57:50+00:00,"You can't get the inputStream from the attachment when camel-jetty handle the request of MultiPartForm.
Here is the mail thread[1] which discusses about it.


[1] http://old.nabble.com/Unsupported-data-type-exception-with-Jetty-component-tp28730373p28731758.html","pegli:1279100924:2010-07-14T17:48:44.499+0000:1279101299:2010-07-14T17:54:59.869+0000:In case anyone finds this bug and need direction, here's the workaround that I use when processing attachments.  Note that I set the Exchange.FILE_NAME header to the attachment name prior to calling this code, as dh.getName() always seems to return null in Camel 2.3.0:

{code}
DataHandler dh  = exchange.getIn().getAttachment(""myfile.txt"");
if (dh.getContent() instanceof DataSource) {
    InputStream in = ((DataSource) dh.getContent()).getInputStream();
    String name = dh.getName() != null ? dh.getName() : exchange.getIn().getHeader(Exchange.FILE_NAME, String.class);
    String contentType = dh.getContentType();
}
{code}
davsclaus:1303610270:2011-04-24T09:57:50.502+0000:1303610270:2011-04-24T09:57:50.502+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2771,Improvement,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Christian Müller,Jaco van Tonder,0,0,2010-05-31 21:26:57+00:00,2011-04-24 09:58:05+00:00,Update the jsmpp dependency to 2.1.0. This version of jsmpp solves a serious problem present in jsmpp 2.0 that affects the functionality of the EnquireLinkTimer option of camel-smpp.,"jacovt:1275312522:2010-05-31T21:28:42.482+0000:1275312522:2010-05-31T21:28:42.482+0000:This issue is dependent on the resolution of SMX4-531. 
muellerc:1275400160:2010-06-01T21:49:20.599+0000:1275400160:2010-06-01T21:49:20.599+0000:Version 2.1.0 is not a ""drop in replacement"" for version 2.0.x. The org.jsmpp.session.MessageReceiverListener has become a new method

{code}
public DataSmResult onAcceptDataSm(DataSm dataSm, Session session)  throws ProcessRequestException;
{code}

With this new method, we have now the possibility to process incoming short messages, which I really like. I work on this improvement and I hope I will finish my work this week.
muellerc:1275478409:2010-06-02T19:33:29.239+0000:1275478409:2010-06-02T19:33:29.239+0000:provide the patch for this issue
it also fix three small test failures

Implements also the new introduced 'onAcceptDataSm' method in 'org.jsmpp.session.MessageReceiverListener', which is called if a 'DataSm' message is received from the SMSC. Unfortunately this is not an incoming short message, as I thought first (it has no body/contend).
muellerc:1275483243:2010-06-02T20:54:03.606+0000:1275483243:2010-06-02T20:54:03.606+0000:I will update the documentation, after the patch is applied.
muellerc:1275641287:2010-06-04T16:48:07.309+0000:1275641287:2010-06-04T16:48:07.309+0000:Claus,
could you please have a look on it? I have also [CAMEL-2782|https://issues.apache.org/activemq/browse/CAMEL-2782] in the pipe and I don't know, against which version I should create the diff (trunk, trunk including this patch, ...).

and still waiting for my account... :-)

Thanks in advanced,
Christian
davsclaus:1275725104:2010-06-05T16:05:04.172+0000:1275725104:2010-06-05T16:05:04.172+0000:We will just wait until you got the karma, then you can commit the SMPP stuff.
muellerc:1276416286:2010-06-13T16:04:46.580+0000:1276416286:2010-06-13T16:04:46.580+0000:I updated the wiki.

@Jaco: Feel free to the test the current trunk, if it fits your needs.
davsclaus:1276461526:2010-06-14T04:38:46.167+0000:1276461526:2010-06-14T04:38:46.167+0000:Christian that 2.1 jar is not in a public maven repo. We should add a repository location in the pom.xml of the camel-smpp project.
I will disable the camel-smpp project so we can build the other stuff. And then you can look into to see what it takes to get it back again.

When working the pom.xml under /components should just be changed back to include this component.

{code}
[INFO] Building Camel :: SMPP
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] Deleting file set: /Users/davsclaus/workspace/camel/components/camel-smpp/target (included: [**], excluded: [])
Downloading: http://localhost:8081/nexus/content/groups/public/com/google/code/jsmpp/2.1.0/jsmpp-2.1.0.pom
Downloading: http://localhost:8081/nexus/content/groups/public/com/google/code/jsmpp/2.1.0/jsmpp-2.1.0.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) com.google.code:jsmpp:jar:2.1.0

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=com.google.code -DartifactId=jsmpp -Dversion=2.1.0 -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=com.google.code -DartifactId=jsmpp -Dversion=2.1.0 -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
        1) org.apache.camel:camel-smpp:bundle:2.4-SNAPSHOT
        2) com.google.code:jsmpp:jar:2.1.0

----------
1 required artifact is missing.

for artifact: 
  org.apache.camel:camel-smpp:bundle:2.4-SNAPSHOT

from the specified remote repositories:
  apache.snapshots (http://repository.apache.org/snapshots),
  Nexus (http://localhost:8081/nexus/content/groups/public)
{code}
davsclaus:1276461910:2010-06-14T04:45:10.184+0000:1276461910:2010-06-14T04:45:10.184+0000:I fixed the build by using the SMX bundle v2.1 jar in the pom.xml file.

trunk: 954362.
muellerc:1276477328:2010-06-14T09:02:08.112+0000:1276477328:2010-06-14T09:02:08.112+0000:Sorry Claus,

Gert uploaded the jsmpp 2.1 artifacts to the ServiceMix repository ([949950|http://fisheye6.atlassian.com/changelog/servicemix?cs=949950]). I thought this repository is already used by Camel. Sorry again...

Christian
njiang:1276633937:2010-06-16T04:32:17.883+0000:1276633992:2010-06-16T04:33:12.605+0000:@Christian,

I just ran ""mvn clean install -Pvalidate "" in trunk/plateform/karaf directory, and found the feature validate complain about these
{code}
[WARNING] No export found to match org.testng (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jsmpp/2.1.0_1-SNAPSHOT)
[WARNING] No export found to match org.testng.annotations (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jsmpp/2.1.0_1-SNAPSHOT)
{code}

I checked the jsmpp jar and found there are some test classes in org.jsmpp.bean,  and they are using the testng class.
So I marked the ""org.testng"" import package as optional in my patch,  so please apply it into ServiceMix bundle repository. 

Here is the patch
{code}
Index: pom.xml
===================================================================
--- pom.xml	(revision 954397)
+++ pom.xml	(working copy)
@@ -44,6 +44,7 @@
         </servicemix.osgi.export.pkg>
         <servicemix.osgi.import.pkg>
             !org.jsmpp*,
+            org.testng.*;resolution:=optional,
             *
         </servicemix.osgi.import.pkg>
         <servicemix.osgi.private.pkg>

{code}
davsclaus:1303610285:2011-04-24T09:58:05.004+0000:1303610285:2011-04-24T09:58:05.004+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2770,Bug,Major,2.3.0,2.2.0,"
None
",Closed,Not A Problem,2.2.0,Claus Ibsen,Ray McDermott,0,0,2010-05-31 14:28:49+00:00,2010-06-01 11:16:48+00:00,I can see how the = sign can get confused but this should be managed by Camel rather than forcing the user to urlencode standard text,"davsclaus:1275350597:2010-06-01T08:03:17.882+0000:1275350597:2010-06-01T08:03:17.882+0000:Ray I cannot reproduce the issue.

Can you provide more details?

eg see these tests
https://svn.apache.org/repos/asf/camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/SpringJmsSelectorTest.xml

https://svn.apache.org/repos/asf/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsSelectorTest.java
raymacdee:1275362208:2010-06-01T11:16:48.575+0000:1275362208:2010-06-01T11:16:48.575+0000:I was following out of date advice (http://markmail.org/message/rbghx47j2opki5v4).

It actually works as expected.

Sorry to bother you. "
0,CAMEL-2769,Improvement,Minor,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-31 12:26:17+00:00,2011-04-24 10:01:23+00:00,"See nabble
http://old.nabble.com/Problems-shutting-down-route-onCompletion-ts28707903.html


This requires some sort of marker / API changes or whatever to let Camel knows that its a OnCompletion synchronization so it should be executed last.
We may need to add a priority option or the likes.","davsclaus:1275471583:2010-06-02T17:39:43.964+0000:1275471583:2010-06-02T17:39:43.964+0000:trunk: 950686.
davsclaus:1303610483:2011-04-24T10:01:23.579+0000:1303610483:2011-04-24T10:01:23.579+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2768,New Feature,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-31 06:09:22+00:00,2011-04-24 10:01:11+00:00,"Camel should have a new ejb component where you can easily invoke EJBs as if the bean component can do.


We can use OpenEJB for testing.
http://openejb.apache.org/


We most likely need the J2EE API as we need to gather the Home object to crate the instance. And use the corba narrow stuff.
Well at least you had to do like that in the old days with EJB 2.1. I recon EJB 3.0 is easier today. But still you never know when it comes to EJBs","davsclaus:1275257727:2010-05-31T06:15:27.236+0000:1275257727:2010-05-31T06:15:27.236+0000:Could be that EJB 3.0 works out of the box with the bean component as all you do is to look it up from JNDI.
http://openejb.apache.org/3.0/simple-stateless-example.html

I recon its mostly the older EJB 2.x style which requires all the extra hazzle.
davsclaus:1275266777:2010-05-31T08:46:17.727+0000:1275266777:2010-05-31T08:46:17.727+0000:trunk: 949690.
davsclaus:1303610471:2011-04-24T10:01:11.389+0000:1303610471:2011-04-24T10:01:11.389+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2767,Task,Minor,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-05-30 11:15:23+00:00,2011-04-24 10:01:43+00:00,I'm not sure whether or not the components in camel-extra should have the same version/release number than the components in camel...,"muellerc:1275189421:2010-05-30T11:17:01.038+0000:1275189421:2010-05-30T11:17:01.038+0000:Update the project versions to 2.3.0
davsclaus:1275194525:2010-05-30T12:42:05.076+0000:1275194525:2010-05-30T12:42:05.076+0000:Christian I have added you as a committer to the camel-extra.

Can you see if you can commit the patch yourself?
muellerc:1275207378:2010-05-30T16:16:18.716+0000:1275207378:2010-05-30T16:16:18.716+0000:http://code.google.com/p/camel-extra/source/detail?r=296
davsclaus:1303610503:2011-04-24T10:01:43.090+0000:1303610503:2011-04-24T10:01:43.090+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2766,Task,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-05-30 11:07:25+00:00,2010-05-30 15:06:41+00:00,"-------------------------------------------------------------------------------
Test set: org.apache.camel.component.esper.EsperRouteTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.56 sec <<< FAILURE!
testSendMessagesIntoEsper(org.apache.camel.component.esper.EsperRouteTest)  Time elapsed: 2.292 sec  <<< ERROR!
java.lang.NoClassDefFoundError: org/antlr/runtime/RecognizerSharedState
	at com.espertech.esper.epl.generated.EsperEPL2GrammarLexer.<init>(EsperEPL2GrammarLexer.java:361)
	at com.espertech.esper.epl.parse.ParseHelper.parse(ParseHelper.java:109)
	at com.espertech.esper.core.EPAdministratorImpl.compilePattern(EPAdministratorImpl.java:342)
	at com.espertech.esper.core.EPAdministratorImpl.createPatternStmt(EPAdministratorImpl.java:131)
	at com.espertech.esper.core.EPAdministratorImpl.createPattern(EPAdministratorImpl.java:91)
	at org.apache.camel.component.esper.EsperEndpoint.createStatement(EsperEndpoint.java:76)
	at org.apache.camel.component.esper.EsperEndpoint.getStatement(EsperEndpoint.java:68)
	at org.apache.camel.component.esper.EsperEndpoint.createConsumer(EsperEndpoint.java:54)
	at org.apache.camel.component.esper.EsperEndpoint.createConsumer(EsperEndpoint.java:30)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:60)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:123)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:957)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:120)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:85)
	at junit.framework.TestCase.runBare(TestCase.java:125)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
Caused by: java.lang.ClassNotFoundException: org.antlr.runtime.RecognizerSharedState
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	... 37 more
Caused by: java.lang.ClassNotFoundException: org.antlr.runtime.RecognizerSharedState
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
	... 37 more","muellerc:1275189039:2010-05-30T11:10:39.832+0000:1275189039:2010-05-30T11:10:39.832+0000:Provide the patch which only add the dependency to org.antlr/antlr-runtime/3.1.1
muellerc:1275203201:2010-05-30T15:06:41.305+0000:1275203201:2010-05-30T15:06:41.305+0000:http://code.google.com/p/camel-extra/source/detail?r=295"
0,CAMEL-2765,Improvement,Minor,2.3.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,0,2010-05-28 09:07:25+00:00,2015-07-11 22:32:03+00:00,"Make it easier to have the bean component adapt for grouped exchanges so end user can just specify a more freely bean method signature


See nabble
http://old.nabble.com/camel-aggregator-ts28697161.html",
0,CAMEL-2764,New Feature,Minor,None,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-28 06:13:58+00:00,2011-04-24 09:58:27+00:00,We may even consider having a general option for this so other Camel component can use the same header to control if a reply should be send back,davsclaus:1303610307:2011-04-24T09:58:27.512+0000:1303610307:2011-04-24T09:58:27.512+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2763,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0, 2.2.0, 2.3.0","1.6.3, 2.4.0","
None
",Closed,Fixed,"1.6.3, 2.4.0",Willem Jiang,Willem Jiang,0,0,2010-05-28 03:40:35+00:00,2011-01-17 16:50:47+00:00,Here is the mail thread which discusses about it.,"njiang:1275005766:2010-05-28T08:16:06.438+0000:1275005766:2010-05-28T08:16:06.438+0000:Committed the patch in camel trunk and camel-1.x branch.
davsclaus:1295254247:2011-01-17T16:50:47.381+0000:1295254247:2011-01-17T16:50:47.381+0000:Closing all 1.x tickets"
0,CAMEL-2762,Bug,Major,2.2.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Cott Lang,0,1,2010-05-27 16:07:47+00:00,2019-03-21 20:10:17+00:00,"It appears that the only way to get UDP responses out of Camel Mina without binary ( > 7 bit) getting garbled by internal conversions is to reply with a Mina ByteBuffer.


Unfortunately, if you have Trace on, the DefaultTraceFormatter ends up calling MinaConverter.toByteArray, which ""consumes"" the ByteBuffer, setting it to empty, which means no reply goes out. 



27/05/10 07:02:41:DEBUG:org.apache.camel.component.mina.MinaConsumer:Writing body: DirectBuffer[pos=11 lim=11 cap=16: empty]




I'm not sure how to fix this one cleanly, so I don't have a patch.  I might also be doing something wrong, if so I'm all ears. 


Here's a trace:



	  at org.apache.camel.component.mina.MinaConverter.toByteArray(MinaConverter.java:44)
	  at org.apache.camel.component.mina.MinaConverter.toString(MinaConverter.java:49)
	  at sun.reflect.GeneratedMethodAccessor228.invoke(Unknown Source:-1)
	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	  at java.lang.reflect.Method.invoke(Method.java:597)
	  at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:736)
	  at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:50)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:159)
	  at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:85)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:74)
	  at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:48)
	  at org.apache.camel.util.MessageHelper.extractBodyAsString(MessageHelper.java:63)
	  at org.apache.camel.processor.interceptor.DefaultTraceFormatter.format(DefaultTraceFormatter.java:75)
	  at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:231)




Thanks!","davsclaus:1275003567:2010-05-28T07:39:27.542+0000:1275003567:2010-05-28T07:39:27.542+0000:trunk: 949124.

Cott can you test with latest code on your system?
davsclaus:1303610459:2011-04-24T10:00:59.558+0000:1303610459:2011-04-24T10:00:59.558+0000:Closing all resolved tickets from 2010 or older
shuston:1553170217:2019-03-21T20:10:17.418+0000:1553170217:2019-03-21T20:10:17.418+0000:I notice that this problem exists in Camel 2.19.1.

I can try it on 2.22 sometime soon, but if you already know it didn't change between 2.19 and 2.22 that wold be helpful."
0,CAMEL-2761,New Feature,Major,2.4.0,None,"
None
",Closed,Won't Fix,2.5.0,Christian Müller,Christian Müller,0,0,2010-05-27 15:03:53+00:00,2011-04-24 09:58:07+00:00,"Provide a better integration between Camel and Smooks and support all features in Camel which Smooks provide. A good starting point is:


http://blog.smooks.org/2010/02/22/apache-camel-smooks/","muellerc:1275189691:2010-05-30T11:21:31.510+0000:1275189691:2010-05-30T11:21:31.510+0000:My proposal, which I discuss with Tom Fennelly:

Here are my first thoughts:

1) How could Camel improve Smooks? What do you have in mind?

2)  How could Smooks improve Camel? Here are my ideas:

2a) Java Binding:

DataFormat smooksUnmarshal = new SmooksDataFormat(""smooks-unmarshal-config.xml"");
from(""file://inbox"")
.unmarshal(smooksUnmarshal) // source is a StreamSource, result is a JavaResult
.to(""bean:orderEntry"");

We could do this for CSV, EDI, XML, fixed length, YAML and JSON, could we?

But what is with marshaling? My understanding is Smooks ""only"" supports marshaling to XML. It is right? Do you plan also to support other formats like CSV, fixed length, ...? Or ""only"" with templating?

We could also provide marshaling functionality for this:

DataFormat smooksMarshal = new SmooksDataFormat(""smooks-marshal-config.xml"");
from(""bean:orderEntry"")
.unmarshal(smooksMarshal) // source is a JavaSource, result is a StreamResult
.to(""file://outbox"");

Make this sense?
This is also the solution for the current camel-smooks component: http://camel.apache.org/smooks.html

Please have a look on the attached SmooksDataFormat.java


2b) Transformation:
Could we express transformation as a sequence of unmarshal and marshal?
If not, I would propose a solution like the camel-xslt component: http://camel.apache.org/xslt.html

Than we could write a route like this:
from(""file://inbox"")
.to(""smooks://path/to/smooks-config.xml"") // source is a StreamSource, result is a StreamResult
.to(""file://outbox"");

or

Than we could write a route like this:
from(""bean:orderEntry"")
.to(""smooks://path/to/smooks-config.xml"") // source is a JavaSource, result is a JavaResult
.to(""bean:orderStore"");

With this solution it's also possible to handle Java Binding (2a)). But we have to know, what is the source we will receive (Java, Stream, ...) and what is the result (Java, Stream, ...). It is possible to ""ask"" the Smooks instance for that so that we know, which kind of source and result we have to provide in the filterSource method?

What do you think?

Regards,
Christian
davsclaus:1282612670:2010-08-24T09:17:50.824+0000:1282612670:2010-08-24T09:17:50.824+0000:Smooks will integrate with Camel out of the box. So the camel-smooks component at camel-extra should be @deprecated
davsclaus:1303610287:2011-04-24T09:58:07.802+0000:1303610287:2011-04-24T09:58:07.802+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2760,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-27 13:19:52+00:00,2011-04-24 10:01:35+00:00,No Desc,"davsclaus:1274938263:2010-05-27T13:31:03.433+0000:1274938263:2010-05-27T13:31:03.433+0000:trunk: 948830.
davsclaus:1303610495:2011-04-24T10:01:35.418+0000:1303610495:2011-04-24T10:01:35.418+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2759,Improvement,Major,None,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Andreas Asmuss,0,0,2010-05-27 09:14:07+00:00,2011-04-24 09:57:12+00:00,"It should be possible to do:


<xpath><simple>/transaction[1]/@DocType = 'doctype</simple></xpath> 


So you can use Camel expressions. And on top of that the {{ }} should be added to the Simple language.","davsclaus:1279580500:2010-07-20T07:01:40.380+0000:1279580500:2010-07-20T07:01:40.380+0000:We will not add do this as it requires an non backward change in the XSD and makes it too verbose

<xpath><simple>Bla bla</simple></xpath>

And the xpath already got function and variable resolvers which can do a bunch of stuff. I am adding built in functions to the xpath instead.
davsclaus:1303610232:2011-04-24T09:57:12.103+0000:1303610232:2011-04-24T09:57:12.103+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2758,Bug,Major,2.3.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-27 05:23:53+00:00,2011-04-24 10:00:59+00:00,"OnCompletion will route the Exchange directly as is which means if you have set an OUT the first step in the onCompletion route may not use this OUT but the IN instead.


And also add option useOriginalBody so you can do work based on the original input instead.","davsclaus:1274911781:2010-05-27T06:09:41.152+0000:1274911781:2010-05-27T06:09:41.152+0000:trunk: 948683.
davsclaus:1303610459:2011-04-24T10:00:59.243+0000:1303610459:2011-04-24T10:00:59.243+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2757,Improvement,Major,None,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-05-27 03:03:48+00:00,2011-04-24 10:01:03+00:00,In this way we can integrate the CXF security with the camel security.,"njiang:1274900975:2010-05-27T03:09:35.456+0000:1274900975:2010-05-27T03:09:35.456+0000:Added a integration test to show how to make camel-cxf and camel-spring-security work together.
davsclaus:1274933810:2010-05-27T12:16:50.161+0000:1274933810:2010-05-27T12:16:50.161+0000:It causes many tests in camel-cxf to fail
{code}
[14:08]  <gnodet> cibsen: is there any pb with camel-cxf ? a lot of tests are failing for me
[14:08]  <gnodet> with: ""org.apache.cxf.binding.soap.SoapFault: attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set""
[14:10]  <cibsen> gnodet willem have done some stuff recently in cxf
[14:11]  <cibsen> do you use SNAPSHOT?
[14:11]  <gnodet> you mean for camel ? yeah, i'm working on the blueprint stuff
[14:11]  <gnodet> so i may need a cxf snapshot ?
[14:12]  <cibsen> ah i think he may have committed something which breaks then
[14:13]  <cibsen> gnodet could be this rev 948658
[14:13]  <cibsen> http://svn.apache.org/viewvc?rev=948658&view=rev
[14:14]  <gnodet> yes, that would be it
[14:14]  <cibsen> but he surely must have tested it locally before comitting ?
[14:14]  * nheron has quit (Ping timeout: 20 seconds)
[14:14]  <cibsen> i get the same failures now
[14:15]  * nheron (~nheron@226.8.65-86.rev.gaoland.net) has joined #camel
[14:16]  <cibsen> yeah if i undo that patch it works
[14:16]  <cibsen> davsclaus:(svn)camel[trunk:948691]/components/camel-cxf$ svn merge --change -948658 .
[14:16]  <cibsen> --- Reverse-merging r948658 into '.':
[14:16]  <cibsen> U    src/main/java/org/apache/camel/component/cxf/DefaultCxfBinding.java
[14:16]  <cibsen> gnodet ^^^ you need to undo his patch
{code}
njiang:1274936994:2010-05-27T13:09:54.899+0000:1274936994:2010-05-27T13:09:54.899+0000:it's my bad, I should run the test before committed the code.
Now I just committed a quick fix for it, the tests should be OK now.

davsclaus:1303610463:2011-04-24T10:01:03.889+0000:1303610463:2011-04-24T10:01:03.889+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2756,Improvement,Major,None,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-05-27 02:09:50+00:00,2011-04-24 10:00:59+00:00,"We can set different AuthenticationConverter to turn the subject of camel message into the spring Authentication.
The old AuthenticationTypeConvert will can't make sure the customer converter will be loaded and override the default one.","davsclaus:1274909346:2010-05-27T05:29:06.561+0000:1274909346:2010-05-27T05:29:06.561+0000:Willem I think the xxxConverter name is misleading as you would think its a Camel TypeConverter.

I wonder if there is a better naming for this?

AuthenticationAdapter
AuthenticationStrategy
AuthenticationService

or the likes.


njiang:1274913406:2010-05-27T06:36:46.100+0000:1274913406:2010-05-27T06:36:46.100+0000:@Claus,

Good catching, I'm heading to this refactoring now.
njiang:1274913993:2010-05-27T06:46:33.384+0000:1274913993:2010-05-27T06:46:33.384+0000:Committed the refacting patch into revision 948689.
davsclaus:1303610459:2011-04-24T10:00:59.104+0000:1303610459:2011-04-24T10:00:59.104+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2755,Bug,Major,2.2.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Nathan Jensen,0,0,2010-05-26 21:59:41+00:00,2011-04-24 10:01:26+00:00,"If you send to a VM endpoint from one route and consume from the same endpoint in another route, but include an argument on only one of the routes, Camel sees them as two different routes.  Therefore, the messages are never consumed.  For example:


<camelContext id=""sendNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">


      <route id=""sendToNotify"">
            <from uri=""..."" />
            ....
<to uri=""vm:myNotify"" />
      </route>
</camelContext>


<camelContext id=""receiveNotifyContext""
	xmlns=""http://camel.apache.org/schema/spring""
	errorHandlerRef=""errorHandler"">


      <route id=""receiveNotify"">
<from uri=""vm:myNotify?size=2500"" />
            ....
            <to uri=""..."" />
      </route>
</camelContext>


The producer appears to send to vm:myNotify while the consumer is listening to a separate endpoint named vm:myNotify?size=2500, so the messages build up and are never received.","davsclaus:1274912786:2010-05-27T06:26:26.098+0000:1274912786:2010-05-27T06:26:26.098+0000:trunk: 948686.
davsclaus:1303610486:2011-04-24T10:01:26.612+0000:1303610486:2011-04-24T10:01:26.612+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2754,Improvement,Minor,None,None,"
None
",Closed,Duplicate,2.5.0,Unassigned,Lennart Petersson,0,0,2010-05-26 14:59:17+00:00,2011-04-24 09:58:13+00:00,"In reference to Nabble post: http://old.nabble.com/Scheduled-Polling-Consumer-on-FTP-endpoint-to28678774.html


At the moment it is only possible to assign a timer with a fixed delay, to a FTP endpoint, whereas a scheduled cron statement cannot be assigned in such a way that all awaiting files on the FTP server are retrieved, but only one file per scheduled call.
If Camel were to be improved in this respect, it would be possible to poll e.g. every few hours and retrieve all awaiting files on the FTP server.","davsclaus:1274909630:2010-05-27T05:33:50.612+0000:1274909630:2010-05-27T05:33:50.612+0000:We have talked about introducing a notation of {{schedule}} in the DSL so you will be able to express the time period in a fluent manner and have it support timer + cron based. So if you drop in camel-quartz the cron engine from quartz can be used etc.

This should be a general solution and not just tied to the FTP component.
davsclaus:1274909775:2010-05-27T05:36:15.794+0000:1274909775:2010-05-27T05:36:15.794+0000:Btw in Camel 2.3 you can just set the {{delay=2h}} option in the endpoint URI. Instead of using millis seconds.

And did you notice the info on the wiki page that the options from File also applied

*More URI options*
See File2 as all the options there also applies for this component.

There you have options to set the delay.
akarpe:1280738855:2010-08-02T16:47:35.288+0000:1280738855:2010-08-02T16:47:35.288+0000:Is there any further reason for keeping this issue open? 

Should we resolve this since there are more flexible and preferable workarounds available rather than further complicating the FTP endpoint...?

- Ashwin...
davsclaus:1280788961:2010-08-03T06:42:41.954+0000:1280788961:2010-08-03T06:42:41.954+0000:Yeah lets close this one. I reopened the other ticket which is more generic.
davsclaus:1303610293:2011-04-24T09:58:13.086+0000:1303610293:2011-04-24T09:58:13.086+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2753,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-05-26 08:48:57+00:00,2011-04-24 10:01:36+00:00,We should add an EventNotifier which can emit JMX notifications so 3rd party management tooling can keep an eye on it. eg. Tivoli or others etc.,"davsclaus:1276834498:2010-06-18T12:14:58.559+0000:1276834498:2010-06-18T12:14:58.559+0000:Willem here is some code I did for experiment. I couldnt get the Spring @ JMX event notifier annotation to work so there is some low level code in there to emit the events.
njiang:1276836928:2010-06-18T12:55:28.839+0000:1276836928:2010-06-18T12:55:28.839+0000:@Claus 
Thanks for your patch, I will try to reuse them :)
njiang:1277153395:2010-06-22T04:49:55.826+0000:1277153395:2010-06-22T04:49:55.826+0000:I had no luck to create a Notification by using Spring JMX annotation, so I changed it to the tranditional JMX MBean and it's work.
Just committed the patch which is based on patch of Claus.

davsclaus:1277160428:2010-06-22T06:47:08.256+0000:1277160428:2010-06-22T06:47:08.256+0000:trunk: 956789.

Using light weight events for JMX notifications to avoid overhead when sending events to remote servers.

We need to add some wiki documentation how to use this. at this page:
http://camel.apache.org/camel-jmx.html
davsclaus:1303610496:2011-04-24T10:01:36.793+0000:1303610496:2011-04-24T10:01:36.793+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2752,New Feature,Major,2.3.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Christian Müller,Claus Ibsen,0,0,2010-05-26 08:47:01+00:00,2011-04-24 09:57:13+00:00,"To allow end users to use a customer ID generator.


We should have out of the box



JavaUUID (default)
ActiveMQUUID which uses the same logic as AMQ
Sequence or something for testing purpose which just use a ID counter. Makes it easier for testing to spot correlated messages in the logs etc.","muellerc:1276852394:2010-06-18T17:13:14.343+0000:1276852394:2010-06-18T17:13:14.343+0000:The way I would implements this is:

- create a new Interface UuidGenerator
  - create DefaultUuidGenerator (Singleton) which implements UuidGenerator and use java.util.UUID
  - create SimpleUuidGenerator (Singleton) which implements UuidGenerator and use an internal counter
  - create ActiveMqUuidGenerator (Singleton) which implements UuidGenerator and use the ActiveMQUUID
    - I have to look how dis could be implemented without introducing a dependency from camel-core to activemq. May be this class should reside in camel-activemq? Or do you mean simply ""copy & past"" when you wrote ""uses the same logic as AMQ""?

- add to the CamelContext two new methods:
  - void setUuidGenerator(UuidGenerator generator);
  - UuidGenerator getUuidGenerator();

- add a default implementation to DefaultCamelContext which use DefaultUuidGenerator if no UuidGenerator is specified

- change DefaultExchange, DefaultUnitOfWork and MessageSupport to use the shared UuidGenerator instance, looked up from the CamelContext

Sounds good for you?

Christian
hadrian:1276858825:2010-06-18T19:00:25.817+0000:1276858967:2010-06-18T19:02:47.739+0000:We already have a org.apache.camel.util.UuidGenerator. What is the problem you are trying to solve? 
Extra flexibility is not always needed. Just a bit of refactoring around our UuidGenerator should do the job. What about using the Registry available from the context?
muellerc:1276868769:2010-06-18T21:46:09.254+0000:1276868769:2010-06-18T21:46:09.254+0000:I trying to solve an issue, which was unassigned until today and which Claus opened. I think he has good reasons to open this issue.

Because I'm new in the Camel family, first I try to explain how I would solve the issue and give my fellow the possibility to guide my in the right direction, if I'm wrong. So, I have the feeling this is the case for this issue... :-)
May be my proposal is a bit over engineered. I will think again about a good solution an hopefully I will come back with a smarter solution...
If you have already something in your mind, please share it with me on a more detailed level.

Thanks,
Christian
davsclaus:1276898490:2010-06-19T06:01:30.743+0000:1276898529:2010-06-19T06:02:09.264+0000:+1 to Christians plan

And yes copy the logic for the AMQ, we used to have it already in Camel before the Google App Engine forced us to change it. So you can see the old code in eg. Camel 1.x or Camel 2.0.
davsclaus:1276898701:2010-06-19T06:05:01.992+0000:1276898701:2010-06-19T06:05:01.992+0000:The problem to be solved is some systems such as IBM Websphere only supports up till 24 chars in the generated id, where as the UUID generated from Java is longer.

And having the simple AtomicLong based counter is really good for testing purpose as the ids is much easier to spot and correlate in the logs / debugger.
And the Java UUID is in fact a bit slow so people can impl. a much faster UUID generator.
muellerc:1279595635:2010-07-20T11:13:55.830+0000:1279595635:2010-07-20T11:13:55.830+0000:Attached the proposed patch. Because it is a bit more extensive, I would like that one of the other committer reviews this patch:

- I build all artifacts without trouble (mvn -DskipTests clean install in the camel root directory)
- all tests in camel-core and camel-jms succeed (mvn clean install)
- I run the 'mvn -Psourcecheck clean install' for camel-core and camel-jms
- in components/camel-jms/src/main/java/org/apache/camel/component/jms/requestor/Requestor I removed the static method getUuidGenerator() because this method is not used by Camelt itself and I have no idea, how I could implement this method without access to the Camel context. I'm not sure, whether or not this method is part od the public Camel API (hopefully not).

Thanks in advance,
Christian
hadrian:1279653290:2010-07-21T03:14:50.810+0000:1279653290:2010-07-21T03:14:50.810+0000:Christian,

*MessageSupport.createMessageId() should never return null, but maybe default to DefaultUUIDGenerator. generateUUID().
* what if SimpleUUIDGenerator had a prefix? For instance ""camel-"" by default.
* shouldn't the setter/getter in the DefaultCamelContext be set/getUuidGenerator (note the Uuid capitalization)?
* on the same getter/setter not sure if we should allow re-setting the uuidGenerator on the context. Not likely to happen I know, but should we leave that door open?

Great work, and kudos for covering all the bases with checkstyle and all.
davsclaus:1279666822:2010-07-21T07:00:22.523+0000:1279666822:2010-07-21T07:00:22.523+0000:My comments on top of Hadrians

- UuidGenerator interface should be in {{org.apache.camel.spi}} package
- Yeah its hard to decide whether it should be UUID or Uuid. The JDK uses UUID. But the convention is most likely Uuid. 

And we should also make it easy to set a custom uuid generator using camel-spring.  
See this page
http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html

See the camel-core-xml component where the logic should be added. Basically lookup in the registry for 1 bean of type {{org.apache.camel.spi.UuidGenerator}} and use it if found. Just like some of the other code does.

And then add an unit test for it in camel-spring module.
davsclaus:1279666947:2010-07-21T07:02:27.471+0000:1279666947:2010-07-21T07:02:27.471+0000:- Maybe the impls of the UuidGenerator should be moved to impl package instead of the util package
davsclaus:1279668701:2010-07-21T07:31:41.713+0000:1279668701:2010-07-21T07:31:41.713+0000:The UUIDGenerator in camel-jms Requestor is not needed so I will remove it.
muellerc:1280326246:2010-07-28T22:10:46.711+0000:1280326305:2010-07-28T22:11:45.836+0000:I have done the following changes:
- renamed UUIDGenerator to UuidGenerator
- renamed SimpleUUIDGenerator to SimpleUuidGenerator
- renamed SimpleUUIDGeneratorTest to SimpleUuidGeneratorTest
- renamed ActiveMQUUIDGenerator to ActiveMQUuidGenerator
- renamed ActiveMQUUIDGeneratorTest to ActiveMQUuidGeneratorTest
- renamed DefaultUUIDGenerator to DefaultUuidGenerator
- renamed DefaultUUIDGeneratorTest to DefaultUuidGeneratorTest

- moved UuidGenerator to ""org.apache.camel.spi""
- moved SimpleUuidGenerator to ""org.apache.camel.impl""
- moved SimpleUuidGeneratorTest to ""org.apache.camel.impl""
- moved ActiveMQUuidGenerator to ""org.apache.camel.impl""
- moved ActiveMQUuidGeneratorTest to ""org.apache.camel.impl""
- moved DefaultUuidGenerator to ""org.apache.camel.impl""
- moved DefaultUuidGeneratorTest to ""org.apache.camel.impl""

- renamed getUUIDGenerator to getUuidGenerator
- renamed setUUIDGenerator to setUuidGenerator
- renamed generateUUID to generateUuid

I have no idea, how we could prevent the users to re-setting the UuidGenerator on the context. Any suggestions?
Claus, which class/package I have to update to let the user set a custom UuidGenerator ([advanced-configuration-of-camelcontext-using-spring.html|http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html])?

If you agree with the changes, I will commit they and update the page [advanced-configuration-of-camelcontext-using-spring.html|http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html]. Any other pages to update/create?

Christian
davsclaus:1280451589:2010-07-30T08:59:49.684+0000:1280451589:2010-07-30T08:59:49.684+0000:> I have no idea, how we could prevent the users to re-setting the UuidGenerator on the context. Any suggestions?
I dont see this as a big problem. Just add a not about it in the javadoc of the method, that you should only set the generator once

> I have no idea, how we could prevent the users to re-setting the UuidGenerator on the context. Any suggestions?
This is done in camel-core-xml component. See the class AbstractCamelContextFactoryBean

See for example setting a custom ExecutorServiceStrategy as an example and just do like this.
davsclaus:1280451747:2010-07-30T09:02:27.227+0000:1280451747:2010-07-30T09:02:27.227+0000:No there are no other pages to update, but I think we should create a new page to document UUID in Camel

For example under architecture you could create a child page named: UUID
If you think such a page fits better in another place, feel free to put it where you like.



muellerc:1280987222:2010-08-05T13:47:02.626+0000:1280987222:2010-08-05T13:47:02.626+0000:Hello Claus,

I got it. But after updating the 'org.apache.camel.core.xml.AbstractCamelContextFactoryBean' afterPropertiesSet method with 

{code}
public void afterPropertiesSet() throws Exception { // line 125
 ...

    UuidGenerator uuidGenerator = getBeanForType(UuidGenerator.class);
    if (uuidGenerator != null) {
        LOG.info(""Using custom UuidGenerator: "" + uuidGenerator);
        getContext().setUuidGenerator(uuidGenerator);
    }
}
{code}

I got 

{code}
christian-muellers-macbook-pro:camel-core-xml muellerc$ mvn -Psourcecheck clean install
...
[INFO] Starting audit...
/Users/muellerc/workspaceApache/camel/components/camel-core-xml/src/main/java/org/apache/camel/core/xml/AbstractCamelContextFactoryBean.java:125:5: Executable statement count is 101 (max allowed is 100).
Audit done.
{code}

Any idea how I can fix this? I think this method has to many instructions...

Thanks,
Christian
muellerc:1280993142:2010-08-05T15:25:42.895+0000:1280993142:2010-08-05T15:25:42.895+0000:I fixed the previous listed source check failure with a little refactoring. I extract the code in a new 'lookupUuidGenerator' method and it works. I added a TODO comment so that we can change this at a later time to handle it in the same way as the existing code it does.

Committed the fix and
Added the wiki page for [UuidGenerator|https://cwiki.apache.org/confluence/display/CAMEL/UuidGenerator] (please review).
Updated [Advanced configuration of CamelContext using Spring|https://cwiki.apache.org/confluence/display/CAMEL/Advanced+configuration+of+CamelContext+using+Spring].
Updated [Camel 2.5.0 Release|https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.5.0+Release].
davsclaus:1281049083:2010-08-06T06:58:03.932+0000:1281049083:2010-08-06T06:58:03.932+0000:Lets split the big method into sub methods. I will take a look.
davsclaus:1303610233:2011-04-24T09:57:13.778+0000:1303610233:2011-04-24T09:57:13.778+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2751,Bug,Major,2.2.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Hadrian Zbarcea,Scott Cranton,0,0,2010-05-25 18:58:50+00:00,2011-04-24 10:00:43+00:00,"When the TimerComponent is stopped, it cancels all of the Timer instances it has created, which is good. However, TimerEndpoint keeps a local reference to the Timer instance, so if the TimerComponent is restarted, the TimerEndpoint will throw an exception as its timer is no longer usable as it has been canceled.


This patch provides a unit test, TimerRestartTest, and an update to TimerComponent that fixes this issue. The TimerComponent fix is to keep a list of all TimerEndpoints that have a reference to a Timer instance created by the TimerComponent. When TimerComponent.doStop is called, those TimerEndpoint references to the now canceled Timer instances are cleared.","hadrian:1274811685:2010-05-26T02:21:25.810+0000:1274811685:2010-05-26T02:21:25.810+0000:Scott, thanks for the patch. I modified it a bit. One thing was to get rid of the tabs to make checkstyle happy. Another change was that instead of using and navigating the list in the TimerComponent, I thought it's easier to just have the TimerEndpoint implement Service and then reset the timer to null on stop().

Good catch. Thanks.
hadrian:1274811714:2010-05-26T02:21:54.274+0000:1274811714:2010-05-26T02:21:54.274+0000:Patch applied with thanks to Scott.
r948293
davsclaus:1303610443:2011-04-24T10:00:43.836+0000:1303610443:2011-04-24T10:00:43.836+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2750,Bug,Major,2.2.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Didier Gutacker,0,1,2010-05-25 14:26:28+00:00,2011-04-24 10:01:40+00:00,"The BeanInfo-Class shows the same behaviour as ClassUtils-Class from Spring 3.0.x (see Spring Issue 7066, https://jira.springsource.org/browse/SPR-7066).
When working with mock objects created by mockito using an interface the getSuperclass()-Method returns java.lang.Object and the method to called on the mock can't be found. 


While looking around for a solution I found the path applied in Spring (see https://fisheye.springsource.org/browse/spring-framework/trunk/org.springframework.core/src/main/java/org/springframework/util/ClassUtils.java?content-type=text/vnd.viewcvs-markup&r1=3227&r2=3228).


In method 
public static Class<?> getUserClass(Class<?> clazz) 


the code


return (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR) ?  clazz.getSuperclass() : clazz);


is replaced by 


if (clazz != null && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
    Class<?> superClass = clazz.getSuperclass();
    if (superClass != null && !Object.class.equals(superClass)) 

{
         return superClass;
    }

}
return clazz;


While waiting for a fix in BeanInfo class a workaround is to mock the concrete class not the interface, but this makes the test code more complicated if several classes implement the same interface.


A Wor","davsclaus:1274836563:2010-05-26T09:16:03.637+0000:1274836563:2010-05-26T09:16:03.637+0000:trunk: 948371.

Thanks for reporting and providing the solution.
davsclaus:1303610500:2011-04-24T10:01:40.145+0000:1303610500:2011-04-24T10:01:40.145+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2749,Bug,Major,2.2.0,2.4.0,"
None
",Closed,Cannot Reproduce,2.4.0,Unassigned,Roger Mbiama,0,0,2010-05-24 15:13:44+00:00,2015-10-20 13:42:17+00:00,/home/sites/angosso.net/. install dir path,"hadrian:1274697017:2010-05-24T18:30:17.663+0000:1274697017:2010-05-24T18:30:17.663+0000:Come on Roger, what do you expect us to do based on the issue description you provided? Please take care of that, or we'll close the issues with ""Cannot reproduce"".
davsclaus:1303610438:2011-04-24T10:00:38.683+0000:1303610438:2011-04-24T10:00:38.683+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2748,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Willem Jiang,0,0,2010-05-24 07:06:26+00:00,2011-04-24 10:01:39+00:00,"Current camel-cxf features doesn't include wss4j, saaj-imple, opensaml, fastinfoset bundle.
We need to add these bundle into camel-cxf features.",davsclaus:1303610499:2011-04-24T10:01:39.702+0000:1303610499:2011-04-24T10:01:39.702+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2747,Improvement,Major,2.2.0,2.4.0,"
None
",Closed,Cannot Reproduce,2.4.0,Hadrian Zbarcea,Roger Mbiama,0,1,2010-05-23 18:59:25+00:00,2011-04-24 10:01:30+00:00,/inetpub/www/angosso.net/accueil/.Include navigation issue,"hadrian:1274630953:2010-05-24T00:09:13.050+0000:1274630953:2010-05-24T00:09:13.050+0000:It's not really clear to me what you mean with this issue. It's great that you mentioned IIS as the environment, but how do you run camel, how's your route looking like, what Exception do you see (or unexpected behavior) and what is the expectation? Without that it's kinda hard to improve anything. And obviously, patches are highly appreciated.
hadrian:1274631073:2010-05-24T00:11:13.987+0000:1274631073:2010-05-24T00:11:13.987+0000:Moving to 2.4.0. The 2.3.0 release is already built and being voted on with good chances of becoming the final release.
davsclaus:1303610490:2011-04-24T10:01:30.465+0000:1303610490:2011-04-24T10:01:30.465+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2746,Task,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Cott Lang,0,0,2010-05-21 21:01:24+00:00,2011-04-24 10:01:26+00:00,1.4.3 has a nasty bug in treemap that won't parse booleans properly.,"davsclaus:1274481780:2010-05-22T06:43:00.649+0000:1274481780:2010-05-22T06:43:00.649+0000:trunk: 947250.
davsclaus:1274502529:2010-05-22T12:28:49.174+0000:1274502529:2010-05-22T12:28:49.174+0000:trunk: 947288.

Upgrade to 1.5.2 which is the latest stable release.
davsclaus:1303610486:2011-04-24T10:01:26.464+0000:1303610486:2011-04-24T10:01:26.464+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2745,Bug,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-05-21 06:59:31+00:00,2011-04-24 10:01:15+00:00,"When I running the test which need to call the ExpressionDefinition toString method, I found the expression is



    simple{bodyAs(java.lang.String.class)bodyAs[java.lang.String]}




We need to avoid adding the expression when the ExpressionDefinition has the expression value.",davsclaus:1303610475:2011-04-24T10:01:15.212+0000:1303610475:2011-04-24T10:01:15.212+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2744,Bug,Minor,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Glenn Moss,0,0,2010-05-20 16:37:08+00:00,2011-04-24 10:00:36+00:00,"When the AggregationStrategy's aggregate method returns null, the AggregateProcessor throws an NPE. While this is a result of user error, I think it would be easy to provide a more useful error indicating what the true problem is. This is the (not very helpful) error the user sees:



ERROR | Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1117)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.NullPointerException
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:227)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:182)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:185)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:151)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:89)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	... 9 more","davsclaus:1274392712:2010-05-21T05:58:32.088+0000:1274392712:2010-05-21T05:58:32.088+0000:trunk: 946886
davsclaus:1303610436:2011-04-24T10:00:36.609+0000:1303610436:2011-04-24T10:00:36.609+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2743,Bug,Major,"2.0.0, 2.1.0, 2.2.0",None,"
None
",Closed,Fixed,2.5.0,Willem Jiang,Willem Jiang,0,1,2010-05-20 13:46:50+00:00,2011-04-24 09:57:10+00:00,"Here is the mail thread which discusses about it.
http://old.nabble.com/camel-http-converts-headers-to-lower-case-tp28620717p28620717.html","njiang:1274336533:2010-05-20T14:22:13.222+0000:1274336533:2010-05-20T14:22:13.222+0000:submit a patch with a test into camel trunk.
pino_otto:1285046979:2010-09-21T13:29:39.150+0000:1285046979:2010-09-21T13:29:39.150+0000:I am using Camel 2.4.0 and still having this problem.

The HTTP headers are all in lower case.


pino_otto:1285047051:2010-09-21T13:30:51.489+0000:1285047051:2010-09-21T13:30:51.489+0000:This bug is present in Camel 2.4.0
njiang:1285048084:2010-09-21T13:48:04.782+0000:1285048084:2010-09-21T13:48:04.782+0000:Hi giovanni

How did you get the header from the message?
Did you have an chance to check out the unit test[1] of the patch?

[1]http://svn.apache.org/viewvc/camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpHeaderTest.java?view=markup&pathrev=946640

Willem
davsclaus:1285050305:2010-09-21T14:25:05.465+0000:1285050305:2010-09-21T14:25:05.465+0000:I can reproduce it. Will work on it.
davsclaus:1285051690:2010-09-21T14:48:10.860+0000:1285051690:2010-09-21T14:48:10.860+0000:trunk: 999444.

Its now fixed. And there is now a better unit test to catch and ensure headers returned is in the expected case.
pino_otto:1285060012:2010-09-21T17:06:52.537+0000:1285060012:2010-09-21T17:06:52.537+0000:That fix did not solve my problem.

Is it possible that a similar issue is present also on org.apache.camel.component.http.DefaultHttpBinding

 protected void popluateRequestParameters(HttpServletRequest request, HttpMessage message) {
        //we populate the http request parameters without checking the request method
-->  Map<String, Object> headers = message.getHeaders();  <<<------- here
        Enumeration names = request.getParameterNames();
        while (names.hasMoreElements()) {
            String name = (String)names.nextElement();
            Object value = request.getParameter(name);
            if (headerFilterStrategy != null
                && !headerFilterStrategy.applyFilterToExternalHeaders(name, value, message.getExchange())) {
                headers.put(name, value);
            }
        }

Also the method name could be refactored to ""populate..."" instead of ""popluate.....""


davsclaus:1285063347:2010-09-21T18:02:27.869+0000:1285063347:2010-09-21T18:02:27.869+0000:Please try again and make sure you use the source code.

The code above is when Camel receives a HttpRequest.
It copies the headers from HttpRequest to Camel Message.

The bug is in the opposite. When Camel sends back the response by populating the HttpResponse.

Can you create a small zip file with a Camel project that demonstrates the problem you have.
And maybe use a network sniffer tool to check what data is send in the packages.

There are http proxy tools which can sniff the data.
pino_otto:1285115545:2010-09-22T08:32:25.790+0000:1285115545:2010-09-22T08:32:25.790+0000:Hi Claus, I apologize.

It was my mistake, because yesterday I applied the new source code which fixes the bug to the wrong class in the source code of Camel 2.4.

Today I realized the mistake and applied the bug fix to the correct class (DefaultHttpBinding) and it WORKS!

Thanks again and sorry for making confusion.


davsclaus:1303610230:2011-04-24T09:57:10.849+0000:1303610230:2011-04-24T09:57:10.849+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2742,Bug,Minor,"2.2.0, 2.3.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-20 12:52:19+00:00,2011-04-24 10:01:42+00:00,"This code in JMSBinding



                // must encode to safe JMS header name before setting property on jmsMessage
                String key = jmsKeyFormatStrategy.encodeKey(headerName);
                jmsMessage.setObjectProperty(key, value);




Should detect the value type and use the jmsMessage.setBooleanProperty() and so on. Otherwise IBM thrown an exception.


See nabble
http://old.nabble.com/jmsbinding-problem-ts28620489.html","davsclaus:1274422754:2010-05-21T14:19:14.514+0000:1274422754:2010-05-21T14:19:14.514+0000:trunk: 947018.
davsclaus:1303610502:2011-04-24T10:01:42.819+0000:1303610502:2011-04-24T10:01:42.819+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2741,Bug,Minor,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Roland Knight,0,0,2010-05-20 02:31:39+00:00,2011-04-24 10:01:45+00:00,"Gzip/zip marshal/unmarshal leaves input files open, relying on the garbage collector to close the file. The cause sporadic file deletion exceptions in the following route:
          from(""file:incoming?delete=true"")
            .marshal().gzip()
            .to(""file:outgoing?fileName=${file:name}.gz"");","davsclaus:1274391017:2010-05-21T05:30:17.219+0000:1274391017:2010-05-21T05:30:17.219+0000:There is a helper method to close the streams. I will polish the code a bit and move the close method to IOHelper where it belongs.
davsclaus:1274393801:2010-05-21T06:16:41.137+0000:1274393801:2010-05-21T06:16:41.137+0000:trunk: 946891.
davsclaus:1303610505:2011-04-24T10:01:45.349+0000:1303610505:2011-04-24T10:01:45.349+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2740,Bug,Major,2.2.0,"2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,Qingyi Gu,0,1,2010-05-19 18:22:08+00:00,2011-11-09 17:29:27+00:00,"I am running JBoss, ActiveMQ and Camel for my application.   In the InOut pattern,  I am using a predefined static queue as a reply queue.   After running for a while,  the memory usage of JBoss keeps growing and growing until it hits outOfMemory error and app server is totally hung.   I monitor the thread in jconsole,  I can see the jms connection/session keeps growing and growing.   


But once I switch to use temp queue for InOut pattern,  this problem goes away.","davsclaus:1274424026:2010-05-21T14:40:26.728+0000:1274424026:2010-05-21T14:40:26.728+0000:Could you post more details, eg what Camel route do you use?

And how have you setup ActiveMQ?
davsclaus:1274424056:2010-05-21T14:40:56.897+0000:1274424056:2010-05-21T14:40:56.897+0000:And what versions of the various software are you using? eg JBoss, AMQ, JDK etc.
qingyi:1274445054:2010-05-21T20:30:54.111+0000:1274445054:2010-05-21T20:30:54.111+0000:Here is the version of software.

JBoss 4.2.2
AMQ 5.3.1
JDK  1.5.0_22
Camel 2.2.0
qingyi:1274446764:2010-05-21T20:59:24.118+0000:1274446764:2010-05-21T20:59:24.118+0000:Here are some more details.

AMQ:  I have two activemq and there is one network connector between them.  See config below.

<networkConnector name=""server1"" uri=""static://(https://localhost:61617?proxyHost=server1&proxyPort=80)"" duplex=""true"">
     <!-- limit store and forward to specific queues -->
     <dynamicallyIncludedDestinations>
         <queue physicalName=""TO_SERVER1.>""/>
         <queue physicalName=""TO_SCA.>""/>
     </dynamicallyIncludedDestinations>
     <staticallyIncludedDestinations>
		<queue physicalName=""TO_SERVER1.SYNC_RESP""/>
		<queue physicalName=""TO_SCA.SSO.SYNC_REQ""/>
     </staticallyIncludedDestinations>
  </networkConnector>

Camel Route on consumer side:
		from(""jms:queue:TO_SCA.SSO.SYNC_REQ?concurrentConsumers=25"")
			.choice()
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE1""))
					.beanRef(""service1"")
				.when(header(JMS_HEADER_TYPE).isEqualTo(""TYPE2""))
					.beanRef(""service2"")
				.otherwise()
					.beanRef(""unknownService"")
			.end();

On producer side:

	        HashMap<String, Object> reqHeaders = new HashMap<String, Object>();
	        reqHeaders.put(""JMSType"", ""TYPE1"");
			
			
		 // Options
	        StringBuffer options = new StringBuffer();
	        options.append(""?"");
	        options.append(""replyTo"");
	        options.append(""="");
	        options.append(""TO_EC.SERVER1.SYNC_RESP"");

	        
	        // Send Message
	        String outMsg = (String)camelTemplate.sendBodyAndHeaders(""jms:queue:TO_SCA.SSO.SYNC_REQ""+options.toString(), 
	        														 ExchangePattern.InOut, 
	        														 inMsg, 
	        														 reqHeaders);			



davsclaus:1274939723:2010-05-27T13:55:23.829+0000:1274939723:2010-05-27T13:55:23.829+0000:Can you crete a small project and attach a zip file with it? Then its easier to use to look into this.
davsclaus:1280031757:2010-07-25T12:22:37.126+0000:1280031757:2010-07-25T12:22:37.126+0000:See this FAQ about the correct way of using templates
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html

And also try Camel 2.5 because the request-reply logic over JMS have been refactored a bit to cater for async routing engine.
davsclaus:1281572461:2010-08-12T08:21:01.151+0000:1281572461:2010-08-12T08:21:01.151+0000:User doesn't respond
davsclaus:1303610281:2011-04-24T09:58:01.932+0000:1303610281:2011-04-24T09:58:01.932+0000:Closing all resolved tickets from 2010 or older
davaleri:1320765040:2011-11-08T23:10:40.279+0000:1320765040:2011-11-08T23:10:40.279+0000:I have attached a screen shot showing memory usage for the attached test case.  The attached test case uses a simple JUnit test to throw a bunch of small messages at JMS with the InOut MEP.  The test case uses the asynch capabilities of the ProducerTemplate to easily ramp up the traffic.  It doesn't wait for the generated Futures so it isn't really usable for correctness testing, it is just intended to reproduce the issue.  Also note that killing the build will likely not terminate the forked JVM.

It takes less than 8K messages to consume the available memory.  The test crawls along for a bit after this point and eventually runs out of memory and crashes somewhere in the low 8K message range.  It only takes a couple minutes to reach this point.  Based on real world observation, it would appear that the issue is not driven by message frequency but by message numbers.  That is, it can take a minute or a week to encounter enough messages, but eventually you run out of memory.

The heap is occupied mostly by character arrays that appear to contain message IDs / correlation IDs.  I did not traverse the object graph in the heap, but it would appear that there is some sort of issue with JMS filters or connections not getting cleaned up.  I did not attach the heap dump as it is trivial to generate from the attached test code.

Removing the replyTo URI parameter and using a temp destination for replies resolves the issue.  Memory usage stays in an acceptable range and message throughput is relatively constant, although does appear to slow slightly over time for a currently unknown reason.
davaleri:1320766143:2011-11-08T23:29:03.972+0000:1320766143:2011-11-08T23:29:03.972+0000:Also, the attached test uses 2.9-RC1.  The steady slowdown with a temporary reply destination was due to Eclipse's console window slowing down the logging activities when running the test in Eclipse.  Once Eclipse was out of the mix, using a temporary reply destination performed flawlessly in a 30 minute test run.
davsclaus:1320803124:2011-11-09T09:45:24.934+0000:1320803124:2011-11-09T09:45:24.934+0000:David please create a new ticket instead of opening old tickets. We prefer this way. You may link the new ticket to the old ticket.
davsclaus:1320810139:2011-11-09T11:42:19.398+0000:1320810139:2011-11-09T11:42:19.398+0000:Okay I can reproduce the issue (at about 8000 msgs) and have a patch which improves this, but I hit a OOME at 100000 msg now.

davsclaus:1320813143:2011-11-09T12:32:23.521+0000:1320813143:2011-11-09T12:32:23.521+0000:Okay I was using the default maven surefire memory settings which of course is low. 

So I increased the memory setting and have the test be able to run all 1000000 messages

{code}

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Xmx1024m -XX:MaxPermSize=512m</argLine>
        </configuration>
      </plugin>
    </plugins>
  </build>
{code}
davsclaus:1320820591:2011-11-09T14:36:31.061+0000:1320820591:2011-11-09T14:36:31.061+0000:Thanks for the sample project to reproduce the issue.
davsclaus:1320830967:2011-11-09T17:29:27.556+0000:1320830967:2011-11-09T17:29:27.556+0000:Well the sample project from David itself also causes high memory occupation as it creates 1.000.000 tasks on the executor service pool, which is stored in memory. For example using a sample with for example 50.000 tasks does not take up so much memory.
"
0,CAMEL-2739,Bug,Major,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Tejash Shah,0,0,2010-05-19 13:05:31+00:00,2011-04-24 10:01:45+00:00,"I contributed spring Namespace Handler from my custom eclipse plug-in as follows:
<extension point=""org.springframework.ide.eclipse.beans.core.namespaces"">
		<namespace name=""Camel Spring Namespace Handler extension""
			namespaceHandler=""org.apache.camel.spring.handler.CamelNamespaceHandler""
			uri=""http://camel.apache.org/schema/spring"">
		</namespace>
</extension>


After this, I create spring.xml file using some camel elements and I validated using spring validator . Now whenever I edit the spring.xml file and save it I am getting following error message in error log.


org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from file [C:/workspace locations/New Folder (10)/config/spring.xml]; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:420)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:342)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$2.loadBeanDefinitions(BeansConfig.java:326)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:358)
at org.springframework.ide.eclipse.beans.core.internal.model.BeansConfig$3.call(BeansConfig.java:1)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
at java.util.concurrent.FutureTask.run(FutureTask.java:123)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
at java.lang.Thread.run(Thread.java:595)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
at org.springframework.ide.eclipse.beans.core.DefaultBeanDefinitionRegistry.removeBeanDefinition(DefaultBeanDefinitionRegistry.java:189)
at org.apache.camel.spring.handler.CamelNamespaceHandler.autoRegisterBeanDefinition(CamelNamespaceHandler.java:411)
at org.apache.camel.spring.handler.CamelNamespaceHandler.registerTemplates(CamelNamespaceHandler.java:364)
at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:272)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.apache.camel.component.cxf.transport.spring.AbstractCamelContextBeanDefinitionParser.doParse(AbstractCamelContextBeanDefinitionParser.java:55)
at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:84)
at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:56)
at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:69)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1297)
at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1287)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:92)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:507)
at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:398)


There seems to problem with NamespaceHandler class.","njiang:1274247317:2010-05-19T13:35:17.333+0000:1274247317:2010-05-19T13:35:17.333+0000:I just check the code of CamelNamespaceHandler, current template can be defined out side of camelContext.
Can you try out the camel 2.2.0 or latest Camel 2.3-SNAPSHOT for it ?
tejash_p_shah:1274312136:2010-05-20T07:35:36.139+0000:1274312136:2010-05-20T07:35:36.139+0000:Thanks for quick response on this issue.

Let me give more clarification on this issue. I created spring.xml file with few spring <bean> elements and one <camel:camelContext> element with multiple <camel:route> definitions within it.
I did not define any bean with name 'template' in my spring.xml configuration file but still I am getting exception mentioned in the defect description. 

I also tested this with camel-2.2.0 still getting same error.

You mentioned about current template in your comment, which I had not created. Do I need to create it ? 

Additionally, I am able to deploy this spring.xml configuration successfully without any errors, I just get errors within eclipse IDE when I validate spring.xml file with spring validator.  
davsclaus:1274392943:2010-05-21T06:02:23.651+0000:1274392943:2010-05-21T06:02:23.651+0000:This is a bug in Spring Tools and not in Camel.
You need to report this at Spring.

Looks like the Spring tools throws an exception on purpose staring {{Not Implemented}}.
{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'template': Not implemented
{code}

Can uses the method {{isBeanNameInUse}} to determine if there is a bean registered in the Spring XML file with the id {{template}}.
davsclaus:1274392992:2010-05-21T06:03:12.179+0000:1274392992:2010-05-21T06:03:12.179+0000:If you report this at Spring you are welcome to post a comment with a link to the reported issue
davsclaus:1274393442:2010-05-21T06:10:42.419+0000:1274393442:2010-05-21T06:10:42.419+0000:Let me add a workaround in Camel to cater for that thrown exception. Then you should be able to continue editing Camel with the Spring tooling
davsclaus:1274393589:2010-05-21T06:13:09.753+0000:1274393589:2010-05-21T06:13:09.753+0000:Will add a workaround in Camel
davsclaus:1274397180:2010-05-21T07:13:00.074+0000:1274397180:2010-05-21T07:13:00.074+0000:trunk: 946915.

Tejash can you try with latest source code or wait for Camel 2.3 to be released and try it.
tejash_p_shah:1274399490:2010-05-21T07:51:30.834+0000:1274399490:2010-05-21T07:51:30.834+0000:Thanks for adding workaround.
 I will try out with latest source build and once 2.3 gets release I will use that
davsclaus:1303610505:2011-04-24T10:01:45.508+0000:1303610505:2011-04-24T10:01:45.508+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2738,Improvement,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-05-19 10:05:07+00:00,2011-04-24 10:01:10+00:00,"Here is the mail thread which discusses about it.
http://old.nabble.com/2.3-SNAPSHOT%3A-Stream-Caching-again-enabled-by-Bug-Fix-for-Camel-2686-and-CAMEL-2694-%28rev-941275%29--ts28582952.html","njiang:1274239234:2010-05-19T11:20:34.609+0000:1274240460:2010-05-19T11:41:00.008+0000:Introduce *disableStreamCache* option into HttpEndpoint to disable the StreamCache when DefaultHttpBinding parser the body.
*NOTE*, if you set this option to be true, you will not get the POST Form data from the message body.

Merge the change into camel-http4 and updated the wiki page for it. 
davsclaus:1274241026:2010-05-19T11:50:26.240+0000:1274241026:2010-05-19T11:50:26.240+0000:Willem you forgot to commit the change in Exchange :)

I will add a temporary fix so the TC builds can pass
davsclaus:1274241228:2010-05-19T11:53:48.163+0000:1274241228:2010-05-19T11:53:48.163+0000:I do *not* think the name of the constant is well named.
{{DISABLE_STREAM_CACHE}} as it only apply for Jetty. Then if you have a route later on where you use {{streamCaching()}} as you do in one of the examples. As there is no logic in StreamCaching interceptor to read this option.

Maybe you did a fix there too? And also forgot to commit that.


njiang:1274245540:2010-05-19T13:05:40.641+0000:1274245540:2010-05-19T13:05:40.641+0000:@Claus

Thanks for pointing that out, I just changed the constant name to DISABLE_HTTP_STREAM_CACHE. 
davsclaus:1303610470:2011-04-24T10:01:10.022+0000:1303610470:2011-04-24T10:01:10.022+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2737,New Feature,Minor,2.3.0,2.6.0,"
None
",Closed,Fixed,2.6.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-19 08:33:41+00:00,2011-04-24 09:57:27+00:00,"Then you can have it hot-reload template files.


For example as the Velocity component can do","rkettelerij:1288365529:2010-10-29T23:18:49.270+0000:1288365810:2010-10-29T23:23:30.193+0000:Claus, see attached patch. This might be what you're looking for.

Currently XSLT templates are loaded once and the compiled template is reused for every exchange. This path adds an option to reload the XSLT template for every exchange that gets processed. Thus enabling hot reloading.
massfords:1288365930:2010-10-29T23:25:30.568+0000:1288365930:2010-10-29T23:25:30.568+0000:Reloading on every exchange is good for development mode. Out of curiosity, is it possible to reload the XSLT at runtime through the JMX interface? 
rkettelerij:1288395702:2010-10-30T07:41:42.528+0000:1288395702:2010-10-30T07:41:42.528+0000:Indeed hot reloading is meant for development purposes. This patch adds a ""loaderCache"" option to the XSLT component, similar to the one available in the Velocity component. This option isn't exposed through JMX. 

However, this applies to almost any component. If I recall correctly all components in a Camel route get exported as MBeans, but most of the time these MBeans are read-only. Options aren't exported as modifiable attributes. This would be nice though....
davsclaus:1288482955:2010-10-31T07:55:55.794+0000:1288482955:2010-10-31T07:55:55.794+0000:Richard would it be possible to create an unit test as well? Maybe peek at velocity to see if there is an unit test for this cache option
rkettelerij:1288501951:2010-10-31T13:12:31.165+0000:1288501951:2010-10-31T13:12:31.165+0000:Claus, i've managed to write a test for this issue. The unit test is attached as a separate patch. Also i've updated the original patch to pass the test.
davsclaus:1289026044:2010-11-06T14:47:24.400+0000:1289026044:2010-11-06T14:47:24.400+0000:Richard

Just a minor flaw in the patch.
Endpoint options should not set/override the existing option on the component.

What we should do is to
- use option from endpoint if any given
- if not fallback and use component option

So you should do something like this instead
{code}
        // default to use the cache option from the component if the endpoint did not have the loaderCache parameter
        boolean cache = getAndRemoveParameter(parameters, ""loaderCache"", Boolean.class, loaderCache);
{code}

Notice that cache is a local variable.
davsclaus:1289026358:2010-11-06T14:52:38.399+0000:1289026358:2010-11-06T14:52:38.399+0000:I have renamed the option from loaderCache to contentCache. The reason is to use the same name as velocity, freemarker etc.
The loaderCache option is a velocity only specific option which is part of Apache Velocity.
rkettelerij:1289029838:2010-11-06T15:50:38.216+0000:1289029838:2010-11-06T15:50:38.216+0000:Claus, thanks for the feedback. The getter/setter for the endpoint option were more or less an afterthought, your suggested solution is better. Also renaming the option to contentCache is indeed more consistent.
davsclaus:1289030014:2010-11-06T15:53:34.840+0000:1289030014:2010-11-06T15:53:34.840+0000:trunk: 1032099.

Updated wiki as well.
rkettelerij:1289212548:2010-11-08T18:35:48.912+0000:1289212548:2010-11-08T18:35:48.912+0000:Updated release notes
davsclaus:1303610247:2011-04-24T09:57:27.242+0000:1303610247:2011-04-24T09:57:27.242+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2736,Improvement,Major,"2.0.0, 2.1.0, 2.2.0, 2.3.0",2.4.0,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-05-19 04:48:14+00:00,2011-04-24 10:00:55+00:00,"In case you want to have Camel etc. to fail on startup in case a Producer cannot start, for example it needs a remote connection which fails.


The producer would normally be created on-the-fly, eg a message needs to be send to it.","davsclaus:1274215714:2010-05-19T04:48:34.394+0000:1274215714:2010-05-19T04:48:34.394+0000:See nabble
http://old.nabble.com/Connecting-Custom-camel-component-to-remote-provider-on-startup-ts28580304.html
njiang:1275416126:2010-06-02T02:15:26.509+0000:1275416126:2010-06-02T02:15:26.509+0000:Now the SendProcess will try to create a producer and start it when it is starting.
davsclaus:1303610455:2011-04-24T10:00:55.720+0000:1303610455:2011-04-24T10:00:55.720+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2735,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-05-19 03:37:28+00:00,2011-04-24 10:01:12+00:00,"As the Exchange's inMessage and outMessage will have different security subject, we'd better to do it this way.","davsclaus:1274216039:2010-05-19T04:53:59.376+0000:1274216039:2010-05-19T04:53:59.376+0000:trunk: 946017
davsclaus:1303610472:2011-04-24T10:01:12.011+0000:1303610472:2011-04-24T10:01:12.011+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2734,Improvement,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Christian Schneider,0,0,2010-05-18 21:35:55+00:00,2011-04-24 10:01:27+00:00,"While source attachment works nicely outside of eclipse pde bundles with mvn eclipse:eclipse the same is currently very difficult when using the pde mode of eclipse. As this mode is the default for UI design camel should support it.


I found in the eclips pde FAQ that it is necessary to add a header to the Manifest of the source bundle to attach it to the bundle. See
http://wiki.eclipse.org/PDE/FAQ#How_do_source_attachments_for_bundles_work


For camel-core-2.2.0-sources.jar I added the following to the Manifest by hand:
Bundle-SymbolicName: org.apache.camel.camel-core.source
Eclipse-SourceBundle: org.apache.camel.camel-core;version=""2.2.0""


After this simple change the source was automatically attached to the bundle by eclipse. So I propose to add this header by default to all source artifacts created in the maven build.","davsclaus:1274215988:2010-05-19T04:53:08.759+0000:1274215988:2010-05-19T04:53:08.759+0000:Moving to 2.4 as we should *not* mess with the maven build at this late in the game for the 2.3 release.
cschneider:1274281562:2010-05-19T23:06:02.481+0000:1274281562:2010-05-19T23:06:02.481+0000:Added a patch for the main pom that should cause all source jars to be updated with the required manifest entries. The only problem currently is that the version name of the bundle (should be 2.4.0-SNAPSHOT) is not correct for snapshots as 2.4-SNAPSHOT is used. But for releases this works well already.
njiang:1274289971:2010-05-20T01:26:11.349+0000:1274293526:2010-05-20T02:25:26.395+0000:Don't worry,  Christian, I will take care of it.
Actually,  there is a variable(""camel.osgi.version.clean"") for you to get the ""2.4.0.SNAPSHOT"" when the project version is 2.4-SNAPSHOT.


davsclaus:1274394834:2010-05-21T06:33:54.454+0000:1274394834:2010-05-21T06:33:54.454+0000:trunk: 946513
cschneider:1274483212:2010-05-22T07:06:52.611+0000:1274483212:2010-05-22T07:06:52.611+0000:When I build with  ""mvn -DskipTests clean source:jar install"" the version is null in my Manifest. I also have no clue where the camel.osgi.version.clean is set. Is this variable set by hand when calling maven?


njiang:1274553491:2010-05-23T02:38:11.211+0000:1274553491:2010-05-23T02:38:11.211+0000:Hi Christian,

It looks like the  source:jar only takes the properties which generate by antrun after the mvn install.
So ""mvn -DskipTest clean install source:jar install"" can do the trick for you.
cschneider:1274705180:2010-05-24T20:46:20.334+0000:1274705180:2010-05-24T20:46:20.334+0000:Hi Willem,

this way the source jar is generated but then it is not written to the repository. I think we have to change the code that generates the properties to run earlier. Can you give me a hint where the antrun code is configured so I can take a look at it?

Greetings

Christian

njiang:1274722166:2010-05-25T01:29:26.162+0000:1274722166:2010-05-25T01:29:26.162+0000:Hi Christian,

if you add the second install after the source:jar, you can find the source.jar is written to your local repository.
{code}
...
[INFO] Checking legal files in: camel-atom-2.4-SNAPSHOT.jar
[INFO] Checking legal files in: camel-atom-2.4-SNAPSHOT-sources.jar
[INFO] [install:install {execution: default-install}]
[INFO] Installing /Users/jiangning/work/camel/trunk/components/camel-atom/target/camel-atom-2.4-SNAPSHOT.jar to /Users/jiangning/.m2/repository/org/apache/camel/camel-atom/2.4-SNAPSHOT/camel-atom-2.4-SNAPSHOT.jar
[INFO] Installing /Users/jiangning/work/camel/trunk/components/camel-atom/target/camel-atom-2.4-SNAPSHOT-sources.jar to /Users/jiangning/.m2/repository/org/apache/camel/camel-atom/2.4-SNAPSHOT/camel-atom-2.4-SNAPSHOT-sources.jar
...
{code}
njiang:1274722253:2010-05-25T01:30:53.794+0000:1274722253:2010-05-25T01:30:53.794+0000:BTW, The properties generation configure is parent/pom.xml, antrun plugin section.

cschneider:1274884541:2010-05-26T22:35:41.985+0000:1274884541:2010-05-26T22:35:41.985+0000:I think the problem with the source:jar call is that it is outside the normal build lifecycle. So the initialize phase where the properties are set is not called.
The following call works:
mvn initialize source:jar install

Btw. It is also possible to have the source plugin attach the source.jar to the installed artifacts everytime install is called. Do you think it would make sense to simply define this?

I have also found a minor problem with the source.jar Manifest we should fix. The Manifest should also contain a Bundle-Version. Could you add the following line to the <ManifestEntries>:
<Bundle-Version>${camel.osgi.version.clean}</Bundle-Version>

njiang:1274897256:2010-05-27T02:07:36.559+0000:1274897256:2010-05-27T02:07:36.559+0000:@Christian,

Thanks for the tip, I added the <Bundle-Version> entry into source manifest in revision  948651.
davsclaus:1303610487:2011-04-24T10:01:27.735+0000:1303610487:2011-04-24T10:01:27.735+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2733,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Jaco van Tonder,0,0,2010-05-18 16:20:52+00:00,2011-04-24 10:00:50+00:00,"SMPP component needs a bit more debug logging, and some of the LOG.info() messages needs to be changed to LOG.debug() as this is currently harming performance on production systems.


Patch attached.","jacovt:1274170929:2010-05-18T16:22:09.789+0000:1274170929:2010-05-18T16:22:09.789+0000:Patch to add more logging to the SMPP component, as well as remove LOG.info() messages on the producer code.
njiang:1274202364:2010-05-19T01:06:04.068+0000:1274202364:2010-05-19T01:06:04.068+0000:Applied the patch with thanks to Jacov.
davsclaus:1303610450:2011-04-24T10:00:50.975+0000:1303610450:2011-04-24T10:00:50.975+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2702,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-05-06 18:42:08+00:00,2011-04-24 10:01:36+00:00,No Desc,"gnodet:1275004395:2010-05-28T07:53:15.066+0000:1275004395:2010-05-28T07:53:15.066+0000:Committed revision 949127.

davsclaus:1303610496:2011-04-24T10:01:36.163+0000:1303610496:2011-04-24T10:01:36.163+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2701,Task,Minor,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Unassigned,Claus Ibsen,0,0,2010-05-06 14:37:15+00:00,2011-04-24 09:58:23+00:00,"See
http://www.manning-sandbox.com/thread.jspa?messageID=99281#99281","jwagenleitner:1279031007:2010-07-13T22:23:27.426+0000:1279031007:2010-07-13T22:23:27.426+0000:The following works for me in order to bind using credentials using 2.3.0 and in 2.5-SNAPSHOT

---
Properties props = new Properties();
props.setProperty(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
props.setProperty(Context.PROVIDER_URL, ""ldap://localhost:389"");
props.setProperty(Context.URL_PKG_PREFIXES, ""com.sun.jndi.url"");
props.setProperty(Context.REFERRAL, ""ignore"");
props.setProperty(Context.SECURITY_AUTHENTICATION, ""simple"");
props.setProperty(Context.SECURITY_PRINCIPAL, ""cn=Manager"");
props.setProperty(Context.SECURITY_CREDENTIALS, ""secret"");

SimpleRegistry reg = new SimpleRegistry();
reg.put(""myldap"", new InitialLdapContext(props, null));

CamelContext context = new DefaultCamelContext(reg);
context.addRoutes(
    new RouteBuilder() {
        public void configure() throws Exception {
            from(""direct:start"").to(""ldap:myldap?base=ou=test"");
        }
    }
);
context.start();

ProducerTemplate template = context.createProducerTemplate();

Endpoint endpoint = context.getEndpoint(""direct:start"");
Exchange exchange = endpoint.createExchange();
exchange.getIn().setBody(""(uid=test)"");
Exchange out = template.send(endpoint, exchange);

Collection<SearchResult> data = out.getOut().getBody(Collection.class);
assert data != null;
assert !data.isEmpty();

System.out.println(out.getOut().getBody());

context.stop();
---
davsclaus:1279068846:2010-07-14T08:54:06.813+0000:1279068846:2010-07-14T08:54:06.813+0000:Thanks John for the sample. I have updated the camel-ldap wiki page with your sample.
davsclaus:1303610303:2011-04-24T09:58:23.472+0000:1303610303:2011-04-24T09:58:23.472+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2700,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Jonathan Anstey,Jonathan Anstey,0,0,2010-05-06 13:29:30+00:00,2011-04-24 10:01:10+00:00,"cxfbean component should ignore the wsdlLocation in the annotation in the POJO when starting the service. It should be using the JAXWS bean to create the service. Came across this bug when I (mistakenly) set the wsdlLocation to the http one published by the service, which of course wasn't up yet and I got the exception below. Fix for this coming soon.


For Googlers out there, this ticket may fix this error message you may be getting:



Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://jaxwsBean due to: Failed to create service.
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
    at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
    at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
    at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115)
    at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63)
    at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57)
    at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87)
    at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286)
    at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114)
    at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640)
    ... 32 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:93)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:396)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:521)
    at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:271)
    at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:177)
    at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:100)
    at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:105)
    at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:167)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:104)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86)
    at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48)
    at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416)
    ... 42 more
Caused by: javax.wsdl.WSDLException: WSDLException: faultCode=PARSER_ERROR: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:226)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179)
    at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:91)
    ... 54 more
Caused by: java.lang.IllegalArgumentException: InputSource must have a ByteStream or CharacterStream
    at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:983)
    at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:217)
    ... 56 more","janstey:1273124815:2010-05-06T13:46:55.210+0000:1273124815:2010-05-06T13:46:55.210+0000:Fixed in rev http://svn.apache.org/viewvc?rev=941723&view=rev
davsclaus:1303610470:2011-04-24T10:01:10.834+0000:1303610470:2011-04-24T10:01:10.834+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2699,Improvement,Major,2.3.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-06 09:16:10+00:00,2011-04-24 10:01:27+00:00,"It should work similar as Mina which does this.


Make sure NettyProducer and NettyConsumer does this as well","davsclaus:1273114842:2010-05-06T11:00:42.239+0000:1273114842:2010-05-06T11:00:42.239+0000:See details here how to shutdown
http://docs.jboss.org/netty/guide/3.1/html/start.html#d0e429
davsclaus:1273115673:2010-05-06T11:14:33.504+0000:1273115673:2010-05-06T11:14:33.504+0000:trunk: 941661.

Improve camel-netty to properly shutdown. Also add features which we have in camel-mina but wasnt ported to camel-netty yet.
davsclaus:1273122916:2010-05-06T13:15:16.537+0000:1273122916:2010-05-06T13:15:16.537+0000:trunk: 941713.

camel-netty will reconnect if not connected. Added lazyChannelCreation option.
davsclaus:1273533099:2010-05-11T07:11:39.056+0000:1273533099:2010-05-11T07:11:39.056+0000:trunk: 943023.

Improved SSL re-connection with thanks to Gareth Collins
davsclaus:1303610487:2011-04-24T10:01:27.598+0000:1303610487:2011-04-24T10:01:27.598+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2698,Bug,Major,2.3.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-06 09:07:46+00:00,2011-04-24 10:00:41+00:00,"It should do as MinaHelper


See nabble
http://old.nabble.com/Recovery-From-Netty-Connection-Drop-ts28467631.html","davsclaus:1273108708:2010-05-06T09:18:28.348+0000:1273108708:2010-05-06T09:18:28.348+0000:trunk: 941620.
davsclaus:1303610441:2011-04-24T10:00:41.489+0000:1303610441:2011-04-24T10:00:41.489+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2697,Improvement,Major,"2.2.0, 2.3.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Claus Ibsen,0,0,2010-05-06 08:40:31+00:00,2011-04-24 10:01:37+00:00,"Spring 3.0.x behaves differently when discovering bean dependencies. For example if you have a <routeBuilder ref=""xxx""/> in <camelContext/> than the xxx bean will not by default be dependent on the <camelContext/>. This causes Spring maybe to create the xxx before the camelContext. And you most likely want CamelContext to be created beforehand, so IoC allows you to inject CamelContext into that xxx or whatnot.


See nabble
http://old.nabble.com/Spring-3.0-and-Camel-2.2---Route-configure%28%29-called-before-Spring-beans-injected-ts28415437.html


We do already have logic for this in the namespace handler, but we need to add it to more places to have it working for all kind of camel types.","njiang:1273444667:2010-05-10T06:37:47.144+0000:1273444667:2010-05-10T06:37:47.144+0000:Added a test case into the camel trunk, it looks like the issue has been fix.
njiang:1273806157:2010-05-14T11:02:37.492+0000:1273806157:2010-05-14T11:02:37.492+0000:As we can't reproduce the issue with the test case, now I close this issue.
We can reopen it when we hit this kind of issue again.
davsclaus:1303610497:2011-04-24T10:01:37.992+0000:1303610497:2011-04-24T10:01:37.992+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2696,Task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-05-06 08:09:28+00:00,2011-04-24 10:00:49+00:00,"As CXF 2.2.8 will be released in a week,  we just need to use CXF 2.2.8-SNAPSHOT to keep up the speed.","njiang:1273514978:2010-05-11T02:09:38.464+0000:1273514978:2010-05-11T02:09:38.464+0000:As CXF 2.2.8 is released, I just updated the cxf.version to 2.2.8.

davsclaus:1303610449:2011-04-24T10:00:49.957+0000:1303610449:2011-04-24T10:00:49.957+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2695,Sub-task,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Guillaume Nodet,Claus Ibsen,0,0,2010-05-06 06:27:33+00:00,2011-04-24 09:58:08+00:00,We need some basic wiki documentation at Apache what the blueprint is and how to use it.,"davsclaus:1278536797:2010-07-08T05:06:37.147+0000:1278536797:2010-07-08T05:06:37.147+0000:Thanks Guillaume
davsclaus:1303610288:2011-04-24T09:58:08.070+0000:1303610288:2011-04-24T09:58:08.070+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2694,Bug,Major,"1.6.0, 2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0, 2.2.0",None,"
None
",Closed,Fixed,"1.6.3, 2.3.0",Willem Jiang,Willem Jiang,0,0,2010-05-05 13:06:43+00:00,2011-01-17 16:50:43+00:00,GZIPHelper.toGZIPInputStream() is used for uncompress the zip date and not for compress the data.,davsclaus:1295254243:2011-01-17T16:50:43.404+0000:1295254243:2011-01-17T16:50:43.404+0000:Closing all 1.x tickets
0,CAMEL-2693,Improvement,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2010-05-05 10:07:07+00:00,2011-04-24 10:01:18+00:00,Not using service to handle camel components result in problems where a route that uses some components has no way to know when / if those components are available or not.,"gnodet:1275542443:2010-06-03T13:20:43.131+0000:1275542443:2010-06-03T13:20:43.131+0000:This issue kinda depends on https://issues.apache.org/jira/browse/ARIES-330
A workaround is to make sure the bundles defining the routes can import the needed classes.
gnodet:1275644305:2010-06-04T17:38:25.678+0000:1275644305:2010-06-04T17:38:25.678+0000:Committed revision 951497.

davsclaus:1303610478:2011-04-24T10:01:18.568+0000:1303610478:2011-04-24T10:01:18.568+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2692,Bug,Major,"1.6.2, 2.3.0","1.6.3, 2.3.0","
None
",Closed,Fixed,"1.6.3, 2.3.0",Claus Ibsen,Roland Knight,0,1,2010-05-05 04:57:40+00:00,2011-01-17 16:50:42+00:00,"Note that the only workaround for this bug is to remove the parallelProcessing() call in the builder.


I have a simple route that processes a file by splitting on a tag and processing the DOM of each split message. The problem is that getBody is randomly returning null but ONLY when using the parallelProcessing feature of split. For some runs of the same XML file, the error does not occur at all (the file is about 2MB of data), others it will happen once or twice. I am currently using the latest 2.3-SNAPSHOT. 


Also note, that after detecting the null, I tried calling getBody(String.class) - this also may return null. Sometimes it does return the proper XML. 


Route configuration that reproduces the problem (my input XML is about 2MB with about 500 article tags): 


        public void configure() throws Exception { 
          from(""file:/inbox"") 
            .split(new XPathBuilder(""//article"")) 
              .parallelProcessing()                     // remove this line getBody below never returns null 
              .process(new Processor() { 
                public void process(Exchange exchange) throws Exception { 
                  Message inMessage = exchange.getIn(); 
                  org.w3c.dom.Document domDocument = inMessage.getBody(org.w3c.dom.Document.class); 
                  if (domDocument == null) 

{ 
                    log(""Null body""); 
                  }

 else 

{ 
                    // process DOM here 
                  }

 
                } 
              }) 
            .end() 
        } 
      });","davsclaus:1273006868:2010-05-05T05:01:08.421+0000:1273006868:2010-05-05T05:01:08.421+0000:Can you attach a sample XML file?
davsclaus:1273006899:2010-05-05T05:01:39.312+0000:1273006899:2010-05-05T05:01:39.312+0000:And what OS are you using?
And can you report the JDK version number as well?
scrutinizer:1273037091:2010-05-05T13:24:51.326+0000:1273037091:2010-05-05T13:24:51.326+0000:Updated OS and exact JDK version
Claus, I can't attach the XML here, but I can email to you directly (please delete when finished with the file).
scrutinizer:1273037421:2010-05-05T13:30:21.763+0000:1273037421:2010-05-05T13:30:21.763+0000:Sample XML attached with JIRA user only visibility. If possible, remove this file once this issue is closed.
davsclaus:1273100438:2010-05-06T07:00:38.393+0000:1273100438:2010-05-06T07:00:38.393+0000:And you do not use any 3rd party XML parser? eg you use the parser which is included in the JDK core?
davsclaus:1273101572:2010-05-06T07:19:32.861+0000:1273101572:2010-05-06T07:19:32.861+0000:I cannot reproduce the problem you may have
{code}
public class SplitXPathParallelBigFileIssueTest extends ContextTestSupport {

    public void testSplitXPathParallelBigFileIssue() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(144);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file:news/?noop=true"")
                        .split(new XPathBuilder(""//article""))
                            .parallelProcessing()
                            .process(new Processor() {
                                public void process(Exchange exchange) throws Exception {
                                    Document doc = exchange.getIn().getBody(Document.class);
                                    assertNotNull(doc);

                                    String id = doc.getFirstChild().getAttributes().getNamedItem(""id"").getTextContent();
                                    System.out.println(id);
                                    //String txt = exchange.getContext().getTypeConverter().convertTo(String.class, doc.getFirstChild());
                                }
                            }).to(""mock:result"")
                        .end();
            }
        };
    }

}
{code}

I can always read the 144 articles from the xml file.
{code}

2010-05-06 09:17:44,748 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is starting
2010-05-06 09:17:44,749 [main           ] INFO  DefaultCamelContext            - JMX is disabled. Using DefaultManagementStrategy.
2010-05-06 09:17:45,112 [main           ] INFO  FileEndpoint                   - Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2010-05-06 09:17:45,113 [main           ] INFO  FileEndpoint                   - Using default memory based idempotent repository with cache max size: 1000
2010-05-06 09:17:45,116 [main           ] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:45,117 [main           ] INFO  DefaultCamelContext            - Started 1 routes
2010-05-06 09:17:45,118 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 371 millis
2010-05-06 09:17:45,121 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied
_2744977482
_2744977610
_2744977541
_2744977483
_2744977566
_2744977496
_2744977557
_2744977581
_2744977585
_2744977661
_2744977576
_2744977632
_2744977675
_2744977612
_2744977682
_2744977685
_2744977833
_2744977734
_2744977760
_2744977707
_2744977798
_2744977791
_2744977840
_2744977677
_2744977887
_2744977842
_2744977906
_2744977913
_2744977737
_2744977876
_2744977930
_2744977901
_2744977869
_2744977681
_2744977938
_2744977962
_2744977986
_2744977987
_2744977895
_2744977977
_2744977997
_2744978016
_2744978026
_2744978048
_2744978065
_2744978057
_2744978064
_2744978076
_2744978068
_2744978088
_2744978084
_2744978090
_2744978097
_2744978091
_2744978103
_2744978112
_2744978114
_2744978122
_2744978130
_2744978131
_2744978160
_2744978161
_2744978170
_2744978172
_2744978139
_2744978196
_2744978211
_2744978205
_2744978222
_2744978195
_2744978245
_2744978326
_2744978318
_2744978340
_2744978223
_2744978335
_2744978355
_2744978368
_2744978369
_2744978384
_2744978401
_2744978382
_2744978408
_2744978411
_2744978415
_2744978452
_2744978458
_2744978462
_2744978440
_2744978471
_2744978439
_2744978460
_2744978485
_2744978497
_2744978510
_2744978511
_2744978512
_2744978536
_2744978517
_2744978552
_2744978569
_2744978577
_2744978579
_2744978583
_2744978592
_2744978635
_2744978609
_2744978642
_2744978611
_2744978621
_2744978598
_2744978606
_2744978647
_2744978694
_2744978679
_2744978692
_2744978719
_2744978732
_2744978759
_2744978730
_2744978763
_2744978886
_2744978838
_2744978895
_2744978900
_2744978903
_2744978911
_2744978918
_2744978810
_2744978800
_2744978963
_2744978968
_2744978972
_2744978765
_2744978982
_2744978948
_2744978997
_2744978883
_2744978801
_2744978782
_2744978821
_2744978989
_2744978950
_2744978985
2010-05-06 09:17:47,316 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext:camel-1) is shutting down
2010-05-06 09:17:47,317 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[file://news/?noop=true]
2010-05-06 09:17:47,320 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete.
2010-05-06 09:17:47,321 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 0 seconds
2010-05-06 09:17:47,321 [main           ] INFO  DefaultInflightRepository      - Shutting down with no inflight exchanges.
2010-05-06 09:17:47,322 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) is shutdown in 6 millis
{code}

davsclaus:1273106537:2010-05-06T08:42:17.656+0000:1273106537:2010-05-06T08:42:17.656+0000:Roland is it possible for you to create a anonym and public XML file we can use and add as an unit test to camel-core ?

Then we will have it tested throughly on CI servers which tests it on all kind of OS and JDK levels.
davsclaus:1273107458:2010-05-06T08:57:38.963+0000:1273107458:2010-05-06T08:57:38.963+0000:I have tested it on both Mac OS and Windows
{code}
C:\workspace\camel\camel-core>mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.6.0_18
Java home: C:\jdk1.6.0_18\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: ""windows xp"" version: ""5.1"" arch: ""x86"" Family: ""windows""
{code}

And I cannot reproduce it. I do not have a Windows 7 machine with 64bit JDK.
scrutinizer:1273122438:2010-05-06T13:07:18.170+0000:1273122438:2010-05-06T13:07:18.170+0000:Yes, I am using the stock JDK 6 XML parser.

Turning debugging on reveals the underlying problem. It appears that Camel is calling Document.importNode from multiple threads on the same Document causing an ArrayIndexOutOfBounds error. This occurs in the converter and results in a null value. The stack trace for this error is below:

Thread [Camel Thread 9 - Split] (Suspended (exception ArrayIndexOutOfBoundsException))	
	Vector<E>.elementAt(int) line: 427	
	DeferredDocumentImpl.getNodeValueString(int, boolean) line: 1167	
	DeferredDocumentImpl.getNodeValueString(int) line: 1120	
	DeferredTextImpl.synchronizeData() line: 93 [local variables unavailable]	
	DeferredTextImpl(CharacterDataImpl).getNodeValue() line: 88	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1629	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean, boolean, Hashtable) line: 1742	
	DocumentImpl(CoreDocumentImpl).importNode(Node, boolean) line: 1498	
	XmlConverter.toDOMDocument(Node) line: 572	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	ObjectHelper.invokeMethod(Method, Object, Object...) line: 772	
	InstanceMethodTypeConverter.convertTo(Class<T>, Exchange, Object) line: 69	
	DefaultTypeConverter.doConvertTo(Class, Exchange, Object) line: 165	
	DefaultTypeConverter.convertTo(Class<T>, Exchange, Object) line: 91	
	DefaultMessage(MessageSupport).getBody(Class<T>, Object) line: 74	
	DefaultMessage(MessageSupport).getBody(Class<T>) line: 48	
	MoreoverTest$1$1.process(Exchange) line: 25	
	InstrumentationProcessor.process(Exchange) line: 67	
	TraceInterceptor(DelegateProcessor).processNext(Exchange) line: 53	
	TraceInterceptor(DelegateProcessor).proceed(Exchange) line: 82	
	TraceInterceptor.process(Exchange) line: 97	
	InstrumentationProcessor.process(Exchange) line: 67	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	DefaultChannel.process(Exchange) line: 228	
	DefaultErrorHandler(RedeliveryErrorHandler).processExchange(Exchange) line: 177	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, RedeliveryErrorHandler$RedeliveryData) line: 143	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange) line: 88	
	DefaultErrorHandler.process(Exchange) line: 49	
	Splitter(MulticastProcessor).doProcess(Processor, Processor, Exchange) line: 278	
	MulticastProcessor.access$000(MulticastProcessor, Processor, Processor, Exchange) line: 62	
	MulticastProcessor$1.call() line: 199	
	MulticastProcessor$1.call() line: 193	
	FutureTask$Sync.innerRun() line: 303	
	SubmitOrderedCompletionService$SubmitOrderFutureTask(FutureTask<V>).run() line: 138	
	ThreadPoolExecutor$Worker.runTask(Runnable) line: 886	
	ThreadPoolExecutor$Worker.run() line: 908	
	Thread.run() line: 619	


Inspection of the JDK getNodeValueString shows that this error can only occur if this function is called in parallel from two threads:
                for (int i = chunkCount - 1; i >= 0; i--) {                                                               
                    fBufferStr.append((String)fStrChunks.elementAt(i));
                }
                
                value = fBufferStr.toString();
                fStrChunks.removeAllElements();

One thread is looping over fStrChunks, while the other thread clear it via removeAllElements.

davsclaus:1273529012:2010-05-11T06:03:32.187+0000:1273529012:2010-05-11T06:03:32.187+0000:Thanks Roland. Yeah unfortunately the XML API in the JDK is pretty well terrible.

Let me look into what we can do in Camel
davsclaus:1273530768:2010-05-11T06:32:48.784+0000:1273530768:2010-05-11T06:32:48.784+0000:Got a fix ready which is being tested now
davsclaus:1273533253:2010-05-11T07:14:13.981+0000:1273533253:2010-05-11T07:14:13.981+0000:trunk: 943024.
davsclaus:1273536420:2010-05-11T08:07:00.687+0000:1273536420:2010-05-11T08:07:00.687+0000:1.x: 943033.
davsclaus:1273536453:2010-05-11T08:07:33.323+0000:1273536453:2010-05-11T08:07:33.323+0000:Roland feel free to test with latest code on your system
scrutinizer:1273588974:2010-05-11T22:42:54.677+0000:1273588974:2010-05-11T22:42:54.677+0000:Claus, the synchronize you added didn't fix the problem. Seems that importNode requires the Document to be synchronized (yuck). Changing your fix in XmlConverter.toDOMDocument to:
                Document doc = createDocument();
                // import node must no occur concurrent on the same node
                // so we need to synchronize on it
                synchronized (node.getOwnerDocument()) {
                    doc.appendChild(doc.importNode(node, true));
                }
fixed the problem.

I agree about the JDK XML API. It is horrible. I wrote a converter for DOM4J and always convert the body to a DOM4J Document before any DOM manipulation.

davsclaus:1273618938:2010-05-12T07:02:18.176+0000:1273618938:2010-05-12T07:02:18.176+0000:Hi Roland

Thanks for spotting this again.

trunk: 943394.
1.x: 943395.
davsclaus:1295254242:2011-01-17T16:50:42.937+0000:1295254242:2011-01-17T16:50:42.937+0000:Closing all 1.x tickets"
0,CAMEL-2691,Improvement,Major,"2.0.0, 2.1.0, 2.2.0",2.4.0,"
None
",Closed,Fixed,2.4.0,Moulliard Charles,Claus Ibsen,0,0,2010-05-05 04:46:21+00:00,2011-04-24 10:00:38+00:00,"I've to read a csv file and I want use camel to do this. Camel bindy seems
to me that doesn't know the csv convention that a field separator can be a
character field using double quotes:



""contains,  comma"", ""another field""




See nabble
http://old.nabble.com/Camel-csv-2.2.0%3A-reading-a-single-line-csv-file-ts28443740.html","cmoulliard:1276556456:2010-06-15T07:00:56.417+0000:1276556456:2010-06-15T07:00:56.417+0000:Hi,

I will do the following modification. When the length of the separator will be > than 1, I will assume that we use quote, double quotes separator with a , or ; or anything else in between. In this case, the string.split method will extract all the line tokens and I will remove the first and last character of the line.
cmoulliard:1276565563:2010-06-15T09:32:43.090+0000:1276565563:2010-06-15T09:32:43.090+0000:Revision: 954769

Author: cmoulliard
Date: 11:03:15, Dënschdeg 15 Juni 2010
Message:
CAMEL-2691 : Add support for parsing CSV where separator contains simple or double quotes with a , or ; or anything else as separator
----
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/csv/BindyCsvDataFormat.java
Added : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindyDoubleQuotesCsvUnmarshallTest.java
Added : /camel/trunk/components/camel-bindy/src/test/resources/org/apache/camel/dataformat/bindy/csv/BindyDoubleQuotesCsvUnmarshallTest-context.xml


davsclaus:1303610438:2011-04-24T10:00:38.216+0000:1303610438:2011-04-24T10:00:38.216+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2690,Improvement,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-05-01 07:51:45+00:00,2011-04-24 10:01:45+00:00,"To avoid general purpose fallback converters such as ToString etc. in some situations be promoted to a real type converter which later can cause it to be used, where as it shouldn't.


On the @FallbackTypeConverter you can now use the option canPromote to indicate this. It is default false.","davsclaus:1272674523:2010-05-01T08:42:03.781+0000:1272674523:2010-05-01T08:42:03.781+0000:trunk: 939945.
davsclaus:1303610505:2011-04-24T10:01:45.857+0000:1303610505:2011-04-24T10:01:45.857+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2689,Wish,Major,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Martin Krasser,Adam,0,0,2010-04-30 19:25:49+00:00,2011-04-24 10:01:05+00:00,Could you upgrade camel-hl7 dependency to hapi 1.0 (comes with improved PipeParser and many bug fixes) please.,"davsclaus:1272667925:2010-05-01T06:52:05.234+0000:1272667925:2010-05-01T06:52:05.234+0000:Martin do you mind taking a look at this as HL7 is in your area of expertise :)
mrt1nz:1272668256:2010-05-01T06:57:36.616+0000:1272668256:2010-05-01T06:57:36.616+0000:ok, I'll do that.
mrt1nz:1272676336:2010-05-01T09:12:16.082+0000:1272676336:2010-05-01T09:12:16.082+0000:Done with revision 939950. 

szczepanadam:1273062672:2010-05-05T20:31:12.790+0000:1273062672:2010-05-05T20:31:12.790+0000:great, thanks very much.
davsclaus:1303610465:2011-04-24T10:01:05.239+0000:1303610465:2011-04-24T10:01:05.239+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2688,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Cott Lang,0,0,2010-04-30 18:53:04+00:00,2011-04-24 10:00:51+00:00,I needed SSL support in camel-smpp. I figured I'd submit my patch.,"cott@internetstaff.com:1272624812:2010-04-30T18:53:32.181+0000:1272624812:2010-04-30T18:53:32.181+0000:patch is against trunk

muellerc:1272633530:2010-04-30T21:18:50.402+0000:1272633530:2010-04-30T21:18:50.402+0000:Looks good for me. [+1] for the patch.
Could you test the patch against a real smsc or smsc mock server?

Thanks,
Christian

cott@internetstaff.com:1272634768:2010-04-30T21:39:28.658+0000:1272634768:2010-04-30T21:39:28.658+0000:I'm using it against a real smsc, I don't know of one I could run junit tests against if that's what you're asking. :)

njiang:1272996307:2010-05-05T02:05:07.742+0000:1272996358:2010-05-05T02:05:58.021+0000:Applied the patch with thanks to Cott, I also fix a compile error with JDK 1.5 and  some CS errors.

@ Cott,
Can you update the wiki page for camel-smpp for it ?
njiang:1273187507:2010-05-07T07:11:47.205+0000:1273187507:2010-05-07T07:11:47.205+0000:updated the smpp wiki page for this feature.
cott@internetstaff.com:1273206760:2010-05-07T12:32:40.534+0000:1273206760:2010-05-07T12:32:40.534+0000:Thanks, Willem. Sorry, I was trying to get to the wiki but it's been a busy week.

davsclaus:1303610451:2011-04-24T10:00:51.592+0000:1303610451:2011-04-24T10:00:51.592+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2687,Bug,Major,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Chuck Murcko,0,0,2010-04-30 15:54:31+00:00,2011-04-24 10:00:44+00:00,"I have a simple route here:



public void configure() {
    from(""timer://foo?period=5000"")
    .to(""C:/apps/putty/PLINK.EXE?args=cadams@labmachine  -i C:/apps/putty/priv/chuck.ppk \""ls /tmp/foo\"""")
    .to(""log:experiments.cameltest"");
}


This just runs a dummy command on a remote machine every five seconds.  Normally it has no problems as long as /tmp/foo has contents.  For example, I create 'bar' and 'baz' files, and the log reflects this:



[                          main] DefaultCamelContext            INFO  Apache Camel 2.3-SNAPSHOT (CamelContext: camelContext) started in 734 millis
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]
[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@spamlab-bizintel-corpus01.eng.symantec.com, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:bar
baz
blah
]


And so on....  But if I delete both files, this is what happens:



[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] ExecResultConverter            WARN  Received null stdout of the ExecResult for conversion!
[                           foo] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.exec.ExecResultConverter.convertToString(org.apache.camel.component.exec.ExecResult,org.apache.camel.Exchange) throws java.io.FileNotFoundException to: org.apache.camel.impl.converter.ToStringTypeConverter@1e3d24a
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@d767dc]


And from that point on, even if I add files to the directory again, I get nothing back, just the following log section over and over.  It seems that the behavior of suddenly switching the converter to ToStringTypeConverter had the effect of suppressing all output for good.  



[                           foo] ExecProducer                   INFO  Executing ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null]
[                           foo] ExecProducer                   INFO  The command ExecCommand [args=[cadams@labmachine, -i, C:/apps/putty/priv/chuck.ppk, ls /tmp/foo], executable=C:/apps/putty/PLINK.EXE, timeout=9223372036854775807, outFile=null, workingDir=null] had exit value 0
[                           foo] cameltest                      INFO  Exchange[ExchangePattern:InOnly, BodyType:org.apache.camel.component.exec.ExecResult, Body:org.apache.camel.component.exec.ExecResult@3aacb4]


This behavior is certainly unexpected and undesireable.  I've been working around this by making my remote script always produce some dummy output when they otherwise have nothing to return, but any workaround I could use on the Camel side pending a more permanent fix would be very much appreciated.","chuck:1272614219:2010-04-30T15:56:59.310+0000:1272614219:2010-04-30T15:56:59.310+0000:I see JIRA ate my source code.   Here's the relevant body of the .configure() method

{quote}
		from(""timer://foo?period=5000"")
		.to(""exec:C:/apps/putty/PLINK.EXE?args=cadams@labmachine -i C:/apps/putty/priv/chuck.ppk ""\""ls /tmp/foo\"""")
		.to(""log:bizint.cameltest"");
{quote}



chuck:1272614674:2010-04-30T16:04:34.817+0000:1272614674:2010-04-30T16:04:34.817+0000:It's always the way with me that I only see my own error after reporting it as a bug... I can see now that the converter returned an ExecResult as the body instead of converting it to a string, and that I should therefore be expecting an ExecResult instead of a string.  

Still, the fact that it actually changes the converter for further messages doesn't strike me as entirely right: I would simply have expected empty output to yield an empty string instead of a null that magically changes the behavior of the component going forward.


davsclaus:1272670944:2010-05-01T07:42:24.831+0000:1272670944:2010-05-01T07:42:24.831+0000:Yeah the problem is that type camel-exec type converter returns a null which eventually a ToString fallback type converter can convert as value.

I am improving camel-core to let only certain fallback type converters be able to kick in and be promoted.
This should fix your issue.
davsclaus:1272674649:2010-05-01T08:44:09.932+0000:1272674649:2010-05-01T08:44:09.932+0000:Chuck can you test it again on your system. I have commited a fix to trunk.
chuck:1273050969:2010-05-05T17:16:09.000+0000:1273050969:2010-05-05T17:16:09.000+0000:That appears to have done the trick -- thanks for the quick turnaround.  I'm finding the exec component to be one of the handiest pieces of camel.  I'm able to replace shell scripts with Camel routes and add honest-to-goodness logging and testing to them now, making Camel useful for programming in the small, not just ""enterprisey"" integrations.  

davsclaus:1273130956:2010-05-06T15:29:16.794+0000:1273130956:2010-05-06T15:29:16.794+0000:Thanks Chuck for reporting and testing.

Yeah the goal of Camel is being very flexible and useable in any kind of business. 
And the lovely is that the community is kicking ass and adding components to Camel.
davsclaus:1303610444:2011-04-24T10:00:44.845+0000:1303610444:2011-04-24T10:00:44.845+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2686,Improvement,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-30 03:46:01+00:00,2011-04-24 10:01:25+00:00,No Desc,davsclaus:1303610485:2011-04-24T10:01:25.890+0000:1303610485:2011-04-24T10:01:25.890+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2685,Bug,Major,None,,"
None
",Closed,Won't Fix,None,Unassigned,Willem Jiang,0,0,2010-04-30 01:12:36+00:00,2011-04-24 09:57:17+00:00,"By checking the https://repository.apache.org/content/groups/snapshots-group/org/apache/camel/apache-camel/2.3-SNAPSHOT/
You will not find the apache-camel 2.3-SNAPSHOT kits there and you can found there are some update in the 2.1-SNAPSHOT directory.


So I guess there are something wrong with the publishing script, which may need to update the version number to 2.3-SNAPSHOT.","davsclaus:1280031621:2010-07-25T12:20:21.129+0000:1280031621:2010-07-25T12:20:21.129+0000:Only the individual .jars is published as SNAPSHOT

I think having it build a zip/tar for each snapshot takes too much time.
The assembly of camel takes 40+ min.
davsclaus:1303610237:2011-04-24T09:57:17.120+0000:1303610237:2011-04-24T09:57:17.120+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2684,Bug,Major,"2.1.0, 2.2.0",2.3.0,"
None
",Closed,Not A Problem,2.3.0,Claus Ibsen,Willem Jiang,0,0,2010-04-30 00:59:56+00:00,2011-04-24 10:01:12+00:00,"You will get the exception with the below route definition according to Mail wiki doc.



from(""imaps://localhost?username=testuser&password=somepw"" +
                         ""&deleteProcessedMessages=false"" +
                         ""&processOnlyUnseenMessages=true&consumer.delay=20000"").to(""mock:test"");




The stack trace of the exception



org.apache.camel.FailedToCreateRouteException: Failed to create route route4: Route[[From[imaps://localhost?username=testuser&password=som... because of Failed to resolve endpoint: imaps://localhost?consumer.delay=20000&deleteProcessedMessages=false&password=somepw&processOnlyUnseenMessages=true&username=testuser due to: Failed to resolve endpoint: imaps://localhost?consumer.delay=20000&deleteProcessedMessages=false&password=somepw&processOnlyUnseenMessages=true&username=testuser due to: There are 2 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{deleteProcessedMessages=false, processOnlyUnseenMessages=true}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:143)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:637)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1299)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1197)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1127)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1002)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:173)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: imaps://localhost?consumer.delay=20000&deleteProcessedMessages=false&password=somepw&processOnlyUnseenMessages=true&username=testuser due to: Failed to resolve endpoint: imaps://localhost?consumer.delay=20000&deleteProcessedMessages=false&password=somepw&processOnlyUnseenMessages=true&username=testuser due to: There are 2 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{deleteProcessedMessages=false, processOnlyUnseenMessages=true}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:465)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:153)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:698)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:138)
	... 31 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: imaps://localhost?consumer.delay=20000&deleteProcessedMessages=false&password=somepw&processOnlyUnseenMessages=true&username=testuser due to: There are 2 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{deleteProcessedMessages=false, processOnlyUnseenMessages=true}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:126)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)
	... 39 more","njiang:1272560487:2010-04-30T01:01:27.321+0000:1272560487:2010-04-30T01:01:27.321+0000:Claus,
Can you take a look at this issue ? 
Maybe mail document is out of date.
davsclaus:1272588320:2010-04-30T08:45:20.164+0000:1272588320:2010-04-30T08:45:20.164+0000:Those options is named
- delete
- unseen

In Camel 2.x onwards
davsclaus:1303610472:2011-04-24T10:01:12.494+0000:1303610472:2011-04-24T10:01:12.494+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2683,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Cott Lang,0,0,2010-04-29 21:47:52+00:00,2011-04-24 10:01:42+00:00,"In testing this component, I ran into a problem where the calculated SCHEDULE_DELIVERY_TIME in SmppBinding ends up off for my time zone, so all my SMS messages are delivered an hour later.  I'm not quite sure why I'm seeing this problem, it almost appears that TimeZone is not properly adjusting the raw offset for DST.


However, in reading the SMS v3.4 spec, there's no reason to attempt to define a default delivery time of ""now"", because transmitting null indicates the message is to be delivered immediately.


Therefore, it seems like SmppBinding should be updated not to attempt to set a default date of ""now"".  This solved my problem, and avoids any potential date miscalculations for the overwhelming majority of cases where people want the message delivered immediately.


P.S. There is no camel-smpp Component defined in Jira.","njiang:1272560729:2010-04-30T01:05:29.406+0000:1272560729:2010-04-30T01:05:29.406+0000:Applied patch with thanks to Cott.
davsclaus:1303610502:2011-04-24T10:01:42.954+0000:1303610502:2011-04-24T10:01:42.954+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2682,Improvement,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-29 16:05:25+00:00,2011-04-24 10:00:53+00:00,This allows end users to continue routing the original message. Instead of now the just get the last splitted message which is confusing.,"davsclaus:1272590653:2010-04-30T09:24:13.409+0000:1272590653:2010-04-30T09:24:13.409+0000:trunk: 939597.
davsclaus:1303610453:2011-04-24T10:00:53.908+0000:1303610453:2011-04-24T10:00:53.908+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2681,Improvement,Minor,None,,"
None
",Closed,Duplicate,None,Unassigned,Sami Mikhail,0,1,2010-04-28 16:47:40+00:00,2010-04-29 11:55:09+00:00,"I will upload results from W3c Validator shortly, or paste them in an edit if I can't upload files.","thesamim:1272444585:2010-04-28T16:49:45.080+0000:1272444709:2010-04-28T16:51:49.842+0000:indexValidator.txt is http://validator.w3.org/checklink results for index page, with redundant comments deleted to save upload space.
javadocValidator.txt, same for Javadoc page.
davsclaus:1272513309:2010-04-29T11:55:09.258+0000:1272513309:2010-04-29T11:55:09.258+0000:This is a duplicate and already a known issue which Hadrian work on"
0,CAMEL-2680,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-28 02:50:04+00:00,2011-04-24 10:00:45+00:00,"Current we just specify the Lucene version with Version.LUCENE_CURRENT.
Here is the comments of this setting: "" if you use this setting, and then upgrade to a newer release of Lucene, sizable changes may happen.""
So we need to provide the Version setting for the camel-lucene endpoint to avoid this kind issue.",davsclaus:1303610445:2011-04-24T10:00:45.409+0000:1303610445:2011-04-24T10:00:45.409+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2679,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-28 02:17:52+00:00,2011-04-24 10:01:37+00:00,We need to keep the message body when parser the POST request of form url encoded data.,davsclaus:1303610497:2011-04-24T10:01:37.552+0000:1303610497:2011-04-24T10:01:37.552+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2678,Bug,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Farhad Dehghani,0,0,2010-04-27 09:36:44+00:00,2011-04-24 10:01:00+00:00,"Removing an entry (file name) programatically from a file idempotent repository has only effect on the cache and does not get persisted on the file repository. 
There are some situations in which one may need to rerun a file through a workflow and it makes neccessary to remove the file from the idempotent repository. A specific problem arises when upon a server restart, the file is not picked up by the workflow because the remove was not persisted/spooled on the disk.","davsclaus:1272416917:2010-04-28T09:08:37.627+0000:1272416917:2010-04-28T09:08:37.627+0000:trunk: 938828.
davsclaus:1303610460:2011-04-24T10:01:00.015+0000:1303610460:2011-04-24T10:01:00.015+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2677,New Feature,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-27 07:18:47+00:00,2011-04-24 10:01:10+00:00,"When you have many routes, it would be nice to use other Spring XML files to define routes and have a <camelContext/> being able to refer to those routes.



<camelContext>
   <route ref=""myCommonRoute""/>
   <route ref=""myCoolRoute""/>
</camelContext>




Maybe the <route ref/> cannot easily be used as its a real route tag. So we may have to use another tag name such as routeRef or something.","davsclaus:1272323942:2010-04-27T07:19:02.375+0000:1272323942:2010-04-27T07:19:02.375+0000:There should be some other tickets which is related to this.
davsclaus:1272332060:2010-04-27T09:34:20.024+0000:1272332060:2010-04-27T09:34:20.024+0000:trunk: 938376.

RouteDefinition should be stateless, eg not tied to a CamelContext. This allows us to have reusable route defs used by multiple CamelContexts.
davsclaus:1272349510:2010-04-27T14:25:10.923+0000:1272349510:2010-04-27T14:25:10.923+0000:trunk: 938471.
davsclaus:1272350415:2010-04-27T14:40:15.351+0000:1272350415:2010-04-27T14:40:15.351+0000:Documentation at: http://cwiki.apache.org/confluence/display/CAMEL/How+do+I+import+routes+from+other+XML+files
davsclaus:1303610470:2011-04-24T10:01:10.357+0000:1303610470:2011-04-24T10:01:10.357+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2676,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-26 13:59:24+00:00,2011-04-24 10:00:47+00:00,"If the Http content-type header has the charset, we should put this information into Exchange property. In this way, the camel converter can know what kind of character encoding it should use.",davsclaus:1303610447:2011-04-24T10:00:47.445+0000:1303610447:2011-04-24T10:00:47.445+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2675,Bug,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-26 09:34:52+00:00,2011-04-24 10:01:17+00:00,"Here is the stack trace 



[//target/routeOutput?noop=true] GenericFileOnCompletion        ERROR Caused by: [org.apache.camel.CamelExecutionException - Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]]
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[GenericFileMessage with file: GenericFile[message2.xml]]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1107)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:625)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:264)
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:131)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:167)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:127)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:97)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:269)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:137)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:103)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:146)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:170)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
	at java.lang.Thread.run(Thread.java:613)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: GenericFile[message2.xml] of type: org.apache.camel.component.file.GenericFile on: GenericFileMessage with file: GenericFile[message2.xml]. Caused by: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]. Exchange[GenericFileMessage with file: GenericFile[message2.xml]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:103)
	at org.apache.camel.builder.ExpressionBuilder$25.evaluate(ExpressionBuilder.java:623)
	... 31 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.component.file.GenericFile to the required type: java.lang.String with value GenericFile[message2.xml]
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:124)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:101)
	... 32 more",davsclaus:1303610477:2011-04-24T10:01:17.561+0000:1303610477:2011-04-24T10:01:17.561+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2674,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Moulliard Charles,0,0,2010-04-26 08:46:38+00:00,2015-07-11 22:33:44+00:00,"Add Spring JMX / @ManagedAttribute annotation to loadbalancer processor in order to be able though jmx console to add /
remove endpoints from existing List. This will allow infra people to reconfigure dynamically list of HTTP / Jetty / Mina servers available for loadbalancing.","cmoulliard:1272246211:2010-04-26T09:43:31.887+0000:1272246211:2010-04-26T09:43:31.887+0000:Is LoadBalancerSupport the class where MBEAN support will be added or another class of Loadbalancer processor ?
davsclaus:1272251356:2010-04-26T11:09:16.093+0000:1272251356:2010-04-26T11:09:16.093+0000:See how ManagedThrottler is done.
cmoulliard:1272252237:2010-04-26T11:23:57.735+0000:1272252237:2010-04-26T11:23:57.735+0000:Hi Claus,

It means that I have to create a ManagedLoadbalancer class (based on the example ManagedThrottler) and adapt next the class DefaultManagementLifecycleStrategy ?
davsclaus:1272252656:2010-04-26T11:30:56.949+0000:1272252656:2010-04-26T11:30:56.949+0000:Yes and see also how to test it in ManagedThrottlerTest
cmoulliard:1272256439:2010-04-26T12:33:59.358+0000:1272256439:2010-04-26T12:33:59.358+0000:The two methods proposed by LoadBalancerSupport which interest me are addProcessor / removeProcessor. As the idea is to provide through jmx attribute, the endpoint (ex : ""mina:tcp://localhost:9999?sync=true&amp;allowDefaultCodec=true""), How can I create a Processor with the endpoint provided ?
davsclaus:1272259148:2010-04-26T13:19:08.298+0000:1272259148:2010-04-26T13:19:08.298+0000:You need to use a JmxOperation on the mbean for this

{code}
public void addEndpointUri(String uri) {
  // lookup endpoint using CamelContext
 // use createProducer method on endpoint to create the Processor needed
// add the processor on the Load Balancer
{code}

And when you need to remove you may have to provide a number / index for the endpoint to be removed

And you may need an operation to list the current endpoint uris and their index number so you can see which endpoints there currently are
and which number (index) you need to use if you want to remove one of them
cmoulliard:1272329725:2010-04-27T08:55:25.002+0000:1272329725:2010-04-27T08:55:25.002+0000:I have been able to implement setEndpointUri(String uri) and test it through JMX (junit test).

Now I try to get from the processors list, the endpoints defined as destination for the loadbalancer. The following code does not work as it seems that LoadBalancer is not an instanceof SendProcessor

{code}
    @ManagedAttribute(description = ""List of endpoints uri"")
    public List<Endpoint> getEndpointUriList() {
    	
    	List<Processor> processors = loadbalancer.getProcessors();
    	List<Endpoint> endpoints = new ArrayList<Endpoint>();
    	
    	for(Processor p : processors) {
    		if (p instanceof SendProcessor) {
    			SendProcessor sp = (SendProcessor)p;
    			
    			if (sp.getDestination()!= null) {
    				endpoints.add(sp.getDestination());
    			}
    		}
    	}
    	
    	return endpoints;
    }
{code}

Any idea to get list of endpoints is welcome ?
cmoulliard:1272333922:2010-04-27T10:05:22.013+0000:1272333922:2010-04-27T10:05:22.013+0000:In debug mode, I have discovered that I get a DefaultChannel processor instead of SendProcessor for the list of Loadbalancer Processors.

Is it possible to find what is the destination endpoint from the DefaultChannel processor ?


davsclaus:1272343891:2010-04-27T12:51:31.152+0000:1272343891:2010-04-27T12:51:31.152+0000:The real processor is inside the Channel.

Just add a patch to this ticket and I can take a look tomorrow when I got some time
davsclaus:1272419977:2010-04-28T09:59:37.480+0000:1272419977:2010-04-28T09:59:37.480+0000:This requires to have the internal Channel concept improved in Camel to allow it to react more dynamic. So it can easily adjust to having a new SendDefinition added at runtime.

Also when adding the endpoint should be enlisted in JMX so we can gather JMX stats. So its actually a bit more complicated than at first sight.

We could omit all this and just add the processor but then
- tracing
- interceptors
- error handling
will not kick in.


cmoulliard:1272431704:2010-04-28T13:15:04.103+0000:1272431704:2010-04-28T13:15:04.103+0000:Ok.  This will be part of a more important evolution of Camel (3.x) !"
0,CAMEL-2673,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-26 03:10:51+00:00,2011-04-24 10:01:04+00:00,"Here is the mail thread which discusses about it.
http://old.nabble.com/jetty%3Ahttp-component-%22mangles%22-x-www-form-urlencoded-POST-in-message%3A-ts28348176.html",davsclaus:1303610464:2011-04-24T10:01:04.810+0000:1303610464:2011-04-24T10:01:04.810+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2672,Sub-task,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-23 14:38:19+00:00,2011-04-24 10:00:38+00:00,"This new example should be listed under
http://camel.apache.org/examples.html


And there should be some details about it and how to run it.","davsclaus:1273620223:2010-05-12T07:23:43.677+0000:1273620223:2010-05-12T07:23:43.677+0000:I created the wiki page with the new example
davsclaus:1303610438:2011-04-24T10:00:38.059+0000:1303610438:2011-04-24T10:00:38.059+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2671,New Feature,Major,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,Claus Ibsen,0,3,2010-04-23 09:43:03+00:00,2011-04-24 09:57:32+00:00,"A new component camel-ode should be developed which integrates with Apache ODE.


This should allow us to have Camel deploy bpel flows natively in Camel by leveraging Apache ODE as the bpel engine.
Then you should be able to route XML messages to bpel.


It would take some work and help from the community to have it all implemented and working.


A prototype will be committed so we have an offset to get started with.","davsclaus:1271987046:2010-04-23T09:44:06.770+0000:1271987046:2010-04-23T09:44:06.770+0000:Prototype in trunk: 937215.
muellerc:1272030359:2010-04-23T21:45:59.623+0000:1272030359:2010-04-23T21:45:59.623+0000:Clause, I opened already the [CAMEL-2485|https://issues.apache.org/activemq/browse/CAMEL-2485] for this functionality. :-)
Could you please close [CAMEL-2485|https://issues.apache.org/activemq/browse/CAMEL-2485] as duplicated.
davsclaus:1284860142:2010-09-19T09:35:42.366+0000:1284860142:2010-09-19T09:35:42.366+0000:Apache ServiceMix has ODE integration and it's a better fit there in the JBI/XML world.

The prototype source code has moved to the sandbox 
https://svn.apache.org/repos/asf/camel/sandbox/components/camel-ode/
davsclaus:1303610252:2011-04-24T09:57:32.646+0000:1303610252:2011-04-24T09:57:32.646+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2670,New Feature,Major,None,None,"
None
",Closed,Fixed,2.3.0,Unassigned,Moulliard Charles,0,0,2010-04-23 08:17:35+00:00,2010-04-26 07:54:46+00:00,"Loadbalancing with MINA Example
===============================


This example show how you can easily use the camel-mina component to design a solution allowing to distribute message 
workload on several servers. Those servers are simple TCP/IP servers created by the Apache MINA framework and running in
separate Java Virtual Machine. The loadbalancer pattern of Camel which is used top of them allows to send in a Round Robin model
mode the messages created from a camel-bean component respectively to each server running on localhost:9999 and localhost:9998.
MINA has been configured to send over the wire objects serialized and this is what is showed also in this example.
The advantage of this apporach is that you don't need to use CORBA or Java RMI for the communication between the different jvm.
The example has been configured to use InOut EIP pattern.


The demo starts when every one minute, a Report object is created from the camel loadbalancer server. This object is send by the 
camel loadbalancer to a MINA server and object is serialized. One of the two MINA servers (localhost:9999 and localhost:9998) receives
the object and enrich it by setting the field reply of the Report object. The reply is send back by the MINA server to the camel loadbalancer 
who will display in its log  the content of the Report object.","cmoulliard:1271982009:2010-04-23T08:20:09.274+0000:1271982009:2010-04-23T08:20:09.274+0000:code committed
njiang:1272000848:2010-04-23T13:34:08.949+0000:1272000848:2010-04-23T13:34:08.949+0000:@ Charles
I just checked out the example, I think you can put all the camel routes configuration files into a single module and use Profile to start the services one by one.
davsclaus:1272004618:2010-04-23T14:36:58.090+0000:1272004618:2010-04-23T14:36:58.090+0000:Yeah that was my thought as well.

For example camel-spring-jms does this afair.
I think that it would be easier as there is only one component.
cmoulliard:1272005056:2010-04-23T14:44:16.353+0000:1272005056:2010-04-23T14:44:16.353+0000:OK. I will merge the projects to only have one.
cmoulliard:1272239686:2010-04-26T07:54:46.926+0000:1272239686:2010-04-26T07:54:46.926+0000:Merge three maven projects into one. Add profiles to run the test"
0,CAMEL-2669,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-22 10:10:01+00:00,2011-04-24 10:00:55+00:00,"See nabble
http://old.nabble.com/XPath-Splitter-Problem-ts28325959.html


Then its easier for Camel end users as they wont have as many problems with the bad XPath result types for NODESET and whatnot.","davsclaus:1271994281:2010-04-23T11:44:41.015+0000:1271994281:2010-04-23T11:44:41.015+0000:trunk: 937260.
gertvanthienen:1273532128:2010-05-11T06:55:28.986+0000:1273532128:2010-05-11T06:55:28.986+0000:When I look at the XPathToFileTest, I would have expected it to behave differently, outputting the XML element selected by the xpath expression instead of only the text node values.  

{noformat}
Index: src/test/java/org/apache/camel/component/file/XPathToFileTest.java
===================================================================
--- src/test/java/org/apache/camel/component/file/XPathToFileTest.java	(revision 942839)
+++ src/test/java/org/apache/camel/component/file/XPathToFileTest.java	(working copy)
@@ -51,11 +51,11 @@
 
         File first = new File(""target/xpath/xpath-0.xml"").getAbsoluteFile();
         assertTrue(""File xpath-0.xml should exists"", first.exists());
-        assertEquals(""Claus"", context.getTypeConverter().convertTo(String.class, first));
+        assertEquals(""<person>Claus</person>"", context.getTypeConverter().convertTo(String.class, first));
 
         File second = new File(""target/xpath/xpath-1.xml"").getAbsoluteFile();
         assertTrue(""File xpath-1.xml should exists"", second.exists());
-        assertEquals(""Jonathan"", context.getTypeConverter().convertTo(String.class, second));
+        assertEquals(""<person>Jonathan</person>"", context.getTypeConverter().convertTo(String.class, second));
     }
{noformat}

If you do a {{convertBodyTo(String.class)}} after the splitter but before sending the contents to a file, this is what happens, but the implicit conversion to InputStream that is being used in the file: endpoint seems to drop the {{<element/>}}s
davsclaus:1273540815:2010-05-11T09:20:15.757+0000:1273540815:2010-05-11T09:20:15.757+0000:The files have been split to only contain the content

{code}
davsclaus:~/workspace/camel/camel-core/target/xpath$ ls
xpath-0.xml     xpath-1.xml
davsclaus:~/workspace/camel/camel-core/target/xpath$ cat xpath-0.xml 
Clausdavsclaus:~/workspace/camel/camel-core/target/xpath$ cat xpath-1.xml 
Jonathandavsclaus:~/workspace/camel/camel-core/target/xpath$ 
{code}
davsclaus:1273557817:2010-05-11T14:03:37.931+0000:1273557817:2010-05-11T14:03:37.931+0000:Lets improve the XML converters in Camel. NodeList -> String is tricky but it should work as Gert suggest by including the tag names etc.

You can always use {{text()}} in the XPath expression if you only want the text content
davsclaus:1273566050:2010-05-11T16:20:50.265+0000:1273566050:2010-05-11T16:20:50.265+0000:trunk: 943161.

Now the XML tags get outputted in the String as well.
davsclaus:1303610455:2011-04-24T10:00:55.397+0000:1303610455:2011-04-24T10:00:55.397+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2668,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-22 09:48:05+00:00,2011-04-24 10:01:38+00:00,"These components need to be add into apache-camel kit. 
camel-exec
camel-netty
camel-spring-security",davsclaus:1303610498:2011-04-24T10:01:38.636+0000:1303610498:2011-04-24T10:01:38.636+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2667,Improvement,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-22 08:42:01+00:00,2011-04-24 10:00:38+00:00,"Allow using policy / <policy> anywhere in the route graph to wrap either



the entire route
a single processor
a number of processors



Then let <transacted/> be the special abstract that supports convention over configuration for easy TX setup.
Then policy is the general purpose for security, or whatever you may want to use it as.","davsclaus:1271918140:2010-04-22T14:35:40.480+0000:1271918140:2010-04-22T14:35:40.480+0000:trunk: 936869

You can now define <policy> freely in the routes. Remember to wrap around child nodes if you eg want to wrap the entire route.
davsclaus:1303610438:2011-04-24T10:00:38.347+0000:1303610438:2011-04-24T10:00:38.347+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2666,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-22 07:51:01+00:00,2011-04-24 10:01:26+00:00,"For example



policy
threads
transacted
delay
And others which create output processors","davsclaus:1271917957:2010-04-22T14:32:37.948+0000:1271917957:2010-04-22T14:32:37.948+0000:trunk: 936869.

There is now a {{createChildProcessor}} method on {{ProcessorDefinition}} which you should prefer to use in your xxxDefinition models.
davsclaus:1303610486:2011-04-24T10:01:26.021+0000:1303610486:2011-04-24T10:01:26.021+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2665,Bug,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-22 06:50:48+00:00,2011-04-24 10:00:52+00:00,"If you use policy to wrap a Processor, then the wrapped Processor is not automatic started/stopped as lifecycle cannot see this wrapped processor.


And to prevent end users from remembering to do this themselves we should let a WrapProcessor handle this for us.","davsclaus:1271917824:2010-04-22T14:30:24.919+0000:1271917824:2010-04-22T14:30:24.919+0000:trunk: 936869.
davsclaus:1303610452:2011-04-24T10:00:52.259+0000:1303610452:2011-04-24T10:00:52.259+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2664,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-22 06:02:38+00:00,2011-04-24 10:01:44+00:00,"This makes it easier to use as



simple(""${body"")
simple(""body"")




Is the same. It returns the body instance as is.","davsclaus:1271890116:2010-04-22T06:48:36.105+0000:1271890116:2010-04-22T06:48:36.105+0000:trunk: 936625
davsclaus:1303610504:2011-04-24T10:01:44.381+0000:1303610504:2011-04-24T10:01:44.381+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2663,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Christoph Dittberner,0,0,2010-04-21 10:21:23+00:00,2011-04-24 10:01:04+00:00,"scenario:


I have an eclipse rcp based app and use the apache camel libs within my plugin, i.e. the libs are one classpath of the plugin. I use a route using camel-mail to process some mailqueues.


CamelContext context = new DefaultCamelContext();
context.addRoutes(new RouteBuilder() {
    public void configure()	{
        from(""imaps://mailserver?username=user&password=password&consumer.delay=5000&delete=false&unseen=true"")
            .to(""log: new mail"");
   }});
   context.start();


When I start my app all seems to be ok. But in my log I get a lot of error messages regarding the loading of converters. If I ask my context to find a converter f.i. to converty to byte[] form inputstream (as I did see in another mail example reagding attachments) I get null because the context can't find one.


I debugged  deeper into the camel code and it seems that the DefaultPackageScanClassResolver can't load from urls starting with bundleresource like ""bundleresource://109.fwk32380043:4/org/apache/camel/component/file/""


using camel-osgi didn't worked because all camel libs are loaded as inner libs of my single plugin and not as plugins. (loading as plugins didn't worked but thats another problem/bug)


LOG Messages:


2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.converter.DefaultTypeConverter loadTypeConverters - Loading type converters ...
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver findAnnotated - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter, org.apache.camel.component.mail, org.apache.camel.component.spring.integration.converter]
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getClassLoaders - The thread context class loader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff  is used to load the class
2010-04-21 11:15:34,829 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Searching for: annotated with @Converter in package: org/apache/camel/component/file using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder
2010-04-21 11:15:39,954 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver getResources - Getting resource URL for package: org/apache/camel/component/file with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@1a76eff
2010-04-21 11:16:44,970 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - URL from classloader: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
2010-04-21 11:17:01,642 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Decoded urlPath: /org/apache/camel/component/file/ with protocol: bundleresource
2010-04-21 11:23:59,814 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - isLocalFileSystem: false
2010-04-21 11:24:00,470 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Scanning for classes in [/org/apache/camel/component/file/] matching criteria: annotated with @Converter
2010-04-21 11:24:16,079 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Loading from jar using http/https: /org/apache/camel/component/file/
2010-04-21 11:24:26,626 DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver find - Cannot read entries in url: bundleresource://109.fwk32380043:4/org/apache/camel/component/file/
java.net.MalformedURLException: no protocol: /org/apache/camel/component/file/
	at java.net.URL.<init>(URL.java:567)
	at java.net.URL.<init>(URL.java:464)
	at java.net.URL.<init>(URL.java:413)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:264)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:63)
	at org.apache.camel.impl.converter.DefaultTypeConverter.loadTypeConverters(DefaultTypeConverter.java:361)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:384)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:53)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1174)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:644)
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:691)
	at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:68)","cdittberner:1271897363:2010-04-22T08:49:23.048+0000:1271897363:2010-04-22T08:49:23.048+0000:Finally I got it working :)

URLs starting with protocol ""bundleresource"" have to be converted into a real url using org.eclipse.core.runtime.FileLocator.resolve(url). 

So I made my own EclispePackageScanClassResolver adding the converter-call in find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes).

see attached file
davsclaus:1271897563:2010-04-22T08:52:43.852+0000:1271897563:2010-04-22T08:52:43.852+0000:Hi Christoph

That is great

See about pluggable class resolvers here
http://camel.apache.org/pluggable-class-resolvers.html

What we may can do is to add a new camel-eclipsercp component which provides this class resolver.
What .jar / jars do you need to use?

And I assume those jars has an open source license, such as Apache or Eclipse based?
If so we can have it included out of the box at Apache. If not (as in JBoss case) is has to be hosted elsewhere such as camel-extra
http://code.google.com/p/camel-extra/

Or at github etc.
cdittberner:1271897594:2010-04-22T08:53:14.597+0000:1271897594:2010-04-22T08:53:14.597+0000:Attach this on the DefaultcamelContext like

DefaultCamelContext camelContext = new DefaultCamelContext();
camelContext.setPackageScanClassResolver(new EclipsePackageScanClassResolver());

and apache-camel can be used within an eclipse-plugin.
davsclaus:1271898199:2010-04-22T09:03:19.728+0000:1271898199:2010-04-22T09:03:19.728+0000:Its based on EPL license, which is in B category
http://www.apache.org/legal/3party.html

However the source code where its being used will be minimal and with really very very low change some end user will derive this work without knowing the license implications by Eclipse.

And the jar is 
http://repo1.maven.org/maven2/org/eclipse/equinox/common/3.3.0-v20070426/common-3.3.0-v20070426.pom

Which is in central maven repo, so it may be doable.
cdittberner:1271898265:2010-04-22T09:04:25.119+0000:1271898358:2010-04-22T09:05:58.684+0000:A camel-eclipse package sounds very well.

My plugin depends on 
 org.eclipse.osgi,
 org.eclipse.equinox.app,

To use the FileLocator.convert-method I had to depend on  org.eclipse.equinox.common,

These are the libs I included in my plugin:
camel-core-2.2.0.jar
camel-spring-2.2.0.jar
camel-spring-integration-2.2.0.jar
commons-management-1.0.jar
camel-mail-2.2.0.jar
mail.jar
spring.jar

spring.jar is the complete spring-framework-2.5.6 package.


davsclaus:1271898537:2010-04-22T09:08:57.193+0000:1271898537:2010-04-22T09:08:57.193+0000:We should just use the common jar. And have it defined as *provided* in the pom.xml.

As its expected the runtime have all the needed jars already. So all you add to is this camel-eclipse jar
davsclaus:1271898678:2010-04-22T09:11:18.999+0000:1271898678:2010-04-22T09:11:18.999+0000:And I think we may need to just add a little strategy method on the DefaultPackageScanClassResolver so you can reuse as much code from it.
As all you do is that if its that bundlelocator type then you use the FileLocator. All the rest looks like its 100% the same.

Otherwise we end up having to have them in sync, and that will never work. 
njiang:1271900005:2010-04-22T09:33:25.340+0000:1271900005:2010-04-22T09:33:25.340+0000:+1 as Claus said. 
We already have lots of PackageScanClassResolvers, it's time to clean up the duplicate codes :)

njiang:1273187912:2010-05-07T07:18:32.604+0000:1273187912:2010-05-07T07:18:32.604+0000:Created a camel-eclipse component for this resolver.
davsclaus:1303610464:2011-04-24T10:01:04.485+0000:1303610464:2011-04-24T10:01:04.485+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2662,Bug,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-21 05:11:18+00:00,2011-04-24 10:01:35+00:00,"The SFTP component can throw an exception in its begin logic, which causes Camel to not remove the file from its internal in progress cache.


See nabble
http://old.nabble.com/SFTP-rename-problems-ts28254146.html","davsclaus:1271801371:2010-04-21T06:09:31.390+0000:1271801371:2010-04-21T06:09:31.390+0000:trunk: 936165
watcher:1272335562:2010-04-27T10:32:42.301+0000:1272335562:2010-04-27T10:32:42.301+0000:Problem fixed after upgrading to camel-2.3-SHAPSHOT

Thanks
davsclaus:1303610495:2011-04-24T10:01:35.147+0000:1303610495:2011-04-24T10:01:35.147+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2661,Bug,Critical,None,None,"
None
",Closed,Not A Problem,None,Unassigned,Billy Buzzard,0,1,2010-04-20 14:10:52+00:00,2011-04-24 10:01:38+00:00,"I'm not sure if this issue should be reported here or in the Apache-ActiveMQ project so I reported it in both places. Please let me know if I've logged it in the wrong place. I have a drop folder used for testing called ""c:\esb\aaa"". I have the route in the apache-activemq-5.3.0\webapps\camel\WEB-INF\applicationContext.xml file set up to route files from ""c:\esb\aaa"" to ""activemq:testQ"". When I drop a file in the folder it appears to make it into the queue. I see a camelLock file appear in the drop folder temporarily, but when it disappears the original file that I dropped remains and was not moved to the "".camel"" subfolder. I can do the samething from my WindowsXP Laptop and it works, so I'm not sure what the problem is or how to track it down. Here's my stacktrace: 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file: GenericFile[c:\esb\aaa\Test4.txt] to: GenericFile[c:\esb\aaa\.camel\Test4.txt]
at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:96)
at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:72)
at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:120)
at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82)
at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:50)
at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:115)
at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:60)
at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:198)
at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:99)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)","bbuzzard:1271750732:2010-04-20T16:05:32.543+0000:1271750732:2010-04-20T16:05:32.543+0000:I think I fixed my problem, but I'm not exactly sure why.  I noticed that my route, in the applicationContext.xml file, did not have the <convertBodyTo type=""java.lang.String""/> between the from file and the to activemq queue.  Once I added the missing element everything worked.
davsclaus:1303610498:2011-04-24T10:01:38.283+0000:1303610498:2011-04-24T10:01:38.283+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2660,New Feature,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,1,1,2010-04-20 06:31:21+00:00,2011-04-24 10:01:17+00:00,Let camel-jetty leverage graceful shutdown,"davsclaus:1271716787:2010-04-20T06:39:47.603+0000:1271716787:2010-04-20T06:39:47.603+0000:See details here
http://docs.codehaus.org/display/JETTY/How+to+gracefully+shutdown
davsclaus:1271723228:2010-04-20T08:27:08.162+0000:1271723228:2010-04-20T08:27:08.162+0000:Hmmm Jetty just sit and waits for the delay you configure in {{setGracefulShutdown}}. For example 20000 will have it wait 20 sec.
And the existing connections gets reset. 

It may take some sweat to get this working with Jetty.
davsclaus:1271809493:2010-04-21T08:24:53.570+0000:1271809493:2010-04-21T08:24:53.570+0000:Will let it return a 503 if we are suspended
davsclaus:1271812141:2010-04-21T09:09:01.783+0000:1271812141:2010-04-21T09:09:01.783+0000:trunk: 936213.

Will now return 503 when graceful shutting down.

You can also suspend jetty consumer, where it will return 503. For example from JMX console.
davsclaus:1303610477:2011-04-24T10:01:17.672+0000:1303610477:2011-04-24T10:01:17.672+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2659,Bug,Major,2.2.0,,"
None
",Closed,Not A Problem,None,Willem Jiang,Pete Mueller,0,0,2010-04-20 00:20:09+00:00,2011-04-24 10:00:56+00:00,"The apache-camel.xml features file for felix/karaf has a repository element referencing karaf 1.2.0  This creates an odd installation when using karaf 1.4, as the karaf 1.2 repo is loaded along with the 1.4 repo, even tho they have the same feature list.  It seem this inclusion is for the spring and spring-dm features, which are the same in karaf-1.2 and karaf-1.4.


Recommend removing this repository element and/or (if possible) indicating that the version of the spring/spring-dm feature is 1.2.0+.  I know this is possible for bundles, but not sure if the capability exists for features.","petey:1271694086:2010-04-20T00:21:26.033+0000:1271694086:2010-04-20T00:21:26.033+0000:I have enclosed a modified version of the feature file with the recommended changes.  I have tested this file with karaf-1.2 and karaf-1.4 with no issues so far.
njiang:1271813414:2010-04-21T09:30:14.146+0000:1271813414:2010-04-21T09:30:14.146+0000:current we can't remove the below repository, if we want to use the karaf features-maven-plugin to validate the feature. 
{code}
<repository>mvn:org.apache.felix.karaf/apache-felix-karaf/${karaf-version}/xml/features</repository>
{code}
I just create a JIRA[1] in felix for it.
[1] https://issues.apache.org/jira/browse/FELIX-2293

njiang:1271813981:2010-04-21T09:39:41.219+0000:1271813981:2010-04-21T09:39:41.219+0000:Will remove the <repository> element from the apache-camel features.xml when my patch of FELIX-2293 accepted.
njiang:1271889840:2010-04-22T06:44:00.231+0000:1271889840:2010-04-22T06:44:00.231+0000:This change introduce a side effect on the Camel OSGi test which use the feature to load the bundles and I didn't find a way to workaround this.
Removing the <repository> element also introduce a new issue when we deploy the camel feature into karaf 1.x which using Spring 3.0.0.RELEASE. 
It will also complain about can't right feature version file.
So I will revert my change and keep the repository element there.
davsclaus:1303610456:2011-04-24T10:00:56.210+0000:1303610456:2011-04-24T10:00:56.210+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2658,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-19 13:29:18+00:00,2011-04-24 10:00:46+00:00,"GenericFile should not be Serializable as nobody wants to send such an object instance over the remote network or persist it in a object store. (eg camel hawtdb)
Instead you want to store the file content.


This reduces the issue with people having to remember to add .convertBodyTo(""String"") in the routes to force Camel to load the file.","davsclaus:1271661794:2010-04-19T15:23:14.075+0000:1271661794:2010-04-19T15:23:14.075+0000:trunk: 935619.
davsclaus:1271713426:2010-04-20T05:43:46.705+0000:1271713426:2010-04-20T05:43:46.705+0000:trunk: 935809.

Fixed mina and sending files.
davsclaus:1303610446:2011-04-24T10:00:46.866+0000:1303610446:2011-04-24T10:00:46.866+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2657,Improvement,Minor,2.3.0,None,"
None
",Closed,Fixed,2.3.0,Stephen Gargan,Stephen Gargan,0,0,2010-04-19 01:06:01+00:00,2011-04-24 10:00:58+00:00,"The current endpoint configuration only allows for the configuration of a single encoder or decoder and so does not support scenarios that require more than a single encoder or decoder e.g. protobuf handlers with a frame decoders and encoders.  


The attached patch adds a couple of extra config params 'encoders' and 'decoders' that lookup lists of ChannelHandlers from the registry and adds each entry from these lists to the pipeline . The existing 'encoder' and 'decoder' params are still supported though the new params will override in the cases where both are supplied.","davsclaus:1271624000:2010-04-19T04:53:20.835+0000:1271624000:2010-04-19T04:53:20.835+0000:trunk: 935452.

Applied patch with thanks to Stephen

The wiki pages seems to be out of order in terms of updating, so we gotta do this later when wiki works again
davsclaus:1271805111:2010-04-21T07:11:51.947+0000:1271805111:2010-04-21T07:11:51.947+0000:Stephen the wiki pages works again

I would be cool if you had to the time create a single example how to use {{encoders}} and {{decorders}}. And have the values been looked up in the Registry. For example in Spring XML as many people use.

https://cwiki.apache.org/confluence/display/CAMEL/Netty

sgargan:1271834212:2010-04-21T15:16:52.785+0000:1271834212:2010-04-21T15:16:52.785+0000:I've attached a test that uses spring to define the encoder and decoder lists. The wiki is not working for me so I'll upload the wiki comments here for now and will add them once its back up again. 
sgargan:1271857912:2010-04-21T21:51:52.458+0000:1271857912:2010-04-21T21:51:52.458+0000:Ignore the previous patch,use spring-codecs-lists.patch instead. Having read the wiki and seen the comment to use the comma separated list of references I went to see how that should be done. I've changed it to correctly use resolveAndRemoveReferenceListParameter. 

The snippets show how to use both the csv list and a java collection. I'll update the wiki now as its working again.
davsclaus:1271897415:2010-04-22T08:50:15.269+0000:1271897415:2010-04-22T08:50:15.269+0000:Thanks Stephen I have applied the latest patch to trunk
davsclaus:1303610458:2011-04-24T10:00:58.614+0000:1303610458:2011-04-24T10:00:58.614+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2656,Improvement,Minor,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-18 14:46:27+00:00,2011-04-24 10:00:47+00:00,This allows for example the stock quote example to use 5 sec interval to trigger completions to spit out current quotes every 5th seconds.,"davsclaus:1271640889:2010-04-19T09:34:49.793+0000:1271640889:2010-04-19T09:34:49.793+0000:trunk: 935492.

Need to update wiki when it works again

{{completionInterval}} is the new option for this
davsclaus:1271803318:2010-04-21T06:41:58.986+0000:1271803318:2010-04-21T06:41:58.986+0000:Wiki updated
davsclaus:1303610447:2011-04-24T10:00:47.046+0000:1303610447:2011-04-24T10:00:47.046+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2655,Improvement,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-17 09:00:45+00:00,2011-04-24 10:01:38+00:00,"Current ResourceBasedEndpoint can't load the resource from the Application bundle, camelContext classResolver can help us to do that.",davsclaus:1303610498:2011-04-24T10:01:38.146+0000:1303610498:2011-04-24T10:01:38.146+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2654,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,1,5,2010-04-17 08:47:08+00:00,2019-09-30 15:45:34+00:00,"For example when used in onException it gets a bit confusing as you must have 2 end to end it



                from(""direct:start"")
                    .onException(Exception.class)
                        .maximumRedeliveries(2)
                        .backOffMultiplier(1.5)
                        .handled(true)
                        .delay(1000)
                            .log(""Halting for some time"")
                            .to(""mock:halt"")
                        .end()
                    .end()
                    .to(""mock:result"");","davsclaus:1282712664:2010-08-25T13:04:24.144+0000:1282712664:2010-08-25T13:04:24.144+0000:A slight change in the API and routing so lets move this to 3.0
davsclaus:1309317724:2011-06-29T11:22:04.601+0000:1309317724:2011-06-29T11:22:04.601+0000:The same applies for threads DSL as well. Those 3 are the last standing that ought to not have child outputs
davsclaus:1424128128:2015-02-17T07:08:48.726+0000:1424128128:2015-02-17T07:08:48.726+0000:Its the following 4 eips

- delay
- sampling
- threads
- throttle
eduardoraupp:1466925875:2016-06-26T15:24:35.976+0000:1466925875:2016-06-26T15:24:35.976+0000:I am not sure if I understood what is the problem.. but if you create some external route(with ""direct"") instead of the internal instruction(end())? Externalize could be the solution. No?

"
0,CAMEL-2653,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Cott Lang,0,0,2010-04-16 16:44:24+00:00,2011-04-24 10:00:43+00:00,"I recently upgraded an application from Camel 2.0 to Camel 2.2 and was greeted with this stack trace:



org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.FailedToStartRouteException: java.util.NoSuchElementException
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:939)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:197)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 12 more
Caused by: java.util.NoSuchElementException
	at java.util.AbstractList$Itr.next(AbstractList.java:350)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:923)
	... 14 more




I attached a debugger and walked through DefaultCamelContext to locate the (admittedly useless) route that caused the problem, commented it out, and was on my way. However, it seems like this could be trapped and reported better to the user and save the next poor guy some time. 


I also noticed that there's no useful TRACE or DEBUG output in here that would have allowed anyone to easily debug it.


Example
<route>
    <from uri=""activemq:queue:somequeue"" />
</route>




I believe this issue is related to CAMEL-2635.","davsclaus:1271463629:2010-04-17T08:20:29.242+0000:1271463629:2010-04-17T08:20:29.242+0000:Its fixed in 2.3 where you get a better error message on startup about this

{code}
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> From[direct://start] <<< in route: Route[[From[direct://start]] -> []] because of Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:725)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:140)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:638)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1296)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1198)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1128)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:56)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1003)
	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:134)
	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:90)
	at org.apache.camel.impl.RouteNoOutputTest.setUp(RouteNoOutputTest.java:31)
	at com.intellij.junit3.JUnit3IdeaTestRunner.doRun(JUnit3IdeaTestRunner.java:108)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:60)
Caused by: java.lang.IllegalArgumentException: Route route1 has no output processors. You need to add outputs to the route such as to(""log:foo"").
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:723)
	... 23 more
{code}
cott@internetstaff.com:1271478210:2010-04-17T12:23:30.840+0000:1271478210:2010-04-17T12:23:30.840+0000:Thanks, Claus.

davsclaus:1303610443:2011-04-24T10:00:43.681+0000:1303610443:2011-04-24T10:00:43.681+0000:Closing all resolved tickets from 2010 or older"
