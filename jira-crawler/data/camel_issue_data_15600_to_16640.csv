,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-4707,Improvement,Major,"2.8.3, 2.9.0",2.16.0,"
None
",Resolved,Implemented,2.16.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,3,2011-11-23 15:55:16+00:00,2015-08-13 08:04:34+00:00,"In future Karaf 3.0, the features XML validation will be required. It means that the features XML descriptor should define the right namespace.","jbonofre:1322089908:2011-11-24T07:11:48.528+0000:1322089908:2011-11-24T07:11:48.528+0000:Fixed on trunk: revision 1205740.
jbonofre:1322090471:2011-11-24T07:21:11.356+0000:1322090471:2011-11-24T07:21:11.356+0000:Fixed on camel-2.8.x: revision 1205743.
davsclaus:1322282150:2011-11-26T12:35:50.008+0000:1322282150:2011-11-26T12:35:50.008+0000:The added namespace causes all karaf unit tests to fail with a validation error.

See dev
http://camel.465427.n5.nabble.com/camel-itest-karaf-Failure-due-some-XSD-validation-issue-td5024780.html
jbonofre:1322551840:2011-11-29T15:30:40.021+0000:1322551840:2011-11-29T15:30:40.021+0000:To avoid these unit tests failure, I reverted the namespace definition:
- on trunk: revision 1207903
- on camel-2.8.x: revision 1207910

It gives me some time to investigate around the unit test failures.
davsclaus:1323216466:2011-12-07T08:07:46.585+0000:1323216466:2011-12-07T08:07:46.585+0000:What should we do?

At first thought I would suggest to keep it as is for Camel 2.9.0 release as its based on Karaf 2.2.x,
and existing end users should be able to upgrade without issues. Also for users who use pax-exam or the likes for unit tests, and will get bitten by the issue of the issue we did in camel tests.
davsclaus:1323406291:2011-12-09T12:51:31.945+0000:1323406291:2011-12-09T12:51:31.945+0000:Camel 2.9 should support Karaf 2.2.x.
Lets move this forward to Camel 2.10 or later.
davsclaus:1369533652:2013-05-26T10:00:52.261+0000:1369533652:2013-05-26T10:00:52.261+0000:Do we have any problems with this? Eg our Camel releases should be compatible with 2.x and 3.x of Karaf. 
cemmersb:1393485270:2014-02-27T15:14:30.385+0000:1393485270:2014-02-27T15:14:30.385+0000:There is an issue when using Karaf 3.x

Deploying Camel to Karaf results in the following WARN message: org.apache.karaf.features.core - 3.0.0 | Old style feature file without namespace found (URI: mvn:org.apache.camel.karaf/apache-camel/2.12.2/xml/features). This format is deprecated and support for it will soon be removed

To resolve this, it is required to add the feature namespace to the features.xml descriptor, e.g.:

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<features name=""..."" xmlns=""http://karaf.apache.org/xmlns/features/v1.2.0"">
...
</features>
{code}
jbonofre:1393485877:2014-02-27T15:24:37.874+0000:1393485877:2014-02-27T15:24:37.874+0000:+1, I will fix that (as it's fully backward compatible with previous Karaf version).
cemmersb:1394245709:2014-03-08T10:28:29.492+0000:1394245709:2014-03-08T10:28:29.492+0000:I've updated the original thread, since the integration test issue still persists:

http://camel.465427.n5.nabble.com/camel-itest-karaf-Failure-due-some-XSD-validation-issue-td5024780.html#a5748485
davsclaus:1436500331:2015-07-10T11:52:11.954+0000:1436500331:2015-07-10T11:52:11.954+0000:We have namespace today and testing works

<features xmlns=""http://karaf.apache.org/xmlns/features/v1.0.0"" name='camel-${project.version}'>
"
0,CAMEL-4706,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-23 15:47:04+00:00,2011-11-23 15:57:01+00:00,"The camel-groovy/pom.xml has runtime dep on camel-spring, which bring in Spring JARs.


At first glance this seems not needed. As camel-groovy can run without any Spring JARs.",
0,CAMEL-4705,Improvement,Major,2.8.3,"2.8.4, 2.9.0","

autoCreate
file

",Resolved,Fixed,"2.8.4, 2.9.0",Claus Ibsen,Torsten Mielke,0,0,2011-11-23 14:08:13+00:00,2011-11-23 15:21:57+00:00,"The file component tries to auto-create any non-existing starting directories however it does not raise any warnings if its unable to create the directory (e.g. due to file permission or due to unmounted file systems). 
It should at least log a warning msg if it cannot auto-create the starting directory.","tmielke:1322028565:2011-11-23T14:09:25.375+0000:1322028565:2011-11-23T14:09:25.375+0000:Attaching a possible fix that will log a warning msgs if Camel cannot auto-create the directory.
davsclaus:1322032917:2011-11-23T15:21:57.148+0000:1322032917:2011-11-23T15:21:57.148+0000:Thanks Torsten.

I first went for an exception, but a WARN is better as we can backport that safely."
0,CAMEL-4704,New Feature,Minor,2.8.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Daniel Gredler,0,1,2011-11-23 02:48:40+00:00,2015-04-05 08:14:03+00:00,"There are many Camel configuration elements that are auto-discovered when they are configured as Spring beans (Tracer, InterceptStrategy, EventNotifier, PlatformTransactionManager, etc):


http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html


However, instances of TypeConverter are not auto-discovered based on the Spring configuration (there is a different auto-discovery mechanism):


http://camel.apache.org/type-converter.html


A related JIRA ticket (requesting custom XML syntax) was marked ""won't fix"": CAMEL-1685.


I agree that the extra XML tag is not necessary. However, the omission of Spring bean auto-discovery seems to violate the principle of least surprise – as a new Camel user, knowing that Camel auto-discovers Spring beans for other configuration elements, I was surprised to find that Camel didn't find my TypeConverter Spring bean.","sdanig:1321998184:2011-11-23T05:43:04.461+0000:1321998184:2011-11-23T05:43:04.461+0000:Here's another related bug, also marked ""won't fix"": CAMEL-3746

I've been looking at the code, and it appears that the change would involve a small tweak to AbstractCamelContextFactoryBean.afterPropertiesSet(), probably adding another small code block in the area where we already query the registry for event notifiers, endpoint strategies, intercept strategies and lifecycle strategies.
davsclaus:1347154403:2012-09-09T09:33:23.400+0000:1347154403:2012-09-09T09:33:23.400+0000:This would require an API change to {{org.apache.camel.TypeConverter}} or the introduction of a new or extended interface. As the {{TypeConverter}} would need to provide methods for what it can convert from -> to.

Also the current API has 6+ methods. We should offer a simpler API / base class, so it's almost a one liner. 

An alternative is of course to allow an annotation based instead. But we cannot lookup in the registry based on all classes, and then scan for annotations. And thus a special interface would be required.

Maybe name it {{org.apache.camel.spi.AnnotationTypeConverter}}. And then people would need to implement this interface. Then for each method they can use the @TypeConverter annotation we already have.

Then they can declare their custom classes as <bean> type in the XML file."
0,CAMEL-4703,Improvement,Minor,2.6.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,metatech,0,1,2011-11-22 15:44:09+00:00,2013-08-08 10:53:42+00:00,"Here is an extract of my camel-config.xml :


<from uri=""jetty:http://0.0.0.0:9000/route1?handlers=securityHandler1""/>
<from uri=""jetty:http://0.0.0.0:9000/route2?handlers=securityHandler2""/>


The handler ""securityHandler2"" is ignored.


Impact : 2 routes cannot be defined with distinct security roles within the same bundle.


Cause : the JettyHttpComponent.createServletForConnector is called only once, therefore only ""securityHandler1"" is registered on the Jetty server instance.


This might be considered as an acceptable limitation and documented as such.


Workaround : use a different TCP port.","davsclaus:1369533579:2013-05-26T09:59:39.207+0000:1369533579:2013-05-26T09:59:39.207+0000:Yeah lets see what the status is today, and document this.
davsclaus:1375930422:2013-08-08T10:53:42.837+0000:1375930422:2013-08-08T10:53:42.837+0000:I updated the doc with a note about this."
0,CAMEL-4702,Improvement,Minor,None,"2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,Gregg Saffell,0,1,2011-11-22 15:09:39+00:00,2012-07-06 09:15:29+00:00,"On this page: http://camel.apache.org/snmp.html, it says the URI format is: 


  snmp://hostname[:port][?Options]


And documents the ""address"" option as ""the IP address and the port of the host to poll or where to setup the Trap Receiver. Example: 127.0.0.1:162""


So how does address differ from the ""hostname:port"" in the URI?


Thanks!","charly:1328619142:2012-02-07T20:52:22.999+0000:1328619142:2012-02-07T20:52:22.999+0000:Hi Gregg,

When looking at the code for snmp component the address is assembled by host, port and protocol with the defaults being:
host : 127.0.0.1
port : POLL = 161 ; else 162
protocol : udp

Setting the address option would not have any effect since it would get overridden by the above on initialization, AFAIK.
gsaffell:1328620481:2012-02-07T21:14:41.372+0000:1328620481:2012-02-07T21:14:41.372+0000:So I guess ""address"" row of the Options section of the page should be changed to say ""this parameter has no effect, the hostname and port come from the hostname:port portion of the URI."" 

As long as you are in there, having 127.0.0.1 as the example hostname doesn't make very much sense. I would think in the real world, the camel component would be polling hosts other than the one where it is running. In the case of receiving traps, specifying a host of 127.0.0.1 makes even less sense since that would mean trap data could only be received from the machine where the component is running.

Thanks
charly:1328694853:2012-02-08T17:54:13.506+0000:1328694853:2012-02-08T17:54:13.506+0000:@Gregg, I agree the documentation needs updating, I will get to that soon.  In the documentation the 127.0.0.1 is only meant to show that the value is an IP address and give an example of what it looks like.

Cheers

  
davsclaus:1341537329:2012-07-06T09:15:29.232+0000:1341537329:2012-07-06T09:15:29.232+0000:I fixed by removing that address option that dont make sense."
0,CAMEL-4701,Improvement,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Hadrian Zbarcea,Glen Mazza,0,0,2011-11-21 17:32:17+00:00,2011-12-09 13:12:21+00:00,"Patch makes following changes to the camel-example-cxf example:


1.) In JAXRS testing, switched the default auto-created book ID from 123 to 101 so it doesn't conflict with the 123-id'ed book subsequently
    created during testing.
2.) Moved the httptojms example from root CXF folder to its own folder (...example.cxf.httptojms) as a sibling folder to the other three samples.
3.) To simplify, moved the JmsBroker class to the httptojms folder, as it is only that sample using it.
4.) Reformatted the pom to 4-space no tab indentation.","hadrian:1321987279:2011-11-23T02:41:19.528+0000:1321987279:2011-11-23T02:41:19.528+0000:@Glen, thanks for the patch; svn patches including moved files, renames, etc. are kinda unpleasant. Will apply it tomorrow.
njiang:1322000888:2011-11-23T06:28:08.463+0000:1322000888:2011-11-23T06:28:08.463+0000:Just one comment for the change 1.
The spring files in the src/main/resources/META-INF are used for the Karaf or ServiceMix. In this way, we could deploy the example bundle into the OSGi container without any trouble. Please don't remove them.

gmazza:1322023639:2011-11-23T12:47:19.119+0000:1322023671:2011-11-23T12:47:51.195+0000:But those three files are only used during JUnit testing, not deployment (the configuration is done within the Java code for the latter).  They're not being removed but moved to test/main/resources/META-INF.  Resources that are needed only during testing should only be in the latter folder, to save the user the confusion of wondering of why they are in the src/ branch but unused.

gmazza:1322025320:2011-11-23T13:15:20.908+0000:1322025320:2011-11-23T13:15:20.908+0000:OK, I think I see what you're saying -- the ""main"" classes used for standalone deployment aren't activated when you deploy as an OSGi bundle, so, indeed, the three configuration files are being used for OSGi deployment.  Those three config files should be retained in main/resources/META-INF then.  In a subsequent patch I can add a comment that those three files are used only for JUnit testing and OSGi deployment so a standalone deployer won't get confused why those files are being ignored.

gmazza:1322027555:2011-11-23T13:52:35.980+0000:1322027555:2011-11-23T13:52:35.980+0000:Hold off on this, I'm resubmitting a patch...
gmazza:1322030740:2011-11-23T14:45:40.090+0000:1322030740:2011-11-23T14:45:40.090+0000:OK, new patch (camelExampleCXF2.patch) completely replaces the earlier one, and retains those config files under src/main/resources/META-INF.  Also a comment added to three of the config files that are not used in standalone deployment.



davsclaus:1323407541:2011-12-09T13:12:21.282+0000:1323407541:2011-12-09T13:12:21.282+0000:Thanks Glen for the patch.

Yeah patch rename does not go so well. So I frankly just removed the old files, and added the new ones."
0,CAMEL-4700,Task,Trivial,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Hadrian Zbarcea,Babak Vahdat,0,0,2011-11-21 13:20:24+00:00,2011-11-22 15:11:38+00:00,See http://camel.465427.n5.nabble.com/Unit-test-failure-on-trunk-in-camel-saxon-td5009713.html,"hadrian:1321859382:2011-11-21T15:09:42.759+0000:1321859382:2011-11-21T15:09:42.759+0000:I wonder why a new issue was open for this instead of just someone fixing the test or reopen the jira for which an improvement was made (and, well, not tested well enough). We used to have 200+ issues per minor release, then 300+, now 400+ and many of them are imho frivolous. The purpose of the bug tracking system is two-fold, one to keep track of issues for us, committers and second to communicate to users what is being done. This issue has no value for the latter and is redundant for the former, as jenkins will remind us of the issue every day until someone fixes it.

That said, I am looking into it now.
bvahdat:1321863540:2011-11-21T16:19:00.365+0000:1321863540:2011-11-21T16:19:00.365+0000:@Hadrian,

it seems it was a fault of me to look at the dev forum and seeing the post submitted by Claus, and as I don't own SVN permission to commit any fix (I'm just a dummy Camel user), opening a ticket and providing a patch has been the way I've been through since my beginning with Camel. Please note that the type of this Ticket is ""Task"" with the priority ""Trival"".

So my apologies if I've broken any rules as a Apache Camel *user*.


hadrian:1321864261:2011-11-21T16:31:01.926+0000:1321864261:2011-11-21T16:31:01.926+0000:@Babak, no worries. No need to apologize either, no 'rules' were broken and I don't think anybody is upset. My point is that Camel is big and we need to simplify wherever we can as things get harder to track. Users can help with that too.

I saw the priority and while one can filter based on it, the reality is that no one really does. Plus we are not all that consistent in using the priority for an issue (it would also hard, as 'priority' is in the eyes of the beholder.

@Babak, your contributions (not only this one!) are noted and highly appreciated.
hadrian:1321876143:2011-11-21T19:49:03.101+0000:1321876143:2011-11-21T19:49:03.101+0000:Thanks Babak for the contribution.
njiang:1321896147:2011-11-22T01:22:27.725+0000:1321899498:2011-11-22T02:18:18.333+0000:@Hadrian,
I think the patch was not truly fix the issue of SaxonInvalidXsltFileTest.
We need to do something from the side of xslt component itself.
You can find more information in this thread[1]

[1]http://camel.465427.n5.nabble.com/Unit-test-failure-on-trunk-in-camel-saxon-tp5009713p5010674.html

hadrian:1321897257:2011-11-22T01:40:57.014+0000:1321897257:2011-11-22T01:40:57.014+0000:@Willem: I don't think so. I am aware of the thread, I just think nothing is broken. The issue was introduced in either r1201236 or r1202819 (didn't check exactly, but probably the latter) and the author probably only bothered to test camel-core, home of the XsltEndpoint, missing the side effect.

One feature added was the 'CamelXsltResourceUri' header, that allows one to specify an xslt stylesheet at runtime. You cannot necessarily assume that the xslt stylesheet passed as a header exists at route startup (could be for instance generated/copied by another route or process), but it must exists at the time the xslt endpoint processes the message. Now why would this be different for the stylesheet passed as an uri paramter? Another argument is that compiling the stylesheet is an expensive process and it doesn't need to be done until necessary. First use could happen much, much later after the route start and, again, the stylesheet may not be available when the route starts, but it would be available when the first message is received.

Of course, one could argue that if that is the case, one should use the 'CamelXsltResourceUri' header. There is no overhead, because stylesheets are cached. To me, however, the uri parameter is used a default when the header is not specified (convention over configuration) and the endpoint behavior is consistent the way it is now.
janstey:1321945898:2011-11-22T15:11:38.762+0000:1321945898:2011-11-22T15:11:38.762+0000:FYI I added the fail-fast behavior back in http://svn.apache.org/viewvc?rev=1205032&view=rev so the test in Saxon was also reverted back. Thanks for taking the time to look into this Babak.

Cheers,
Jon"
0,CAMEL-4699,Improvement,Major,None,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Freeman Yue Fang,Freeman Yue Fang,0,0,2011-11-21 10:24:40+00:00,2011-11-24 20:52:15+00:00,"for example several examples have like
features:addUrl mvn:org.apache.camel.karaf/apache-camel/2.9.0/xml/features
osgi:install -s mvn:org.apache.camel/camel-example-cxf-osgi/2.8.3
osgi:install mvn:org.apache.camel/camel-example-osgi/2.5.0
(substitute 2.5.0 with the Camel version number)
which should be automatically filtered during build assembly","ffang:1322090975:2011-11-24T07:29:35.672+0000:1322090975:2011-11-24T07:29:35.672+0000:commit fix
http://svn.apache.org/viewvc?rev=1205735&view=rev for trunk
http://svn.apache.org/viewvc?rev=1205737&view=rev for 2.8.x branch
bvahdat:1322139135:2011-11-24T20:52:15.840+0000:1322139135:2011-11-24T20:52:15.840+0000:A nice patch :-)"
0,CAMEL-4698,Bug,Minor,"2.8.2, 2.9.0","2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Robert Valk,0,0,2011-11-20 22:35:54+00:00,2011-11-21 07:52:53+00:00,The Scala DSL does not allow for defining error handlers at the route scope. The 'errorHandler' method only sets the context-scoped error handler.,"rvalk:1321800166:2011-11-20T22:42:46.196+0000:1321800166:2011-11-20T22:42:46.196+0000:Patch for SRouteDefinition.scala.
Unit test suite for issue.
njiang:1321833173:2011-11-21T07:52:53.259+0000:1321833173:2011-11-21T07:52:53.259+0000:Applied patch into trunk, Camel 2.8.x  Camel 2.7.x branch with thanks to Robert."
0,CAMEL-4697,Improvement,Major,None,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-11-19 13:41:28+00:00,2011-11-19 14:10:35+00:00,"There are lots camel components has the dependency of the servlet api, we should agile the servlet API to avoid the servlet API conflicts.",njiang:1321683035:2011-11-19T14:10:35.271+0000:1321683035:2011-11-19T14:10:35.271+0000:Applied patch into trunk and camel 2.8.x branch.
0,CAMEL-4696,Bug,Minor,2.8.3,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Bilgin Ismet Ibryam,Bilgin Ismet Ibryam,0,0,2011-11-18 23:49:23+00:00,2011-11-28 13:26:44+00:00,"DefaultCamelContext.removeRoute method has these lines among others


 if (getRouteStatus(routeId).isStopped()) {
    routeService.setRemovingRoutes(true);
    shutdownRouteService(routeService);
    removeRouteDefinition(routeId);
    ServiceHelper.stopAndShutdownServices(routeService);


I think the last line from this snippet is not needed, because the route should be already stopped in order to pass the IF statement and then it is shutdown through this call shutdownRouteService(routeService);


 ServiceHelper.stopAndShutdownServices(routeService) tries to stops again the route if not stopped, but the worse is it shutdown the rout again.
It seems to me like a bug, other thoughts?","bibryam:1321631528:2011-11-18T23:52:08.571+0000:1321631528:2011-11-18T23:52:08.571+0000:Here is a unit test showing the bug
davsclaus:1322272702:2011-11-26T09:58:22.609+0000:1322272702:2011-11-26T09:58:22.609+0000:Thanks Bilgin for the unit test.

I have committed the patch and fixed it as you suggested in DefaultCamelContext.

I have upgraded your JIRA account so you can assign tickets, as you contribute many patches recently.
So by assigning the ticket we can see you are working on a patch. Keep up the good work.
bibryam:1322458004:2011-11-28T13:26:44.801+0000:1322458004:2011-11-28T13:26:44.801+0000:Thanks Claus. Jira perms will simplify my life a little more :)"
0,CAMEL-4695,Bug,Major,None,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Müller,Christian Müller,0,3,2011-11-18 22:32:08+00:00,2013-07-18 19:20:00+00:00,"When the camel-smpp component is called to submit a SMS, a NullPointerException is thrown:


Stacktrace
Caused by: java.lang.NullPointerException
       at org.jsmpp.util.PDUByteBuffer.appendAll(PDUByteBuffer.java:182)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.util.DefaultComposer.submitSm(DefaultComposer.java:238)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.DefaultPDUSender.sendSubmitSm(DefaultPDUSender.java:196)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.SynchronizedPDUSender.sendSubmitSm(SynchronizedPDUSender.java:192)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SubmitSmCommandTask.executeTask(SubmitSmCommandTask.java:86)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.AbstractSession.executeSendCommand(AbstractSession.java:248)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.jsmpp.session.SMPPSession.submitShortMessage(SMPPSession.java:320)[149:org.apache.servicemix.bundles.jsmpp:2.1.0.3]
       at org.apache.camel.component.smpp.SmppSubmitSmCommand.execute(SmppSubmitSmCommand.java:56)
       ... 62 more","rusbob:1374100662:2013-07-18T06:37:42.337+0000:1374100662:2013-07-18T06:37:42.337+0000:Christian, how this issue has been resolved? Can I patch *2.8.0* version?
davsclaus:1374100839:2013-07-18T06:40:39.894+0000:1374100839:2013-07-18T06:40:39.894+0000:Yes you can patch the code yourself. Click the Source tab on this ticket to see the code changes.
rusbob:1374142019:2013-07-18T18:06:59.025+0000:1374142019:2013-07-18T18:06:59.025+0000:Ok, but the fix has been done in *new* [SmppSubmitSmCommand file|https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppSubmitSmCommand.java?r2=1203887&r1=1179457]

Where do I add this fix in [2.8.0 version|https://fisheye6.atlassian.com/browse/~br=camel-2.8.x/camel/branches/camel-2.8.x/components/camel-smpp/src/main/java/org/apache/camel/component/smpp]?
muellerc:1374146400:2013-07-18T19:20:00.229+0000:1374146400:2013-07-18T19:20:00.229+0000:It's easy if you have a look at the change set Claus mentioned [1]. The fix is also back ported to the camel-2.8.x maintenance branch...

[1] https://fisheye6.atlassian.com/changelog/camel?cs=1165993"
0,CAMEL-4694,Improvement,Minor,2.9.0,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Hadrian Zbarcea,Glen Mazza,0,0,2011-11-18 21:41:20+00:00,2011-11-18 22:57:42+00:00,"Attachment has improvements to README and the camel-config.xml file shown in the online description of this sample: 
https://cwiki.apache.org/confluence/display/CAMEL/CXF+Proxy+Example (a web page I just updated).",hadrian:1321628262:2011-11-18T22:57:42.451+0000:1321628262:2011-11-18T22:57:42.451+0000:Thanks Glen for your attention to details.
0,CAMEL-4693,Improvement,Major,2.8.2,"2.9.2, 2.10.0","
None
",Closed,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Jeff Segal,0,2,2011-11-18 17:52:55+00:00,2013-03-21 18:48:25+00:00,"HttpComponents 4.x provides a facility to use a HttpContext for a given request by calling HttpClient.execute(HttpUriRequest, HttpContext), but it looks like the http4 Camel Component doesn't have hooks to use this. Looking at the latest source of org.apache.camel.component.http4.HttpProducer, I only see one way of calling HttpClient.execute():


    protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException 

{
        return httpClient.execute(httpRequest);
    }


Perhaps this could be made available in a similar fashion to HttpClientConfigurer? (for example creating a HttpContextConfigurer)


My particular symptom is that I'm unable to force the http4 component to use preemptive authentication, which relies on HttpContext in HttpClient 4.x. In HttpClient 3.x, this was made possible by the HttpClientParams flag ""authenticationPreemptive"". However, it appears that this was removed for 4.x in favor of using HttpContext because of security concerns.","uva_jeff:1333706667:2012-04-06T18:04:27.729+0000:1333706667:2012-04-06T18:04:27.729+0000:Patch to add capability to specify a HttpContext in the http4 Component.
davsclaus:1333760194:2012-04-07T08:56:34.533+0000:1333760194:2012-04-07T08:56:34.533+0000:Thanks for the patch. I updated the wiki page.
cflockhart:1363253368:2013-03-14T17:29:28.717+0000:1363253368:2013-03-14T17:29:28.717+0000:The documentation for the http4 component still contains: ""The solution was to set the following URI option: httpClient.authenticationPreemptive=true"", which produces ""Unknown parameters=[{authenticationPreemptive=true}]"" in Camel 2.10.4.
muellerc:1363788546:2013-03-20T22:09:06.765+0000:1363788546:2013-03-20T22:09:06.765+0000:[~cflockhart]: Yes, thats true. Do you consider to provide a better description? In this case, I can update the WIKI for you...
muellerc:1363788578:2013-03-20T22:09:38.768+0000:1363788578:2013-03-20T22:09:38.768+0000:We have to document the solution
cflockhart:1363795995:2013-03-21T00:13:15.877+0000:1363795995:2013-03-21T00:13:15.877+0000:My solution was a little convoluted so maybe there's a better way.

1. Create a Spring factory for HttpContexts e.g. (in Scala):
{code}
@Component
class HttpContextFactory {

  @Value(""${http.host}"")
  private var httpHost = ""localhost""
  @Value(""${http.port}"")
  private var httpPort = 9001

  val httpContext = new BasicHttpContext
  private val authCache = new BasicAuthCache
  private val basicAuth = new BasicScheme

  @PostConstruct
  def afterInject() = {
    val targetHost = new HttpHost(httpHost, httpPort)

    authCache.put(targetHost, basicAuth)

    httpContext.setAttribute(ClientContext.AUTH_CACHE, authCache)
  }
}
{code}

2. Declare an HttpContext in the Spring application context file:

{code}
<bean id=""myHttpContext"" factory-bean=""httpContextFactory"" factory-method=""httpContext""/>
{code}

3. Reference the context in the http4 URL:

...&httpContext=myHttpContext

muellerc:1363862890:2013-03-21T18:48:10.187+0000:1363862890:2013-03-21T18:48:10.187+0000:Thanks for the input. I updated the WIKI with it. It should be online in a few hours."
0,CAMEL-4692,Bug,Major,2.8.2,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Claus Ibsen,Julian Cable,0,0,2011-11-18 15:09:02+00:00,2011-11-22 22:53:24+00:00,"The following XML DSL defines two routes using the same route policy:


<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">


  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <camel:propertyPlaceholder id=""properties"" location=""file:///etc/camel/css.properties""/>


    <camel:package>cdp_test</camel:package>
    <camel:route id=""r1"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/1""/>
      <camel:to uri=""stream:out""/>
    </camel:route>
    <camel:route id=""r2"" routePolicyRef=""pol1"">
      <camel:from uri=""file://data/2""/>
      <camel:to uri=""stream:out""/>
    </camel:route>


  </camel:camelContext>


  <bean id=""pol1"" class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""00,30 * * * * ? *""/>
    <property name=""routeStopTime""  value=""10,40 * * * * ? *""/>
  </bean>


</beans>


This is the logging output. r2 does not follow the policy:


[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler 'DefaultQuartzScheduler-camel-1' initialized from an externally provided properties instance.
[pache.camel.spring.Main.main()] StdSchedulerFactory            INFO  Quartz scheduler version: 1.8.4
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-START-r1 for action: START on route:
[pache.camel.spring.Main.main()] ScheduledRoutePolicy           INFO  Scheduled trigger: triggerGroup-r1.trigger-STOP-r1 for action: STOP on route:
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpointfile://data/1
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Route: r2 started and consuming from: Endpointfile://data/2
[pache.camel.spring.Main.main()] QuartzComponent                INFO  Starting Quartz scheduler: DefaultQuartzScheduler-camel-1
[pache.camel.spring.Main.main()] QuartzScheduler                INFO  Scheduler DefaultQuartzScheduler-camel-1_$_NON_CLUSTERED started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Total 2 routes, of which 2 is started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.8.2 (CamelContext: camel-1) started in 0.596 seconds
hello 1
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
el-1) thread #2 - ShutdownTask DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpointfile://data/1
[artzScheduler-camel-1_Worker-2] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-2] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpointfile://data/1
hello 2
hello 2
[artzScheduler-camel-1_Worker-3] SpringCamelContext             INFO  Route: r1 started and consuming from: Endpointfile://data/1
hello 2
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10000 milliseconds)
el-1) thread #2 - ShutdownTask DefaultShutdownStrategy        INFO  Route: r1 shutdown complete, was consuming from: Endpointfile://data/1
[artzScheduler-camel-1_Worker-4] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[artzScheduler-camel-1_Worker-4] SpringCamelContext             INFO  Route: r1 stopped, was consuming from: Endpointfile://data/1


If I use two separate identical route policies it works as I expect.","davsclaus:1321927108:2011-11-22T09:58:28.582+0000:1321927108:2011-11-22T09:58:28.582+0000:Is the problem also when starting? eg the log above shows that only r1 is stopped.
julian.cable:1321928424:2011-11-22T10:20:24.352+0000:1321928424:2011-11-22T10:20:24.352+0000:Hi Claus, in the example, r1 will start and stop on schedule whereas r2 stays active always.

Julian
bibryam:1321948678:2011-11-22T15:57:58.059+0000:1321948678:2011-11-22T15:57:58.059+0000:ScheduledRoutePolicy was working only with one route (the first one assigned) at a time. I tried to fix that by introducing a map (a little bit refactoring) to store the routes using the same policy.

Julian, can you give it a try?
davsclaus:1321959111:2011-11-22T18:51:51.349+0000:1321959111:2011-11-22T18:51:51.349+0000:Thanks Bilgin for the patch. Keep up the good work. Its been noticed you great work for the community.
julian.cable:1321973604:2011-11-22T22:53:24.046+0000:1321973604:2011-11-22T22:53:24.046+0000:Fantastic, Thanks guys. I'll put a dev build together and try it.

Julian"
0,CAMEL-4691,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.11.0,Bilgin Ismet Ibryam,Bilgin Ismet Ibryam,0,3,2011-11-17 11:06:05+00:00,2012-08-30 01:59:37+00:00,"A new component that would allow Camel to connect to content repositories(like Alfresco, SharePoint, OpenText) supporting CMIS specification. 
This component can be an alternative to camel-jcr (which actually can only create node) for accessing content repositories.


The consumer can retrieve content using CMIS queries (very similar to SQL) or traverse the content tree from root to leaves.
The producer is capable of creating nodes on the server (folders, docs...) and also executing CMIS queries from the message body.


It is using another Apache project - OpenCMIS client libraries from Apache Chemistry (also the in-memory-server from the same project for unit tests)","bibryam:1321500363:2011-11-17T11:26:03.993+0000:1321500363:2011-11-17T11:26:03.993+0000:OSGI bundles needed 
davsclaus:1341537114:2012-07-06T09:11:54.326+0000:1341537114:2012-07-06T09:11:54.326+0000:Bilgin any update on this? You are a committer now.
bibryam:1342365400:2012-07-15T23:16:40.994+0000:1342365400:2012-07-15T23:16:40.994+0000:I am trying to add the new component to Camel but struggled with OSGI:

Looking at http://chemistry.apache.org/java/developing/dev-osgi.html
opencmis seems to be already osgi bundled. So I added the following lines in features.xml

  <feature name='camel-cmis' version='${project.version}' resolver='(obr)' start-level='50'>
    <feature version='${project.version}'>camel-core</feature>
    <bundle dependency='true'>mvn:org.apache.chemistry.opencmis/chemistry-opencmis-osgi-server/${cmis-bundle-version}</bundle>
    <bundle>mvn:org.apache.camel/camel-cmis/${project.version}</bundle>
  </feature>

But when I try to validate the features, I get the following error:

[WARNING] Failed to validate feature camel-cmis
[WARNING] No export found to match org.apache.chemistry.opencmis.client.runtime (imported by mvn:org.apache.camel/camel-cmis/2.11-SNAPSHOT)
[WARNING] No export found to match javax.xml.ws.soap (imported by mvn:org.apache.chemistry.opencmis/chemistry-opencmis-osgi-server/0.5.0)
[WARNING] No export found to match javax.xml.ws (imported by mvn:org.apache.chemistry.opencmis/chemistry-opencmis-osgi-server/0.5.0)
[WARNING] No export found to match javax.xml.ws.handler (imported by mvn:org.apache.chemistry.opencmis/chemistry-opencmis-osgi-server/0.5.0)
[WARNING] No export found to match org.apache.chemistry.opencmis.client.api;version=""[0.5,1)"" (imported by mvn:org.apache.camel/camel-cmis/2.11-SNAPSHOT)
[WARNING] No export found to match javax.jws (imported by mvn:org.apache.chemistry.opencmis/chemistry-opencmis-osgi-server/0.5.0)

Any help on how to fix this or features.xml or how to find existing osgi bundles is greatly appreciated.

bibryam:1342489638:2012-07-17T09:47:18.976+0000:1342489638:2012-07-17T09:47:18.976+0000:Updated patch. Still have issues with validating the features.xml
njiang:1342560792:2012-07-18T05:33:12.038+0000:1342560792:2012-07-18T05:33:12.038+0000:@Bilgin,

I can help you with the OSGi stuffs, and will play with the new component when I get some time later today.

bibryam:1342571434:2012-07-18T08:30:34.771+0000:1342571434:2012-07-18T08:30:34.771+0000:TIA Willem. I will improve the implementation of the component further, blocked only with the OSGI stuff. 
njiang:1342572188:2012-07-18T08:43:08.648+0000:1342572188:2012-07-18T08:43:08.648+0000:I think we can commit the patch first, and create a JIRA for the OSGi related stuff.
I just checked the OpenCMIS OSGi Client Wrapper, it doesn't export the package of ""org.apache.chemistry.opencmis.client.runtime"".
And apache chemistry doesn't use CXF as the JAXWS implementation, we need to some works to fix them.

I'm planing to committed patch shortly, so you could do some enhancement without create a huge patch anymore :)

bibryam:1342572458:2012-07-18T08:47:38.683+0000:1342572458:2012-07-18T08:47:38.683+0000:Sounds good, but is it good idea to commit code that fails the features validation?
njiang:1342589376:2012-07-18T13:29:36.876+0000:1342589376:2012-07-18T13:29:36.876+0000:Don't worry, I will comment out camel-cmis feature before I commit the code. 
As it's a new component for camel 2.11, we still have time to bake it.
njiang:1342592327:2012-07-18T14:18:47.238+0000:1342592327:2012-07-18T14:18:47.238+0000:Applied the patch with thanks to Bilgin. I also fixed some log issues before the commit.

@Bilgin, 
Can you update the wiki page for the new camel-cmis component?
bibryam:1342592713:2012-07-18T14:25:13.088+0000:1342592713:2012-07-18T14:25:13.088+0000:Thanks Willem. I will update the docs (probably this weekend when I find some time)
bibryam:1343927803:2012-08-03T01:16:43.951+0000:1343927803:2012-08-03T01:16:43.951+0000:Willem, is there any progress with the osgi dependencies?
The documentation is in place already.
njiang:1344007358:2012-08-03T23:22:38.792+0000:1344007358:2012-08-03T23:22:38.792+0000:@Bilgin
I'm on vacation this week, I will work on the OSGi issue when I get some time next week.
BTW, it could need some addition work on the third part bundles to get the camel-cmis work.

bibryam:1344009568:2012-08-03T23:59:28.761+0000:1344009568:2012-08-03T23:59:28.761+0000:Thanks Willem, enjoy your holiday :)
davsclaus:1345949468:2012-08-26T10:51:08.149+0000:1345949468:2012-08-26T10:51:08.149+0000:Any update on the osgi side?
njiang:1346016309:2012-08-27T05:25:09.817+0000:1346016309:2012-08-27T05:25:09.817+0000:I will do some work on this part this week.
njiang:1346263117:2012-08-30T01:58:37.022+0000:1346263117:2012-08-30T01:58:37.022+0000:I just create a new JIRA CAMEL-5552 to trace the camel-cmis OSGi related issue.
njiang:1346263177:2012-08-30T01:59:37.131+0000:1346263177:2012-08-30T01:59:37.131+0000:The component is committed into the trunk with thanks to Bilgin."
0,CAMEL-4690,Bug,Major,2.8.0,2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Claus Ibsen,Sergey Zhemzhitsky,0,0,2011-11-16 21:38:53+00:00,2011-11-17 15:52:47+00:00,"When trying to transform an exchange by means of method expression, exchange modifications are not reflected to it.


Unit test to reproduce:



package org.apache.camel.test;

import javax.naming.Context;

import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class ChangeNotReflectedTest extends CamelTestSupport {

    public static class PropertySetter {
        public void change(Exchange exchange) {
            exchange.setProperty(""SetProperty"", ""PropertyValue"");
        }
    }

    @Test
    public void testComponent() throws Exception {
        RouteBuilder routes = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                    .to(""bean:propSetter"")
                    .to(""mock:result"");
            }
        };

        context().addRoutes(routes);
        startCamelContext();

        getMockEndpoint(""mock:result"").expectedPropertyReceived(""SetProperty"", ""PropertyValue"");

        Exchange exchange = createExchangeWithBody(""Hello World!"");
        template().send(""direct:start"", exchange);

        assertMockEndpointsSatisfied();
    }

    @Test
    public void testTransformer() throws Exception {
        RouteBuilder routes = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                    .transform()
                        .method(""propSetter"")
                    .to(""mock:result"");
            }
        };

        context().addRoutes(routes);
        startCamelContext();

        getMockEndpoint(""mock:result"").expectedPropertyReceived(""SetProperty"", ""PropertyValue"");

        Exchange exchange = createExchangeWithBody(""Hello World!"");
        template().send(""direct:start"", exchange);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected Context createJndiContext() throws Exception {
        Context context = super.createJndiContext();
        context.bind(""propSetter"", new PropertySetter());
        return context;
    }

    @Override
    public boolean isUseRouteBuilder() {
        return false;
    }

}




testTransformer test failes.
Expected behavior testTransformer test passes successfully.","davsclaus:1321515400:2011-11-17T15:36:40.957+0000:1321515400:2011-11-17T15:36:40.957+0000:This is working as expected. The transform EIP is for transforming the *message body* as documented.

To prevent side effects Camel will do a safe copy of the Exchange which is passed in the method. 

However the bean component is for invoking beans, which in case they have Exchange as parameter, they get the *real* exchange in use.
szhemzhitsky:1321516367:2011-11-17T15:52:47.313+0000:1321516367:2011-11-17T15:52:47.313+0000:Thanks for clarification."
0,CAMEL-4689,Improvement,Major,2.8.2,None,"
None
",Resolved,Fixed,2.9.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-11-16 18:06:59+00:00,2011-11-22 15:10:27+00:00,"Similar to ""dynamic templates"" in velocity component http://camel.apache.org/velocity","janstey:1321438210:2011-11-16T18:10:10.024+0000:1321438210:2011-11-16T18:10:10.024+0000:Added in http://svn.apache.org/viewvc?rev=1202819&view=rev
janstey:1321945826:2011-11-22T15:10:26.960+0000:1321945826:2011-11-22T15:10:26.960+0000:Added the fail-fast behavior back in http://svn.apache.org/viewvc?rev=1205032&view=rev"
0,CAMEL-4688,Bug,Major,2.8.2,2.12.0,"

cxf
header
interceptors
security
soap
ws-security

",Resolved,Invalid,2.12.0,Claus Ibsen,Jan Bernhardt,0,2,2011-11-16 15:33:12+00:00,2013-08-26 17:50:00+00:00,"In tried to setup a proxy webservice which takes care for authentication.
But even thou I added the right interceptor in my cxf:cxfEndpoint I receive the following soap fault, when providing my credentials to the proxy service:


      <soap:Fault>
         <faultcode>soap:MustUnderstand</faultcode>
         <faultstring>MustUnderstand headers: [

{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}

Security] are not understood.</faultstring>
      </soap:Fault>


I was looking in the debug modus, if the method getUnderstoodHeaders() in AbstractWSS4JInterceptor was called and discoverd that it was not. Therefore cxf does not know that it could handle my security-token.


I tried to extend the cxf proxy example, which is shipped with camel. Here is my cxfEndpoint configuration:


    <!-- this is the CXF webservice we use as front end -->
    <cxf:cxfEndpoint id=""reportIncident""
                     address=""http://localhost:9080/camel-example-cxf-proxy/webservices/incident""
                     endpointName=""s:ReportIncidentEndpoint""
                     serviceName=""s:ReportIncidentEndpointService""
                     wsdlURL=""etc/report_incident.wsdl""
                     xmlns:s=""http://reportincident.example.camel.apache.org"">


		<cxf:inInterceptors>
			<bean id=""logInbound"" class=""org.apache.cxf.interceptor.LoggingInInterceptor""/>
			<bean class=""org.apache.cxf.binding.soap.saaj.SAAJInInterceptor"" />
			<bean id=""authenticationInterceptor"" class=""org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"">
				<constructor-arg>
					<map>
						<entry key=""action"" value=""UsernameToken"" />
						<entry key=""passwordType"" value=""PasswordText"" />
						<entry key=""passwordCallbackClass"" value=""org.apache.cxf.systest.ws.wssec10.client.KeystorePasswordCallback"" />
					</map>
				</constructor-arg>
			</bean>
		</cxf:inInterceptors>
	</cxf:cxfEndpoint>",davsclaus:1377510600:2013-08-26T17:50:00.402+0000:1377510600:2013-08-26T17:50:00.402+0000:This ticket is too old. Create a new ticket and/or use the mailing list to get help with this first.
0,CAMEL-4687,Task,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Babak Vahdat,Claus Ibsen,0,0,2011-11-16 12:34:28+00:00,2011-12-09 16:40:57+00:00,"We should check the type converters, when creating a new FileInputStream, that the stream gets wrapped in a BufferedInputStream, to ensure the file is loaded faster, as the buffered stream has an internal buffer.


See CAMEL-4686","bvahdat:1322678157:2011-12-01T02:35:57.871+0000:1322678157:2011-12-01T02:35:57.871+0000:IMHO not only reading but also writing should be buffered, so that I attach a potential patch for your consideration:
(the mainly affected classes are by the root packages org.apache.camel.converter.* & org.apache.camel.impl.converter.*)

- InputStream, OutputStream, Reader and Writer io/buffering by IOConverter, StaxConverter and XmlConverter (supported through 4 new utilities by IOHelper)
- removal and fix of @SuppressWarnings usages where possible
- removal of all compiler warnings because of the unused import, raw type usage of generic types, unchecked warnings
- add of the missing @Override annotation (see [1]) in bunch of the places
- updated [2] accordingly to verify the buffering fix
- CS fixes

Running of *all* test on camel-core passed on my box but *not* org.apache.camel.language.TokenPairPredicateTest, however
that seems not to be a side effect of this fix, as after reverting of *all* changes on my workspace that test still continued
to fail, however I didn't look into it in detail as it's out of this ticket's context:

Results :

Failed tests:
  testTokenPairPredicate(org.apache.camel.language.TokenPairPredicateTest): File should not exists target\pair\hello.xml

Tests run: 3945, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25:14.480s
[INFO] Finished at: Thu Dec 01 03:25:48 CET 2011
[INFO] Final Memory: 11M/494M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.8:test (default-test) on project camel-core: There are test failures.

The corresponding stacktrace of the failure is:

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.language.TokenPairPredicateTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.086 sec <<< FAILURE!
testTokenPairPredicate(org.apache.camel.language.TokenPairPredicateTest)  Time elapsed: 5.086 sec  <<< FAILURE!
junit.framework.AssertionFailedError: File should not exists target\pair\hello.xml
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at junit.framework.Assert.assertFalse(Assert.java:34)
	at org.apache.camel.language.TokenPairPredicateTest.testTokenPairPredicate(TokenPairPredicateTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:119)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
{code}


[1] http://blogs.oracle.com/ahe/entry/override_snafu 
[2] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/converter/IOConverterTest.java
bvahdat:1322803153:2011-12-02T13:19:13.350+0000:1322813734:2011-12-02T16:15:34.886+0000:Reading again the ticket description today I assume that your main intention was to check [1] where buffering is indeed already in place, but maybe the reuse of newly introduced IOHelper.decorateXYZ() there as well could be nice.

Other than that I think short naming of the newly provided IOHelper methods (in patch) would be nicer. For example through *overloading* them with the *same name*, something like:

{code}
public static BufferedInputStream buffered(InputStream in)
public static BufferedOutputStream buffered(OutputStream out)
public static BufferedReader buffered(Reader reader)
public static BufferedWriter buffered(Writer writer)
{code}

There're also comments I put on [2]

[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java
[2] http://camel.465427.n5.nabble.com/svn-commit-r1209404-in-camel-trunk-camel-core-src-main-java-org-apache-camel-impl-main-java-org-apac-tp5041426p5041639.html
bvahdat:1322939068:2011-12-04T03:04:28.189+0000:1322939068:2011-12-04T03:04:28.189+0000:Updated the patch according to the proposal by my previous comment. The patch now also includes the javadoc typo corrections I mentioned at [1].

[1] http://camel.465427.n5.nabble.com/svn-commit-r1209404-in-camel-trunk-camel-core-src-main-java-org-apache-camel-impl-main-java-org-apac-tp5041426p5041639.html
bvahdat:1323233365:2011-12-07T12:49:25.604+0000:1323233496:2011-12-07T12:51:36.337+0000:Another advantage of introducing & *reusing* of the 4 newly introduced IOHelper.buffered() methods (all over the places) is the fact that the following line (at least on Windows) prints 'true':

{code}
System.out.println(System.in instanceof BufferedInputStream);
{code}

Although System.in is declared to be of the type java.io.InputStream, however to me that's fair enough and makes sense to me. As the result through the reusage of these utility methods we could be more Heap friendly :-)

As an example I'm thinking of StreamConsumer having the following method signature:

{code}
    private BufferedReader initializeStream() throws Exception {
        // close old stream, before obtaining a new stream
        IOHelper.close(inputStreamToClose);

        if (""in"".equals(uri)) {
            inputStream = System.in;
            inputStreamToClose = null;
        } else if (""file"".equals(uri)) {
            inputStream = resolveStreamFromFile();
            inputStreamToClose = inputStream;
        } else if (""url"".equals(uri)) {
            inputStream = resolveStreamFromUrl();
            inputStreamToClose = inputStream;
        }
        Charset charset = endpoint.getCharset();
        return new BufferedReader(new InputStreamReader(inputStream, charset));
    }
{code}

Indeed we do here double-buffering while streaming (at least on Windows) once through BufferedReader (which has a default buffer size of 8192 chars) and once again through inputStream (in the case of System.in) which would allocate another buffer of the size 8192 bytes. On high-load & intensive applications using Apache Camel this could bring OOME much ealier that one would expect.

The possible approach using IOHelper here could be:

{code}
new InputStreamReader(IOHelper.buffered(inputStream), charset);
{code}
bvahdat:1323320535:2011-12-08T13:02:15.628+0000:1323320535:2011-12-08T13:02:15.628+0000:@Claus

any idea you would like to share about the provided patch?
davsclaus:1323329377:2011-12-08T15:29:37.067+0000:1323329377:2011-12-08T15:29:37.067+0000:Thanks for the work on this Babak. I am a bit busy today.

bvahdat:1323330338:2011-12-08T15:45:38.206+0000:1323330338:2011-12-08T15:45:38.206+0000:No problem at all, just take it easy :-)
davsclaus:1323416958:2011-12-09T15:49:18.299+0000:1323416958:2011-12-09T15:49:18.299+0000:Babak, I have granted your JIRA account karma to assign tickets. 

Thanks for this patch. I should have cycles to get it into the trunk.

You like @Override :)
davsclaus:1323417485:2011-12-09T15:58:05.114+0000:1323417485:2011-12-09T15:58:05.114+0000:There are some checkstyle issues.

You may want to read this page
http://camel.apache.org/building.html

And see how you can run a checkstyle test before submitting patches.
bvahdat:1323419231:2011-12-09T16:27:11.061+0000:1323419231:2011-12-09T16:27:11.061+0000:Thanks Claus :-)

I'll fix those checkstyle issues and will update the patch accordingly.
davsclaus:1323420050:2011-12-09T16:40:50.329+0000:1323420050:2011-12-09T16:40:50.329+0000:No worries there was only about 5 or so. So I fixed them.

Maybe next time, for bigger patches, do a checkstyle run."
0,CAMEL-4686,Improvement,Major,2.6.0,"2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,metatech,0,0,2011-11-16 11:03:46+00:00,2011-11-16 12:34:44+00:00,"When the message body is larger than 64KB, the message is stored on the disk by CachedOutputStream and read back later by FileInputStreamCache.
A thread dump during a load test shows that the execution is most of the time waiting in the ""InputStream.read()"" method calls.
The ""truss"" output shows that the file is read back 1 byte at a time, which makes the calls very slow.


A first workaround (setting property ""CamelCachedOutputStreamThreshold"" to 10000000 on the CamelContext's properties) helped in some case.  


The cause is that the FileInputStreamCache does not use a BufferInputStream to read on the disk, although the 
CachedOutputStream does properly use a BufferOutputStream.
See
http://java.sun.com/docs/books/performance/1st_edition/html/JPIOPerformance.fm.html#17675


A trivial patch is attached, which provides a fix.


Reference :
http://servicemix.396122.n5.nabble.com/DefaultTraceFormatter-is-very-slow-for-messages-gt-64KB-td4902840.html
This problem was first noticed when the trace was enabled on the CamelContext, but it occurs also in other scenarios.",davsclaus:1321417885:2011-11-16T12:31:25.950+0000:1321417885:2011-11-16T12:31:25.950+0000:Thanks for the patch.
0,CAMEL-4685,Improvement,Major,"2.8.2, 2.9.0",,"
None
",Closed,Not A Problem,None,Unassigned,Stephan Siano,0,1,2011-11-16 09:01:36+00:00,2013-05-07 10:57:19+00:00,"Camel blueprint does only work in conjunction with Aries blueprint 0.3, it fails with the current release 0.4.


The issue is somewhat related to CAMEL-4543 (completely removing the hard dependency to aries blueprint would of course also fix the dependency to a specific aries blueprint version).


The reason behind that version dependency is that the ExtendedBlueprintContainer inteface was moved from org.apache.aries.blueprint to org.apache.aries.blueprint.services between versions 0.3 and 0.4. The interface is referenced from the CamelContextFactoryBean and CamelProxyFactoryBean. I am not completely sure, but I guess that the lookup of the blueprint bundle context could also be performed in some other way.","siano:1321405927:2011-11-16T09:12:07.578+0000:1321405927:2011-11-16T09:12:07.578+0000:Just to clarify: the Blueprint chapter in the OSGi Enterprise spec (121.11.1) allows the injection of the blueprint bundle with
<bean class=""com.acme.FooImpl"">
<property name=""blueprintBundle"" ref=""blueprintBundle""/>
</bean>
siano:1367895439:2013-05-07T10:57:19.218+0000:1367895439:2013-05-07T10:57:19.218+0000:More current versions (2.11) do work with aries blueprint 1.0."
0,CAMEL-4684,Task,Major,None,None,"
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-11-15 14:45:46+00:00,2011-12-09 14:40:00+00:00,"As the camel-exec uses commons-io 1.4 and other camel components use commons-io 1.3.2, we should algin the commons-io version to 1.4.","jerryscott2012:1321519743:2011-11-17T16:49:03.986+0000:1321519743:2011-11-17T16:49:03.986+0000:why not use commons-io 2.1 as it is based on jdk1.5
davsclaus:1323406410:2011-12-09T12:53:30.158+0000:1323406410:2011-12-09T12:53:30.158+0000:Willem whats the status of this ticket?
njiang:1323412706:2011-12-09T14:38:26.739+0000:1323412706:2011-12-09T14:38:26.739+0000:Applied patch into trunk and camel-2.8.x branch.
njiang:1323412800:2011-12-09T14:40:00.014+0000:1323412800:2011-12-09T14:40:00.014+0000:@Jerry,
We may move to commons-io 2.1 in camel 3.0.
Now I just want to align the commons-io version."
0,CAMEL-4683,Improvement,Major,"2.7.4, 2.8.2","2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-11-15 14:14:31+00:00,2011-11-18 01:44:13+00:00,"See nabble
http://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.html


We should add option consumer.transacted to allow end users to control if they want the JpaConsumer to run in transacted mode, where by if one exchange failed to be processed, the entire batch is rolled back. If not, then all the good messages will be committed, and only the failed message will rollback.",
0,CAMEL-4682,Bug,Minor,"2.7.4, 2.8.2","2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-11-15 13:14:15+00:00,2011-11-18 01:43:26+00:00,"We should not clear the lifecycleStrategies on CamelContext when stop() is invoked, as if we restart by invoking start(), the lifecycle strategies should be in use again.",
0,CAMEL-4681,Task,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-11-15 12:57:10+00:00,2011-11-18 01:28:12+00:00,"In CAMEL-4671 we remove bunch of xml spec API bundles which has the packages those can be export for JRE itself.
The xml-spec-api(activateion, jaxb, stax) feature is introduced in case of the jre doesn't exports these packages.",
0,CAMEL-4680,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-15 12:04:11+00:00,2012-03-05 09:23:17+00:00,"When manually starting a route we should check if any existing running route consumers, may cause a clash with multiple consumers, if endpoint does not support multiple consumer.


See CAMEL-4650",
0,CAMEL-4679,Bug,Major,2.8.1,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,David Valeri,0,0,2011-11-15 00:40:28+00:00,2011-11-15 16:19:44+00:00,"If one sets a password in the URI for this component, the password is concatenated with the username when the URI is ""sanitized"" by IrcConfiguration#sanitize and is not properly parsed when reread by the IrcConfiguration#configure operation.


The result is that the concatenated combo is sent as the username and the colon is an illegal character.  The user's secret is also sent with their username and may inadvertently end up in log files.


If one specifies a port in the URI for this component, the port is not a URI parameter and is not handled by the IrcConfiguration#configure method.  The port is ignored and the default port range of 6667-6669 is attempted.",
0,CAMEL-4678,Improvement,Minor,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-11-14 18:00:46+00:00,2011-11-14 18:17:33+00:00,"A custom lifecycle strategy can veto starting CamelContext in case something is wrong etc.
This can be done by throwing the VetoCamelContextStartException in the onCamelContextStart method.


However currently the exception is re-thrown all the way causing the osgi container to regard the bundle in failure state.
Where as you may want the bundle to start properly, but what you intend to do is to prevent CamelContext itself from starting.


For example currently you will get this state
 [ 218] [Active     ] [Failure     ] [       ] [   60] Camel Demo App for Veto starting a CamelContext (1.0.0)


And this error in the log
 15:58:13,057 | ERROR | rint Extender: 1 | BlueprintContainerImpl           | ?                                   ? | 10 - org.apache.aries.blueprint - 0.3.1 | Unable to start blueprint container for bundle foo","davsclaus:1321265853:2011-11-14T18:17:33.231+0000:1321265853:2011-11-14T18:17:33.231+0000:There is now a boolean you can pass in the ctr of the veto exception to control if the exception should be suppressed or not. For example with OSGi you most likely want this to have the bundle in a working state.
"
0,CAMEL-4677,Task,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Scott England-Sullivan,0,0,2011-11-14 16:16:35+00:00,2011-12-02 08:21:52+00:00,"The schema definition for Camel CXF Blueprint is not publicly available in any form.  Following other Camel XML DSL releases, the XSD should be included as part of the release process and located at:



http://camel.apache.org/schema/blueprint/cxf



It should also appear in the Maven Repository along side the Spring DSL XSD.


I may be missing something but I believe the following TODOs cover what is needed to clean this up:



Update the WIKI: (Claus has already fixed this)
https://cwiki.apache.org/confluence/display/CAMEL/Release+Guide




Update the POM to attach it with a classifier of blueprint




The schemas for the corresponding versions need to be uploaded to the Camel Schema site:
http://camel.apache.org/schema/blueprint/cxf



Thanks,
Scott ES","sully6768:1321261625:2011-11-14T17:07:05.938+0000:1321261625:2011-11-14T17:07:05.938+0000:Patch includes fix to attach the *Blueprint DSL XSD* with a classifier of *blueprint*.  It also adds a classifier of *spring* to the to the *Spring DSL XSD*.
sully6768:1321456721:2011-11-16T23:18:41.907+0000:1321456721:2011-11-16T23:18:41.907+0000:Regarding the Release WIKI:

Line 7 should read:
Copy the newly deployed camel-cxf-X.Y.Z-*spring*.xsd file...

Line 9 should read:
Copy the newly deployed camel-cxf-X.Y.Z-*blueprint*.xsd file...

I would also suggest swapping line 7 & 8 or 8 & 9 so both camel-cxf release steps happen concurrently.

Thanks,
Scott ES
njiang:1322785312:2011-12-02T08:21:52.271+0000:1322785312:2011-12-02T08:21:52.271+0000:Applied patch into trunk and 2.8.x branch, also updated the wiki."
0,CAMEL-4676,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.8.3, 2.9.0",Freeman Yue Fang,Freeman Yue Fang,0,0,2011-11-14 06:50:13+00:00,2011-11-14 07:11:47+00:00,"split camel-script-optional into
camel-script-javascript 
camel-script-groovy
camel-script-jruby
so that we can control granularity much better, and version upgrades will be more manageable.
In most cases, if the user does scripting, he'll probably standardise on only one particular language for all his routes.","ffang:1321225907:2011-11-14T07:11:47.311+0000:1321225907:2011-11-14T07:11:47.311+0000:also specify mvn repo url for google scriptengines stuff which isn't in maven central repo so that needn't change Karaf/Servicemix etc/org.ops4j.pax.url.mvn.cfg before install
camel-script-***.
commit fix
http://svn.apache.org/viewvc?rev=1201612&view=rev for trunk
http://svn.apache.org/viewvc?rev=1201613&view=rev for 2.8.x branch"
0,CAMEL-4675,Task,Minor,2.8.2,None,"
None
",Closed,Fixed,"2.7.5, 2.8.4, 2.9.0",Christian Müller,Christian Müller,0,0,2011-11-13 05:31:10+00:00,2013-05-02 02:29:47+00:00,"In our feature file we use qpid version 0.5.0_2.
In our camel-amqp component we use qpid version 0.10.
The actual version is 0.12.","muellerc:1322221765:2011-11-25T19:49:25.286+0000:1322221806:2011-11-25T19:50:06.543+0000:In camel-parent pom.xml we use the folowing OSGI default imports:

{code}
    <camel.osgi.import.defaults>
      ...
      org.apache.qpid.*;version=""[0.5,0.6)"",
      ...
    </camel.osgi.import.defaults>
{code}

We have to allign this also.
muellerc:1322222239:2011-11-25T19:57:19.870+0000:1322222239:2011-11-25T19:57:19.870+0000:camel-amqp runs fine with qpid version 0.12.
I will commit a patch after we also got an OSGI bundle for it from the SMX guys.
muellerc:1322406188:2011-11-27T23:03:08.753+0000:1322406188:2011-11-27T23:03:08.753+0000:We have now an OSGI bundle for this dependency. I will upgrade to this version, after the version is released by the SMX guys (at the moment we only have a SNAPSHOT version)."
0,CAMEL-4674,Task,Minor,2.8.2,"2.8.4, 2.9.0","
None
",Closed,Fixed,"2.8.4, 2.9.0",Christian Müller,Christian Müller,0,0,2011-11-13 05:06:12+00:00,2011-12-01 22:18:00+00:00,"In our feature file we use hamcrest version 1.2-dev1_1
In our camel-guice component we use hamcrest version 1.1.",muellerc:1322749080:2011-12-01T22:18:00.994+0000:1322749080:2011-12-01T22:18:00.994+0000:Camel 2.7.5 already use hamcrest 1.2-dev1. I'm wondering why...
0,CAMEL-4673,Task,Minor,2.9.0,None,"
None
",Closed,Fixed,"2.7.5, 2.8.4, 2.9.0",Christian Müller,Babak Vahdat,0,0,2011-11-12 20:11:38+00:00,2011-11-20 17:12:15+00:00,"The pom of the components:



camel-amqp
camel-jmx
camel-msv



include the repository 'repo.fusesource.com/maven2-all' for the source of their required dependencies, however all those dependencies are already available on the central repo.


This fix also mitigates the case where the fusesource repo server is down, see [1] for details.


[1] http://camel.465427.n5.nabble.com/http-repository-apache-org-does-NOT-respond-tp4957786p4987167.html","muellerc:1321777888:2011-11-20T16:31:28.150+0000:1321777888:2011-11-20T16:31:28.150+0000:I removed my local maven repo and run a mvn clean install -Pfastinstall after applying the patch. I didn't hit an issue.
muellerc:1321780045:2011-11-20T17:07:25.744+0000:1321780045:2011-11-20T17:07:25.744+0000:For the Camel 2.7.x branch, we still need the FuseSource Maven repo.
muellerc:1321780335:2011-11-20T17:12:15.030+0000:1321780335:2011-11-20T17:12:15.030+0000:Thank you Babak for the patch."
0,CAMEL-4672,Bug,Minor,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,1,0,2011-11-12 14:32:23+00:00,2011-11-12 15:04:26+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bindy-CSV-marshal-does-not-properly-quote-values-defined-by-the-CsvRecord-separator-td4809017.html


Its fairly common to marshal to/from with quotes in CSV format.
We should make this easier by adding an attribute to @CsvRecord where you can define a quote char to use, either single or double etc.",davsclaus:1321081466:2011-11-12T15:04:26.620+0000:1321081466:2011-11-12T15:04:26.620+0000:There is now a {{quote}} attribute you can specify on @CsvRecord
0,CAMEL-4671,Bug,Major,2.8.2,None,"
None
",Resolved,Won't Fix,None,Guillaume Nodet,Guillaume Nodet,0,1,2011-11-11 20:57:34+00:00,2012-06-19 05:02:01+00:00,Those are supposed to be provided by the JRE and deploying those cause problems when the osgi does not hide those packages.,"gnodet:1321082327:2011-11-12T15:18:47.488+0000:1321082327:2011-11-12T15:18:47.488+0000:There are two cases here.
When deploying in Karaf using a default JRE 1.6 profile, jaxb2 spec and impl are provided by the JRE and thus not required.
When deploying on a JRE 1.5 profile (even using a 1.6 JRE, i.e. hiding the new packages), those will have to be deployed by the user.
A possible alternative would be to create two different features, but I don't really think it's necessary.
njiang:1324573830:2011-12-23T01:10:30.650+0000:1324573830:2011-12-23T01:10:30.650+0000:This patch is revert in Camel 2.8.4 to maintain the backward compatibility of Camel 2.8.x
http://svn.apache.org/viewvc?rev=1222332&view=rev
http://svn.apache.org/viewvc?rev=1222435&view=rev
 
jbonofre:1324687750:2011-12-24T08:49:10.869+0000:1324687750:2011-12-24T08:49:10.869+0000:Even using a JRE 1.6 profiles (with Karaf 2.2.4), the JAXB bundles are required (version mismatch).
dkulp:1324997119:2011-12-27T22:45:19.758+0000:1324997119:2011-12-27T22:45:19.758+0000:
This change is causing issues with several components.   We're looking for better solutions that can be provided by future versions of Karaf.
davsclaus:1340053321:2012-06-19T05:02:01.676+0000:1340053321:2012-06-19T05:02:01.676+0000:Yeah for now lets avoid this change in the 2.x timeline, as it causes problems."
0,CAMEL-4670,Bug,Major,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Guillaume Nodet,Guillaume Nodet,0,0,2011-11-11 20:56:26+00:00,2011-11-14 16:07:16+00:00,"It forbids camel to be deployed on 1.5, which can be problematic when using an OSGi container with some packages hidden.","davsclaus:1321065816:2011-11-12T10:43:36.780+0000:1321065816:2011-11-12T10:43:36.780+0000:Camel requires JDK6+.

The code uses JDK6+ only API so its not possible to run camel-core on JDK1.5 or older.

gnodet:1321082401:2011-11-12T15:20:01.374+0000:1321082401:2011-11-12T15:20:01.374+0000:Yeah, I'm not deploying on JDK 1.5, but rahter on a JDK 1.6 with hidden packages.  The reason to hide those packages is if you want to provide your own implementation of JAXB, STAX, JAXWS or any other specs.  In such a case, you need to hide the packages and it's quite easy to make sure camel can support this use case."
0,CAMEL-4669,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Rich Newcomb,0,0,2011-11-11 15:22:09+00:00,2011-12-06 07:43:17+00:00,"Add JMX support for cache clearing to the abstract ResourceEndpoint class from camel-core. This allows freemarker, velocity and other components that use this class to have the ability to force a re-load of cached resources.","rnewcomb:1322776866:2011-12-02T06:01:06.811+0000:1322776866:2011-12-02T06:01:06.811+0000:Patch attached.

NOTE: this patch adds @Inherited to the org.apache.camel.api.management.ManagedResource annotation definition.  This seems appropriate to me; however, I would like verification from the camel riders that it will not cause unwanted side-effects. 

I can modify the patch to explicitly decorate leaf-node ResourceEndpoint classes with this annotation if there is an issue.
davsclaus:1323128596:2011-12-06T07:43:16.844+0000:1323128596:2011-12-06T07:43:16.844+0000:Thanks for the patch."
0,CAMEL-4668,Bug,Major,"2.7.4, 2.8.2","2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,1,2,2011-11-11 12:46:36+00:00,2011-11-13 13:53:27+00:00,"If a JPA consumer pickup X messages and then one of those messages fails to be processed and throws an exception, then the JPA consumer should detect this and mark the TX as rollback.


Currently there is a flaw which causes the JPA consumer to commit the batch.


See nabble
http://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.html","bvahdat:1320990999:2011-11-11T13:56:39.317+0000:1320990999:2011-11-11T13:56:39.317+0000:There's something baffling me here, which I like to understand/learn how it's possible that it works!

Looking at [1] there's no try/catch or onException(....).handled(true) or the likes on the route, so sending the payload SendEmail(""kaboom@beer.org"") should blow up with a CamelExecutionException wrapping the thrown IllegalArgumentException(""Forced"") through the usage of the template on the client side (in this case the test method testTXRollback()) but it doesn't!!!

For sure I'm missing some pieces of this tricky puzzle...


[1] https://svn.apache.org/repos/asf/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaTXRollbackTest.java
davsclaus:1320991477:2011-11-11T14:04:37.725+0000:1320991477:2011-11-11T14:04:37.725+0000:Its 2 different things:
1: The template send 3 messages to INSERT data into the database.
2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.

bvahdat:1320992023:2011-11-11T14:13:43.831+0000:1320993486:2011-11-11T14:38:06.998+0000:But if I start the route as the first step in the test method it *still* passes:

{code}
    @Test
    public void testTXRollback() throws Exception {
        // start route
        context.startRoute(""foo"");

        // first create three records
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""foo@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""bar@beer.org""));
        template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));

        // should rollback the entire
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        // we should retry and try again
        mock.expectedMinimumMessageCount(4);

        assertMockEndpointsSatisfied();

        assertTrue(""Should be >= 2, was: "" + foo.intValue(), foo.intValue() >= 2);
        assertTrue(""Should be >= 2, was: "" + bar.intValue(), bar.intValue() >= 2);
    }

{code}

And what I've learned is that the call at the line:
{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

should at the latest by now blow up with a CamelExecutionException but still it doesn't!
davsclaus:1321062602:2011-11-12T09:50:02.940+0000:1321062602:2011-11-12T09:50:02.940+0000:Sending to JPA does *not* fail. So the 3 template code lines works fine.

Its the Camel route that fails. The JPA consumer is scheduled, so it will poll again later (after 2sec). And it will keep failing due that hardcoded exception being thrown. But foo and bar records will be fine, but as they are part of the same TX, they will also rollback. So the foo and bar counter will keep incrementing.
preben:1321071437:2011-11-12T12:17:17.335+0000:1321071437:2011-11-12T12:17:17.335+0000:@Claus

Regarding the jmx statistics I added this to your test:

        MBeanServer mBeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer();
        Set<ObjectName> objNameSet = mBeanServer.queryNames(new ObjectName(""org.apache.camel:type=routes,name=\""foo\"",*""), null);
        ObjectName managedObjName = new ArrayList<ObjectName>(objNameSet).get(0);
        Long exchangesCompleted = (Long) mBeanServer.invoke(managedObjName, ""getExchangesCompleted"", null, null);
        Long exchangesFailed = (Long) mBeanServer.invoke(managedObjName, ""getExchangesFailed"", null, null);
     
        assertTrue(""Should be 0 since they are rolled back, was : "" + exchangesCompleted, 0 == exchangesCompleted);
        assertTrue(""Should be >=2, was: "" + exchangesFailed , exchangesFailed >= 2);

Now the test fails since there are completed exchanges. Shouldn't the jmx statistics reflect that the exchange actual did not complete (rolled back) as the test implies ?


bvahdat:1321110848:2011-11-12T23:14:08.783+0000:1321110848:2011-11-12T23:14:08.783+0000:@Claus,

As Preben tries to push his JMX expectations I insist on my Routing expectations. Really not an easy job for you, but I really appreciate your contribution.

You said:

2: Then the route is started, which starts the consumer, it then pickup the 3 messages. And fail processing the last message. Which forces all 3 to rollback. So when it poll again, it find the 3 messages, and try again etc.

However a slight modification of this test case by me (see the attachment) proves the opposite, that is, after routing is completed there're *3* rows in the table! I've a suspection that somewhere along the way the thrown IllegalArgumentException(""Forced"") is simply swallowed!

Again my expectation is that the call to

{code}
template.sendBody(""jpa://"" + SendEmail.class.getName(), new SendEmail(""kaboom@beer.org""));
{code}

Should blow up with a CamelExecutionException, but that's another story which I still don't understand :-(
preben:1321152824:2011-11-13T10:53:44.460+0000:1321152824:2011-11-13T10:53:44.460+0000:@Babak

When you send using the template the records are inserted in its own tx so they should be committed as base for the test to run, and not rolled back. See attached patch.

I'm still not happy about the jmx stats though. 
bvahdat:1321157250:2011-11-13T12:07:30.504+0000:1321157487:2011-11-13T12:11:27.551+0000:@Prebsen,

thanks for you comment, but the patch you attached reveals exactly the same behaviour as my attached patch also does, as you added the following assertion:

{code}
List<?> foundSendEmails = jpaTemplate.find(SELECT_ALL_STRING);
assertTrue(""Expect table 3 elements in SendEmail, was: "" + foundSendEmails.size(), foundSendEmails.size() == 3);
{code}

And this is *exactly* what I do *NOT* expect. Apparently according to what Claus said, the transaction should have been *rollbacked*. So after the routing of those 3 payloads completes the transaction through the spring's JpaTransactionManager should have been *rollbacked*, *but it's NOT*, as there're three rows on that table having the addresses 'foo@beer.org', 'bar@beer.org', and 'kaboom@beer.org'.

Maybe it's because of my poor english why I don't get the point. Anyone available who could explain it to me in german, or may be even better in my mother tongue persian :-)

Thanks anyway.
bvahdat:1321163607:2011-11-13T13:53:27.043+0000:1321163607:2011-11-13T13:53:27.043+0000:O.K. it took long for me to get the point but now I've got it! Sorry for my misapprehension. "
0,CAMEL-4667,Task,Major,None,2.8.3,"
None
",Resolved,Fixed,2.8.3,Willem Jiang,Willem Jiang,0,0,2011-11-11 06:53:19+00:00,2011-11-16 01:43:45+00:00,"CXF 2.4.4 is out for while, we should consider to upgrade it in camel 2.8.x branch.",
0,CAMEL-4666,Improvement,Major,None,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Müller,Björn Bength,1,1,2011-11-10 21:36:09+00:00,2011-11-12 06:05:23+00:00,"When validating XML files against schema files, it's fairly common they import other schemas and it's faily common they cannot be found, or reached, at the specified schema location. Their location must therefore be rewritten, or resolved, to find the the correct schema-file elsewhere.
Apache's xml-resolver implements support for oasis and xcatalog formats.","bjoben:1320932854:2011-11-10T21:47:34.378+0000:1320932854:2011-11-10T21:47:34.378+0000:Since I didn't find a way to configure a catalog resolver I implemented it myself to see if would work.
I have a patch that implements this, but as this component lives in camel-core and camel-core seems like it's got a really bare minimum of dependencies and this patch brings in apache xml-resolver, I didn't want to submit it as is.
bjoben:1320937034:2011-11-10T22:57:14.292+0000:1320937293:2011-11-10T23:01:33.668+0000:applies to camel-core.
decided to upload my little patch to have something to think about.

the usage of this implementation is:

from("".."")
to(""validator:schema.xsd?catalog=catalog.cat"")
....


muellerc:1320946225:2011-11-11T01:30:25.235+0000:1320946225:2011-11-11T01:30:25.235+0000:Björn,  I have a look on it right now.
I prefer something like:
{code:java}
to(""validator:schema.xsd?resourceResolver=#resourceResolver"")
{code}

With this, camel-core doesn't have an additional dependency to ""xml-resolver:xml-resolver"". If the user decide to use the ""xml-resolver:xml-resolver"", than it's fine and it will work.
Give me a bit time with your patch...
bjoben:1320966233:2011-11-11T07:03:53.484+0000:1320966233:2011-11-11T07:03:53.484+0000:Yes, i sent a separate email to the dev-list with this question:

Should we make an improvement to specify a catalog file on the
validator uri? (simple but ""limited"" to just this catalog resolver)
Or should the validator processor and component offer a setter to
inject whatever entity resolver and make this catalog resolver a
separately configured bean. (more complex to configure but flexible).
And where to put that bean as some kind of custom entity resolver bean
glue code is necessary I think beacuse xml-resolver can't do it by
itself.
What do you think?


The problem with the more flexible solution is it requires extensive work by the end-user as he need to write this wrapper-code and then configure it a lot more.
Compare with for example ""xjc"" tool or the ""maven-jaxb2-plugin"" where you can specify a catalog file. Plain and simple.
If this glue code can be provided in another camel module, it would be a little less problem. Just a lot more configuration for the end-user.
I'm of course open to any solution to this problem because now the validation component is mostly useless to all my use cases.





muellerc:1321022757:2011-11-11T22:45:57.260+0000:1321022757:2011-11-11T22:45:57.260+0000:Björn, thank you very much for your patch.
I changed it a bit regarding to be able to look up a reference to a org.w3c.dom.ls.LSResourceResolver instance in the registry and some check style issues (see [] for details).

I share your doubts that this is not the best solution, because each user has to provide its own org.w3c.dom.ls.LSResourceResolver implementation to use this functionality. On the other site, we try to avoid to have additional dependencies in camel-core to be so light weight as possible. May we should consider to externalize this functionality into it's own component and provide a good org.w3c.dom.ls.LSResourceResolver implementation...

[1] http://camel.apache.org/building.html

P.S.: I didn't back port this fix into the camel-2.8.x and camel-2.7.x branch because in these versions the validator component was part of camel-spring and makes a bit harder to back port this change. But feel free to raise your voice if it's needed...
bjoben:1321025851:2011-11-11T23:37:31.633+0000:1321025851:2011-11-11T23:37:31.633+0000:very well,

it works, but I really think camel somewhere should depend on xml-resolver (without dragging in CXF...). 
And that CatalogLSResourceResolver and all the ""initialization"" code you put in the test case should be easily available, somehow, to every camel user that isn't a java jedi knight. 
Or maybe the validator shouldn't even be in core?
Maybe I should put (all other code) on GitHub somewhere, so everyone doesn't have to dig through camel unit test source code to find out how to use it? :)



muellerc:1321049123:2011-11-12T06:05:23.374+0000:1321049123:2011-11-12T06:05:23.374+0000:http://camel.465427.n5.nabble.com/DISCUSS-Extract-camel-validator-from-camel-core-td4986357.html"
0,CAMEL-4665,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,David Valeri,David Valeri,0,0,2011-11-10 20:42:54+00:00,2012-03-05 16:44:14+00:00,Allow the configuration of SSL options through the use of the Camel JSSE Configuration Util.,
0,CAMEL-4664,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,David Valeri,0,0,2011-11-10 20:42:11+00:00,2011-11-15 16:19:17+00:00,Allow the configuration of SSL options through the use of the Camel JSSE Configuration Util.,
0,CAMEL-4663,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,David Valeri,0,0,2011-11-10 20:41:19+00:00,2011-11-15 16:19:09+00:00,Allow the configuration of SSL options through the use of the Camel JSSE Configuration Util.,
0,CAMEL-4662,New Feature,Major,2.8.2,"2.7.5, 2.8.4, 2.9.0","

patch

",Closed,Fixed,"2.7.5, 2.8.4, 2.9.0",Christian Müller,Daniel Gredler,0,0,2011-11-10 16:44:17+00:00,2011-11-29 21:36:23+00:00,"When I first started using Camel, I expected something like this to automatically batch SQL update statements:


from(""direct:foo"")
    .aggregate(constant(""all""), new StringCollector())
    .completionSize(20) // batch size = 20
    .completionTimeout(5000)
    .to(""sql:insert into foo values (#)?dataSourceRef=ds"")


I was surprised when this wasn't the case, because in general batching SQL update statements is much more efficient than executing them individually, and is best practice when there is a lot of data involved.


The attached patch adds a ""batch"" attribute to the SQL component (default value is false), which should only be set to true for SQL update statements (insert, update, delete). If the ""batch"" attribute is true, then the interpretation of the inbound message body changes slightly – instead of an Iterator of parameters, the component expects an Iterator that contains the parameter Iterators; the size of the outer Iterator determines the batch size.","sdanig:1320914890:2011-11-10T16:48:10.294+0000:1320914890:2011-11-10T16:48:10.294+0000:patch to trunk
muellerc:1321050794:2011-11-12T06:33:14.524+0000:1321050794:2011-11-12T06:33:14.524+0000:I will work tomorrow on it...
sdanig:1321561278:2011-11-18T04:21:18.487+0000:1321561278:2011-11-18T04:21:18.487+0000:Hi Christian,

Have you had a chance to look at the patch? Let me know if anything needs to be changed.

Take care,

Daniel
muellerc:1322573783:2011-11-29T21:36:23.429+0000:1322573783:2011-11-29T21:36:23.429+0000:Thank you Daniel for the patch"
0,CAMEL-4661,Improvement,Minor,2.9.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Bernhard Schuhmann,0,2,2011-11-10 15:50:49+00:00,2013-05-26 09:58:22+00:00,"There's a comment in the constructor code that explains headers are currently not copied for a reason and that this should be fixed with Camel 3.0. Wanted to create a JIRA to track the requirement.


We'd need the original in message including all headers it was carrying when it got dequeued.",davsclaus:1369533502:2013-05-26T09:58:22.165+0000:1369533502:2013-05-26T09:58:22.165+0000:Has bee fixed by CAMEL-5052
0,CAMEL-4660,Bug,Minor,2.8.2,"2.8.3, 2.9.0","

Aggregation

",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Ole Kristian Hofstad,0,1,2011-11-10 14:33:38+00:00,2011-11-11 09:13:24+00:00,"When setting the completionInterval on an aggregator, the first completion will be triggered after 1000ms. The reason is the hardcoded initial delay in AggregateProcessor.


This behavior has not been documented and is not expected. The expected behavior is for the first completion to be triggered after the given interval. The first completion would then be triggered after completionInterval, the second after 2 * completionInterval, the third after 3 * completionInterval and so on.","okhofstad:1320907054:2011-11-10T14:37:34.406+0000:1320907054:2011-11-10T14:37:34.406+0000:Patch which sets the initial delay to the same value as the completionInterval
okhofstad:1320910852:2011-11-10T15:40:52.442+0000:1320910852:2011-11-10T15:40:52.442+0000:Added patch with test to reproduce the problem
davsclaus:1320974004:2011-11-11T09:13:24.367+0000:1320974004:2011-11-11T09:13:24.367+0000:Thanks for the patch"
0,CAMEL-4659,Bug,Major,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Guillaume Nodet,0,0,2011-11-10 13:53:38+00:00,2013-05-02 02:29:46+00:00,"We need to import the package with [0.6,1) instead of [0.10,1) to be able to deploy on oder karaf versions (< 2.2.4)","davsclaus:1320975067:2011-11-11T09:31:07.293+0000:1320975067:2011-11-11T09:31:07.293+0000:The imports is now
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.10,1)"";status=provisional,org.apache.karaf.shell.console;versi
 on=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.bl
 ueprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code}

I wonder if the org.apache.felix.service.command should also be [0.6,1) range as well?
davsclaus:1320975129:2011-11-11T09:32:09.048+0000:1320975129:2011-11-11T09:32:09.048+0000:A patch
{code}
Index: pom.xml
===================================================================
--- pom.xml	(revision 1200770)
+++ pom.xml	(working copy)
@@ -71,7 +71,7 @@
           <instructions>
             <Import-Package>
               org.apache.felix.service.command,
-              org.apache.felix.gogo.commands,
+              org.apache.felix.gogo.commands;version=""[0.6,1)"",
               org.apache.karaf.shell.console,
               *
             </Import-Package>
{code}
njiang:1320979232:2011-11-11T10:40:32.892+0000:1320979232:2011-11-11T10:40:32.892+0000:@Claus
I think you need to specify the version range of org.apache.felix.service.command.
If you doesn't specify it, the bundle plugin will pickup the version range according to meta-info of the bundle which is managed by the pom dependencies.
davsclaus:1320980721:2011-11-11T11:05:21.160+0000:1320980721:2011-11-11T11:05:21.160+0000:Thanks Willem, here is MANIFEST.MF after the change
{code}
Import-Package: javax.management,jline.console.completer;version=""[2.5
 ,3)"",org.apache.camel;version=""[2.9,3)"",org.apache.camel.model;versio
 n=""[2.9,3)"",org.apache.camel.spi;version=""[2.9,3)"",org.apache.felix.g
 ogo.commands;version=""[0.6,1)"",org.apache.felix.service.command;versi
 on=""[0.6,1)"";status=provisional,org.apache.karaf.shell.console;versio
 n=""[2.2,3)"",org.osgi.framework;version=""[1.5,2)"",org.osgi.service.blu
 eprint;version=""[1.0.0,2.0.0)"",org.slf4j;version=""[1.6,2)""
{code}
davsclaus:1320980791:2011-11-11T11:06:31.467+0000:1320980791:2011-11-11T11:06:31.467+0000:Before the change the bundle plugin appended status=provisional to the import.
{code}
org.apache.felix.service.command;version=""[0.10,1)"";status=provisional
{code}

Should we do that as well?
njiang:1320981917:2011-11-11T11:25:17.101+0000:1320981917:2011-11-11T11:25:17.101+0000:Here are some information about the provisional[1], I think it is introduced by felix bundle itself.
[1]http://felix.apache.org/site/provisional-osgi-api-policy.html
njiang:1320983786:2011-11-11T11:56:26.588+0000:1320983786:2011-11-11T11:56:26.588+0000:Applied the patch into trunk and camel 2.8.x branch."
0,CAMEL-4658,Bug,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Aleksey Sushko,0,0,2011-11-10 13:49:44+00:00,2013-05-02 02:29:46+00:00,"Compiling my project is done using maven pluggins
maven-dependency-plugin and features-maven-plugin.
First unpack apache-karaf-2.2.3.zip.
The second component uses mvn:org.apache.camel.karaf/apache-camel/${ camel-version }/xml/features


karaf-version = 2.2.3
camel-version = 2.9.0-SNAPSHOT (build 2011-11-10)


Establish the following set of components



<feature version='${karaf-version}'>ssh</feature>
<feature version='${karaf-version}'>config</feature>
<feature version='${karaf-version}'>webconsole</feature>
<feature version='${karaf-version}'>wrapper</feature>

<feature version='${camel-version}'>camel-blueprint</feature>
<feature version='${camel-version}'>camel-ftp</feature>
<feature version='${camel-version}'>camel-http</feature>
<feature version='${camel-version}'>camel-http4</feature>
<feature version='${camel-version}'>camel-quartz</feature>




After starting karaf error log ${karaf.data}/log/karag.log



2011-11-10 16:19:51,128 | ERROR | Thread-6                                                           | FeaturesServiceImpl              | s.internal.Features
ServiceImpl$1  977 | 11 - org.apache.karaf.features.core - 2.2.3 | Error installing boot features
java.lang.Exception: Could not start bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.9.0-SNAPSHOT in feature(s) camel-core-2.9.0-SNAPSHOT: Unresolve
d constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: missing requirement [95.0] package; (&(package=org.apache.fe
lix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))
        at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:353)[11:org.apache.karaf.features.core:2.2.3]
        at org.apache.karaf.features.internal.FeaturesServiceImpl$1.run(FeaturesServiceImpl.java:975)[11:org.apache.karaf.features.core:2.2.3]
Caused by: org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.karaf.camel-karaf-commands [95]: Unable to resolve 95.0: miss
ing requirement [95.0] package; (&(package=org.apache.felix.gogo.commands)(version>=0.10.0)(!(version>=1.0.0)))




We must add a dependency on a component in a file features.xml


Camel 2.8.1 and 2.7.0 to work correctly.",
0,CAMEL-4626,Task,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-06 13:45:16+00:00,2011-11-06 13:48:27+00:00,Jersey 1.10 has been released.,
0,CAMEL-4625,Improvement,Minor,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-11-06 11:05:55+00:00,2011-11-06 11:42:59+00:00,"Some components like FTP must process the consumer fully synchronous so the completion tasks is executed by the same thread as the consumer. This is because the FTP client is not thread safe and do not support another thread to process the completion.


For example when you do FTP -> async (eg NMR, Jetty, etc.)


The most flexible way of doing this is to allow a consumer to mark the exchange to be processed fully sync by the unit of work processor.
This can be done by an exchange property, the consumer can set on the created exchange.",
0,CAMEL-4624,Task,Minor,None,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Müller,Christian Müller,0,0,2011-11-05 14:38:53+00:00,2011-11-05 15:41:33+00:00,This dependency is only used as test dependency and in our examples,muellerc:1320478893:2011-11-05T15:41:33.847+0000:1320478893:2011-11-05T15:41:33.847+0000:I will not back port this issue because it's only used for tests and in the examples
0,CAMEL-4623,Task,Minor,None,None,"
None
",Closed,Fixed,"2.7.5, 2.8.4, 2.9.0",Christian Müller,Christian Müller,0,0,2011-11-05 14:31:40+00:00,2013-05-02 02:29:47+00:00,"From commons-pool 1.5.4 to 1.5.6 they fixed 13 bugs:


commons-pool 1.5.5 release notes
commons-pool 1.5.6 release notes


I'm wondering whether we still need a bundle from the SMX guys, because they removed the ""Import-Package"" definition in the MANIFEST.MF file, which was the reason for the SMX bundle when I remember right.
But there is still a difference. The SMX bundle includes the uses:="""" definition in the Export-Package definition which the commons-pool-1.5.6 doesn't use.
Could an OSGI expert (JB?) tell me if this is a problem?


commons-pool-1.5.4.jar:



Export-Package: org.apache.commons.pool.impl;version=""1.5.4"",org.apach
 e.commons.pool;version=""1.5.4""
Import-Package: org.apache.commons.pool;version=""1.5.4"",org.apache.com
 mons.pool.impl;version=""1.5.4""




org.apache.servicemix.bundles.commons-pool-1.5.4_3.jar:



Export-Package: org.apache.commons.pool.impl;uses:=""org.apache.commons
 .pool"";version=""1.5.4"",org.apache.commons.pool;version=""1.5.4""




commons-pool-1.5.6.jar:



Export-Package: org.apache.commons.pool.impl;version=""1.5.6"",org.apach
 e.commons.pool;version=""1.5.6""",
0,CAMEL-4622,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-11-05 14:22:30+00:00,2011-11-05 14:51:04+00:00,"Currently there is no way to define a node range for the available operations. Some examples:
i) List nodes operation, will list all nodes regardless of state, group, image id etc.
ii) Run script operation will require the id of a single node to run a script.
iii) Destroy node will require the id of  a single node to destroy.


In would be really useful, if we could use predicates for filtering. Such fundtionality would allow us for example to list all nodes that are in RUNNING state and/or belong to group X.


This will also allow to uses ""multiple nodes"" for operations that till now apply to a single node, which will have to be identified using its node id.",
0,CAMEL-4621,Task,Minor,None,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Müller,Christian Müller,0,0,2011-11-05 13:49:45+00:00,2011-11-05 13:59:09+00:00,No Desc,muellerc:1320472749:2011-11-05T13:59:09.838+0000:1320472749:2011-11-05T13:59:09.838+0000:It's only a test dependency. Therefore I think it's not necessary to back port this change.
0,CAMEL-4620,Task,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-05 12:22:23+00:00,2011-11-05 13:04:53+00:00,"MyBatis 3.0.6 has been released. The 3.0.5 had a osgi bug which caused it to not work in osgi.
The 3.0.6 ought to work as I helped test their SNAPSHOT release back then.",
0,CAMEL-4619,Bug,Minor,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-11-05 11:19:14+00:00,2011-11-05 11:32:17+00:00,"If you stop a route with a custom time out value, then the graceful shutdown strategy will still use the default timeout value in the logs, so that information is not correct. For example if you have a short default value, but provide a higher timeout value, then you can have the log show negative timeout values.


INFO  DefaultShutdownStrategy        - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -14 seconds.",
0,CAMEL-4618,Improvement,Major,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-04 13:46:58+00:00,2011-11-07 07:01:51+00:00,"The new PGP data format from CAMEL-4549
requires to create it from Java code.


We should add some syntax sugar and have it in the DSL directly like the other data formats.
We may also want to look into how to configure a public and private key file, and have it load the PGPPublicKey and PGPPrivateKey for you automatic.
Instead of using the PGPDataFormatUtil class.","adam_mw:1320439051:2011-11-05T04:37:31.830+0000:1320439051:2011-11-05T04:37:31.830+0000:to ensure we're on the same page,

Are you thinking something like this?

from("""").
  marshal().pgp(pubKeyFilename, userid)
  .unmarchal().pgp(priKeyFilename, userid, pwd)
  to("""");

For most cases, I would prefer to seteup the pubKeyFilename, priKeyFilename and password only once (instead of each route).  I understand there is a need to override this at the route level.

What is the best practice for doing this in camel?  Maybe check if an object exists in the registry with a specific name such as pgpglobalconfig?  if so use those as defaults?   This would save people repeating the same info on multiple routes or having to set properties.     
adam_mw:1320457931:2011-11-05T09:52:11.651+0000:1320457931:2011-11-05T09:52:11.651+0000:Patch attached.
davsclaus:1320458691:2011-11-05T10:04:51.053+0000:1320458691:2011-11-05T10:04:51.053+0000:Adam good start. There is also a UnmarshalDefinition in camel-core.

And I think there is another place in the model in camel-core you may need to add it. For example check where CryptoDataFormat is used in camel-core.

The attributes in the model classes should not use simple types by object types, eg boolean -> Boolean. And they should not have a default value, as we do not want default values to be emitted in XML when marshalling routes to XML. So boolean foo = true. Should just be Boolean foo. And then in the java code you would know that if its == null then its the default value.

Also I think each attribute should have a @XmlAttribute annotation
davsclaus:1320458782:2011-11-05T10:06:22.355+0000:1320458782:2011-11-05T10:06:22.355+0000:And for the unit tests in camel-crypto. It would be nice to create *new* unit tests and keep the old ones as they are also perfect valid. 

And you can actually also define <pgp> once, in the <dataFormat> section in the Camel XML file, in the top. So that should allow you to once set username and password.
adam_mw:1320586125:2011-11-06T21:28:45.165+0000:1320586125:2011-11-06T21:28:45.165+0000:added xml test cases, and fixed comments noted by Claus.

Also added the xml snippet to the crypto wiki page.
davsclaus:1320620511:2011-11-07T07:01:51.329+0000:1320620511:2011-11-07T07:01:51.329+0000:Adam thanks for the patch.

I use the class resolver from Camel to load the files which ensures we support classpath and file out of the box. Just prefix with file: or classpath: (latter is default) "
0,CAMEL-4617,Improvement,Major,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-04 12:30:48+00:00,2011-11-04 12:32:14+00:00,Most likely you want to skip the start/end tokens by default. But we should have an option so people can control this,
0,CAMEL-4616,Improvement,Major,2.8.2,Future,"

transactions

",Open,Unresolved,Future,Yasser Zamani,Torsten Mielke,11,11,2011-11-04 09:48:44+00:00,2023-05-24 12:38:45+00:00,"camel-jms should register an exception listener automatically when used as a message producer. That way it can deal with any exception that may occur on async sends.


To be more precise:
If a camel-jms producer sends a msg within a transaction to an ActiveMQ broker, then this message send happens async by default (kind of an optimization done by ActiveMQ). If anything goes wrong with the send (e.g. broker raises a javax.jms.ResourceAllocationException because its full or there is a transport problem) then we currently don't catch this exception as there is no async exception listener registered. What's worse the TX will be committed thereafter although the send has actually failed.
As a result the msg is lost. 


For ActiveMQ there is a simple solution to this problem, either



set jms.useAsyncSend=false on the broker URL, or
call setAlwaysSyncSend(true) on the ActiveMQConnectionFactory



However many users won't be aware of this solution and will simply assume that using a transaction is enough to guard against message loss. 
Also the same problem can potentially arise with other JMS providers if they also use async send within a transaction. 


Camel should ensure that the out of the box behavior prevents from loosing msgs in transactional sends.","thxmasj:1340929824:2012-06-29T08:30:24.346+0000:1340929824:2012-06-29T08:30:24.346+0000:This issue is more serious than the summary indicates -- ""ActiveMQ producer silently loses messages in transactions"" better reflects the problem.
Would like to see a fix for this soon -- using synchronous sending of messages with large batches would have a rather serious impact on performance I'm guessing.
cgshiva:1360140669:2013-02-06T16:51:09.184+0000:1360140669:2013-02-06T16:51:09.184+0000:We are affected too.. We need a fix ASAP.. Please help
tetoconsusport:1360160911:2013-02-06T22:28:31.906+0000:1360160925:2013-02-06T22:28:45.051+0000:Shouldn't this be consider a bug and not an improvement?
praveenbillampati:1365418686:2013-04-08T18:58:06.503+0000:1365418686:2013-04-08T18:58:06.503+0000:We use JMS provider. We too need this to be fixed.
rkettelerij:1392987465:2014-02-21T20:57:45.077+0000:1392987465:2014-02-21T20:57:45.077+0000:Note one can specify a custom javax.jms.ExceptionListener on the camel-jms component using the exceptionlistener=#myexceptionlistener option. There's just no default. I do think there should be one by default. Preferably an ExceptionListener capable of doing transaction rollbacks in case async sends are enabled as Torsten indicated. 
davsclaus:1393121319:2014-02-23T10:08:39.578+0000:1393121319:2014-02-23T10:08:39.578+0000:The ExceptionListener API AFAIR do not offer access to the jms session to allow to mark tx for rollback etc.

We would need some way of hooking this in the listener from the producer, and some way of knowing if the send is complete, so we know at TX commit/rollback time, we know if there was an exception or not.
acosentino:1433976777:2015-06-11T06:52:57.105+0000:1433976777:2015-06-11T06:52:57.105+0000:News on this? We are experiencing the same problem.
yasserzamani:1671850430:2022-12-24T10:53:50.094+0000:1671850430:2022-12-24T10:53:50.094+0000:I thought to start analysis and work on this issue for a solution proposal/PR but I doubted if it's still relevant per today as it's not been fixed/updated since years ago and I'm wondering how people live with this serious problem. I've used camel-jms recently and I remember I got exception for example when Artemis queue was full of disk.

So is it still relevant as per today? If so, any advice about the approach to be taken as per TODAY [~davsclaus] please?
yasserzamani:1672376861:2022-12-30T13:07:41.550+0000:1672376861:2022-12-30T13:07:41.550+0000:[~acosentino] do you maybe still have those route definitions which reproduce this issue? If so could you please share them or some pseudo code similar to them?

 
yasserzamani:1673153434:2023-01-08T12:50:34.371+0000:1673153434:2023-01-08T12:50:34.371+0000:Well. I'm not sure what setup you guys had had previously when you faced this issue. But I think my test proves that this issue is invalid, at least at the moment. The test PR was provided and linked to this issue. wdyt?"
0,CAMEL-4615,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-04 08:39:04+00:00,2011-11-04 10:19:10+00:00,"This allows to use both the default ManagedXXX classes with an instance that has as well been annotated with ManagedResource JMX annotation.
For example SedaEndpoint, which allows it to be both a MangedBrowsableEndpoint and then any custom annotations it may have decorated in SedaEndpoint class.",
0,CAMEL-4614,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-04 07:26:58+00:00,2011-11-04 10:16:28+00:00,This allows you to manually purge the seda endpoint queue in case you want to do that.,
0,CAMEL-4613,Improvement,Minor,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Glen Mazza,0,0,2011-11-04 00:11:12+00:00,2011-11-04 17:30:46+00:00,"I went through the camel-example-cxf-osgi example on the latest Apache Karaf 2.2.4 and updated it based on any inaccuracies I found.  Note CXF 2.4.3 won't work with Felix but it will on Equinox.  CXF 2.5, and upcoming CXF 2.4.4 will work with Felix, however.


Upon application of this patch I will update the corresponding Camel website page with the updated information (http://camel.apache.org/cxf-example-osgi.html).","njiang:1320373905:2011-11-04T10:31:45.122+0000:1320374028:2011-11-04T10:33:48.645+0000:Applied the patch into trunk and 2.8.x with thanks to Glen.
gmazza:1320399046:2011-11-04T17:30:46.028+0000:1320399046:2011-11-04T17:30:46.028+0000:Thanks I updated http://camel.apache.org/cxf-example-osgi.html with this new information."
0,CAMEL-4612,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-11-03 20:15:04+00:00,2011-11-03 20:47:51+00:00,jclouds 1.2.1 is out! Also jclouds-karaf 1.2.1_1 just came out today and it offers a wrap-free version of 1.2.1 features.,
0,CAMEL-4611,Bug,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-11-03 17:26:19+00:00,2011-11-03 17:40:21+00:00,"There are no source jars in the latest staged release https://repository.apache.org/content/repositories/orgapachecamel-137/org/apache/camel/camel-core/2.9.0-RC1/


Found this warning in the logs



[INFO] --- maven-source-plugin:2.1.2:jar-no-fork (attach-sources) @ camel-core ---
[WARNING] NOT adding sources to artifacts with classifier as Maven only supports one classifier per artifact. Current artifact [org.apache.camel:camel-core:bundle:2.9-SNAPSHOT] has a [] classifier.




which led me to FELIX-3058. Gonna back our maven-bundle-plugin version down to 2.3.4 shortly which resolves the issue.",janstey:1320313221:2011-11-03T17:40:21.414+0000:1320313221:2011-11-03T17:40:21.414+0000:Will be fixed when we actually cut the 2.9.0 release.
0,CAMEL-4610,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-03 14:48:58+00:00,2011-11-03 14:54:46+00:00,"We should be able to inherit namespaces from a root/parent tag, so you can define a common namespace, and have each splitter message include that namespace.


See nabble
http://camel.465427.n5.nabble.com/HEADS-UP-Splitting-big-XML-files-using-XPath-tp4949834p4949834.html",davsclaus:1320303286:2011-11-03T14:54:46.358+0000:1320303286:2011-11-03T14:54:46.358+0000:Namespaces is now supported as well.
0,CAMEL-4609,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Claus Ibsen,0,0,2011-11-03 09:34:36+00:00,2011-11-14 12:18:22+00:00,"We should create a Camel archetype to create a new DataFormat with a sample implementation and unit test.
Like we have for a Component.


http://camel.apache.org/camel-maven-archetypes.html","bibryam:1321237774:2011-11-14T10:29:34.617+0000:1321237774:2011-11-14T10:29:34.617+0000:Here is a dataformat archetype based on component archetype from the project
iocanel:1321244302:2011-11-14T12:18:22.341+0000:1321244302:2011-11-14T12:18:22.341+0000:Patch committed.

Many thanks to Bilgin for the patch. Keep up the good work."
0,CAMEL-4608,Task,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-11-03 09:32:48+00:00,2011-11-10 07:18:09+00:00,Jackson 1.9.2 has been released. We are using 1.8.6 currently.,
0,CAMEL-4607,New Feature,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Taariq Levack,Michael Kolakowski,0,1,2011-11-02 16:10:46+00:00,2011-11-22 17:36:49+00:00,"This issue is in regards to the following post:  


http://camel.465427.n5.nabble.com/Can-camel-use-a-Marker-as-used-in-logback-td4955683.html


In short, we would like to be able to make use of Markers, which are part of the SLF4J api.  Markers allow you to add an ""ID"" to a log statement.  They can then be used as filtering outside of log levels.  


The end result will be to be able to write something like the following:


<camel:log message=""log message"" logName=""org.apache.camel"" marker=""myMarker"" level=""DEBUG"" />","taariql:1321737451:2011-11-20T05:17:31.886+0000:1321737451:2011-11-20T05:17:31.886+0000:Possible patch attached
davsclaus:1321926450:2011-11-22T09:47:30.197+0000:1321926450:2011-11-22T09:47:30.197+0000:Taariq thanks for the patch.

Do you mind looking into adding support for marker on the log component as well?
http://camel.apache.org/log

eg as an option just like the level option we have on this component.
davsclaus:1321926740:2011-11-22T09:52:20.199+0000:1321926740:2011-11-22T09:52:20.199+0000:I have committed the patch to trunk, which add support for marker to the Log EIP
https://cwiki.apache.org/confluence/display/CAMEL/LogEIP
taariql:1321947491:2011-11-22T15:38:11.969+0000:1321947491:2011-11-22T15:38:11.969+0000:Sure Claus, LogComponent change is attached. You can drop the extra tests again no problem since the code is well covered.
davsclaus:1321954609:2011-11-22T17:36:49.106+0000:1321954609:2011-11-22T17:36:49.106+0000:Thanks for the 2nd patch. Added to log component as well."
0,CAMEL-4606,Improvement,Major,2.8.2,None,"
None
",Resolved,Fixed,2.9.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-11-02 13:30:55+00:00,2011-11-02 19:03:11+00:00,"Right now if you use either of the completionTimeout, completionTimeoutExpression, or completionInterval features of the aggregator a background thread is created to check for the completion. If you have a 100 routes with aggregators say, you will have 100 background threads created... kinda sucky for scalability... we should allow users to set a thread pool to use for these background threads as well. Right now, we only allow setting an executor service for the main aggregation.",
0,CAMEL-4605,Bug,Major,2.8.1,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Aleksey Sushko,0,0,2011-11-02 07:21:27+00:00,2011-11-05 12:56:12+00:00,"There is an error with ftp server. 
Many files on the server. All files have no time to be processed. 
When the processing of the next file, the process stops. 
Error - The request is a file after closing the connection. 


Camel config route: 



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
  xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0""
  xmlns:camel=""http://camel.apache.org/schema/blueprint""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  default-activation=""lazy"">

  <cm:property-placeholder persistent-id=""ccwe.exchange.oos"">
    <cm:default-properties>
      <cm:property name=""ftp.doc.url"" value=""ftp://mail01.zakupki.gov.ru/auto/organization/all/""/>
      <cm:property name=""ftp.doc.add_params"" value=""""/>
    </cm:default-properties>
  </cm:property-placeholder>
  
  <bean id=""readProcess"" class=""mypackage.docread.ReadProcess""/>

  <bean id=""routePolicy"" 
    class=""org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicy"">
    <property name=""routeStartTime"" value=""* 0/10 * * * ?""/>
    <property name=""routeStopTime"" value=""* 4/10 * * * ?""/>
  </bean>

  <camelContext id=""exchange-read"" 
     xmlns=""http://camel.apache.org/schema/blueprint"" autoStartup=""false"">
     
    <threadPoolProfile id=""fooProfile"" 
       poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>
       
    <route id=""readRoute"" 
      routePolicyRef=""routePolicy""
      shutdownRunningTask= ""CompleteAllTasks"">
      
      <from uri=""{{ftp.doc.url}}?noop=true&amp;binary=true{{ftp.doc.add_params}}""/>
      <to uri=""bean:readProcess""/>
    </route>
  </camelContext>
</blueprint>




We have two streams


<threadPoolProfile id=""fooProfile"" poolSize=""2"" maxPoolSize=""2"" maxQueueSize=""-1""/>


The first thread (thread#0) reading file from ftp server



2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  261 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Processing file: GenericFile[organization_all_20111023_010003_33.xml.zip]
2011-11-02 09:13:57,376 | TRACE | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | mponent.file.GenericFileConsumer  293 | 94 - org.apache.camel.camel-core - 2.8.1 |
     Retrieving file: auto/organization/all/organization_all_20111023_010003_33.xml.zip from: Endpoint[ftp://mail01.zakupki.gov.ru/auto/organization/all/?
binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]




The second stream (thread#1) is stopped



2011-11-02 09:14:00,004 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ScheduledPollConsumer            | camel.impl.ScheduledPollConsumer  265 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     This consumer is stopping, so cancelling scheduled task: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@2bf8d0a4
2011-11-02 09:14:00,005 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | pache.camel.impl.DefaultConsumer   83 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping consumer: FtpConsumer[ftp://mail01.zakupki.gov.ru/auto/organization/all/?binary=true&connectTimeout=10000&delay=600000&disconnect=true&localWorkDirectory=%2Fhome%2Fuser%2Ftemp&noop=true&passiveMode=true&soTimeout=10000&timeout=15000]
2011-11-02 09:14:00,007 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | ProcessorEndpoint$1              | pache.camel.impl.DefaultProducer   76 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Stopping producer: Producer[bean://readProcess]
2011-11-02 09:14:00,010 | DEBUG | Camel (exchange-read) thread #1 - ShutdownTask | FtpConsumer                      | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21




Warning!!!! ftp close connection. Completed method FTPClient.disconnect(). Parament controlInput = null.



2011-11-02 09:14:03,182 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  460 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Route: readRoute shutdown complete, was consuming from: Endpoint[...]
2011-11-02 09:14:03,182 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  158 | 94 - org.apache.camel.camel-core - 2.8.1 | 
     Graceful shutdown of 1 routes completed in 3 seconds




The first thread (thread#0) continues reading the file [organization_all_20111023_010003_33.xml.zip].



2011-11-02 09:14:04,172 | ERROR | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FtpConsumer                      | ache.camel.processor.CamelLogger  232 | 94 - org.apache.camel.camel-core - 2.8.1 | Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:295)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTP.getReply(FTP.java:622)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1408)[97:org.apache.commons.net:2.2]
	at org.apache.commons.net.ftp.FTPClient.retrieveFile(FTPClient.java:1467)[97:org.apache.commons.net:2.2]
	at org.apache.camel.component.file.remote.FtpOperations.retrieveFileToFileInLocalWorkDirectory(FtpOperations.java:406)[99:org.apache.camel.camel-ftp:2.8.1]","alexey-s:1320296420:2011-11-03T13:00:20.769+0000:1320299859:2011-11-03T13:57:39.710+0000:Redefine the creation of a method of FTPClient FTPClient createFtpClient () class FtpEndpoint.
Add to the method displays the message
{code}
LOGGER.info(""create FTPClient {}"", client);
{code}

{code}
public class FTPClientTest extends FTPClient {
    private static final Logger LOGGER = LoggerFactory.getLogger(FTPClientTest.class);

    public FTPClientTest() {
        super();
    }

    @Override
    public void disconnect() throws IOException {
        LOGGER.info(""FTPClient disconnect {}"", this);
        super.disconnect();
    }

    @Override
    protected Socket _openDataConnection_(int command, String arg) throws IOException {
        LOGGER.info(""FTPClient _openDataConnection_ {}"", this);
        return super._openDataConnection_(command, arg);
    }

    @Override
    protected void _connectAction_() throws IOException {
        LOGGER.info(""FTPClient _connectAction_ {}"", this);
        super._connectAction_();
    }
}
{code}

We observe the creation of two FTPClient
{code}
2011-11-03 15:22:00,862 | INFO  | Blueprint Extender: 2 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
...
{code}
2011-11-03 15:22:01,213 | INFO  | Blueprint Extender: 1 | FtpEndpointExt | t.file.remote.ext.FtpEndpointExt   55 | 115 - org.apache.camel.c
amel-ftp - 2.8.1 | create FTPClient org.apache.camel.component.file.remote.ext.FTPClientTest@738e7a09
{code}

Last post by FTPClient
{code}
2011-11-03 15:28:01,543 | INFO  | Camel (exchange-read) thread #0 - ftp://mail01.zakupki.gov.ru/auto/organization/all/ | FTPClientTest| nt.file.remote.ext.FTPClientTest   25 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient _openDataConnection_ org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
Note the number of object *FTPClientTest@2e81d81e*.

Begins to stop the second process (thread # 1):
{code}
2011-11-03 15:28:09,010 | INFO  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  425 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Waiting as there are still 56 inflight and pending exchanges to complete, timeout in 291 seco
nds.
2011-11-03 15:28:10,004 | WARN  | DefaultQuartzScheduler-exchange-read_Worker-1 | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  143 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Timeout occurred. Now forcing the routes to be shutdown now.
2011-11-03 15:28:10,004 | WARN  | Camel (exchange-read) thread #1 - ShutdownTask | DefaultShutdownStrategy | ultShutdownStrategy$ShutdownTask  433 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Interrupted while waiting during graceful shutdown, will force shutdown now.
{code}

Completing the process (thread # 0):
{code}
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  103 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Service already stopped: org.apache.camel.impl.SharedProducerServicePool@50ec2522
2011-11-03 15:28:10,011 | TRACE | DefaultQuartzScheduler-exchange-read_Worker-1 | ServiceHelper | .apache.camel.util.ServiceHelper  108 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Stopping service DefaultErrorHandler[TraceInterceptor[To[bean:readProcess]]]
2011-11-03 15:28:10,011 | DEBUG | DefaultQuartzScheduler-exchange-read_Worker-1 | FtpConsumer | t.file.remote.RemoteFileConsumer  102 | 94 - org.apache.camel.camel-core - 2.8.1 | 
    Disconnecting from: ftp://anonymous@mail01.zakupki.gov.ru:21
2011-11-03 15:28:12,908 | INFO  | DefaultQuartzScheduler-exchange-read_Worker-1 | FTPClientTest | nt.file.remote.ext.FTPClientTest   19 | 115 - org.apache.camel.camel-ftp - 2.8.1 | 
    FTPClient disconnect org.apache.camel.component.file.remote.ext.FTPClientTest@2e81d81e
{code}
As you can see, the system is stopped *FTPClientTest@2e81d81e*. This object belongs to the first thread (thread # 0).

davsclaus:1320373622:2011-11-04T10:27:02.870+0000:1320373622:2011-11-04T10:27:02.870+0000:The FTPClient library is not threads safe.

Where do you use that thread pool profile?
davsclaus:1320453510:2011-11-05T08:38:30.790+0000:1320453510:2011-11-05T08:38:30.790+0000:See nabble
http://camel.465427.n5.nabble.com/Camel-ftp-read-next-file-after-close-connection-tp4952369p4952369.html"
0,CAMEL-4604,Task,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Daniel Kulp,Daniel Kulp,0,0,2011-11-01 15:16:51+00:00,2011-11-02 15:58:12+00:00,CXF 2.5.0 is now available in central.,"bvahdat:1320220691:2011-11-02T15:58:11.981+0000:1320220691:2011-11-02T15:58:11.981+0000:I assume the Wiki [1] is to be updated, as it currently says:

{code}
Dependency Upgrades:
...
CXF 2.4.1 to 2.4.3
...
{code}

[1] https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.9.0+Release

Regards, Babak"
0,CAMEL-4603,Improvement,Major,2.8.2,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-11-01 14:40:17+00:00,2012-01-17 05:02:58+00:00,"Camel does not implement an Expression that returns the attachments on a Messages. There is the @Attachments annotation that uses the ExpressionBuilder.attachmentsExpression, but that returns the whole map, not just the values(). Since Map.Entry<K, V> is generic you cannot use an implicit TypeConverter to V.


In my sandbox I implemented an attachments() expression to use with the splitter, returning a Collection you can iterate through. The splitter replaces the body of the original message with the items in the Collection, leaving the attachments in place.  


I propose dropping the attachments in the split messages. It's kinda awkward imho to split a message into smaller messages but still keep the attachments. I can hardly imagine a scenario where the attachments are needed and I think it's more of an edge case. It would be good, I think to add a builder method that returns the values() on the attachments Map, not the entries. The key may be lost, but depending on the attachment, the Content-Type (for mail attachments for instance) may have a copy of the key.",
0,CAMEL-4602,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,1,1,2011-11-01 10:48:33+00:00,2012-03-04 12:30:28+00:00,"See nabble
http://camel.465427.n5.nabble.com/Copying-files-from-an-FTP-server-using-search-criteria-tp4882889p4882889.html


By invoking the filter for directories, it allows end users to skip entire directories, which would make the polling faster. And no need to walk down unwanted directories.


The logic need to apply for both file/ftp consumers, as well having unit tests to ensure it works.","michal.warecki:1330588878:2012-03-01T16:01:18.800+0000:1330588878:2012-03-01T16:01:18.800+0000:Hi, I attached possible solution with unit test.
davsclaus:1330826938:2012-03-04T10:08:58.528+0000:1330826938:2012-03-04T10:08:58.528+0000:Thanks Michael for the patch.

I went ahead and added a isDirectory method on GenericFile, this avoids any API breakings in the filter interface.
michal.warecki:1330835428:2012-03-04T12:30:28.249+0000:1330835428:2012-03-04T12:30:28.249+0000:Your solution is much better. I have a lot to learn about non-business projects. Claus, thanks for the very valuable lesson."
0,CAMEL-4601,Bug,Minor,2.8.2,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-10-31 22:15:26+00:00,2011-12-22 15:49:28+00:00,"In URISupport.createURIWithQuery if the uri parameter contains a fragment but no query, the fragment is added a second time in the returned URI.


Fairly easy to fix if anybody wants to take a stab at it .","bibryam:1322136077:2011-11-24T20:01:17.592+0000:1322136077:2011-11-24T20:01:17.592+0000:A simple patch
hadrian:1322139035:2011-11-24T20:50:35.024+0000:1322139035:2011-11-24T20:50:35.024+0000:Wasn't hard, was it? :)
hadrian:1322335647:2011-11-27T03:27:27.836+0000:1322335647:2011-11-27T03:27:27.836+0000:Patch applied with thanks to Bilgin."
0,CAMEL-4600,Improvement,Major,2.8.2,2.9.0,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,João Loureiro,1,2,2011-10-31 19:32:42+00:00,2011-11-04 10:27:47+00:00,"In this issue, I propose that URISupport.sanitizeUri method sanitizes the password token in URIs that contain it (i.e., URIs in the form scheme://user:password@host). JT400 component URIs directly benefit from this improvement.
Additionally, I suggest that this method be invoked in additional sensitive places (in much the same way as DefaultEndpoint.toString()).
Proposed patch attached.","jloureiro:1320061833:2011-10-31T19:50:33.431+0000:1320061833:2011-10-31T19:50:33.431+0000:Patch.
davsclaus:1320373667:2011-11-04T10:27:47.433+0000:1320373667:2011-11-04T10:27:47.433+0000:Thanks for the patch. Willem have applied it to trunk"
0,CAMEL-4599,Improvement,Major,2.8.2,None,"
None
",Resolved,Fixed,"2.8.3, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-10-31 18:35:33+00:00,2011-11-01 14:41:01+00:00,"Say you have a simple transacted route like:



from(""activemq:queue:foo"")
  .transacted()
  .to(...);




on new messages you get logs like:



DEBUG JmsTransactionManager          - Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT




which isn't very helpful. It would be good to actual give the TX a name with some context. Thinking of something like the following would be better:



DEBUG JmsTransactionManager          - Creating new transaction with name [JmsConsumer[foo]]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT",
0,CAMEL-4598,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,None,Ioannis Canellos,Ioannis Canellos,0,0,2011-10-31 10:03:06+00:00,2015-07-11 21:28:55+00:00,"Mina producer will send a message and wait for a response before sending the second message.
However, there are a lot of protocols out there that support windowing (sending multiples messages before getting a response).
As of Mina 2.x it is possible to use a request response filter (also usable to 1.x. with some tuning). This filter can be used to match outbound messages with their response.


We could provide an option to the producer URI that would specify the window size. If the window size is greater than 1, we could automatically import the request response filter inside the filter chain. We would also require the user to specify a class that would be used to retrieve the correlation id from the response message. Or provide an annotation that would mark the correlation id.","iocanel:1320026683:2011-10-31T10:04:43.964+0000:1320026683:2011-10-31T10:04:43.964+0000:Not a strict dependency, but would definetly help."
0,CAMEL-4597,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Ioannis Canellos,0,1,2011-10-31 09:55:48+00:00,2016-05-05 16:28:36+00:00,"Currently, the Mina producer is using a single connection/session in order send messages. It would be a great improvement to provide session pooling. Here are some benefits:


a) Sending exchanges in parallel through different connections/sessions. 
b) Decrease the time required to create new connections.
c) Provides mean to the user of custom session initialization, destruction (login, logout & keepAlive possible through object factories).
d) Open the way to providing windowing capabilities (send out multiple requests, before getting a response).


This might also make sense for netty too (not sure haven't ever used netty).","davsclaus:1320029018:2011-10-31T10:43:38.850+0000:1320029018:2011-10-31T10:43:38.850+0000:MinaProducer is pooled using ServicePoolAware, see the interface it implements.
So we cached the on the producer level.

But a dedicated session cache would possible be nice, if the MinaProducer could become stateless then.
njiang:1320038946:2011-10-31T13:29:06.096+0000:1320038946:2011-10-31T13:29:06.096+0000:As the producer can be used in multi-thread, please make sure the process method of the producer can be reentered.
davsclaus:1369533321:2013-05-26T09:55:21.156+0000:1369533321:2013-05-26T09:55:21.156+0000:Camel netty has pooled producer since 2.9 or thereabouts.

camel-mina is based on 1.x and we are keeping the code as is.
camel-mina2 can be improved."
0,CAMEL-4596,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,13,11,2011-10-31 07:09:47+00:00,2015-07-13 12:39:20+00:00,"We should consider using an expression for uri's for the enrich and pollEnrich EIP's so we can poll from a dynamic computed endpoint.
However it will break API as currently the uri is mandatory.


It's a bit the same problem with to EIP which is also static uri. However for to EIP we have recipientList which is the dynamic to.
So we need a similar dynamic for enrich and pollEnrich. 


This also solves the problem with that people wan't to provide details from the current exchange in the endpoint uri. We have a ticket for that.
eg enrich(""file:inbox?fileName=${header.nameToPickUp}"")


So if we can do it using an expression it could be
.enrich().simple(""file:inbox?fileName=${header.nameToPickUp}"")


See nabble
http://camel.465427.n5.nabble.com/pollEnrich-consumer-with-selector-tp4939908p4939908.html","alanfoster:1348656680:2012-09-26T18:51:20.264+0000:1348656680:2012-09-26T18:51:20.264+0000:Is it possible to extend this ticket to include similar behavior for the loadbalancer component too?

Alan
celin:1367223436:2013-04-29T16:17:16.547+0000:1367223436:2013-04-29T16:17:16.547+0000:It's very useful... I need it!
jwcarman:1381295017:2013-10-09T13:03:37.713+0000:1381295017:2013-10-09T13:03:37.713+0000:What if we added a pollEnrich(Expression) and enrich(Expression) overloaded method as opposed to treating the String argument as an expression?
graben:1403075748:2014-06-18T15:15:48.193+0000:1403075748:2014-06-18T15:15:48.193+0000:What about introducing a new EIP rather than waiting for 3.0 somewhere in the future. I'm actually working on a proof and can provide patches if you like.
njiang:1403119617:2014-06-19T03:26:57.200+0000:1403119617:2014-06-19T03:26:57.200+0000:If the patch doesn't break the API, we could consider to add in new major release of Camel.
davsclaus:1403129068:2014-06-19T06:04:28.288+0000:1403129068:2014-06-19T06:04:28.288+0000:We should not introduce new EIPs to work around something.
graben:1403138042:2014-06-19T08:34:02.050+0000:1403138042:2014-06-19T08:34:02.050+0000:Whats the best way to workaroud this? It seems many people are workarounding this since years. Another way might be introducing a new component on top of the core API.
Ceeflores:1416274778:2014-11-18T09:39:38.610+0000:1416274778:2014-11-18T09:39:38.610+0000:Hi,
any updates on this issue?
Is the target fix in Version 3.0.0? Or maybe earlier?
2billy:1428399291:2015-04-07T17:34:51.685+0000:1428399291:2015-04-07T17:34:51.685+0000:Any updates for this one?

Actually this will be a great Camel improvement, as it will allow consumption in the middle of a route without restrictions.. Any updates on this?
andy.fedotov:1436527317:2015-07-10T19:21:57.259+0000:1436527317:2015-07-10T19:21:57.259+0000:This is must-have feature, I hope it will be implemented ASAP and as it should.
Meanwhile it can be implemented with custom message Processor. I've created and using one.

https://gist.github.com/afedotov/c9565ac5a53a45662d30

Example:
{code:java}
String enrichURI = ""file:path/to/basedir/${date:now:yyyyMMdd}?fileName=index.xml"";
 
from(""direct:start"")
    .process(DynamicPollEnricher.from(simple(enrichURI)))
    .to(""bean:messageProcessor"")
    .to(""mock:result"");
{code}

More example:
- Scan directory recursively for *.pdf files and read each one
- Enrich it with .xml file that located next to .pdf file and has same name
- Pass two files together for processing

{code:java}
String startURI = ""file:path/to/docs?recursive=true&antInclude=**/*.pdf&noop=true&readLock=none"";
String enrichURI = ""file:${header.CamelFileParent}?fileName=${file:onlyname.noext}.xml&noop=true&readLock=none"";

from(startURI)
    .process(DynamicPollEnricher.from(simple(enrichURI)))
    .to(""bean:processDocument"")
    .to(""mock:result"");
{code}

For accessing message list body inside processor beans there are helper methods:
{code:java}
InputStream pdfFileStream = DynamicPollEnricher.getMessageBody(inputExchange, 0, InputStream.class);
Document metadata = DynamicPollEnricher.getMessageBody(inputExchange, 1, Document.class);
{code}
davsclaus:1436698669:2015-07-12T18:57:49.424+0000:1436698687:2015-07-12T18:58:07.537+0000:We can do this in a way that would break the api slightly but make enrich / pollEnrich similar to recipientList where you use an expression for the endpoint. Then its similar

Today
{code}
<pollEnrich timeout=""5000"" uri=""seda:mustBeHardcodedValue""/>
{code}

In the future
{code}
<pollEnrich timeout=""5000"">
   <simple>seda:${header.queueName}</simple>
</pollEnrich>
{code}

You can still use constant uris
{code}
<pollEnrich timeout=""5000"">
   <constant>seda:fixedName</constant>
</pollEnrich>
{code}

That means XML users need to migrate the code. However as this is the top wanted change, I think its worth-while the breaking. 
Users of Java DSL we can preserve the behavior as we got the power of Java code to adapt.
davsclaus:1436762311:2015-07-13T12:38:31.095+0000:1436762311:2015-07-13T12:38:31.095+0000:Yay we now have this finally in Camel. Requires a slight migration if you use XML DSL as documented above.
davsclaus:1436762360:2015-07-13T12:39:20.215+0000:1436762360:2015-07-13T12:39:20.215+0000:Documented updated as well at
http://camel.apache.org/content-enricher.html"
0,CAMEL-4595,New Feature,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-10-29 12:41:19+00:00,2011-10-31 02:10:24+00:00,"Using XPath to split big XML files is not optimal as the JDK XPath framework doesn't support streaming mode yet. It may come in the future.


So instead we can introduce a tokenizer which can grab the xml content between start/end tokens instead. Then we can parse big files with very low memory footprint.","raulvk:1319897001:2011-10-29T22:03:21.611+0000:1319900250:2011-10-29T22:57:30.294+0000:Claus - I'm wondering whether it would make sense to look into leveraging libraries such as:
* VTD-XML (http://vtd-xml.sourceforge.net)
* Nux (http://acs.lbl.gov/software/nux)
* Aalto (http://wiki.fasterxml.com/AaltoHome)

What do you think?
davsclaus:1319939504:2011-10-30T09:51:44.462+0000:1319939504:2011-10-30T09:51:44.462+0000:VTD is GPL so we can't host it at Apache
Nux seems to have incompatible license as well
And Aalto is indeed Apache licenses by only maintained by one guy and the project don't seem like its taken off.

Anyway people in the community is of course free to build additional components.

dkulp:1319998224:2011-10-31T02:10:24.467+0000:1319998224:2011-10-31T02:10:24.467+0000:
Nux is a BSD license.  That is compatible.  That said, no updates since 2006 is a big concern."
0,CAMEL-4594,Bug,Major,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-28 11:02:26+00:00,2011-10-28 14:14:52+00:00,"If you do a route like



                from(""direct:start"")
                    .split().xpath(""/persons/person"")
                    .choice()
                        .when().xpath(""person/city = 'London'"")
                            .to(""mock:london"")
                        .when().xpath(""person/city = 'Paris'"")
                            .to(""mock:paris"")
                        .otherwise()
                            .to(""mock:other"");




Then Saxon throws this exception



Caused by: javax.xml.xpath.XPathExpressionException: Supplied node must be built using the same or a compatible Configuration
	at net.sf.saxon.xpath.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:284)
	at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:677)
	... 77 more",
0,CAMEL-4593,Task,Major,None,None,"
None
",Resolved,Fixed,None,Willem Jiang,Willem Jiang,0,1,2011-10-28 08:59:47+00:00,2013-05-26 09:54:16+00:00,"There are bunch fixes of ABDERA-281, ABDERA-290 can help camel-atom work smoothly with OSGi platform.
We need to upgrade the the abdera to 1.1.3 once it is out.",davsclaus:1369533256:2013-05-26T09:54:16.555+0000:1369533256:2013-05-26T09:54:16.555+0000:We have updated
0,CAMEL-4592,Improvement,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-10-28 08:51:04+00:00,2011-10-28 09:05:11+00:00,"CAMEL-4183 is not a perfect solution for let camel-atom work on OSGi platform.
With the help of bunch fixes of ABDERA-281, ABDERA-290, we can find a more elegant way to let user's route configure works without add any imports package.",njiang:1319763911:2011-10-28T09:05:11.793+0000:1319763911:2011-10-28T09:05:11.793+0000:applied patch into trunk and 2.8.x branch.
0,CAMEL-4591,Bug,Major,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-27 11:54:49+00:00,2011-10-27 13:23:31+00:00,"We have a similar issue with XPath, as we had with XSLT and XQuery.


If the message is a java.io.File and an exception occurs during evaluation, then that file is locked on Windows platforms.
We need to close the FileInputStream to unlock the file, and allow Windows to access the file.",davsclaus:1319692381:2011-10-27T13:13:01.352+0000:1319692381:2011-10-27T13:13:01.352+0000:btw workaround is to convert the body to String.class beforehand.
0,CAMEL-4590,Improvement,Major,2.8.2,,"

headers
properties
template
velocity

",Closed,Invalid,None,Christian Müller,David J. M. Karlsen,0,0,2011-10-27 09:57:00+00:00,2011-10-27 18:55:08+00:00,"It would be nice to also be able to use properties for variable substitution in velocity templates.
Today only headers are supported.","muellerc:1319712552:2011-10-27T18:49:12.509+0000:1319712552:2011-10-27T18:49:12.509+0000:We already support this. I added the missing unit test [VelocityValuesInPropertiesTest.java|https://svn.apache.org/repos/asf/camel/trunk/components/camel-velocity/src/test/java/org/apache/camel/component/velocity/VelocityValuesInPropertiesTest.java].
muellerc:1319712908:2011-10-27T18:55:08.591+0000:1319712908:2011-10-27T18:55:08.591+0000:I also updated the WIKI page. It should be available in a few hours."
0,CAMEL-4589,Improvement,Major,None,2.9.0,"
None
",Resolved,Won't Fix,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-10-27 09:17:45+00:00,2011-10-29 12:41:40+00:00,"The XPathBuilder in Camel which is used for XPath expressions should be optimized to better check the message body for already being an InputSource or if its easier to convert to InputSource than a DOM object.


Hopefully this should help with big streams to avoid by default to use DOM, but to prefer to use a stream based input source, as well accept SAXSource as source.",davsclaus:1319863127:2011-10-29T12:38:47.278+0000:1319863127:2011-10-29T12:38:47.278+0000:The current code is the most optimal for default XPath in the JDK. I have introduced another way to tokenize big XML data.
0,CAMEL-4588,Improvement,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-27 05:25:19+00:00,2011-10-27 08:56:36+00:00,"Ensure we have Node -> Source type converters for all 4 different kind of Source (StAX, SAX, Stream, DOM). This can help ensure optimal usages of Source when using the various XML related components such as XQuery, XPath, XSLT etc.


See nabble
http://camel.465427.n5.nabble.com/Re-svn-commit-r1188642-in-camel-trunk-camel-core-src-main-java-org-apache-camel-builder-xml-XsltBuila-tp4936225p4936225.html",
0,CAMEL-4587,Improvement,Major,"2.8.0, 2.8.1, 2.8.2","2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-10-27 03:55:03+00:00,2011-10-27 08:38:59+00:00,"While trying out a Camel demo that uses velocity, I discovered a change of behaviour in the velocity component in Camel 2.8.0. I am using velocity in a Camel route defined in Spring XML. When I deploy the route into the OSGi container, velocity complains that it cannot find the CamelVelocityClasspathResourceLoader class. I can fix this by importing the class into my bundle.


I just checked the code of camel-velocity, as we introduced the CamelVelocityClasspathResourceLoader which should be loaded from the TCCL to load the resource by using camel context resolver.
That could explain why you need to add the import package of ""org.apache.camel.component.velocity"".
We can fix it by resetting a custom TCCL which knows how to load the CamelVelocityClasspathResourceLoader when calling the velocityEngine.init(properties).",njiang:1319675939:2011-10-27T08:38:59.052+0000:1319675939:2011-10-27T08:38:59.052+0000:Applied patch into trunk and camel-2.8.x branch.
0,CAMEL-4586,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-10-26 11:11:20+00:00,2011-10-26 11:22:39+00:00,It should be easier to use the Camel properties component from the camel-script component.,davsclaus:1319599359:2011-10-26T11:22:39.054+0000:1319599359:2011-10-26T11:22:39.054+0000:There is a properties function now. Update wiki docu as well.
0,CAMEL-4585,Task,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-10-26 09:23:06+00:00,2011-11-04 16:28:18+00:00,No Desc,"jbonofre:1319600468:2011-10-26T11:41:08.482+0000:1319600468:2011-10-26T11:41:08.482+0000:I upgraded to Quickfix/J 1.5.1: revision 1189139.

I leave this Jira opened as:
- a first version of ServiceMix Quickfix/J 1.5.1 OSGi bundle should released
- I disabled the enableJmxForAcceptor() unit test as we have a ""collision"" with the enableJmxForInitiator() unit test. Each unit test individually works fine, but if one of the two is before the second, the QuickFixJEngine doesn't start.
janstey:1320395298:2011-11-04T16:28:18.840+0000:1320395298:2011-11-04T16:28:18.840+0000:FYI I needed to merge this to 2.8.x to get rid of this SMX features build error:


[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.4:add-features-to-repo (add-features-to-repo) on project apache-servicemix-full: Can't resolve bundle org.apache.servicemix.bundles:org.apache.servicemix.bundles.cometd-java-server:jar:2.3.1_1-SNAPSHOT: Failure to find org.apache.servicemix.bundles:org.apache.servicemix.bundles.cometd-java-server:jar:2.3.1_1-SNAPSHOT in http://repository.apache.org/snapshots was cached in the local repository, resolution will not be reattempted until the update interval of apache.snapshots has elapsed or updates are forced
"
0,CAMEL-4584,Bug,Minor,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-25 19:11:25+00:00,2011-10-26 07:26:37+00:00,"The new STaXSource type converters cause camel-saxon to fail unit tests as reported by CI servers


Caused by: net.sf.saxon.trans.XPathException: Unknown source class
	at net.sf.saxon.Configuration.buildDocument(Configuration.java:2892)
	at net.sf.saxon.query.StaticQueryContext.buildDocument(StaticQueryContext.java:211)
	at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:474)


We should implement the same optimized logic as we did today in XSLT to convert to Source if StAX is allowed, as well to avoid leaking resources we need to ensure if InputStream is in use, we should ensure it gets closed.",davsclaus:1319585197:2011-10-26T07:26:37.508+0000:1319585197:2011-10-26T07:26:37.508+0000:Backported to 2.8.x due the new StAX converters which caused this new exception
0,CAMEL-4583,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-10-25 15:51:52+00:00,2011-10-26 08:45:48+00:00,No Desc,"iocanel:1319543388:2011-10-25T19:49:48.400+0000:1319543388:2011-10-25T19:49:48.400+0000:I am attaching a patch which adds osgi integration tests for camel-jclouds blobstore producer and consumer.

The tests include spring and blueprint routes(that test blobstore as osgi service).

The patch also includes a fix for the actual component in order to make it 100% OSGi ready.

Notes: ComputeService is not possible to test with pax-exam before upgrading to jclouds 1.2.1. The blueprint test will not work on equinox, so its currently excluded.
davsclaus:1319587418:2011-10-26T08:03:38.645+0000:1319587418:2011-10-26T08:03:38.645+0000:I get this blueprint error on the test
Tests in error: 
  testProducerAndConsumer [equinox](org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest): Gave up waiting for service (&(objectClass=org.osgi.service.blueprint.container.BlueprintContainer)(osgi.blueprint.container.symbolicname=CamelBlueprintJcloudsTestBundle))

The other tests passes.

I will commit the patch anyway.
davsclaus:1319587481:2011-10-26T08:04:41.238+0000:1319587481:2011-10-26T08:04:41.238+0000:Ah it runs in felix but not equinox. 

mvn test -Dtest=BlobStoreBlueprintRouteTest

Tests run: 2, Failures: 0, Errors: 1, Skipped: 0
davsclaus:1319589948:2011-10-26T08:45:48.770+0000:1319589948:2011-10-26T08:45:48.770+0000:I disabled equinox as it fails for some weird reason"
0,CAMEL-4582,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-10-25 15:44:38+00:00,2011-10-26 08:42:41+00:00,No Desc,"iocanel:1319528857:2011-10-25T15:47:37.729+0000:1319528857:2011-10-25T15:47:37.729+0000:I am attaching a file which provides osgi integration tests for camel-krati.

The tests cover producer, consumer & idempotent repository using both spring & blueprint.
iocanel:1319529855:2011-10-25T16:04:15.155+0000:1319529855:2011-10-25T16:04:15.155+0000:Removed some unused imports.
davsclaus:1319589761:2011-10-26T08:42:41.553+0000:1319589761:2011-10-26T08:42:41.553+0000:Thanks"
0,CAMEL-4581,Bug,Minor,2.8.1,None,"
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Willem Jiang,Lorenzo Luconi Trombacchi,0,0,2011-10-25 13:03:47+00:00,2011-10-27 12:19:03+00:00,"I found an issue with seda and stream endpoints. 
Using more then 1 concurrent consumers for seda and using ""stream:out"" as destination endopoint , I sometimes receive some NullPointerExceptions. 


This is how to reproduce the problem: 


context.addRoutes(new RouteBuilder() { 
  @Override 
   public void configure() throws Exception 

{ 
        from(""seda:sendRequest?concurrentConsumers=10"") 
        .to(""stream:out""); 
   }

 
}); 
context.start(); 


for ( int i = 0; i < 50000; i++ ) { 
        producer.sendBody(""seda:sendRequest"", String.format(""Message %d"", i)); 
} 


And this is one of the exceptions: 


2011-10-25 10:12:36,550 ERROR  [org.apache.camel.processor.DefaultErrorHandler] - Failed delivery for exchangeId: ID-localhost-51879-1319530353835-0-48591. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException 
java.lang.NullPointerException: null 
        at java.io.Writer.<init>(Writer.java:71) ~[na:1.6.0_26] 
        at java.io.OutputStreamWriter.<init>(OutputStreamWriter.java:113) ~[na:1.6.0_26] 
        at org.apache.camel.component.stream.StreamProducer.writeToStream(StreamProducer.java:135) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.stream.StreamProducer.process(StreamProducer.java:83) ~[camel-stream-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:217) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:155) [camel-core-2.8.1.jar:2.8.1] 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129) [camel-core-2.8.1.jar:2.8.1] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26] 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26] 
        at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26] 


Lorenzo","njiang:1319679948:2011-10-27T09:45:48.205+0000:1319679948:2011-10-27T09:45:48.205+0000:I just checked the code, the StreamProducer is the member object of outputStream, that is the key of NPE.
 
njiang:1319689143:2011-10-27T12:19:03.087+0000:1319689143:2011-10-27T12:19:03.087+0000:Applied patch into trunk, camel-2.8.x, camel-2.7.x branch."
0,CAMEL-4580,Improvement,Major,None,2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Claus Ibsen,Lars K.W. Gohlke,0,2,2011-10-25 12:38:09+00:00,2011-10-25 13:31:51+00:00,"it would be nice to watch files as unix tail does


see http://stackoverflow.com/questions/557844/java-io-implementation-of-unix-linux-tail-f","lkwg82:1319518167:2011-10-25T12:49:27.212+0000:1319518177:2011-10-25T12:49:37.856+0000:in my mind popped up the idea to combine camel-exec with everything else, but this means it is limited to platforms having tail onboard.
davsclaus:1319520695:2011-10-25T13:31:35.818+0000:1319520695:2011-10-25T13:31:35.818+0000:See the camel-stream component
http://camel.apache.org/stream

It can scan a file like unix tail"
0,CAMEL-4579,Bug,Major,2.8.2,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-25 12:22:29+00:00,2011-10-25 13:21:48+00:00,"With the new StAX converters you may convert to a StAXSource which is not supported by the XSLT transformer, and you get this exception


Caused by: org.apache.xml.dtm.DTMException: Not supported: javax.xml.transform.stax.StAXSource@14d556e
	at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:477)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:699)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1273)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1251)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:107)


We should add option on XSLT component to explicit enable StAX if the end user wants it.",davsclaus:1319520108:2011-10-25T13:21:48.894+0000:1319520108:2011-10-25T13:21:48.894+0000:This also fixes a bug in 2.8.2 where you may see this exception.
0,CAMEL-4578,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-10-24 12:46:36+00:00,2011-10-25 09:14:31+00:00,"Currently the component archetype generates a component named HelloWorld and there is no easy way to change it. You need to create the project and then refactor it, and also refactor comments for javadoc etc.


It would be really nice if there was a property you could use so that the archetype can create the component as the user intends, without the need of refactoring.","iocanel:1319431969:2011-10-24T12:52:49.209+0000:1319431969:2011-10-24T12:52:49.209+0000:I am attaching a patch which adds the ability to specify name and scheme while creating the component using the archetype. It defaults to name=HelloWorld and scheme=helloworld which are the current defaults.

Example usage:
mvn archetype:generate   -DarchetypeGroupId=org.apache.camel.archetypes  -DarchetypeArtifactId=camel-archetype-component -DarchetypeVersion=2.9-SNAPSHOT -Dname=Awsome -Dscheme=awsome
davsclaus:1319504314:2011-10-25T08:58:34.137+0000:1319504314:2011-10-25T08:58:34.137+0000:Thanks for the patch.
iocanel:1319505271:2011-10-25T09:14:31.916+0000:1319505271:2011-10-25T09:14:31.916+0000:Also updated the documentation. "
0,CAMEL-4577,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Ioannis Canellos,0,0,2011-10-24 11:46:23+00:00,2012-01-28 13:20:49+00:00,"It would be nice to have a scheduled batch polling consumer that will extends the scheduled polling consumer and implement the batch consumer.
This will save quite some repeated code in a lot of components e.g. (file,jpa,sqs,jclouds,krati etc).","bibryam:1321002786:2011-11-11T17:13:06.136+0000:1321002786:2011-11-11T17:13:06.136+0000:Here I created one by extracting the duplicating code from different components. Also used it for the mail component and all the test are passing.
If it gets accepted I can convert also the other components to use this new class. 
iocanel:1321003540:2011-11-11T17:25:40.062+0000:1321003540:2011-11-11T17:25:40.062+0000:Hi Bilgin, thanks for the contribution. I will review it and get back to you with more details
iocanel:1325733820:2012-01-05T11:23:40.323+0000:1325733820:2012-01-05T11:23:40.323+0000:I think that now that 2.9.0 is out of the way we can proceed with this one.
iocanel:1325733897:2012-01-05T11:24:57.329+0000:1325733897:2012-01-05T11:24:57.329+0000:I am reassinging this to Bilgin in order to track his contributions.
davsclaus:1325743033:2012-01-05T13:57:13.573+0000:1325743033:2012-01-05T13:57:13.573+0000:Yeah go ahead Bilgin and work on a patch with the abstract class + components adjusted
bibryam:1325743390:2012-01-05T14:03:10.842+0000:1325743390:2012-01-05T14:03:10.842+0000:ok guys, if you think that the abstract class in the patch is fine, then I start adjusting the components.
bibryam:1326184926:2012-01-10T16:42:06.861+0000:1326184926:2012-01-10T16:42:06.861+0000:Created an abstract ScheduledBatchPollingConsumer class and updated all the BatchConsumers to use it. 
davsclaus:1326523806:2012-01-14T14:50:06.437+0000:1326523806:2012-01-14T14:50:06.437+0000:Thanks for the patch, but you must not change the default behavior to limit the max messages per poll to 10. So I will remove that default setting and let it be unlimited. The consumer which extends this new base class must configure a new default if it need to.
bibryam:1326526128:2012-01-14T15:28:48.352+0000:1326526128:2012-01-14T15:28:48.352+0000:That's correct, I also noticed it while doing the change.
I did it because there are some tests and components with this default value.
If you are not committing it at the moment I will update the patch very soon.
Thanks for taking a look.
davsclaus:1326527709:2012-01-14T15:55:09.582+0000:1326527709:2012-01-14T15:55:09.582+0000:Bilgin

I have adjusted the patch slightly, and am running a unit test to see if there is any issues.

In fact we should add to the krati / jclouds documentation that the consumer is configured with 10 as max messages per poll.
And also there is a wiki page which lists the batch consumers, I do not think its fully updated as it may lack these new components as well.

That said, we should possible ask Ioannis why he configured those consumers to use 10 as max.

bibryam:1326528720:2012-01-14T16:12:00.721+0000:1326528720:2012-01-14T16:12:00.721+0000:once the tests pass and you commit it, I can do the rest then. Thanks
davsclaus:1326533133:2012-01-14T17:25:33.805+0000:1326533133:2012-01-14T17:25:33.805+0000:Okay committing patch. I found an issue in the ScheduledBatchPollingConsumer where we need to reset the shutdownRunningTask task, as the value is not to be perserved, such as when doing on-the-fly route stop/start etc.
davsclaus:1326533305:2012-01-14T17:28:25.843+0000:1326533305:2012-01-14T17:28:25.843+0000:Post a mail on @dev about the 10 default value.
Lets see this discussion, then we can possible either keep them at 10, or make them default as all the others.
bvahdat:1326569858:2012-01-15T03:37:38.944+0000:1326569858:2012-01-15T03:37:38.944+0000:I spotted a tiny checkstyle violation by the applied patch which is already fixed through the latest patch provided for CAMEL-4796.
davsclaus:1326777552:2012-01-17T13:19:12.580+0000:1326777552:2012-01-17T13:19:12.580+0000:Bilgin, okay we got a response on the @dev.

The 10 default should be removed. Do you want to work on a patch for that?
bibryam:1326777789:2012-01-17T13:23:09.000+0000:1326777789:2012-01-17T13:23:09.000+0000:yes, I will work on the patch soon, but I can accept some help for the ScheduledBatchPollingConsumer documentation
davsclaus:1326777986:2012-01-17T13:26:26.817+0000:1326777986:2012-01-17T13:26:26.817+0000:Yeah there should be some javadoc on the ScheduledBatchPollingConsumer, and we could mention something in the develop new component guide
http://camel.apache.org/add-new-component-guide.html

Where we can refer to some base classes you can extend like we got
- DefaultConsumer
- DefaultProducer
- and all the others

That should be sufficient I think as ScheduledBatchPollingConsumer is for component developers, and not Camel end users per see."
0,CAMEL-4546,Bug,Minor,2.9.0,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Cédric Exbrayat,0,0,2011-10-14 13:34:07+00:00,2012-02-02 11:09:24+00:00,"Even with a fix archetype (see issue CAMEL-4544), the only way to get the console running is to launch ""mvn jetty:run"".


To reproduce, generate a project with the archetype
""mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-webconsole -DarchetypeVersion=2.9-SNAPSHOT""


When the project is launched with ""mvn tomcat:run"", it does not display any error



[INFO] Scanning for projects...
[WARNING] Failed to retrieve plugin descriptor for org.apache.camel:camel-maven-plugin:2.9-SNAPSHOT: Plugin org.apache.camel:camel-maven-plugin:2.9-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.apache.camel:camel-maven-plugin:jar:2.9-SNAPSHOT
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel Router Application 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[WARNING] Failed to retrieve plugin descriptor for org.apache.camel:camel-maven-plugin:2.9-SNAPSHOT: Plugin org.apache.camel:camel-maven-plugin:2.9-SNAPSHOT or one of its dependencies could not be resolved: Could not find artifact org.apache.camel:camel-maven-plugin:jar:2.9-SNAPSHOT
[INFO]
[INFO] >>> tomcat-maven-plugin:1.1:run (default-cli) @ issue >>>
[INFO]
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ issue ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ issue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] <<< tomcat-maven-plugin:1.1:run (default-cli) @ issue <<<
[INFO]
[INFO] --- tomcat-maven-plugin:1.1:run (default-cli) @ issue ---
[INFO] Running war on http://localhost:8080/issue
[INFO] Creating Tomcat server configuration at D:\mb\test\issue\target\tomcat
14 oct. 2011 15:17:43 org.apache.catalina.startup.Embedded start
INFO: Starting tomcat server
14 oct. 2011 15:17:44 org.apache.catalina.core.StandardEngine start
INFO: Starting Servlet Engine: Apache Tomcat/6.0.29
14 oct. 2011 15:17:44 org.apache.coyote.http11.Http11Protocol init
INFO: Initializing Coyote HTTP/1.1 on http-8080
14 oct. 2011 15:17:44 org.apache.coyote.http11.Http11Protocol start
INFO: Starting Coyote HTTP/1.1 on http-8080




And localhost:8080 show a white page


I tried with tomcat-maven-plugin 2.0-SNAPSHOT and ""mvn tomcat6:run"" or ""mvn tomcat7:run"", with no success.


If you package the application with ""mvn package"" and drop the war in a tomcat server (7.0.22 for me) or a jetty server (7.5.3v20111011), the application start with no error, but localhost:8080 display a 404 page.


Out of the box, I think the project should be able to run with tomcat and jetty at least (with or without maven plugin).","davsclaus:1328152164:2012-02-02T11:09:24.849+0000:1328152164:2012-02-02T11:09:24.849+0000:This is not really a Camel problem. The mvn jetty:run works fine with the archetype.

Its a bitch to get mvn tomcat7:run to work, as it does not seem to support overlays.

The fix is on Apache Tomcat side, not Camel."
0,CAMEL-4545,Bug,Major,2.9.0,"2.8.3, 2.9.0","

maven
patch

",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Cédric Exbrayat,0,1,2011-10-14 13:08:10+00:00,2011-10-19 12:55:50+00:00,"If you install the camel-archetype-webconsole from the trunk (2.9-SNAPSHOT actually), and create a new project with it (""mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-webconsole -DarchetypeVersion=2.9-SNAPSHOT""), you can't run ""mvn jetty:run"".
There are conflicts with slf4j-api binding as you can see in the following logs



 
...
[main] ContextLoader ERROR Context initialization failed
java.lang.NoSuchMethodError: org.slf4j.helpers.MessageFormatter.format(Ljava/lang/String;Ljava/lang/Object;)Lorg/slf4j/helpers/FormattingTuple;
        at org.slf4j.impl.Log4jLoggerAdapter.info(Log4jLoggerAdapter.java:323)[slf4j-log4j12-1.6.1.jar:1.6.1]
...




Running ""mvn dependencies:tree"" show that two versions of slf4j are loaded.


You can find with this issue a patch that exclude slf4j for activemq-camel, which solve the problem. 


But you then ran in the following problem



... 
java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/mypath/.m2/repository/org/apache/camel/camel-web/2.9-SNAPSHOT/camel-web-2.9-SNAPSHOT.war!/WEB-INF/classes/
...




Which can be solved by updating jetty-version to a more recent one (7.5.3.v20111011) in the parent pom ( issue CAMEL-4544 with patch)","cexbrayat:1318569025:2011-10-14T13:10:25.709+0000:1318569025:2011-10-14T13:10:25.709+0000:To completely resolve this issue, 4544 needs to be fixed
davidkarlsen@gmail.com:1318570890:2011-10-14T13:41:30.808+0000:1318570890:2011-10-14T13:41:30.808+0000:Could it be an idea to control the slf4j version for all camel modules via the dependencyManagement section in the topmost pom?
njiang:1318988336:2011-10-19T09:38:56.406+0000:1318988336:2011-10-19T09:38:56.406+0000:I just did some test by adding the dependency of sl4j-api in the archetype pom, the webconsole can be started without any trouble.
so I created a new JIRA CAMEL-4559 to updated all other camel archetype.
njiang:1319000150:2011-10-19T12:55:50.908+0000:1319000150:2011-10-19T12:55:50.908+0000:This issue is fixed by CAMEL-4559."
0,CAMEL-4544,Task,Minor,None,2.9.0,"

maven

",Resolved,Fixed,2.9.0,Willem Jiang,Cédric Exbrayat,0,0,2011-10-14 13:04:45+00:00,2011-10-19 08:43:16+00:00,"The API of SslContextFactory has changed so a simple dependency update is not enough.


http://download.eclipse.org/jetty/7.4.5.v20110725/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkConfig()
http://download.eclipse.org/jetty/7.5.3.v20111011/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkKeyStore()


The attached patch update the dependency, correct JettyHttpComponent and doesn't break the existing unit tests.","njiang:1318570343:2011-10-14T13:32:23.543+0000:1318570343:2011-10-14T13:32:23.543+0000:Camel may be deployed into OSGi container which he can't decide the version of Jetty.
So we need the code support the Jetty 7.4.x and 7.5.x at the same time.

cexbrayat:1318570682:2011-10-14T13:38:02.758+0000:1318570682:2011-10-14T13:38:02.758+0000:What would be the best way, if the API has changed between  7.4.5 and 7.5.3 ?
davsclaus:1318979157:2011-10-19T07:05:57.864+0000:1318979157:2011-10-19T07:05:57.864+0000:Cedric do you mind re-attaching your patch and make sure you mark [x] in grant license to Apache. eg there should be an Apache feather icon at the attachments.
davsclaus:1318979215:2011-10-19T07:06:55.086+0000:1318979215:2011-10-19T07:06:55.086+0000:Willem I would prefer if we could align Jetty version in Karaf/CXF/Camel/SMX instead of having mixed versions.

But Jetty 7.4.5 is a bit buggy so it would be great to upgrade to 7.5.x
cexbrayat:1318979508:2011-10-19T07:11:48.570+0000:1318979508:2011-10-19T07:11:48.570+0000:Done, but I saw Willem did a better job and already fixed it by handling both methods.
njiang:1318981138:2011-10-19T07:38:58.782+0000:1318981138:2011-10-19T07:38:58.782+0000:@Claus，
The fix that I committed does not lock the version of Jetty.

When camel-jetty is deployed into Karaf or SMX, the camel feature just pick the jetty feature which is provided by the container.

If the user are using camel and cxf together, he may need to do some work on the pom.xml to align the jetty version. BTW, current CXF support the Jetty7.4.x and Jetty7.5.x at the same time.

njiang:1318984996:2011-10-19T08:43:16.528+0000:1318984996:2011-10-19T08:43:16.528+0000:Applied patch into trunk with thanks to Cedric.
I just make the camel-jetty component can work with Jetty7.4.x and Jetty7.5.x at the same time."
0,CAMEL-4543,Improvement,Major,2.9.0,Future,"
None
",Resolved,Won't Fix,Future,Hadrian Zbarcea,Aaron Whiteside,3,6,2011-10-13 16:19:13+00:00,2016-05-01 10:43:46+00:00,"Camel Blueprint support is limited/hardcoded to Aries. This makes it impossible to use in JBoss 7 or with another blueprint implementation like Gemini.


The following classes use various things from Aries.



BlueprintContainerRegistry
BlueprintPropertiesParser
CamelContextFactoryBean
CamelProxyFactoryBean
CamelNamespaceHandler



Now obviously the last three are related to the custom namespace handler for Aries.


It would be good if these were moved into their own module, something like camel-aries-namespace or the like.


That people can choose to include if they would like to use the custom blueprint namespace handler in Aries. Otherwise the camel-blueprint module should be implementation agnostic and work on all blueprint containers. Not just Aries.




10:18:58,656 ERROR [org.jboss.osgi.framework.internal.FrameworkEventsPlugin] (MSC service thread 1-3) Framework ERROR: org.osgi.framework.BundleException: Cannot resolve bundle resModule: [com.mm.routing.engine:1.0.0.SNAPSHOT]
	at org.jboss.osgi.framework.internal.ResolverPlugin.resolve(ResolverPlugin.java:157) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.AbstractBundleState.ensureResolved(AbstractBundleState.java:551) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.HostBundleState.startInternal(HostBundleState.java:210) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.AbstractBundleState.start(AbstractBundleState.java:494) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.as.osgi.deployment.BundleStartTracker$1.processService(BundleStartTracker.java:144) [jboss-as-osgi-service-7.0.2.Final.jar:7.0.2.Final]
	at org.jboss.as.osgi.deployment.BundleStartTracker$1.transition(BundleStartTracker.java:119) [jboss-as-osgi-service-7.0.2.Final.jar:7.0.2.Final]
	at org.jboss.msc.service.ServiceControllerImpl.invokeListener(ServiceControllerImpl.java:1429) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at org.jboss.msc.service.ServiceControllerImpl.access$2600(ServiceControllerImpl.java:49) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at org.jboss.msc.service.ServiceControllerImpl$ListenerTask.run(ServiceControllerImpl.java:1952) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [:1.7.0]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [:1.7.0]
	at java.lang.Thread.run(Thread.java:722) [:1.7.0] Caused by: org.jboss.osgi.resolver.XResolverException: Unable to resolve Module[com.mm.routing.engine:1.0.0.SNAPSHOT]: missing requirement [Module[com.mm.routing.engine:1.0.0.SNAPSHOT]] package; (package=org.apache.camel.blueprint) [caused by: Unable to resolve Module[org.apache.camel.camel-blueprint:2.9.0.SNAPSHOT]: missing requirement [Module[org.apache.camel.camel-blueprint:2.9.0.SNAPSHOT]] package; (&(package=org.apache.aries.blueprint)(version>=0.3.0)(!(version>=1.0.0)))]
	at org.jboss.osgi.resolver.felix.FelixResolver.resolveInternal(FelixResolver.java:117) [jbosgi-resolver-felix-1.0.9.jar:1.0.9]
	at org.jboss.osgi.resolver.spi.AbstractResolver.resolve(AbstractResolver.java:148) [jbosgi-resolver-spi-1.0.9.jar:1.0.9]
	at org.jboss.osgi.framework.internal.ResolverPlugin.resolve(ResolverPlugin.java:155) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	... 11 more","aaronjwhiteside:1318576665:2011-10-14T15:17:45.069+0000:1318576665:2011-10-14T15:17:45.069+0000:First Patch to remove Aries dependency from BlueprintContainerRegistry
aaronjwhiteside:1318589409:2011-10-14T18:50:09.594+0000:1318589409:2011-10-14T18:50:09.594+0000:Patch that creates a new module called camel-aries-blueprint-support and moves all aries specific stuff into that.

camel-blueprint no longer depends on any Aries classes.

Tested camel-blueprint on JBoss 7.0.2 and works wonderfully.

Haven't been able to test the new camel-aries-blueprint-support jar yet, as I haven't setup ServiceMix or the like..
aaronjwhiteside:1357726606:2013-01-09T18:16:46.432+0000:1357726606:2013-01-09T18:16:46.432+0000:Bump, any progress on this? Currently we are having to repack the camel-blueprint jar to strip out the Aries specific classes/imports.
aaronjwhiteside:1357741302:2013-01-09T22:21:42.547+0000:1357741500:2013-01-09T22:25:00.159+0000:Just upgraded to the latest Camel release 2.10.3 and found that Aries specific class usage is more prolific than before.

The following classes reference Aries.
* BlueprintCamelContextLookupHelper
* BlueprintPropertiesParser
* CamelContextFactoryBean
* CamelProxyFactoryBean

Also noticed that it looks like the contents of camel-core-osgi have been included in the camel-blueprint jar.

tom.dewolf:1359008905:2013-01-24T14:28:25.585+0000:1359008905:2013-01-24T14:28:25.585+0000:Can this issue be promoted to an earlier release because it seriously limits the use of camel in osgi projects?
ggrzybek:1448846067:2015-11-30T09:14:27.422+0000:1448846067:2015-11-30T09:14:27.422+0000:I don't see much activity in Gemini Blueprint [repository|http://git.eclipse.org/c/gemini.blueprint/org.eclipse.gemini.blueprint.git/log/]. There were some commits to master branch recently however - let's wait few months..."
0,CAMEL-4542,Bug,Major,"2.8.0, 2.8.1","2.8.3, 2.9.0","

newbie
test-patch

",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Bernd Fischer,0,0,2011-10-13 08:38:33+00:00,2011-11-14 15:35:34+00:00,"The splitter component can use a bean with a ""split method"". It seems that this ""split bean"" is handled as expression and resolved lately using Camel Context from current exchange.


If I send an exchange using a separate CamelContext (""client"")


<camelContext id=""client"" xmlns=""http://camel.apache.org/schema/spring"">
</camelContext>


to a route defined in another CamelContext (""server"") using in-memory transport like ""direct"" or ""vm""


<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">


   <route id=""route02"" trace=""false"" streamCache=""false"">
     <from uri=""vm:route02""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route02""/>
   </route>


</camelContext>


the test fails with 


""Cannot find class: stringLineSplitter"" (Camel 2.8.0). 
""org.apache.camel.NoSuchBeanException - No bean could be found in the registry for: stringLineSplitter"" (Camel 2.9-SNAPSHOT)


If I understood Camel right it fails
because it tries to resolve this bean based on client Camel Context
which is still set at the current exchange send from ""client"" to ""server"" but it
doesn't contain the bean.


If I send an exchange using same ""client"" CamelContext to another route in
""server"" CamelContext involving ""external"" components like ""jms"" (ActiveMQ)


<camelContext id=""server"" xmlns=""http://camel.apache.org/schema/spring"">


   <route id=""route03"" trace=""false"" streamCache=""false"">
     <from uri=""jms:queue:route03""/>
     <split>
       <method bean   =""stringLineSplitter"" method=""split""/>
       <log    message=""before sending: ${body}""/>
       <inOut  uri    =""vm:route04""/>
       <log    message=""after sending""/>
     </split>
     <to uri=""mock:route03""/>
   </route>


</camelContext>


the test passed successfully. It seems that ""jms"" component creates a
new exchange using ""server"" CamelContext.","berndfischer63:1318466616:2011-10-13T08:43:36.294+0000:1318466616:2011-10-13T08:43:36.294+0000:unit test (mvn project) and patch hopefully solving the problem
njiang:1318568759:2011-10-14T13:05:59.516+0000:1318568759:2011-10-14T13:05:59.516+0000:Applied patch with thanks to Bernd and added a new unit test for it."
0,CAMEL-4541,Improvement,Minor,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Mathieu Lalonde,0,0,2011-10-12 22:54:42+00:00,2011-11-14 19:18:06+00:00,"As a user, I'd like to be able to use bean binding for non public classes.
Bean binding is a strong selling point for Camel so it would be nice to have it work for non-public classes as well, provided that the target method is available via an implemented interface.


eg.



// return private implementation of FooInterface
FooInterface foo = Foos.newInstance();

// works fine with plain java
foo.doStuff(""Hello"");

...
// This will throw an exception at runtime stating that the method can't be invoked (Illegal Access)
from(""direct:start"").bean(foo, ""doStuff"").mock(""direct:result"");




The Bean component should at the very least prefer interface methods (which won't cause the above exception) to class methods when a matching method is available on both the class and its interfaces (it currently ignore interface methods).
On a side note, its probably faster to look for interface methods first since there are usually less of them.


I'll attach a unit test and patch soon.","mrlalonde:1318520535:2011-10-13T23:42:15.941+0000:1318558958:2011-10-14T10:22:38.063+0000:After trying a simple fix, I take back my comment about preferring interface methods to class methods since this breaks the component's annotation support.
I have a simple patch in the works that only prefers interface methods if the bean's class is NOT public.  Since Camel would not have been able to ""bean bind"" a non-public class anyways, this avoids breaking the annotation support on beans.
mrlalonde:1318574961:2011-10-14T14:49:21.597+0000:1318574961:2011-10-14T14:49:21.597+0000:Patch with a few minor edits to fix warnings.

Added unit tests:
* .. bean/BeanPrivateClassWithInterfaceMethodTest.java

* .. bean/issues/PrivateClasses.java

Let me know if you need me to add more tests or improve the patch.
davsclaus:1318644838:2011-10-15T10:13:58.622+0000:1318644838:2011-10-15T10:13:58.622+0000:Thanks for the patch.

A good solution to fallback and use the interfaces for private class beans."
0,CAMEL-4540,Bug,Major,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Preben Asmussen,0,0,2011-10-12 18:00:25+00:00,2011-10-15 10:57:02+00:00,"When receiving a jms textmessage and just forward it to a another queue as a jms bytemessage the original textmessage is sendt without being converted to a jms bytemessage. 


JmsBinding.makeJmsMessage seems to use the exchange headers to determine of a new jms message should be created or the original send.
Exchange headers seems to be populated if you do routing or set a dummy header.


See http://camel.465427.n5.nabble.com/Convert-jms-message-from-textmessage-to-bytemessage-tc4895362.html


/preben","preben:1318577910:2011-10-14T15:38:30.842+0000:1318577910:2011-10-14T15:38:30.842+0000:testcase showing the problem
davsclaus:1318642291:2011-10-15T09:31:31.578+0000:1318642291:2011-10-15T09:31:31.578+0000:What is your use-case as its a really odd to pickup a TextMessage and route it directly as a BytesMessage.
preben:1318643001:2011-10-15T09:43:21.048+0000:1318643001:2011-10-15T09:43:21.048+0000:Year I know this case is unusual.

We have a hub and spokes design integrating different systems.
One component is responsible for taking events/messages from system A -> put it on the hub (jms queue/topic), and one outbound component is responsible for picking up from the hub queue -> sending to system B,C ...

In this case the outbound component receives a textmessage on the hub and just have to send a bytemessage to the receiving system B's bytemessage queue without doing any routing. "
0,CAMEL-4539,New Feature,Minor,"2.8.1, 2.9.0",None,"

component
solr

",Resolved,Fixed,2.9.0,Benjamin P. O'Day,Alex Cowell,2,3,2011-10-12 12:11:37+00:00,2011-12-04 20:46:40+00:00,"A Solr component for Camel. This component should support both indexing and querying, with flexibility in how these two features operate.","alexcowell:1318393557:2011-10-12T12:25:57.471+0000:1318393557:2011-10-12T12:25:57.471+0000:This patch adds a Solr component to Camel, which currently just supports indexing. 

Users can configure how data is mapped to fields in their Solr schema by setting headers on the message. Any request handler can be specified as an Endpoint option (the default handler for XML; CSV handler; extracting handler for PDF, DOC etc.), so most common filetypes are supported.

This component uses SolrJ to connect to a Solr instance and the underlying API is exposed to allow users to configure the Solr connection on the Endpoint.

All the work is done by a Producer as it didn't seem necessary to create a Consumer specifically for Solr when an HTTP endpoint could do the job just as well.

This patch was made by Alex Cowell and Bilgin Ibryam and we are grateful to our employer, Sourcesense, for letting us contribute to this project during company time.
boday:1321471312:2011-11-17T03:21:52.412+0000:1321471312:2011-11-17T03:21:52.412+0000:was happy to come across this, I'm going to review it soon...
bibryam:1321494179:2011-11-17T09:42:59.311+0000:1321494179:2011-11-17T09:42:59.311+0000:Thanks in advance for trying it out Ben.
boday:1321523339:2011-11-17T17:48:59.598+0000:1321523339:2011-11-17T17:48:59.598+0000:Bilgin, can you attach the src/test/resources/data/tutorial.pdf file, thanks...
bibryam:1321524346:2011-11-17T18:05:46.446+0000:1321524346:2011-11-17T18:05:46.446+0000:Here it is
boday:1321549756:2011-11-18T01:09:16.152+0000:1321549756:2011-11-18T01:09:16.152+0000:Bilgin, thanks.  At first glance, all seems good...will take some time to review it all and get it committed (need to discuss on DEV list, etc).  

Off the top, I'm planning on making the following changes to round it out a bit, let me know your thoughts...

-add support for the following operations: OPTIMIZE, DELETE_BY_ID, DELETE_BY_QUERY (possibly ADD, ADD_BEAN)
-rename SolrHeaders.java to SolrConstants.java
-prefix header values with ""Solr"" and make mix case (""SolrOperationInsert"", etc)

Anything else you guys need in the near term?
bibryam:1321584348:2011-11-18T10:45:48.205+0000:1321584348:2011-11-18T10:45:48.205+0000:Would be good to have also these features in the component. Also the other changes seems right, so go on.
boday:1322610284:2011-11-30T07:44:44.121+0000:1322610284:2011-11-30T07:44:44.121+0000:attached is an updated patch that adds the following:

-new operations: ADD_BEAN, DELETE_BY_ID, DELETE_BY_QUERY, OPTIMIZE
-tweaks to pom.xml to support OSGI
-added feature to karaf features.xml

I'm still trying to get this working with OSGI at the moment, but wanted to at least put this up for any general feedback... 
boday:1322731045:2011-12-01T17:17:25.428+0000:1322731045:2011-12-01T17:17:25.428+0000:updated patch for review that works in Karaf (uses wrap:mvn dependency until SMX bundle is created for SolrJ)
jbonofre:1322734307:2011-12-01T18:11:47.358+0000:1322734307:2011-12-01T18:11:47.358+0000:The feature descriptor doesn't look good to me:
1/ regarding the solr pom, the httpclient version to use is 3.x, not 4.x
2/ the lucene bundle is require to get the org.apache.lucene.util package

I will submit a patch with the correct feature descriptor.
boday:1322765288:2011-12-02T02:48:08.903+0000:1322765288:2011-12-02T02:48:08.903+0000:I just committed this component, see revision: 1209333.  

JBO, I removed the unnecessary references to httpclient.  I deployed/tested this successfully in Karaf 2.2.4.  Please review the karaf/features.xml.  In particular, I used ""<bundle dependency=""true"">wrap:mvn:org.apache.solr/solr-solrj/${solr-version}</bundle>"" until the SMX bundle is available.

Otherwise, I'll start working on the confluence docs tonight.  

Let me know if there are any issues...thanks


alexcowell:1322993070:2011-12-04T18:04:30.662+0000:1322993070:2011-12-04T18:04:30.662+0000:Good work Ben!

I've got some additional documentation from when we were using this component internally which I could add to Confluence if you'd like?
boday:1323002799:2011-12-04T20:46:39.793+0000:1323002799:2011-12-04T20:46:39.793+0000:Alex, sounds good...I just added the basics to get the ball rolling.  Also,
if there are other features that you guys would like to see added, log a
new JIRA for it...

On Sun, Dec 4, 2011 at 10:05 AM, Alex Cowell (Commented) (JIRA) <

"
0,CAMEL-4538,Improvement,Minor,2.8.0,3.0.0,"
None
",Resolved,Duplicate,3.0.0,Bilgin Ismet Ibryam,Maciej Prochniak,1,1,2011-10-12 08:33:37+00:00,2015-07-19 10:20:04+00:00,"Usually when we write camel unit tests we want to use SimpleRegistry, not JndiRegistry","davsclaus:1318641952:2011-10-15T09:25:52.838+0000:1318641952:2011-10-15T09:25:52.838+0000:There is also a TestSupport in junit4 package, as well in camel-testng. So we need to change in all places.
Do you mind creating a new patch with these changes?
mproch:1318644688:2011-10-15T10:11:28.306+0000:1318644688:2011-10-15T10:11:28.306+0000:Sure, I'll do it, thanks for pointing this :)
mproch:1318678593:2011-10-15T19:36:33.951+0000:1318678593:2011-10-15T19:36:33.951+0000:here it is
davsclaus:1318907606:2011-10-18T11:13:26.415+0000:1318907606:2011-10-18T11:13:26.415+0000:Thanks for the new patch. Unfortunately there is about 20 Camel components and a few examples etc. that need to be changed as well to compile.
Basically they need that type cast. If you don't mind creating a new patch with those code compile fixes, then that would be great.

Basically you can compile the entire source code as documented here
http://camel.apache.org/building.html

For example the quick build. I am not sure if it even compiles the unit tests, so I normally run this command
{code}
mvn clean install -Dtest=false
{code}

I guess old habits die hard.
davsclaus:1322276477:2011-11-26T11:01:17.222+0000:1322276477:2011-11-26T11:01:17.222+0000:To use SimpleRegistry, you override createCamelContext instead and create a context with the simple registry.
njiang:1322436755:2011-11-28T07:32:35.664+0000:1322436755:2011-11-28T07:32:35.664+0000:Maybe we can change the interface in Camel 3.x.

bibryam:1326348269:2012-01-12T14:04:29.845+0000:1326348269:2012-01-12T14:04:29.845+0000:I think I got it wrong because if we replace JndiRegistry with Registry in createRegistry method, then we have to cast it back to JndiRegistry in all the test, because Registry doesn't have a bind/put method and it is used in all the tests.

May be replacing JndiRegistry with SimpleRegistry is the intend of this issue?
davsclaus:1326523091:2012-01-14T14:38:11.864+0000:1326523091:2012-01-14T14:38:11.864+0000:Ideally we should use SimpleRegistry by default in the camel-test kit.
However due JndiRegistry was the 1st then it was used as default.

What people want in their unit tests is to easy add a entry in the registry.
And yes I think we should use SimpleRegistry by default, so that means maybe X unit tests needs to be changed.
bibryam:1326548012:2012-01-14T21:33:32.745+0000:1326548012:2012-01-14T21:33:32.745+0000:Currently JndiRegistry uses JndiContext and class loading from jndi.properties ... any idea how to change/fix these tests?
muellerc:1326551296:2012-01-14T22:28:16.978+0000:1326551296:2012-01-14T22:28:16.978+0000:+1 I would like to see this change.
bibryam:1328194392:2012-02-02T22:53:12.125+0000:1328194392:2012-02-02T22:53:12.125+0000:


In order to continue with this task I need some answers and direction.

1. In CAMEL-4952 - it mentions adding beans to the registry, does it mean extending the Registry interface with methods for binding objects. If the answer is yes, I wonder why do we need createJndiContext method, it would be simpler to bind and lookup directly from the Registry.

2. My initial idea was to fix all the tests by:
a) replacing all data binding to JndiRegistry with data binding to JndiContext
b) replace JndiRegistry with Registry/SimpleRegistry

but even with these changes there still would be JndiContext and creating a SimpleRegistry with JndiContext is ugly.
I'm out of ideas for now
bibryam:1328953718:2012-02-11T17:48:38.858+0000:1328953718:2012-02-11T17:48:38.858+0000:1. Introduced SimpleContext as data holder for SimpleRegitry()

2. Updated the tests to use createSimpleContext() instead of createRegistry() for binding data to the registry.

3. Refactored createRegistry() to return Registry instead of JndiRegistry

With these changes tests by default will use SimpleRegistry, but still will be able to JndiRegistrty when needed, by overriding the createRegistry() and use createJndiContext() method.


WDYT?
bibryam:1329234104:2012-02-14T23:41:44.922+0000:1329234104:2012-02-14T23:41:44.922+0000:Anyone with comments? The patch changes a lot of tests, I guess it will be out of date soon, unless someone has a look.
hadrian:1329242036:2012-02-15T01:53:56.347+0000:1329242036:2012-02-15T01:53:56.347+0000:@Bilgin, I just took a look and I have a few questions. Why was the SimpleContext introduced? The SimpleRegistry would do equally well. Plus adding the SimpleContext in the o.a.camel package is probably not the best idea. Also the SimpleRegistry is not really a holder for the SimpleContext, but a copy, right?

What about having createRegistry() return a Registry (and maybe add a couple of methods to it for adding/removing entries?
davsclaus:1329342363:2012-02-16T05:46:03.660+0000:1329342363:2012-02-16T05:46:03.660+0000:Agree with Hadrian, this ticket should *not* introduce new APIs in camel-core. Its a pure change in camel-test.

And yes createRegistry should just return a Registry interface. Then people can override the createRegistry method and return their impl of choice. In fact we should consider using SimpleRegistry as the default now instead of JndiRegistry.

And we could have some helper methods on CamelTestSupport to add a bean to the registry. Then the impl can check if the registry is a SimpleRegistry, JndiRegistry and cast to the type, and use the put/bind methods. And for other registry types such as the Spring AppCtx, then it can throw an exception saying this is not supported.
bibryam:1330070263:2012-02-24T15:57:43.620+0000:1330070263:2012-02-24T15:57:43.620+0000:Thanks for your feedback, this is what I needed. I've updated the patch according to the comments. I will provide my comments later, uploading a patch for now.

bibryam:1330183446:2012-02-25T23:24:06.616+0000:1330183446:2012-02-25T23:24:06.616+0000:@Hadrian I introduced SimpleContext because noticed that each registry has a context: 
JndiRegistry - JndiContext, ApplicationContextRegistry - ApplicationContext, OsgiServiceRegistry - BundleContext… 
All that made me think that each registry is a kind of read only access interface (only lookup methods, without any bind methods) to the specific context. 
Adding some add/remove methods to the Registry would simplify this task, but I think that is a major change for the Registry interface. And yes, the location for SimpleContext was wrong…


@Claus I didn't want to do any API changes in Registry that's why introduced SimpleContext, which is also API change by introducing a new class :)

Anyway, all this is past, because after your comments I updated the patch, and there are no api changes any more.

The patch does the following:

1. createRegistry() return a Registry, with SimpleRegistry implementation by default.
2. Tests override this method to add beans to SimpleRegistry. That is possible because SimpleRegistry is also a Map.



bibryam:1330347459:2012-02-27T20:57:39.406+0000:1330347459:2012-02-27T20:57:39.406+0000:Can someone have a quick look at the updated patch?
davsclaus:1330396123:2012-02-28T10:28:43.494+0000:1330396123:2012-02-28T10:28:43.494+0000:There is also a camel-testng that may need changes?

If there is no API changes in camel-core, then the patch seems okay.
davsclaus:1330396379:2012-02-28T10:32:59.314+0000:1330396379:2012-02-28T10:32:59.314+0000:Bilgin, you will be able to apply this patch yourself soon ;)
davsclaus:1341536609:2012-07-06T09:03:29.790+0000:1341536609:2012-07-06T09:03:29.790+0000:Lets not break any API in the 2.x
davsclaus:1437272404:2015-07-19T10:20:04.779+0000:1437272404:2015-07-19T10:20:04.779+0000:Duplicate of CAMEL-8293"
0,CAMEL-4537,New Feature,Major,2.9.0,,"

OSGi
Spring

",Resolved,Won't Fix,None,Unassigned,Aaron Whiteside,1,3,2011-10-11 22:54:20+00:00,2016-03-23 09:19:20+00:00,"The camel-spring-2.9-SNAPSHOT.jar bundle imports 


org.springframework.osgi.context;version=""[1.2,2)"";resolution:=optional,


Which obviously excludes Spring DM 2.0.0M1


I am not sure if Spring DM 2.0 breaks anything Camel is trying to use, but the class org.springframework.osgi.context.BundleContextAware it is searching for on startup does exist in spring-osgi-core-2.0.0.M1.jar.


Currently when I deploy Camel 2.9-SNAPSHOT in JBoss 7.0.2 with Spring DM 2.0.0M1 I get the following error, and I am unable to resolve any Components from the OSGi Service registry - obviously because Camel is not trying to use it.



18:04:32,347 WARN  [org.jboss.modules] (SpringOsgiExtenderThread-1) Failed to define class org.apache.camel.osgi.CamelContextFactoryBean in Module ""deployment.org.apache.camel.camel-spring:2.9.0.SNAPSHOT"" from Service Module Loader: java.lang.LinkageError: Failed to link org/apache/camel/osgi/CamelContextFactoryBean (Module ""deployment.org.apache.camel.camel-spring:2.9.0.SNAPSHOT"" from Service Module Loader)
	at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:401) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:261) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:76) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.FilteredLocalLoader.loadClassLocal(FilteredLocalLoader.java:46) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.Module.loadModuleClass(Module.java:590) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:183) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:361) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:333) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:310) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:103) [jboss-modules.jar:1.0.2.GA]
	at java.lang.Class.forName0(Native Method) [:1.7.0]
	at java.lang.Class.forName(Class.java:186) [:1.7.0]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.init(CamelNamespaceHandler.java:133)
	at org.springframework.beans.factory.xml.DefaultNamespaceHandlerResolver.resolve(DefaultNamespaceHandlerResolver.java:130)
	at org.springframework.osgi.extender.internal.support.NamespacePlugins$Plugin.resolve(NamespacePlugins.java:78)
	at org.springframework.osgi.extender.internal.support.NamespacePlugins$5.operate(NamespacePlugins.java:210)
	at org.springframework.osgi.extender.internal.support.NamespacePlugins$5.operate(NamespacePlugins.java:206)
	at org.springframework.osgi.extender.internal.support.LazyBundleRegistry.apply(LazyBundleRegistry.java:161)
	at org.springframework.osgi.extender.internal.support.NamespacePlugins.doResolve(NamespacePlugins.java:206)
	at org.springframework.osgi.extender.internal.support.NamespacePlugins.resolve(NamespacePlugins.java:170)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [:1.7.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) [:1.7.0]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) [:1.7.0]
	at java.lang.reflect.Method.invoke(Method.java:601) [:1.7.0]
	at org.springframework.osgi.context.support.TrackingUtil$OsgiServiceHandler.invoke(TrackingUtil.java:108)
	at $Proxy12.resolve(Unknown Source)	at org.springframework.osgi.context.support.DelegatedNamespaceHandlerResolver.resolve(DelegatedNamespaceHandlerResolver.java:57)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1333)
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1328)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:135)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:93)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:172)
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:142)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:467)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:62)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:244)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:87)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:222)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:225)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:178)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:159)
	at org.springframework.osgi.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:223)
	at java.lang.Thread.run(Thread.java:722) [:1.7.0]
Caused by: java.lang.NoClassDefFoundError: org/springframework/osgi/context/BundleContextAware
	at java.lang.ClassLoader.defineClass1(Native Method) [:1.7.0]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:791) [:1.7.0]
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) [:1.7.0]
	at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:397) [jboss-modules.jar:1.0.2.GA]
	... 50 more
Caused by: java.lang.ClassNotFoundException: org.springframework.osgi.context.BundleContextAware from [Module ""deployment.org.apache.camel.camel-spring:2.9.0.SNAPSHOT"" from Service Module Loader]
	at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:191) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:361) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:333) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:333) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:310) [jboss-modules.jar:1.0.2.GA]
	at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:103) [jboss-modules.jar:1.0.2.GA]
	... 54 more

18:04:32,368 INFO  [org.apache.camel.spring.handler.CamelNamespaceHandler] (SpringOsgiExtenderThread-1) OSGi environment not detected.","aaronjwhiteside:1318345412:2011-10-11T23:03:32.202+0000:1318345412:2011-10-11T23:03:32.202+0000:Spring DM 2.0 support is essential, because of the classloading issues with Spring DM 1.x.

I understand Spring DM 2.0 is not yet final, but it's a hell of a lot better than Spring DM 1.x. and no we cannot currently use Blueprint.
jbonofre:1318373931:2011-10-12T06:58:51.662+0000:1318373931:2011-10-12T06:58:51.662+0000:Spring DM version is provided by Karaf. The first step is to update to Spring DM 2.0 in Karaf.
jbonofre:1318377033:2011-10-12T07:50:33.430+0000:1318377033:2011-10-12T07:50:33.430+0000:Spring DM is not more active. It's now replaced with Gemini. Currently in Karaf, we use Aries Blueprint by default. Having two Blueprint extenders (Aries and Gemini) is really tricky and will be source of problems.

I think it's better to ask to the users to use Blueprint (generic).
aaronjwhiteside:1318487185:2011-10-13T14:26:25.694+0000:1318487185:2011-10-13T14:26:25.694+0000:It seems Camel has a hard dependency on the Aries' blueprint implementation.

It won't work under Gemini or JBoss 7's blueprint implementation - I suspect this is because of the NamespaceHandler, I think it would be better to separate the Aries specific namespace handler into its own module/bundle, so that if someone wants to run Camel on a non Aries blueprint implementation they can do so, and if they want the custom blueprint namespace they can include the specific bundle for their blueprint implementation.


{code}

10:18:58,656 ERROR [org.jboss.osgi.framework.internal.FrameworkEventsPlugin] (MSC service thread 1-3) Framework ERROR: org.osgi.framework.BundleException: Cannot resolve bundle resModule: [com.mm.routing.engine:1.0.0.SNAPSHOT]
	at org.jboss.osgi.framework.internal.ResolverPlugin.resolve(ResolverPlugin.java:157) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.AbstractBundleState.ensureResolved(AbstractBundleState.java:551) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.HostBundleState.startInternal(HostBundleState.java:210) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.osgi.framework.internal.AbstractBundleState.start(AbstractBundleState.java:494) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	at org.jboss.as.osgi.deployment.BundleStartTracker$1.processService(BundleStartTracker.java:144) [jboss-as-osgi-service-7.0.2.Final.jar:7.0.2.Final]
	at org.jboss.as.osgi.deployment.BundleStartTracker$1.transition(BundleStartTracker.java:119) [jboss-as-osgi-service-7.0.2.Final.jar:7.0.2.Final]
	at org.jboss.msc.service.ServiceControllerImpl.invokeListener(ServiceControllerImpl.java:1429) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at org.jboss.msc.service.ServiceControllerImpl.access$2600(ServiceControllerImpl.java:49) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at org.jboss.msc.service.ServiceControllerImpl$ListenerTask.run(ServiceControllerImpl.java:1952) [jboss-msc-1.0.1.GA.jar:1.0.1.GA]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [:1.7.0]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [:1.7.0]
	at java.lang.Thread.run(Thread.java:722) [:1.7.0]
Caused by: org.jboss.osgi.resolver.XResolverException: Unable to resolve Module[com.mm.routing.engine:1.0.0.SNAPSHOT]: missing requirement [Module[com.mm.routing.engine:1.0.0.SNAPSHOT]] package; (package=org.apache.camel.blueprint) [caused by: Unable to resolve Module[org.apache.camel.camel-blueprint:2.9.0.SNAPSHOT]: missing requirement [Module[org.apache.camel.camel-blueprint:2.9.0.SNAPSHOT]] package; (&(package=org.apache.aries.blueprint)(version>=0.3.0)(!(version>=1.0.0)))]
	at org.jboss.osgi.resolver.felix.FelixResolver.resolveInternal(FelixResolver.java:117) [jbosgi-resolver-felix-1.0.9.jar:1.0.9]
	at org.jboss.osgi.resolver.spi.AbstractResolver.resolve(AbstractResolver.java:148) [jbosgi-resolver-spi-1.0.9.jar:1.0.9]
	at org.jboss.osgi.framework.internal.ResolverPlugin.resolve(ResolverPlugin.java:155) [jbosgi-framework-core-1.0.0.CR8.jar:1.0.0.CR8]
	... 11 more
{code}
aaronjwhiteside:1318511853:2011-10-13T21:17:33.214+0000:1318511853:2011-10-13T21:17:33.214+0000:OK,

So here is my real problems with Camel, maybe you have a solution...

* Camel JMS Component depends on Spring.
* Camel Blueprint support depends on the Aries implementation.
* Camel Spring+OSGi support only works with Spring DM 1.2 not Spring DM 2.0.

So while I can manually create an OSGiCamelContext instance in a non-Aries-Blueprint-implementation, I have no way of configuring the JMS Component's ConnectionFactory or TransactionManager. As the JMS Component uses the spring's ApplicationContext to look them up.

If I manually can create the JMSComponent in the Blueprint context and register it as a service but the CamelContext cannot see that instance.

This is my blueprint context and keep in mind this is running on JBoss 7.0.2 using it's own Blueprint implementation.

{code:language=xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">

    <!-- Setup Spring's JTA Transaction Manager -->
    <bean id=""transactionManager"" class=""org.springframework.transaction.jta.JtaTransactionManager"">
        <property name=""transactionManagerName"" value=""java:jboss/TransactionManager""/>
    </bean>

    <!-- Use JNDI -->
    <bean id=""initialContext"" class=""javax.naming.InitialContext""/>

    <!-- Lookup the JMS connection factory from the container -->
    <bean id=""connectionFactory"" factory-ref=""initialContext"" factory-method=""lookup"">
        <argument value=""java:/JmsXA""/>
    </bean>

    <!-- Create and Register JmsComponent -->
    <bean id=""jmsComponent"" class=""org.apache.camel.component.jms.JmsComponent"">
        <property name=""connectionFactory"" ref=""connectionFactory""/>
        <property name=""transactionManager"" ref=""transactionManager""/>
    </bean>
    <service ref=""jmsComponent"" interface=""org.apache.camel.Component""/>

    <!-- Setup a Camel Context instance -->
    <bean id=""camelContext"" class=""org.apache.camel.core.osgi.OsgiDefaultCamelContext"" init-method=""start"" destroy-method=""stop"" scope=""singleton"">
        <argument ref=""blueprintBundleContext""/>
    </bean>

</blueprint>

{code}


With Spring DM 2.0 or Gemini this is much easier to do, the only problem being that Camel will not detect it's in an OSGi environment and will not find the various component bundles. So it cannot even find the JMSComponent.

This is a copy of the Spring DM 2.0 context I was using:

{code:language=xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xmlns:osgi=""http://www.springframework.org/schema/osgi""
       xmlns:jee=""http://www.springframework.org/schema/jee""
       xmlns:context=""http://www.springframework.org/schema/context""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
                           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"">

    <!-- Setup Spring's JTA Transaction Manager -->
    <bean id=""transactionManager"" class=""org.springframework.transaction.jta.JtaTransactionManager"">
        <property name=""transactionManagerName"" value=""java:jboss/TransactionManager""/>
    </bean>

    <!-- Lookup the JMS connection factory from the container -->
    <jee:jndi-lookup id=""connectionFactory"" jndi-name=""java:/JmsXA"" lookup-on-startup=""true"" expected-type=""javax.jms.ConnectionFactory""/>

    <!-- Create and Register JmsComponent -->
    <!--<bean id=""jmsComponent"" class=""org.apache.camel.component.jms.JmsComponent"">-->
        <!--<property name=""connectionFactory"" ref=""connectionFactory""/>-->
        <!--<property name=""transactionManager"" ref=""transactionManager""/>-->
    <!--</bean>-->
    <!--<osgi:service ref=""jmsComponent"" interface=""org.apache.camel.Component""/>-->

    <!-- Setup a Camel Context instance -->
    <camel:camelContext id=""camelContext"" autoStartup=""true"" shutdownRunningTask=""CompleteAllTasks"">
        <camel:jmxAgent id=""jmxAgent"" disabled=""false"" usePlatformMBeanServer=""true"" createConnector=""false""/>
    </camel:camelContext>

</beans>

{code}


So how to use JMS in OSGi without using Spring or Aries for Blueprint?"
0,CAMEL-4536,Bug,Minor,2.8.1,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Marco Zapletal,0,0,2011-10-11 15:51:49+00:00,2011-10-23 13:37:55+00:00,"Using AuthorizationPolicy on a route (e.g., using .policy(myAuthPolicy) in a Java DSL) prevents that processors on this route are exposed via JMX. 


Steps to reproduce:


-) Start the Camel app in the attached test case (MyRouteBuilder)
-) Open JConsole
-) Connect to the corresponding local process
-) Under ""processors"" only the processors from the route without the policy are shown, but not the ones from the route where a policy is used",davsclaus:1319348275:2011-10-23T13:37:55.901+0000:1319348275:2011-10-23T13:37:55.901+0000:Thanks for reporting with sample application.
0,CAMEL-4535,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Willem Jiang,0,0,2011-10-11 13:50:16+00:00,2011-10-19 12:27:22+00:00,"There are some artifacts cannot be found by using the jclouds karaf feature 1.0.0.
And Jclouds just released 1.1.1, we should consider to upgrade the jclouds version.","iocanel:1318997265:2011-10-19T12:07:45.794+0000:1318997265:2011-10-19T12:07:45.794+0000:jclouds-karaf 1.1.1 has been released. 

I am attaching a patch that includes the following:

Updated the version in parent pom and uncommented the feature.


davsclaus:1318998442:2011-10-19T12:27:22.937+0000:1318998442:2011-10-19T12:27:22.937+0000:Thanks"
0,CAMEL-4534,Bug,Trivial,None,,"
None
",Resolved,Fixed,None,Ioannis Canellos,Krzysztof Borgul,0,0,2011-10-11 08:24:40+00:00,2011-10-11 13:41:43+00:00,"Adress: http://camel.apache.org/jms.html


In section: ""Request-reply over JMS and using a shared fixed reply queue""
is: .inOut().to(""activemq:queue:foo?replyTo=bar?receiveTimeout=250"")
should be: .inOut().to(""activemq:queue:foo?replyTo=bar&receiveTimeout=250"")


The same in ""Request-reply over JMS and using an exclusive fixed reply queue""","iocanel:1318311703:2011-10-11T13:41:43.761+0000:1318311703:2011-10-11T13:41:43.761+0000:Updated the documentation. 

Thanks for reporting Krzystof!"
0,CAMEL-4533,Bug,Minor,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jean-Baptiste Onofré,Stu Churchill,0,0,2011-10-10 20:34:58+00:00,2011-10-12 07:48:42+00:00,"When attempting to run a query against a datasource to which a connection could not be established, the attempt to rollback the transaction (which has not yet started) causes an NPE to be thrown which loses the root cause exception thrown by the driver","jbonofre:1318376878:2011-10-12T07:47:58.787+0000:1318376878:2011-10-12T07:47:58.787+0000:Fixed on trunk: revision 1182244.
jbonofre:1318376912:2011-10-12T07:48:32.399+0000:1318376912:2011-10-12T07:48:32.399+0000:Fixed on camel-2.8.x: revision 1182245."
0,CAMEL-4532,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Evert Tigchelaar,1,2,2011-10-10 14:59:58+00:00,2016-05-01 10:38:57+00:00,"The current printing component finds the printer by its UNC path
but that doesn't work on other OS's like Linux.
On my Linux box I added a cups server address to /etc/cups/client.conf
Then the printer are accessible by simply its printername (like: HP_LASERJET_4200).
camel-printer cannot find the printer.
The camel-printer should be improved to support printing to a printer on a non windows system.","davsclaus:1341536571:2012-07-06T09:02:51.661+0000:1341536571:2012-07-06T09:02:51.661+0000:Patches is welcome
davsclaus:1462070337:2016-05-01T10:38:57.056+0000:1462070337:2016-05-01T10:38:57.056+0000:We did some modifications to camel-printer"
0,CAMEL-4531,Improvement,Major,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,edge wang,0,0,2011-10-09 15:29:52+00:00,2011-12-02 15:13:41+00:00,"Camel-netty component did not implement oio model of netty, we can only use nio one, however it uses default workerCount parameter from Netty, which is cpu_core_threads*2.


This is far from enough when the underlying app is a little bit slow, e.g. a traditional transactional application. In this situation NioWorker threads become an obvious bottle neck.


I think that exposing workerCount is a very practical yet effective way for one to broaden the usage scenario of camel-netty in various network communication/application environment.


I add a workerCount parameter in the configuration, one can use it in the Endpoint URL: ""netty:tcp://0.0.0.0:1111?...&workerCount=256&..."". I leave the default value to 0 so that one can use Netty default policy by omit the param.


I have tested the patch in a 2 core(4 Threads) machine, using 256 workers, it significantly improves the performance by 15 times, than the default parameter of only 8 workers, while CPU usage only increase 5 times.","edge:1318315729:2011-10-11T14:48:49.897+0000:1318315729:2011-10-11T14:48:49.897+0000:Upload a patch against 2.9-RC, the last patch is only for 2.8.1, since there is some difference in NettyConsumer.java between 2.8.1 and 2.9, the last patch cannot be applied to 2.9 directly. 
njiang:1319418306:2011-10-24T09:05:06.641+0000:1319418306:2011-10-24T09:05:06.641+0000:Applied patch with thanks to Edge.
edge:1322810021:2011-12-02T15:13:41.785+0000:1322810021:2011-12-02T15:13:41.785+0000:Hi, glad seeing my suggestion is adopted, thanks."
0,CAMEL-4530,Bug,Major,2.6.0,"2.7.4, 2.8.2, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-09 12:21:22+00:00,2011-10-25 11:36:11+00:00,"If you use both fixed reply queues and have useMessageIDAsCorrelationID=true, then the dynamic MessageSelectorCreator may not evict the correlationID causing the JMSMessage selector to keep growing.",
0,CAMEL-4529,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-10-09 11:55:18+00:00,2011-10-09 11:57:25+00:00,"trace logging is needed when adding/removing correlation IDs in correlation maps, so we can check logs in case something is wrong.",
0,CAMEL-4528,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,3,2011-10-09 08:01:48+00:00,2011-11-12 14:50:37+00:00,"This allows people to force a re-load of the resources using JMX, but still have cache by default.


See nabble
http://camel.465427.n5.nabble.com/Updating-cached-content-without-restart-tp4883378p4883378.html","rnewcomb:1320916972:2011-11-10T17:22:52.054+0000:1320916972:2011-11-10T17:22:52.054+0000:Patch with unit tests attached.

I also added a note to the XSLT wiki page.
muellerc:1320930020:2011-11-10T21:00:20.051+0000:1320930020:2011-11-10T21:00:20.051+0000:Hey Rich!

Thank you for the patch. We really appreciate it.
We should update the WIKI page *after* we committed the patch. So we can make sure we do not document something we didn't commit/implement. :-)
I will take care of this, if Claus do not grab this issue in the next couple of days...

Best,
Christian
raulvk:1320978436:2011-11-11T10:27:16.533+0000:1320978436:2011-11-11T10:27:16.533+0000:Hi - this is a great feature!

Some time ago I opened an issue because camel-validation was not showing a thread-safe behaviour when loading the XSD: CAMEL-1565. Not sure this could also apply here? If two requests come in at the same time just after the cache is cleared, will the code synchronise?

Thanks,
Raúl.
davsclaus:1320979068:2011-11-11T10:37:48.616+0000:1320979068:2011-11-11T10:37:48.616+0000:Raul yeah the same problem can happen here, so the load method should be synchronized, or some other way of only loading it once for concurrent access.
rnewcomb:1320993594:2011-11-11T14:39:54.982+0000:1320993594:2011-11-11T14:39:54.982+0000:Updated patch with synchronized loadResource() operation. Good catch Raul!
davsclaus:1321063703:2011-11-12T10:08:23.281+0000:1321063703:2011-11-12T10:08:23.281+0000:Rich, thanks for the patch.

I added volatile to the boolean, to ensure thread visibility for the state. Likewise the flag should be reset after loading, so you won't keep re-loading it :)
rnewcomb:1321080637:2011-11-12T14:50:37.417+0000:1321080637:2011-11-12T14:50:37.417+0000:Thanks Claus. We should probably add one more cycle to the unit test to verify that the caching is still in effect after the cache is reset. (I lost that flag reset during a refactor.)"
0,CAMEL-4527,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Claus Ibsen,0,1,2011-10-09 07:00:26+00:00,2012-07-06 09:02:18+00:00,"See
https://github.com/openengsb/labs-paxexam-karaf/wiki


Its going to be part of Karaf 3.0 distribution.
The JARs is in central repo, and its ASL2 license.


Its using Pax Exam 2 as well, so by using this we also get upgraded to Pax Exam 2 at the same time.",davsclaus:1341536538:2012-07-06T09:02:18.481+0000:1341536538:2012-07-06T09:02:18.481+0000:Willem upgraded to pax exam 2
0,CAMEL-4526,Bug,Major,2.5.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-10-08 13:43:33+00:00,2011-10-10 13:44:44+00:00,"Here is the mail thread discusses about it.
http://camel.465427.n5.nabble.com/Query-part-of-HTTP-URI-header-ignored-td4880040.html",njiang:1318225483:2011-10-10T13:44:43.997+0000:1318225483:2011-10-10T13:44:43.997+0000:Applied patch into trunk and camel-2.8.x branch.
0,CAMEL-4525,Task,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-10-08 06:12:32+00:00,2011-10-08 09:38:00+00:00,"As CXF 2.4.3 is released, it's time to upgrade it",njiang:1318037880:2011-10-08T09:38:00.719+0000:1318037880:2011-10-08T09:38:00.719+0000:Applied the patch into trunk and camel-2.8.x branch.
0,CAMEL-4524,Task,Minor,"2.7.3, 2.8.1","2.7.4, 2.8.2, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.2, 2.9.0",Christian Müller,Christian Müller,0,0,2011-10-06 18:58:36+00:00,2011-10-09 20:37:47+00:00,No Desc,"muellerc:1318162474:2011-10-09T20:14:34.468+0000:1318162474:2011-10-09T20:14:34.468+0000:Committed to trunk with r1180703
muellerc:1318163197:2011-10-09T20:26:37.409+0000:1318163197:2011-10-09T20:26:37.409+0000:Committed to branch 2.8.x with r1180706
muellerc:1318163549:2011-10-09T20:32:29.085+0000:1318163549:2011-10-09T20:32:29.085+0000:Committed to branch 2.7.x with r1180711"
0,CAMEL-4523,Task,Minor,2.8.1,"2.7.4, 2.8.2, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.2, 2.9.0",Christian Müller,Christian Müller,0,0,2011-10-06 18:52:05+00:00,2011-10-10 21:46:58+00:00,No Desc,"muellerc:1318197084:2011-10-10T05:51:24.031+0000:1318197084:2011-10-10T05:51:24.031+0000:Committed to trunk with r1180785
muellerc:1318253192:2011-10-10T21:26:32.712+0000:1318253192:2011-10-10T21:26:32.712+0000:Committed to branch 2.8.x with r1181246
muellerc:1318254215:2011-10-10T21:43:35.718+0000:1318254215:2011-10-10T21:43:35.718+0000:Committed to branch 2.7.x with r1181254"
0,CAMEL-4522,New Feature,Trivial,2.8.1,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Eugene Kiselev,0,0,2011-10-06 18:05:13+00:00,2011-11-14 19:42:54+00:00,"It would be a good idea to add the compression to the SFTP component. 
As it was suggested in this jira: https://issues.apache.org/jira/browse/CAMEL-4506 I'm attaching the class with an example how it might be done.","ujeen:1317895676:2011-10-06T18:07:56.345+0000:1317895676:2011-10-06T18:07:56.345+0000:we need to notify user that the third party library is necessary to have the compression working properly and as a possible candidate we may provide user with the jzlib link http://www.jcraft.com/jzlib/
It's license doesn't comply the ASF one so all we can do is just suggesting.
davsclaus:1319941445:2011-10-30T10:24:05.498+0000:1319941445:2011-10-30T10:24:05.498+0000:Thanks for the patch. I added the compression option to the SftpConfiguration where the other SFTP specific confis are."
0,CAMEL-4521,Improvement,Minor,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",David Valeri,Rich Newcomb,0,0,2011-10-05 21:20:02+00:00,2011-10-12 03:05:17+00:00,"The camel-jetty JettyHttpProducer only transposes Camel message body content into the HTTP request body if the HTTP method is POST.  The  component should be updated to also attach body content when the HTTP PUT method is specified.  This will better support the expected HTTP method semantics, and will allow camel-jetty to be used as a client for systems that employ the ""High REST"" architecture paradigm.","rnewcomb:1317820966:2011-10-05T21:22:46.872+0000:1317820966:2011-10-05T21:22:46.872+0000:Attached patch
davsclaus:1317936910:2011-10-07T05:35:10.061+0000:1317936910:2011-10-07T05:35:10.061+0000:Could we check the other HTTP producers in
- camel-ahc
- camel-http
- camel-http4

If they have a similar issue?"
0,CAMEL-4520,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,David Valeri,0,0,2011-10-05 16:13:57+00:00,2019-07-03 05:04:57+00:00,"Add the ability to have static prefix and suffix strings for the properties component.  This feature reduces typing when using the placeholders as a prefix of ""com.example.app"" can be used to reduce


com.example.app.db.url
com.example.app.db.username
com.example.app.db.password


to 


db.url
db.username
db.password


when used in the DSL.",
0,CAMEL-4519,Bug,Minor,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Won't Fix,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-05 15:46:55+00:00,2011-10-06 07:05:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/Using-properties-in-XPath-Spring-tags-tp4869840p4869840.html","davsclaus:1317855944:2011-10-06T07:05:44.098+0000:1317855944:2011-10-06T07:05:44.098+0000:The XPath framework does not support this, to have functions as string interpolations.

Instead CAMEL-3697 is a ticket to add dynamic xpath expressions"
0,CAMEL-4518,Task,Minor,2.8.0,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-10-05 12:34:22+00:00,2011-10-05 12:41:25+00:00,"Jackson 1.8.6 has been released.


Also notice 1.9.0 has been released, but we should at first upgrade to the latest patch release on the 1.8.x branch.
And possible backport that upgrade to Camel 2.8 branch.


Then we can consider upgrading to 1.9.x Jackson on Camel 2.9.x branch.",
0,CAMEL-4517,Bug,Major,2.8.1,2.9.0,"
None
",Resolved,Invalid,2.9.0,Claus Ibsen,Timothy,0,1,2011-10-05 08:43:26+00:00,2011-11-12 10:45:13+00:00,"I am trying CBR pattern and using 'choice', 'when', 'to' and 'endChoice()'.
I can actually have the code compile, but always got cast exception when running it.


this really confused me, because I checked every steps and can't find any problems.
does anyone have similar situation?


here is my Camel route in JDSL:
=========================================================================
18 CamelContext context = new DefaultCamelContext();
19 ConnectionFactory connectionFacotyr = new ActiveMQConnectionFactory(""tcp://P10118178-T400:61616"");
20 context.addComponent(""jms"", JmsComponent.jmsComponentAutoAcknowledge(connectionFacotyr));
21     
22 context.addRoutes(new RouteBuilder() {
23   public void configure() throws Exception 

{
24     from(""jms:incomingOrders"")
25       .choice()
26	   .when(header(""CamelFileName"").endsWith("".crt""))
27	     .to(""jms:crtQueue"").endChoice()
28	   .when(header(""CamelFileName"").endsWith("".zpx""))
29	     .to(""jms:zpxQueue"");
30	     }

31     });
=========================================================================


pretty simple route. but always got an 'java.lang.ClassCastException' when I start the Camel route.
the exception message as below: (the exception occurred at line 27)
=========================================================================
java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1203)
	at SimpleTest$1.configure(SimpleTest.java:27)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:277)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:263)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:603)
	at SimpleTest.main(SimpleTest.java:22)
=========================================================================


Maven pom.xml:
=========================================================================
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.pic.newigx.sample</groupId>
  <artifactId>rider.auto.parts.sample1.eip.filter1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.camel</groupId>
  			<artifactId>camel-maven-plugin</artifactId>
  			<version>2.8.0</version>
  		</plugin>
  	</plugins>
  </build>
  <dependencies>
  	<dependency>
  		<groupId>org.apache.camel</groupId>
  		<artifactId>camel-jms</artifactId>
  		<version>2.8.1</version>
  	</dependency>
  	<dependency>
  		<groupId>org.apache.camel</groupId>
  		<artifactId>camel-spring</artifactId>
  		<version>2.8.1</version>
  	</dependency>
  	<dependency>
  		<groupId>org.apache.activemq</groupId>
  		<artifactId>activemq-core</artifactId>
  		<version>5.3.1</version>
  	</dependency>
  </dependencies>
</project>
=========================================================================","choufeng.tw:1320621134:2011-11-07T07:12:14.481+0000:1320621134:2011-11-07T07:12:14.481+0000:that was strange, if I change the route from '.to(""jms:crtQueue"")' to '.loadBalance().roundRobin().to(""jms:crtQueue"")', and it works well.
but without .loadBalance().roundRobin(), an ClassCastException(org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition) will be thrown.
to pop the last type of the stack by using endChoice() seems to have some problem inside.
davsclaus:1321065913:2011-11-12T10:45:13.653+0000:1321065913:2011-11-12T10:45:13.653+0000:Its a limitation of the Java Programming Language in terms of doing DSL with generics etc."
0,CAMEL-4516,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-10-05 07:07:40+00:00,2011-10-11 14:42:58+00:00,"If you use camel jmx annotations to publish a mbean you can not use jmx Notifications.


The reason is that the mbean assembler does not support the mbean info for this. Additionally the created Required Model MBean is not coupled with the user class. So there is no way to send notifications. 


So I propose to add two Annotations @ManagedNotification and @ManagedNotifications and handle them in the assembler. 


To support sending of Notifications I propose to add two interfaces NotificationSender and NotificationSenderAware that allow the user code to get access to the generated Model MBean to send out the Notification",
0,CAMEL-4515,Improvement,Minor,2.8.1,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Damian,0,4,2011-10-05 04:17:57+00:00,2014-06-01 14:52:24+00:00,"Currently the Camel-Spring-WS component does not support the setting of SOAP Headers and has issues getting them. The current issue getting the SOAP Headers when receiving a message is that the resulting header key includes the namespace.


Change the component so that a Camel header ""CamelSpringWebserviceSoapHeader"" can be populated with an intended SOAP Header for a request, and that this Header is also populated from the SOAP Header on a response.","damianharvey:1317759605:2011-10-05T04:20:05.407+0000:1317759605:2011-10-05T04:20:05.407+0000:Patch including change + unit test.
damianharvey:1319484204:2011-10-25T03:23:24.780+0000:1319484204:2011-10-25T03:23:24.780+0000:Updated patch to include setting of SOAP Headers and well as updating how they are retrieved.
damianharvey:1319484236:2011-10-25T03:23:56.760+0000:1319484236:2011-10-25T03:23:56.760+0000:This time with license
damianharvey:1319484288:2011-10-25T03:24:48.860+0000:1319484288:2011-10-25T03:24:48.860+0000:Please disregard the first patch : CAMEL-4515.patch and instead use CAMEL-4515.1.patch


davsclaus:1319941721:2011-10-30T10:28:41.415+0000:1319941721:2011-10-30T10:28:41.415+0000:Is there a reason why you do not populate the header with the headers from the soap header? To make these headers easily avaiable for end users?

Also you create a new transformer when you transform the soap header. Is it not better to use some Camel type converter or re-use the transformer to avoid creating a new instance all the time.
damianharvey:1320248949:2011-11-02T23:49:09.765+0000:1320248949:2011-11-02T23:49:09.765+0000:I took out the populating of the headers as I thought that it would be more consistent to have one way of writing/reading headers. On reflection it reduces the usability so I've put that back in. What are your thoughts on setting the Exchange Header? Should it be a collection of Source or maybe a single Source from the header level? I've implemented the latter.

I've modified the transformation to use a static XmlConverter. Is this the correct way to use this?

Attached is an updated patch.
moxximus:1366962733:2013-04-26T15:52:13.733+0000:1366962733:2013-04-26T15:52:13.733+0000:Claus, was this patch ever deployed? I'm not seeing the header definition constants in 2.11-SNAPSHOT.
muellerc:1366972304:2013-04-26T18:31:44.032+0000:1366972304:2013-04-26T18:31:44.032+0000:Not yet as you can see on the ticket status. It's still open/unresolved.
moxximus:1366977186:2013-04-26T19:53:06.834+0000:1366980743:2013-04-26T20:52:23.568+0000:I suppose it was just wishful thinking. I've got a project that's due next week that needs this functionality so I'll take up the task of finishing the patch.

EDIT: What exactly was wrong with this patch?
davsclaus:1367014379:2013-04-27T06:12:59.489+0000:1367015703:2013-04-27T06:35:03.250+0000:It should NOT use that static XML converter directly, but use the camel's type converter.
But that's not so easy to avoid. Ideally the component should keep an instance of the xml converter, so we don't have static anymore.

davsclaus:1367016519:2013-04-27T06:48:39.869+0000:1367016519:2013-04-27T06:48:39.869+0000:Thanks for the patch.

I added a little bit of docs.

We can revisit the static XmlConverter later.
moxximus:1367063510:2013-04-27T19:51:50.758+0000:1367063510:2013-04-27T19:51:50.758+0000:Thanks for resolving this. Much appreciated.
lucassmith:1400759719:2014-05-22T19:55:19.697+0000:1400760076:2014-05-22T20:01:16.824+0000:Guys, the lack of the possibility to inject a custom XmlConverter (or even a custom TransformerFactory into XmlConverter) is a big limitation. I cannot create a SOAP header with multiple nodes:
{code}
<soap-env:Header>
<MyFirstHeader>...</MyFirstHeader>
<MySecondHeader>...</MySecondHeader>
</soap-env:Header>
{code}

I can only have 'one-child-node' SOAP header. The current implementation just performs identity transformation which blindly copies the content of Camel's SOAP header into <soap-env:Header>. It can be resolved with a custom Transformer with XSLT. However, I cannot set that custom Transformer because I cannot inject a custom TransformerFactory because XmlConverter is 100% static.
lucassmith:1401605544:2014-06-01T14:52:24.114+0000:1401605544:2014-06-01T14:52:24.114+0000:There is a workaround on Spring-WS side: http://leakfromjavaheap.blogspot.com/2014/05/multiple-soap-headers-in-apache-camels.html ."
0,CAMEL-4514,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Bilgin Ismet Ibryam,Jeff Segal,1,2,2011-10-04 17:29:39+00:00,2011-11-26 10:36:55+00:00,"RoutePolicy currently supports the following callbacks as of 2.8.x:


onExchangeBegin(Route route, Exchange exchange) 
onExchangeDone(Route route, Exchange exchange) 
onInit(Route route) 


If Routes have any cleanup tasks that need to be associated with the removal of a Route from a CamelContext, an onRemove(Route route) callback would be very helpful and it seems that RoutePolicy is the appropriate place to add this capability.","bibryam:1321669859:2011-11-19T10:30:59.456+0000:1321669859:2011-11-19T10:30:59.456+0000:Hi Jeff, can you give a try this patch and tell whether it works as expected?
bibryam:1321669964:2011-11-19T10:32:44.830+0000:1321669964:2011-11-19T10:32:44.830+0000:At the moment the test from patch are failing because of  #4696
davsclaus:1322275015:2011-11-26T10:36:55.503+0000:1322275015:2011-11-26T10:36:55.503+0000:Bilgin, thanks for the patch.

This is an API change so we cannot backport."
0,CAMEL-4513,Bug,Minor,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Thomas Gueze,0,0,2011-10-04 15:04:09+00:00,2012-04-10 11:56:30+00:00,"The bug occured in the 2.6.0 version of Camel I'm using. I haven't test it against the latest version but I've checked the sources and it doesn't seem to have change since.


Given a camel route, with a onException clause like this :



this.onException(MyException.class)
    .onWhen(simple(""${exception.myExceptionInfo.aValue} == true""))
    ...




MyException is a customed exception like this :


MyException.java
public class MyException extends Exception {
   ....
   public MyExceptionInfo getMyExceptionInfo() {
     ...
   }
}




What I've observed is that when BeanExpression.OgnlInvokeProcessor.process iterate through the methods to calls, it does :



                // only invoke if we have a method name to use to invoke
                if (methodName != null) {
                    InvokeProcessor invoke = new InvokeProcessor(holder, methodName);
                    invoke.process(resultExchange);

                    // check for exception and rethrow if we failed
                    if (resultExchange.getException() != null) {
                        throw new RuntimeBeanExpressionException(exchange, beanName, methodName, resultExchange.getException());
                    }

                    result = invoke.getResult();
                }




It successfully invoke the method : invoke.process(resultExchange);
But it checks for exception in the exchange. Since we are in an exception clause, there is an actual exception (thrown by the application, but unrelated with the expression language search) and it fails


There is a simple workaround for that : writing his own predicate class to test wanted conditions",davsclaus:1319351034:2011-10-23T14:23:54.995+0000:1319351034:2011-10-23T14:23:54.995+0000:Thanks for reporting.
0,CAMEL-4512,Bug,Major,2.5.0,2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Claus Ibsen,Benoit Bordonne,0,0,2011-10-04 12:48:35+00:00,2011-10-30 10:29:52+00:00,"Using the Bitronics transaction manager to create an XA connection between MQSeries 5.3 and Oracle 11 to manage follwowing actions within one transaction:



dequeue a message from a MqSeries queue
Write the content in the DB



This works fine (message is dequeued and written in the DB), from an external client it is possible to check that the message does not exist in the queue anymore. 
When the Camel context is shutdown, the messages appear again in the queue.


Using the same code in Camel 2.8, it is working fine.","davsclaus:1317766178:2011-10-05T06:09:38.682+0000:1317766178:2011-10-05T06:09:38.682+0000:Are you saying you have a problem in Camel 2.5.0, and the same code works fine in Camel 2.8.0 ?
bbo:1317775348:2011-10-05T08:42:28.593+0000:1317775348:2011-10-05T08:42:28.593+0000:Sorry I wrote the wrong version number (the problem happens in 2.6 and not in 2.5), so for clarity:

I used the same code in in Camel 2.6 and in Camel 2.8.
Result:
Camel 2.6: 
after shutdown, the message ""reappear"" in the queue. (when I check the queue from an external client before shutdown, the messages are not in the queue any more, what is the expected behaviour - meaning the transaction was really commited - after shutdown the messages are back in the queue)

Camel 2.8: it works, the messages are consumed and the result is written in DB.
Even after shutdown, no message is left on the queue, what is the expected result.


So to answer your question shortly:
I have the problem in Camel 2.6, and the same code works fine in Camel 2.8





davsclaus:1317775585:2011-10-05T08:46:25.673+0000:1317775585:2011-10-05T08:46:25.673+0000:You should probably disable consumer cache on the JMS side.

See details here: Transactions and Cache Levels
http://camel.apache.org/jms

eg set cacheLevelName=CACHE_NONE"
0,CAMEL-4511,Improvement,Trivial,2.8.1,None,"
None
",Resolved,Won't Fix,2.9.0,Claus Ibsen,Robert Liguori,0,0,2011-10-04 00:53:35+00:00,2011-10-05 06:11:31+00:00,"All the README.txt files for the Camel examples provide a general description of the example and how to run them (along with links for more information), except for the following two sample projects:


--> camel-example-gae 
--> camel-example-gauth


These sample projects do not include general description or execution steps.


Please consider improving the README.txt files for the camel-example-gae and camel-example-gauth example projects to be consistent with the rest of the README.txt files.


Thanks.","davsclaus:1317766291:2011-10-05T06:11:31.292+0000:1317766291:2011-10-05T06:11:31.292+0000:These examples are throughly documented on the web, where you have better details with images and whatnot."
0,CAMEL-4510,Bug,Major,2.8.1,"2.7.5, 2.8.3, 2.9.0","

flatpack

",Closed,Fixed,"2.7.5, 2.8.3, 2.9.0",Christian Müller,Dragisa Krsmanovic,0,0,2011-10-03 23:30:48+00:00,2011-10-23 10:28:59+00:00,"In the simple example:



from(""file:/foo.csv"")
   .setHeader(""MyHeader"", constant(""Hello""))
   .to(""flatpack:foo"");

from(""flatpack:foo"")
   .to(""bean:importer"");




Header ""MyHeader"" is not being passed to the bean in the second route.


Looking at Camel Flatpack code I see that in FixedLengthEndpoint.processDataSet it creates an exchange object from scratch and, thus, looses any incoming headers.","muellerc:1317681382:2011-10-04T06:36:22.781+0000:1317681382:2011-10-04T06:36:22.781+0000:Hello Dragisa!
Thanks for reporting. Do you consider to provide a patch for it?
Best,
Christian
dragisak:1317718660:2011-10-04T16:57:40.861+0000:1317718660:2011-10-04T16:57:40.861+0000:If I get some time, I'll try to submit a patch. Currently I have a workaround for this.
muellerc:1319207524:2011-10-21T22:32:04.827+0000:1319207524:2011-10-21T22:32:04.827+0000:Committed to trunk with revision r1187582
muellerc:1319335878:2011-10-23T10:11:18.014+0000:1319335878:2011-10-23T10:11:18.014+0000:Committed to branch 2.8.x with revision r1187857
muellerc:1319336484:2011-10-23T10:21:24.804+0000:1319336484:2011-10-23T10:21:24.804+0000:Committed to branch 2.7.x with revision r1187859
muellerc:1319336927:2011-10-23T10:28:47.698+0000:1319336927:2011-10-23T10:28:47.698+0000:Hello Dragisa!
It would be great if you could test whether this patch fix your issue.
Best,
Christian"
0,CAMEL-4509,Bug,Major,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Roy Truelove,0,1,2011-10-03 15:37:31+00:00,2011-10-05 09:46:50+00:00,"We have a route which unmarshals a soap msg into an object.  On that route is a dead letter queue error handler.  That DLQ sets headers on the message used later for error reporting.


If the error is thrown by the marshaller, the first header that we try to set is wiped out.  The 2nd header is set with no problem.  If an error is thrown by something other than the marshaller, the correct headers are set.


See attached project with failed test case (canSetHeadersOnBadXmlDeadLetter)","roytruelove@gmail.com:1317627531:2011-10-03T15:38:51.667+0000:1317627667:2011-10-03T15:41:07.933+0000:Added full maven project with failing unit test
roytruelove@gmail.com:1317631013:2011-10-03T16:36:53.777+0000:1317631013:2011-10-03T16:36:53.777+0000:WORKAROUND:  have the first step in the DLQ route set a header that's not intended for use.  This will 'reset' the exchange and the next header will be set.
davsclaus:1317779210:2011-10-05T09:46:50.861+0000:1317779210:2011-10-05T09:46:50.861+0000:The work around is either to set the header 2 times, or have a noop operation at first, such as a log, or an empty processor."
0,CAMEL-4508,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-10-03 07:42:58+00:00,2011-10-25 11:34:25+00:00,"For example when people poll files, then they may want to react if there is no files to pickup. Currently you would have to use a poll strategy, but we should add an option you can configure on the endpoint, to have it emit an null message instead.


sendEmptyMessageWhenIdle - false - If this option is true, and there was no messages to poll, then we simulate processing a single message, by sending an empty message.","davsclaus:1317599007:2011-10-03T07:43:27.204+0000:1317599007:2011-10-03T07:43:27.204+0000:See nabble
http://camel.465427.n5.nabble.com/Copy-File-catch-non-existing-file-tp4853329p4853329.html
rnewcomb:1318462664:2011-10-13T07:37:44.903+0000:1318462664:2011-10-13T07:37:44.903+0000:Patch and unit tests attached.

I will update the wiki after the patch is applied.
davsclaus:1318987187:2011-10-19T09:19:47.388+0000:1318987187:2011-10-19T09:19:47.388+0000:Thanks for the patch. I am applying it now.

The new option should be documented here
http://camel.apache.org/polling-consumer.html

At the scheduled poll consumer. But may also add/refer to it from some of these components as it can be commonly used, such as the file/ftp etc.


davsclaus:1318987514:2011-10-19T09:25:14.663+0000:1318987514:2011-10-19T09:25:14.663+0000:Rich also add a note about this new option in the release notes.

The community have frankly asked from time to time about this improvement.
So its about time we listen :)
davsclaus:1319513665:2011-10-25T11:34:25.785+0000:1319513665:2011-10-25T11:34:25.785+0000:Updated the documentation"
0,CAMEL-4507,Task,Trivial,2.8.1,,"
None
",Closed,Not A Problem,None,Unassigned,Robert Liguori,0,0,2011-10-02 03:34:23+00:00,2011-10-05 13:12:46+00:00,"Performed 'mvn clean install' from C:\apache-camel-2.8.1\examples...


... several warnings occurred, related to building bundles.


If possible, please resolve warnings.","davsclaus:1317508468:2011-10-02T06:34:28.032+0000:1317508468:2011-10-02T06:34:28.032+0000:Please be more specific which warnings you have seen.
gliesian:1317512950:2011-10-02T07:49:10.393+0000:1317512950:2011-10-02T07:49:10.393+0000:Example warnings seen: (see attached file for build output)

[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for com.thoughtworks.xstream.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for freemarker.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for javax.persistence.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for net.sf.flatpack.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.antlr.stringtemplate.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.abdera.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.commons.httpclient.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.commons.logging.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.cxf.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.mina.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.qpid.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.velocity.*
[WARNING] Warning building bundle org.apache.camel:camel-example-bam:bundle:2.8.1 : Did not find matching referal for org.apache.xmlbeans.
gliesian:1317791483:2011-10-05T13:11:23.967+0000:1317791546:2011-10-05T13:12:26.291+0000:Closing, as per Claus Ibsen's comment, ""The WARN is harmless, its part of making the artifcats OSGi bundle compliant."""
0,CAMEL-4506,Improvement,Minor,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Hadrian Zbarcea,Eugene Kiselev,0,0,2011-09-30 15:16:07+00:00,2011-10-12 04:36:42+00:00,"As it was discussed in this topic http://camel.465427.n5.nabble.com/The-SFTP-component-the-keyboard-interactive-auth-method-support-td4853523.html
The SFTP component may be slightly improved to support the keyboard-interactive auth method and the compression,


Preamble:
It appeared that our sftp share we get files from doesn't support the ssh password auth method and we're not allowed to put the public key to there. So the only ssh auth method we can use is the keyboard-interactive. Unfortunately the SFTP camel component doesn't support this.
However this can be easily fixed simply by providing the Jsch session with both the  com.jcraft.jsch.UserInfo and com.jcraft.jsch.UIKeyboardInteractive interfaces. The UIKeyboardInteractive has the only one promptKeyboardInteractive method which returns String[] containing the password entered by user interactively. In our case I simply return a password.
The implementation example is attached.


Also it's sometime required to set the ssh compression to be able to process longsize files. The compression fix is also implemented in the attached file. Compression requires the zlib jar to be in the pom.
This was tested with the 0.1.44-1 version of the jsch and the 1.0.7 version of the jzlib.","rkettelerij:1317379802:2011-09-30T18:50:02.820+0000:1317379802:2011-09-30T18:50:02.820+0000:Eugene, thanks for contributing. Would you mind re-attaching your source file and checking the ""Grant license to ASF for inclusion in ASF works"" radio button? See http://camel.apache.org/contributing.html paragraph ""Submitting patches"".  
hadrian:1317380385:2011-09-30T18:59:45.965+0000:1317380385:2011-09-30T18:59:45.965+0000:On the users@ list, Eugene indicated that his contribution requires a dependency released under LGPL (com.jcraft:jzlib). Contributions with dependencies on non-approved licenses [1] cannot be accepted. From what I see jzlib is licensed under LGPL [2].

[1] http://www.apache.org/legal/resolved.html#category-x
[2] http://www.jcraft.com/jzlib/LICENSE.txt

davsclaus:1317423952:2011-10-01T07:05:52.513+0000:1317423952:2011-10-01T07:05:52.513+0000:I think there was 2 things int the patch
- keyboard
- compression

And the latter required the LGPL library. So we may ask Eugene for a new patch which only includes the keyboard thing.
davsclaus:1317424054:2011-10-01T07:07:34.335+0000:1317424054:2011-10-01T07:07:34.335+0000:It looks like the compression thing does not in the code require a compile time dependency on the LGPL library. So we may possible be able to add a compression option, the end users can enable, and then the end users must by themselves add the LPGL library.
ujeen:1317463829:2011-10-01T18:10:29.615+0000:1317463839:2011-10-01T18:10:39.489+0000:Claus, thank you. 
Sorry I was not certain about how tight this code is linked to zlib as I didn't think about the licence incompatibilities.  So yeah the use of the zlib maybe optional and user is free to choose whatever he wants for the compression. I didn't include any zlib usage in the code itself. 


ujeen:1317617469:2011-10-03T12:51:09.313+0000:1317617469:2011-10-03T12:51:09.313+0000:The compression related code has been removed. Now this file contains only the keyboard-interactive method fix.
davsclaus:1317766958:2011-10-05T06:22:38.574+0000:1317766958:2011-10-05T06:22:38.574+0000:Eugene do you mind attaching a 2nd patch with the compression patch. We may be able to add to the wiki pages a note that people must add the compression library manually.

I am adjusting your patch a bit to make the changes directly in the SftpOperations class.
davsclaus:1317767469:2011-10-05T06:31:09.851+0000:1317767469:2011-10-05T06:31:09.851+0000:Eugene, it would be better to create a new JIRA ticket for the compression as it will show up better in the release notes. As this ticket is titled about the auth and not about compression."
0,CAMEL-4505,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Maria Iracheta,0,0,2011-09-30 13:47:36+00:00,2011-10-03 18:24:57+00:00,"It would be nice to make the enhancement in the FileUtils 'renameFile' method configurable. Not long ago the 'renameFile' method was changed to try copy/delete after 3 tries of renaming a File. In certain cases you would want the renaming to fail as a way of knowing that the File is opened or being used, otherwise it might cause the file to be copied and not deleted (because it is opened).


Apart of this enhancement request I think there is a bug in that area:


                if (!deleteFile(from)) {
                    LOG.warn(""Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded"", new Object[]

{from, to, from});


                    renamed = false;


                }


                renamed = true;





Shouldn't this be :





                if (!deleteFile(from)) {


                    LOG.warn(""Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded"", new Object[]{from, to, from}

);
                    renamed = false;
                }
                else renamed = true;",davsclaus:1317455923:2011-10-01T15:58:43.903+0000:1317455923:2011-10-01T15:58:43.903+0000:There is a new option copyAndDeleteOnRenameFail you can use to control this.
0,CAMEL-4504,Improvement,Minor,"2.7.3, 2.8.1","2.7.4, 2.8.2, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.2, 2.9.0",David Valeri,David Valeri,0,0,2011-09-29 18:39:05+00:00,2011-10-25 11:35:49+00:00,"Prior to 2.4.0, exceptions in a bean expression were not propagated when used in a choice processor.  The route would continue on as if the expression had evaluated to a Boolean value.


I could not identify a unit test covering this scenario associated with the code that resolves the above behavior so I am adding one to prevent regression.",
0,CAMEL-4503,Bug,Major,2.8.1,None,"
None
",Resolved,Fixed,"2.8.3, 2.9.0",Willem Jiang,Jonathan Anstey,0,1,2011-09-29 14:50:52+00:00,2011-10-21 09:42:24+00:00,"This is probably due to producers being cached based on unresolved endpoint URI, rather than the resolved endpoint URI. Haven't tested this theory out though.


See message on user list http://markmail.org/message/sdysp6sspq5lomf4","janstey:1317279550:2011-09-29T14:59:10.848+0000:1317279550:2011-09-29T14:59:10.848+0000:IRC chat on this here http://irclogs.dankulp.com/logs/irclogger_log/karaf?date=2011-09-29,Thu&sel=335#l331
achim_nierbeck:1317770953:2011-10-05T07:29:13.179+0000:1318204727:2011-10-10T07:58:47.735+0000:Unfortunately I just realized that the mentioned workaround doesn't work :(

I'm investigating why it isn't I'm down to the following right now: 

answer = endpoints.get(getEndpointKey(uri));

in DefaultCamelContext does give me the wrong Endpoint, at least it's bound to the wrong URI. 

it's called from 

endpoint = resolveEndpoint(exchange, recipient);

in RecipientListProcessor.createProcessorExchangePairs(...)

The following scenario doesn't work right now for the workaround, this might be a different bug though: 
- Recipient A is resolved the way it should work and can be called
- if Recipient B is questioned it also works and can be used. 
- if Recipient A is questioned from the cache again, Recipient B is provided and therefore the requests end up 
  on the wrong host. 

I also added a comment to the mailing-list about this. 
davsclaus:1319010747:2011-10-19T15:52:27.966+0000:1319010747:2011-10-19T15:52:27.966+0000:Okay the bug seems to be in camel-cxf, in CxfComponent.createEndpoint. As it return the same endpoint instance even though the ?address is different.
davsclaus:1319011749:2011-10-19T16:09:09.617+0000:1319011749:2011-10-19T16:09:09.617+0000:CAMEL-4139 causes this problem, it will lookup existing bean by its id, and reuse that as CxfEndpoint.
Even if CxfComponent is creating a new CxfEndpoint.

It seems the problem is that if you omit the address in the <cxf:cxfEndpoint> in the XML file.
And then you want to use that <cxf:cxfEndpoint> bean but specific the address at runtime. Then CxfComponent
will still hand out a shared CxfEndpoint. 

It guess the tricky part is that with cxf:bean:xxx you refer to a bean, and then you *also* provide additional configurations which should override.
This seems a hard path to support. Maybe cxf:bean:xxx should be made to not accept any parameters at all, if that makes sense.

Alternative the cxf:bean:xxx should be sort of a template, and then being able to create ""clones"" of itself.
njiang:1319058272:2011-10-20T05:04:32.860+0000:1319058272:2011-10-20T05:04:32.860+0000:In most case the configure of cxfEndpoint bean will not be changed, it should be OK if you just reuse the bean endpoint.
If there are some parameter which can be used to override the configuration in the endpoint uri, we could clone a new endpoint to use.
davsclaus:1319068041:2011-10-20T07:47:21.496+0000:1319068041:2011-10-20T07:47:21.496+0000:Willem I have committed an unit tests that reproduces the issue
tests/camel-itest/src/test/java/org/apache/camel/itest/greeter/RecipientListCxf2Test.java

With your recent fix on trunk (eg the clone) the problem with picking up the wrong bean is resolved as far.
But we get a NPE exception later.

{code}
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.prepareRequest(CxfProducer.java:168)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:89)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:321)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:212)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:575)
{code}

The CxfBinding is null on the endpoint. So I guess a little more fix is needed. Do you mind digging into this?
njiang:1319069623:2011-10-20T08:13:43.397+0000:1319069623:2011-10-20T08:13:43.397+0000:@Claus
That's my bad, I will update the copy method of CxfEndpoint by setting the list reference with a deep copy one.
njiang:1319072570:2011-10-20T09:02:50.770+0000:1319072570:2011-10-20T09:02:50.770+0000:The NPE is caused by the clone method of CxfEndpoint, as you know CxfEndpoint extends the ServiceSupport object which has lots of AutomBoolean objects.
If the CxfEndpoint instance is started, the cloned CxfEndpoint will not start again.
It looks like calling the clone method is not a idea way to resolve such issue. I'm still looking for a good solution. 
njiang:1319161344:2011-10-21T09:42:24.821+0000:1319161344:2011-10-21T09:42:24.821+0000:This is fixed by CAMEL-4561"
0,CAMEL-4502,Task,Trivial,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-29 14:00:41+00:00,2011-09-29 14:04:55+00:00,The getTimeout() should return null like the other EIP does,
0,CAMEL-4501,New Feature,Major,2.8.1,Future,"
None
",Resolved,Later,Future,Unassigned,Brendan Moynihan,3,4,2011-09-29 13:32:42+00:00,2017-02-28 12:44:03+00:00,"Please see the following thread for futher information. 
http://camel.465427.n5.nabble.com/SMPP-to-SMPP-using-camel-td4845410.html


The improvement would be to allow CAMEL be a bi directional router between SMPP peers.
ie. ESME/SMSC <=> CAMEL <=> SMSC/ESME.


Typical flow might be ESME sends submit-sm to CAMEL.
Based on destination address, CAMEL can route the submit-sm to a specific SMSC connection.
Deliver SM for receipt can subsequently be received into CAMEL from SMSC and routed to the specific originating ESME.


Also, Can CAMEL consume a submit sm from an ESME and produce a deliver sm to SMSC?


Should be able to perform this operation for SUBMIT, DELIVER, DATA type SMPP messages.","davsclaus:1424128267:2015-02-17T07:11:07.935+0000:1424128267:2015-02-17T07:11:07.935+0000:What it is that today's camel-smpp cannot do?
http://camel.apache.org/smpp"
0,CAMEL-4500,Improvement,Major,2.8.1,"2.8.2, 2.9.0","

jmx
trace

",Resolved,Fixed,"2.8.2, 2.9.0",Christian Schneider,Christian Schneider,0,0,2011-09-29 08:48:51+00:00,2011-10-11 14:42:20+00:00,"We should create a base for Camel Trace toolings so these can trace the full message content.


The trace event should contain:



all Exchange Data including properties
all Message Data including headers



There should be a setting to truncate the message body as it can be quite long and often in tracing not all details are needed.


One question is if this tracing should be combined with the current Notifications or should be a separate thing.","davsclaus:1317947943:2011-10-07T08:39:03.977+0000:1317947943:2011-10-07T08:39:03.977+0000:I suggest to use the same format/logic that we already have on browseMessageAsXml on ManagedBrowsableEndpoint. Then its consistent, instead of two different formats.
davsclaus:1317947980:2011-10-07T08:39:40.413+0000:1317947980:2011-10-07T08:39:40.413+0000:Should not backport to 2.8.x as it breaks API
cschneider:1317948486:2011-10-07T08:48:06.260+0000:1317948486:2011-10-07T08:48:06.260+0000:What API does it break?"
0,CAMEL-4499,Task,Major,None,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-09-29 00:31:15+00:00,2011-09-29 00:38:34+00:00,We're using version 1.7_2 of org.apache.servicemix.bundles.jasypt and the version of Karaf we're using is on 1.7_3. These should be the same.,
0,CAMEL-4498,New Feature,Major,2.9.0,None,"

features

",Resolved,Fixed,2.10.0,Moulliard Charles,Christopher Köster,4,4,2011-09-28 15:00:19+00:00,2012-03-21 19:33:03+00:00,"We have build an implementation of websockets in Apache Camel. In combination with the strengths of Apache Camel you can push events from all given components (file, ftp, hazelcast, queue, etc.) to your browser. This offers great possibilities e.g. in process tracking, process driven forms and others.


It is fully bidirectional (in contrast to the AHC-component) and can therefore be used for producers and consumers. 


To get a better idea of what has been done so far, please have a look at:
https://github.com/catify/camel-websocket","chris-koester:1320375607:2011-11-04T11:00:07.495+0000:1320375607:2011-11-04T11:00:07.495+0000:Please let me know if there is a general interest in a component capable of this.
lauri.lehmijoki@iki.fi:1322082344:2011-11-24T05:05:44.308+0000:1322082344:2011-11-24T05:05:44.308+0000:WebSocket allow synchronous communication from A to B, where B sits behind a firewall. 

This means that B (who sits behind a firewall) doesn't have to poll for new messages from an endpoint. Neither does it have to send output data to a return address defined by A. As a result, latency decreases and the integration model becomes more simple. Another consequence of synchronous communication is that the integration system can be stateless, removing the need for message queues and aggregators in some cases.
hadrian:1322083197:2011-11-24T05:19:57.946+0000:1322083197:2011-11-24T05:19:57.946+0000:I took a very quick look and it's interesting. Dependencies look alright too. I'll try to spend a bit of time to review it in the coming days if nobody else has spare cycles. Thanks for the contribution.
razmatei:1322094835:2011-11-24T08:33:55.777+0000:1322094835:2011-11-24T08:33:55.777+0000:Definitely interesting for us too as a mean to do firewall traversal in various integration cases. Upvoted!
clausstraube:1324358853:2011-12-20T13:27:33.646+0000:1324358853:2011-12-20T13:27:33.646+0000:Hi Hadrian,

is there any chance to get this feature into 2.9.0? If yes pls. let me know - so we can provide a patch on the current SNAPSHOT + documentation.

Best regards - Claus 
davsclaus:1324359305:2011-12-20T13:35:05.023+0000:1324359305:2011-12-20T13:35:05.023+0000:No, Camel 2.9.0 is being built right now as you can see on @dev mailing list.

It can be added in the next release 2.10. Or possible in 2.9.1 since its a new component.
Adding a new component takes time, as well we need to ensure licensing is okay, adequate quality, unit test coverage, osgi feature, osgi unit tests, documentation, etc.
davsclaus:1324360366:2011-12-20T13:52:46.605+0000:1324360366:2011-12-20T13:52:46.605+0000:Claus when the 2.9.0 is out of the door. Then we would certainly love this component to be donated to Apache.

We have a guide for adding new components. Maybe you can check that and see if all the bullets are okay for your donation?
http://camel.apache.org/add-new-component-guide.html

In terms of OSGi you have dynamic import on the camel-websocket bundle? What's the reason for that?
clausstraube:1324361285:2011-12-20T14:08:05.488+0000:1324361285:2011-12-20T14:08:05.488+0000:Hi Claus,

yes I've seen that on the dev list...

Ok. So we're trying to get into 2.9.1. We've got enough man power to provide what you need and I think we've a good state at all (except the OSGi stuff). But we need some quicker attention / feedback from the core team. Chris opened the issue end of Sept. (incl. code) and the first reaction was nearly two months later. That's a long time... I know you're all busy people, but we want to provide a high quality component and for that we need a little bit of your time ;)

Best regards - Claus       
davsclaus:1324361596:2011-12-20T14:13:16.435+0000:1324361596:2011-12-20T14:13:16.435+0000:Well you got my attention now.

I wasn't aware of this donation. Charles Moulliard put me in this direction today, as he is planning on a Devoxx presentation on Camel with websocket, and he notice this JIRA.

Knowing how big websocket is / going to be / I would loved if the core team reacted faster. So lets get it into the next release.
We can help with the osgi pieces, after all there is people on the core team who love OSGi and eat it for breakfast.

clausstraube:1324362058:2011-12-20T14:20:58.775+0000:1324362058:2011-12-20T14:20:58.775+0000:Great. The bullets for the donation are no problem, we had focused them from beginning (lessons learned from the hazelcast component ;) We have to do stuff with OSGi (e.g. dynamic import) - if we need help, we'll come back to you.
bvahdat:1324363768:2011-12-20T14:49:28.987+0000:1324363768:2011-12-20T14:49:28.987+0000:>>> after all there is people on the core team who love OSGi and eat it for breakfast

Since today morning I've got a really tough day so far but that joke of Claus made me deeply laugh & relax a bit. Thank you Claus :-)
So that the core message is (I assume) ""Take it easy...""
cmoulliard:1325816777:2012-01-06T10:26:17.178+0000:1325816777:2012-01-06T10:26:17.178+0000:Code committed and tested with Jetty 7.5.

Next steps : 
- Create wiki web page,
- Add integration and OSGI tests,
- Update features xml file,
- Update camel pom and distribution
cmoulliard:1325823156:2012-01-06T12:12:36.538+0000:1325823156:2012-01-06T12:12:36.538+0000:-Add jetty-websocket dependency in features file of Karaf --> https://issues.apache.org/jira/browse/KARAF-1141
- camel karaf feature file updates
- module add to pom and distro

Last step : WIKI page
bvahdat:1325829357:2012-01-06T13:55:57.128+0000:1325829357:2012-01-06T13:55:57.128+0000:@Charles,

could you please update the svn:ignore accordingly, see the attached screenshot for details.

cmoulliard:1325834124:2012-01-06T15:15:24.855+0000:1325834124:2012-01-06T15:15:24.855+0000:Strange to see those files as I don't use Eclipse but IntelliJ
cmoulliard:1325834234:2012-01-06T15:17:14.691+0000:1325834234:2012-01-06T15:17:14.691+0000:They don't appear in my project and target dir was empty. Could it be possible that somebody else commit them ?
bvahdat:1325838362:2012-01-06T16:26:02.803+0000:1325838362:2012-01-06T16:26:02.803+0000:No nobody should commit them (as they all are the *generated stuff*) but you have to tell subversion to ignore them (svn:ignore) property. I assume IntelliJ has some similar functionality like Eclipse to allow that, such as ""Add to svn:ignore"" or the like.

The best for you to see them all is just to go to the camel-websocket folder and do

{code}
mvn clean install eclipse:clean eclipse:eclipse
{code}

And then you would see them as well where you could add them to the svn:ignore, we already had a discussion [1] about it as well.

As you're the one who commited this new component, I assume you should take care of the proper svn:ignore properties of this component as well.

[1] http://camel.465427.n5.nabble.com/The-svn-ignore-property-isn-t-settled-down-on-trunk-td5035110.html
bvahdat:1325838910:2012-01-06T16:35:10.511+0000:1325838910:2012-01-06T16:35:10.511+0000:Using:

{code}
mvn idea:idea
{code}

Just realized that the IntelliJ project files are also *not* in the svn:ignore list, that is:

- camel-websocket.iml
- camel-websocket.ipr
- camel-websocket.iws


These are also to be ""ignored"" as well.

hadrian:1325840385:2012-01-06T16:59:45.707+0000:1325840385:2012-01-06T16:59:45.707+0000:@Babak,

Second line in .gitignore:
*.i??

bvahdat:1325841155:2012-01-06T17:12:35.065+0000:1325841155:2012-01-06T17:12:35.065+0000:@Hadrian,

like Claus [1] and maybe many other (Camel) commiters I'm a *pure* svn user!

[1] http://camel.465427.n5.nabble.com/The-big-svn-ignore-commit-tp5044135p5044508.html
cmoulliard:1325842200:2012-01-06T17:30:00.692+0000:1325842200:2012-01-06T17:30:00.692+0000:@Babak,

I don't see any wrong files in the svn repo http://svn.apache.org/repos/asf/camel/trunk/components/camel-websocket/ like you suggest and my project is clean

{code}
biker-chm:camel-websocket charlesmoulliard$ pwd
/Users/charlesmoulliard/Apache/camel/components/camel-websocket
biker-chm:camel-websocket charlesmoulliard$ svn status
 M      .
M       pom.xml
{code}

Regards,

Charles
bvahdat:1325844112:2012-01-06T18:01:52.405+0000:1325844331:2012-01-06T18:05:31.451+0000:@Charles

You're absolutely right! Nothing is wrong in the svn repo, The problem is the local workspace of *me & yours*.

If you would do a

{code}
mvn clean install eclipse:clean eclipse:eclipse idea:clean idea:idea
{code}

And then again do the

{code}
svn status
{code}

You will see lots of outgoing changes, which should be *ignored*. If you add them to the svn ignore list (for example using your IDE) then the next 'svn status' call would *ignore* them while it compares *your* local workspace content with the repository content.

bvahdat:1325844926:2012-01-06T18:15:26.337+0000:1325844926:2012-01-06T18:15:26.337+0000:@Charles

I ran exactly the same maven command I proposed you on my box (at the level of camel-websocket directory) and attached the outgoing changes what svn *claims* to be there. All those are to be *ignored* see the attachment camel-websocket2.jpg

Thanks in advance!
bmeyer2:1325883023:2012-01-07T04:50:23.004+0000:1325883023:2012-01-07T04:50:23.004+0000:More specifically, can .project and org.maven.ide.eclipse.prefs be added to the svn:ignore list?
muellerc:1325920512:2012-01-07T15:15:12.929+0000:1325920512:2012-01-07T15:15:12.929+0000:We should add the .classpath, .project and .settings to the svn:ignore.

Another possibility is to ""tune"" your IDE:
Eclipse: Preferences: Team -> Ignored Resources -> 
muellerc:1325927233:2012-01-07T17:07:13.937+0000:1325927233:2012-01-07T17:07:13.937+0000:I added .classpath, .project and .settings to svn:ignore
bvahdat:1325929079:2012-01-07T17:37:59.134+0000:1325929079:2012-01-07T17:37:59.134+0000:@Christian
Do you remember the convention over the configuration rule in Camel? ;-)

And what about the target folder?
muellerc:1325930378:2012-01-07T17:59:38.068+0000:1325930378:2012-01-07T17:59:38.068+0000:Good catch. :-)
Done!

I'm a Git user *AND* I ""tuned"" my IDE. Difficult to catch for me... ;-)
bvahdat:1326077533:2012-01-09T10:52:13.407+0000:1326077533:2012-01-09T10:52:13.407+0000:This component should be enlisted in [1] as otherwise it'll not be part of the distribution.

[1] https://svn.apache.org/repos/asf/camel/trunk/apache-camel/pom.xml
davsclaus:1332329583:2012-03-21T19:33:03.147+0000:1332329583:2012-03-21T19:33:03.147+0000:Thanks for the donation."
0,CAMEL-4497,Improvement,Major,None,"2.7.4, 2.8.2, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-09-28 08:12:46+00:00,2011-10-25 11:35:38+00:00,"When fixing the CAMEL-4489, I just found the HttpPollingConsumer Get URL should support the property place holders as HttpProducer does.","njiang:1319417857:2011-10-24T08:57:37.171+0000:1319417857:2011-10-24T08:57:37.171+0000:Applied patch into trunk, camel-2.8.x and camel-2.7.x branches."
0,CAMEL-4466,Improvement,Major,None,None,"
None
",Resolved,Duplicate,Future,Claus Ibsen,Tim Chen,1,1,2011-09-20 08:14:41+00:00,2012-07-06 09:01:00+00:00,No Desc,"davsclaus:1316479197:2011-09-20T08:39:57.341+0000:1316479197:2011-09-20T08:39:57.341+0000:Can you explain why?
chengt:1316479723:2011-09-20T08:48:43.516+0000:1316479723:2011-09-20T08:48:43.516+0000:Hey Claus,
This is related to https://issues.apache.org/jira/browse/CAMEL-4209
It seems that guicey-fruit has exactly one person who can maintain it and he never seems available to work on it.
There's been issues sitting in it's issue tracker with patches for ages now with no activity on them.
davsclaus:1341536460:2012-07-06T09:01:00.121+0000:1341536460:2012-07-06T09:01:00.121+0000:Duplicate of CAMEL-4209"
0,CAMEL-4465,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Ioannis Canellos,0,0,2011-09-19 11:07:59+00:00,2011-10-18 11:22:04+00:00,Create osgi integration tests for camel-sql component.,"iocanel:1316401951:2011-09-19T11:12:31.064+0000:1316401951:2011-09-19T11:12:31.064+0000:Attach which adds osgi integration test for camel-jpa using both spring and blueprint.
davsclaus:1318908124:2011-10-18T11:22:04.230+0000:1318908124:2011-10-18T11:22:04.230+0000:Thanks for the patch. OSGi unit tests is always welcome :)"
0,CAMEL-4464,Improvement,Major,2.8.0,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Christian Schneider,0,1,2011-09-19 08:31:34+00:00,2019-07-28 08:31:36+00:00,"The processor package and its subpackages interceptor and aggregator form a dependency cycle.


The first cycle is between processor and processor.interceptor. The package interceptor needs several processor classes so this direction can not be avoided easily. Int the other direction DefaultChannel depends on interceptor clases. Interestingly DefaultChannel is not used from other classes in processor. So I propose to jsut move DefaultChannel to interceptor to keep interceptor related stuff together.


The second cycle is between processor and processor.aggregate. The AggregateProcessor uses the SendProcessor. Here I propose to just use a producerTemplate to end the failed exchange. ProducerTemplate is a API element and can be fetched from the camelContext so this solves the cycle. I hope that using the ProducerTemplate does not create other issues. The tests seem to work.","cschneider:1316398988:2011-09-19T10:23:08.356+0000:1316398988:2011-09-19T10:23:08.356+0000:Also need to move Traceable to org.apache.camel
davsclaus:1338611204:2012-06-02T12:26:44.521+0000:1338611204:2012-06-02T12:26:44.521+0000:API should be kept stable, moving to 3.0.
davsclaus:1564273896:2019-07-28T08:31:36.662+0000:1564273896:2019-07-28T08:31:36.662+0000:we have modularized camel-core for camel 3"
0,CAMEL-4463,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-09-18 15:03:17+00:00,2011-09-19 03:17:44+00:00,"camel-jpa component current has 1 osgi integration test, which is not working (is annotated as @Ignore).
This test should be fixed.
Moreover, now that upgrade to openjpa 2.1.1 has been completed it should be possible to blueprint integration tests, too.","iocanel:1316333862:2011-09-18T16:17:42.481+0000:1316333862:2011-09-18T16:17:42.481+0000:I am attaching a patch which fixes the existing camel jpa osgi integration test. It also creates a new blueprint integration test for camel-jpa, which integrates camel-blueprint,camel-jpa, openjpa and aries jpa.
njiang:1316373438:2011-09-19T03:17:18.622+0000:1316373438:2011-09-19T03:17:18.622+0000:Applied patch with thanks to Ionnis. I also applied some ASF license header on the new added files."
0,CAMEL-4462,Improvement,Major,"2.8.2, 2.9.0",Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Fernando Ribeiro,0,1,2011-09-17 20:23:26+00:00,2012-07-06 09:00:26+00:00,"For consistency, the following methods should be added:


removeProperty(String, Class<T>):T
removeProperty(String, Object):Object
removeProperty(String, Object, Class<T>):T","davsclaus:1341536426:2012-07-06T09:00:26.785+0000:1341536426:2012-07-06T09:00:26.785+0000:The Exchange API has already many methods, so we dont want to add not often used methods."
0,CAMEL-4461,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-09-17 13:41:16+00:00,2011-10-18 11:26:58+00:00,No Desc,"iocanel:1316238552:2011-09-17T13:49:12.604+0000:1316238552:2011-09-17T13:49:12.604+0000:Attaching some osgi integration tests for camel-hazelcat.
davsclaus:1316302630:2011-09-18T07:37:10.055+0000:1316302630:2011-09-18T07:37:10.055+0000:There is some exceptions thrown by hazlecast trying to load its configuration file

{code}
[RMI TCP Connection(1)-192.168.1.66] WARN com.hazelcast.config.XmlConfigBuilder - Could not find hazelcast.xml in classpath.
Hazelcast will use hazelcast-default.xml config file in jar.

[FelixDispatchQueue] WARN org.apache.aries.jmx - Task rejected for JMX Notification dispatch of event [org.osgi.framework.BundleEvent[source=org.apache.karaf.shell.log [80]]] - Dispatcher may have been shutdown
ERROR: JarContent: Unable to read bytes. (java.lang.IllegalStateException: zip file closed)
java.lang.IllegalStateException: zip file closed
	at java.util.zip.ZipFile.ensureOpen(ZipFile.java:416)
	at java.util.zip.ZipFile.getEntry(ZipFile.java:161)
	at java.util.jar.JarFile.getEntry(JarFile.java:208)
	at org.apache.felix.framework.util.JarFileX.getEntry(JarFileX.java:61)
	at org.apache.felix.framework.cache.JarContent.getEntryAsBytes(JarContent.java:122)
	at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.findClass(ModuleImpl.java:1816)
	at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:727)
	at org.apache.felix.framework.ModuleImpl.access$400(ModuleImpl.java:71)
	at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1768)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at com.hazelcast.impl.ClientService$Worker.stop(ClientService.java:187)
	at com.hazelcast.impl.ClientService.shutdown(ClientService.java:155)
	at com.hazelcast.impl.Node.shutdown(Node.java:370)
	at com.hazelcast.impl.Node.shutdown(Node.java:347)
	at com.hazelcast.impl.Node$NodeShutdownHookThread.run(Node.java:535)
Exception in thread ""hz.ShutdownThread"" java.lang.NoClassDefFoundError: com/hazelcast/impl/ClientService$Worker$1
	at com.hazelcast.impl.ClientService$Worker.stop(ClientService.java:187)
	at com.hazelcast.impl.ClientService.shutdown(ClientService.java:155)
	at com.hazelcast.impl.Node.shutdown(Node.java:370)
	at com.hazelcast.impl.Node.shutdown(Node.java:347)
	at com.hazelcast.impl.Node$NodeShutdownHookThread.run(Node.java:535)
Caused by: java.lang.ClassNotFoundException: com.hazelcast.impl.ClientService$Worker$1 not found by hazelcast [58]
	at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:787)
	at org.apache.felix.framework.ModuleImpl.access$400(ModuleImpl.java:71)
	at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1768)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 5 more
{code}
davsclaus:1316302677:2011-09-18T07:37:57.066+0000:1316302677:2011-09-18T07:37:57.066+0000:Patch applied to trunk
iocanel:1316306977:2011-09-18T08:49:37.293+0000:1316306977:2011-09-18T08:49:37.293+0000:The first error is a warning that no custom hazelcast config is provided and that hazelcast fallbacks to the default settings.

I think the second has to do with shutting down the hazelcast bundle. The test still passes, doesn't it?
davsclaus:1316307456:2011-09-18T08:57:36.286+0000:1316307456:2011-09-18T08:57:36.286+0000:Yes the test still passes. But wonder if any end users who use camel-hazelcast sees the same errors when shutting down?"
0,CAMEL-4460,Bug,Minor,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-17 10:04:19+00:00,2011-09-17 10:36:30+00:00,"You can get a NPE when marshalling a route to XML which has <xstream> in the route


Caused by: java.lang.NullPointerException
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:170)
	at org.apache.camel.model.dataformat.XStreamDataFormat$ConvertersAdapter.marshal(XStreamDataFormat.java:165)
	at com.sun.xml.internal.bind.v2.runtime.reflect.AdaptedAccessor.get(AdaptedAccessor.java:61)
	... 55 more",
0,CAMEL-4459,Bug,Major,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Daniel Kulp,Daniel Kulp,0,0,2011-09-16 20:09:27+00:00,2011-09-17 04:30:35+00:00,"The scriptengine things that were added as part of CAMEL-4407 have made doing a features:install camel-script in a ""plain"" Karaf instance not work as those dependencies are not available in Central.   Thus, setups that worked in the past that did not need those no longer work.


Propose moving those three deps to a ""camel-script-optional"" feature that would not be pulled in by default.   If a user needs them, they would need to configure Karaf to pull from another repo.","ffang:1316205035:2011-09-17T04:30:35.348+0000:1316205035:2011-09-17T04:30:35.348+0000:Hi Dan,

I think camel-script feature by default should contain those scriptengines which make this feature working out of the box.
How about we address it using the way like
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-groovy/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-javascript/${scriptengines.version}</bundle>
<bundle>mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/${scriptengines.version}</bundle>

in the feature descriptor we can indicate mvn repo url which isn't the Central one, and by this way we needn't configure karaf org.ops4j.pax.url.mvn.cfg. camel-restlet feature already use this way so I think camel-script can do it as well.

Freeman"
0,CAMEL-4458,Test,Major,None,None,"
None
",Resolved,Cannot Reproduce,2.9.0,Claus Ibsen,Christian Schneider,0,0,2011-09-16 15:06:32+00:00,2011-11-26 11:07:18+00:00,"org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1164)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.spring.processor.async.SpringAsyncDeadLetterChannelExecutorServiceRefTest.createApplicationContext(SpringAsyncDeadLetterChannelExecutorServiceRefTest.java:31)
	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:54)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:998)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:444)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:986)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:246)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:143)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1859)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1787)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1580)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1472)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1360)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1338)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 24 more","cschneider:1316157076:2011-09-16T15:11:16.101+0000:1316157076:2011-09-16T15:11:16.101+0000:The thread pool is only regisatered in the ExecutorServiceManager not in the camelContext registry (spring context in that case). So the lookup in the regsitry finds no ExecutorService.

This raises some questions:
Why is this test failure not reported in Jenkins?
Should a ThreadPool defined in spring inside the camel context also be available with an executorServiceRef or only beans from the registry?

davsclaus:1322276838:2011-11-26T11:07:18.893+0000:1322276838:2011-11-26T11:07:18.893+0000:The test works fine. We should have fixed the issue since this ticket was reported."
0,CAMEL-4457,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-09-16 10:03:50+00:00,2011-09-23 13:10:33+00:00,"Currently we have a big dpendency cycle between language.simple and language.simple.ast.


As simple creates the ast this dependency is necessary. In the other direction ast needs types and exceptions that are inside simple.
So I propose to nove these classes into a package simple.types. As I think these types and exceptions are not used outside the camel-core I will not create compatibility measures.",
0,CAMEL-4456,Improvement,Minor,2.8.0,2.9.0,"
None
",Resolved,Duplicate,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-09-16 08:20:17+00:00,2011-10-24 14:33:44+00:00,"It should be possible to control if the mail folder should be closed after a poll or not.


For example if people is routing mails over SEDA or other async endpoints, then we should not close the mail folder before the mail message is being processed async.


We have a similar option on mina,netty etc. named disconnect. So the option could be named like that as well.","davsclaus:1316132458:2011-09-16T08:20:58.049+0000:1316132458:2011-09-16T08:20:58.049+0000:See nabble
http://camel.465427.n5.nabble.com/camel-mail-imap-javax-mail-FolderClosedException-tp4796608p4796608.html
bibryam:1319435970:2011-10-24T13:59:30.505+0000:1319435970:2011-10-24T13:59:30.505+0000:Isn't this duplicate of CAMEL-4225 ?
davsclaus:1319438024:2011-10-24T14:33:44.621+0000:1319438024:2011-10-24T14:33:44.621+0000:Yes its a duplicate"
0,CAMEL-4455,Sub-task,Major,None,None,"
None
",Resolved,Won't Fix,None,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-09-15 20:52:30+00:00,2017-02-28 12:43:27+00:00,"URIs consumed as well as produced by spring-ws Endpoints are invalid. Things that need to be fixed:



do not use '
{' and '}
' in the uri, use '(' and ')' instead
do not rely on #fragements
make sure SpringWebserviceConfiguration returns the original URI",
0,CAMEL-4454,New Feature,Major,2.8.0,,"
None
",Closed,Fixed,None,Unassigned,Vinicius Carvalho,3,6,2011-09-15 12:35:00+00:00,2017-05-09 09:29:39+00:00,"We came up with this problem in our company. I'll try to give a scenario to show the possible need for this feature:


================================== The problem =============================


We have an application bundle in a ear that contains a camel context and some routes. Due the need of HA of the application, this EAR is replicated over several nodes. By doing this, our camel context also get replicated. For most of our usage it's ok to have competing consumers/producers. But we have one specific case where this is a problem.


In one end is our cluster with several instances, and we rely heavily on JMS. One specific Queue we use durable subscription to achieve a single consumer on the cluster, while at the same time, in case of failure another node start consuming messages.


On the other side, there's an app that uses Hazelcast as a broker for messaging. We then created a route to consume some messages from the hazelcast cache to our Queue on the cluster.


Now, if we deploy this route as part of our distribute app, we end with several instances and messages gets duplicated at the destination on the cluster. We need only one active route on the cluster.


One could achieve this by deploying the routes to only one app instance, but it would lead to problems when that instance crashes. So we fixed this by putting the ear on JBoss deployha-singleton, which offers us the ability to have only one single active instance at the time. That was ok for us, but we are relying on specific appserver infrastructure for that.


============================== Proposal ===========================


If camel somehow used jgroups for instance to comunicate with other instances, it could use the mechanism that jgroups has to elect a master-view.


Every master-view context would then deploy it's singleton routes. All other instances would go on passive mode, and have a MessageListener for cluster messages. In case a view has changed because a node dies, the context would then check if it is the new master view, and in positive deploy the singleton routes.


It could be a nice addition to camel on a cluster. Maybe even add the jgroups support for more features on the core when requesting cluster based coordination.


I'm currently trying this not at camel level, but we have CDI extension bootstraping camel (not using camel-pe for some other reasons). And our extension will then perform this uniqueness in cluster using jgroups to manage the master node, and invoking context.addRoutes(). We separate the external routes by using CDI qualifiers on the RoutesBuilder.","davsclaus:1369532947:2013-05-26T09:49:07.282+0000:1369532947:2013-05-26T09:49:07.282+0000:There is also camel-zookeeper which can do this.
As well fuse fabric has a master component.
ceposta:1374612140:2013-07-24T04:42:20.912+0000:1374612140:2013-07-24T04:42:20.912+0000:Vinicius,

Have you tried the zookeeper component? As Claus mentioned earlier, the zookeeper component works perfectly for this."
0,CAMEL-4453,Improvement,Major,2.8.0,None,"
None
",Resolved,Fixed,2.9.0,Unassigned,Christian Schneider,0,0,2011-09-15 09:28:42+00:00,2011-09-15 14:18:42+00:00,"Currently we have some lees than optimal designs in camel:
The api and spi reference ErrorHandlerbuilder which is a builder level interface. As the builder needs access to almost anything this creates a big cycle over all of camel.
We also use the ErrorHandlerBuilder in many places where no build is necessary. In these cases rather a factory is needed.
The last thing is that we allow to change the ErrorHandlerBuilder in ProcessDefintion. So it can be set everywhere though it really should only be set on the start of a RouteDefinition.


So I propose to change several things:



Create an interface ErrorHandlerFactory that only has the create method and use it instead of ErrorHandlerBuilder where no builder is needed
Remove ErrorHandlerBuilder in ProcessDefintion and only have it in RouteDefintion



The first part should be made compatible using deprecation so people will not be affected.
The second part is incompatible but I doubt many people use the errorhandler outside the start of a Route. So I think we need to compatiblity measures.",
0,CAMEL-4452,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Akitoshi Yoshida,0,0,2011-09-15 08:03:47+00:00,2011-09-16 11:39:06+00:00,"CAMEL-4030 with Revision 1129070 in trunk changed the way how the response message is retrieved from the exchange and this is causing some issue.


In particular, the changed code may retrieve the request message as the response message when the call is oneway (when the condition camelExchange.getPattern().isOutCapable() is false).


Subsequently, this is leading to an NPE when the output operation is used to extract the payload body from this request message because there is no output operations in the oneway case at:


        for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) {


and resulting in:


java.lang.NullPointerException
	at org.apache.camel.component.cxf.DefaultCxfBinding.getResponsePayloadList(DefaultCxfBinding.java:394)
	at org.apache.camel.component.cxf.DefaultCxfBinding.populateCxfResponseFromExchange(DefaultCxfBinding.java:318)
	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:176)
	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:126)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:71)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:232)
	at org.apache.cxf.interceptor.OneWayProcessorInterceptor$1.run(OneWayProcessorInterceptor.java:130)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)


I see this change was introduced with CAMEL-4030 to support some sort of wire-tap short-cut:


from(""cxf:xxx"").inonly(""jms:xxx"").to(""xxx"")


I am not sure how this inbound/outbound switching operation relates to this use case.


But in any case, this new behavior can lead to this problem and  I think the old behavior (skipping the response message part if there is no response) should be reinstated.


I have a simple test case that can reproduce this problem, but the exception is thrown in an executor thread and only written to the log and the original test caller thread doesn't see the exception. So, it's not a useful automatic test case. Maybe, there is a way. Let me know, how you think.


thanks.
regards, aki","njiang:1316065761:2011-09-15T13:49:21.648+0000:1316065761:2011-09-15T13:49:21.648+0000:Hi Aki,

I checked the code of NPE, I don't think it relates to the change of CAMEL-4030.
The camelExchange is not same with the cxfExchange, I don't think the oneway invocation can cause the NPE that you mentioned.
I guess there are some thing wrong with the boi.getOutput() checking.

Can  you submit the test case into this JIRA to let me have a look?

Willem
ay:1316069197:2011-09-15T14:46:37.464+0000:1316069197:2011-09-15T14:46:37.464+0000:Hi Willem,
thanks for looking into this.

Attached is a tar.gz file containing a test case (analogue to the other GreeterTest in camel-cxf) but using the wsdl and no service class.

The logging for the camel cxf component needs to be activated to see the exception stack trace (org.apache.camel.component.cxf.level=INFO
). 

The exception comes from the greeter.greetMeOneWay when it tries to extract the response payload out of the request message.


thanks.
regards, aki

njiang:1316125048:2011-09-16T06:17:28.179+0000:1316125048:2011-09-16T06:17:28.179+0000:I found the NPE are thrown from other GreeterPayLoad tests, it can be fix by adding an NP checking on the boi.getOutput incase of the boi is oneway operation.

I will commit the fix shortly.

njiang:1316125899:2011-09-16T06:31:39.110+0000:1316125899:2011-09-16T06:31:39.110+0000:Applied the patch into trunk and 2.8.x branch.
ay:1316144346:2011-09-16T11:39:06.049+0000:1316144346:2011-09-16T11:39:06.049+0000:Hi Willem,
Checking boi.getOutput() != null, as you patched, will avoid the NPE for this oneway case. But I think this solution may lead to some unexpected result in those cases when the getOutput() isn't null but for some reason the response message is not available, no? 

I still find it strange to automatically take the request message for the response message.

Or am I missing some point?

regards, aki  "
0,CAMEL-4451,Sub-task,Minor,2.8.0,None,"
None
",Resolved,Fixed,2.9.1,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-09-14 21:23:58+00:00,2012-03-01 17:39:08+00:00,"Propose replacing '

{' with '(' and '}

' with ')', which are valid characters.",
0,CAMEL-4450,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-09-14 12:07:25+00:00,2011-09-17 11:25:17+00:00,"The current Karaf commands could use some improvements:


a) list-routes should list the status of the route and the context it belongs to.
b) list-routes should list stopped routes, currently it lists only started, suspended etc.
c) start-route should be able to start a stopped route, currently it does not
d) Add a command to suspend routes.
e) Add a command to resume routes.","iocanel:1315973309:2011-09-14T12:08:29.433+0000:1315973309:2011-09-14T12:08:29.433+0000:I am attaching a file which implements the improvements as described.
davsclaus:1316081315:2011-09-15T18:08:35.406+0000:1316081315:2011-09-15T18:08:35.406+0000:Thanks Ioannis, do you mind updating the karaf page at
http://camel.apache.org/karaf.html

Remember to note that these are new commands in Camel 2.9 onwards.
davsclaus:1316082254:2011-09-15T18:24:14.793+0000:1316082254:2011-09-15T18:24:14.793+0000:Committed patch with some checkstyle fixes."
0,CAMEL-4449,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Vadim Tsesko,0,0,2011-09-14 09:34:53+00:00,2011-09-17 19:26:58+00:00,"Spring configuration:



    <!-- A custom CamelContext -->
    <camel:camelContext id=""camel"">
        <!-- JSON data format marshalling -->
        <camel:dataFormats>
            <camel:serialization id=""serialization""/>
        </camel:dataFormats>

        <!-- RawOffer input route -->
        <camel:route>
            <camel:from uri=""kestrel://etl01f/feeds""/>
            <camel:unmarshal ref=""serialization""/>
            <camel:to uri=""bean:shard?method=consume""/>
        </camel:route>
    </camel:camelContext>




Exception:



run:
     [java] log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).
     [java] log4j:WARN Please initialize the log4j system properly.
     [java] log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
     [java] 13:28:07.587 [main] INFO  o.a.c.s.h.CamelNamespaceHandler - OSGi environment not detected.
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) is starting
     [java] 13:28:09.028 [main] INFO  o.a.camel.spring.SpringCamelContext - JMX enabled. Using ManagedManagementStrategy.
     [java] 13:28:09.415 [main] INFO  o.a.c.i.c.AnnotationTypeConverterLoader - Found 3 packages with 14 @Converter classes to load
     [java] 13:28:09.489 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded 153 core type converters (total 153 type converters)
     [java] 13:28:09.528 [main] INFO  o.a.c.i.c.DefaultTypeConverter - Loaded additional 0 type converters (total 153 type converters) in 0.003 seconds
     [java] 13:28:09.730 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating endpoint for queue ""feeds"" on etl01f, parameters={}
     [java] 13:28:09.967 [main] INFO  o.a.c.c.kestrel.KestrelComponent - Creating MemcachedClient for etl01f/feeds
     [java] 2011-09-14 13:28:10.073 INFO net.spy.memcached.MemcachedConnection:  Added {QA sa=etl01f/95.108.229.218:22133, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue
     [java] 2011-09-14 13:28:10.084 INFO net.spy.memcached.MemcachedConnection:  Connection state changed for sun.nio.ch.SelectionKeyImpl@711b50a1
     [java] 13:28:10.293 [main] INFO  o.a.c.c.kestrel.KestrelConsumer - Starting consumer for kestrel://etl01f/feeds
     [java] 13:28:10.302 [main] INFO  o.a.camel.spring.SpringCamelContext - Route: route1 started and consuming from: Endpoint[kestrel://etl01f/feeds]
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started.
     [java] 13:28:10.318 [main] INFO  o.a.camel.spring.SpringCamelContext - Apache Camel 2.8.0 (CamelContext: camel) started in 1.291 seconds
     [java] 13:28:12.858 [Camel (camel) thread #0 - Poller-kestrel://etl01f/feeds] ERROR o.a.c.processor.DefaultErrorHandler - Failed delivery for exchangeId: ID-incubos-osx-local-51787-1315992488896-0-1. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
     [java] java.lang.NullPointerException: null
     [java] 	at org.apache.camel.impl.SerializationDataFormat.unmarshal(SerializationDataFormat.java:57) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:56) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) ~[camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.8.0.jar:2.8.0]
     [java] 	at org.apache.camel.component.kestrel.KestrelConsumer$Poller.run(KestrelConsumer.java:230) [camel-kestrel-2.8.0.jar:2.8.0]
     [java] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) [na:1.6.0_26]
     [java] 	at java.util.concurrent.FutureTask.run(FutureTask.java:138) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_26]
     [java] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_26]
     [java] 	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_26]




It seems that ExchangeHelper.convertToType() method returned null because camelContext.getTypeConverter() returned null.","davsclaus:1316081052:2011-09-15T18:04:12.241+0000:1316081052:2011-09-15T18:04:12.241+0000:We love contributions, so patches is welcome.
incubos:1316140809:2011-09-16T10:40:09.478+0000:1316140809:2011-09-16T10:40:09.478+0000:I would be glad to but I don't have enough time now to produce a patch myself. :(
mrlalonde:1316149535:2011-09-16T13:05:35.447+0000:1316149535:2011-09-16T13:05:35.447+0000:XStream can serialize classes even if they don't implement Serializable.  Did the the class for you message body implement Serializable?  If not, then it was suppose to fail so the resolution might just be to give a more descriptive error message and perhaps a more meaningful exception?!
davsclaus:1316229884:2011-09-17T11:24:44.944+0000:1316229884:2011-09-17T11:24:44.944+0000:Fixed the potential NPE
incubos:1316238308:2011-09-17T13:45:08.601+0000:1316258818:2011-09-17T19:26:58.359+0000:My message body class implements {{Serializable}}. It has Scala {code:java}Tuple2[String, java.util.List[String]]{code} type.


"
0,CAMEL-4448,Task,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-09-14 00:13:26+00:00,2011-09-14 00:43:35+00:00,... available recently with a few bug fixes.,
0,CAMEL-4447,Bug,Major,2.8.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,David Tombs,0,1,2011-09-13 20:30:56+00:00,2011-12-12 17:31:58+00:00,"I'm having a somewhat rare issue with NullPointerExceptions in a multithreaded route. It seems that there is a race condition between one thread operating on the UnitOfWork and another removing it. I have gotten the following stacktraces so far:



ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:309) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:349) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]




And:



ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
	at org.apache.camel.impl.DefaultExchange.isTransacted(DefaultExchange.java:331) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:57) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]
	at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.1-SNAPSHOT.jar:2.8.1-SNAPSHOT]




Looking at the source, both NullPointerExceptions were thrown by code like:



return getUnitOfWork() != null && getUnitOfWork().isTransacted();




Oddly, I've only seen this happen soon after startup and only once per run.


The actual route is company confidential, but it's basically:


JMS -> Stream Resequencer -> Bean","njiang:1315941267:2011-09-14T03:14:27.984+0000:1315941267:2011-09-14T03:14:27.984+0000:I just check the code of Camel 2.8.x, there are some change on the DefaultChannel. 
Can you try the latest released Camel 2.8.1, not the 2.8.1-SNAPSHOT to see if the bug is still there?

dgtombs:1315977968:2011-09-14T13:26:08.018+0000:1315977968:2011-09-14T13:26:08.018+0000:Is 2.8.1 released? I don't see it on the site.
njiang:1315979831:2011-09-14T13:57:11.184+0000:1315979831:2011-09-14T13:57:11.184+0000:Camel 2.8.1 is promoted to the maven central repo two days ago, you can try it now :)

dgtombs:1316434808:2011-09-19T20:20:08.357+0000:1316434808:2011-09-19T20:20:08.357+0000:OK, I tested with 2.8.1. Still got the same Exceptions, still very soon after startup.
dgtombs:1316670943:2011-09-22T13:55:43.675+0000:1316670943:2011-09-22T13:55:43.675+0000:Upon further testing, I get 1-5 of these exceptions within 6 minutes of startup both on Solaris and Linux.
davsclaus:1316676739:2011-09-22T15:32:19.614+0000:1316676739:2011-09-22T15:32:19.614+0000:David do you mind posting your Camel route?
davsclaus:1316680034:2011-09-22T16:27:14.717+0000:1316680034:2011-09-22T16:27:14.717+0000:A patch with a potential fix. David you can try this patch on the Camel 2.8.1 source code  (eg from the 2.8.1 tag).
dgtombs:1316686796:2011-09-22T18:19:56.740+0000:1316686796:2011-09-22T18:19:56.740+0000:Hi Claus, thanks for the patch but are you sure it applies against Camel 2.8.1? It seems DefaultChannel was moved and a couple other changes made.
davsclaus:1316726125:2011-09-23T05:15:25.388+0000:1316726125:2011-09-23T05:15:25.388+0000:Yeah you would need to adjust the patch accordingly.

Or take a look at the backport to the 2.8 branch
http://svn.apache.org/viewvc?view=revision&revision=1174248

davsclaus:1317163185:2011-09-28T06:39:45.025+0000:1317163185:2011-09-28T06:39:45.025+0000:David any update?
dgtombs:1323676934:2011-12-12T16:02:14.317+0000:1323676934:2011-12-12T16:02:14.317+0000:Sorry for the delay, working on a different project now. I did just test with 2.8.2, and got a similar exception:

{noformat}
12-Dec 10:51:51 ERROR [Camel0 - Resequencer Delivery] o.a.c.p.StreamResequencer - Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException: null
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:302) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:116) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:79) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:59) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:165) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer.sendElement(StreamResequencer.java:61) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliverNext(ResequencerEngine.java:254) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.resequencer.ResequencerEngine.deliver(ResequencerEngine.java:218) ~[camel-core-2.8.2.jar:2.8.2]
        at org.apache.camel.processor.StreamResequencer$Delivery.run(StreamResequencer.java:212) ~[camel-core-2.8.2.jar:2.8.2]
{noformat}

I will test with 2.8.3 later.
dgtombs:1323682318:2011-12-12T17:31:58.728+0000:1323682318:2011-12-12T17:31:58.728+0000:I haven't gotten any exceptions with 2.8.3 while running a few tests."
0,CAMEL-4446,Bug,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,1,2011-09-13 16:13:37+00:00,2016-06-24 22:42:52+00:00,"When using bindy in CSV format with a separator in the model as ""|"" to denote a pipe character, then it does not work consistent for marshal and unmarshal. In marshal it will insert \ as separator, but it should use | instead.


See nabble
http://camel.465427.n5.nabble.com/bindy-different-behavior-between-marshal-and-unmarshal-with-pipe-separator-tp4798488p4798488.html","tlandich:1466768410:2016-06-24T19:40:10.735+0000:1466779372:2016-06-24T22:42:52.959+0000:With version:2.15.2, the bug remains.  The escape characters are still added into the Header Columns when marshaling back the object. 
e.g. 
   Separator = \ \ |

Output: 
   Header 1 \ | Header2 \ |... 

Pls. advise when we can expect the fix.  

Thanks.

"
0,CAMEL-4445,New Feature,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-09-12 13:44:01+00:00,2011-09-12 14:18:28+00:00,"With the improved parser we can add support for nesting functions.


For example people may want to lookup from a properties file using a key from a header



.setHeader(""myHeader"").simple(""${properties:${header.beer}}"")




There has been other reports in the community for nested functions when defining the properties component in use.",
0,CAMEL-4444,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Olivier Cheslet,0,0,2011-09-12 13:39:47+00:00,2011-09-13 11:34:29+00:00,"I tried to use the doneFile with FTP component.
When I used it to my FTP on my windows machine everything goes fine.
When I tried to act the same with a FTP host on a Linux machine, I got an issue.


I sniff the packet to see what goes wrong and I see this :
the doneFile 
DELE public/Test/in\myFile.txt  
the file to process
DELE public/Test/in/myFile.xml


After a Quick look on the code:
org.apache.camel.component.file.GenericFileEndpoint 
line 682


 String answer = pattern;
        if (ObjectHelper.isNotEmpty(path) && ObjectHelper.isNotEmpty(pattern)) 

{
            // done file must always be in same directory as the real file name
            answer = path + File.separator + pattern;
        }


        if (getConfiguration().needToNormalize()) 

{
            // must normalize path to cater for Windows and other OS
            answer = FileUtil.normalizePath(answer);
        }


We use the ""File.Separator"" but in this case, it should get a kind of ""FTP.Separator"" or the FTP component should return true to the needToNormalize method and change the narmalizePath method to manage this case.","davsclaus:1315873492:2011-09-13T08:24:52.390+0000:1315873492:2011-09-13T08:24:52.390+0000:There is a {{separator}} option you can use to explicit configure the separator style.
oliches:1315877669:2011-09-13T09:34:29.477+0000:1315877669:2011-09-13T09:34:29.477+0000:Thanks, 

I think the last thing to fix, it's to replace the 

File.separator on line 685 of the org.apache.camel.component.file.GenericFileEndpoint class by getFileSeparator()

and it will be fine.
oliches:1315879625:2011-09-13T10:07:05.474+0000:1315879625:2011-09-13T10:07:05.474+0000:Here is a potential patch
davsclaus:1315882489:2011-09-13T10:54:49.675+0000:1315884672:2011-09-13T11:31:12.461+0000:Olivier can you re-attach the patch and this time make sure to [x] in Grant license to Apache, as we cannot accept patches otherwise.
davsclaus:1315884869:2011-09-13T11:34:29.769+0000:1315884869:2011-09-13T11:34:29.769+0000:Thanks for the patch"
0,CAMEL-4443,Task,Minor,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Freeman Yue Fang,Claus Ibsen,0,0,2011-09-12 09:08:14+00:00,2011-09-19 05:16:33+00:00,We need a Scala 2.9.1 osgi bundle from ticket: SMX4-917,"ffang:1316380593:2011-09-19T05:16:33.907+0000:1316380593:2011-09-19T05:16:33.907+0000:commit fix
http://svn.apache.org/viewvc?rev=1172417&view=rev for trunk
http://svn.apache.org/viewvc?rev=1172427&view=rev for 2.8.x branch"
0,CAMEL-4442,Improvement,Major,2.8.0,,"
None
",Resolved,Duplicate,None,Unassigned,Ioannis Canellos,0,0,2011-09-12 08:57:26+00:00,2011-09-12 22:34:28+00:00,"camel-jpa is using openjpa version 1.2.2. Even though openjpa provides an OSGi bundle for that version, that bundle does not a service of the interface javax.persistence.spi.PersistenceProvider as it should to be fully compliant with the spec and also work with the blueprint.


This is something that is fixed in versions 2.x of openjpa, however they implement JPA2.


If we want to continue using 1.x version of openjpa we should, wrap up the openjpa bundle and export this service. 
I have already wrapped up openjpa under servicemix bundles (see SMX4-909). 


We should use this bundle as soon as it gets released, or switch to 2.x.","davsclaus:1315809302:2011-09-12T14:35:02.527+0000:1315809302:2011-09-12T14:35:02.527+0000:I think we have a JIRA ticket to upgrade to JPA2. That would be nice to get done.
iocanel:1315813906:2011-09-12T15:51:46.311+0000:1315813906:2011-09-12T15:51:46.311+0000:Indeed. The issue is [CAMEL-3742]. I will work on it.
iocanel:1315838068:2011-09-12T22:34:28.897+0000:1315838068:2011-09-12T22:34:28.897+0000:Since it is already decided to move to use JPA 2.0, this can be considered a duplicate."
0,CAMEL-4441,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ashwin J. Karpe,Rich Newcomb,0,0,2011-09-12 08:34:21+00:00,2011-09-20 17:28:50+00:00,"The camel-xmlsecurity data format does not support namespaces when identifying specific nodes to be encrypted or decrypted.  The data format will only work for incidental namespace collisions (i.e., when the target XML document  has elements that happen to use the same namespace prefix as that used in the secureTag element).


The attached patch resolves this issue by allowing a namespace definition  mapping  to be included as part of the data format configuration.  This enables true namespace matching, even if the prefix values in the data format definition and the target xml document are not equivalent strings.


Below is one example of the updated secureXML API in Java :



 
        final Map<String, String> namespaces = new HashMap<String, String>();
        namespaces.put(""cust"", ""http://cheese.xmlsecurity.camel.apache.org/"");

        final KeyStoreParameters tsParameters = new KeyStoreParameters();
        tsParameters.setPassword(""password"");
        tsParameters.setResource(""sender.ts"");

        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from(""direct:start"")
                    .marshal().secureXML(""//cust:cheesesites/italy"", namespaces, true, ""recipient"", testCypherAlgorithm, XMLCipher.RSA_v1dot5, tsParameters).to(""mock:encrypted"");
		  }
        }




The patch also extends natural XML support to Spring XML route definitions by leveraging the Camel NamespaceAware interface.  Thus, a namespace prefix that is defined as part of the camelContext definition can be re-used in context within the data format secureTag attribute of the secureXML element.


For example:



    <!--  trust store configuration -->                          
    <camel:keyStoreParameters id=""trustStoreParams"" resource=""./sender.ts"" password=""password""/>

    <camelContext id=""springXmlSecurityDataFormatTestCamelContext"" 
                  xmlns=""http://camel.apache.org/schema/spring""
                  xmlns:cheese=""http://cheese.xmlsecurity.camel.apache.org/"">        
        <route>
            <from uri=""direct://start""/>
                 <marshal>
                    <secureXML
                        secureTag=""//cheese:cheesesites/italy""
                        secureTagContents=""true""
                        xmlCipherAlgorithm=""http://www.w3.org/2001/04/xmlenc#aes128-cbc""       
                        keyCipherAlgorithm=""http://www.w3.org/2001/04/xmlenc#rsa-1_5""
                        recipientKeyAlias=""recipient""
                        keyOrTrustStoreParametersId=""trustStoreParams"" />
                </marshal> 
		...




Finally, this patch updates the method used to define TrustStore and KeyStore parameters for asymmetric encryption and decryption. The patch enables the XmlSecuritiy component to use instances of the org.apache.camel.util.jsse.KeyStoreParameters class for this purpose. This is also illustrated in the examples above. The other methods of KeyStore definition are deprecated by the patch.


Minor and related changes provided by the patch include:



Fixes an error where unit tests were incorrectly skipped (due to security engine not initialized) even when the related crypto algorithms are available.
Adds a Spring Xml route definition example in the unit tests
Configures the xmlunit version in the parent.pom and updates camel-jmx to share this configuration","akarpe:1316503095:2011-09-20T15:18:15.289+0000:1316510902:2011-09-20T17:28:22.276+0000:Hi Rich,

I ran into a minor problem when I applied the patches. The xmlsecurity patch ran into a path issue in Git while applying the change to pom.xml. When I split the patch into 2 separate patches, it worked fine. Everything else was great and worked flawlessly.

Thanks for the patch. Your contribution is sincerely appreciated.

I have uploaded a new patch (CAMEL-4441-complete-and-final.patch) and will commit your improvement.

Cheers,

Ashwin...
akarpe:1316503640:2011-09-20T15:27:20.821+0000:1316503640:2011-09-20T15:27:20.821+0000:Committed to the Camel trunk as revision r1173190.

Thanks to Rich Newcomb for this nice contribution...
akarpe:1316503860:2011-09-20T15:31:00.296+0000:1316503883:2011-09-20T15:31:23.106+0000:The original patch was produced by Rich Newcomb. I validated that everything was in good working order, passed checkstyle and compliant with Camel development standards.

Committed to the Camel trunk as revision r1173190
akarpe:1316508699:2011-09-20T16:51:39.353+0000:1316508699:2011-09-20T16:51:39.353+0000:Rich,

Would you mind adding documentation on the Camel wiki for your improvement...

rnewcomb:1316510930:2011-09-20T17:28:50.575+0000:1316510930:2011-09-20T17:28:50.575+0000:Thanks Ashwin!  I will update the documentation on the Camel wiki."
0,CAMEL-4440,Improvement,Minor,2.8.0,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Claus Ibsen,0,0,2011-09-12 07:49:34+00:00,2011-09-13 08:21:19+00:00,"See nabble
http://camel.465427.n5.nabble.com/unmarshal-CsvDataFormat-different-behavior-for-one-or-multiples-lines-tp4778814p4778814.html


The camel-csv should always return the same List<List>> regardless if there is 0, 1 or 2+ rows returned. That makes it consistent and easier for end users who need to work with this data.","iocanel:1315870679:2011-09-13T07:37:59.444+0000:1315870679:2011-09-13T07:37:59.444+0000:I am attaching a patch which solves this issue and also adds a new unit test for testing unmrashaling on a single row.
davsclaus:1315873279:2011-09-13T08:21:19.473+0000:1315873279:2011-09-13T08:21:19.473+0000:Thanks for the patch."
0,CAMEL-4439,Bug,Minor,2.8.0,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Gert Vanthienen,Gert Vanthienen,0,0,2011-09-12 07:01:02+00:00,2011-09-12 07:20:31+00:00,"The current contents of the camel-features.xml file reads:



<feature name='camel-restlet' version='2.7.1-fuse-00-43' resolver='(obr)'>
  <feature version='2.7.1-fuse-00-43'>camel-core</feature>
  <bundle dependency=""true"">mvn:org.apache.camel/camel-restlet/2.7.1-fuse-00-43</bundle>
  <bundle>mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.0.5</bundle>
</feature>




It actually should read http://fernandoribeiro.eti.br/2011/09/12/bug-in-fuse-4-4/ (Thanks to Fernando Ribeiro for the heads up!)","gertvanthienen:1315782435:2011-09-12T07:07:15.037+0000:1315782435:2011-09-12T07:07:15.037+0000:Fixed in trunk by Freeman (http://svn.apache.org/viewvc?view=revision&revision=1164544)
and marked the restlet jar as a dependency in OBR resolution in http://svn.apache.org/viewvc?view=revision&revision=1169620
davsclaus:1315783231:2011-09-12T07:20:31.857+0000:1315783231:2011-09-12T07:20:31.857+0000:Backported to 2.8 branch"
0,CAMEL-4438,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-11 09:12:14+00:00,2011-09-12 06:06:49+00:00,"See nabble
http://camel.465427.n5.nabble.com/redeliveryPolicyProfile-and-onException-redeliveryPolicyRef-tp4738408p4738408.html",
0,CAMEL-4437,Task,Minor,None,"2.7.5, 2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.3, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-11 07:21:22+00:00,2011-11-14 09:21:49+00:00,"HAPI has released 1.2
http://hl7api.sourceforge.net/


We are currently on version 1.0.1",davsclaus:1321233709:2011-11-14T09:21:49.679+0000:1321233709:2011-11-14T09:21:49.679+0000:Upgraded to HAPI 1.2 which also works with osgi
0,CAMEL-4436,Bug,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",William Tam,William Tam,0,0,2011-09-10 03:12:09+00:00,2011-09-10 16:30:00+00:00,"This defect only manifests itself if an application hosts more than one CamelContext.  The first CamelContext contained by a Spring application context that does not have a custom bus (e.g. any http conduit configurations) while the second Spring application/Camel context does have a custom bus.


The symptom is when the application sends an message to the cxfrs endpoint in the second context (that contains custom bus), the cxfrs endpoint picks up the wrong bus.  It picks up the default cxf in the first application context.


Furthermore, this defect only affects cxfrs producer using URI address format. E.g.
  <to uri=""cxfrs://https://localhost:8181/CxfRsProducerTest/""/>


It does not affect cxfrs addresses defined as a bean.  E.g.
  <to uri=""cxfrs://bean://rsClientHttps""/>
  <cxf:rsClient id=""rsClientHttps"" address=""https://localhost:8181/CxfRsProducerTest/""/>","wtam:1315603224:2011-09-10T05:20:24.579+0000:1315603224:2011-09-10T05:20:24.579+0000:Committed revision 1167448 - 2.9.0.x
Committed revision 1167458 - 2.8.2.x

wtam:1315643400:2011-09-10T16:30:00.058+0000:1315643400:2011-09-10T16:30:00.058+0000:r1167555 - 2.9.0.x
r1167556 - 2.8.2.x"
0,CAMEL-4435,Improvement,Minor,2.8.2,"2.8.4, 2.9.0","
None
",Closed,Fixed,"2.8.4, 2.9.0",Christian Müller,Brendan Long,0,0,2011-09-09 17:18:51+00:00,2011-11-20 14:04:48+00:00,"With the S3 component, there's currently no way to specify ACLs on either the component or message level.


I'm proposing:


1. Add a URL parameter, ""acl"", which can be either:



A canned ACL (private, public-read, public-read-write, authenticated-read). Ex: acl=private
A reference to an ACL bean (com.amazonaws.services.s3.model.CannedAccessControlList): acl=#myAcl
2. Add CamelAwsS3ACL header, which can contain a string (""private"", ""public-read"", etc.), a CannedAccessControlList object, or an AccessControlList object



I'm working on a patch for this, but I want to make sure the way I'm going about it will be accepted before getting too far.


Some questions:



Is ""acl"" a good URL parameter? Should it be ""access""? Should ACL references be separate (""aclRef"")?
Should we accept a string for the canned ACL when it's a header, or just expect a CannedAccessControlList object?","korin43:1315563347:2011-09-09T18:15:47.491+0000:1315563347:2011-09-09T18:15:47.491+0000:Actually, it turns out there's an easier way to do this on S3, so I'm not sure it would be helpful on Camel.

AWA policies allow us to set access control based on the folder, for example, this would allow public access to mybucket/some/path/*:

{
  ""Id"": ""Policy4324355464"",
  ""Statement"": [
    {
      ""Sid"": ""Stmt456464646477"",
      ""Action"": [
        ""s3:GetObject""
      ],
      ""Effect"": ""Allow"",
      ""Resource"": [
        ""arn:aws:s3:::mybucket/some/path/*""
      ],
      ""Principal"": {
        ""AWS"": [
          ""*""
        ]
      }
    }
  ]
}

I probably won't be patching this after all; should I resolve as ""won't fix""? I'm not exactly sure how I should go about this.
muellerc:1321762336:2011-11-20T12:12:16.257+0000:1321762336:2011-11-20T12:12:16.257+0000:Hello Brendan!

For the SQS component, we already provide the option to set a policy for a queue. With the last commit, I added this option also to the S3 and SNS component. You can do this of course by hand in the AWS console, but if you create new buckets/topics on the fly with the Camel AWS components, you may need the possibility to define the policy in the same time.

Feel free to test this new feature whether it works for you...

Best,
Christian
muellerc:1321769055:2011-11-20T14:04:15.803+0000:1321769055:2011-11-20T14:04:15.803+0000:I back port this improvement to Camel 2.8.4 because it's backwards compatible and a relative small change.
We do not have to back port this issue to Camel 2.7.x, because the [AWS-S3] and [AWS-SNS] component was introduced in Camel 2.8.0. "
0,CAMEL-4434,Improvement,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,2,2011-09-09 15:24:20+00:00,2017-02-28 12:43:06+00:00,"This allows you to use the producer template and have the callback invoked using the async routing engine. 
The current API is using the JDK threads pool and Future abstraction. We should offer the Camel specific AsyncCallback API as well.","davsclaus:1316302039:2011-09-18T07:27:19.151+0000:1316302039:2011-09-18T07:27:19.151+0000:Lets leave the API as is, as there is already plenty of methods on the template.
nadavwr:1328421358:2012-02-05T13:55:58.744+0000:1328421358:2012-02-05T13:55:58.744+0000:I was just about to open a similar bug when I found this one -- too bad you decided to close it.

Currently, if you want to send a message to a route, there is no simple standard API to do so in Camel.
What's more problematic, is that ProducerTemplate provides an asynchronous API that's *not based on the asynchronous routing engine*, and in fact relies on a dedicated thread pool.

Currently, if I want to send a ""threadless"" asynchronous message to a SEDA endpoint, I found that I have to obtain the Endpoint, create a Producer manually and manage its lifecycle on my own -- the kind of usage that is generally frowned upon these days.

Being able to do so through a ProducerTemplate will promote non-blocking concurrency in Camel as something that's easily available to the developer, and respect the ""rule of least surprise"".

If maintaining API stability is an important factor, perhaps some mechanism can be provided to reconcile the difference between AsyncCallback and Synchrnization. However, I don't see how this can be done well, and just adding an AsyncCallback variation everywhere Synchronization is currently used will probably be a lot easier and more comprehensible.

Alternatively, if there is some other obvious way to use the asynchronous routing engine from client code that I am missing, it would be nice to draw some attention to it in the documentation.
nadavwr:1328421500:2012-02-05T13:58:20.677+0000:1328421500:2012-02-05T13:58:20.677+0000:I'm willing to work on a patch, if that's helpful -- the asynchronous routing engine is already there, and even ProducerCache has support for using asynchronous producers. It's only missing from ProducerTemplate.
davsclaus:1328663598:2012-02-08T09:13:18.484+0000:1328663598:2012-02-08T09:13:18.484+0000:Patches is welcome with unit tests.

We should possible consider having a SimpleProducerTemplate interface people can downcast and use, which have the most commonly used methods.
Then the regular ProducerTemplate can have all the extra methods.
davsclaus:1488256986:2017-02-28T12:43:06.710+0000:1488256986:2017-02-28T12:43:06.710+0000:The streaming components is likely a better story for this in the future"
0,CAMEL-4433,Bug,Minor,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-09 14:58:34+00:00,2011-09-20 16:32:31+00:00,"The JmsEndpoint have a maximumBrowseSize option to limit the number of messages to browse back.
This option is not in use.",
0,CAMEL-4432,Task,Minor,"2.8.0, 2.8.1","2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-09-09 14:07:30+00:00,2011-09-10 10:16:46+00:00,"The follow file is missing in the dist
 src/main/resources/org/apache/camel/example/server/model/jaxb.index


It should be included.


Because the file is missing, it cases the example to not work.","bvahdat:1315550384:2011-09-09T14:39:44.456+0000:1315550384:2011-09-09T14:39:44.456+0000:@Claus,

I saw your comments [1] and gave a try on the distribution myself, and indeed running the example, one ends up with the following exception

{code}
...
...
Caused by:
javax.xml.bind.JAXBException: ""org.apache.camel.example.server.model"" doesnt contain ObjectFactory.class or jaxb.index
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:197)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:128)
        at javax.xml.bind.ContextFinder.find(ContextFinder.java:277)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:372)
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:337)
        at org.apache.camel.converter.jaxb.JaxbDataFormat.createContext(JaxbDataFormat.java:284)
{code}

IMHO the cause of the problem is the following line

{code}
<exclude>**/*.i*</exclude>
{code}

in [2] & [3]

[1] http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-1-tp4775694p4785699.html
[2] https://svn.apache.org/repos/asf/camel/trunk/apache-camel/src/main/descriptors/unix-bin.xml
[3] https://svn.apache.org/repos/asf/camel/trunk/apache-camel/src/main/descriptors/windows-bin.xml

davsclaus:1315550533:2011-09-09T14:42:13.555+0000:1315550533:2011-09-09T14:42:13.555+0000:Well spotted Babak.

The exclude is for IDEA project files and it should be *.i?? instead.
Fell free to work on a patch if you have a sec for that.
bvahdat:1315551833:2011-09-09T15:03:53.271+0000:1315551833:2011-09-09T15:03:53.271+0000:patch attached.
davsclaus:1315621006:2011-09-10T10:16:46.680+0000:1315621006:2011-09-10T10:16:46.680+0000:Thanks for the patch."
0,CAMEL-4431,Test,Major,2.8.0,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-09-09 13:40:37+00:00,2011-09-21 17:37:45+00:00,"All zookeeper tests after the first class fail with the following exception:
java.lang.Exception: Could not delete Test Zookeeper Server working dir ./target/zookeeper


This happens because the log file is still in use and so windows refuses to delete the directory.","cschneider:1315548234:2011-09-09T14:03:54.182+0000:1315548234:2011-09-09T14:03:54.182+0000:My patch seems to work but I also get a lot of warning messages:
2011-09-09 16:02:34,815 [ocalhost:39913)] WARN  ClientCnxn                     - Session 0x1324e7f236c0002 for server null, unexpected error, closing socket connection an
d attempting reconnect
java.net.SocketException: Address family not supported by protocol family: connect
        at sun.nio.ch.Net.connect(Native Method)
        at sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:500)
        at org.apache.zookeeper.ClientCnxn$SendThread.startConnect(ClientCnxn.java:1050)
        at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1077)

Any idea what this means and if it can be fixed?
"
0,CAMEL-4430,Improvement,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-09-09 10:02:59+00:00,2011-09-10 05:59:05+00:00,"As the proxy lifecycle cleanup work are done in CXF 2.4.3, we are facing some test failed in camel-cxf.
After digging the code, I found the proxy instance which is created by the CxfProxyFactoryBean will be GC and the CXF client which is used in CxfProducer will be affect. The endpoint which is set on the conduit will gone, and CxfProducer will complain it with a NPE exception. We can use the CxfClientFactoryBean to create client instead of CxfProxyFactoryBean to avoid the GC and NPE exception.


I checked the difference between using CxfProxyFactoryBean and CxfClientFactoryBean, they are same in most case.
We just need to take care of handler setting part which is used in JAXWS frontend.",njiang:1315605545:2011-09-10T05:59:05.066+0000:1315605545:2011-09-10T05:59:05.066+0000:Applied patch into trunk and Camel 2.8.x branch.
0,CAMEL-4429,Improvement,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-09-09 09:54:52+00:00,2011-09-15 04:58:25+00:00,"IN CXF-3788, CXF HTTPConduit will handle the partial response when the HTTP response code is 202 nor matter the operation is oneway or not. It will cause the camel-cxf producer wait for the response for server for ever. 
CXF-3796 introduces a new message header to help us to workaround this issue, we need to set this header in CxfProducer when the data format is MESSAGE.","njiang:1315548040:2011-09-09T14:00:40.604+0000:1315548040:2011-09-09T14:00:40.604+0000:Applied patch into trunk and Camel 2.8.x branch.
ay:1315991715:2011-09-14T17:15:15.307+0000:1315991715:2011-09-14T17:15:15.307+0000:Hi Willem,
I am attaching a patch for RawMessageContentRedirectionInterceptor so that an empty message can be tunneled without causing an NPE that leads to the problem I mentioned in my post to dev@camel.

I tested this code (along with the CxfProducer with its property setting commented out) against 2.5.0-SNAPSHOT and 2.4.3-SNAPSHOT successfully.

Could you take a look at it?
Thanks.
Regards, Aki 
njiang:1316033905:2011-09-15T04:58:25.568+0000:1316033905:2011-09-15T04:58:25.568+0000:Hi Aki,
I just did a test with your patch, it works.
I will commit it shortly, thanks for the patch :)

Willem
"
0,CAMEL-4428,Improvement,Major,2.8.0,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Christian Schneider,0,1,2011-09-09 08:54:51+00:00,2019-03-01 13:26:24+00:00,"Currently several interfaces and classes in org.apache.camel and org.apache.camel.spi access classes from org.apache.camel.model.
As the classes in model are forming the dsl they need access to many other parts of camel. So this creates a lot of dependency cycles. Most importantly these references make the api not self contained. 


So I propose to introduce interfaces on model level that contain the methods that access the model.


For example there should be a ModelCamelContext that extends CamelContext and contains methods like :
void startRoute(RouteDefinition route) throws Exception;


DefautlCamelContext will already implement ModelCamelContext so it is ready for 3.0.


To achieve maximum compatiblity we should leave the problematic methods in CamelContext but deprecate them.
For camel 3.0 we will then remvoe these methods.","davsclaus:1338611223:2012-06-02T12:27:03.184+0000:1338611223:2012-06-02T12:27:03.184+0000:API should be kept stable, moving to 3.0."
0,CAMEL-4427,Sub-task,Major,2.8.0,,"
None
",Resolved,Won't Fix,None,Hadrian Zbarcea,Hadrian Zbarcea,0,2,2011-09-08 18:23:58+00:00,2017-02-28 12:42:07+00:00,"Hash signs '#' are not quite allowed in URIs. While they do mark a URI fragment, a URI cannot have more than one fragment (and hence '#' signs) and URI parameters must appear before the fragment.


The IRC spec mandates channel names to start with either a '&' or a '#', both not allowed in a URI (i.e. need to be escaped). I am proposing the following changes that will make camel-irc URIs valid. Current URIs will still be supported but deprecated until 3.0.


The changes/clarifications are:
1. Current syntax is supported, yet deprecated
2. Current syntax with '#' symbols properly encoded is supported (i.e. a channel name will be ""%23camel"" instead of ""camel""
3. Make the '#' symbol optional (i.e. ""channels=camel,activemq"" is equivalent with ""channels=%23camel,%23activemq""). That makes URIs simpler, if the '#' is missing camel-irc will prepend exacly one '#'.
4. For channels that start with '&' or double ""##"", like [freenode non-primary channels] encoding is mandatory.
5. The userInfo part always represents the username, which could be different than the nick. The documentation is not clear on that. By default the nick is the same as the username.
6. Username is mandatory.
7. Deprecate the ""username"" parameter, it must be supplied in the userInfo part of the URI.
8. IRC URIs are URLs not URNs; i.e. the scheme must be followed by ""://"", not just "":"".


I will update the code to preProcess() camel-irc URIs to follow the rules above and update the documentation.","hadrian:1315541462:2011-09-09T12:11:02.578+0000:1315541462:2011-09-09T12:11:02.578+0000:Per the [URI spec|http://www.ietf.org/rfc/rfc2396.txt] section 2.2, "","" is a reserved character, so I also propose:
9. Implement either one of the following. Replace "","" as a list separator with "" "" (which encoded can become a ""+"") so URIs would contain: ""channels=camel+activemq+karaf"" instead of ""channels=camel,activemq,karaf"". Another alternative would be to have multiple channel parametersm like: ""irc://irc.freenode.net?channel=camel&channel=activemq&channel=karaf&etc"" which is cleaner, yet more verbose.

Thoughts?
hadrian:1315582772:2011-09-09T23:39:32.012+0000:1315582772:2011-09-09T23:39:32.012+0000:Code changes made, need to update documentation. A bit of refactoring of camel-irc would help too.
githubbot:1419035907:2014-12-20T08:38:27.136+0000:1419035907:2014-12-20T08:38:27.136+0000:GitHub user lithium opened a pull request:

    https://github.com/apache/camel/pull/358

    CAMEL-4427: Enable support for joining channels named ""#""

    This is suggested fix to a comment I left on: https://issues.apache.org/jira/browse/CAMEL-4427

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lithium/camel CAMEL-4427

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/358.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #358
    
----
commit fddb7fe12575a1fd38d91ad51232872878f924ce
Author: lithium <code@hlidskialf.com>
Date:   2014-12-20T08:33:46Z

    CAMEL-4427: Enable support for joining channels named ""#""

----

wiggins:1419035925:2014-12-20T08:38:45.927+0000:1419035925:2014-12-20T08:38:45.927+0000:It is not possible to specify a channel named simply ""#"".  Which is a valid channel name according to the IRC spec and most servers allow it.

Using an endpoint url like ""irc://irc.example.com/#""  will just fail to join any channels.
how to encode this valid irc channel into a URI... I'm not sure.   

I can accomplish joining a channel named ""#"" by modifying IrcChannel.setName() to allow a null or .isEmpty() string to become just ""#"".

see: https://github.com/apache/camel/pull/358




githubbot:1419318359:2014-12-23T15:05:59.054+0000:1419318359:2014-12-23T15:05:59.054+0000:Github user lithium closed the pull request at:

    https://github.com/apache/camel/pull/358
"
0,CAMEL-4426,Improvement,Major,2.6.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-09-08 14:08:06+00:00,2011-11-08 06:29:07+00:00,"We have logic in place which can mask username/paswords etc. We just need to make sure that there is not a gap somewhere where the logic wasn't in use, as an end user reported an issue recently. So this is a ticket to not forget about this and look into it.


See nabble
http://camel.465427.n5.nabble.com/usernames-and-passwords-in-logs-tp4753576p4753576.html","davsclaus:1315462130:2011-09-08T14:08:50.085+0000:1315462153:2011-09-08T14:09:13.402+0000:A piece of the pastebin from the user report

Notice the end user have already masked the username
{code}
16:48:31,742 | WARN  | v2/KD117787S7/in | eFilePollingConsumerPollStrategy | ?                                   ? | 68 - org.apache.camel.camel-core - 2.6.0.fuse-02-05 | Consumer Consumer[ftp://**********/in?delay=10000&delete=true&doneFileName=%24%7Bfile%3Aname%7D.sem&exclusiveReadLockStrategy=%23concurrentStrategyService&maxMessagesPerPoll=1&moveFailed=.error&passiveMode=true&password=****&stepwise=false] could not poll endpoint: ftp://*********/in?delay=10000&delete=true&doneFileName=%24%7Bfile%3Aname%7D.sem&exclusiveReadLockStrategy=%23concurrentStrategyService&maxMessagesPerPoll=1&moveFailed=.error&passiveMode=true&password=*********&stepwise=false caused by: File operation failed: 227 Entering Passive Mode (195,145,31,140,152,248).
227 Entering Passive Mode (195,145,31,140,152,251).
 Connection timed out. Code: 227
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 227 Entering Passive Mode (195,145,31,140,152,248).
227 Entering Passive Mode (195,145,31,140,152,251).
 Connection timed out. Code: 227
        at org.apache.camel.component.file.remote.FtpOperations.listFiles(FtpOperations.java:662)[208:org.apache.camel.camel-ftp:2.6.0.fuse-02-05]
{code}
hadrian:1315462990:2011-09-08T14:23:10.769+0000:1315462990:2011-09-08T14:23:10.769+0000:I have a general solution for this. I will take care of it once I sort out the invalid URIs problem.
davsclaus:1320621482:2011-11-07T07:18:02.188+0000:1320621482:2011-11-07T07:18:02.188+0000:The passwords is now masked.

I wonder if we really want to mask username as well?
davidkarlsen@gmail.com:1320634704:2011-11-07T10:58:24.631+0000:1320634704:2011-11-07T10:58:24.631+0000:I think only the password is sensitive. Being able to see the username is handy for debugging purposes.
Quite often this problem is solved this way (only masking password).
davsclaus:1320704947:2011-11-08T06:29:07.186+0000:1320704947:2011-11-08T06:29:07.186+0000:Yeah lets keep it as is, password is masked.

If people want to talk about masking usernames as well, then lets do it on @dev and have more community involvement."
0,CAMEL-4425,Improvement,Major,2.8.0,None,"
None
",Resolved,Won't Fix,None,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-09-07 18:02:52+00:00,2017-02-28 12:41:44+00:00,"There are many components that use improper URIs, which is kinda tolerated by Camel and in some instances encouraged by the examples and we provide. Camel uses URIs for both identifying and configuring endpoints, which is good. However, we should accept valid, properly encoded URIs. See URI spec for more detailed explanation. For some components properly encoding URIs is a solution, but URIs may be become harder to understand. For instance curly braces are not allowed in URIs, yet we support something like ""serviceName=

{namespace}

service"" in a uri (see CAMEL-4405). Properly encoding uris would work (giving us in the example above ""%7Bnamespace%7Dservice"" which is not all that easy to read), but better is to come up with alternatives like ""targetNamespace=namespace&serviceName=service"". This problem exists in a few other components, not just camel-cxf, so this issue is meant as an umbrella for all components.


As this could have a significant impact on existing applications, I propose a solution that will still accept existing syntax for URIs (i.e. no immediate impact on existing applications), and come up with configuration alternatives per component. When invalid URIs are used, a warning should alert users, giving them time to upgrade/migrate their URIs. This fallback mechanism may be removed in 3.0.",hadrian:1316092108:2011-09-15T21:08:28.297+0000:1316092108:2011-09-15T21:08:28.297+0000:Added small fix in camel-sql without creating a sub-task.
0,CAMEL-4424,Wish,Minor,"2.7.0, 2.8.0",2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Claus Ibsen,Nils Breunese,0,0,2011-09-07 14:37:06+00:00,2011-10-30 10:32:39+00:00,"The camel-saxon jar has a dependency on net.sf.saxon:saxon-sql:9.1.0.8. When using Maven Central and depending on camel-saxon this doesn't work, since Maven Central does not provide this version of this jar:





[WARNING] The POM for net.sf.saxon:saxon-sql:jar:9.1.0.8 is missing, no dependency information available





Looking at http://search.maven.org/#browse%7C1332070261 I indeed only find versions 7.9.1 and 8.7.","janstey:1315377853:2011-09-07T14:44:13.821+0000:1315377853:2011-09-07T14:44:13.821+0000:It is here http://svn.apache.org/repos/asf/servicemix/m2-repo/net/sf/saxon/saxon-sql/9.1.0.8/saxon-sql-9.1.0.8.jar and the current trunk pom uses this repo in http://svn.apache.org/repos/asf/camel/trunk/components/camel-saxon/pom.xml

Try adding this repo to your pom.xml and see if you still get the error.
breun:1315378500:2011-09-07T14:55:00.990+0000:1315378500:2011-09-07T14:55:00.990+0000:Adding that repository fixes the dependency problem (I already found and locally installed the jar myself), but I still think this is an issue.

http://maven.apache.org/guides/mini/guide-central-repository-upload.html says: ""Only releases can be uploaded to the central repository, that means files that won't change and that only depend on other files already released and available in the repository.""

https://docs.sonatype.org/display/Repository/Central+Sync+Requirements says: ""In ideal conditions, all your dependencies should be already in central and central repository is self-contained. Otherwise people's build might break because of missing dependencies. If some of your dependencies are not in central, please upload them using our 3rd-party artifacts bundle upload service.""
janstey:1315379848:2011-09-07T15:17:28.611+0000:1315379848:2011-09-07T15:17:28.611+0000:Yeah, having everything 100% at central would be best for sure. Right now though we have about 10 additional repos defined in Camel for 3rd party libs. Not sure how much effort it would be to track down and upload those extra dependencies to central. In some cases too it is much easier to depend on an extra repo rather that manually uploading to central every time a 3rd party lib has a release.
breun:1315636002:2011-09-10T14:26:42.315+0000:1315636002:2011-09-10T14:26:42.315+0000:I understand it's not easy to sort this all out, but uploading Camel artifacts to Maven Central that can't be used without configuring additional Maven repositories is pretty annoying for users.
breun:1315784284:2011-09-12T07:38:04.670+0000:1315784284:2011-09-12T07:38:04.670+0000:Is there any documentation on what Maven repositories are required to resolve the dependencies for Camel? I have used only Maven Central so far, but that proved to not be enough.

http://camel.apache.org/download.html mentions the Camel release repository at https://repository.apache.org/content/repositories/releases/ but that repository also doesn't seem to contain the saxon-sql-9.1.0.8 jar.

Should I proxy http://svn.apache.org/repos/asf/servicemix/m2-repo in our Nexus instance? Jonathan Anstey mentions 'about 10 additional repos'. Should I add all of those to satisfy all Camel dependencies I might run into? If so, where do I find a list of these repositories?
davsclaus:1315784492:2011-09-12T07:41:32.879+0000:1315784492:2011-09-12T07:41:32.879+0000:See the pom.xml files as they list any additional maven repos."
0,CAMEL-4423,Improvement,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Freeman Yue Fang,Freeman Yue Fang,0,0,2011-09-07 08:58:01+00:00,2011-09-19 02:37:03+00:00,"since geronimo-jaxws_2.2_spec-1.1.jar already fixed the incorrect Import-Package javax.xml.namespace(previously it import javax.xml.namespace with version=""1.0"", which prevent us to use the one from system bundle, so we have to create a wrapper jaxws 2.2 spec bundle in Servicemix) OSGi header, so we can use it in features.xml","ffang:1315366381:2011-09-07T11:33:01.018+0000:1315366381:2011-09-07T11:33:01.018+0000:commit fix
http://svn.apache.org/viewvc?rev=1166126&view=rev for trunk
hold merge for 2.8.x branch until 2.8.1 is out(to keep the jaxws bundle same as it used in cxf 2.4.2)
ffang:1316370906:2011-09-19T02:35:06.403+0000:1316370906:2011-09-19T02:35:06.403+0000:commit fix
http://svn.apache.org/viewvc?rev=1172413&view=rev for 2.8.x branch"
0,CAMEL-4422,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-09-07 03:07:43+00:00,2011-09-07 04:22:49+00:00,"User complain about the NPE, when using the camel-smpp component to send the message which length is less than 255.
Here is the mail thread about it.
http://camel.465427.n5.nabble.com/SMPP-2-8-component-null-pointers-tp4776354p4776354.html",njiang:1315340569:2011-09-07T04:22:49.368+0000:1315340569:2011-09-07T04:22:49.368+0000:Applied patch into trunk and 2.8.x branch.
0,CAMEL-4420,Improvement,Major,2.8.0,,"
None
",Closed,Fixed,None,Christian Schneider,Christian Schneider,0,0,2011-09-06 15:33:24+00:00,2011-10-05 10:45:11+00:00,The current Tracer and TraceInterceptor also do logging or even jpa processing. These things should be separated from the tracing.,cschneider:1317782698:2011-10-05T10:44:58.588+0000:1317782698:2011-10-05T10:44:58.588+0000:The JMX issue also moves some logic out of the TraceInterceptor
0,CAMEL-4419,Task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-09-06 13:49:33+00:00,2011-10-23 13:56:52+00:00,"In order to align the Spring version, Camel 2.9.0 should be updated to use CXF 2.4.3.


Waiting for the release, I'm upgrading to CXF 2.4.3-SNAPSHOT.","jbonofre:1315351487:2011-09-07T07:24:47.673+0000:1315351487:2011-09-07T07:24:47.673+0000:The upgrade breaks the camel-cxf component unit tests:

  testInvokingServiceFromCXFClient(org.apache.camel.component.cxf.CXFGreeterRouterTest): NullPointerException
  testInvokingServiceFromCXFClient(org.apache.camel.component.cxf.CxfGreeterMessageRouterTest): Could not send Message.

I take a look on that.
njiang:1315443348:2011-09-08T08:55:48.671+0000:1315443348:2011-09-08T08:55:48.671+0000:Hi JB,

Any news about it? These test failures are related to recent change of CXF.

If you need some help please don't hesitate to ask, I'm willing to have a look at it :)

Willem
jbonofre:1315529940:2011-09-09T08:59:00.826+0000:1315529940:2011-09-09T08:59:00.826+0000:Hi Willem,

I take a look now.
njiang:1315530506:2011-09-09T09:08:26.219+0000:1315530601:2011-09-09T09:10:01.619+0000:Hi JB,

Don't worry, I dig the code for while and found there are some work on the CXF side, and also some work on camel-cxf side, I will commit the fixes shortly. 

Willem
jbonofre:1315530924:2011-09-09T09:15:24.583+0000:1315530924:2011-09-09T09:15:24.583+0000:Thanks Willem !!
davsclaus:1319349412:2011-10-23T13:56:52.386+0000:1319349412:2011-10-23T13:56:52.386+0000:We have upgraded"
0,CAMEL-4418,Improvement,Major,"2.7.0, 2.8.0",2.9.0,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-09-06 13:24:54+00:00,2011-10-24 07:14:10+00:00,"The camel-hazelcast component currently is using Hazelcast default instance. It should allow the user to specify an existing HazelcastInstance and fall back to the default instance if none is provided. Finally, in the case that the component is using the default instance it should shut it down when the component is stopped.","iocanel:1315286783:2011-09-06T13:26:23.088+0000:1315286783:2011-09-06T13:26:23.088+0000:I am attaching a patch which changes the hazelcast component so that it can be passed an existing Hazelcast instance.
davsclaus:1319349457:2011-10-23T13:57:37.049+0000:1319349457:2011-10-23T13:57:37.049+0000:Ioannis this is a big patch. Do you know if we have applied it already?
iocanel:1319357432:2011-10-23T16:10:32.275+0000:1319357432:2011-10-23T16:10:32.275+0000:As far as I know its not applied.

-- 
*Ioannis Canellos*
*
FuseSource <http://fusesource.com>

**
Blog: http://iocanel.blogspot.com
**
Apache Karaf <http://karaf.apache.org/> Committer & PMC
Apache ServiceMix <http://servicemix.apache.org/>  Committer
Apache Gora <http://incubator.apache.org/gora/> Committer
*

davsclaus:1319410745:2011-10-24T06:59:05.981+0000:1319410745:2011-10-24T06:59:05.981+0000:Thanks will get the patch committed this morning.

Do you mind adding some notes to the camel-hazelcast wiki page, as well as add a note on the release notes about this improvement"
0,CAMEL-4417,Improvement,Major,2.8.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Christian Schneider,Christian Schneider,0,2,2011-09-05 13:46:59+00:00,2013-10-22 07:34:27+00:00,"Several classes in impl are used or extended by components. We should avoid this.


The base classes should be moved to support. Examples are DefaultComponent, DefaultEndpoint, DefaultProducer.


Another case is the AsyncProcessorTypeConverter. The typeconverter is well placed in impl but the class also has a public static convert method that is used from many components. So this functionality should be moved to processor so it is available to components.","jstrachan:1315202091:2011-09-05T13:54:51.283+0000:1315202091:2011-09-05T13:54:51.283+0000:Since this code change will break pretty much any component developed outside of the current source tree this should only be considered for 3.x
cschneider:1315205334:2011-09-05T14:48:54.146+0000:1315205334:2011-09-05T14:48:54.146+0000:I intend to create a stub class that extends the moved class in the old location. So I think this should be compatible. I would like to have such changes in 2.9.x as people then will have some time to adapt and they can already see where we are moving to

cschneider:1315373669:2011-09-07T13:34:29.929+0000:1315373669:2011-09-07T13:34:29.929+0000:Patch moving all support classes from impl to support.

I moved the following classes and placed compatibility classes in their impl location:
DefaultAsyncProducer,
DefaultComponent,
DefaultConsumer,
DefaultEndpoint,
DefaultExchange,
DefaultMessage,
DefaultPollingEndpoint,
DefaultProducer,
DefaultUnitOfWork, 
ExpressionSupport,
HeaderFilterStrategyComponent,
InterceptSendToMockEndpointStrategy,
LoggingExceptionHandler,
PollingConsumerSupport,
ProcessorEndpoint,
ProducerCache,
ScheduledPollConsumer,
ScheduledPollEndpoint,

I moved the following classes without compat stubs as they were not needed outside camel-core:
DefaultPollingConsumerPollStrategy, DefaultRouteNode, DefaultScheduledPollConsumer, DefaultSubUnitOfWork, DefaultTracedRouteNodes,
EventDrivenPollingConsumer, ExpressionAdapter,
InterceptSendToEndpoint,
MDCUnitOfWork,
MessageSupport,
ProcessorPollingConsumer,
SimpleUuidGenerator

I moved AsyncProcessorConverterHelper from processor to util as it is needed from support.

The only problematic class I moved was DefaultConsumer as it needed AsyncProcessorConverterHelper. So the above including the inner class ProcessorToAsyncProcessorBridge had to move to util. The problem here was that the Bridge had to extend DelegateProcessor which of course is in processor. As util should not depend on processor I had to introduce an interface DelegateProcessor in camel that could be used to abstract from ProcessorToAsyncProcessorBridge, DelegateProcessor and DelegateAsyncProcessor. This is a good thing anyway and I will open a jira to do this first.

I also had to move PipelineHelper and SimpleUuidGeneratopr to util as they were used from support classes.

This is a fairly large patch. So I am not sure if it is good for 2.9. On the other hand if we wait with this till 3.0 we are either really incompatible or we can not remove the deprecated classes






hadrian:1315380854:2011-09-07T15:34:14.330+0000:1315380854:2011-09-07T15:34:14.330+0000:@Christian, all the changes you make in 2.9 should be backwards compatible. So if you make any changes, please make sure leave existing classes in place (even as extensions of refactored classes) and change as few tests as possible, ideally none. That ensures two things: one that we didn't break anything and existing code still works, second that users have a migration path that could take at any time. We can remove the old classes later in 3.0.

Changes that break backward compatibility I'd leave for later.
davsclaus:1338611249:2012-06-02T12:27:29.735+0000:1338611249:2012-06-02T12:27:29.735+0000:API should be kept stable, moving to 3.0.
cschneider:1382398467:2013-10-22T07:34:27.387+0000:1382398467:2013-10-22T07:34:27.387+0000:This change is probably too destructive even for 3.0"
0,CAMEL-4416,Task,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-09-05 12:40:50+00:00,2011-09-08 12:48:09+00:00,No Desc,jbonofre:1315286398:2011-09-06T13:19:58.179+0000:1315286398:2011-09-06T13:19:58.179+0000:Revision 1165658.
0,CAMEL-4385,Bug,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,1,2011-08-26 14:42:16+00:00,2011-08-29 15:51:43+00:00,"We have a exchange with a custom MyMessage type as in message.
exchange.copy() creates an exchange with an in message of type DefaultMessage. 


Correct would be if the in message of the dest exchange would be of type MyMessage. 


I will first commit a test case that shows the problem and currently will fail.",
0,CAMEL-4384,Improvement,Minor,None,2.9.0,"
None
",Resolved,Cannot Reproduce,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-26 06:43:39+00:00,2011-08-26 06:56:54+00:00,See CAMEL-3354,davsclaus:1314313014:2011-08-26T06:56:54.042+0000:1314313014:2011-08-26T06:56:54.042+0000:Works fine already. I have added unit tests as well.
0,CAMEL-4383,Bug,Major,2.7.1,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,David Tombs,0,1,2011-08-25 18:50:50+00:00,2011-08-30 00:04:16+00:00,"If an unhandled Exception is caught by StreamResequencer.run(), it effectively logs the Exception at DEBUG level. A thrown Exception can indicate that a delivered message was not fully processed (as is the case in my route), so this means a message is dropped with a notification in the log only at DEBUG level. This is highly undesirable in a critical route.


It should at least be logged at WARN level, and preferably should be handled using the configured ErrorHandler for the route.","dgtombs:1314269546:2011-08-25T18:52:26.694+0000:1314269546:2011-08-25T18:52:26.694+0000:I'm encountering an Exception here due to CAMEL-4264.
davsclaus:1314401063:2011-08-27T07:24:23.469+0000:1314401063:2011-08-27T07:24:23.469+0000:See CAMEL-3783
davsclaus:1314403373:2011-08-27T08:02:53.579+0000:1314403373:2011-08-27T08:02:53.579+0000:Thanks for reporting. Should be logging at ERROR level now.
dgtombs:1314633856:2011-08-30T00:04:16.473+0000:1314633856:2011-08-30T00:04:16.473+0000:Thanks for the quick fix!"
0,CAMEL-4382,Improvement,Major,2.8.0,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-08-25 16:48:22+00:00,2011-09-19 22:48:19+00:00,Right now a user has to manually configure a JSch instance to set the cipher used. We should have an option for that.,"janstey:1314264515:2011-08-25T17:28:35.635+0000:1314264515:2011-08-25T17:28:35.635+0000:janstey@duffman:/x1/asf/camel/trunk/components/camel-ftp$ svn ci -m ""CAMEL-4382 - add support to set the cipher used for SFTP""
Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpConfiguration.java
Sending        camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
Adding         camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpSetCipherTest.java
Transmitting file data ...
Committed revision 1161654.
janstey@duffman:/x1/asf/camel/trunk/components/camel-ftp$ 

janstey:1314264560:2011-08-25T17:29:20.695+0000:1314264560:2011-08-25T17:29:20.695+0000:Based on user query here http://camel.465427.n5.nabble.com/Cipher-type-definable-td4734500.html"
0,CAMEL-4381,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-08-25 13:09:57+00:00,2011-09-05 08:09:27+00:00,"Currently ServiceSupport and ServiceHelper form a dependency cycle. ServiceSupport calls ServiceHelper to start and stop services and ServiceSupport operate on ServiceSupport classes.
To solve that I introduce an Interface ServiceWithSupport (open for a better naming). This interface extends Service and has all relevant methods from ServiceSupport. So ServiceHelper can operate on ServiceWithStatus and the tangle goes away. 


Addtionally I split up ServiceSupport into ServiceSupport which has no children and ChildServiceSupport which has. This is because we seem to have only two classes that actually use the children functionality. The rest of the classes that extend ServiceSupport have no children. So having them all extend the old ServiceSupport introduces a lot of unneeded complexity.


The change should be fairly compatible. The only possible problem are third party components that use children. As we only had two such components in camel the chance that something breaks is fairly low.","davsclaus:1314251618:2011-08-25T13:53:38.855+0000:1314251618:2011-08-25T13:53:38.855+0000:Maybe name it StatefulService as it is capable of knowing what state the service is in (started, stopped, suspended) etc. Or some other name that indicate this. LifecycleService? LifecyclewareService?

cschneider:1314252395:2011-08-25T14:06:35.031+0000:1314252395:2011-08-25T14:06:35.031+0000:LifeCycleAwareService sounds good
cschneider:1314604733:2011-08-29T15:58:53.958+0000:1314610961:2011-08-29T17:42:41.080+0000:I have now finished an implementation. org.apache.camel.StatefulService is the interface for services that support start, stop, suspend, resume. So every class that does not need the implementation uses this interface. 

ServiceSupport is moved to org.apache.camel.support a deprecated stub is left in impl. ServiceSupport does not support children.
For this case ChildServiceSupport is used.

Now one thing I struggle with a bit is DefaultTimeOutMap and some related classes. It needs ServiceSupport so if we keep it in util then we have a dependency from util to support. On the other hand currently ChildServiceSupport uses ServiceHelper. So we have a dependency from support to util. 

I see two solutions: 
1) Move DefaulTimeOutMap to support
2) Do not use ServiceHelper in ServiceSupport

In the end it comes down to the question: Should support classes be allowed to use util classes? Then we have to go with 1)
davsclaus:1314608669:2011-08-29T17:04:29.595+0000:1314608669:2011-08-29T17:04:29.595+0000:Its fine to have a dependency on util, as that is the purpose of the util package. To have helper/util classes that you can reuse.

I suggest to use the name: Stateful, eg lower case f, as that is the proper name. Stateless, Stateful, etc.
http://en.wikipedia.org/wiki/State_(computer_science)
cschneider:1314611032:2011-08-29T17:43:52.875+0000:1314611032:2011-08-29T17:43:52.875+0000:Yes the big F was a typo. I also rather think support -> util is ok. But that means that util may not reference support as we should not have both directions
davsclaus:1314611784:2011-08-29T17:56:24.995+0000:1314611784:2011-08-29T17:56:24.995+0000:Ah good about F, because if you rename in svn on a windows system, such as F -> f, then that fails. As the file system is case insensitive.

Yeah it would be desirable to not have util depend on support, or any of the other sub packages. But I guess there could be a some tangles in there.

Also we actually have a number of converter classes in .impl.converter and .converter. The @Converter classes ought to be in .converter. The .impl.converter is the default implementation of the type converter registry, and the annotation scanning and the likes.
davsclaus:1314656536:2011-08-30T06:22:16.557+0000:1314656536:2011-08-30T06:22:16.557+0000:When you do those big refactorings then avoid changing the logic. For example in ServiceHelper you removed the logic which checks if a service is already started in the startService method. That logic should be put back.

Spotting this is hard when you do big refactorings. If you want to change some logic, then do these changes in separate commits.
davsclaus:1314659357:2011-08-30T07:09:17.390+0000:1314659357:2011-08-30T07:09:17.390+0000:Spotted another issue, in the ServiceSupport. The start/stop methods etc. when an exception is thrown from doStart,doStop, then the state of the service should be ""changed back"" etc. So if a service is attempted to be started and it fails, then the old logic ensured the state would be as stopped.  Now the logic doesnt do that.
For example the ""starting"" state would be keept.

now
{code}
    public void start() throws Exception {
        if (isStarting() || isStarted()) {
            // only start service if not already started
            LOG.trace(""Service already started"");
            return;
        }
        if (starting.compareAndSet(false, true)) {
            LOG.trace(""Starting service"");
            doStart();
            started.set(true);
            starting.set(false);
            stopping.set(false);
            stopped.set(false);
            suspending.set(false);
            suspended.set(false);
            shutdown.set(false);
            shuttingdown.set(false);
        }
    }
{code}

before:
{code}
   public void start(boolean startChildren) throws Exception {
        if (!started.get()) {
            if (starting.compareAndSet(false, true)) {
                boolean childrenStarted = false;
                Exception ex = null;
                try {
                    if (childServices != null && startChildren) {
                        ServiceHelper.startServices(childServices);
                    }
                    childrenStarted = true;
                    doStart();
                } catch (Exception e) {
                    ex = e;
                } finally {
                    if (ex != null) {
                        try {
                            stop(childrenStarted);
                        } catch (Exception e) {
                            // Ignore exceptions as we want to show the original exception
                        }
                        throw ex;
                    } else {
                        started.set(true);
                        starting.set(false);
                        stopping.set(false);
                        stopped.set(false);
                        suspending.set(false);
                        suspended.set(false);
                        shutdown.set(false);
                        shuttingdown.set(false);
                    }
                }
            }
        }
{code}

cschneider:1314662407:2011-08-30T08:00:07.434+0000:1314662407:2011-08-30T08:00:07.434+0000:Hi Claus,
the logic for not starting a service twice is still there. I just moved it to ServiceSupport. I was not aware of the logic that resets the state when an exception is thrown. I will add this and also add a test for it.

cschneider:1314663006:2011-08-30T08:10:06.387+0000:1314663006:2011-08-30T08:10:06.387+0000:Btw. Do we really need these AtomicBooleans? The state of the service can only be one of those at a time. So I think an integer or a status enum would be better.

So I would like to change that into a ServiceStatus status. The only question is how to make it thread safe but I guess this should work with synchronized.

davsclaus:1314663492:2011-08-30T08:18:12.007+0000:1314663492:2011-08-30T08:18:12.007+0000:Yes have respect for the existing code.

The state can be stopped + shutdown etc. When a service is shutdown its also stopped.
cschneider:1314663792:2011-08-30T08:23:12.425+0000:1314663792:2011-08-30T08:23:12.425+0000:Honestly I think we have to many states. For example I do not get what the difference between stopped and suspended should be. I have never really seen that many states.

But of course there is the real issue with existing code that might easily break. So I will suggest having a status variable in camel 3.0 but for now it is better to leave it alone.
cschneider:1315181367:2011-09-05T08:09:27.896+0000:1315181367:2011-09-05T08:09:27.896+0000:The issue when an exception occurs at starting a service is solved"
0,CAMEL-4380,Improvement,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,1,2011-08-25 12:11:28+00:00,2011-09-19 22:53:00+00:00,"Current OSGiFactoryFinder doesn't support to find the class with a right version.
Here is the mail thread which discusses about it.
http://camel.465427.n5.nabble.com/Running-multiple-versions-of-Camel-concurrently-tp4733518p4733518.html",njiang:1314553558:2011-08-29T01:45:58.391+0000:1314553558:2011-08-29T01:45:58.391+0000:Applied patch into trunk.
0,CAMEL-4379,Task,Major,None,None,"
None
",Resolved,Fixed,"2.8.1, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-08-25 11:20:04+00:00,2011-08-25 12:11:36+00:00,No Desc,"janstey:1314244292:2011-08-25T11:51:32.278+0000:1314244292:2011-08-25T11:51:32.278+0000:janstey@duffman:/x1/asf/camel/trunk/parent$ svn ci -m ""CAMEL-4379 - upgrade jetty to version 7.4.5.v20110725""
Sending        parent/pom.xml
Transmitting file data .
Committed revision 1161524.

janstey:1314244335:2011-08-25T11:52:15.732+0000:1314244335:2011-08-25T11:52:15.732+0000:FYI ServiceMix was recently updated to this version of Jetty and CXF 2.4.2 is using this version as well.
ffang:1314245000:2011-08-25T12:03:20.268+0000:1314245000:2011-08-25T12:03:20.268+0000:Hi Jon,

Would you please also backport this fix to camel 2.8.x branch?
As Servicemix will use camel 2.8.x for next release.

Thanks
Freeman
janstey:1314245478:2011-08-25T12:11:18.982+0000:1314245478:2011-08-25T12:11:18.982+0000:Merged this to 2.8 branch in revision 1161530.

Cheers,
Jon
"
0,CAMEL-4378,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Freeman Yue Fang,Claus Ibsen,0,0,2011-08-25 04:34:02+00:00,2011-09-02 04:01:55+00:00,"We need osgi unit tests in



camel-itest-karaf  (easy as it just verify the component can be installed)
camel-itest-osgi   (testing the component in use in osgi)","ffang:1314907315:2011-09-02T04:01:55.552+0000:1314907315:2011-09-02T04:01:55.552+0000:commit fix
http://svn.apache.org/viewvc?rev=1163523&view=rev"
0,CAMEL-4377,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Freeman Yue Fang,Claus Ibsen,0,0,2011-08-25 04:32:58+00:00,2011-08-25 09:36:53+00:00,The new camel-zookeper component need to be added to the features.xml file. A possible osgi bundle is needed for zookeper if its not already osgi compliant.,"ffang:1314231242:2011-08-25T08:14:02.259+0000:1314231242:2011-08-25T08:14:02.259+0000:The zookeeper 3.3.3 is already OSGi friendly

Freeman
ffang:1314236213:2011-08-25T09:36:53.023+0000:1314236213:2011-08-25T09:36:53.023+0000:commit fix
http://svn.apache.org/viewvc?rev=1161465&view=rev"
0,CAMEL-4376,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-08-24 21:16:16+00:00,2011-11-07 07:19:51+00:00,"There are 2 DefaultEndpoint constructors that are not necessary, are not really used (and as the doc says they should not be used anyway) that I intend to remove. One issue is that during endpoint construction because the component and context are set later services from the context such as type converters are not yet available which may lead to errors (or unnecessarily complicated code).


    protected DefaultEndpoint(String, CamelContext);
    protected DefaultEndpoint(String);
possibly
    protected DefaultEndpoint();


There are also a number of components defining constructors that just mimic those that are not necessary and not used either. Those can be removed now.","davsclaus:1314218159:2011-08-25T04:35:59.416+0000:1314218159:2011-08-25T04:35:59.416+0000:The default ctr should definitely be there as people use that to create endpoints in eg spring xml file

For example
<bean id=""myEndpoint"" class=""org.apache.camel....SedaEndpoint"">
   < set some options here >
</bean>


davsclaus:1314218195:2011-08-25T04:36:35.748+0000:1314218195:2011-08-25T04:36:35.748+0000:And I would not change anything in a patch release such as camel 2.8.1. If we are to do anything then do that only in 2.9 release.
hadrian:1314252875:2011-08-25T14:14:35.530+0000:1314252875:2011-08-25T14:14:35.530+0000:Yes, shouldn't change in 2.8.1.

The issue with <beean class=""*Endpoint"" /> is that it's not that useful to create an endpoint that way imho. Not sure why we would allow that. Will leave it in for now."
0,CAMEL-4375,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Andreas Kuhtz,0,0,2011-08-24 11:58:10+00:00,2011-08-26 10:19:03+00:00,The FilterCreateCamelContextPerClassTest is wrong configured. The isCreateCamelContextPerClass() should return true as written in the comment but currently returns false.,
0,CAMEL-4374,Improvement,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Andreas Kuhtz,0,0,2011-08-24 11:19:30+00:00,2011-09-19 22:43:41+00:00,"The debugger doesn't work in the CamelSpringTestSupport with route defined in XML. This issue is related to CAMEL-4368 (closed and I cannot re-open).


I've created a patch with 2 new tests that show the problem and a solution (check the doSetup() method in the tests). However I think this could be improved by moving the SpringCamelContext.setNoStart(true); to CamelSpringTestSupport).","njiang:1314159496:2011-08-24T12:18:16.261+0000:1314159496:2011-08-24T12:18:16.261+0000:@Andreas
If there are more than one camel context in the spring application context, your patch can not work for this case.
As the CamelSpringTestSupport it only try to start the first camel context, we need find other way to resolve this kind of issue.


akuhtz:1314160247:2011-08-24T12:30:47.258+0000:1314160247:2011-08-24T12:30:47.258+0000:@Willem
You're right, but currently it doesn't support even a single camel context in the XML file and the patch shows at least this problem. I'm not sure if the problem could be solved if the debugger could be configured in the camel context via Spring XML ...
njiang:1314169502:2011-08-24T15:05:02.670+0000:1314169502:2011-08-24T15:05:02.670+0000:@Andreas
I just ran a test within camel-test in trunk, the test is passed.
But there is something wrong with the camel-testng, I will dig it more tomorrow.


njiang:1314214740:2011-08-25T03:39:00.166+0000:1314214740:2011-08-25T03:39:00.166+0000:The SpringTestSupport of camel-testng is not synced with the one of camel-test.
I just updated the codes and it fix the bug that Andreas met.

njiang:1314214868:2011-08-25T03:41:08.139+0000:1314214868:2011-08-25T03:41:08.139+0000:As there a lots of change on the camel-test between 2.8.0 and 2.9-SNAPSHOT, I'm not plan to merge the patch into camel-2.8.x, user can work around the issue by applying the patch that Andreas provided if they are using Camel 2.8.x.
njiang:1314214956:2011-08-25T03:42:36.604+0000:1314214956:2011-08-25T03:42:36.604+0000:Applied the patch into trunk.
akuhtz:1314925710:2011-09-02T09:08:30.357+0000:1314925710:2011-09-02T09:08:30.357+0000:Just noticed that the patch will not work for camel-2.8.x because the SpringCamelContext.setNoStart(...) is not available in camel-2.8.x :-("
0,CAMEL-4373,Task,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-08-24 08:14:26+00:00,2011-10-12 08:15:52+00:00,XStream 1.4.1 has been released which fixed an dependency issue in 1.4.0. We should upgrade to it. The old xpp3 is now yet again the default pull parser.,"jbonofre:1314167062:2011-08-24T14:24:22.403+0000:1314167062:2011-08-24T14:24:22.403+0000:Revision 1161112.

I let this Jira open waiting for the ServiceMix bundles release including xstream 1.4.1_1."
0,CAMEL-4372,New Feature,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-08-24 08:11:30+00:00,2011-09-19 21:32:32+00:00,"As there are lots of handy filter could be used in Jetty, it could be useful if we can set the filter list for camel-jetty component.",njiang:1314151356:2011-08-24T10:02:36.440+0000:1314151356:2011-08-24T10:02:36.440+0000:Applied patch into the trunk.
0,CAMEL-4371,Improvement,Major,2.8.0,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Ashwin J. Karpe,Sergey Zhemzhitsky,0,2,2011-08-23 13:44:30+00:00,2012-07-06 08:56:23+00:00,"Sometimes it can be useful to replace endpoints in the camel context. For example, in unit tests it will not be necessary to define multiple properties files for different environments with placeholders.


Here is the endpoint strategy to replace endpoints



package org.apache.camel.impl;

public class ReplaceEndpointStrategy implements EndpointStrategy {

    private Map<String, String> replacements = Collections.emptyMap();

    @Override
    public Endpoint registerEndpoint(String uri, Endpoint endpoint) {
        CamelContext context = endpoint.getCamelContext();

        for(Entry<String, String> entry : replacements.entrySet()) {
            if(EndpointHelper.matchEndpoint(uri, entry.getKey())) {
                Endpoint newEndpoint = context.getEndpoint(entry.getValue());
                return newEndpoint;
            }
        }

        return endpoint;
    }

    public void setReplacements(Map<String, String> replacements) {
        this.replacements = replacements;
    }

}




Here is it can be used from spring



<?xml version=""1.0"" encoding=""UTF-8""?>

<beans xmlns=""http://www.springframework.org/schema/beans""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    "">

    <bean class=""org.apache.camel.impl.ReplaceEndpointStrategy"">
        <property name=""replacements"">
            <map>
                <entry key=""timer://test*"" value=""direct://start"" />
                <entry key=""log://timer*"" value=""mock://tick"" />
            </map>
        </property>
    </bean>

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""timer://testTimer"" />
            <to uri=""log://timerTick"" />
        </route>
    </camelContext>

</beans>




And the unit test



package org.apache.camel.impl;

import static org.junit.Assert.assertNotNull;

import org.apache.camel.CamelContext;
import org.apache.camel.Endpoint;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.mock.MockEndpoint;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration
public class ReplaceEndpointStrategyTest {

    @Autowired
    private CamelContext camelContext;

    @Autowired
    private ProducerTemplate producer;

    @Test
    public void registerEndpoint() throws Exception {
        assertNotNull(""direct:start is null"", camelContext.hasEndpoint(""direct:start""));
        assertNotNull(""mock:tick is null"", camelContext.hasEndpoint(""mock:tick""));
    }

    @Test
    public void route() throws Exception {
        Endpoint start = camelContext.hasEndpoint(""direct:start"");
        MockEndpoint complete = (MockEndpoint) camelContext.hasEndpoint(""mock:tick"");

        complete.expectedBodiesReceived(""Hello World!"");
        producer.sendBody(start, ""Hello World!"");
        complete.assertIsSatisfied();
    }

}","akarpe:1314877369:2011-09-01T19:42:49.594+0000:1314877386:2011-09-01T19:43:06.339+0000:Hi Sergey,

This is an interesting use case. I am planning to put together a RouteMutationStrategy that would cover not only endpoint mutation, but also ability to mutate segments of route. The strategy will have a default implementation and will be both pluggable as well as extensible.

Cheers,

Ashwin... 
hadrian:1314899399:2011-09-02T01:49:59.429+0000:1314899399:2011-09-02T01:49:59.429+0000:Hi Sergey, I do understand your problem, but I don't think your proposal is the right solution. What you want is already possible in Camel in more than way. Adding this would mean adding yet another way of achieving the same result, arguably not even in the best way. Hard-coding an endpoint URIs in code and then replacing it at runtime with another URI is really not a good practice. Better give them symbolic names that reflect semantics. Until somebody convinces me otherwise I am -1 on this change.

@Ashwin, one problem with what I think you propose is identifying the boundaries of the route segment. Another point is that if you have to mutate parts of the route, I would argue that there's something wrong with the route design.
davsclaus:1314913735:2011-09-02T05:48:55.593+0000:1314913735:2011-09-02T05:48:55.593+0000:The advice with can do a lot of route manipulation for testing purposes.
http://camel.apache.org/advicewith.html

I recommend to leverage this approach.
szhemzhitsky:1314918328:2011-09-02T07:05:28.689+0000:1314918328:2011-09-02T07:05:28.689+0000:Hi Claus,

Advice with seems very powerful. I will try to use it for testing purpose.

@Hadrian, as Claus mentioned it's should be possible to use advice with.

I think this issue should be resolved, because in the camel 2.9 AdviceWithRouteBuilder will be capable to replace route inputs too and in earlier versions of camel, a custom AdviceWithTask can be developed to replace route inputs.
akarpe:1314939902:2011-09-02T13:05:02.271+0000:1314940270:2011-09-02T13:11:10.921+0000:Hi Hadrian,

I see your point with mutating route segments. It does imply poor design and needs to be addressed differently.

@Claus, I am checking out the advice approach. My primary reluctance to go down that road was based on trying to make the mutation event driven, thereby  issuing endpoint change request only upon explicit event, rather than checking along via an advice (less overhead).

Please et me know if an event based endpoint mutation approach on the camel context is something you find interesting 

Cheers,

Ashwin...
akarpe:1314940816:2011-09-02T13:20:16.214+0000:1314941523:2011-09-02T13:32:03.972+0000:@Hadrian, @Claus,

I looked over the AdviceWithRouteBuilder and it seems quite powerful and capable.

It is a bit clunky and does need to be explicitly invoked. Please advise if a simpler event based approach is warranted under the circumstances...

Cheers,

Ashwin... 
davsclaus:1341536183:2012-07-06T08:56:23.529+0000:1341536183:2012-07-06T08:56:23.529+0000:The current functionality in adwice with and whatnot can already do this"
0,CAMEL-4370,Bug,Major,2.7.1,"2.8.1, 2.9.0","

camel-file

",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Sergey Zhemzhitsky,0,0,2011-08-23 06:17:09+00:00,2011-08-24 08:49:18+00:00,"Sometimes it can be necessary to use custom headers to create a file name.


For example, I declare my file endpoint in the following manner:



<route id=""fileReader"">
    <from uri=""file://rootFolder?move=.backup&amp;moveFailed=.error/${header.CustomHeader}"" />
    <to uri=""file://out""/>
</route>




The header ""CustomHeader"" cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile



/**
 * Bind this GenericFile to an Exchange
 */
public void bindToExchange(Exchange exchange) {
    exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE, this);
    GenericFileMessage<T> in = new GenericFileMessage<T>(this);
    exchange.setIn(in);
    populateHeaders(in);
}

/**
 * Populates the {@link GenericFileMessage} relevant headers
 *
 * @param message the message to populate with headers
 */
public void populateHeaders(GenericFileMessage<T> message) {
    if (message != null) {
        message.setHeader(Exchange.FILE_NAME_ONLY, getFileNameOnly());
        message.setHeader(Exchange.FILE_NAME, getFileName());
        message.setHeader(""CamelFileAbsolute"", isAbsolute());
        message.setHeader(""CamelFileAbsolutePath"", getAbsoluteFilePath());

        if (isAbsolute()) {
            message.setHeader(Exchange.FILE_PATH, getAbsoluteFilePath());
        } else {
            // we must normalize path according to protocol if we build our own paths
            String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath());
            message.setHeader(Exchange.FILE_PATH, path);
        }

        message.setHeader(""CamelFileRelativePath"", getRelativeFilePath());
        message.setHeader(Exchange.FILE_PARENT, getParent());

        if (getFileLength() >= 0) {
            message.setHeader(""CamelFileLength"", getFileLength());
        }
        if (getLastModified() > 0) {
            message.setHeader(Exchange.FILE_LAST_MODIFIED, new Date(getLastModified()));
        }
    }
}




As you can see a new ""in"" message is created and not all the headers from the original message are copied to it.",davsclaus:1314146958:2011-08-24T08:49:18.328+0000:1314146958:2011-08-24T08:49:18.328+0000:Thanks for reporting.
0,CAMEL-4369,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-23 05:32:41+00:00,2011-08-23 05:37:17+00:00,"See nabble
http://camel.465427.n5.nabble.com/Trying-to-set-fixed-length-bindy-type-data-formatter-in-RouteBuilder-tp4725299p4725299.html


The fixed type is missing from BindyType so its easier to use in the route dsl.",
0,CAMEL-4368,Improvement,Major,None,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-08-23 04:23:19+00:00,2011-08-24 10:03:01+00:00,"Here is the mail thread about this issue.
http://camel.465427.n5.nabble.com/camel-testng-Start-debugger-with-CamelSpringTestSupport-tp4716094p4716094.html",njiang:1314151381:2011-08-24T10:03:01.548+0000:1314151381:2011-08-24T10:03:01.548+0000:Applied patch into trunk and camel-2.8.x branch.
0,CAMEL-4367,Bug,Minor,"2.4.0, 2.5.0, 2.6.0, 2.7.0, 2.7.1, 2.7.2, 2.7.3, 2.8.0","2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Szabolcs Béki,0,0,2011-08-22 21:49:59+00:00,2011-08-26 14:03:04+00:00,"Contrary to the documentation, the ""encoder"" and ""decoder"" option is unusable as it's value is taken as-is instead of resolving the references using the registry.


This bug was introduced in the revision 960621 as part of CAMEL-2907.


Patch can be found at https://github.com/szabolcsberecz/camel/commit/b3bcc8dd284575c931048ea410c44577474e25dd","njiang:1314031627:2011-08-23T00:47:07.539+0000:1314031627:2011-08-23T00:47:07.539+0000:Hi Szabolcs,

Thanks for the patch. 
Can you submit the patch to the JIRA and grant it with Apache license ?
So I can apply it into trunk.

Willem
edge:1314056917:2011-08-23T07:48:37.965+0000:1314056917:2011-08-23T07:48:37.965+0000:Hi, all

Actually I don't see it as a bug in this case, the documentation clearly says that when ""encoder"" and ""decoder"" is used, the property value should be a class' name inheriting org.jboss.netty.channel.ChannelDownStreamHandler/org.jboss.netty.channel.ChannelUpStreamHandler, if you need to resolve the class from registry, please use the ""encoders"" and ""decoders"".

Although it's a good idea that the ""encoder"" and ""decoder"" property can also be resolved from registry, please make sure that the call to 

    EndpointHelper.setReferenceProperties(component.getCamelContext(), this, parameters);

doesn't introduce any side-effects. 
szabi:1314058570:2011-08-23T08:16:10.975+0000:1314058570:2011-08-23T08:16:10.975+0000:Hi all,

It looks like I misunderstood the documentation. Anyway, if you think it's a good idea to use the registry for these two options, I will submit the patch.

Actually, the call to setReferenceProperties does introduce side-effects as it will try to resolve from registry every option value with a leading ""#"". The question is, do you see it as a bad thing?

If you would rather only have the ""encoder"" and ""decoder"" option resolved from registry, I will update the patch.

Szabolcs
njiang:1314058982:2011-08-23T08:23:02.623+0000:1314058982:2011-08-23T08:23:02.623+0000:I just checked the camel-netty wiki page, it said it supports the encoder and decoder option, the ""#"" is used for reference in camel by default, I don't think it is wrong.

@Szabolcs
I'm OK with your patch, once you submit the patch, I will be happy to apply it into trunk. 
edge:1314093528:2011-08-23T17:58:48.751+0000:1314093528:2011-08-23T17:58:48.751+0000:Well, as I said , I don't see the original implementation as a bug, so if all others accept the new way -- maybe as an improvement -- we will check to make sure the side-effects don't affect our current code. Of course as Jiang said, if one use ""#"" in property value for reference as default, there should be no harm.
njiang:1314338584:2011-08-26T14:03:04.023+0000:1314338584:2011-08-26T14:03:04.023+0000:Applied patch into trunk and 2.8.x branch."
0,CAMEL-4366,New Feature,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,christian ohr,0,0,2011-08-22 17:55:59+00:00,2011-09-21 15:37:21+00:00,"Add load statistics exposing a exponentially moving weighted average for the number of inflight exchanges in routes and the whole CamelContext. Initially the window is fixed to 1m, 5m and 15m, just like Linux load figures.","ohr:1316086224:2011-09-15T19:30:24.970+0000:1316086224:2011-09-15T19:30:24.970+0000:Added first version of exposing exchange loads for context and route over JMX (+ some unit tests)
davsclaus:1316491465:2011-09-20T12:04:25.027+0000:1316491465:2011-09-20T12:04:25.027+0000:Christian do you have a link to that load algorithm being used? I would like to add a note where to read more about it from the source code.
davsclaus:1316491485:2011-09-20T12:04:45.063+0000:1316491485:2011-09-20T12:04:45.063+0000:Screenshot with load from JMX on CamelContext
davsclaus:1316491580:2011-09-20T12:06:20.749+0000:1316491580:2011-09-20T12:06:20.749+0000:I attached a screenshot with the patch being incorporated.

I will add a option on Camel JMX so you can enable|disable this. As it uses a background thread to update the load. And maybe some ppl do not need this details.

I am also not using a static instance as that dont work well in hot deploy server environments. So instead each CamelContext has its own background task. And the thread pool / thread task is handled by the Camel ExecutorService API for that. So that is aligned like the rest of the code.
davsclaus:1316497914:2011-09-20T13:51:54.733+0000:1316497914:2011-09-20T13:51:54.733+0000:Okay I have applied the patch into trunk.

The load statistics is part of the performance stats, so you can disable it all together, by setting that option to Off.
See the Camel JMX wiki page for details.


christian.ohr:1316503849:2011-09-20T15:30:49.348+0000:1316503849:2011-09-20T15:30:49.348+0000:Cool. Thanks for working on this! 
I didn't feel too well with the TimerTask singleton either, but I simply overlooked the ScheduledExecutorService."
0,CAMEL-4365,Bug,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-22 14:14:12+00:00,2011-08-22 14:19:41+00:00,This only affects Camel 2.9.,
0,CAMEL-4364,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-22 12:57:30+00:00,2011-08-22 13:24:51+00:00,"Current to access a map from the message body you have to provide the key name without any enclosing quotes as:
 .when().simple(""${body.property[foo]} == 'King Kong'"")


However we should support both notations as people may enclose using quotes as this is needed in Java
 .when().simple(""${body.property['foo']} == 'King Kong'"")


And the quotes can also be double quotes.",
0,CAMEL-4363,New Feature,Minor,2.6.0,,"

camel-jetty
handler
jetty

",Resolved,Won't Fix,None,Willem Jiang,Joshua Watkins,0,0,2011-08-22 10:31:12+00:00,2011-09-07 09:41:38+00:00,"As per the discussion here: http://camel.465427.n5.nabble.com/Serving-static-pages-with-JettyComponent-td4711870.html


A Jetty ResourceHandler or a ServletContextHandler cannot be added to the jetty server to serve up pages that are not processed via camel routes. It would be nice to utilize the currently running jetty server to serve up pages/resources other than those represented via camel routes.","njiang:1314925907:2011-09-02T09:11:47.298+0000:1314925907:2011-09-02T09:11:47.298+0000:Current camel-jetty component just binds one servlet to the JettyServer, so it is impossible to add the ResourceHandler there.
To support it , we need to create one servlet per jetty endpoint and just attach the consumer into the servlet.
It make sense that if we have multi jetty endpoint which has different configuration of session or security.
 
njiang:1315286043:2011-09-06T13:14:03.310+0000:1315286043:2011-09-06T13:14:03.310+0000:I just did some test on the current Jetty component, and found that jetty component use one servlet is because we will face the handler already start issue if we create on servlet per jetty endpoint.
{code}
java.lang.IllegalStateException: STARTED
	at org.eclipse.jetty.server.handler.HandlerWrapper.setServer(HandlerWrapper.java:124)
	at org.eclipse.jetty.server.handler.ContextHandler.setServer(ContextHandler.java:237)
        at org.eclipse.jetty.server.handler.HandlerCollection.setHandlers(HandlerCollection.java:85)
	at org.eclipse.jetty.server.handler.HandlerCollection.addHandler(HandlerCollection.java:277)
{code}

Now I didn't find a way to fix this issue as we can't stop the server and start the handler again which is dangerous when the server is handling an important request. 

So I suggest to close this issue as there is a way to workaround this issue by applying a custom processor to deal with the resource request.


njiang:1315286141:2011-09-06T13:15:41.001+0000:1315286141:2011-09-06T13:15:41.001+0000:Current there is no solution for it.
jwatkins:1315292792:2011-09-06T15:06:32.161+0000:1315292792:2011-09-06T15:06:32.161+0000:Is there any way to be able to set these bean via some type of configuration before he jetty component is instantiated? (Similar to the way you can set various options on the JMS/ActiveMQ component which is used by camel)
njiang:1315328607:2011-09-07T01:03:27.421+0000:1315328607:2011-09-07T01:03:27.421+0000:@Joshua,
Because jetty endpoint share the server which listen to the same port across the JVM. If we don't publish the servlet on the root, we can't add or remove the http consumer dynamically without stopping the server. The side effect of this is we can't let the resource handler work as expect.

jwatkins:1315359698:2011-09-07T09:41:38.706+0000:1315359698:2011-09-07T09:41:38.706+0000:I think I understand what you are saying. I will have to get myself a bit more familiar with the workings of the Jetty Servlet to fully understand the issue. The interesting thing is that the CometD component allows for a resource base to be set to serve up static files. (I guess this is due to it setting the cometD component to /comet and a DefaultServlet on /.)

Thanks for taking a look at this."
0,CAMEL-4362,Bug,Major,2.8.0,"2.8.4, 2.9.0","
None
",Closed,Fixed,"2.8.4, 2.9.0",Christian Müller,David J. M. Karlsen,0,0,2011-08-21 17:02:19+00:00,2011-11-22 23:22:56+00:00,"According to http://camel.apache.org/jpa.html entityName is optional.
When configuring with the following uri (e.g. w/o entityName):
<camel:endpoint id=""jpaEndpoint"" uri=""jpa:?persistenceUnit=journalPersistenceUnit&usePersist=true"" />
the following warning will be displayed
2011-08-21 18:57:11,381 [main][][][][][][][] WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue
due to the incorrect if test in the JpaComponent:



// lets interpret the next string as a class
        if (path != null) {
            // provide the class loader of this component to work in OSGi environments as camel-jpa must be able
            // to resolve the entity classes
            Class<?> type = getCamelContext().getClassResolver().resolveClass(path, JpaComponent.class.getClassLoader());
            if (type != null) {
                endpoint.setEntityType(type);
            }
        }




path is not null, but it is the rest of the string and not the entityname. e.g it should not start with ? if it is an entityname - else it is the options.","davidkarlsen@gmail.com:1313920008:2011-08-21T17:46:48.126+0000:1313920008:2011-08-21T17:46:48.126+0000:I now see:

commit ad352d2328a4dd398a334f24b6d03944a3bcfc59
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Fri Aug 19 11:27:59 2011 +0000

    Jpa component should only try to load EntityClass if the path is not empty string.
    
    git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@1159596 13f79535-47bb-0310-9956-ffa450edef68

So this issue can be closed and the changelog updated.
muellerc:1313930569:2011-08-21T20:42:49.309+0000:1313930569:2011-08-21T20:42:49.309+0000:Already fixed with commit 1159596: http://svn.apache.org/viewvc?rev=1159596&view=rev
davidkarlsen@gmail.com:1321952732:2011-11-22T17:05:32.800+0000:1321952732:2011-11-22T17:05:32.800+0000:I still see this message.
WARN org.apache.camel.util.ObjectHelper - Cannot find class: persistenceUnitjournalPersistenceUnitusePersisttruepersistenceUnitjournalPersistenceUnitusePersisttrue

even with camel 2.8.3
muellerc:1321975376:2011-11-22T23:22:56.837+0000:1321975376:2011-11-22T23:22:56.837+0000:fixed for Camel 2.8.4 and 2.9.0"
0,CAMEL-4361,Improvement,Major,2.8.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,David J. M. Karlsen,0,3,2011-08-21 16:50:36+00:00,2022-09-02 08:36:08+00:00,"The current implementation only allows for one given xsd schema.
I have some messages which have two namespaces. The outer schema declares some elements with lax processing.
By providing a http://static.springsource.org/spring-ws/sites/1.5/spring-xml/apidocs/org/springframework/xml/xsd/XsdSchemaCollection.html which references both schemas I would be able to validate the whole message - and not just the outermost one.


Either the existing implementation will have to be altered to allow for several paths, or it can be extended to reference a schemacollection.","muellerc:1313930002:2011-08-21T20:33:22.792+0000:1313930002:2011-08-21T20:33:22.792+0000:David, do you plan to provide a patch for it? We love contributions... ;-)

Starting from Camel 2.9.0, the validator component does no longer depend on Spring...
davidkarlsen@gmail.com:1313934009:2011-08-21T21:40:09.151+0000:1313934009:2011-08-21T21:40:09.151+0000:Hm, I see ./src/test/resources/org/apache/camel/component/validator/camelContext.xml in camel-spring on trunk which is 2.9?
However I do not find the implementation of the component.

Where is the new validator component?
davsclaus:1313966728:2011-08-22T06:45:28.397+0000:1313966728:2011-08-22T06:45:28.397+0000:Its moved to camel-core as it no longer depend on Spring JARs, from Camel 2.9 onwards.

There are still some unit tests in camel-spring to ensure it also works when configuring in Spring XML DSLs.
davidkarlsen@gmail.com:1313994835:2011-08-22T14:33:55.292+0000:1313994835:2011-08-22T14:33:55.292+0000:So if ""my"" component will depend on: http://static.springsource.org/spring-ws/sites/1.5/spring-xml/apidocs/org/springframework/xml/xsd/commons/CommonsXsdSchema.html and org.apache.ws.commons.schema.XmlSchemaCollection then i guess I should stick it into camel-spring?
davsclaus:1313997810:2011-08-22T15:23:30.854+0000:1313997810:2011-08-22T15:23:30.854+0000:No the component should not be depend on Spring or any other 3rd party JARs. It should use the API from the JDK.
davsclaus:1341536096:2012-07-06T08:54:56.673+0000:1341536096:2012-07-06T08:54:56.673+0000:Any update on this?
davsclaus:1436622686:2015-07-11T21:51:26.034+0000:1436622686:2015-07-11T21:51:26.034+0000:Ah yeah lets try to see if we can add support for 1 or more xsd schemas in the validator. We could just allow to define multiple separated by comma, and then figure out how to use those with the java validation api. Since spring can do it, we should be able to do as well."
0,CAMEL-4360,Improvement,Minor,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-20 08:35:42+00:00,2011-08-20 08:41:47+00:00,The debugger adds a little overhead and silently enables tracer as well. We should have the end user to explicit enable the debugger if he need to use it from his unit tests.,
0,CAMEL-4359,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Dragisa Krsmanovic,1,2,2011-08-19 20:59:13+00:00,2011-08-20 10:52:05+00:00,"Error handler tries to add message body to error log. If it tries to use JAXB type converter and marshalling throws exception, the exception is thrown all the way back to SedaConsumer. SedaConsumer will then retry to create error message in the same way until the point where exception is not handled any more and SedaConsumer loop breaks off.


One single bad message can stop Seda route.","dragisak:1313758927:2011-08-19T21:02:07.574+0000:1313758927:2011-08-19T21:02:07.574+0000:I am adding unit test that demonstrates the problem.
davsclaus:1313808725:2011-08-20T10:52:05.011+0000:1313808725:2011-08-20T10:52:05.011+0000:Thanks for the unit test."
0,CAMEL-4358,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-08-19 15:58:16+00:00,2011-09-14 12:10:38+00:00,"Currently the management code (org.apache.camel.management.*) contains a mix of implementation code and APIs. This leads to cycle in the management code as well as to bigger cycles involving all of camel-core.


So I propose to do several changes:



move interfaces and annotations that form the API to camel.spi.management. As these are probably not used by external components or user code no compatibility classes are created
create new package camel.suppport for classes that implement API or SPI classes and are expected to be extended by many impl classes. classes in support may only access the camel API and SPI
Move EventNotifierSupport and ServiceSupport to this package. Create deprecate dummys in the old locations to avoid breaking older code
Move DefaultEventFactory from management to management.event



I will post a patch shortly for review","davsclaus:1313742164:2011-08-19T16:22:44.946+0000:1313742164:2011-08-19T16:22:44.946+0000:Yeah that could be a good idea.

However if we are to change the API a bit, we may consider removing the {{Statistic createStatistic(String name, Object owner, Statistic.UpdateMode updateMode);}} method from the ManagementStrategy and create the Statistics instances directly in the source code. I doubt any SPI need to create other kind of Statistic objects in a 3rd party management strategy.

Then we keep Statistic as an internal object in the org.apache.camel.management package.

However I am also okay for the move to spi.


davsclaus:1313742227:2011-08-19T16:23:47.615+0000:1313742227:2011-08-19T16:23:47.615+0000:we could then turn Statistic into a class instead of interface and make it final.
cschneider:1313998600:2011-08-22T15:36:40.199+0000:1313998600:2011-08-22T15:36:40.199+0000:Hi Claus,

I have changed the goal of this issue as there are more refactorings to be done in the management code. I have move the Stastic class for now but it is quite possible that we could remove the creation from the API altogether as you proposed. I will check that in a second step

Christian

hadrian:1314033534:2011-08-23T01:18:54.092+0000:1314033534:2011-08-23T01:18:54.092+0000:@Christian, I reviewed your changes. Great patch, looks much cleaner. Kinda big though, I'd prefer smaller incremental changes.
davsclaus:1314048022:2011-08-23T05:20:22.387+0000:1314048022:2011-08-23T05:20:22.387+0000:It looks like you removed JmxNotificationBroadcasterAware, is there a reason for that?

And whats the reason for moving the 3 ManagedXXX annotations to spi.management package?
As an end user, eg developing a custom processor/bean/component I would feel a bit odd to import spi.management to add a JMX annotation to my code. Those annotations are part of the ""daily"" development, and fells more natural in the org.apache.camel.management or org.apache.camel package.
The spi.management would be for 3rd party developing some custom integration with eg. a custom management software with Camel in general. A regular Camel end user shouldn't need to use the spi package.
Luckily those 3 ManagedXXX annotations is new in Camel 2.9 so we have the luxury of being able to place them where we like it the best.

Also it would be nice if the patch was smaller and you did this in more steps. So if you wanted to move the ServiceSupport and I think there was one other class, then doing that in a separate patch would have been nice. But I guess from this big patch its harder to split it into two now your working codebase has changed soo much.

Anyway you are on a good way here. Just the ManagedXXX annotations I would like to be kept in a non spi package.
cschneider:1314052227:2011-08-23T06:30:27.568+0000:1314052227:2011-08-23T06:30:27.568+0000:@Claus: I was not sure about the spi package either. The annotations are clearly part of the API or SPI though. So I could also place them in org.apache.camel. Normally API means that you call something using an interface and SPI means that you implement an interface. On the other hand API is tpypically understood to be user faced while SPI is about 3rd party extension. As the annotations are typically used for components they could even fall in the 3rd party case but as said I am not really sure either.

cschneider:1314064600:2011-08-23T09:56:40.200+0000:1314064600:2011-08-23T09:56:40.200+0000:@Claus: The JmxNotificationBroadcasterAware is moved to spi.management as it is also part of the SPI. Again I am not absolutely sure about spi vs API. Perhaps we can dicuss that on dev to get a clear picture what to put where. In any case the interface should not be in the implementation package
cschneider:1314077060:2011-08-23T13:24:20.871+0000:1314077060:2011-08-23T13:24:20.871+0000:Committed the patch. I will move the .spi.management package if after the discussion in dev we tend to rather want it in an api package than spi."
0,CAMEL-4357,Improvement,Major,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Schneider,Christian Schneider,0,0,2011-08-19 13:38:41+00:00,2011-08-22 17:08:15+00:00,"I am currently looking into the dependencies betwen packages in camel-core. The packages org.apache.camel and org.apache.camel.spi form the camel api.
So I am trying to make them not depend on other packages from camel-core. One problem there is the starter class Main. It needs access to impl packages as it needs to start camel. So it should not live in org.apache.camel.


I propose to move it to org.apache.camel.main. To not break anything right now I will create a deprecated class Main in org.apache.camel that extends the moved Main. We can remove the deprecated version in camel 3.0","davsclaus:1313732584:2011-08-19T13:43:04.357+0000:1313732584:2011-08-19T13:43:04.357+0000:There is also a Main class in camel-spring. It was actually started there as the first Main class we offered in Camel.
cschneider:1313733428:2011-08-19T13:57:08.551+0000:1313733428:2011-08-19T13:57:08.551+0000:The one in camel-spring is not problematic as it is in a non API package org.apache.camel.spring
davsclaus:1314001349:2011-08-22T16:22:29.298+0000:1314001349:2011-08-22T16:22:29.298+0000:There is a CS error as the license header is missing in one file.

When adding a new package in camel-core, a package.html file should be included, which briefly summarizes the package. See some of the other for examples to copy.

And in the camel-core/pom.xml file there is some javadoc grouping of packages. I guess the new main package is to be added as well.
cschneider:1314004095:2011-08-22T17:08:15.719+0000:1314004095:2011-08-22T17:08:15.719+0000:Ok. Will add that tomorrow"
0,CAMEL-4356,Improvement,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Marco Crivellaro,0,1,2011-08-19 13:23:18+00:00,2011-09-23 07:32:15+00:00,"when storing a file the ftp component checks if the file exists in the endpoint, this is done by listing the content of the destination folder and looping through all files listed. 


the list operation takes a long time when the destination folder contains hundreds of files. 
instead of listing for all files the component can simply list for the file it is interested on, this way the number of files contained in destination folder won't affect the time it takes the producer to process the exchange. 


I currently have a case where delivering to an endpoint is taking more than a minute because of this issue. 


Both ftp and sftp libraries used supports listing for a single file so the changes would be the following: 


FtpOperations.java
public boolean existsFile(String name) throws GenericFileOperationFailedException { 
  String[] names = client.listNames(name); 
  if (names == null) { 
    return false; 
  } 
  return (names.lenght >= 1); 
} 




SftpOperations.java
public boolean existsFile(String name) throws GenericFileOperationFailedException { 
  Vector files = channel.ls(name); 
  if (names == null) { 
    return false; 
  } 
  return (names.size >= 1); 
}","davsclaus:1314337066:2011-08-26T13:37:46.607+0000:1314337066:2011-08-26T13:37:46.607+0000:Some FTP server may not allow listing using a name parameter. I think in the past there has been some issue about that.
So please check the mailing list for past talks about this.

If there is something about this, we may need to add an option so people can turn this on|off according to whatever works.
crive:1314580643:2011-08-29T09:17:23.406+0000:1314580643:2011-08-29T09:17:23.406+0000:I could not find any incident related to listing using filename in the forum.
Both libraries API reports listing with filename as a possible use of list so I would think this should not cause errors.

To be on the safe side though it would be nice to introduce listing by filename as an optional behaviour.
njiang:1314584079:2011-08-29T10:14:39.318+0000:1314584079:2011-08-29T10:14:39.318+0000:I committed a patch by introducing a new option of ""fastExist"".
davsclaus:1314587794:2011-08-29T11:16:34.407+0000:1314587794:2011-08-29T11:16:34.407+0000:I would suggest the option would be named: fastExistsCheck
As its more descriptive what it does: to enable checking for file exists using a faster way.
crive:1314593126:2011-08-29T12:45:26.062+0000:1314593126:2011-08-29T12:45:26.062+0000:I agree fastExistsCheck is more descriptive option name

is this going to be release with a 2.8.x version or 2.9.0?
njiang:1314595699:2011-08-29T13:28:19.159+0000:1314595699:2011-08-29T13:28:19.159+0000:Just a commit a new patch by changing the option name, as this is new feature to camel-ftp, I think it just be a part of camel 2.9.0.
crive:1314596149:2011-08-29T13:35:49.213+0000:1314596149:2011-08-29T13:35:49.213+0000:any chance to get it as 2.8.1?
njiang:1314596569:2011-08-29T13:42:49.799+0000:1314596569:2011-08-29T13:42:49.799+0000:Update the ftp2 wiki page for the new option of fastExistsCheck.
crive:1316734335:2011-09-23T07:32:15.685+0000:1316734335:2011-09-23T07:32:15.685+0000:Can you update the documentation so that it states the option is available for Camel 2.8.2 too (like ciphers option)?

"
0,CAMEL-4355,Improvement,Minor,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,Claus Ibsen,0,0,2011-08-19 12:33:03+00:00,2011-08-24 10:02:14+00:00,"The CxfRsProducer uses an internal LRUCache. Now we have a LRUSoftCache that uses soft reference, so we can switch to use that directly.


Also the cache should be started/stopped in the doStart/doStop methods of the CxfRsProducer itself, to ensure proper house cleaning.",njiang:1314151334:2011-08-24T10:02:14.785+0000:1314151334:2011-08-24T10:02:14.785+0000:Applied patch into trunk
0,CAMEL-4354,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Marco Crivellaro,0,0,2011-08-19 11:24:26+00:00,2011-09-02 09:15:18+00:00,"A new header added using an EventNotifier is not present when the exchange is aggregated with an AggregationStrategy.
This is happening only if the enpoint type is http, ftp doesn't have this issue.


This was working with an early version of 2.8.0-SNAPSHOT


Following the EventNotifier code used.


ExchangeSentEventNotifier.java
public class ExchangeSentEventNotifier extends EventNotifierSupport {

	@Override
	protected void doStart() throws Exception {
        /*
         *  filter out unwanted events
         *  we are interested only in ExchangeSentEvent
         */
        setIgnoreCamelContextEvents(true);
        setIgnoreServiceEvents(true);
        setIgnoreRouteEvents(true);
        setIgnoreExchangeCreatedEvent(true);
        setIgnoreExchangeCompletedEvent(true);
        setIgnoreExchangeFailedEvents(true);
        setIgnoreExchangeSentEvents(false);		
	}

	@Override
	protected void doStop() throws Exception {

	}

	@Override
	public boolean isEnabled(EventObject event) {
		return event instanceof ExchangeSentEvent;
	}

	@Override
	public void notify(EventObject event) throws Exception {
    	if(event.getClass() == ExchangeSentEvent.class){
            ExchangeSentEvent eventSent = (ExchangeSentEvent)event;
            
            log.debug(""Took "" + eventSent.getTimeTaken() + "" millis to send to: "" + eventSent.getEndpoint());

            //storing time taken to the custom header            
            eventSent.getExchange().getIn().setHeader(""x-time-taken"", eventSent.getTimeTaken());
            
    	}
		
	}

}","davsclaus:1313724631:2011-08-19T11:30:31.009+0000:1313724631:2011-08-19T11:30:31.009+0000:This is actually a miss usage of the EventNotifer as the idea it is a read-only event notification mechanism.
Any changes on headers is not meant to guaranteed to be preserved etc. 
davsclaus:1313724863:2011-08-19T11:34:23.590+0000:1313724863:2011-08-19T11:34:23.590+0000:Also make sure you set the header on the correct IN or OUT. See
http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html

The exchange may very well have an OUT message already, so you should populate it correctly. Storing the detail directly on the Exchange as a property will always preserve it.
crive:1313730056:2011-08-19T13:00:56.907+0000:1313730056:2011-08-19T13:00:56.907+0000:fixed by making use of exchange property

{code:java}
eventSent.getExchange().setProperty(""x-time-taken"", eventSent.getTimeTaken());
{code}
davsclaus:1313738155:2011-08-19T15:15:55.675+0000:1313738155:2011-08-19T15:15:55.675+0000:Marco which http component did you use? http4 or the regular http, or the jetty http producer?
davsclaus:1313738609:2011-08-19T15:23:29.692+0000:1313738609:2011-08-19T15:23:29.692+0000:Okay the ExchangeSentEvent is being fired to early for async routing engine. For synchronous routing, the event is emitted *after* the producer has completed. For async routing is emitted just after the producer have send, but not waiting for until its done. To keep it consistent we ought to fire the event when the producer is done. Then its the same for sync and async.
davsclaus:1313744489:2011-08-19T17:01:29.795+0000:1313744489:2011-08-19T17:01:29.795+0000:ExchangeSentEvent is now emitted when producer is done for both sync/async routing.
crive:1313969788:2011-08-22T07:36:28.711+0000:1313969788:2011-08-22T07:36:28.711+0000:shall we consider a better practice using an exchange property instead of an header?"
0,CAMEL-4353,Improvement,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-08-19 06:07:02+00:00,2011-09-19 21:10:51+00:00,"See nabble
http://camel.465427.n5.nabble.com/Transaction-configuration-in-Java-DSL-tp4711625p4711625.html


You will see an error like
Exception in thread ""main"" org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Policy[ref:null] <<< 


We should improve that and report a more details error.",
0,CAMEL-4352,Bug,Minor,2.6.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-08-18 17:07:32+00:00,2011-09-02 09:20:41+00:00,The workaround is to use ${file:onlyname} or not using stepwise.,"davsclaus:1313658466:2011-08-18T17:07:46.611+0000:1313658466:2011-08-18T17:07:46.611+0000:See nabble
http://camel.465427.n5.nabble.com/doneFileName-doesn-t-seem-to-work-tp4704701p4704701.html"
0,CAMEL-4351,Improvement,Major,2.7.3,2.9.0,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,Sergey Zhemzhitsky,0,0,2011-08-18 15:44:09+00:00,2011-11-22 13:21:51+00:00,"Here is how endpointName and serviceName are declared in XSD.



<xsd:attribute name=""endpointName"" type=""xsd:QName"" /> 
<xsd:attribute name=""serviceName"" type=""xsd:QName"" /> 




So the xml parser fails to parse the following element



<cxf:cxfEndpoint id=""service"" address=""${http.service.endpoint.path}"" wsdlURL=""${http.service.wsdl.path}""
    serviceName=""${http.service.serviceName}""
    endpointName=""${http.service.portName}"">
</cxf:cxfEndpoint>","davsclaus:1313660828:2011-08-18T17:47:08.427+0000:1313660828:2011-08-18T17:47:08.427+0000:I assume you use Spring, and that ${ } is spring property placeholders, right?
szhemzhitsky:1313704662:2011-08-19T05:57:42.762+0000:1313704662:2011-08-19T05:57:42.762+0000:Hi Claus,

That's right. This is spring property placeholders.
njiang:1314586446:2011-08-29T10:54:06.351+0000:1314586446:2011-08-29T10:54:06.351+0000:Hi Sergey,

I just commit a quick fix for it, you have to add a customer converter to covert the String into QName like this.
{code}
  <bean id=""conversionService""
      class=""org.springframework.context.support.ConversionServiceFactoryBean"">
    <property name=""converters"">
        <list>
            <bean class=""org.apache.camel.component.cxf.spring.QNameConverter""/>
        </list>
    </property>
  </bean>

{code}
Can you try it with latest camel trunk for it ?

Willem
szhemzhitsky:1314590191:2011-08-29T11:56:31.643+0000:1314590191:2011-08-29T11:56:31.643+0000:Hi Willem,

I will try it and will let you know about the results.
njiang:1314593249:2011-08-29T12:47:29.877+0000:1314593249:2011-08-29T12:47:29.877+0000:I just committed a new patch, you don't need to add to customer converter as I just showed now.
szhemzhitsky:1314672950:2011-08-30T10:55:50.382+0000:1314672980:2011-08-30T10:56:20.765+0000:Hi Willem,

I've just tested the new functionality and the attached patch for the CxfEndpointBeans.xml makes the test failed.

Here is the stacktrace
{code}
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myEndpoint': Error setting property
values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'endpointNameString' of bean class
 [org.apache.cxf.jaxws.JaxWsProxyFactoryBean]: Bean property 'endpointNameString' is not writable or has an invalid setter method. Does
 the parameter type of the setter match the return type of the getter?
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1361)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory
.java:1086)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.configureBean(AbstractAutowireCapableBeanFactor
y.java:314)
        at org.springframework.beans.factory.wiring.BeanConfigurerSupport.configureBean(BeanConfigurerSupport.java:146)
        at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:151)
        at org.apache.cxf.configuration.spring.ConfigurerImpl.configureBean(ConfigurerImpl.java:115)
        at org.apache.camel.component.cxf.CxfSpringEndpoint.configure(CxfSpringEndpoint.java:225)
        at org.apache.camel.component.cxf.CxfSpringEndpoint.createClient(CxfSpringEndpoint.java:117)
        at org.apache.camel.component.cxf.CxfProducer.<init>(CxfProducer.java:71)
        at org.apache.camel.component.cxf.CxfEndpoint.createProducer(CxfEndpoint.java:153)
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:377)
        ... 86 more
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'endpointNameString' of bean class [org.apache.cxf.
jaxws.JaxWsProxyFactoryBean]: Bean property 'endpointNameString' is not writable or has an invalid setter method. Does the parameter ty
pe of the setter match the return type of the getter?
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
        at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:903)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
        at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBean
Factory.java:1358)
        ... 96 more
{code}

Properties endpointNameString, serviceNameString seem to be applied to ClientProxyFactoryBean, ClientFactoryBean, ServerFactoryBean, JaxWsServerFactoryBean, and these classes don't have such properties.
njiang:1314683591:2011-08-30T13:53:11.315+0000:1314683591:2011-08-30T13:53:11.315+0000:Hi Sergey，

I can reproduce the error, will look into it later.
Thanks for pointing that out.


njiang:1314686438:2011-08-30T14:40:38.125+0000:1314686438:2011-08-30T14:40:38.125+0000:Hi Sergey,
I just committed a quick fix for the issue that you met. 
Do you mind try it again ?

Thanks, 

Willem
szhemzhitsky:1314688801:2011-08-30T15:20:01.652+0000:1314688801:2011-08-30T15:20:01.652+0000:Hi Willem,

I've just tried the latest version from the trunk.
Now everything works like a charm.
Thank you very much for such a great help.

Regards,
Sergey"
0,CAMEL-4350,Improvement,Minor,2.7.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Mathieu Lalonde,Julian Cable,0,1,2011-08-18 12:29:42+00:00,2011-09-19 23:40:04+00:00,"The following route works but the order of the columns is dependent on the natural ordering of the hashmap. Target systems will have an expectation of the order of the data. 


<route>
  <from uri=""jetty:http://0.0.0.0:16081/css/mes""/>
  <setBody>
    <constant>SELECT id, value1, value2 FROM mytable</constant> 
  </setBody>
  <to uri=""jdbc:mydb""/>
  <marshal>
    <csv/>
  </marshal>
 </route>


Either there needs to be a property for csv that allows hash key ordering to be specified, or an option to sort the keys, e.g.


<route>
  <from uri=""jetty:http://0.0.0.0:16081/css/mes""/>
  <setBody>
    <constant>SELECT id as col1, value1 as col2, value2 as col3 FROM mytable</constant> 
  </setBody>
  <to uri=""jdbc:mydb""/>
  <marshal>
    <csv sortFields=""true"" />
  </marshal>
 </route>","davsclaus:1313644256:2011-08-18T13:10:56.956+0000:1313644256:2011-08-18T13:10:56.956+0000:Good catch. Do you want to help with providing a patch? It seems like the fix would be a fairly simple change to use a LinkedHashMap to ensure the ordering.

You can read about contributing here
http://camel.apache.org/contributing.html
julian.cable:1313664822:2011-08-18T18:53:42.719+0000:1313664822:2011-08-18T18:53:42.719+0000:Hi Claus,

  happy to, but it will have to wait a couple of weeks. I'm on leave from tomorrow and maxed out the following week.

Julian
julian.cable:1313665811:2011-08-18T19:10:11.714+0000:1313665811:2011-08-18T19:10:11.714+0000:I don't have time to try it, but it looks like changing HashMap to LinkedHashMap on lines 25 and 197 of 

/camel/trunk/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcProducer.java

would do the trick.

Julian
davsclaus:1313714944:2011-08-19T08:49:04.680+0000:1313714944:2011-08-19T08:49:04.680+0000:Assuming its the camel-jdbc component, which is shown above.
The same issue could apply for camel-sql
davsclaus:1313715019:2011-08-19T08:50:19.907+0000:1313715019:2011-08-19T08:50:19.907+0000:By fixing it in camel-jdbc and camel-sql the order of the List<Map> is as the ResultSet have returned. And thus marshalling to csv will be in the same order as well.
mrlalonde:1314469249:2011-08-28T02:20:49.188+0000:1314469249:2011-08-28T02:20:49.188+0000:I'd like to try writing the patch & unit tests.
davsclaus:1314561690:2011-08-29T04:01:30.154+0000:1314561690:2011-08-29T04:01:30.154+0000:Mathieu I have put your into the contributor group so you can assign JIRA tickets that you work on. Looking forward for the patch :)
mrlalonde:1314638875:2011-08-30T01:27:55.802+0000:1314638875:2011-08-30T01:27:55.802+0000:Thanks for the encouragement Claus! :)

The attached patch has a trivial code change (use LinkedHashMap) and adds a Test class (JdbcRouteKeyOrderingTest).

Also added cautionary comments to JdbcRouteTest.
davsclaus:1314667142:2011-08-30T09:19:02.657+0000:1314667142:2011-08-30T09:19:02.657+0000:Thanks for the patch.
mrlalonde:1314715552:2011-08-30T22:45:52.852+0000:1314715552:2011-08-30T22:45:52.852+0000:I was going to submit a patch for the camel-sql component as well.  I should have it done in the next few days.
mrlalonde:1314716572:2011-08-30T23:02:52.931+0000:1314716572:2011-08-30T23:02:52.931+0000:Based on the SqlProducer code & the javadoc for Spring's ColumnMapRowMapper, the keys should already be in a deterministic order.  I can add a unit test in case we change the implementation down the road.
davsclaus:1314741818:2011-08-31T06:03:38.028+0000:1314741818:2011-08-31T06:03:38.028+0000:Yeah fell free to provide a unit test for camel-sql as well.
davsclaus:1314914027:2011-09-02T05:53:47.468+0000:1314914027:2011-09-02T05:53:47.468+0000:Mathieu, please create a new ticket. As this ticket is titled about the camel-jdbc which has been fixed."
0,CAMEL-4349,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-08-18 10:01:45+00:00,2011-09-19 21:04:17+00:00,"Setting the encryption mode on camel-nagios is a bit cumbersome, as you would need to crate a custom NagiosSetting object with the settings.
We should expose the encryptionMode in the uri, so people can configure it like the other parameters.","davsclaus:1313633138:2011-08-18T10:05:38.610+0000:1313633138:2011-08-18T10:05:38.610+0000:The option is named: encryptionMethod
And it has 3 values: No, Xor, or TripleDes"
0,CAMEL-4348,Improvement,Minor,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Bengt Rodehav,0,0,2011-08-18 10:01:07+00:00,2011-08-18 15:58:34+00:00,"It is possible to specify a time zone for Quartz, however, in order for that to work Camel needs a String to TimeZone type converter since Quartz requires a TimeZone.


Attached is a patch containing a type converter that works. By setting the type converter explicitly on the context like this,



context.getTypeConverterRegistry().addTypeConverter(TimeZone.class, String.class, new String2TimeZoneConverter());


it is possible to create an endpoint URI looking like this:



quartz://groupName/timerName?cron=<cronExpression>&trigger.timeZone=Europe/Stockholm


However, it would be really useful if this type converter could be included in camel-core. This has been discussed on the camel user list:


http://camel.465427.n5.nabble.com/How-to-specify-a-time-zone-for-camel-quartz-td4700077.html","rodehav:1313632993:2011-08-18T10:03:13.041+0000:1313632993:2011-08-18T10:03:13.041+0000:String to TimeZone converter.
davsclaus:1313638420:2011-08-18T11:33:40.164+0000:1313638420:2011-08-18T11:33:40.164+0000:Thanks for the patch. I added a String to TimeZone converter in the core.
rodehav:1313646391:2011-08-18T13:46:31.843+0000:1313646391:2011-08-18T13:46:31.843+0000:Perfect - looking forward to 2.9.0!
davsclaus:1313654314:2011-08-18T15:58:34.186+0000:1313654314:2011-08-18T15:58:34.186+0000:Backported to 2.8.1 as well."
0,CAMEL-4347,Improvement,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Gert Vanthienen,Gert Vanthienen,0,1,2011-08-18 08:24:33+00:00,2011-08-19 07:48:39+00:00,"When routes are getting started by the camel-blueprint component, the thread context classloader at that moment is the container's boot classloader.  This is causing problems for e.g. ActiveMQ object messages that need to get deserialized, because the boot classloader is not aware of classes that might be available inside the container.  The class used for reading the ActiveMQ object messages is http://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java.


We can fix this by setting a more appropriate classloader as the thread context classloader while starting the CamelContext from a Blueprint definition.  I see we also have a similar class in camel-jdbc and there are no doubt other libraries that depend on this classloader being set as well, so this change should help with all of those cases.","gertvanthienen:1313638396:2011-08-18T11:33:16.411+0000:1313638396:2011-08-18T11:33:16.411+0000:Fixed in http://svn.apache.org/viewvc?view=revision&revision=1159171

This fix also sets CamelContext's application context classloader field with the new thread context classloader to ensure the same object can always be retrieved again when necessary.
davsclaus:1313711319:2011-08-19T07:48:39.159+0000:1313711319:2011-08-19T07:48:39.159+0000:Backported to 2.8.1"
0,CAMEL-4346,New Feature,Minor,2.9.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Jan-Philipp Niewerth,0,0,2011-08-18 07:34:59+00:00,2011-09-19 21:02:38+00:00,"Some communication partners require files to be chmod-ed after being transfered to ensure locking. (instead of ""done"" files)
This is how it works:


from(""file:/in"").to(""sftp:user@host/out&password=secret&chmod=640"")","davsclaus:1313627337:2011-08-18T08:28:57.437+0000:1313627337:2011-08-18T08:28:57.437+0000:Thanks for the patch.

I assume the 8bit parsing is correct:
int permissions = Integer.parseInt(mode, 8);

And needed for the chmod JCraft API."
0,CAMEL-4345,Bug,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Hadrian Zbarcea,Jeff Genender,0,2,2011-08-18 05:18:18+00:00,2011-09-19 17:44:37+00:00,"The DefaultCamelContext uses synchronized ""endpoints"" which ends up ultimately extending a LinkedHashMap through the LRUCache.  The LinkedHashMap is obviously not thread safe, so it requires synchronized guards when accessing the endpoints object.  This especially happens in the getEndpoint(s) calls in the DefaultCamelContext.  In large systems with lots of routes and on multicore systems, dynamically created routes (and many routes) can cause long delays and hang for long times since route creation and the starting of the camel route can occur in unison with synchronization.  In a blueprint container, such as Karaf, this can cause timeouts on the bundle and camel routes will appear to hang indefinately.  Thread dumps show the hangs occur on the synchronized call in getEndpoint(s).  The fix for this is to use concurrent apis as much as possible and remove the synchronized code.  I refactored the LRUCache/LRUSoftCache to use Google's ConcurrentLinkedHashMap (ASL2 License http://code.google.com/p/concurrentlinkedhashmap) and removed the synchronized code that locks the endpoints object.  This should remove the hangs since the locks are no longer required.  Since COncurrentLinkedHashmap is not OSGi ready, I have shaded the classes in core.  On my executions, all unit tests pass with this refactoring using the concurrent code.  This should speed up Camel on multicore systems that have lots of routes.","jgenender:1313616521:2011-08-18T05:28:41.606+0000:1313616521:2011-08-18T05:28:41.606+0000:Patch attached against TRUNK as of r1158987
davsclaus:1313645258:2011-08-18T13:27:38.762+0000:1313645258:2011-08-18T13:27:38.762+0000:Nice patch.

By shading it into camel-core I like the fact that the camel-core dependency don't change.
However are there people who would not like shading this into camel-core?

And are there any Apache policy that would discourage this fact?
eg the JAR contains .class files which are not from Apache ?

If just the JDK had this class already. Even JDK7 dont have it, right?
joed:1313654136:2011-08-18T15:55:36.142+0000:1313654136:2011-08-18T15:55:36.142+0000:At least the google code is ASF License, would that help some?
davsclaus:1313654447:2011-08-18T16:00:47.960+0000:1313654447:2011-08-18T16:00:47.960+0000:Yeah the ASL license sure does :)

I think back in the days Spring framework included the aop alliance JAR in the Spring JAR directly as well.


dkulp:1313654835:2011-08-18T16:07:15.489+0000:1313654835:2011-08-18T16:07:15.489+0000:
I have no problem shading it in, but does it need to be exported from the bundle in OSGi?

Since it's completely an internal field, I don't think it does.   I'd definitely prefer it didn't get exported so if some other project has a bundle with it, we don't conflict and such.
ben.manes:1313659765:2011-08-18T17:29:25.458+0000:1313659765:2011-08-18T17:29:25.458+0000:Please open an issue to OSGi-ify CLHM and I'll do it for the next release (no timeframe).

As Google Guava is OSGi ready and I helped port the algorithm into MapMaker, that may also be a reasonable choice if it becomes a concern.

I'll be meeting up with Doug Lea in Sept. to discuss caching for JDK8, so maybe we'll see something in the standard libs eventually.

Cheers,
Ben
(CLHM author, Googler)

P.S. Don't you love Google Alerts? ;)
hadrian:1313660828:2011-08-18T17:47:08.910+0000:1313660828:2011-08-18T17:47:08.910+0000:@Ben, thanks for the offer and welcome to the Camel community :).
hadrian:1313685876:2011-08-19T00:44:36.696+0000:1313685876:2011-08-19T00:44:36.696+0000:Patch applied in r1159457 with thanks to Jeff. Jeff, we expect more from you :).
There are a few checkstyle issues in the patch I will correct in the next hour or so and mark this issue as resolved.
hadrian:1313686720:2011-08-19T00:58:40.808+0000:1313686720:2011-08-19T00:58:40.808+0000:Fixed checkstyle and also removed the OSGi export of the google stuff. The intent I believe was to make it accessible to components, but we can do that via a utility factory if/when needed.

Thanks Jeff!
davsclaus:1313713261:2011-08-19T08:21:01.310+0000:1313713261:2011-08-19T08:21:01.310+0000:The osgi manifest contains import of the google code
{code}
Import-Package: com.googlecode.concurrentlinkedhashmap,javax.activatio
 n;resolution:=optional,javax.management,javax.management.modelmbean,j
 avax.management.remote,javax.naming,javax.naming.spi,javax.net.ssl,ja
 vax.xml.bind;resolution:=optional,javax.xml.bind.annotation;resolutio
 n:=optional,javax.xml.bind.annotation.adapters;resolution:=optional,j
 avax.xml.namespace,javax.xml.parsers,javax.xml.stream;resolution:=opt
 ional,javax.xml.transform,javax.xml.transform.dom,javax.xml.transform
 .sax,javax.xml.transform.stream,javax.xml.validation,javax.xml.xpath,
 org.apache.xalan.xsltc.trax;resolution:=optional,org.osgi.framework;v
 ersion=""[1.4,2)"",org.slf4j;version=""[1.6,2)"",org.w3c.dom,org.xml.sax
{code}

I cannot see that its being exported, so I would assume we are almost okay.

What if another bundle exports com.googlecode.concurrentlinkedhashmap,
then camel-core could potential pickup that instead from itself, or am I mistaking?
davsclaus:1313713306:2011-08-19T08:21:46.692+0000:1313713306:2011-08-19T08:21:46.692+0000:Did anyone create a ticket at Google CLHM to ask for osgify the distribution, as Ben said we should do?
jgenender:1313724857:2011-08-19T11:34:17.821+0000:1313724857:2011-08-19T11:34:17.821+0000:Claus, yes I opened an issue to OSGI-ify ConcurrentLinkedHashMap.

Good catch on the import... it should not be in there.... clearly the Felix runs before the shade ;-)  

The fix is in the camel-core pom, right under the <camel.osgi.import>, add this:

{code}
!com.googlecode.concurrentlinkedhashmap,
{code}
    
That will fix it.
davsclaus:1313727961:2011-08-19T12:26:01.963+0000:1313727961:2011-08-19T12:26:01.963+0000:I have applied that last change in osgi imports. And ran the osgi tests. All seems fine. Even camel-cxf which uses LRUCache from camel-core. It works also in osgi with that change above."
0,CAMEL-4344,Improvement,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Christian Müller,Brendan Long,0,0,2011-08-17 16:42:25+00:00,2011-09-19 21:09:40+00:00,"In S3Endpoint.start(), we determine if a user has permission to access a bucket by sending a ListAllMyBuckets request, and then checking if the bucket is in the response. Instead, we could just query the bucket directly, like in S3Client.doesBucketExist().


We can't just call doesBucketExist() because it returns true if someone else owns the bucket.


Since we never call listBuckets() again, this would remove one required permission.","korin43:1313571292:2011-08-17T16:54:52.985+0000:1313571292:2011-08-17T16:54:52.985+0000:A patch to try to list the contents of the bucket (with a limit of 0 results) instead of listing all buckets.
muellerc:1313671184:2011-08-18T20:39:44.246+0000:1313671184:2011-08-18T20:39:44.246+0000:Committed r1159408
muellerc:1313671308:2011-08-18T20:41:48.632+0000:1313671308:2011-08-18T20:41:48.632+0000:Thanks Brendan Long for your patch. Looking for the next one... ;-)"
0,CAMEL-4343,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-17 11:12:23+00:00,2011-08-19 14:33:55+00:00,"By default CamelContext is started when using the Camel test kit. We should add some method people can override to more easily control if CamelContext should be started or not.


This works well with advice with, where people may replace endpoints, remove parts of routes, etc. So we should prefer to start CamelContext after the advice has been executed.


For example people should then be able to run the tests without have X components on the classpath, if they got replace in the advice.",davsclaus:1313735635:2011-08-19T14:33:55.678+0000:1313735635:2011-08-19T14:33:55.678+0000:See updated wiki page at advice with
0,CAMEL-4342,Improvement,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-17 10:15:43+00:00,2011-08-17 10:19:15+00:00,"The validator component should be able to validate a message which is from a java.io.File.
What is needed is a couple of type converters to ensure this.",
0,CAMEL-4341,Task,Minor,2.9.0,None,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Claus Ibsen,0,0,2011-08-17 06:26:00+00:00,2012-05-10 14:30:57+00:00,"Support for Apache Maven 2.x is deprecated in Camel 2.9 release.
In Camel 2.10 we drop Maven 2.x and you must then use Maven 3.x.
There is a pom.xml file where you can define this requirement. This file must be updated.","bvahdat:1336631443:2012-05-10T14:30:43.285+0000:1336631443:2012-05-10T14:30:43.285+0000:Again one of those favourite (trivial) tickets of mine!

However this one makes me even much more happy than ever as the Reporter has already done the work by himself.

Thank you Claus :-)

http://svn.apache.org/viewvc?view=revision&revision=1336085
http://camel.465427.n5.nabble.com/DISCUSS-Apache-Camel-2-10-release-tp5691194p5697096.html
"
0,CAMEL-4340,Improvement,Minor,None,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-16 15:44:20+00:00,2012-03-04 15:45:29+00:00,"If an endpoint is browsable, then it implements the BrowsableEndpoint interface.


It currently has this API



    List<Exchange> getExchanges();
}




We should improve the API by adding a boolean to indicate the message body can be omitted. For example if the body is not really needed. Or if loading the body could potentially consume a lot of memory etc.



    List<Exchange> getExchanges(boolean omitMessageBodyAllowed);
}




We could also go a bit further and allow an API to query depth size, return a range, return an iterator, etc.


We can keep the old API to be backwards compatible and mark it as @deprecated.",davsclaus:1330847129:2012-03-04T15:45:29.242+0000:1330847129:2012-03-04T15:45:29.242+0000:Not really needed
0,CAMEL-4339,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-16 12:28:38+00:00,2011-08-19 14:35:20+00:00,To make it easier to replace the route consumer with something else. For example a JMS with a SEDA to make it easier to unit test.,"davsclaus:1313550435:2011-08-17T11:07:15.263+0000:1313550435:2011-08-17T11:07:15.263+0000:Added replaceFrom to the AdviceWithRouteBuilder and update the wiki page.
davsclaus:1313735720:2011-08-19T14:35:20.171+0000:1313735720:2011-08-19T14:35:20.171+0000:Renamed to replaceFromWith to indicate its being replaced with a new endpoint"
0,CAMEL-4338,Improvement,Minor,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-08-16 11:31:46+00:00,2011-09-19 17:29:10+00:00,"JMX has operations to browse endpoints. For example a JMS endpoint. It may have a lot of messages, and a message may contain a lot of data.


The exposed JMX operations should have a boolean to indicate if the payload should be included or not.
This can reduce the data to fetch but also transfer over the network to the JMX console.",davsclaus:1313468745:2011-08-16T12:25:45.215+0000:1313468745:2011-08-16T12:25:45.215+0000:Added operation to specify a from/to range as well.
0,CAMEL-4337,Improvement,Major,2.7.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Reinhard Luft,0,0,2011-08-15 13:35:44+00:00,2011-09-19 20:51:30+00:00,"When generating a csv file from a model object with a DataField annotated property the DataField properties trim, length, clip should be evaluated in order to control the maximum length of a field in the csv record.


Example:


@DataField(pos = 3, trim = true, length = 20, clip = true)
private String lastName;


This should produce a field in the csv record, which length is not greater than 20 even though lastName may be longer and that has no leading or trailing spaces.


For example this would be useful when dumping the csv file into a database.


Please see the attached patch for changes in BindyCsvFactory and a unit test.",davsclaus:1313453172:2011-08-16T08:06:12.260+0000:1313453172:2011-08-16T08:06:12.260+0000:Thanks for the patch. Keep em coming. I am sure there are other improvements to Bindy that would be great.
0,CAMEL-4336,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,Willem Jiang,0,0,2011-08-15 12:23:59+00:00,2011-08-15 13:54:10+00:00,"Current camel-cxf PAYLOAD data formate can handle the namespace which is used as the element namespace, but it can not take consideration of namespace from soap envelope which is used in the attribute value likes xsi:type=""xsd:String"",
The soap envelop could be



<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
       xmlns:ns1=""http://cxf.component.camel.apache.org/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" 
       xmlns:ns2=""http://cxf.component.camel.apache.org/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
       <soap:Body>
        <ns1:echo><ns2:arg0 xsi:type=""xsd:string\"">Hello World!</ns2:arg0></ns1:echo>
        </soap:Body></soap:Envelope>
    




The element in the PAYLOAD message body should be like this



<ns1:echo xmlns:ns1=""http://cxf.component.camel.apache.org/"" xmlns:ns2=""http://cxf.component.camel.apache.org/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
  <ns2:arg0 xsi:type=""xsd:string"">Hello World!</ns2:arg0></ns1:echo>",njiang:1313387650:2011-08-15T13:54:10.783+0000:1313387650:2011-08-15T13:54:10.783+0000:Applied patch into trunk.
0,CAMEL-4305,Bug,Minor,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-08-04 09:43:34+00:00,2011-09-02 09:36:13+00:00,"See nabble
http://camel.465427.n5.nabble.com/Custom-URIResolver-for-Camel-tp4665485p4665485.html


The Spring IO resource is a bit pants, as you ask for it to give an input stream, and then it fails doing that for a plain file url.
Instead it gives you an URL connection, and you get a unknown host exception.",
0,CAMEL-4304,Task,Major,2.8.0,Future,"
None
",Resolved,Later,Future,Unassigned,Claus Ibsen,1,6,2011-08-03 17:36:57+00:00,2015-07-09 11:48:12+00:00,"We should check all the components, and ensure there is at least 1 Java and 1 XML DSL example. It really help new users, and people who get started with the component, to better understand how to use it in a Camel route.","davsclaus:1312364235:2011-08-03T17:37:15.021+0000:1312364235:2011-08-03T17:37:15.021+0000:This is something everyone can help with.
gliesian:1312370827:2011-08-03T19:27:07.665+0000:1312370827:2011-08-03T19:27:07.665+0000:Just FYI...

Discussion - example projects coverage of key components 
http://camel.465427.n5.nabble.com/Discussion-example-projects-coverage-of-key-components-td4628545.html
jbonofre:1312861906:2011-08-09T11:51:46.664+0000:1312861906:2011-08-09T11:51:46.664+0000:Does it mean that we add something like:
camel-jms
camel-http
camel-atom
etc
in the examples directory (http://svn.apache.org/repos/asf/camel/trunk/examples/) ?
davsclaus:1312862290:2011-08-09T11:58:10.417+0000:1312862290:2011-08-09T11:58:10.417+0000:No it means on each component we have listed
http://camel.apache.org/components

We should have a java and xml example in the wiki pages. To help end users better understand how to use the given component.

charifm:1366693584:2013-04-23T13:06:24.980+0000:1366693584:2013-04-23T13:06:24.980+0000:there is a priority to respect?

I'll try to make an example AMQP

muellerc:1366757006:2013-04-24T06:43:26.849+0000:1366757006:2013-04-24T06:43:26.849+0000:There is nor order. Feel free to work on the examples you want. We like contributions!
godbolerr@gmail.com:1399925708:2014-05-13T04:15:08.505+0000:1399925708:2014-05-13T04:15:08.505+0000:I have created example for the mail component. 

The source code is available at the following URL:

https://github.com/godbolerr/camel-example-mail

ninadmnaik:1408261495:2014-08-17T15:44:55.278+0000:1408261495:2014-08-17T15:44:55.278+0000:I am working on an example for the Splunk Component. 
ninadmnaik:1408285789:2014-08-17T22:29:49.248+0000:1408285789:2014-08-17T22:29:49.248+0000:I have attached the source code the camel-splunk example.
davsclaus:1408311055:2014-08-18T05:30:55.040+0000:1408311055:2014-08-18T05:30:55.040+0000:[~ninadmnaik] thanks for the example.

mfentanes:1413366846:2014-10-15T17:54:06.828+0000:1413366865:2014-10-15T17:54:25.055+0000:Is there a list of the missing examples or a list of the components that already have an example?I will  work on the ServletListener and Solr examples.
"
0,CAMEL-4303,Improvement,Major,2.8.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Willem Jiang,Jonathan Anstey,1,2,2011-08-03 11:08:53+00:00,2012-08-21 19:20:34+00:00,Right now it is hardcoded to serverEngine.setNeedClientAuth(true),"sriramp_here:1343439422:2012-07-28T09:37:02.531+0000:1343439422:2012-07-28T09:37:02.531+0000:I am working on it.
sriramp_here:1343440445:2012-07-28T09:54:05.465+0000:1343440445:2012-07-28T09:54:05.465+0000:Fixed and attached the patches.
njiang:1344383506:2012-08-08T07:51:46.253+0000:1344383575:2012-08-08T07:52:55.175+0000:@Sriram

Thanks for you contribution. It could be better to diff to create patch from the component instead of one per java file.

I just checked the code , there is no hard code to set the  serverEngine.setNeedClientAuth(true).
And the serverEngine default value is false, So I changed the default value of the NeedClientAuth configure to be false before applying the patch into trunk.

Willem
njiang:1345170937:2012-08-17T10:35:37.154+0000:1345170937:2012-08-17T10:35:37.154+0000:Applied patch with thanks to Sriram, I also update the wiki page for the new added option."
0,CAMEL-4302,Improvement,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Jean-Baptiste Onofré,0,0,2011-08-03 09:44:18+00:00,2015-07-11 22:00:00+00:00,"If you define a RMI endpoint like:


<from uri=""rmi://localhost:1299/net/nanthrax/test?remoteInterfaces=my.RemoteInterface""/>


If a RMI registry is not already bound on port 1299, the RMI endpoint can't be registered:


Caused by: java.rmi.ConnectException: Connection refused to host: localhost; nested exception is:
        java.net.ConnectException: Connection refused
        at sun.rmi.transport.tcp.TCPEndpoint.newSocket(TCPEndpoint.java:601)
        at sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:198)
        at sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:184)
        at sun.rmi.server.UnicastRef.newCall(UnicastRef.java:322)
        at sun.rmi.registry.RegistryImpl_Stub.bind(Unknown Source)


The RMI endpoint should be able to create a RMI registry on the given port if it doesn't exist.",
0,CAMEL-4301,Improvement,Major,None,,"
None
",Resolved,Not A Problem,None,Unassigned,Jean-Baptiste Onofré,0,0,2011-08-03 09:25:36+00:00,2011-08-03 09:32:56+00:00,"If you define a route looking like:


    <cxf:cxfEndpoint id=""wsBean""
                     serviceClass=""net.nanthrax.test.camel.cxf.WSBean""
                     address=""http://0.0.0.0:9090/test""/>


    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""cxf:bean:wsBean""/>
            <to uri=""direct:bean""/>
        </route>
        <route>
            <from uri=""direct:bean""/>
            <to uri=""serviceBean""/>
        </route>
    </camelContext>


the methods of the CXF endpoint wsBean are just facade (the route doesn't use the implementation of the wsBean method, and map the method definition to the serviceBean target bean).


It could be confusing for the users: they have to define methods body but it's not used 


It could be fine to use directly an interface or an abstract class in serviceClass.","jbonofre:1312335024:2011-08-03T09:30:24.414+0000:1312335024:2011-08-03T09:30:24.414+0000:I just tried and it's already the case. serviceClass could contain an interface with the @WebService annotation.
I check the wiki page of camel-cxf and update it if required."
0,CAMEL-4300,Improvement,Minor,2.8.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-03 09:23:02+00:00,2012-03-12 10:07:56+00:00,"Currently you need to provide headers with an operation and key. Instead it should be simpler to do in the uri directly


.to(""cache:myCache?operation=update&key=foo"");


But if there is any headers, then they should take precedence. This is the normal convention with other Camel components. That headers takes precedence over uri configuration.","nannou9:1313625539:2011-08-18T07:58:59.887+0000:1313625539:2011-08-18T07:58:59.887+0000:Hi Claus!
I will give it a try. I will start developing in next two weeks. Is that ok?
davsclaus:1313625687:2011-08-18T08:01:27.370+0000:1313625687:2011-08-18T08:01:27.370+0000:Piotr, that is great.
iocanel:1316479408:2011-09-20T08:43:28.390+0000:1316479408:2011-09-20T08:43:28.390+0000:Piotr, what is the status about it? Need any help with it?
nannou9:1316486692:2011-09-20T10:44:52.034+0000:1316486692:2011-09-20T10:44:52.034+0000:Sorry for leaving this improvement w/o answer.
Unfortunately I did not have a chance to start programming yet. This is because I became a happy father much earlier than I thought (few weeks) and because of that I am doing much repairs in my flat.

This is also the very first moment when i have turned on my PC since last few weeks.
For now I am not sure when I will be able to start programming (maybe at the beginning of October).

Please don't get me wrong- I do really want to make this improvement as since my last changes I feel a kind of ""owner"" of cache component. But I'm not free enough to do it now.
 
Hope you don't mind.
nannou9:1317779112:2011-10-05T09:45:12.819+0000:1317779112:2011-10-05T09:45:12.819+0000:Does anybody know, when camel 2.9 is going to be released?
Is there anybody who is working with this improvement?
I'm asking because it possible that I will be able to make it next week.

If i will not receive any answer until Friday, i will probably start coding at Friday night.
davsclaus:1317783689:2011-10-05T11:01:29.737+0000:1317783689:2011-10-05T11:01:29.737+0000:Nobody is working on this. Looking forward to your help.
nannou9:1317994813:2011-10-07T21:40:13.651+0000:1317994839:2011-10-07T21:40:39.941+0000:I am thinking about usability of this improvement.
In your example i can see that the key param is static. It makes it quite unusable.

So i have decided to use simple language which will make it much more powerfull.

So basic example looks like this: to(""cache://TestCache1?operation=add&key=${body.id}"").
Nice isn't it?

As i know the url parameters incjection functionality doesn't support ""dynamic"" values (can inject only static string). So the simple language functionality can be added with very small additional code with BaseSimpleParser.

Please tell me what do you think about this Claus? Is that ok to use a simple language in URLS? Or maybe it will break some compatybility with spring/blueprint or any other thing?

Waiting for your answer. 

nannou9:1318045360:2011-10-08T11:42:40.787+0000:1318045360:2011-10-08T11:42:40.787+0000:Done!

Please take a look. As i said i have added the Simple language goodnes support for operation and key parameters.

Have a FUN :)
davsclaus:1320621741:2011-11-07T07:22:21.256+0000:1320621741:2011-11-07T07:22:21.256+0000:The other components dont use simple language in the key name. I think we should make it consistent. And I cannot see a use case where you want this.
nannou9:1320664114:2011-11-07T19:08:34.798+0000:1320664114:2011-11-07T19:08:34.798+0000:Let`s talk about usability.
For better understanding please take a look at below example:

RouteBuilder builder = new RouteBuilder() { public void configure() { from(""direct:start"") .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)) .setHeader(CacheConstants.CACHE_KEY, constant(""Ralph_Waldo_Emerson"")) .to(""cache://TestCache1"") } };

In this example the cache key is static. It means that every message will be added to the cache with same key. In other words there will always be only one thing in the cache- the last added message. 

Believe me you do not want this.
In my opinion this situation will cause any cache absolutely unusable.

I am using this component for some time and every each time i am using it altogether with simple language


nannou9:1320664696:2011-11-07T19:18:16.578+0000:1320664696:2011-11-07T19:18:16.578+0000:sorry for multiple comments i am using my tablet.

So the usual usage of camel cache component is:
RouteBuilder builder = new RouteBuilder() { public void configure() { from(""direct:start"") .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD)) .setHeader(CacheConstants.CACHE_KEY, simple(""body.id"")) .to(""cache://TestCache1"") } };

This is equal to: to(""cache://TestCache1? operation=add&key=${body.id}"").

I just cannot imagine usability of this component w/o simple language or any other, as the CA he key must be dynamic and is always in body or set as a header of message.

Please let me know if i made you to change your mind.

Greetings,
Piotr Klimczak
bibryam:1323145254:2011-12-06T12:20:54.079+0000:1323145254:2011-12-06T12:20:54.079+0000:Hi Piotr,

a late congrats on becoming father :-)

I agree with you that using the same key for the cache doesn't make much sense, but consistency among all these components is also important. By specifying statically the operation and the key in the URI you actually specify only the default values, and you can always override them using the message header. For example in the URI you could specify only the operation, and use message header for the key only if it is needed.
nannou9:1323171270:2011-12-06T19:34:30.262+0000:1323171270:2011-12-06T19:34:30.262+0000:Sorry for late answer.
I do understad both of you. So few weeks ago i have decided to abandon this improvement havng another idea on my mind.
So as we all are right and we should take care about consistency and functionality- both together.
The solution to meet our needs should be something like:
CacheDefinition c = From(""seda:in"").cache( CacheConstants.CACHE_OPERATION_ADD, simple(""in.body""));
This proposition takes careabout consistency.

If you think it is a better idea, then i will prepre full proposition of imrovement.
For now as cache component is bit difficult to use, we should make it much easier to people. In my opinion my lst proposition is fulfilling all needs.

WDYT?
nannou9:1323172534:2011-12-06T19:55:34.051+0000:1323172534:2011-12-06T19:55:34.051+0000:please note that i do not like the setHeader way, neither the when(header()) way.
It makes the code muchmore complicated than it should. Such simple things like checking was the cache found or not should be done w/o heders.
Right now i am not sure how, but in my opinion using headers should be an option instead of beingthe only way.
I am considering something like
.cacheGet(simple(""in.body""), true).
whenNotFound().to(""seda:prepareValue"").end().to(""seda:destination"");

The second parameter of cacheGet is a flag where true means that the cache will be automatically added when the ""whenNotFound"" block is finished, bu sure is it possible right now. It is just an idea. 
But more/less this is how camel-cache of my dreams looks like.

Greetings
Piotr 
nannou9:1331364404:2012-03-10T15:26:44.723+0000:1331364404:2012-03-10T15:26:44.723+0000:W/O simple language
davsclaus:1331518076:2012-03-12T10:07:56.425+0000:1331518076:2012-03-12T10:07:56.425+0000:Thanks for the patch. I updated the cache wiki page with the 2 new endpoint options."
0,CAMEL-4299,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Jonas Bengtsson,0,0,2011-08-03 09:05:22+00:00,2011-08-09 14:29:06+00:00,"Camel fails to auto create the cxfbean-component. I have tried both with blueprint and Spring-DM. For Spring-DM i get the following error:
Cannot auto create component: cxfbean


My Spring XML-file:



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<camel:camelContext>
		<camel:route>
			<camel:from uri=""jetty:http://0.0.0.0:8080?matchOnUriPrefix=true"" />
			<camel:to uri=""cxfbean:myBean"" />
		</camel:route>
	</camel:camelContext>

	<bean id=""myBean"" class=""mypackage.MyJaxRsAnnotatedBean"" />

</beans>




I have both the camel-cxf and camel-cxf-transport bundles installed and it seems that both of them  have a ComponentResolver for cxfbean published in the OSGI-registry. I can get my bundle to start if I create the cxfbean-component explicity in my Spring- or blueprint-XML file:



<bean id=""cxfbean"" class=""org.apache.camel.component.cxf.cxfbean.CxfBeanComponent"" />




But then I will get a NullPointerException when I visit a URL handled by my JAXRS-annotated bean:
java.lang.NullPointerException
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:96)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanDestination.process(CxfBeanDestination.java:83)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:286)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:305)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:102)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.component.jetty.CamelContinuationServlet.service(CamelContinuationServlet.java:109)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:538)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1352)
	at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:97)
	at org.apache.camel.component.jetty.CamelMultipartFilter.doFilter(CamelMultipartFilter.java:41)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1323)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:476)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:937)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:406)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:871)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)
	at org.eclipse.jetty.server.Server.handle(Server.java:346)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:589)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:1048)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:601)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:214)
	at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:411)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:535)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:529)
	at java.lang.Thread.run(Thread.java:680)","njiang:1312871327:2011-08-09T14:28:47.855+0000:1312871327:2011-08-09T14:28:47.855+0000:The NPE is caused by the cxf bus can not be loaded rightly without setting a right TCCL.
I also fixed the issue that camel-cxf and camel-cxf-transport both of them have a ComponentResolver for cxfbean published in the OSGI-registry.

The patched are committed into camel trunk and camel 2.8.x branch.
Please checkout the latest camel 2.9-SNAPSHOT for verification.
"
0,CAMEL-4298,Task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-03 08:37:47+00:00,2011-08-12 17:08:34+00:00,"The old ExecutorServiceStrategy was refacted into ExecutorServiceManager. But it was removed. This was a mistake as it breaks backwards compatibility, and people are not given a reasonable time to adjust.


So we should add back the ExecutorServiceStrategy and have it marked as @deprecated. It can then just under the hood, use the ExecutorServiceManager.


Then in a future Camel release we can removed the @deprecated ExecutorServiceStrategy (for example Camel 3.0, or in eg 1 year from now)","cschneider:1312335610:2011-08-03T09:40:10.252+0000:1312335610:2011-08-03T09:40:10.252+0000:This was intentional as I think the change is not very difficult to follow and mainly hits component developers. I think we should remove the Strategy now or in the next minor release.
davsclaus:1312341360:2011-08-03T11:16:00.272+0000:1312341360:2011-08-03T11:16:00.272+0000:We should not pull the rug under Camel end users. We should allow them amble time to migrate from @deprecated APIs to its replacement.

The ExecutorServiceStrategy/ExecutorServiceManagement is in fact used also by Camel components such as:
- camel-stream
- camel-routebox
- camel-netty
- camel-mina
- camel-kestrel
- camel-jms
- camel-hdfs
- camel-hazelcast

Its not so uncommon to need a background task to run, or a scheduled task to run every X etc. For that people would have to use the ExecutorService.

By using the Camel ExecutorServiceStrategy/Management, we tell the users, that they get as a bonus, the thread pool enlisted/management in JMX, they get thread names that are human readable, and Camel ensures the thread pool lifecycle as well etc. 

So if we pull the rug, then people will discourage using the API from Camel and go back and use the Executors API from the JDK. This would be a shame, as then end users cannot have human readable thread names, and all their threads pools listed in JMX etc.

Besides the old API was designed to resemble the API from the JDK, such as the Executors and ThreadPoolExecutor.
http://download.oracle.com/javase/6/docs/api/java/util/concurrent/Executors.html
http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ThreadPoolExecutor.html

With the new API that resemble is gone, and end users know need to understand the ThreadPoolBuilder. So the API changes may in fact not be that well thought.

I frankly like when you can do a one liner (without any extra Camel imports)
{code}
 this.executor = getCamelContext().getExecutorServiceStrategy().newSingleThreadExecutor(this, ""MyTask"");
{code}

That is no longer possible with the new API as you must use the ThreadPoolBuilder and this need to add that as an import. 



Likewise one of the recent developed 3rd party Camel component uses the ExecutorServiceStrategy
http://code.google.com/p/oracle-coherence-camel-component/
And I am sure there are more components out there using that.

I suggest to put back the ExecutorServiceStrategy interface. For its implementation you just delegate to the new ExecutorServiceManager. That would in fact also be a testimony that the new API covers all the old uses cases.

davsclaus:1312972080:2011-08-10T18:28:00.820+0000:1312972080:2011-08-10T18:28:00.820+0000:There is now a problem in camel-jms as it used the ExecutorServiceStrategy to create a cached thread pool. This is no longer possible. I added a TODO in the camel-jms module.

But we may want to consider these API changes again. IMHO its better to have the API resemble what people already know from the JDK API. Alternative we may have some builder method on thread pool profile, so you can ask it to create a cached thread pool.
davsclaus:1313048836:2011-08-11T15:47:16.156+0000:1313048836:2011-08-11T15:47:16.156+0000:CAMEL-4244 introduced a few other issues so I am going to bridge back parts of the old API. As well to have better API documentation as the current dont have, so end user would not understand whats the difference between among others the following methods etc.
{code}
    ExecutorService getDefaultExecutorService(String ref, Object source);

    ExecutorService getExecutorService(ThreadPoolProfile profile, Object source);
    
    ExecutorService createExecutorService(ThreadPoolProfile profile, Object source);
{code}
davsclaus:1313134266:2011-08-12T15:31:06.145+0000:1313134266:2011-08-12T15:31:06.145+0000:See post on dev forum
http://camel.465427.n5.nabble.com/HEADS-UP-Adjustments-to-ExecutorServiceManager-on-trunk-tp4693698p4693698.html
davsclaus:1313140114:2011-08-12T17:08:34.740+0000:1313140114:2011-08-12T17:08:34.740+0000:Added back the ExecutorServiceStrategy interface, and a delegate implementation that uses the new ExecutorServiceManager. Added the old unit test to ensure the strategy still works as expected.

Updated the wiki documentation as well."
0,CAMEL-4297,Improvement,Major,2.8.0,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-08-02 17:37:51+00:00,2011-09-19 20:01:38+00:00,"In Spring 3 a org.springframework.util.ErrorHandler can be used to react to unhandled exceptions (unlike JMSExceptions handled by an javax.jms.ExceptionListener


See http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/jms/listener/AbstractMessageListenerContainer.html#setErrorHandler(org.springframework.util.ErrorHandler)


I'm going to add an option for this to camel-jms shortly.","janstey:1312280057:2011-08-02T18:14:17.678+0000:1312280057:2011-08-02T18:14:17.678+0000:janstey@duffman:/x1/asf/camel/trunk/components/camel-jms$ svn ci -m ""CAMEL-4297 - Add errorHandler option for DMLC to camel-jms""
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/reply/PersistentQueueReplyManager.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/reply/TemporaryQueueReplyManager.java
Sending        camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java
Transmitting file data ......
Committed revision 1153230."
0,CAMEL-4296,Bug,Minor,2.8.0,2.9.0,"
None
",Resolved,Won't Fix,2.9.0,Claus Ibsen,Jakub Korab,0,0,2011-08-02 15:46:41+00:00,2011-08-04 10:03:16+00:00,"This may be related to CAMEL-4184. 


I have a RouteBuilder doing some discovery testing around load balancer behaviour. There are two RouteBuilders applied within tests using adviceWith (source code attached)
1. ThrowsExceptionFromA intercepts a call to an endpoint and throws an exception
2. ExceptionHandler applies an onException for that particular Exception type, and tweaks the body.


When ThrowsExceptionFromA is applied before ExceptionHandler using adviceWith, the exception is not handled.
When ExceptionHandler is applied before ThrowsExceptionFromA using adviceWith, it is.","jkorab:1312271320:2011-08-02T15:48:40.989+0000:1312271320:2011-08-02T15:48:40.989+0000:JUnit test demonstrating the behaviour.
davsclaus:1312371874:2011-08-03T19:44:34.170+0000:1312371874:2011-08-03T19:44:34.170+0000:You should put all the stuff into the same adviceWith and only call it once.
davsclaus:1312423396:2011-08-04T10:03:16.439+0000:1312423396:2011-08-04T10:03:16.439+0000:I have added warning to wiki page, and notes in javadoc about the fact the adviceWith cannot work when advicing multiple times on the same route.

I added a working unit test based on the attached file, eg only advice one time.

Camel 3.0 should be able to support this when the routing engine becomes more dynamic"
0,CAMEL-4295,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-08-02 14:35:23+00:00,2011-08-05 09:00:12+00:00,"Spring-ws bundle version is 2.0.2 but camel-spring-ws bundle imports spring package with the rang of [3,4).
So camel-spring-ws feature can not be installed rightly.","njiang:1312267445:2011-08-02T14:44:05.376+0000:1312267445:2011-08-02T14:44:05.376+0000:Applied patch into trunk.
njiang:1312506012:2011-08-05T09:00:12.586+0000:1312506012:2011-08-05T09:00:12.586+0000:Merged the patch into 2.8.x branch."
0,CAMEL-4294,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,herriot one,1,0,2011-08-02 13:19:30+00:00,2011-08-15 23:10:33+00:00,"The dynamically created WSDL for a cxf:cxfEndpoint declaration is malformed when using a complex type as parameter.


Please see as well the discussion here.


http://camel.465427.n5.nabble.com/Camel-CXF-Endpoint-creating-incomplete-WSDL-td4642433.html


Use attached test project to run mvn test with version 2.8.0 and 2.7.2, this should show the error.","njiang:1312417574:2011-08-04T08:26:14.296+0000:1312417574:2011-08-04T08:26:14.296+0000:Applied patch into the camel trunk.
toddjr:1312449498:2011-08-04T17:18:18.448+0000:1312449498:2011-08-04T17:18:18.448+0000:Hello,

  We are trying to upgrade our application to Camel 2.8.0/CXF 2.4.1 and this bug is also biting us.  Thanks for the quick turn-around on resolution first and foremost, but is there anyway to back port the fix to Camel 2.8 and CXF 2.4.1?  If not, what is the timeline for the release of Camel 2.9?

Thanks,
John
dkulp:1312449808:2011-08-04T17:23:28.203+0000:1312449808:2011-08-04T17:23:28.203+0000:
CXF 2.4.2 will likely be released in a couple weeks.   Since it contains a bunch of fixes for things that Camel users have been encountering, I would expect a Camel 2.8.1 to be released shortly after that to update to 2.4.2.

toddjr:1312452739:2011-08-04T18:12:19.557+0000:1312452739:2011-08-04T18:12:19.557+0000:I see a branch for CXF 2.4.x fixes and the fix was applied to trunk as well as the branch for CXF.  For Camel, I only see the fix applied to the trunk.  Hopefully there will be a Camel 2.8.1 release or 2.9 release soon.

Thanks,
John
muellerc:1312467888:2011-08-04T22:24:48.998+0000:1312467888:2011-08-04T22:24:48.998+0000:Hello John!
We just started to work on Camel 2.9. It will take approximately 3 month to see Camel 2.9.
But starting with Camel 2.7 we provide again patch releases. If this patch can be applied to the 2.8 branch, I'm sure you will see a 2.8.1 release much earlier. But at present I don't have an idea when.
Best,
Christian
njiang:1312486531:2011-08-05T03:35:31.287+0000:1312486531:2011-08-05T03:35:31.287+0000:Hi John,

The patches of this issue are fixed from camel and cxf separately. You don't need these two patches at the same time.
If you are using camel 2.8.0, you just need to upgrade the CXF version to 2.4.2.

Willem
njiang:1312488075:2011-08-05T04:01:15.183+0000:1312488075:2011-08-05T04:01:15.183+0000:Also merged the patch into 2.8.x branch.
toddjr:1312536823:2011-08-05T17:33:43.613+0000:1312536823:2011-08-05T17:33:43.613+0000:Excellent.

Thanks much,
John"
0,CAMEL-4293,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Vincent MATHON,0,0,2011-08-02 09:05:57+00:00,2011-09-02 09:39:50+00:00,"Since 2.8.0 Exchange.BEAN_METHOD_NAME is always used instead of @Bean method name (see BeanInfo.createInvocation(Object pojo, Exchange exchange)). As a consequence, the wrong method is choosen when I use a beanref invokation on a method that uses @Bean 
parameter binding.


I built a simple test case as a zip file containing an Eclipse Helios maven project (see attachment). The test fails with camel 2.8.0 and succeeds with 2.7.3 and earlier (at least until 2.6.0).


regards 
Vincent MATHON","davsclaus:1312364654:2011-08-03T17:44:14.152+0000:1312364654:2011-08-03T17:44:14.152+0000:The *header* always takes precedence. This is by design, and older Camel releases had this as a bug.
davsclaus:1312364858:2011-08-03T17:47:38.117+0000:1312364858:2011-08-03T17:47:38.117+0000:I can see your issue as you use @Bean in the method signature, and thus it uses the method name that was used to invoke itself. That of course is not expected. 

However if you do route to a bean, and provide a header with a method name, then that header is being used.
davsclaus:1312367901:2011-08-03T18:38:21.819+0000:1312367901:2011-08-03T18:38:21.819+0000:Thanks Vincent. I have reproduced your issue. The problem is that you do a bean invocation inside another bean invocation (eg since you use @Bean on the bean you invoke). And thus the @Bean sees the header which is should not affect it.
davsclaus:1312371312:2011-08-03T19:35:12.111+0000:1312371312:2011-08-03T19:35:12.111+0000:Thanks for reporting and providing a sample to demonstrate the issue."
0,CAMEL-4292,Task,Trivial,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-02 08:38:16+00:00,2011-08-03 08:04:02+00:00,"On the camel-jms page


The 2 links to Nabble for WebSphereMQ and JNDI lookup is broken.
We should remove those 2 sections.


Created this ticket as Apache cwiki is currently down.",
0,CAMEL-4291,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-02 07:29:05+00:00,2011-08-02 10:50:11+00:00,No Desc,davsclaus:1312241398:2011-08-02T07:29:58.323+0000:1312241398:2011-08-02T07:29:58.323+0000:We should create a Camel MBeanInfoAssembler that uses the Camel JMX annotations to discover which attributes and operations the given object instance should have in JMX.
0,CAMEL-4290,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.8.2, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-08-01 17:14:36+00:00,2011-09-19 17:18:01+00:00,"From http://bsnyderblog.blogspot.com/2010/05/tuning-jms-message-consumption-in.html


The idleConsumerLimit property is used to specify the the maximum number of consumers that are allowed to be idle at a given time. The use of this property was recently clarified a bit in the Spring 3.x trunk. Increasing this limit causes invokers to be created more aggressively. This can be useful to ramp up the number of consumers faster.","janstey:1312191574:2011-08-01T17:39:34.145+0000:1312191574:2011-08-01T17:39:34.145+0000:janstey@duffman:/x1/asf/camel/trunk/components/camel-jms$ svn ci -m ""CAMEL-4290 - Add idleConsumerLimit option for DMLC to camel-jms""
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java
Sending        camel-jms/src/main/java/org/apache/camel/component/jms/JmsEndpoint.java
Sending        camel-jms/src/test/java/org/apache/camel/component/jms/JmsComponentTest.java
Sending        camel-jms/src/test/java/org/apache/camel/component/jms/JmsEndpointConfigurationTest.java
Transmitting file data .....
Committed revision 1152868.
"
0,CAMEL-4289,Bug,Major,2.5.0,2.9.0,"
None
",Resolved,Invalid,2.9.0,Claus Ibsen,Viktor Schmidt,0,0,2011-08-01 14:35:27+00:00,2011-08-16 08:17:59+00:00,"We are polling files from a network directory via camel and store them in a database. Because of performance issues we use 2 server nodes which reading from one network directory. So the problem is that we have multiple entries in our database, but only with multiple server nodes. With one node the number of entries is correct. Our testcase includes 1000 input xml's which should result in 1000 database entries. The error quote is approximately 1 percent. We think it's a concurrent lock issue by camel. We could not find topics in your further release notes, which can fix our issue.


Kind regards


Viktor Schmidt","davsclaus:1312185737:2011-08-01T16:02:17.312+0000:1312185737:2011-08-01T16:02:17.312+0000:Vikor, please use the @user mailing list first to get help with your issue.

Creating a JIRA ticket should usually be done when an issue is more certain to exists.
Since you use an older release of Camel, then try upgrading to latest release also.
"
0,CAMEL-4288,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-08-01 13:46:01+00:00,2011-08-01 14:13:33+00:00,"The log component will by default not show files. But we should allow people to configure this. Just like we have showStreams, we should add a showFiles option.",
0,CAMEL-4287,Bug,Major,2.8.0,None,"
None
",Resolved,Fixed,"2.8.1, 2.9.0",Jonathan Anstey,Jonathan Anstey,0,0,2011-08-01 13:12:22+00:00,2011-09-02 09:42:44+00:00,"If you build camel-aws in Maven's offline mode (-o), you may get the following error:


No versions available for org.codehaus.jackson:jackson-core-asl:jar:[1.4,) within specified range


This will occur even if you have the libs locally. This is happening because Maven cannot download the remote metadata to get a list of versions for jackson-core-asl. Specifying a hard version for this (not a range) gets around the issue. Committing a fix shortly.","janstey:1312175600:2011-08-01T13:13:20.403+0000:1312175600:2011-08-01T13:13:20.403+0000:janstey@duffman:/x1/asf/camel/trunk/components/camel-aws$ svn ci -m ""CAMEL-4287 - get AWS component building offline""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1152755.
"
0,CAMEL-4286,Improvement,Major,"2.7.0, 2.8.0","2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-08-01 10:51:40+00:00,2011-09-19 16:44:44+00:00,"There are lots of other camel component like camel-jaxb, camel-atom who want to use the ApplicationContextClassLoader to load the context files. BlueprintCameContextFactoryBean should setup the ApplicationContextClassLoader for the CamelContext.",njiang:1312167301:2011-08-01T10:55:01.979+0000:1312167301:2011-08-01T10:55:01.979+0000:Applied patch into trunk.
0,CAMEL-4285,Improvement,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Jay mann,0,1,2011-07-30 16:09:04+00:00,2017-05-16 14:02:45+00:00,"When using an xquery endpoint that uses an xquery file like this:


<camel:to uri=""xquery:com/test/xquery/manual.xq""/> 


If the manual.xq file contains imported modules such as:


import module namespace utils = ""myutils"" at ""classpath:/com/test/utils.xq""; 


they will not resolve relative to the classpath.
This is a big problem when using OSGI or any other situation where your Xquery files are inside your package/jar.


I've created a patch so that it will resolve the imports in the same way that the component resolves resources using resolveMandatoryResource.


I've tested the patch successfully using ""classpath:/"", ""file://"", and ""http://"" uri formats.","davsclaus:1312084558:2011-07-31T11:55:58.957+0000:1312084558:2011-07-31T11:55:58.957+0000:Thanks for the patch.
Jeremy Gosling:1494914565:2017-05-16T14:02:45.847+0000:1494914565:2017-05-16T14:02:45.847+0000:This appears to have been regressed since 2.15.0.  See [CAMEL-11286]"
0,CAMEL-4284,Bug,Major,2.8.0,2.9.0,"
None
",Closed,Duplicate,2.9.0,Claus Ibsen,Sascha Szott,0,0,2011-07-29 20:19:40+00:00,2011-07-31 11:34:02+00:00,"The documentation in the 2.8.0 binary distribution tarballs (both apache-camel-2.8.0.tar.gz and apache-camel-2.8.0.zip) is missing. The documentation file in doc/manual/camel-manual-2.8.0.html contains the following error message:



<html>
<body>Download of http://camel.apache.org/book-in-one-page.html failed</body>","davsclaus:1312082272:2011-07-31T11:17:52.319+0000:1312082272:2011-07-31T11:17:52.319+0000:Duplicate of CAMEL-3774
szott:1312083169:2011-07-31T11:32:49.119+0000:1312083169:2011-07-31T11:32:49.119+0000:Indeed!"
0,CAMEL-4283,Bug,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-07-29 14:43:39+00:00,2011-09-19 18:09:27+00:00,MessageHelper.dumpAsXml has a problem if the message body is already xml.,
0,CAMEL-4282,Improvement,Minor,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-29 12:09:09+00:00,2011-07-29 13:23:02+00:00,"The camel-activemq archetype setup an embedded AMQ broker which has JMX disabled.
We should check all our examples and archetypes that JMX is enabled for AMQ when its embedded.
As it may confuse end users that they can see Camel in JMX, but not AMQ.",
0,CAMEL-4281,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,James Strachan,0,0,2011-07-29 09:55:45+00:00,2011-08-16 16:01:03+00:00,then via JMX or code folks can browse the available messages,davsclaus:1313481663:2011-08-16T16:01:03.215+0000:1313481663:2011-08-16T16:01:03.215+0000:I have implemented this for file/ftp based endpoints.
0,CAMEL-4280,Improvement,Minor,"2.7.3, 2.8.0","2.8.2, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.2, 2.9.1, 2.10.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-07-29 06:45:47+00:00,2012-02-10 03:27:56+00:00,The current OSGi version used by Camel (as defined in the parent/pom.xml) is 4.1.0. This version is out of date and Karaf uses OSGi 4.2.0.,"jbonofre:1311901321:2011-07-29T09:02:01.551+0000:1311901321:2011-07-29T09:02:01.551+0000:The OSGi 4.2.0 requires some update on camel-blueprint component as the Blueprint Container changed. I update that only on trunk.
jbonofre:1311910758:2011-07-29T11:39:18.336+0000:1311910758:2011-07-29T11:39:18.336+0000:Fixed on trunk: revision 1152174."
0,CAMEL-4279,Improvement,Major,2.8.0,2.10.0,"

security

",Resolved,Fixed,2.10.0,David Valeri,Claus Ibsen,0,1,2011-07-29 06:09:07+00:00,2012-06-24 13:14:05+00:00,"David do you mind checking if its possible to add support for the new TLS you did, for spring-ws component as well?


See nabble
http://camel.465427.n5.nabble.com/need-some-advice-on-cxf-or-spring-ws-tp4643001p4643001.html","davaleri:1312121804:2011-07-31T22:16:44.964+0000:1312121804:2011-07-31T22:16:44.964+0000:Added reply to mailing list thread about initial thoughts.  I will provide some additional research and then document feasible approaches in the event that direct support is not possible.
davsclaus:1320621784:2011-11-07T07:23:04.659+0000:1320621784:2011-11-07T07:23:04.659+0000:David did you implement this already? We are closing down on 2.9, in a couple of weeks. So if you don't have the time to work on this. Then please move it to 2.10.
bvahdat:1334732209:2012-04-18T14:56:49.009+0000:1334732209:2012-04-18T14:56:49.009+0000:Following a feedback of mine regarding the provided patch for CAMEL-4998 which went live together with the patch provided by this ticket:

- There's *now* a regression failure by ProducerRemoteRouteTimeOutTest.callStockQuoteWebserviceJDKWith5000MillSecondsTimeout() which
doesn't pass anymore. On CI-Server of course we don't see this as we've got @Ignore annotation on those tests. Reason of the failure is that now we do no more rely on instanceof but reference-equality by HttpUrlConnectionMessageSender.class, so following is what's going on: If you run the tests inside your IDE or directly through maven then as the test callStockQuoteWebserviceJDKWith3MillSecondsTimeout gets invoked beforehand it sets an instance of AbstractHttpWebServiceMessageSenderDecorator as WebServiceMessageSender with the timeout of 3 milliseconds. Later on it's callStockQuoteWebserviceJDKWith5000MillSecondsTimeout turn to be run and as *none* of the conditions below holds the AbstractHttpWebServiceMessageSenderDecorator from previous test still remains inside WebServiceTemplate as the single WebServiceMessageSender:

{code}
if (messageSender instanceof CommonsHttpMessageSender)
{code}

{code}
 else if (messageSender.getClass().equals(HttpUrlConnectionMessageSender.class))
{code}

So actually we asked for a timeout of 5 seconds but in fact there was a 3 milliseconds timeout getting into the account. Which causes the test failure. Another proof of this explanation is (in case you don't want to debug into the code) if you only run the test callStockQuoteWebserviceJDKWith5000MillSecondsTimeout *alone* then it will pass!

- Resetting the timeout back to 0 is currently missing if we *once* set the timeout to a value > 0 then the timeout is spiked to that value *forever*. Consider the following trivial case where we use *the same* WebServiceTemplate for 2 different webservice calls inside a route:

{code}
from(...)
  ...
   ...
    to(""spring-ws:http://xyz?timeout=3000&webServiceTemplate=#myWebServiceTemplate"")
     ...
      ...
       to(""spring-ws:http://abc?webServiceTemplate=#myWebServiceTemplate"")
  ...
{code}

With the current logic in place the second call to ""http://abc"" get's also invoked with a read timeout of 3 seconds as well which is completely wrong! The reason for this is similar to the previous point I did already mention above, however the difference here is that now in contrast to the regression case above where the second call asked to 5000 milliseconds here we do *not* ask for a timeout at all, but still we get one, in this case 3 seconds!

Also currently we don't own a test case for this where we use the same WebServiceTemplate object once with and once without an explicit timeout. To remedy this behaviour the logic should set the timeout *explicitly* to 0 if no timeout option has been given. That's the logic should *clear out* any possibly set timeout value *done previously*.

Some tiny cosmetic points:

- SSLContextParametersLocalRouteTest-context.xml runs a sun-jdk specific HttpsServer:

{code}
sun.net.httpserver.HttpsServerImpl
{code}

This class could be missing on other JDKs (like IBM one) and it's behaviour *will be dependent* on the JDK *build number*. We should better never & ever use sun.* packages and for example use jetty (the same version as used in camel trunk itself):

http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html
 
- In contrast to AbstractHttpWebServiceMessageSender which is *really abstract* the class AbstractHttpWebServiceMessageSenderDecorator is not abstract at all, so better remove the Abstract prefix by it's name to avoid any missunderstanding

- In the method SpringWebserviceProducer.prepareMessageSenders() we have got both the ""instanceof"" as well as ""reference equality"" usage (java.lang.Class doesn't override java.lang.Object.equals() method):

{code}
if (messageSender instanceof CommonsHttpMessageSender) {
{code}

{code}
} else if (messageSender.getClass().equals(HttpUrlConnectionMessageSender.class)) {
{code}

But my understanding was that the new logic will avoid any ""instanceof"" usage as we don't want to get sub-classes that might have been otherwise injected. But this could be the case for CommonsHttpMessageSender as well! Do I miss something here?

I hope you could follow my poor english!

davaleri:1334838361:2012-04-19T20:26:01.712+0000:1334838361:2012-04-19T20:26:01.712+0000:Interesting find with the timeout staying set.  This seems to mean that the Spring WS internal engine is being shared across endpoints.  I'll look into what is going on there.  I'm wondering if this is a problem of unintentionally shared Spring WS configuration across multiple endpoints.  Why are those tests @Ignore?

Re Sun HTTP Server.  Do we have any builds that are run on non-Sun based JDKs?  You caught me being lazy here.  I was on a plane when I wrote this and didn't have docs for Jetty so I went with what I had available.  I'll look into changing it to use Jetty.

I don't think I will change AbstractHttpWebServiceMessageSenderDecorator.  It is a decorator of AbstractHttpWebServiceMessageSender classes.  Aptly named depending on how you look at it.

I'll look at the instanceof thing.  I think that is likely stale code that should have been refactored.

davaleri:1334862853:2012-04-20T03:14:13.925+0000:1334862853:2012-04-20T03:14:13.925+0000:Usage of instanceof for detecting Commons HTTP message senders.  Yes it should be an instanceof initially, but I should also be doing a direct comparison later before setting the timeout in order to determine if it is one of the built-in implementations or a user's subclass.  Good catch.

After looking into the test in question, ProducerRemoteRouteTimeOutTest, here is what I am seeing.

* WebServiceTemplate in SpringWebserviceConfiguration is affected by URI parameters in the endpoint URI.  In this test, a shared WebServiceTemplate is set by 'webServiceTemplate=#commonsHttpWebServiceTemplate' in the endpoint URIs.
* The state of the WebServiceTemplate in use is also affected by the timeout URI parameter (it replaces/decorates the message senders in the WebServiceTemplate).
* If you inject the same WebServiceTemplate into a number of endpoints and one of them uses the timeout URI parameter, the state of the WebServiceTemplate will be altered.  Since the state is shared between all endpoints that were setup with the shared WebServiceTemplate, each new endpoint will affect the state of the previous endpoint(s).
* In the old implementation, the timeout applied to the last endpoint used would be applied to all previous endpoints sharing the WebServiceTemplate (instanceof would have caught the custom Camel subclasses and replaced them).  In the new implementation, the first timeout will be applied to all subsequent endpoints (direct class comparison only matches the first time, then later endpoints don't trigger the matching and subsequent reconfiguration).
* What I am now seeing is that org.apache.camel.component.spring.ws.SpringWebserviceProducer.prepareMessageSenders(SpringWebserviceConfiguration) is actually invoked when a message is sent and not when an producer is initialized as I had previously thought.  This situation is bad.  I think it should be done when the producer is created, if at all.  If it is done on every producer invocation, eventually there will be concurrency issues under load as multiple producers are mucking around with unsynchronized access to the WebServiceTemplate.  This risky implementation is what allowed the test to pass originally.  The timeout was set to whatever the current endpoint wants when the endpoint is invoked.  This is great until we run into concurrent usage of two endpoints sharing the same WebServiceTemplate.
* Long story short, I'm not seeing how this is any more broken than the original implementation.  The test in question may now be failing, but I think it was giving a false sense of proper function to begin with.

This situation is also true of the other fields on a shared WebServiceTemplate.  Anything we do that affects the state in there for one endpoint will affect all other endpoints using the same WebServiceTemplate.

We can keep the existing functionality, but prepareMessageSenders has to be moved to producer instantiation and we will need to put warnings in the documentation about not using timeout or sslContextParameters when you use a custom WebServiceTemplate.

I've already committed changes to move prepareMessageSenders, update the tests so that they don't alter a shared WebServiceTemplate, and add an additional test and log message for the message sender detection.
bvahdat:1335156626:2012-04-23T12:50:26.484+0000:1335156626:2012-04-23T12:50:26.484+0000:- Regarding ""Why are those tests @Ignore?""

The reason is already documented by the @Ignore annotation itself:

{code}
Run manually, makes connection to external webservice.
{code}

So just because http://www.webservicex.net is down you don't want Jenkins (CI-Server) think something in camel source itself is wrong as the tests fail. And believe me that site is very often down (I've checked it many times). AFAIK there're 4 reasons why you would find @Ignore on camel-xyz tests:

- A JIRA ticket is in progress and the test tries to demonstrate the problem being addressed by the ticket.
- No JIRA ticket is open but the test simply fails for whatever reason and hopefully somebody can fix the code/test in the future:

{code}
org.apache.camel.component.hazelcast.testAddInstance()
{code}

- An external system is being called and we don't want the test result being dependent on if the external system is up and running and also behaves as we would expect from the camel component point of view. There're lots of examples for this in camel source itself:

{code}
org.apache.camel.component.ahc.AhcGoogleTest
org.apache.camel.component.atom.AtomHttpConsumerTest
{code}

- The test is a performance-measurement / smoke-test:

{code}
org.apache.camel.builder.saxon.XPathSplitChoicePerformanceTest.testXPathPerformanceRoute()
{code}

That said, a more elegant solution would have been to provide a webservice inside the running JVM (using spring-ws @Endpoint annotation together with jetty as webserver) and then just launch / shutdown that webservice while testing the Producer (e.g. at JUnit @BeforeClass & @AfterClass). I've done this once for one of my Apps and will hopfully add/change this here once I get sometimes to do that but currently I'm much more than busy :-( that's the idea would be to remove any invocation of the site http://www.webservicex.net.

- IMHO the current behaviour to force users to use dedicated WebServiceTemplate objects just because a timeout option has been used is an unnecessary limitation and not nice at all. I did mention this by my previous comment about how we could easily deal with this, just proactively clear out (reset to 0) any possibly set timeout on the MessageSender *if* no timeout option is being given by the passed URI. Then another invocation using the same WebServiceTemplate with a given timeout would then set the timeout again to whatever value it has been told to be inside URI. But for this you would then need to put the prepareMessageSenders() call back to where it was before (not a static single call inside the constructor but dynamically by each invocation of the process() method through camel routing engine.)

- And another point which was *my own BAD* for CAMEL-4998: the default value of the timeout flag in SpringWebserviceConfiguration should better be *0* and not *-1* as that's what both the jdk and commons-httpclient API's semantics understand/provide, however changing this is really trivial and it would not cause any side effects.
davaleri:1335160512:2012-04-23T13:55:12.951+0000:1335160512:2012-04-23T13:55:12.951+0000:Like you said, the @Ignore tests should use an embedded service.  The tests can be made to work like the one I added for the SSL stuff (that is after the use of the Sun HTTP server is dealt with).  I'll probably do this when I move the SSL tests to use Jetty.

A user is only forced to use different WebServiceTemplates if they provide one explicitly and use a setting in the endpoint URI that would alter the internal state of the WebServiceTemplate (right now that is timeout and SSL).  If they don't provide one, a new WebServiceTemplate is created for each endpoint and the timeout/SSL/etc. setting of one endpoint does not affect the setting of another endpoint.

We cannot move the prepareMessageSenders call back to where it was before because there is a concurrency issue there.  If we move it back, we would have to make sure that only one thread is using a WebServiceTemplate at a given time or accept that, under load, weird and unpredictable behavior will happen when using the timeout setting in Camel.  The synchronization would mean that only one producer endpoint among all the endpoints that share a WebServiceTemplate could be sending a message at any given time.

Neither of those options are desirable.  We are either introducing a bottle neck or allowing the system to have unpredictable behavior.

I would imagine that most users are not providing a custom WebServiceTemplate when they use this component.  Providing it is an advanced use case, and I feel that it is fine to expect the advanced user to deal with timeout and/or SSL on their own if they are providing their own WebServiceTemplate.  Adding the timeout URI option and SSL options to the endpoint URI parameters is a convenience for the majority of use cases where the user just needs a basic Web service client.  The return on our investment for improved user experience diminishes rapidly if we try to make the timeout and SSL URI parameters universally applicable for more advanced use cases.
bvahdat:1335162273:2012-04-23T14:24:33.844+0000:1335162273:2012-04-23T14:24:33.844+0000:Does the documentation of this component claim/promise any thread-safety? I think the best could be to ask for other commiters opinion @ dev-forum as well, including Richard Kettelerij how denoted this component to the community.
davaleri:1335162875:2012-04-23T14:34:35.388+0000:1335162875:2012-04-23T14:34:35.388+0000:I think it is assumed that the behavior of one endpoint using a component does not affect the behavior of other endpoints using the same component, but I'll throw out a [DISCUSS] topic on the dev forum.
davaleri:1340260887:2012-06-21T14:41:27.289+0000:1340260887:2012-06-21T14:41:27.289+0000:There was never any traction on the discussion in the dev forum.  I'm 100% certain that components are assumed to be thread safe since Camel is a scalable and concurrent message routing engine.

I've added appropriate warnings to the documentation about when the timeout and SSL related URI parameters will be honored."
0,CAMEL-4278,Improvement,Trivial,None,None,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Pablo Venini,0,0,2011-07-28 21:44:49+00:00,2011-10-22 13:48:04+00:00,The example QuickfixConverters converter class didn't have methods to convert from a byte array to a Message and from Message to InputStream. That prevented me from marshalling/unmarshalling Quickfix messages with Bindy. Enclosed is a patch with the needed methods.,"rodehav:1311893950:2011-07-29T06:59:10.491+0000:1311893950:2011-07-29T06:59:10.491+0000:The character set ""UTF-8"" is hardcoded in the patch. Isn't there a way to get the correct character set from Camel? I believe one can change the character set by setting properties on the exchange (or is it in the message?)

Also, in the patch you first use ""UTF8"" and then ""UTF-8"". I think the latter is correct.
pvenini:1311921502:2011-07-29T14:38:22.341+0000:1311921502:2011-07-29T14:38:22.341+0000:Modified the methods to obtain charset from exchange properties. Thanks for the head-up.


davsclaus:1311927466:2011-07-29T16:17:46.186+0000:1311927466:2011-07-29T16:17:46.186+0000:Why do you do a copy from 0 to length - 2 ?
pvenini:1312183185:2011-08-01T15:19:45.362+0000:1312183185:2011-08-01T15:19:45.362+0000:The byte[] returned by Bindy ends with CR+LF. Quickfix's parser choked on that so I had to remove them. Thinking about it, this was tested in a Win environment; in Linux I should have to remove only one char.
davsclaus:1312185556:2011-08-01T15:59:16.060+0000:1312185556:2011-08-01T15:59:16.060+0000:Okay would be better to skip ending chars if they are any kind of line feeds. Do you mind working on a refined patch? 
davsclaus:1312185571:2011-08-01T15:59:31.434+0000:1312185571:2011-08-01T15:59:31.434+0000:And add comment in the code why you need this so ppl know its on purpose
pvenini:1312354535:2011-08-03T14:55:35.325+0000:1312354535:2011-08-03T14:55:35.325+0000:Scans for any type of linefeed and adjusts the trimming accordingly.
davsclaus:1312371783:2011-08-03T19:43:03.467+0000:1312371798:2011-08-03T19:43:18.461+0000:Pablo I wonder if the scan logic could be made a bit simpler, something like

pseudo code
{code}
if X endsWith(""\n"") || x endsWith(""\r"") {
  X = X subString(0, x.length-1); // mac or unix line terminators
else if X endWith(""\r\n"") 
  X = X subString(0, x.length-2);  // windows is dual afair
}
{code}

pvenini:1312528521:2011-08-05T15:15:21.050+0000:1312528521:2011-08-05T15:15:21.050+0000:Claus:
      I wanted to avoid the overhead of creating another temporary String object so I worked directly on the byte array (these methods would be invoked for every application message processed by the engine). Anyway I shot myself in the foot because in my application Exchange.CHARSET_NAME is NULL and the try/catch always get triggered. In this regard I'm in doubt about what to do; the FIX standard specifies an ASCII 7-bit charset so I don't know if the byte [] -> String conversion wouldn't have to be hardcoded to use that encoding or if I should set that encoding in the Exchange properties (from the application).

pvenini:1319197580:2011-10-21T19:46:20.746+0000:1319197580:2011-10-21T19:46:20.746+0000:Cleaner (I hope) code
davsclaus:1319262484:2011-10-22T13:48:04.767+0000:1319262484:2011-10-22T13:48:04.767+0000:Thanks for the patch.

I polished it slightly. Would be good with unit tests though as we have some unit tests for the existing type converters."
0,CAMEL-4277,Improvement,Minor,2.7.0,None,"

camel-kestrel
kestrel

",Resolved,Not A Problem,Future,Claus Ibsen,Vadim Tsesko,0,1,2011-07-28 13:31:19+00:00,2012-07-06 08:50:55+00:00,"Please add camel-kestrel as a component in JIRA.


I call ProducerTemplate.sendBody(Set<...>). The set is serialized into 10 MB of pure bytes and then I get CamelExchangeException. With the data smaller than 1 MB everything is OK.


The full stack trace:



org.apache.camel.CamelExchangeException: Error sending to: feeds. Exchange[Message: Set(... [Body clipped after 1000 chars, total length is 10891852]]. Caused by: [java.lang.IllegalArgumentException - Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)]
	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:49) ~[camel-kestrel-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:333) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:208) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:154) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:123) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:341) [camel-core-2.7.0.jar:2.7.0]
	...
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]
	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]
	at scala.collection.Iterator$class.foreach(Iterator.scala:652) [scala-library.jar:na]
	at scala.collection.mutable.HashTable$$anon$1.foreach(HashTable.scala:157) [scala-library.jar:na]
	at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:190) [scala-library.jar:na]
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:43) [scala-library.jar:na]
	at scala.collection.mutable.HashMap.foreach(HashMap.scala:93) [scala-library.jar:na]
	...
	at sun.reflect.GeneratedMethodAccessor133.invoke(Unknown Source) ~[na:na]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_24]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_24]
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:322) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:224) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:167) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:74) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121) [camel-core-2.7.0.jar:2.7.0]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97) [camel-core-2.7.0.jar:2.7.0]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_24]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_24]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_24]
	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_24]
Caused by: java.lang.IllegalArgumentException: Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)
	at net.spy.memcached.CachedData.<init>(CachedData.java:30) ~[memcached-2.5.jar:]
	at net.spy.memcached.transcoders.SerializingTranscoder.encode(SerializingTranscoder.java:152) ~[memcached-2.5.jar:]
	at net.spy.memcached.MemcachedClient.asyncStore(MemcachedClient.java:301) ~[memcached-2.5.jar:]
	at net.spy.memcached.MemcachedClient.set(MemcachedClient.java:691) ~[memcached-2.5.jar:]
	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:47) ~[camel-kestrel-2.7.0.jar:2.7.0]
	... 93 common frames omitted","davsclaus:1311831590:2011-07-28T13:39:50.846+0000:1311831590:2011-07-28T13:39:50.846+0000:This cannot be a critical bug, as its a limitation in kestrel and not Camel.

Can you check kestrel what it offers here? There may be some way of increasing that threshold?
incubos:1311836467:2011-07-28T15:01:07.490+0000:1311836512:2011-07-28T15:01:52.920+0000:OK, I'll look into it. There are two possibilities: it might be {{kestrel}} constraint or it might be some {{spymemcached}} setting. In the latter case some support from {{camel-kestrel}} might be needed.

Nevertheless I'll report the results here.
incubos:1311837737:2011-07-28T15:22:17.894+0000:1311837737:2011-07-28T15:22:17.894+0000:The problem is in {{memcached-2.5.jar}}, which I get as a dependency of {{camel-kestrel}}. {{MAX_SIZE = 1048576}} is hardcoded in class {{CachedData}}. For instance, {{spymemcached-2.7}} has {{MAX_SIZE = 20 * 1024 * 1024}} (it is also hardcoded), but I don't like the idea of explicitly replacing your dependency with another.

So what should I do?
davsclaus:1341535855:2012-07-06T08:50:55.446+0000:1341535855:2012-07-06T08:50:55.446+0000:Not a Camel problem."
0,CAMEL-4276,Bug,Major,"2.7.3, 2.8.0","2.7.4, 2.8.1, 2.9.0","
None
",Closed,Fixed,"2.7.4, 2.8.1, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-07-28 13:17:14+00:00,2011-10-25 11:35:40+00:00,"The camel-cxf Karaf feature defines the following CXF version range:


<feature version=""[2.4,2.6)"">cxf</feature>


which is correct.


Unfortunately the camel-cxf bundle import statement doesn't define explicitly the CXF version range. The Felix maven-bundle-plugin determines the version range with the CXF version used and so define it to [2.4,2.5).


1/ it's not correct as it doesn't match the feature definition
2/ it means that you can't use Camel with CXF 2.5.0-SNAPSHOT","jbonofre:1311840110:2011-07-28T16:01:50.021+0000:1311840110:2011-07-28T16:01:50.021+0000:Fixed on Camel trunk: revision 1151903.
jbonofre:1311896305:2011-07-29T07:38:25.635+0000:1311896305:2011-07-29T07:38:25.635+0000:Fixed on camel-2.8.x branch: revision 1152130.
jbonofre:1311896781:2011-07-29T07:46:21.876+0000:1311896781:2011-07-29T07:46:21.876+0000:Fixed on camel-2.7.x branch: revision 1152136."
0,CAMEL-4275,Improvement,Trivial,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Babak Vahdat,0,0,2011-07-28 12:34:42+00:00,2011-09-19 19:46:15+00:00,Created this ticket separately since part of the provided patch in https://issues.apache.org/jira/browse/CAMEL-4255 didn't match with it's description.,davsclaus:1312083649:2011-07-31T11:40:49.021+0000:1312083649:2011-07-31T11:40:49.021+0000:Thanks for the patch. I added it to the camel-testng component as well.
0,CAMEL-4274,Bug,Minor,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Yaytay,0,0,2011-07-27 06:11:34+00:00,2011-09-02 09:47:49+00:00,"MDCUnitOfWork.clear() removes any content set by MDCUnitOfWork from MDC.
If there are two separate exchange running at the same time in the same thread, as happens when a ProduceTemplate is used from Java, this is incorrect because the MDC of the parent is cleared after the child completes.
Conceptually the MDC should be a stack, but MDC only accepts strings so the simplest thing to do is for MDCUnitOfWork to replace the previous values in clear().","yaytay:1311718474:2011-07-27T06:14:34.420+0000:1311718474:2011-07-27T06:14:34.420+0000:Patch to reset MDC back to original values in clear().
davsclaus:1311722739:2011-07-27T07:25:39.401+0000:1311722739:2011-07-27T07:25:39.401+0000:Thanks for the patch."
0,CAMEL-4273,Improvement,Trivial,None,None,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Babak Vahdat,0,0,2011-07-26 14:59:28+00:00,2011-07-27 07:12:49+00:00,See http://camel.465427.n5.nabble.com/Favor-static-member-classes-over-nonstatic-td4634964.html,"davsclaus:1311719923:2011-07-27T06:38:43.540+0000:1311719923:2011-07-27T06:38:43.540+0000:Babka, thanks for the patch.
bvahdat:1311721969:2011-07-27T07:12:49.704+0000:1311721969:2011-07-27T07:12:49.704+0000:You welcome :-)
BTW my first name ist Babak not Babka http://en.wikipedia.org/wiki/Babak_Khorramdin"
0,CAMEL-4272,Improvement,Major,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-07-26 14:58:50+00:00,2011-11-09 16:59:10+00:00,"When the jdbc connection is work as XA resource, the connection autoCommit flag doesn't support to be reset.
So we should provide an option in the camel-jdbc endpont not to set the autoCommit flag on the connection.","njiang:1311665374:2011-07-26T15:29:34.549+0000:1311665374:2011-07-26T15:29:34.549+0000:Committed the patch into trunk.
Updated the wiki page with the new added option resetAutoCommit."
0,CAMEL-4271,Improvement,Major,2.8.0,3.15.0,"
None
",Resolved,Fixed,3.15.0,Unassigned,Claus Ibsen,7,6,2011-07-26 14:36:26+00:00,2022-01-26 05:55:08+00:00,"If you enable recovery on the aggregator eip when using a persistent repository such as the jdbc, then you may have a race condition when having multiple camel apps running in a cluster. As the aggregate recover task is running on each Camel app (node) in the cluster. So they may potentially all pickup recovery tasks, and execute those, which may cause duplicate messages being recovered.


What is needed is a lock table or some other way to ensure only one recover tasks ""wins"" and executes.


We may want to enhance the API in camel to facilitate this kind of locking. As with hawtdb you may have a shared file on the SAN and thus have the same racing issue.","davsclaus:1436623249:2015-07-11T22:00:49.412+0000:1436623249:2015-07-11T22:00:49.412+0000:This is more hard core to look into. Wonder if some of those memory data-grid are better as repos.
davsclaus:1488519208:2017-03-03T13:33:28.878+0000:1488519208:2017-03-03T13:33:28.878+0000:Either there should be some SQL table locking or maybe use an external clustered data-grid with cluster locks like hazelcast / etcd / zookeeper etc to let the recovery task only run on one active node.
bbonnet:1642599658:2022-01-19T21:40:58.780+0000:1642599658:2022-01-19T21:40:58.780+0000:Race condition may not only happen between multiple nodes recovery task, but it may also happen between a recovery task on one node and another node dealing with a newly complete exchange. 
As a matter of fact, a newly complete exchange, completed on node 'A', may look like an 'orphan' complete exchange on another node 'B' (node 'B' will see it as a complete exchange that is not in progress since node 'B' is not responsible for its completion). So, recovery task on that node 'B' may recover this exchange while node 'A' deals with it. That leads to duplication.
We are facing that issue with a JDBCAggregateRepository on camel 3.11"
0,CAMEL-4270,Improvement,Minor,None,2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-26 13:33:56+00:00,2011-07-26 14:17:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/file-move-option-not-working-when-using-split-tp4616425p4616425.html


The file consumer uses an on completion to execute the delete/rename strategy after the file has been processed. For that to work it uses the file headers on the exchange. But the end user can in between tamper with those, and thus influence the on completion process. We should guard against this by having the on completion do a pre copy of the information it needs.","davsclaus:1311661061:2011-07-26T14:17:41.533+0000:1311661061:2011-07-26T14:17:41.533+0000:The current logic is fine, the file is being bound to the exchange before its being renamed/deleted.

The end user forgot to close file resources and therefore windows would not move the file when it was done. After fixing this it worked fine."
0,CAMEL-4269,Bug,Major,"2.7.2, 2.7.3","2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Marek Niewiadomski,0,0,2011-07-26 11:53:51+00:00,2011-09-02 09:49:57+00:00,"Problem appear if somebody kill logged on user on sftp server while you are connected with consumer.
Camel is not able to reconnect on next poll even if it says that it will do this.
RemoteFileConsumer is not connected but it thinks that it is still logged in.


I think ""loggedIn"" flag should be down after each disconnecting action like in attached patch.



2011-07-24 22:35:14,848 WARN  [RemoteFilePollingConsumerPollStrategy:37] Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://test@host 
2011-07-24 22:35:14,849 WARN  [RemoteFilePollingConsumerPollStrategy:52] Consumer Consumer[sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true] could not poll endpoint: sftp://test@host/test?delay=60000&delete=true&localWorkDirectory=%2Fvar%2Ftest%2Ftemp&password=xxxx&throwExceptionOnConnectFailed=true caused by: Cannot change directory to: test 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: test
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:408)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:393)
	at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:77)
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:49)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:406)
	... 14 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)
	at java.io.PipedInputStream.read(PipedInputStream.java:361)
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)
	... 15 more",davsclaus:1311657939:2011-07-26T13:25:39.951+0000:1311657939:2011-07-26T13:25:39.951+0000:Thanks Marek for the patch.
0,CAMEL-4268,Improvement,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Closed,Fixed,"2.8.2, 2.9.0",Christian Müller,Chris Chen,0,0,2011-07-26 07:10:59+00:00,2011-10-21 21:42:38+00:00,"Add support for setting the CacheControl and ContentDisposition metadata information for the object.


Proposed Implementation:


1) Add two new headers: CamelAwsS3CacheControl and CamcelAwsS3ContentDisposition.  


2) Add corresponding enumerations in S3Constants


3) Set the corresponding data into PutObjectRequest in S3Producer.","muellerc:1311667610:2011-07-26T16:06:50.763+0000:1311667610:2011-07-26T16:06:50.763+0000:Thanks for reporting Chris. Do you want also try to provide a patch for this improvement?
As you probably know, we love contributions and the probability increases that this issue will be resolved in the next Camel release.
muellerc:1317040590:2011-09-26T20:36:30.246+0000:1317040590:2011-09-26T20:36:30.246+0000:Also add contentEncoding, contentMD5 and lastModified.
muellerc:1317042375:2011-09-26T21:06:15.910+0000:1317042375:2011-09-26T21:06:15.910+0000:Committed r1176050 into trunk
muellerc:1317042423:2011-09-26T21:07:03.593+0000:1317042423:2011-09-26T21:07:03.593+0000:Committed r1176058 into branch camel-2.8.x
muellerc:1317042536:2011-09-26T21:08:56.871+0000:1317042536:2011-09-26T21:08:56.871+0000:I do not backport this change into the branch camel-2.7.x because it's not a bug
muellerc:1317043486:2011-09-26T21:24:46.777+0000:1317043486:2011-09-26T21:24:46.777+0000:updated the wiki pages"
0,CAMEL-4267,Improvement,Minor,2.8.0,"2.8.4, 2.9.0","
None
",Closed,Fixed,"2.8.4, 2.9.0",Christian Müller,Chris Chen,0,0,2011-07-26 07:05:02+00:00,2011-11-25 01:04:12+00:00,"It'd be great and extremely useful to add support for Reduced Redundancy.


To implement this:


1) Add Header extraction support for ""CamelAwsS3StorageClass"", accepting ""Standard"" (default) or ""ReducedRedundancy"" values.  


2) In S3Producer, set the storage class value in the PutObjectRequest.","muellerc:1311667454:2011-07-26T16:04:14.920+0000:1311667479:2011-07-26T16:04:39.197+0000:Thanks for reporting Chris. Do you want to try to provide a patch for this improvement?
bibryam:1322128436:2011-11-24T17:53:56.873+0000:1322128436:2011-11-24T17:53:56.873+0000:I noticed that the issue is quite old and decided to implement this new option. 
In addition the patch contains a test for validate that message headers are set correctly.
muellerc:1322146750:2011-11-24T22:59:10.764+0000:1322146750:2011-11-24T22:59:10.764+0000:Hello Bilgin!
Thank you for the patch! I made a few changes on it and committed it!
I also updated the WIKI page.
bibryam:1322154252:2011-11-25T01:04:12.951+0000:1322154252:2011-11-25T01:04:12.951+0000:Thanks Christian.
With your changes it looks better. "
0,CAMEL-4266,Bug,Critical,"2.7.2, 2.8.0",None,"
None
",Resolved,Invalid,2.9.0,Claus Ibsen,Muthukumar Selvarasu,0,0,2011-07-26 02:26:01+00:00,2011-07-26 13:27:24+00:00,"10:20:30.780 [a://tr_inward_fp] DeleteWorkFile                 DEBUG Error in processing the file; going to delete the work
file
10:20:30.780 [a://tr_inward_fp] GenericFileOnCompletion        WARN  Rollback file strategy: org.apache.camel.component.fil
e.strategy.GenericFileRenameProcessStrategy@1bfaf97 for file: GenericFile[..\inprogress\sam1.csv]
10:20:30.780 [a://tr_inward_fp] FileUtil                       DEBUG Retrying attempt 1 to rename file from: data\
\in\..\inprogress\sam1.csv to: data\in\..\inprogress\..\error\sam1.csv
10:20:31.796 [a://tr_inward_fp] FileUtil                       DEBUG Retrying attempt 2 to rename file from: data\
\in\..\inprogress\sam1.csv to: data\in\..\inprogress\..\error\sam1.csv
10:20:32.796 [a://tr_inward_fp] FileUtil                       DEBUG Cannot rename file from: data\in\..\inprogre
ss\sam1.csv to: data\in\..\inprogress\..\error\sam1.csv, will now use a copy/delete approach instead
10:20:32.796 [a://tr_inward_fp] FileUtil                       DEBUG Using FileChannel to copy from: sun.nio.ch.FileChannel
Impl@26c3a1 to: sun.nio.ch.FileChannelImpl@f596b2
10:20:32.796 [a://tr_inward_fp] FileUtil                       DEBUG Retrying attempt 0 to delete file: data\in\.
.\inprogress\sam1.csv
10:20:32.796 [a://tr_inward_fp] FileUtil                       DEBUG Retrying attempt 1 to delete file: data\in\.
.\inprogress\sam1.csv
10:20:33.811 [a://tr_inward_fp] FileUtil                       DEBUG Retrying attempt 2 to delete file: data\in\.
.\inprogress\sam1.csv
10:20:34.811 [a://tr_inward_fp] FileUtil                       DEBUG Tried 3 to delete file: data\in\..\inprogres
s\sam1.csv with result: false
10:20:34.811 [a://tr_inward_fp] FileUtil                       WARN  Renaming file from: data\in\..\inprogress\sa
m1.csv to: data\in\..\inprogress\..\error\sam1.csv failed due cannot delete from file: data\in\..\inprogress\sam
1.csv after copy succeeded
10:20:34.811 [a://tr_inward_fp] FileUtil                       DEBUG Tried 3 to rename file: data\in\..\inprogres
s\sam1.csv to: data\in\..\inprogress\..\error\sam1.csv with result: true","davsclaus:1311631120:2011-07-26T05:58:40.678+0000:1311631120:2011-07-26T05:58:40.678+0000:Please use the mailing list / user forum first to get help with using Camel, as we write here:
http://camel.apache.org/support

The problem you have is most likely an issue in your code where you keep a input strem on the file, which means Windows will lock the file. And prevent it from being deleted/renamed. So double check your code.


davsclaus:1311658044:2011-07-26T13:27:24.833+0000:1311658044:2011-07-26T13:27:24.833+0000:Marking this as invalid, as its a user issue with no closing the resources on the file in the user code. And people should favor using the mailing list first to discuss issues, at first. Then after that later a JIRA ticket can be created if really a bug in Camel."
0,CAMEL-4265,Bug,Minor,"2.7.3, 2.8.0","2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,edge wang,0,0,2011-07-25 17:55:48+00:00,2011-09-02 09:46:17+00:00,"protected Properties loadPropertiesFromFilePath(CamelContext context, String path) throws IOException {
        if (path.startsWith(""file:"")) 

{
            path = ObjectHelper.after(path, ""file:"");
        }

        InputStream is = new FileInputStream(path);
        Properties answer = new Properties();
        answer.load(is);
        return answer;
    }


    Stream not closed before return, as well as in another method: loadPropertiesFromClasspath.","davsclaus:1311594017:2011-07-25T19:40:17.106+0000:1311594017:2011-07-25T19:40:17.106+0000:Thanks for reporting. Do you want to try to provide a patch to fix this?

See more details here
http://camel.apache.org/contributing.html
edge:1311627597:2011-07-26T04:59:57.392+0000:1311627597:2011-07-26T04:59:57.392+0000:I attached a file, hope it's in needed format.

No test case could be provided since it is a simple close operation surrounded by try ... finally.
davsclaus:1311631188:2011-07-26T05:59:48.038+0000:1311631188:2011-07-26T05:59:48.038+0000:Edge, can you re-attach the patch and make sure to grant license to Apache. We cannot accept patches without the license.
edge:1311632668:2011-07-26T06:24:28.775+0000:1311632668:2011-07-26T06:24:28.775+0000:Didn't notice the license choice, this time would be ok.
davsclaus:1311635730:2011-07-26T07:15:30.911+0000:1311635730:2011-07-26T07:15:30.911+0000:Thanks for the patch.

I polished it a bit to use IOHelper to close the resource.
edge:1311915484:2011-07-29T12:58:04.978+0000:1311915484:2011-07-29T12:58:04.978+0000:Can I modify it's fixed version, to add 2.8.1？
davsclaus:1311915716:2011-07-29T13:01:56.344+0000:1311915716:2011-07-29T13:01:56.344+0000:Please dont change the fix versions as its only committers who does this, when he commits/backports.
davsclaus:1311917045:2011-07-29T13:24:05.187+0000:1311917045:2011-07-29T13:24:05.187+0000:When we are to cut a 2.8.1 release, we will look at all the bugs fixed for Camel 2.9 and backport the bugs that can be done and make sense. I am sure this bug will be backported. So just have patience.
edge:1311920922:2011-07-29T14:28:42.253+0000:1311920922:2011-07-29T14:28:42.253+0000:ok, thanks."
0,CAMEL-4264,Bug,Major,"2.7.3, 2.8.0","2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Christian Müller,Willem Jiang,3,4,2011-07-25 10:02:53+00:00,2011-08-30 00:04:37+00:00,"Here is the stack trace



java.util.EmptyStackException
        at java.util.Stack.peek(Stack.java:85)
        at java.util.Stack.pop(Stack.java:67)
        at 
org.apache.camel.impl.DefaultUnitOfWork.popRouteContext(DefaultUnitOfWork.java:226)
        at 
org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:260)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
        at 
org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
        at 
org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:256)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:143)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:78)
        at 
org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:113)
        at 
org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:91)
        at 
org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at 
org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:397)
        at 
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at 
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at 
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)





You can find more information in this mail thread[1]
[1]http://camel.465427.n5.nabble.com/EmptyStackException-in-DefaultUnitOfWork-popRouteContext-td4630106.html","muellerc:1311563874:2011-07-25T11:17:54.038+0000:1311563874:2011-07-25T11:17:54.038+0000:I saw this exception also from time to time in Camel 2.3.0, only when we enable tracing on the Camel context.
njiang:1311569157:2011-07-25T12:45:57.095+0000:1311569157:2011-07-25T12:45:57.095+0000:Applied patch into trunk.
mkolev:1311574841:2011-07-25T14:20:41.707+0000:1311574841:2011-07-25T14:20:41.707+0000:Hi Willem,
is it really necessary to synchronize on the {{routeContext}} param
in {code}public void pushRouteContext(RouteContext routeContext){code}?

There are also other synchronization issues that concern the other memeber variables of the class, (e.g. {{synchronizations}} and {{subUnitOfWorks}}). Is synchrnonization really (not)needed for those memebers?
schmidtm:1311576140:2011-07-25T14:42:20.139+0000:1311576140:2011-07-25T14:42:20.139+0000:Hi Willem, could you please add the number 2.5.0 to the list of affected versions?
muellerc:1311646270:2011-07-26T10:11:10.452+0000:1311646270:2011-07-26T10:11:10.452+0000:pushRouteContext() should also synchronize on routeContextStack instead of routeContext. Thanks Matthias for pointing this out.
muellerc:1311647001:2011-07-26T10:23:21.853+0000:1311647001:2011-07-26T10:23:21.853+0000:Committed r1151054
Thanks Matthias for pointing this out.
muellerc:1311647519:2011-07-26T10:31:59.680+0000:1311647519:2011-07-26T10:31:59.680+0000:Added to the 2.9.0 release notes
dgtombs:1314267863:2011-08-25T18:24:23.496+0000:1314267863:2011-08-25T18:24:23.496+0000:This issue is biting my organization hard in a critical route where we can't drop any messages. Would it be possible to target this for 2.8.1 or some kind of bugfix release? Thanks.
njiang:1314295041:2011-08-26T01:57:21.493+0000:1314295041:2011-08-26T01:57:21.493+0000:Merged the patch into camel 2.8.x branch.

dgtombs:1314633877:2011-08-30T00:04:37.269+0000:1314633877:2011-08-30T00:04:37.269+0000:Excellent, thank you!"
0,CAMEL-4263,Improvement,Major,"2.7.2, 2.8.0","2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-07-24 10:43:34+00:00,2011-09-19 18:46:17+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-issue-with-JMX-Endpoints-disappearing-and-endpoint-injection-for-SEDA-tp4616624p4616624.html


The problem is that when you use @EndpointInject, @Produce, @Consume etc. on beans then Spring / Blueprint triggers the CamelBeanPostProcessor which inject those details into the bean. But this process happens very early, before CamelContext is being started.
And thus components/endpoints/etc is already been loaded/registered in registry.


But they cannot this early be enlisted in JMX, as CamelContext has not yet been enlisted. So we need to pre record those events, and then enlist them after CamelContext has been enlisted in JMX.",
0,CAMEL-4262,Task,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-07-22 21:13:47+00:00,2011-08-16 14:13:37+00:00,"Waiting the update to Quartz 2.0.x, I'm updating to Quartz 1.8.5 which include especially 2 interesting bug fixes. More over, it will avoid some warning message from Terracotta in the log saying that Quartz 1.8.5 is available","jbonofre:1311377126:2011-07-23T07:25:26.892+0000:1311377126:2011-07-23T07:25:26.892+0000:Revision 1150059.
jbonofre:1311377172:2011-07-23T07:26:12.313+0000:1311377172:2011-07-23T07:26:12.313+0000:I reopen the issue waiting the ServiceMix bundle release (I will do it over the week end)."
0,CAMEL-4261,Bug,Major,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-07-22 07:15:15+00:00,2011-08-08 18:02:55+00:00,"See nabble
http://camel.465427.n5.nabble.com/LRUCache-memory-leak-when-using-camel-properties-file-tp4621357p4621357.html


The internal cache should be a soft cache and we should use a key holder to ensure equals/hashCode",
0,CAMEL-4260,Task,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-22 06:58:52+00:00,2011-07-22 09:25:30+00:00,"See nabble
http://camel.465427.n5.nabble.com/DISCUSS-Removing-the-camel-example-axis-tp4620093p4620093.html",
0,CAMEL-4259,Sub-task,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-07-22 04:24:25+00:00,2011-09-19 19:20:32+00:00,No Desc,"njiang:1311298054:2011-07-22T09:27:34.758+0000:1311298054:2011-07-22T09:27:34.758+0000:Just commit a simple test into the trunk.
Will remove the ignore annotation when we upgrade the CXF version to 2.4.2."
0,CAMEL-4258,Sub-task,Major,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-07-22 04:02:28+00:00,2011-09-19 19:12:18+00:00,No Desc,"njiang:1311298143:2011-07-22T09:29:03.858+0000:1311298143:2011-07-22T09:29:03.858+0000:Committed a simple unit test for it, will remove the ignore annotation after upgrading to CXF 2.4.2."
0,CAMEL-4257,Improvement,Minor,2.7.2,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Dmitri Maximovich,0,4,2011-07-21 16:24:35+00:00,2013-10-25 06:54:56+00:00,"It would be beneficial if org.apache.camel.component.jms.JmsComponent would allow to specify JMS deliveryMode explicitly. 


Currently, from what I can tell, there is only boolean deliveryPersistent property which is not enough if JMS provider supports additional non-standard delivery modes. Example is Tibco EMS RELIABLE_DELIVERY mode.","davsclaus:1341535790:2012-07-06T08:49:50.850+0000:1341535790:2012-07-06T08:49:50.850+0000:Patches is welcome
grahamlittle:1348708207:2012-09-27T09:10:07.032+0000:1348708207:2012-09-27T09:10:07.032+0000:Doesn't the CamelJMSDeliveryMode header allow for the passing of custom deliveryModes already?
davsclaus:1348789317:2012-09-28T07:41:57.095+0000:1348789317:2012-09-28T07:41:57.095+0000:Yes the header can contain a String / Int etc. And Camel will adapt to that.

However I think the Dimitri want to be able to configure a default value on the JmsComponent, so its applied out of the box.

Patches is welcome. Its to add a setter/getter (int type) on JmsComponent / JmsConfiguration / JmsEndpoint. And add logic to set the default value on the JmsTemplate that is being created. 

eg just track what ""deliveryPersistent"" does and see where to apply similar code.
ceposta:1376890696:2013-08-19T13:38:16.665+0000:1376890696:2013-08-19T13:38:16.665+0000:I can take a look at adding this.
ceposta:1379918462:2013-09-23T14:41:02.840+0000:1379918462:2013-09-23T14:41:02.840+0000:Please find fix + tests attached.
davsclaus:1379987471:2013-09-24T09:51:11.280+0000:1379987471:2013-09-24T09:51:11.280+0000:Thanks for the patch. I added the methods to JmsEndpoint and JmsComponent as well which allows you to set this on component level as well, and also see the value in JMX. And fixed CS also.
bvahdat:1382655296:2013-10-25T06:54:56.438+0000:1382655296:2013-10-25T06:54:56.438+0000:The missing documentation for this option has been added now."
0,CAMEL-4256,New Feature,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Hadrian Zbarcea,2,2,2011-07-21 16:02:18+00:00,2017-02-28 12:40:38+00:00,"One of the key missing pieces from the API is the explicit concept of EndpointConfiguration. We use URIs for that, ant that's great, but we don't have it in the API. Some components do have an informal version though.


I am proposing adding an EndpointConfiguration interface:



public interface EndpointConfiguration {
  void fromUri(String uri);
  String toUri();
}




and maybe other methods, we could also use URI instead of string for pre-parsing. Same as with other concepts the default implementation would be in impl and components would extend that and add fields for configuration parameters. 
This would solve problems related to URI uniqueness to a good extent as toUri() should always place parameters in the same order. The Endpoint interface would change though.


The main advantage would be that we can annotate parameters and use javax.validation to specify if a field is @ProducerOnly, @ConsumerOnly for example, which may exclude them from toUri() (yes, there are some impacts, the id uri would be different than the config uric). We could annotate them with @Secret to indicate that at least the value should not appear in clear in the uri, etc. We could also add an @Default(""value""), allowing us to exclude from the uri fields set on the default value (even if the filed was explicitly set) and so on.


This would also make static validation possible unit testing configuration would be vastly simplified and we could improve coverage. We can do it in an incremental way without a big impact on existing components (especially outside camel) via changes in DefaultEndpoint. I am working on a prototype, but feedback is highly appreciated.","kcbabo:1311845258:2011-07-28T17:27:38.489+0000:1311845258:2011-07-28T17:27:38.489+0000:I think this would be a great change on a number of fronts.  First, it would allow for a nice separation of the configuration info from the behavior of a component endpoint (e.g. Endpoint, Service, etc.).  Second, the fact that it's a JavaBean would mean that the mapping to XML would be relatively straightforward.  Perhaps through JAXB annotations or just using the default mapping rules in JAXB without annotations.  Finally, validation would go above and beyond what you could do with straight XML schema.  We have already gone down the route of defining separate XML schema for Camel endpoints, an exercise I would happily abandon if we could get this type of support up and running.

I went ahead and played around with a crude example using TimerEndpoint as an example.  My guess is the configuration bean would look something like the below.  Field-level annotations provide some basic support and the custom constraint @TimeDelayConstraint can be used to perform more advanced validation on the config object as a whole (in this case, verifying that 'time' and 'delay' are not specified together).

{code:java}
@TimeDelayConstraint
public class TimerEndpointConfiguration implements EndpointConfiguration {

    private Date time;
    @Min(0)
    private long period = 1000;
    @Min(0)
    private long delay;
    private boolean fixedRate;
    private boolean daemon = true;
    private Timer timer;
    @NotNull
    private String timerName;
    
    public String getTimerName() {
        return timerName;
    }
    
    public void setTimerName(String timerName) {
        this.timerName = timerName;
    }

    // etc., etc.
}
{code}

If there's interest in moving this forward, I would love to help. :-)
hadrian:1311846321:2011-07-28T17:45:21.750+0000:1311846321:2011-07-28T17:45:21.750+0000:The tricky part will be the changes to the Endpoint interface and not break backward compatibility for those who have their own Component implementation. Probably something that keeps the parameters/values in a Map and is always valid. I started to work on a patch and will post it here for review before committing.
hadrian:1312040347:2011-07-30T23:39:07.455+0000:1312040347:2011-07-30T23:39:07.455+0000:I attached a patch that should give an idea of what I proposed in this issue. There are few more things remaining to be done:
 * add a MappedEndpointConfiguration extends DefaultEndpointConfiguration that takes all the parameters and stores them in a Map.This will be the class used by default by the DefaultEndpoint and will assist in migration and will preserve backwards compatibility
 * validation, the part described by Keith Babo above, which I didn't touch on. It will require an extra dependency in camel-core on javax.validation.
 * toUriFormat is fairly easy, but I need to define a few annotations like @ProviderConfiguration, @ConsumerConfiguration that would mark some parameters as making sense only one one side of the messaging channel.

Once the above is done we can start tackling components one by one and add better unit testing for supported configurations.

Please review and comment (or nod). I will not commit attached patch for a few days. 

kcbabo:1312279612:2011-08-02T18:06:52.301+0000:1312279612:2011-08-02T18:06:52.301+0000:The approach to start with a default, map-based implementation across components and then updating each component to have a bean-based configuration object seems reasonable to me.  The idea of annotating configuration fields to declare whether they are consumer or provider oriented is nice for producing URIs based on the context they are used (using UriFormat) and also documenting the intent of each field.  If I understand the approach correctly, it should be possible to use something like ConfigurationHelper to provide a single implementation of turning a config object into a URI string (i.e. each component won't have to implement toURIString() individually) and the rules for how parameters are represented (e.g. query parameters are listed in alphabetical order) would be consistent across all components.  Did I get that right?
davsclaus:1312332198:2011-08-03T08:43:18.960+0000:1312332198:2011-08-03T08:43:18.960+0000:I would suggest to start a [DISCUSS] on dev about this. It seems there is a more broad perspective to this. For example you can configure EIPs, components, endpoints, consumers, producers, data formats, etc. So we may want to take the time to look into a long term and more general solution.

Also for 3rd party component developers its been so easy so far, as all they have to care about is Component, Endpoint, and Producer/Consumer. So we should ensure it still is dead simple to create custom components. I would really dislike if any API changes causes this to be more complicated.


hadrian:1312346397:2011-08-03T12:39:57.730+0000:1312346397:2011-08-03T12:39:57.730+0000:@Keith, yes, adding the configuration should be as easy as adding a pojo with annotated fields. A sensible default implementation for instantiation, validation, and serialization to/from URI String is provided by the core runtime (via helpers in ConfigurationHelper).
hadrian:1312346864:2011-08-03T12:47:44.080+0000:1312346864:2011-08-03T12:47:44.080+0000:@Claus, this is a good place to discuss. Add your comments and suggestions here. This solution is backwards compatible and changes nothing for 3rd party components (already developed or not). It solves a couple of problems and introduces the validation feature. How would you make it more general?
davsclaus:1312364526:2011-08-03T17:42:06.713+0000:1312364526:2011-08-03T17:42:06.713+0000:A post on @dev with [DISCUSS] has the tendency to bring in more people, as it stand out on that mailing list, among the hundres of JIRA updates its posted on @dev as well.

This is after all a topic on camel-core and the Component/Endpoint API which is a very important API in Camel. So I would prefer the great good of the Camel team is behind this. 
davsclaus:1316937731:2011-09-25T16:02:11.672+0000:1316937731:2011-09-25T16:02:11.672+0000:Why introduce an interface? You could use those annotations in the Endpoint itself? Why force people to use a xxxConfiguration class?


jstrachan:1317005962:2011-09-26T10:59:22.229+0000:1317005962:2011-09-26T10:59:22.229+0000:
Endpoints are already beans you can configure yourself using Spring, Guice, CDI, Java code or whatever and wire them into a CamelContext.
Dependency injection frameworks can already configure Endpoints today. No need for a new magic interface and yet more work for component/endpoint developers to have to create (which can soon get out of sync with the actual implementation code).

Tools can use introspection already to figure out how to configure an Endpoint. Just check out how Spring does this or tools based around Spring. 

There could be some added annotations we could use to make it easier to add extra metadata to tools; though where possible I think its better for the community to stick to standards that exist around DI (CDI / Spring / Guice) or around things like the Bean Validation Framework for adding things like min/max validation annotations. Those annotations are already well defined - lets not try reinvent DI / validation wheels.
http://jcp.org/en/jsr/detail?id=303

I'd say tools either go the URL option, or go the bean configuration option using (say) spring/guice/CDI. The URI is always going to be a subset of the actual configuration; if you really want to support full endpoint configuration then the only real option is the full DI route; as there are things you can configure though DI tooling you can't through URIs.

In terms of the EndpointConfiguration interface, fromUri() makes no sense - since that is what a Component does. (Its really its main responsibility). There's no point forcing implementors to do the same thing twice in 2 separate APIs.

In terms of toUri() for an Endpoint; this is of dubious value IMHO; since its easily possible to create an Endpoint, configure it and then not be able to create a URI which truly reflects the configuration. Its way too easy to loose information; so why even bother trying to turn an Endpoint bean back into a URI? Just use the Endpoint object directly. Taking an Endpoint bean thats been configured somehow and turning it back into a URI just seems to be asking for trouble - when there's no real need to do that - just reuse the Endpoint object as is.

davsclaus:1317006594:2011-09-26T11:09:54.083+0000:1317006594:2011-09-26T11:09:54.083+0000:{quote}
@Claus, this is a good place to discuss. Add your comments and suggestions here. This solution is backwards compatible and changes nothing for 3rd party components (already developed or not). It solves a couple of problems and introduces the validation feature. How would you make it more general?
{quote}

The code which is committed is not backwards compatible.
hadrian:1317017146:2011-09-26T14:05:46.694+0000:1317017146:2011-09-26T14:05:46.694+0000:@Claus, please point out the problems and I will fix them. I introduce the preProcess method especially to support using the old configuration. The goal is indeed to fully support the old configuration.

To your other question, why a new interface? That's easy. The relation between an Endpoint and its configuration is not an 'is a' relationship, but a 'has a' relationship. More clearly (if needed) an Endpoint *has a* configuration. There is more of an is a relationship between a URI and EndpointConfiguration, but not really, it's more about representation than inheritance.

That allows one (tools for instance) to create and validate an EndpointConfiguration without creating an Endoint that servers another purpose and will end up in the context registry etc. Just basic design, stuff. We ourselves could use it, and I am planning on getting there, to have better coverage in our components of configuration combinations, obviously without the unnecessary creation of all the endpoints and routes that are sooo time consuming.

If you have more questions, don't hesitate to ask.
hadrian:1317017701:2011-09-26T14:15:01.989+0000:1317017701:2011-09-26T14:15:01.989+0000:@James, not sure if you're talking about the name of the method toUri or the functionality. Converting back to a uri is being done for ages by normalize. Could we find a better name, probably. There is also another purpose, the uri actually represents both the id and configuration of a communication channel. The issue is that the ends of the channel may be configured differently, because of parameters that are only relevant at one end. The logic of what the uri should look like at either end should be embedded in the EndpointConfiguration.
davsclaus:1317082580:2011-09-27T08:16:20.720+0000:1317082580:2011-09-27T08:16:20.720+0000:A new method was added to {{Component}}
- EndpointConfiguration createConfiguration(String uri) throws Exception;

However I guess Camel component developers may extend DefaultComponent instead of implementing the Component interface.
Likewise a new method was added to Endpoint, however as Endpoint have many methods, then I assume most people would extend DefaultEndpoint, to avoid having to implement all those methods.
davsclaus:1317083410:2011-09-27T08:30:10.033+0000:1317083410:2011-09-27T08:30:10.033+0000:I can see from one point a value in a light weight POJO configuration class.

However as James also says, ppl can configure endpoints in any way they like
- uris
- IoC
- Java code with new XXX and then invoke the appropriate setters
- etc.

And I guess there are situations where you cannot fully configure using uris solely. However I guess 95%+ currently can.
And most end users use uri configurations as of today.

If every Endpoint have a default no-arg ctr, then you could also consider the endpoint as a POJO, which have getter/setter for all the options it support. And thus also from a tooling point of view, it would be just as easy to configure, as a xxxConfiguration class would be. Creating an Endpoint using a default no-arg ctr, will of course not cause the Endpoint to be enlisted in registry and whatnot. And since its not started using start() it does not have side-effects.

Some of the Camel components have a configuration POJO such as the JmsConfiguration, MailConfiguration etc. The latter has a clone() which is needed when people can overlay default configurations by overriding options in endpoint uris. So each endpoint need to clone the default xxxConfiguration. And then set the options from the endpoint uri. This allows people to configure default configuration on the xxxComponent, and then still be able to adjust by overriding in endpoint uris.


kcbabo:1319795844:2011-10-28T17:57:24.940+0000:1319795844:2011-10-28T17:57:24.940+0000:Submitting a patch which provides an implementation of createConfiguration() in DefaultComponent.  Now DefaultEndpoint can ask the component to produce the configuration object vs. creating it directly in DefaultEndpoint.
davsclaus:1320621815:2011-11-07T07:23:35.998+0000:1320621815:2011-11-07T07:23:35.998+0000:Is there not any documentation that is needed? 
hadrian:1320645990:2011-11-07T14:06:30.963+0000:1320646099:2011-11-07T14:08:19.370+0000:Of course there is. There is one more patch I have for this issue before we can close it. The good part is that everything is transparent and backwards compatible.

I will add the documentation towards the end of the week, I am @apachecon this week with quite a few things to do.
ldywicki:1334800984:2012-04-19T10:03:04.586+0000:1334800984:2012-04-19T10:03:04.586+0000:Small changes in EndpointConfiguration interface. Usage of IntrospectionSupport in ConfigurationHelper. New constructor for DefaultEndpoint.
ldywicki:1334801065:2012-04-19T10:04:25.361+0000:1334801065:2012-04-19T10:04:25.361+0000:Base class for tests configuration tests. It uses JSR 303 to validate objects. Used implementation is Apache BVAL.
ldywicki:1334801123:2012-04-19T10:05:23.183+0000:1334801123:2012-04-19T10:05:23.183+0000:RMI component refactored to use EndpointConfiguration. Attached patch contains also unit test changes.
ldywicki:1334801212:2012-04-19T10:06:52.681+0000:1334801212:2012-04-19T10:06:52.681+0000:Re-attach core patch with grant for inclusion. Small changes in EndpointConfiguration interface. Usage of IntrospectionSupport in ConfigurationHelper. New constructor for DefaultEndpoint.
hadrian:1334815664:2012-04-19T14:07:44.588+0000:1334815664:2012-04-19T14:07:44.588+0000:The core and test patches look good. Looking at rmi now.

Being able to validate configurations should be a camel feature usable by tools, not only in camel-test. It cannot be in the core because of the extra dependencies, but we'll need at least an interface and a default impl (that may not do much) and a more serious jsr303 impl in a separate jar.

Thanks for the contributions. We expect much more from you!
hadrian:1335274401:2012-04-24T21:33:21.795+0000:1335274401:2012-04-24T21:33:21.795+0000:Lukasz, I think there's something missing in your new core patch. Can you please reattach? Thanks."
0,CAMEL-4225,Improvement,Major,None,"2.8.3, 2.9.0","
None
",Resolved,Fixed,"2.8.3, 2.9.0",Claus Ibsen,Donald Whytock,0,0,2011-07-13 16:16:43+00:00,2011-11-14 19:44:35+00:00,"A perpetually open connection to an email server can cause problems under various circumstances.  There should therefore be a ""disconnect"" option (default: false) that causes the connection to be closed after each action taken – mail read from a folder, a message flagged for deletion, a message sent, etc.","davsclaus:1310595086:2011-07-14T06:11:26.209+0000:1310595086:2011-07-14T06:11:26.209+0000:See nabble
http://camel.465427.n5.nabble.com/camel-mail-need-to-force-a-close-reconnect-tp4572997p4572997.html
davsclaus:1319943302:2011-10-30T10:55:02.028+0000:1319943302:2011-10-30T10:55:02.028+0000:There is now a disconnect option used by the consumer."
0,CAMEL-4224,Improvement,Major,2.7.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Rich Newcomb,James Green,0,2,2011-07-13 14:49:46+00:00,2012-08-28 04:59:59+00:00,"We are trying to use XMPP as an endpoint but we have a serious problem.


If the XMPP server is inaccessible, we cannot start Camel - it just issues a FailedToCreateProducerException exception and shuts itself down.


Given we are running Camel from an ActiveMQ instance this prevents critical infrastructure from being restarted when our XMPP server is offline.","davsclaus:1310595138:2011-07-14T06:12:18.616+0000:1310595138:2011-07-14T06:12:18.616+0000:You are welcome to work on a patch. Read here about contributing
http://camel.apache.org/contributing.html
rnewcomb:1346021621:2012-08-27T06:53:41.663+0000:1346021621:2012-08-27T06:53:41.663+0000:The attached file provides the following enhancements:

1.  Adds the ability for XMPP Producers to connect ""lazily"" to XMPP servers.  This will allow camel routes with XMPP producers to optionally start up even if the producer has not successfully connected to the XMPP server.

2.  Adds a robust connection polling capability for the XMPP consumer.  This allows a consuming route to re-establish the connection to an XMPP server (and continue receiving messages) when there is a disconnection event (e.g. network outage, etc).

3.  Fixes an occurrence of plain-text password logging when a password appears in the URI.

4.  Fixes some potential concurrency issues.

------

Two new URI parameters influence the behavior of the component :

*  testConnectionOnStartup  (default = true)  --  will cause the endpoint to throw an exception if a connection to the XMPP server can not be established at startup.  Allows lazy connections & polling-connection establishment when false.

* connectionPollDelay  (default = 10s) -- frequency with which a background thread will check and repair connections held by an XMPP consumer.
rnewcomb:1346021844:2012-08-27T06:57:24.405+0000:1346021844:2012-08-27T06:57:24.405+0000:The tests in the provided patch depend upon CAMEL-5541 to provide a controllable XMPP Server (Apache Vysper).    Also -- I will update wiki documentation, etc. once the patch is committed.
davsclaus:1346023324:2012-08-27T07:22:04.217+0000:1346023324:2012-08-27T07:22:04.217+0000:Thanks Rich for the patch. Its in the trunk as well with the other.

Fell free to work on the doc side of things. And keep up the good work, hope to see more patches from your hands.
davsclaus:1346023497:2012-08-27T07:24:57.389+0000:1346023497:2012-08-27T07:24:57.389+0000:Just a few notes.

1)
In the runnable you do a try .. catch and log error. I think this should be WARN level. And its IMHO a good idea to add a text saying that ""This exception is ignored."" to tell the reader of the logs that its a warning but we are okay, as we can continue, and the error is ignored. ERROR may trigger all kinds of alert monitoring systems to raise RED flags etc.

2)
When you stop a consumer/endpoint etc. it can essentially be started again. And when using thread pools you should remember to null the reference, so it will be re-created on start. As a thread pool which has been shutdown, can never ever be used again. So I added a = null in the code committed.


rnewcomb:1346075552:2012-08-27T21:52:32.887+0000:1346075552:2012-08-27T21:52:32.887+0000:Wiki and release notes updated.  Please let me know if there is anything else I can do to help complete this ticket.
rnewcomb:1346081035:2012-08-27T23:23:55.248+0000:1346081035:2012-08-27T23:23:55.248+0000:Attached a patch to change the logging of a caught exception in the Runnable block to the warn level and indicate that the exception is ignored.
davsclaus:1346101199:2012-08-28T04:59:59.783+0000:1346101199:2012-08-28T04:59:59.783+0000:Thanks Rich for the 2nd patch. Its applied to trunk."
0,CAMEL-4223,Improvement,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Willem Jiang,0,0,2011-07-13 13:11:29+00:00,2011-10-25 11:35:51+00:00,"WebClient which is used in CxfRsProducer should be thread safe, so we need to set the threadSafe option of CxfRsClientFactoryBean to be true.",njiang:1310534395:2011-07-13T13:19:55.389+0000:1310534395:2011-07-13T13:19:55.389+0000:Applied the patch into trunk.
0,CAMEL-4222,Improvement,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-07-13 12:00:41+00:00,2011-10-25 11:35:22+00:00,"When you use the ref component and you refer to a non existing endpoint, then it silently returns null, causing Camel to fail with a different error saying the ref component cannot be found


Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ref://xxx due to: No component found with scheme: ref


It should use mandatoryLookup, and those methods should throw NoSuchBeanException instead of IllegalArgumentException as they currently does. Then the failure message is much more precise.",
0,CAMEL-4221,New Feature,Minor,2.7.2,None,"
None
",Resolved,Later,Future,Claus Ibsen,Paddy Daly,0,1,2011-07-13 11:55:50+00:00,2012-07-06 08:48:49+00:00,"A nice feature would be to add a new Twain component.


So you could route images obtained from a scanner.


http://www.gnome.sk/Twain/jtp.html
or
http://asprise.com/product/jtwain/","rkettelerij:1310534651:2011-07-13T13:24:11.408+0000:1310534651:2011-07-13T13:24:11.408+0000:Both links refer to commercial software. Camel can't use these software products under the Apache license.
watcher:1310538063:2011-07-13T14:21:03.355+0000:1310538063:2011-07-13T14:21:03.355+0000:Maybe it something that I could request on the camel-extra project.
I havn't come across an open source solution yet. 

davsclaus:1310595189:2011-07-14T06:13:09.487+0000:1310595189:2011-07-14T06:13:09.487+0000:Read here about adding a new component
http://camel.apache.org/add-new-component-guide.html
davsclaus:1341535729:2012-07-06T08:48:49.385+0000:1341535729:2012-07-06T08:48:49.385+0000:Lets close old tickets with no demand"
0,CAMEL-4220,Improvement,Minor,None,2.8.0,"
None
",Resolved,Not A Problem,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-13 10:01:34+00:00,2011-09-10 07:33:18+00:00,"You may end up in situations where the example cannot start throwing exceptions


[ main] MessageDispatcherServlet ERROR Context initialization failed
org.apache.camel.RuntimeCamelException: javax.xml.bind.JAXBException: ""org.apache.camel.example.server.model"" doesnt contain ObjectFactory.class or jaxb.index","bvahdat:1310530432:2011-07-13T12:13:52.844+0000:1310530432:2011-07-13T12:13:52.844+0000:Hmmm, it's really odd, as jaxb.index was/is already there where it should be [1], namely correctly under the resources directory, compatible with the maven's standard layout!

To my understanding it's a jetty-plugin issue (jetty:run) which apparently doesn't setup the classpath correctly... However I didn't really dig into it.

[1] https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-spring-ws/src/main/resources/org/apache/camel/example/server/model/jaxb.index

Regards, Babak
davsclaus:1310530660:2011-07-13T12:17:40.565+0000:1310530660:2011-07-13T12:17:40.565+0000:Ah Babak thanks for pointing out. Indeed the file is there. Let me revert.
bvahdat:1310533057:2011-07-13T12:57:37.670+0000:1310533057:2011-07-13T12:57:37.670+0000:Hi Claus,

you've done a complete cleanup & quality-check on all example's README.txt today which is really precious. I really appreciate that!

In this context I've also realized that there're two examples where the maven's artifactId doesn't match with the directory name of the given example (in contrast to the rest of the examples).

But I also don't know if you would find it meaningful to fix that as well. Either in pom.xml (which would be the better approach I think) or by renaming of the given example's directory. For any case following the two examples directory names:

camel-example-loadbalancing-mina
camel-example-reportincident-ws-security-osgi

Regards, Babak


davsclaus:1310533667:2011-07-13T13:07:47.698+0000:1310533667:2011-07-13T13:07:47.698+0000:Thanks for reporting. I have renamed the directories. This keeps the name in the pom.xml, and thus also the name in the maven repo.

Some of the examples is published in central maven
http://repo2.maven.org/maven2/org/apache/camel/
bvahdat:1310536995:2011-07-13T14:03:15.503+0000:1310536995:2011-07-13T14:03:15.503+0000:Claus,

thanks for the fix however the last piece of the puzzle is still missing, that is https://svn.apache.org/repos/asf/camel/trunk/examples/pom.xml, that's it should be changed to
...
    <module>camel-example-loadbalancing</module>
...
    <module>camel-example-reportincident-wssecurity</module>
...

As here maven goes searching for the directory names by the module tag and NOT the artifactId's...And as a result the maven build is currently failing on the trunk. Sorry if I was the cause of any irritation :-(

davsclaus:1310538113:2011-07-13T14:21:53.256+0000:1310538113:2011-07-13T14:21:53.256+0000:Thanks again I will get that fixed as well
davsclaus:1310538113:2011-07-13T14:21:53.852+0000:1310538113:2011-07-13T14:21:53.852+0000:Thanks again I will get that fixed as well"
0,CAMEL-4219,Bug,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-13 08:57:53+00:00,2011-07-13 09:09:26+00:00,This example fails when running mvn camel:run as stated in the readme.txt file.,
0,CAMEL-4218,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-13 05:47:04+00:00,2011-07-13 06:40:19+00:00,"See
http://fusesource.com/forums/thread.jspa?messageID=11182&#11182


We should add support for in simple language to be able to do:



""${body[0][cool]}""




To access a body of type List<Map>, to access the first record in the list, and access the map with the key cool.


Currently you cannot do multiple chained [] in simple language.",
0,CAMEL-4217,Improvement,Trivial,None,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Benjamin P. O'Day,Benjamin P. O'Day,0,1,2011-07-12 18:44:32+00:00,2011-09-20 17:17:27+00:00,"should be able call autoStartup(String|boolean) on a route in the Java DSL (works fine in Spring)...would allow for conditional startup based on properties, etc...","davsclaus:1310467871:2011-07-12T18:51:11.406+0000:1310467871:2011-07-12T18:51:11.406+0000:If you add it as fluent builder in the Java DSL then I suggest to not name it setXXX as it indicate a java bean setter, which must be void type.

So I suggest to do
{code}
public RouteDefinition autoStartup(String autoStartup) {
  .. 
  return this;
}
{code}
boday:1310468533:2011-07-12T19:02:13.156+0000:1310468533:2011-07-12T19:02:13.156+0000:sounds good...should make it take either a String or boolean as well.
rkettelerij:1310473294:2011-07-12T20:21:34.603+0000:1310473651:2011-07-12T20:27:31.295+0000:I can see a String argument making sense in the Spring DSL, but in the Java DSL I would prefer just one method that accepts a boolean. What would be the benefit of a String argument? To support expressions I would expect to see {{autoStart(Expression)}}.
boday:1310474170:2011-07-12T20:36:10.040+0000:1310474170:2011-07-12T20:36:10.040+0000:just to support passing in properties that might be Strings...
davsclaus:1310500783:2011-07-13T03:59:43.713+0000:1310500885:2011-07-13T04:01:25.951+0000:Well frankly as Richard says the Java DSL uses the type (boolean, int, String, long) etc. for its parameters.

You can use dependency injection to inject a property that has the resolved value. In fact there is a JIRA ticket about to add a @PropertyValue or some other Camel annotation that can do this for you, so you don't need to rely on spring annotation or what else.

We may consider looking into that instead of this. This ensures consistency in the Java DSL (I guess also Scala and Groovy DSLs as well). 

But I can also see the point that people are lazy and to add a java property and annotation to have the resolved values seems much, when you could have done:
{code}
 .autoStartup(""{{shouldStartOrNot}}"")
{code}

However maybe we can add String for some of the commonly used parameters where people may want to have a property placeholder?
boday:1313573020:2011-08-17T17:23:40.301+0000:1313573020:2011-08-17T17:23:40.301+0000:added Java DSL support for route autoStartup(String|boolean)"
0,CAMEL-4216,Improvement,Trivial,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Donald Whytock,0,0,2011-07-12 16:27:13+00:00,2011-07-12 20:12:12+00:00,"Old Quartz link: http://www.opensymphony.com/quartz/


Current Quartz link: http://www.quartz-scheduler.org/","rkettelerij:1310472732:2011-07-12T20:12:12.481+0000:1310472732:2011-07-12T20:12:12.481+0000:Thanks for reporting. I've fixed the links. Note that it takes a bit of time to sync the changes from Confluence to http://camel.apache.org.

Also if you plan on making further contributions to the Camel docs I encourage you to read: http://camel.apache.org/how-do-i-edit-the-website.html





"
0,CAMEL-4215,Bug,Minor,2.7.2,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,dsmw,0,1,2011-07-12 15:59:15+00:00,2011-10-25 11:36:18+00:00,"Current implementation of deleteFile(String name) ignores the Endpoints 'stepwise' requirement. 


This was noticed when interfacing with a MVS ftp system with the operation failing silently as the resulting exception is swallowed by higher order code.


I've unfortunately been unable to create a test case that emulates the behavior, since the Apache FtpServer and associated mocks used within the test cases don't emulate the behavior of the MVS platform.


I believe other operations suffer the same problem (e.g rename).


I've attached a patch that corrects the issue. Existing test cases all pass, though someone will probably want to see if this implementation is the most efficient.",davsclaus:1310512063:2011-07-13T07:07:43.260+0000:1310512063:2011-07-13T07:07:43.260+0000:Thanks for the patch. I removed the code that swallowed the exception to surface the problem to the end user (as it will have the exception + stacktrace).
0,CAMEL-4214,Improvement,Trivial,2.7.2,"2.8.0, 2.7.4","
None
",Closed,Fixed,"2.8.0, 2.7.4",Christian Müller,Jonas Bengtsson,0,0,2011-07-12 11:59:57+00:00,2011-10-25 11:35:47+00:00,"When doing a features:list in karaf, the repository for camel is listed as repo-0, which looks ugly to me. It would be better if it were given a name on the form camel-${pom.version}, similar to the names used by other projects such as Karaf and ActiveMQ.","muellerc:1310559494:2011-07-13T20:18:14.012+0000:1310559494:2011-07-13T20:18:14.012+0000:The patch looks good. I will apply the patch after Camel 2.8 is out (we already started the release procedure).
muellerc:1310650493:2011-07-14T21:34:53.340+0000:1310650493:2011-07-14T21:34:53.340+0000:Committed r1146903
Thanks Jonas for the patch.
dkulp:1312795375:2011-08-08T17:22:55.602+0000:1312795375:2011-08-08T17:22:55.602+0000:Just need to re-open it to edit the fix version"
0,CAMEL-4213,Bug,Major,2.7.2,2.9.0,"
None
",Resolved,Fixed,2.9.0,Unassigned,Jonas Bengtsson,0,0,2011-07-12 10:18:54+00:00,2011-09-12 06:09:43+00:00,"When using the following simple route, the entity classes can't be found:



public void configure() throws Exception {
    from(""direct:test-in"").to(""jpa:mypackage.MyEntity1"");
    from(""jpa:mypackage.MyEntity2"").to(""log:test-out"");
}




The error message is:
09:43:55,417 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity1
09:43:55,467 | WARN  | rint Extender: 3 | ObjectHelper                     | g.apache.camel.util.ObjectHelper  698 | 78 - org.apache.camel.camel-core - 2.7.2 | Cannot find class: mypackage.MyEntity2


followed by many warnings about that the entityType is not known for the consumer.


The errors only occur when using blueprint to bootstrap the route. When using spring-dm everything works fine. The entity classes are located in the same bundle as the route. My guess is that it uses the wrong classloader.


JPA works fine otherwise. It is only the camel-jpa component I have problems with. camel-jpa is a very spring-centric module, using a spring TransactionManager and all, so I hope that my use case makes sense.


For completeness here is my blueprint-file:



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	default-activation=""eager"" xmlns:jpa=""http://aries.apache.org/xmlns/jpa/v1.1.0"">

	<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
		<package>mypackage</package>
	</camelContext>

	<bean id=""jpa"" class=""org.apache.camel.component.jpa.JpaComponent"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
		<property name=""transactionManager"" ref=""transactionManager"" />
	</bean>

	<bean id=""transactionManager"" class=""org.springframework.orm.jpa.JpaTransactionManager"">
		<property name=""entityManagerFactory"" ref=""entityManagerFactory"" />
	</bean>

	<reference id=""entityManagerFactory"" interface=""javax.persistence.EntityManagerFactory"" filter=""(osgi.unit.name=myunit)"" />

</blueprint>




The EntityManagerFactory is created by Aries Jpa, but it shouldn't be relevant for the question.","davsclaus:1314657181:2011-08-30T06:33:01.344+0000:1314657181:2011-08-30T06:33:01.344+0000:Can you attach the configuration of the EntityManagerFactory if possible. In essence a complete example is desirable to create an unit test in osgi blueprint that reproduces the issue, which then helps verify the fix implemented.
iocanel:1314658894:2011-08-30T07:01:34.527+0000:1314658894:2011-08-30T07:01:34.527+0000:ObjectHelper is using the Thread Context Class loader in order to resolve the class. Spring DM sets the Thread Context Class Loader to the class loader of the bundle that created the context, while blueprint does not.

I think that the problem could be solved if the OsgiClassResolver would use the bundle class loader in order to resolve classes.

I could work on a patch, if you like. 
davsclaus:1314661225:2011-08-30T07:40:25.755+0000:1314661225:2011-08-30T07:40:25.755+0000:I think Gert fixed camel-blueprint to set the TCCL as well.
davsclaus:1314661271:2011-08-30T07:41:11.405+0000:1314661271:2011-08-30T07:41:11.405+0000:A patch is of course welcome, but an osgi blueprint unit tests in camel-itest-osgi would be great.
iocanel:1315225259:2011-09-05T20:20:59.404+0000:1315225259:2011-09-05T20:20:59.404+0000:@Claus: Indeed the TCCL is set (at least in the trunk) and its enough to properly load the classes, when using the blueprint. I did a test project using openjpa, aries jpa & camel-blueprint and I didn't have any issues (using the trunk). 


@Jonas: Can you try again using the trunk (version 2.9-SNAPSHOT)?
ljb:1315273465:2011-09-06T09:44:25.426+0000:1315273465:2011-09-06T09:44:25.426+0000:It works with 2.9-SNAPSHOT! I also tried the same test on 2.7.3 which failed, so it seems that the bug has been fixed.
njiang:1315289566:2011-09-06T14:12:46.789+0000:1315289566:2011-09-06T14:12:46.789+0000:This issue may be fixed by CAMEL-4347.
davsclaus:1315778983:2011-09-12T06:09:43.189+0000:1315778983:2011-09-12T06:09:43.189+0000:Already fixed as part of another ticket."
0,CAMEL-4212,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-12 08:06:23+00:00,2011-08-08 17:20:04+00:00,All the http components in Camel should support mapping HttpServletRequest parameters to Camel Message headers where there can be multiple values for the same key. So in that case the value of the Camel Message header should be a List.,"davsclaus:1310446772:2011-07-12T12:59:32.671+0000:1310446772:2011-07-12T12:59:32.671+0000:Work in progress patch
davsclaus:1310446878:2011-07-12T13:01:18.312+0000:1310446878:2011-07-12T13:01:18.312+0000:I have attached a patch. It covers most of the stuff. It needs a bit polishing in the HttpHelper in the extractParameterName method etc.

The camel-ahc, and camel-http4 components has not been migrated.
And I think a few more unit tests would be appropriate.
davsclaus:1310631958:2011-07-14T16:25:58.802+0000:1310631958:2011-07-14T16:25:58.802+0000:This also applies for HTTP headers. 

And on the producer side, you may have a Camel Message that has a header which contains a list with multiple values.
It seems so the idiom is to do a .toString on the value. Which in Java outputs a: [xxx, yyy, zzz] for an ArrayList.


davsclaus:1310632745:2011-07-14T16:39:05.851+0000:1310632745:2011-07-14T16:39:05.851+0000:Okay was a bit more icky to implement as we have in Camel
- 4 http producers
- 2 consumers

And they all got a bit different API, and some works better out of the box with multi values and others dont.

Even Jetty on the consumer side had issues, so I had to use a different API to grab multi values.

camel-ahc worked the best out of the box, as it supported it without any code changes needed.
dkulp:1312795204:2011-08-08T17:20:04.543+0000:1312795204:2011-08-08T17:20:04.543+0000:
This was fixed between the original 2.8.0 release attempt and the redo so it's part of 2.8.0"
0,CAMEL-4211,Bug,Major,2.7.2,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-12 07:09:28+00:00,2011-07-12 09:23:02+00:00,"See nabble
http://camel.465427.n5.nabble.com/Problems-with-jetty-component-and-posts-with-more-then-one-value-for-a-field-tp4576908p4576908.html


The end user is using jetty producer component to send a HTTP POST/GET to some external client. In the endpoint uri he have the parameters, and there are 2 times to as parameter key. Currently Camel loses the 2nd to parameter.",
0,CAMEL-4210,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-07-11 11:44:08+00:00,2011-07-11 14:30:31+00:00,Added unit test on the camel-example-cxf-osgi so we can run some standalone test or test the example which is deployed into some other OSGi container like ServiceMix.,njiang:1310365831:2011-07-11T14:30:31.796+0000:1310365831:2011-07-11T14:30:31.796+0000:Applied the patch into trunk.
0,CAMEL-4209,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,8,6,2011-07-11 08:37:22+00:00,2013-01-18 16:00:11+00:00,"As Guice 3.0 is released for a while, we should consider to upgrade the guice version of camel-guice.
Here is the thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/camel-guice-td4565474.html","chengt:1311660823:2011-07-26T14:13:43.136+0000:1311660823:2011-07-26T14:13:43.136+0000:Willem, as I mentioned on the mailing list. This doesn't actually require a release of camel to fix.
Rather than have people wait for Camel 2.9.0 this can just be patched in guiceyfruit.
Because of the nature of maven's dependency system, this will allow us to exclude the offending version of guiceyfruit and use the guice 3.0 compatible version of it.

Unless the plan is to get rid of guiceyfruit?
I guess that makes sense as the project seems pretty 'dead'. There has been patches for this for a while now and no one has bothered to review them.
Which seems to have caused several projects to fork from it.
njiang:1311665779:2011-07-26T15:36:19.329+0000:1311665779:2011-07-26T15:36:19.329+0000:Hi Tim,
You are right, it more like a guicefruit issue instead of camel-guice issue.
After digging the guicefruit code a while, I found James did some change on the guice core, so guicefruit cannot work with guice which from the central maven out of box. There may be some work to do.
chengt:1314309152:2011-08-26T05:52:32.563+0000:1314309152:2011-08-26T05:52:32.563+0000:Hey Willem any update on this one?
Maybe the dependency on guicey-fruit isn't a good idea as it's not an active project.
njiang:1314554599:2011-08-29T02:03:19.268+0000:1314554599:2011-08-29T02:03:19.268+0000:Hi Tim,

guicefruit has some changes on the guice code, I didn't get the source.
Jame is in middle of some other project, I'm afraid this task will be hold for a while.
rocketraman:1319986247:2011-10-30T22:50:47.913+0000:1319986247:2011-10-30T22:50:47.913+0000:Guice 3.0 has been out since March...

Also note that the Guice bundle uses package versions 1.3, not 3.0 -- the former is the API version and the 3.0 is the ""marketing"" version. So the guiceyfruit and camel-guice bundles should import [1,2), not [2,3) as they do now.
surya108:1323531474:2011-12-10T23:37:54.662+0000:1323531474:2011-12-10T23:37:54.662+0000:Hi Raman:

Please see Camel CAMEL-4751 , I have submitted a patch for this and is now in 'Fixed Status'.

peace,
surya
chengt:1334816376:2012-04-19T14:19:36.307+0000:1334816376:2012-04-19T14:19:36.307+0000:Is there any update on this? It seems that it taking so long to do is a bad sign for Camel in general as it seems that certain technology choices that it's made has too tightly coupled it with dead dependencies?
davsclaus:1338612141:2012-06-02T12:42:21.157+0000:1338612141:2012-06-02T12:42:21.157+0000:Tim, contributions is welcome. 

davsclaus:1338612187:2012-06-02T12:43:07.847+0000:1338612187:2012-06-02T12:43:07.847+0000:And yes it would be nice to get rid of guicyfruit, and if that means loosing some capabilities, then so bo it. 
davsclaus:1341535694:2012-07-06T08:48:14.495+0000:1341535694:2012-07-06T08:48:14.495+0000:Anyone want to work on this? A camel-guice component that does not depend on guicyfruit and works with latest guice release?
jspboix:1355978192:2012-12-20T12:36:32.265+0000:1355978192:2012-12-20T12:36:32.265+0000:Here is a patch I've created that uses guice 3.0 and removes guiceyfruit dependency.

I've basically isolated the code from guiceyfruti to preserve the JSR 250 compliant module. Let me know if there is any further problem so I can fix it.
davsclaus:1356147415:2012-12-22T11:36:55.719+0000:1356147415:2012-12-22T11:36:55.719+0000:Josep, thanks for working on this.

The patch has license headers that has (c) Google.
Is it possible to have consistent license headers that is like the standard ASF license header?

I dont think we can accept a patch that has code that is not (c) under the ASF ICLA.
jspboix:1356164786:2012-12-22T16:26:26.160+0000:1356164786:2012-12-22T16:26:26.160+0000:Hi Claus, 

I took the code directly from google-guice repositories since these classes are no longer in 3.0 but they were required in order to use guiceyfruit modules and I didn't want to simply remove the Copyright notice (although its licensed under Apache License 2.0), how should I proceed to have the consisten ASF license header without incurring in copyright infringement? I'm no license expert so I would most grateful if you can give some guidance on the matter. Could it be possible by simply modifying the code?

Thanks for the feedback.
njiang:1356304291:2012-12-24T07:11:31.430+0000:1356304291:2012-12-24T07:11:31.430+0000:Just found the original place[1] of the two Google Copyright files, I think it should be OK to remove the header this time.
[1]http://code.google.com/p/google-guice/issues/detail?id=259&start=100 
jspboix:1356315839:2012-12-24T10:23:59.436+0000:1356315839:2012-12-24T10:23:59.436+0000:Thanks Willem, here is the patch with the fixed headers.
davsclaus:1357082175:2013-01-02T07:16:15.230+0000:1357082175:2013-01-02T07:16:15.230+0000:Thanks for the patch. We should get this into the 2.11 codebase, as this ticket is popular :)"
0,CAMEL-4208,Bug,Major,2.7.2,2.8.0,"
None
",Resolved,Not A Problem,2.8.0,Claus Ibsen,sumit,0,0,2011-07-11 04:47:05+00:00,2011-07-15 10:36:17+00:00,"Camel context stop throwing exception while trying to shut down on google app engine via 	ctx.stop();


Test case:
Start apache camel on Google app engine via start method as follows upon stopping context, exception occurs:
-----------------------------------------------



	public void stop() throws Exception {
		ctx.stop();
	}

	public void start() throws Exception {
		ctx = new GaeDefaultCamelContext();
		ctx.disableJMX();
		MyRegistry r = new MyRegistry();/*myregistry code is below*/
		r.init();
		ctx.setRegistry(r);
		tmpl = ctx.createProducerTemplate();
		ctx.start();
	}

	public static class MyRegistry extends SimpleRegistry{
		public void init(){
			put(""direct"",new DirectComponent());
			put(""browse"", new BrowseComponent());
			put(""class"", new ClassComponent());
			put(""bean"", new BeanComponent());
			put(""dataset"", new DataSetComponent());
			put(""mock"", new MockComponent());
			put(""language"", new LanguageComponent());
			put(""ref"", new RefComponent());
			put(""vm"", new VmComponent());
			put(""log"", new LogComponent());
			put(""properties"", new PropertiesComponent());
			
			
		}





------------------------------------------



at java.security.AccessControlContext.checkPermission(AccessControlContext.java:393)
	at java.security.AccessController.checkPermission(AccessController.java:553)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:166)
	at java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess(ThreadPoolExecutor.java:711)
	at java.util.concurrent.ThreadPoolExecutor.shutdownNow(ThreadPoolExecutor.java:1379)
	at java.util.concurrent.Executors$DelegatedExecutorService.shutdownNow(Executors.java:631)
	at org.apache.camel.impl.DefaultExecutorServiceStrategy.shutdownNow(DefaultExecutorServiceStrategy.java:352)
	at org.apache.camel.impl.DefaultShutdownStrategy.doShutdown(DefaultShutdownStrategy.java:304)
	at org.apache.camel.impl.ServiceSupport.shutdown(ServiceSupport.java:175)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:174)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1571)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1593)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1581)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1484)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:124)","davsclaus:1310347657:2011-07-11T09:27:37.851+0000:1310347657:2011-07-11T09:27:37.851+0000:Can you post the full stack trace?
mailtosumitsingh:1310696736:2011-07-15T10:25:36.734+0000:1310696736:2011-07-15T10:25:36.734+0000:Please find herer full stack trace:
641 [628168058@qtp-1679600408-11] WARN org.apache.camel.component.gae.context.GaeDefaultCamelContext - Error occurred while shutting down routes. This exception will be ignored.
java.security.AccessControlException: access denied (java.lang.RuntimePermission modifyThreadGroup)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:393)
	at java.security.AccessController.checkPermission(AccessController.java:553)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:166)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkAccess(DevAppServerFactory.java:191)
	at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:315)
	at java.lang.Thread.init(Thread.java:353)
	at java.lang.Thread.<init>(Thread.java:505)
	at org.apache.camel.util.concurrent.ExecutorServiceHelper$CamelThreadFactory.newThread(ExecutorServiceHelper.java:355)
	at java.util.concurrent.ThreadPoolExecutor$Worker.<init>(ThreadPoolExecutor.java:598)
	at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:913)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1325)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:106)
	at java.util.concurrent.Executors$DelegatedExecutorService.submit(Executors.java:639)
	at org.apache.camel.impl.DefaultShutdownStrategy.doShutdown(DefaultShutdownStrategy.java:126)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdown(DefaultShutdownStrategy.java:92)
	at org.apache.camel.impl.DefaultShutdownStrategy.shutdown(DefaultShutdownStrategy.java:84)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1452)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:124)
	at org.ptg.router.RoutingEngine.stop(RoutingEngine.java:247)
	at org.ptg.http2.handlers.StopRoutingEngine.process(StopRoutingEngine.java:31)
	at org.ptg.http2.handlers.StopRoutingEngine.doPost(StopRoutingEngine.java:24)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
	at com.google.appengine.tools.development.HeaderVerificationFilter.doFilter(HeaderVerificationFilter.java:35)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:58)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:122)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.BackendServersFilter.doFilter(BackendServersFilter.java:97)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
	at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:351)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
647 [628168058@qtp-1679600408-11] WARN org.apache.camel.component.gae.context.GaeDefaultCamelContext - Error occurred while shutting down service: org.apache.camel.impl.DefaultShutdownStrategy@15a8cf03. This exception will be ignored.
java.security.AccessControlException: access denied (java.lang.RuntimePermission modifyThread)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:393)
	at java.security.AccessController.checkPermission(AccessController.java:553)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:166)
	at java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess(ThreadPoolExecutor.java:711)
	at java.util.concurrent.ThreadPoolExecutor.shutdownNow(ThreadPoolExecutor.java:1379)
	at java.util.concurrent.Executors$DelegatedExecutorService.shutdownNow(Executors.java:631)
	at org.apache.camel.impl.DefaultExecutorServiceStrategy.shutdownNow(DefaultExecutorServiceStrategy.java:352)
	at org.apache.camel.impl.DefaultShutdownStrategy.doShutdown(DefaultShutdownStrategy.java:304)
	at org.apache.camel.impl.ServiceSupport.shutdown(ServiceSupport.java:175)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:174)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1571)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1593)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1581)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1484)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:124)
	at org.ptg.router.RoutingEngine.stop(RoutingEngine.java:247)
	at org.ptg.http2.handlers.StopRoutingEngine.process(StopRoutingEngine.java:31)
	at org.ptg.http2.handlers.StopRoutingEngine.doPost(StopRoutingEngine.java:24)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
	at com.google.appengine.tools.development.HeaderVerificationFilter.doFilter(HeaderVerificationFilter.java:35)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:58)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:122)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.BackendServersFilter.doFilter(BackendServersFilter.java:97)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
	at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:351)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
651 [628168058@qtp-1679600408-11] INFO org.apache.camel.impl.DefaultInflightRepository - Shutting down with no inflight exchanges.
711 [628168058@qtp-1679600408-11] WARN org.apache.camel.impl.DefaultExecutorServiceStrategy - Error occurred during shutdown of ExecutorService: java.util.concurrent.Executors$FinalizableDelegatedExecutorService@7daed910. This exception will be ignored.
java.security.AccessControlException: access denied (java.lang.RuntimePermission modifyThread)
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:393)
	at java.security.AccessController.checkPermission(AccessController.java:553)
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)
	at com.google.appengine.tools.development.DevAppServerFactory$CustomSecurityManager.checkPermission(DevAppServerFactory.java:166)
	at java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess(ThreadPoolExecutor.java:711)
	at java.util.concurrent.ThreadPoolExecutor.shutdownNow(ThreadPoolExecutor.java:1379)
	at java.util.concurrent.Executors$DelegatedExecutorService.shutdownNow(Executors.java:631)
	at org.apache.camel.impl.DefaultExecutorServiceStrategy.shutdownNow(DefaultExecutorServiceStrategy.java:352)
	at org.apache.camel.impl.DefaultExecutorServiceStrategy.doShutdown(DefaultExecutorServiceStrategy.java:434)
	at org.apache.camel.impl.ServiceSupport.shutdown(ServiceSupport.java:175)
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:174)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1571)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1593)
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1581)
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1484)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:124)
	at org.ptg.router.RoutingEngine.stop(RoutingEngine.java:247)
	at org.ptg.http2.handlers.StopRoutingEngine.process(StopRoutingEngine.java:31)
	at org.ptg.http2.handlers.StopRoutingEngine.doPost(StopRoutingEngine.java:24)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1166)
	at com.google.appengine.tools.development.HeaderVerificationFilter.doFilter(HeaderVerificationFilter.java:35)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.api.blobstore.dev.ServeBlobFilter.doFilter(ServeBlobFilter.java:58)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.apphosting.utils.servlet.TransactionCleanupFilter.doFilter(TransactionCleanupFilter.java:43)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.StaticFileFilter.doFilter(StaticFileFilter.java:122)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at com.google.appengine.tools.development.BackendServersFilter.doFilter(BackendServersFilter.java:97)
	at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418)
	at com.google.apphosting.utils.jetty.DevAppEngineWebAppContext.handle(DevAppEngineWebAppContext.java:70)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at com.google.appengine.tools.development.JettyContainerService$ApiProxyHandler.handle(JettyContainerService.java:351)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:326)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
	at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:938)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:755)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
716 [628168058@qtp-1679600408-11] INFO org.apache.camel.component.gae.context.GaeDefaultCamelContext - Uptime: 0.630 seconds
716 [628168058@qtp-1679600408-11] INFO org.apache.camel.component.gae.context.GaeDefaultCamelContext - Apache Camel 2.7.2 (CamelContext: camel-1) is shutdown in 0.105 seconds

davsclaus:1310697360:2011-07-15T10:36:00.125+0000:1310697360:2011-07-15T10:36:00.125+0000:Ah okay its not a bug. The exception is logged at WARN level, but it states in the message: That this exception will be ignored. 

641 [628168058@qtp-1679600408-11] WARN org.apache.camel.component.gae.context.GaeDefaultCamelContext - Error occurred while shutting down routes. This exception will be ignored.

The reason for this exception is that GAE does not allow Java applications to shutdown thread pools."
0,CAMEL-4207,Test,Minor,2.7.2,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Akitoshi Yoshida,0,0,2011-07-10 12:21:03+00:00,2011-07-11 07:33:04+00:00,"I noticed a minor deficiency in one of the CXF spring configuration tests in the current Camel trunk.
In org.apache.camel.component.cxf.spring.CxfEndpointBeanBusSettingTest, the two CXF bus instances are configured and referenced from the two Camel CXF endpoints.


This test runs without errors. But if you try to use this example in a real scenario where these CXF endpoints are actually referenced in the Camel route, you will get an NPE at the following code line.


    protected BindingInfo createBindingInfo() {
        BindingFactoryManager mgr = bus.getExtension(BindingFactoryManager.class);
                  ...
           bindingFactory = mgr.getBindingFactory(binding); //<--- this line


Caused by: java.lang.NullPointerException
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createBindingInfo(AbstractWSDLBasedEndpointFactory.java:338)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:252)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:147)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:162)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:124)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1843)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1771)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1556)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1448)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1338)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1316)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:204)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:99)
	... 31 more


This null BindingFactoryManager instance is the result from the configuration that uses CXFBusImpl directly, as


    <bean id=""cxf1"" class=""org.apache.cxf.bus.CXFBusImpl""/>
    <bean id=""cxf2"" class=""org.apache.cxf.bus.CXFBusImpl""/>


In CXF 2.4, the standard extensions are inserted into the bus at org.apache.cxf.bus.extension.ExtensionManagerBus's constructor.


Therefore, in order to get the BindingFactoryManager inserted into the bus to avoid this NPE, the ExtensionManagerBus class should be used instead of CXFBusImpl as the class parameter. Alternatively, as this is a spring configuration, we could use org.apache.cxf.bus.spring.SpringBus. But I think ExtensionManagerBus is more neutral and therefore probably more suitable as an example to the users.


    <bean id=""cxf1"" class=""org.apache.cxf.bus.extension.ExtensionManagerBus""/>
    <bean id=""cxf2"" class=""org.apache.cxf.bus.extension.ExtensionManagerBus""/>


I am attaching a patch file suggesting this change and also another minor change in the test program to add a few more assertion checks.


Regards, aki","ay:1310271894:2011-07-10T12:24:54.752+0000:1310271894:2011-07-10T12:24:54.752+0000:a minor correcton and cleanup to the spring beans xml and the test program.

M       trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanBusSettingTest.java
M       trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/spring/CxfEndpointBeansBusSetting.xml

njiang:1310340617:2011-07-11T07:30:17.838+0000:1310340617:2011-07-11T07:30:17.838+0000:Applied the patch into trunk with thanks to Aki.

njiang:1310340776:2011-07-11T07:32:56.082+0000:1310340776:2011-07-11T07:32:56.082+0000:As Camel 2.7.x is using CXF 2.3.x, there are some difference of the bus between CXF 2.3.x and CXF 2.4.x.
If you are using the CXF 2.3.x you have to wire the CXF components with the bus yourself, so I didn't back port the patch into 2.7.3."
0,CAMEL-4206,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-10 11:01:31+00:00,2011-07-10 12:30:49+00:00,We should upgrade to Scala 2.9.0. There is a SMX wrapped bundle for it in central repo now.,
0,CAMEL-4205,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-10 09:21:16+00:00,2011-07-10 09:25:02+00:00,"To make it easier to instruct the notifier to match only when a message by its index is done.


See the updated wiki page for details
https://cwiki.apache.org/confluence/display/CAMEL/NotifyBuilder",
0,CAMEL-4204,Test,Minor,2.7.2,None,"
None
",Closed,Cannot Reproduce,None,Unassigned,Robert Liguori,0,0,2011-07-10 02:44:22+00:00,2011-07-10 17:24:55+00:00,"mvn install


---------------------------------------------


Failed tests: 
  testZipFileUnmarshalDelete(org.apache.camel.impl.ZipDataFormatFileUnmarshalDeleteTest)


---------------------------------------------


See attached file","davsclaus:1310255031:2011-07-10T07:43:51.182+0000:1310255031:2011-07-10T07:43:51.182+0000:Does this test fail *every* time on your system?

Can you do a 
{code}
mvn clean
cd camel-core
mvn test -Dtest=ZipDataFormatFileUnmarshalDeleteTest
{code}

And attach the target/camel-core-test.log file

davsclaus:1310255086:2011-07-10T07:44:46.593+0000:1310255086:2011-07-10T07:44:46.593+0000:And btw are you going to use MS Vista for any production environment with Camel? Or is it just Vista is your developer environment?
gliesian:1310276711:2011-07-10T13:45:11.853+0000:1310276711:2011-07-10T13:45:11.853+0000:""And btw are you going to use MS Vista for any production environment with Camel?""
>> No.

Or is it just Vista is your developer environment?
>> Vista is just one of many test environments that I am using.
gliesian:1310276820:2011-07-10T13:47:00.537+0000:1310289750:2011-07-10T17:22:30.707+0000:""Does this test fail every time on your system?""

No... actually, at this time, I cannot recreate the issue...

However, subsequent runs have failed at different tests. 

gliesian:1310289895:2011-07-10T17:24:55.938+0000:1310289895:2011-07-10T17:24:55.938+0000:Since this issue appears not to be reproducable under controlled circumstances, I'm closing the issue.

Thanks."
0,CAMEL-4203,Bug,Trivial,None,None,"
None
",Resolved,Duplicate,2.8.0,Claus Ibsen,Robert Liguori,0,0,2011-07-10 02:03:06+00:00,2011-07-10 07:45:28+00:00,"[ERROR] Download or validation of 'http://camel.apache.org/book-in-one-page.html' failed: org.apache.camel.CamelException: Failed to convert the HTML to tidy Markup


=============================================================================================


[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Manual 2.7.2
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] — maven-antrun-plugin:1.2:run (create-prop) @ camel-manual —
[INFO] Executing tasks
[echo] Maven version: 2.7.2
[echo] OSGi version: 2.7.2
[INFO] Executed tasks
[INFO] 
[INFO] — properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-manual —
[INFO] 
[INFO] — maven-remote-resources-plugin:1.1:process (default) @ camel-manual —
[INFO] 
[INFO] — maven-html-to-pdf:2.7.2:compile (default) @ camel-manual —
[INFO] Downloading: http://camel.apache.org/book-in-one-page.html
[ERROR] Download or validation of 'http://camel.apache.org/book-in-one-page.html' failed: org.apache.camel.CamelException: Failed to convert the HTML to tidy Markup
[INFO] Stored dummy file: C:\apache-camel-2.7.2\tooling\camel-manual\target/site/manual/camel-manual-2.7.2.html since download of http://camel.apache.org/book-in-one-page.html failed.
[INFO] 
[INFO] — build-helper-maven-plugin:1.5:attach-artifact (attach-artifacts) @ camel-manual —
[INFO] 
[INFO] — ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-manual —
[INFO] 
[INFO] — maven-install-plugin:2.3.1:install (default-install) @ camel-manual —
[INFO] Installing C:\apache-camel-2.7.2\tooling\camel-manual\pom.xml to C:\Users\Admin\.m2\repository\org\apache\camel\camel-manual\2.7.2\camel-manual-2.7.2.pom
[INFO] Installing C:\apache-camel-2.7.2\tooling\camel-manual\target\site\manual\camel-manual-2.7.2.html to C:\Users\Admin\.m2\repository\org\apache\camel\camel-manual\2.7.2\camel-manual-2.7.2.html",davsclaus:1310255128:2011-07-10T07:45:28.866+0000:1310255128:2011-07-10T07:45:28.866+0000:Duplicate of CAMEL-3774
0,CAMEL-4202,Improvement,Major,2.7.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,1,3,2011-07-09 14:05:41+00:00,2011-09-19 20:32:51+00:00,"See nabble
http://camel.465427.n5.nabble.com/slow-reply-for-jms-component-when-url-contains-replyTo-tp4563075p4563075.html


When using persistent replyTo queues for request/reply over JMS, then the ReplyManager should be faster to pickup replies.
The default spring-jms timeout is 1 sec and it impacts the performance.


Likewise the receiveTimeout should not be set on the reply managers as that does not apply here.","davsclaus:1310197429:2011-07-09T15:43:49.467+0000:1310197429:2011-07-09T15:43:49.467+0000:Okay I think there is a tradeoff if we lower the spring receiveTimeout to lower than 1 sec. For example if we use 1 millis, then it will overload and send pull packets to the AMQ broker to receive messages.

The reason why temporary queues is faster is because they dont have any JMSMessageListener as the persistent does. So with temporary queues it can pull every 1sec and pickup messages as fast as possible, as the received message is always for the reply manager.

davsclaus:1310197465:2011-07-09T15:44:25.641+0000:1310197465:2011-07-09T15:44:25.641+0000:A workaround is for the end user to use ?receiveTimeout=250, to eg pull messages 4 times per sec and thus be 4x faster.


davsclaus:1310197542:2011-07-09T15:45:42.519+0000:1310197542:2011-07-09T15:45:42.519+0000:If there is an use case for using persistent queues that are *exclusive* for the Camel consumer, then we can avoid using JMSMessageSelector and thus be as fast as temporary queues.


davsclaus:1310197742:2011-07-09T15:49:02.182+0000:1310197742:2011-07-09T15:49:02.182+0000:The reason why the persistent reply to example at the nabble discussion, is because Camel will have to use a Dummy value for JMSMessageSelector when there is no expected replies to receive. And it thus takes 1 sec. for it to timeout, before it can update the JMSMessageSelector with the CorrelationsIDs to receive.

We may try to suspend/resume the message listener container, but we could potential end up with some synchronized issue where we would suspend the listener, where as in the mean time on another thread a new message is being send. And thus we may miss resume the listener. Therefore we end up not pulling the message from the AMQ broker.

We should add some documentation / FAQ as the drawbacks of using persistent queues.
davsclaus:1313210771:2011-08-13T12:46:11.377+0000:1313210771:2011-08-13T12:46:11.377+0000:A new option is to be introduced: replyToType and its an enum with the following options:
 Temporary, Shared, Exclusive

So if you set the replyToType=Exclusive then Camel assumes the reply queue is exclusive for Camel and will not use any JMS message selectors, as it pickup all the messages arriving on that queue. This means its as fast as temporary queues.

In fact this will also help highlight the fact the current fixed replyTo queues are consider Shared by default.

I will add better documentation at the jms page to help highlight this.
davsclaus:1313216202:2011-08-13T14:16:42.217+0000:1313216202:2011-08-13T14:16:42.217+0000:The replyToType=Exclusive is exclusive per CamelContext. So if you run in a clustered environment, then each node should use an unique replyTo destination name. 

See discussion on nabble on that link from the top.
davsclaus:1313216538:2011-08-13T14:22:18.065+0000:1313216538:2011-08-13T14:22:18.065+0000:Patch with code
davsclaus:1313287664:2011-08-14T10:07:44.990+0000:1313287664:2011-08-14T10:07:44.990+0000:Updated wiki page with documentation"
0,CAMEL-4201,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-09 13:36:42+00:00,2011-07-09 13:38:30+00:00,"We should output how long time it takes to execute the test method. We do have some start/end markers in the logs.


Now it outputs the took line in the logs as shown


2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - ******************************************************************************** 
2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - Testing done: testDebugger(org.apache.camel.test.patterns.DebugJUnit4Test) 
2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - Took: 0.020 seconds (20 millis) 
2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - ********************************************************************************",
0,CAMEL-4200,Task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-09 11:08:15+00:00,2011-07-23 09:13:37+00:00,"As discussed on @dev
http://camel.465427.n5.nabble.com/DISCUSS-Remove-or-reduce-ANT-support-for-Camel-examples-tp4563886p4563886.html


We should remove the ANT support for our examples. We may create a new Hello World example that has support for both Maven and ANT, so end users have one example to easily get started.


But all the other examples should have ANT support removed as its to painful to keep and maintain so they actually works.",
0,CAMEL-4199,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-09 09:46:36+00:00,2011-07-09 10:08:10+00:00,"For example in unit tests you may want to say that the message body should not be a String type etc:



mock.message(0).body().not().isInstanceOf(String.class);




eg we need the not() method in the ValueBuilder",
0,CAMEL-4198,Bug,Minor,2.7.1,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,surya,0,0,2011-07-08 15:16:26+00:00,2011-09-19 19:40:04+00:00,"Camel Bindy is not handling null values in KVP. It throws ArrayIndexOutOfBounds Exception.
From the source below if FIX message has a key value pair with null value i.e (eg: 43=1|63=|64=xyz) the key 63 has no value an while parsing it throws exception for keyValuePair[1].


           // Get KeyValuePair
            String[] keyValuePair = s.split(getKeyValuePairSeparator());


            // Extract Key
            int key = Integer.parseInt(keyValuePair[0]);


            // Extract key value
            String value = keyValuePair[1];","davsclaus:1310110266:2011-07-08T15:31:06.039+0000:1310110266:2011-07-08T15:31:06.039+0000:Do you want to attempt to provide a patch with a fix?

It seems you may have to check the length of the keyValuePair is > 1 to avoid the NPE.

And if possible an unit test would be really good as well.
davsclaus:1310110286:2011-07-08T15:31:26.620+0000:1310110286:2011-07-08T15:31:26.620+0000:You can read about contributing here
http://camel.apache.org/contributing.html
surya108:1310110677:2011-07-08T15:37:57.079+0000:1310110677:2011-07-08T15:37:57.079+0000:Hi Claus,
 
Thanks for providing information on how to contribute, I will attempt to fix this one and keep posted.

Regards,
davsclaus:1311390122:2011-07-23T11:02:02.690+0000:1311390122:2011-07-23T11:02:02.690+0000:Any update on a patch?
surya108:1311459833:2011-07-24T06:23:53.118+0000:1311459833:2011-07-24T06:23:53.118+0000:Just started working on it, will submit the patch once done.
surya108:1311527975:2011-07-25T01:19:35.085+0000:1311527975:2011-07-25T01:19:35.085+0000:Patch for Issue 4198 is attached.

Fix in file BindyKeyValuePairFactory.java in package org.apache.camel.dataformat.bindy.

Fix made to check KeyValuePair String[] length>1.

No Unit tests added or updated. Only updated input fix message used for testing in Unit Tests. Added new tag with no value for tag 55.
""file://src/test/data/fix?noop=true"";

Without patch unit tests would fail for problem stated in the jira description.

Fix now handles key:value in fix message with no 'value' populated as well.




surya108:1311531511:2011-07-25T02:18:31.649+0000:1311531511:2011-07-25T02:18:31.649+0000:updated test file with tag 55 (no value).
davsclaus:1311594112:2011-07-25T19:41:52.251+0000:1311594112:2011-07-25T19:41:52.251+0000:Surya

Can you re-attach the files and make sure to [x] in grant license to Apache, when you attach the files?
We cannot accept any patches if this is not done.

The file icon should have an Apache feather, when you have done the [x]
surya108:1311792588:2011-07-28T02:49:48.174+0000:1311792588:2011-07-28T02:49:48.174+0000:Reattaching files with ""Grant License to ASF"".
davsclaus:1311809949:2011-07-28T07:39:09.703+0000:1311809949:2011-07-28T07:39:09.703+0000:Thanks for the patch."
0,CAMEL-4197,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-08 13:20:05+00:00,2011-07-08 13:21:14+00:00,The QuartzScheduler lifecycle is handled by QuartzComponent and we should let it startup the scheduler. The component does this best as it has logic to ensure all that the scheduler is only started after the entire CamelContext has been fully initialized and started. This is to ensure the scheduler do not trigger any action that may send in messages to Camel routes and whatnot too early (when CamelContext is not really ready).,
0,CAMEL-4196,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-08 13:00:43+00:00,2011-07-08 13:01:38+00:00,"Currently they just log a WARN if they have been misconfigured, such as having no time details.
Instead we should fail with an exception stating this problem instead (eg prefer to fail fast if something is wrong)",
0,CAMEL-4195,Improvement,Major,None,None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Daniel Kulp,Freeman Yue Fang,0,0,2011-07-08 10:46:55+00:00,2011-10-25 11:36:14+00:00,"to keep it same as other feature like camel-jms, camel-bam, etc","njiang:1310094622:2011-07-08T11:10:22.741+0000:1310094622:2011-07-08T11:10:22.741+0000:Applied patch into Camel trunk with thanks to Freeman.
dkulp:1310097019:2011-07-08T11:50:19.872+0000:1310097019:2011-07-08T11:50:19.872+0000:
This should be ""update all features to use commons-pool instead of the servicemix wrapper""
dkulp:1310105894:2011-07-08T14:18:14.271+0000:1310105894:2011-07-08T14:18:14.271+0000:
Removed the commons-pool dep from camel-cxf entirely.   The JMS provider (activemq) should provide whatever is needed for it to work."
0,CAMEL-4194,Bug,Major,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-07-08 10:31:30+00:00,2011-10-25 11:35:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/Removing-routes-programmatically-tp4556741p4556741.html


If you have multiple consumers on the exact same JMS endpoint uri, and if you remove on of the consumers (eg from a route), then the singleton JmsEndpoint will be stopped. This causes the other active consumers to not receive any messages anymore.


This problem is only if you remove the route. If you stop route then there is no problem.",
0,CAMEL-4193,Improvement,Trivial,None,,"
None
",Resolved,Fixed,None,Jonathan Anstey,James Green,0,0,2011-07-08 09:24:58+00:00,2011-07-08 12:03:26+00:00,"http://camel.apache.org/book-getting-started.html


Under ""Endpoints"" there are paragraphs indented under bullet points. They should not be underneath bullet points. Separate each paragraph with a blank line should fix the problem properly, hard to read otherwise.","janstey:1310097806:2011-07-08T12:03:26.463+0000:1310097806:2011-07-08T12:03:26.463+0000:James, thanks for pointing that out. It is fixed now at https://cwiki.apache.org/confluence/display/CAMEL/Book+Getting+Started

BTW in the future if you'd like to make changes yourself, see this page:
http://camel.apache.org/how-do-i-edit-the-website.html

We always love contributions :)"
0,CAMEL-4192,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-07-08 07:44:27+00:00,2011-07-09 12:43:38+00:00,"As Axiom 1.2.12 is released for a while, we should consider to upgrade it.","davsclaus:1310177529:2011-07-09T10:12:09.869+0000:1310177529:2011-07-09T10:12:09.869+0000:Willem whats the status of this ticket?
njiang:1310186618:2011-07-09T12:43:38.666+0000:1310186618:2011-07-09T12:43:38.666+0000:Update the axiom version in the pom.xml.
"
0,CAMEL-4191,Task,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Won't Fix,"2.7.3, 2.8.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-07-08 06:36:19+00:00,2011-10-25 11:36:10+00:00,"The camel-jibx component uses maven-antrun-plugin to call the JiBX binding compile task.


Even if this plugin is called during process-test-classes (as it uses target/test-classes, if we try to build using:


mvn clean install -Dmaven.test.skip=true


it fails:


[INFO] — maven-antrun-plugin:1.5:run (default) @ camel-jibx —
[INFO] Executing tasks


main:
Error: Cannot find information for class org.apache.camel.dataformat.jibx.PurchaseOrder; on mapping element at (line 19, col 82, in purchaseOrder-jibx.xml)
Error running binding compiler
org.jibx.runtime.JiBXException: Binding purchaseOrder-jibx.xml is unusable because of validation errors
        at org.jibx.binding.Utility.loadBinding(Utility.java:377)
        at org.jibx.binding.Utility.loadFileBinding(Utility.java:439)
        at org.jibx.binding.Compile.compile(Compile.java:217)
        at org.jibx.binding.ant.CompileTask.execute(CompileTask.java:248)
        at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
        at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
        at org.apache.tools.ant.Task.perform(Task.java:348)
        at org.apache.tools.ant.Target.execute(Target.java:390)
        at org.apache.tools.ant.Target.performTasks(Target.java:411)
        at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1397)
        at org.apache.tools.ant.Project.executeTarget(Project.java:1366)
        at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:265)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)


The maven-antrun-plugin is called whereas it shouldn't.","rkettelerij:1310081484:2011-07-08T07:31:24.804+0000:1310081484:2011-07-08T07:31:24.804+0000:@JB, is your copy of camel-jibx up-to-date? I've replaced the use of the maven-ant-run plugin in camel-jibx not too long ago with a native maven-jibx-plugin. See CAMEL-4140.
jbonofre:1310081700:2011-07-08T07:35:00.760+0000:1310081700:2011-07-08T07:35:00.760+0000:I have updated my local copy but, FYI, I'm working on camel-2.7.x.

I guess that you updated on trunk ?
davsclaus:1310085034:2011-07-08T08:30:34.140+0000:1310085034:2011-07-08T08:30:34.140+0000:If you use -Dtest=false then it works.
rkettelerij:1310086602:2011-07-08T08:56:42.224+0000:1310086602:2011-07-08T08:56:42.224+0000:@JB, yeah I updated trunk, it's fixed in 2.8.
jbonofre:1310098906:2011-07-08T12:21:46.960+0000:1310098906:2011-07-08T12:21:46.960+0000:Richard already fixed on trunk and, as Claus said, -Dtest=false works fine."
0,CAMEL-4190,Improvement,Major,"2.5.0, 2.6.0, 2.7.0, 2.7.1, 2.7.2",2.7.3,"
None
",Closed,Fixed,2.7.3,Willem Jiang,Willem Jiang,0,0,2011-07-08 03:31:40+00:00,2011-10-25 11:36:02+00:00,"There is a annoying WARNING message（which is harmless) when creating the camel-cxf endpoint from the spring bean.



ReflectionServiceFactoryBean   WARN  A
JAX-WS Annotation was found on com.acme.BusinessServicePort while using the
Simple frontend.  For better results, use the JAX-WS frontend.




You can find more information here[1].
[1]http://camel.465427.n5.nabble.com/Warning-in-cxf-endpoint-configuration-tp4561812p4561812.html","njiang:1310067173:2011-07-08T03:32:53.346+0000:1310067173:2011-07-08T03:32:53.346+0000:As we removed the CxfEndpointBean from Camel 2.8, this issue is already fix."
0,CAMEL-4189,Improvement,Major,2.7.2,Future,"
None
",Resolved,Won't Fix,Future,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2011-07-07 20:17:11+00:00,2012-07-06 08:47:40+00:00,"Currently, Camel provides a Karaf config.properties to exclude some system packages provided by tiers bundles (such as javax.activation or javax.xml.bind).


We should avoid to override config.properties file as it's a pure Karaf file. In place, Camel should override jre.properties.","davsclaus:1310177924:2011-07-09T10:18:44.758+0000:1310177924:2011-07-09T10:18:44.758+0000:Isn't the config.properties not only used for the karaf validate plugin?
I dont suppose its part of the release?

Also in the config.properties there is JDK1.5 specific stuff, we should remove that as we only support JDK1.6+
davsclaus:1320621850:2011-11-07T07:24:10.097+0000:1320621850:2011-11-07T07:24:10.097+0000:Jean what is the status of this?
davsclaus:1341535660:2012-07-06T08:47:40.374+0000:1341535660:2012-07-06T08:47:40.374+0000:Karaf now ships with a cxf properties file people should use. We have noted this in our release notes."
0,CAMEL-4188,Bug,Critical,2.7.2,"2.7.3, 2.8.0","
None
",Closed,Not A Problem,"2.7.3, 2.8.0",Jean-Baptiste Onofré,Mike Gardiner,1,2,2011-07-07 19:27:02+00:00,2011-10-25 11:35:50+00:00,"Attempting to install the camel-mail feature results in the following error:


Error executing command: Unable to resolve module org.apache.camel.camel-mail [73.0] because it is exposed to package 'javax.activation' from org.apache.felix.framework [0] and org.apache.servicemix.specs.activation-api-1.1 [66.0] via two dependency chains.


Chain 1:
  org.apache.camel.camel-mail [73.0]
    import: (package=javax.activation)










    export: package=javax.activation
  org.apache.felix.framework [0]


Chain 2:
  org.apache.camel.camel-mail [73.0]
    import: (&(package=org.apache.camel.impl)(version>=2.7.0)(!(version>=2.8.0)))










    export: package=org.apache.camel.impl; uses:=javax.xml.bind.annotation
  org.apache.camel.camel-core [71.0]
    import: (package=javax.xml.bind.annotation)










    export: package=javax.xml.bind.annotation; uses:=javax.activation
  org.apache.servicemix.specs.jaxb-api-2.2 [67.0]
    import: (&(package=javax.activation)(version>=1.1.0))










    export: package=javax.activation
  org.apache.servicemix.specs.activation-api-1.1 [66.0]


After forcing the install with features:install -c camel-mail the camel-mail bundle refuses to start because of the error indicated above.  It looks like there's several exports of the javax.activation package which causes the error.","jbonofre:1310040268:2011-07-07T20:04:28.321+0000:1310040303:2011-07-07T20:05:03.625+0000:A simple workaround is to comment javax.activation in Karaf etc/jre.properties:

[...]
jre-1.6= \
 javax.accessibility, \
 #javax.activation, \
 javax.activity, \
 javax.annotation, \
 javax.annotation.processing, \
 javax.crypto, \
[...]

I'm gonna add a jre.properties sample in Camel to track this.
jbonofre:1310040538:2011-07-07T20:08:58.964+0000:1310040538:2011-07-07T20:08:58.964+0000:FYI, the config.properties already excludes javax.annotation from system package.

You can find the config.properties to use here:

http://svn.apache.org/repos/asf/camel/tags/camel-2.7.2/platforms/karaf/features/src/main/resources/config.properties
jbonofre:1310040563:2011-07-07T20:09:23.727+0000:1310040563:2011-07-07T20:09:23.727+0000:The provided config.properties is already up to date.
mgardiner:1310041799:2011-07-07T20:29:59.002+0000:1310041799:2011-07-07T20:29:59.002+0000:Jean,

I appreciate the fact that we can work around this issue but instead of forcing all users of Karaf who wish to host Camel to update their config.properties file wouldn't it make more sense to fix the camel-mail bundle to rely on the packages already exported in Karaf in bundle 0 and not install another activation library?  Or could we be more specific in our import to use the javax.activation package from the ServiceMix Activation bundle? 
dkulp:1310042097:2011-07-07T20:34:57.971+0000:1310042110:2011-07-07T20:35:10.541+0000:Mike,

The reverse argument could also be made:  shouldn't Karaf automatically exclude all the API's from bundle 0 that are known to not work correctly within OSGi?   JAXB, JAX-WS, activation, mail, StAX, etc...    Maybe even have Karaf provide (start-level=10) bundles of those that DO work correctly?


mgardiner:1310043406:2011-07-07T20:56:46.982+0000:1310043406:2011-07-07T20:56:46.982+0000:So up to this point we have not had a problem with Camel in OSGi.  We have not had to change the jre.properties. The only issue we have now is with camel-mail. We are using camel-jaxb without any problems.  What is interesting is that if I change the OSGi container in Karaf from Felix to Equinox the problem goes away. Is this a Karaf bug or a Camel bug.  I have no preference either way.  I would just like the components to work out of the box with no manual steps involved.

Thoughts?
dwhytock:1310044029:2011-07-07T21:07:09.561+0000:1310044029:2011-07-07T21:07:09.561+0000:Actually, there's a problem with JavaMail, such that it doesn't handle attachments and multiparts properly in OSGi. (Kenai.com's response is it's a problem they ""haven't had time to fix"".) Perhaps what you're seeing is the manifestation of an attempt to work around the JavaMail problem?

mgardiner:1310044704:2011-07-07T21:18:24.420+0000:1310044704:2011-07-07T21:18:24.420+0000:I think that's accurate.
ffang:1310065610:2011-07-08T03:06:50.029+0000:1310065610:2011-07-08T03:06:50.029+0000:Hi Mike,

About camel-mail can't work on karaf out-of-box, I think the reason is that karaf is designed to keep as small/simple as possible, it not by default ship camel features with it and so not tune the jre.properties/customer.properties to accommodate camel related features by default. However, Apache servicemix already do this job for you, you can take a look at the jre.properties/customer.properties shipped with sevicemix and you can tell the difference with that in karaf. Actually you can edit $SMX4_HOME/etc/org.apache.karaf.features.cfg and easily disable JBI components there if you don't need the JBI stuff, which can make servicemix as simple as karaf and it's a better start to install camel related features there.

Regards
Freeman
njiang:1310066967:2011-07-08T03:29:27.490+0000:1310066967:2011-07-08T03:29:27.490+0000:Hi Mike

I just have some comments for your below statement
""What is interesting is that if I change the OSGi container in Karaf from Felix to Equinox the problem goes away. Is this a Karaf bug or a Camel bug."" 

As there are some classloader detail implementation difference between the Felix and Equinox, you can find some interesting things if you switch the OSGi container.  It looks like a Felix bug, not a Karaf bug or a Camel bug :)  

Willem
mgardiner:1310454847:2011-07-12T15:14:07.123+0000:1310454847:2011-07-12T15:14:07.123+0000:When CAMEL-4189 is fixed this will resolve the issue we are seeing."
0,CAMEL-4187,Bug,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Guillaume Nodet,Guillaume Nodet,0,0,2011-07-07 18:17:22+00:00,2011-07-07 18:19:50+00:00,No Desc,
0,CAMEL-4186,Improvement,Major,None,None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Daniel Kulp,Daniel Kulp,0,0,2011-07-07 17:08:35+00:00,2011-10-25 11:35:26+00:00,"Currently, all the cxf deps (and the cxf-bundle) are direct deps of the ""camel-cxf"" component.  It would be good (until CXF releases 2.4.2 which has obr support) to move those to a separate cxf feature and have camel-cxf depend on that.  The camel-cxf can also then use a version range to pick up the ""cxf"" feature so it will work with the features.xml that CXF provides OR use the camel provided one if needed.",
0,CAMEL-4185,Bug,Major,2.7.2,,"
None
",Closed,Not A Problem,None,Unassigned,Miguel González,0,0,2011-07-07 14:14:23+00:00,2011-07-08 11:41:51+00:00,"I'm trying doing some testing to expose an OSGi/iPOJO component with a REST interface too. When I install the bundle on Camel-JOnAS, CXFRS can't build the route because it can't find any resource classes, even if I indicated it properly in the URI. To test, I'm using the classes found in https://svn.apache.org/repos/asf/camel/tags/camel-2.2.0/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/testbean/ and launching with the following one:


ExampleCXF.java
public class ExampleCXF extends RouteBuilderComponent {
    private static final String CXF_RS_ENDPOINT_URI =
            ""cxfrs://http://localhost:9000/customerservice?resourceClasses=org.ow2.jonas.sample.jaxrs.api.ICustomerService"";
    /**
     * The logger.
     */
    private Log logger = LogFactory.getLog(this.getClass());

    private ICamelService camelService;

    /**
     * HTTP port number.
     */
    private String httpPort = ""9000"";

    /**
     * Name of files exchanged in CXF. Used by the second route.
     */
    private Map<String, String> filenames = new HashMap<String, String> ();

    /**
     * Constructor: saves the BundleContext.
     */
    public ExampleCXF(final BundleContext bundleContext) {
        super(bundleContext);
    }


    /**
     * Adds the OSGi HTTP service port and the
     * <code>target/fileToHelloService</code> directory into
     * {@link RouteBuilderComponent#registryReplacements}, calls
     * {@link RouteBuilderComponent#start()} and launches a self-test.
     */
    @Override
    public void start() throws Throwable {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        System.out.println(""Current thread class loader = "" + cl);
        try{
            Thread.currentThread().setContextClassLoader(ExampleCXF.class.getClassLoader());
            System.out.println(""Bundle class loader = "" + ExampleCXF.class.getClassLoader());
            super.start();
        }finally {
            Thread.currentThread().setContextClassLoader(cl);
        }

    }

    @Override
    public void stop() throws Throwable {
        super.stop();
        logger.debug(""Going down."");
    }

    /**
     * Add routes to the CAMEL context.
     */
    @Override
    public void configure() throws Exception {
        super.configure();
        from(CXF_RS_ENDPOINT_URI).process(new Processor() {

            public void process(Exchange exchange) throws Exception {
                Message inMessage = exchange.getIn();
                // Get the operation name from in message
                String operationName = inMessage.getHeader(CxfConstants.OPERATION_NAME, String.class);
                if (""getCustomer"".equals(operationName)) {
                    String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class);
                    if(!""GET"".equals(httpMethod)) {
                        throw new IllegalAccessException(""Get a wrong http method"");
                    }
                    String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class);
                    // The parameter of the invocation is stored in the body of in message
                    String id = (String) inMessage.getBody(String.class);
                    if (""/customerservice/customers/126"".equals(path)) {
                        Customer customer = new Customer();
                        customer.setId(Long.parseLong(id));
                        customer.setName(""Willem"");
                        // We just put the response Object into the out message body
                        exchange.getOut().setBody(customer);
                    } else {
                        if (""/customerservice/customers/123"".equals(path)) {
                            // send a customer response back
                            Response r = Response.status(200).entity(""customer response back!"").build();
                            exchange.getOut().setBody(r);
                            return;
                        }
                        if (""/customerservice/customers/456"".equals(path)) {
                            Response r = Response.status(404).entity(""Can't found the customer with uri "" + path).build();
                            throw new WebApplicationException(r);
                        } else {
                            throw new RuntimeCamelException(""Can't found the customer with uri "" + path);
                        }
                    }
                }
                if (""updateCustomer"".equals(operationName)) {
                    if(!""header1;header2"".equals(inMessage.getHeader(""test""))) {
                        throw new IllegalAccessException(""Get a wrong customer message header"");
                    }
                    String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class);
                    if(!""PUT"".equals(httpMethod)) {
                        throw new IllegalAccessException(""Get a wrong http method"");
                    }
                    Customer customer = inMessage.getBody(Customer.class);
                    if(customer != null) {
                        throw new IllegalAccessException(""Customer should not be null"");
                    }
                    // Now you can do what you want on the customer object
                    if(!""Mary"".equals(customer.getName())) {
                        throw new IllegalAccessException(""Get a wrong customer name."");
                    }
                    // set the response back
                    exchange.getOut().setBody(Response.ok().build());
                }

            }

        });

        
    }

}




--------------------------------------------------------------------
The ICustomerService it's just an interface containing all methods from the original CustomerService and its JAX-RS annotations. This CustomerService has been exposed as an OSGi component as follows:



<ipojo xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xmlns=""org.apache.felix.ipojo""
  xsi:schemaLocation=""org.apache.felix.ipojo http://felix.apache.org/ipojo/schemas/1.4.0/core.xsd"">


  <component classname=""org.ow2.jonas.sample.jaxrs.impl.ExampleCXF""
             name=""ExampleCXF""
             public=""false""
             immediate=""true"">

    <requires optional=""false""
              specification=""org.ow2.jonas.camel.service.api.ICamelService"">
      <callback type=""bind"" method=""setCamelService"" />
    </requires>

    <callback transition=""validate"" method=""start"" />
    <callback transition=""invalidate"" method=""stop"" />
  </component>

  <instance component=""ExampleCXF"" />

</ipojo>




---------------------------------------------------------


And these are the import-exports:



Export-Package org.ow2.jonas.sample.jaxrs.api

Import-Package javax.ws.rs, \
               *

DynamicImport-Package org.apache.cxf.dosgi.dsw.qos, \
                      org.apache.cxf

Private-Package org.ow2.jonas.camel.component, \
                org.ow2.jonas.sample.jaxrs.impl}}




--------------------------------------------------------


Finally, the log and stack trace displayed on deployment:



2011-07-07 15:47:53,914 : CamelService.__startNewContext : Starting a new camel context
2011-07-07 15:47:53,915 : DefaultCamelContext.start : Apache Camel  (CamelContext: org.ow2.jonas.sample.jonas-jaxrs-sample) is starting
2011-07-07 15:47:53,915 : DefaultCamelContext.createManagementStrategy : JMX enabled. Using ManagedManagementStrategy.
2011-07-07 15:47:53,916 : DefaultManagementLifecycleStrategy.onContextStart : This CamelContext(org.ow2.jonas.sample.jonas-jaxrs-sample) will be registered using the name: org.ow2.jonas.sample.jonas-jaxrs-sample-171-2 due to clash with an existing name already registered in MBeanServer.
2011-07-07 15:47:53,958 : Activator$BundleTypeConverterLoader$Loader.load : Found 1 @Converter classes to load
2011-07-07 15:47:53,969 : Activator$BundleTypeConverterLoader$Loader.load : Found 13 @Converter classes to load
2011-07-07 15:47:53,980 : Activator$BundleTypeConverterLoader$Loader.load : Found 2 @Converter classes to load
2011-07-07 15:47:53,983 : Activator$BundleTypeConverterLoader$Loader.load : Found 0 @Converter classes to load
2011-07-07 15:47:54,047 : DefaultCamelContext.start : Total 0 routes, of which 0 is started.
2011-07-07 15:47:54,047 : DefaultCamelContext.start : Apache Camel  (CamelContext: org.ow2.jonas.sample.jonas-jaxrs-sample) started in 0.132 seconds
2011-07-07 15:47:54,048 : RouteBuilderComponent.start : Starting CAMEL context name for route org.ow2.jonas.sample.jonas-jaxrs-sample
2011-07-07 15:48:39,138 : ResourceUtils.checkMethodDispatcher : No resource methods have been found for resource class org.ow2.jonas.sample.jaxrs.api.ICustomerService
2011-07-07 16:10:04,228 : AbstractJAXRSFactoryBean.checkResources : No resource classes found
2011-07-07 16:10:04,229 : RouteBuilderComponent.start : Cannot start route jonas-jaxrs-sample-1.0-SNAPSHOT
org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:164)
	at org.apache.camel.component.cxf.jaxrs.CxfRsConsumer.<init>(CxfRsConsumer.java:38)
	at org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.createConsumer(CxfRsEndpoint.java:108)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:128)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1832)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1758)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1667)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:708)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:650)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:265)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:613)
	at org.ow2.jonas.camel.wrapper.CamelWrapper.addRoutes(CamelWrapper.java:158)
	at org.ow2.jonas.camel.service.impl.CamelService.__addRoutes(CamelService.java:229)
	at org.ow2.jonas.camel.service.impl.CamelService.addRoutes(CamelService.java)
	at org.ow2.jonas.camel.component.RouteBuilderComponent.start(RouteBuilderComponent.java:205)
	at org.ow2.jonas.sample.jaxrs.impl.ExampleCXF.__start(ExampleCXF.java:73)
	at org.ow2.jonas.sample.jaxrs.impl.ExampleCXF.start(ExampleCXF.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:237)
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:193)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
	at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:343)
	at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
	at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
	at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
	at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
	at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
	at java.lang.Thread.run(Thread.java:619)
Caused by: javax.ws.rs.WebApplicationException
	at org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean.checkResources(AbstractJAXRSFactoryBean.java:310)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:116)
	... 42 more
2011-07-07 16:10:04,230 : LoggerService.log : [ERROR]  : [ExampleCXF-0] The callback method start has thrown an exception : null
org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:164)
	at org.apache.camel.component.cxf.jaxrs.CxfRsConsumer.<init>(CxfRsConsumer.java:38)
	at org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.createConsumer(CxfRsEndpoint.java:108)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:128)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1832)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1758)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1667)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:708)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:650)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:265)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:613)
	at org.ow2.jonas.camel.wrapper.CamelWrapper.addRoutes(CamelWrapper.java:158)
	at org.ow2.jonas.camel.service.impl.CamelService.__addRoutes(CamelService.java:229)
	at org.ow2.jonas.camel.service.impl.CamelService.addRoutes(CamelService.java)
	at org.ow2.jonas.camel.component.RouteBuilderComponent.start(RouteBuilderComponent.java:205)
	at org.ow2.jonas.sample.jaxrs.impl.ExampleCXF.__start(ExampleCXF.java:73)
	at org.ow2.jonas.sample.jaxrs.impl.ExampleCXF.start(ExampleCXF.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:237)
	at org.apache.felix.ipojo.util.Callback.call(Callback.java:193)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
	at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:343)
	at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
	at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
	at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
	at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
	at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
	at java.lang.Thread.run(Thread.java:619)
Caused by: javax.ws.rs.WebApplicationException
	at org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean.checkResources(AbstractJAXRSFactoryBean.java:310)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:116)
	... 42 more
2011-07-07 16:10:04,236 : LoggerService.log : [ERROR]  : null
java.lang.IllegalStateException
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:171)
	at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
	at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:471)
	at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:353)
	at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:166)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:301)
	at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:238)
	at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:343)
	at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:89)
	at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
	at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
	at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
	at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:682)
	at java.lang.Thread.run(Thread.java:619)




--------------------------------------------------------


I suspect this has something to do with setting the adequate resource classes properly, but I'm kind of clueless right now.","davsclaus:1310019473:2011-07-07T14:17:53.096+0000:1310019473:2011-07-07T14:17:53.096+0000:Please use the mailing list first to get help with using Apache Camel as we encourage people to do
http://camel.apache.org/support

Then after a bit of mails and suggestions on the mailing list, and if indeed there is an issue in Camel, then at that time, a JIRA can be created.

"
0,CAMEL-4184,Bug,Minor,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-07 10:29:44+00:00,2011-07-07 16:16:21+00:00,"See nabble
http://camel.465427.n5.nabble.com/intercept-using-adviceWith-tp4520468p4520468.html","davsclaus:1310017099:2011-07-07T13:38:19.232+0000:1310017099:2011-07-07T13:38:19.232+0000:Okay this is a bit trickier as when you do the advice on the existing routes, the previous context scoped OnException have been merged into the routes, as if they where route scoped. So when the merge is done, the OnException now appear as route scoped instead of context scoped.
"
0,CAMEL-4183,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-07-07 07:55:16+00:00,2011-07-07 08:39:43+00:00,"camel-atom component can't work rightly within the OSGi platform, as the Abdera is using TCCL to load the configuration instance.
We need to set the TCCL before calling the AtomUtils.parseDocument().","njiang:1309999183:2011-07-07T08:39:43.920+0000:1309999183:2011-07-07T08:39:43.920+0000:Applied the patch into the trunk.
"
0,CAMEL-4182,New Feature,Minor,2.8.0,"2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Claus Ibsen,1,1,2011-07-07 07:54:39+00:00,2011-09-23 14:15:57+00:00,See CAMEL-3894 for details.,"lenp:1316732841:2011-09-23T07:07:21.677+0000:1316732841:2011-09-23T07:07:21.677+0000:Any idea of when this will be implemented - or might it be possible to have it already in 2.8.2?
davsclaus:1316741154:2011-09-23T09:25:54.441+0000:1316741154:2011-09-23T09:25:54.441+0000:Its not part of 2.8.2. We would normally try to only backport bug fixes to patch branches. But the 2.8.2 already have a number of non bug fixes backported so it could be possible we could do for this as well. "
0,CAMEL-4181,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-07-07 06:17:06+00:00,2011-07-07 06:25:55+00:00,"If you startup Camel with X number of routes. And then later stop and remove one of those routes. That route should be removed from the internal startup routes list in DefaultCamelContext.


Camel end users may notice this in the logs as when you shutdown CamelContext then it may log that shutting down 3 routes. But in reality there is only 2 since you have removed 1 route.",
0,CAMEL-4180,Improvement,Minor,None,2.9.0,"
None
",Closed,Fixed,2.9.0,Christian Müller,Claus Ibsen,0,0,2011-07-07 03:20:02+00:00,2011-07-27 07:18:17+00:00,Check all the xxxDefinition classes and ensure they have a getLabel method that outputs a human understandable description. This label is used by for example the Camel tracer.,muellerc:1311721607:2011-07-27T07:06:47.491+0000:1311721607:2011-07-27T07:06:47.491+0000:Committed r1151359
0,CAMEL-4179,Bug,Major,None,2.8.0,"
None
",Resolved,Not A Problem,2.8.0,Ashwin J. Karpe,Ashwin J. Karpe,1,1,2011-07-06 15:05:19+00:00,2011-07-08 10:32:59+00:00,"The removeRoute(String routeId) operation called with a routeId has the unintended consequence of not just stopping the route with the given routeId but also other routes. The implementation causes the shutdown of the Routing Service and all its associated routes which improperly impacts other routes.


Based on a user bringing this up in Nabble...


http://camel.465427.n5.nabble.com/Removing-routes-programmatically-td4556741.html#a4557219


This needs to be fixed (provided it can be reproduced).","akarpe:1309939914:2011-07-06T16:11:54.426+0000:1309939914:2011-07-06T16:11:54.426+0000:I have put a note for the user asking for the route and more details.

- Ashwin...
davsclaus:1310085154:2011-07-08T08:32:34.760+0000:1310085154:2011-07-08T08:32:34.760+0000:The title is a bit misleading as Camel does *not* remove other routes.

The consensus seems to be when have multiple routes consuming from the same non durable topic.
davsclaus:1310092349:2011-07-08T10:32:29.607+0000:1310092349:2011-07-08T10:32:29.607+0000:CAMEL-4194 is the real problem of this. I will mark this as not a problem as the remoteRoute operation works as expected."
0,CAMEL-4178,Improvement,Minor,2.7.2,Future,"
None
",Resolved,Not A Problem,Future,Claus Ibsen,Josef Jahn,0,2,2011-07-06 12:04:10+00:00,2012-07-06 08:47:06+00:00,"When wiretapping the result of a http request (to uri=""http://foo""), the wiretap does not work because the result is a stream. The developer has to remember to convert the result to a string first to avoid the first consumption of the stream to make the data not available for wiretapping.


In the interest of ""defaults that work"", maybe the wiretap should ""know"" to handle streams in a way that makes the wiretap work without extra consideration by the developer. Streams could be auto-converted to string or, if the amount of data is larger than a certain pre-configured threshold, cache them to disk and read the resulting file.


Here's an example of a route that needs a convertBodyTo to make the wiretap work. Without this, the wiretap quietly fails, and it can be quite time-consuming to try to find out why.



 
<route>
	<!-- jetty listening on port 8087 -->
	<from uri=""jetty:http://0.0.0.0:8087/wsn/Broker""/>
	<!-- log input received -->
	<wireTap uri=""file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append"">
		<body>
			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [INCOMING REQUEST]: ${in.body}&#xA;&#xD;</simple>
		</body>
	</wireTap>
	<!-- send proxied request to actual web service -->
	<removeHeaders pattern=""CamelHttp*""/>
	<removeHeader headerName=""Accept-Encoding""/>
	<to uri=""http://127.0.0.1:8192/wsn/Broker/""/>
	<!-- convert to string to prevent the stream to be consumed by the wiretap -->
	<convertBodyTo type=""String""/>
	<!-- log answer from real web service -->
	<wireTap uri=""file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append"">
		<body>
			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [OUTGOING RESPONSE]: ${in.body}&#xA;&#xD;</simple>
		</body>
	</wireTap>
</route>","davsclaus:1309926089:2011-07-06T12:21:29.536+0000:1309926089:2011-07-06T12:21:29.536+0000:You can enable stream caching
http://camel.apache.org/stream-caching
jjahn:1309927724:2011-07-06T12:48:44.626+0000:1309927724:2011-07-06T12:48:44.626+0000:Certainly true. The question is whether it might be better to have wiretap always work by default without needing to worry about whether or not maybe the input is a stream.
I understand that stream caching is not always the right thing to do, just as converting to string is not always the right solution as it might get you into OutOfMemoryLand. But even some form of error message would be preferable to failing silently, don't you agree?




davsclaus:1341535625:2012-07-06T08:47:05.969+0000:1341535625:2012-07-06T08:47:05.969+0000:Working as designed. Same issue with other EIPs when using streams. People should use stream cache, or load the data into memory etc. Or use streams that can be re-read."
0,CAMEL-4177,Bug,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-07-06 11:31:54+00:00,2011-07-06 11:35:29+00:00,"[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Maven Plugins ............................ FAILURE [3.566s]
[INFO] Camel :: Maven Camel Plugin ....................... SKIPPED
[INFO] Camel :: Maven Guice Plugin ....................... SKIPPED
[INFO] Camel :: Html to Pdf Plugin ....................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.320s
[INFO] Finished at: Wed Jul 06 08:45:30 NDT 2011
[INFO] Final Memory: 10M/55M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.1:resolve-plugins (resolve-plugins) on project maven-plugins: Nested: Failure to find org.apache.maven.plugins:maven-plugin-plugin:jar:2.2.1 in http://repo1.maven.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced","janstey:1309923229:2011-07-06T11:33:49.279+0000:1309923229:2011-07-06T11:33:49.279+0000:maven-plugin-plugin 2.2.1 doesn't actually exist at central. The following link gives a 404

http://repo1.maven.org/maven2/org/apache/maven/plugins/maven-plugin-plugin/2.2.1/

Going to switch to another version shortly.
janstey:1309923329:2011-07-06T11:35:29.664+0000:1309923329:2011-07-06T11:35:29.664+0000:janstey@duffman:/x1/asf/camel/trunk/tooling/maven$ svn commit -m ""CAMEL-4177 - fix issue when using dependency:go-offline""
Sending        maven/camel-maven-plugin/pom.xml
Sending        maven/guice-maven-plugin/pom.xml
Sending        maven/pom.xml
Transmitting file data ...
Committed revision 1143353.
"
0,CAMEL-4176,Bug,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Don Doffe,0,1,2011-07-06 06:59:33+00:00,2011-07-17 07:35:19+00:00,"Camel-http4 does not support http proxy configuration for HTTPS (https4:// endpoints).


Scenario 1:


Camel – HTTP --> Proxy – HTTPS4 --> Destination


http.proxyHost & http.proxyPort are specified and recognized:


		String _authUsername=""WS_P2P_INTERNAL"";
		String _authPassword=""WS_P2P_INTERNAL"";


		from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)


		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""_authUsername""&authPassword=""_authPassword""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001"");


Getting exception:


java.lang.IllegalStateException: Scheme 'http' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)


Attaching the whole log - http_exception.log


Scenario 2:


Camel – HTTPS --> Proxy – HTTPS4 --> Destination


Camel does not seem top recognize and accept https.proxyHost and https.proxyPort settings:


getContext().getProperties().put(""https.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""https.proxyPort"", ""9001"");","davsclaus:1309991441:2011-07-07T06:30:41.336+0000:1309991798:2011-07-07T06:36:38.008+0000:Ah sorry there is special support for those as properties on the CamelContext. This is very uncommon.
davsclaus:1309992970:2011-07-07T06:56:10.735+0000:1309992970:2011-07-07T06:56:10.735+0000:Ah I debugged a bit and discovered the issue is likely because your http proxy has scheme: http. eg http client will default and use http scheme if you dont specify that.

davsclaus:1309993020:2011-07-07T06:57:00.181+0000:1309993020:2011-07-07T06:57:00.181+0000:Also in scenario 2 you should use ""http"" and not ""https"" as documented
http://camel.apache.org/http4

{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
{code}
davsclaus:1309993257:2011-07-07T07:00:57.042+0000:1309993257:2011-07-07T07:00:57.042+0000:Okay I think ProxyHttpClientConfigurer should support scheme from the proxyHost. It current dont and thus it default to http.
davsclaus:1309993917:2011-07-07T07:11:57.255+0000:1309993917:2011-07-07T07:11:57.255+0000:We should probably add an option to configure the proxy scheme so you can do:

{code}
to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl&authUsername=""_authUsername""&authPassword=""_authPassword""&x509HostnameVerifier=AllowAllVerifier&proxyAuthHost=aupdc00-revprx01t&proxyAuthPort=9001&proxyAuthScheme=https4"");
{code}

eg notice the new proxyAuthScheme.

For scenario 2 you can then do:
{code}
getContext().getProperties().put(""http.proxyHost"", ""aupdc00-revprx01d"");
getContext().getProperties().put(""http.proxyPort"", ""9001"");
getContext().getProperties().put(""http.proxyScheme"", ""https4"");
{code}

davsclaus:1309994036:2011-07-07T07:13:56.013+0000:1309994036:2011-07-07T07:13:56.013+0000:We can also default and use the same scheme as the producer if the proxyAuthScheme option has not been explicit set.

Then it ought to work in the original reported use-case, as Camel will fallback and use the https4
davsclaus:1309995521:2011-07-07T07:38:41.582+0000:1309995521:2011-07-07T07:38:41.582+0000:I have committed a fix on trunk. Can you try with updated source code from trunk?
doffe:1310093070:2011-07-08T10:44:30.479+0000:1310093070:2011-07-08T10:44:30.479+0000:Run the tests.

When proxy settings are defined in the endpoint URL, it works. If the proxyAuthScheme is defined it is used, otherwise falls back to http4.

But when the proxy setting are defined globally using getContext().getProperties().put() - it does not. When ""http.proxyScheme"" is defined it is used. But when it is not the same issue presents itself - camel falls back to http.


davsclaus:1310103184:2011-07-08T13:33:04.695+0000:1310103184:2011-07-08T13:33:04.695+0000:Don thanks for testing. I have just commited a new fix for that scenario with the getProperties on the CamelContext.
Can you test again on your system?
doffe:1310176816:2011-07-09T10:00:16.442+0000:1310176816:2011-07-09T10:00:16.442+0000:Run the tests again.

I can confirm that the component uses proxy scheme correctly: if defined explicitly, it is used, if not - the system falls back to the endpoint scheme.

Work for both, the endpoint and global params.

Thanks a lot. nicely done!
davsclaus:1310177330:2011-07-09T10:08:50.612+0000:1310177330:2011-07-09T10:08:50.612+0000:Don, thanks for reporting and testing.
doffe:1310662908:2011-07-15T01:01:48.844+0000:1310662908:2011-07-15T01:01:48.844+0000:I'm testing against the Release Candidate from the repo:

https://repository.apache.org/content/repositories/orgapachecamel-023

I'm not sure what went wrong, but the issue seem to be back.

When 
proxyAuthScheme=http4 
or 
getContext().getProperties().put(""http.proxyScheme"", ""http4"");

are specified on a https4 endpoint I get following exception on invocation:

java.lang.IllegalStateException: Scheme 'http4' not registered.
	at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:149)




davsclaus:1310690469:2011-07-15T08:41:09.094+0000:1310690469:2011-07-15T08:41:09.094+0000:Can you post your Camel route. Do you also use plain http4 scheme, (eg not https)
doffe:1310692056:2011-07-15T09:07:36.494+0000:1310692056:2011-07-15T09:07:36.494+0000:from(""servlet:///proxy?matchOnUriPrefix=true"")
		.removeHeader(Exchange.HTTP_URI)
		.removeHeader(Exchange.HTTP_PATH)
		.removeHeader(Exchange.HTTP_QUERY)
		.to(""https4://aupdc-osb01d:9002/P2P_Creditors/P2P_CreditorWS?wsdl"" +
				""&authUsername=WS_P2P_INTERNAL""+
				""&authPassword=WS_P2P_INTERNAL""+
				""&proxyAuthHost=aupdc00-revprx01d""+
				""&proxyAuthPort=9001""+
				""&proxyAuthScheme=http4""+
				""&x509HostnameVerifier=AllowAllHostnameVerifier""
				);

No other endpoint uses http4.The plan was to use http4 only for communication to proxy.

davsclaus:1310693290:2011-07-15T09:28:10.287+0000:1310693290:2011-07-15T09:28:10.287+0000:What runtime container do you use?

davsclaus:1310693318:2011-07-15T09:28:38.003+0000:1310693318:2011-07-15T09:28:38.003+0000:And can you post the full stracktrace?
doffe:1310695211:2011-07-15T10:00:11.072+0000:1310695211:2011-07-15T10:00:11.072+0000:For the time being it is jetty (for testing)

mvn jetty:run

Attaching out.log
davsclaus:1310696565:2011-07-15T10:22:45.331+0000:1310696565:2011-07-15T10:22:45.331+0000:Ah so you proxy is plain http on port 9001. 
And you use https on port 9002.
davsclaus:1310697029:2011-07-15T10:30:29.139+0000:1310697029:2011-07-15T10:30:29.139+0000:Don, can you try with the attached JAR. Just renamed it to 2.8.0 and override your existing JAR.
davsclaus:1310697736:2011-07-15T10:42:16.280+0000:1310697736:2011-07-15T10:42:16.280+0000:The last patch
doffe:1310700010:2011-07-15T11:20:10.343+0000:1310700010:2011-07-15T11:20:10.343+0000:I'm getting nullpointer exception.

I'm attaching the latest log.

out2.log

p.s. if you'd like you can reach me directly - forrestline at gmail dt com
davsclaus:1310712811:2011-07-15T14:53:31.027+0000:1310712811:2011-07-15T14:53:31.027+0000:Ah I forgot there is a minor fix in camel-core. So you need to use this JAR also. 
davsclaus:1310713257:2011-07-15T15:00:57.945+0000:1310713257:2011-07-15T15:00:57.945+0000:Updated camel-http4 with a minor fix needed as well
davsclaus:1310713294:2011-07-15T15:01:34.478+0000:1310713294:2011-07-15T15:01:34.478+0000:Don you need to use the updated attached camel-core and camel-http4 components. You can just rename them to 2.8.0 and override existing JARs"
0,CAMEL-4145,Improvement,Minor,2.7.2,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Babak Vahdat,0,1,2011-06-23 16:11:58+00:00,2011-06-28 14:25:50+00:00,"For details see the user forum:


http://camel.465427.n5.nabble.com/Is-this-pollEnrich-s-expected-behaviour-td4517089.html","bvahdat:1308891423:2011-06-24T12:57:03.076+0000:1309130263:2011-06-27T07:17:43.564+0000:In the meanwhile I tried to dig into the code to understand how it works, correspondingly why it doesn't work in the case no timeout (or 0 timeout) is given to the pollEnrich DSL.

In general the problem is that if we've got a 0 timeout or even a very small timeout (let's say 50 milliseconds), the asynchronous thread gets simply no chance for polling to see if there's something there when we ask him.

Reflected this to the code: DefaultEndpoint.createPollingConsumer() returns a EventDrivenPollingConsumer object, which get's started while camel is booting up. The EventDrivenPollingConsumer.doStart() starts the consumer through ServiceHelper.startService(consumer), which would start up the asynchronuos polling through ScheduledPollConsumer.

Now if you for example put a Thread.sleep(2000) as the last statement inside EventDrivenPollingConsumer.doStart() method then the test case I submitted into the forum (see the link in the description above) would also work. The sleep delay on my box should be at least 2 second so that it works, as otherwise the ScheduledPollConsumer will have not enough chance to come into the play for polling.

Most probably putting that sleep(2000) call is not the (generic) way to go for. But it simply demonstrates where the problem is, that's somehow we've to give the asynchronous polling logic enough time to start polling the data, in my test case that was a file.

I hope all this makes sense to you, as my english is pretty poor. Sorry for that.

Babak
bvahdat:1308901431:2011-06-24T15:43:51.011+0000:1308901745:2011-06-24T15:49:05.373+0000:For the sake of clarity, following the change I made on EventDrivenPollingConsumer to make my submitted test case pass:

{code}
	protected void doStart() throws Exception {
		// lets add ourselves as a consumer
		consumer = getEndpoint().createConsumer(this);
		ServiceHelper.startService(consumer);

		// in the case our consumer is a scheduled polling one, wait a bit
		// on this thread until the consumer comes up and starts consuming
		// properly before go further on this thread
		if (ScheduledPollConsumer.class.isInstance(consumer)) {
			Thread.sleep(2000);
		}
	}

{code}
davsclaus:1309238302:2011-06-28T13:18:22.582+0000:1309238302:2011-06-28T13:18:22.582+0000:The consumer acts correctly when you use no timeout as it will do a NoWait, which mean it checks if there was a message immediately available. For a file/ftp thats not the case as it would have to go pool for that. You can't expect a NoWait to connect to a remote FTP server, traverse a directory structure, download the desired file, etc. All that takes time. NoWait is a immediately check for any existing messages.

If you on the other hand use seda, then you can use a NoWait polling as the seda queue may have messages ready at hand already.

However I think the default aggregator should set an empty message in case the was no message to poll.
Likewise we should set the TO_ENDPOINT header, that is used to keep track of endpoints that the message is being send to.

davsclaus:1309242350:2011-06-28T14:25:50.964+0000:1309242350:2011-06-28T14:25:50.964+0000:Now an empty message body will be set if pollEnrich cannot poll the resource."
0,CAMEL-4144,Task,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Jean-Baptiste Onofré,Willem Jiang,0,0,2011-06-23 14:40:41+00:00,2011-10-25 11:36:17+00:00,"As Karaf 2.2.2-SNAPSHOT validate plugin has better support to the Karaf feature validation, we should update the validate profile to use it.
Now if you want to validate the change of apache-camel karaf feature, your just need to use this command in the features directory.



  mvn clean install -Pvalidate -Psnapshot




BTW, it should be safe when we release CAMEL 2.8.0.","davsclaus:1308811453:2011-06-23T14:44:13.000+0000:1308811453:2011-06-23T14:44:13.000+0000:We should not release Camel 2.8 with any SNAPSHOT deps. So in case karaf 2.2.2 is not release beforehand we need to revert this patch.
jbonofre:1308811637:2011-06-23T14:47:17.931+0000:1308811637:2011-06-23T14:47:17.931+0000:Agree Claus.

Let me check on my side if we can release Karaf 2.2.2.
davsclaus:1309220260:2011-06-28T08:17:40.247+0000:1309220260:2011-06-28T08:17:40.247+0000:Jamie is cutting Karaf 2.2.2 currently, so there is a good chance it may be released in time before we start cutting Camel 2.8.
jbonofre:1310046629:2011-07-07T21:50:29.067+0000:1310046629:2011-07-07T21:50:29.067+0000:Willem already did and check the behavior on Camel trunk.

I also updated camel-2.7.x to use Karaf 2.2.2 with the new features-maven-plugin behavior.
davsclaus:1310110358:2011-07-08T15:32:38.410+0000:1310110358:2011-07-08T15:32:38.410+0000:We have upgraded to karaf 2.2.2 GA, so I guess this ticket can be resolved?
jbonofre:1310110743:2011-07-08T15:39:03.741+0000:1310110743:2011-07-08T15:39:03.741+0000:Yes, you're right Claus.

I updated camel-2.7.x yesterday evening to use Karaf 2.2.2 also."
0,CAMEL-4143,Bug,Minor,2.8.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Alexey Venderov,0,0,2011-06-23 06:56:44+00:00,2011-10-25 11:35:30+00:00,"We are using camel-cxf component and building it from the sources. Also we have slightly modified CxfPayloadConverterTest.testCxfPayloadToNode test, added some additional checks. Here are the changes that were made to the test:



Index: CxfPayloadConverterTest.java
===================================================================
--- CxfPayloadConverterTest.java	(revision 6644)
+++ CxfPayloadConverterTest.java	(revision 6686)
@@ -49,6 +49,7 @@
         DocumentBuilderFactory documentBuilderFactory =
                 DocumentBuilderFactory.newInstance();
+        documentBuilderFactory.setNamespaceAware(true);
         DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
         document = documentBuilder.parse(file);
         document.getDocumentElement().normalize();
@@ -118,5 +119,13 @@
         exchange.getIn().setBody(payload);
         node = exchange.getIn().getBody(Node.class);
         assertNotNull(node);
+        Element root = (Element) node;
+        assertEquals(""root element name"", ""root"", root.getNodeName());
+        assertEquals(""root element namespace"", ""http://www.test.org/foo"",
+                root.getNamespaceURI());
+        Element bar = (Element) root.getElementsByTagName(""bar"").item(0);
+        assertEquals(""child element name"", ""bar"", bar.getNodeName());
+        assertEquals(""child element namespace"", ""http://www.test.org/foo"",
+                bar.getNamespaceURI());
     }
 } 




Since there is no explicit converter from CxfPayload to Node the fallback converter from CxfPayloadConverter is used for this conversion. Fallback converter from CxfPayloadConverter under the hood uses converters from XmlConverter. There are two suitable converters in XmlConverter class which are randomly selected. Some times public Element toDOMElement(Node node) converter is used and some times public Document toDOMDocument(final Node node) converter is used. If public Document toDOMDocument(final Node node) converter is used then test fails with ClassCastException. To avoid this, explicit converter from CxfPayload to Node should be added. Patch that adds CxfPayload to Node converter is provided.","avenderov:1308783503:2011-06-23T06:58:23.020+0000:1308783503:2011-06-23T06:58:23.020+0000:Patch that adds new converter.
nickolay_martinov:1308786691:2011-06-23T07:51:31.517+0000:1308786691:2011-06-23T07:51:31.517+0000:The problem is not that there is ClassCastException. The problem is that sometimes converter returns Element and sometimes it returns Document. Behavior should be at least stable. Ideally behavior should be predictable.
njiang:1308868111:2011-06-24T06:28:31.158+0000:1308868111:2011-06-24T06:28:31.158+0000:Applied patch with thanks to Alexey."
0,CAMEL-4142,Improvement,Major,None,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-06-23 06:41:52+00:00,2011-06-27 14:26:53+00:00,"Using the ""mvn clean install -Pblueprint"" can build a bundle with blueprint configure, the default profile is using spring.","davsclaus:1309133782:2011-06-27T08:16:22.803+0000:1309133782:2011-06-27T08:16:22.803+0000:Willem we have added a separate CXF blueprint example in the examples. Can you remove this patch. As we should make examples plain easy to use/understand. Having an example that do both spring-dm + blueprint is confusing. Also people copy the examples when they want to do new camel projects so its better if they can just copy the osgi if the want spring-dm, or the blueprint for blueprint.
njiang:1309138644:2011-06-27T09:37:24.540+0000:1309138644:2011-06-27T09:37:24.540+0000:We have lots of way to publish Camel route: spring, blueprint, OSGi service which can load the camel route.
The only difference between them are the configuration part, the example just need to show how to using these configuration. 
Put these configuration file into the same module could help us maintain the project.
That is how the camel-example-etl does, it has the different configure files for the openjpa and hibernate.
njiang:1309138787:2011-06-27T09:39:47.067+0000:1309138787:2011-06-27T09:39:47.067+0000:I admit that current solution has a shortcoming, the user who build the example could forget which profile he picked, maybe we can create a common camel-cxf-osgi module and let the spring one and blueprint one dependent on it.
When the user build the example, they will not hit this kind of trouble again.
njiang:1309155973:2011-06-27T14:26:13.661+0000:1309155973:2011-06-27T14:26:13.661+0000:reverted the patch, as we have a separated blueprint example. "
0,CAMEL-4141,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-23 02:41:10+00:00,2011-06-24 20:50:59+00:00,"Speed up build by not filtering the source distributions.


Discussion at:


http://camel.465427.n5.nabble.com/source-distributions-td4515150.html","dkulp:1308768169:2011-06-23T02:42:49.632+0000:1308768169:2011-06-23T02:42:49.632+0000:
This creates a much simpler src distro that assembles in MUCH MUCH less time.

It currently keeps the zip (just unfiltered).  Removing the zip would save another 15 seconds or so.
njiang:1308873189:2011-06-24T07:53:09.310+0000:1308873189:2011-06-24T07:53:09.310+0000:Applied patch with thanks to Dan.
The patch can save half of assembling time, but it still takes about 6 minutes to run the build in my box.
It makes me wonder how fast the box that Dan is using :)
hadrian:1308892170:2011-06-24T13:09:30.926+0000:1308892170:2011-06-24T13:09:30.926+0000:Thanks Willem for applying the patch. There is still the pending issue of if we want the tar.gz *and* zip or just the zip. I think there were was enough consensus to only ship the zip (better for windows, indifferent for unix). I don't like the fact that the zip is much larger, but at least we wouldn't ship both.

hadrian:1308919859:2011-06-24T20:50:59.594+0000:1308919859:2011-06-24T20:50:59.594+0000:Done"
0,CAMEL-4140,Improvement,Minor,2.8.0,None,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Chris Love,0,0,2011-06-22 18:31:04+00:00,2011-06-22 19:55:14+00:00,"I have a patch attached that updates the pom.xml in the camel-jibx component.


1. The maven-jibx-plugin has fixed http://jira.codehaus.org/browse/JIBX-355
2. Using a profile to allow a user to skip the unit tests using -Dmaven.test.skip=true. The plugin will run even if unit tests are skipped, so using a profile to correct that.","chrislovecnm:1308738722:2011-06-22T18:32:02.033+0000:1308738722:2011-06-22T18:32:02.033+0000:Patch for the pom.xml
rkettelerij:1308743709:2011-06-22T19:55:09.003+0000:1308743709:2011-06-22T19:55:09.003+0000:Applied patch, thanks!"
0,CAMEL-4139,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-22 15:17:58+00:00,2011-06-23 00:57:02+00:00,"Currently, spring parses into a CxfEndpointBean whereas blueprint parses into a CxfEndpoint directly.   This mismatch then requires extra casting in the CxfComponent.   


Also, it means there are features supported by Spring that are not supported yet by blueprint  (like configuring interceptors).   I'm attaching a patch that removes the spring specific CxfEndpointBean stuff and allows both spring and blueprint to parse directly into the CxfEndpoint (well, subclasses of) so the two approaches can be maintained together.


It also reduces the usage of ""Strings"" for properties in CxfEndpoint and uses QNames where appropriate (added a Converter for that) and Class<?> for the service class.  That will allow OSGi to provide the Class directly instead of having to Class.forName the thing.  (still need to do that, but this is a start)","dkulp:1308735842:2011-06-22T17:44:02.690+0000:1308735842:2011-06-22T17:44:02.690+0000:New version of patch that uses the bundle to load the class.
njiang:1308761822:2011-06-23T00:57:02.738+0000:1308761822:2011-06-23T00:57:02.738+0000:Just committed the patch of removing the CxfEndpointBean.java and CxfSpringEndpointBean.java."
0,CAMEL-4138,Bug,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,1,2011-06-22 09:12:10+00:00,2011-06-22 12:32:50+00:00,"As CXF 2.4.x remove the org.apache.cxf.transport.http_osgi package due to the refactoring of cxf http transport, current camel-example-cxf-osgi cannot be deployed into ServiceMix with CXF 2.4.x.","cschneider:1308712317:2011-06-22T11:11:57.293+0000:1308712325:2011-06-22T11:12:05.991+0000:Can you go into more details what happens? I have successfully run camel-cxf services in osgi at least using the camel transport for cxf. 
njiang:1308716754:2011-06-22T12:25:54.825+0000:1308716754:2011-06-22T12:25:54.825+0000:It relates to the OSGi import package of ""org.apache.cxf.transport.http_osgi"", you can find more information with my commit[1].
[1]http://svn.apache.org/viewvc?rev=1138350&view=rev

cschneider:1308717170:2011-06-22T12:32:50.402+0000:1308717170:2011-06-22T12:32:50.402+0000:Ah .. so it just could not resolve the package. In my examples I typically use require bundle for the cxf dependency. This is more stable atthe moment... well until we refactor cxf to use more fine granular bundles. "
0,CAMEL-4137,Bug,Minor,2.8.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-06-22 03:44:06+00:00,2011-08-15 15:19:22+00:00,"Current CxfNamespaceHandler set the TCCL to parser the cxfEndpoint, but it never reset the TCCL back.
It will cause some trouble if there are lots of Blueprint Namespcehandlers are called by the same thread.","njiang:1308685896:2011-06-22T03:51:36.979+0000:1308685896:2011-06-22T03:51:36.979+0000:Applied patch into trunk.
joed:1308687001:2011-06-22T04:10:01.263+0000:1308687001:2011-06-22T04:10:01.263+0000:This breaks the wsdl service.

Caused by: java.lang.NullPointerException
	at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:92)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:369)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:499)
	at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:241)
	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:202)
	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:101)
	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)
	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:202)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:132)

njiang:1308811001:2011-06-23T14:36:41.027+0000:1308811001:2011-06-23T14:36:41.027+0000:I just did some work to find out we should set right ClassLoader for the BluepringBus.
Now I just create CXF-3615 for it.
davsclaus:1309137057:2011-06-27T09:10:57.123+0000:1309137057:2011-06-27T09:10:57.123+0000:Whats the status of this? Is there more work for Camel 2.8? We want to close down and cut a release.
njiang:1309138358:2011-06-27T09:32:38.768+0000:1309138358:2011-06-27T09:32:38.768+0000:This issue need to a new release of CXF, Current solution just a workaround, it has some side effects.
I think we can post it to Camel 2.9.0, as we are closing to the Apache Camel 2.8.0 release.
davsclaus:1309220224:2011-06-28T08:17:04.359+0000:1309220224:2011-06-28T08:17:04.359+0000:Okay moving this to Camel 2.9 so Willem can fix it when CXF 2.4.x has been released that has the fix.
njiang:1313392762:2011-08-15T15:19:22.131+0000:1313392762:2011-08-15T15:19:22.131+0000:Applied patch into trunk and Camel 2.8.x after upgrading CXF to 2.4.2."
0,CAMEL-4136,Improvement,Major,2.7.2,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Christian Müller,0,0,2011-06-21 21:53:24+00:00,2011-06-26 16:42:56+00:00,See Nabble for details.,"muellerc:1309073564:2011-06-26T15:32:44.738+0000:1309073564:2011-06-26T15:32:44.738+0000:Committed r1139815

updating the wiki page..."
0,CAMEL-4135,Improvement,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-21 21:16:06+00:00,2013-05-02 02:29:41+00:00,The blueprint handling of the  cxfEndpoint stuff can be simplified a bit by allowing the camel to use the CamelContextAware stuff to inject the context instead of the funky lookup that it's currently doing.,"dkulp:1308662832:2011-06-21T21:27:12.431+0000:1308662832:2011-06-21T21:27:12.431+0000:Patch that fixes this.   However, don't apply yet as it needs a discussion on the list.
njiang:1308685967:2011-06-22T03:52:47.554+0000:1308685967:2011-06-22T03:52:47.554+0000:Here[1] is the discussion in the mailing list.
[1]http://camel.465427.n5.nabble.com/CAMEL-4135-4109-and-Spring-and-Blueprint-namespace-things-td4512057.html
joed:1308692175:2011-06-22T05:36:15.183+0000:1308692175:2011-06-22T05:36:15.183+0000:Thanks Dan!"
0,CAMEL-4134,Task,Major,2.7.2,2.9.0,"
None
",Resolved,Fixed,2.9.0,Christian Müller,Christian Müller,0,0,2011-06-21 20:59:18+00:00,2013-05-02 02:29:41+00:00,It fixes a few bugs and comes with a few improvements: http://www.igniterealtime.org/builds/smack/docs/latest/changelog.html,"jbonofre:1308792634:2011-06-23T09:30:34.821+0000:1308792634:2011-06-23T09:30:34.821+0000:Patch to upgrade to Smack 3.2.0 (including ServiceMix bundle in Karaf features descriptor).
muellerc:1308794019:2011-06-23T09:53:39.424+0000:1308794019:2011-06-23T09:53:39.424+0000:I will apply the patch after we released Camel 2.8.0.
muellerc:1311642344:2011-07-26T09:05:44.341+0000:1311642344:2011-07-26T09:05:44.341+0000:Committed r1151027
Thanks Jean-Baptiste for the patch.

We will close this issue, after the Smack bundle 3.2.0_1 is released.
muellerc:1314103614:2011-08-23T20:46:54.310+0000:1314103614:2011-08-23T20:46:54.310+0000:Already updated to Smack bundle 3.2.0_1"
0,CAMEL-4133,Bug,Major,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Daniel Kulp,Daniel Kulp,0,0,2011-06-21 20:16:42+00:00,2011-10-25 11:35:55+00:00,"Camel-blueprint only works if the camelContext and related elements are not using a namespace prefix.  Like:



  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/blueprint"">
    <routeBuilder ref=""reportIncidentRoutes""/>
  </camelContext>




If you try and use a prefixed form like:



  <camel:camelContext id=""camel"" xmlns:camel=""http://camel.apache.org/schema/blueprint"">
    <camel:routeBuilder ref=""reportIncidentRoutes""/>
  </camel:camelContext>




it won't parse.","dkulp:1308658666:2011-06-21T20:17:46.132+0000:1308658666:2011-06-21T20:17:46.132+0000:
The issue is using el.getNodeName() instead of el.getLocalName() in the namespace handler.
njiang:1308681815:2011-06-22T02:43:35.852+0000:1308681815:2011-06-22T02:43:35.852+0000:Applied patch with thanks to Dan. I also updated an OSGi integration test to verify the change."
0,CAMEL-4132,Task,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-21 19:03:36+00:00,2011-06-22 14:05:54+00:00,The camel-atom component is using an ancient incubator version of abdera which will make it hard to work with camel-cxf.   Updating to 1.1.2 which is what CXF uses would help.,"njiang:1308722754:2011-06-22T14:05:54.636+0000:1308722754:2011-06-22T14:05:54.636+0000:Applied patch with thanks to Dan.
I also updated the org.apache.abdera package import version range and added the java mail bundle dependency to the camel-atom feature.
"
0,CAMEL-4131,Task,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-21 18:27:00+00:00,2011-06-22 14:07:59+00:00,"With the update to CXF 2.4.1, the features.xml file needs updating and various versions of things need updating to work with CXF.  (ideally, we'd just use the CXF features.xml, but I understand the need for the OBR stuff that CXF's feature.xml doesn't support yet)","dkulp:1308652348:2011-06-21T18:32:28.255+0000:1308652348:2011-06-21T18:32:28.255+0000:
This aligns things much closer with CXF 2.4.1 and ActiveMQ 5.5.   If I features:install camel-cxf, the only mis-matched stuff now are:
xmlbeans -CXF uses 2.4 as 2.5 is not in central.  I believe Camel requires 2.5?)
velocity -CXF uses 1.6, but it's only used for tooling so I'm not sure why CXF is even including it.  Need to investigate more.
javamail -The version Camel uses isn't at central.

It also adds:
ant
antlr
commons-io

Not sure why on those three yet.  CXF doesn't need them at runtime.  Need to check if camel-cxf does.






dkulp:1308654292:2011-06-21T19:04:52.063+0000:1308654292:2011-06-21T19:04:52.063+0000:New version of the patch that removes ant/antlr/commons-io (CXF doesn't need them) and also updates camel-atom to use the same version of abdera  that CXF uses.
njiang:1308722870:2011-06-22T14:07:50.208+0000:1308722870:2011-06-22T14:07:50.208+0000:Applied the patch with thanks to Dan, I also did some clean up work on the abdera-version and fix a minor issue of commons-pools-bundle-version. "
0,CAMEL-4130,Improvement,Minor,2.7.2,None,"

component
jt400

",Resolved,Fixed,2.8.0,Claus Ibsen,João Loureiro,0,0,2011-06-21 11:19:31+00:00,2011-06-23 14:43:03+00:00,"Added an URI option to the JT400 component (the following specification can be used for the documentation):


Name: guiAvailable
Default value: false
Description: specifies whether AS/400 prompting is enabled in the environment running Camel (true to enable, false to disable).


This applies to both data queue and program call endpoints.


According to the JT400 API specification:



Applications that are running as i5/OS applications or want to control the sign-on user interface may want to run with prompting mode set to false.","davsclaus:1308811383:2011-06-23T14:43:03.767+0000:1308811383:2011-06-23T14:43:03.767+0000:Thanks for the patch, keep em coming :)"
0,CAMEL-4129,Improvement,Minor,2.7.2,None,"

component
jt400

",Resolved,Fixed,2.8.0,Claus Ibsen,João Loureiro,0,0,2011-06-21 09:58:47+00:00,2011-06-23 14:35:23+00:00,Methods doStart() and doStop() in Jt400PgmProducer are overridden in a fashion similar to that of Jt400DataQueueProducer.,davsclaus:1308810923:2011-06-23T14:35:23.104+0000:1308810923:2011-06-23T14:35:23.104+0000:Thanks for the patch
0,CAMEL-4128,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-06-21 08:44:42+00:00,2011-06-21 13:46:49+00:00,"Current Camel CxfRsProducer doesn't put the response code back to the message header.
But the user want to access the response code.
Here[1] is the discussion about it.


[1]http://camel.465427.n5.nabble.com/Http-Status-code-from-CXFRS-not-working-tp4509452p4509452.html","sergey_beryozkin:1308630364:2011-06-21T12:26:04.466+0000:1308630364:2011-06-21T12:26:04.466+0000:webClient.getResponse().getStatus() can always be used to access the current response status.
For example:

WebClient webClient = WebClient.create(address);

Book book = webClient.get(Book.class);
webClient.getResponse().getStatus();

or 

Response r = webClient.get(Response.class);
r.getStatus();

or, more specifically for cxf rs,

Book book = webClient.invoke(""GET"", null, Book.class);
webClient.getResponse().getStatus();

Same works for proxies:
BookStore proxy = JAXRSClientFactory.create(address, BookStore.class);
Book book = proxy.getBook();
WebClient.client(proxy).getResponse().getStatus()
njiang:1308633947:2011-06-21T13:25:47.784+0000:1308633947:2011-06-21T13:25:47.784+0000:@Sergey,

Thanks for your code snippet, I just update the CxfRsProducer according it.
User can get the status code from the out message header like this
{code}
  exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)
{code}"
0,CAMEL-4127,Task,Minor,2.7.2,None,"
None
",Resolved,Incomplete,2.9.0,Claus Ibsen,Jason Shepherd,0,0,2011-06-21 02:03:48+00:00,2011-11-04 13:55:37+00:00,"Due to an incompatibility between camel-jboss 2.6.0, and camel-core 2.7.2, we could not use camel-jboss with camel-core 2.7.2","njiang:1308595334:2011-06-21T02:42:14.672+0000:1308595334:2011-06-21T02:42:14.672+0000:We need to release new version of camel extra to pick up the change of camel-2.7.x.
davsclaus:1309137114:2011-06-27T09:11:54.165+0000:1309137114:2011-06-27T09:11:54.165+0000:Jason can you attach your patch with [x] marked for granting license to Apache. Otherwise we cannot accept your patch.

We will release camel-extra after camel 2.8 has been released at apache.
jazinner:1309200093:2011-06-28T02:41:33.901+0000:1309200093:2011-06-28T02:41:33.901+0000:added licence to apache
davsclaus:1311470028:2011-07-24T09:13:48.936+0000:1311470028:2011-07-24T09:13:48.936+0000:Jason the attached files, still has not been licensed to Apache. The file icon has an Apache feather if the license has been granted.
davsclaus:1320386137:2011-11-04T13:55:37.770+0000:1320386137:2011-11-04T13:55:37.770+0000:Apache license not granted"
0,CAMEL-4126,Improvement,Minor,2.8.0,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Brendan Long,0,1,2011-06-20 19:56:20+00:00,2011-06-26 21:07:19+00:00,"With InputStreams, Amazon's Java libraries aren't able to generate the content length or content type, and we get warnings like this:


WARN  AmazonS3Client - No content length specified for stream data.  Stream contents will be buffered in memory and could result in out of memory errors.


Not including the content type means S3 will be serving the uploaded file as generic binary.


Since there are already Camel headers for this, I'm proposing that they be used when sending messages to S3. I can write a patch for this if it would help.","rkettelerij:1308571562:2011-06-20T20:06:02.706+0000:1308571562:2011-06-20T20:06:02.706+0000:Patches are always welcome.
korin43:1308571951:2011-06-20T20:12:31.785+0000:1308571951:2011-06-20T20:12:31.785+0000:Patch to use these headers
muellerc:1309092885:2011-06-26T20:54:45.363+0000:1309092885:2011-06-26T20:54:45.363+0000:Committed r1139939
Thanks Brendan for the patch.
Working on the wiki page..."
0,CAMEL-4125,Task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-20 17:11:16+00:00,2011-06-30 01:47:28+00:00,"The camel-dns, camel-core-xml, and camel-karaf-commands jars are not part of the final binary assembly.  Patch forthcoming.","davsclaus:1308561436:2011-06-20T17:17:16.749+0000:1308561436:2011-06-20T17:17:16.749+0000:camel-core-xml is not a released component (its just some shared code to be used by camel-spring, camel-blueprint etc. eg XML DSLs)
davsclaus:1308561488:2011-06-20T17:18:08.899+0000:1308561488:2011-06-20T17:18:08.899+0000:And I dont think camel-karaf-commands should be there as well as its part of installing Camel in Apache Karaf.
hadrian:1308564638:2011-06-20T18:10:38.571+0000:1308565010:2011-06-20T18:16:50.586+0000:@Claus, do yo want to elaborate more what you mean? How is a user who downloads the apache-camel distro (tar.gz or zip) supposed to use anything that requires camel-spring without the required dependency camel-core-xml being present?
njiang:1308590130:2011-06-21T01:15:30.628+0000:1308596099:2011-06-21T02:54:59.396+0000:@Hadrian,
camel-spring bundle and camel-blueprint bundle have the classes of camel-core-xml and camel-core-osgi.
So we don't need to ship these two artifacts in the distribute kit indeed.
As there are some user request to use the camel context without spring or blueprint as CAMEL-3814 traced, I just added made the camel-core-osgi as the osgi bundle and camel 2.8.0 kit will ship this bundle.


davsclaus:1308608941:2011-06-21T06:29:01.822+0000:1308608941:2011-06-21T06:29:01.822+0000:Yes, camel-core-xml is an ""abstract"" component. If you look at the pom.xml file in eg camel-blueprint or camel-spring you will notice some maven ""stuff"" that includes the source from camel-core-xml into the artifact.

If you look in the camel-spring and camel-blueprint .jar files you can see the .class files from camel-core-xml is included.
davsclaus:1308612813:2011-06-21T07:33:33.720+0000:1308612813:2011-06-21T07:33:33.720+0000:I added the camel-dns to the kit. Thanks Dan.

We can then discuss whether we want to include the karaf commands? Personally I think they dont belong in there as you its part of installing Camel in Karaf using the features.xml file. We dont include the features.xml file in the kit either. Neither do we include the maven archetype JARs etc. (okay a bit far out as you would need maven to use the archetypes :))
dkulp:1308625854:2011-06-21T11:10:54.748+0000:1308625854:2011-06-21T11:10:54.748+0000:
Anyone know why camel-spring and camel-blueprint don't just depend on camel-core-xml like a normal jar?   This setup is completely convoluted.   Very strange.   My personal opinion is that it should just depend on it normally, but I would like to know if I missed something before submitting a patch for that.
hadrian:1308901248:2011-06-24T15:40:48.825+0000:1308901248:2011-06-24T15:40:48.825+0000:@Claus, I think you made some implicit assumptions that support your statement above. I think what we need to clarify is why do we ship the full apache-camel and how we intend users to use it. So if users download the full assembly they have everything to do what?

If they use maven and get the source distro, building everything is one 'mvn install' away. In an osgi environment our features use mvn: for resolving the bundles. So I understand that you believe they not everything belongs in there because the distro is targeting some users (I assume those who deploy standalone or in app servers) who only need the dependencies from one package to add them to the lib directory of their application (and hence things like features, archetypes or camel-core-xml are useless). If that's the assumption I understand the point, but then our binary distro is nothing more than a convenient way of having all the camel jars in one place. 

Or to put it differently, you're claiming that if you use maven, why bother with the distro, if not doesn't matter that maven related artifacts are missing from the distro. Did I get it right? 
davsclaus:1309134319:2011-06-27T08:25:19.242+0000:1309134319:2011-06-27T08:25:19.242+0000:I am just saying that there is a borderline whether karaf commands should be in the kit.

If you use karaf and camel, then you ought to use the features to install camel in karaf which setup the stuff correctly. Why would people install the camel-karaf-command bundle manually? And if they do its OSGi and things can break if you dont install/start stuff in correct order etc. 

Anyway its just 1 JAR file so if you want to put it in the lib directory, then thats okay. And the JAR file is not like an additional 5mb+ to make the ZIP file looks big and fat."
0,CAMEL-4124,Bug,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-06-20 16:30:27+00:00,2011-10-25 11:36:12+00:00,If doing a JMS -> JMS (preserveMessageQos) then the JMSDeliveryMode may not be correctly preserved. This problem is only if the route is a straight JMS -> JMS. If you add some steps in between then the JmsMessage may be touched and the property is then propagated correctly.,
0,CAMEL-4123,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-20 16:27:36+00:00,2011-06-20 16:44:48+00:00,"The JMS API we use to create a new javax.jms.Message may create the message with a non default JMS delivery mode. To cater for that we should set the default mode after the message has been created. 


This code should be added:



 answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);",
0,CAMEL-4122,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,James Strachan,0,0,2011-06-20 15:38:38+00:00,2011-06-22 08:42:30+00:00,"we can create endpoints on the fly via the camel-web REST API; or by just sending a message to a new endpoint URI or consuming from a URI. But there is currently no JMX way to do so which is a bit of an omission.


Something like...


createEndpoint(String uri);


would be a nice addition to the MBeans API on a ManagedCamelContext. Maybe a removeEndpoint(String uri) too would be handy.","hadrian:1308557852:2011-06-20T16:17:32.462+0000:1308557852:2011-06-20T16:17:32.462+0000:Agree, but isn't it a bit too low level? An endpoint is kind of an abstract entity, in the sense that it's totally useless if you don't also create a producer or consumer. These are usually created by instantiating a route via the dsl. Since creating the route is the user's goal and we aim to do it in a simple way, how helpful is such a low level api? Endpoints are created automatically anyway from the dsl. With removeEndpoint it's even trickier, do you mean to remove just a fromEndpoint of a Route, thus shutting down a route?

Am I missing something? Maybe a better description of how the api should be used would clarify things.


jstrachan:1308558617:2011-06-20T16:30:17.558+0000:1308558617:2011-06-20T16:30:17.558+0000:In ActiveMQ and ServiceMix you can view/create/delete endpoints at any time. This is simple and flexible. The fact that the only way to do that in Camel is by creating a route or sending to it is a bit of an omission IMHO. 

e.g. you can create an endpoint directly in camel-web; then browse messages & send message to it - then at some point later on, write some kind of route or create a consumer or whatever.

Tooling of all kinds (command lines, web apps & IDEs) then browse endpoints to help you design/edit routes or move messages from endpoint to endpoint (whether there exists right now a route using the endpoint or not).

When a user is 'playing' in development mode its natural to just create endpoints up front.

So just because typically at deployment time, the way to create endpoints is lazily via route definitions is kinda mute point. Just like in JMS, the way to create destinations is to send/consume; its handy for developers to be able to do so up front - whether there is currently a route/consumer nor not.
jstrachan:1308558653:2011-06-20T16:30:53.394+0000:1308558653:2011-06-20T16:30:53.394+0000:BTW you can create endpoints via the Java API and via the REST API - if nothing else, JMX is being inconsistent."
0,CAMEL-4121,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-20 09:01:02+00:00,2011-06-20 10:49:21+00:00,"There is a difference between using inOnly and inOnly(""activemq:foo""). The former will permanently change the MEP on the Exchange, where as the latter will only change the MEP for sending the exchange to the endpoint. We should highlight this fact. And prefer to use SetExchangePattern to permanently the MEP. So we should @deprecate .inOnly() and .inOut() (eg the methods that doesnt send to an endpoint)",
0,CAMEL-4120,Improvement,Major,2.7.0,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Claus Ibsen,0,0,2011-06-20 06:52:13+00:00,2011-06-20 22:20:55+00:00,"The ClassLoadingAwareObjectInputStream should use the classResolver from CamelContext, which ensures better class loading on various platforms and OSGi etc.",muellerc:1308579624:2011-06-20T22:20:24.141+0000:1308579624:2011-06-20T22:20:24.141+0000:Committed r1137802
0,CAMEL-4119,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Freeman Yue Fang,0,0,2011-06-20 03:03:43+00:00,2011-06-20 03:38:34+00:00,"the default start-level for customer bundles is 60, so if we specify start-level as 50 for camel features, we can ensure camel bundles always get started before customer bundles, this can avoid some race condition issues which is caused by customer router started but the necessary camel component not available yet.
More details is from SMX4-744[1]


[1]https://issues.apache.org/jira/browse/SMX4-744",njiang:1308512314:2011-06-20T03:38:34.640+0000:1308512314:2011-06-20T03:38:34.640+0000:Applied patch into trunk with thanks to Freeman.
0,CAMEL-4118,Improvement,Major,2.7.2,None,"
None
",Resolved,Fixed,2.9.0,Benjamin P. O'Day,Christian Müller,0,0,2011-06-19 11:19:39+00:00,2013-03-02 15:43:05+00:00,"Imagine you process a big file with multiple financial transactions. After splitting the file into its individual transactions, we send they to an aggregator to group transactions for the same card/account together. At this time, we don't know how many transactions we have to group together. Only at the end of processing the input file, we know that we are done. At this time, we have to instruct the aggregator to ""flush all aggregated exchanges"".


A workaround for the time being is, to inject the aggregator also into a bean which is called after the splitter. This bean can query for all keys with the ""getKeys"" method and than send a ""flush"" exchange to the aggregator (completionPredicate(header(""flush""))). However it will still aggregate that ""flush exchange"". So take care of that in your custom aggregation strategy and enable eagerCheckCompletion, so the predicate is checked before aggregating.


We had a similar question on the user list to ""flush all aggregated exchanges"" when Camel shut down.","muellerc:1308455110:2011-06-19T11:45:10.754+0000:1308455110:2011-06-19T11:45:10.754+0000:Instead of calling ""getKeys"" on the aggregator, we could also provide a AggregationStrategy on the Splitter directly, which will collect all the aggregation keys. In this case the bean can take the list of keys from the exchange.
boday:1310388866:2011-07-11T20:54:26.982+0000:1310388866:2011-07-11T20:54:26.982+0000:hmmm...seems like the completionPredicate() does the job of letting you dynamically determine when to complete the exchange...as long as you can set it on the last message in your group, etc.  Can you give me a more detailed example of what you are looking for...
muellerc:1310393679:2011-07-11T22:14:39.585+0000:1310393679:2011-07-11T22:14:39.585+0000:Of curse. Imagine you you process a big file which is splitted per each line and in the aggregator grouped by e.g. the manufacturer. We don't know how many messages the aggregator will receive. After we splitted and grouped all individual messages, the splitter send a ""signal"" message to the aggregator to flush *ALL* messages, independent from the group.
Hope this makes it a bit cleaner.

Best,
Christian
boday:1310398040:2011-07-11T23:27:20.409+0000:1310398040:2011-07-11T23:27:20.409+0000:thanks Christian.  for splitter(), you could just use the Exchange.SPLIT_COMPLETE header that is included in the last message, like this...

from(""file:/tmp/myBigFiles"")
.split(body().tokenize(""\n""))
.aggregate(constant(true), new MyAggregationStrategy())
    .eagerCheckCompletion().completionPredicate(header(Exchange.SPLIT_COMPLETE).isEqualTo(true))

If you are doing other custom splitting of messages, then I'd think you'd be able to set a header on the last message as easily as you could send a separate ""flush"" message...I guess it depends on what other EIPs are involved, etc...



boday:1310465903:2011-07-12T18:18:23.876+0000:1310465903:2011-07-12T18:18:23.876+0000:OK, I see the case now...the completionPredicate() only applies to the current group...not ALL groups.  I'll add a check in the AggregateProcessor to look for a specific header (""completeAllGroups"", etc) to force completion on ALL groups immediately.
muellerc:1310471440:2011-07-12T19:50:40.466+0000:1310471440:2011-07-12T19:50:40.466+0000:Sorry, I was not able to respond earlier...

Yes, that's exactly what I mean. Thanks for taking the stab on this.
boday:1310542160:2011-07-13T15:29:20.445+0000:1310542160:2011-07-13T15:29:20.445+0000:here is a first cut at a patch for both this and CAMEL-4097...will hold off until 2.9, but wanted to get some feedback on this prior to committing...
muellerc:1310561499:2011-07-13T20:51:39.833+0000:1310561499:2011-07-13T20:51:39.833+0000:Hey Ben!

I had a quick look on it. Good work. Here are my comments:

Instead of writing:
{code:java}
String completeAllGroups = (String) exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS);
if (completeAllGroups != null && completeAllGroups.equals(""true"")) {
    forceCompletionOfAllGroups();
    return;
}
{code}

you could write:
{code:java}
Boolean completeAllGroups = exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, Boolean.class);
if (completeAllGroups == Boolean.TRUE) {
    forceCompletionOfAllGroups();
    return;
}
{code}
and also benefit from the Camel type converter mechanism (the user can set the header as a boolean or String value).

AggregateForceCompletionHeaderTest and AggregateForceCompletionOnStopTest didn't check the header ""Exchange.AGGREGATED_COMPLETED_BY"" which is/should be set.

Do we need the MyCompletionProcessor for the tests or could we also use the Mock component?

Sorry for being petty... ;-)
boday:1310562296:2011-07-13T21:04:56.807+0000:1310562296:2011-07-13T21:04:56.807+0000:thanks Christian....agreed on the header/type conversion conmments...I'll post an updated patch soon.  For MyCompletionProcessor, I used it only because I couldn't validate a mock endpoint after calling context.stop().  If you have any other ideas on this...let me know
davsclaus:1310594516:2011-07-14T06:01:56.525+0000:1310594565:2011-07-14T06:02:45.475+0000:There are 2 patches in one ;)

1)
In AggregationDefinition, you should use isForceCompletionOnStop when setting the value, just like the others.

2)
I wonder when aggregating an Exchange having AGGREGATION_COMPLETE_ALL_GROUPS as true, why should you not also aggregate that message, as it may contain data.

3)
In forceCompletionOfAllGroups you check if CamelContext is running. The log message is wrong. And it should be a WARN instead indicating it cannot force completion of all groups.

4)
There is a problem with the force completion on stop option. As when stopping, you do not wait for all the exchanges to complete, before you continue and shutdown the thread pools etc. So this logic is more complicated. 

I suggest to at first implement this ticket. And then later revisit the logic needed to safely flush on stopping the aggregator. The logic to do that is more complicated.
boday:1310636735:2011-07-14T17:45:35.511+0000:1310636735:2011-07-14T17:45:35.511+0000:thanks Claus, here is an updated patch to simply support forcing completion of all groups based on a ""signal"" message with a specific header set. Note that the signal message is NOT aggregated itself...per the initial request...
davsclaus:1310859721:2011-07-17T07:42:01.835+0000:1310859721:2011-07-17T07:42:01.835+0000:In the AggregateProcessorTest unit test, I suggest to have multiple correlation groups in the aggregator when you complete it, so you test that this works.

In the type converter, you can also convert it to a primitive boolean with a default value
boolean completeAllGroups = exchange.getIn().getHeader(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, false, boolean.class);
davsclaus:1310859757:2011-07-17T07:42:37.225+0000:1310859757:2011-07-17T07:42:37.225+0000:Also it would be good to have unit tests in camel-hawtdb and camel-sql as they have a persistent repository.
boday:1312401164:2011-08-04T03:52:44.814+0000:1312401164:2011-08-04T03:52:44.814+0000:added this support as discussed, updated 2.9 release notes and Aggregator2 docs..."
0,CAMEL-4117,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-18 15:54:46+00:00,2011-06-20 10:49:04+00:00,"When using redelivery with the Camel error handler, it will by default use the previous exchange when redelivering. This ensures that any changes that was done by the failed attempt does not reflect when a redelivery is performed (eg think like use original message). However this does not apply when end users uses the low level .process in their Camel routes. So if they change the Exchange in the .process and then some error occurs, then that change is redelivered.


We should consider making the redelivery error handler do a defensive copy of the exchange, so it can redelivery without any changes/side effects. For example this happens when people use .bean or any of the other EIPs. So why not for .process as well?","davsclaus:1308383782:2011-06-18T15:56:22.389+0000:1308383782:2011-06-18T15:56:22.389+0000:For example in the given route below. You would like the Exchange to be the *same* for each of the redeliveries. Even if you alter the Exchange in the .process code, and then *afterwards* and exception is thrown

{code}

                // try to redeliver up till 3 times
                errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0));

                from(""direct:a"")
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            // should be same input body
                            assertEquals(""Hello World"", exchange.getIn().getBody());
                            assertFalse(""Should not have OUT"", exchange.hasOut());
                            assertNull(exchange.getException());
                          
                            // mutate IN body
                            exchange.getIn().setBody(""Bye World"");

                            counter++;
                            throw new IllegalArgumentException(""Forced"");
                        }
                    });
{code}

So in this example you would expect that each redelivery contains the message body ""Hello World"" despite you changed it in the .process code.
davsclaus:1308444566:2011-06-19T08:49:26.773+0000:1308444566:2011-06-19T08:49:26.773+0000:Work in progress patch"
0,CAMEL-4116,Improvement,Major,2.7.2,2.8.0,"

exception-handling
spring
web-service

",Resolved,Fixed,2.8.0,Richard Kettelerij,Joakim Sundqvist,0,0,2011-06-17 12:28:09+00:00,2011-06-20 08:18:37+00:00,"If an Exception is thrown in the camel flow then that exception is not propagated to spring-web-services.


Example: 



<camel:from uri=""spring-ws:rootqname:{foo.com}BarRequest?endpointMapping=#endpointMapping""/>
            <camel:to uri=""bean:exceptionThrower?method=throwException""/>




This would result in an empty response from spring web-services with a status code of 202 (accepted).


If the check was made on the Exchange to see if there was an Exception thrown then that one could be rethrown and the Exception-handling in spring web services could do its magic.


In SpringWebserviceConsumer add this to the invoke method:



 if(exchange.getException() != null){
     throw exchange.getException();
 }","davsclaus:1308297898:2011-06-17T16:04:58.656+0000:1308297898:2011-06-17T16:04:58.656+0000:Richard do you have time to look into this? I think at least we should return HTTP status 500 if an exception was thrown. 
And I dont know if spring-ws can auto map exceptions to soap faults if its defined in the wsdl.
rkettelerij:1308321321:2011-06-17T22:35:21.271+0000:1308321321:2011-06-17T22:35:21.271+0000:@Joakim, thanks for reporting. I've fixed the issue on trunk. Exceptions thrown during routing will now propagate back to Spring-WS, see unit test for details. 

@Claus, Yes Spring-WS by default translates exceptions to SOAP faults. See http://static.springsource.org/spring-ws/sites/2.0/reference/html/server.html#server-endpoint-exception-resolver for details.
poker_jocke:1308529117:2011-06-20T08:18:37.232+0000:1308529117:2011-06-20T08:18:37.232+0000:I have have tried the snapshot build and it works.

Thank you for picking up the issue so fast.

//  Joakim Sundqvist
"
0,CAMEL-4115,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-17 06:26:48+00:00,2011-06-17 08:44:01+00:00,"See post
http://urgoringo.wordpress.com/2011/06/17/interesting-behaviour-in-apache-camel-bean-invocation/


Like we do in eg camel-cache and other components, we remove some of the control headers for the component (eg CamelCacheOperation) as it was only intended for this invocated bean only, and not any preceding beans.",
0,CAMEL-4114,Improvement,Major,2.7.2,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Schneider,Christian Schneider,0,0,2011-06-16 14:33:37+00:00,2011-06-27 12:45:23+00:00,There are some dependency cycles between packages in camel-cxf. Also some classes could need a bit internal cleanup. I open this ticket so my different commits around this can be seen in context.,"cschneider:1308206171:2011-06-16T14:36:11.138+0000:1308206171:2011-06-16T14:36:11.138+0000:Some commits around that before the ticket:
1135975
1136044
1136441

davsclaus:1309137146:2011-06-27T09:12:26.999+0000:1309137146:2011-06-27T09:12:26.999+0000:Christian is there more work here? We want to close down on Camel 2.8 to cut a release.
cschneider:1309139420:2011-06-27T09:50:20.749+0000:1309139420:2011-06-27T09:50:20.749+0000:I think this is a good point to leave it at the moment. I think we can do more but this can be done in a new issue"
0,CAMEL-4113,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-06-16 12:09:24+00:00,2011-06-16 12:55:37+00:00,A camel route can be configured such that in cxf HolderOutInterceptor::handleMessage both the inObjects and outObjects are one in the same. If Holder<T>'s are used this leads to an infinite loop which runs the vm out of memory.,njiang:1308200137:2011-06-16T12:55:37.909+0000:1308200137:2011-06-16T12:55:37.909+0000:Applied the patch into trunk.
0,CAMEL-4112,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-16 10:37:52+00:00,2011-06-16 12:14:32+00:00,"We should prefer to use a RefLoadBalancerDefinition when using a custom load balancer. This makes it consistent in the model which load balancers you can pick and chose.


We recently did this also for data formats, as there is a RefDataFormatDefinition now.",davsclaus:1308197672:2011-06-16T12:14:32.038+0000:1308197672:2011-06-16T12:14:32.038+0000:Its named CustomLoadBalancerDefinition. Likewise the data format was renamed from RefDataFormat to CustomDataFormat. This makes it more clear that its a custom.
0,CAMEL-4111,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-16 06:23:29+00:00,2011-06-16 06:30:25+00:00,"When using <marshal> or <unmarshal> in XML DSL, the model allows them to have outputs, so you can in theory do:



        <route>
            <from uri=""direct:unmarshal""/>
            <unmarshal>
                <string charset=""UTF-8""/>
                <to uri=""mock:unmarshal""/>
            </unmarshal>
        </route>




This is unusual as people should do as follows:



        <route>
            <from uri=""direct:unmarshal""/>
            <unmarshal>
                <string charset=""UTF-8""/>
            </unmarshal>
            <to uri=""mock:unmarshal""/>
        </route>




We should fix this so they dont accept outputs. This also make code completion much easier, as if you press ctrl + space inside the <unmarshal> tag you only get the list of possible data formats to choose among.",
0,CAMEL-4110,Sub-task,Major,None,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Claus Ibsen,0,0,2011-06-16 05:14:47+00:00,2011-08-15 13:56:27+00:00,No Desc,"njiang:1311278353:2011-07-22T03:59:13.223+0000:1311278353:2011-07-22T03:59:13.223+0000:Committed the patch into trunk in revision 1149449.
njiang:1311278483:2011-07-22T04:01:23.724+0000:1311278483:2011-07-22T04:01:23.724+0000:We need to upgrade CXF version to 2.4.2 which has a patch CXF-3678 which is related to this issue.
njiang:1313387787:2011-08-15T13:56:27.897+0000:1313387787:2011-08-15T13:56:27.897+0000:Upgraded CXF version to 2.4.2."
0,CAMEL-4109,Sub-task,Minor,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-16 05:13:54+00:00,2013-05-02 02:29:41+00:00,We should add an example how to use the CXF blueprint namespace with Camel.,"dkulp:1308662737:2011-06-21T21:25:37.928+0000:1308662737:2011-06-21T21:25:37.928+0000:this is an port of the camel-example-cxf-osgi example to use blueprint
dkulp:1308662767:2011-06-21T21:26:07.520+0000:1308662767:2011-06-21T21:26:07.520+0000:
Fixes in CAMEL-4135 are required for this to work.
njiang:1309131810:2011-06-27T07:43:30.153+0000:1309131810:2011-06-27T07:43:30.153+0000:@Claus,
I already create an example profile which support the blueprint of camel and camel-cxf.
You can find more information here CAMEL-4142.

davsclaus:1309132193:2011-06-27T07:49:53.944+0000:1309132193:2011-06-27T07:49:53.944+0000:Willem its much easier to have 2 different examples. All the README.txt etc talks about spring-dm etc.

And by having a separate example people can just copy it in case they want to use blueprint. That is much harder with one example where you would need to manually remove the spring-dm pieces etc.

So I suggest to remove the maven profile you added.
davsclaus:1309132831:2011-06-27T08:00:31.687+0000:1309132831:2011-06-27T08:00:31.687+0000:Johan added some pieces to the CXF about blueprint support.

Added the cxf-blueprint example. Thanks to Dan for the patch."
0,CAMEL-4108,New Feature,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Niels Peter Strandberg,0,3,2011-06-15 18:39:16+00:00,2022-09-02 08:35:49+00:00,"1) Add a ""toEnd"" to the DateField:


CSV file:



w,RegionH,1234,4567,5565
w,KIT,233,233
d,Rigshospitalet




The model:



@CsvRecord(separator = "","")
public class Org {

   @DataField(pos = 1)
   private String type;
	
   @DataField(pos = 2)
   private String name;

   @DataField(pos = 3, toEnd = true)
   private List<Integer> ids;

}




The ""ids"" list will then contain the result for pos 3 to the end of the line. 


2) Add a ""endPos"" to the DateField:


CSV file:



w,RegionH,1234,4567,5565,m
w,KIT,233,233,4545,m
d,Rigshospitalet,343434,3434,3434,r




The model:



@CsvRecord(separator = "","")
public class Org {

   @DataField(pos = 1)
   private String type;

   @DataField(pos = 2)
   private String name;

   @DataField(pos = 3, endPos = 5)
    private List<Integer> ids;

   @DataField(pos = 6)
   private String action;

}




The ""ids"" list will then contain the result for pos 3 to 5. 


I have a prototype for the unmarshalling.


/Niels Peter Strandberg","davsclaus:1308173736:2011-06-16T05:35:36.235+0000:1308173736:2011-06-16T05:35:36.235+0000:Ah its like a range you ask for
@DataField(pos = 3, endPos = 5)
or
@DataField(pos = 3, endPos = -1)
(where -1 means unlimited/toEnd)
nielspeter:1308188948:2011-06-16T09:49:08.604+0000:1308188948:2011-06-16T09:49:08.604+0000:Ok, so you suggest that I replace toEnd=true with endPos=-1. Then endPos=0 is the default value when endPos should be ignored.

Is this feature something that would be useful for bindy?
davsclaus:1308271472:2011-06-17T08:44:32.637+0000:1308271472:2011-06-17T08:44:32.637+0000:Yeah we love contributions
davsclaus:1436623449:2015-07-11T22:04:09.706+0000:1436623449:2015-07-11T22:04:09.706+0000:This would only apply for fields that are a list type so multiple values can be stored.
lb:1472713833:2016-09-01T15:10:33.157+0000:1472714275:2016-09-01T15:17:55.366+0000:The issue is that the generic type is erased at runtime so it may not be possible to reliable get the type, maybe we should also add a type to the DataField (which could *maybe* also be useful if you want to define a field as Number and specify the type with the annotation)., or requiring to have a BindyConverter annotation

[~davsclaus] make sense ?
lb:1472782115:2016-09-02T10:08:35.644+0000:1472782115:2016-09-02T10:08:35.644+0000:Another issue is how to handle the header generation, should the same column name be applied ? i.e

{code}
type,name,id,id,id,action
w,RegionH,1234,4567,5565,m
{code}
davsclaus:1472868565:2016-09-03T10:09:25.551+0000:1472868565:2016-09-03T10:09:25.551+0000:Yeah I think the id should be repeated in the header, so there is a 1:1 mapping for each column.
davsclaus:1472868615:2016-09-03T10:10:15.187+0000:1472868615:2016-09-03T10:10:15.187+0000:Yeah we would need to specify it on the annotation so the type information is not lost.
lb:1473051869:2016-09-05T13:04:29.532+0000:1473051869:2016-09-05T13:04:29.532+0000:I did a little bit more investigation and this support to List fields may clash with OneToMany so it may be better to deprecate OneToMany and have a generic support for Lists (maybe in 3.0, along with bindy2 maybe)



davsclaus:1473547994:2016-09-11T06:53:14.928+0000:1473547994:2016-09-11T06:53:14.928+0000:Ah okay, yeah we can wait for Camel 3.0"
0,CAMEL-4107,Bug,Major,2.7.2,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Nikolaos Dimos,1,1,2011-06-15 12:49:02+00:00,2011-06-15 14:58:19+00:00,"When we use more than one errorHandler in our routes and onException, we face test failures with the following exception:
java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[mock://custom])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:94)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:621)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:242)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:189)[camel-core-2.7.2.jar:2.7.2]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:121)[camel-core-2.7.2.jar:2.7.2]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_20]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_20]","nikosd23:1308113967:2011-06-15T12:59:27.427+0000:1308113967:2011-06-15T12:59:27.427+0000:Attached you can find two unit tests that instantiate two different camel contexts. One contains routes that reference one errorHandler and the other contains routes that reference two error handlers. The tests of the first camel context pass, while the tests of the second fail with the aforementioned exception.
davsclaus:1308114605:2011-06-15T13:10:05.484+0000:1308114605:2011-06-15T13:10:05.484+0000:Can you re-attach the file, and this time mark [x] in grant license to Apache.
nikosd23:1308115515:2011-06-15T13:25:15.806+0000:1308115515:2011-06-15T13:25:15.806+0000:Attaching again the file with Grant licence to ASF
davsclaus:1308118947:2011-06-15T14:22:27.938+0000:1308118947:2011-06-15T14:22:27.938+0000:This issue is fixed on trunk.
nikosd23:1308121099:2011-06-15T14:58:19.464+0000:1308121099:2011-06-15T14:58:19.464+0000:Thanks for your reply."
0,CAMEL-4106,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-15 09:46:12+00:00,2011-06-15 12:56:47+00:00,"When routing the redelivery error handler takes place, and for non error situations the shouldRedeliver method is executed, returning false so the routing can continue. However we ought only to invoke this operation if its a potential redelivery being executed. This is more logical.


See nabble
http://camel.465427.n5.nabble.com/Redelivery-is-not-disabled-when-maximumRedeliveries-is-set-to-0-tp4488147p4488147.html",
0,CAMEL-4105,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Billy Buzzard,0,1,2011-06-14 15:02:51+00:00,2011-10-25 11:35:23+00:00,"I have several threads each polling a different FTP Remote folder location.  This works fine for a couple of weeks then one or more FTP Threads die (disappear).  I'm going to attach a snippet from my log file below.  Notice that normally the connection to the FTP site does not exists.  The connection is then made and the folders are checked then the FTP process disconnects.  Some of the folders are on the same remote FTP site and I don't know if that causes a problem or not.


The first time I notice that the thread is dead is when the code starts checking the FTP threads to see if they are connected and I notices that not all of the thread are listed.







LOG SNIPPET ***
2011-06-13 11:40:00,531 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,609 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,905 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:00,911 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:00,914 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:00,918 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,184 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,470 | DEBUG | Took 0.565 seconds to poll: Outbound/Vendors | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,470 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:40:01,562 | DEBUG | Took 0.650 seconds to poll: Outbound/TransportXML | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,562 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:40:01,582 | DEBUG | Took 0.668 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:40:01,583 | DEBUG | Took 0.665 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,583 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:40:01,877 | DEBUG | Took 0.693 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:01,877 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:40:46,452 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:40:46,465 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:03.418,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113850.EDI,modified=2011-06-13 11:38:56.000,size=264 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:00,524 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:00,583 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:00,594 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,985 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #2 - ftp://bnsf@ftp.mercurygate.net/Outbound/TransportXML
2011-06-13 11:41:00,996 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #6 - ftp://bnsf@ftp.mercurygate.net/Outbound/Vendors
2011-06-13 11:41:01,043 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,048 | INFO  | Connected and logged in to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:01,171 | INFO  | Connected and logged in to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:01,527 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=ROUTER,file=/esb/ToRouter/Binary/CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | Inbound | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,536 | INFO  | src=Ftp,srcTime=2011-06-13 11:39:18.540,dst=Edi,file=Edi-CARRIER/JBHLOW/TO_BNSF_DATA/HJBT110613113857.EDI,modified=2011-06-13 11:39:12.000,size=257 | DstEdi | DefaultMessageListenerContainer-1
2011-06-13 11:41:01,596 | DEBUG | Took 0.553 seconds to poll: Outbound/AP | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:01,596 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:41:02,396 | DEBUG | Took 1.348 seconds to poll: Outbound/Customers | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,396 | DEBUG | Disconnecting from: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers
2011-06-13 11:41:02,973 | DEBUG | Took 1.802 seconds to poll: outbound | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:02,973 | DEBUG | Disconnecting from: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:41:36,017 | ERROR | Could not accept connection : org.apache.activemq.transport.InactivityIOException: Channel was inactive for too long: /172.24.1.95:45512 | org.apache.activemq.broker.TransportConnector | ActiveMQ Task
2011-06-13 11:42:00,520 | DEBUG | Not connected/logged in, connecting to: ftp://r0060207@ftp.inttraworks.inttra.com:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #1 - ftp://r0060207@ftp.inttraworks.inttra.com/outbound
2011-06-13 11:42:00,572 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #3 - ftp://bnsf@ftp.mercurygate.net/Outbound/AP
2011-06-13 11:42:00,580 | DEBUG | Not connected/logged in, connecting to: ftp://bnsf@ftp.mercurygate.net:21 | org.apache.camel.component.file.remote.FtpConsumer | Camel (camel) thread #5 - ftp://bnsf@ftp.mercurygate.net/Outbound/Customers","davsclaus:1308038701:2011-06-14T16:05:01.623+0000:1308038701:2011-06-14T16:05:01.623+0000:Can you upgrade to a never Camel release.


bbuzzard:1308040571:2011-06-14T16:36:11.474+0000:1308040571:2011-06-14T16:36:11.474+0000:Does the newest version fix this problem?  If so, what was the problem?  We prefer not to update unless there is a specific fix.  We don't want to introduce new bugs if we can avoid it.
bbuzzard:1308040772:2011-06-14T16:39:32.266+0000:1308041185:2011-06-14T16:46:25.146+0000:Pulling FTP files in from a remote FTP site is very important to us.  If we can't revolve this issue then I will have to remove the FTP Consumers and implement the code external to camel, so that's why I set the priority to ""BLOCKED'. 
davsclaus:1308124048:2011-06-15T15:47:28.008+0000:1308124048:2011-06-15T15:47:28.008+0000:I can see you use a FuseSource product. If you are a FuseSource subscriber then I suggest to use that channel to get help with your issue. They can provide you with a solution for your current version so you dont have to do a upgrade.

That said I am adding more logic in the ScheduledPollConsumer so we do a full try .. catch(Error e) to catch any kind of errors thrown to avoid the thread from dying. This may possible cause the JDK scheduled thread pool to fail scheduling the task. 

Also I am adding a runLoggingLevel option you can use to enable to configure a logging level that logs: START, COMPLETE on the scheduled task. Then that may help us/you to see when it stops logging that. Likewise there is a ERROR that logs all thrown error from the thread.


davsclaus:1308124094:2011-06-15T15:48:14.367+0000:1308124094:2011-06-15T15:48:14.367+0000:See also CAMEL-3216
davsclaus:1308125867:2011-06-15T16:17:47.006+0000:1308125867:2011-06-15T16:17:47.006+0000:I would suggest to set option: useFixedDelay=true, and also add a higher delay between pools instead of the default value of 500 millis. So for example: useFixedDelay=true&delay=10s. To only poll every 10th second.
bbuzzard:1308127993:2011-06-15T16:53:13.412+0000:1308127993:2011-06-15T16:53:13.412+0000:The delay for each FTP route is set to 60,000 (60 sec).  Some of the routes are polling from the same host, but different directories, and that is why it may appear in my log that I am polling every 500 millis.  Are you saying in the case where I am polling different directories on the same host that each of those polls should be further apart in time?

Yes I am using a particular version of Camel from FUSE, but it was not our intent to do this on a regular basis.  We were only trying to address a particular set of problems with the ActiveMQ-Camel 5.4.1 release.  The Fuse group assured us that the code we were using was submitted back to the open source ActiveMQ-Camel projects.  Please let us know if that is not true.

I would be more than happy to assist you with any coding or testing that needs to be done to work through this problem.    
davsclaus:1308173515:2011-06-16T05:31:55.963+0000:1308173515:2011-06-16T05:31:55.963+0000:Yes FuseSource ensures that the code is submitted back to Apache. In fact we mostly fix and commit at Apache first, and then sync the code to FuseSource.

I have committed a fix to the trunk, that:
- option {{useFixedDelay}} is now default true
- will rigorously catch all errors throw from the scheduled task (catch {{java.lang.Error}})
- added runLoggingLevel option to log start/complete logs when the scheduled task runs. For example set {{runLoggingLevel=INFO}} and you should see this in the logs. This can maybe help you see when a thread stops from running.
bbuzzard:1308211702:2011-06-16T16:08:22.151+0000:1308211702:2011-06-16T16:08:22.151+0000:The fix looks good except I'm getting errors when I try to compile I get an error with LOG.error(""Scheduled task started on:   {}"", this.getEndpoint());

I looked at the Interface for LOG and I don't see that signature.  Was the LOG interface modified?
davsclaus:1308212352:2011-06-16T16:19:12.144+0000:1308212352:2011-06-16T16:19:12.144+0000:Camel 2.6 uses Apache commons-logging. Camel 2.7+ uses slf4j as logging. So you may have to adjust the patch slightly when back porting.
bbuzzard:1308213550:2011-06-16T16:39:10.985+0000:1308213550:2011-06-16T16:39:10.985+0000:Thank you for the quick fix!  I'm making the adjustment now for back porting."
0,CAMEL-4104,Test,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-06-14 11:45:47+00:00,2011-06-23 14:24:50+00:00,"Our CI servers isnt always to happy with hardcoded port numbers. So we should try to use dynamic assigned port numbers. See camel-mina, camel-jetty, camel-syslog, etc for examples.","jbonofre:1308206205:2011-06-16T14:36:45.057+0000:1308206205:2011-06-16T14:36:45.057+0000:I don't know what Christian did, but here's my patch if it can help :)
jbonofre:1308206563:2011-06-16T14:42:43.072+0000:1308206563:2011-06-16T14:42:43.072+0000:Reviewing the Christian's changes, I noticed:
- the org.apache.camel.component.restlet.route.TestRouteBuilder still use ""static"" port (9080)
- RestletFaultTest still use ""static"" port (9080)
- RestletPostXmlRouteAndJSONAsReturnTest still use ""static"" port (9087)
- RestletPostXmlRouteTest still use ""static"" port (9087)
- RestletPostXmlTest still use ""static"" port (9087)
cschneider:1308209714:2011-06-16T15:35:14.844+0000:1308209714:2011-06-16T15:35:14.844+0000:Sorry doing these things in parallel to you but I did not even know that ticket exists when I did the change. I wonly saw that I got test failures.
jbonofre:1308266531:2011-06-17T07:22:11.880+0000:1308266531:2011-06-17T07:22:11.880+0000:I'm gonna submit a new patch to cover all ports in use.
jbonofre:1308745208:2011-06-22T20:20:08.637+0000:1308745208:2011-06-22T20:20:08.637+0000:New patch covering all unit tests in complement of Christian's changes.
davsclaus:1308810290:2011-06-23T14:24:50.151+0000:1308810290:2011-06-23T14:24:50.151+0000:Thanks for the patch. The checkstyle failed so I had to reorder some imports to fix that"
0,CAMEL-4103,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-14 08:39:09+00:00,2011-06-14 08:40:41+00:00,"In doCatch you have access to the caught exception using the exchange property CAUGHT_EXCEPTION. But we should also make FAILURE_ENDPOINT available as well. This information is present when you use onException / errorHandler. So we should make this consistent, and be avail in doCatch / doFinally as well.",
0,CAMEL-4101,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-06-14 01:56:02+00:00,2011-06-14 02:16:40+00:00,"As the CXF 2.4.1 is released, it's time to upgrade the CXF version of camel-cxf.",njiang:1307989000:2011-06-14T02:16:40.438+0000:1307989000:2011-06-14T02:16:40.438+0000:Applied patch into trunk.
0,CAMEL-4100,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,James Strachan,0,0,2011-06-13 12:04:07+00:00,2011-06-13 18:05:09+00:00,"If you try sending a message to a JMS endpoint with a header JMSDeliveryMode of value PERSISTENT / NON-PERSISTENT it generates...



Caused by: java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsBinding.appendJmsProperty(JmsBinding.java:326)
	at org.apache.camel.component.jms.JmsBinding.appendJmsProperties(JmsBinding.java:304)




Firstly we should handle null being returned when converting the ""JMSDeliveryMode"" header (see line 325)


Secondly it would be nice to detect PERSIST* or NON* as String values and map those to DeliveryMode.PERSISENT / DeliveryMode.NON_PERSISTENT respectively. Using a 0 or 1 is OK, but using a more descriptive string would be useful",
0,CAMEL-4099,Bug,Minor,2.7.2,"2.7.3, 2.8.0","

camel-core,
configuration
propertyplaceholder,

",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Carlo M. Camerino,0,1,2011-06-13 12:00:52+00:00,2011-10-25 11:35:56+00:00,"Error happens when I try to configure using properyconfigurer
<camel:propertyPlaceholder location=""file://${user.home}/aventurine-config/aventurine-config.properties"" id=""propertyPlaceHolder""/> and try to use an environment variable. THis happens only on windows environment. This works on Ubuntu, It seems that camel is removing the slashes in ${user.home}


org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[Fromfile:{{upload.folder}}] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:upload.folder due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.web.context.ContextLoader.createWebApplicationContext(ContextLoader.java:276)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:197)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:47)
	at org.mortbay.jetty.handler.ContextHandler.startContext(ContextHandler.java:548)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:136)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1239)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:466)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:222)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at com.ccti.StartUFM.main(StartUFM.java:35)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route areaFileRoute: Route[[Fromfile:{{upload.folder}}] -> [DoTry[[process[ref:... because of Failed to resolve endpoint: file:upload.folder due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:170)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:706)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1643)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1432)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1336)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1314)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 18 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:upload.folder due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:96)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:83)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:963)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:405)
	... 36 more","davsclaus:1307938849:2011-06-13T12:20:49.732+0000:1307938849:2011-06-13T12:20:49.732+0000:Can you use windows path separators?

Should be something like:
{code}
file:${user.home}\aventurine-config\aventurine-config.properties
{code}


carloc:1307940466:2011-06-13T12:47:46.439+0000:1307940466:2011-06-13T12:47:46.439+0000:Changed it to this

<camel:camelContext id = ""camelContext"">
		<camel:propertyPlaceholder location=""file:${user.home}\aventurine-config\aventurine-config.properties"" id=""propertyPlaceHolder""/>

something's wrong with the user.home

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file:{{upload.folder}} due to: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:407)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:47)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:180)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:110)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:793)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)
	... 28 more
Caused by: java.io.FileNotFoundException: C:Userscarloc\aventurine-config\aventurine-config.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at java.io.FileInputStream.<init>(FileInputStream.java:66)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:67)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:49)
	at org.apache.camel.comp
davsclaus:1307940913:2011-06-13T12:55:13.202+0000:1307940913:2011-06-13T12:55:13.202+0000:Well of course it would be nice if Camel dont give a *** if the separators is \ or /. Well if only windows would be like the others :)

Can you check your user home property? It seems to be resolved to ""C:Userscarloc"". The \ is missing. Could still be a bug in Camel though.
carloc:1307945442:2011-06-13T14:10:42.781+0000:1307945442:2011-06-13T14:10:42.781+0000:seems to work fine with the spring propertyconfigurer. also happens on my colleague's workstation. his workstation is also windos.

THanks
davsclaus:1307948198:2011-06-13T14:56:38.446+0000:1307948198:2011-06-13T14:56:38.446+0000:Okay I guess there is an issue when using that on Windows as it uses \ path separators.


davsclaus:1307962520:2011-06-13T18:55:20.177+0000:1307962520:2011-06-13T18:55:20.177+0000:Okay found the bug. The replacement string must be quoted when using replaceFirst in the matcher, to have it work as a direct literal replacement.

Se the JDK javadoc
http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)
davsclaus:1307962718:2011-06-13T18:58:38.973+0000:1307962718:2011-06-13T18:58:38.973+0000:I have committed a fix. Thanks for reporting."
0,CAMEL-4098,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Willem Jiang,Claus Ibsen,1,2,2011-06-13 08:54:16+00:00,2014-03-04 07:08:11+00:00,"It seems there is logic in camel-http that stream cache, regardless what.


We should avoid this as ppl should be able to use Camel with the streams directly.
And there seems to be an issue that the camel-http doesn't clear tmp files. Seems like the on completion isnt added to the Exchange which ensures to delete the tmp files.


See nabble
http://camel.465427.n5.nabble.com/http-not-cleaning-up-tmp-files-when-exchange-is-stopped-tp4269124p4269124.html


This is most likely also an issue with camel-http4","njiang:1334556384:2012-04-16T14:06:24.705+0000:1334556526:2012-04-16T14:08:46.585+0000:HttpClient will close the InputStream automatically, when the connection is closed.
So we need to cache the InputStream in the HttpProducer before close the connection.

We can not leverage the on completion method of Exchange as the input stream maybe used after the exchange is completed. The [JettyHttpFileCacheTest|https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest/src/test/java/org/apache/camel/itest/issues/JettyHttpFileCacheTest.java] in the itest module shows the case that temp file will be deleted when the exchange is on completion before sending the response from the proxy.

We should let the user know that he has the responsibility to close the stream to release the temp file.
davsclaus:1393888091:2014-03-04T07:08:11.786+0000:1393888091:2014-03-04T07:08:11.786+0000:Lets leave current behavior as is, as its been like this from the start."
0,CAMEL-4097,New Feature,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Benjamin P. O'Day,Claus Ibsen,0,1,2011-06-13 08:50:06+00:00,2011-09-21 19:59:50+00:00,"We may want to add options to stateful EIPs such as aggregator/resequencer that they should flush on shutdown. People who dont use a persistent store would loose the in-memory partly aggregated exchanges.


See nabble
http://camel.465427.n5.nabble.com/Aggregator-completeOnShutdown-tp4423774p4423774.html","boday:1316099834:2011-09-15T23:17:14.868+0000:1316099834:2011-09-15T23:17:14.868+0000:Claus, I'm revisiting this.  When I worked on a combined patch with CAMEL-4118, you said this...""when stopping, you do not wait for all the exchanges to complete before you continue and shutdown the thread pools etc.""

I'm not sure I follow.  Is there any other place that we do this?  If not, any advice on how to do this...thanks

davsclaus:1316137247:2011-09-16T09:40:47.328+0000:1316137247:2011-09-16T09:40:47.328+0000:forceCompletionOfAllGroups only flushes the partial aggregated exchanges, so they get submitted to the thread pool. See the onCompletion and onSubmitCompletion methods.

Then the logic in doStop will continue and stop recoverService, timeoutMap and the other pieces.
So you would in theory have to adjust this logic so eg processor, deadLetterProcessor, recoverService is not stopped.
So the internal stuff is still running to allow the flushed exchanges to be processed without problems.
And then after the exchanges has been completed, then those should be stopped. And in top of this you have a timeout to ensure that stopping the aggregator do not block forever for some odd reason.

So it becomes a bit harder to handle.

Instead we may want to allow Processor's in the route to prepare for shutdown/stop. A bit like the ShutdownAware. 
So we have some sort of pre event that signals about to stop, and allow any ShutdownAware processor to prepare for this. Then the logic is separated, in that preparation logic we can also allow the processors to return a pendingExchangesSize so it can tell how many exchanges it have buffered. See the DefaultShutdownStrategy how we do this currently for consumers.

So what we should do is probably extend this so ShutdownStrategy does the ShutdownAware for all the Processor's in the route as well (after the consumers).  

For example the resequencer EIP pattern is also stateful and could have a similar option, to flush on stopping.

davsclaus:1316137447:2011-09-16T09:44:07.121+0000:1316137472:2011-09-16T09:44:32.666+0000:An easier solution could be to just keep track on the inProgressCompleteExchanges and wait until it reaches 0, then you know all the flushed exchanges is done. Then when its zero, you can continue the regular stopping code.
davsclaus:1316137845:2011-09-16T09:50:45.444+0000:1316137845:2011-09-16T09:50:45.444+0000:btw when stopping routes/ shutting down Camel it uses the ShutdownStrategy which have timeout built-in, so we should be okay if you need to use sleep until it reaches zero.
boday:1316162587:2011-09-16T16:43:07.832+0000:1316162587:2011-09-16T16:43:07.832+0000:thanks Claus, I see what you are talking about now...didn't realize that another thread was being used in onCompletion() to send out the exchanges.  It sounds like something like this should do it, correct?

{code}
if (forceCompletionOnStop) {
    forceCompletionOfAllGroups();

    while(inProgressCompleteExchanges.size() > 0) {
        LOG.debug(""waiting for {} in progress exchanges to complete"", inProgressCompleteExchanges.size());
        Thread.sleep(100);
    }
}
{code}
davsclaus:1316222947:2011-09-17T09:29:07.886+0000:1316222947:2011-09-17T09:29:07.886+0000:Yeah that should do it
boday:1316606390:2011-09-21T19:59:50.451+0000:1316606390:2011-09-21T19:59:50.451+0000:change committed and docs updated (Aggregator2, 2.9 Release Notes)..."
0,CAMEL-4096,Bug,Major,None,2.5.0,"
None
",Closed,Fixed,2.5.0,Benjamin P. O'Day,Claus Ibsen,0,0,2011-06-13 08:46:58+00:00,2011-06-28 03:18:58+00:00,"See nabble
http://camel.465427.n5.nabble.com/Multiple-remote-connection-to-the-same-host-but-different-users-tp4309456p4309456.html


We should keep auth information in endpoint key, so using a different credential will not re-using cached with another credential.


This problem is most likely also in camel-http4.","boday:1309169381:2011-06-27T18:09:41.709+0000:1309169381:2011-06-27T18:09:41.709+0000:I haven't been able to reproduce this issue.  From my testing, the producer cache uses the endpoint URI as the key which is unique because the user/password are part of the URI.  Perhaps, I'm missing something though.  Any thoughts on this?
njiang:1309202104:2011-06-28T03:15:04.638+0000:1309202104:2011-06-28T03:15:04.638+0000:I just checked the change log , and found this issue should be fix last year.
You can find more information in CAMEL-2945.
njiang:1309202269:2011-06-28T03:17:49.987+0000:1309202269:2011-06-28T03:17:49.987+0000:This issue was already fixed in CAMEL 2.5.0"
0,CAMEL-4095,Test,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Daniel Kulp,Claus Ibsen,0,0,2011-06-13 06:27:08+00:00,2011-07-29 12:46:56+00:00,"Sometime our CI servers will fail with a port number in use, for unit tests that used a hardcoded port number.


We should try to leverage the avaialble port finder code from camel-test and use a dynamic port number instead.
See for example tests in camel-mina, camel-jetty for examples.","davsclaus:1309137256:2011-06-27T09:14:16.703+0000:1309137256:2011-06-27T09:14:16.703+0000:Would be nice if some of the many camel+cxf committers would take care of this. 
dkulp:1311914816:2011-07-29T12:46:56.952+0000:1311914816:2011-07-29T12:46:56.952+0000:
All the tests now use dynamic ports."
0,CAMEL-4064,Test,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Rich Newcomb,0,0,2011-06-07 05:03:26+00:00,2011-06-16 13:52:33+00:00,"The unit tests for the camel-xmlsecurity component (org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormatTest) do not report a failure when exceptions occur in the associated test routes. The following tests encounter unrecoverable exceptions when executed, but report no failures or errors.



testPartialPayloadXMLElementEncryptionWithKey(org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormatTest)
testPartialPayloadXMLElementEncryptionWithKeyAndAlgorithm(org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormatTest)
testPartialPayloadXMLElementDecryptionWithKey(org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormatTest)
testPartialPayloadXMLContentDecryptionWithKeyAndAlgorithm(org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormatTest)","rnewcomb:1307394287:2011-06-07T05:04:47.859+0000:1307394287:2011-06-07T05:04:47.859+0000:CAMEL-4061 includes a potential fix for this defect.
hadrian:1308203553:2011-06-16T13:52:33.322+0000:1308203553:2011-06-16T13:52:33.322+0000:Done."
0,CAMEL-4063,Bug,Major,2.7.1,None,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Rich Newcomb,0,0,2011-06-07 04:52:12+00:00,2011-06-16 13:53:14+00:00,The camel-xmlsecurity component does not decode element-level encrypted data.,"rnewcomb:1307393615:2011-06-07T04:53:35.177+0000:1307393615:2011-06-07T04:53:35.177+0000:CAMEL-4061 includes a potential fix for this defect.
hadrian:1308203594:2011-06-16T13:53:14.789+0000:1308203594:2011-06-16T13:53:14.789+0000:Done."
0,CAMEL-4062,Bug,Major,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Rich Newcomb,0,0,2011-06-07 04:44:12+00:00,2011-06-16 13:52:10+00:00,"Camel XMLSecurity produces an NPE when a client-provided passPhrase is included as a marshal().secureXml() parameter.


java.lang.NullPointerException
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at javax.crypto.spec.DESedeKeySpec.<init>(DashoA13*..)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.generateEncryptionKey(XMLSecurityDataFormat.java:176)
        at org.apache.camel.dataformat.xmlsecurity.XMLSecurityDataFormat.marshal(XMLSecurityDataFormat.java:94)
        at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)","rnewcomb:1307393237:2011-06-07T04:47:17.595+0000:1307393256:2011-06-07T04:47:36.715+0000:CAMEL-4061 includes a potential fix for this defect.
hadrian:1308203530:2011-06-16T13:52:10.494+0000:1308203530:2011-06-16T13:52:10.494+0000:Done."
0,CAMEL-4061,Improvement,Major,None,None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Hadrian Zbarcea,Rich Newcomb,2,2,2011-06-07 04:17:35+00:00,2011-10-25 11:36:08+00:00,"Enhance the camel-xmlsecurity data format to support asymmetric key encryption algorithms.


This enhancement provides the following capabilities:


1. Expands the xmlsecurity data format API with a public method that accepts a key transport algorithm and recipient key alias
2. Supports the RSA 1.5 and RSA OAEP asymmetric key encryption algorithms
3. Alternatively allows the recipient public key alias to be defined within a message exchange or in camel context
4. Allows key store and trust store information to be defined in the camel context


Example configuration:



// context properties for encryption
contextProps.put(XMLSecurityDataFormat.XML_ENC_TRUST_STORE_URL, getClass().getClassLoader().getResource(""sender.ts"").toString());
contextProps.put(XMLSecurityDataFormat.XML_ENC_TRUST_STORE_PASSWORD, ""password"");
contextProps.put(XMLSecurityDataFormat.XML_ENC_RECIPIENT_ALIAS, ""recipient"");
    	
// context properties for decryption
contextProps.put(XMLSecurityDataFormat.XML_ENC_KEY_STORE_URL, getClass().getClassLoader().getResource(""recipient.ks"").toString());
contextProps.put(XMLSecurityDataFormat.XML_ENC_KEY_STORE_PASSWORD, ""password"");
contextProps.put(XMLSecurityDataFormat.XML_ENC_KEY_STORE_ALIAS, ""recipient"");
    
context.addRoutes(new RouteBuilder() {	  
  public void configure() {
    from(""direct:start"")
     .marshal().secureXML(""//privatenode"", true, ""some-pub-key-alias"", XMLCipher.AES_256, XMLCipher.RSA_v1dot5).to(""mock:encrypted"")
     .unmarshal().secureXML(""//privatenode"", true, ""somet-pub-key-alias"",XMLCipher.AES_256,XMLCipher.RSA_v1dot5).to(""mock:decrypted"")	            
  }
});","rnewcomb:1307392535:2011-06-07T04:35:35.606+0000:1307392535:2011-06-07T04:35:35.606+0000:This patch fixes a few other issues. I will create new issues for those to provide searchable pointers.

I will be happy to update the patch as necessary, and could integrate with appropriate elements from CAMEL-3750 on the trunk.  Please provide tasks / direction as useful.
joed:1307392858:2011-06-07T04:40:58.776+0000:1307392858:2011-06-07T04:40:58.776+0000:Rich, this is really nice!
One comment, in the CXF/SMX codebase you have shell scripts to re-generate keystores as they will expire, that might be a good addition.
hadrian:1307540605:2011-06-08T21:43:25.395+0000:1307540605:2011-06-08T21:43:25.395+0000:Rich, thanks for the patch. I applied the camel-core part, I am testing the second one now and will commit shortly. Thanks again, and keep them coming.
davsclaus:1307785131:2011-06-11T17:38:51.665+0000:1307785131:2011-06-11T17:38:51.665+0000:Did the 2nd patch ever get committed? 
hadrian:1307989600:2011-06-14T02:26:40.754+0000:1307989600:2011-06-14T02:26:40.754+0000:I applied the second patch, but there are 5 tests failing which I @Ignore. I will look into it tomorrow to figure out the cause of an InvalidKeyException(""Illegal key size or default parameters"").
davsclaus:1308004785:2011-06-14T06:39:45.765+0000:1308004785:2011-06-14T06:39:45.765+0000:Back in the days when using Java security you could hit issues when key lengths got too big. Well there was some US export restrictions upon the JDK so you had to install an add-on to your JDK/JRE so it could support keys with bigger lengths.

And the JDK wasn't so informative when you had such a situation so it could take a while to figure it out. So anything I see something with security and key length issues then I think about that.

rnewcomb:1308027028:2011-06-14T12:50:28.959+0000:1308027076:2011-06-14T12:51:16.079+0000:Changing all of the AES_256 algorithms to AES_128 should fix that problem.
davsclaus:1308173820:2011-06-16T05:37:00.745+0000:1308173820:2011-06-16T05:37:00.745+0000:Hadrian can you get this fixed so we are starting to be ready to cut Camel 2.8?
hadrian:1308203458:2011-06-16T13:50:58.019+0000:1308203458:2011-06-16T13:50:58.019+0000:Looks like I forgot to also commit the the fix. Done.
hadrian:1308203497:2011-06-16T13:51:37.660+0000:1308203497:2011-06-16T13:51:37.660+0000:Fixed.
akarpe:1309333560:2011-06-29T15:46:00.586+0000:1309333560:2011-06-29T15:46:00.586+0000:Really nice patch, Rich...

Wish I had done it myself ;)... Keep em coming.

Cheers,

Ashwin..."
0,CAMEL-4060,Improvement,Minor,2.8.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,Claus Ibsen,0,0,2011-06-06 18:39:40+00:00,2013-05-02 02:29:41+00:00,"AHC 1.6.4 has a new config bean that supports regular getter/setter. We should support that in camel-ahc. So you can do client. in the endpoint uri, and set any option on the config bean using the reflection support we have.","davsclaus:1307684927:2011-06-10T13:48:47.698+0000:1307684927:2011-06-10T13:48:47.698+0000:David fell free to look into this
davaleri:1312119418:2011-07-31T21:36:58.199+0000:1312119418:2011-07-31T21:36:58.199+0000:Added support to component and documented changes in the wiki."
0,CAMEL-4059,Test,Minor,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Yaytay,0,0,2011-06-06 14:11:19+00:00,2011-06-06 14:42:11+00:00,"Environment:
Apache Maven 3.0.2 (r1056850; 2011-01-09 00:58:10+0000)
Java version: 1.6.0_25, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_25\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""amd64"", family: ""windows""


Source Version:
URL: https://svn.apache.org/repos/asf/camel/trunk
Repository Root: https://svn.apache.org/repos/asf
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 1132610


Failure:
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.jms.JmsTestConnectionOnStartupTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.06 sec <<< FAILURE!
testConnectionOnStartupProducerTest(org.apache.camel.component.jms.JmsTestConnectionOnStartupTest)  Time elapsed: 1.084 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...: Connection refused[]> but was:<...: Connection refused[: connect]>
        at org.junit.Assert.assertEquals(Assert.java:123)
        at org.junit.Assert.assertEquals(Assert.java:145)
        at org.apache.camel.component.jms.JmsTestConnectionOnStartupTest.testConnectionOnStartupProducerTest(JmsTestConnectionOnStartupTest.java:69)",davsclaus:1307340986:2011-06-06T14:16:26.698+0000:1307340986:2011-06-06T14:16:26.698+0000:Its a Windows thing as the test works on other OS platforms.
0,CAMEL-4058,Bug,Major,2.7.2,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-06 13:10:19+00:00,2011-06-06 16:56:34+00:00,"See CAMEL-3989


When you have an OnException it should overlay its configuration with the existing error handler (so its kinda of merge). However we mistakenly set the handled policy from the OnException always, and dont honor the setting from the error handler. So in case of DeadLetterChannel which always handle the exception, it will cause the exception to not be handled and thus rethrown in Camel.


This problem is only apparent when using the DLC as its the only error handler that handles and moves the exchange to the DLC. The other error handler will log or the likes, but still keep the exception on the exchange to propagated back the exception to the caller.


So we only noticed this when testing with DLC, and what Hadrian was trying to do in CAMEL-3989","davsclaus:1307337052:2011-06-06T13:10:52.043+0000:1307337052:2011-06-06T13:10:52.043+0000:CAMEL-4058 will fix CAMEL-3989
davsclaus:1307346754:2011-06-06T15:52:34.526+0000:1307346754:2011-06-06T15:52:34.526+0000:This requires that we add builders in Java DSL / scala DSL so end user can turn on/off
- useOriginalMessage
- asyncDelayedRedelivery
- useCollisionAvoidance
- useExceptionalBackoff

As they dont accept an boolean option to control it. So with overlay they will inheit parent settings, and in case you don't want that you cannot set for example - do not use orignal message. So we need for those 4:

- useOriginalMessage(boolean)
- asyncDelayedRedelivery(boolean)
- useCollisionAvoidance(boolean)
- useExceptionalBackoff(boolean)

davsclaus:1307347838:2011-06-06T16:10:38.186+0000:1307347838:2011-06-06T16:10:38.186+0000:Been looking into this a bit more. I think we should keep current behavior as fix that broken issue from CAMEL-3989 where onException(MyException.class).handled(false) will cause the DLC to kick in, which was not the intention. Then we don't need this overlay stuff. It also just introduces to many variables, as you would need to test with 2x for each overlay option."
0,CAMEL-4057,Bug,Major,"2.4.0, 2.7.2","2.7.3, 2.8.0","

continued
exception
handler

",Closed,Fixed,"2.7.3, 2.8.0",Benjamin P. O'Day,Mateusz Nowakowski,0,0,2011-06-06 11:26:53+00:00,2012-04-04 10:48:09+00:00,"When Camel flow contains error handling as continued(true), it is not invoked when the error occurs for the second time (even in different onException).
What is more the exception is not handled even by global onException and Camel flow is interruped.","matihost:1307330883:2011-06-06T11:28:03.599+0000:1307330883:2011-06-06T11:28:03.599+0000:Attached testcase which shows the issue.
Testes against Camel 2.7.2 and 2.4.0-fuse-00-00
boday:1307568398:2011-06-09T05:26:38.104+0000:1307568398:2011-06-09T05:26:38.104+0000:this also fails when simply throwing an exception multiple times in the same route...I'm looking into it
boday:1307654935:2011-06-10T05:28:55.436+0000:1307654935:2011-06-10T05:28:55.436+0000:here is a proposed fix for this...just removing the Exchange.FAILURE_HANDLED property from the exchange (when being continued) did the trick...I don't see any side effects yet, but I'm still testing it...if anyone sees any issues with this, let me know...thanks
davsclaus:1307656247:2011-06-10T05:50:47.033+0000:1307656247:2011-06-10T05:50:47.033+0000:Bean yeah I think that does the trick. There is a number of error handler related metadata to keep track on :).
Can you retest with latest update from trunk as I just committed an improvement to the error handling in general.
boday:1307701295:2011-06-10T18:21:35.150+0000:1307701295:2011-06-10T18:21:35.150+0000:tested against latest and all seems well...just committed the fix"
0,CAMEL-4056,Improvement,Major,2.7.2,2.10.0,"
None
",Resolved,Later,2.10.0,Richard Kettelerij,Richard Kettelerij,0,0,2011-06-05 22:14:49+00:00,2012-06-02 12:53:12+00:00,"Currently Camel only sends credentials when a server explicitly prompts for basic authentication. However there're cases where a URL is available to both authenticated as well as unauthenticated parties. In that case the camel-http component won't sent any credentials to the server, even though the credentials are explicitly provided in the URI or Exchange.


This can be solved by enabling preemptive authentication in Apache HttpClient. In that case the credentials will always be provided whether the server asks for it or not. Enabling this provides a sensible default.","rkettelerij:1307283771:2011-06-05T22:22:51.055+0000:1307283771:2011-06-05T22:22:51.055+0000:trunk: 1132500. Currently only for {{camel-http}}, I'm evaluation if this applies to {{camel-http4}}.
rkettelerij:1307284982:2011-06-05T22:43:02.866+0000:1307284982:2011-06-05T22:43:02.866+0000:Just found out we do mention preemptive auth in the documentation (although no very noticeable)...
davsclaus:1307566987:2011-06-09T05:03:07.100+0000:1307566987:2011-06-09T05:03:07.100+0000:Just noticed these WARN from osgi test

[RMI TCP Connection(1)-10.0.1.4] WARN org.apache.commons.httpclient.HttpMethodDirector - Preemptive authentication requested but no default credentials available

I didnt take a look. But I wonder if this change causes WARNs to be logged now?
njiang:1307579124:2011-06-09T08:25:24.138+0000:1307579124:2011-06-09T08:25:24.138+0000:Hi Richard,
When I run the some http test I found there are some warning like this
{code}
2011-06-09 16:19:17,272 [main           ] WARN  HttpMethodDirector             - Required credentials not available for BASIC <any realm>@localhost:23001
2011-06-09 16:19:17,272 [main           ] WARN  HttpMethodDirector             - Preemptive authentication requested but no default credentials available
{code}

I think it is caused by you change recently. I don't think enable  preemptive basic authentication by default is good idea, because in most case we don't need that.
Can we change the default value to be false ?

rkettelerij:1307579855:2011-06-09T08:37:35.158+0000:1307579888:2011-06-09T08:38:08.186+0000:Willem, Claus,

Thanks for reporting. I was also thinking about the same, we shouldn't enable preemptive auth by default since it's a potential security risk (although we already allow authentication against arbitrary realms and hosts, which might be a bigger security risk). I'll make this setting non-default asap. Furthermore I'm working on getting it running in {{camel-http4}}. 
njiang:1307580646:2011-06-09T08:50:46.622+0000:1307580646:2011-06-09T08:50:46.622+0000:@Richard,

Yeah, you need to the same thing in camel-http4.
BTW
Don't forget to update the wiki page of http and http4.
davsclaus:1307685314:2011-06-10T13:55:14.612+0000:1307685314:2011-06-10T13:55:14.612+0000:Richard did you revert this?
rkettelerij:1307713654:2011-06-10T21:47:34.191+0000:1307713654:2011-06-10T21:47:34.191+0000:Reverted commit 1132500 for now.
rkettelerij:1307944209:2011-06-13T13:50:09.467+0000:1307944209:2011-06-13T13:50:09.467+0000:Rescheduling for 2.9"
0,CAMEL-4055,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Unassigned,Claus Ibsen,0,0,2011-06-05 10:57:39+00:00,2011-06-25 15:52:55+00:00,"Its an idiom that Camel components that supports headers to control its actions should use CamelCase for its keys, eg CamelHazelcastOperation. 


Also it would be great that if camel-hazelcast would remove the control headers after usage, eg operation type and objectId. Then those headers is not propagated during route as they was only intended as input for the hazelcast endpoint.","omicron:1307362269:2011-06-06T20:11:09.884+0000:1307362416:2011-06-06T20:13:36.620+0000:I have uploaded a patch containing the aforementioned changes for your consideration.

 Names changed to camel case to comply with the idiom you previously mentioned. Regarding the removal of control headers i.e operation type and object id, are already removed during the copyHeaders() call for Queue, Map, MultiMap, List and AtomicNumbers. In SEDA component these headers kept only in case transferExchange is set to true.

 
  

davsclaus:1308814394:2011-06-23T15:33:14.631+0000:1308814394:2011-06-23T15:33:14.631+0000:The keys should start with Camel, eg CamelHazelcastOperation. Thats the idiom we normally use.
akarpe:1308814419:2011-06-23T15:33:39.909+0000:1308814453:2011-06-23T15:34:13.901+0000:I looked at the submitted patch and everything looks good. The patch has now been committed to the codestream as revision ""r1138929""

Ioannis, Thanks for your submission.

Cheers,

Ashwin...
akarpe:1308814558:2011-06-23T15:35:58.636+0000:1308814558:2011-06-23T15:35:58.636+0000:Claus,

Looks like the keys need further work... I will make the changes and check it in...

Cheers,

Ashwin...
omicron:1308815089:2011-06-23T15:44:49.847+0000:1308815089:2011-06-23T15:44:49.847+0000: Claus sorry for the misunderstanding, my fault, I thought it was just camel case, I didn't catch that should start with ""Camel""...

 Ashwin thank alot for your help, please let me know if your like me to proceed with any further changes ... 
akarpe:1308817945:2011-06-23T16:32:25.030+0000:1308817945:2011-06-23T16:32:25.030+0000:Revised patch for CAMEL-4055 to comply with Camel Constant naming conventions
davsclaus:1308870205:2011-06-24T07:03:25.286+0000:1308870205:2011-06-24T07:03:25.286+0000:The documentation should be updated
http://camel.apache.org/hazelcast-component
akarpe:1308988301:2011-06-25T15:51:41.030+0000:1308988301:2011-06-25T15:51:41.030+0000:The documentation has been updated to reflect the change in the Hazelcast component.

I will mark this issue as resolved. 

Ioannis, thanks for the patch and follow-up.


akarpe:1308988375:2011-06-25T15:52:55.312+0000:1308988375:2011-06-25T15:52:55.312+0000:Patches and documentation have been updated. Marking the issue as resolved"
0,CAMEL-4054,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-06-05 09:34:09+00:00,2011-06-06 10:40:51+00:00,Java Mail 1.4.4 has been released. We should upgrade to that version.,"davsclaus:1307237661:2011-06-05T09:34:21.702+0000:1307237661:2011-06-05T09:34:21.702+0000:http://www.oracle.com/technetwork/java/javamail/index-138643.html
jbonofre:1307327570:2011-06-06T10:32:50.187+0000:1307327570:2011-06-06T10:32:50.187+0000:I upgraded all ServiceMix projects (components, NMR and features) to use JavaMail 1.4.4.

You can find a small patch to update Camel as well (I ran a complete build including unit tests, no regression)."
0,CAMEL-4053,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-04 16:10:04+00:00,2011-06-04 19:39:57+00:00,"When defining routes in XML DSL then the parent/child relationship of the nodes, is compute a bit later than in Java DSL. The reason is the Java DSL use the fluent builders making this possible on-the-fly. The XML DSL is in the hands of JAXB and its not so easy.


However when people use custom InterceptStrategy they may want this parent/child information available at hand when the wrap method is invoked. And for XML DSL the parent/child is set afterwards. So we need to ensure this information is set beforehand.


With this we ensure CAMEL-4050 unit test works the same in both Java DSL and XML DSLs. (in fact any DSL)",
0,CAMEL-4052,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-04 15:44:24+00:00,2011-06-04 15:57:25+00:00,"This ensure that when creating routes using XML then any custom assigned id on the xml tags are noticed by Camel.



    public void setId(String value) {
        this.id = value;
        customId = true;
    }




To remedy this we need JAXB to invoke the method above which it does using property accessor.",
0,CAMEL-4051,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Richard Kettelerij,0,0,2011-06-04 10:37:41+00:00,2011-06-04 13:55:19+00:00,"Camel currently contains three identical GZIPHelper classes. These classes are part of camel-http, camel-http4 and camel-ahc. Since GZIPHelper has no 3rd party dependencies it's best to move it to camel-core.","rkettelerij:1307155204:2011-06-04T10:40:04.938+0000:1307155204:2011-06-04T10:40:04.938+0000:trunk: 1131372
davsclaus:1307166919:2011-06-04T13:55:19.025+0000:1307166919:2011-06-04T13:55:19.025+0000:There was one left in camel-gae. Let me fix that."
0,CAMEL-4050,Improvement,Minor,2.7.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-06-04 10:06:17+00:00,2013-05-02 02:29:41+00:00,"We should make the CBR more fine grained when it set the parent/child relationship, as well if you assign ids to its different parts



choice
when
otherwise



Currently setting id would be coarse grained and set it on the choice, even if you set it on the otherwise.


Likewise in the when clauses we can be more fine grained and associated the parent/child to exactly the right when definition.


See nabble
http://camel.465427.n5.nabble.com/wrong-processordefinitions-in-InterceptStrategy-wrapProcessorInInterceptors-choice-when-otherwise-tp4449449p4449449.html",
0,CAMEL-4049,Sub-task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,Claus Ibsen,0,0,2011-06-04 09:29:43+00:00,2013-05-02 02:29:41+00:00,No Desc,"davsclaus:1307151042:2011-06-04T09:30:42.287+0000:1307151042:2011-06-04T09:30:42.287+0000:David there is a new camel-ahc component for HTTP Client. It also supports SSL. You may want to take a look whats missing in the source code to leverage CAMEL-3750. And as well some documentation in the wiki page.
davaleri:1307683170:2011-06-10T13:19:30.833+0000:1307683170:2011-06-10T13:19:30.833+0000:I have most of the changes to support CAMEL-3750 done; however, I am currently blocked by https://issues.sonatype.org/browse/AHC-102.  I can work around it, but the solution is brittle as it requires us to keep track of all the fields in their configuration object.  I will implement the workaround and log another issue that is blocking on AHC-102.
davaleri:1308293859:2011-06-17T14:57:39.079+0000:1308293859:2011-06-17T14:57:39.079+0000:Attaching patch and keystore for SSL tests.
davsclaus:1308297746:2011-06-17T16:02:26.119+0000:1308297746:2011-06-17T16:02:26.119+0000:David you need to ensure [x] grant license to apache, when attaching files.
davaleri:1308302198:2011-06-17T17:16:38.722+0000:1308302198:2011-06-17T17:16:38.722+0000:Re-attaching patch with grant option checked."
0,CAMEL-4048,Test,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Claus Ibsen,0,2,2011-06-03 18:29:33+00:00,2012-07-06 08:40:30+00:00,Damn running the osgi tests in camel-itest-osgi is dead slow. Would be great if possible to upgrade to Pax Exam 2.1 which should be faster. But I guess it may require to configure it to run tests in-jvm instead of forking. So its maybe not as easy as change a version number in a pom.xml file,"davsclaus:1307097315:2011-06-03T18:35:15.109+0000:1307097315:2011-06-03T18:35:15.109+0000:Tests run: 192, Failures: 0, Errors: 2, Skipped: 17

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 32:47.588s
[INFO] Finished at: Fri Jun 03 20:38:23 CEST 2011
[INFO] Final Memory: 38M/88M
[INFO] ------------------------------------------------------------------------

30 min to run 190 tests :)
davsclaus:1341535230:2012-07-06T08:40:30.189+0000:1341535230:2012-07-06T08:40:30.189+0000:Willem upgraded to pax exam 2"
0,CAMEL-4047,Bug,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Daniel Kulp,Daniel Kulp,0,0,2011-06-03 17:56:21+00:00,2011-06-08 03:05:35+00:00,"The OSGi imports for camel-core ends up with a non-optional dependency on javax.script due to it being used in the Activator.    However, the karaf feature for camel-core doesn't have a dependency on org.apache.servicemix.specs.scripting-api-1.0 .


One of two things should be done:
1) mark javax.script as optional.  This MAY require some updates to the Activator to work when it's not available.


2) Update the karaf features file to add:



<bundle dependency=""true"">mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.scripting-api-1.0/${servicemix-specs-version}</bundle>","hadrian:1307095365:2011-06-03T18:02:45.276+0000:1307095365:2011-06-03T18:02:45.276+0000:Dan, thanks for reporting this!
I don't see 2) as being an option and have a strong preference towards 1).
dkulp:1307098502:2011-06-03T18:55:02.336+0000:1307098502:2011-06-03T18:55:02.336+0000:
Actually, #2 is really the correct solution to this.  In OSGi, the smx scripting-api jar is really the version of the API jar with  the factory (ScriptEngineMaker) that works in OSGi.   You cannot really use the in-jdk versions.   This is the same as all the other api jars we use.

Thus, we need to make sure we depend on that version up front in the features file.  Otherwise, you can end up with a path like:
{code}
features:install ....camel-core...
{code}
which would depend on the in-jdk version.  Then, later, I install something like camel-bean-validator or something else that would pull in the smx api version.   Any scripting engine installed after that will result in classcasts in camel as the javax.script classes will be different as the new bundles will get the smx version and Camel will expect the in-jdk version.


hadrian:1307105775:2011-06-03T20:56:15.428+0000:1307105775:2011-06-03T20:56:15.428+0000:More I think about it, more my head spins... I agree 2) would completely solve the problem, but it is the right solution?

We cannot use the jre version of the ScriptEngineFactory in an OSGi deployment, that much is clear. Both 1) and 2) do not have *any* impact on non-OSGi deployments, so we're good there.

Assumption (*): There is a fair percentage of deployments that do *not* need/use a script engine (say x%).

Solution 2) brings the extra feature dependency for the camel-core on all *osgi* deployments. If x is relatively small e.g. x <= 20, I don't think it's a big problem, especially given the meager 32k the extra bundle is bringing.

If x is larger, say x >= 80, would it make sense to make the dependency optional? Of course we then have the problem Dan explained. We can get activation to fail for things like camel-bean-validator if camel-core was using the jre version of the ScriptEngine. 3rd party component writers would have to be aware of that too.

I don't know it may be overkill for just the 32k... On the plus side, we should be able to reach a consensus quickly on this though.


jbonofre:1307106065:2011-06-03T21:01:05.441+0000:1307106065:2011-06-03T21:01:05.441+0000:My preference is more on the 2/ because I think it's the most secure way.

It requires:
- to exclude javax.script from the system package (by tuning the jre.properties file)
- add the ServiceMix Specs bundle in the feature

Like this, we can guarantee that it works, which is more hazardous just flagging the javax.script package as optional.
dkulp:1307107277:2011-06-03T21:21:17.840+0000:1307107277:2011-06-03T21:21:17.840+0000:
The other option MAY be to move all  the javax.script stuff into the camel-script component.  It already has a bundle Activator in there that could handle this.   

That said, I'm not 100% sure if that's acceptable as there COULD be use cases of the script things without camel-script.   Thoughts?

hadrian:1307121134:2011-06-04T01:12:14.086+0000:1307121134:2011-06-04T01:12:14.086+0000:+1. This sounds great, camel-script SHOULD be used with jsr-223 languages.
dkulp:1307353081:2011-06-06T17:38:01.498+0000:1307353081:2011-06-06T17:38:01.498+0000:
May need to use ""git apply"" to apply the patch due to the removal of a file.

I've tested a bit in a standalone OSGi container (TSF) installing the camel-script feature and such.   However, I haven't been able to run the camel-ittest-osgi stuff yet due to them being broken.
hadrian:1307466171:2011-06-08T01:02:51.103+0000:1307466171:2011-06-08T01:02:51.103+0000:@Dan, patch looks good. I started a full test and will commit when done (could take a while...). Thanks for the contribution.
hadrian:1307473535:2011-06-08T03:05:35.274+0000:1307473535:2011-06-08T03:05:35.274+0000:Fixed in r1133232. Thanks Dan for patch and keep them coming."
0,CAMEL-4046,Task,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Daniel Kulp,0,0,2011-06-03 17:45:56+00:00,2011-06-03 18:32:23+00:00,"Commit 1131092 added:



     <artifactId>components</artifactId>
     <groupId>org.apache.camel</groupId>
     <version>2.8-SNAPSHOT</version>
+    <relativePath>../../parent</relativePath>
   </parent>




which is wrong as the ""components"" artifact is in "".."".   The relativePath should just be ""..""","dkulp:1307094711:2011-06-03T17:51:51.186+0000:1307094711:2011-06-03T17:51:51.186+0000:
Actually, leave the new relativePath, change the artifactId to camel-parent.
hadrian:1307095192:2011-06-03T17:59:52.419+0000:1307095192:2011-06-03T17:59:52.419+0000:Fixed by correcting the artifactId. Should have been 'camel-parent', not 'components'. Thanks for reporting it and providing a solution."
0,CAMEL-4045,Test,Minor,2.8.0,None,"
None
",Resolved,Later,Future,Jean-Baptiste Onofré,Claus Ibsen,0,1,2011-06-03 17:31:58+00:00,2012-07-06 08:40:08+00:00,"Running tests in camel-itest-karaf, then this test fails


Running org.apache.camel.itest.karaf.CamelMsvTest
Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 10.484 sec <<< FAILURE!


Looking into the OSGi logs, there is no apparent reason why.","davsclaus:1309137695:2011-06-27T09:21:35.743+0000:1309137695:2011-06-27T09:21:35.743+0000:Jean did you have a chance to look into this? Would be nice to know if its fixable before we cut 2.8. 

However the msv component is a seldom used component. So we may just add it to the knowns issues.
jbonofre:1310217342:2011-07-09T21:15:42.643+0000:1310217342:2011-07-09T21:15:42.643+0000:It works on trunk with the latest changes on the features/Karaf version:

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.itest.karaf.CamelMsvTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.049 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 1

Claus, I propose to wait the next CI build to resolve this issue.
davsclaus:1310256595:2011-07-10T08:09:55.964+0000:1310256595:2011-07-10T08:09:55.964+0000:The Apache CI servers dont run OSGi tests. When we used to do that they tend to break/fail for all kind of reasons.
jbonofre:1310530406:2011-07-13T12:13:26.371+0000:1310530406:2011-07-13T12:13:26.371+0000:After double check, the camel-msv test is @Ignore in the camel-karaf-itest.

I re-enable the test to see the behavior.
davsclaus:1338612023:2012-06-02T12:40:23.811+0000:1338612023:2012-06-02T12:40:23.811+0000:Installing camel-msv in SMX works fine.
davsclaus:1341535208:2012-07-06T08:40:08.863+0000:1341535208:2012-07-06T08:40:08.863+0000:Lets close old ticket that are not in demand."
0,CAMEL-4044,Bug,Major,2.7.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Daniel Kulp,Rémy DUBOIS,0,0,2011-06-03 17:03:12+00:00,2013-05-02 02:29:41+00:00,"Using the jconsole, we are not able to locate some processors after a ChoiceProcessor.


For example :


from(""direct:start"").to(""mock:test1"").id(""mock1"")
.choice()
.when(predicate).to(""mock:test2"").id(""test2"")
.otherwise().to(""mock:test3"").id(""test3"")
.end()
.to(""mock:outOfChoice"").id(""outOfChoice"");


The processors mock1 and outOfChoice are well found but not the processors test2 and test3.","hadrian:1307093691:2011-06-03T17:34:51.159+0000:1307093691:2011-06-03T17:34:51.159+0000:Thanks Remy for reporting this.

I could reproduce the problem at least in part. I will look into it over the weekend and come back with more details, probably a fix too.
davsclaus:1307170052:2011-06-04T14:47:32.357+0000:1307170052:2011-06-04T14:47:32.357+0000:CAMEL-4050 fixes this issue
davsclaus:1307172412:2011-06-04T15:26:52.865+0000:1307172412:2011-06-04T15:26:52.865+0000:This one was fixed by chance when I got CAMEL-4050 resolved. I had a look at the unresolved bugs and notice this issue about the CBR. So I realized my changes most likely would resolve this as well. Adding unit test confirmed that.
dkulp:1307713631:2011-06-10T21:47:11.474+0000:1307713631:2011-06-10T21:47:11.474+0000:
The added unit test does no actually test that this is solved.   It doesn't assert that calls to isRegistered actually return true.  If you assert that, you'll see the test fails.
dkulp:1307713700:2011-06-10T21:48:20.598+0000:1307713700:2011-06-10T21:48:20.598+0000:
Attaching a patch that actually  solves the issues.  It's a little more involved that could be, but needs some API cleanup, hopefully for 3.0.
hadrian:1307714778:2011-06-10T22:06:18.306+0000:1307714778:2011-06-10T22:06:18.306+0000:@Dan, awesome patch! I started a full test build and will apply later today if all goes well. Many thanks and we look forward to more contributions from you.
hadrian:1307732487:2011-06-11T03:01:27.658+0000:1307732487:2011-06-11T03:01:27.658+0000:Patch applied to both trunk and 2.7.x branch. Thanks Dan for the contribution.
davsclaus:1307752678:2011-06-11T08:37:58.094+0000:1307752678:2011-06-11T08:37:58.094+0000:Parts of all the new code added isn't tested. We should consider adding tests for this. See coverage image attached."
0,CAMEL-4043,Test,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Claus Ibsen,0,0,2011-06-03 15:25:32+00:00,2011-06-04 09:28:21+00:00,We should let it skip running on CI servers where it may not have privileged to run. The tests uses a /tmp folder.,"rkettelerij:1307111589:2011-06-03T22:33:09.288+0000:1307111589:2011-06-03T22:33:09.288+0000:Removed hard coded dependency on /tmp directory which may not be available/accessible on all platforms. Tests now use the Maven 'target' directory.
rkettelerij:1307111628:2011-06-03T22:33:48.792+0000:1307111628:2011-06-03T22:33:48.792+0000:trunk: 1131271
rkettelerij:1307150896:2011-06-04T09:28:16.669+0000:1307150896:2011-06-04T09:28:16.669+0000:Removed localhost reference
rkettelerij:1307150901:2011-06-04T09:28:21.448+0000:1307150901:2011-06-04T09:28:21.448+0000:trunk: 1131358"
0,CAMEL-4042,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-06-03 15:10:58+00:00,2011-06-06 10:58:52+00:00,"The thread size will keep increasing when we run the tests of camel.
After digging the code for a while I found there are lots of thread pool are never shutdown when the test is over.
We should release these resources after running test.","davsclaus:1307085477:2011-06-03T15:17:57.347+0000:1307085477:2011-06-03T15:17:57.347+0000:The thread pools is shutdown when the CamelContext is shutdown (eg you call stop on it). It seems for me that the CamelContext may be re-used when running multiple tests in the same unit test class.

The thread pools should only be shutdown when you shutdown Camel as you should be able to stop a route etc. and then start it again, without having issues with thread pools not being able to restart itself. When you have invoked shutdown on a thread pool, its dead forever.
davsclaus:1307085828:2011-06-03T15:23:48.037+0000:1307085828:2011-06-03T15:23:48.037+0000:Could it be Maven surefire plugin? I would assume it forked a new JVM when it runs a test suite for a new component. Eg camel-core runs in JVM A, camel-spring in JVM B etc. And thus when a JVM terminates it cleanup all its threads and resources etc.
njiang:1307086023:2011-06-03T15:27:03.327+0000:1307086023:2011-06-03T15:27:03.327+0000:Hi Claus,
There are some fixedThreadPool which are created in the test methods and they are never shutdown.
It has nothing to do the internal thread pool that camel creates itself :)

Please check out my patch for more information.
cschneider:1307088309:2011-06-03T16:05:09.004+0000:1307088309:2011-06-03T16:05:09.004+0000:I am just running a build with this patch. Looks very good till now.
cschneider:1307145018:2011-06-04T07:50:18.513+0000:1307145018:2011-06-04T07:50:18.513+0000:In the core the threads now do not rise anymore. Still the full test build seems to be taking more than 7 hours. So there must be another problem.
davsclaus:1307150278:2011-06-04T09:17:58.159+0000:1307150278:2011-06-04T09:17:58.159+0000:Must be a thing on Apache Hudson.

FuseSource CI server ran full test on trunk in: Took 3 hr 43 min (+ including OSGi test which Apache Hudson skips)
davsclaus:1307234106:2011-06-05T08:35:06.780+0000:1307234106:2011-06-05T08:35:06.780+0000:Looking at the console output from Apache Hudson
https://builds.apache.org/job/Camel.trunk.fulltest/313/console

I can see it takes about 30+ sec. to archive a JAR file. So after the test it archives the JAR and that takes a very long time

For example:
[JENKINS] Archiving /home/hudson/hudson-slave/workspace/Camel.trunk.fulltest/camel-trunk/components/camel-jibx/target/camel-jibx-2.8-SNAPSHOT.jar to /home/hudson/hudson/jobs/Camel.trunk.fulltest/modules/org.apache.camel$camel-jibx/builds/2011-06-05_06-14-11/archive/org.apache.camel/camel-jibx/2.8-SNAPSHOT/camel-jibx-2.8-SNAPSHOT.jar

And since there is 100+ JAR files to archive then that takes about 1h.

Executing the unit tests seems to be about the same pace they take to run on my laptop. Eg camel-core in about 20 min. camel-spring in about 6 min. 
https://builds.apache.org/job/Camel.trunk.fulltest/313/


davsclaus:1307236625:2011-06-05T09:17:05.490+0000:1307236625:2011-06-05T09:17:05.490+0000:I wonder if we need any archiving at all? There is a another Hudson project which publishes all the SNAPSHOT artifact to the maven repo. If so we may be able to disable arching for the full test and speed it up?
davsclaus:1307238963:2011-06-05T09:56:03.848+0000:1307238963:2011-06-05T09:56:03.848+0000:It seems to hang when compiling this example
{code}

[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Route :: Throttling 2.8-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] Deleting /home/hudson/hudson-slave/workspace/Camel.trunk.fulltest/camel-trunk/examples/camel-example-route-throttling/target
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ camel-example-route-throttling ---
[INFO] [INFO] Executing tasks
     [echo] Maven version: 2.8-SNAPSHOT
     [echo] OSGi version: 2.8.0.SNAPSHOT
    [mkdir] Created dir: /home/hudson/hudson-slave/workspace/Camel.trunk.fulltest/camel-trunk/examples/camel-example-route-throttling/target
[INFO] Executed tasks

[INFO] --- maven-antrun-plugin:1.2:run (create-prop) @ camel-example-route-throttling ---
[INFO] 
[INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-example-route-throttling ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.1:process (default) @ camel-example-route-throttling ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] [INFO] Copying 7 resources

[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-route-throttling ---
[INFO] Copying 3 resources
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] [INFO] Copying 7 resources

[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-route-throttling ---
[INFO] Copying 3 resources
[INFO] [INFO] Compiling 2 source files to /home/hudson/hudson-slave/workspace/Camel.trunk.fulltest/camel-trunk/examples/camel-example-route-throttling/target/classes

[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-example-route-throttling ---
{code}

There hasn't been any activity for 5+ min now.

3h43m running so far
davsclaus:1307240115:2011-06-05T10:15:15.196+0000:1307240115:2011-06-05T10:15:15.196+0000:I can see the memory settings Hudson uses is as follows

[camel-trunk] $ /home/hudson/tools/java/latest1.6/bin/java -da -dsa -XX:MaxPermSize=192m -Xmx1024M -cp /home/hudson/hudson-slave/maven3-agent.jar:/home/hudson/tools/maven/latest3/boot/plexus-classworlds-2.4.jar org.jvnet.hudson.maven3.agent.Maven3Main /home/hudson/tools/maven/latest3 /home/hudson/hudson-slave/slave.jar /home/hudson/hudson-slave/maven3-interceptor.jar 59946


My local build uses
MAVEN_OPTS='-Xmx1024m -XX:MaxPermSize=512m'

I wonder if we can adjust the MaxPermSize to be higher?
davsclaus:1307240225:2011-06-05T10:17:05.507+0000:1307240225:2011-06-05T10:17:05.507+0000:I configured the full test on hudson to use the following maven options
-da -dsa -XX:MaxPermSize=512m -Xmx1024m
davsclaus:1307329132:2011-06-06T10:58:52.742+0000:1307329132:2011-06-06T10:58:52.742+0000:Unit test fixed and CI servers is on normal speed.

Its just that Apache CI may hang and appear to take a long time."
0,CAMEL-4041,Improvement,Major,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Hadrian Zbarcea,0,0,2011-06-02 17:22:49+00:00,2011-06-10 05:45:06+00:00,"This is spawn out of CAMEL-4022 (see part of the discussion there).


If exceptions are thrown while an exception is handled, there is not much Camel can do to recover. We need a FatalErrorHander that can not be replaced by the user, which a simple and predictable behavior (at least logging).","davsclaus:1307151214:2011-06-04T09:33:34.694+0000:1307151214:2011-06-04T09:33:34.694+0000:I would probably not name it FatalErrorHandler, but something like OnExceptionErrorHandler etc. to indicate its intention.
davsclaus:1307606027:2011-06-09T15:53:47.597+0000:1307606027:2011-06-09T15:53:47.597+0000:Okay in the spring side it takes a bit more work to do as the error handlers is configured using refs and that indirection need a little adjustment for this new FatalErrorHandler to work properly.
hadrian:1307607943:2011-06-09T16:25:43.733+0000:1307607943:2011-06-09T16:25:43.733+0000:I'd suggest fixing this in a few steps. First the core then spring and the rest (if anything else is affected). There's nothing worse than it is today if only the core is patched in a first step. That's why I created separate issues, and then with the duplicates we ended up with the confusion.

So what if we use this issue only for the core and CAMEL-4022 for the spring side?
davsclaus:1307608140:2011-06-09T16:29:00.982+0000:1307608140:2011-06-09T16:29:00.982+0000:You cannot divide it like that. There are tests in both core + spring that only works in core. The tests is constructed to be 100% identical. Its just some logic needed to be adjusted in camel-core because Java DSL and XML DSL is building the route model a bit different (fluent builders VS JAXB).

I gotta run
davsclaus:1307614447:2011-06-09T18:14:07.466+0000:1307614447:2011-06-09T18:14:07.466+0000:I get a pending for so the tests runs in spring as well. I will do a full build to ensure no side effects is introduced.
davsclaus:1307653109:2011-06-10T04:58:29.335+0000:1307653109:2011-06-10T04:58:29.335+0000:Okay full tests 100% success. I gotta polish the patch a bit, but it looks good.
davsclaus:1307655906:2011-06-10T05:45:06.178+0000:1307655906:2011-06-10T05:45:06.178+0000:There is now a FatalFallbackErrorHandler"
0,CAMEL-4040,Improvement,Major,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Martin Krasser,Martin Krasser,0,0,2011-06-02 14:37:18+00:00,2011-06-02 15:14:57+00:00,"Currently, parameter binding annotations (such as @Header, @Body etc) must be placed on a bean's implementation class in order to be recognized by Camel. Inheritance of these annotations from a bean's superclass and interfaces should be supported as well. For example:



public interface BeanIntf {
    void foo(@Header String bar);
}

public class BeanImpl implements BeanIntf {
    public void foo(String bar) {
        // ...
    }
}",mrt1nz:1306997105:2011-06-02T14:45:05.422+0000:1306997105:2011-06-02T14:45:05.422+0000:This also allows parameter binding on objects that have been created with {{Proxy.newProxyInstance}}.
0,CAMEL-4039,Improvement,Major,None,,"
None
",Resolved,Invalid,None,Willem Jiang,Claus Ibsen,0,0,2011-06-02 13:11:14+00:00,2011-06-03 06:32:08+00:00,"When using CXF REST you may as an end user want to use the REST API for building responses using ResponseBuilder / Response API. We should add support for that in camel-cxf, so it detects the message body is a Response and use that directly.


I recently added such support in camel-restlet.


See nabble as well:
http://camel.465427.n5.nabble.com/CXFRS-custom-response-tp4431343p4431343.html","njiang:1307045812:2011-06-03T04:16:52.055+0000:1307045812:2011-06-03T04:16:52.055+0000:Current camel-cxfrs already supports for using the ResponseBuilder/Response as the message body for responses.
Just added a simple test to show it.
davsclaus:1307053927:2011-06-03T06:32:07.990+0000:1307053927:2011-06-03T06:32:07.990+0000:Thats great.

However I noticed you add the test to an existing test that makes it a bit more confusing.

A good idea going forward would be to use more unit tests, testing a single thing, instead of one giant that has 4..5 tests in the consumer code. Thats a bit confusing for end users to look at the code. Also if the test did one thing its more like a good example people can copy and try. And its also more easier to add START / END snippets in the unit test to have it shown in the wiki pages.

Just a comment. It would be great to have simpler unit tests :)"
0,CAMEL-4038,Improvement,Major,None,None,"

camel-quickfix

",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Steve Bate,0,0,2011-06-02 11:42:24+00:00,2012-12-16 12:31:38+00:00,"This patch adds InOut exchange support for camel-quickfix consumers and producers. Unit tests and an example (RequestReplyExample) are also included. The example demonstrates a very simple Jetty-based web service that accepts order status requests, forwards them to the FIX engine, waits for the reply and then returns the resulting FIX message formatted as JSON. I'll update the Confluence documentation after the patch is applied.","stevebate:1306986189:2011-06-02T11:43:09.325+0000:1306986189:2011-06-02T11:43:09.325+0000:camel-quickfix InOut patch
davsclaus:1306986658:2011-06-02T11:50:58.259+0000:1306986658:2011-06-02T11:50:58.259+0000:If possible can you make sure the patch is checkstyle compliant?
hadrian:1306989643:2011-06-02T12:40:43.936+0000:1306989643:2011-06-02T12:40:43.936+0000:@Steve, thanks for the contribution. Don't worry about checkstyle, I'll take care of it. We appreciate your improvements to the quickfix component!
hadrian:1307006235:2011-06-02T17:17:15.809+0000:1307006235:2011-06-02T17:17:15.809+0000:Patch applied with thanks to Steve Bate. Highly appreciated.
stevebate:1307035238:2011-06-03T01:20:38.143+0000:1307035238:2011-06-03T01:20:38.143+0000:Thanks Hadrian. I'll update Confluence before the end of the weekend.
stevebate:1307070644:2011-06-03T11:10:44.192+0000:1307070644:2011-06-03T11:10:44.192+0000:The documentation is updated. I was having some trouble running Checkstyle on a single project using Maven. However, I think I have it figured out now. I'll be sure to do that check before I submit any future patches."
0,CAMEL-4037,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-02 07:34:20+00:00,2011-06-02 12:31:37+00:00,"When using the persistent aggregation repository and you only use completion timeout, then upon restart, the currently partail completed exchanges does not re-activate their timeout completions in the timeout checker. So they will never complete.


We need to store the timeout value for each exchange in the repository, and upon recovery, re-establish the timeout map, so they can timeout.


See forum
http://fusesource.com/forums/thread.jspa?threadID=3003&tstart=0",
0,CAMEL-4036,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-01 15:45:40+00:00,2011-06-01 15:55:59+00:00,We should enrich the exchange header with the org.restlet.Request and org.restlet.Response objects. Then end users have those available in case they need to use them. For example to have fine grained control creating the response. Or there is some API in the request that Camel doesn't offer them.,davsclaus:1306914959:2011-06-01T15:55:59.314+0000:1306914959:2011-06-01T15:55:59.314+0000:Update wiki page as well.
0,CAMEL-4035,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-06-01 07:23:15+00:00,2011-06-01 11:03:47+00:00,"The DefaultExchangeHolder which can serialize the Exchange should check collection/map as they can contain now serializable objects.


See issue reported here:
http://fusesource.com/forums/thread.jspa?threadID=2990&tstart=0",
0,CAMEL-4034,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,1,2,2011-05-31 21:13:06+00:00,2011-11-27 09:15:42+00:00,"JClouds is a library that provides abstractions for cloud providers.
Currently it provides abstractions for:
i) BlobStores
ii) Queues
iii) Compute


It would be cool to have a camel component that would leverage the power of jclouds in order to use any cloud provider.
JClouds is Apache Licensed & OSGi ready (1.0-beta-10 will be and will provide Karaf integration).


I have put together a component that for jclouds blobstore (I intend to add queue support in the future).
The component is available on github: git@github.com:iocanel/camel-jclouds.git","iocanel:1314605009:2011-08-29T16:03:29.160+0000:1314605009:2011-08-29T16:03:29.160+0000:I am attaching a patch, which adds jclouds component supporting blobstore consumer/provider. It also adds a camel-jclouds feature.

Patch includes simple unit test for the component and it has also been tested on karaf-2.2.2 using aws-s3 as blobstore provider.
iocanel:1314620692:2011-08-29T20:24:52.392+0000:1314620692:2011-08-29T20:24:52.392+0000:I am attaching a slightly updated patch. The updated patch does not use the TCCL and uses the class resolver from the CamelContext. Also author tags have been removed.
hadrian:1314622693:2011-08-29T20:58:13.130+0000:1314622693:2011-08-29T20:58:13.130+0000:Ioannis, many thanks for the contribution. Is blobstore-test.xml missing from the patch? Such a feature would require quite a bit more testing. Interesting patch though.
iocanel:1314625255:2011-08-29T21:40:55.131+0000:1314625255:2011-08-29T21:40:55.131+0000:I am attaching the missing blobstore-test.xml.
iocanel:1314625379:2011-08-29T21:42:59.977+0000:1314625422:2011-08-29T21:43:42.540+0000:@Hadrian, the file was missing from the patch. I attached it separetly. Please let me know if you need the full patch (with the blobstore-test.xml included).


hadrian:1314720065:2011-08-31T00:01:05.395+0000:1314720065:2011-08-31T00:01:05.395+0000:@Ioannis, no need for a full patch. I'll assign this to myself, starts some tests and let you know how it works or if it needs any changes. Thanks for the contribution and we'd like to see more from you.
hadrian:1314772719:2011-08-31T14:38:39.009+0000:1314772719:2011-08-31T14:38:39.009+0000:@Ioannis, there are other files missing in the patch, such as ones in src/main/resources/META-INF used for component discovery. A lot more tests are needed, imho, as well. I made some changes myself. Are you ok with applying the patch with my changes, or you want to redo the patch (in which case I'll provide more detailed comments).

We'll also need documentation for the new component, would it be possible to work on that as well?
iocanel:1316329836:2011-09-18T15:10:36.479+0000:1316329836:2011-09-18T15:10:36.479+0000:I understand that the patch has not been committed yet.

I would like to extend its current functionality and leverage jclouds compute service, so that its possible to:
a) Start/Stop nodes on the target cloud provider.
b) Query active nodes
c) Query available images
d) Query locations etc
e) Run scripts on nodes
from camel routes.

I am expecting to commit the patch (with your additions/changes) in order to start working on camel trunk.
I will add the documentation work once the patch is committed (unless you would prefer me to start now).

hadrian:1316333285:2011-09-18T16:08:05.151+0000:1316333285:2011-09-18T16:08:05.151+0000:@Ioannis, yes, let's start with the documentation. It should state I think that this component it experimental, because it does require more work. I will commit the patch then with some minor changes.
hadrian:1316626488:2011-09-22T01:34:48.332+0000:1316626488:2011-09-22T01:34:48.332+0000:@Ioannis, committed patch and minor fixes, but still have another change to commit tomorrow. Thanks for the contribution!
iocanel:1317042386:2011-09-26T21:06:26.651+0000:1317042386:2011-09-26T21:06:26.651+0000:I am attaching a patch which adds the following:

a) Compute Service Endpoint & Producer. Supported operations are: create/destroy node, run script, list nodes, list images, list hardware.
b) Unit tests for Compute Service Producer (all operations but run script).
c) BlobStore Producer can now ""GET"" a payload from a blobstore and return it in the out message.
d) More unit tests for the BlobStore producer/consumer.
e) The component now accepts Lists of BlobStore & Compute Services and the blobstore/computeservice the endpoint will actually use is specified in the endpoint URI.
hadrian:1317274311:2011-09-29T13:31:51.506+0000:1317274311:2011-09-29T13:31:51.506+0000:Patches applied. Thanks @Ioannis for the contribution. This component will require more fixes, but those could be done in separate jiras. The only thing needed now to close this jira is updating the documentation.
iocanel:1317366599:2011-09-30T15:09:59.020+0000:1317366599:2011-09-30T15:09:59.020+0000:I created the documentation. While I was writing the documentation I noticed that some of the constants could be changed in order to be more simpler and more easy to remember by the users.

So I am attaching a patch that changes that.
iocanel:1319440164:2011-10-24T15:09:24.781+0000:1319440164:2011-10-24T15:09:24.781+0000:The last patch breaks consistency with the existing components naming, so I think that it should not be added. I will update the documentation and resolve this issue.
davsclaus:1322282709:2011-11-26T12:45:09.949+0000:1322282709:2011-11-26T12:45:09.949+0000:Ioannis is this camel-jclouds component not all set now? If so this ticket can be resolved.
iocanel:1322356542:2011-11-27T09:15:42.410+0000:1322356542:2011-11-27T09:15:42.410+0000:The basic functionality for this component is set and committed to trunk. "
0,CAMEL-4033,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-31 14:15:51+00:00,2011-05-31 15:30:08+00:00,"The Loop EIP will use pipes and filters. So if you loop 3 times, then on the 2nd and 3rd time its the output from the previous processing that is being used.


We should add an option so people can use a copy of the original exchange instead, so its the same copy being looped on each iteration.


The wiki documentation should be updated to describe the difference in these two modes.


See nabble
http://camel.465427.n5.nabble.com/Loop-usage-tp4432628p4432628.html",davsclaus:1306827008:2011-05-31T15:30:08.691+0000:1306827008:2011-05-31T15:30:08.691+0000:There is now a new copy option. Wiki documentation updated as well.
0,CAMEL-4032,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-05-31 07:48:57+00:00,2011-05-31 07:51:04+00:00,"As we are leverage the jetty feature that karaf has and karaf jetty feature has the all bundles that camel needs.
We don't need to specify the addition jetty bundle in the apache-camel feature.",njiang:1306799464:2011-05-31T07:51:04.800+0000:1306799464:2011-05-31T07:51:04.800+0000:Applied the patch into trunk.
0,CAMEL-4031,Improvement,Major,2.7.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-30 12:01:20+00:00,2013-05-02 02:29:40+00:00,"We should move the ResourceEndpoint from camel-spring to camel-core and let it leverage the Camel class resolver. That makes it work in Camel environments. For example blueprint, jboss etc.


It also makes it possible to use camel-freemarker, velocity etc. without spring JARs at all.","davsclaus:1309137768:2011-06-27T09:22:48.873+0000:1309137768:2011-06-27T09:22:48.873+0000:I would like to move forward that Camel becomes less dependent on Spring JARs. So targeting this for Camel 2.9.
davsclaus:1312700463:2011-08-07T15:01:03.271+0000:1312714644:2011-08-07T18:57:24.874+0000:There following components no longer depends on spring
- validator (moved from camel-spring to camel-core)
- xslt (moved from camel-spring to camel-core)
- test (moved from camel-spring to camel-core)
- velocity
- freemarker
- stringtemplate
- flatpack
- ibatis
- jing
- msv
- xquery

"
0,CAMEL-4030,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-05-30 08:53:21+00:00,2011-05-30 09:39:12+00:00,"When the use is setting the exchange pattern on the camel route like this



   from(""cxf:xxx"").inonly(""jms:xxx"").to(""xxx"")




Camel cxf consumer should be able to take the response according to the exchange pattern.",njiang:1306719552:2011-05-30T09:39:12.529+0000:1306719552:2011-05-30T09:39:12.529+0000:Applied the patch into trunk.
0,CAMEL-4029,Sub-task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-05-29 10:25:50+00:00,2011-06-29 06:13:40+00:00,We should add some documentation about the new karaf command.,"cschneider:1306916377:2011-06-01T16:19:37.137+0000:1306916377:2011-06-01T16:19:37.137+0000:We should also document how to get camel running in karaf .. features:addurl ...
jbonofre:1308904104:2011-06-24T16:28:24.830+0000:1308904104:2011-06-24T16:28:24.830+0000:Claus granted wiki access now, I start to work on the Karaf commands doc.
jbonofre:1309299220:2011-06-29T06:13:40.789+0000:1309299220:2011-06-29T06:13:40.789+0000:I added a User Guide entry describing how to install Camel into Karaf and the commands available:

http://camel.apache.org/karaf.html

NB: the latest changes have been done some minutes ago, so we have to wait the website update (next night) to blog/tweet about that."
0,CAMEL-4028,Improvement,Minor,2.7.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,1,2011-05-29 08:21:53+00:00,2011-09-15 18:36:25+00:00,"The simple language uses ${ } tokens by default. However groovy uses those for its GString. So we have a clash. Even if you use $simple{ } instead in Groovy then you have a clash.


So we should add support for configuring the tokens so you can remedy the GString clash in Groovy.","taariql:1307234913:2011-06-05T08:48:33.716+0000:1307234913:2011-06-05T08:48:33.716+0000:Take a look at the patch and see if it's what you had in mind before I bother updating the documentation.
davsclaus:1307236097:2011-06-05T09:08:17.961+0000:1307236097:2011-06-05T09:08:17.961+0000:Taarig that is a great start.

We need tests for camel-spring as well as you can use <simple> in there. And we need tests that uses custom prefix/suffix tokens.

In the SimpleExpression you need to add attributes for prefix/suffix so they can be configured in XML DSL:
{code:xml}
<simple prefix=""["" suffix=""]"">[body] is cool</simple>
{code}

Likewise we should add support for configuring those prefix/suffix tokens on a global level so you dont have to provide custom all the time. But I wonder what a good way would be for that?

In Java it would be to configure the SimpleLanguage
{code}
SimpleLanguage simple = (SimpleLanguage) context.resolveLanguage(""simple"");
simple.setPrefix(""["");
simple.setSuffix)""]"");
{code}

But in XML DSL we may want a nice way of doing that in the XSD.
Currently you should be able to do it as a <bean> tag

{code:xml}
<bean id=""simple"" class=""...SimpleLanguage"">
  <property name=""prefix"" value=""[""/>
  <property name=""suffix"" value=""]""/>
</bean>
{code}
davsclaus:1307236294:2011-06-05T09:11:34.504+0000:1307236294:2011-06-05T09:11:34.504+0000:And we should of course have any unit test in camel-groovy using a custom tokens so we can see it works without clashing with Groovy's GStrings.
davsclaus:1307236401:2011-06-05T09:13:21.077+0000:1307236401:2011-06-05T09:13:21.077+0000:In the ContextTestSupport you assume only simple has prefix/suffix support. The langugeName is provided as a parameter so you should check for that instead.

Also we have a LanguageTestSupport class in camel-test, camel-testng which may need to be adjusted as well.
davsclaus:1307236472:2011-06-05T09:14:32.413+0000:1307236472:2011-06-05T09:14:32.413+0000:In ExpressionDefinition I wonder if you can avoid the dependency on SimpleLanguage. There is a configurePredicate which you ought to be able to override and do any custom work in there. 
taariql:1307239174:2011-06-05T09:59:34.974+0000:1307239174:2011-06-05T09:59:34.974+0000:Thanks for the input Claus. Those are all good things, I'll take another stab at it.
davsclaus:1309137817:2011-06-27T09:23:37.475+0000:1309137817:2011-06-27T09:23:37.475+0000:Taariq did you have a chance to work on this?
taariql:1311419675:2011-07-23T19:14:35.815+0000:1311419675:2011-07-23T19:14:35.815+0000:Got everything done except the dependency and groovy.
Sorry it took a while to notice this, I don't often manage all the mail, but I just added a watch to the ticket.
Anyway I shelved it waiting for 2.8 to be out since it's 'fix for 2.9', it's unshelved now.

It's close to done, just some groovy and the dependency to think about.
I hope to wrap it up soon, or at least stick up another patch for further input on the dependency.
taariql:1312084774:2011-07-31T11:59:34.480+0000:1312084774:2011-07-31T11:59:34.480+0000:The new patch includes everything discussed before except the Groovy example to make sure it's working for GStrings, and I lack the Groovy seasoning.
I will try some more in the meantime anyway, and maybe you can give me a simple use case and I can fix it if it's still not working properly.

I added some interfaces to ease the suffering with the dependency on the instance but maybe you've got a better idea for it.

Finally, all the tests work, but recently some tests don't work in Maven, tests that rely on Simple. 
In the IDE the same tests work great, so it could have to do with a generated file like camel-spring.xsd perhaps. 
Anyway I'll also work on that in the meantime too but I'll be gone soon for a couple of weeks so hopefully I get to wrap it up proper before I leave.
davsclaus:1312087040:2011-07-31T12:37:20.538+0000:1312087040:2011-07-31T12:37:20.538+0000:Taariq that is a good start.

It would be great if we could somehow globally configure the prefix/suffix tokens on the simple language, so you do not need to provide those each time.

We should add API on CamelContext to add a language
- addLanguage(String name, Language language)

Then people can use that in Java to configure it globally
{code}
SimpleLanguage simple = new SimpleLanguage();
simple.setPrefixToken(""["");
simple.setSuffixToken(""["");

context.addLanguage(""simple"", simple);
{code}

In XML DSL you can do with a <bean> tag, and that's it:
{code:xml}
<bean id=""simple"" class=""org.apache.camel.language.SimpleLanguage"">
  <property name=""prefixToken"" value=""[""/>
  <property name=""suffixToken"" value=""]""/>
</bean>
{code}
davsclaus:1312087146:2011-07-31T12:39:06.806+0000:1312087146:2011-07-31T12:39:06.806+0000:In XML DSL we may want to add a nice namespace for it

{code:xml}
<camelContext ...>
   <language id=""simple"" prefixToken=""["" suffixToken=""]""/>
 ...
</camelContext>
{code}
taariql:1312235220:2011-08-02T05:47:00.885+0000:1312235220:2011-08-02T05:47:00.885+0000:Sure I'm on it.
taariql:1313824866:2011-08-20T15:21:06.587+0000:1313882553:2011-08-21T07:22:33.619+0000:I notice there's already a 'language' in the model, see LanguageExpression, so I hope there won't be a clash. Should I use language here as well, or what else?
I have temporarily named the new one language2.

Just need to register the language beans from the XML to the bean registry then I'll get a new patch up.
The first groovy test I'll still be grateful for.
taariql:1313906687:2011-08-21T14:04:47.905+0000:1313906687:2011-08-21T14:04:47.905+0000:The failing unit SimpleLanguageGlobalCustomTokensTest shows another problem, setting it up using the namespace is useless when it's not singleton, so SimpleLanguage will be recreated when DefaultCamelContext is asked to resolveLanguage.
Any ideas on overcoming this? Did I take the right approach?
davsclaus:1314577478:2011-08-29T08:24:38.287+0000:1314577478:2011-08-29T08:24:38.287+0000:Taariq, thanks for the work on this ticket.

Last weekend I worked on a new improved simple language. You can read more here
http://camel.465427.n5.nabble.com/HEADS-UP-A-prototype-of-an-improved-Simple-language-for-Apache-Camel-tp4745446p4745446.html

Maybe you wanna help with that new and improved language, to add support for changing function start/end tokens. And other issues remaining. The reason would be as if this new improved language ""makes it"" then the code will be donated to Apache and most likely included in the trunk moving forward.


taariql:1314855593:2011-09-01T13:39:53.247+0000:1314855593:2011-09-01T13:39:53.247+0000:Looking good, forked.
davsclaus:1314856262:2011-09-01T13:51:02.015+0000:1314856262:2011-09-01T13:51:02.015+0000:Taariq, thats great. Feel free if you have the time to dive into the code and help out. I added some TODO in the readme.md. I guess we should add this ticket as well, being abel to configure the function start/end tokens. 

And we also need a few more unit tests for the escaped characters, such as when you oddly need to escape and output ${xxx} in a simple expression. Then you would need to escape the $ char.
taariql:1316033360:2011-09-15T04:49:20.796+0000:1316033360:2011-09-15T04:49:20.796+0000:Now that Simple has had a complete overhaul, we don't need lots of API changes and new interfaces to allow custom tokens anymore, so I've kept only the Spring test and made some changes for this possible fix to configure SimpleLanguage using Spring.

I added some constructors to SimpleLanguage which the test uses to define a simple bean, Camel uses the Spring bean for language if it exists.

Can make it more flexible with more constructors if needed, since we've got var args for new function start and end tokens, and maybe you only want to change one of them, or maybe you want multiple new tokens.
davsclaus:1316082978:2011-09-15T18:36:18.061+0000:1316082978:2011-09-15T18:36:18.061+0000:Thanks for the patch. I have applied it."
0,CAMEL-4027,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Claus Ibsen,0,1,2011-05-28 10:11:28+00:00,2011-05-31 05:38:03+00:00,We need to add camel-hdfs to the features.xml file so we can install it in osgi.,"davsclaus:1306560228:2011-05-28T13:23:48.186+0000:1306560228:2011-05-28T13:23:48.186+0000:hadoop is not osgi bundles, so we need to have it osgified in the SMX team. Since we only need the hdfs part of it, there are most likely many of the 3rd party dependencies that hadoop lists in the pom.xml we do not need.
jbonofre:1306575500:2011-05-28T17:38:20.250+0000:1306575500:2011-05-28T17:38:20.250+0000:SMX4-850 in progress ...
jbonofre:1306717457:2011-05-30T09:04:17.796+0000:1306717457:2011-05-30T09:04:17.796+0000:Patch with the camel-hdfs feature.
cschneider:1306791482:2011-05-31T05:38:02.994+0000:1306791482:2011-05-31T05:38:02.994+0000:Applied patch"
0,CAMEL-4026,Bug,Minor,2.7.1,2.8.0,"

webstart

",Resolved,Fixed,2.8.0,Claus Ibsen,Jim Newsham,0,0,2011-05-28 01:16:14+00:00,2011-07-23 11:07:07+00:00,"This is a regression.  Worked fine for us in Camel 2.5.0, fails in Camel 2.7.1.  


Easy to reproduce.  Run the following code in a webstart-deployed application:


CamelContext context = new DefaultCamelContext();
context.getTypeConverterRegistry(); 


Which produces the following exception:


2011-05-26 16:52:57,550 [javawsApplicationMain] ERROR test.TestCamelContext - Failed
org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:986)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverterRegistry(DefaultCamelContext.java:1001)
    at test.TestCamelContext.test(TestCamelContext.java:54)
    at test.TestCamelContext.main(TestCamelContext.java:48)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
    at java.lang.reflect.Method.invoke(Unknown Source)
    at com.sun.javaws.Launcher.executeApplication(Unknown Source)
    at com.sun.javaws.Launcher.executeMainClass(Unknown Source)
    at com.sun.javaws.Launcher.doLaunchApp(Unknown Source)
    at com.sun.javaws.Launcher.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
    at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:79)
    at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:395)
    at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:41)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
    at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
    at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1613)
    at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:899)
    at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:984)
    ... 12 more","jn:1306517689:2011-05-28T01:34:49.184+0000:1306517689:2011-05-28T01:34:49.184+0000:Some further information which might be useful.

This may be the same issue as CAMEL-522 (resolved in Camel 1.5.0).  In that issue, it was stated that using the version-based protocol (something like <jar href=""camel-core.jar"" version=""1.4.01""/>) fails, while including the version in the jar name  (something like <jar href=""camel-core-1.4.01.jar""/>) succeeds.  I have only tested the version-based protocol, and this is the case which fails for me.

Andreas Kuhtz suggested on the mailing list [1] that the issue is caused by the webstart classloader not returning the correct url for the jar.  This assessment seems correct to me, as I confirmed that a resource url for package ""test"" was returned from the classloader as:

jar:http://localhost:8080/camel-webstart/lib/camel-webstart.jar!/test/

when the jar actually originated from:

http://localhost:8080/camel-webstart/lib/camel-webstart__V2.21-20110527-e55f306.jar

... where 2.21-20110527-e55f306 is the version.

The classloader is of type com.sun.jnlp.JNLPClassLoader.  I haven't tested this, but it seems like method ""JarFile getJarFile(URL)"" might be used to convert from the url to the cached jar file.  Unfortunately, making use of this method would bind you to the internal com.sun implementation. :(

[1] http://camel.465427.n5.nabble.com/addTypeConverter-does-not-clear-misses-in-BaseTypeConverterRegistry-td4288871.html
jn:1306517951:2011-05-28T01:39:11.358+0000:1306517951:2011-05-28T01:39:11.358+0000:Reference mailing list thread at http://www.mail-archive.com/users@camel.apache.org/msg15125.html
davsclaus:1306560610:2011-05-28T13:30:10.217+0000:1306560610:2011-05-28T13:30:10.217+0000:Its in fact not a regression. Java Web Start doesn't work with classpath scanning over http urls.

jn:1306583550:2011-05-28T19:52:30.599+0000:1306583550:2011-05-28T19:52:30.599+0000:I guess whether or not it's a regression is a matter of perspective.  From my perspective, the camel context throws an exception when starting up in 2.7.1, whereas it started up fine with no exception in 2.5.0, and I would call that a regression.  Regardless of what you call it, Camel can't start up in webstart, and that's a problem for us. 
davsclaus:1306628204:2011-05-29T08:16:44.985+0000:1306628204:2011-05-29T08:16:44.985+0000:In the past Camel will silently ignore this issue and still startup. But the type converters wont be loaded properly. Now Camel detects this problem and fails starting. 
davsclaus:1306628308:2011-05-29T08:18:28.809+0000:1306628308:2011-05-29T08:18:28.809+0000:Can you try enabling TRACE logging on: org.apache.camel.impl.converter package. And then post the log + full stacktraces. Then we can take a look and maybe spot something we can fix.
akuhtz:1306721651:2011-05-30T10:14:11.139+0000:1306721651:2011-05-30T10:14:11.139+0000:The problem can be solved easily if you use Spring to configure the CamelContext as described here: http://www.mail-archive.com/users@camel.apache.org/msg15126.html

Starting from Camel 2.8 you even no longer need to register the TypeConverters from the core package if I get this ticket right: https://issues.apache.org/jira/browse/CAMEL-3953

A step to solve this problem with pure java created CamelContext would be to check what happens in SpringCamelContext if a bean that implements PackageScanClassResolver is defined and check if this code can be used.
jn:1306843832:2011-05-31T20:10:32.893+0000:1306843832:2011-05-31T20:10:32.893+0000:As requested, Attaching log file with log level TRACE.
davsclaus:1306897568:2011-06-01T11:06:08.529+0000:1306897568:2011-06-01T11:06:08.529+0000:Jim do you have some simple Java code to start a Java application as Java Web Start? I would like to experiment with that a big, to dig up some ideas what we can do.

jn:1306936592:2011-06-01T21:56:32.255+0000:1306936592:2011-06-01T21:56:32.255+0000:Claus, I'm not aware of any way to start a webstart app programmatically from Java.  I've been doing a full deployment for my testing.  This involves:  (1) building your code into a jar; (2) signing *all* jars (your jar and third party jars) with the *same* certificate; you can use a self-generated certificate for this; (3) creating a webstart descriptor file (*.jnlp) which points to your jars and main class; (4) configuring/deploying the JnlpDownloadServlet on a servlet container such as tomcat (this servlet is needed to support the version-based download protocol [1]); (5) deploying your jars and jnlp on the servlet container; (6) using a browser to request the jnlp file.

More info can be found in the webstart dev guide:
http://download.oracle.com/javase/1,5.0/docs/guide/javaws/developersguide/contents.html

Obviously this is a lot of work.  We have ant scripts that automate most of this for us, but they are tied to our build process (using ivy for pulling in dependencies, for example), so I can't just send that to you.

[1] Note that the problem I reproduced was with the version-based protocol.  I have not tried without the version-based protocol, but I suspect the problem might not exist without.

davsclaus:1306990836:2011-06-02T13:00:36.246+0000:1306990836:2011-06-02T13:00:36.246+0000:Do you use any other camel JARs than camel-core in your webstart project? And if so which ones do you use?
jn:1307017811:2011-06-02T20:30:11.683+0000:1307017811:2011-06-02T20:30:11.683+0000:The jars I'm using are camel-core, commons-management, slf4j-api, slf4j-log4j12, log4j, and the jar containing my test code.
davsclaus:1307243238:2011-06-05T11:07:18.680+0000:1307243238:2011-06-05T11:07:18.680+0000:Jms since you dont use any extra camel JARs then you didnt hit any issues with not being able to discover type converters on the classpath with java web start.


jn:1307289226:2011-06-05T23:53:46.916+0000:1307289226:2011-06-05T23:53:46.916+0000:As far as I know, we're not using or relying on any type converters in our application.  The issue which impacts us is the fact that the DefaultCamelContext throws an exception during startup in our application, when deployed via webstart/jnlp.
davsclaus:1311390427:2011-07-23T11:07:07.436+0000:1311390427:2011-07-23T11:07:07.436+0000:Should be improved in Camel 2.8"
0,CAMEL-4025,Bug,Major,"2.6.0, 2.7.1",2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Paul Mietz Egli,0,0,2011-05-27 22:49:50+00:00,2011-05-29 13:49:45+00:00,"I have a route that is inside a <routeContext> element which uses XPath as part of a filter and a choice.  The input document has a default namespace that is not blank.  When I try to run a message through the route, I see the following error in the logs:



com.sun.org.apache.xpath.internal.domapi.XPathStylesheetDOM3Exception: Prefix must resolve to a namespace: foo




Adding the namespace declaration to the beans element as is done in the unit tests for camel-spring doesn't fix the problem, and neither does adding it to the <camelContext> element as described in the documentation.  I copied the SpringXPathFilterWithNamespaceTest class and created an input route configuration that uses a routeContext, and was able to reproduce the issue.","pegli:1306507894:2011-05-27T22:51:34.688+0000:1306507894:2011-05-27T22:51:34.688+0000:Route definition with an XPath filter inside a route context.  Place in src/test/resources/org/apache/camel/spring/processor
pegli:1306507945:2011-05-27T22:52:25.237+0000:1306507945:2011-05-27T22:52:25.237+0000:unit test that reproduces bug; requires route definition xml file also attached to this isuse."
0,CAMEL-4024,Improvement,Minor,2.7.1,Future,"
None
",Resolved,Implemented,Future,Claus Ibsen,ray,0,1,2011-05-27 20:45:10+00:00,2015-02-06 09:35:42+00:00,Two cases: Zip files with zip files inside (wrapping zip files) and inner zip files with uncompressed payloads.  I haven't really thought through how to deal with all of the options in these cases but I will attach the code to deal with the simple ones,"mondraymond:1306500954:2011-05-27T20:55:54.253+0000:1306501051:2011-05-27T20:57:31.799+0000:Example usage:

{code}
from(fromUri)
  .split().method(OuterZipFileDecompressingSplitter.class, ""split"")
  .streaming()
  .parallelProcessing()
  .to(""direct:innerZipFile"");

from(""direct:innerZipFile"")
  .split().method(InnerZipFileDecompressingSplitter.class, ""split"")
  .streaming()
  .parallelProcessing()
  .to(""direct:furtherProcessing"");
{code}
mondraymond:1308099896:2011-06-15T09:04:56.178+0000:1308099896:2011-06-15T09:04:56.178+0000:I finally got around to fixing this so that you only need one class
mmay@apache.org:1324020590:2011-12-16T15:29:50.174+0000:1324020590:2011-12-16T15:29:50.174+0000:Works quite nice, except on windows machines, when the encoding of the zipped files is not equals to UTF-8. There does not seem to be one nice solution for this problem. I gave up on this one ;-(


davsclaus:1423186532:2015-02-06T09:35:32.149+0000:1423186532:2015-02-06T09:35:32.149+0000:There is a camel-zipfile which should support this."
0,CAMEL-4023,New Feature,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-27 15:48:04+00:00,2011-05-30 09:44:34+00:00,"The CXF ServerFactoryBean allow to configure custom properties. However those cannot be configured in a pure endpoint uri, or with java DSL.


Currently you have to use the CXF XML schema for that.
We should add support so the CxfComponent parses additional properties.XXX parameters and provide those to CXF.
Likewise you should be able to set a Map with properties on the CxfEndpoint, in case you do pure Java POJO creating of the endpoint.","davsclaus:1306484054:2011-05-27T16:14:14.824+0000:1306484054:2011-05-27T16:14:14.824+0000:You can now use {{""properties.""}} as prefix for any additional properties in the endpoint uri. Likewise there is a getter/setter on the CxfEndpoint you can set from Java code.
njiang:1306534593:2011-05-28T06:16:33.866+0000:1306534593:2011-05-28T06:16:33.866+0000:Just committed a patch which set the properties on the ClientProxyFactory, also fix an issue about setting the MTOM enable property. 
davsclaus:1306536727:2011-05-28T06:52:07.956+0000:1306536727:2011-05-28T06:52:07.956+0000:Thanks Willem. I wonder if there is a missing option on the CxfEndpoint for mtom-threshold?

This option is in the CXF source code:
    java.lang.String MTOM_THRESHOLD = ""mtom-threshold"";

davsclaus:1306636227:2011-05-29T10:30:27.219+0000:1306636601:2011-05-29T10:36:41.829+0000:TODO: *DONE* Add documentation about this on CXF wiki page, and in release notes
njiang:1306719039:2011-05-30T09:30:39.691+0000:1306719039:2011-05-30T09:30:39.691+0000:The threshold property can be used to set the threshold value used to determine when binary data should be XOP encoded. 
I think we don't need to add this option into camel-cxf endpoint. As we have the properties.xxx to resolve it,  we don't need add addition option for it. "
0,CAMEL-4022,Bug,Critical,2.7.1,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Hadrian Zbarcea,0,0,2011-05-27 13:27:40+00:00,2011-06-10 08:42:27+00:00,"While fixing issues around the errorHandler I noticed that <onException> definitions defined in the camel context are ignored if a route specifies its own errorHandlerRef. The reason is that we set the onException definition on the default error handler. I have a fix for that, but I discovered a different issue (I think) for which I would like to discuss the solution.


When we have an onException definition that looks kinda like this:



<onException>
  <exception> java.lang.IllegalArgumentException</exception>
  <to uri=""mock:illegalArgumentException""/>
</onException>




... something happens, the IAE exception is caught, we do something, but in that process another exception is thrown. Currently, that would be caught by the default error handler, which may not be what we want.


What error handler (if any) should handle exceptions thrown while in onException?


The onException mechanism is somewhat similar to a try/catch. I don't think the exceptions thrown while handling onException should be handled by the same error handler configured for the route, or even the context scoped one. The processing should be very simple, predictable and immutable. Since the default ""CamelDefaultErrorHandlerBuilder"" can be replaced, it is not imho a solution and we need one global one that does as little as possible (the problem would be agreeing what that is: no redeliveries, logging or not, etc).


Thoughts?","davsclaus:1306475749:2011-05-27T13:55:49.151+0000:1306475782:2011-05-27T13:56:22.302+0000:The behavior should be that no error handler should be used, when routing inside the <onException>.

For example as you say if another exception, or the same type of exception occurs, then the complexity gets hard. What if there is another onException that handles that exception, and then another exception is thrown and you go back to the first onException. And so on. Eg you have to be careful to not go in circles.

The onException is to allow end users to handle that exception in any custom way. For example to prepare some custom reply message (instead of the exception).

If you want to continue routing and have error handling, then send the message to a route:
{code}
onException(SomeException.class).handled(true).to(""direct:someRoute"");
{code}
hadrian:1306476861:2011-05-27T14:14:21.278+0000:1306476861:2011-05-27T14:14:21.278+0000:@Claus, thanks for the input. That's the issue, what if I don't want handled(true) and to(""direct:someRoute"") fails?

For the situation you mention where there is an onException handling the exception thrown while handling, that should *not* trigger. That is only meant for exceptions thrown on the route, not while handling. I believe exception thrown while handling have a special status and should be handled differently, in a simple, predictable way, not by the ErrorHandler configured for the route.

We need to come up with a good convention.
hadrian:1306477059:2011-05-27T14:17:39.500+0000:1306477059:2011-05-27T14:17:39.500+0000:To be more precise, I believe exceptions thrown while handling are extremely exceptional and imho indicate a design/coding problem that needs to be resolved by the developer and should not appear in production. I don't see any good choice a framework like camel can make for you in such situations.
hadrian:1306920346:2011-06-01T17:25:46.065+0000:1306921186:2011-06-01T17:39:46.941+0000:I added a test in r1130232 that demonstrates the problem. What should happen if exception is thrown while handling exception? Imho, certainly not going through redeliveries and the default error handler (which can be replaced by the user app).

My proposal is to have a fatalErrorHandler for this scenario that is simple and stateless (i.e. no redelivery and virtually no chances of throwing other exceptions, no sending to other endpoints). If that sounds good I can implement the piping for it while we keep discussing what exactly the fatalErrorHandler should do. If you can think of better solutions feel free to comment.

Thoughts?
joed:1307003587:2011-06-02T16:33:07.249+0000:1307003587:2011-06-02T16:33:07.249+0000:This is an interesting use-case....
I strongly agree that it is an edge-case, ideally I think this should be something that is done as try/catch/finally, but since the case can occur
from my looking at the test I agree that some sort of fatalError is at least a good start.
joed:1307003928:2011-06-02T16:38:48.309+0000:1307003928:2011-06-02T16:38:48.309+0000:Second comment, whatever we do, I think the most important is that it is not hidden from the user in any way shape or form.
Like swallowing it and carrying on as if nothing happened...
hadrian:1307006802:2011-06-02T17:26:42.138+0000:1307006802:2011-06-02T17:26:42.138+0000:Johan, not sure how edge-case it is. Absolutely agree that we should not just swallow it.

Actually since it's a separate issue than the one reported here, I opened an improvement issue CAMEL-4041, and we can continue the discussion there.
davsclaus:1307248586:2011-06-05T12:36:26.973+0000:1307248586:2011-06-05T12:36:26.973+0000:I had a bit time to look into that unit test Hadrian committed.

I moved it into its separate unit test file: ExceptionCamel4022Test
That makes it easier to debug.

I also added a bunch of unit tests that showed the expected behavior of onException when an exception was thrown: ExceptionThrownFromOnExceptionTest

The odd thing from Hadrians test is that if you send the message to direct:intermediate instead of direct:start, then it works as expected. I haven't debugged this more throughly to see the oddity.


davsclaus:1307249171:2011-06-05T12:46:11.555+0000:1307249171:2011-06-05T12:46:11.555+0000:The current logic for onException is as follows:

1. onException will shadow any errorHandler
2. any errorHandler does not take part if onException is processing an exception (this is the intend, but Hadrian created an unit test where the DLC interfered)


The logic in onException is roughly a ""magic"" try .. catch
{code}
try

   // while loop routing the exchange
 
} catch (OnException e) {
   try {
      // onException route logic goes here, if there is any
   } catch (Throwable t) {
      // ops an exception occurred in onException, we will store it on the exchange
      // TOOD: this is where we may want the onExceptionErrorHandler (to log the exception or something)
      exchange.setException(t);
   }
   
   if (!continued) {
      // mark exchange to stop routing (this is the default behavior)
   }
   if (!handled) {
      // if onException is configured to NOT handle, then rethrown exception (this is the default behavior)
      throw exchange.getException();
   }
}
{code}

So if an exception is thrown during onException processing, then that exception is caught. But we may want to introduce that OnExceptionErrorHandler (FatalErrorHandler as named by Hadrian) to log the exception (I think that's already done). But having an OnExceptionErrorHandler, we could let end user configure what to do. But again this may just become more complicated.


davsclaus:1307259685:2011-06-05T15:41:25.608+0000:1307324938:2011-06-06T09:48:58.749+0000:*Note:* We ought to discuss this in ticket CAMEL-4041

Okay Hadrian is correct when he suggests a OnExceptionErrorHandler (he named it FatalErrorHandler) that is stateless and doesn't do redelivery and whatnot. I got a prototype up and running with that now.

So what we need to consider is what the outcome of the processing of the Exchange should be when using OnException and a 2nd exception is thrown from within OnException. I hope you follow me now.

As I see we can do either of the following
a) log the 2nd exception and then ignore it
b) log the 2nd exception and set it as exception on the Exchange
c) as b + force the exchange to fail, even if continued/handled was set to true
d) as b + having an option to control if we should force the exchange to fail or not

And in terms of logging, we can have log level options end users can control in  case they don't want that. But by default I suggest its logged at WARN level incl. stacktraces

The ""big"" questions is what we should consider as the outcome. Should the 2nd exception be ignored or not. And if not ignored should it replace the 1st exception on the Exchange. And if so should we always force the Exchange to fail, even if the end user configured handled(true) etc.


davsclaus:1307324891:2011-06-06T09:48:11.031+0000:1307324891:2011-06-06T09:48:11.031+0000:I have added unit tests on trunk
http://svn.apache.org/viewvc?rev=1132562&view=rev

That tests for <onException> with both context and route scoped error handlers. I cannot reproduce the issue Hadrian reported in the initial comment of this JIRA ticket.

The test Hadrian created in r1130232 does neither reproduce it as its only a Java DSL test (no XML DSL test as well) and it indicated another issue, which is what should happen if another exception is thrown during processing onException. That is ticket CAMEL-4041.


hadrian:1307342151:2011-06-06T14:35:51.202+0000:1307342151:2011-06-06T14:35:51.202+0000:Claus, I can understand how you got confused. I should have been clearer in the description above. This shouldn't be a duplicate of CAMEL-3989, as I said in the description above: ""I discovered a different issue"". And the problem, although I discovered while looking into the camel-spring issue is in camel-core. Anyway, the title and description are not clear, I agree with that.

Regarding your comment above, yes, my test targeted the java dsl, to resolve the part of the issue that became CAMEL-4041 on Thu, one day later.

I don't think it's worth getting pedantic and cleanup the description and title of this issue (feel free if you think it's important). I would however continue the discussion for CAMEL-4041 here, because we have the context here (unless we copy a couple of the relevant comments there).

To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

To the proposed issues of having it configurable, I am strongly against it being configurable. This is a fatal situation that should not occur in the first place. If the exception should be ignored, again no, I believe Johan said the same thing. This is a situation much more likely to appear during development (in production it would be only the result of insufficient testing). We should fail fast and loud. So the only viable solution to me is c), something like an 'internal server error'. There are other solutions to be considered, like stopping the route, but given the stateless nature of camel routes I don't think we should go that far.

davsclaus:1307343092:2011-06-06T14:51:32.175+0000:1307343092:2011-06-06T14:51:32.175+0000:> To the not very important issue of naming, I think OnExceptionErrorHandler is much less descriptive than FatalErrorHandler, which may not be the best name either. More descriptive would be ExceptionWhileHandlingExceptionErrorHandler, which to me sounded like Fatal.

??? That new error handler is *only* being used when you use OnException, and thus a description that indicate that is much better than a general/confusing name such as FatalErrorHandler. The name ExceptionWhileHandlingExceptionErrorHandler is a better description but again it doesn't trigger/being used, in case, lets say DeadLetterChannel itself caused a fatal exception while processing the exception.

So having the name OnExceptionErrorHandler is a better description as it points the user/reader in the direction its being used when you use OnException.
davsclaus:1307343155:2011-06-06T14:52:35.510+0000:1307343155:2011-06-06T14:52:35.510+0000:And in terms of the options listed. I also currently agree/think that *c* is the best and what the end user would expect. The exception is not hidden etc. It causes the exchange to fail. And its being logged so they can find it in the log also.
davsclaus:1307343470:2011-06-06T14:57:50.374+0000:1307343470:2011-06-06T14:57:50.374+0000:Work in progress patch for this new error handler. 
davsclaus:1307343993:2011-06-06T15:06:33.648+0000:1307343993:2011-06-06T15:06:33.648+0000:Hadrian fell free to look at the attached patch file, it goes most of the stuff in place. Of course some unit tests have to be adjusted slightly as they was dependent on the old code. Likewise there may be some tests in camel-spring that need to be adjusted.

Since this would be a bigger change, a good idea is to run a full test before committing :)
hadrian:1307386365:2011-06-07T02:52:45.275+0000:1307386365:2011-06-07T02:52:45.275+0000:@Claus, I agree a full test is absolutely necessary before committing.

FWIW, I know this ErrorHandler is only used with OnException, i.e. when onException is used in the DSL. Naming the handler OnExceptionErrorHandler will therefore relate to the route building syntax, not the semantics which to me is a problem. I trust you'll be able to come with something better.

Couple of comments on the patch: the error handler could be a singleton (obviously stateless). I think logging should be at error level. To your comment in the code, I don't think anything related to this error handler should be configurable.

That said, it's definitely a step in the right direction. Feel free to commit the patch. We can follow up with more changes once we agree on the other details and then close the issue (CAMEL-4041).
davsclaus:1307598553:2011-06-09T13:49:13.427+0000:1307598553:2011-06-09T13:49:13.427+0000:Okay I will return to this ticket and the patch, now that I got time again.
davsclaus:1307606064:2011-06-09T15:54:24.768+0000:1307606064:2011-06-09T15:54:24.768+0000:Will take a bit more work to get the XML DSL side working as they use error handler ref, and this indirection takes a bit more work to proper setup with this new FatalErrorHandler.
davsclaus:1307666547:2011-06-10T08:42:27.226+0000:1307666547:2011-06-10T08:42:27.226+0000:Fixed by CAMEL-4041. I added better validation of OnException so you cannot mis configure it."
0,CAMEL-4021,Bug,Minor,2.7.1,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Arkadi Shishlov,0,0,2011-05-27 10:26:05+00:00,2011-10-25 11:35:52+00:00,"Similar to CAMEL-3493 there is also a race in getRouteDefinition()



java.util.ConcurrentModificationException
        at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)[:1.6.0_21]
        at java.util.AbstractList$Itr.next(AbstractList.java:343)[:1.6.0_21]
        at org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1098)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.startGatewayRoutes(GatewayRouteSetup.java:86)[cih-core-1.0.jar:1.0]
        at com.tieto.cih.core.main.GatewayRouteSetup.process(GatewayRouteSetup.java:73)[cih-core-1.0.jar:1.0]




As route count could be quite large, it would be nice to have them stored in synchronized map or something like that instead of list.",
0,CAMEL-4020,Improvement,Minor,2.7.1,2.10.0,"
None
",Closed,Won't Fix,2.10.0,Unassigned,Fernando Ribeiro,0,0,2011-05-27 02:11:42+00:00,2012-01-02 14:32:33+00:00,"When processing a fault from a RESTful web service exposed by using the camel-restlet component, it is desirable to retrieve the error message straight from the HTTP response message, rather than from the body.


An exception handler must be able to store the exception message in a header in the exchange that is then transformed into the HTTP response message by the component.","davsclaus:1306569846:2011-05-28T16:04:06.681+0000:1306569846:2011-05-28T16:04:06.681+0000:Patches that have unit tests are more likely to be accepted. 
fribeiro:1322496579:2011-11-29T00:09:39.815+0000:1325485922:2012-01-02T14:32:02.641+0000:Restlet 2.0.8, used in Camel 2.8, don't actually support changing the response message.
fribeiro:1325485953:2012-01-02T14:32:33.095+0000:1325485953:2012-01-02T14:32:33.095+0000:Restlet doesn't actually support it."
0,CAMEL-4019,Improvement,Minor,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Fernando Ribeiro,0,0,2011-05-27 01:23:35+00:00,2011-05-28 13:44:40+00:00,The NoCacheStorage class can safely be replaced by FreeMarker's NullCacheStorage class (created per my suggestion based on our needs in Camel) introduced in 2.3.16.,davsclaus:1306560911:2011-05-28T13:35:11.513+0000:1306560911:2011-05-28T13:35:11.513+0000:Thanks for the patch.
0,CAMEL-4018,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Willem Jiang,Stu Churchill,0,0,2011-05-26 16:41:31+00:00,2011-05-27 01:15:21+00:00,"In the ""Parameter Binding Annotations"" page at http://camel.apache.org/parameter-binding-annotations.html, a number of the examples include lines like;


public void doSomething(@Header(name = ""JMSCorrelationID"") String correlationID, @Body String body) {


The correct annotation parameter for @Header is actually ""value"", rather than ""name"".","njiang:1306430091:2011-05-27T01:14:51.878+0000:1306430091:2011-05-27T01:14:51.878+0000:Hi Stu

After digging the code change log, I find this issue is related to CAMEL-1378 which was fixed two years ago.
I just updated the wiki page for it, and thanks for your bug report.

njiang:1306430121:2011-05-27T01:15:21.776+0000:1306430121:2011-05-27T01:15:21.776+0000:Updated the wiki page."
0,CAMEL-4017,New Feature,Major,None,None,"

twitter

",Resolved,Fixed,2.10.0,Unassigned,Brett Meyer,1,1,2011-05-26 15:25:27+00:00,2012-01-07 05:03:05+00:00,"CAMEL-1520 resulted in the beginnings of camel-twitter, a component for consuming and publishing through the Twitter API.  The issue is marked as WON'T fix, as the authors decide to start investigating a more generalized social media component.


The src is currently sitting in Bruno's https://github.com/brunoborges/camel-twitter.  I propose continuing development, hopefully adding it to the camel-extra repository.


In my opinion, keeping this separate, rather than adding to a generalized social media plugin, would be important.  Twitter usage, and the context the component would be used, can be drastically different.


I would be more than willing to take ownership of the effort and begin to contribute.  There's several areas of the Twitter API that we use that would be extremely helpful to add as a Camel endpoint (streaming connections, etc.).","bmeyer2:1306406240:2011-05-26T18:37:20.621+0000:1306406240:2011-05-26T18:37:20.621+0000:After discussing this with Bruno, we're going to re-startup development on camel-twitter, keeping it separate from camel-social.  We'll be working on it at https://github.com/brunoborges/camel-twitter and hopefully releasing a stable build to camel-extra in the future.  Contact us if interested in helping!
davsclaus:1306561101:2011-05-28T13:38:21.478+0000:1306561101:2011-05-28T13:38:21.478+0000:Brett that is really great. I would love to see a camel-twitter in the Camel distro soon.

And the JARs are now in central maven repo, and they are Apache licensed.
http://repo2.maven.org/maven2/org/twitter4j/

So we should be able to include it at Apache out of the box.

bmeyer2:1306563879:2011-05-28T14:24:39.987+0000:1306563879:2011-05-28T14:24:39.987+0000:Fantastic news!  Is there any way to setup the Apache repository now, or should we continue to develop in GitHub and move it over later?
davsclaus:1306564158:2011-05-28T14:29:18.738+0000:1306564158:2011-05-28T14:29:18.738+0000:Brett I suggest to continue at github, as its easy for you both to work together.

So when you fell the component is ready to be donated to Apache. Then come back at this JIRA and we can take it from there.

You may want to read this guide about how to write a component, as it have some good pointers
http://camel.apache.org/add-new-component-guide.html
bmeyer2:1306564261:2011-05-28T14:31:01.744+0000:1306564261:2011-05-28T14:31:01.744+0000:Thanks Claus -- will do!
bmeyer2:1311574602:2011-07-25T14:16:42.560+0000:1311574602:2011-07-25T14:16:42.560+0000:FYI, development has progressed significantly.  I hope to be able to release a beta version within a few weeks.
njiang:1319521299:2011-10-25T13:41:39.197+0000:1319521299:2011-10-25T13:41:39.197+0000:@Brett,
I'm interesting this twitter component, it could be great if we can put it into apache camel.
mebevilacqua:1320307832:2011-11-03T16:10:32.765+0000:1320307832:2011-11-03T16:10:32.765+0000:@Brett
I second Willem's comment!
bmeyer2:1320308288:2011-11-03T16:18:08.358+0000:1320308288:2011-11-03T16:18:08.358+0000:All,

We're definitely still working with it, but had to have a bit of a hiatus due to career changes.  We'll keep you updated!
hadrian:1320313532:2011-11-03T17:45:32.037+0000:1320313532:2011-11-03T17:45:32.037+0000:Actually there is quite a lot one could do with twitter with camel as it is today. I have some code almost done. I'll post it next week.
bmeyer2:1323436010:2011-12-09T21:06:50.636+0000:1323436010:2011-12-09T21:06:50.636+0000:All,

The code has progressed significantly.  I hope to release something within a few weeks.  The plugin will be very comprehensive and exhaustive of most Twitter functionality.
njiang:1325638832:2012-01-04T09:00:32.427+0000:1325638832:2012-01-04T09:00:32.427+0000:@Brett
I checked out the camel-twitter component from the github  https://github.com/brunoborges/camel-twitter. I'm already fixed some formate issues of the camel-twitter component, it should be ready to be committed into the camel trunk.
I'm not sure if you have any other update of the component, if there is nothing new, I will commit the code shortly.

Please let me what's your status.

Willem
bmeyer2:1325661902:2012-01-04T15:25:02.569+0000:1325661902:2012-01-04T15:25:02.569+0000:Willem,

Here's a few caveats:

1.) I need to finish exhaustive testing.  I'll complete this tonight.
2.) The plugin encapsulates about 30% of the Twitter API, but most of the ""core"" areas are ready.  I'm continuing to add new capabilities.
3.) For the completed capabilities, they're all based on scheduled polling.  I still need to finish direct route versions that will allow single-use, ""get everything"" functionality.
4.) I need to put together some documentation on the endpoint URI usage.

It's entirely your call as to when it should be committed to the trunk.  If you'd like to proceed now, I'm more than happy to release the new work as patches throughout the next few weeks.
bmeyer2:1325712448:2012-01-05T05:27:28.777+0000:1325712448:2012-01-05T05:27:28.777+0000:Willem,

I was able to complete the code tonight.  All of the ""most useful"" aspects of the Twitter API are included in our component.  Both scheduled polling and direct routes are available for each.

What do you need from us to proceed?

There's certainly other areas of the API that I plan to include, but I can release those as patches later on.
bmeyer2:1325713890:2012-01-05T05:51:30.159+0000:1325713890:2012-01-05T05:51:30.159+0000:Sorry guys, one more question.  The unit tests rely on hard-coded tokens specific to a Twitter account.  If the account's password is changed, the unit tests will fail.  How should this be handled long-term in the trunk?
njiang:1325717237:2012-01-05T06:47:17.679+0000:1325717237:2012-01-05T06:47:17.679+0000:As the unit tests have the dependency of outside service, we normally don't run these tests in the CI box. I think we need to write an instruction to tell the user how to change the user and password configure when he wants to run the tests manually.
 
njiang:1325717831:2012-01-05T06:57:11.659+0000:1325717831:2012-01-05T06:57:11.659+0000:@Brett,

I'm planing to commit the code which I finished today, you can send me the new patches and I will merge them into the trunk.

We could keep on enhancing the code in the trunk :)

Willem 
bmeyer2:1325718276:2012-01-05T07:04:36.065+0000:1325718276:2012-01-05T07:04:36.065+0000:Willem,

Tonight's changes were pretty substantial, so merging might be a pain.  I apologize for continuing in github -- I misread your comment from earlier and didn't realize you were already working on it in the trunk.

Is it possible to use the current component in github as the starting point?
njiang:1325719003:2012-01-05T07:16:43.039+0000:1325719003:2012-01-05T07:16:43.039+0000:Just one comment for the unit test of Twitter4JTest, I think it is just a simple test of Twitter4J and have nothing to do with the camel-twitter component. I will remove it from the camel-twitter unit test.
njiang:1325722265:2012-01-05T08:11:05.316+0000:1325722265:2012-01-05T08:11:05.316+0000:@Brett,
It's OK, I will pull your change from the github.
Once we put the code into trunk, we need to do the work which is based on apache trunk :).
njiang:1325731015:2012-01-05T10:36:55.953+0000:1325731015:2012-01-05T10:36:55.953+0000:@Brett,
I just committed the camel-twitter component which is based on the last version of github.
Here are the changes those I made:
1. Reformatted the code, fixed some CS issues, remove the @author as we don't use it in camel
2. Removed the MockProducer, TwitterUpdateStatusTest
3. Added profile to run the twitter unit test, we don't run the twitter tests by default
4. Changed the common log to slf4j which is used in camel by default
5. Changed some info log to debug  
bvahdat:1325739432:2012-01-05T12:57:12.184+0000:1325739432:2012-01-05T12:57:12.184+0000:@Willem,

could you please update the svn:ignore accordingly, see the attached screenshot for details.
bmeyer2:1325744008:2012-01-05T14:13:28.220+0000:1325744008:2012-01-05T14:13:28.220+0000:Willem, thank you!  I appreciate the help.

Is there anything I need to do to add it to Camel's components and features?

I'll work on a wiki page tonight.  Feel free to close this ticket.  I'll open new ones with patches in the future.  Thanks again.
bmeyer2:1325771130:2012-01-05T21:45:30.856+0000:1325771130:2012-01-05T21:45:30.856+0000:@Willem

Please see Babak's comment before this ticket is resolved.

Also, do you need anything else from me to finish up the initial release?  Do I need to do anything to OSGi-ready the component or create its feature?  Or, did you guys already handle that?

Thanks!
njiang:1325804762:2012-01-06T07:06:02.863+0000:1325804762:2012-01-06T07:06:02.863+0000:I update the svn:ignore property of the camel-twitter. I should be OK now.
@Brett,
Please update the wiki page if you have time, I will take care of camel-twitter feature.
It looks like we need wrap the twitter jars in the servicemix as they are not osgi ready.
davsclaus:1325805919:2012-01-06T07:25:19.829+0000:1325805919:2012-01-06T07:25:19.829+0000:I polished the code a bit.

There is a number of TODO in the source which needs to be looked at.
Also instead of custom initialize method, use the doStart / doStop methods from Camel to do init / cleanup logic.
bmeyer2:1325826966:2012-01-06T13:16:06.869+0000:1325826966:2012-01-06T13:16:06.869+0000:@Willem

I'll work on the wiki ASAP.  SMX4-1032 updated org.apache.servicemix.bundles.twitter4j to the newest Twitter4J jars.  camel-twitter dependencies and features should probably be updated to use them.

@Claus,

Thanks for working with it!  There's definitely a few TODOs that I'll keep working with.
bmeyer2:1325883773:2012-01-07T05:02:53.824+0000:1325883773:2012-01-07T05:02:53.824+0000:I'm resolving this ticket.  I see that twitter4j-bundle-version 2.2.5_1-SNAPSHOT was added to the features.  The component should be all set.  I'll release TODO fixes, new features, etc. under new tickets.

Thanks for the help Willem and Claus!"
0,CAMEL-4016,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-05-26 13:02:18+00:00,2011-05-27 00:48:33+00:00,"Because the attachements objects can be read from the response message body in POJO data format, we should not store the attachments into the out message. When the camel route keep routing the response message to the camel-cxf consumer, we will face an issue that the attachements will be sent twice, if we store the attachements into the out message.",
0,CAMEL-4015,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,James Carman,Romain Manni-Bucau,0,3,2011-05-26 08:41:44+00:00,2013-10-10 06:32:07+00:00,"It could be nice to be able to specify type operation (and maybe the key for map) in the uri instead of headers:


from(""hazelcast:map:foo?operation=get&id=myStringId"").to(""log:display"");","clausstraube:1306372704:2011-05-26T09:18:24.494+0000:1306372704:2011-05-26T09:18:24.494+0000:I'm pretty sure it'll no good idea to add the id (key) to the url, because this value changes at every call. Other the operation. The reason why we've choosen to set the operation into the header is the greater flexibility. Only if the operation is a header variable you can change it on runtime. So you can do something like this:

// keys are missing here
from(""direct:insert"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.PUT_OPERATION)).to(""seda:x"");
from(""direct:get"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.GET_OPERATION)).inOut(""seda:x"");
from(""direct:delete"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.DELETE_OPERATION)).to(""seda:x"");

from(""seda:x"").toF(""hazelcast:%sfoo"", HazelcastConstants.MAP_PREFIX);


romain.manni-bucau:1306374909:2011-05-26T09:55:09.978+0000:1306374909:2011-05-26T09:55:09.978+0000:i don't understand your example you separated the operations so you could set it in the uri. I know it is nice to override it using headers and it can be useful f course but or me it si not the default case.

For the id i'm agree excepted it is possible to pre-load things and have constant ids (string often).

So i still think this issue should be solved.
clausstraube:1306376998:2011-05-26T10:29:58.254+0000:1306378403:2011-05-26T10:53:23.787+0000:I don't agree with ""to be able to specify type operation in the uri INSTEAD of headers"". What is the reason that you want to remove the option to have the flexibility to change to operation on runtime? With the header you can overwrite the operation or not. As you want. One solution would be to have both - header plus uri parameter. And the header is overwriting the default behavior defined inside the uri. I'm not sure if it's worth the effort. One nice side effect with the header solution is, that you have only one endpoint instance in the sample above and even in the more ""classical"" sample below. Instead of 3 if you have defined the uri as parameter.

{code:java}
...
// keys are missing here
from(""direct:insert"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.PUT_OPERATION)).toF(""hazelcast:%sfoo"", HazelcastConstants.MAP_PREFIX);
from(""direct:get"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.GET_OPERATION)).toF(""hazelcast:%sfoo"", HazelcastConstants.MAP_PREFIX);
from(""direct:delete"").setHeader(HazelcastConstants.OPERATION, constant(HazelcastConstants.DELETE_OPERATION)).toF(""hazelcast:%sfoo"", HazelcastConstants.MAP_PREFIX);
...
{code}

""...excepted it is possible to pre-load things and have constant ids (string often)."" This is for me not the default case. This means you have one route per item in your map. If I would have only two items to preload, I would use a generic pattern than hard coding the route for each item. So I still see no case to have the key inside the uri.  

romain.manni-bucau:1306379174:2011-05-26T11:06:14.325+0000:1306379174:2011-05-26T11:06:14.325+0000:I don't want to remove the header configuration, it is pretty nice but i want to be able to do it with uri (as almost all camel components). However i find it simpler to configure the operation in the uri and it is more ""sexy"" and consitent with camel IMHO.

For the id i don't say it is necessary but it is more consistent and imagine you load almost constants datas (currencies for example), you know the id and you can hard code (almost ;)) it in your route.


rkettelerij:1307248447:2011-06-05T12:34:07.656+0000:1307250209:2011-06-05T13:03:29.880+0000:I think we're all on the same page here. Header-based configuration as currently available is nice, but supporting both headers and URI parameters would be even better. Most importantly because it's inline with other components offered by Camel.

When one knows upfront what operation/id is required (as in Romain's use case) then it's more convenient to specify this through a parameter in the URI. A header on the other hand is more suitable when the operation/id is determined dynamically by another component in the route (e.g. a custom processor or as part of a web service request). In this case the header will override the URI parameter if present.

Feel free to provide a patch if you wish to see this implemented.
jwcarman:1380344894:2013-09-28T13:08:14.106+0000:1380344894:2013-09-28T13:08:14.106+0000:I'm implementing this now.
jwcarman:1380350379:2013-09-28T14:39:39.650+0000:1380350379:2013-09-28T14:39:39.650+0000:This patch implements the feature as I understand the request.
romain.manni-bucau:1380356199:2013-09-28T16:16:39.155+0000:1380356199:2013-09-28T16:16:39.155+0000:Yes the patch matches the need. Thks
jwcarman:1380356359:2013-09-28T16:19:19.938+0000:1380356359:2013-09-28T16:19:19.938+0000:Romain, it actually allows you to either use the ""name"" of the operation or the number, so that you can use the constants when constructing your URI.  The unit tests exhibit that behavior.  Enjoy!
davsclaus:1380422441:2013-09-29T10:40:41.021+0000:1380422441:2013-09-29T10:40:41.021+0000:Can you try working on a patch without a static instance that holds any kind of state
 public static final HazelcastComponentHelper INSTANCE = new HazelcastComponentHelper();

As that does not go well in dynamic environments like OSGi. Static instances is an anti-pattern which you should avoid.

jwcarman:1380426467:2013-09-29T11:47:47.933+0000:1380426467:2013-09-29T11:47:47.933+0000:Sure, Claus.  Can you just apply this patch file over top of the other one?  That should do it.
jwcarman:1380427626:2013-09-29T12:07:06.505+0000:1380427626:2013-09-29T12:07:06.505+0000:Sorry about the first patch.  Forgot that we're normally in OSGi-land.  Turns out it's only used in one place anyway, so the INSTANCE wasn't really necessary.
davsclaus:1380588299:2013-10-01T08:44:59.302+0000:1380588299:2013-10-01T08:44:59.302+0000:James do you mind reattaching a single patch that is up to date with master, as the code has changed since.
jwcarman:1380604392:2013-10-01T13:13:12.467+0000:1380604392:2013-10-01T13:13:12.467+0000:Claus, try this patch instead.  You'll need the original patch I attached and this one, I believe.
jwcarman:1381344578:2013-10-10T02:49:38.551+0000:1381344578:2013-10-10T02:49:38.551+0000:Romain, please let us know if this addresses your need.  Great suggestion!  I would also like to see the capability to specify the operation in the URI:

""hazelcast:queue:foo:put""


romain.manni-bucau:1381357927:2013-10-10T06:32:07.979+0000:1381357927:2013-10-10T06:32:07.979+0000:@James: it works for me. Note for the operation and other configs (even the Id!) i proposed to set them optionally as query param instead of inlined. The id is to follow the format <location>?<config>."
0,CAMEL-3984,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-17 18:38:31+00:00,2011-05-18 09:41:54+00:00,"We should try to remove some of the most least used fluent builders with ExpressionClause as they cause the route model to be a bit more complicated to setup correctly with the expressions. It uses a delegate under the hood, which needs to be replaced with the actual expression in the model. Otherwise the XML output and whatnot are not accurate. 


Instead they will show a <expressionDefinition> where the actual expression ought to be.",davsclaus:1305682914:2011-05-18T09:41:54.365+0000:1305682914:2011-05-18T09:41:54.365+0000:Also updated release notes which a list of methods removed from API
0,CAMEL-3983,New Feature,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Straube,0,0,2011-05-17 14:30:34+00:00,2011-06-09 04:22:02+00:00,The current implementation looses headers that are given to a 'hazelcast:seda:foo' route and is has problems serializing complex objects inside body that are not serializable.,"clausstraube:1305613961:2011-05-17T14:32:41.704+0000:1305614003:2011-05-17T14:33:23.365+0000:Solved the problem by storing body and headers in a 'lightweight' message object, which is serialized with xstream (producer). On consumer side the message will be deserialized and headers / body will be stored in the exchange. 
davsclaus:1305759871:2011-05-19T07:04:31.295+0000:1305759871:2011-05-19T07:04:31.295+0000:I dont see we should couple hazlecast with a fixed serialization framework/protocol. End users should be able to pick and chose what they want to use. Some may want xstream, jaxb, others json, google protobuf, just serialized objects etc.
clausstraube:1305771189:2011-05-19T10:13:09.351+0000:1305771189:2011-05-19T10:13:09.351+0000:Claus, you're absolutely right if we talk about the body. Everybody is free to choose one of the marshalers inside his routes. This alone would be no issue at all. But we have to serialize the headers, too. I would await if I put any object into my header and throw the message into the queue, that the object is still in the header as I stored it there - without any effort. The serialization part is absolute transparent for the user. He put's in a not serializable Foo object and gets that back (not the same instance, but the same object with equal values). So a serialization framework like Jaxb, protobuf or jackson, where you have to define the class you want to serialize explicitly is an overhead with no win in my eyes. I've choosen xstream because it's already used in Camel and because it can serialize / deserialize any object without extra effort - just for transportation...    
clausstraube:1306218420:2011-05-24T14:27:00.823+0000:1306218420:2011-05-24T14:27:00.823+0000:I've implemented a serialization check. So if a user stores only objects in body and headers that are ALL serializable, these objects will be send over hazelcast as they are (so the user is absolutely free to choose the serialization implementation he wants). If there is at least one object inside body or headers that is not serializable, the whole message will be serialized just for transportation (Hazelcast can't transport objects that are not serializable). Then on consumer side the message will be deserialized. The whole serialization / deserialization process is transparent for the user. For serialization xstream is used because of its generic usage. 
clausstraube:1306387921:2011-05-26T13:32:01.962+0000:1306387921:2011-05-26T13:32:01.962+0000:Claus, one additional thought. We can replace the xstream library through java.beans.XMLEncoder / java.beans.XMLDecoder. Then we have no dependency to an external (not JRE) serialization framework. What do you think? 
davsclaus:1306561522:2011-05-28T13:45:22.079+0000:1306561522:2011-05-28T13:45:22.079+0000:The component should *not* require any 3rd party serialization framework, or the likes. You do not know who is the receiver on the other end. Now they suddenly get headers in XML format.

Instead end users can/must make sure to provide compliant data in the messages they send to it.

It is however okay to add check for headers is serializable or not, and then either
- throw an exception failing
- or log a warning.
And then maybe add an option so people can decide if they want to throw the exception or log (and at which level, eg WARN -> DEBUG) etc.

You can also consider adding some SPI to this component. So end users can provide custom plugins to control the marshalling / unmarshalling.

Then in your custom apps you can use the xstream if you like.
clausstraube:1306722472:2011-05-30T10:27:52.837+0000:1306722472:2011-05-30T10:27:52.837+0000:Okay - that makes sense. So I will throw an exception is the message (body or at least one header) is not serializable and no SPI implementation for a serializer has been provided. Is there a common way to pass such a SPI implementation to the component. My first thought was to pass it via URI properties... 
clausstraube:1306742174:2011-05-30T15:56:14.119+0000:1306742174:2011-05-30T15:56:14.119+0000:Implementation with serialization check and SPI for message serialization.
omicron:1306743264:2011-05-30T16:14:24.485+0000:1306743264:2011-05-30T16:14:24.485+0000:Indeed the current implementation of Hazelcast SEDA component transfers only the body of the exchange.

To my humble opinion  it might be better to make use of the *DefaultExchangeHolder* in order to send the whole exchange as a serialized object.

more on *DefaultExchangeHolder* can be found on *http://camel.apache.org/maven/camel-2.7.0/camel-core/apidocs/org/apache/camel/impl/DefaultExchangeHolder.html*

I will prepare a proof-of-concept patch for your consideration later today... 
clausstraube:1306744406:2011-05-30T16:33:26.254+0000:1306744406:2011-05-30T16:33:26.254+0000:Hi Ioannis. With DefaultExchangeHolder every Object that is not serializable will be skipped. I don't know, if we want this. The current patch (version 3), offers the possibility to add a serializer implementation as option. So the user has the choice to transport only serializable Objects, or provide a implementation that can serialize Objects that don't implement serialzable (e.g. xStreams).  
davsclaus:1306745148:2011-05-30T16:45:48.986+0000:1306745148:2011-05-30T16:45:48.986+0000:I actually think this is going down the wrong path with adding too much cruft to components. If people have objects in their headers and they are not serializable then they should not magically be marshalled to something XML when sending over the wire.

If people wanna exchange data then they can make sure their objects is serializable or in some format thats serialized out of the box: xml, json.

There are many other remoting components in Camel that does not do this. So why should this component?

So before we go commit code. I think we need a sound use-case where this make sense.

clausstraube:1306746849:2011-05-30T17:14:09.684+0000:1306746849:2011-05-30T17:14:09.684+0000:Claus, the current patch offers no more internal magic ;) But... My use case is, that I need not only the message body, but the headers, too. That's it. While implementing it, I thought that serialization support out of the box would be nice. But I agree, that it must not be part of the component. And I think it was a bad idea to mix up two subjects in one ticket ;) The message header is the really important thing for me. 

I think the cleanest solution is the one closest to the common way of implementing Camel remoting components. In the big picture of Camel the DefaultExchangeHolder behavior is perhaps exactly what we want. It's not a big deal to add it. The really major issue is the message header.     

   
omicron:1306748311:2011-05-30T17:38:31.331+0000:1306748311:2011-05-30T17:38:31.331+0000: @Claus.S your solution is very nice and elegant, however I agree with @Claus.I that it would not be a good idea to take a different path that the rest of the remoting components and magically marshal objects that are not serializable.

  From a quick grep in the components source base I saw that *DefaultExchangeHolder* is widely used from several components e.g mina, jms ,  netty and others, and I believe it would be good solution.

 I attach here a patch with a POC test case for your consideration.
clausstraube:1306802692:2011-05-31T08:44:52.528+0000:1306802692:2011-05-31T08:44:52.528+0000:Thank you Ioannis. I think it does exactly what it has to do. Sending a message incl. headers over the wire. No more extra magic ;)
davsclaus:1306808095:2011-05-31T10:14:55.943+0000:1306808095:2011-05-31T10:14:55.943+0000:There should be an option to select this like the others: transferExchange and it should be false by default.
Also any patches attached to JIRA should have [x] in grant license to Apache before it can be accepted / used.
clausstraube:1306808390:2011-05-31T10:19:50.512+0000:1306808390:2011-05-31T10:19:50.512+0000:Okay. I will implement this and provide a patch. 
clausstraube:1306814415:2011-05-31T12:00:15.492+0000:1306814415:2011-05-31T12:00:15.492+0000:Functionality of this patch:

- send serialized body and header (default behavior). If body or a header is not serializable they will be skipped and a warning will be logged (same behavior as with DefaultExchangeHolder).
- send complete exchange with DefaultExchangeHolder (option transferExchange=true)
omicron:1306818513:2011-05-31T13:08:33.650+0000:1306818513:2011-05-31T13:08:33.650+0000: Hi Claus.S , 

 I saw in your last patch that you introduce a new object called _HazelcastMessage_ that wraps the body and header of the exchange and send both of them through the wire. To my understanding this is the purpose of _DefaultExchangeHolder_ object (plus additional info of the exchange like fault headers etc) . 

 Is there any specific reason used a second object to wrap headers and body ?

 Also  according to the documentation in http://camel.apache.org/maven/camel-2.7.0/camel-core/apidocs/org/apache/camel/impl/DefaultExchangeHolder.html , either the whole exchange should be transferred (transferExchange=true) or just the body of the message (normal usage).
 
 Please excuse me if my understanding is not correct, though I believe that it would be better to comply with this and in case of normal use (transferExchange=false) only the body should be send and no other information...
clausstraube:1306821088:2011-05-31T13:51:28.360+0000:1306821280:2011-05-31T13:54:40.486+0000:Ioannis, I think there is no 'normal usage'. I've taken the perhaps mostly used wire component (jms / activemq) and tested their behavior. If you're doing something like this (tested with 2.7.1):

{code}
...
from(""direct://in"")
.to(""activemq://foo"");
				
from(""activemq://foo"")
.to(""mock://out"");
...
{code}

You will get back message body + headers, but a different exchange id. If you change to ""activemq://foo?transferExchange=true"" you will get the same result but equal exchange ids. 

I copied this behavior for hazelcast:seda. That's it. If it's not the common behavior, we must change it (and create a ticket for the jms component ;) 

For Hazelcast you have to use a wrapper if you want to send body + headers... And if you don't want to use the DefaultExchangeHolder per default. 
davsclaus:1306825503:2011-05-31T15:05:03.977+0000:1306825503:2011-05-31T15:05:03.977+0000:It depends on the transport whether headers also take part.

For example JMS and HTTP will also transfer headers. Albeit with JMS there are some contraints on what a header can be (according to JMS spec).

For a file component, headers make no sense, and it will only store the message body when sending a message to a file endpoint.

omicron:1306840819:2011-05-31T19:20:19.191+0000:1306840819:2011-05-31T19:20:19.191+0000: I would agree with Claus.I. JMS is a different scenario than ours and would be reasonable to transfer specific headers in JMS due to the spec.

 Components like netty and mina that are closer to our case follow the aforementioned convention and transfer either the whole exchange or only the body (please refer to the payload helpers of the components for more info).

 I attach a new patch with the changes discussed earlier for your consideration.
clausstraube:1306878424:2011-06-01T05:47:04.533+0000:1306878424:2011-06-01T05:47:04.533+0000:Ioannis, I think hazelcast:seda and JMS / SEDA are very close together. Both (JMS / SEDA) deliver headers. So why should hazelcast:seda transport no headers? We have no hazelcast:seda spec - so we are free to decide if we deliver them or not. I would await if I send a message with headers over some kind of queuing functionality (what jms and seda / hazelcast:seda are) that they will provided on consumer side, too. An other thing would be e.g. hazelcast:map. Here it doesn't make sense to store headers. 

Can you give a reason why not to send headers? 
clausstraube:1306881300:2011-06-01T06:35:00.586+0000:1306881300:2011-06-01T06:35:00.586+0000:One additional thought... I think we have to separate components for internal communication and external communication. Components for internal communication are seda, vm and so on. Components for external communication are file, mina, ftp, hazelcast:map... I think JMS can be used for both scenarios due to the spec. 

Now lets take a look on hazelcast. We have here a map, multimap, set, queue, topic, list implementation. If we look at the camel-hazelcast implementation we have implementations for map, multimap, queue, list and a thing called seda. So let's map it to internal / external communication. External communication means in this case, that a third party app gets the message (which can of course not handle any headers). If I would implement external communication with a hazelcast cluster I would use the components named equal to the hazelcast implementation. So I would *not* mix up hazelcast:seda and a queue consumer on the other side.

seda is in camel for internal communication and I think hazelcast:seda should behave like the in memory seda. If anyone want to communicate with a external hazelcast cluster, he's free to use hazelcast:queue (which transports only the body).   
omicron:1306884157:2011-06-01T07:22:37.374+0000:1306884331:2011-06-01T07:25:31.315+0000: To my humble opinion, I think that the component should follow what is described in the javadoc of the DefaultExchangeHolder, and make the transfer of header and other information optional. To be more specific by default to exchange only the body of the message and give the ability to exchange the whole exchange (with headers and other info) with the use of transferExchange=true option.

 The reason of this is mainly flexibility and compliance. To be more specific, if we make the exchange of headers the default case and mandatory with the use of DefaultExchangeHolder the whole route flow is tighten to camel. And in case we make it mandatory and default through the use of a custom component, the flow is tighten specifically to the camel-hazelcast component.
 
 In such cases we come to what Claus.I described earlier and any third party system that may want for example to participate to this flow e.g by using the queue or by registering any listeners to this queue it will have to  import and use of the camel libraries and be obligated to use either our custom wrapper or DefaultExchangeHolder.
 
 Also I believe that we should treat all the component uniformly as for external communication (in the same way we have worked with the other components) in order to ensure interoperability and compliance between the camel-hazelcast components. For example the case one wants to register a listener in the queue used from a SEDA component for statistics by using the hezelcast:queue component.

 


clausstraube:1306913524:2011-06-01T15:32:04.848+0000:1306913524:2011-06-01T15:32:04.848+0000:Ioannis, as I wrote before, I understand what the problem is. What I don't understand is, why we need a seda prefix, if we use it like a normal queue? All features of the seda implementation can be build into the queue implementation with three or four options (concurrentConsumers, pollIntervall, operation, transferExchange) - without having an obviously confusing name. And without much effort (like they did on JMS). I see hazelcast:seda in a line with seda and vm - the only difference is, that your not bound to camel context or a vm. That means for internal use inside a camel application. If you want to use it externally, take hazelcast:queue. And a seda queue is a very simple thing. There're not hundreds of applications grabbing for data (like this can be on hazelcast:map). There're two parties: a producer and a consumer. And yes, of course there can be one who registers a hazelcast:queue listener on the seda queue, but to my humble opinion - there better ways in camel *and* hazelcast to get this kind of information.

So finally: If we decide to act like a 'normal' queue, my question is why do we need something that's not named queue?     
omicron:1306929357:2011-06-01T19:55:57.791+0000:1306929357:2011-06-01T19:55:57.791+0000: The queue consumers register hazelcast listeners and are get notified upon events on the queue, such as addition of an item. In the scenario that we have 5 consumers listening on a queue with the use of a listener, upon addition of a new item all of them will be notified and react upon the very same event while the data will remain on the queue.

 On the other hand SEDA component implements a work queue and focus on distributing of tasks to different consumers. Unlike the case of queue consumers that make use of listeners, SEDA make use of the poll() method on the queue which means that will remove and return the head of the queue. Every item on the queue will retrieved by only one consumer and then it will be deleted.

 It works in the same way as the plain SEDA component but by using the hazelcast underneath, distribution can scale not only cross threads but it can scale cross different machines....
clausstraube:1306967472:2011-06-02T06:31:12.849+0000:1306967472:2011-06-02T06:31:12.849+0000:First SEDA (Staged Event Driven Architecture) is an architecture pattern. Which is something like a poor mans actor model where components within an application are loosely coupled over mailboxes. All you've described are not unusual use cases for a queue, they can be used to build a SEDA, but they can be used in other scenarios as well. So why shouldn't we port this functionality into hazelcast:queue?

""It works in the same way as the plain SEDA component but by using the hazelcast underneath, distribution can scale not only cross threads but it can scale cross different machines...."" - I wish it would (If it would, it makes sense to have a hazelcast:seda component)...

Camel seda:
{code}
...
template.sendBodyAndHeader(""seda:a"", ""foo"", ""my-header"", ""foo_"");
Exchange ex = consumer.receive(""seda:a"", 5000);
assertEquals(""foo_"", ex.getIn().getHeader(""my-header""));
...
{code}   

Hazelcast seda:
{code}
...
template.sendBodyAndHeader(""hazelcast:seda:a"", ""foo"", ""my-header"", ""foo_"");
Exchange ex = consumer.receive(""hazelcast:seda:a"", 5000);
assertEquals(""foo_"", ex.getIn().getHeader(""my-header""));
...
{code} 

The first one is green, the second one is read. It works *NOT* the same way. Sorry. 
omicron:1306973402:2011-06-02T08:10:02.556+0000:1306973402:2011-06-02T08:10:02.556+0000:
 Earlier I have not described the SEDA architecture but how the SEDA *component* works, and I have noted that works like a *work queue*.
 
 What I have stated as a difference is that in case someone use the hazelcast:queue, an event will broadcast to all consumers, while in the case of hazelcast:seda only to one.

 It is very reasonable that your example does not work because in the current implementation does not transfer headers, and this is what the patch SEDA-CAMEL-3983-2.patch provide. But even in the case you have used this code you have note used the ""transferExchange"" option. If you please refer to the test cases of patch for examples on usage...

  
clausstraube:1307054711:2011-06-03T06:45:11.673+0000:1307054711:2011-06-03T06:45:11.673+0000:Ioannis, I don't thing we're getting a result with discussion. Our both positions are clear (if I understood correctly):

You're saying, that seda is an internal component, but as it can reached simply from outside / other components, it's better send a body per default. If someone wants to send the headers, he has to set transferExchange to true. So the default behavior is not like the camel seda component, but like other components (mina, netty, etc.).

I'm saying, that seda is an internal component and should used internally in the same application (so the dependency to camel is not problem). If someone produces a message with hazelcast:seda and consumes it with something different he uses it not in a correct way. So it's okay, that he fails with the message headers. So the default behavior is like the camel seda component, but not like others (mina, netty, etc.). 

I think there're good reasons for both positions. There're patches for both positions and now one of Apache Camel committers has to decide which position fits best into the overall Camel strategy. We could discuss endless, but I don't think that we would get a consensus in this case ;)   


omicron:1307056050:2011-06-03T07:07:30.942+0000:1307056050:2011-06-03T07:07:30.942+0000: I agree, indeed this discussion may never end, and as both solutions exist in this thread,  camel committers can choose.

 My argument is on making transfer of headers etc mandatory. I work in a case that an external component works like an agent and register a listener to a queue used by SEDA component in order to gather statistics.

  I believe that this case even though is not so common would be of use by some users and would be not a good idea to tightly couple a queue with the camel-seda component and therefore leave this functionality optional.

 :D 

davsclaus:1307151135:2011-06-04T09:32:15.112+0000:1307151135:2011-06-04T09:32:15.112+0000:So whats the consensus on this? Do you guys need to do a tug-o-war to find the ""winner"" :)


clausstraube:1307230857:2011-06-05T07:40:57.532+0000:1307230857:2011-06-05T07:40:57.532+0000:Unfortunately there is no winner ;) Perhaps a tug-o-war would be a solution - Ioannis do you whant to come to munich? ;) But I can live with both solutions (of course with mine, but with Ioannis, too). 

So you Claus can decide what fits better in the overall Camel strategy, or simply take SEDA-CAMEL-3983-2.patch 
davsclaus:1307242704:2011-06-05T10:58:24.804+0000:1307242704:2011-06-05T10:58:24.804+0000:Okay I have applied the -2 patch in trunk. Could the wiki page be updated with this new option?
clausstraube:1307309514:2011-06-06T05:31:54.679+0000:1307309514:2011-06-06T05:31:54.679+0000:Thank you. Yes I'll do this today
davsclaus:1307564329:2011-06-09T04:18:49.790+0000:1307564329:2011-06-09T04:18:49.790+0000:Claus did you update the wiki page?
clausstraube:1307564448:2011-06-09T04:20:48.616+0000:1307564448:2011-06-09T04:20:48.616+0000:Yes, I added a table with the ""transferExchange"" option to hazelcast:seda.
davsclaus:1307564522:2011-06-09T04:22:02.982+0000:1307564522:2011-06-09T04:22:02.982+0000:Thanks"
0,CAMEL-3982,Improvement,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Straube,0,0,2011-05-17 13:39:21+00:00,2011-05-19 07:02:35+00:00,Updated Hazelcast to version 1.9.3. This offers some major bugfixes in Hazelcast and new functionality in the camel camponent (e.g. list inserting by index).,davsclaus:1305759755:2011-05-19T07:02:35.067+0000:1305759755:2011-05-19T07:02:35.067+0000:Thanks for the patch.
0,CAMEL-3981,Task,Major,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Martin Krasser,Martin Krasser,0,0,2011-05-17 11:51:50+00:00,2011-06-03 03:53:33+00:00,"Fixes http://jira.codehaus.org/browse/JETTY-1245, for example.


Local camel-jetty and camel-cxf tests pass but I'd like to have opinions from other committers too (not sure how this affects Servicemix - looking at CAMEL-3784). 


Thoughts?","njiang:1305613560:2011-05-17T14:26:00.732+0000:1305613560:2011-05-17T14:26:00.732+0000:Hi Martin,
As apache-camel feature is using the karaf jetty feature. If we want to upgrade the Jetty version in camel, the first thing is upgrade the Jetty version in Karaf.
Apache Karaf 2.2.1 was released few days ago, maybe it will take some time for the next release.

mrt1nz:1305614071:2011-05-17T14:34:31.775+0000:1305614071:2011-05-17T14:34:31.775+0000:Hi Willem,

alright, I created a ticket there: https://issues.apache.org/jira/browse/KARAF-646. I have a workaround for the meantime. Any idea how many weeks is it to the next Karaf release?



jbonofre:1305685944:2011-05-18T10:32:24.288+0000:1305685944:2011-05-18T10:32:24.288+0000:Karaf trunk (3.0.0) and Karaf 2.2.2-SNAPSHOT now use Jetty 7.4.1.v20110513.

I'm gonna submit a patch to use Karaf 2.2.2-SNAPSHOT in Camel 2.8-SNAPSHOT.
njiang:1305766391:2011-05-19T08:53:11.508+0000:1305766391:2011-05-19T08:53:11.508+0000:@Martin,
It may take one or two month, if the Karaf developer feel OK, they will release the new version :)


mrt1nz:1305785857:2011-05-19T14:17:37.660+0000:1305785857:2011-05-19T14:17:37.660+0000:@JB: Thanks a lot!
mrt1nz:1305786403:2011-05-19T14:26:43.561+0000:1305786403:2011-05-19T14:26:43.561+0000:See also https://issues.apache.org/jira/browse/KARAF-646?focusedCommentId=13036216&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13036216
njiang:1307044402:2011-06-03T03:53:22.004+0000:1307044402:2011-06-03T03:53:22.004+0000:As apache-camel feature is not relay on specific version of karaf, now we are safe to upgrade the Jetty version.
I just committed the patch into the trunk."
0,CAMEL-3980,Improvement,Major,2.6.0,2.8.0,"

logging
security

",Resolved,Fixed,2.8.0,Claus Ibsen,Ales Dolecek,0,2,2011-05-17 10:16:25+00:00,2014-08-11 08:36:47+00:00,"The exception thrown by RemoteFilePollingConsumerPollStrategy shows URI and shows password in plaintext. Since we report ERROR and WARN messages from logs to external destinations (SNMP and mail) the password leaves the system and we are loosing control over its spread across enterprise. I decided to mark this as major issue since it is security related. I have found other issue #CAMEL-3099 related to cleartext passwords in log files. It is closed however - don't know if I should try to reopen it.


Here is sample log (the username and password parameters were altered):



2011-05-16 22:35:07,210 WARN  [FtpConsumer] File operation failed:  Software caused connection abort: socket write error. Code: 250
2011-05-16 22:35:07,210 WARN  [RemoteFilePollingConsumerPollStrategy] Consumer Consumer[ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount] could not poll endpoint: ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount caused by: File operation failed:  Software caused connection abort: recv failed. Code: 250
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Software caused connection abort: recv failed. Code: 250
	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:548)
	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:43)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source) Caused by: java.net.SocketException: Software caused connection abort: recv failed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(Unknown Source)
	at sun.nio.cs.StreamDecoder.readBytes(Unknown Source)
	at sun.nio.cs.StreamDecoder.implRead(Unknown Source)
	at sun.nio.cs.StreamDecoder.read(Unknown Source)
	at java.io.InputStreamReader.read(Unknown Source)
	at java.io.BufferedReader.fill(Unknown Source)
	at java.io.BufferedReader.readLine(Unknown Source)
	at java.io.BufferedReader.readLine(Unknown Source)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:490)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:583)
	at org.apache.commons.net.ftp.FTP.pwd(FTP.java:1270)
	at org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:1800)
	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:546)
	... 12 more




Ales","taariql:1305636258:2011-05-17T20:44:18.069+0000:1305636258:2011-05-17T20:44:18.069+0000:The patch sanitizes the URL for RemoteFileProducer and FtpConsumer, and also logs the endpoint's toString instead of the endpoint URI so that is sanitized too.

No additional tests were added, DefaultEndpointTest already tests the sanitizing and FromFtpSimulateNetworkIssueRecoverTest.testFtpRecover logs will show that the problem is solved for ftp.

If there are others I'm unaware of please let me know.
hadrian:1305649985:2011-05-18T00:33:05.559+0000:1305649985:2011-05-18T00:33:05.559+0000:Taariq, is it possible to put together a quick unit test for this? Thanks for the contribution!
taariql:1305671597:2011-05-18T06:33:17.675+0000:1305671597:2011-05-18T06:33:17.675+0000:Sure Hadrian, new patch includes unit tests as well as previous changes.
davsclaus:1305682961:2011-05-18T09:42:41.471+0000:1305682961:2011-05-18T09:42:41.471+0000:We should move the DefaultEndpoint.sanitizeUri method to an util class so we can better reuse it
taariql:1305687995:2011-05-18T11:06:35.963+0000:1305687995:2011-05-18T11:06:35.963+0000:Agreed Claus, explains why I felt dirty afterwards.
I'll update the patch this evening.
taariql:1305705789:2011-05-18T16:03:09.729+0000:1305705789:2011-05-18T16:03:09.729+0000:Refactored to UriUtils
taariql:1305706003:2011-05-18T16:06:43.650+0000:1305706003:2011-05-18T16:06:43.650+0000:Last patch had some sys outs.
davsclaus:1305761352:2011-05-19T07:29:12.771+0000:1305761352:2011-05-19T07:29:12.771+0000:Thanks for the patch.

We should probably consider adding a getSantiziedEndpointUri to Endpoint.
And possibly have its toString return the santizied uri as well.

ishara2015:1407451629:2014-08-08T06:47:09.361+0000:1407451629:2014-08-08T06:47:09.361+0000:This issue is still there in camel 2.13.1
Has the fix been done in 2.13.1 or ?
njiang:1407717407:2014-08-11T08:36:47.281+0000:1407717407:2014-08-11T08:36:47.281+0000:Can you submit a test case to reproduce the error?
I just checked the change log, it looks like we need to update all the components which could throw the exception with the plaintext password."
0,CAMEL-3979,Bug,Minor,2.7.1,"2.7.2, 2.8.0","
None
",Closed,Fixed,"2.7.2, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-05-17 08:58:54+00:00,2011-10-25 11:35:56+00:00,"See nabble
http://camel.465427.n5.nabble.com/Correct-way-to-handle-transactions-acroos-multiple-routes-joined-with-ActiveMQ-tp4402998p4402998.html",
0,CAMEL-3978,Task,Minor,2.7.1,None,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-05-16 21:02:47+00:00,2011-05-16 21:04:18+00:00,While we're at it...,hadrian:1305551058:2011-05-16T21:04:18.739+0000:1305551058:2011-05-16T21:04:18.739+0000:Fixed in r1103890.
0,CAMEL-3977,Test,Minor,2.7.0,None,"
None
",Resolved,Cannot Reproduce,Future,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-05-16 20:29:51+00:00,2016-05-01 10:41:21+00:00,"Tests for the DnsIpEndpoint and DnsLookupEndpoint consistently fail on my OS X box (but they don't on Linux or Win).



Caused by: java.net.UnknownHostException: unknown host
        at org.xbill.DNS.Address.lookupHostName(Address.java:239)
        at org.xbill.DNS.Address.getByName(Address.java:264)




The cause seems to be related to Lookup receiving a response of type == DELEGATION, which causes the exception above and may be related to the router's NAT. Using different NS server configuration didn't help.


For the DnsIpEndpoint, changing from org.xbill.DNS.Address.getByName() to java.net.InetAddress.getByName() solves the problem, I am looking for a solution for the Lookup endpoint too.","hadrian:1305549194:2011-05-16T20:33:14.747+0000:1305549194:2011-05-16T20:33:14.747+0000:Forgot to mention that the other endpoints use the SimpleResolver (vs the ExtendedResolver) and that works fine.
hadrian:1305550471:2011-05-16T20:54:31.450+0000:1305550471:2011-05-16T20:54:31.450+0000:Changes in r1103887 fix the problem. I had to disable a couple of tests, so need to get back and investigate a bit more. Running nslookup works fine, it would be good to see what wireshark has to say about the differences in packets. "
0,CAMEL-3976,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Not A Problem,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-16 11:20:45+00:00,2011-05-17 07:17:33+00:00,The restlet consumer should by default set a status=200 in case there has not been set any status. And the exchange was processed succesfully. Currently it doesnt and there is some WARN log about you ought to set a status.,"fribeiro:1305552794:2011-05-16T21:33:14.743+0000:1305552794:2011-05-16T21:33:14.743+0000:Attached the patch for revision.
davsclaus:1305587853:2011-05-17T07:17:33.910+0000:1305587853:2011-05-17T07:17:33.910+0000:There was no problem. Its 200 by default."
0,CAMEL-3975,Improvement,Minor,2.7.1,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Christian Müller,0,0,2011-05-14 09:14:15+00:00,2011-05-15 14:55:18+00:00,See Nabble for details.,"muellerc:1305440547:2011-05-15T14:22:27.032+0000:1305440547:2011-05-15T14:22:27.032+0000:Committed r1103388
muellerc:1305442496:2011-05-15T14:54:56.776+0000:1305442496:2011-05-15T14:54:56.776+0000:Updated the pages:
- https://cwiki.apache.org/confluence/display/CAMEL/SQL+Component
- https://cwiki.apache.org/confluence/display/CAMEL/JPA
- https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.8.0+Release"
0,CAMEL-3974,Bug,Major,2.7.1,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Richard Kettelerij,Richard Kettelerij,0,1,2011-05-13 21:53:06+00:00,2011-10-25 11:35:23+00:00,"The Spring-WS producer only sets the body of the exchange, headers aren't propagated.


See Nabble: http://camel.465427.n5.nabble.com/spring-ws-component-not-propagating-in-headers-to-out-message-td4393731.html","schmug:1305530223:2011-05-16T15:17:03.341+0000:1305530223:2011-05-16T15:17:03.341+0000:simple patch to propagate in headers to out message. Unit test could perhaps be simplified.
davsclaus:1306475062:2011-05-27T13:44:22.834+0000:1306475062:2011-05-27T13:44:22.834+0000:Richard whats the status of this?

Getting bugs fixed is important so we have a path for doing a release.
rkettelerij:1306478817:2011-05-27T14:46:57.533+0000:1306478817:2011-05-27T14:46:57.533+0000:Claus, I'll pick it up this weekend. Had some trouble with my dev environment so I haven't committed a fix yet.
rkettelerij:1306678740:2011-05-29T22:19:00.565+0000:1306678740:2011-05-29T22:19:00.565+0000:trunk 1128970.

Thanks Doug for providing a patch, I've polished it a bit."
0,CAMEL-3973,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-13 10:39:32+00:00,2011-05-13 10:54:54+00:00,"Currently we only support sendBody / requestBody on ManagedCamelContext. We should add operations that includes a map of headers. Then we supports sending a message that has headers as well.


Also the existing operations should accept a java.lang.Object as body instead of a fixed String.",
0,CAMEL-3972,New Feature,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-13 10:28:45+00:00,2011-05-13 13:10:48+00:00,"Currently the browsable endpoint does a plain toString on the Exchange.


However we should add a 2nd operation that provides more metadata about the message, in a sort of generic XML representation.","davsclaus:1305253773:2011-05-13T10:29:33.042+0000:1305253783:2011-05-13T10:29:43.475+0000:Something along the lines of what you can do in a single scala line
{code}
 <message> {headers.map{h => <header type={h.typeName} name={h.name}>{text}</header>} <body type={b.typeName}>{b.text}</body>
{code}"
0,CAMEL-3971,Bug,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-13 10:18:11+00:00,2011-05-18 09:41:30+00:00,"See this unit test
ManagedCamelContextDumpRoutesAsXmlTest


The route in Java DSL



                from(""seda:bar"").routeId(""myOtherRoute"")
                    .filter().header(""bar"")
                        .to(""mock:bar"")
                    .end();




And the output in XML



  <route group=""org.apache.camel.management.ManagedCamelContextDumpRoutesAsXmlTest$1"" id=""myOtherRoute"">
        <from uri=""seda:bar""/>
        <filter id=""filter1"">
            <expressionDefinition/>
            <to uri=""mock:bar"" id=""to2""/>
        </filter>
    </route>




The same example created by Spring XML, outputs the XML correct",
0,CAMEL-3970,New Feature,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-13 08:14:41+00:00,2011-05-13 10:14:11+00:00,We should add operations to Camel JMX so you can dump the route in XML. This may help operations people to get a sort of visualization of the routes running.,davsclaus:1305252851:2011-05-13T10:14:11.245+0000:1305252851:2011-05-13T10:14:11.245+0000:There is operations to update/add routes from XML as well.
0,CAMEL-3969,Improvement,Major,2.7.1,2.8.0,"

docuentation
idempotent
jdbc

",Closed,Fixed,2.8.0,Christian Müller,Christoph Burmeister,0,0,2011-05-13 08:07:51+00:00,2011-06-26 18:22:39+00:00,"When running several camels with an idempotent repository (based on
jdbc to mysql) I haven't found any documentation for the table-definition or for changing parameters (like table-name).


Getting through the sources, I tried out following definition on mysql that works for me:


CREATE TABLE IF NOT EXISTS `camel_messageprocessed` (
 `messageId` varchar(255) NOT NULL,
 `processorName` varchar(255) NOT NULL,
 PRIMARY KEY (`messageId`)
)


Please check this back.","muellerc:1305289657:2011-05-13T20:27:37.476+0000:1305289657:2011-05-13T20:27:37.476+0000:Christoph, you are right. Thanks for reporting this.
I updated the wiki page. The size of the columns can be changed, if your content is larger.
julian.cable:1308927565:2011-06-24T22:59:25.846+0000:1308927565:2011-06-24T22:59:25.846+0000:Shouldn't the primary key be (processorName,messageId) ?

And the back-ticks are MySql specific - the SQL standard is double quotes.

Julian
muellerc:1309083759:2011-06-26T18:22:39.049+0000:1309083759:2011-06-26T18:22:39.049+0000:You can find the documentation [here|https://cwiki.apache.org/confluence/display/CAMEL/SQL+Component]."
0,CAMEL-3968,Improvement,Major,2.6.0,"2.8.1, 2.9.0","
None
",Resolved,Fixed,"2.8.1, 2.9.0",Willem Jiang,Claus Ibsen,2,3,2011-05-12 17:02:42+00:00,2011-09-01 11:35:11+00:00,"camel-soap is limited to only work with one parameter.
There is some code that throws an exception stating multiple parameters is not supported.


We should add support for that.


See nabble
http://camel.465427.n5.nabble.com/Multiple-parameters-in-CXF-service-method-tp4386208p4386208.html","davsclaus:1307685480:2011-06-10T13:58:00.275+0000:1307685480:2011-06-10T13:58:00.275+0000:This would be great, but not so easy to implement as you may think.
davsclaus:1309474147:2011-07-01T06:49:07.701+0000:1309474147:2011-07-01T06:49:07.701+0000:Rich Newcomb is working on this. So touch base with him if you want to help out with this.
rnewcomb:1311727060:2011-07-27T08:37:40.521+0000:1311727060:2011-07-27T08:37:40.521+0000:Patch attached. Comments to follow.
rnewcomb:1311728925:2011-07-27T09:08:45.206+0000:1311728925:2011-07-27T09:08:45.206+0000:The submitted patch allows for java-to-xml marshaling and unmarshaling of multi-part messages for web services that implement the JAX-WS Document Bare style.

The patch has the following features:

1. Adds support for marshaling of multi-part messages (java-to-soap). The service interface and parameters for multi-part messages are identified using a BeanInvocationMethod that mirrors the SEI.

2. Adds support for unmarshaling of multi-part messages (soap-to-java). The unmarshaled soap message header content from non-body parts is optionally propagated in a camel message header.

3. Includes marshaling support for data values stored in ""Holder"" objects that are used for OUT and IN-OUT parameter modes. (Note that the Holder data type is not used in the object set that results from unmarshaling.)

 
njiang:1311909839:2011-07-29T11:23:59.870+0000:1311909839:2011-07-29T11:23:59.870+0000:Applied patch with thanks to Rich, I also fixed some CS errors."
0,CAMEL-3967,Bug,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,1,2011-05-12 16:59:39+00:00,2011-05-12 17:10:39+00:00,"See nabble
http://camel.465427.n5.nabble.com/TypeConverter-loading-failes-in-JBoss-5-1-0-GA-tp4389726p4389726.html


The issue is when using JBoss and Camel 2.7",
0,CAMEL-3966,New Feature,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Romain Manni-Bucau,0,0,2011-05-12 07:14:41+00:00,2011-12-06 06:19:09+00:00,"It could be nice to be able to use stax when we are filetring messages by xpath.


A boolean parameter is probably the easier way to configure it.","davsclaus:1319351693:2011-10-23T14:34:53.584+0000:1319351693:2011-10-23T14:34:53.584+0000:How would you have XPath being able to evaluate using a STaX stream ?
romain.manni-bucau:1319356245:2011-10-23T15:50:45.864+0000:1319356245:2011-10-23T15:50:45.864+0000:generally some xpath commands are not available using stax or sax. i think everything is in this thread stackoverflow.com/questions/1863250/is-it-there-any-xpath-processor-for-sax-model
muellerc:1319367913:2011-10-23T19:05:13.702+0000:1319367913:2011-10-23T19:05:13.702+0000:I think we have a few cases where using StAX is a better approach than using XPath.

- Filtering/Choice: You can stop parsing the remaining XML document after you get the needed node to make the decision.
- Splitting: You can split very large XML documents because we do not have to load the entire XML document into memory.

In my opinion, we can use the same expression to define the splitting/choice/filtering rule - XPath. But under the hut, we may use other techniques.
What do you think?
romain.manni-bucau:1319369674:2011-10-23T19:34:34.410+0000:1319369674:2011-10-23T19:34:34.410+0000:i think it is important to provide StAX support. Maybe just a SAXHandler to manage events could be a good starting point then any ""language"" over it can be added (XPath for instance). The need is the streaming, XPath is a (very nice and common)  enhancement.
davsclaus:1323123549:2011-12-06T06:19:09.060+0000:1323123549:2011-12-06T06:19:09.060+0000:We can now split XML payloads using StAX w/ JAXB"
0,CAMEL-3965,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-05-12 05:35:50+00:00,2011-10-25 11:35:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/Limitations-or-bug-on-FTP2-with-FTPS-tp4372423p4372423.html


The RemoteFileProducer should force check if the connection is alive on the client, if the noop fails.",
0,CAMEL-3964,Improvement,Minor,2.7.1,2.8.0,"

camel-script
jsr-223
script
scripting

",Resolved,Fixed,2.8.0,Claus Ibsen,Teiva Harsanyi,0,0,2011-05-11 23:00:24+00:00,2011-05-29 09:11:20+00:00,"As I said here : http://fusesource.com/forums/thread.jspa?threadID=2946&tstart=0, the ScriptEngine class (http://download.oracle.com/javase/6/docs/api/javax/script/ScriptEngine.html) provides a put method which enable to add a Java object into the created script, thanks to the JSR-223. But Camel does not provide a ""bridge"" to this method.


So I propose to pass the arguments via the header map of the message.
Indeed, on client side, I created a Map<String, Object> which contains the future scripts arguments. Then I put this map into the header.
Next on the camel-script component, I check a particular key (a public static final attribute that I added) and if the value returned is a Map, I try to add the Map's objects with the engine.put(String, Object) method.","manta:1305126101:2011-05-11T23:01:41.898+0000:1305126101:2011-05-11T23:01:41.898+0000:The patch I created
manta:1305126211:2011-05-11T23:03:31.685+0000:1305126211:2011-05-11T23:03:31.685+0000:I also try to add some test methods, especially to test the robustness of the method.
davsclaus:1306631479:2011-05-29T09:11:19.979+0000:1306631479:2011-05-29T09:11:19.979+0000:Thanks for the patch."
0,CAMEL-3963,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-11 15:11:41+00:00,2011-05-11 15:50:48+00:00,"By having a RefDataFormat we get that exposed in the XSD/model, and it makes it more explicit that is a possible data format to use.
This makes it easier for 3rd party tooling who introspects the Camel model.",
0,CAMEL-3962,Improvement,Major,None,"2.8.0, 2.7.4","
None
",Closed,Fixed,"2.8.0, 2.7.4",Claus Ibsen,Romain Manni-Bucau,0,1,2011-05-11 13:28:36+00:00,2016-04-21 12:00:27+00:00,"org.apache.camel.component.file.GenericFileConverter#genericFileToInputStream always load the content of a file, it can be improved for well known types (returning a FileInputStream).","davsclaus:1316671376:2011-09-22T14:02:56.485+0000:1316671376:2011-09-22T14:02:56.485+0000:Backported to 2.7 branch today, with help from Jonathan
mamta:1461211227:2016-04-21T12:00:27.552+0000:1461211227:2016-04-21T12:00:27.552+0000:Not sure if this is fixed -
I am using camel 2.11.0 version, still facing similar issue. 
We are sending files via sftp, so why it is giving us Storage exception. Strange thing is files are getting delivered to users successfully, but our process is getting this exception, which is not letting us throw the correct alert. And we are forced to check with end users whether they received files are not. 
There should be a way to know if the files have been successfully delivered. 
Please help me as this is something we identified in our running prod code on a regular basis."
0,CAMEL-3961,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Romain Manni-Bucau,0,0,2011-05-11 09:15:33+00:00,2011-07-25 20:18:15+00:00,"To invoke a bean taking multiple parameters we need to create an array. It is not really fluent and it could be improved.


Claus suggested to modify the bean uri to provide parameters in a camel language.


Example:
from(...)
  .bean(XXX.class, ""myMethod(${header.myHeader}, ${body}"")
  .to(...).


This cool be a really cool and useful feature.","davsclaus:1311584399:2011-07-25T16:59:59.260+0000:1311584399:2011-07-25T16:59:59.260+0000:This is now possible as shown above.


davsclaus:1311596295:2011-07-25T20:18:15.096+0000:1311596295:2011-07-25T20:18:15.096+0000:This page will have more details
http://camel.apache.org/bean-binding.html"
0,CAMEL-3960,New Feature,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-11 07:18:19+00:00,2011-05-12 08:17:04+00:00,"As Oleg posted on my blog
http://davsclaus.blogspot.com/2011/05/faster-unit-testing-apache-camel-source.html


We should add an option so end users can enable per class CamelContext (its shared). This ensure there is less overhead creating/shutting down CamelContext between test methods. 


Then they can decide to enable this in case their test can leverage this feature. This will speedup unit testing.


This requires JUnit4 and its support for @BeforeClass and @AfterClass


We should look into adding the same support for TestNG as well.","davsclaus:1305076010:2011-05-11T09:06:50.887+0000:1305076010:2011-05-11T09:06:50.887+0000:Implemented this for camel-test for JUnit 4.
Will have to look at TestNG later.

Updated wiki page as well
https://cwiki.apache.org/confluence/display/CAMEL/Camel+Test
oiavorskyi:1305117429:2011-05-11T20:37:09.731+0000:1305117429:2011-05-11T20:37:09.731+0000:Not sure if it's done already but I'd suggest that this enhancement was extended to Spring context creation as well.

P.S. Thank you for quick turnaround!
davsclaus:1305153842:2011-05-12T06:44:02.800+0000:1305153842:2011-05-12T06:44:02.800+0000:Ah well spotted. I have commit a fix so it works for CamelSpringTestSupport as well.
davsclaus:1305159423:2011-05-12T08:17:03.993+0000:1305159423:2011-05-12T08:17:03.993+0000:Added this for camel-testng as well"
0,CAMEL-3959,Bug,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-09 18:21:23+00:00,2011-05-09 18:45:15+00:00,"You cannot use the debugBefore / debugAfter when using CamelSpringTestSupport from camel-test. The problem is that the Spring Framework triggers Camel to start before the unit test have setup the debugger and whatnot.


We should align this so it works like without spring, so its the CamelTestSupport that invokes start on CamelContext


See nabble
http://camel.465427.n5.nabble.com/CamelSpringTestSupport-and-debugBefore-tp4382259p4382259.html",
0,CAMEL-3958,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-09 12:28:14+00:00,2011-05-10 11:51:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/Append-endpoint-to-route-at-test-time-tp4379843p4379843.html


We have most of the stuff already. Just a bit more sugar so you can easily add something at the start/end of a route.
We could also consider an weaveByType(xxxDefinition.class) so you can use that to pin point eg a SplitDefinition etc.","davsclaus:1304999496:2011-05-10T11:51:36.370+0000:1304999496:2011-05-10T11:51:36.370+0000:See wiki page for examples
https://cwiki.apache.org/confluence/display/CAMEL/AdviceWith"
0,CAMEL-3957,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Preben Asmussen,0,3,2011-05-09 11:38:41+00:00,2014-09-27 13:16:02+00:00,"For story see http://camel.465427.n5.nabble.com/Camel-CommonJ-component-for-Camel-running-in-jee-servers-td4375746.html


I have fixed up the work done by others so it hopefully can be part of Camel (core or separate component).


The source is available at GitHub https://github.com/pax95/camel-commonj


project depends currently on Camel 2.7.1 (small change to camel-core would be nice whereas I can remove duplicated code - see attached patch and TODO in code)


To be done -> More tests - please advise on scope.","preben:1304912376:2011-05-09T11:39:36.392+0000:1304912376:2011-05-09T11:39:36.392+0000:camel patch
davsclaus:1304917428:2011-05-09T13:03:48.210+0000:1304917428:2011-05-09T13:03:48.210+0000:Thanks Preben. I have committed the patch for the core on trunk.
preben:1307686179:2011-06-10T14:09:39.535+0000:1307686179:2011-06-10T14:09:39.535+0000:Hi Claus

Hold your horses on this one. There are some serious issues regarding Weblogic releasing workmanager threads when Camel routes are stopped/restarted or app. being redeployed.
At the moment we are holding of using Camel threads wrapped in workmangers, so I might not have the time looking into the issue.

Of course if the community sees a real need I will pick it up again. 
Any comment ?
davsclaus:1307750312:2011-06-11T07:58:32.049+0000:1307750312:2011-06-11T07:58:32.049+0000:Okay that is fine. A shame JEE servers can play tricks on you.
davidkarlsen@gmail.com:1357181801:2013-01-03T10:56:41.413+0000:1357181801:2013-01-03T10:56:41.413+0000:There is also an abstraction available through Spring:
http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/scheduling/commonj/package-frame.html
chapter 27: http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/htmlsingle/

but you might want a clean native camel integration and leave spring out of the equation?
preben:1411793157:2014-09-27T12:45:57.663+0000:1411793157:2014-09-27T12:45:57.663+0000:Maybe time has moved passed this, so why not close the ticket.
davsclaus:1411794962:2014-09-27T13:16:02.760+0000:1411794962:2014-09-27T13:16:02.760+0000:Yeah lets close it"
0,CAMEL-3956,Improvement,Minor,2.7.1,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Fernando Ribeiro,0,0,2011-05-09 00:44:55+00:00,2011-05-28 13:52:00+00:00,"The default encoding should be set in the component class, like the contentCache parameter.","davsclaus:1304915018:2011-05-09T12:23:38.503+0000:1304915018:2011-05-09T12:23:38.503+0000:This wont work as the endpoint option allows per endpoint configuration. For example you may have N+ freemarker endpoints and they can each use their own encoding.

The configuration is a shared global configuration. And it only has 1 encoding.
davsclaus:1305004663:2011-05-10T13:17:43.886+0000:1305004663:2011-05-10T13:17:43.886+0000:If we have 3 routes using freemarker
{code}
route1
from X to ""freemarker:x?encoding=utf-8""

route2
from Y to ""freemarker:y?encoding=iso-8859-1""

route3
from Z to ""freemarker:z""
{code}

Then we want the encoding parameter not be shared between the endpoints. So the first route have utf-8, the 2nd iso-8859-1, and the last route do not have any encoding set.

This is possible today as the encoding parameter is *per* endpoint.

If you remove that, and use the encoding from Freemarker Configuration, then that is a *shared* between all endpoints. So that mean when route2 set the encoding to iso-8859-1, it will override the encoding set by route1. And the last route will also use the iso-8859-1 encoding, despite it doesnt have any set.



fribeiro:1305006546:2011-05-10T13:49:06.889+0000:1305088674:2011-05-11T12:37:54.856+0000:I got what you meant when I read ""and use the encoding from Freemarker Configuration"", which was not the content of the patch. It actually only provided a default value to be passed to the getTemplate method of the Configuration object in the endpoint class.

Anyway I took a closer look at the FreeMarker source code and realized that there is an even better solution, which is going with FreeMarker itself, which defaults to the platform's encoding when none is provided. Please find the revision attached.
fribeiro:1305552184:2011-05-16T21:23:04.765+0000:1305552184:2011-05-16T21:23:04.765+0000:Any feedback yet? I have a few other patches to these same classes to submit next.
davsclaus:1305585403:2011-05-17T06:36:43.325+0000:1305585403:2011-05-17T06:36:43.325+0000:Fernando.

We do not want to change the current patch. The current code works for people."
0,CAMEL-3955,Improvement,Trivial,2.7.1,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Fernando Ribeiro,0,0,2011-05-09 00:37:14+00:00,2011-05-09 12:17:40+00:00,The FREEMARKER_RESOURCE is actually not used anymore by the component.,
0,CAMEL-3954,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-07 08:58:26+00:00,2011-05-07 10:43:24+00:00,"This makes unit tests faster with Camel.


End users can override the isLazyLoadingTypeConverter method from CamelTestSupport if they want to control the behavior.
If you return false, then its what it used to be before this change.


Notice that Camel will still by default always load all type converters on startup.
By enabling lazy loading during testing it allows most unit tests to run faster, in case they dont need any additional type converter from other camel components.","davsclaus:1304729920:2011-05-07T08:58:40.802+0000:1304729920:2011-05-07T08:58:40.802+0000:See nabble
http://camel.465427.n5.nabble.com/Conceptual-correctness-of-using-Camel-Unit-Tests-tp4372286p4372286.html
davsclaus:1304736204:2011-05-07T10:43:24.871+0000:1304736204:2011-05-07T10:43:24.871+0000:There is a isLazyLoadingTypeConverter method on CamelTestSupport that controls this. Its enabled by default which speed up unit testing."
0,CAMEL-3953,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-07 08:56:00+00:00,2011-05-07 10:44:36+00:00,"We should hardload the type converters from camel-core, which makes starting CamelContext faster.


This improves unit test of the Camel project as well. We have seen 10%+ or more speedup in some modules being tested.


See nabble
http://camel.465427.n5.nabble.com/Conceptual-correctness-of-using-Camel-Unit-Tests-tp4372286p4372286.html",davsclaus:1304736276:2011-05-07T10:44:36.170+0000:1304736276:2011-05-07T10:44:36.170+0000:There is now a CoreTypeConverterLoader doing this. And its always in use.
0,CAMEL-3952,New Feature,Minor,2.7.1,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,jerryscott2012,0,0,2011-05-06 17:36:17+00:00,2015-07-11 22:06:10+00:00,"Cmel-ibatis or Cmel-mybatis provides us the basic CURD processing to be integrated with ibatis or mybatis api,  but there's no special support for Page Querying which is quite common in practise. So some improvements towards that should be added.


     Take mybatis for example, ""SqlSession"" interface of it provides ""List selectList(String statement, Object parameter, RowBounds rowBounds)"" method to support pageQuery while similar jobs did in Hibernatewith PageDialect brought in for support. so PageQuery support either in camel-ibatis or camel-mybatis seems more helpfull in real life to be integrated with ibatis or mybatis. I think we should add new peration type in ""StatementType"" and try to make some patch towards the XXProducer or XXConsumer class to put it into practise.",
0,CAMEL-3951,Sub-task,Major,2.8.0,2.8.0,"

cache
camel
documentaion

",Resolved,Fixed,2.8.0,Unassigned,Piotr Klimczak,0,0,2011-05-06 16:34:39+00:00,2011-06-11 09:50:43+00:00,Need to edit camel-cache component docs.,"nannou9:1306105922:2011-05-23T07:12:02.420+0000:1306105922:2011-05-23T07:12:02.420+0000:EventListeners and CacheLoaders are documented.
Only peerProviders and some tutorial left to do.
davsclaus:1307685671:2011-06-10T14:01:11.506+0000:1307685671:2011-06-10T14:01:11.506+0000:Piotr whats the status of the documentation? We would like to close down on a 2.8 release.
nannou9:1307687104:2011-06-10T14:25:04.073+0000:1307687104:2011-06-10T14:25:04.073+0000:I am a bit overloaded.
Only basic documentation of new features is done. No examples nor tutorials yet.
Will write examples tomorrow but i am not sure about cache distribution tutorial. Will do my best!

BTW. I am not receiving emails from jira :(
davsclaus:1307750973:2011-06-11T08:09:33.154+0000:1307750973:2011-06-11T08:09:33.154+0000:Piotr. Its okay to wait with a tutorial/example. However we must have basic documentation for every new feature etc. we implement in Camel.

So if you think that the documentation at: http://camel.apache.org/cache
covers all the new features we have added from your patches. Then we can resolve this ticket.


nannou9:1307757043:2011-06-11T09:50:43.662+0000:1307757043:2011-06-11T09:50:43.662+0000:Basic docs for new features are done.
Also i have provided some basic examples/tutorial based on OSGi iTest on separated page. This tutorial should be changed from iTest to real life one soon. But even if it's based on iTest it is quite close to real life example. I will improve it soon.
So as you said Claus, it is ok to resove this issue. So closing! :)

Have a FUN! :)"
0,CAMEL-3950,Bug,Minor,2.7.1,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Jimmy Rueedi,0,0,2011-05-06 14:46:37+00:00,2011-10-25 11:35:48+00:00,"When a route has autoStartup=""false"" set in the camel.xml, it cannot be started anymore in the web- console.
In the logfile, an entry is generated, similar to this:
""Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp7446303-52""
If a route does not have autoStartup=""false"", it can be stopped and started normally (as before with ActiveMQ 5.4.2 / Camel 2.4.0)


Reproduce steps:



Configure a route with ""<route autoStartup=""false"">""
Start the ActiveMQ Service
Navigate to ""http://server.domain.tld:8161/camel/routes
try to start the route with the button ""Start""
check the logfile ""activemq.log""","davsclaus:1306395567:2011-05-26T15:39:27.925+0000:1306395567:2011-05-26T15:39:27.925+0000:I think you need to upgrade your AMQ as well, as it ""rebrand"" the camel-web console it embeds.
jimmyrueedi:1306709428:2011-05-30T06:50:28.688+0000:1309138330:2011-06-27T09:32:10.480+0000:Well, I took the snapshots of camel and AMQ from May, 26th and upgraded my installation.
The behaviour is unchanged, even I removed the ""old"" .jar-files:
------------------- snip -------------------
2011-05-30 08:41:48,136 | INFO  | Cannot start route route2 as its configured with autoStartup=false | org.apache.camel.spring.SpringCamelContext | qtp2889719-43
------------------- snip -------------------
Seems, there is no change in effect, actually.

Update: 27.06.2011: Took the latest Snapshots actually (ActiveMQ5.6 from June, 24th and camel 2.8 from Junde 27th)
--> no change in behaviour, still doesn't work

"
0,CAMEL-3949,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-06 08:14:07+00:00,2011-05-06 10:47:11+00:00,"We should not automatic try to convert the payload to a StreamCache if you send a message to a log endpoint.



        StreamCache newBody = message.getBody(StreamCache.class);
        if (newBody != null) {
            message.setBody(newBody);
        }




Only if people have explicit enabled stream cache we can safely log it.
Otherwise we should not output streams in the log.


We should use the extractBodyForLogging from MessageHelper instead which cater for this.",davsclaus:1304650031:2011-05-06T10:47:11.780+0000:1304650031:2011-05-06T10:47:11.780+0000:There is a new showStreams option on log component if you want to show the streams anyway.
0,CAMEL-3948,Bug,Major,2.7.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Hadrian Zbarcea,0,0,2011-05-06 01:51:23+00:00,2011-10-25 11:36:03+00:00,"Issue is discussed in this thread.


Note: Donald posted interesting and helpful findings.","dwhytock:1308510527:2011-06-20T03:08:47.671+0000:1308510527:2011-06-20T03:08:47.671+0000:Contributing this patch to MailConsumer.  It adds a property, POP3UID, to the exchange when it's created from a POP3 message, then synchronizes the exchange with the folder's message in processCommit() to ensure deletion.
njiang:1308512265:2011-06-20T03:37:45.462+0000:1308512265:2011-06-20T03:37:45.462+0000:Hi Donald,

Can you submit a diff patch instead of the java file?
It will be helpful for us to review the patch.

davsclaus:1308524230:2011-06-20T06:57:10.801+0000:1308524230:2011-06-20T06:57:10.801+0000:This patch cannot be accepted as it uses some internal sun code, eg it has these imports
{code}
import com.sun.mail.pop3.POP3Folder;
import com.sun.mail.pop3.POP3Message;
{code}

dwhytock:1308666082:2011-06-21T22:21:22.870+0000:1308666082:2011-06-21T22:21:22.870+0000:Generates a UID for POP3 messages by concatenating the header lines and using UUID.nameUUIDFromBytes().  Saves generated UID to the POP3UID property on the exchange.

This will work for any POP3 server that generates a sufficiently unique message ID in the headers, without being dependent on the format of the headers.
davsclaus:1309138701:2011-06-27T09:38:21.051+0000:1309138701:2011-06-27T09:38:21.051+0000:Donald thanks for the new patch.
davsclaus:1309143141:2011-06-27T10:52:21.666+0000:1309143141:2011-06-27T10:52:21.666+0000:Donald I have committed your patch on trunk with a few slight minor changes. Do you mind testing the code on trunk to see if that works on your system?
davsclaus:1309143568:2011-06-27T10:59:28.239+0000:1309143568:2011-06-27T10:59:28.239+0000:I have also removed the rsetbeforequit being set in the mail configuration. So Camel does not set that option at all.
dwhytock:1309162176:2011-06-27T16:09:36.340+0000:1309162176:2011-06-27T16:09:36.340+0000:Not working on my system with the changes.  Will isolate the problem change and resubmit.

dwhytock:1309163421:2011-06-27T16:30:21.200+0000:1309163421:2011-06-27T16:30:21.200+0000:getAllHeaders() returns a set of Header objects. Concatenating and comparing them requires extracting the text from them.
njiang:1309460643:2011-07-01T03:04:03.240+0000:1309460643:2011-07-01T03:04:03.240+0000:I just applied the diff_20110627 into the camel trunk."
0,CAMEL-3947,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,0,2011-05-05 20:30:19+00:00,2011-06-03 15:00:42+00:00,No Desc,
0,CAMEL-3946,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,1,2011-05-05 20:29:43+00:00,2011-05-30 13:28:22+00:00,No Desc,
0,CAMEL-3945,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,0,2011-05-05 20:27:41+00:00,2011-06-03 14:33:19+00:00,Document the support for the utility in the HTTP4 component.,
0,CAMEL-3944,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,0,2011-05-05 20:26:51+00:00,2011-06-03 15:12:59+00:00,Document the indirect support for the JSSE Utility in the HTTP component.,
0,CAMEL-3943,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,0,2011-05-05 20:25:54+00:00,2011-05-16 13:26:55+00:00,"Add general documentation for the utility classes, including programmatic, Spring, and Blueprint examples.",davaleri:1305523615:2011-05-16T13:26:55.728+0000:1305523615:2011-05-16T13:26:55.728+0000:See https://cwiki.apache.org/confluence/display/CAMEL/Camel+Configuration+Utilities
0,CAMEL-3942,Bug,Minor,2.7.1,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Jean-Christophe Delmas,0,0,2011-05-05 16:10:38+00:00,2011-10-25 11:36:13+00:00,"This problem appears when jar dependencies with type converters have path containing space characters.


In my case, the camel-mail-2.7.1.jar jar is located in my local maven repository.


I get this error during my project startup: 



[...]
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:/D:/Documents and Settings/501915291/.m2/repository/org/apache/camel/camel-mail/2.7.1/camel-mail-2.7.1.jar!/META-INF/services/org/apache/camel/TypeConverter
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parse(URI.java:3019)
        at java.net.URI.<init>(URI.java:578)
        at java.net.URL.toURI(URL.java:918)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackages(AnnotationTypeConverterLoader.java:118)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.findPackageNames(AnnotationTypeConverterLoader.java:108)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:69)
        ... 63 more




FIX:
findPackages method in AnnotationTypeConverterLoader shouldn't use URIs to store already visited jars.","davsclaus:1304729990:2011-05-07T08:59:50.776+0000:1304729990:2011-05-07T08:59:50.776+0000:Jean can you re-attach your patch and this time make sure to [x] in grant license to Apache. Otherwise we cannot accept your patch.
jcdelmas:1304901428:2011-05-09T08:37:08.956+0000:1304901428:2011-05-09T08:37:08.956+0000:Ok, the patch has been re-attached.
davsclaus:1304914474:2011-05-09T12:14:34.825+0000:1304914474:2011-05-09T12:14:34.825+0000:Thanks for the patch. I have applied it, although I used getPath from the URL (no need to convert to URI).

Do you mind testing code from trunk on your system?"
0,CAMEL-3941,Bug,Major,2.8.0,,"

camel
cxf
jetty
servlet
specification

",Closed,Invalid,None,Unassigned,Piotr Klimczak,0,1,2011-05-05 08:25:55+00:00,2011-10-10 10:27:37+00:00,"Probably because of this: https://issues.apache.org/jira/browse/CAMEL-3784 i have a problem with CXF dependencies in Camel as:
1. Camel 2.8 uses CXF 2.4.0 and Jetty 7.3.1
2. CXF 2.4.0 uses servlet 3.0
3. Jetty 7.x.x uses servlet 2.5


Let's take a look at my example:



<bean id=""sampleBean"" class=""com.acme.Service"" />
<cxfEndpoint id=""acmeService"" address=""/acmeService"" serviceClass=""#sampleBean"" xmlns=""http://camel.apache.org/schema/spring"" />

<camelContext id=""testContext"" trace=""true"" streamCache=""false"" xmlns=""http://camel.apache.org/schema/spring"" >
    <route>
        <from uri=""cxf:bean:acmeService"" />
        <bean ref=""sampleBean"" />
    </route>
</camelContext>




Quite simple isn't it?
But how come that we have Servlet spec version conflict? Let's take a look at class CXFConsumer of camel-cxf component:


Around the lines 66 we have:



if (!endpoint.isSynchronous() && (continuation = getContinuation(cxfExchange)) != null) {
    LOG.trace(""Calling the Camel async processors."");
    return asyncInvoke(cxfExchange, continuation);
} else {




so if we use async API (set as default) it will try to pickup the Continuation as you can see around 111 line:



private Continuation getContinuation(Exchange cxfExchange) {
    ContinuationProvider provider = 
        (ContinuationProvider)cxfExchange.getInMessage().get(ContinuationProvider.class.getName());
    return provider == null ? null : provider.getContinuation();
}




The ContinuationProvider contains value of class Servlet3ContinuationProvider(cxf-rt-transports-http) which is Servlet 3.0 ready only!
Let's go further to see what is happening in Servlet3Continuation(cxf-rt-transports-http) class:



HttpServletRequest req;
//some code
final AsyncContext context;
//some code
context = req.startAsync(req, resp);




If you take a closer look at AsyncContext class you will see that cxf 2.4.0 is expecting this class to be javax.servlet.AsyncContext type.
BUT jetty 7 returns org.eclipse.jetty.server.AsyncContext which is incompatible.
The worse thing is, that req value of type org.eclipse.jetty.server.Request that implements HttpServletRequest is expecting the HttpServletRequest to be 3.0 Servlet spec but is the 2.5 servlet spec one.


All of this causes:



Caused by: java.lang.AbstractMethodError: org.eclipse.jetty.server.Request.startAsync(Ljavax/servlet/ServletRequest;Ljavax/servlet/ServletResponse;)Ljavax/servlet/AsyncContext;
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider$Servlet3Continuation.<init>(Servlet3ContinuationProvider.java:77)[142:org.apache.cxf.bundle:2.4.0]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider.getContinuation(Servlet3ContinuationProvider.java:58)[142:org.apache.cxf.bundle:2.4.0]
        at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:114)[205:org.apache.camel.camel-cxf:2.8.0.SNAPSHOT]
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:66)[205:org.apache.camel.camel-cxf:2.8.0.SNAPSHOT]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[142:org.apache.cxf.bundle:2.4.0]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)[:1.6.0_24]
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)[:1.6.0_24]
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[142:org.apache.cxf.bundle:2.4.0]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:106)[142:org.apache.cxf.bundle:2.4.0]
        ... 34 more","nannou9:1304555587:2011-05-05T08:33:07.097+0000:1304555587:2011-05-05T08:33:07.097+0000:Please note, that SMX 4.4-SNAPSHOT uses camel 2.7.x as default. I have changed SMX to use 2.8-SNAPSHOT.
But no matter to that, using jetty 7.3.1 and cxf 2.4 dependencies inside camel causes servlet spec conflicts.
njiang:1304559826:2011-05-05T09:43:46.055+0000:1304559826:2011-05-05T09:43:46.055+0000:Hi Piotr,

Did you install the servlet api 3.0?
If so, please uninstall it from servicemix.
CXFServlet should supports servlet 2.5, if there is no servlet 3.0 API, it will not create the Servlet3ContinuationProvider.

Willem
nannou9:1304562181:2011-05-05T10:23:01.638+0000:1304562181:2011-05-05T10:23:01.638+0000:Hi Willem!

Thanks for very fast answer. You ware right!
Removing servlet api 3.0 from SMX features file solved my problem.

So closing this issue for camel as it is rather a SMX issue.

nannou9:1304562322:2011-05-05T10:25:22.372+0000:1304562322:2011-05-05T10:25:22.372+0000:Not a camel issue. Rather the SMX issue.
njiang:1316928888:2011-09-25T13:34:48.969+0000:1316928888:2011-09-25T13:34:48.969+0000:Another workaround is adding the synchronous option to be true on the camel-cxf endpoint like this.
{code}
from(""cxf:xxx?synchronous=true"")....
{code}


njiang:1318213657:2011-10-10T10:27:37.767+0000:1318213657:2011-10-10T10:27:37.767+0000:Added the link of related ServiceMix issue."
0,CAMEL-3940,Improvement,Minor,2.7.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-05-05 07:09:22+00:00,2012-01-22 13:08:05+00:00,"This component
http://camel.apache.org/language


Can execute scripts. But the script is currently either from the endpoint uri or as a header. We should add an option to indicate the script should be loaded from a resource (file, classpath, http). And also whether or not the script should be cached or not. Its similar to the resource endpoint classes (velocity, freemarker etc.).


If we build this logic into the camel-core then we can migrate the other components to use camel-core only. As they rely on Spring Resource abstraction. It would be nice to get rid of that dependency so end users can use those without the spring framework.


Maybe something like



from(""direct:start"").to(""language:groovy?script=classpath:com/foo/myScript.groovy&contentCache=false"").to(""mock:result"");




Note I put in contentCache as the name for the cache option as thats the name freemarker, velocity uses.",davsclaus:1327208885:2012-01-22T13:08:05.775+0000:1327208885:2012-01-22T13:08:05.775+0000:Already implemented in Camel 2.9
0,CAMEL-3939,Improvement,Trivial,2.7.1,2.8.0,"

bundle
camel-cache
ehcache
update
version

",Resolved,Fixed,2.8.0,Willem Jiang,Piotr Klimczak,0,0,2011-05-04 18:26:07+00:00,2011-05-19 09:35:15+00:00,"Update ehcache smx bundle from: 2.3.0_1, to: 2.3.0_3-SNAPSHOT to let JMSReplication to work.","nannou9:1304505150:2011-05-04T18:32:30.509+0000:1304505150:2011-05-04T18:32:30.509+0000:This patch is possible as: https://issues.apache.org/jira/browse/SMX4-809 was applied to trunk.

This patch in association with:
https://issues.apache.org/jira/browse/CAMEL-3867
let the patch:
https://issues.apache.org/jira/browse/CAMEL-3880
...to work!

Have a FUN!

nannou9:1304505250:2011-05-04T18:34:10.769+0000:1304505250:2011-05-04T18:34:10.769+0000:One more thing:
This patch have to be applied to: https://svn.apache.org/repos/asf/camel/trunk/parent
davsclaus:1304549934:2011-05-05T06:58:54.246+0000:1304549934:2011-05-05T06:58:54.246+0000:Willem could we please *not* upgrade to use SNAPSHOT releases as it breaks building.

[ERROR] Failed to execute goal on project camel-cache: Could not resolve dependencies for project org.apache.camel:camel-cache:bundle:2.8-SNAPSHOT: Could not find artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.ehcache:jar:2.3.0_3-SNAPSHOT in apache.snapshots (http://repository.apache.org/snapshots/) -> [Help 1]

Its better to wait for the bundle to be released!

Also the CI servers cannot find the SNAPSHOT versions and fail. That means the CI servers cannot do a full test cycle.

I suggest to revert this patch and only commit when the bundle has been published and released.
nannou9:1304552196:2011-05-05T07:36:36.934+0000:1304552196:2011-05-05T07:36:36.934+0000:Oups, sorry!
I didn't know that you do not accept SNAPSHOTs as dependencies.
I thought that someone will take care of this (releasing the dependency).

Sorry Willem for causing problems :/
njiang:1304555097:2011-05-05T08:24:57.965+0000:1304555097:2011-05-05T08:24:57.965+0000:Hi Claus,

I kicked the servicemix bundle deploy build after I got the CI build error email.
Now the bundle snapshot is published and one of camel Apache CI build is passed.

Willem
njiang:1305768915:2011-05-19T09:35:15.390+0000:1305768915:2011-05-19T09:35:15.390+0000:Updated the apache camel feature to use the new version of ehcache bundle."
0,CAMEL-3938,Improvement,Major,"2.7.0, 2.7.3, 2.8.0","2.8.2, 2.9.0","
None
",Resolved,Fixed,"2.8.2, 2.9.0",Claus Ibsen,Joshua Watkins,0,0,2011-05-04 11:59:36+00:00,2011-09-19 20:16:43+00:00,"A while ago there was a discussion topic that the
SimpleMessageListenerContainer/ConsumerType.Simple was removed from
camel-jms as it was deprecated. However from looking at the latest Spring
docs (
http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springf
ramework/jms/listener/SimpleMessageListenerContainer.html ) it is alive
and kicking.


Is there another reason that this feature was removed?


The reason I am so keen on the SimpleMessageListenerContainer is that the
DefaultMessageListenerContainer does not allow you to constrain the number
of threads used in a useful way. If you give it a task executor with a
maximum 5 threads and want to listen on 10 routes, only 5 of those routes
would be consumed from. There is even a note about this fact in the docs (
http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springf
ramework/jms/listener/DefaultMessageListenerContainer.html#setTaskExecutor(
java.util.concurrent.Executor) ). This makes the
SimpleMessageListenerContainer invaluable for scaling out an application
using camel-jms.","jwatkins:1312270216:2011-08-02T15:30:16.769+0000:1312270216:2011-08-02T15:30:16.769+0000:Patch re-adding SimpleMessageListenerContainer back as an option. Patch was created against revision: 1153067
davsclaus:1312595471:2011-08-06T09:51:11.481+0000:1312595471:2011-08-06T09:51:11.481+0000:We need unit tests as well. Do you care to work on that too?
jwatkins:1312769194:2011-08-08T10:06:34.662+0000:1312769194:2011-08-08T10:06:34.662+0000:Sure I will pull some unit tests together.
jwatkins:1312793386:2011-08-08T16:49:46.428+0000:1312793386:2011-08-08T16:49:46.428+0000:I mirrored the tests that were already there in JmsEndpointConfigurationTest for a simple consumer. I also added an additional test to check for pubsubnolocal. I am not sure however how to test setting the executor service on the SimpleMessgeListener contain as it wasn't done on the current tests. 
davsclaus:1312973006:2011-08-10T18:43:26.244+0000:1312973006:2011-08-10T18:43:26.244+0000:Thanks for the patch."
0,CAMEL-3937,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-05-04 07:46:06+00:00,2011-05-04 08:43:45+00:00,"Cometd 2.1.1 fix bunch of issues[1] since the 2.1.0 released, we should upgrade it.
As the cometd 2.x doesn't provides the OSGi ready bundle, we still need to wrap a bundle in ServiceMix.


[1]http://bugs.cometd.org/browse/COMETD/fixforversion/10061",njiang:1304469825:2011-05-04T08:43:45.676+0000:1304469825:2011-05-04T08:43:45.676+0000:Applied patch into trunk and also updated the features file.
0,CAMEL-3936,Bug,Major,2.7.1,2.8.0,"

Aggregation
Camel
JDBC
MySQL
Repository

",Closed,Fixed,2.8.0,Christian Müller,Baptiste Gaillard,0,0,2011-05-03 17:38:42+00:00,2011-05-03 20:49:22+00:00,"The JdbcAggregationRepository makes a 



 'SELECT COUNT (*) FROM....'



  SQL request at line 131 in the source code. 


This appears to be incorrect with MySQL because theire is a space between COUNT and (. 


By replacing the request with 



 'SELECT COUNT(*) FROM....'



  (without the white space) the bug is corrected for MySQL (I think it should be tested with other database without the space). 


This request can be tested with Mysql Query Browser (the returned error is the same as the one encountered when we execute the JdbcAggregationRepository with Camel). 


The exception returned is the following: 



 ERROR DefaultErrorHandler - Failed delivery for exchangeId: ID:COE-WRKST2-1749-1304443569312-2:2:1:88:1. Exhausted after delivery attempt: 1 caught: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [SELECT COUNT (*) FROM aggregation_repo_0 WHERE id = ?]; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:233)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:728)
	at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:744)
	at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:775)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:131)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:114)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:114)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:251)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:189)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) FROM aggregation_repo_0 WHERE id = '92'' at line 1
	at sun.reflect.GeneratedConstructorAccessor83.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:409)
	at com.mysql.jdbc.Util.getInstance(Util.java:384)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1054)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3566)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3498)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1959)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2113)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2568)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2113)
	at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:2275)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.apache.commons.dbcp.DelegatingPreparedStatement.executeQuery(DelegatingPreparedStatement.java:96)
	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
	... 42 more","muellerc:1304424249:2011-05-03T20:04:09.638+0000:1304424249:2011-05-03T20:04:09.638+0000:{code}
SELECT COUNT(*) FROM....
{code}

also works for:
- MySQL 5.1
- Oracle 10g


It looks like it's the right query: http://www.w3schools.com/SQL/sql_func_count.asp

I will change it

muellerc:1304424882:2011-05-03T20:14:42.028+0000:1304424882:2011-05-03T20:14:42.028+0000:It works also with H2
muellerc:1304425080:2011-05-03T20:18:00.124+0000:1304425080:2011-05-03T20:18:00.124+0000:Hello Baptiste!

Thanks for reporting this issue. I committed the proposed change with revision 1099228.

Cheers,
Christian
bouba:1304425214:2011-05-03T20:20:14.992+0000:1304425214:2011-05-03T20:20:14.992+0000:I also think the syntax without space is the good one. 

Thanks for the reactivity Christian ! 

Baptiste
rkettelerij:1304426962:2011-05-03T20:49:22.786+0000:1304426962:2011-05-03T20:49:22.786+0000:Note that you can work around this issue in MySQL by setting the SQL_MODE parameter to ""IGNORE_SPACE"". 
Nevertheless it's good that this is fixed in 2.8."
0,CAMEL-3935,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Straube,0,1,2011-05-03 10:28:29+00:00,2011-05-21 14:47:55+00:00,"As Hazelcast is a distributed data grid, it would be useful to use it as idempotent repository. Despite to the plain in memory repository it can act as idempotent repository over n cluster nodes with very few effort.","clausstraube:1304389914:2011-05-03T10:31:54.459+0000:1304389914:2011-05-03T10:31:54.459+0000:patch with the idempotent repository implementation + test. Also updated Hazelcast version.
davsclaus:1304564789:2011-05-05T11:06:29.638+0000:1304564789:2011-05-05T11:06:29.638+0000:Thanks for the patch.

I wonder if the key you use for the IMap is the convention to use (eg a dash). Maybe use a getClass().getName() ?
Also maybe it should be possible to configure that name, so you can have multiple independent repos.

And it would be nice if you could cleanup the code a bit, eg remove the empty lines. And run a checkstyle check as well.
http://camel.apache.org/building.html
clausstraube:1304565467:2011-05-05T11:17:47.168+0000:1304565467:2011-05-05T11:17:47.168+0000:It's a good idea to have a configurable name to allow multiple repositories. I'll change that.

The code should fit to the camel check style. I used the check style rules in the 'buildingtools' folder with the checkstyle plugin - there's no violation. Anyways I can kick out some empty lines.   
clausstraube:1305507636:2011-05-16T09:00:36.377+0000:1305507636:2011-05-16T09:00:36.377+0000:Changed the implementation so that a repository name can be set (default is the canonical class name of the implementation class). Changed version of Hazelcast to 1.9.3. Checked code against the camel rules, deleted some empty lines.
clausstraube:1305609406:2011-05-17T13:16:46.197+0000:1305609406:2011-05-17T13:16:46.197+0000:Removed Version update (this caused errors in tests). Added OSGi export property to pom.   
davsclaus:1305775687:2011-05-19T11:28:07.563+0000:1305775687:2011-05-19T11:28:07.563+0000:Claus do you mind re-attaching a patch based on the latest source code from trunk? Then its easier and faster for us/me to apply the patch.
clausstraube:1305776155:2011-05-19T11:35:55.593+0000:1305776155:2011-05-19T11:35:55.593+0000:patch from the latest trunk
davsclaus:1305777404:2011-05-19T11:56:44.510+0000:1305777404:2011-05-19T11:56:44.510+0000:Thanks for the patch. I polished it a bit. Do you mind helping out with the wiki documentation? We need to add about this in the idempotent consumer EIP wiki page.
clausstraube:1305777850:2011-05-19T12:04:10.867+0000:1305777850:2011-05-19T12:04:10.867+0000:Thank you. Should I add the more detailed documentation (sample, etc.) on the EIP site or on the component site (with a link from the EIP site)?

My student made yesterday a tutorial using the idempotent consumer pattern with camel-hazelcast on a two node cluster inside karaf. Can I add this simply to the tutorials site as well?   
davsclaus:1305778140:2011-05-19T12:09:00.155+0000:1305778140:2011-05-19T12:09:00.155+0000:Yeah just add it to the idempotent consumer eip page, we already got for SQL.
You can of course mention on the hazelcast component page that it has this feature for the idempotent EIP

And yes a tutorial is welcome. If its not so length. Then consider it as a cookbook instead (small tutorials)"
0,CAMEL-3904,Test,Minor,2.6.0,Future,"
None
",Resolved,Won't Fix,Future,Grzegorz Grzybek,Claus Ibsen,0,2,2011-04-27 07:37:49+00:00,2015-07-09 12:13:13+00:00,"There may be problem using camel-quickfix in osgi. We need an unit test of it in tests/camel-itest-osgi


See Fuse forum
http://fusesource.com/forums/thread.jspa?threadID=2926&tstart=0","harisundhar:1305507737:2011-05-16T09:02:17.145+0000:1305507737:2011-05-16T09:02:17.145+0000:I tried installing and running camel-quickfix 2.6.0 on sm 4.3. 

ailed (OsgiBundleXmlApplicationContext(bundle=mw-sm4-tradefixclient, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route53: Route[[From[quickfix:egorig.cfg]] -> [OnException[[class jav... because of Failed to resolve endpoint: quickfix://egorig.cfg due to: Cannot auto create component: quickfix
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)[68:org.apache.camel.camel-core:2.6.0]
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)[75:org.apache.camel.camel-spring:2.6.0]
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:237)[75:org.apache.camel.camel-spring:2.6.0]
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE]
        at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0]
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0]
        at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0]
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0]
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_12]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route53: Route[[From[quickfix:egorig.cfg]] -> [OnException[[class jav... because of Failed to resolve endpoint: quickfix://egorig.cfg due to: Cannot auto create component: quickfix
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:165)[68:org.apache.camel.camel-core:2.6.0]
Caused by: java.lang.NoClassDefFoundError: org/slf4j/LoggerFactory
        at org.apache.camel.component.quickfixj.QuickfixjComponent.<clinit>(QuickfixjComponent.java:40)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.6.0_12]
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)[:1.6.0_12]
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)[:1.6.0_12]
        at java.lang.reflect.Constructor.newInstance(Constructor.java:513)[:1.6.0_12]
        at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:126)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:108)
        at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:280)
        ... 41 more
Caused by: java.lang.ClassNotFoundException: org.slf4j.LoggerFactory not found by org.apache.camel.camel-quickfix [249]
        at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:787)
        at org.apache.felix.framework.ModuleImpl.access$400(ModuleImpl.java:71)
        at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1768)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)[:1.6.0_12]
        at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:320)[:1.6.0_12]
        ... 49 more

This is what I have installed:
[ 249] [Active     ] [            ] [       ] [   60] camel-quickfix (2.6.0)
[ 250] [Active     ] [            ] [       ] [   60] wrap_mvn_org.quickfixj_quickfixj-all_1.5.0 (0)
[ 253] [Active     ] [            ] [       ] [   60] wrap_mvn_org.apache.mina_mina-core_1.1.7 (0)
[ 257] [Active     ] [            ] [       ] [   60] slf4j-api (1.5.3)
                                       Fragments: 265
[ 265] [Resolved   ] [            ] [       ] [   60] slf4j-log4j12 (1.5.3)
                                       Hosts: 257
[ 268] [Active     ] [            ] [Failed ] [   60] Middleware TradeFix (1.0.0)

harisundhar:1305507834:2011-05-16T09:03:54.635+0000:1305507834:2011-05-16T09:03:54.635+0000:Continuing from the previous comment , all I have in my camel-context is 
        <route>
            <from uri=""quickfix:egorig.cfg""/>
            <filter>
                <simple>${in.header.EventCategory} == 'AppMessageReceived'</simple>
                <to uri=""log:test""/>
            </filter>
        </route>"
0,CAMEL-3903,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-27 06:36:27+00:00,2011-04-27 07:26:49+00:00,"You may want to set this option globally on Jetty instead of having to do it per endpoint. You can do this on most of the options in Jetty already.


Currently this option is only possible to set on per endpoint.",davsclaus:1303860409:2011-04-27T07:26:49.990+0000:1303860409:2011-04-27T07:26:49.990+0000:The other similar options is only avail on endpoint. So lets keep it like that.
0,CAMEL-3902,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-26 11:14:01+00:00,2011-10-25 11:36:18+00:00,"If you do something like


from X
  inOut JMS
  setFaultBody


Then the fault flag is not propagated back when the consumer on X sees the result.
The issue is in JmsMessage which overrides copyFrom, from DefaultMessage. And it dont propagate the fault flag.",
0,CAMEL-3901,Improvement,Major,2.7.1,2.8.0,"
None
",Resolved,Duplicate,2.8.0,Willem Jiang,Christian Schneider,1,0,2011-04-26 09:17:55+00:00,2011-06-02 07:01:13+00:00,"The camel-cxf component curently contains too many unrelated functions. It contains:



camel transport for cxf
cxf component
cxfbean component
cxfrs componet
converters



So this causes the code of the component to depend on each other and suck in much too many dependencies. Besides this there are some package dependency cycles in the code which could easily be solved.


A first step is to separate the camel transport for cxf from the rest of the code. It is independent of all other code and can be pulled into a new component. 


Some advantages are: 



The camel transport for cxf needs very few dependencies so it is a vey light weight aproach to combine cxf and camel
The new component nicely shows how to bridge between cxd and camel without the overhead of the other components
We can let the camel-cxf component depdend on the camel transport for cxf so for people using maven no changes are needed



I will attach a patch where I simply deleted anything that is not relevant for camel transport for cxf from the camel-cxf project. This is of course not yet the solution but it shows how small the new component will be and is a good start for doing the split.


I would be very interested about opinions from other developers about the split.


Christian","cschneider:1303781061:2011-04-26T09:24:21.061+0000:1303781061:2011-04-26T09:24:21.061+0000:Simply removed everything that is not related to camel transport for cxf. The code is only about 870 lines
cschneider:1303781114:2011-04-26T09:25:14.181+0000:1303781114:2011-04-26T09:25:14.181+0000:Diagram showing the classes in camel transport for cxf
davsclaus:1303781410:2011-04-26T09:30:10.289+0000:1303781410:2011-04-26T09:30:10.289+0000:Great move Christian. I would love CXF and Camel integration to be lighter.
And more ala carte. Such as if you only need REST etc.


njiang:1303844407:2011-04-27T03:00:07.503+0000:1303844800:2011-04-27T03:06:40.487+0000:+1 for pulling the camel transport for CXF out of camel-cxf component.
It will help camel-cxf supports the CXF 2.3.x and CXF 2.4.x better.
I think it should be OK if camel-cxf module had no dependency of camel transport, as camel-cxf should not touch the transport part directly.

cschneider:1304297816:2011-05-02T08:56:56.933+0000:1304297816:2011-05-02T08:56:56.933+0000:Dan has shown interest to implement this. It will take some time though as he can only start in some weeks.
dkulp:1304307093:2011-05-02T11:31:33.396+0000:1304307093:2011-05-02T11:31:33.396+0000:Would anyone object to me adding myself as a ""Contributor"" to the project in JIRA so I can assign JIRA's to myself?"
0,CAMEL-3900,Task,Trivial,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Haisheng HU,0,0,2011-04-25 14:26:24+00:00,2011-04-26 09:08:51+00:00,"The log component documentation is all about JCL, log4j, and blah blah. We should have slf4j in it.


http://camel.apache.org/log.html","davsclaus:1303775403:2011-04-26T07:50:03.777+0000:1303775403:2011-04-26T07:50:03.777+0000:Thanks for reporting. I have updated the wiki pages.
hanson2010:1303779308:2011-04-26T08:55:08.729+0000:1303779308:2011-04-26T08:55:08.729+0000:Thanks for rapid response. But have you updated the following wiki page?
http://camel.apache.org/log.html
davsclaus:1303780131:2011-04-26T09:08:51.207+0000:1303780131:2011-04-26T09:08:51.207+0000:Yeah it takes a while before the static html pages is updated from the wiki pages. So check back later."
0,CAMEL-3899,Sub-task,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,Claus Ibsen,0,0,2011-04-25 06:37:26+00:00,2011-05-30 13:28:10+00:00,No Desc,"davsclaus:1303684743:2011-04-25T06:39:03.479+0000:1303684743:2011-04-25T06:39:03.479+0000:For example in
{code:xml}

  <camel:keyStoreParameters
    id=""id""
    resource=""keystore.jks""
    type=""jks""
    provider=""provider""
    password=""password""/>
{code}

You should be able to use a placeholder for the password field etc
{code:xml}
  <camel:keyStoreParameters
    id=""id""
    resource=""keystore.jks""
    type=""jks""
    provider=""provider""
    password=""{{myKeystorePW}}""/>
{code}

Notice I am talking about the Camel property placeholder support (not spring)
http://camel.apache.org/properties
davaleri:1304658042:2011-05-06T13:00:42.308+0000:1304658042:2011-05-06T13:00:42.308+0000:I like this idea, but it brings us back to the situation where the hierarchy for the TLS configuration is bound to a single Camel context.  See the comment thread in the main issue (CAMEL-3750) for the full details, but Willem had suggested to leave the TLS configuration portable across multiple contexts by removing the dependency on the context after we discussed the utility, or potential lack there of, of using ClassResolver as opposed to the original resource resolving logic.

It sounds like this is a use case that could warrant reintroducing the dependency on the CamelContext."
0,CAMEL-3898,Sub-task,Major,None,2.8.0,"
None
",Resolved,Duplicate,2.8.0,David Valeri,Claus Ibsen,0,0,2011-04-25 06:36:08+00:00,2011-05-16 13:26:02+00:00,"David do you mind helping out with the documentation?


We need some pieces of detail here
http://camel.apache.org/security


And from each of the components which supports this such as



Netty
Mina
http
http4
jetty",
0,CAMEL-3897,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-04-24 13:56:29+00:00,2013-05-02 02:29:38+00:00,"This requires the OSGi bundle bundle to be released first
https://issues.apache.org/jira/browse/SMX4-816",jbonofre:1306197084:2011-05-24T08:31:24.847+0000:1306197084:2011-05-24T08:31:24.847+0000:Patch including the SMX bundle. This bundle should be released in the following days (vote in progress).
0,CAMEL-3896,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-24 10:05:40+00:00,2011-04-24 13:01:52+00:00,"In Java DSL its not problem. But in XML DSL end users may define a filter like this



<filter>
   <header>foo</header>
</filter>
<to xxx>




And expect the filter to only send to XXX if filter is true. But you should put the logic inside the filter XML tag



<filter>
   <header>foo</header>
   <to xxx>
</filter>




We have logic already to validate that for other EIPs. So we should just enable that for the filter EIP as well


See nabble
http://camel.465427.n5.nabble.com/Problem-dynamically-filtering-a-route-using-a-bean-via-camel-method-tp4334637p4334637.html",
0,CAMEL-3895,Task,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-24 06:48:39+00:00,2011-04-24 07:09:05+00:00,"The JAR in central repo
http://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44


is invalid. Use the -1 version instead
http://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44-1/


See nabble
http://camel.465427.n5.nabble.com/Jsch-version-in-camel-ftp-component-tp4335473p4335473.html",
0,CAMEL-3894,New Feature,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Tracy J. Snell,Jesus CASTILLO,0,0,2011-04-23 17:49:30+00:00,2011-09-23 09:45:46+00:00,"It would be great if the File component adds support for the maxdepth option just like the find command does, so we can prune the recursive directory search when recursive is enabled.


With maxdepth we can set the levels of Directories to descend during the pollDirectory function.","davsclaus:1303609070:2011-04-24T09:37:50.845+0000:1303609070:2011-04-24T09:37:50.845+0000:There are both a min depth and max depth option etc. How far should we take this?

So if we set maxDepth=3, then the file consumer will only at most traverse down 3 paths.

{code}
<starting>
+ level1
  + level2
    + level3
      + level4
{code}

eg in this case the file consumer will only go down as far as level3 directory.
jesus.castillo:1303761208:2011-04-26T03:53:28.561+0000:1303761208:2011-04-26T03:53:28.561+0000:I like the find command as we can build complex searches with a few options. Both mindepth and maxdepth allows us to limit the search when traversing the directories tree. So, both are important although I think that maxdepth is more frequently used. In addition, I think wee need a filter that supports find style searches. I am running some test to locate all the Outbox folders in the following structure:

{code}
repositories
+ repo1
  + users
    + user1
      + Incoming
      + Inbox
      + Outbox
      + Sent Files
      + Deleted Files
    + user2
    ...
    + userN
+ repo2
...
+ repoM
{code}  

but it's hard to implement it efficiently using only the Ant filter. This could be easily done with a find command as:

{code}
find ./repositories -mindepth 4 -maxdepth 4 -type d -name Outbox
{code}

A find-like filter could have support for filetype (directory/file), filter with times (mtime, ctime, etc), permissions, etc.


tjsnell:1309754502:2011-07-04T12:41:42.020+0000:1309754502:2011-07-04T12:41:42.020+0000:Committed revision 1142641.

Added minDepth and maxDepth options
tjsnell:1309757943:2011-07-04T13:39:03.069+0000:1309757943:2011-07-04T13:39:03.069+0000:Updated docs
davsclaus:1309911091:2011-07-06T08:11:31.742+0000:1309911091:2011-07-06T08:11:31.742+0000:Tracy the file component is closely tied to the ftp component. So when you add an option/feature to the file component those options is often inherited by the ftp components. So its a good idea to:

- add unit test in camel-ftp as well for the new features
- document any API changes in the GenericFileConsumer as we have 3rd party end users who extend this component and do their custom file related components (add this to the API section in the release notes). You add a new parameter to the poll method. Also remember to add javadoc for that new option.
- Also consider if its possible to avoid tampering with the API so it can be backwards comp. out of the box. But sometimes the API must change and thats okay, if its documented in the release notes.
- you may need to adjust the code in camel-ftp for this new feature. I suggest you create a new JIRA ticket for that, so we get that included either in 2.8 or the next 2.9 release.
- You may want to add validation that max >= min. 
davsclaus:1309911135:2011-07-06T08:12:15.841+0000:1309911135:2011-07-06T08:12:15.841+0000:Also if you work on the ticket then assign the ticket in JIRA to your name. And dont close the ticket asap, instead mark it as resolved.

We close tickets later, for example after 6+ months.
davsclaus:1309996071:2011-07-07T07:47:51.036+0000:1309996071:2011-07-07T07:47:51.036+0000:Tracy you updated the wrong documentation. The file component for Camel 2.x is the file2 page, eg
https://cwiki.apache.org/confluence/display/CAMEL/File2

I have moved the documentation to the correct wiki page.
davsclaus:1309996425:2011-07-07T07:53:45.329+0000:1309996425:2011-07-07T07:53:45.329+0000:Reopening to set assigne, and fix versions."
0,CAMEL-3893,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,David Valeri,David Valeri,0,0,2011-04-22 17:30:12+00:00,2011-04-24 09:32:38+00:00,"The log DSL is convenient for user-facing logging; however, it only supports the simple expression language.  There are cases where it is desirable to log the results of a method invocation on an exchange property.  The simple expression language currently supports OGNL on message headers but not on exchange properties.  The OGNL support for message headers should also be available for exchange properties.


For example: ${property.wicket[cool]} should be allowable in addition to the currently supported simple expression capabilities.","davsclaus:1303515796:2011-04-23T07:43:16.620+0000:1303515796:2011-04-23T07:43:16.620+0000:In ExchangeTestSupport please do not also add a property with the same key as the header. Please use another key name and adjust the tests accordingly.
davaleri:1303540759:2011-04-23T14:39:19.079+0000:1303540759:2011-04-23T14:39:19.079+0000:Changed the property name in the patch as requested.
davsclaus:1303600304:2011-04-24T07:11:44.529+0000:1303600304:2011-04-24T07:11:44.529+0000:David I upgraded your JIRA account so you can assign tickets to yourself. I will review and commit your patch for this ticket.
davsclaus:1303608758:2011-04-24T09:32:38.021+0000:1303608758:2011-04-24T09:32:38.021+0000:Thanks David. I have also updated the wiki page."
0,CAMEL-3892,Improvement,Minor,None,None,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Fernando Ribeiro,0,0,2011-04-22 05:10:43+00:00,2011-05-28 13:44:40+00:00,"I've made a number of small changes to the FreeMarker component:



General re-format
Added constants for the ""encoding"" and ""contentCache"" parameters
Removed the unused FREEMARKER_RESOURCE constant
Removed the unnecessary ""FREEMARKER_"" prefix of the FREEMARKER_RESOURCE_URI and FREEMARKER_TEMPLATE constants
Removed the unnecessary getExchangePattern method
Replaced the NoCacheStorage class by a call to a constructor of the Template class, that doesn't use any cache
Added a default value for the ""encoding"" parameter (the platform's default)
Added a specific exception class to support global exception handlers
Renamed all classes from Free*m*arker (wrong) to Free*M*arker
Renamed properties from CamelFree*m*arkerResourceUri (wrong) to CamelFree*M*arkerResourceUri and CamelFree*m*arkerTemplate to CamelFree*M*arker
Replaced isDebugEnabled by log.debug as per CAMEL-3759
Improved log messages



All tests run successfully.","davsclaus:1303434644:2011-04-22T09:10:44.657+0000:1303434644:2011-04-22T09:10:44.657+0000:When you do patches please dont reorder the code as the patch changes too much.

And the template components such as freemarker, velocity, stringtemplate, scalete are similar and consistent. So we shouldnt change to much in freemarker, just because. Eg its better to have all 4 components aligned and consistent.

And dont make the classes final and whatnot. Eg try to only patch the changes.

Do you mind trying again and submit a new patch?


fribeiro:1303461674:2011-04-22T16:41:14.036+0000:1303461674:2011-04-22T16:41:14.036+0000:I've removed the final modifier from the classes, as you've requested, but couldn't do much about the ordering of the ""refreshed"" code at this time.

For your reference, I've also attached the new source files to the ticket.

I don't mind trying again at all, please let me know if you need more specific changes. I've been very careful here, please review.
davsclaus:1303516106:2011-04-23T07:48:26.026+0000:1303516106:2011-04-23T07:48:26.026+0000:Fernando can you remove all the attached files and re-attach a single patch file. Now there are 6 files all with similar name. So its not easy to know what is the ""correct"" patch.
fribeiro:1303541452:2011-04-23T14:50:52.156+0000:1303541452:2011-04-23T14:50:52.156+0000:All set.
davsclaus:1303609450:2011-04-24T09:44:10.472+0000:1303609450:2011-04-24T09:44:10.472+0000:Fernando can you ZIP the camel-freemarker component and attach that file?

We cant accept your current patch as is, as the diff is to extreme. Eg you delete all existing files, and add new files.
A patch should only diff the changes, and respect the existing code format / layout and only alter the code needed to be changed.

So if you have ZIP of the source, I can better grab the pieces we need.
fribeiro:1303630341:2011-04-24T15:32:21.359+0000:1303630341:2011-04-24T15:32:21.359+0000:Note that the deliberate purpose of this submission was making a number of small (mostly non-impacting) changes together to take a bigger leap than with separate patches.

The source is now attached as requested.
davsclaus:1303630385:2011-04-24T15:33:05.970+0000:1303630385:2011-04-24T15:33:05.970+0000:Thanks for the patch Fernando.

I took a look and you renamed all classes and did other changes. In general I dont think the changes improves the component.

As mentioned the freemarker component is similar to velocity, scalate, stringtemplate etc. So we want to keep them similar.

I upgraded to use the 2.3.16 version of freemarker.
davsclaus:1303630470:2011-04-24T15:34:30.093+0000:1303630470:2011-04-24T15:34:30.093+0000:btw cant rename from freemarker to freeMarker do SVN (subversion). It doesnt support renmaing files where you only change the case. So we keep using the freemarker name.
fribeiro:1303630949:2011-04-24T15:42:29.779+0000:1303648761:2011-04-24T20:39:21.573+0000:Would it be better if I broke the change in several parts?
davsclaus:1303633257:2011-04-24T16:20:57.643+0000:1303633257:2011-04-24T16:20:57.643+0000:Yeah I suggest you attach a patch based on the trunk code, and only highlight a single change. For example the chache, and another patch for the global error handling. Then we can take a look again.

If the cache changes requires freemarker 2.3.16 then let us know. As we would like to be backward compatible with the older freemarker releases.
fribeiro:1303648808:2011-04-24T20:40:08.975+0000:1303648808:2011-04-24T20:40:08.975+0000:It works allright with previous versions of FreeMarker.

I will go ahead with the separate changes.
fribeiro:1306138154:2011-05-23T16:09:14.077+0000:1306138154:2011-05-23T16:09:14.077+0000:I found later that the getExchangePattern actually needs to be overriden, thought InOut (not InOnly) was the default there, won't submit a new issue for that change."
0,CAMEL-3891,Improvement,Minor,2.8.0,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-04-22 03:29:41+00:00,2011-04-22 03:54:26+00:00,"When user use the FactoryBean to return a null object within Spring 2.x, the CamelBeanPostProcessor will throw a NPE exception.
Although this issue can't be reproduced within Spring 3.x, we should consider to put the NP check in the CamelBeanPostProcessor as an enhancement.",njiang:1303415666:2011-04-22T03:54:26.456+0000:1303415666:2011-04-22T03:54:26.456+0000:Applied patch into trunk.
0,CAMEL-3890,Bug,Major,2.7.1,None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Hadrian Zbarcea,Roberto Rojas,0,0,2011-04-22 00:54:03+00:00,2011-11-22 09:57:02+00:00,"When creating a route that sends text data from a file to the Camel Syslog unmarshal data format, the following error is returned.
Looking at the org.apache.camel.component.syslog.Rfc3164SyslogConverter reveals that the @Converter annotation is missing at the class level.
The attached test case illustrates the problem. With modifications to the pom.xml to point to the modified version of the camel-syslog the test works. See the comment: CHANGE TO POINT TO MODIFIED CAMEL-SYSLOG


org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value <165>Aug  4 05:34:00 mymachine myproc[10]: %% It's\n         time to make the do-nuts.  %%  Ingredients: Mix=OK, Jelly=OK #\n         Devices: Mixer=OK, Jelly_Injector=OK, Frier=OK # Transport:\n         Conveyer1=OK, Conveyer2=OK # %%


	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:143)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.ExchangeHelper.convertToMandatoryType(ExchangeHelper.java:142)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.syslog.Rfc3164SyslogDataFormat.marshal(Rfc3164SyslogDataFormat.java:29)[camel-syslog-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:57)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:125)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121)[camel-core-2.7.1.jar:2.7.1]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)[camel-core-2.7.1.jar:2.7.1]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_24]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_24]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_24]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_24]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_24]
	at java.lang.Thread.run(Thread.java:680)[:1.6.0_24]","davsclaus:1304074950:2011-04-29T19:02:30.461+0000:1304074950:2011-04-29T19:02:30.461+0000:Roberto do you mind re-attaching the patches and make sure to [x] about the Apache license. Then we should be able to get the patch into the trunk
rrojas-chariot:1304078122:2011-04-29T19:55:22.308+0000:1304078122:2011-04-29T19:55:22.308+0000:Sure, no problem. I'll keep it in mind to apply the ASF license when upload those files.
joed:1304087682:2011-04-29T22:34:42.979+0000:1304087682:2011-04-29T22:34:42.979+0000:Fixed in revision 

1097978, Thanks Roberto!
rrojas-chariot:1304089866:2011-04-29T23:11:06.376+0000:1304089889:2011-04-29T23:11:29.015+0000:Sure, any time.
geemang:1321810906:2011-11-21T01:41:46.524+0000:1321810906:2011-11-21T01:41:46.524+0000:Has this been validated in 2.8.2 I get the same error. Hopefully something I'm doing wrong...

{code}
from(""direct:syslog"")
  .convertBodyTo(java.lang.String.class)
  .marshal().syslog()
  .to(""netty:udp://localhost:10514"")
{code}

2011-11-20 19:36:34,462 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1) from(direct://syslog) -->  <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
2011-11-20 19:36:34,469 [main] INFO  interceptor.Tracer  - ID-martins-macbook-pro-local-50036-1321839379898-1-1 >>> (route1)  --> Marshal[org.apache.camel.model.dataformat.SyslogDataFormat@66e8791] <<< Pattern:InOnly, Headers:{breadcrumbId=ID-martin-gees-macbook-pro-local-50036-1321839379898-1-2}, BodyType:String, Body:THIS IS A TEST
| Error 2011-11-20 19:36:34,618 [main] ERROR processor.DefaultErrorHandler  - Failed delivery for exchangeId: ID-martin-gees-macbook-pro-local-50036-1321839379898-1-1. Exhausted after delivery attempt: 1 caught: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
Message: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.syslog.SyslogMessage with value THIS IS A TEST
   Line | Method
->> 140 | mandatoryConvertTo       in org.apache.camel.impl.converter.BaseTypeConverterRegistry
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat
|    58 | process                  in org.apache.camel.processor.MarshalProcessor
|    50 | process . . . . . . . .  in org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|   162 | process . . . . . . . .  in org.apache.camel.processor.interceptor.TraceInterceptor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    50 | process . . . . . . . .  in org.apache.camel.processor.interceptor.Debug$1
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   318 | processErrorHandler . .  in org.apache.camel.processor.RedeliveryErrorHandler
|   209 | process                  in     ''
|   306 | process . . . . . . . .  in org.apache.camel.processor.DefaultChannel
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|   116 | process . . . . . . . .  in org.apache.camel.processor.Pipeline
|    79 | process                  in     ''
|   132 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    98 | processNext . . . . . .  in org.apache.camel.processor.DelegateAsyncProcessor
|    89 | process                  in     ''
|    69 | process . . . . . . . .  in org.apache.camel.management.InstrumentationProcessor
|    78 | process                  in org.apache.camel.util.AsyncProcessorHelper
|    61 | process . . . . . . . .  in org.apache.camel.component.direct.DirectProducer
|   102 | process                  in org.apache.camel.processor.UnitOfWorkProcessor
|   104 | process . . . . . . . .  in org.apache.camel.util.AsyncProcessorHelper
|    85 | process                  in org.apache.camel.processor.DelegateAsyncProcessor
|    63 | process . . . . . . . .  in org.apache.camel.processor.UnitOfWorkProducer
|   351 | doInProducer             in org.apache.camel.impl.ProducerCache$2
|   323 | doInProducer . . . . . . in     ''
|   222 | doInProducer             in org.apache.camel.impl.ProducerCache
|   323 | sendExchange . . . . . . in     ''
|   168 | send                     in     ''
|   110 | send . . . . . . . . . . in org.apache.camel.impl.DefaultProducerTemplate
|   123 | sendBody                 in     ''
|   341 | sendBody . . . . . . . . in     ''
|    49 | testSendingSyslogMessage in com.icsynergy.idr.SyslogRoutingTests
|    45 | runReflectiveCall . . .  in org.junit.runners.model.FrameworkMethod$1
|    15 | run                      in org.junit.internal.runners.model.ReflectiveCallable
|    42 | invokeExplosively . . .  in org.junit.runners.model.FrameworkMethod
|    20 | evaluate                 in org.junit.internal.runners.statements.InvokeMethod
|    28 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunBefores
|    30 | evaluate                 in org.junit.internal.runners.statements.RunAfters
|   263 | runLeaf . . . . . . . .  in org.junit.runners.ParentRunner
|    68 | runChild                 in org.junit.runners.BlockJUnit4ClassRunner
|    47 | runChild . . . . . . . . in     ''
|   231 | run                      in org.junit.runners.ParentRunner$3
|    60 | schedule . . . . . . . . in org.junit.runners.ParentRunner$1
|   229 | runChildren              in org.junit.runners.ParentRunner
|    50 | access$000 . . . . . . . in     ''
|   222 | evaluate                 in org.junit.runners.ParentRunner$2
|    30 | evaluate . . . . . . . . in org.junit.internal.runners.statements.RunAfters
|   300 | run                      in org.junit.runners.ParentRunner
|   128 | runChild . . . . . . . . in org.junit.runners.Suite
|    24 | runChild                 in     ''
|   231 | run . . . . . . . . . .  in org.junit.runners.ParentRunner$3
|    60 | schedule                 in org.junit.runners.ParentRunner$1
|   229 | runChildren . . . . . .  in org.junit.runners.ParentRunner
|    50 | access$000               in     ''
|   222 | evaluate . . . . . . . . in org.junit.runners.ParentRunner$2
|   300 | run                      in org.junit.runners.ParentRunner
|   285 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure4
|   243 | doCall                   in _GrailsTest_groovy$_run_closure2
|   190 | doCall . . . . . . . . . in _GrailsTest_groovy$_run_closure1_closure21
|   179 | doCall                   in _GrailsTest_groovy$_run_closure1
^    82 | doCall . . . . . . . . . in TestApp$_run_closure1
Caused by RuntimeCamelException: java.nio.BufferUnderflowException
->> 834 | invokeMethod             in org.apache.camel.util.ObjectHelper
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
|    50 | convertTo                in org.apache.camel.impl.converter.StaticMethodTypeConverter
|   182 | doConvertTo . . . . . .  in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|    47 | doConvertTo              in org.apache.camel.impl.converter.LazyLoadingTypeConverter
|   138 | mandatoryConvertTo . . . in org.apache.camel.impl.converter.BaseTypeConverterRegistry
|   143 | convertToMandatoryType   in org.apache.camel.util.ExchangeHelper
|    29 | marshal . . . . . . . .  in org.apache.camel.component.syslog.Rfc3164SyslogDataFormat
davsclaus:1321927022:2011-11-22T09:57:02.177+0000:1321927022:2011-11-22T09:57:02.177+0000:Martin what runtime do you use? eg do you run Camel in ServiceMix, Karaf, Tomcat etc?
"
0,CAMEL-3889,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Daniel Kulp,0,0,2011-04-21 17:03:42+00:00,2011-04-29 16:56:30+00:00,"The ProxyHelper/Builder methods that look like:


<T> T createProxy(Endpoint endpoint, Class<T>... interfaceClasses)


will generate a compile warning whenever you try to use them.   Part of the reason is that they are completely broken when written that way.   The intention is to be able to specify multiple interface classes.  However, you cannot with the above signature  as you can ONLY pass the T.class.     Thus, something like createProxy(ep, Foo.class, Foo.class) will work (but is useless), but something like createProxy(ep, Foo.class, Bar.class) will not, even if Bar extends Foo.    THUS, the way it's written, you can really only effectively pass in a single interfaceClass and have it work.


There are three alternatives (I'll attach patches for all three for consideration) (all three would require javadoc updates, let me know which alternative is preferred and I'll happily provide the javadoc updates):


1) Change to:   <T> T createProxy(Endpoint endpoint, Class<?>... interfaceClasses)
Very simple, it works.   No warnings.  


2) Add a method like:   <T> T createProxy(Endpoint endpoint, Class<T> interfaceClass)
to really handle the single interface case (which is all of the cases in Camel) and @Deprecate the broken version.


3) <T> T createProxy(Endpoint endpoint, Class<T> interfaceClass, Class<?> ... otherInterfaces)
to separate out the ""primary"" interface and the ""extras"".


I personally prefer either 1 or 2, leaning toward #2.  Maybe move to #1 for 3.0.","davsclaus:1303381477:2011-04-21T18:24:37.886+0000:1303381477:2011-04-21T18:24:37.886+0000:#1 looks fine to me.
The JDK java.lang.reflect.Proxy uses this also, which is what Camel uses under the hood.
hadrian:1303382579:2011-04-21T18:42:59.554+0000:1303382579:2011-04-21T18:42:59.554+0000:This is an example of why ignoring warnings is a bad thing. I will apply patch1 which is also my preference.
hadrian:1304067390:2011-04-29T16:56:30.154+0000:1304067390:2011-04-29T16:56:30.154+0000:Applied patch1 in r1097885. Thanks Dan for the patch."
0,CAMEL-3888,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Claus Ibsen,0,0,2011-04-21 12:12:23+00:00,2011-06-27 08:05:27+00:00,We should ensure all deprecated classes/methods in camel-core is documented what alternatives to use. Also if possible give a hint when it could be removed.,"dkulp:1303364986:2011-04-21T13:49:46.635+0000:1303364986:2011-04-21T13:49:46.635+0000:
This is definitely not resolved.   There are a lot of tests that are using DefaultErrorHandlerBuilder.handled which is marked deprecated.   So far, I haven't found any documentation about an alternative to use.   THere are a bunch (22) of tests that use it and I haven't been able to figure out any type of alternative for it.   Thus, IMO, if there isn't an alternative and is important enough to be required by a bunch of tests, I have to wonder why it's deprecated.   But no details on that either.

Similar situation for TryDefinition.handled.   Deprecated, no alternative.   For TryDefinition, I could see a ""rethrow()"" or similar method added to define that behavior (which would match the Java users expectation), but that certainly isn't there right now.
davsclaus:1303366726:2011-04-21T14:18:46.342+0000:1303366726:2011-04-21T14:18:46.342+0000:Dan as said before just because a method is deprecated do *not* mean we should not unit test it. And hence why you would see unit test that uses the deprecated methods.

The handled(true|false) on try .. catch, error handler, was a mistake and there are *no* alternative on those. Instead you should use for example onException (exception clause). Or in case of a doCatch you can rethrow the exception if you want that. 

hadrian:1303367747:2011-04-21T14:35:47.465+0000:1303367747:2011-04-21T14:35:47.465+0000:@Claus, if you read more carefully, the reason for reopening was that we need to document what to use instead of the deprecated feature. Has this been done? How would a user know what to do? Why did you mark the issue as resolved?
hadrian:1303367878:2011-04-21T14:37:58.818+0000:1303367878:2011-04-21T14:37:58.818+0000:@Claus, this issue was initially assigned to you. If you don't plan to add the necessary documentation, unassign or assign to somebody else. Just don't mark it resolved, because it is not.
davsclaus:1303367891:2011-04-21T14:38:11.900+0000:1303367891:2011-04-21T14:38:11.900+0000:Yes a suggestion for alternative has been added in the @deprecated javadoc.
davsclaus:1303370283:2011-04-21T15:18:03.538+0000:1303370283:2011-04-21T15:18:03.538+0000:Dan/Hadrian you are welcome to look at the added documentation to @deprecated javadoc. The easiest is probably to see this commit rev: http://svn.apache.org/viewvc?rev=1095673&view=rev
I spotted a minor mistake and corrected it in this: http://svn.apache.org/viewvc?rev=1095735&view=rev

I checked all the @Deprecated/@deprecated i could find in camel-core/src/main/java (eg in main, and *not* test).
You are of course welcome to improve the documentation if you find anything needed to be added.
hadrian:1303372530:2011-04-21T15:55:30.080+0000:1303372530:2011-04-21T15:55:30.080+0000:I believe most of the users are looking at the wiki/manual we need to document there. I'll take care of it.
davsclaus:1307750862:2011-06-11T08:07:42.778+0000:1307750862:2011-06-11T08:07:42.778+0000:Information about @deprecation in the API is standard documented in the java doc. And this is where users would expect the information and go look.

We have never had any special wiki page or the likes where @deprecated API is being further detailed.

IMHO this ticket can be resolved.
davsclaus:1309133127:2011-06-27T08:05:27.184+0000:1309133127:2011-06-27T08:05:27.184+0000:deprecated API is standard documented in the javadoc as any other project"
0,CAMEL-3887,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Unassigned,Daniel Kulp,0,0,2011-04-20 17:26:22+00:00,2011-04-20 21:19:28+00:00,"The CamelConduit and CamelDestination use the CXF CachedOutputStream to buffer messages which results in large files being buffered on disk and such.  However, it immediately calls getBytes() to get the byte[] which defeats the entire purpose.


Changing to call getInputStream works fine as Camel can convert that later if needed and can help performance in some cases.",hadrian:1303305568:2011-04-20T21:19:28.268+0000:1303305568:2011-04-20T21:19:28.268+0000:Resolved in r1095514. Thanks to Dan Kulp for the patch. Your feedback on improving camel-cxf is highly appreciated.
0,CAMEL-3886,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Daniel Kulp,0,0,2011-04-20 16:33:37+00:00,2011-04-21 07:26:12+00:00,"When I import/open camel-cxf in eclipse and it automatically opens the the projects it depends on, Eclipse displays about 150 compiler warnings that should be cleaned up.","dkulp:1303288650:2011-04-20T16:37:30.641+0000:1303288650:2011-04-20T16:37:30.641+0000:I've attached a patch that gets the count down to 24.   

For the most part, what I did includes:

1) If the code that has warnings is in a SNIPPET tag, I left the code alone so the website docs can remain as is, but added @SuppressWarnings annotations outside the block.

2) In most other places, if I could ""fix"" the code by using information documented on the web site, I did.

3) I added a couple methods to ProxyBuilder/Helper to simplify and clear up the single Class case which generates a bunch of warnings.

The remaining warning are all related to the deprecation of ""handled"" on TryDefintion and DefaultErrorHandlerBuilder.   Will follow up on list about those.
hadrian:1303316246:2011-04-21T00:17:26.593+0000:1303316246:2011-04-21T00:17:26.593+0000:Done in r1095572. Thanks Dan for the patch.
davsclaus:1303341972:2011-04-21T07:26:12.114+0000:1303341972:2011-04-21T07:26:12.114+0000:Please do not change the unit tests.

Just because a method is marked as deprecated, do not mean we should not unit test it. Hence we should keep the unit tests as is."
0,CAMEL-3885,Bug,Major,"2.7.0, 2.7.1",2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-04-20 13:43:23+00:00,2011-04-20 14:11:01+00:00,"camel-spring and camel-core both export the org.apache.camel.language package which will cause some truble when OSGi resolve the bundle which imports this package. 
As the SpEL.java is not import any spring related class, an simple fixing is moving the SpEL.java into camel-core.",njiang:1303279861:2011-04-20T14:11:01.874+0000:1303279861:2011-04-20T14:11:01.874+0000:Applied patch into trunk.
0,CAMEL-3884,Improvement,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-20 10:40:18+00:00,2011-04-20 11:18:30+00:00,"See nabble
http://camel.465427.n5.nabble.com/GenericFileOperations-optimization-tp4315363p4315363.html",
0,CAMEL-3883,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Daniel Kulp,0,0,2011-04-20 02:28:17+00:00,2011-04-20 03:54:33+00:00,Jetty deprecated a bunch of methods.   We should update to use the non-deprecated versions.,hadrian:1303242873:2011-04-20T03:54:33.333+0000:1303242873:2011-04-20T03:54:33.333+0000:Patch applied in r1095261 with thanks to Dan Kulp.
0,CAMEL-3882,Improvement,Trivial,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Fernando Ribeiro,0,0,2011-04-19 22:15:31+00:00,2011-04-20 09:43:36+00:00,"Please find attached a small ""refresh"" of the example in the wiki page, which I have also updated today.",davsclaus:1303263816:2011-04-20T09:43:36.946+0000:1303263816:2011-04-20T09:43:36.946+0000:Thanks for the patch.
0,CAMEL-3881,Bug,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Daniel Kulp,0,0,2011-04-19 21:04:47+00:00,2011-04-20 03:04:42+00:00,"camel-spring no longer imports into eclipse as OsgiSpringCamelContext references OsgiTypeConverter which implements ServiceTrackerCustomizer.   The org.osgi.compendium jar isn't a dependency of camel-spring so the class cannot be found and eclipse gives an error.


Simple fix is to add a dependency to the pom:



    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.compendium</artifactId>
      <scope>provided</scope>
      <optional>true</optional>
    </dependency>","hadrian:1303239841:2011-04-20T03:04:01.443+0000:1303239841:2011-04-20T03:04:01.443+0000:Dan, thanks for reporting and for the patch.

hadrian:1303239882:2011-04-20T03:04:42.864+0000:1303239882:2011-04-20T03:04:42.864+0000:Patch applied in r1095258 with thanks to Dan Kulp."
0,CAMEL-3880,Test,Major,None,2.8.0,"

jms
osgi
replication
test

",Resolved,Fixed,2.8.0,Willem Jiang,Piotr Klimczak,0,0,2011-04-18 20:54:15+00:00,2011-05-19 09:38:13+00:00,"This patch provides the first working test of jms ehcache replication.
The test is a bit complicated as ehacache is not programmer friendly but proves that it is possible to use jms replication across many server nodes which is very powerful and secured functionality.


Please note, that to use this test you need to apply patches from:
https://issues.apache.org/jira/browse/CAMEL-3867 (camel-cache.cleanupAndLitenersRef.patch)
https://issues.apache.org/jira/browse/SMX4-809


Have a fun!","nannou9:1303866590:2011-04-27T09:09:50.036+0000:1303866590:2011-04-27T09:09:50.036+0000:Recreated patch to let it work with latest trunk changes
nannou9:1304547075:2011-05-05T06:11:15.606+0000:1304547075:2011-05-05T06:11:15.606+0000:You may need this: https://issues.apache.org/jira/browse/CAMEL-3939 to let it work, unless you already did it.
njiang:1305769093:2011-05-19T09:38:13.808+0000:1305769093:2011-05-19T09:38:13.808+0000:Applied patch with thanks to Piotr."
0,CAMEL-3879,Task,Major,2.8.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Carl Johan Erik Edstrom,0,1,2011-04-17 15:35:40+00:00,2011-05-19 09:33:54+00:00,No Desc,"njiang:1304020265:2011-04-29T03:51:05.179+0000:1304020265:2011-04-29T03:51:05.179+0000:There are bunch of tests failed, due to the CXF bus extension loading change since CXF 2.4.0.
This task should help camel-cxf support CXF 2.3.x and CXF 2.4.x at the same time.
dkulp:1304049763:2011-04-29T12:02:43.978+0000:1304049763:2011-04-29T12:02:43.978+0000:
Willem,

I attached a file that starts getting the camel/cxf transport updated to work properly with 2.4.   Right now, there are two tests failing with it.   However, when the tests run individually, they run fine.   There is a cleanup issue someplace, I just haven't had time yet to track that down.   Maybe later today or monday.




davsclaus:1304140330:2011-04-30T13:12:10.033+0000:1304140330:2011-04-30T13:12:10.033+0000:Upgraded the pom.xml to CXF 2.4.0 as the new blueprint stuff requires thath
njiang:1305768834:2011-05-19T09:33:54.322+0000:1305768834:2011-05-19T09:33:54.322+0000:current trunk is using CXF 2.4.0."
0,CAMEL-3878,Bug,Major,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-17 11:19:42+00:00,2013-05-02 02:29:38+00:00,"When stopping a route using .stopRoute from CamelContext or JMX etc. then the error handler should not be stopped if its a context scoped error handler, as it would be re-used.


We should defer stopping those resources till Camel is shutting down.",
0,CAMEL-3877,Bug,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-17 08:44:31+00:00,2011-10-25 11:35:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/Error-Handling-with-Spring-XML-tp4296920p4296920.html


I have reproduced the issue. Its only when you use a context scoped error handler. It works in all other situations. And only for XML DSL.",
0,CAMEL-3876,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-17 07:17:33+00:00,2011-04-17 07:19:38+00:00,"Jersey: http://jersey.java.net/
1.6 has been released. We should upgrade.",
0,CAMEL-3875,Test,Major,None,2.8.0,"

camel-cache
configuration
ehcache
osgi
reference
spring
test

",Resolved,Fixed,2.8.0,Claus Ibsen,Piotr Klimczak,0,0,2011-04-16 21:43:06+00:00,2011-04-17 07:39:59+00:00,"Testing is cacheManagerFactory is really referenced and is ehcache configured with the right xml file.


This test was mad to bug fix: https://issues.apache.org/jira/browse/CAMEL-3849


HAVE A FUN!","nannou9:1302961434:2011-04-16T21:43:54.024+0000:1302961434:2011-04-16T21:43:54.024+0000:A patch to camel-itest-osgi project
nannou9:1302966696:2011-04-16T23:11:36.600+0000:1302966696:2011-04-16T23:11:36.600+0000:Recreated again a i forgotten to attach one file to the patch- it happens :)
nannou9:1302967472:2011-04-16T23:24:32.885+0000:1302968584:2011-04-16T23:43:04.729+0000:works fine, ready to test'n'go :)
davsclaus:1302997199:2011-04-17T07:39:59.226+0000:1302997199:2011-04-17T07:39:59.226+0000:Thanks for the test."
0,CAMEL-3874,Improvement,Minor,2.7.0,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Preben Asmussen,0,0,2011-04-16 13:22:39+00:00,2011-04-19 07:49:53+00:00,"Add an optional awsSNSEndpoint to SNSComponent configuration options, so it is possible to specify SNS region. Default region will be us-east-1 if option is not specified. 


See http://camel.465427.n5.nabble.com/missing-region-property-in-aws-sns-component-td4303687.html


/Preben Asmussen","pax:1302931442:2011-04-16T13:24:02.605+0000:1302931442:2011-04-16T13:24:02.605+0000:aws-sns pacth
davsclaus:1302932251:2011-04-16T13:37:31.436+0000:1302932251:2011-04-16T13:37:31.436+0000:Christian this patch looks good to me. Any thoughts?
muellerc:1302944864:2011-04-16T17:07:44.123+0000:1302944864:2011-04-16T17:07:44.123+0000:I'm traveling and didn't had the chance to look into the patch. I will into it in the next one or two days.
muellerc:1303037684:2011-04-17T18:54:44.486+0000:1303037684:2011-04-17T18:54:44.486+0000:The patch also look s good for me. I would like to change the option from 'awsSNSEndpoint' to 'amazonSNSEndpoint' because we already have an option which starts with 'amazonXXX' and none option which starts with 'awsXXX'.

Because this features is also useful for the AWS-SQS and AQS-S3 component, I will also improve these.
muellerc:1303039028:2011-04-17T19:17:08.189+0000:1303039028:2011-04-17T19:17:08.189+0000:Committed r1094187
Thank you Preben Asmussen for the patch. Do you also consider to update the wiki pages and the Camel 2.8 release page?
davsclaus:1303081356:2011-04-18T07:02:36.521+0000:1303081356:2011-04-18T07:02:36.521+0000:Christian the new option should be documented on the AWS wiki pages
http://camel.apache.org/aws

And yeah you can also add a little note on the 2.8 release notes about this improvement.
pax:1303082262:2011-04-18T07:17:42.767+0000:1303082262:2011-04-18T07:17:42.767+0000:Christian it seems that I'm only able to add comments to the wiki page. If that's enough ill do it ?
muellerc:1303084561:2011-04-18T07:56:01.996+0000:1303084561:2011-04-18T07:56:01.996+0000:Preben, this is not enough. If you don't have the karma to edit the wiki pages, you will find the information how do get the karma here [1].
In the meantime, I will update the wiki page and release notes for Camel 2.8 for this issue.

[1] http://camel.apache.org/how-do-i-edit-the-website.html

Christian
pax:1303087463:2011-04-18T08:44:23.788+0000:1303087463:2011-04-18T08:44:23.788+0000:Thanks Christian. I'll get the karma when I get the time.
In the mean time I stumbled on another issue. There seems to be some kind of missing glue between the SNS and SQS component. Its not enough to create a SNS topic and a SQS queue and then link SNS to SQS queue using the aws gui. You have to set up a policy on the SQS queue that allows message posting.
I found the attached example that shows this in step 4.
What to do:
1. explain the matter on the SNS/SQS wiki.
2. Extend the SQS component with a property like amazonSNSTopicARN, and when the queue is created set the policy on the queue that allows message posting ?

I don't know if that's enough since the example also shows policy setup on the SNS topic. So far I ran the example on my aws account and it set up the SNS/SQS integration nicely.

What are your thoughts on the matter ?

pax:1303087528:2011-04-18T08:45:28.475+0000:1303087528:2011-04-18T08:45:28.475+0000:Demo of sns/sqs setup
muellerc:1303127549:2011-04-18T19:52:29.499+0000:1303127549:2011-04-18T19:52:29.499+0000:Preben, I also work on [CAMEL-3869|https://issues.apache.org/jira/browse/CAMEL-3869]. With this improvement you are able to setup the policy for the queue. This should resolve your issue.
I will also have a look into your example.
muellerc:1303127973:2011-04-18T19:59:33.540+0000:1303127973:2011-04-18T19:59:33.540+0000:Updated the wiki pages for aws-sqs, aqs-sns and aws-s3. Also updated the Camel 2.8 release notes.
muellerc:1303129639:2011-04-18T20:27:19.818+0000:1303129639:2011-04-18T20:27:19.818+0000:Preben, I list your sample comments and add my notes:

1. Create a topic
   Possible with the aws-sns component
2. Set policy on topic
   Not possible at present. But it should be possible in the same way as for the aws-sqs component. See [CAMEL-3869|https://issues.apache.org/jira/browse/CAMEL-3869]. Do we really need this step for this example?
3. Create a queue
   Possible with the aws-sqs component
4. Set the queue policy
   Not possible at present, but I work on it. See [CAMEL-3869|https://issues.apache.org/jira/browse/CAMEL-3869]
5. Subscribe the queue to the topic
   Not possible at present. We had some discussion in the past if this is a feature we should add to Camel. See [CAMEL-3476|https://issues.apache.org/jira/browse/CAMEL-3476]
6. Verification
   Not needed in Camel
7. Send a notification to the topic
   Possible with the aws-sns component
8. Receive the notification from the queue
   Possible with the aws-sqs component

For step 2 we need a new ticket (only if we need this step). Would you raise the JIRA for it?
So, only for step 5 we haven't a solution at present. Do you have an idea how a good solution could looks like?

Christian
muellerc:1303130010:2011-04-18T20:33:30.379+0000:1303130010:2011-04-18T20:33:30.379+0000:Preben, if we can cover all the steps with Camel, may be you can work out and provide an [Example|http://camel.apache.org/examples.html] for it?
pax:1303170593:2011-04-19T07:49:53.540+0000:1303170593:2011-04-19T07:49:53.540+0000:Christian 
2 should be covered using the aws gui, but I'm not totally convinced. I'll dig into it 
4 and 5 - might be solved if we added a property on SQS component = amazonSNSTopicARN = the sns topic used to set the policy on SQS queue. If the property is set we could create the queue, set the policy on the queue allowing message posting, and at the same time subscribe the queue to the topic. 
I'll have a go at it when I have a spare moment. The same goes for the example.

"
0,CAMEL-3873,Bug,Minor,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-16 12:45:18+00:00,2011-10-25 11:35:37+00:00,"See this stacktrace



14:10:55,806 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 72 - org.springframework.osgi.extender - 1.2.0 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=qbus-camel-osgi, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[xmpp://articleRoute@localhost?password=******&room=mechatron%40conference.mw-pc]. Reason: java.lang.NullPointerException
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:362)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:93)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.startProducer(ProducerCache.java:124)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:429)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:847)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:86)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:893)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:74)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:77)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:250)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:146)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1800)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1726)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1528)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1420)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1321)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1299)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:203)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:238)[75:org.apache.camel.camel-spring:2.6.0.fuse-01-09]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[61:org.springframework.context:3.0.5.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[71:org.springframework.osgi.core:1.2.0]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)[72:org.springframework.osgi.extender:1.2.0]
	at java.lang.Thread.run(Thread.java:619)[:1.6.0_14]
Caused by: java.lang.NullPointerException
	at org.jivesoftware.smackx.muc.MultiUserChat$1.connectionCreated(MultiUserChat.java:84)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.initConnection(XMPPConnection.java:957)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connectUsingConfiguration(XMPPConnection.java:904)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:1415)[247:org.apache.servicemix.bundles.smack:3.1.0.2]
	at org.apache.camel.component.xmpp.XmppEndpoint.createConnection(XmppEndpoint.java:140)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.doStart(XmppGroupChatProducer.java:76)[248:org.apache.camel.camel-xmpp:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:65)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:360)[68:org.apache.camel.camel-core:2.6.0.fuse-01-09]
	... 65 more",
0,CAMEL-3872,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Cannot Reproduce,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-16 07:04:24+00:00,2011-10-25 11:35:42+00:00,"See nabble. We have improved bindy, but I don't think we did that in 2.7, so the issue may still be on trunk. So check it out.
http://camel.465427.n5.nabble.com/Camel-Bindy-problem-with-separator-td4306927.html",davsclaus:1302933275:2011-04-16T13:54:35.182+0000:1302933275:2011-04-16T13:54:35.182+0000:Already fixed as part of Camel 2.7.
0,CAMEL-3871,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-15 14:24:28+00:00,2011-04-15 14:49:23+00:00,"When using INFO logging Camel should be less verbose when shutting down.
It should log at INFO level



starting
when a route has been shutdown/suspended and from where it was consuming
pending messages in progress
shutdown complete



Then you have the activity. If you need more visibility then use DEBUG level on the class.",
0,CAMEL-3870,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Kris De Schutter,11,7,2011-04-15 09:53:19+00:00,2022-09-02 08:35:24+00:00,"Cfr. http://camel.465427.n5.nabble.com/reusable-onexceptions-td4304909.html


I can reuse route definitions by putting them in a <routeContext> and then referring to them. I would like to do the same with <onException> definitions.


The context I'm working in is one where we define routes by composing reusable route definitions. This works well, but I find that we have to duplicate the more general <onException> handlers. I was hoping that I could reuse their definitions as well.","davsclaus:1369864554:2013-05-30T05:55:54.155+0000:1369864554:2013-05-30T05:55:54.155+0000:See also
http://stackoverflow.com/questions/16735282/is-it-possible-to-use-both-routecontextref-and-dataformats-elements-in-a-camelco

We should also add support for <dataFormats> etc
davsclaus:1572246050:2019-10-28T15:00:50.817+0000:1572246050:2019-10-28T15:00:50.817+0000:This is tied to camel-spring for XML which is a bit heavy. So if/when we look into this, then lets see if we can get a model of this that is not tied to spring xml so it can be loaded via camel-main as well.
davsclaus:1662078920:2022-09-02T08:35:20.269+0000:1662078920:2022-09-02T08:35:20.269+0000:You can use route configuration
https://camel.apache.org/manual/route-configuration.html"
0,CAMEL-3869,Improvement,Minor,2.7.1,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Sean Parsons,0,2,2011-04-15 09:50:46+00:00,2012-08-21 19:03:10+00:00,"We wished to have the ability to control the MaximumMessageSize and MessageRetentionPeriod through Camel, as otherwise it requires some external process to update those values after the queues have been created.  Documentation of these options is here: http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/APIReference/Query_QuerySetQueueAttributes.html


So far this only sets those settings, but it should be easy to update it with the others that are supported by SetQueueAttributes. I made some moderate tweaks along the way but nothing groundbreaking, the only thing I'm not sure about is my adding of those attribute names to SqsConstants.","seanparsons:1302832493:2011-04-15T09:54:53.944+0000:1302832493:2011-04-15T09:54:53.944+0000:Patch file for SQS attributes.
muellerc:1303127426:2011-04-18T19:50:26.658+0000:1303127426:2011-04-18T19:50:26.658+0000:Sean, I will also add the policy queue attribute. It works in the same way like maximumMessageSize and messageRetentionPeriod.
seanparsons:1303127665:2011-04-18T19:54:25.840+0000:1303127665:2011-04-18T19:54:25.840+0000:Makes sense to throw the VisibilityTimeout in there as well then I'd be tempted to say.
muellerc:1303130264:2011-04-18T20:37:44.005+0000:1303130264:2011-04-18T20:37:44.005+0000:I thought this also, but you can set the defaultVisibilityTimeout directly in the CreateQueueRequest. Do you think we still need it?
seanparsons:1303130424:2011-04-18T20:40:24.498+0000:1303130424:2011-04-18T20:40:24.498+0000:Ah, in that case I shouldn't think so then.
seanparsons:1303179027:2011-04-19T10:10:27.738+0000:1303179027:2011-04-19T10:10:27.738+0000:After having a conversation with someone here and looking at the documentation for the CreateQueue call, it would appear that DefaultVisibilityTimeout only has an effect when the queue is created. So if at a later date it was required to extend it, with the current Camel implementation that would only be possible if the queue was deleted, which is a bad idea. In fact, checking the documentation, that will cause an error:
""Exception: if you provide a value for DefaultVisibilityTimeout that is different from the value for the existing queue, you receive an error.""

Implies what it should do is only update the visibility timeout through SetQueueAttributes as that will work with existing queues as well as queues that have only just been created.
muellerc:1303191255:2011-04-19T13:34:15.754+0000:1303191255:2011-04-19T13:34:15.754+0000:Ok, thanks for this information. I will take it into account.
muellerc:1305445205:2011-05-15T15:40:05.185+0000:1305445205:2011-05-15T15:40:05.185+0000:Sean, I end up with three different visibility timeouts:

defaultVisibilityTimeout: The visibility timeout to set in the CreateQueueRequest.
visibilityTimeout: The duration that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request to set in the SetQueueAttributesRequest. Changes the queue attribute permanently.
messageVisibilityTimeout: The duration that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request to set in the ReceiveMessageRequest. Does *NOT* changes the queue attribute permanently.

Make this also sense for you?

Christian
muellerc:1305445640:2011-05-15T15:47:20.389+0000:1305445640:2011-05-15T15:47:20.389+0000:Committed r1103434
muellerc:1305446403:2011-05-15T16:00:03.198+0000:1305446403:2011-05-15T16:00:03.198+0000:Update the pages:
- https://cwiki.apache.org/confluence/display/CAMEL/AWS-SQS
- https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.8.0+Release
davsclaus:1305498599:2011-05-16T06:29:59.593+0000:1305498599:2011-05-16T06:29:59.593+0000:Christian remember to add a *Camel 2.8:* in the table description, in the wiki pages, so people can see that the option is new in Camel 2.8 onwards.
muellerc:1305502072:2011-05-16T07:27:52.529+0000:1305502072:2011-05-16T07:27:52.529+0000:Thanks for pointing this out. I updated the wiki page.
lpezet:1340887630:2012-06-28T20:47:10.256+0000:1340887630:2012-06-28T20:47:10.256+0000:Hi,

This fix has been applied to Camel 2.8?
I must be looking at the wrong thing (or I need another pair of glasses) cause I don't see ""defaultVisibilityTimeout"" being used when doing the CreateQueue here:
https://svn.apache.org/repos/asf/camel/branches/camel-2.8.x/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
(same in trunk by the way).

A comment then...why not using ListQueue (setting the queue name prefix in the ListQueueRequest) instead to get the URL?


Thanks,
Luc.
lpezet:1340887710:2012-06-28T20:48:30.790+0000:1340887710:2012-06-28T20:48:30.790+0000:Same thing in 2.9 by the way: https://svn.apache.org/repos/asf/camel/branches/camel-2.9.x/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java
muellerc:1340889648:2012-06-28T21:20:48.153+0000:1340889648:2012-06-28T21:20:48.153+0000:Look here: https://svn.apache.org/repos/asf/camel/branches/camel-2.8.x/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConfiguration.java
muellerc:1340889909:2012-06-28T21:25:09.085+0000:1340889909:2012-06-28T21:25:09.085+0000:Instead of what?
The CreateQueueResult returns the URL. Calling ListQueue would be an additional call which is not necessary, as far as I understand it.
lpezet:1340890491:2012-06-28T21:34:51.826+0000:1340890491:2012-06-28T21:34:51.826+0000:Right, it's in the configuration class...but if it's not used, what good does it do? ;)
{quote}
 CreateQueueRequest request = new CreateQueueRequest(configuration.getQueueName());
 ...
 CreateQueueResult queueResult = client.createQueue(request);
 queueUrl = queueResult.getQueueUrl();
{quote}
will give an error if the visibility timeout of the queue ""configuration.getQueueName()"" is different from the default one.
A (wrong I believe) fix would be:
{quote}
 CreateQueueRequest request = new CreateQueueRequest(configuration.getQueueName());
 request.setDefaultVisibilityTimeout(configuration.getDefaultVisibilityTimeout());
 ...
 CreateQueueResult queueResult = client.createQueue(request);
 queueUrl = queueResult.getQueueUrl();
{quote}
Now, after the creation of the queue, it seems the logic is to try to apply the defaultVisibilityTimeout to the created/existing queue:
{quote}
 if (getConfiguration().getDefaultVisibilityTimeout() != null) {
    updateAttribute(""VisibilityTimeout"", getConfiguration().getDefaultVisibilityTimeout());
 }
{quote}

So if the idea is to be able to set the default visibility timeout to a queue (newly created or existing), then a ListQueues is necessary I think.

Here's what I would suggest:
{quote}
  ListQueuesRequest request = new ListQueuesRequest
  r.setQueueNamePrefix(configuration.getQueueName());
  ListQueuesResponse response = client.listQueues(request);
  queueUrl = response.getQueueUrls().get(0); // NB: may want to check a little more here
  ...
{quote}

The rest of the code would remain the same.

What do you think?
lpezet:1340890741:2012-06-28T21:39:01.054+0000:1340890741:2012-06-28T21:39:01.054+0000:in the ""NB"" I mentioned, a check (or a couple) would be used to decide whether to create the queue or not, in which case a CreateQueue would be necessary.
muellerc:1345469288:2012-08-20T21:28:08.020+0000:1345469288:2012-08-20T21:28:08.020+0000:there is no API to call
{code}
request.setDefaultVisibilityTimeout(configuration.getDefaultVisibilityTimeout());
{code}

See http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html on how to set the visibility timeout on an existing queue.
lpezet:1345483461:2012-08-21T01:24:21.094+0000:1345483461:2012-08-21T01:24:21.094+0000:Sorry it was an old version of the AWS SDK I was using.
From the link you mentioned, at the bottom of the page, it explains how to set the visibility timeout of the queue (need to pass attributes as a Map<String,String>).

It should be something like:
{noformat}
request.getAttributes().put(QueueAttributeName.VisibilityTimeout.name(), ""45"");
{/noformat}
muellerc:1345545382:2012-08-21T18:36:22.543+0000:1345545382:2012-08-21T18:36:22.543+0000:Yes, that's true. I found a more detailed/clear documentation here: http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/APIReference/Query_QueryCreateQueue.html
Will update the implementation now...
muellerc:1345546990:2012-08-21T19:03:10.880+0000:1345546990:2012-08-21T19:03:10.880+0000:Will improve the camel-aws component CAMEL-5528"
0,CAMEL-3868,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Alexis Kinsella,0,1,2011-04-14 23:01:39+00:00,2013-05-02 02:29:38+00:00,"I've writen a new component to interface with Apple Push Notification Server. It enables to push notifications to iOS devices (iPod Touch, iPhone, iPad), and also to get feedback from APNS.


The component uses Apache 2.0 as it's license. You can find more infos at : http://code.google.com/p/camel-apns/ (A little bit deprecated, due to little refactorings to be compatible with project acceptance criterias).


I have completely adapted component to apache camel project rules. I hope patch provided is OK.


Let me know if I need to change things. I'll make needed adjustments in case.


It also uses some underlying library: java-apns available on git hub, on following project: https://github.com/notnoop/java-apns


That library is compatible with Apache 2.0 license: It uses New BSD License. Author explicitly validated use with Apache Camel in some mail exchange with Claus.


The repository is: https://github.com/notnoop/m2-repo/raw/gh-page","alexiskinsella:1302793453:2011-04-14T23:04:13.836+0000:1302793490:2011-04-14T23:04:50.685+0000:The patch file has been created on the root of the project
alexiskinsella:1302796543:2011-04-14T23:55:43.992+0000:1302796543:2011-04-14T23:55:43.992+0000:I'm not sure, if a had to add dependency to platforms/karaf/features or not. I have added it to parent/pom.xml as a simple dependency.
alexiskinsella:1302796911:2011-04-15T00:01:51.604+0000:1302796911:2011-04-15T00:01:51.604+0000:I just added patch for feature, but I'm absolutly not sure of what to do for step 6 of http://camel.apache.org/add-new-component-guide.html
davsclaus:1307356173:2011-06-06T18:29:33.190+0000:1307356173:2011-06-06T18:29:33.190+0000:Alexis do you mind helping with the documentation?

We need a wiki page in the style of:
http://camel.apache.org/atom.html

If possible you can attach a .txt file with the rough details. Then I can add it into the wiki.
davsclaus:1307356198:2011-06-06T18:29:58.344+0000:1307356198:2011-06-06T18:29:58.344+0000:camel-apns added to source code. Thanks Alexis for the donation.
alexiskinsella:1307370379:2011-06-06T22:26:19.312+0000:1307370443:2011-06-06T22:27:23.856+0000:Hi, I just added a documentation for camel-apns component as an attachment. 
It is already formatted with confluence page format.

Hope it will fit.
alexiskinsella:1307370622:2011-06-06T22:30:22.406+0000:1307370673:2011-06-06T22:31:13.260+0000:Just fixed license term from the sample of documentation - Sorry for the oops.

Please take the attachment with timestamp at 10:30PM
davsclaus:1307398149:2011-06-07T06:09:09.450+0000:1307398149:2011-06-07T06:09:09.450+0000:Alexis, thanks for the documentation. I have added a page
https://cwiki.apache.org/confluence/display/CAMEL/APNS

I wonder why the default values are so high? 3600 seconds for polling the reply, isn't that long? Can you explain a bit more about those values?
alexiskinsella:1307401532:2011-06-07T07:05:32.755+0000:1307401532:2011-06-07T07:05:32.755+0000:Hi,

The consumer is configured with 3600 seconds for polling by default because it is a best practice to consume feedback stream from Apple Push Notification Servers only from time to time. For example: every 1 hour to avoid flooding the servers.

The feedback stream gives informations about inactive devices. You only need to get this informations every some hours if your mobile application is not a heavily used one.

rkettelerij:1307444907:2011-06-07T19:08:27.416+0000:1307444907:2011-06-07T19:08:27.416+0000:Fixed minor auto-discovery issue. Trunk: 1133132
davsclaus:1307564218:2011-06-09T04:16:58.222+0000:1307564218:2011-06-09T04:16:58.222+0000:Thanks for the explanation. I added it to the wiki. As well a link to your blog about using APNS with Camel as well so people can more easily spot it. 

Thanks for the donation."
0,CAMEL-3867,Improvement,Minor,None,2.8.0,"

camel-cache
ehcache
improvement
listener
replication

",Resolved,Fixed,2.8.0,Willem Jiang,Piotr Klimczak,0,0,2011-04-14 21:54:15+00:00,2011-05-19 09:37:24+00:00,"The thing is, that cache names can be a dynamic list. But ehcache is expecting to get static list (known before start) on it's xml configuration file. Ehcache provides some defaults config. for new caches with some exceptions. One of them are cache listeners (like replication listeners).
So the thing is, to give ability to define listeners and cache loaders (via spring/blueprint ref.) during endpoint construction.
This will ease configuration of listeners/loaders as xml static list of listeners (per cache) will not be needed anymore. Instead of very long list which you have to keep up to date, you could define one list of listeners/loaders for all cache endpoints!


SO SIMPLE!","nannou9:1302789391:2011-04-14T21:56:31.349+0000:1302789650:2011-04-14T22:00:50.208+0000:In my opinion it will be really useful. And of course I'll prepare the patch soon :)
For now configuring ehcache is very painful as there is no wildcards.

BTW. How can i change the docs or make a patch to Apache docs?
davsclaus:1302844128:2011-04-15T13:08:48.866+0000:1302844128:2011-04-15T13:08:48.866+0000:See here about improving docs
http://camel.apache.org/contributing.html
nannou9:1303003801:2011-04-17T09:30:01.811+0000:1303003801:2011-04-17T09:30:01.811+0000:I've made a little more changes- I've done some code cleanup.
I do understand that code cleanups are dificult to analize but it is still better option than improving bad code.

Here is the list what I've done in this patch:
- added URI configuration option named: eventListenerRegistry which is a ref to CacheEventListenerRegistry type
- added unit test to test event listener behaviour- to make sure that referenced listeners are invoked (CacheEventListenerRegistryTest)
- cleaned up consumer and producer by moving same code do the CacheEndpoint
- removed cache stop from consumer/producer and moved to the endpoint- as I understand the camel it will prevent removing cache when route is stopped manually.
- added unit test to test route manual shutdown and cache being still alive

If you don't like those changes, then please give me a sign.

Plese note that i did not want to divide it to 2 improvements as it'll be quite complicated.
Plese also note that applying this patch to trunk will casuse the my last osgi unit test to stop working, as the cache manager factory will not be initialized until first routing will be done.

Will attach a patch soon.
Should I make new issue for that? or simply attach a patch to itest here?


Hope you like it :)
HAVE A FUN!
davsclaus:1303004141:2011-04-17T09:35:41.398+0000:1303004141:2011-04-17T09:35:41.398+0000:Keep 'em coming Piotr. Its fine to just attach a 2nd patch for the change in that other test.
I will review and apply this patch in a bit.
nannou9:1303004436:2011-04-17T09:40:36.352+0000:1303004436:2011-04-17T09:40:36.352+0000:Patch to osgi test cases due to start/stop logic change. Now test will do some route before any assertion
nannou9:1303004673:2011-04-17T09:44:33.062+0000:1303004673:2011-04-17T09:44:33.062+0000:An OSGi copy of camel-cache unit test that test manual shutdown cache route.
Apply it if you want'em more (i mean more osgi tests :))
nannou9:1303005876:2011-04-17T10:04:36.345+0000:1303005876:2011-04-17T10:04:36.345+0000:This patch is a continuation of bringing camel-cache to clustered world. I guess 75% is already done. Those 25% is:
- making a patch to smx ehcache bundle (done but patch not prepared yet, will upload the patch in parallel with below osgi unit test)
- provide osgi unit test to test jms replication (not started yet)

Then I will prepare a working example for tutorial purpose and of course a full tutorial telling about how to use ehcache and replication in real life :)
nannou9:1303008543:2011-04-17T10:49:03.287+0000:1303008543:2011-04-17T10:49:03.287+0000:CacheLoaders are also needed. The patch needs small reworking.
nannou9:1303010646:2011-04-17T11:24:06.846+0000:1303010646:2011-04-17T11:24:06.846+0000:reworked adding cacheLoaderRegistry.
Also fixed 1 possible patch conflict on eventListenereRegistry.
davsclaus:1303025528:2011-04-17T15:32:08.264+0000:1303025528:2011-04-17T15:32:08.264+0000:Piotr do you mind summarize which patches is needed to be applied (based on whats diff from the trunk). Just to be sure we do it right.
nannou9:1303031385:2011-04-17T17:09:45.637+0000:1303031385:2011-04-17T17:09:45.637+0000:Summary
All files are diffs to current trunk, where

1. camel-cache.cleanupAndLitenersRef.patch- apply to https://svn.apache.org/repos/asf/camel/trunk/components/camel-cache
contains: 
    * added URI configuration option named: eventListenerRegistry which is a ref to CacheEventListenerRegistry type
    * added URI configuration option named: cacheLoaderRegistry which is a ref to CacheLoaderRegistry type
    * added unit test to test cache event listener/loader behaviour- to make sure that referenced listeners/loaders are invoked
    * cleaned up consumer and producer by moving same code do the CacheEndpoint
    * removed cache stop from consumer/producer and moved to the endpoint- as I understand the camel it will prevent removing cache when route is stopped manually.
    * added unit test to test route manual shutdown and cache being still alive

2. camel-itest-osgi.CacheRouteManagementTest.patch- osgi test of manual managing routes (manual shutdown test using context.stopRoute).
3. camel-itest-osgi.CacheManagerFactoryRefTest.patch- simple osgi test of referencing CacheManagerFactory and configuring ehcache using xml file.

The 2. and 3. both are optional and if you want to apply them to: https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi
both adds osgi unit test

That's it.


But there is still one thing that puzzles me, it is:
* added URI configuration option named: cacheLoaderRegistry which is a ref to CacheLoaderRegistry type
During writing an osgi test for jms replication i have found that the cacheLoaderRegistry will be more usable with some more improvements.
So we have 2 options now:
a) we will wait until i will write fully working jms replication osgi unit test (using cacheLoaders and cacheEventListeners)
b) you can apply the patch to trun and then will wait for another patch.

Decision is your. Just teake a look at the code.
nannou9:1303033973:2011-04-17T17:52:53.582+0000:1303034045:2011-04-17T17:54:05.133+0000:If my summary is not sufficient, please do not hesitate to ask me about anything...

BTW. It would be much easier for all if I could work on my own branch :)
nannou9:1303130376:2011-04-18T20:39:36.034+0000:1303130426:2011-04-18T20:40:26.549+0000:Final version as got jms replication working with osgi test.
Please note that this patch do not contains any jms replication functionality. It is just prepared to let you do it using spring ref functionality.

Sorry for uploading same file many times. Working at nights is not a good idea for longer period of time.

Please let me know if you have any questions.
nannou9:1303132060:2011-04-18T21:07:40.992+0000:1303132060:2011-04-18T21:07:40.992+0000:This patch is needed by: https://issues.apache.org/jira/browse/CAMEL-3880

To finalize all I will prepare changes in camel-cache component documentation soon.
The latest step will be a full tutorial.

Have a FUN! :)
davsclaus:1303435201:2011-04-22T09:20:01.462+0000:1303435201:2011-04-22T09:20:01.462+0000:There has been some changes on trunk in camel-cache in terms of cache keys.

Do you mind re-creating patches from trunk?
nannou9:1303860028:2011-04-27T07:20:28.486+0000:1304506594:2011-05-04T18:56:34.653+0000:No problem. Will do that this afternoon.
I'm very happy to see some activity here :)

BTW. I did not received an email with your comment :/ Found Ben O'Day changes accidentally. So i guess it is better idea to periodically review unresolved issues than waiting for email notification.
nannou9:1303863880:2011-04-27T08:24:40.652+0000:1303866639:2011-04-27T09:10:39.284+0000:Recreated patches to let it work with latest trunk changes.

Have a FUN! :)
nannou9:1304570942:2011-05-05T12:49:02.937+0000:1304570942:2011-05-05T12:49:02.937+0000:Now i can say i am very happy :)
Thank you guys!

One more thing. I am going to edit camel-cache docs, i have already sent ICLA to apache and send an information to camel dev forum. What else do i have to do to be able to edit great apache docs? :)

Thanks in advance!
nannou9:1304571105:2011-05-05T12:51:45.218+0000:1304571105:2011-05-05T12:51:45.218+0000:Please note that i already have a confluence account but when i click edit on the bottom of page I get: Not Permitted.
davsclaus:1304571407:2011-05-05T12:56:47.791+0000:1304571407:2011-05-05T12:56:47.791+0000:Whats your username on confluence? I can assign you karma so you can edit.
nannou9:1304571866:2011-05-05T13:04:26.888+0000:1304571866:2011-05-05T13:04:26.888+0000:Thanks Claus for response! :)
My username on confluence is: nannou9
Same as in JIRA.
davsclaus:1304572348:2011-05-05T13:12:28.281+0000:1304572348:2011-05-05T13:12:28.281+0000:Piotr can you point out your name on the Apache CLA site?
http://people.apache.org/committer-index.html#unlistedclas
nannou9:1304573573:2011-05-05T13:32:53.019+0000:1304573573:2011-05-05T13:32:53.019+0000:Well, i am not listed there yet. Not sure why.
I have received a message from Sam Ruby that my ICLA was filed in ASF records and I should advise the project PMC.

Do you have any idea why am i not listed yet?
njiang:1305769044:2011-05-19T09:37:24.473+0000:1305769044:2011-05-19T09:37:24.473+0000:Applied patch with thanks to Piotr.
"
0,CAMEL-3866,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-14 18:48:06+00:00,2011-04-14 19:33:51+00:00,This option should be required to indicate the upper bound for the throttling. Currently there wasn't such a check that this option was provided on the model.,
0,CAMEL-3865,Bug,Major,2.7.0,,"
None
",Resolved,Cannot Reproduce,None,Willem Jiang,Clifton Eaton,0,0,2011-04-14 17:56:37+00:00,2011-07-11 07:41:37+00:00,"FallbackTypeConverter method throws JAXBException when marshalling nested, non-ObjectFactory, JAXB annotated, classes. These are  classes that are annotated with the @XmlRootElement, but not generated using XJC, so there is no ObjectFactory class for them.  The intention is to provide the package names containing the jaxb.index files to build the context.  


FallbackTypeConverter does not marshal or unmarshal using the package names, but rather uses the value's Class as the context.  Thus everytime a JAXB annotated object contains another JAXB annotated object, there is an exception that looks like this:


Caused by: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: com.foo.bar.MyObject@15e6463]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1155)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:93)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:190)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:101)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:73)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:74)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:136)
	... 39 more
Caused by: javax.xml.bind.MarshalException



with linked exception:
[javax.xml.bind.JAXBException: class com.foo.bar.nested.MyNested nor any of its super class is known to this context.]
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:318)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:96)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:174)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:88)
	... 47 more
Caused by: javax.xml.bind.JAXBException: class com.foo.bar.nested.MyNested nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:246)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.reportError(XMLSerializer.java:261)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:653)
	at com.sun.xml.bind.v2.runtime.property.SingleMapNodeProperty.serializeBody(SingleMapNodeProperty.java:272)
	at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeBody(ClassBeanInfoImpl.java:340)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsSoleContent(XMLSerializer.java:593)
	at com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl.serializeRoot(ClassBeanInfoImpl.java:324)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:494)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315)
	... 51 more
Caused by: javax.xml.bind.JAXBException: class com.foo.bar.nested.MyNested nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsXsiType(XMLSerializer.java:648)
	... 57 more","davsclaus:1302781126:2011-04-14T19:38:46.198+0000:1302781126:2011-04-14T19:38:46.198+0000:Can you provide an unit test which reproduces this?
njiang:1302821261:2011-04-15T06:47:41.816+0000:1302825059:2011-04-15T07:50:59.936+0000:Hi,

The FallbackTypeConverter just create a JAXB context based on the type class that is annotated with @XmlRootElement,the jaxb context doesn't has all the packages class, but JAXB will add all the types thats relates to this types class.
I just committed [a small unit test|http://svn.apache.org/viewvc?rev=1092615&view=rev] to reproducer the error, but I had no luck with it. Maybe you can consider to add some annotation to work around this issue.

If you want to camel marshal and unmarshal the data rightly, you can use JAXB data format directly, and you can set up other JAXB context options that you want.
Here is the example:
{code}
      <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:marshal""/>
            <marshal>
                <jaxb prettyPrint=""false"" contextPath=""org.apache.camel.example""
                    partClass=""org.apache.camel.example.PurchaseOrder""
                    partNamespace=""{http://example.camel.org/apache}po"" />
            </marshal>
            <to uri=""mock:marshal""/>
        </route>
        <route>
            <from uri=""direct:unmarshal""/>
            <unmarshal>
                <jaxb prettyPrint=""false"" contextPath=""org.apache.camel.example""
                    partClass=""org.apache.camel.example.Partial"" />
            </unmarshal>
            <to uri=""mock:unmarshal""/>
        </route>
    </camelContext> 
{code}
davsclaus:1310257737:2011-07-10T08:28:57.347+0000:1310257737:2011-07-10T08:28:57.347+0000:Willem whats the status of this? Seems like the end user should use that partClass stuff in the dataformat
njiang:1310341284:2011-07-11T07:41:24.466+0000:1310341284:2011-07-11T07:41:24.466+0000:
The user never send any other comments on the JIRA, I did some test on the annotated classes with jaxb.index.
It looks like the camel-jaxb can pick up the CamelContext rightly from the class rightly.

So I close this issue with can not reproduce. "
0,CAMEL-3864,Improvement,Minor,"2.6.0, 2.7.0, 2.7.1",2.8.0,"

camel-cache
configuration
default
ehcache

",Resolved,Fixed,2.8.0,Claus Ibsen,Piotr Klimczak,0,0,2011-04-14 17:11:50+00:00,2011-04-16 12:19:08+00:00,The file ehcache.xml which is the default configuration file for ehcache initialized by camel-cache component contains deprecated description about jms replication.,"nannou9:1302772493:2011-04-14T17:14:53.333+0000:1302772493:2011-04-14T17:14:53.333+0000:I will prepare the patch and post it soon. Please note that example files at ehcache homepage are deprecated too :). How do i know that? I have tested it in real life with newest versions and have seen it's source code ;)
nannou9:1302924169:2011-04-16T11:22:49.724+0000:1302924169:2011-04-16T11:22:49.724+0000:Fixed JMSCacheManagerPeerProviderFactory parameters names.

Note that i have found many posts across internet posted by people asking why it doesn't work as they have followed docs/examples etc. Simply it doesn't work because parameter have been renamed. Putting wrong parameter names causes NPE on put method to InitialContext which tells nothing about the real problem making it difficult to solve.

This update will save your time as studying ehcache code (wondering what's wrong) is no more needed.
davsclaus:1302927548:2011-04-16T12:19:08.376+0000:1302927548:2011-04-16T12:19:08.376+0000:Thanks for the patch."
0,CAMEL-3863,Improvement,Major,2.8.0,,"

bundle
camel-cache
clustering
ehcache
improvement
jms
replication

",Closed,Duplicate,None,Unassigned,Piotr Klimczak,0,0,2011-04-14 17:01:09+00:00,2011-04-16 13:11:18+00:00,"It would be great to add ehcache-jmsreplication to ehcache smx bundle to let cluster- lovers create cache clusters with jms replicatons. It is safer tha plain multicast with rmi as jms connection could be password protected.
I have already made that improvement to my local SMX. Will post the patch as soon as it will be polished 


Again- one step closer to bring camel-cache to java- clustered world 


cya","nannou9:1302771813:2011-04-14T17:03:33.540+0000:1302771813:2011-04-14T17:03:33.540+0000:Would be great to see this in 2.8 version :)
nannou9:1302930608:2011-04-16T13:10:08.535+0000:1302930608:2011-04-16T13:10:08.535+0000:I have realized that this is a servicemix ehcache bundle improvement than directly a camel-cache one. But the fact is that attaching jms replication to ehcache bundle will improve the camel-cache functionality to work in replicated cluster via jms.
nannou9:1302930678:2011-04-16T13:11:18.874+0000:1302930678:2011-04-16T13:11:18.874+0000:Take a looke at my SMX improvement: https://issues.apache.org/jira/browse/SMX4-809."
0,CAMEL-3862,Bug,Major,"2.6.0, 2.7.0, 2.7.1","2.7.2, 2.8.0","

camel-cache
cluster
jms
replication

",Closed,Fixed,"2.7.2, 2.8.0",Claus Ibsen,Piotr Klimczak,0,0,2011-04-14 16:51:06+00:00,2011-10-25 11:36:06+00:00,Cache replication across cluster nodes doesn't work using jms or rmi replication.,"nannou9:1302771115:2011-04-14T16:51:55.381+0000:1302772980:2011-04-14T17:23:00.186+0000:I have already solved the problem. I will be happy to see my fix in 2.8 version :). Will post a patch soon as it needs to be polished. 
Another step closer to bring camel-cache to java- clustered world :)

BTW. I guess i am the very first person who get cache cluster to work using camel-cache component as this bug was not reported/fixed before :)
nannou9:1302923081:2011-04-16T11:04:41.898+0000:1302923081:2011-04-16T11:04:41.898+0000:Replication doesn't work before, because a second parameter of put,remove methods which was kind of ignore- listeners was set to true.

What was fixed:
- now you can replicate your cache across nodes using listeners

Of course it was tested in real life and using standard test cases
nannou9:1302923183:2011-04-16T11:06:23.423+0000:1302923183:2011-04-16T11:06:23.423+0000:Did not granted license to ASF before, so uploading again :)

Note that end lines are unix- like
davsclaus:1302927680:2011-04-16T12:21:20.575+0000:1302927680:2011-04-16T12:21:20.575+0000:Thanks for the patch."
0,CAMEL-3861,Bug,Minor,2.7.0,"2.7.2, 2.8.0","
None
",Closed,Fixed,"2.7.2, 2.8.0",Claus Ibsen,Claus Ibsen,0,0,2011-04-14 08:54:27+00:00,2011-10-25 11:35:40+00:00,"You get a NPE if you brows the endpoint.


Caused by: 
java.lang.NullPointerException
        at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:46)
        at org.apache.camel.web.resources.$scalate$ExchangeResource_index_ssp$$anonfun$$scalate$render$2.apply(ExchangeResource.index.ssp.scala:40)
        at scala.collection.Iterator$class.foreach(Iterator.scala:631)",
0,CAMEL-3860,Bug,Major,"2.4.0, 2.5.0, 2.6.0, 2.7.0, 2.7.1",None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Willem Jiang,0,0,2011-04-14 04:31:48+00:00,2011-10-25 11:36:16+00:00,"As CXFRS producer can't deal with the HttpQuery from the Exchange.HTTP_QUERY message header, the camel-cxfrs router can't route the http get request with query rightly.
Here is the mail thread[1] which talks about it.


[1]http://camel.465427.n5.nabble.com/CXF-RS-QueryParam-and-HeaderParam-tp4301808p4301808.html",
0,CAMEL-3859,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Willem Jiang,0,0,2011-04-14 03:17:45+00:00,2011-04-14 09:38:25+00:00,"Here is the mail thread[1] which discuss about it.
[1]http://camel.465427.n5.nabble.com/Custom-Exchange-ID-tp4300720p4300938.html","davsclaus:1302729653:2011-04-14T05:20:53.942+0000:1302729653:2011-04-14T05:20:53.942+0000:There are 2 ids's. So there was a misunderstanding. See the mail thread.
davsclaus:1302740208:2011-04-14T08:16:48.992+0000:1302740208:2011-04-14T08:16:48.992+0000:See CAMEL-1375 where James introduced this behavior.

Today the exchange ids is based on AMQ ids. So we should be good to remove this behavior.
But check camel-web console works browsing messages from JMS before and after the change so you know it wont affect that console.
davsclaus:1302743392:2011-04-14T09:09:52.432+0000:1302743392:2011-04-14T09:09:52.432+0000:We will remove the createExchangeId code from JmsMessage so all exchange id is generated the same, and thus it supports the pluggable generator.

CAMEL-1375 was about urls in camel web console. I have double checked that this change still works in camel-web.
davsclaus:1302745073:2011-04-14T09:37:53.233+0000:1302745073:2011-04-14T09:37:53.233+0000:JmsMessage now dont affect exchange id.

In fact I have marked the createExchangeId method as @deprecated."
0,CAMEL-3858,Task,Minor,2.7.0,"2.7.2, 2.8.0","
None
",Closed,Fixed,"2.7.2, 2.8.0",Claus Ibsen,Claus Ibsen,1,0,2011-04-13 13:50:27+00:00,2011-10-25 11:36:22+00:00,"See CAMEL-3856


We should double check all Camel components and fix those who uses multiple packages as the maven felix bundle plugin generates wrong manifest data.","davsclaus:1302676140:2011-04-13T14:29:00.815+0000:1302676140:2011-04-13T14:29:00.815+0000:The following components was fixed
       components/camel-routebox/pom.xml
       components/camel-lucene/pom.xml
       components/camel-quartz/pom.xml
       components/camel-josql/pom.xml
       components/camel-msv/pom.xml
       components/camel-crypto/pom.xml
       components/camel-sql/pom.xml"
0,CAMEL-3857,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-04-13 10:57:36+00:00,2011-04-13 11:47:08+00:00,"If you use wiretap to send a new message to an endpoint, then you can only provide headers if you use a Processor. However what people would like to do is to provide headers in the DSL. Usually from XML DSL.


So what you can do now in Java DSL




                    .wireTap(""direct:tap"")
                        // create the new tap message body and headers
                        .newExchangeBody(constant(""Bye World""))
                        .newExchangeHeader(""id"", constant(123))
                        .newExchangeHeader(""date"", simple(""${date:now:yyyyMMdd}""))
                    .end()




And in XML DSL (has a slight different names for body/header), to reuse the existing <setHeader> element




            <wireTap uri=""direct:tap"">
                <!-- create the new tap message body and headers -->
                <body><constant>Bye World</constant></body>
                <setHeader headerName=""id""><constant>123</constant></setHeader>
                <setHeader headerName=""date""><simple>${date:now:yyyyMMdd}</simple></setHeader>
            </wireTap>",
0,CAMEL-3856,Bug,Minor,"2.7.0, 2.7.1","2.7.2, 2.8.0","
None
",Closed,Fixed,"2.7.2, 2.8.0",Claus Ibsen,David Valeri,0,0,2011-04-13 04:14:30+00:00,2011-10-25 11:35:50+00:00,"The Quartz packaging for OSGi uses the following configuration:



<camel.osgi.export.pkg>
org.apache.camel.component.quartz.*,
org.apache.camel.routepolicy.quartz.*
</camel.osgi.export.pkg>




This gets concatenated as ${camel.osgi.export.pkg};${camel.osgi.version} and then fed to the Felix Bundle Plug-in.  The issue I am seeing is that only the second package gets versioned in the bundle manifest.  org.apache.camel.component.quartz is exported without a version.","davaleri:1302639432:2011-04-13T04:17:12.558+0000:1302639432:2011-04-13T04:17:12.558+0000:Attaching patch.  Tested against OSGi integration tests.  A selection of Karaf integration tests from trunk all fail on my machine so I am assuming that there is an underlying cause not related to this patch.
davsclaus:1302672219:2011-04-13T13:23:39.009+0000:1302672219:2011-04-13T13:23:39.009+0000:Thanks for the patch. I have applied it.

The quartz osgi test passes.
davsclaus:1302672334:2011-04-13T13:25:34.431+0000:1302672334:2011-04-13T13:25:34.431+0000:But it just shows how we are not there yet with osgi. It would be nice if the felix maven bundle plugin would be able to detect this. Or just being able to generate better metadata out of the box.

I will check the other camel components using multiple packages as they may have the same problem.
davsclaus:1302672519:2011-04-13T13:28:39.485+0000:1302672519:2011-04-13T13:28:39.485+0000:Bah we need to ignore the routepolicy package as well.

The rule of thumb would be to only use one ""root"" package for components, thats easier then."
0,CAMEL-3855,Improvement,Minor,None,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Benjamin P. O'Day,Benjamin P. O'Day,0,0,2011-04-12 21:52:37+00:00,2011-04-13 15:11:22+00:00,"Currently, an expression and strategy are required to use aggregate().  Perhaps, we could set a default expression (constant(true), etc) and strategy (either groupExchanges() or the attached AggregateAsListStrategy, etc).


For example, either of these could make a good intuitive default (still requiring a completionSize/Interval, etc)


aggregate() == aggregate(constant(true)).groupExchanges() 
or
aggregate() == aggregate(constant(true), new AggregateAsListStrategy())


See this discussion for more information....http://camel.465427.n5.nabble.com/Default-Behavior-for-aggregate-td4296790.html","boday:1302616545:2011-04-12T21:55:45.411+0000:1302616545:2011-04-12T21:55:45.411+0000:adds a basic ""aggregate as list"" strategy class and test case
davsclaus:1302645516:2011-04-13T05:58:36.854+0000:1302645516:2011-04-13T05:58:36.854+0000:No thats frankly not intuitive, to aggregate using a constant expression, and all into a list. If you read the EIP book then thats not the point they explain about the pattern. There are many other uses cases where you must aggregate by a correlation key part of the message and so forth. 

The current solution to ensure the end user specify the
- correlation expression
- aggregation strategy
- completion conditions

Works the best as there are no surprises with defaults and what not. The end user configure the EIP according to their needs.

davsclaus:1302646892:2011-04-13T06:21:32.447+0000:1302646892:2011-04-13T06:21:32.447+0000:Ben you are of course very welcome to help improve the wiki documentation of the aggregator EIP page
http://camel.apache.org/aggregator2

Or you can create a short cookbook example about the usecase of aggregating everything into a List
http://camel.apache.org/cookbook

We can always use help with the documentation. And its much appreciated, and it also helps on merits to become a committers (all kind of contributions does).
boday:1302678682:2011-04-13T15:11:22.563+0000:1302678682:2011-04-13T15:11:22.563+0000:thanks Claus, I can see both sides of providing a default case...I'm speaking from my normal use of it.  I do think that including a few more basic strategies couldn't hurt though.  

In regards to documentation, I don't yet have permission to edit pages.  I have an ICLA on file and a Confluence account (boday).  I'll send an email to the dev list to request permission and start helping in that area soon..."
0,CAMEL-3824,Improvement,Minor,2.6.0,None,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Joshua Watkins,0,1,2011-03-31 12:15:38+00:00,2011-10-02 15:11:27+00:00,"Currently the cometd component ignores message headers. 


======
Code snippet from CometdConsumer.java:


            Message message = new DefaultMessage();
            message.setBody(data);


            Exchange exchange = endpoint.createExchange();
            exchange.setIn(message);
======


Exchange message headers should be maintained (perhaps with a flag?).","davsclaus:1301710235:2011-04-02T10:10:35.120+0000:1301710235:2011-04-02T10:10:35.120+0000:What do you mean, the consumer is used for Camel to receive incoming messages.
So if the CometdConsumer has to add headers to the Exchange then those headers must come from cometd. And I can't see how Cometd does that. Maybe you can take a 2nd look.

If you on the other hand talk about CometdProducer then it uses this method to send a msg to Comentd
{code}
client.deliver(client, endpoint.getPath(), exchange.getIn().getBody(), null);
{code}

And there is no API for passing in headers.
jwatkins:1301881660:2011-04-04T09:47:40.468+0000:1301881660:2011-04-04T09:47:40.468+0000:Sorry, I should have posted the producer code as well. Both the producer and the consumer don't support headers. This makes it a bit clunky if you are say moving from JMS to Cometd and you want to maintain a header like CorrelationId.

I see the cometD ext section as headers (http://cometd.org/node/17).  I am not sure why they didn't call them headers but I am no cometD expert. Currently two of the extensions they have are for authentication and a timestamp (http://cometd.org/documentation/2.x/cometd-ext/timestamp). By looking other protocols, such as http, these are specified typically as headers. 

With that said, I guess I would expect Camel message headers to be transfered to Cometd extensions along the same lines as JMS headers are passed.
davsclaus:1302138309:2011-04-07T09:05:09.394+0000:1302138309:2011-04-07T09:05:09.394+0000:Joshua you are welcome to work on a patch to add support for headers.
jwatkins:1316959043:2011-09-25T21:57:23.190+0000:1316959043:2011-09-25T21:57:23.190+0000:Patch contains fixes for adding in header support to camel messages. Additionally, it adds cometd client id to messages coming in through cometd.
davsclaus:1316993585:2011-09-26T07:33:05.465+0000:1316993585:2011-09-26T07:33:05.465+0000:Hi Joshua

Nice patch.
Would it be possible to use a different key for the headers?
{code}
public static final String HEADERS_FIELD = ""camel.headers"";
{code}

We have a convention with Camel to use CamelCaseKeys, such as ""CamelHeaders"".
Using dots, in header keys is not permitted in the JMS spec, and thus causes problem when people uses JMS.
jwatkins:1317008114:2011-09-26T11:35:14.170+0000:1317008114:2011-09-26T11:35:14.170+0000:Patch with the header name being ""CamelHeaders""
jwatkins:1317008255:2011-09-26T11:37:35.932+0000:1317008255:2011-09-26T11:37:35.932+0000:Also, is there any chance of this being one of the patches backported to 2.8.x?
davsclaus:1317455599:2011-10-01T15:53:19.301+0000:1317455599:2011-10-01T15:53:19.301+0000:Thanks for the patch.

I am not keen on backporting as it potentially change behavior for people in Camel 2.8.x. And the 2.8.x is targeted as a patch release.

Do you have a good use case for backporting?
jwatkins:1317518669:2011-10-02T09:24:29.565+0000:1317518669:2011-10-02T09:24:29.565+0000:The use case for me is that our program routes messages from JMS to cometd. Due to this we copy across some of the (although renamed) JMS headers (eg. Messageid, JMSType, CorrelationId) into cometd headers for our clients to use without having to alter the message body inflight.

The second bit that this patch does is add the cometd clientid and cometd ""headers"" to the incoming message headers. This allows for cleaning up of resources created for a particular client upon disconnection and validating a user is authenticated further down the message chain.

However we can just continue to use a branched version of the component until 2.9

davsclaus:1317530485:2011-10-02T12:41:25.734+0000:1317530485:2011-10-02T12:41:25.734+0000:I wonder if there is any side effect for any existing users, now that headers is included in the cometd message?
Eg if they upgrade from 2.8.1 to 2.8.2? 
jwatkins:1317539487:2011-10-02T15:11:27.080+0000:1317539487:2011-10-02T15:11:27.080+0000:The only negative side effect I can think of is that they may have larger messages from the extra headers being passed along.

"
0,CAMEL-3823,Task,Minor,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Joshua Watkins,0,0,2011-03-31 11:37:38+00:00,2013-05-02 02:29:38+00:00,The current version of the Cometd component uses Cometd 1.0.1. Cometd 2.1.0 has better support for the InOut messaging pattern.,"davsclaus:1301710361:2011-04-02T10:12:41.692+0000:1301710361:2011-04-02T10:12:41.692+0000:We love contributions so you are welcome to work on a patch with the upgrade.
jwatkins:1302139848:2011-04-07T09:30:48.643+0000:1302139848:2011-04-07T09:30:48.643+0000:I will look into creating a patch.
davsclaus:1303025711:2011-04-17T15:35:11.596+0000:1303025711:2011-04-17T15:35:11.596+0000:Joshua any update on the patch?
jwatkins:1303101253:2011-04-18T12:34:13.505+0000:1303101253:2011-04-18T12:34:13.505+0000:Another committer asked me if I had started creating the patch yet and if not they would commit the patch. At that time I hadn't. I will re-loop with him to see if he is close to submitting a patch. Otherwise I will finish shortly.
ciaranwood:1303181721:2011-04-19T10:55:21.288+0000:1303181721:2011-04-19T10:55:21.288+0000:Attached is a patch to upgrade the camel-cometd component to use cometd 2.1.0. I have tested applying the patch to trunk and it applies cleanly.

A quick note on some behaviour that has changed between cometd versions:
Before, any client could subscribe to /service/** channels and receive all publishes to that channel, regardless of whether they published the message. The behaviour in the new version is that /service/** channels work in a request-reply style. You subscribe to the channel, publish to that channel and only the publisher should receive a reply. This works quite well with the InOut pattern in camel, so in the CometdConsumer, we check the exchange pattern and if it is InOut, send a reply.

The previous InteractiveMain tests used to subscribe on /service/test, I have changed that to subscribe to /channel/test, which exhibits the older behaviour. I have added an InOut test which uses the /service/test channel.
davsclaus:1303269430:2011-04-20T11:17:10.792+0000:1303269430:2011-04-20T11:17:10.792+0000:Ciaran

Thanks a lot of the patch. I have applied it to trunk.
It would be nice if you could add logging in the consumer side, when the push method is invoked. Just as you have on the producer side, at TRACE level.

Also I added a TODO in the component source code to upgrade to use the non deprecated API from Jetty. You are welcome to look into that as well.
davsclaus:1303270314:2011-04-20T11:31:54.030+0000:1303270314:2011-04-20T11:31:54.030+0000:I have fixed the TODO with the @deprecated api from Jetty
davsclaus:1303354757:2011-04-21T10:59:17.576+0000:1303354757:2011-04-21T10:59:17.576+0000:Ciaran do you mind taking a look at CAMEL-1242? Maybe you changes already fixed that issue?"
0,CAMEL-3822,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Martin Krasser,Claus Ibsen,0,0,2011-03-31 09:14:29+00:00,2011-05-30 09:47:26+00:00,Martin do you mind upgrading to the new GAE?,"davsclaus:1305776075:2011-05-19T11:34:35.463+0000:1305776075:2011-05-19T11:34:35.463+0000:Martin any update?
mrt1nz:1305785401:2011-05-19T14:10:01.263+0000:1305785401:2011-05-19T14:10:01.263+0000:Sorry for having not reacted earlier on that - too busy with too many other things ATM. I'll take care of this as soon as I can.
jbonofre:1306281133:2011-05-25T07:52:13.261+0000:1306281133:2011-05-25T07:52:13.261+0000:Patch to upgrade to GAE 1.4.3 and provide the camel-gae feature.
mrt1nz:1306315950:2011-05-25T17:32:30.142+0000:1306315950:2011-05-25T17:32:30.142+0000:Does Karaf run on GAE?
mrt1nz:1306319424:2011-05-25T18:30:24.224+0000:1306319424:2011-05-25T18:30:24.224+0000:Just committed an upgrade to 1.5.0.1 without applying the patch. 

@JB: I don't close this issue yet because I'd like to clarify if it makes sense to have a camel-gae Karaf feature (camel-gae is intended for use on GAE, not on a full-featured JDK). 
davsclaus:1306561668:2011-05-28T13:47:48.362+0000:1306561668:2011-05-28T13:47:48.362+0000:Yeah it does not make sense to have a feature for camel-gae. Its for a GAE runtime only.
jbonofre:1306575153:2011-05-28T17:32:33.955+0000:1306575153:2011-05-28T17:32:33.955+0000:You're right, I misunderstood the GAE component usage.
mrt1nz:1306719354:2011-05-30T09:35:54.488+0000:1306719354:2011-05-30T09:35:54.488+0000:@Claus: but what if Karaf doesn't run in a GAE environment (both in the cloud as well as on a local dev server)? How would you then make use of this feature?

davsclaus:1306719675:2011-05-30T09:41:15.957+0000:1306719675:2011-05-30T09:41:15.957+0000:Martin this ticket is solely about upgrading camel-gae to use GAE 1.5.0.

Whatever about Karaf/OSGi and whatnot can be discussed on mailing list.

And besides not everything in the Camel distro can/should have a karaf feature if its not easy/applicable to do so.
mrt1nz:1306719873:2011-05-30T09:44:33.286+0000:1306719873:2011-05-30T09:44:33.286+0000:Agreed. I just didn't want to close this issue without clarifiying why I don't apply JB's patch.
davsclaus:1306720046:2011-05-30T09:47:26.889+0000:1306720046:2011-05-30T09:47:26.889+0000:Sorry for sounding sour, its just that we need to close tickets so we are in shape for a new release.
"
0,CAMEL-3821,Improvement,Minor,2.7.0,None,"
None
",Closed,Duplicate,2.8.0,Claus Ibsen,Claus Ibsen,1,1,2011-03-31 08:50:47+00:00,2011-04-01 08:15:32+00:00,"See nabble
http://camel.465427.n5.nabble.com/JBoss-5-1-0-gt-6-0-0-Final-Camel-Issues-td3353086.html


JBoss people renamed a package and thus we need to adjust accordingly. I suggest that we build 2 artifcats in the project



camel-jboss5.JAR
camel-jboss.JAR



Then we can keep jboss5 for JBoss 5 support.


Maybe we simply need to create 2 components at camel-extra to keep it simple.",davsclaus:1301616904:2011-04-01T08:15:04.582+0000:1301616904:2011-04-01T08:15:04.582+0000:Duplicate of CAMEL-3825
0,CAMEL-3820,Improvement,Major,2.7.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Peter Easton,0,2,2011-03-30 16:57:17+00:00,2015-07-11 22:17:45+00:00,"camel-cxf producer does not support attachments, for example:


Where:
    <route>
       <from uri=""direct://http""/>
       <to uri=""cxfrs://http://localhost:9002""/>
    </route>


a send like the following should be supported.


        Exchange exchange = template.send(""direct://http"", new Processor() {


            public void process(Exchange exchange) throws Exception 

{
                exchange.setPattern(ExchangePattern.InOut);
                Message inMessage = exchange.getIn();
                inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE);
                inMessage.setHeader(Exchange.HTTP_METHOD, ""PUT"");
                inMessage.setHeader(Exchange.CONTENT_TYPE, ""multipart/related"");
                inMessage.setHeader(Exchange.HTTP_PATH, ""/customerservice/multicustomers"");                

                inMessage.setBody(null);   
                inMessage.addAttachment(""p1"", new DataHandler(new ByteArrayDataSource(""p1 content"".getBytes(), ""text/plain"")) );
                inMessage.addAttachment(""p2"", new DataHandler(new ByteArrayDataSource(""p2 content"".getBytes(), ""text/plain"")) );
            }


        });


I am enclosing a suggested change to org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding that supports attachments for the cxfrs producer.


Note support for attachments by the cxfrs consumer component may require a separate defect.","peaston:1301483974:2011-03-30T19:19:34.686+0000:1301483974:2011-03-30T19:19:34.686+0000:Patch applied to latest trunk revision 1086028 org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding
njiang:1301517743:2011-03-31T04:42:23.264+0000:1301517743:2011-03-31T04:42:23.264+0000:Hi Peter,
Thanks for contributing the patch.
I just has quick look at it, there is only some changes of DefaultCxfRsBinding in the patch. Can you provide a unit test for it?

davsclaus:1307686185:2011-06-10T14:09:45.835+0000:1307686185:2011-06-10T14:09:45.835+0000:Peter any update on providing tests? We cannot accept the patch without tests.
davsclaus:1436624265:2015-07-11T22:17:45.407+0000:1436624265:2015-07-11T22:17:45.407+0000:CXF component has changed a lot since. Create new ticket if still relevant"
0,CAMEL-3819,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-03-30 08:59:37+00:00,2011-03-31 10:04:28+00:00,"If we want to reuse the example unit tests to verify the if the example can deploy rightly into the OSGi container like Karaf, we will face a problem that the unit tests will not only start the client to access the service but also start the camel context of the server.
To avoid the unit test starts the camel context of the server, we need to introduce a system property to let the unit test skip to start the camel context of server.",
0,CAMEL-3818,Improvement,Minor,2.7.0,2.8.0,"

file
xml
xquery

",Closed,Fixed,2.8.0,Claus Ibsen,Mikael Ståldal,0,0,2011-03-29 12:06:01+00:00,2015-06-13 13:02:02+00:00,"It is not possible to do an XQuery filter on a file source:


<route>
   <from uri='ftp://username@localhost/?password=password'/>
   <choice>
   <when>
     <xquery>/root[@name='James']</xquery>
     <to uri=""jmq:SomeQueue""/>
   </when>
   <otherwise>
     <rollback/>
   <otherwise>
   </choice>
</route>


It works if you use <xpath> instead of <xquery> but I need the XPath 2.0 support available in <xquery> do to date/time processing.","davsclaus:1301372093:2011-03-29T12:14:53.155+0000:1301372093:2011-03-29T12:14:53.155+0000:Convert the payload to a type that Saxon works with such as a String
<convertBodyTo type=""String""/>
mikaelstaldal:1301372769:2011-03-29T12:26:09.204+0000:1301372769:2011-03-29T12:26:09.204+0000:That works.

But with <xpath> it works without it. It would be nice if it would work without conversion for xquery as well.

davsclaus:1301807104:2011-04-03T13:05:04.837+0000:1301807104:2011-04-03T13:05:04.837+0000:Yeah it works for xquery as an endpoint, so its _just_ when its a language.
davsclaus:1302227357:2011-04-08T09:49:17.103+0000:1302227357:2011-04-08T09:49:17.103+0000:Are you sure you are using Camel 2.7? 

I checked and we have type converters which convert from File -> Source which is used by Saxon.
davsclaus:1302227884:2011-04-08T09:58:04.305+0000:1302227884:2011-04-08T09:58:04.305+0000:Ah its FTP. When you use files it works fine.
davsclaus:1302228708:2011-04-08T10:11:48.196+0000:1302228708:2011-04-08T10:11:48.196+0000:I have added support for FTP now, so you do not need that convertBodyTo."
0,CAMEL-3817,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-29 09:25:47+00:00,2011-03-29 17:12:10+00:00,"When Camel consumes messages it should set a new CamelBreadcrumbId header to the message. By default it should set it based on Message ID if not already provided.


Then the MDC logger should expose this id as well as breadcrumbId","davsclaus:1301378929:2011-03-29T14:08:49.364+0000:1301378929:2011-03-29T14:08:49.364+0000:Camel will now by default add a header with the key {{breadcrumbId}} containing the message id (to be used as breadcrumb). This ensure that the header is propagated across various transports (the best we can do so far) and can be used to trace the business flow. So you can do JMS->HTTP->JMS and keep the breadcrumbId across.

We chose to use {{breadcrumbId}} as key and not prefix it with Camel to make it more universal, and also Camel will usually filter out any CamelXXX headers by default.
davsclaus:1301378973:2011-03-29T14:09:33.876+0000:1301378973:2011-03-29T14:09:33.876+0000:There is an option on CamelContext you can use to disable/enable this feature. Its enabled by default.
Similar to the useMDCLogging feature.
davsclaus:1301389930:2011-03-29T17:12:10.932+0000:1301389930:2011-03-29T17:12:10.932+0000:trunk: 1086641.

Update wiki page for MDC logging with more details about this feature."
0,CAMEL-3816,Bug,Major,"2.4.0, 2.6.0",2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Claus Ibsen,0,0,2011-03-29 06:54:14+00:00,2011-03-30 08:52:57+00:00,"See nabble
http://servicemix.396122.n5.nabble.com/http-post-to-camel-jetty-smx-4-3-ArrayIndexOutOfBoundsException-tp4258334p4258334.html","davsclaus:1301352997:2011-03-29T06:56:37.309+0000:1301352997:2011-03-29T06:56:37.309+0000:The end user is using curl to do a HTTP POST which seems to not send any HTTP headers at all, which often is unlikely and thus not seen this issue before.
davsclaus:1301353065:2011-03-29T06:57:45.267+0000:1301353065:2011-03-29T06:57:45.267+0000:Remember to fix this in camel-http4 as well.
njiang:1301442279:2011-03-30T07:44:39.404+0000:1301442279:2011-03-30T07:44:39.404+0000:I just did some test on the issue, and found out it was caused by the request message was not right. 

As the Http Request was sending with application/x-www-form-urlencoded, which means the message body should be some string like ""file.name=file.xml"", but with the ""curl -v -d file.xml 'http://localhost:4443/to2-service/sendMessage"", the message body became ""file.xml"", and DefaultHttpBinding throw the exception like that.

And it has nothing to do with the Null Http header.

I just did a quick fix for in Camel trunk, please check out latest Camel 2.8-SNAPSHOT to verify the fix."
0,CAMEL-3815,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Claus Ibsen,0,0,2011-03-29 06:42:08+00:00,2011-03-31 10:04:11+00:00,"This makes it easier for end users to build and run examples.


http://camel.465427.n5.nabble.com/camel-example-cxf-pom-xml-tp4268673p4268673.html",
0,CAMEL-3814,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-03-29 05:52:05+00:00,2011-03-29 13:56:36+00:00,"When user want to use OsgiDefaultCamelContext without touch spring and blueprint, he need the camel-core-osgi bundle.
As the camel-spring and camel-blueprint ship camel-core-osgi bundle by default, they will not import any packages of camel-core-osgi bundle, so camel-core-osgi bundle is safe to be deploy into OSGi platform.","njiang:1301361742:2011-03-29T09:22:22.855+0000:1301361742:2011-03-29T09:22:22.855+0000:Applied patch into the trunk.
davsclaus:1301363075:2011-03-29T09:44:35.207+0000:1301363075:2011-03-29T09:44:35.207+0000:Willem should the JAR be added to the kit, eg in the various pom.xml files so its published to central maven and part of the ZIP file?
njiang:1301378196:2011-03-29T13:56:36.962+0000:1301378196:2011-03-29T13:56:36.962+0000:Just added the camel-core-osgi jar into the kit as Claus suggested."
0,CAMEL-3813,Improvement,Minor,2.7.0,2.8.0,"

xpath

",Resolved,Fixed,2.8.0,Claus Ibsen,Marcin Kolda,0,2,2011-03-28 15:47:50+00:00,2012-08-13 13:06:08+00:00,"XPathBuilder doesn't clear ThreadLocal with exchange (and variableResolver) after evaluation. In such case reference to current exchange (and body, headers, properties, etc.) remains in Thread until current thread dies or evaluates new exchange with the same XPathBuilder instance.


The result of this is that each thread can contain references to multiple exchanges (up to the number of xpaths in camel context), that can't be collected by GC.","davsclaus:1301299751:2011-03-28T16:09:11.418+0000:1301299826:2011-03-28T16:10:26.664+0000:Thats was actually by design. But maybe there is a need to ensure the thread locals is cleared when the exchange is done. 
marcin kolda:1301356742:2011-03-29T07:59:02.739+0000:1301356742:2011-03-29T07:59:02.739+0000:Yes, ThreadLocal should be cleared. We noticed huge improvement of GC under heavy load after using workaround for that. It's even worse when you use fixed thread pool (e.g. seda component) and/or Saxon for XSLT which contains WeakHashMap, in which key is a Document (body of exchange).
davsclaus:1301362590:2011-03-29T09:36:30.379+0000:1301362590:2011-03-29T09:36:30.379+0000:Marcin I have committed an improvement in rev 1086530
Do you mind giving that a test in your system?
marcin kolda:1301380289:2011-03-29T14:31:29.800+0000:1301380289:2011-03-29T14:31:29.800+0000:Unfortunately fix doesn't work for us. Threads are still containing references.

I attached simple patch for reproducing this bug. It simply verifies if main thread contains reference to exchange.
davsclaus:1301384267:2011-03-29T15:37:47.281+0000:1301384267:2011-03-29T15:37:47.281+0000:Your unit test is flawed as it doesn't handle the unit of work which will ensure the thread locals get cleared when the exchange is done being processed. 

So check out a Camel route instead, and check in your system for real.
marcin kolda:1301442752:2011-03-30T07:52:32.684+0000:1301442752:2011-03-30T07:52:32.684+0000:I prepared such testcase to verify that ThreadLocal is empty right after evaluation (without using UnitOfWork and Synchronization). It's done this way in {{public <T> T evaluate(CamelContext context, Object body, Class<T> type)}} and few other methods in XPathBuilder. Such solution would be just simpler for me.

I tested this with our real system previously and that still didn't work for us. I will have to digg into this when I'll have more time. I'll let you know if I find anything.
pbzdyl:1343629085:2012-07-30T14:18:05.248+0000:1343629085:2012-07-30T14:18:05.248+0000:In my case the problem was with using @XPath annotation on the bean method argument. When such annotation is used, BeanProcessor uses a copy of the original exchange and that copy is provided to the XPathBuilder instance implementing @XPath annotated argument extraction. For that exchange copy its XPathBuilderCompletion is not executed so the solution provided in this issue doesn't fix this.

What's worse, BeanExpression.evaluate(Exchange exchange) creates a holder instance for each invocation and a new XPathBuilder instance is created (through new ConstantHolder -> new BeanInfo -> ... -> BeanInfo.createParameterUnmarshalExpressionForAnnotation -> XPathAnnotationExpressionFactory.createExpression) so for each such evaluate calls two XPathBuilder's thread locals are leaking.

[CAMEL-5392] optimizes BeanExpression.evaluate by caching the holder instance and thus prevents the leakage. However, the thread locals are not eligible for GC until another exchange processing in the same thread overrides them with new values as the completion is not being called on the exchange copy. As a result those thread locals objects might be retained much longer than the exchange life.
davsclaus:1344812573:2012-08-13T07:02:53.560+0000:1344812573:2012-08-13T07:02:53.560+0000:Pitr, open a new JIRA ticket instead of commeting on old closed tickets. You can refer to this old ticket from thew newly created ticket.
davsclaus:1344827260:2012-08-13T11:07:40.975+0000:1344827260:2012-08-13T11:07:40.975+0000:I created CAMEL-5501 to track this issue.
davsclaus:1344833757:2012-08-13T12:55:57.645+0000:1344833757:2012-08-13T12:55:57.645+0000:Pitr, I cannot reproduce this on trunk. Do you have an use-case.

This unit test from camel-core, works fine
org.apache.camel.processor.BeanWithXPathInjectionTest
pbzdyl:1344834368:2012-08-13T13:06:08.106+0000:1344834368:2012-08-13T13:06:08.106+0000:Claus,

As I noted, the leak was fixed by [CAMEL-5392]. And it was fixed unintentionally as the intention of [CAMEL-5392] was only performance improvement.

My comment was rather an FYI for others landing on this issue page (like me some time ago) so they understand that the leak could be caused by @XPath injection and that it should be already fixed. I also mentioned this fact in the [CAMEL-5392] comments so in case that issue is revisited, there is a trace that that fix was also impacting thread local leak.

Regards,
Piotr"
0,CAMEL-3812,Bug,Major,2.7.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Maximilien Wiktorowski,0,1,2011-03-28 07:26:51+00:00,2011-10-25 11:36:02+00:00,"In camel-bean, when a bean is looked-up and it is not the same bean as the previous one beanInfo has to be reset.
This is done in getBean() method of org.apache.camel.component.bean.RegistryBean but the test is placed after setting bean=value so beanInfo is never reset :


if (value != bean) { 
    bean = value; 
    processor = null; 
    if (!ObjectHelper.equal(ObjectHelper.type(bean), ObjectHelper.type(value))) 

{ 
        beanInfo = null; 
    }","davsclaus:1301269829:2011-03-28T07:50:29.248+0000:1301269829:2011-03-28T07:50:29.248+0000:See nabble
http://camel.465427.n5.nabble.com/camel-ejb-problem-td4258807.html
davsclaus:1301276302:2011-03-28T09:38:22.527+0000:1301276302:2011-03-28T09:38:22.527+0000:Thanks for reporting."
0,CAMEL-3811,Improvement,Trivial,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-27 09:14:26+00:00,2011-03-27 09:36:57+00:00,Its the only attribute which is listed as unavailable and marked as red in jconsole. People may think this is a problem.,
0,CAMEL-3810,Bug,Major,2.4.0,"2.7.1, 2.8.0","
None
",Closed,Fixed,"2.7.1, 2.8.0",Willem Jiang,ext2,0,2,2011-03-27 05:47:11+00:00,2015-03-11 13:31:06+00:00,"if wsdl's operatin's has multi parts and the parts use same xml-element. Camel CXF Payload model, will mixup the xml element in body with header","ext2xhb:1301176424:2011-03-27T05:53:44.205+0000:1301176424:2011-03-27T05:53:44.205+0000: MultiPartTest.wsdl: is the wsdl, which will cause the bug;
MultiPartTest.xml: is the spring configured route.
CXFMultiPartTest.java: is the test case which failed.
MultiPartInvokeImpl.java: is service's simple ogical 
ext2xhb:1301176873:2011-03-27T06:01:13.224+0000:1301177554:2011-03-27T06:12:34.804+0000:Here is SOAP Message show how Camel CXF mix-up the body with header

Following is soap sent by the original client to camel
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE></soap:Header><soap:Body><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Body></soap:Envelope>

Following is the soap routed by camel to service(which mixed up)
Payload: <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Header><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in0</v></inE><inE xmlns=""http://adapter.ti.tongtech.com/ws/types""><v>in1</v></inE></soap:Header><soap:Body /></soap:Envelope>

ext2xhb:1301177162:2011-03-27T06:06:02.552+0000:1301177791:2011-03-27T06:16:31.574+0000:here is my temporary solution for Camel

CxfEndpoint.CxfClientImpl.setParameters(){
........
/*
for (MessagePartInfo partInfo : boi.getOperationInfo().getInput().getMessageParts()) 
{
	if (elements.size() > i && partInfo.getConcreteName().getLocalPart()
                        .equals(elements.get(i).getLocalName()))
	content.put(partInfo, elements.get(i++));
}
*/
//boi.getInput().getMessageParts())  will return the message-part which have been binding to soap body; 
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	content.put(partInfo, elements.get(i++));
}

}

DefaultCxfBinding.getResponsePayloadList(...) {
....
/*
 for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {
	if (elements.size() > i) {
		answer.put(partInfo, elements.get(i++));
    }
 }
*/
for (MessagePartInfo partInfo : boi.getInput().getMessageParts()) {
	answer.put(partInfo, elements.get(i++));
}  
.......
}  


ext2xhb:1301177408:2011-03-27T06:10:08.895+0000:1301177408:2011-03-27T06:10:08.895+0000:some description for my temporary solution:
To find which message part  matched with body elemens, we must rely on the WSDL Binding informations, not rely on wsdl portType's operation information.
davsclaus:1301192768:2011-03-27T10:26:08.563+0000:1301192768:2011-03-27T10:26:08.563+0000:Have you tried with Camel 2.7 release?
ext2xhb:1301202314:2011-03-27T13:05:14.940+0000:1301202545:2011-03-27T13:09:05.297+0000:I haven't tried on Camel 2.7. but I have review the source code of cxf component of Camel2.7. 
As source code of Camel 2.7 which deal with message partis , is just like as Camel 2.4, so this test will also failed on camel 2.7.
njiang:1301619159:2011-04-01T08:52:39.138+0000:1301619159:2011-04-01T08:52:39.138+0000:Applied patch with thanks to ext2.

In the CXF SoapBindingFactory.createBindingInfo method, you will see the message parts of the soap body will be store in the BindingOperationInfo's input and output message. The patch shows a way to help us tell which message part is below to message body.

BTW, the change of DefaultCxfBinding.getResponsePayloadList should be
{code}
DefaultCxfBinding.getResponsePayloadList(...) {
...
-- for (MessagePartInfo partInfo : boi.getOperationInfo().getOutput().getMessageParts()) {

++ for (MessagePartInfo partInfo : boi.getOutput().getMessageParts()) { 
...
{code}
githubbot:1424535789:2015-02-22T00:23:09.336+0000:1424535789:2015-02-22T00:23:09.336+0000:GitHub user oombadness opened a pull request:

    https://github.com/apache/camel/pull/403

    CAMEL-3810 - RabbitMQ - Adding ability to requeue message

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.  Messages that are in Fault / Exception state and have the header rabbitmq.REQUEUE set to the boolean true will be rejected and have the requeue flag set to true, otherwise the message will be rejected with the requeue flag set to false (as is current behavior).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oombadness/camel CAMEL-8310

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/403.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #403
    
----
commit 20050c12682752cd13e93187f902a4aa9f2a42e7
Author: Andrew Austin <andrew.austin@wgu.edu>
Date:   2015-02-22T00:16:24Z

    Adding ability to REQUEUE a message on RabbitMQ server instead of REJECTING message / sending it to DLQ.

----

githubbot:1426051866:2015-03-11T13:31:06.753+0000:1426051866:2015-03-11T13:31:06.753+0000:Github user oombadness closed the pull request at:

    https://github.com/apache/camel/pull/403
"
0,CAMEL-3809,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-26 10:49:42+00:00,2011-03-26 14:01:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/Mock-endpoints-and-parameters-tp3894208p3894208.html",
0,CAMEL-3808,Bug,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",William Tam,William Tam,0,0,2011-03-25 19:12:49+00:00,2011-10-25 11:35:23+00:00,"Currently, custom queries to be sent in the request URI must be defined in the route.  It is more usable to set the request URI queries at runtime.","wtam:1301055229:2011-03-25T20:13:49.108+0000:1301055229:2011-03-25T20:13:49.108+0000:Committed revision 1085543.

wtam:1301056102:2011-03-25T20:28:22.238+0000:1301056102:2011-03-25T20:28:22.238+0000:It looks we have documented this feature (setting CamelHttpQuery header to add query to request URI).  So, it is possibly a regression bug."
0,CAMEL-3807,Improvement,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-25 18:03:21+00:00,2011-03-27 09:16:45+00:00,"At TSSJS Kirk P. did the Java performance talk, and he said you should favor using System.currentTimeMillis over the nano one, as the latter is not suitable for measuring performance as it can become negative and dont cater when having multiple cores etc. And millis is more than precise for end users for measure route stats in Camel.",
0,CAMEL-3806,Bug,Major,2.6.0,"2.7.3, 2.8.0","

CXF
HTTP
SOAPAction
header

",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Torsten Mielke,1,1,2011-03-25 14:06:33+00:00,2011-10-25 11:35:22+00:00,"When using camel-cxf consumer endpoint with PAYLOAD data format, the SoapActionInInterceptor correctly strips off any double quotes surrounding the SOAPAction header value, e.g:



SOAPAction: ""http://apache.org/hello_world_soap_http/greetMe""




and then sets this header on the message again:


SoapActionInInterceptor.java
public void handleMessage(SoapMessage message) throws Fault {
        String action = getSoapAction(message);
        if (!StringUtils.isEmpty(action)) {
            getAndSetOperation(message, action);
        }
    }




After the execution of getAndSetOperation(message, action), there are two SOAPAction headers set on the message. The original SOAPAction header value (with surrounding quotes) is part of the org.apache.cxf.message.Message.PROTOCOL_HEADERS. In addition the getAndSetOperation() method also adds 
SOAPAction=http://apache.org/hello_world_soap_http/greetMe header (without surrounding quotes). 


Later in org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(), when the CXF message headers get copied to the Camel message, it only retrieves the org.apache.cxf.message.Message.PROTOCOL_HEADERS:



Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS);




The SOAPAction header in PROTOCOL_HEADERS wasn't changed by the SoapActionInInterceptor and hence still has enclosed double quotes. These headers then get copied to the Camel In message headers. The header that was set by the SoapActionInInterceptor SOAPAction=http://apache.org/hello_world_soap_http/greetMe does not get copied!


If later in a Camel route a custom Camel Processor tries to resolve this SOAPAction header, it gets the the value with surrounding double quotes, but these should actually have been stripped off. 


This behavior is a bug.","tmielke:1301033260:2011-03-25T14:07:40.439+0000:1301033260:2011-03-25T14:07:40.439+0000:Attaching JUnit test. It currently fails but will succeed if the SOAPAction header value is not enclosed by double quotes.
tmielke:1301033288:2011-03-25T14:08:08.318+0000:1301033288:2011-03-25T14:08:08.318+0000:I see two solutions:

1) copy all CXF headers into Camel in message headers:

{code:title=org.apache.camel.component.cxf.DefaultCxfBinding.java}
// pseudo code
protected void propagateHeadersFromCxfToCamel(Message cxfMessage,
            org.apache.camel.Message camelMessage, Exchange exchange) {
        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.getHeaders()
        Map<String, Object> camelHeaders = camelMessage.getHeaders();
        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage);
...
{code}

This should also copy the SOAPAction header that the SoapActionInInterceptor added to the message.

2) Have the SoapActionInInterceptor strip off the surrounding double quote from the SOAPAction header (which it does already) and replace the SOAPAction header in the already populated org.apache.cxf.message.Message.PROTOCOL_HEADERS with the modified (stripped off) value. 
That way org.apache.camel.component.cxf.DefaultCxfBinding.java does not need to be changed. 

I personally kinda prefer the second option.

davsclaus:1301192981:2011-03-27T10:29:41.290+0000:1301192981:2011-03-27T10:29:41.290+0000:Willem can you take a look? We should strip off double quotes from the value IMHO
davsclaus:1301193029:2011-03-27T10:30:29.540+0000:1301193029:2011-03-27T10:30:29.540+0000:Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?
njiang:1301269904:2011-03-28T07:51:44.275+0000:1301270074:2011-03-28T07:54:34.966+0000:Because SOAP11 and SOAP12 send the SOAPAction with different protocol:
SOAP11 uses SOAPAction=""xxx"" http header,
SOAP12 uses action=""xxx""  as a part of content-type
If we want to provides the user with consistence result, we need to store the result with key of ""SOAPAction"" for common using, CXF SOAPActionInterceptor takes care of it and strip the ""/"""" for using. In camel-cxf we copy the PROTOCOL_HEADER directly into the Camel message header, if the user using SOAP11 binding, the SOAPAction is also a part of the PROTOOL_HEADER. If the user want to get the message header of SOAPAction, he will get.
If the user using SOAP12 binding, he can't get any value with the message header of SOAPAction.

SO my suggestion is we just put the SOAPAction header from CXF message into camel message, in this way the user can get this kind of the message header directly from the camel message whatever the soap binding is.

Willem
tmielke:1301271534:2011-03-28T08:18:54.553+0000:1301271534:2011-03-28T08:18:54.553+0000:{quote}
Btw which client put quotes in the value? I actually wonder if that's really best practice, and allowed to do?
{quote}
According to the [SOAP 1.1 spec|http://www.w3.org/TR/2000/NOTE-SOAP-20000508/#_Toc478383528], the SOAPAction header value needs to be enclosed by double quotes. Here an extract of the grammar defining the SOAPAction header:

{quote}
soapaction    = ""SOAPAction"" "":"" [ <""> URI-reference <""> ]
URI-reference = <as defined in RFC 2396 [4]>
{quote}

CXF also generates double quotes around the SOAPAction header value. 
njiang:1301339826:2011-03-29T03:17:06.298+0000:1301339826:2011-03-29T03:17:06.298+0000:Committed a patch to fix this issue.
For the Message data formate, as the SOAPActionInInterceptor is not installed, the use can still get the SOAPAction header with double quotes surrounding."
0,CAMEL-3805,Bug,Minor,None,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Claus Ibsen,1,1,2011-03-25 11:34:30+00:00,2011-10-25 11:36:09+00:00,"See nabble
http://camel.465427.n5.nabble.com/choice-when-check-BodyType-null-Body-null-tp4259599p4259599.html


We should use a boolean to keep track if the message body has been explict set to null using setBody(null) to avoid re-initialize the message body on subsequent accesses",
0,CAMEL-3804,Improvement,Minor,2.5.0,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Rob van de Meulengraaf,0,0,2011-03-24 10:46:38+00:00,2011-04-02 10:31:54+00:00,"The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authentication


A simple solution is to add setters for SecurityPolicy and Extension to the component. If these attributes are set then also set them on the underlying AbstractBayeux class.


About the patch:
The existing unit test is based on an interactive scenario that involves human intervention. A similar test is made that uses an extension and another one is made that needs authentication. To provide feedback on a failed authentication a cometd listener is used. The version of the cometd-dojo extension used does not support listeners so this dojo extension has also been upgraded to 1.1.4.","rvdm:1300934882:2011-03-24T10:48:02.251+0000:1300934882:2011-03-24T10:48:02.251+0000:patch for #CAMEL-3804 including unit tests and upgraded dojo-cometd extension
davsclaus:1301711514:2011-04-02T10:31:54.277+0000:1301711514:2011-04-02T10:31:54.277+0000:Thanks for the patch. I have applied it."
0,CAMEL-3803,Improvement,Major,None,2.8.0,"
None
",Closed,Fixed,2.8.0,Christian Müller,Moulliard Charles,0,1,2011-03-24 10:02:11+00:00,2011-04-29 21:07:34+00:00,"The component camel-jdbc does not support transaction as the component creates SQL statement but does not handle errors, exceptions generated and propagated by TransactionErrorHandler. This is a clear limitation of this component (which is not the case with component camel-sql). 


I suggest that :


(A) we improve this component to provide Transaction support
OR
(B) We keep it like now but mention that limitation into Camel documentation
OR
(C) we merge it with camel-sql component to have one providing transaction support even if it uses behind the scene JDBCTemplate of Spring. Remark : If we decided to merge the two components, that should be an excellent idea to allow the SQL component to receive the SQL query as an exchange to avoid to hard code it in the query parameter of the endpoint.


I provide hereafter example of code that we can use to reproduce that :



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd
    "">

    <!-- Bean generating the error -->
    <bean id=""jdbcReportIncident"" class=""org.apache.camel.example.SqlSpringTxReportIncident""/>

    <!-- TransactionManager -->
    <bean id=""required"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"" ref=""txManager""/>
        <property name=""propagationBehaviorName"" value=""PROPAGATION_REQUIRED""/>
    </bean>

    <bean id=""txManager"" class=""org.springframework.jdbc.datasource.DataSourceTransactionManager"">
        <property name=""dataSource"" ref=""reportdb""/>
    </bean>


    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">

        <!-- Camel Transactional Route with NO rollback  -->
        <route id=""transaction-non-working-camel-jdbc"">
           <from uri=""file://target/datainsertnotrollback?moveFailed=failed""/>
           <transacted ref=""required""/>
           <split>
               <tokenize token="",""/>
               <setBody>
                   <simple>INSERT INTO REPORT.T_INCIDENT (INCIDENT_REF,INCIDENT_DATE,GIVEN_NAME,FAMILY_NAME,SUMMARY,DETAILS,EMAIL,PHONE) VALUES
                           ('${body}','2011-03-21','Charles','Moulliard','Incident-${body}','This is a report incident for camel-${body}','cmoulliard@fusesource.com','+111 10 20 300')
                   </simple>
               </setBody>
               <log message="">>> SQL Query : ${body}""/>
               <to uri=""jdbc:reportdb""/>
               <bean ref=""jdbcReportIncident"" method=""generateError""/>
               <log message="">>> Result : ${body}""/>
           </split>
       </route>


        <route id=""trigger-database"">
            <from uri=""timer://webinar?delay=20000&amp;period=20000""/>
            <to uri=""sql:SELECT * FROM REPORT.T_INCIDENT""/>
            <split>
                <simple>${body}</simple>
                <log message="">>> Select all : ${body}""/>
            </split>
        </route>

    </camelContext>

    <bean id=""reportdb"" class=""org.springframework.jdbc.datasource.DriverManagerDataSource"">
        <property name=""driverClassName"" value=""org.hsqldb.jdbcDriver""/>
        <property name=""url"" value=""jdbc:hsqldb:hsql://localhost/reportdb""/>
        <property name=""username"" value=""sa""/>
        <property name=""password"" value=""""/>
    </bean>

</beans>





Java class generating the error



public class SqlSpringTxReportIncident {

    public void generateError() throws Exception {
        throw new Exception(""Cannot connect to Database ...."");
    }
}




and Script to create DB in HSQLDB




CREATE TABLE PUBLIC.T_INCIDENT (
    INCIDENT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    INCIDENT_REF VARCHAR(55),
    INCIDENT_DATE TIMESTAMP,
    GIVEN_NAME VARCHAR(35),
    FAMILY_NAME VARCHAR(35),
    SUMMARY VARCHAR(35),
    DETAILS VARCHAR(255),
    EMAIL VARCHAR(60),
    PHONE VARCHAR(35),
    CREATION_DATE TIMESTAMP,
    CREATION_USER VARCHAR(255)
)

The key file must only contain data like '001', '002', ...","muellerc:1301047733:2011-03-25T18:08:53.692+0000:1301047733:2011-03-25T18:08:53.692+0000:I would prefer (A).

(B) is not useful for our users.
(C) is also not a good idea in my opinion, because it breaks backwards compatibility. I think also some users likes the ""light weight"" components (like camel-jdbc or camel-timer) more than the ""heavy weight"" components (like camel-sql or camel-quartz) if the are sufficient.

My two cents,
Christian
cmoulliard:1301267702:2011-03-28T07:15:02.884+0000:1301267702:2011-03-28T07:15:02.884+0000:If we decide to improve the camel-jdbc component, we could adapt it like that (http://www.java2s.com/Code/Java/Database-SQL-JDBC/UsingadatabasetransactionwithJDBC.htm) and provide as a option to the uri the option Transactional = true/false ?
charly:1301561404:2011-03-31T16:50:04.069+0000:1301561404:2011-03-31T16:50:04.069+0000:Starting initial work on basic transactions using boolean parameter on the URI with a default of false.  Please advice if this is the incorrect start.

TODO: would be to add XA Transactions. 
muellerc:1301575359:2011-03-31T20:42:39.769+0000:1301575359:2011-03-31T20:42:39.769+0000:Heath, we love contributions. Go ahead!
charly:1301589900:2011-04-01T00:45:00.231+0000:1301589900:2011-04-01T00:45:00.231+0000:added transaction support using a new option 'useTx' with default of false and added appropriate tests.
njiang:1301593927:2011-04-01T01:52:07.392+0000:1301593927:2011-04-01T01:52:07.392+0000:@Heath,

I just checked your patch, your patch just make sure the statements which is passed to the camel-jdbc is transaction.
But if there are some exception throw from the camel route, the JdbcProducer doesn't roll back.

Willem
muellerc:1301666429:2011-04-01T22:00:29.246+0000:1301666429:2011-04-01T22:00:29.246+0000:Heath, here are my notes:
- We should rename 'useTx' to 'transacted'. This is the option name we use in camel-jms too.
- I added an unit test based on Charles use case and it still fails.

Christian
charly:1301671386:2011-04-01T23:23:06.373+0000:1301671386:2011-04-01T23:23:06.373+0000:Christian,

Thanks for the comments, I will update the option to the name you suggest.  As you stated, this does not fix the complete issue outlined above, which is why I do not submit this as a resolution to the above issue and made a TODO to support a more thorough implementation.  The above issue is actually a managed transaction where in the route itself is requiring the transaction to rollback, this requires a much more involved solution.  I updated the component to handle local transactions which it previously did not as laid out in the tests I created.  

I could open a separate jira and submit this as a solution to that if it makes more sense?  Thoughts?

Cheers,
Heath

muellerc:1301714549:2011-04-02T11:22:29.975+0000:1301714549:2011-04-02T11:22:29.975+0000:Ok, I understand.
No, we do not need a second issue. We can do all what's necessary to support transactionality with this ticket.
charly:1301772520:2011-04-03T03:28:40.810+0000:1301772520:2011-04-03T03:28:40.810+0000:updated the option for the transaction to use 'transacted' instead of 'useTx' per request.
muellerc:1303736376:2011-04-25T20:59:36.461+0000:1303736376:2011-04-25T20:59:36.461+0000:Should we use spring-tx to provide transaction support (like camel jms)? I'm working on a patch...
muellerc:1303738711:2011-04-25T21:38:31.706+0000:1303738711:2011-04-25T21:38:31.706+0000:After reading the issue thread again and thinking about it again, if would prefer (D)... :-)
(D) means:
- Let the jdbc component as it is (sorry Heath) because the only reason I know we (still) have the camel sql and the camel jdbc component is, because the camel jdbc component is more lightweight than the camel sql component (which use spring jdbc, spring transaction, ...).
- I would like to add the improvement Heath made to set the auto commit to false and execute explicitly a commit/rollback.
- Mention that limitation in the camel jdbc documentation.
- Improve the camel sql component so that we also can sent the sql statement(s) in the exchange's body.

This provides the user an easy migration path if they use camel jdbc and they realize some time they need transaction support.

What do you think?
charly:1303803384:2011-04-26T15:36:24.205+0000:1303803384:2011-04-26T15:36:24.205+0000:Christian,

If there is something I can help with let me know.  I understand your reasoning and agree.  If we try to make the jdbc act the same as sql then why have both?  
 
I am happy to help.
muellerc:1303809313:2011-04-26T17:15:13.043+0000:1303809313:2011-04-26T17:15:13.043+0000:Yes, those were my thoughts. I will apply your patch without the transacted option and open a new JIRA that camel sql should also support the exchange in body for the sql statements.
muellerc:1303819137:2011-04-26T19:58:57.016+0000:1303819137:2011-04-26T19:58:57.016+0000:Committed r1096880
muellerc:1303819202:2011-04-26T20:00:02.614+0000:1303819202:2011-04-26T20:00:02.614+0000:Heath, could you open a new JIRA for improving the camel sql component and working on this patch?
muellerc:1303819557:2011-04-26T20:05:57.230+0000:1303819557:2011-04-26T20:05:57.230+0000:Now, Camel jdbc set the auto commit flag to false and commit/rollback the database operation at the end. This prevent to left the database in an inconsistent state if one of multiple update statements fails.
muellerc:1303906834:2011-04-27T20:20:34.651+0000:1303906834:2011-04-27T20:20:34.651+0000:Claus comment was:
Hi

I think if we should behave nicely you ought to remember the
autoCommit setting on the Connection since its often from a connection
pool. And thus returned back to the pool. And in case we may have
""altered"" its default settings.

So if the connection pool is shared and use by other JDBC access
(maybe JPA) and they rely on auto commit being true. Then we just
changed that to false :).

But I dont think many people do that normally in this kind of code. We
could add a note in the wiki that it will set the auto commit to false
on the connection it obtains.

Alternatively we can remember the old value and set it back in case we
*changed* the option.
muellerc:1303908650:2011-04-27T20:50:50.512+0000:1303908650:2011-04-27T20:50:50.512+0000:Committed r1097232

Claus, thank you for the hint. Camel-jdbc will now remember the original autoCommit value and will set it back, before returning the connection.
muellerc:1304082454:2011-04-29T21:07:34.846+0000:1304082454:2011-04-29T21:07:34.846+0000:@Charles: I added a similar test to the camel-sql component: [SqlTransactedRouteTest.java|https://svn.apache.org/repos/asf/camel/trunk/components/camel-sql/src/test/java/org/apache/camel/component/sql/SqlTransactedRouteTest.java] and updates the wiki [SQL component|https://cwiki.apache.org/confluence/display/CAMEL/SQL+Component]."
0,CAMEL-3802,Bug,Minor,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Moulliard Charles,Moulliard Charles,0,0,2011-03-24 09:37:07+00:00,2011-10-25 11:36:20+00:00,"It is not possible in a simple expression to have access to a key of a Map when the key name contains dots


ex : <simple>${body[com.fusesource.webinars.persistence.model.Incident]}</simple>
where com.fusesource.webinars.persistence.model.Incident is the key name


Camel generates the error :



Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: [com not found on bean: [{com.fusesource.webinars.persistence.model.Incident=com.fusesource.webinars.persistence.model.Incident@7fec0e19[","cmoulliard:1300973184:2011-03-24T21:26:24.356+0000:1300973184:2011-03-24T21:26:24.356+0000:I suggest that we add a test to check if the first character of the body is a bracket. If this is the case, than we should no remove the dots from the key value

code to be changed

{code}
    public static Expression headersOgnlExpression(final String ognl) {
        return new ExpressionAdapter() {
            public Object evaluate(Exchange exchange) {
                // try with full name first
                Object header = exchange.getIn().getHeader(ognl);
                if (header != null) {
                    return header;
                }

                // split into first name
                List<String> methods = OgnlHelper.splitOgnl(ognl);
                // remove any OGNL operators so we got the pure key name
                String key = OgnlHelper.removeOperators(methods.get(0));

                header = exchange.getIn().getHeader(key);
                if (header == null) {
                    return null;
                }
                // the remainder is the rest of the ognl without the key
                String remainder = ObjectHelper.after(ognl, key);
                return new MethodCallExpression(header, remainder).evaluate(exchange);
            }

            @Override
            public String toString() {
                return ""headerOgnl("" + ognl + "")"";
            }
        };
    }
{code}"
0,CAMEL-3801,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Duplicate,2.8.0,Unassigned,Moulliard Charles,0,0,2011-03-23 11:07:04+00:00,2011-04-27 19:23:33+00:00,"The existing SQL component requires that the query is attached to the endpoint and parameters provided as a List when we would like to replace the # symbol by those values. 


The JDBC component adopts a different philosophy as the query can be build in a processor, bean or setBody and send to the JDBC endpoint.


Using the following syntax could be much more flexible to setup dynamically queries :



<route id=""insert-from-file"">
           <from uri=""file://target/datainsert?moveFailed=failed""/>
           <setBody>
               <simple>INSERT INTO REPORT.T_INCIDENT (INCIDENT_REF,
                   INCIDENT_DATE,GIVEN_NAME,FAMILY_NAME,SUMMARY,DETAILS,EMAIL,PHONE)
                   VALUES ('${body}','2011-03-21','Charles','Moulliard','Incident',
                   'This is a report incident for webinar-001',
                   'cmoulliard@fusesource.com','+111 10 20 300')
               </simple>
           </setBody>
           <to uri=""sql""/>
       </route>","rkettelerij:1302443975:2011-04-10T21:59:35.575+0000:1302443975:2011-04-10T21:59:35.575+0000:I'm marking this issue as duplicate of CAMEL-3800. The latter provides an alternative and is now implemented in 2.8. 

Please reopen this issue if you don't consider this to be a duplicate."
0,CAMEL-3800,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Willem Jiang,0,0,2011-03-23 10:07:48+00:00,2011-04-27 19:24:53+00:00,"Current we can only define a sql query in the SqlEndpoint URI, we need to a way to change the query per exchange.
An new camel header for this query could help use to do that.","rkettelerij:1302442229:2011-04-10T21:30:29.231+0000:1302442229:2011-04-10T21:30:29.231+0000:trunk: 1090893
rkettelerij:1302443018:2011-04-10T21:43:38.800+0000:1302443018:2011-04-10T21:43:38.800+0000:Updated wiki + release notes
davsclaus:1302477707:2011-04-11T07:21:47.219+0000:1302477707:2011-04-11T07:21:47.219+0000:Nice Richard. 

There is a checkstyle for the Camel source code. Which we try to adhere. You can read about it a bit here
http://camel.apache.org/building

Basically you run this maven goal + profile and it reports OK or errors. If you run it on the camel-sql, it reports some errors:
 mvn compile -Psourcecheck

Its a bit picky, so the orders of imports matter, which was are the errors in your case. Do you mind trying it out and to fix those CS errors?
rkettelerij:1302518158:2011-04-11T18:35:58.316+0000:1302518158:2011-04-11T18:35:58.316+0000:Done"
0,CAMEL-3799,Bug,Minor,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2011-03-23 02:46:31+00:00,2011-04-20 19:48:59+00:00,"The error is:



[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Request to merge when 'filtering' is not identical. Original=resource src/main/resources: output=target/classes, include=[], exclude=[**/*.java], test=false, filtering=false, merging with=resource src/main/resources: output=target/classes, include=[**/archetype-metadata.xml], exclude=[**/*.java], test=false, filtering=true




and it seems to be resolved in the upcoming maven-eclipse-plugin:2.9.0 (see MECLIPSE-576). An update to the new release of the plugin, once available, should resolve this.","davsclaus:1303271289:2011-04-20T11:48:09.720+0000:1303271289:2011-04-20T11:48:09.720+0000:Hadrian which Maven version are you using?

And end user reported it failed for him with 3.0.2. But after upgrading to 3.0.3 it worked
http://camel.465427.n5.nabble.com/Camel-release-2-8-td4305340.html#a4315571

PS: I wonder if we should consider having Maven 3.0.3+ being minimim for building Camel? But we can take that discussion on the @dev forum.
bvahdat:1303279203:2011-04-20T14:00:03.812+0000:1303279203:2011-04-20T14:00:03.812+0000:Claus,

I'm really sorry for the irritation I caused, as my answer to you on the user forum was just too speedy! Unfortunately I've got still exactly the same issue having the following setup:

D:\Data\eclipse-ws\camel-trunk>mvn --version
Apache Maven 3.0.3 (r1075438; 2011-02-28 18:31:09+0100)
Maven home: P:\My Documents\dev\env\apache-maven-3.0.3\bin\..
Java version: 1.6.0_24, vendor: Sun Microsystems Inc.
Java home: C:\Program Files\Java\jdk1.6.0_24\jre
Default locale: de_CH, platform encoding: Cp1252
OS name: ""windows xp"", version: ""5.1"", arch: ""x86"", family: ""windows""

So I tell you how I try to build and maybe you can tell me where I'm going wrong. I've checked out the camel trunk under ""D:\Data\eclipse-ws\camel-trunk"" and go through the following steps on this directory:

D:\Data\eclipse-ws\camel-trunk>mvn clean // just to make it sure that I've got no ""dead body"" hidden somewhere under the ""target"" directories

That goes well. Then as it's described @ http://camel.apache.org/building.html I do

set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=512m

That goes also well. Please note that I set the maximal heap size to just 512 and not 1024, as otherwise maven will fail to start (will not be able to allocate that much heap space on my machine). Then I do:

D:\Data\eclipse-ws\camel-trunk>mvn install -Pfastinstall

That goes smooth as well, but with that I just skipped the execution of the unit tests, so afterwards I simply do

D:\Data\eclipse-ws\camel-trunk>mvn test

That still fails as I've already reported here:

http://camel.465427.n5.nabble.com/Camel-release-2-8-tt4305340.html#a4305861#none

When I also try to do:

D:\Data\eclipse-ws\camel-trunk>mvn eclipse:clean eclipse:eclipse

It also fails with the effect I have already reported here:

https://issues.apache.org/jira/browse/CAMEL-3837

So I simply wonder how it's possible that all the steps above work on your box!!!

Again please accept my apologies for my speedy reply on the user forum...
davsclaus:1303279677:2011-04-20T14:07:57.303+0000:1303279677:2011-04-20T14:07:57.303+0000:Babak use the mailing list for discussing your build issue.

This JIRA ticket is about the mvn eclipse:eclipse goal failing due to an Eclipse bug.
davsclaus:1303279853:2011-04-20T14:10:53.792+0000:1303279853:2011-04-20T14:10:53.792+0000:Hmmm can people not just use an older version of the maven eclipse plugin? I recall you can add some parameters on the cmd line to specify the version. So maybe try with eclipse plugin v2.6 or 2.7 or whatever an older version that used to work.
hadrian:1303279995:2011-04-20T14:13:15.442+0000:1303279995:2011-04-20T14:13:15.442+0000:Some update on this. This is a known maven eclipse plugin issue. I think I have a workaround for this. Will get it in today or tomorrow if I don't run into other issues.
hadrian:1303280633:2011-04-20T14:23:53.755+0000:1303280633:2011-04-20T14:23:53.755+0000:@Claus, the particular issue that caused this bug is fixed, but there is no released version of the plugin that contains the fix yet.
dkulp:1303290355:2011-04-20T17:05:55.935+0000:1303290355:2011-04-20T17:05:55.935+0000:
There is an easy fix for this that would work today.   In the pom, change to:

{code:xml}
<resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource> 
      <resource>
        <directory>src/main/resources-filtered</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
{code}

and just move the archetype-metadata.xml file into src/main/resources-filtered.  CXF does this in several places and actually has src/main/resources-filtered defined in the parent pom to make it easy.




dkulp:1303290388:2011-04-20T17:06:28.008+0000:1303290388:2011-04-20T17:06:28.008+0000:
BTW:  I'd submit a patch but file moves in an svn patch don't usually work very well.
hadrian:1303295319:2011-04-20T18:28:39.803+0000:1303295319:2011-04-20T18:28:39.803+0000:Fixed. Thanks to Dan Kulp for providing a solution.
bvahdat:1303300139:2011-04-20T19:48:59.533+0000:1303300139:2011-04-20T19:48:59.533+0000:That now also works for me (mvn eclipse:eclipse). Thanks for the fix."
0,CAMEL-3798,New Feature,Major,2.6.0,2.8.0,"

configuration
ftp

",Resolved,Fixed,2.8.0,Willem Jiang,Yalim Aytul,0,0,2011-03-22 18:57:42+00:00,2011-03-23 09:53:06+00:00,"I had to configure (JSch) to send keepalives but sftp component doesn't expose those.
Expose serverAliveInterval/serverAliveCountMax on SftpConfiguration.","yaytul:1300791703:2011-03-22T19:01:43.947+0000:1300791703:2011-03-22T19:01:43.947+0000:Using the serverAliveInterval/serverAliveCountMax default values and adding them while creating the session.

So you can have two additional parameters:
&serverAliveInterval=123&serverAliveCountMax=456

If params are not set, it uses the default values



rkettelerij:1300842848:2011-03-23T09:14:08.047+0000:1300842848:2011-03-23T09:14:08.047+0000:Related thread on mailing list: http://camel.465427.n5.nabble.com/Is-there-a-way-to-pass-in-SO-KEEPALIVE-param-to-sftp-td3969262.html
njiang:1300845086:2011-03-23T09:51:26.236+0000:1300845086:2011-03-23T09:51:26.236+0000:Applied patch into trunk with thanks to Yalim.
"
0,CAMEL-3797,Bug,Major,2.7.0,None,"
None
",Closed,Fixed,"2.7.3, 2.8.0",Jonathan Anstey,Dejan Bosanac,0,0,2011-03-22 12:42:19+00:00,2011-10-25 11:36:13+00:00,"When some of the routes does not have a description NPE will be thrown, because of the code



${i.getDescription.getText}



To prevent it, just use



${i.getDescriptionText}","janstey:1300769779:2011-03-22T12:56:19.698+0000:1300769779:2011-03-22T12:56:19.698+0000:Hey Dejan,

Committed your patch in http://svn.apache.org/viewvc?view=revision&revision=1084150. Thanks for the fix!

Cheers,
Jon
dejanb:1300769971:2011-03-22T12:59:31.720+0000:1300769971:2011-03-22T12:59:31.720+0000:Thanks Jon!"
0,CAMEL-3796,Improvement,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,1,2011-03-22 03:52:13+00:00,2011-03-23 03:14:25+00:00,"Current CxfRsProducer will try to locate the method invocation for calling the proxy client by using the reflection API.
It can't handle the no parameters rightly as the message body could be null, and the user needs to apply custom converter to work around this issue.","boday:1300783506:2011-03-22T16:45:06.241+0000:1300783506:2011-03-22T16:45:06.241+0000:Willem, can you provide a simple test case for this scenario.  I see the CxfRsProducerTest.testGetConstumersWithClientProxyAPI() test uses a NULL body and is able to resolve the method ""getCustomers()"" correctly...
njiang:1300821148:2011-03-23T03:12:28.536+0000:1300821148:2011-03-23T03:12:28.536+0000:Hi Ben,

If you revert my change in CxfRsProducer, you will see the old camel cxfrs producer didn't support to resolve the method with a no parameters.

Willem

njiang:1300821265:2011-03-23T03:14:25.746+0000:1300821265:2011-03-23T03:14:25.746+0000:Here is some discussion in Fuse Forums about it.
http://fusesource.com/forums/thread.jspa?messageID=9722"
0,CAMEL-3795,Bug,Major,2.7.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Marco Crivellaro,0,2,2011-03-21 18:48:36+00:00,2011-10-25 11:36:06+00:00,in some circumstances interceptSendToEndpoint in conjunction with recipientList is running in exception. this seems to be the case when an http endpoint is sent in the recipient list after having processed and ftp in the previous exchange.,"crive:1300704614:2011-03-21T18:50:14.748+0000:1300704614:2011-03-21T18:50:14.748+0000:JUnit test showing the exception
davsclaus:1301194452:2011-03-27T10:54:12.266+0000:1301194452:2011-03-27T10:54:12.266+0000:Please remember to add link to discussion using nabble
http://camel.465427.n5.nabble.com/java-util-concurrent-RejectedExecutionException-using-interceptSendToEndpoint-td3425179.html
davsclaus:1301194597:2011-03-27T10:56:37.055+0000:1301194597:2011-03-27T10:56:37.055+0000:The problem is that the end user is using a custom thread pool where the default strategy is to reject executing tasks, when the thread pool do not have any free threads. And thus you get the rejected exception.

Not a problem in Camel.
crive:1301359002:2011-03-29T08:36:42.841+0000:1301359002:2011-03-29T08:36:42.841+0000:The unit test uses mock up endpoint which does not show the wrong behaviour. 
The test attached to the ticket does not make use of custom thread pool: 

from(""direct:start"").recipientList(header(InterceptSendToEndpointException.recipientListHeaderName).tokenize("","")).to(""mock:end"");
davsclaus:1301391308:2011-03-29T17:35:08.019+0000:1301391308:2011-03-29T17:35:08.019+0000:Can you attach the unit test which fails for you.
The attached test case works just fine! In fact it doesn't use any thread pool at all.
crive:1301448503:2011-03-30T09:28:23.896+0000:1301448503:2011-03-30T09:28:23.896+0000:Attaching another unit test showing the exception, the difference with previous one is that it is using real endpoints.
davsclaus:1301465704:2011-03-30T14:15:04.124+0000:1301465704:2011-03-30T14:15:04.124+0000:Okay I found the culprint. The lifecycle of the interceptor was affected by ftp producer as it was a pooled resource and thus its lifecycle is unusual. 
davsclaus:1301472879:2011-03-30T16:14:39.737+0000:1301472879:2011-03-30T16:14:39.737+0000:It should be fixed now
crive:1301901476:2011-04-04T15:17:56.992+0000:1301901476:2011-04-04T15:17:56.992+0000:I am still experiencing the same issue with the latest test attached. I am using camel 2.8-snapshot"
0,CAMEL-3794,Improvement,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Christian Müller,Christian Müller,0,1,2011-03-21 17:24:56+00:00,2011-03-21 21:52:23+00:00,No Desc,"muellerc:1300715390:2011-03-21T21:49:50.776+0000:1300715390:2011-03-21T21:49:50.776+0000:secretKey should not be logged in plain text
adjust the logging to the slj4j capabilities
muellerc:1300715531:2011-03-21T21:52:11.339+0000:1300715531:2011-03-21T21:52:11.339+0000:Committed r1083979"
0,CAMEL-3793,Improvement,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Jean-Michel Morel,0,0,2011-03-21 13:16:57+00:00,2011-10-01 15:20:11+00:00,"I have a setup where I use file component to move files after being processed ou when processing fails.
As I have no troubles neither on my development workstation neither on local directory on my linux environnement. It fails when the monitored directory is a NFS mounted directory pointing to a Windows 2008 Server shared directory.
While it's not a camel bug, the generated logs are just useless because we can't get the reason of failure.


Investigating the source code tells me that the File.renameTo method is used (with the three times try hack for Windows , so I can't get any further information on the reason.


Could you implement a fallback strategy like copy the file and delete the original one ? (should it be made optional)


To workaround this, I currently do the move operations manually by invoking the FileUtils.moveTo(...) from commons-io (which implements exactly the fallback method I described on renameTo failure).
But, I have side effects as I'm forced to use the noop attribute.
(in fact, it doesn't explain why the rename fails, but it works, and should it be a failure I'll get an explicit error message).","davsclaus:1304137587:2011-04-30T12:26:27.464+0000:1304137587:2011-04-30T12:26:27.464+0000:What don't we do for our windows users ;)
maria.iracheta@gmail.com:1317282128:2011-09-29T15:42:08.375+0000:1317282128:2011-09-29T15:42:08.375+0000:I can see why this change was made in the rename method of FileUtil, but this change has created a problem for us:
- Before: if a file was opened in Windows, the renaming method was not working, so the File was not being moved and therefore it was not being processed. It would fail and let the user know that the file could not be renamed.The file was not being processed.
- Now: if it cannot rename it, after 3 tries it will copy it (the processing of the file starts) and then fails to delete it, what means that it will be endlessly process the file until somebody realises.

Is it possible to make the feature of copy/delete instead of rename configurable? Or is there any way of preventing the endlessly processing of a File that is opened by a user in Windows that could come out of box with Camel File? Or should we implement our own thing?

jmmorel:1317295068:2011-09-29T19:17:48.070+0000:1317295068:2011-09-29T19:17:48.070+0000:I understand your problem. Have you tried the consumer.exclusiveReadLock parameter ?

davsclaus:1317332575:2011-09-30T05:42:55.848+0000:1317332575:2011-09-30T05:42:55.848+0000:Maria good idea, can you create a new ticket? I also think it should be configurable.
maria.iracheta@gmail.com:1317362095:2011-09-30T13:54:55.293+0000:1317362095:2011-09-30T13:54:55.293+0000:Thanks Jean-Michel Morel for the suggestion, we might try to implement our own org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy for the time being.

Thanks Claus, I have raised an improvement ticket, CAMEL-4505, it also includes what I think is a bug in the FileUtils copy/delete area."
0,CAMEL-3792,Improvement,Major,None,"2.7.1, 2.8.0","
None
",Closed,Fixed,"2.7.1, 2.8.0",Willem Jiang,Willem Jiang,0,0,2011-03-21 08:04:47+00:00,2011-10-25 11:35:34+00:00,"As the PipleLine processor will copy the exchange out message as the next exchange in message, we should clean up the out message of exchange when the ErrorHandler useOriginalMessage option is true, because we don't want the out message to be routed to next endpoint.","njiang:1300667709:2011-03-21T08:35:09.864+0000:1300667709:2011-03-21T08:35:09.864+0000:Here is some discussion about it

http://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-tp3741631p3975821.html

davsclaus:1301711727:2011-04-02T10:35:27.311+0000:1301711727:2011-04-02T10:35:27.311+0000:Willem haven't you already fixed this?
njiang:1301721130:2011-04-02T13:12:10.642+0000:1301721264:2011-04-02T13:14:24.250+0000:Already committed the patch into the trunk.

http://svn.apache.org/viewvc?rev=1083696&view=rev
"
0,CAMEL-3791,Bug,Major,"2.5.0, 2.6.0, 2.7.0",2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Willem Jiang,0,0,2011-03-21 07:58:58+00:00,2011-03-28 00:18:00+00:00,"--- src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(revision 1083672)
+++ src/main/java/org/apache/camel/processor/RedeliveryErrorHandler.java	(working copy)
@@ -591,18 +591,23 @@
         // is the a failure processor to process the Exchange
         if (processor != null) {
 
-            // reset cached streams so they can be read again
-            MessageHelper.resetStreamCache(exchange.getIn());
-
             // prepare original IN body if it should be moved instead of current body
             if (data.useOriginalInMessage) {
                 if (log.isTraceEnabled()) {
                     log.trace(""Using the original IN message instead of current"");
                 }
                 Message original = exchange.getUnitOfWork().getOriginalInMessage();
                 exchange.setIn(original);
             }

+            // reset cached streams so they can be read again
+            MessageHelper.resetStreamCache(exchange.getIn());","davsclaus:1301193472:2011-03-27T10:37:52.347+0000:1301193472:2011-03-27T10:37:52.347+0000:Have you committed this? If so mark this ticket as resolved.
njiang:1301242680:2011-03-28T00:18:00.527+0000:1301242680:2011-03-28T00:18:00.527+0000:The patch is already committed into the trunk."
0,CAMEL-3790,Improvement,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-18 16:15:55+00:00,2011-03-31 09:59:44+00:00,"We should detect if the return type is a Future, then we can return early (async).","davsclaus:1300436190:2011-03-18T16:16:30.114+0000:1300436190:2011-03-18T16:16:30.114+0000:See nabble
http://camel.465427.n5.nabble.com/Asynchronous-Remoting-with-Futures-td3606370.html
davsclaus:1301363559:2011-03-29T09:52:39.116+0000:1301363559:2011-03-29T09:52:39.116+0000:Patch. Need more unit tests, but the logic is implemented and works :)"
0,CAMEL-3789,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Claus Ibsen,Maria Iracheta,0,0,2011-03-18 14:09:55+00:00,2011-10-25 11:36:11+00:00,"MarkerFileExclusiveReadLockStrategy is not thread-safe. When I run  a File endpoint with more than one thread the MarkerFileExclusiveReadLockStrategy only deletes the last file to start being processed. 


The MarkerFileExclusiveReadLockStrategy uses global variables: 
private File lock; 
private String lockFileName; 
and gives them values on the acquireExclusiveReadLock method. When another thread calls the releaseExclusiveReadLock method it uses the global variables to delete the locked file. That means that if another thread came and called the acquireExclusiveReadLock it would have changed the values on the global variables. 


If lock and lockFileName are not global variables the problem seems to disappear and I can a multithreaded File endpoint and not locked file is left undeleted.","maria.iracheta@gmail.com:1300769154:2011-03-22T12:45:54.239+0000:1300769154:2011-03-22T12:45:54.239+0000:This readLockStrategy was not thread-safe. It was unlocking the last File that had been locked. Now each of the methods recreates the lock file based on the input attributes
maria.iracheta@gmail.com:1300775626:2011-03-22T14:33:46.619+0000:1300775626:2011-03-22T14:33:46.619+0000:The method buildDirectory was not Thread Safe at the point of trying to create the directory.
maria.iracheta@gmail.com:1300775906:2011-03-22T14:38:26.035+0000:1300775906:2011-03-22T14:38:26.035+0000:The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.
maria.iracheta@gmail.com:1300775929:2011-03-22T14:38:49.672+0000:1300775929:2011-03-22T14:38:49.672+0000:The method begin was calling super.begin and passing the original File instead of the renamed File. But in the rollback and the commit methods the file passed is the renamed File. So in the begin method we are using the original file but in rollback and commit we are using the renamed File.
maria.iracheta@gmail.com:1300776037:2011-03-22T14:40:37.143+0000:1300776037:2011-03-22T14:40:37.143+0000:Junit class to test the MarkerFileExclusiveReadLockStrategy in a multithreaded scenario
davsclaus:1301192722:2011-03-27T10:25:22.311+0000:1301192722:2011-03-27T10:25:22.311+0000:Thanks for the patch."
0,CAMEL-3788,Bug,Major,"2.0-M2, 2.6.0","2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Ashwin J. Karpe,0,0,2011-03-17 19:47:05+00:00,2011-10-25 11:36:22+00:00,"Camel HTTP Producer is throwing an exception when it encounters a connection timeout. However instead of preserving the original message it is treating it processing the exception output. When connected to a redelivery meachanism, this results in an exception message being sent as input to the HTTP Consumer. The older versions of Camel behaved differently on read timeout. In Camel 1.x, in a read timeout, the Exception is thrown and the input message to the producer is passed through the pipeline. Now there is a difference: An exception is thrown and the output of the HTTP Producer is passed through the pipeline. 


Need to study why and what changed since Camel 1.x and ensure that the above does not happen.


For more details, please check out the following nabble entry


http://camel.465427.n5.nabble.com/Http-route-returning-with-200-but-also-getting-read-timed-out-td3741631.html#a3897410


Cheers,


Ashwin...",njiang:1300673625:2011-03-21T10:13:45.299+0000:1300673625:2011-03-21T10:13:45.299+0000:Committed the patch into camel-http and camel-http4.
0,CAMEL-3787,Improvement,Major,2.6.0,,"
None
",Resolved,Implemented,None,Unassigned,Bengt Rodehav,0,1,2011-03-17 11:47:45+00:00,2013-05-26 09:32:00+00:00,"Being Swedish the file names sometimes contain national characters (åäöÅÄÖ). This does not work out-of-the-box in camel-ftp.


In order for this to work, the control encoding must be properly set or the characters in the file name will be misinterpreted. In my case, the ftp server was Serv-U. Serv-U supports UTF-8 and uses it by default. I read somewhere that if the ftp server supports UTF-8, then it should use UTF-8 if the client doesn't tell it not to. I managed to get this to work by specifying the following URI option:



&ftpClient.controlEncoding=UTF-8??


In comparison, the Filezilla ftp client handles this much better. It issues the FEAT command and if the server responds with UTF8, then Filezilla will request that UTF-8 is used (with an OPTS command). Ideally, camel-ftp should use the same logic. Or, if that is unnecessary overhead, then camel-ftp could have an ""autoconfig"" option that would cause camel-ftp to try to find the best configuration of options that are not specified on the URI, e g the controlEncoding.


Whether UTF-8 should be the default control encoding or not is also a valid question.


Note that camel-ftp uses Commons Net Ftp. Perhaps the autoconfig option belongs there.","rodehav:1327575233:2012-01-26T18:53:53.864+0000:1327575233:2012-01-26T18:53:53.864+0000:Seems like this has been fixed in Commons Net 3.0. When Camel migrates to Commons Net 3.0 this issue could be tested and then (hopefully) closed.

See: https://issues.apache.org/jira/browse/NET-314



davsclaus:1369531920:2013-05-26T09:32:00.056+0000:1369531920:2013-05-26T09:32:00.056+0000:Thanks we have upgraded to commons net a while back."
0,CAMEL-3786,Task,Major,2.7.0,"2.7.1, 2.8.0","
None
",Closed,Fixed,"2.7.1, 2.8.0",Willem Jiang,Willem Jiang,0,0,2011-03-16 13:23:27+00:00,2011-10-25 11:36:07+00:00,"pax-exam need to be 1.2.4
pax-runner need to be 1.6.1
Also need to update some features configure in the OSGi integration test.","njiang:1300342642:2011-03-17T14:17:22.659+0000:1300342642:2011-03-17T14:17:22.659+0000:I just did a clean up work on OSGi integration tests, now they are use the karaf test helper to set the profile of Karaf.
I will commit the code once the camel 2.7.0 release candidate is cut.
njiang:1300668566:2011-03-21T08:49:26.685+0000:1300668566:2011-03-21T08:49:26.685+0000:Committed the patch in revision 1083702.
davsclaus:1301193434:2011-03-27T10:37:14.714+0000:1301193434:2011-03-27T10:37:14.714+0000:I have seen some slf4j duplicate loggers on classpath when running the osgi tests. Can you please look into this as well.
davsclaus:1301711797:2011-04-02T10:36:37.769+0000:1301711797:2011-04-02T10:36:37.769+0000:Willem is this work done?
njiang:1301721326:2011-04-02T13:15:26.992+0000:1301721326:2011-04-02T13:15:26.992+0000:@Claus, 
Yes, I already fixed the slf4j issue."
0,CAMEL-3785,Improvement,Major,2.7.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,0,2011-03-12 13:34:51+00:00,2015-07-11 22:18:27+00:00,"Look at JmsLoadBalanceFailoverWithForceSendOriginalJmsMessageTest in camel-jms unit tests.


We should maybe try to look for a solution where you can just configure mapMessage=false and transferException=true on the JmsComponent configuration and then don't have to bother anything on the endpoint uri configs.


Also the code in JmsMessage should know its mapMessage=false, and thus avoid extracting headers/body from the underlying JMSMessage to optimize that. It can be a bit tricky though if a ProducerTemplate sends and wants a reply, and thus the message body should be extracted.","charly:1303803587:2011-04-26T15:39:47.582+0000:1303803587:2011-04-26T15:39:47.582+0000:Can we just ignore mapMessage on request/reply in the ProducerTemplate and handle the message as usual.  But streamline the processing on async with mapMessage=false?
davsclaus:1303879600:2011-04-27T12:46:40.432+0000:1303879600:2011-04-27T12:46:40.432+0000:Yeah we could consider producer template a corner case and have it optimized for regular routes which is what end users uses. "
0,CAMEL-3784,Task,Minor,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Claus Ibsen,0,0,2011-03-12 10:03:48+00:00,2011-04-07 13:54:24+00:00,"Is it possible to upgrade to Jetty 7.3.1? Are there any implications with CXF 2.3.3?
If there are then schedule this for Camel 2.8.


Willem I am assigning this to you. Maybe you can check it out.


Apache SMX 4.4 is scheduled to upgrade to this version of Jetty.","njiang:1300058999:2011-03-14T07:29:59.586+0000:1300058999:2011-03-14T07:29:59.586+0000:I just upgrade the Jetty version run some test within camel-jetty, everything looks good.

But CXF 2.3.3 can't work with Jetty 7.3.1 well if you are try to start the CXF server with SSL configuration.
Here is the change[1] that is needed in CXF.

So we'd better wait for doing it in Camel 2.8.0 after another around release of CXF.
[1]http://svn.apache.org/viewvc?rev=1079176&view=rev
jbonofre:1300151685:2011-03-15T09:14:45.986+0000:1300151685:2011-03-15T09:14:45.986+0000:Hi guys, this Jira is not duplicated with CAMEL-3767 ?
njiang:1300153540:2011-03-15T09:45:40.282+0000:1300153540:2011-03-15T09:45:40.282+0000:No, this issue is not related to the feature file directly.

jbonofre:1300153921:2011-03-15T09:52:01.157+0000:1300153921:2011-03-15T09:52:01.157+0000:I'm not talking about the features file, I'm talking about a Jira named ""Upgrade to Jetty 7.3.1"".

It looks very similar :)
njiang:1300155544:2011-03-15T10:19:04.516+0000:1300155544:2011-03-15T10:19:04.516+0000:We can't upgrade Jetty to 7.3.1 until a new version of CXF is released.
Because we don't have the Jetty CXF ssl server tests in Camel trunk, so we can't catch this issue by running the tests in camel.
njiang:1302155622:2011-04-07T13:53:42.205+0000:1302155622:2011-04-07T13:53:42.205+0000:As we are use CXF 2.4.0-SNAPSHOT in the camel trunk, I just committed the patch which upgrade the Jetty version to 7.3.1."
0,CAMEL-3783,Improvement,Minor,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-12 07:13:00+00:00,2011-10-25 11:35:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-can-I-disable-stack-traces-from-GenericFileOnCompletion-s-LoggingExceptionHandler-tp3424278p3424278.html",davsclaus:1299891092:2011-03-12T08:51:32.586+0000:1299891092:2011-03-12T08:51:32.586+0000:trunk: 1080891.
0,CAMEL-3782,Improvement,Major,2.6.0,None,"
None
",Closed,Fixed,2.7.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-03-11 19:51:17+00:00,2011-10-25 11:35:54+00:00,"When using mapJmsMessage=false you would think that Camel would send along the original JMS message. However, if you touch the Camel Message headers (get or set) this effectively disables the mapJmsMessage option. I came across this issue when using the failover loadbalancer. We should add an option to force Camel to send along the orginal JMS message.",
0,CAMEL-3781,New Feature,Minor,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Bryan Keller,0,0,2011-03-11 18:32:52+00:00,2011-05-29 11:49:27+00:00,"It would be nice to add an option to the JMS component to disable the use of message expirations for InOut exchanges. If a client and server have clocks that are out-of-sync, using message expiration can cause problems. More details can be found here:
http://camel.465427.n5.nabble.com/InOut-exchanges-require-synchronized-clocks-td3411881.html","charly:1301923880:2011-04-04T21:31:20.180+0000:1301923880:2011-04-04T21:31:20.180+0000:added a new option for disableExpiration per the suggestion in the link.  Added new test to prove out the code.  Any suggestions are welcome on ways to improve it.
charly:1301933199:2011-04-05T00:06:39.595+0000:1301933199:2011-04-05T00:06:39.595+0000:attaching with ASF
hadrian:1301936718:2011-04-05T01:05:18.649+0000:1301936718:2011-04-05T01:05:18.649+0000:Heath, what about using the requestTimeout instead of introducing another option?
requestTimeout=0 would have the same effect.


{code}
-   if (answer instanceof JmsTemplate && requestTimeout > 0) {
+   if (answer instanceof JmsTemplate && requestTimeout >= 0) {
        JmsTemplate jmsTemplate = (JmsTemplate) answer;
        jmsTemplate.setExplicitQosEnabled(true);
-           if (timeToLive < 0) {
+           if (timeToLive < 0 && requestTimeout > 0) {
                // If TTL not specified, then default to
                jmsTemplate.setTimeToLive(requestTimeout);
            }
{code}

charly:1301938864:2011-04-05T01:41:04.960+0000:1301938864:2011-04-05T01:41:04.960+0000:Hadrian,

Thanks for looking at it and for your suggestions.  The only issue I would see with that is if a user wants a timeout of some value... lets say 2 secs, but still wants the to disable expiration anyway.  That was what the forum thread appeared to request.  If that is not the case then I have no problem changing it. 


hadrian:1301945377:2011-04-05T03:29:37.508+0000:1301945377:2011-04-05T03:29:37.508+0000:Heath, I am not disagreeing with you. I was just pointing out that there is another 2 line change that has exactly the same same effect. 

From your example, if the requestTimeout=2000 and disableExpiration=true, then the value of requestTimeout is ignored, so one might as well set it to 0, it won't do any good to ""want a timeout of some value"". In other words a requestTimeout=0 would have the same semantics as disableExpiration=true, i.e. TTL not be set (unless I am missing something).

Do you agree with the assessment above? Introducing new options complicates urls, documentation, etc. and I prefer avoiding that when possible. Other than that the patch is good, thanks for the patch by the way. I would only recommend implementing it by using the value '0' of the requestTimeout (unused now) instead of introducing a new option.
bryanck:1301951305:2011-04-05T05:08:25.005+0000:1301951305:2011-04-05T05:08:25.005+0000:Message expiration is something handled by the message broker (not Camel). A message that has expired will not be delivered by the broker. This feature requires clocks on the server and client be synchronized to work properly.

Request timeout is used by Camel to define how long a client should wait for a response from an InOut request before throwing an exception. It is implemented on the client only and thus does not require clocks be synchronized.

I still wanted the request timeout (I don't wait forever for a response on the client), but I wanted to turn off using message expiration because I could not guarantee the client and server clocks were in sync.
charly:1301982509:2011-04-05T13:48:29.195+0000:1301982509:2011-04-05T13:48:29.195+0000:@Hadrian - Does Bryan's response make sense?  I do agree with you, that new options complicate URIs, documentation, etc. and I would prefer to avoid that when possible also.  I do not see a way of implementing Bryan's suggested improvement without one, but I am open to suggestions.  I did make the default function the way Claus suggested in the link, so current implementations would not see a change.

@Bryan - did you look at the patch?  Does it solve your request the way you have defined it?  Checkout the test, that should layout the functionality pretty well and give you an idea of what was implemented.  
bryanck:1301996170:2011-04-05T17:36:10.877+0000:1301996170:2011-04-05T17:36:10.877+0000:The patch looks good. In the test, I'm not familiar with the ""synchronous=true"" option. Is that functionally similar to using an InOut exchange pattern?
hadrian:1301997204:2011-04-05T17:53:24.405+0000:1301997204:2011-04-05T17:53:24.405+0000:@Heath: yes, @Bryan's response does make sense. The patch is also good (said that already). I'll take another look today at the use of requestTimeout and apply the patch.
hadrian:1301997204:2011-04-05T17:53:24.669+0000:1301997204:2011-04-05T17:53:24.669+0000:@Heath: yes, @Bryan's response does make sense. The patch is also good (said that already). I'll take another look today at the use of requestTimeout and apply the patch.
charly:1301997471:2011-04-05T17:57:51.513+0000:1301997471:2011-04-05T17:57:51.513+0000:Hadrian,

Thanks for the feedback.  If there is something I can do to improve it let me know.
davsclaus:1303636070:2011-04-24T17:07:50.086+0000:1303636070:2011-04-24T17:07:50.086+0000:The patch must be attached with granted license to Apache. So can you re-attach the patch and make sure to [x] in the grant license to Apache checkbox.
davsclaus:1304137635:2011-04-30T12:27:15.495+0000:1304137635:2011-04-30T12:27:15.495+0000:Bryan do you mind re-attaching the patch and granting license to Apache? Otherwise can cannot accept your patch.
bryanck:1304192496:2011-05-01T03:41:36.884+0000:1304192496:2011-05-01T03:41:36.884+0000:That was Heath's patch I believe.
davsclaus:1304306660:2011-05-02T11:24:20.209+0000:1304306660:2011-05-02T11:24:20.209+0000:Bryan thanks. I have send Heath and email about this.
charly:1304306949:2011-05-02T11:29:09.587+0000:1304306949:2011-05-02T11:29:09.587+0000:I might have forgot to last time, re attaching with grant  ;-)
davsclaus:1306638517:2011-05-29T11:08:37.432+0000:1306638517:2011-05-29T11:08:37.432+0000:The option is going to be named {{disableTimeToLive}} as it indicate TTL is being disabled. I have improved the patch to also be applicable for InOnly messaging.


davsclaus:1306640892:2011-05-29T11:48:12.483+0000:1306640892:2011-05-29T11:48:12.483+0000:Updated documentation as well.

Keith thanks for the patch. I polished it a bit and renamed the option etc.
davsclaus:1306640967:2011-05-29T11:49:27.836+0000:1306640967:2011-05-29T11:49:27.836+0000:btw we are a bit reluctant to add new options to JMS as it already have a lot. But this problem about not synced clocks between systems when doing JMS is often seen. And not all message brokers etc. offer a plugin to cater for that etc. So its a good idea to have this {{disableTimeToLive}} option in Camel to remedy this."
0,CAMEL-3780,Improvement,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Claus Ibsen,0,0,2011-03-11 11:18:38+00:00,2011-05-17 02:13:22+00:00,"If you check the source code in HttpComponent in the two components you will see that some of the options is not the same in camel-http4. We should align those so they are the same.


eg
username -> authUsername
password -> authPassword
domain -> authDomain
host -> authHost


And maybe some are missing such as authMethod and whatnot.","fribeiro:1305553864:2011-05-16T21:51:04.414+0000:1305553864:2011-05-16T21:51:04.414+0000:Attached the patch for revision, didn't account for parameters missing in camel-http4, though.
njiang:1305569589:2011-05-17T02:13:09.600+0000:1305569589:2011-05-17T02:13:09.600+0000:Applied patch with thanks to Fernando, and also fix build error and the unit test failures.
The camel-http4 wiki page has been updated. "
0,CAMEL-3779,Bug,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,ben,0,1,2011-03-11 01:36:19+00:00,2011-06-09 08:48:56+00:00,"Hi, 


I run into the following problem with Camel 2.6.0:


An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.
The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.
These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.


The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.
The Java Bean Splitter produces URI like: 



http4://download.acme.com/file_1.txt?username=foo&password=baa



Here's the setup:



<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <method bean=""prepareDownLoadUri"" method=""parseIndexHtml"" />
   <setHeader headerName=""CamelHttpMethod"">
     <constant>GET</constant>
   </setHeader> 
   <setHeader headerName=""CamelHttpUri"">
     <simple>${body}</simple>
   </setHeader>
   <to uri=""http4://download.acme.com/"" />
   <to uri=""bean:saveFileProcessor"" />
</route>
<bean id=""prepareDownLoadUri"" class=""com.acme.PrepareDownLoadUri"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />




The injection of the URIs from the Splitter into the HttpProducer, works quite well. 
I debugged into the HttpProducer and it seems, that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with  the authentification settings from the URI.


At first, the queryString is extracted from the Exchange-Header (if provided)


HttpProducer.createMethod(), line 273
String url = HttpHelper.createURL(exchange, getEndpoint());




The url string contains the URI produces by the splitter including the authentification parameters: 



http4://download.acme.com/file_1.txt?username=foo&password=baa



Then the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273)  
and other parameters from the Exchange Header: 


HttpProducer.createMethod(), lines 285-300
        // is a query string provided in the endpoint URI or in a header (header overrules endpoint)
        String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);
        if (queryString == null) {
            queryString = getEndpoint().getHttpUri().getRawQuery();
        }

        StringBuilder builder = new StringBuilder(uri.getScheme()).append(""://"").append(uri.getHost());

        if (uri.getPort() != -1) {
            builder.append("":"").append(uri.getPort());
        }

        if (uri.getPath() != null) {
            builder.append(uri.getRawPath());
        }

        if (queryString != null) {
            builder.append('?');
            builder.append(queryString);
        }

        HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());




The problem is, in the assembling of the new URI, the authentification parameters are dropped.  


One possible solution could be: 



check for authentification parameters in the url (line 273) and extract them.
build the credentials, AuthScheme and provide it to the underlying http client.



thanks in advance,
ben","davsclaus:1299790660:2011-03-11T04:57:40.330+0000:1299790660:2011-03-11T04:57:40.330+0000:Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?

Can you try with camel-http instead of camel-http4 component?
And try with latest code from trunk, eg Camel 2.7.

And please use the mailing list first to get help, and then only later open a JIRA ticket, as stated here:
http://camel.apache.org/support


ben@micromata.de:1299812833:2011-03-11T11:07:13.379+0000:1299813103:2011-03-11T11:11:43.888+0000:Hi Claus, 

thanks for the fast reply. 

{quote}
Is username and password parameters you must send to the remote server?
Or part of authentication using eg BASIC on the http client?
{quote}

The username and password parameters are needed for BASIC authentication via the http client. 

{quote}
Can you try with camel-http instead of camel-http4 component?
{quote}
Yes, with the same result: no authentification scheme is provided with the request. 

Is there any way to provide this information into the http client? 
What do you think about provide auth. information via addional header information from the Exchange?
The HttpProducer extract the information and set the auth. scheme in the http client.
In the style of the HttpConfiguration of camel-http, we could introduce the following header parameters:
||Name||Description||
|Exchange.HTTP_AUTHTIFICATION_SCHEMA| Basic, Digest, Ntml|
|Exchange.HTTP_USENAME | the username for the HTTP request |
|Exchange.HTTP_PASSWORD| the password for the HTTP request|
|Exchange.HTTP_Domain| for NTML authentication |
|Exchange.HTTP_AUTH_HOST| Optional host for NTML authentication |
|Exchange.HTTP_PROXY_HOST | the proxy to use |
|Exchange.HTTP_PROXY_AUTH_METHOD | the auth. scheme for the proxy |
|Exchange.HTTP_PROXY_USERNAME | the username for the proxy |
|Exchange.HTTP_PROXY_PASSWORD |the password for the proxy |

If you like, I can implement such a solution. 

thanks,
ben 

davsclaus:1299813394:2011-03-11T11:16:34.578+0000:1299813394:2011-03-11T11:16:34.578+0000:The camel-http4 component is not as good as the camel-http. Especially the http client 4.0.x was not so good. We recommend to use camel-http until Http Client 4.1.x shapes up. Which it seems to be doing.

The auth parameters for camel-http is slighly different as you would see
http://camel.apache.org/http

eg you should use authUsername, authPassword and authMethod.

In fact camel-http4 should use the *same* options as camel-http so its easy to migrate. I can see from the codebase that camel-http4 hasn't done that for some parameters so I will create a JIRA.

See the unit test HttpBasicAuthTest in camel-jetty source code for examples.


ben@micromata.de:1299817511:2011-03-11T12:25:11.850+0000:1299925033:2011-03-12T18:17:13.000+0000:Hi Claus, 

thanks for your prompt answer. 
In the meantime, I found the following work around: I wrote a small ProcessorBean
that simply creates the HTTP Authorization Header  and stores HTTP Authorization Header
in the message header: 
{code}
final String userPassword = ""foo"" + "":"" + ""bar"";
final byte[] encodeBase64 = Base64.encodeBase64(userPassword.getBytes());
final String encoding = new String(encodeBase64);
final String authParameter = ""Basic "" + encoding;
msg.setHeader(""Authorization"", authParameter);{code}

This solution works with camel-http and camel-http4, because both implementations of the HttpProducer,
the Header information of the message is passed through request, see HttpProducer.java from camel-http4 in the lines 87-93:
{code}
        // propagate headers as HTTP headers
        for (Map.Entry<String, Object> entry : in.getHeaders().entrySet()) {
            String headerValue = in.getHeader(entry.getKey(), String.class);
            if (strategy != null && !strategy.applyFilterToCamelHeaders(entry.getKey(), headerValue, exchange)) {
                method.addRequestHeader(entry.getKey(), headerValue);
            }
        }
{code}

The route is now:
{code}
<route>
   <from uri=""file:///tmp/files_to_retrieve/"" />
   <split>
     <method bean=""prepareDownLoadUriSplitter"" method=""parseIndexHtml"" />
     <!-- provide the HTTP auth. scheme -->
     <to uri=""authorizeWebRequestProcessor"" />
     <to uri=""http://download.acme.com/"" />
     <to uri=""bean:saveFileProcessor"" />
   </split>
</route>
<bean id=""prepareDownLoadUriSplitter"" class=""com.acme.PrepareDownLoadUriSplitter"" />
<bean id=""authorizeWebRequestProcessor"" class=""com.acme.AuthorizeWebRequestProcessor"" />
<bean id=""saveFileProcessor"" class=""com.acme.SaveFileProcessor"" />
{code}

best regards,
ben



davsclaus:1299895799:2011-03-12T10:09:59.582+0000:1299895799:2011-03-12T10:09:59.582+0000:Ben you talk about a splitter? But the route you post don't have any splitter. How is that?
davsclaus:1299895828:2011-03-12T10:10:28.233+0000:1299895828:2011-03-12T10:10:28.233+0000:This problem would be in both camel-http and camel-http4
ben@micromata.de:1299924925:2011-03-12T18:15:25.770+0000:1299924925:2011-03-12T18:15:25.770+0000:Hi Claus, 

Sorry, I'd corrected the above route.

best regards,
ben
rkettelerij:1307284806:2011-06-05T22:40:06.794+0000:1307284806:2011-06-05T22:40:06.794+0000:@ben. I've been debugging {{camel-http}}(*) and found no issues with authentication credentials being dropped. I did however encountered a case where the credentials aren't sent to the server because the server doesn't explicitly asks for it. This may very well apply to your situation as well. I've filled CAMEL-4056 to improve on this.

(*) I haven't checked {{camel-http4}}, but you reported that the issue also applied to {{camel-http}} so I've limited my search to {{camel-http}} for now.
njiang:1307579367:2011-06-09T08:29:27.151+0000:1307579367:2011-06-09T08:29:27.151+0000:Hi Ben,

Can you try the latest Camel 2.8-SNAPSHOT which has the patch of CAMEL-3780 ?
I think the option of username=foo&password=baa will not be dropped any more, because camel-http4 will not treat those options as its endpoint options.


njiang:1307580526:2011-06-09T08:48:46.275+0000:1307580526:2011-06-09T08:48:46.275+0000:I just added a test for it in camel trunk.
It looks like the problem has be fixed."
0,CAMEL-3778,New Feature,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,William Tam,Akitoshi Yoshida,0,0,2011-03-10 17:59:07+00:00,2011-03-23 01:03:30+00:00,"Hi,
Sometime ago I asked in this mailing list whether it is possible to use the dispatch mode of CXF in the Camel's CXF endpoint. The answer was no. But I wanted to have the CXF dispatch mode so that I can run SOAP intermediary/gateway scenarios with CXF features enabled and send arbitrary SOAP messages from a single endpoint.


Now I have implemented this feature and I would like to hear what you think.


In short, I modified CxfSpringEndpoint and CxfEndpoint so that Camel uses the CXF dispatch mode when no service class nor WSDL is specified in the endpoint configuration. For example, you can configure the endpoint as:



  <cxf:cxfEndpoint id=""serviceEndpoint""
		   address=""http://localhost:9000/SoapContext/GreeterPort""
		   endpointName=""s:GreeterPort"" 
		   serviceName=""s:GreeterService""
		   bus=""#bus"">
    <cxf:properties>
      <entry key=""dataFormat"" value=""PAYLOAD""/>
    </cxf:properties>
  </cxf:cxfEndpoint>




In this case, the endpoint is set up for the dispatch mode. The dispatch mode supports two operations Invoke and InvokeOneWay and the default operation is Invoke. You can change the operation by simply setting the camel header operationName.


I added two unit tests classes to show how the dispatch mode works for both PAYLOAD and MESSAGE data format.


I am attached all the file to this ticket. I would appreciate if you can comment on this feature.


Thanks.
Regards, Aki","ay:1299751307:2011-03-10T18:01:47.348+0000:1299751307:2011-03-10T18:01:47.348+0000:patch-20110310.txt
  - svn diff for the changes required

tests.zip
  - unit test files

hadrian:1300261292:2011-03-16T15:41:32.385+0000:1300261292:2011-03-16T15:41:32.385+0000:Aki, thanks for the patch.

We are in the process of releasing camel-2.7.0 and I will have to move this new feature to 2.8.0 which will be released soon, probably around 6-8 weeks.

Sorry for the inconvenience.
wtam:1300564504:2011-03-20T03:55:04.112+0000:1300569283:2011-03-20T05:14:43.219+0000:Here is the mail thread related to this issue.

http://camel.465427.n5.nabble.com/camel-cxf-endpoint-without-wsdl-and-serviceClass-possible-td3385901.html#a3387482

@Aki
I made some updates to your patch.  Please review CAMEL-3778.patch (ignore CAMEL-3386.patch) and provide your feedbacks.  

* I added a boolean option ""skipPayloadMessagePartCheck"" to switch on/off the check for expected message parts in CxfEndpoint.setParameters().  (To other readers, the enforcement of the check precludes sending arbitrary payload in PAYLOAD mode as Aki has found out.)  The default should be false (i.e. do checking).  In your patch, to skip the checking when it sees null part name is probably not a good idea.  

* I avoided the hard coded CXF operation info in the CxfEndpoint class by JAXWS annotations in the Default SEI (i.e. dummy serviceClass), which makes it cleaner and shielded from CXF model ""APIs"" changes.


ay:1300671898:2011-03-21T09:44:58.489+0000:1300671898:2011-03-21T09:44:58.489+0000:Hi William,
Thanks. I have a question about the skipPayloadMessagePartCheck option in the URL. Could it unnecessarily confuse people if this option is introduced and can be set independently of the values set in the endpoint definition (i.e., wsdlURL and serviceClass)?

Regards, Aki
wtam:1300695749:2011-03-21T16:22:29.776+0000:1300695758:2011-03-21T16:22:38.172+0000:@Aki

I don't think the option is confusing (pls suggest a better name if you can think of something) or unnecessary.  Keep in mind that the proposed option is specific for PAYLOAD mode only.  You don't need set any options to send arbitrary payloads if you are using MESSAGE mode (which I'd recommend and it is faster).  

In PAYLOAD mode, we need to make sure the XML message parts are properly added to CXF Message Content List.  So, obviously the check should be performed by default.  The ""skipPayloadMessagePartCheck"" option would allow users to put any XML elements in the Message Content List if they desire (which I think it is an abuse).   Perhaps, explicit setting the option is a good way to document/remind users that the endpoint will skip payload message part checking.  Does it make sense?

elakito@googlemail.com:1300699390:2011-03-21T17:23:10.262+0000:1300699390:2011-03-21T17:23:10.262+0000:Hi William,
It's not about the name of the option, but its potential semantics
that seems to have an inherent dependency to the other two parameters
wsdlURL and serviceClass. I thought it seemed confusing to be able to
set this skipPayloadmessagePartCheck to true while at the same time,
for example, parameter wsdlURL can be set to point to some WSDL that
explicitly defines the structure of the payload.

Not checking the payload part is probably only useful for the
dispatched mode. So, if there is an implicit mechanism and it is
automatically set for the dispatched mode, I think that would be
simpler. Maybe there is a way to check these conditions together? I
will take a look at it tomorrow. How do you think?

Thanks.
Regards, Aki


wtam:1300700028:2011-03-21T17:33:48.067+0000:1300700385:2011-03-21T17:39:45.906+0000:@Aki, Here is what I think ...  I don't think wsdlURL and serviceClass options necessarily imply skipPayloadMessagePartCheck (and vice versa).  I don't think explicitly setting the skipPayloadMessagePartCheck option is necessarily a bad thing.  
wtam:1300700302:2011-03-21T17:38:22.080+0000:1300700349:2011-03-21T17:39:09.371+0000:BTW, I don't think it has anything to do with Dispatch mode per se.  It is more about the ability to skip payload message checking.
wtam:1300701228:2011-03-21T17:53:48.712+0000:1300701352:2011-03-21T17:55:52.637+0000:@Aki,

I am OK with killing the endpoint option (skipPayloadMessagePartCheck).  A boolean is maintained internally and it is set to true if the default SEI (serviceClass) is in effect.  I think this is what you suggested, right?
njiang:1300726925:2011-03-22T01:02:05.932+0000:1300726925:2011-03-22T01:02:05.932+0000:＋1 to skip the message partinfo checking if CxfEndpoint works in Dispatch Model.
Customer should make sure he builds up the right elements for the soap body.

wtam:1300732565:2011-03-22T02:36:05.871+0000:1300732565:2011-03-22T02:36:05.871+0000:@Willem

Not quite sure what you meant.  The (Camel CXF) endpoint does not know about ""Dispatch Model"", right?  If you voted for killing the skipPayloadMessagePartCheck, then we are all in agreement.


wtam:1300732801:2011-03-22T02:40:01.916+0000:1300732801:2011-03-22T02:40:01.916+0000:Revised with no new user visible option. (CAMEL-3778-2.patch)
njiang:1300734612:2011-03-22T03:10:12.596+0000:1300734612:2011-03-22T03:10:12.596+0000:@William,
If you don't specify the WSDL and SEI in the URI, that could mean that the CxfProducer works in Dispatch Mode :)
wtam:1300736323:2011-03-22T03:38:43.800+0000:1300736323:2011-03-22T03:38:43.800+0000:@Willem

Yea, it ""could"", but it does not *necessarily* mean ""Dispatch Mode"".  It could be a user error that left out both WSDL and SEI.  Anyways, I already revised the patch to remove the option.
wtam:1300813410:2011-03-23T01:03:30.026+0000:1300813410:2011-03-23T01:03:30.026+0000:Committed revision 1084433.  Thanks Aki Yoshida for the patch.
 
"
0,CAMEL-3777,New Feature,Major,2.6.0,Future,"
None
",Resolved,Duplicate,Future,Christian Müller,Christian Müller,1,1,2011-03-10 17:42:37+00:00,2015-07-11 22:19:13+00:00,"Put OSGiIntegrationSpringTestSupport and OSGiIntegrationTestSupport in it's own component (camel-osgi-test) to allow users to reuse it in its own OSGI integration tests
It's the same as with CamelTestSupport and CamelSpringTestSupport","davsclaus:1341534891:2012-07-06T08:34:51.265+0000:1341534891:2012-07-06T08:34:51.265+0000:We should possible have a camel-test-pax-exam, that uses pax exam as its base line. Willem have upgraded to pax exam 2, so it may be easier to do now.
davsclaus:1436624353:2015-07-11T22:19:13.410+0000:1436624353:2015-07-11T22:19:13.410+0000:There is some ticket about an osgi test component.

However as there is pax-exam this is less needed as ppl can use plain pax-exam"
0,CAMEL-3776,New Feature,Major,None,"2.8.5, 2.9.2, 2.10.0","
None
",Closed,Fixed,"2.8.5, 2.9.2, 2.10.0",Christian Müller,Claus Ibsen,0,0,2011-03-10 07:33:25+00:00,2012-04-16 07:54:04+00:00,"We should use the ServicePool in camel-core to pool JAXB / marshaller / unmarshaller.
Of course ppl should be able to customize pool settings and if to be used.


Also mind that for type converters with JAXB you do not configure a JAXB data format. And thus we should
still be able to configure and use pooling, so the type converter can be more efficient.","frko:1332986641:2012-03-29T10:04:01.866+0000:1332986641:2012-03-29T10:04:01.866+0000:As I've ran into performance issues parsing a lot of smaller xml payloads using the camel-jaxb component I am interested to hear if any work has been done with regards to the subject.
muellerc:1333021822:2012-03-29T19:50:22.812+0000:1333021822:2012-03-29T19:50:22.812+0000:Hey Frank,
nobody is working on it because it's target for Camel 3.0.0. At present we are working on Camel 2.10.0.
If you would like to see this fixed earlier, feel free to vote for it (you has to be logged in into JIRA to be able to vote). I think we could prepone it if needed.
Best,
Christian
frko:1333073042:2012-03-30T10:04:02.358+0000:1333073146:2012-03-30T10:05:46.991+0000:Thank you for the swift, quick and clear reply.

Meanwhile - at TomTom - I have patched the component myself as we've been suffering from BLOCKED threads while retrieving instances of Marshallers & Unmarshallers ( see below stacktrace ) under heavy load. I've added a very basic implementation surrounding an Apache Commons Pool pooling - JAXBContexts ( not strictly required ), Marshallers and Unmarshallers. I will add the patch to the ticket as an attachment when it indeed successfully endures a high load test.

{code}
java.lang.Thread.State: BLOCKED
    at com.sun.org.apache.xerces.internal.impl.dv.DTDDVFactory.getInstance(DTDDVFactory.java:44)
    - waiting to lock <6e5a3923> (a java.lang.Class) owned by ""http-8080-17"" t@158
    at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.<init>(XML11Configuration.java:538)
    at com.sun.org.apache.xerces.internal.parsers.XIncludeAwareParserConfiguration.<init>(XIncludeAwareParserConfiguration.java:125)
    at com.sun.org.apache.xerces.internal.parsers.XIncludeAwareParserConfiguration.<init>(XIncludeAwareParserConfiguration.java:86)
    at sun.reflect.GeneratedConstructorAccessor35.newInstance(Unknown Source)
    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
    at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
    at java.lang.Class.newInstance0(Class.java:355)
    at java.lang.Class.newInstance(Class.java:308)
    at com.sun.org.apache.xerces.internal.parsers.ObjectFactory.newInstance(ObjectFactory.java:349)
    at com.sun.org.apache.xerces.internal.parsers.ObjectFactory.createObject(ObjectFactory.java:154)
    at com.sun.org.apache.xerces.internal.parsers.ObjectFactory.createObject(ObjectFactory.java:97)
    at com.sun.org.apache.xerces.internal.parsers.SAXParser.<init>(SAXParser.java:102)
    at com.sun.org.apache.xerces.internal.parsers.SAXParser.<init>(SAXParser.java:87)
    at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.<init>(SAXParserImpl.java:332)
    at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.<init>(SAXParserImpl.java:122)
    at com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl.newSAXParser(SAXParserFactoryImpl.java:76)
    at javax.xml.bind.helpers.AbstractUnmarshallerImpl.getXMLReader(AbstractUnmarshallerImpl.java:86)
    at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:137)
    at javax.xml.bind.helpers.AbstractUnmarshallerImpl.unmarshal(AbstractUnmarshallerImpl.java:184)
    at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:199)
{code}
frko:1333087263:2012-03-30T14:01:03.792+0000:1333087319:2012-03-30T14:01:59.668+0000:I've attached the patch in its 1st incarnation. I would appreciate the feedback required to land an ( amended ) version in the Camel trunk. We are in the process of testing the patch in our performance test environment. I will attach the findings as soon as they are available.
dkulp:1333087748:2012-03-30T14:09:08.209+0000:1333087767:2012-03-30T14:09:27.916+0000:You may not need to pool the unmarshallers.   If you use the unmarshall method that takes the XMLStreamReader, then it doesn't need to create a parser and the entire issue is bypassed.  (this is what CXF does btw)   Thus, you may be able to call convertTo(XMLStreamReader.class)  and pass that in.   


muellerc:1333100002:2012-03-30T17:33:22.410+0000:1333100002:2012-03-30T17:33:22.410+0000:I will have a look at it later or tomorrow...
muellerc:1333113016:2012-03-30T21:10:16.428+0000:1333113016:2012-03-30T21:10:16.428+0000:It doesn't work out of the box. The route
{noformat}
from(""direct:start"")
  .convertBodyTo(XMLStreamReader.class)
  .unmarshal(jaxb)
  .to(""mock:result"");
{noformat}

throws

{noformat}
Exception in thread ""pool-1-thread-2"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <purchaseOrder name='Wine' amount='123.45' price='2.22'/>]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1237)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:509)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:442)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:438)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:126)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at org.apache.camel.example.UnmarshalTest$1.run(UnmarshalTest.java:73)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: javax.xml.stream.XMLStreamReader but has value: <purchaseOrder name='Wine' amount='123.45' price='2.22'/> of type: java.lang.String on: Message: <purchaseOrder name='Wine' amount='123.45' price='2.22'/>. Caused by: No type converter available to convert from type: java.lang.String to the required type: javax.xml.stream.XMLStreamReader with value <purchaseOrder name='Wine' amount='123.45' price='2.22'/>. Exchange[Message: <purchaseOrder name='Wine' amount='123.45' price='2.22'/>]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: java.lang.String to the required type: javax.xml.stream.XMLStreamReader with value <purchaseOrder name='Wine' amount='123.45' price='2.22'/>]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)
	at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:58)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	... 5 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: javax.xml.stream.XMLStreamReader with value <purchaseOrder name='Wine' amount='123.45' price='2.22'/>
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:147)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
	... 43 more
{noformat}

If I change the route to:
{noformat}
from(""direct:start"")
  .convertBodyTo(InputStream.class)
  .convertBodyTo(XMLStreamReader.class)
  .unmarshal(jaxb)
  .to(""mock:result"");
{noformat}

I get the following exception:

{noformat}
Exception in thread ""pool-1-thread-14"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: com.ctc.wstx.sr.ValidatingStreamReader@4987b287]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1237)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:509)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:442)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:438)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:126)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at org.apache.camel.example.UnmarshalTest$1.run(UnmarshalTest.java:73)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.io.InputStream but has value: com.ctc.wstx.sr.ValidatingStreamReader@4987b287 of type: com.ctc.wstx.sr.ValidatingStreamReader on: Message: com.ctc.wstx.sr.ValidatingStreamReader@4987b287. Caused by: No type converter available to convert from type: com.ctc.wstx.sr.ValidatingStreamReader to the required type: java.io.InputStream with value com.ctc.wstx.sr.ValidatingStreamReader@4987b287. Exchange[Message: com.ctc.wstx.sr.ValidatingStreamReader@4987b287]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: com.ctc.wstx.sr.ValidatingStreamReader to the required type: java.io.InputStream with value com.ctc.wstx.sr.ValidatingStreamReader@4987b287]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)
	at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:118)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:52)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	... 5 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: com.ctc.wstx.sr.ValidatingStreamReader to the required type: java.io.InputStream with value com.ctc.wstx.sr.ValidatingStreamReader@4987b287
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:147)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
	... 44 more
{noformat}
frko:1333193512:2012-03-31T19:31:52.030+0000:1333330518:2012-04-02T09:35:18.613+0000:Peculiar. The unit tests all succeed for me. I have run the ones in the camel-jaxb only in all honesty. Our routes invoking the FallbackTypeConverter do no trigger the exception either. Monday I will look into the issue. Regarding the way cxf deals with avoiding the creation of an SAXParser I personally feel that dealing with all occasions equally an in uniform way when no obvious negative effects are introduced seems to be a bit cleaner.
muellerc:1333246387:2012-04-01T10:13:07.797+0000:1333246387:2012-04-01T10:13:07.797+0000:Frank, I tried whether Camel can deal with the XMLStreamReader conversion out of the box (without your patch). So, there is nothing wrong with it.
I made a couple of stress tests. I unmarshaled the XML
{code:xml}
<purchaseOrder name='Wine' amount='123.45' price='2.22'/>
{code}
10000 times with 
{code:java}
ExecutorService pool = Executors.newFixedThreadPool(20);
long start = System.currentTimeMillis();
for (int i = 0; i < counter; i++) {
    pool.execute(new Runnable() {
        public void run() {
            template.sendBody(payload);
            latch.countDown();
        }
    });
}
{code}
The numbers I got for different scenarios are:
- with the current implementation it took 6440ms
- with using a GenericObjectPool from commons-pool (maxActive = 20) it took 3323ms
- with using a ReentrantLock in JaxbDataFormat.unmarshal() for the lines where the Unmarshaller is used, it took 2813ms

I didn't had the time to look what's necessary to get the convertBodyTo(XMLStreamReader.class) working an what the performance is.

May be the ReentrantLock is a smart solution without the ""complexity"" of pooling objects?
muellerc:1333273811:2012-04-01T17:50:11.506+0000:1333273906:2012-04-01T17:51:46.302+0000:I did some tests with the XMLStreamReader in JaxbDataFormat, but without luck. I get NullPointerException from JAXB (see below). I did the following changes:
In the JaxbDataFormat.doStart() method I create an Unmarshaller and set this to an new instance variable.
In JaxbDataFormat.unmarshal() I converted the InputStrem into an XMLStreamReader:
{code}
XMLStreamReader xmlReader = exchange.getContext().getTypeConverter().convertTo(XMLStreamReader.class, exchange, stream);
{code}
and pass this reader into the Unmarshaller's unmarshal method.

{noformat}
Exception in thread ""pool-2-thread-1"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <purchaseOrder name='Wine' amount='123.45' price='2.22'/>]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1237)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:509)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:442)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:438)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:126)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at org.apache.camel.example.DataFormatConcurrentTest$1.run(DataFormatConcurrentTest.java:49)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NullPointerException
	at com.sun.xml.bind.v2.runtime.Coordinator.popCoordinator(Coordinator.java:157)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:461)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:144)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:58)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	... 5 more
{noformat}

muellerc:1333275102:2012-04-01T18:11:42.292+0000:1333275102:2012-04-01T18:11:42.292+0000:I committed r1308165 which improves the performance significant. I unmarshaled the XML I mentioned before 10000 times:
before: 7042ms
after: 2884ms

However, I only create an Unmarshaller instance variable at start and with the help of an ReentrantLock I make sure it's only used one a time. I will let this issue open until others agree this is the final solution or bring up a better/faster one.
frko:1333321619:2012-04-02T07:06:59.700+0000:1333321619:2012-04-02T07:06:59.700+0000:Great work! I am not particularly bound to the pooled implementation to be honest. Let me fetch your code put it under high load ( 300 requests per second ) and see if we encounter the synchronization issues as the stacktrace above indicates - given the nature of the fix I presume this should work out. The BLOCKED threads only occurred when we reached about 150 requests per second with a lot of identical payloads - I will keep you posted on the results ( expect them today ).
frko:1333330338:2012-04-02T09:32:18.185+0000:1333333201:2012-04-02T10:20:01.257+0000:The change I made was against tag/2.9.1 and I see you patched trunk ( makes more sense ). Question for us is at which request rate congestion will occur around the ReentrantLock compared to a pooled solution - which can scale on demand which is of our interest as we're dealing with quite the amount of requests per second on peak load. Load tests on the pooled impl I did provide a rough 300+ requests per second improvement showing no congestion until we consume 100% CPU resources. I am in the process of deploying a build of 2.10-SNAPSHOT to perform the exact same test to see if and how the behavior between the 2 solutions differ when stressed.
frko:1333334631:2012-04-02T10:43:51.672+0000:1333335670:2012-04-02T11:01:10.375+0000:Our code predominantly ( actually only ) uses the FallbackTypeConverter ( which I originally patched ). Applying a patch with the same semantics as the patch you applied to the FallbackTypeConverter would solve the issue for all ways to apply JAXB conversions. A ThreadLocal instance containing a per Thread Unmarshaller would be the cheapest solution ( in this case I am comparing it to pooling  ) I figure - it would however retain the memory until ( if! ) the spawned Threads would be removed from the application server ThreadPool releasing their resources and making them available for GC - which would be more controllable given the Pool usage. Given the nature of the class - used for multiple JAXBContext's and therefore requiring multiple Unmarshallers for different types this seems an unlikely candidate to be achieved in a fashionable manner. What is your vision upon the subject exactly ? Perhaps - while we are at it - we should also look into removing the duplication we see in that region and have a single solution for both callsites.
muellerc:1333361519:2012-04-02T18:11:59.087+0000:1333361519:2012-04-02T18:11:59.087+0000:Hello Frank!

If we agree about the solution, I will back port it of course to the maintained camel-2.9.x and camel-2.8.x branch.
I highly interested which of the both solutions works better (faster) for you. If it's the pooled solution, I don't have anything against to this solution. I always try to start with the simplest solution which full fill the requirements... ;-)
I also try to get a better understanding what Dan suggested. But at present, I only got some NullPointerExceptions from JAXB when I converted the InputStream into a XMLStreamReader and pass this to the Unmarshaller... :-( Keep you posted...

I see the issue with the FallbackTypeConverter. I will fix this also. But my recommendation is to use the JAXBDataFormat explicitly. Imagine you have a route where you use the FallbackTypeConverter 10 times for the same JAXBContext. All this 10 routes will use the same Unmarshaller which will be less per formant (more locking), than to explicitly use 10 different JAXBDataFormat instances (of course with the same JAXBContext). This will require less locking because the Unmarshaller is shared per JAXBDataFormat and not per JAXBContext. Make sense for you?

I we go for the pooled solution (if it's faster), we should use/register the pool capabilities Camel provides. At present, I'm not familiar enough with this to suggest a solution. Will wait for the performance results of your tests and if I'm able to get the XMLStreamReader stuff working...

Best,
Christian
frko:1333364124:2012-04-02T18:55:24.100+0000:1333364124:2012-04-02T18:55:24.100+0000:Hye Christian - appreciate the fenomenal collaboration !

Indeed would the solution induce more locking giving the current approach. This is actually the reasoning behind my initial solution - pooling contexts, marshallers and unmarshallers - which in hindsight is somewhat overkill for common usecases - not everbody needs a highly scalable solution catering for high load as we are currently dealing with. The automagically expanding and shrinking pool would load on demand and scale to extremely high load. As we have a lot of routes using the FallbackTypeConverter I will try to amend a single end-to-end flow to use the JaxbDataFormat so we can compare how the different approaches when stressed. I hope I will be able to provide you feedback on performance tomorrow but given the work required I wont make promises anymore I am not sure I can live up to.

With regards to the pooling solution camel provides - I briefly looked into it before I decided to go for the Apache Commons Pool approach - I think it is worth considering to refactor the camel pool to use the APC as I think it contributes to familiarity and mantainability to reuse the proven solution instead of a special camel catered crafted approach offering no directly obvious benefits.

Hopefully I will be able to provide you with some conclusive numbers soon and we can finalise this patch. 

Cheers


muellerc:1333366515:2012-04-02T19:35:15.352+0000:1333366515:2012-04-02T19:35:15.352+0000:I rerun the test with the following route
{code}
from(""direct:unmarshalFallback"")
  .convertBodyTo(PurchaseOrder.class)
  .to(""mock:result"");
{code}
and it still took 6921ms (with my latest patch). So, I have to work further on this...
muellerc:1333368211:2012-04-02T20:03:31.757+0000:1333368588:2012-04-02T20:09:48.595+0000:Committed r1308524
By caching the Unmarshaller in FallbackTypeConverter like the JAXBContext, I could reduce it to 3328ms
muellerc:1333371929:2012-04-02T21:05:29.528+0000:1333371929:2012-04-02T21:05:29.528+0000:By using the XMLStreamReader in FallbackTypeConverter and a shared Unmarshaller, I also got the NullpointerException from JAXB:
{noformat}
java.lang.NullPointerException
	at com.sun.xml.bind.v2.runtime.Coordinator.popCoordinator(Coordinator.java:157)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:461)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
	at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
	at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:204)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:139)
	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:91)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:204)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:141)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
	at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:58)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:169)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at org.apache.camel.example.DataFormatConcurrentTest$2.run(DataFormatConcurrentTest.java:74)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
{noformat}

And as documented in [1], the Unmarshaller from Jaxb Impl RI (Oracle) is not thread safe.
I pinged Dan to get a pointer to the CXF code where they share the Unmarshaller...

[1] http://jaxb.java.net/guide/Performance_and_thread_safety.html
muellerc:1333375435:2012-04-02T22:03:55.080+0000:1333375435:2012-04-02T22:03:55.080+0000:Committed r1308593
Improved FallbackTypeConverter.marshall() a bit. Only set Marshaller properties if they differ from the default one (because they are expensive)
before: took 3214ms
after: took 2680ms
frko:1333406722:2012-04-03T06:45:22.817+0000:1333413672:2012-04-03T08:41:12.996+0000:I am patching our 2.9.1 branch with you latest commits and will execute performance tests against them so we can compare those against the results using the pooled impl I did.
Unit tests fail after backporting.

{code}
Caused by: java.util.ConcurrentModificationException
	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
	at java.util.AbstractList$Itr.next(AbstractList.java:343)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:203)
	at org.apache.camel.impl.converter.LazyLoadingTypeConverter.doConvertTo(LazyLoadingTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:141)
	... 42 more

{code}

Attempting to backport BaseTypeConverterRegistry as well to solve the issue.
frko:1333411806:2012-04-03T08:10:06.021+0000:1333411806:2012-04-03T08:10:06.021+0000:I did an update on TRUNK and tried to run the unit tests on camel-jaxb which failed. Looking into it.
{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.converter.jaxb.FilteringXmlStreamWriterTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.333 sec
Running org.apache.camel.converter.jaxb.JaxbConverterTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.692 sec
Running org.apache.camel.converter.jaxb.JaxbDataFormatTest
Tests run: 8, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.497 sec <<< FAILURE!
Running org.apache.camel.converter.jaxb.MessageTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.624 sec
Running org.apache.camel.converter.jaxb.NonXmlCharFiltererTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.354 sec
Running org.apache.camel.converter.jaxb.NonXmlFilterReaderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.323 sec
Running org.apache.camel.example.DataFormatConcurrentTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 16.689 sec
Running org.apache.camel.example.DataFormatDataSetTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.838 sec
Running org.apache.camel.example.DataFormatTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.997 sec
Running org.apache.camel.example.JAXBConvertTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.632 sec
Running org.apache.camel.example.JAXBConverterMessageTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.619 sec
Running org.apache.camel.example.JaxbConcurrentDataFormatTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.926 sec
Running org.apache.camel.example.JaxbErrorLogTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.83 sec
Running org.apache.camel.example.RouteWithErrorHandlerTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.172 sec
Running org.apache.camel.example.SpringDataFormatPartialTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.457 sec
Running org.apache.camel.example.SpringDataFormatTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.804 sec
Running org.apache.camel.example.SpringDataFormatWithEncodingTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.461 sec
Running org.apache.camel.example.SpringDataFormatWithMarshalAndUnmarshalUsingRefTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.856 sec
Running org.apache.camel.example.SpringDataFormatWithMarshalAndUnmarshalUsingSpringBeanTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.888 sec
Running org.apache.camel.example.UnmarshalTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.84 sec
Running org.apache.camel.jaxb.CamelJaxbFallbackConverterTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.801 sec
Running org.apache.camel.jaxb.CamelJaxbSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.042 sec
Running org.apache.camel.jaxb.CamelJaxbTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.344 sec
Running org.apache.camel.jaxb.DirectBeanToBeanPersonTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.623 sec
Running org.apache.camel.jaxb.DumpToXmlTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.621 sec
Running org.apache.camel.jaxb.FallbackTypeConverterShouldNotThrowExceptionTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.099 sec
Running org.apache.camel.jaxb.JaxbDataFormatIssueTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.877 sec
Running org.apache.camel.jaxb.JaxbDataFormatIssueUsingSpringJavaConfigTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.477 sec
Running org.apache.camel.jaxb.TimerBeanToBeanNotificationTypeTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.124 sec

Results :

Tests in error: 

Tests run: 79, Failures: 0, Errors: 2, Skipped: 0

{code}
frko:1333412097:2012-04-03T08:14:57.448+0000:1333413597:2012-04-03T08:39:57.891+0000:The problem seems to be in the region of the ReentrantLock not being instantiated and the call to doCallRealMethod invoking JaxbDataFormat.unmarshal which depends on the state of the JaxbDataFormat instance.


{code}
java.lang.NullPointerException
	at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:138)
	at org.apache.camel.converter.jaxb.JaxbDataFormatTest.testUnmarshalFilteringDisabled(JaxbDataFormatTest.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)
	at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:71)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)

{code}
muellerc:1333415742:2012-04-03T09:15:42.853+0000:1333415742:2012-04-03T09:15:42.853+0000:I hat a short mail conversation with Dan:

You cannot share Unmarshallers.   You can share JAXBContext's, but not
unmarshallers.  You do need to create a new unmarshaller (or marshaller) per
thread (or pool them).    With CXF, we create a new unmarshaller per
request.   If you use the XMLStreamReader based unmarshal methods, it
doesn't need to call into the slow Parser factory code and such which is
where the main performance bottleneck is.      However, it COULD just move
the bottleneck elsewhere if you aren't careful.   CXF pools the
XMLInputFactory objects (although, if using Woodstox, you don't need to as
the XMLInputFactory in Woodstox it threadsafe).   That basically allows
avoiding the the entire parser factory things entirely.

My answer:
Thanks for the explanation, now it's clear for me.
We already cache the JAXBContext and share it. Instead of pooling the Unmarshallers, we cache one singe instance (per JaxbDataFormat instance and one for the FallbackTypeConverter) and use a ReentraceLock to make it's only used once at a time. On my machine this was more faster than the pooling solution (using commons-pool).
We also using Woodstox and cache the XMLInputFactory (unfortunately not in every place). I will spend some time to improve this too.
I will investigate on the XMLStreamReader unmarshal methods whether they are faster than the current solution.
frko:1333417233:2012-04-03T09:40:33.926+0000:1333417233:2012-04-03T09:40:33.926+0000:Decided to rebuild our app based on 2.10-SNAPSHOT to run performance tests on the patches landed in TRUNK.
muellerc:1333458134:2012-04-03T21:02:14.688+0000:1333458134:2012-04-03T21:02:14.688+0000:Committed r1309146 to fix the failed unit test
muellerc:1333491868:2012-04-04T06:24:28.805+0000:1333491868:2012-04-04T06:24:28.805+0000:Committed r1309261
Updated the FallbackTypeConverter to use XMLStreamReader as first choice type for unmarshalling to avoid calling into the slow Parser factory (as Dan suggested). 
Also added a new type converter from String -> XMLStreamReader
reduce the time for the concurrent stress test from 3328ms to 2810ms
muellerc:1333492513:2012-04-04T06:35:13.858+0000:1333492513:2012-04-04T06:35:13.858+0000:Committed r1309262
We now cache the XMLOutputFactory in FallbackTypeConverter because the one we use (Woodstox) is thread safe. We do the same already in our StaxConverter.
frko:1333505575:2012-04-04T10:12:55.850+0000:1333505575:2012-04-04T10:12:55.850+0000:Absolutely great work. Due to some environmental issues we have not been able to deploy our new build yet. I will prepare a new build based on the latest patches and keep you informed.
muellerc:1333544287:2012-04-04T20:58:07.842+0000:1333544287:2012-04-04T20:58:07.842+0000:Committed r1309588
Now we use the XMLStreamReader as first choice type for unmarshalling in JaxbDataFormat if filtering is not needed (no big performance improvement).
From my point of view, we are done with a solution which doesn't pool the Unmarshallers.
Looking forward for your performance test results before I will mark this issue as resolved.
dkulp:1333622495:2012-04-05T18:41:35.732+0000:1333622495:2012-04-05T18:41:35.732+0000:I've updated the code on trunk to ALWAYS go through the XMLStreamReader pathways which allows complete removal of the locks and unmarshaller pools.   Would definitely appreciate some testing with it, particularly with ""real world"" payloads.

muellerc:1333634731:2012-04-05T22:05:31.906+0000:1333634763:2012-04-05T22:06:03.101+0000:I did a few test an recorded the fastest one:

Length: 2046:
=============
Before:
testUnmarshallConcurrent() took 14122ms
testUnmarshallFallbackConcurrent() took 8479ms

After:
testUnmarshallConcurrent() took 5196ms
testUnmarshallFallbackConcurrent() took 2761ms

Length: 104
===========
Before:
testUnmarshallConcurrent() took 7281ms
testUnmarshallFallbackConcurrent() took 4815ms

After:
testUnmarshallConcurrent() took 2767ms
testUnmarshallFallbackConcurrent() took 2458ms

Best,
Christian
muellerc:1333695543:2012-04-06T14:59:03.050+0000:1333695543:2012-04-06T14:59:03.050+0000:By using a ByteArrayInputStream as payload, and a ""warmed up"" system (I sent 100 messages before the measurement to warm up the system) I got the following results with the payload of 2046 bytes:

testUnmarshallConcurrent() took 2202ms (5196ms by using a string as payload and a cold system)
testUnmarshallFallbackConcurrent() took 1224ms (2761ms by using a string as payload and a cold system)

testMarshallConcurrent() took 875ms
testMarshallFallbackConcurrent() took 999ms

Best,
Christian
frko:1334011934:2012-04-10T06:52:14.318+0000:1334011934:2012-04-10T06:52:14.318+0000:@Christian - my apologies for the radio silence. 

Unfortunately we've been dealing with some customer facing 3rd party gps-chip issues which received priority over everything which did not allow me to pursue the performance testing endeavors. On top of that I was required to merge a feature branch for which we first need to establish a baseline to compare the patch results against. I am back on the topic again and hope to provide you with valuable metrics soon.
muellerc:1334043480:2012-04-10T15:38:00.863+0000:1334043480:2012-04-10T15:38:00.863+0000:Don't worry about it...
Dan changed this part in a way that we don't need to synchronize it. This solution should scale much better than my first implementation.
I will merge this change into the camel-2.9.x and camel-2.8.x branch. If your result is a pooling implementation is faster than the current one, we can reopen this issue (if it's already closed) and work further on it. I'm still really interested in your results... :-)

Best,
Christian
muellerc:1334149549:2012-04-11T21:05:49.616+0000:1334149549:2012-04-11T21:05:49.616+0000:Because Hadrian will start releasing Camel 2.8.5 and 2.9.2 tomorrow, I have merged the changes into these feature branches.
If you come back with a smarter/faster solution, please feel free to open a new JIRA.

Best,
Christian
frko:1334534044:2012-04-16T07:54:04.063+0000:1334534044:2012-04-16T07:54:04.063+0000:Great! Then we can depends on 2.9.2 instead of 2.10-SNAPSHOT which was giving me the creeps :)
We will subject 2.9.2 to the load test today - task planned - and I will ping back. Will look into the patch just to satisfy my curiosity :)"
0,CAMEL-3775,Improvement,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,David Valeri,Claus Ibsen,0,0,2011-03-10 05:37:12+00:00,2011-10-20 03:53:07+00:00,We should allow end users to set custom prefix and postfix tokens for the Camel properties component.,"davsclaus:1305960710:2011-05-21T14:51:50.467+0000:1305960710:2011-05-21T14:51:50.467+0000:This is more important now since Groovy script has its GString that clash with simple ${ } syntax.
davsclaus:1306636705:2011-05-29T10:38:25.945+0000:1306636705:2011-05-29T10:38:25.945+0000:Its the simple language that has the GString clash with Groovy"
0,CAMEL-3744,New Feature,Minor,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-02 10:53:30+00:00,2011-10-25 11:35:27+00:00,An example how to use Servlet with Tomcat would be great. This is basic stuff and also ensures we test it on popular containers.,"davsclaus:1299043606:2011-03-02T13:26:46.039+0000:1299043606:2011-03-02T13:26:46.039+0000:Documentation here
https://cwiki.apache.org/confluence/display/CAMEL/Servlet+Tomcat+Example
davsclaus:1299051877:2011-03-02T15:44:37.259+0000:1299051877:2011-03-02T15:44:37.259+0000:trunk: 1076263."
0,CAMEL-3743,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Cannot Reproduce,2.7.0,Claus Ibsen,Oleg Kiorsak,0,0,2011-03-02 06:03:23+00:00,2011-10-25 11:36:09+00:00,"I have this simple route (in camel.xml, under ActiveMQ 5.4.2):


<route>
<from uri=""activemq:MDT.INBOUND""/>
<to uri=""activemq:INBOUND?preserveMessageQos=true""/>
</route>


despite what 'preserveMessageQos' options is described as being intended for, it does NOT preserve the JMSDeliveryMode
all my non-persistent messages end-up as becoming persistent.","davsclaus:1299045894:2011-03-02T14:04:54.581+0000:1299045894:2011-03-02T14:04:54.581+0000:Can you check the spring documentation as its frankly a spring JMS feature we just delegate to.
I can't remember which JMSxxx it preserves.  
davsclaus:1299053941:2011-03-02T16:19:01.661+0000:1299053941:2011-03-02T16:19:01.661+0000:I added unit test on trunk and I cannot reproduce the issue
http://svn.apache.org/viewvc?rev=1076273&view=rev
"
0,CAMEL-3742,Task,Minor,2.7.1,2.9.0,"

jpa

",Resolved,Fixed,2.9.0,Ioannis Canellos,Christian Müller,2,0,2011-03-01 23:25:17+00:00,2011-09-13 08:23:37+00:00,"A user requested the upgrade to JPA2 in Nabble.


OpenJPA 2.x implements JPA2: http://openjpa.apache.org/downloads.html
The latest version is 2.1.0","davsclaus:1305960796:2011-05-21T14:53:16.961+0000:1305960796:2011-05-21T14:53:16.961+0000:Ah lets try this for camel 2.9
iocanel:1315837928:2011-09-12T22:32:08.913+0000:1315837928:2011-09-12T22:32:08.913+0000:I am attaching a patch, which updates camel-jpa component to use JPA2. In detail:

a) Upgraded OpenJPA for 1.2.2 to 2.1.1
b) Updated feature camel-jpa to use the latest version of OpenJPA.
c) Test class enhancement is not done with openjpa plugin, instead of ant-run-plugin.
d) Changed lockEntity method, to return true
if the entity object cannot be lock and is array (The newer version of openjpa won't lock object arrays, such as results of nativeQueries).

For d we might need to find a more elegant way to do it in the future.
davsclaus:1315873100:2011-09-13T08:18:20.047+0000:1315873100:2011-09-13T08:18:20.047+0000:Thanks for the patch."
0,CAMEL-3741,New Feature,Major,2.6.0,None,"

component
features
jt400

",Closed,Fixed,2.7.0,Willem Jiang,Luis Santos,1,1,2011-03-01 20:04:54+00:00,2011-10-25 11:35:56+00:00,"I've added a new feature to the existing camel-jt400 component to enable the remote program call of iSeries programs.
This implementation was successfully tested with the jt400 library already included in the pom dependencies against real systems running the version V5R4 od the OS.


The usage of this new feature is exactly the same of the DATQ feature except the path now has to point to a PGM file and there are 2 mandatory arguments: outputFieldsIdx and fieldsLength.


outputFieldsIdx register which parameters of the program will be INPUT/OUTPUT (as oposed of only INPUT)
fieldsLength: registers the mandatory parameters length


Sample usage in a route (included in the test case)


from(""direct:a"").to(""jt400://user:password@host/QSYS.LIB/library.LIB/program.pgm?outputFieldsIdx=1,2&fieldsLength=4,512,2"").to(""mock:a"");


I'm including a patch to both 2.6.0 and trunk as of today.


Please let me know if something is not OK.. I'm more than happy to make the adjustments.","luis.santos:1298981135:2011-03-01T20:05:35.135+0000:1298981135:2011-03-01T20:05:35.135+0000:trunk patch
luis.santos:1298981158:2011-03-01T20:05:58.269+0000:1298981158:2011-03-01T20:05:58.269+0000:patch to 2.6.0 tag
njiang:1299009295:2011-03-02T03:54:55.376+0000:1299009295:2011-03-02T03:54:55.376+0000:Hi Luis,

Thanks for your contribution, I just applied you patch by fixing some check style issue and changing to use slf4j logger.
Here is one question for the Jt400PgmProducer that you new add.
When the pgmCall failed, do we need to throw an exception to fire the camel error handler?
I don't think it's a good idea that just print the message out.
 
{code}

        boolean result = pgmCall.run();

        if (LOG.isTraceEnabled()) {
            LOG.trace(""Executed PGM '"" + commandStr + ""' in host '"" + iSeries.getSystemName() + ""'. Success?""
                     + result);
        }

        if (result) {
            handlePGMOutput(exchange, pgmCall, parameterList);
        } else {
            // TODO Do we need to throw an exception here
            handleMessages(pgmCall);
        }
{code}

Willem

davsclaus:1299046024:2011-03-02T14:07:04.858+0000:1299046024:2011-03-02T14:07:04.858+0000:We need this new feature documented in the wiki page.
http://camel.apache.org/jt400

Luis do you mind helping out with that?
Maybe you can sketch up some documentation in a .txt file and attach to this JIRA?

luis.santos:1299135884:2011-03-03T15:04:44.246+0000:1299136022:2011-03-03T15:07:02.902+0000:@Willem Jiang  
I'm attaching a better excpetion handling when the execution fails. You weere righ, i belive that in case the execution is not successfull (ie program crash/error) the messages should be encapsulated in a excption to camel.

As i'm seeing this the path will only be applied to the trunk so only this patch is being submited now, is this correct?

@Claus Ibsen  
I'm attaching a reviewd documentation page for the camel-jt400 component







luis.santos:1299136068:2011-03-03T15:07:48.848+0000:1299136068:2011-03-03T15:07:48.848+0000:Documentation page
davsclaus:1299193583:2011-03-04T07:06:23.880+0000:1299193583:2011-03-04T07:06:23.880+0000:@Luis

Thanks for the documentation. I have updated the wiki.
davsclaus:1299193981:2011-03-04T07:13:01.088+0000:1299193981:2011-03-04T07:13:01.088+0000:Thanks for the patch: 1077837."
0,CAMEL-3740,Improvement,Minor,"2.4.0, 2.6.0",2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Claus Ibsen,0,0,2011-03-01 15:06:42+00:00,2011-10-25 11:36:05+00:00,"When using camel-servlet in WAR apps, the dependency on camel-http brings in the servlet spec JAR from Apache Geronimo.
We should exclude that, as when using camel-servlet people are most likely to develop WAR apps.


See nabble
http://camel.465427.n5.nabble.com/Camel-Servlet-Tomcat-Problem-tp3405032p3405032.html


Willem I am assigning this to you. Do you see any problem with this? eg to exclude the spec JAR?","njiang:1299002582:2011-03-02T02:03:02.209+0000:1299002582:2011-03-02T02:03:02.209+0000:@Claus,
Yes, we should mark the dependency scope of servlet API to be provided, in this way we will have no trouble to use the camel-servlet in WAR apps.
   
njiang:1299004503:2011-03-02T02:35:03.146+0000:1299004503:2011-03-02T02:35:03.146+0000:Applied patch into the trunk."
0,CAMEL-3739,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Sergey Zhemzhitsky,0,0,2011-03-01 14:49:45+00:00,2011-10-25 11:36:15+00:00,It is not possible to specify custom logging category in the error handler in the Spring DSL by means of <errorHandler> tag.,davsclaus:1299292317:2011-03-05T10:31:57.905+0000:1299292317:2011-03-05T10:31:57.905+0000:trunk: 1078258.
0,CAMEL-3738,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-01 13:49:49+00:00,2011-10-25 11:36:20+00:00,We should prefer to use the async processor for the Camel EIPs and components when possible. This avoids the tiny overhead of having a sync to async adapter (implemented using a converter).,davsclaus:1298960456:2011-03-01T14:20:56.325+0000:1298960456:2011-03-01T14:20:56.325+0000:trunk: 1075828.
0,CAMEL-3737,Task,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,James Strachan,0,0,2011-03-01 13:22:05+00:00,2011-10-25 11:35:53+00:00,"Right now its possible in XML to specify both kinds of configuration; batchConfig and streamConfig. This isn't ideal and the definition is a bit floored.



   // Binding annotation at setter
    private BatchResequencerConfig batchConfig;
    // Binding annotation at setter
    private StreamResequencerConfig streamConfig;




It should probably use the same JAXB stuff as MarshalDefinition so that it can take one element of a list of possible value types:



public class MarshalDefinition extends OutputDefinition<MarshalDefinition> {
    // cannot use @XmlElementRef as it doesn't allow optional properties
    @XmlElements({
    @XmlElement(required = false, name = ""bindy"", type = BindyDataFormat.class),
    @XmlElement(required = false, name = ""castor"", type = CastorDataFormat.class),
    @XmlElement(required = false, name = ""csv"", type = CsvDataFormat.class),
    @XmlElement(required = false, name = ""crypto"", type = CryptoDataFormat.class),
    @XmlElement(required = false, name = ""flatpack"", type = FlatpackDataFormat.class),
    @XmlElement(required = false, name = ""gzip"", type = GzipDataFormat.class),
    @XmlElement(required = false, name = ""hl7"", type = HL7DataFormat.class),
    @XmlElement(required = false, name = ""jaxb"", type = JaxbDataFormat.class),
    @XmlElement(required = false, name = ""jibx"", type = JibxDataFormat.class),
    @XmlElement(required = false, name = ""json"", type = JsonDataFormat.class),
    @XmlElement(required = false, name = ""rss"", type = RssDataFormat.class),
    @XmlElement(required = false, name = ""secureXML"", type = XMLSecurityDataFormat.class),
    @XmlElement(required = false, name = ""serialization"", type = SerializationDataFormat.class),
    @XmlElement(required = false, name = ""string"", type = StringDataFormat.class),
    @XmlElement(required = false, name = ""syslog"", type = SyslogDataFormat.class),
    @XmlElement(required = false, name = ""xmlBeans"", type = XMLBeansDataFormat.class),
    @XmlElement(required = false, name = ""xstream"", type = XStreamDataFormat.class),
    @XmlElement(required = false, name = ""zip"", type = ZipDataFormat.class)}
    )
    private DataFormatDefinition dataFormatType;","jstrachan:1298957859:2011-03-01T13:37:39.458+0000:1298957859:2011-03-01T13:37:39.458+0000:Looks like the LoadBalancerDefinition needs to be the same kind of thing so it can be properly configured in XML
jstrachan:1298958824:2011-03-01T13:53:44.477+0000:1298958824:2011-03-01T13:53:44.477+0000:LoadBalancerDefinition is fine in trunk :) its 2.6 that its not usable
davsclaus:1298967271:2011-03-01T16:14:31.017+0000:1298967271:2011-03-01T16:14:31.017+0000:trunk: 1075873."
0,CAMEL-3736,Task,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,James Strachan,0,0,2011-03-01 13:17:55+00:00,2011-10-25 11:36:17+00:00,Its probably safer to make the Class attribute an @XmlTransient and add an @XmlAttribute String type field/attribute which is used to lazily create the beanType Class using the context/current class loader so that JAXB doesn't need to have to worry about class loaders,
0,CAMEL-3735,Task,Major,2.7.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Richard Kettelerij,Claus Ibsen,0,0,2011-03-01 11:03:34+00:00,2011-06-04 21:12:28+00:00,"Spring WS 2.0.0 release is not OSGi compliant.


When it's OSGi compliant we should upgrade the camel-spring-ws feature, which currently use the old 1.5.9 release.
There is TODO in the features.xml and pom.xml file in platforms/karaf/features dir.","davsclaus:1298948679:2011-03-01T11:04:39.613+0000:1298948679:2011-03-01T11:04:39.613+0000:This is the Spring WS bug
https://jira.springsource.org/browse/SWS-681
rkettelerij:1300699646:2011-03-21T17:27:26.686+0000:1300699646:2011-03-21T17:27:26.686+0000:The Spring-WS bug is resolved now (there's a snapshot version available). We'll just have to wait until 2.0.1 is final.
davsclaus:1301697372:2011-04-02T06:36:12.492+0000:1301697372:2011-04-02T06:36:12.492+0000:2.0.1 has been released now. Richard do you mind taking a look at this?
rkettelerij:1301832130:2011-04-03T20:02:10.474+0000:1301832130:2011-04-03T20:02:10.474+0000:Sure I'll take a look.
rkettelerij:1302418606:2011-04-10T14:56:46.630+0000:1302418673:2011-04-10T14:57:53.045+0000:I've taken a stab at this issue: upgraded to Spring-WS 2.0.1 and updated the Karaf features file (see attached patch). 

However there might be an issue with this patch: Spring-WS requires amongst others ""javax.xml.transform.stax"" as a mandatory import. Running {{mvn -Pvalidate clean install}} on features.xml fails with ""No export found to match javax.xml.transform.stax;version=0"". Adding the ServiceMix StAX spec as a dependency makes no difference. 

The only solution I could find was to switch Karaf to Java 1.6, like I did in the attached patch. Would that be a problem for Camel? Camel 2.7+ only supports Java 1.6 but the latest Karaf version (2.2) still supports Java 1.5?

Furthermore the {{CamelSpringWebServiceTest}} test written by Claus in CAMEL-3307 still fails under Spring-WS 2.0.1, this was also the case with Spring-WS 1.5.9....
davsclaus:1302486554:2011-04-11T09:49:14.912+0000:1302486567:2011-04-11T09:49:27.394+0000:I think the test may work only on either one of the 2 osgi containers back in the days. 

Yeah Camel 2.7+ onwards is Java6+ only so its okay to not run at all on java1.5.

And from Camel 2.8 we upgrade to Karaf 2.2.x+ so its also fine if the feature only works with that version.
davsclaus:1306469939:2011-05-27T12:18:59.093+0000:1306469939:2011-05-27T12:18:59.093+0000:Richard Spring WS 2.0.2 has been released.
davsclaus:1307150923:2011-06-04T09:28:43.434+0000:1307150923:2011-06-04T09:28:43.434+0000:Richard you can revert the patch from CAMEL-3995 in your local build and try to get the Spring WS 2.0.2 upgraded. It would be great to have this ready before we cut Camel 2.8
rkettelerij:1307154734:2011-06-04T10:32:14.060+0000:1307154734:2011-06-04T10:32:14.060+0000:Upgraded to Spring-WS 2.0.2. This required setting the Karaf features validation plugin to Java 1.6.
davsclaus:1307179505:2011-06-04T17:25:05.121+0000:1307179505:2011-06-04T17:25:05.121+0000:The test in camel-test-karaf still fails. But I recall it failed for Spring WS 1.x as well.
rkettelerij:1307193148:2011-06-04T21:12:28.759+0000:1307193148:2011-06-04T21:12:28.759+0000:Indeed that test has never worked. See CAMEL-3307 as mentioned above for details, the test is currently @Ignore(d)."
0,CAMEL-3734,Task,Major,2.7.0,2.7.3,"
None
",Closed,Fixed,2.7.3,Willem Jiang,Claus Ibsen,0,0,2011-03-01 10:22:01+00:00,2011-10-25 11:35:34+00:00,Ticket pending upgrade to CXF 2.3.4 when its released as it fixes an issue with a Camel example running in Tomcat.,"njiang:1303085864:2011-04-18T08:17:44.749+0000:1303085864:2011-04-18T08:17:44.749+0000:As CXF 2.3.4 is released, it's time to upgrade it."
0,CAMEL-3733,Improvement,Minor,"2.4.0, 2.5.0, 2.6.0",2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Willem Jiang,0,0,2011-03-01 08:57:06+00:00,2011-10-25 11:36:15+00:00,"Current CamelContextTestSupport class will not start the camelcontext if the isUseRouteBuilder() return false.
If the component that is used by template needs to be started, your test method will get the NPE or some strange error.
And you can these load when shutting down the camel context.



Mar 1, 2011 4:31:29 PM org.apache.camel.test.junit4.CamelTestSupport tearDown
INFO: Testing done: com.fusesource.example.camel.cxf.jms.HelloWorldClient@e49d67c
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStop
INFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext:camel-1) is shutting down
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext createManagementStrategy
INFO: JMX is disabled. Using DefaultManagementStrategy.
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdown
INFO: Starting to graceful shutdown 0 routes (timeout 10 seconds)
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdown
INFO: Graceful shutdown of 0 routes completed in 0 seconds
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStop
INFO: Uptime: not started
Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStop
INFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext: camel-1) is shutdown in 0.023 seconds","davsclaus:1298943338:2011-03-01T09:35:38.086+0000:1298943338:2011-03-01T09:35:38.086+0000:This is not a bug, but by design. We should add javadoc to the isUseRouteBuilder method that if its false, then the end user must manually start the CamelContext.
njiang:1298944134:2011-03-01T09:48:54.809+0000:1298944189:2011-03-01T09:49:49.356+0000:Current lots of camel tests are relay on if the isUseRouteBuilder return false, the test method should start the camel context itself , so I just add a comments on the isUseRouteBuilder method to tell the user to start the CamelContext in their test method manually."
0,CAMEL-3732,Improvement,Major,None,2.7.0,"
None
",Closed,Fixed,2.7.0,Willem Jiang,Willem Jiang,0,0,2011-03-01 08:45:41+00:00,2011-10-25 11:35:54+00:00,"As CXF 2.3.3 is just released, we should upgrade it for camel-cxf.",
0,CAMEL-3731,Improvement,Trivial,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-03-01 05:19:41+00:00,2011-10-25 11:36:10+00:00,"Currently its logged at INFO level with full stacktrace. If end user enabled this option we should only log it at DEBUG level to avoid spamming production logs.


See nabble
http://camel.465427.n5.nabble.com/camel-recipientList-with-ignoreInvalidEndpoints-true-tp3404103p3404103.html",davsclaus:1298928069:2011-03-01T05:21:09.141+0000:1298928069:2011-03-01T05:21:09.141+0000:trunk: 1075663.
0,CAMEL-3730,Bug,Critical,2.5.0,2.7.0,"
None
",Closed,Incomplete,2.7.0,Claus Ibsen,marshal.s.lee,0,0,2011-03-01 03:18:07+00:00,2011-10-25 11:35:21+00:00,"org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'template': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:209) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.isSingleton(AbstractBeanFactory.java:366) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:223) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:303) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:947) [org.springframework.context_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.apache.cxf.bus.spring.SpringBeanLocator.getBeansOfType(SpringBeanLocator.java:59) ~[org.apache.cxf.bundle_2.3.0.jar:2.3.0]
	at org.apache.cxf.bus.CXFBusImpl.getExtension(CXFBusImpl.java:99) ~[org.apache.cxf.bundle_2.3.0.jar:2.3.0]
	at org.apache.cxf.bus.CXFBusImpl.shutdown(CXFBusImpl.java:185) ~[org.apache.cxf.bundle_2.3.0.jar:2.3.0]
	at org.apache.cxf.bus.CXFBusImpl.shutdown(CXFBusImpl.java:181) ~[org.apache.cxf.bundle_2.3.0.jar:2.3.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:208) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:165) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:462) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:430) [org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:388) [org.springframework.context_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$301(AbstractDelegatedExecutionApplicationContext.java:69) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$1.run(AbstractDelegatedExecutionApplicationContext.java:186) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.normalRefresh(AbstractDelegatedExecutionApplicationContext.java:182) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$NoDependenciesWaitRefreshExecutor.refresh(AbstractDelegatedExecutionApplicationContext.java:89) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at com.intalio.cloud.pipes.runtime.impl.PipesDeploymentHelper.deploy(PipesDeploymentHelper.java:55) [cloud.pipes.runtime/:na]
	at com.intalio.cloud.pipes.runtime.tests.PipesTestSupport.createCamelContext(PipesTestSupport.java:175) [cloud.pipes.runtime.tests/:na]
	at com.intalio.cloud.pipes.runtime.tests.WrappedCamelTestSupport.createCamelContext(PipesTestSupport.java:323) [cloud.pipes.runtime.tests/:na]
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:96) [org.apache.camel.camel-test_2.5.0.jar:2.5.0]
	at com.intalio.cloud.pipes.runtime.tests.PipesTestSupport.setUp(PipesTestSupport.java:242) [cloud.pipes.runtime.tests/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) [junit.jar:na]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) [junit.jar:na]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) [junit.jar:na]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) [junit.jar:na]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) [junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) [junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [junit.jar:na]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) [junit.jar:na]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) [junit.jar:na]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) [junit.jar:na]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) [junit.jar:na]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) [junit.jar:na]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) [junit.jar:na]
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) [org.eclipse.jdt.junit4.runtime_1.1.100.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62) [org.eclipse.pde.junit.runtime_3.4.100.v20100601.jar:na]
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:23) [org.eclipse.pde.junit.runtime_3.4.100.v20100601.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587) [org.eclipse.equinox.app_1.3.1.R36x_v20100803.jar:na]
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198) [org.eclipse.equinox.app_1.3.1.R36x_v20100803.jar:na]
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:619) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:574) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.run(Main.java:1407) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.main(Main.java:1383) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
10:53:45.540 [main] DEBUG o.s.b.f.s.DefaultListableBeanFactory - Retrieved dependent beans for bean 'org.apache.cxf.binding.soap.spring.SoapVersionRegistrar#1d63c55': [org.apache.cxf.binding.soap.customEditorConfigurer]
10:53:45.555 [main] DEBUG c.i.c.p.r.i.PipesOsgiBundleXmlApplicationContext - Refresh error
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'rsServer': Error setting property values; nested exception is org.springframework.beans.PropertyBatchUpdateException; nested PropertyAccessExceptions (1) are:
PropertyAccessException 1: org.springframework.beans.MethodInvocationException: Property 'serviceBeans' threw exception; nested exception is java.lang.ExceptionInInitializerError
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1279) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at java.security.AccessController.doPrivileged(Native Method) ~[na:1.6.0_17]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728) ~[org.springframework.context_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380) ~[org.springframework.context_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$301(AbstractDelegatedExecutionApplicationContext.java:69) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$1.run(AbstractDelegatedExecutionApplicationContext.java:186) ~[org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) ~[org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.normalRefresh(AbstractDelegatedExecutionApplicationContext.java:182) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$NoDependenciesWaitRefreshExecutor.refresh(AbstractDelegatedExecutionApplicationContext.java:89) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175) [org.springframework.osgi.core_1.2.1.jar:1.2.1]
	at com.intalio.cloud.pipes.runtime.impl.PipesDeploymentHelper.deploy(PipesDeploymentHelper.java:55) [cloud.pipes.runtime/:na]
	at com.intalio.cloud.pipes.runtime.tests.PipesTestSupport.createCamelContext(PipesTestSupport.java:175) [cloud.pipes.runtime.tests/:na]
	at com.intalio.cloud.pipes.runtime.tests.WrappedCamelTestSupport.createCamelContext(PipesTestSupport.java:323) [cloud.pipes.runtime.tests/:na]
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:96) [org.apache.camel.camel-test_2.5.0.jar:2.5.0]
	at com.intalio.cloud.pipes.runtime.tests.PipesTestSupport.setUp(PipesTestSupport.java:242) [cloud.pipes.runtime.tests/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) [junit.jar:na]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) [junit.jar:na]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) [junit.jar:na]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) [junit.jar:na]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) [junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76) [junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [junit.jar:na]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) [junit.jar:na]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) [junit.jar:na]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) [junit.jar:na]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) [junit.jar:na]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) [junit.jar:na]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236) [junit.jar:na]
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49) [org.eclipse.jdt.junit4.runtime_1.1.100.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) [org.eclipse.jdt.junit.runtime_3.4.200.v20100526-0800.jar:na]
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62) [org.eclipse.pde.junit.runtime_3.4.100.v20100601.jar:na]
	at org.eclipse.pde.internal.junit.runtime.CoreTestApplication.run(CoreTestApplication.java:23) [org.eclipse.pde.junit.runtime_3.4.100.v20100601.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587) [org.eclipse.equinox.app_1.3.1.R36x_v20100803.jar:na]
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198) [org.eclipse.equinox.app_1.3.1.R36x_v20100803.jar:na]
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179) [org.eclipse.osgi_3.6.1.R36x_v20100806.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_17]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_17]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_17]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_17]
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:619) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:574) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.run(Main.java:1407) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
	at org.eclipse.equinox.launcher.Main.main(Main.java:1383) [org.eclipse.equinox.launcher_1.1.0.v20100507.jar:na]
Caused by: org.springframework.beans.PropertyBatchUpdateException: Failed properties: Property 'serviceBeans' threw exception; nested exception is java.lang.ExceptionInInitializerError
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:104) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:59) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1276) ~[org.springframework.beans_2.5.6.SEC01.jar:2.5.6.SEC01]
	... 66 common frames omitted","njiang:1298921207:2011-03-01T03:26:47.440+0000:1298921207:2011-03-01T03:26:47.440+0000:Can I have a look at your camel route configure?
BTW, which version of CXF are you using?
marshal.li:1298927680:2011-03-01T05:14:40.618+0000:1298927680:2011-03-01T05:14:40.618+0000:CXF-2.3,camel-2.5,
I use the example route as follow:
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    "">
  <!-- Defined the real JAXRS back end service  -->
  <jaxrs:server id=""restService""
		        address=""http://localhost:9002/rest"" 
		        staticSubresourceResolution=""true"">
    <jaxrs:serviceBeans>
      <ref bean=""customerService""/>
    </jaxrs:serviceBeans>       
  </jaxrs:server>
  
  <!--  bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.JSONProvider""/-->

  <bean id=""customerService"" class=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />
   
  <!-- Defined the server endpoint to create the cxf-rs consumer --> 
  <cxf:rsServer id=""rsServer"" address=""http://localhost:9000/route""
    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />

  <!-- Defined the client endpoint to create the cxf-rs consumer -->
  <cxf:rsClient id=""rsClient"" address=""http://localhost:9002/rest""
    serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""/>
  
  <!-- The camel route context -->
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
    <route>
       <from uri=""cxfrs://bean://rsServer""/>
       <!-- We can remove this configure as the CXFRS producer is using the HttpAPI by default -->
       <setHeader headerName=""CamelCxfRsUsingHttpAPI"">
         <constant>True</constant>        
       </setHeader>
       <to uri=""cxfrs://bean://rsClient""/>
    </route>
  </camelContext>
  
</beans>
davsclaus:1298944065:2011-03-01T09:47:45.231+0000:1298944065:2011-03-01T09:47:45.231+0000:Please prefer to use the user forum / mailing list first to discuss issues with using Camel.
http://camel.apache.org/support.html

There are a zillion ways to run and deploy Camel that makes it unsuitable if people create JIRA ticket asap they see a stacktrace from an exception.

That's better discussed on a forum. Then if indeed a problem can be indentified as a bug in Camel then a JIRA ticket can be created.
I will close this ticket. Sorry if that seem harsh.

We frankly don't want to JIRA tracker to be the support tracker for how to run X with Y on Z platform.



njiang:1299089944:2011-03-03T02:19:04.413+0000:1299089944:2011-03-03T02:19:04.413+0000:Hi Marshal,

I checked the spring configuration file and found you just copied it from the camel-cxf unit test.
When you tested the this configuration within OSGi platform, I assumed you didn't copy the ""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService.class"" into your bundle, so you got the java.lang.ExceptionInInitializerError.
BTW, I suggest you send a mail to camel-user mailing list (user@camel.apache.org) first, if it is confirmed to be a bug of Camel, then you can create a JIRA for it. 

Willem
marshal.li:1299515082:2011-03-08T00:24:42.213+0000:1299515082:2011-03-08T00:24:42.213+0000:Hi,Willem
   Thank you for your help.
Marshal"
0,CAMEL-3729,Bug,Major,2.6.0,2.7.0,"

jaxb

",Closed,Fixed,2.7.0,Claus Ibsen,Dragisa Krsmanovic,0,1,2011-02-28 18:46:03+00:00,2011-10-25 11:36:08+00:00,"This used to work in 2.5.0 but in 2.6.0 it throws:



Caused by: javax.xml.bind.JAXBException: class com.ask.ugc.camel.Jask3061$Foo nor any of its super class is known to this context.
	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getBeanInfo(JAXBContextImpl.java:594)
	at com.sun.xml.bind.v2.runtime.XMLSerializer.childAsRoot(XMLSerializer.java:482)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.write(MarshallerImpl.java:315)
	at com.sun.xml.bind.v2.runtime.MarshallerImpl.marshal(MarshallerImpl.java:244)
	at javax.xml.bind.helpers.AbstractMarshallerImpl.marshal(AbstractMarshallerImpl.java:75)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:117)
	at org.apache.camel.converter.jaxb.JaxbDataFormat.marshal(JaxbDataFormat.java:96)
...





@ContextConfiguration(
        locations = ""foo.bar.JaxbBug$ContextConfig"",
        loader = JavaConfigContextLoader.class)
public class JaxbBug extends AbstractTestNGSpringContextTests {

    @EndpointInject(uri = ""mock:end"")
    protected MockEndpoint mockEndpoint;

    @Produce(uri = ""direct:test"")
    protected ProducerTemplate producer;

    @Test
    @DirtiesContext
    public void testJaxbMarshalling() throws InterruptedException {
        mockEndpoint.expectedMessageCount(1);

        producer.sendBody(new Foo());

        mockEndpoint.assertIsSatisfied();

    }

    @Configuration
    public static class ContextConfig extends SingleRouteCamelConfiguration {
        @Bean
        public RouteBuilder route() {
            return new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    JaxbDataFormat jaxb = new JaxbDataFormat(JAXBContext.newInstance(Foo.class));
                    from(""direct:test"").marshal(jaxb).to(""mock:end"");


                }
            };
        }
    }

    @XmlRootElement
    public static class Foo {
        String bar;

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }

}","davsclaus:1298938123:2011-03-01T08:08:43.458+0000:1298938123:2011-03-01T08:08:43.458+0000:It must be something with Spring JavaConfig Testing. Using plain camel-test kit works without any problem.

I suggest to provide a classloader in the JAXBContext.newInstance, so the Foo class can be loaded.

davsclaus:1298938718:2011-03-01T08:18:38.207+0000:1298938718:2011-03-01T08:18:38.207+0000:Okay I have a test using JUnit instad of TestNG and it works fine on trunk code. I will add it to camel-jaxb.

davsclaus:1298940224:2011-03-01T08:43:44.157+0000:1298940224:2011-03-01T08:43:44.157+0000:trunk: 1075707.
dragisak:1298972351:2011-03-01T17:39:11.144+0000:1298972552:2011-03-01T17:42:32.283+0000:We have this problem in our web app (Jersey+Spring 3.0.5). It happened when we upgraded Camel from 2.5 to 2.6. The test is just to demonstrate problem.

This same test passes with Camel 2.5 but fails with Camel 2.6"
0,CAMEL-3728,Task,Major,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-28 12:55:25+00:00,2011-10-25 11:35:26+00:00,We need documentation for the new DNS component.,"rkettelerij:1298900689:2011-02-28T21:44:49.823+0000:1298900726:2011-02-28T21:45:26.967+0000:Claus, there's already some documentation in SVN (https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-dns/README.rdoc?hb=true). It should be moved to Confluence, so the readme file can be deleted.
davsclaus:1298935014:2011-03-01T07:16:54.960+0000:1298935014:2011-03-01T07:16:54.960+0000:Thanks Richard. I have created the wiki page and delete the readme file.
toulmean:1299687256:2011-03-10T00:14:16.439+0000:1299687256:2011-03-10T00:14:16.439+0000:Thanks Richard. Please let me know if there is more to add to the doc."
0,CAMEL-3727,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Marcin Kolda,0,0,2011-02-28 12:28:27+00:00,2011-10-25 11:36:20+00:00,"When I'm using recipient list in parallel mode aggregateExecutorService in MulticastProcessor doesn't reuse threads and is creating one new thread per each request.


To reproduce this bug simply add a loop to RecipientListParallelTest.testRecipientListParallel() test:


RecipientListParallelTest.java
    public void testRecipientListParallel() throws Exception {
        for (int i = 0; i < 10000; i++) {
            MockEndpoint mock = getMockEndpoint(""mock:result"");
            mock.reset();
            mock.expectedBodiesReceivedInAnyOrder(""c"", ""b"", ""a"");
            template.sendBodyAndHeader(""direct:start"", ""Hello World"", ""foo"", ""direct:a,direct:b,direct:c"");
            assertMockEndpointsSatisfied();
        }
    }




In the logs you can find:



2011-02-28 13:22:30,984 [) thread #0 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:31,984 [) thread #4 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:32,984 [) thread #8 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:34,000 [ thread #12 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:35,000 [ thread #14 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:36,000 [ thread #15 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:37,015 [ thread #16 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.
2011-02-28 13:22:38,015 [ thread #17 - RecipientListProcessor-AggregateTask] DEBUG MulticastProcessor             - Done aggregating 3 exchanges on the fly.","davsclaus:1298871302:2011-02-28T13:35:02.008+0000:1298871302:2011-02-28T13:35:02.008+0000:Thanks for reporting. I got this covered now. Running full tests before committing the fix.
davsclaus:1298877620:2011-02-28T15:20:20.961+0000:1298877620:2011-02-28T15:20:20.961+0000:trunk: 1075372."
0,CAMEL-3726,Improvement,Major,2.7.0,None,"
None
",Closed,Fixed,2.7.0,James Strachan,Claus Ibsen,0,0,2011-02-28 10:54:36+00:00,2011-10-25 11:36:18+00:00,"The camel-context component has an issue with startup ordering when using Spring XML.


We need a way to hook into events or depends-on or whatever to ensure all the context's have been started up before producers is allowed to fire messages to external contexts.


James has some work/patch code",jstrachan:1298892139:2011-02-28T19:22:19.342+0000:1298892139:2011-02-28T19:22:19.342+0000:see the test case SpringDslContextComponentTest in camel-context for an example of using spring XML to define camel-context routes
0,CAMEL-3725,Task,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Peter Tillemans,0,0,2011-02-26 18:31:05+00:00,2011-10-25 11:36:20+00:00,"I have a simple camel project just using camel-core and camel-spring (and some other dependencies.


All camel related versions are configured with a maven property.


With camel.version = 2.5.0  when I run:


   mvn site


it builds successfully.


Switching to 2.6.0 the build fails with the following stackdump :


mvn site


...snip...


[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Error during page generation


Embedded error: Error rendering Maven report: Failed to generate TypeConverters report
Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.lifecycle.LifecycleExecutionException: Error during page generation
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error during page generation
	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:114)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more
Caused by: org.apache.maven.doxia.siterenderer.RendererException: Error rendering Maven report: Failed to generate TypeConverters report
	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:174)
	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:328)
	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:132)
	at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:142)
	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:109)
	... 19 more
Caused by: org.apache.maven.reporting.MavenReportException: Failed to generate TypeConverters report
	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:256)
	at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:90)
	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:164)
	... 23 more
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:77)
	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:246)
	... 25 more
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9 seconds
[INFO] Finished at: Sat Feb 26 19:17:42 CET 2011
[INFO] Final Memory: 72M/379M
[INFO] ------------------------------------------------------------------------
pti@pti-laptop:~/Projects/holdlot$","davsclaus:1298765129:2011-02-27T08:05:29.358+0000:1298765155:2011-02-27T08:05:55.249+0000:Can you report the Maven version and which Maven command you execute?

davsclaus:1298765247:2011-02-27T08:07:27.956+0000:1298765247:2011-02-27T08:07:27.956+0000:We don't use the maven site so this issue isn't a big concern of ours.
snamellit:1298791672:2011-02-27T15:27:52.583+0000:1298791672:2011-02-27T15:27:52.583+0000:added maven version
snamellit:1298791739:2011-02-27T15:28:59.453+0000:1298791739:2011-02-27T15:28:59.453+0000:clarified commands used
snamellit:1298791862:2011-02-27T15:31:02.136+0000:1298791862:2011-02-27T15:31:02.136+0000:I agree it is not a big deal, but I find it strange that it breaks of with a build error when no transformers are found. I would just expect : 'No transformers found in packages X,Y,Z' , and continue reporting.


davsclaus:1298853676:2011-02-28T08:41:16.166+0000:1298853676:2011-02-28T08:41:16.166+0000:I ran from trunk code with mvn site using maven 2.2.1 and I got much further. It failed later about not being able to find a checkstyle.xml file.

Since Camel 2.5 there has been changes in maven pom.xml files to let it build with Maven 3 and hence why it may break. So now with Camel 2.7 it may work again.


davsclaus:1298939586:2011-03-01T08:33:06.613+0000:1298939586:2011-03-01T08:33:06.613+0000:The mvn site now runs for a longer time, eg the type converter is not an issue. However it may not fully complete. I have added that to known issues. We don't have a plan to make this work as the site is not used, and it's not worth the trouble. It most likely cause side effects in the release process or between maven 2/3 etc.
dragisak:1307364512:2011-06-06T20:48:32.898+0000:1307364512:2011-06-06T20:48:32.898+0000:Is this fixed ? I am seeing this problem with 2.7.2 and Maven 2.2.1
davsclaus:1307395613:2011-06-07T05:26:53.022+0000:1307395613:2011-06-07T05:26:53.022+0000:See the known issues in the release notes.
http://camel.apache.org/camel-270-release.html"
0,CAMEL-3724,Task,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-26 12:27:26+00:00,2011-10-25 11:35:43+00:00,"It doesnt provide any value for end users. So lets remove it.
Camel uses its own bean post processor to support the @Produce/@Consume injection stuff.",davsclaus:1298700502:2011-02-26T14:08:22.466+0000:1298700502:2011-02-26T14:08:22.466+0000:trunk: 1074849.
0,CAMEL-3723,New Feature,Major,2.6.0,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2011-02-26 09:48:23+00:00,2019-03-01 13:36:26+00:00,"We should change the API so end user can more easily add 3rd party resolvers based on scheme.
Then they can add JNDI, zookeeper, or any other 3rd party they like.


Currently you kinda have to delegate to the existing resolvers. It would be easier to have a Set of scheme that's supported.
And then use the order they are defined in the location as a chain to resolve a property.","geerzo:1367673683:2013-05-04T21:21:23.118+0000:1367673683:2013-05-04T21:21:23.118+0000:Would this affect the ResourceHelper class (or replace it) so that resources can be loaded from places like ZooKeeper? I have a need to be able to load files into camel components from zookeeper and those components currently use ResourceHelper to load the files but only support file://, httpd:// and classpath://
davsclaus:1369531795:2013-05-26T09:29:55.861+0000:1369531795:2013-05-26T09:29:55.861+0000:Chris, no.

But its a good idea to have a SPI for loading resources. Feel free to log a JIRA ticket for that.
davsclaus:1422872431:2015-02-02T18:20:31.673+0000:1422872431:2015-02-02T18:20:31.673+0000:We introduced custom functions which can do this.
http://camel.apache.org/using-propertyplaceholder.html"
0,CAMEL-3722,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-26 08:30:28+00:00,2011-10-25 11:36:17+00:00,In the XML DSL you can use threadPoolProfile to define profiles for thread pools. People may want to use property placeholders for min/max values etc. Using xs:string is thus much easier to do that. We do that for some of the others such as <jmxAgent>,davsclaus:1298764959:2011-02-27T08:02:39.126+0000:1298764959:2011-02-27T08:02:39.126+0000:trunk: 1075001.
0,CAMEL-3721,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-26 08:28:41+00:00,2011-10-25 11:36:01+00:00,"For example you may want to say location=${karaf.hom}/etc/myprop.properties.
eg where karaf.home is a jvm system property.


Take a look at simple as we may want to be able to lookup environment variable also.","davsclaus:1298769514:2011-02-27T09:18:34.101+0000:1298769514:2011-02-27T09:18:34.101+0000:${env:xxx} for an OS environment, eg JAVA_HOME
${xxx} for a JVM system property
davsclaus:1298776934:2011-02-27T11:22:14.798+0000:1298776934:2011-02-27T11:22:14.798+0000:trunk: 1075028."
0,CAMEL-3720,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Dan Checkoway,0,0,2011-02-25 20:15:37+00:00,2011-10-25 11:35:36+00:00,"Please add camel-kestrel as a component in JIRA...thx.


The bug is that spymemcached is optimizing concurrent gets for the same key into a single get.  The fix is in the attached patch.","dcheckoway:1298636223:2011-02-25T20:17:03.066+0000:1298636223:2011-02-25T20:17:03.066+0000:This patch tweaks the way we build the spymemcached client so it doesn't optimize get calls together.
davsclaus:1298679084:2011-02-26T08:11:24.915+0000:1298679084:2011-02-26T08:11:24.915+0000:trunk: 1074801.

Thanks for the patch."
0,CAMEL-3719,Bug,Minor,2.6.0,,"
None
",Closed,Duplicate,None,Unassigned,Andreas Stiller,0,1,2011-02-25 07:08:36+00:00,2011-02-25 07:12:48+00:00,"i can send a String to a JMS Queue (based on Oracle AQ) successfully with camel 2.4.0. The URI in use is: 
""camel.jms:queue:CUSTOMER_ORDER?cacheLevelName=CACHE_NONE"". When i switch to camel 2.6.0 and leave the code otherwise unchanged i get a crash in Oracle AQ: 



Caused by: oracle.jms.AQjmsException: JMS-147: Invalid ReplyTo destination type, or use of reserved `JMSReplyTo agent name, or serialization error with 
 AQjmsDestination 
        at oracle.jms.AQjmsError.throwEx(AQjmsError.java:285) 
        at oracle.jms.AQjmsMessage.setJMSReplyTo(AQjmsMessage.java:523) 
        at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:302) 
        at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:201) 
        at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:144) 
        at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$3.doInJms(JmsConfiguration.java:178) 



This trace was reported already in:
camel-user-thread",astiller:1298589168:2011-02-25T07:12:48.785+0000:1298589168:2011-02-25T07:12:48.785+0000:i create this same time as Claus Ibsen did => issue 3718
0,CAMEL-3718,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-25 07:04:05+00:00,2011-10-25 11:35:33+00:00,"See nabble
http://camel.465427.n5.nabble.com/JmsComponent-changes-between-2-4-0-and-2-6-0-tp3398446p3398446.html",davsclaus:1298590731:2011-02-25T07:38:51.677+0000:1298590731:2011-02-25T07:38:51.677+0000:trunk: 1074420.
0,CAMEL-3717,New Feature,Major,None,,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,0,2011-02-24 11:38:11+00:00,2011-02-24 13:39:53+00:00,"The existing archetype camel-war-archetype generates a full web project containing the camel web console. This new archetype should be focused to generate a lightweight camel web project to deploy camel routes into Tomcat, ... without the web console


This project should contain


src/main/webapp/WEB-INF/web.xml
src/main/webapp/WEB-INF/applicationContext.xml (with beans def and camel Context)
...",cmoulliard:1298525993:2011-02-24T13:39:53.712+0000:1298525993:2011-02-24T13:39:53.712+0000:Code committed
0,CAMEL-3716,Bug,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Moulliard Charles,0,0,2011-02-24 11:32:05+00:00,2011-10-25 11:36:12+00:00,The archetype camel-archetype-war is not longer synchronized with last modifications made with component camel-web and so the camel web console does not appear into the web browser,davsclaus:1299192143:2011-03-04T06:42:23.169+0000:1299192143:2011-03-04T06:42:23.169+0000:The console works now
0,CAMEL-3715,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-24 09:24:41+00:00,2011-10-25 11:35:52+00:00,"See nabble


The workaround is to use either HTTP_URI or HTTP_QUERY as a header with the parameters. Then they are not double encoded.


Also the HTTP_URI should be placeholder resolved, so we can use port or the likes to inject the port number dynamic.","davsclaus:1298527110:2011-02-24T13:58:30.779+0000:1298527110:2011-02-24T13:58:30.779+0000:trunk: 1074153.

Also fixed camel-http4"
0,CAMEL-3714,Improvement,Minor,2.5.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Willem Jiang,Jim Newsham,0,0,2011-02-24 05:02:51+00:00,2011-04-19 05:07:06+00:00,"I have a camel context which configures jms producers, but no jms consumers.  With this configuration, the ""testConnectionOnStartup"" jms option did not test the connection when I started the camel context.  I have discovered that (with the current implementation) the ""testConnectionOnStartup"" option only applies to consumers.  I see that it is implemented in JmsConsumer.doStart() -> JmsConsumer.testConnectionOnStartup().  It would be useful if this option could also applied to producers.


As a workaround, I configured a dummy route and a dummy jms consumer.","charly:1302092278:2011-04-06T20:17:58.757+0000:1302092278:2011-04-06T20:17:58.757+0000:I will take a look at this one. 
charly:1303114475:2011-04-18T16:14:35.214+0000:1303114475:2011-04-18T16:14:35.214+0000:I setup a testConnectionOnStartup for the producer based on the same option.  So if it gets set on the URI will will check it on the produce if one is instantiated. 

Let me know if there is a better way to do this.
njiang:1303160826:2011-04-19T05:07:06.215+0000:1303160826:2011-04-19T05:07:06.215+0000:Applied patch into trunk with thanks to Heath."
0,CAMEL-3713,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Hadrian Zbarcea,Paul Mietz Egli,0,0,2011-02-23 23:46:19+00:00,2011-10-25 11:35:45+00:00,"If the camel-mail component consumes a Multipart email message that contains two parts with the same filename, subsequent calls to DataHandler dh = Message.getAttachments().get(""filename"") result in a ClassCastException.  This occurs because MailBinding.extractAttachmentsFromMultipart() calls CollectionHelper.appendValue(map, fileName, part.getDataHandler()) to add an attachment to the Message attachments map.  If appendValue is passed a duplicate key, it converts the map value to an ArrayList and adds the existing value and the new value to the list.  The result is a Map that contains a mix of <String,DataSource> and <String,ArrayList>.


Fix is to NOT use CollectionHelper and to check for duplicate keys prior to adding an attachment.","pegli:1298476095:2011-02-23T23:48:15.411+0000:1298476095:2011-02-23T23:48:15.411+0000:patch against trunk that fixes CAMEL-3713.
hadrian:1298490117:2011-02-24T03:41:57.991+0000:1298490117:2011-02-24T03:41:57.991+0000:Patch applied in r1074033 with thanks to Paul Mietz Egli.
Also added a minor checkstyle fix in r1074034."
0,CAMEL-3712,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-23 17:24:09+00:00,2011-10-25 11:35:20+00:00,Until now it hasn't been possible to share the route preparation logic between Java DSL and XML DSL as they used to be a bit too different. However over the recent versions we have improved that. Now its possible to fully share the logic.,davsclaus:1298496320:2011-02-24T05:25:20.139+0000:1298496320:2011-02-24T05:25:20.139+0000:trunk: 1074046
0,CAMEL-3711,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-23 17:22:22+00:00,2011-10-25 11:36:21+00:00,"When you have 2+ of onException(MyExcpetion.class) then the order may get reversed, in the logic which prepares the routes. The logic should cater for clashes and ensure orders is preserved.


This currently only occurs for XML based routes. The Java DSL works.",davsclaus:1298496286:2011-02-24T05:24:46.137+0000:1298496286:2011-02-24T05:24:46.137+0000:trunk: 1074046
0,CAMEL-3710,Improvement,Minor,None,2.7.0,"
None
",Closed,Duplicate,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-23 16:43:57+00:00,2011-02-23 16:48:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-to-specify-tab-delimiter-for-flatpack-tp3397320p3397320.html


This makes it easier to configure the delimiter in flatpack as it uses a char type. And in the endpoint uri it's all String","davsclaus:1298450763:2011-02-23T16:46:03.213+0000:1298450763:2011-02-23T16:46:03.213+0000:Hmm we got it already in ObjectConverter
{code}
    @Converter
    public static char toChar(String value) {
        // must be 1 length string
        if (value == null || value.length() != 1) {
            throw new IllegalArgumentException(""String must have exactly a length of 1: "" + value);
        }
        return value.toCharArray()[0];
    }
{code}
davsclaus:1298450916:2011-02-23T16:48:36.180+0000:1298450916:2011-02-23T16:48:36.180+0000:duplicate of CAMEL-3045"
0,CAMEL-3709,Bug,Minor,"2.5.0, 2.6.0",2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Søren Markert,0,1,2011-02-23 12:12:35+00:00,2011-10-25 11:35:47+00:00,"When using interceptFrom(String) together with from(Endpoint), the below Exception occurs during the routes building process. Looking at RoutesDefinition.java:217 reveals, that the FromDefintion just created has no URI. That causes the comparison to all the interceptFroms' URIs to fail. As far as I can tell, the way to fix this would be to add setUri(myEndpoint.getEndpointUri()) in the constructor FromDefinition(Endpoint endpoint).


Below the stack trace, there is a unit test that demonstrates the issue. Until it if fixed, it can be easily circumvented by adding the commented-out line, and then change to from(""myEndpoint"").



org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: null due to: null
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:109)
	at org.apache.camel.model.RoutesDefinition.route(RoutesDefinition.java:217)
	at org.apache.camel.model.RoutesDefinition.from(RoutesDefinition.java:167)
	at org.apache.camel.builder.RouteBuilder.from(RouteBuilder.java:101)
	at dk.mobilethink.adc2.endpoint.UnsetUriTest$1.configure(UnsetUriTest.java:18)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:318)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:273)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:259)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:612)
	at org.apache.camel.test.CamelTestSupport.setUp(CamelTestSupport.java:111)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at org.apache.camel.test.TestSupport.runBare(TestSupport.java:65)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NullPointerException
	at org.apache.camel.util.UnsafeUriCharactersEncoder.encode(UnsafeUriCharactersEncoder.java:56)
	at org.apache.camel.util.URISupport.normalizeUri(URISupport.java:162)
	at org.apache.camel.util.EndpointHelper.matchEndpoint(EndpointHelper.java:107)
	... 24 more





package dk.mobilethink.adc2.endpoint;

import org.apache.camel.Endpoint;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.CamelTestSupport;

public class UnsetUriTest extends CamelTestSupport {
	@Override
	protected RouteBuilder createRouteBuilder() throws Exception {

		return new RouteBuilder() {
			public void configure() throws Exception {
				interceptFrom(""URI1"").to(""irrelevantURI"");

				Endpoint myEndpoint = getContext().getComponent(""direct"").createEndpoint(""ignoredURI"");
				
//				getContext().addEndpoint(""myEndpoint"", myEndpoint);
				from(myEndpoint)
					.inOnly(""log:foo"");
			}
		};
	}

	public void testNothing() { }
}","davsclaus:1298449235:2011-02-23T16:20:35.347+0000:1298449235:2011-02-23T16:20:35.347+0000:You found the easter egg. There is a todo in the source code to support endpoint via ref's

    // TODO: Support lookup endpoint by ref (requires a bit more work)

davsclaus:1298496063:2011-02-24T05:21:03.859+0000:1298496063:2011-02-24T05:21:03.859+0000:trunk: 1074045
davsclaus:1298503462:2011-02-24T07:24:22.299+0000:1298503462:2011-02-24T07:24:22.299+0000:trunk: 1074058.

Now works when from is using ref instead of url as well."
0,CAMEL-3708,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-23 10:51:18+00:00,2011-10-25 11:35:50+00:00,"We should tidy up the model, so they clearly indicate if



outputs supported
no outputs



eg when an EIP supports output, they can be nested/added to it, eg in XML its like



<split>
  <output 1>
  <output 2>
</split>




But some EIPs indicate they support output, but they dont. For example <to> should not support output as it doesn't make sense.


We should introduce a isOutputSupported on the ProcessorDefinition and then check each EIP.


This will cause changes to the XSD in that regard EIPs which really didn't support output (eg it was hacked that way in Java code) but the XSD would allow outputs, eg



<to uri=""xxx"">
   <output 1>
   <output 2>
</to>




Now this would not be possible and you would have to do



<to uri=""xxx""/>
<output 1>
<output 2>




This will in fact reduce the XSD and make it more concise when outputs is supported or not.",davsclaus:1298445927:2011-02-23T15:25:27.634+0000:1298445927:2011-02-23T15:25:27.634+0000:trunk: 1073776.
0,CAMEL-3707,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-23 08:24:10+00:00,2011-10-25 11:36:08+00:00,"Sort EIP doesn't have output. And in the Spring XML it should loose the <expression> tag and be like the others which requires and expression, eg delayer etc.


So there will be slight XML change.",davsclaus:1298420745:2011-02-23T08:25:45.726+0000:1298420745:2011-02-23T08:25:45.726+0000:trunk: 1073634.
0,CAMEL-3706,Bug,Major,2.5.0,2.7.0,"
None
",Closed,Invalid,2.7.0,Claus Ibsen,Ashwin Pejavar,0,0,2011-02-22 23:15:47+00:00,2011-02-23 07:21:24+00:00,"camel-spring-2.5.0.jar includes the the spring app-context related schemas (camel-osgi.xsd, camel-spring.xsd...) in the root of the jar.


OSGI does not support resolving resources in the default package, or at least that is true of the osgi container I use, namely Felix.


So if I start my app without an internet connection, forcing the XSDs to be loaded from within the jar, the app will not start with a ""Failed to read schema document"" error.


If I repackage the jar after moving the XSDs to a package (say org.apache.camel.spring) and update the spring.schemas file correspondingly, everything works.","davsclaus:1298416863:2011-02-23T07:21:03.709+0000:1298416863:2011-02-23T07:21:03.709+0000:Could you please use the mailing list at first, as there are often better help there when the issue you report is very generic and not well detailed.

Then later if there indeed is something wrong a ticket can be opened.

See details here
http://camel.apache.org/support.html"
0,CAMEL-3705,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Carl Johan Erik Edstrom,0,0,2011-02-22 21:59:04+00:00,2011-05-29 10:19:40+00:00,"The existing bundles for dnsjava are not yet released via maven. 
Waiting for a bundle update/release.","davsclaus:1301712488:2011-04-02T10:48:08.828+0000:1301712488:2011-04-02T10:48:08.828+0000:What's the status of this?
joed:1301743861:2011-04-02T19:31:01.346+0000:1301743861:2011-04-02T19:31:01.346+0000:dnsjava (121)
-------------
Manifest-Version = 1.0
Bnd-LastModified = 1297804172224
Archiver-Version = Plexus Archiver
Tool = Bnd-1.15.0
Built-By = otsvinev
Build-Jdk = 1.5.0_20
Created-By = Apache Maven Bundle Plugin

Bundle-Name = dnsjava
Bundle-RequiredExecutionEnvironment = J2SE-1.4
Bundle-Description = dnsjava is an implementation of DNS in Java. It supports all defined record types (including the DNSSEC types), and unknown types. It can be used for queries, zone transfers, and dynamic updates. It includes a cache which can be used by clients, and a minimal implementation of a server. It supports TSIG authenticated messages, partial DNSSEC verification, and EDNS0.
Bundle-SymbolicName = dnsjava
Bundle-Version = 2.1.1
Bundle-License = http://www.dnsjava.org/README
Bundle-ManifestVersion = 2

Import-Package = 
	junit.framework,
	org.xbill.DNS,
	sun.net.spi.nameservice
Export-Package = 
	org.xbill.DNS;uses:=org.xbill.DNS.util,
	org.xbill.DNS.spi;uses:=""org.xbill.DNS,sun.net.spi.nameservice"",
	org.xbill.DNS.utils;uses:=junit.framework


The existing trunk for this project properly deploys, that bundle has not been pushed out yet.
I can shade this in SMX bundles....

davsclaus:1306635580:2011-05-29T10:19:40.531+0000:1306635580:2011-05-29T10:19:40.531+0000:Added camel-dns feature as they are now in central repo"
0,CAMEL-3704,New Feature,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,Jonathan Anstey,1,5,2011-02-22 20:05:00+00:00,2012-09-12 14:50:37+00:00,"It would be neat to take advantage of the ability of the OSGi config admin to receive updates to an endpoint's properties at runtime and let Camel handle restarting the underlying services. For instance, you could have a server URL defined as a property



   <osgix:cm-properties id=""cmProps"" persistent-id=""some.config.id"">
      <prop key=""myServerUri"">http://myserver:8888</prop>
   </osgix:cm-properties>

   <ctx:property-placeholder properties-ref=""cmProps"" />

   ... ${myServerUri} is used in a Camel endpoint URI somewhere...




In Karaf then you could change the myServerUri to something else and Camel would get the config update (by way of http://www.osgi.org/javadoc/r4v42/org/osgi/service/cm/ManagedService.html) and restart things as appropriate.","davsclaus:1298505227:2011-02-24T07:53:47.090+0000:1298505227:2011-02-24T07:53:47.090+0000:This sounds dangerous in my ears.

I would not like my production applications to 'go happy updating at will' in case someone changed a configuration option.
Instead I would prefer that I could do the configuration updates. Notice an application may require multiple configuration changes.
Also notice if I do a typo when updating the configuration, I would not like my application(s) to re-start. Instead the restarts must be controlled.

And then Karaf could output a list of bundles which uses those properties that now have been changed.

Then I can manually update those bundles when I want to.
gnodet:1298508928:2011-02-24T08:55:28.719+0000:1298508928:2011-02-24T08:55:28.719+0000:I agree the configuration updates should be controlled, but it just means that the developer should be able to control what will happen at runtime, we don't need to *force* multiple phases for bringing the configuration live.  It's like hot-deploy, some people may want the simplicity, some people may want more control, we should allow both imho.
gnodet:1298509445:2011-02-24T09:04:05.536+0000:1298509445:2011-02-24T09:04:05.536+0000:For example when using Aries Blueprint 0.3, the cm:property-placeholder can be configured to reload the blueprint application when the configuration has changed, but this is not the default behavior.
Here's an example:
{code}
<cm:property-placeholder persistent-id=""org.apache.karaf.shell"" update-strategy=""reload"">
 ...
</cm:property-placeholder>
{code}
It should work with Camel too.
janstey:1298523603:2011-02-24T13:00:03.529+0000:1298523603:2011-02-24T13:00:03.529+0000:Of course guys, I meant that this would be an *optional* feature... wouldn't make sense to have it always on! :) Nice that blueprint supports this concept anyways.
davsclaus:1341534816:2012-07-06T08:33:36.617+0000:1341534816:2012-07-06T08:33:36.617+0000:This can be hard to track as when the placeholder is resolved, then Camel does not keep track, that this given endpoint / (or whatever it may be) used a placeholder. So you cannot determine which routes/endpoints/whatever would be affected by a OSGi config admin update on a property placeholder.

I dont think this is something we can do easily, or should do. Its the osgi container that can track this on a per bundle level and reload bundles on changes etc.
janstey:1341546699:2012-07-06T11:51:39.425+0000:1341546699:2012-07-06T11:51:39.425+0000:Yeah, I agree after reading this again. I think I just thought it would be a cool feature at the time - useful perhaps more for demos that in real life :) It is a tricky thing to impl as you say and as well other projects (i.e. the container) handle lifecycle of bundles quite nicely already.

Closing.
alanfoster:1347432637:2012-09-12T14:50:37.638+0000:1347432637:2012-09-12T14:50:37.638+0000:Hi,
I understand that this issue is marked as Closed now; But I agree with [~janstey] that this would indeed be a nice feature to add. [~davsclaus] mentioned that Camel does not keep track of endpoints that were created using Property Placeholders; But isn't this something we can add as it wouldn't be an API changer most likely, if we can't currently derive it? Perhaps this Jira ticket could be looked at again?

Alan"
0,CAMEL-3703,Improvement,Major,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-22 16:20:31+00:00,2011-10-25 11:36:02+00:00,Its kinda stupid that you have to configure <batch-config> in the bottom of <resequence> which have outputs. It should be in the top.,davsclaus:1298369943:2011-02-22T18:19:03.477+0000:1298369943:2011-02-22T18:19:03.477+0000:trunk: 1073445.
0,CAMEL-3702,Bug,Major,2.6.0,"2.7.3, 2.8.0","
None
",Closed,Fixed,"2.7.3, 2.8.0",Willem Jiang,Arnoud Glimmerveen,0,0,2011-02-22 12:39:26+00:00,2011-10-25 11:35:29+00:00,"I am trying to get the example camel-example-cxf-tomcat to work on Tomcat 7.0.8. This example contains a CxfEndpoint that is configured as being asynchronous (by default). Because of this asynchronous setting I was notified by an Exception that I should set the async-supported property of the CXFServlet in the web.xml. After I set this property to true, I see that invocations are received and processed by the Camel route, however the result is not returned: the connection is closed directly.
I assume this issue is not directly related to the example itself (apart from the missing async-supported property), however I was not able to pinpoint which component is triggering the connection to be closed before the result is written.","davsclaus:1298417108:2011-02-23T07:25:08.019+0000:1298417108:2011-02-23T07:25:08.019+0000:Can you try another container such as Jetty to see if make a difference? Just notice to know if its Tomcat only issue or generic web container.

Also would be nice to check with the Apache CXF if they have any issues on Tomcat with the async-supported property.
arnoud:1298421974:2011-02-23T08:46:14.149+0000:1298421974:2011-02-23T08:46:14.149+0000:I deployed the same war in Jetty 8.0.0.M2 (supporting Servlet 3.0). Upon invoking the service I see the exception below in the logging of Jetty and the invoker gets the HTTP 500 error. 
The exact fault differs from Tomcat, as in the Tomcat case the connection was closed without any exception(s). In both cases I see the INFO logging from the route itself (input/output).
 
If I change the CxfEndpoint to be synchronous, it works fine in Jetty as well. 

{noformat}
2011-02-23 09:21:51,793 [qtp18378667-26 ] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusIncident@83dae1]]
2011-02-23 09:21:51,829 [qtp18378667-26 ] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incident.OutputStatusIncident@62812d]
2011-02-23 09:21:51.839:WARN::/camel-example-cxf-tomcat-2.6.0/webservices/incident 
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:479)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:247)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handle(Server.java:353)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:598)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)
2011-02-23 09:21:51,989 [qtp18378667-26 ] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[servlet-api-3.0.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:546)
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:483)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)
        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:500)
        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:230)
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:956)
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:411)
        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:188)
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:891)
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:185)
        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:151)
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:114)
        at org.eclipse.jetty.server.Server.handleAsync(Server.java:398)
        at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:603)
        at org.eclipse.jetty.server.HttpConnection$RequestHandler.content(HttpConnection.java:1076)
        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:805)
        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
        at org.eclipse.jetty.server.HttpConnection.handle(HttpConnection.java:427)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:510)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.access$000(SelectChannelEndPoint.java:34)
        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:40)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:450)
        at java.lang.Thread.run(Unknown Source)[:1.6.0_20]
{noformat}
arnoud:1298429676:2011-02-23T10:54:36.910+0000:1298429676:2011-02-23T10:54:36.910+0000:I also deployed the war to GlassFish 3.0.1, resulting in the logging below. Both GlassFish and Jetty fail with the same exception in the same method (ReadHeadersInterceptor.handleMessage()). I tried to verify if Tomcat (silently) fails in the same method as well, however it seems that it continues after invoking this method.

{noformat}
[#|2011-02-23T11:19:08.306+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,305 [d-pool-8080-(1)] INFO  input                          - Exchange[ExchangePattern:InOut, BodyType:org.apache.cxf.message.MessageContentsList, Body:[org.apache.camel.example.cxf.incident.InputStatusI
ncident@1797bf]]
|#]

[#|2011-02-23T11:19:08.398+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|2011-02-23 11:19:08,398 [d-pool-8080-(1)] INFO  output                         - Exchange[ExchangePattern:InOut, BodyType:org.apache.camel.example.cxf.incident.OutputStatusIncident, Body:org.apache.camel.example.cxf.incide
nt.OutputStatusIncident@112691e]
|#]

[#|2011-02-23T11:19:08.405+0100|WARNING|glassfish3.0.1|javax.enterprise.system.container.web.com.sun.enterprise.web|_ThreadID=30;_ThreadName=http-thread-pool-8080-(1);|StandardWrapperValve[CXFServlet]: PWC1406: Servlet.service() for servlet CXFServlet threw exception
org.apache.cxf.continuations.SuspendedInvocationException
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:258)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:279)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:188)
        at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:641)
        at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:97)
        at com.sun.enterprise.web.PESessionLockingStandardPipeline.invoke(PESessionLockingStandardPipeline.java:85)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:185)
        at org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:325)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:226)
        at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:165)
        at com.sun.grizzly.http.ProcessorTask.invokeAdapter(ProcessorTask.java:791)
        at com.sun.grizzly.http.ProcessorTask.doProcess(ProcessorTask.java:693)
        at com.sun.grizzly.http.ProcessorTask.process(ProcessorTask.java:954)
        at com.sun.grizzly.http.DefaultProtocolFilter.execute(DefaultProtocolFilter.java:170)
        at com.sun.grizzly.DefaultProtocolChain.executeProtocolFilter(DefaultProtocolChain.java:135)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:102)
        at com.sun.grizzly.DefaultProtocolChain.execute(DefaultProtocolChain.java:88)
        at com.sun.grizzly.http.HttpProtocolChain.execute(HttpProtocolChain.java:76)
        at com.sun.grizzly.ProtocolChainContextTask.doCall(ProtocolChainContextTask.java:53)
        at com.sun.grizzly.SelectionKeyContextTask.call(SelectionKeyContextTask.java:57)
        at com.sun.grizzly.ContextTask.run(ContextTask.java:69)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:330)
        at com.sun.grizzly.util.AbstractThreadPool$Worker.run(AbstractThreadPool.java:309)
        at java.lang.Thread.run(Thread.java:619)
|#]

[#|2011-02-23T11:19:08.429+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,427 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:222)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]

[#|2011-02-23T11:19:08.485+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=31;_ThreadName=pool-44-thread-1;|2011-02-23 11:19:08,479 [ool-44-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService has thrown exception, unwinding now
java.lang.NullPointerException
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getFormHintFieldEncoding(PwcCoyoteRequest.java:245)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.setRequestEncodingFromSunWebXml(PwcCoyoteRequest.java:208)[web-glue.jar:3.0.1]
        at com.sun.enterprise.web.pwc.connector.coyote.PwcCoyoteRequest.getCharacterEncoding(PwcCoyoteRequest.java:129)[web-glue.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getCharacterEncoding(RequestFacade.java:360)[web-core.jar:3.0.1]
        at javax.servlet.ServletRequestWrapper.getCharacterEncoding(ServletRequestWrapper.java:134)[javax.servlet.jar:]
        at org.apache.cxf.transport.http.HttpServletRequestSnapshot.<init>(HttpServletRequestSnapshot.java:68)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$1.cacheInput(AbstractHTTPDestination.java:303)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.cacheInput(AbstractHTTPDestination.java:519)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:531)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination.flushHeaders(AbstractHTTPDestination.java:524)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.http.AbstractHTTPDestination$WrappedOutputStream.onFirstWrite(AbstractHTTPDestination.java:659)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.io.AbstractWrappedOutputStream.write(AbstractWrappedOutputStream.java:42)[cxf-api-2.3.2.jar:2.3.2]
        at com.ctc.wstx.io.UTF8Writer.flush(UTF8Writer.java:96)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.flush(BufferingXmlWriter.java:214)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BufferingXmlWriter.close(BufferingXmlWriter.java:194)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1685)[woodstox-osgi.jar:3.2.1]
        at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)[woodstox-osgi.jar:3.2.1]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:282)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor$SoapOutEndingInterceptor.handleMessage(SoapOutInterceptor.java:270)[cxf-rt-bindings-soap-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:99)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:315)[cxf-api-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:113)[cxf-rt-core-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:97)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.2.jar:2.3.2]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat}
njiang:1298439060:2011-02-23T13:31:00.276+0000:1298439060:2011-02-23T13:31:00.276+0000:It looks like a CXF servlet transport issue.
I will spend some time to dig it tomorrow.

dkulp:1298440112:2011-02-23T13:48:32.785+0000:1298440112:2011-02-23T13:48:32.785+0000:
Willem,
It might be slightly harder to debug with 2.3.3-SNAPSHOT/2.4.0-SNAPSHOT as the HttpRequestWrapper is now only created for one-ways and in some WS-RM/Addr cases.   Thus, it may ""just work"" with 2.3.3.   Try doing a one-way and seeing if the behavior persists.


njiang:1298529101:2011-02-24T14:31:41.199+0000:1298529101:2011-02-24T14:31:41.199+0000:Applied patch into CXF trunk and 2.3.x branch.
If someone wants to try out the fix, please change cxf version in Camel trunk to 2.3.4-SNAPSHOT, and build the example with it.

Will resolve this issue when we upgrade the CXF version.
arnoud:1298534051:2011-02-24T15:54:11.594+0000:1298534051:2011-02-24T15:54:11.594+0000:I've tested the example against the CXF 2.3.4-SNAPSHOT. It works fine now for Tomcat 7 and Jetty 8. On GlassFish v3 however I get the following Exception:

{noformat}
[#|2011-02-24T16:44:47.451+0100|INFO|glassfish3.0.1|javax.enterprise.system.std.com.sun.enterprise.v3.services.impl|_ThreadID=30;_ThreadName=pool-36-thread-1;|2011-02-24 16:44:47,450 [ool-36-thread-1] WARN  PhaseInterceptorChain          - Interceptor for {http://incident.cxf.example.camel.apache.org/}IncidentService#{http://incident.cxf.example.camel.apache.org/}reportIncident has thrown exception, unwinding now
java.lang.IllegalStateException: The request has not been put into asynchronous mode, must call ServletRequest.startAsync first
        at org.apache.catalina.connector.Request.getAsyncContext(Request.java:3764)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.RequestFacade.getAsyncContext(RequestFacade.java:1105)[web-core.jar:3.0.1]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider$Servlet3Continuation.<init>(Servlet3ContinuationProvider.java:77)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.http.Servlet3ContinuationProvider.getContinuation(Servlet3ContinuationProvider.java:57)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.camel.component.cxf.CxfConsumer$1.getContinuation(CxfConsumer.java:126)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:67)[camel-cxf-2.6.0.jar:2.6.0]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:93)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:224)[cxf-api-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:70)[cxf-rt-core-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletDestination.invoke(ServletDestination.java:118)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:461)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:188)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:148)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:179)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:103)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:754)[javax.servlet.jar:]
        at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:159)[cxf-rt-transports-http-2.3.4-SNAPSHOT.jar:2.3.4-SNAPSHOT]
        at org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1523)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doInvoke(ApplicationDispatcher.java:822)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:517)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.doDispatch(ApplicationDispatcher.java:488)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:379)[web-core.jar:3.0.1]
        at org.apache.catalina.core.ApplicationDispatcher.dispatch(ApplicationDispatcher.java:336)[web-core.jar:3.0.1]
        at org.apache.catalina.connector.AsyncContextImpl$Handler.run(AsyncContextImpl.java:375)[web-core.jar:3.0.1]
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_18]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_18]
        at java.lang.Thread.run(Thread.java:619)[:1.6.0_18]
|#]
{noformat}
njiang:1298592536:2011-02-25T08:08:56.456+0000:1298592536:2011-02-25T08:08:56.456+0000:Hi Arnound,

Thanks for reporting this, I didn't try the GlassFish v3 when I fix the issue in CXF.
It looks like different Servlet3 implementation provides different status checking, 
I will commit a quick fix in CXF to work around the issue that you just found.

Cheers,

Willem

njiang:1298611799:2011-02-25T13:29:59.559+0000:1298611799:2011-02-25T13:29:59.559+0000:Hi Arnoud,

I just committed a quick fix into CXF 2.3.x and trunk branch after went through the Servlet3 JRS315 the async section.
Now you should access the camel-cxf-example war which is deployed to GlassFish 3.0.1 without any other issue.
Please keep me posted if you have other issue about the camel-example-cxf-tomcat.

Cheers,
Willem
arnoud:1298630706:2011-02-25T18:45:06.242+0000:1298630706:2011-02-25T18:45:06.242+0000:Hi Willem,

I have tested this fixed version of CXF and the example now works on GlassFish v3. Also Tomcat and Jetty still work with this fixed version. I suppose we can consider this issue as fixed?

Thanks for your time and effort!

Arnoud.
davsclaus:1298678928:2011-02-26T08:08:48.576+0000:1298678928:2011-02-26T08:08:48.576+0000:Thanks for testing. I think we should close this ticket when Camel upgrades and uses the CXF version which has the fix. 

Willem is there an ETA on a new CXF release having that fix? We want to ship out Camel 2.7 soon.
njiang:1298680406:2011-02-26T08:33:26.233+0000:1298680406:2011-02-26T08:33:26.233+0000:CXF 2.3.3 is already cut and voted, the servlet3 patch is not catch up this release.
I think we should add this issue as a known issue when we release Camel 2.7.0.

davsclaus:1298943792:2011-03-01T09:43:12.412+0000:1298943792:2011-03-01T09:43:12.412+0000:Added a note to known issues about the CXF bug, so the example doesn't work in Tomcat 7.
njiang:1298945056:2011-03-01T10:04:16.088+0000:1298945056:2011-03-01T10:04:16.088+0000:@Claus,
I think we should keep this issue open until we upgrade the CXF version to 2.3.4.
 
davsclaus:1298946212:2011-03-01T10:23:32.761+0000:1298946212:2011-03-01T10:23:32.761+0000:Will be fixed by CXF 2.3.4 upgrade in CAMEL-3734
njiang:1302562906:2011-04-12T07:01:46.849+0000:1302562906:2011-04-12T07:01:46.849+0000:Update the CXF version to 2.3.4-SNAPSHOT."
0,CAMEL-3701,Improvement,Major,2.6.0,2.7.0,"

patch

",Closed,Fixed,2.7.0,Claus Ibsen,Michael Shorter,0,0,2011-02-22 10:23:22+00:00,2011-10-25 11:36:04+00:00,"Updated camel-restlet to compile and run against Restlet version 2.1-M1.
Camel-restlet can now return more types than just a string.","mshorter:1298341466:2011-02-22T10:24:26.331+0000:1298341466:2011-02-22T10:24:26.331+0000:Patch file to camel-restlet to compile and run against Restlet 2.1-M1, and to return more types than just a string.
davsclaus:1298342469:2011-02-22T10:41:09.424+0000:1298342469:2011-02-22T10:41:09.424+0000:Thanks for the patch. However we will only update when restlet has a GA release of 2.1, we cannot use a milestone version.

So I am pushing this for 2.8 or later.
mshorter:1298346249:2011-02-22T11:44:09.393+0000:1298346249:2011-02-22T11:44:09.393+0000:Hi Claus,

I just ran the patch against Restlet 2.0.5, and the unit tests passed. I also tested it in our production system, and it works fine with 2.0.5.

Thanks,

Mike
davsclaus:1298349291:2011-02-22T12:34:51.385+0000:1298349291:2011-02-22T12:34:51.385+0000:Ah perfect so we can target this for 2.0.5 then.

Do you know if restlet 2.x is OSGi bundles?

If not we need to wrap our own at
http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.restlet/
mshorter:1298350096:2011-02-22T12:48:16.109+0000:1298350096:2011-02-22T12:48:16.109+0000:Yes, Restlet 2.x are OSGi bundles. This is how I am using it along with camel-restlet (2.6.0-fuse-00-00), running under karaf 2.1.4 ...
davsclaus:1298351763:2011-02-22T13:16:03.944+0000:1298351763:2011-02-22T13:16:03.944+0000:Okay lets target this for 2.7 since restlet 2.0.5 is OSGi out of the box.
davsclaus:1298425074:2011-02-23T09:37:54.737+0000:1298425074:2011-02-23T09:37:54.737+0000:trunk: 1073657.

Thanks for the patch."
0,CAMEL-3700,Improvement,Minor,2.6.0,2.7.0,"
None
",Closed,Won't Fix,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-22 09:39:24+00:00,2011-10-25 11:36:06+00:00,"The batch-config and stream-config uses fixed types such as xs:int, xs:boolean etc. so you cannot use property placeholders.
This is desireable so you can easily configure capacity, timeout etc.","davsclaus:1298342381:2011-02-22T10:39:41.092+0000:1298342381:2011-02-22T10:39:41.092+0000:Lets keep it as is, as the types helps end users to know its a boolen, int etc. and the other EIPs dont have this either."
0,CAMEL-3699,New Feature,Major,2.6.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Michael Shorter,1,1,2011-02-22 08:44:31+00:00,2011-04-03 08:49:33+00:00,JUnit components for Camel-Test redone for the latest version TestNG.,"davsclaus:1298509021:2011-02-24T08:57:01.018+0000:1298509021:2011-02-24T08:57:01.018+0000:Thank you. Would it be possible to include the same set of unit tests we have in camel-test for this one as well?

I would like to ensure the component works. eg we must have some unit tests for it.
All the tests in Camel uses JUnit.

mshorter:1299028017:2011-03-02T09:06:57.835+0000:1299028017:2011-03-02T09:06:57.835+0000:These are the TestNG unit tests for the component.
davsclaus:1299045965:2011-03-02T14:06:05.084+0000:1299045965:2011-03-02T14:06:05.084+0000:Thanks."
0,CAMEL-3698,Bug,Major,2.6.0,2.7.0,"
None
",Closed,Not A Problem,2.7.0,Willem Jiang,Martijn van Ginkel,0,0,2011-02-22 08:07:06+00:00,2011-10-25 11:36:21+00:00,"I have configured a route with a failover loadbalancer using camel 2.6.0 and cxf 2.3.2 as follows:



<camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" autoStartup=""true"">
<route>
    <from uri=""cxf:bean:entryEndpoint"" />
        <loadBalance>
           <failover>
              <exception>java.lang.Throwable</exception>
           </failover>
           <to uri=""cxf:bean:targetEndpoint1"" />
           <to uri=""cxf:bean:targetEndpoint2"" />
        </loadBalance>
</route>
</camelContext>



We have configured two soap services at a local Tomcat, targetEnpoint1 and 2. If 'targetEndpoint1' is stopped (resulting in a 404), I expect the message to fail over to 'targetEndpoint2'. When I switch of the service at 'targetEndpoint1', executing the route results in a IllegalStateException:



2011-02-21 16:45:24,430 [ERROR] Logger - Failed delivery for exchangeId: ID-MartijnvG-HP-19759-1298303117555-0-2. Exhausted after delivery attempt: 1 caught: java.lang.IllegalStateException: IllegalStateException invoking http://localhost:8080/echo2/echo: Already connected
java.lang.IllegalStateException: IllegalStateException invoking http://localhost:8080/echo2/echo: Already connected
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.mapException(HTTPConduit.java:2107)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:2097)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:56)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:697)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:255)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:454)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:94)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:70)
	at org.apache.camel.processor.loadbalancer.FailOverLoadBalancer.processExchange(FailOverLoadBalancer.java:226)
	at org.apache.camel.processor.loadbalancer.FailOverLoadBalancer.access$300(FailOverLoadBalancer.java:38)
	at org.apache.camel.processor.loadbalancer.FailOverLoadBalancer$FailOverAsyncCallback.done(FailOverLoadBalancer.java:286)
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:275)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:639)
	at org.apache.camel.processor.RedeliveryErrorHandler.processAsyncErrorHandler(RedeliveryErrorHandler.java:368)
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:317)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)
	at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:85)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:2203)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:253)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalStateException: Already connected
	at java.net.HttpURLConnection.setFixedLengthStreamingMode(Unknown Source)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.thresholdNotReached(HTTPConduit.java:1937)
	at org.apache.cxf.io.AbstractThresholdOutputStream.close(AbstractThresholdOutputStream.java:99)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:2029)
	... 38 more




The failover does not work. However when I change the loglevel of org.apache.camel.processor.interceptor.Tracer from WARN to INFO in my log4j.properties, the failover does work as expected. In both cases tracing is enabled.


I believe this is a bug since the behaviour of the failover changes if the log level is changed.


We were able to reproduce this behaviour on multiple systems. If you have any problems reproducing this behaviour we are happy to provide more information or an example project.","davsclaus:1298417201:2011-02-23T07:26:41.038+0000:1298417201:2011-02-23T07:26:41.038+0000:Can you try using ?synchronous=true on the CXF endpoints to see if it makes a difference?

What version of Tomcat and JDK are you using?
mvginkel:1298425612:2011-02-23T09:46:52.475+0000:1298425612:2011-02-23T09:46:52.475+0000:Using ?synchronous=true does not make a difference, results in the same error:
{noformat} IllegalStateException invoking http://localhost:8080/echo2/echo?synchronous=true: Already connected{noformat} 

I run camel by using camel-maven-plugin version 2.6.0. 
The services run on Tomcat 6.0.20 on windows xp.
The JDK version is 1.6.0_14.
njiang:1298441118:2011-02-23T14:05:18.674+0000:1298441118:2011-02-23T14:05:18.674+0000:Hi Martijn

Can you also past the configuration of cxf:bean:targetEndpoint1 and cxf:bean:entryEndpoint?
It will be helpful for us the trace the issue.

Willem
mvginkel:1298442153:2011-02-23T14:22:33.905+0000:1298442153:2011-02-23T14:22:33.905+0000:Sure, this is the configuration of entryEndpoint and targetEndpoint1:

{code:xml}
     <cxf:cxfEndpoint
       id=""entryEndpoint""
       serviceName=""echo:EchoService""
       endpointName=""echo:EchoServiceImplPort""
       xmlns:echo=""http://www.telecats.nl/nl.telecats.foundation.echo-service""
       address=""http://localhost:8081/echo-server/echo""
       wsdlURL=""http://localhost:8080/echo1/echo?wsdl"">
      <cxf:properties>
        <beans:entry key=""dataFormat"" value=""MESSAGE""/>
        <beans:entry key=""synchronous"" value=""true""/>
      </cxf:properties>
     </cxf:cxfEndpoint>
  

    <cxf:cxfEndpoint
       id=""targetEndpoint1""
       serviceName=""echo:EchoService""
       endpointName=""echo:EchoServiceImplPort""
       xmlns:echo=""http://www.telecats.nl/nl.telecats.foundation.echo-service""
       address=""http://localhost:8080/echo1/echo""
       wsdlURL=""http://localhost:8080/echo1/echo?wsdl"">         
      <cxf:properties>
        <beans:entry key=""dataFormat"" value=""MESSAGE""/>
        <beans:entry key=""synchronous"" value=""true""/>
      </cxf:properties>
     </cxf:cxfEndpoint>{code}
njiang:1298863733:2011-02-28T11:28:53.578+0000:1298863733:2011-02-28T11:28:53.578+0000:Hi Martijn,

After spending some time to dig the code of CXF HttpConduit and Camel Tracer, I just found your rout has an issue of [StreamCache|http://camel.apache.org/stream-caching.html].
That explains why you set the log level to INFO the route work as expect. 
Because Camel Trace will log the Exchange when the log level set to INFO, and when it log the Exchange, it will try to turn the in message body into a StreamCache object. In this way we could reuse the stream in different endpoint.
For your case, your route will send the exchange to another endpoint, so the message body should be cacheable. 
{code}
<camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" trace=""true"" autoStartup=""true"">
<route streamCache=""true"">
    <from uri=""cxf:bean:entryEndpoint"" />
        <loadBalance>
           <failover>
              <exception>java.lang.Throwable</exception>
           </failover>
           <to uri=""cxf:bean:targetEndpoint1"" />
           <to uri=""cxf:bean:targetEndpoint2"" />
        </loadBalance>
</route>
</camelContext>
{code}
 
Willem

mvginkel:1298936133:2011-03-01T07:35:33.552+0000:1298936133:2011-03-01T07:35:33.552+0000:Thanks, your solution makes sense and works perfectly. Why is stream caching not automatically activated for routes containing a failover loadbalancer? It seems to me that without stream-caching, the failover can not work at all.
davsclaus:1298939646:2011-03-01T08:34:06.676+0000:1298939646:2011-03-01T08:34:06.676+0000:If you use streams you have to enable the stream cache if needed, such as when using error handling with redelivery, or failover.

davsclaus:1298939784:2011-03-01T08:36:24.992+0000:1298939784:2011-03-01T08:36:24.992+0000:I have added a note on the load balancer wiki page about that you should enable stream caching if using streams."
0,CAMEL-3697,Improvement,Minor,2.6.0,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,2,5,2011-02-22 05:51:27+00:00,2019-07-28 08:39:23+00:00,"See 
http://stackoverflow.com/questions/5067634/xpath-from-string


In the ExpressionClause the xpath builder is only accepting a String as they XPath text. We should provide a method which accepts a Camel Expression as well.


So you can do



  .when().xpath(simple(""/foo:${header.variable}"")).to(""mock:y"")","davsclaus:1298777115:2011-02-27T11:25:15.129+0000:1298777115:2011-02-27T11:25:15.129+0000:Ah we got that already as you can use {{function}} in the xpath expression:
{code}
.when().xpath(""/foo:function:header('variable')"").to(""mock:y"")
{code}
davsclaus:1298794234:2011-02-27T16:10:34.604+0000:1298794234:2011-02-27T16:10:34.604+0000:Okay it requires a bit work to support additional expressions in the existing languages. But I got this prototype up and running in Java DSL
{code}
                from(""direct:start"").
                        filter().xpath(simple(""/person[@name='${header.name}']"")).
                        to(""mock:result"");
{code}

Notice how we use the simple language to construct the xpath expressions string. For that you can use any of the languages, for example Groovy, etc.
davsclaus:1298853221:2011-02-28T08:33:41.408+0000:1298853221:2011-02-28T08:33:41.408+0000:Work in progress
davsclaus:1339125634:2012-06-08T11:20:34.114+0000:1339125634:2012-06-08T11:20:34.114+0000:This is an API change in the DSL, so lets wait for Camel 3.0.
bharadwaj:1419221156:2014-12-22T12:05:56.843+0000:1419221214:2014-12-22T12:06:54.889+0000:						<camel:setProperty propertyName=""TestID"">
							<camel:xpath>in:header('Prop_req')/@ID</camel:xpath>
						</camel:setProperty>
"
0,CAMEL-3696,Improvement,Major,None,None,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,James Strachan,0,0,2011-02-21 17:00:45+00:00,2011-10-25 11:36:10+00:00,"An expression language is usually fairly powerful & can be used to create a collection of expressions. (e.g. in XPath: /foo + /bar). We use expressions extensively throughout Camel and all expressions may need to be a 'composite' of different expressions which really is just a single Expression object.


If folks find there are times when an Expression cannot be easily created from a composite within a language (e.g. a language that doesn't support +) then we could always have a composite language which is a collection of expression objects - which itself is an Expression, so that we then have consistency across the model.


To say this another way; if one pattern takes a List<ExpressionDefinition> then why don't they all? We might want to Resequence or Aggregate using a composite expression etc.


So a simpler solution is just to say that an Expression is exactly that - an arbitrary expression (which may be implemented using a concatenation of multiple expressions) but then from the EIP model and DSL, its simply a single Expression instance so its then easy to keep all the DSLs in sync and the model consistent.


In the specific case of the Resequence, the expression is simply used to create a value which can then be used to sort messages; so its an expression returning a single object; which sounds like a single Expression to me.","davsclaus:1298339865:2011-02-22T09:57:45.056+0000:1298339865:2011-02-22T09:57:45.056+0000:trunk: 1073278.
mkolev:1298359578:2011-02-22T15:26:18.075+0000:1298359578:2011-02-22T15:26:18.075+0000:Hi Claus, I think that the changes you made break one of the filter examples in the documentation:

from(""direct:start"").
        filter().xpath(""/person[@name='James']"").
        to(""mock:result"");

It seems that the scope after xpath() is lost. It should also break using resequence() with ClassCastException

Please excuse me if i am wrong. 
Regards, 
Mitko
davsclaus:1298359766:2011-02-22T15:29:26.959+0000:1298359766:2011-02-22T15:29:26.959+0000:At which page?
mkolev:1298359962:2011-02-22T15:32:42.878+0000:1298359962:2011-02-22T15:32:42.878+0000:The page is
http://camel.apache.org/message-filter.html

I copy pasted the part that i think will break above:

from(""direct:start"").
filter().xpath(""/person[@name='James']"").
to(""mock:result"");


davsclaus:1298364514:2011-02-22T16:48:34.020+0000:1298364514:2011-02-22T16:48:34.020+0000:The Filter works fine. The example is from XPathFilterTest which passes unit test in camel-core."
0,CAMEL-3695,Task,Minor,2.6.0,2.7.0,"
None
",Closed,Fixed,2.7.0,Claus Ibsen,Claus Ibsen,0,0,2011-02-21 15:03:37+00:00,2011-10-25 11:35:31+00:00,"CXF 2.3+ is required for Camel 2.7 onward, so the logic in CxfConsumer should not check for version.",davsclaus:1298277633:2011-02-21T16:40:33.409+0000:1298277633:2011-02-21T16:40:33.409+0000:trunk: 1073057.
