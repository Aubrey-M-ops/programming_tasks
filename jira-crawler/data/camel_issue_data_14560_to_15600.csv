,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-5755,Improvement,Major,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Akitoshi Yoshida,0,2,2012-10-29 09:23:05+00:00,2012-11-01 03:08:49+00:00,"CXF provides an option using runtime property exceptionMessageCauseEnabled to include the exception cause at the service invocation in the fault text [1]. But this option is not working for Camel endpoints.


For this setting to work, the message's fault mode must be set by the service invoker. In Camel endpoints, this mode is not set when a fault is thrown. Consequently, the above option is not taken into account.


To support this option for Camel CXF endpoints, this fault mode setting code can be placed in CxfConsumer.


I am attaching a suggested change for trunk and a test case.


I logged this as a minor bug, assuming this option was supposed to work but please feel free to change the issue type to improvement if you find it more suitable.


1. 
http://cxf.apache.org/docs/debugging-and-logging.html#DebuggingandLogging-Showingthecauseexceptionmessage","ay:1351473856:2012-10-29T09:24:16.790+0000:1351473856:2012-10-29T09:24:16.790+0000:trunk diff on camel-cxf
njiang:1351710529:2012-11-01T03:08:49.335+0000:1351710529:2012-11-01T03:08:49.335+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branches with thanks to Aki."
0,CAMEL-5754,Bug,Minor,2.10.2,,"
None
",Resolved,Not A Problem,None,Willem Jiang,liugang,0,2,2012-10-29 04:53:21+00:00,2012-10-29 05:29:18+00:00,"When declare a default error handle, the useOriginalMessage is configurable:



errorHandler(defaultErrorHandler().useOriginalMessage())




but is never be used, when creating DefaultErrorHandler, the passed parameter always false:



    public DefaultErrorHandler(CamelContext camelContext, Processor output, CamelLogger logger, Processor redeliveryProcessor,
            RedeliveryPolicy redeliveryPolicy, ExceptionPolicyStrategy exceptionPolicyStrategy, Predicate retryWhile, ScheduledExecutorService executorService) {

        super(camelContext, output, logger, redeliveryProcessor, redeliveryPolicy, null, null, false, retryWhile, executorService);
        setExceptionPolicy(exceptionPolicyStrategy);
    }




but it works when using Dead letter queue.","njiang:1351458768:2012-10-29T05:12:48.013+0000:1351458768:2012-10-29T05:12:48.013+0000:It's not a bug, as the defaultErrorHandler will not use the original message by default, and it provides a way to let you set the option by using the DSL.
For the DeadLetterChannel, it needs to use the original message for store or processing.

Please drop an email to the user at camel.apache.org if you are not sure about the usage of API, so we can make things clear before filling a JIRA.
gangliu:1351459758:2012-10-29T05:29:18.710+0000:1351459758:2012-10-29T05:29:18.710+0000:Thanks. Yes, I understand it's may not a problem (even user can get the original message, I don't know how to use it in default error handler case). my problem is the API may make the user misleading."
0,CAMEL-5753,Task,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Christian Müller,0,2,2012-10-27 22:02:56+00:00,2013-03-20 09:24:01+00:00,This test fails since more than four weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.windows/,davsclaus:1363742641:2013-03-20T09:24:01.713+0000:1363742641:2013-03-20T09:24:01.713+0000:I fixed all the Windows problems.
0,CAMEL-5752,Task,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Unassigned,Christian Müller,0,1,2012-10-27 22:01:09+00:00,2013-01-18 15:52:22+00:00,This test fails since three weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.spring3.1/,
0,CAMEL-5751,Task,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Christian Müller,0,3,2012-10-27 21:59:44+00:00,2012-11-21 10:08:29+00:00,This test fails since three weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.java7/,"davsclaus:1351668677:2012-10-31T15:31:17.759+0000:1351668677:2012-10-31T15:31:17.759+0000:Seems like camel-quickfix has some JMX issue with Java7
https://builds.apache.org/job/Camel.trunk.fulltest.java7/org.apache.camel$camel-quickfix/344/testReport/
bvahdat:1351672016:2012-10-31T16:26:56.867+0000:1351672016:2012-10-31T16:26:56.867+0000:The behaviour of {{QuickfixjEngineTest}} by camel-quickfix on JDK 7 is undeterministic, e.g. looking at the builds #330...#338 which all passed green _without_ any change by the code base since October 19th:

https://builds.apache.org/job/Camel.trunk.fulltest.java7/org.apache.camel$camel-quickfix/

And suddenly the last two test runs failed again (#343...#344)!

I played pretty long on this issue and even after resolving CAMEL-5686 this random behaviour is still there. Just wonder if we should really skip these tests on JDK 7. More details also @dev forum:
http://camel.465427.n5.nabble.com/Getting-closer-with-Java7-tp5692627p5720709.html

muellerc:1351672449:2012-10-31T16:34:09.022+0000:1351672449:2012-10-31T16:34:09.022+0000:+1 for skipping the tests on Java 7 for camel-quickfix
davsclaus:1351672792:2012-10-31T16:39:52.607+0000:1351672792:2012-10-31T16:39:52.607+0000:+1 for skipping on java7.
bvahdat:1351682246:2012-10-31T19:17:26.836+0000:1351682246:2012-10-31T19:17:26.836+0000:O.K. for sake of not loosing the whole code coverage by these tests, now *only the single assert* failing from time to time has been disabled on JDK 7:

http://svn.apache.org/viewvc/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjEngineTest.java?r1=1404303&r2=1404302&pathrev=1404303

muellerc:1351683308:2012-10-31T19:35:08.290+0000:1351683308:2012-10-31T19:35:08.290+0000:Thanks Babak. Do you consider to report this issue to the quickfix guys?
bvahdat:1351684121:2012-10-31T19:48:41.158+0000:1351684121:2012-10-31T19:48:41.158+0000:Yes of course.
bvahdat:1352076582:2012-11-05T08:49:42.617+0000:1352076582:2012-11-05T08:49:42.617+0000:Raised http://www.quickfixj.org/jira/browse/QFJ-713
davsclaus:1352079436:2012-11-05T09:37:16.242+0000:1352079436:2012-11-05T09:37:16.242+0000:The last test was a success so we are on the right track now.
muellerc:1352087884:2012-11-05T11:58:04.408+0000:1352087884:2012-11-05T11:58:04.408+0000:I love it!
bvahdat:1352118251:2012-11-05T20:24:11.511+0000:1352118251:2012-11-05T20:24:11.511+0000:Christoph John, one of the QuickFixJ committer gave a [good hint|http://www.quickfixj.org/jira/browse/QFJ-713?focusedCommentId=11860&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-11860], so that IMHO it's worth to give it a last try to see if this would resolve the problem. I'll watch the build for one week to see if this would to the trick:

http://svn.apache.org/viewvc?view=revision&revision=1405932

So please be a bit patient with this ticket. Thanks!


bvahdat:1352154794:2012-11-06T06:33:14.698+0000:1352154794:2012-11-06T06:33:14.698+0000:Backported this fix to the 2.10.x branch as well (because of the JDK 7 support since 2.10.0).
bvahdat:1352606438:2012-11-11T12:00:38.297+0000:1352606438:2012-11-11T12:00:38.297+0000:There has been no single test failure on the CI-Server since the fix, following the last run from yesterday:

https://builds.apache.org/job/Camel.trunk.fulltest.java7/356/org.apache.camel$camel-quickfix/testReport/org.apache.camel.component.quickfixj/QuickfixjEngineTest/

Still keeping my fingers crossed :-)

bvahdat:1353319833:2012-11-19T18:10:33.823+0000:1353319833:2012-11-19T18:10:33.823+0000:I asked Christoph John to close QFJ-713 as the problem really seems to be resolved:

http://www.quickfixj.org/jira/browse/QFJ-713

In the next days I'll still keep an eye on the the JDK 7 profile about this. 

bvahdat:1353463709:2012-11-21T10:08:29.328+0000:1353463709:2012-11-21T10:08:29.328+0000:The latest build was a success (mostly because of Claus hard work on differnet module tests in the last weeks):

https://builds.apache.org/job/Camel.trunk.fulltest.java7/372/

And the problem with QuickfixjEngineTest camel-quickfix on JDK 7 seems definitely to be resolved (with thanks to Christoph John for the hint).

These all said, there're still some tests failing _randomly_ from time to time so that we should still keep an eye on all the profiles to spot and fix them, like the ones I fixed recently by camel-cxf:

http://svn.apache.org/viewvc?view=revision&revision=1411217
"
0,CAMEL-5750,Task,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Unassigned,Christian Müller,0,2,2012-10-27 21:57:57+00:00,2013-01-18 15:52:34+00:00,The build fails since three weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest/,"davsclaus:1351648523:2012-10-31T09:55:23.710+0000:1351648523:2012-10-31T09:55:23.710+0000:I fixed a bunch of stuff today.
muellerc:1351651751:2012-10-31T10:49:11.243+0000:1351651751:2012-10-31T10:49:11.243+0000:Many thanks!

Sent from a mobile device


davsclaus:1356169635:2012-12-22T17:47:15.014+0000:1356169635:2012-12-22T17:47:15.014+0000:After the groovy dsl change we have this failure

Running org.apache.camel.itest.jetty.JettyGroovySetHeaderTest
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.115 sec <<< FAILURE!
davsclaus:1356182997:2012-12-22T21:29:57.423+0000:1356182997:2012-12-22T21:29:57.423+0000:Okay got this fixed by using groovy-all, as it resolves weird class loading issues."
0,CAMEL-5749,Task,Major,2.10.2,"2.10.3, 2.11.0","
None
",Closed,Fixed,"2.10.3, 2.11.0",Christian Müller,Christian Müller,0,1,2012-10-27 21:56:31+00:00,2012-10-29 06:46:37+00:00,The build fails since one week: https://builds.apache.org/view/A-F/view/Camel/job/Camel.2.10.x.fulltest/,"muellerc:1351464372:2012-10-29T06:46:12.795+0000:1351464372:2012-10-29T06:46:12.795+0000:The build is back to stable: https://builds.apache.org/view/A-F/view/Camel/job/Camel.2.10.x.fulltest/82/
However, the unit test org.apache.camel.component.jms.JmsSimpleRequestLateReplyTest.testRequestLateReplyUsingCustomDestinationHeaderForReply fails from time to time. I enabled the console logging to get more information if it fails again. I will disable it in one or two weeks if we do not see this failure again."
0,CAMEL-5748,Bug,Major,2.10.2,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,2,2012-10-27 18:03:38+00:00,2013-01-21 12:44:48+00:00,"The Direct VM component allows routes in different Camel Contexts to communicate with each other with all the benefits of the Direct endpoint (namely thread-sharing, thus enabling transaction to propagate across Camel Contexts).


However, the TCCL of the consumer route still remains the TCCL of the producer route. See CAMEL-5722 for a similar case.


I suggest fixing this by introducing a proxy processor at the consumer that sets the appropriate classloader, and sets it back when done. Note: remember to take into account exception scenarios, i.e. we should catch exceptions from the forward call to .process(), reset the classloader and rethrow the exception.","davsclaus:1351476080:2012-10-29T10:01:20.718+0000:1351476080:2012-10-29T10:01:20.718+0000:I wonder if there is anywhere in OSGi spec that says that the TCCL must be the classloader from the current bundle? 

When you use OSGi service registry and invoke services across bundles, what is the TCCL then?
davsclaus:1351476837:2012-10-29T10:13:57.928+0000:1351476837:2012-10-29T10:13:57.928+0000:I assume camel-quartz may have this issue as well as the quartz scheduler is shared in osgi land.
raulvk:1351481240:2012-10-29T11:27:20.154+0000:1351481240:2012-10-29T11:27:20.154+0000:That's a good point. Just searching on Google for ""thread context classloader osgi"" shows that Camel is not the only project in pain due to possible under-specification from OSGi... http://apache-felix.18485.n6.nabble.com/Can-the-thread-context-classloader-issue-be-solved-at-all-td4835872.html#a30704352
davsclaus:1358742097:2013-01-21T12:21:37.408+0000:1358742097:2013-01-21T12:21:37.408+0000:I think this makes sense to implement in direct-vm as its intended for cross application in same JVM. So the direct VM consumer code should have logic to set/revert the TCCL.

davsclaus:1358743488:2013-01-21T12:44:48.230+0000:1358743488:2013-01-21T12:44:48.230+0000:I implemented the suggestion from Raul."
0,CAMEL-5747,Bug,Minor,2.10.2,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Daniel Gredler,0,1,2012-10-26 23:28:13+00:00,2012-10-30 14:59:56+00:00,"The properties component optionally (and by default) caches the property values that it resolves. However, the component does not clear the cache on stop, so the properties values are never refreshed after a cold restart of Camel (stop() + start()).",
0,CAMEL-5746,Bug,Minor,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,liugang,0,2,2012-10-26 09:14:23+00:00,2012-10-26 14:01:02+00:00,"I found the wiretap will always copy the original exchange message after deprecated those methods like wireTap(String uri, boolean copy, Expression body) and wireTap(String uri, boolean copy, Processor processor) .


Checked the source code of org.apache.camel.model.WireTapDefinition<Type>, the isCopy() and copy() method are:



    public WireTapDefinition<Type> copy() {
        setCopy(true);
        return this;
    }

    public boolean isCopy() {
        // should default to true if not configured
        return copy != null ? copy : true;
    }




So, no matter, we use '.wireTap(""XX"")' or '.wireTap(""XX"").copy()' , it will always copy the original exchange message.","njiang:1351226412:2012-10-26T12:40:12.614+0000:1351226412:2012-10-26T12:40:12.614+0000:We could add a fluent to set if camel copy the origin Message.
njiang:1351231262:2012-10-26T14:01:02.681+0000:1351231262:2012-10-26T14:01:02.681+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5745,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,2,2012-10-26 07:32:21+00:00,2012-11-07 08:04:34+00:00,Aries Blueprint 1.0 dont work with POJOsr and camel-test-blueprint. This is needed for allowing our end users to do easy unit tests with the blueprint Camel apps.,"davsclaus:1351209834:2012-10-26T08:03:54.316+0000:1351209834:2012-10-26T08:03:54.316+0000:Logged a ticket with POJOsr. As just by upgrading Aries from 0.3 to 1.0.0 causes this problem.
https://code.google.com/p/pojosr/issues/detail?id=6

Aries 0.3 works with OSGi 4.3, and upgraded Felix ConfigAdmin / PaxExam-TinyBundle et all.
I have tried many combinations. But its only when using Aries 1.0.0 it wont work.
bvahdat:1351304860:2012-10-27T10:27:40.089+0000:1351304860:2012-10-27T10:27:40.089+0000:I fixed the broken build on the trunk after the upgrade to OSGi 4.3.0.
bvahdat:1351305020:2012-10-27T10:30:20.526+0000:1351305020:2012-10-27T10:30:20.526+0000:Just for the sake of house-keeping: the svn revision for the ticket was:

http://svn.apache.org/viewvc?view=revision&revision=1402441

As CAMEL-5746 is another ticket.
davsclaus:1352079658:2012-11-05T09:40:58.386+0000:1352079658:2012-11-05T09:40:58.386+0000:Upgraded to pojosr 0.2.0 that supports osgi 4.3 and aries blueprint 1.0"
0,CAMEL-5744,Improvement,Major,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Akitoshi Yoshida,0,2,2012-10-25 22:06:42+00:00,2013-05-02 02:29:57+00:00,"I noticed the Blueprint equivalent of CAMEL-4351 is not there yet in trunk, which handles the placeholder usage for QName typed CXF endpoint attributes.


Since this is a very small but useful change, I would like to have it also integrated into 2.10.x.


Could you look at it?


Thank you.
Aki","ay:1351210607:2012-10-26T08:16:47.741+0000:1351210607:2012-10-26T08:16:47.741+0000:I forgot to mention that you will needed to disable schema validation of BP so that this placeholder string is not rejected by the BP's xsd schema validation phase.

that means, you will need to add the following parameter to the bundle symbolic name
blueprint.aries.xml-validation:=false

njiang:1351815533:2012-11-02T08:18:53.188+0000:1351815533:2012-11-02T08:18:53.188+0000:Hi Aki,

Do you mind to create another patch for it?
I think we need also add an OSGi test for it.

ay:1351819337:2012-11-02T09:22:17.771+0000:1351819337:2012-11-02T09:22:17.771+0000:Hi Willem,
okay, no problem. I'll add one.
regards, aki
ay:1352440326:2012-11-09T13:52:06.305+0000:1352440326:2012-11-09T13:52:06.305+0000:Hi Willem,
to write a test case using camel-test-blueprint, I need to add an option in CamelBlueprintTestSupport to customize the bundle directives of the generated test bundle. This option may have other usages than the intended usage that I have here for this ticket.

so, I will create a new ticket to describe this option and will refer to it from here.
Regards, Aki
ay:1352861564:2012-11-14T10:52:44.370+0000:1352861564:2012-11-14T10:52:44.370+0000:Hi Willem,
I added a test case CxfEndpointBeansTest with CAMEL-5791 which adds a test-only component for camel-cxf blueprint tests using camel-test-blueprint.

regards, aki
njiang:1353976024:2012-11-27T08:27:04.508+0000:1353976024:2012-11-27T08:27:04.508+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5743,New Feature,Major,None,,"
None
",Resolved,Won't Fix,None,Scott England-Sullivan,Scott England-Sullivan,1,3,2012-10-25 14:55:03+00:00,2015-07-11 13:33:28+00:00,"Add support for the Eclipse Gemini Blueprint project in Camel.


Email trail for context: 
http://camel.465427.n5.nabble.com/Dependencies-of-camel-spring-td5720774.html


Discussion & Proposed Options:
http://camel.465427.n5.nabble.com/DISCUSION-Adding-Support-For-Gemini-Blueprint-td5722164.html","graben:1351215454:2012-10-26T09:37:34.671+0000:1351215454:2012-10-26T09:37:34.671+0000:Working new camel-gemini-blueprint component
graben:1351215551:2012-10-26T09:39:11.267+0000:1351215551:2012-10-26T09:39:11.267+0000:Gemini component is only working for me when removing osgi support from camel-spring since bundle activator always get activated and is needing spring-osgi which fails together with gemini-blueprint.
sully6768:1351250610:2012-10-26T19:23:30.556+0000:1351250610:2012-10-26T19:23:30.556+0000:Hi Benjamin,

Thanks for uploading the code.  Couple of questions:

What maven repository are you using to resolve 

{code}
<dependency>
    <groupId>org.eclipse.gemini.blueprint</groupId>
    <artifactId>gemini-blueprint-core</artifactId>
    <version>1.0.2.RELEASE</version>
    <!-- snip -->
</dependency>
{code}

I found the Spring packaged one on the Spring EBR but not the one you have in your pom.

Also, do you have any examples or unit tests that go with this code?  We need a way to verify the code base.

Thanks again,
Scott ES

graben:1351252605:2012-10-26T19:56:45.167+0000:1351252605:2012-10-26T19:56:45.167+0000:Well, unfortunately eclipse does not upload gemini-blueprint to maven central yet. So I used the parameters from the project pom to upload to my private repo. But version 1.0.2 seems to be removed at the moment. I don't know why?

Verification of the code base is quite easy. It's nearly 100% original camel-spring code. Two changed imports only. I think there exists only a few itests in camel itself but none on the component.

Benjamin"
0,CAMEL-5742,Improvement,Minor,2.11.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,1,2,2012-10-25 12:23:14+00:00,2015-11-20 18:08:10+00:00,"It should only be for referring to an existing CamelContext. If you make a typo then otherwise it just creates a new CamelContext.


Instead there should be some other means in CDI to setup a CamelContext.","davsclaus:1403130094:2014-06-19T06:21:34.247+0000:1403130094:2014-06-19T06:21:34.247+0000:I think its still a problem, see
https://github.com/fabric8io/fabric8/issues/1798
davsclaus:1443410760:2015-09-28T11:26:00.155+0000:1443410760:2015-09-28T11:26:00.155+0000:This works now"
0,CAMEL-5741,Bug,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-10-24 13:32:48+00:00,2012-10-30 14:55:26+00:00,"The camel-itest-cdi fails. So I took a look, and notice that duplicate beans is added to CamelContextConfig from camel-cdi.


So I made a patch to fix that, and the test got a bit further.


I am attaching the patch here then the ppl working on the new camel-cdi module can take a look.",davsclaus:1351580126:2012-10-30T14:55:26.865+0000:1351580126:2012-10-30T14:55:26.865+0000:Applied the patch.
0,CAMEL-5740,Task,Minor,"2.9.4, 2.10.2",2.11.0,"
None
",Closed,Fixed,2.11.0,Christian Müller,Christian Müller,0,2,2012-10-23 19:10:53+00:00,2012-10-27 16:13:48+00:00,"As Karaf upgraded to slf4j 1.7.0 for Karaf 2.3.1, we may should also consider upgrading to this version. See KARAF-1801","davsclaus:1351139059:2012-10-25T12:24:19.770+0000:1351139059:2012-10-25T12:24:19.770+0000:Remember to have the version range start from 1.6 so we can still support the 1.6 users.

And accordingly to slf4j, then the 1.6 -> 1.7 is fully binary compatible. And not like the 1.5 - 1.6 that was a big problem.
muellerc:1351325587:2012-10-27T16:13:07.626+0000:1351325587:2012-10-27T16:13:07.626+0000:Thanks for this hint Claus.

I checked my change and all bundles are using the right version range:
{noformat}
camel$ grep -r ""slf4j;version=\""\[1.7"" .
{noformat}

By working on this issue, I figured out an odd thing. After I added the OSGI import declaration ""org.eclipse.jetty.util.ssl;version=""[7.6,8.2)"";resolution:=optional"" to the Camel parent ""camel.osgi.import.defaults"" property a few weeks ago, this import was added into each Camel bundle (I guess because it's optional). I think it's better to move this into the two Camel components which are effected by this (camel-comedt and camel-websocket).
After this change, it's only imported by the bundles where it's needed:
{noformat}
camel$ grep -r ""jetty.util.ssl;version"" .
./components/camel-cometd/pom.xml:      org.eclipse.jetty.util.ssl;version=""[7.6,8.2)"";resolution:=optional,
./components/camel-websocket/pom.xml:   org.eclipse.jetty.util.ssl;version=""[7.6,8.2)"";resolution:=optional,
{noformat}

I also run the 
{noformat}
mvn clean install -Pvalidate
{noformat}
in platforms/karaf/features to make sure the imports could be resolved (there is an issue in the camel-elasticsearch component which is not related to this change. If I remember right, Babak spotted this issue a few days ago.)."
0,CAMEL-5739,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-10-23 15:04:55+00:00,2012-10-24 12:51:50+00:00,"When using explicit id's in the routes using Java DSL. Then we should ensure those id's is unique as this is required by management etc.


In XML DSL the id's is unique as the xml parser will validate that.","davsclaus:1351054310:2012-10-24T12:51:50.542+0000:1351054310:2012-10-24T12:51:50.542+0000:Now Camel validates on starting routes, that any custom assigned id's in the route models is unique, which is a requirement. Any nodes with no assigned ids will use auto generated ids, and thus no duplicate issues there."
0,CAMEL-5738,Bug,Major,2.10.1,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Nikolaos Dimos,0,2,2012-10-23 12:53:19+00:00,2012-10-24 08:10:34+00:00,"The creation of HttpEndpoint is done with the default HttpConnectionManager. As a consequence, the http configuration concerning max connections, soTimeouts, etc is overridden by the default params. Attached you can find a unit test using camel-test-blueprint that identifies the issue. The problem is not replicated using spring-dm.","nikosd23:1350968081:2012-10-23T12:54:41.425+0000:1350968081:2012-10-23T12:54:41.425+0000:Added a unit test that identifies the issue reported.
njiang:1351030796:2012-10-24T06:19:56.629+0000:1351030796:2012-10-24T06:19:56.629+0000:@Nickolaos
I just run the test in the camel-2.10.x and trunk, I cannot reproduce the error.
Not sure if it is fixed in camel-2.10.2, can you double check it?

nikosd23:1351035453:2012-10-24T07:37:33.899+0000:1351035453:2012-10-24T07:37:33.899+0000:Hi Willem,
Just run the test using 2.10.2 tag. Same behavior, unit test fails.
Nevertheless, using trunk 2.11.SNAPSHOT the problem is not reproduced.
njiang:1351037320:2012-10-24T08:08:40.856+0000:1351037320:2012-10-24T08:08:40.856+0000:Hi Nikolaos,

I checked the change log and verified Calus already fix this issue in CAMEL-5712.
I will closed this as the test is already fixed.

Willem"
0,CAMEL-5737,Bug,Major,None,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-23 11:38:59+00:00,2012-10-23 12:24:24+00:00,"There is a flaw when using from ftp -> to file. And using the localWorkDirectory option. 


See nabble
http://camel.465427.n5.nabble.com/camel-ftp-option-localWorkDirectory-doesn-t-work-properly-on-windows-tp5721438.html",
0,CAMEL-5736,Improvement,Minor,None,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-23 08:30:08+00:00,2012-10-23 09:22:15+00:00,"When using ++ or – unary operators. We should only apply this if the previous node is a function, eg such as



${header.counter}++




Where as if you use ++ or – for text then its just literal



++++ bla bla ++++",
0,CAMEL-5735,Bug,Trivial,2.10.2,"2.9.5, 2.10.3, 2.11.0","

patch

",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Robin Howlett,0,2,2012-10-22 21:46:50+00:00,2012-10-23 07:45:56+00:00,"The toString() method in SnsConfiguration uses the incorrect string ""amazonSQSClient"" as the key for the AmazonSNSClient reference in the registry.","rhowlett:1350913654:2012-10-22T21:47:34.796+0000:1350913654:2012-10-22T21:47:34.796+0000:Fixes the SnsConfiguration toString() method to use ""amazonSNSClient"" rather than ""amazonSQSClient"".
njiang:1350949221:2012-10-23T07:40:21.695+0000:1350949221:2012-10-23T07:40:21.695+0000:Committed the patch into trunk, 2.10.x and 2.9.x with thanks to Robin."
0,CAMEL-5734,New Feature,Minor,2.10.1,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Daniel Gredler,0,2,2012-10-22 18:56:58+00:00,2012-10-23 07:49:11+00:00,"Camel supports both warm and cold restarts for a couple of years now (see CAMEL-3012). However, cold restart is not possible via JMX because calling stop() shuts down the JMX service, and it becomes impossible to call start().


I propose to add support for cold restarts via JMX by adding a restart() method to ManagedCamelContextMBean and ManagedCamelContext, which internally just calls stop() and then start().


I'm attaching a patch with the proposed implementation and a test case.",njiang:1350949751:2012-10-23T07:49:11.311+0000:1350949751:2012-10-23T07:49:11.311+0000:Applied the patch into trunk with thanks to Daniel.
0,CAMEL-5733,Bug,Major,2.10.2,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Johann Vanackere,0,2,2012-10-22 17:15:46+00:00,2012-10-23 07:42:14+00:00,"A NullPointerException occurs in SpringBatchProducer line 60 when a header with a null value exists.


Null headers should just be ignored or perhaps be added in jobParameters with a null value. I don't known what is the best strategy.","vanackej:1350897524:2012-10-22T17:18:44.597+0000:1350897524:2012-10-22T17:18:44.597+0000:By the way : camel-spring-batch component does not exists in JIRA, you should add it.
njiang:1350949334:2012-10-23T07:42:14.156+0000:1350949334:2012-10-23T07:42:14.156+0000:Applied patch with an unit test into trunk and 2.10.x branches with thanks to Johann."
0,CAMEL-5732,Bug,Major,None,"2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Christian Müller,Francois Kritzinger,0,2,2012-10-22 14:22:59+00:00,2012-10-23 21:01:36+00:00,"SmppUtils.parseAlphabetFromDataCoding()) doesn't identify an input of 0x02 as 8-bit, but the SMPP spec (3.4 and 5.0) clearly states that 0x02 is octet-unspecified (8-bit).


The bug is actually in jsmpp, but the attached patch contains a workaround.


This seems like a pretty blatant mistake to make, so perhaps there is good explanation that I am not aware of?","muellerc:1350996233:2012-10-23T20:43:53.830+0000:1350996233:2012-10-23T20:43:53.830+0000:See chapter 5.2.19 data_coding in http://docs.nimta.com/SMPP_v3_4_Issue1_2.pdf
muellerc:1350996760:2012-10-23T20:52:40.233+0000:1350996760:2012-10-23T20:52:40.233+0000:fixed some checkstyle issues which are raised by running
{code}
mvn clean install -Psourcecheck
{code}

This is documented here: http://camel.apache.org/building.html.
muellerc:1350997296:2012-10-23T21:01:36.160+0000:1350997296:2012-10-23T21:01:36.160+0000:Thank you Francois for the patch! Feel free to test the SNAPSHOT versions."
0,CAMEL-5731,Bug,Minor,None,"2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Christian Müller,Francois Kritzinger,0,2,2012-10-22 14:02:46+00:00,2012-11-03 15:37:08+00:00,"For derivatives of SmppSmCommand, setting the SmppConstants.ALPHABET header to e.g. Alphabet.ALPHA_8_BIT doesn't change the data coding of the resulting command.


I am not 100% clear on how the alphabet header is meant to interact with the data coding, but this seems like a bug to me.


Patch with demo unit test to follow.","frankzinger:1350885953:2012-10-22T14:05:53.481+0000:1350885953:2012-10-22T14:05:53.481+0000:In this test, the alphabet header is set to 8-bit, but the data coding passed to SmppSession.submitShortMessage() is 0, which is the default and does not indicate an 8-bit data coding.
muellerc:1351927998:2012-11-03T15:33:18.503+0000:1351927998:2012-11-03T15:33:18.503+0000:A workaround is to use the header SmppConstants.DATA_CODING. This will be taken into account.
muellerc:1351928219:2012-11-03T15:36:59.995+0000:1351928219:2012-11-03T15:36:59.995+0000:Thanks for the test case Francois. I fixed this issue."
0,CAMEL-5730,Bug,Major,2.10.0,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,alex hutter,0,2,2012-10-22 13:13:26+00:00,2012-10-22 13:37:21+00:00,"When I made the patch file for CAMEL-5306 I made a mistake and coupled the cancelling of the visibility extending scheduled task with the thread that receives the message inside SqsConsumer.  This causes issues when try to write Processors that delegate the completion of an exchange to another thread.


Actually the cancelling of the scheduled task should have been handled via exchange.addOnCompletion(), the same way the the overall SQS transaction is completed.


The attached patch fixes this issue.","alexhutter:1350882906:2012-10-22T13:15:06.233+0000:1350882906:2012-10-22T13:15:06.233+0000:I give permission for Apache to own the copyright on the attach file: fix-SQS-timeout-extender.patch
davsclaus:1350884241:2012-10-22T13:37:21.971+0000:1350884241:2012-10-22T13:37:21.971+0000:Thanks for the patch."
0,CAMEL-5729,Bug,Major,2.10.1,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-22 10:18:11+00:00,2012-10-22 10:28:53+00:00,"See nabble
http://camel.465427.n5.nabble.com/The-file-is-not-deleted-if-it-is-submitted-to-digital-signature-end-point-crypto-sign-td5721377.html","davsclaus:1350872387:2012-10-22T10:19:47.211+0000:1350872387:2012-10-22T10:19:47.211+0000:A workaround is to convert the message prior to the crypto, for example to byte arrays
<convertBodyTo type=""byte[]""/>
"
0,CAMEL-5728,New Feature,Major,None,Future,"
None
",Resolved,Fixed,Future,Unassigned,Claus Ibsen,1,3,2012-10-22 09:57:44+00:00,2021-04-19 19:08:36+00:00,"We should add a TransactionErrorHandler to camel-blueprint, that uses the TX API without Spring. There ought to be some TX manager from Aries we can leverage for that.","davsclaus:1488261355:2017-02-28T13:55:55.575+0000:1488261355:2017-02-28T13:55:55.575+0000:There is a CDI JEE module on the way
https://github.com/apache/camel/pull/1390

That would require some way of making camel-blueprint use that JEE JTA api
davsclaus:1618830516:2021-04-19T19:08:36.476+0000:1618830516:2021-04-19T19:08:36.476+0000:There is camel-jta which has JTA API support"
0,CAMEL-5727,Improvement,Major,"2.9.0, 2.10.0",3.0.0,"
None
",Resolved,Not A Problem,3.0.0,Claus Ibsen,Claus Ibsen,0,2,2012-10-22 09:49:58+00:00,2015-07-12 07:19:16+00:00,"A few of the options in the <errorHandler> is missing in camel-blueprint, which is available in camel-spring.","davsclaus:1350870977:2012-10-22T09:56:17.019+0000:1350870977:2012-10-22T09:56:17.019+0000:We should consider adding a TransactionErrorHandler to camel-blueprint, which is what these missing options is about. Currently this is not supported as easily as it could be, when using a pure OSGi Blueprint."
0,CAMEL-5726,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-10-22 08:23:24+00:00,2012-10-22 08:52:53+00:00,"This allows implementations of language and data format to have access to the CamelContext by the CamelContextAware, which we do for other kinds such as Components, Endpoints, Services etc.",
0,CAMEL-5725,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-10-22 08:16:56+00:00,2012-10-22 10:04:38+00:00,"This allows people to disable the worker queue, and thus only use direct-hand-off to the threads from the pool.


Currently 0 or -1 means unbounded worker queue. Which IMHO is not ideal as you dont want a system that can accept any new tasks in an internal memory worker queue. So IMHO we should switch 0 and -1 to be direct-hands-off. And never use unbounded queues. People can specify a Integer.MAX_SIZE which is also unbounded queue anyway.",
0,CAMEL-5724,Improvement,Major,2.10.1,2.11.0,"

patch

",Resolved,Fixed,2.11.0,Willem Jiang,Andrej Zachar,0,5,2012-10-22 07:03:16+00:00,2013-02-01 15:24:54+00:00,"Hi!


I wanted to send back as response or as a request some soap messages with modified header.


I found out that SpringWebserviceProducer and SpringWebserviceConsumer do not populate a soap header for any outgoing message from a camel exchange.


In the attachments I am sending you a patch against camel-spring-ws 2.10.1 that solves this issue.


Please let me know, what do you think about it.


Best regards,
Andrej","davsclaus:1350871619:2012-10-22T10:06:59.979+0000:1350871619:2012-10-22T10:06:59.979+0000:Thanks for the patch.

Do you mind adding a patch for an unit test as well. We would like to have test coverage of changes to the code base.
azachar:1350887106:2012-10-22T14:25:06.079+0000:1350887106:2012-10-22T14:25:06.079+0000:Sure, I try to provide you some! 
njiang:1350887991:2012-10-22T14:39:51.620+0000:1350887991:2012-10-22T14:39:51.620+0000:Hi, 

In Camel we have HeaderFilterStrategy[1] to help use to deal with the inbound or outbound message headers. 
I think we can do the same thing in Spring-WS component. 

[1]http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/impl/DefaultHeaderFilterStrategy.html

Willem
azachar:1350953728:2012-10-23T08:55:28.646+0000:1350953728:2012-10-23T08:55:28.646+0000:Hi Willem, 
do you mean usage similar to cxf, e.g. like this:

<bean id=""customMessageFilterStrategy"" class=""org.apache.camel.component.cxf.common.header.CxfHeaderFilterStrategy"">
    <property name=""messageHeaderFilters"">
        <list>
            <!--  SoapMessageHeaderFilter is the built in filter.  It can be removed by omitting it. -->
            <bean class=""org.apache.camel.component.cxf.common.header.SoapMessageHeaderFilter""/>
            
            <!--  Add custom filter here -->    
            <bean class=""org.apache.camel.component.cxf.soap.headers.CustomHeaderFilter""/>
        </list>
    </property>
</bean>

source: http://camel.apache.org/cxf.html
azachar:1350966367:2012-10-23T12:26:07.217+0000:1350966391:2012-10-23T12:26:31.605+0000:Hi Wilem,
I guess that as the same way as you suggest to handle the header support can be handled an attachment one. E.g. attachments beside headers are not passed from the Exchange instance into the WebServiceMessage [1][2].

Therefore I suggest to create a new endpoint param called ""filterFactory"" were you can provide a filter (for instance a sprig bean) that will filter  WebServiceMessage in SpringWebserviceConsumer [1] and SpringWebserviceProducer [2] in order to provide exchange data into spring's WebServiceMessage.

Than for example will be very easy to provide MTOM attachments support or just a simple text attachments support.

I am actually working on this solution, thus I can provide you patch if you are interested. Only problem what I see how to test it.
You know, your current test suites contain tests suitable for testing of Exchange's results, nor WebServiceMessage results. 

That is why the test consumeStockQuoteWebserviceInOnly [3] is working even though there is no real implementation of the headers processing. For instance header foo is obtained from exchange only!

[1] http://svn.apache.org/repos/asf/camel/tags/camel-2.10.1/components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceConsumer.java
[2] http://svn.apache.org/repos/asf/camel/tags/camel-2.10.1/components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/SpringWebserviceProducer.java
[3] http://svn.apache.org/repos/asf/camel/tags/camel-2.10.1/components/camel-spring-ws/src/test/java/org/apache/camel/component/spring/ws/ProducerLocalRouteTest.java

Best regards,
Andrej



njiang:1351027737:2012-10-24T05:28:57.669+0000:1351027737:2012-10-24T05:28:57.669+0000:Hi Andrej,

The HeaderFilterStrategy can be apply to component or endpoint. The setting on the endpoint can override the setting on the component. 

For the testing, it could be easy to write an unit test if you use the real WS client server to verify the wired soap message. 

Willem
azachar:1351066766:2012-10-24T16:19:26.169+0000:1351066766:2012-10-24T16:19:26.169+0000:Dear Willem and Claus,

I have created support for a header and attachments propagation into the Spring's WebServiceMessage. It is based on our previous conversation, at least I hope so :)

Please let me know what do you think about it. 

Looking forward to hearing from you!
Your camel rider Andrej
njiang:1351138587:2012-10-25T12:16:27.843+0000:1351138587:2012-10-25T12:16:27.843+0000:Hi Andrej

You patch looks good, I just applied it into trunk and fix some CS related issue.
Please update the wiki page if you have time.

Willem
azachar:1351138869:2012-10-25T12:21:09.225+0000:1351138869:2012-10-25T12:21:09.225+0000:Hi Willem, 
thanks for your integration. I try to look at the wiki to update the doc. 

Have a nice day!

Andrej
bvahdat:1351140467:2012-10-25T12:47:47.528+0000:1351140467:2012-10-25T12:47:47.528+0000:The _deal_ was to provide test(s) as well so that we've got test coverage of the changes to the code base however the patch being applied into the trunk lacks this. 
azachar:1351141932:2012-10-25T13:12:12.339+0000:1351141932:2012-10-25T13:12:12.339+0000:As I promised, I will provide them. There is no questions about it:)
bvahdat:1351144809:2012-10-25T14:00:09.307+0000:1351144809:2012-10-25T14:00:09.307+0000:Thanks.
azachar:1352072951:2012-11-05T07:49:11.012+0000:1352072991:2012-11-05T07:49:51.202+0000:Hi!
In the mean time I have also found few issues. 

1. The method createEndpoint in SpringWebserviceComponent needs to updated. The order of calling methods needs to be changed as follows

        configureMessageFilter(parameters, configuration); 
        setProperties(configuration, parameters);

instead of 

       setProperties(configuration, parameters);
       configureMessageFilter(parameters, configuration); 

Otherwise messageFilter parameters from the endpoint URI are removed before they are processed.

2. The bad spelling
Also there is one bad spelling in the class BasicFilterStrategy instead of 
processHeaderAndAttachemtns should be processHeaderAndAttachments.

As I said I am working on tests and doc. I will let you know, when it will be ready.

Cheers,
Andrej


bvahdat:1352085117:2012-11-05T11:11:57.375+0000:1352085179:2012-11-05T11:12:59.306+0000:Thanks for the status update!

Just a side note: IMHO including the unit-tests *_together_* with the same patch fixing a given problem (beyond others) has the positive side effect that all of us for sure know that the patch works/behaves as expected. Now given this concrete case, you would again need to provide a patch for your applied patch so that
{code}
configureMessageFilter(parameters, configuration); 
{code}
is called at the right place!

Once again thanks for your engagement. :-)

azachar:1352169627:2012-11-06T10:40:27.657+0000:1352169627:2012-11-06T10:40:27.657+0000:Hello All!

I have prepared the doc for the patch. 

Because I do not have approchiate rights to provide an update for wiki, I'm sending it here. I hope it is ok, if not, let me know what is the right process to do it.  



The Doc Update
===============
         
Add a brand new paragraph on the wiki page   http://camel.apache.org/spring-web-services.html




The header and attachment propagation
=====================================
Spring WS Camel supports propagation of the headers and attachments into Spring-WS WebServiceMessage response since version 2.10.4+.
The endpoint will use so called ""hook"" the MessageFilter (default implementation is provided by BasicMessageFilter) to propagate the exchange headers and attachments into WebSdrviceMessage response.

Now you can use  
   exchange.getOut().getHeaders().put(""myCustom"",""myHeaderValue"")
   exchange.getIn().addAttachment(""myAttachment"", new DataHandler(...))

Note: If the exchange header in the pipeline contains text, it generates Qname(key)=value attribute in the soap header. 
Recommended is to create a QName class directly and put into any key into header.





How to use MTOM  attachments
============================
The BasicMessageFilter provides all required information for Apache Axiom in order to produce MTOM message. If you want to use Apache Camel Spring WS within Apache Axiom, here is an example:

1. Simply define the messageFactory as is bellow and spring-ws will use MTOM strategy to populate your SOAP message with optimized attachments.
    
	<bean id=""axiomMessageFactory""
		class=""org.springframework.ws.soap.axiom.AxiomSoapMessageFactory"">
		<property name=""payloadCaching"" value=""false"" />
		<property name=""attachmentCaching"" value=""true"" />
		<property name=""attachmentCacheThreshold"" value=""1024"" />
	</bean>
  
2. Add into your pom.xml the following dependencies
  
  <dependency>
			<groupId>org.apache.ws.commons.axiom</groupId>
			<artifactId>axiom-api</artifactId>
			<version>1.2.13</version>
		</dependency>
		<dependency>
			<groupId>org.apache.ws.commons.axiom</groupId>
			<artifactId>axiom-impl</artifactId>
			<version>1.2.13</version>
			<scope>runtime</scope>
		</dependency>

3. Add your attachment into the pipeline, for example using a Processor implementation.


	private class Attachement implements Processor {
		public void process(Exchange exchange) throws Exception {
			exchange.getOut().copyFrom(exchange.getIn());
      			
			File file = new File(""testAttachment.txt"");
			exchange.getOut().addAttachment(""test"",	new DataHandler(new FileDataSource(file)));			
		}
	}
  

4. Define endpoint (producer) as ussual, for example like this:
    from(""direct:send"")
		.process(new Attachement())
		.to(""spring-ws:http://localhost:8089/mySoapService?soapAction=mySoap&messageFactory=axiomMessageFactory"");
  
5. Now, your producer will generate MTOM message with otpmized attachments.



The custom header and attachment filtering
==========================================
If you need to provide your custome processing of either headers or attachments, extend existing BasicMessageFilter and override the approchiate methods or write a brand new implementation of the MessageFilter interface.
To use your  custom filter, add this into your spring context:

You can specify either a global a or a local message filter as follows:

a) the global custome filter that provides the global configuration for all spring-ws endpoints 
<bean id=""messageFilter""	class=""your.domain.myMessageFiler"" scope=""singleton"" />

or 

b) the local messageFilter directly on the endpoint as follows:
  to(""spring-ws:http://yourdomain.com?messageFilter=#<myEndpointSpecificMessageFilter>""); 

For more information see https://issues.apache.org/jira/browse/CAMEL-5724


If you want to create your own MessageFilter, consider overrideing the following methods in the default implementation of MessageFilter in class BasicMessageFilter:

protected void doProcessSoapHeader(Message inOrOut, SoapMessage soapMessage) {your code /*no need to call super*/ }
protected void doProcessSoapAttachements(Message inOrOut, SoapMessage response) { your code /*no need to call super*/ }




Update the existing table at wiki page http://camel.apache.org/spring-web-services.html and add the following new row:

Registry based options
=======================
messageFilter	 No	 Option to provide a custom MessageFilter since 2.10.4. For example when you want to process your headers or attachments by your own.


Attachments processing using Axiom will produce message with attachment out of box. You just need to provide 



PS: Babak I will send tests and patch together soon. Should I create the final patch agains trunk or agains the branch 2.10.3 where I have initially developed this solution?
bvahdat:1352172815:2012-11-06T11:33:35.011+0000:1352172815:2012-11-06T11:33:35.011+0000:{quote}
PS: Babak I will send tests and patch together soon. Should I create the final patch agains trunk or agains the branch 2.10.3 where I have initially developed this solution?
{quote}

Please provide the patch for the trunk but apply the patch locally on your box for the 2.10.x branch as well, and then verify that all tests are still *green* both on trunk as well as the 2.10.x branch.

I assume Willem would then backport your patch to the 2.10.x as soon as you attach it to this ticket. Also please make sure that you build using the {{sourcecheck}} profile, so that checkstyle is also happy like the unit tests as well :-) For more details see http://camel.apache.org/building.html

njiang:1352173949:2012-11-06T11:52:29.856+0000:1352173949:2012-11-06T11:52:29.856+0000:Yeah, the patch which is based on trunk should be OK. I will take care of porting it back to 2.10.x branch.
azachar:1352478883:2012-11-10T00:34:43.319+0000:1352478883:2012-11-10T00:34:43.319+0000:Hello Willem, 
I am sending you the patch against the branch 2.10.1 including tests, please could you navigate me to eclipse formater, so I can easily format the next patch for the trunk? 

Best regards,
Andrej
njiang:1353393787:2012-11-20T14:43:07.129+0000:1353393787:2012-11-20T14:43:07.129+0000:@Andrej,
Thanks for you patch.
If you are using eclipse and using mvn -Psetup.eclipse to create the workspace, the formater should be setup for you.
I just apply the patch into trunk by removing the one which is patched, and I also fixed all the check style errors in you patch.


bvahdat:1353578488:2012-11-22T18:01:28.853+0000:1353578488:2012-11-22T18:01:28.853+0000:We still need documentation of the changes by this ticket:
http://camel.apache.org/spring-web-services.html

bvahdat:1355485743:2012-12-14T19:49:03.117+0000:1355485743:2012-12-14T19:49:03.117+0000:Willem the documentation of this ticket is still outstanding. I assume Andrej has not the required Karma to do that, so it would be nice if you could update the Wiki for this.
bvahdat:1356090708:2012-12-21T19:51:48.820+0000:1356090708:2012-12-21T19:51:48.820+0000:Willem, for the third time I'm kindly asking you to update the Wiki for this ticket as this JIRA has been assigned to you. If for whatever reason you can't or don't want to do this, then please let me know so I'll do it as IMHO it's *very* important to keep the code base in sync with it's documentation so ppl are aware of the latest and greatest features. For this purpose now I'm reopening this ticket. Thanks!
njiang:1356135225:2012-12-22T08:13:45.445+0000:1356135225:2012-12-22T08:13:45.445+0000:Hi Babak,

I'm sorry I didn't go though the comments carefully. 
Thanks for you kindly reminding, I will update the wiki page today. 

Willem
njiang:1356137245:2012-12-22T08:47:25.742+0000:1356137245:2012-12-22T08:47:25.742+0000:updated the wiki page so we can close the issue now.
alutski:1359506453:2013-01-30T08:40:53.580+0000:1359506453:2013-01-30T08:40:53.580+0000:Hi Willem,

the fix versions for this issue is 2.10.3 and 2.11.0 and it was included in the release notes for 2.10.3 but looks like it wasn't added.

It's on:
trunk - https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/filter/

But it is absent both on:
branch 2.10.x - https://svn.apache.org/repos/asf/camel/branches/camel-2.10.x/components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/
and
tag 2.10.3 - https://svn.apache.org/repos/asf/camel/tags/camel-2.10.3/components/camel-spring-ws/src/main/java/org/apache/camel/component/spring/ws/

Could you please clarify which version should be used to have this functionality.

Regards, Anatol.
njiang:1359703494:2013-02-01T15:24:54.749+0000:1359703494:2013-02-01T15:24:54.749+0000:Hi Anatol,

As this JIRA is a kind of new feature, I didn't back port the patch to camel-2.10.x branch. 
I just update the fix version to reflect it.

Thanks,

Willem"
0,CAMEL-5723,New Feature,Major,None,2.20.0,"
None
",Resolved,Done,2.20.0,Onder Sezgin,Raúl Kripalani,0,4,2012-10-20 16:22:57+00:00,2017-05-05 09:42:32+00:00,"The Camel JAXB Data Format allows to specify a partClass and partNamespace on the data format configuration. 


If you have many cases of partial marshalling or unmarshalling, you're forced to configure as many data formats as part classes you'll ever need to handle.


Aside from being inconvenient, it makes route initialisation pretty inefficient because a JAXBContext is created per data format, performing a full scan and reflection of the package each time. Slows down route startup considerably.


Enhance the Camel JAXB Data Format so that it's capable of doing partial unmarshalling at runtime based on message headers.","davsclaus:1436592907:2015-07-11T13:35:07.707+0000:1436592907:2015-07-11T13:35:07.707+0000:You can use the data format component and use a ""dynamic to"". But yeah maybe also nicer to improve jaxb dataformat to support a header to control the behavior.
githubbot:1493246610:2017-04-27T06:43:30.185+0000:1493246610:2017-04-27T06:43:30.185+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1663

    CAMEL-5723 - set headers while setting partClass and partNamespace properties and update adoc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-5723

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1663.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1663
    
----
commit 99942c8c03ca3a0635c9c785f21502fbfef3212c
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-27T06:16:24Z

    CAMEL-5723 - set headers while setting partClass and partNamespace properties

commit ae986fe4d02360fa14712e119d53d39e6b8fbef4
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-27T06:16:56Z

    CAMEL-5723 - update adoc

----

githubbot:1493259193:2017-04-27T10:13:13.209+0000:1493259193:2017-04-27T10:13:13.209+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1663

pascalschumacher:1493948552:2017-05-05T09:42:32.691+0000:1493948552:2017-05-05T09:42:32.691+0000:The fix version for this (and probably other issues fixed between the two release candidates for 2.19) should be 2.19 (see: https://github.com/apache/camel/commits/camel-2.19.x). "
0,CAMEL-5722,Bug,Critical,2.8.0,"2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,3,2012-10-20 16:02:25+00:00,2012-10-27 18:33:46+00:00,"Happens in an OSGi environment; but it is also applicable in modular servers that build dynamic classloaders (e.g. JBoss AS) per deployed artifacts (WAR, module, EAR, etc.).


If bundles A and B are both creating camel-jetty consumers on the same TCP port, the consumers will share the underlying Jetty connector. Moreover, the Jetty connector is indeed created by the first consumer that initialises on that TCP port.


Since the Camel route executes on the Jetty Connector thread, all class resolutions will happen against the classloader of the bundle that initialises first.


This makes class resolution absolutely undeterministic and erratic. Quite a nasty bug IMHO.


Perhaps this can be fixed by adding a call to Thread.setContextClassLoader() passing the classloader of the JettyHttpEndpoint, as soon as a request comes in?","raulvk:1350720218:2012-10-20T16:03:38.973+0000:1350720218:2012-10-20T16:03:38.973+0000:Have only been able to test in Camel 2.8.0. Will test on a later release and provide feedback.
njiang:1350784935:2012-10-21T10:02:15.844+0000:1350784935:2012-10-21T10:02:15.844+0000:We have faced the same issue in camel-jaxb, to resolve it we put the bundle class loader as application class laoder into the bus and it can be get by the CXF run time, so the TCCL can be set with the application class loader whenever the camel need. 
@Raul, to resolve the issue that you faced, you can use the CamelContext.getApplicationContxt() to set the TCCL on the CamelContinuationServlet.
raulvk:1350785665:2012-10-21T10:14:25.681+0000:1350785665:2012-10-21T10:14:25.681+0000:Thanks a lot for the indications. I have confirmed that setting the TCCL to the classloader from CamelContext.getApplicationContextClassLoader() does the trick.

Since the Jetty consumer is async, I just wondered if we also have to do something special on the AsyncCallbacks?
raulvk:1350808776:2012-10-21T16:39:36.858+0000:1350808776:2012-10-21T16:39:36.858+0000:Working on a fix. So far I have an itest-osgi that reproduces the issue.
davsclaus:1351138555:2012-10-25T12:15:55.219+0000:1351138555:2012-10-25T12:15:55.219+0000:Any update on this issue?
davsclaus:1351138634:2012-10-25T12:17:14.389+0000:1351138634:2012-10-25T12:17:14.389+0000:I guess a generic solution is to let the UnitOfWorkProcessor that is 1st on the route processors, set the TCCL and restore it on done. Then it may be a generic fix for all use-cases
raulvk:1351327819:2012-10-27T16:50:19.798+0000:1351327819:2012-10-27T16:50:19.798+0000:Yep, I committed fixes on r1400729 and r1400734 on 21/10. There was also some discussion on the mailing list regarding other cases to consider.

Claus, that's another solution, but most consumers allow for some custom logic to execute before the route kicks in, e.g. HttpBinding and the like. The UoW processor wouldn't account for those scenarios, or would it?

raulvk:1351328726:2012-10-27T17:05:26.470+0000:1351328726:2012-10-27T17:05:26.470+0000:I think this can also be a problem in the Direct VM component, if a new Exchange is not created at the consumer side... I'll check.
raulvk:1351332422:2012-10-27T18:07:02.087+0000:1351332422:2012-10-27T18:07:02.087+0000:Yep, filed CAMEL-5748."
0,CAMEL-5721,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-10-20 13:34:07+00:00,2012-10-20 14:58:10+00:00,"Just a little house-keeping in the model code, as we should remove NodeFactory that has never been in use. And also when expression/predicates is set then re-use same logic to be consistent, and ensure that the runtime details of the routes is consistent. eg to avoid the generic <expressionDefinition> being reported as the expression.",
0,CAMEL-5720,Bug,Minor,"2.9.0, 2.10.0","2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-20 10:01:33+00:00,2012-10-20 10:12:46+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-tp5721307.html",
0,CAMEL-5719,Improvement,Major,2.10.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Claus Ibsen,4,4,2012-10-20 09:29:13+00:00,2016-10-28 09:12:50+00:00,"See nabble
http://camel.465427.n5.nabble.com/Single-instance-of-running-route-in-the-cluster-tp5720846.html","davsclaus:1358557126:2013-01-19T08:58:46.029+0000:1358557126:2013-01-19T08:58:46.029+0000:This is a bit tought to fix/improve
ialex:1417607520:2014-12-03T19:52:00.586+0000:1417655058:2014-12-04T09:04:18.979+0000:I wanted the same thing; having a single instance running from the creation of the camel context. The way the policy currently works is that it ""waits"" for the first exchange  to stop the consumers from processing. It might be useful if the exchange is expendable (e.g. route is a *file* component or something of the sort). If it is not, (e.g. a *jetty* or an *activemq* component), it would mean that the +first exchange (if it happens to arrive on a 'secondary' camel route) would be 'lost'+ and if it hasn't been thought through, it might mean problems in the application.

The most useful approach would be to not start the route on the onInit phase. However, there are some inherent problems (for example, the context is not yet fully started between all those phases and I think you can't mark a route as autoStartup = false in any of the RoutePolicy's methods, it won't work, and the context is not yet fully initialized). Moreover, the component itself 'injects' another route (election-route-XXXXXXXX) in the camel context itself, which makes the things even more complicated.

One way would be to setAutoStartup(false) in the camel context containing the routes. However, if you have routes that you don't want to be suspended from the beginning, this would create problems. This would not start the injected election route from the above paragraph too. And you can't get a callback (apart from the StartupListener interface, I couldn't find anything else that could help).

h5. In the end, I managed to get the expected behaviour by doing the following:
*1)* Created a new camel context (this could be static, for performance reasons, but I do not think it has a large overhead), in which I put the election route, just to be easily manageable, and to distinguish it from the others. This has the downside that you have to manually start/stop it (however I think it is not a problem, I close it overriding the +doShutdown()+).
*2)* For each route, overrode the +onStart(Route route)+ and check whether the node +isMaster+. If it is not, stop its consumers (this way, it doesn't get to process anything yet, and we assume it is 'paused'). We might be able to avoid the step above with the new camel context, if we make sure that the +onStart(Route route)+ is not run for the election route (because it would create a deadlock). However, I like the idea of the election route being separate (in karaf the route was appearing when I was scanning the camel contexts. When it was alone, it was 'hidden')


So, having those modifications, we get the benefit of having the route without consumers if it is not a primary node on startup, however on any election change, the consumer(s) will be started.

I tested it within karaf, and the behaviour was what I expected, single instance of a route running at all times.
(+the attached patch is from 2.14.1-SNAPSHOT+)

Note: after these checks, I think the +onExchangeBegin(Route route, Exchange exchange)+ does not need the check the election. However, I did not modify anything there, just for safety.
ialex:1417620979:2014-12-03T23:36:19.162+0000:1417654880:2014-12-04T09:01:20.478+0000:There is another issue I wanted to address, which applies here (and in the original component, too). Perhaps it deserves its own ticket, perhaps not, perhaps it does not deserve a ticket at all.

Following the above example, if someone has, for instance, activemq components, just stopping the consumers (edit: the endpoint's consumers, not the activemq consumers) is not 'safe' enough. I noticed that (prefetch size * consumer count) messages (I had 2 consumers with prefetch 1, so, all in all, 2 messages) are neither being processed, not forwarded further. They stay in 'inflight' mode.

My setup is a store and forward network of activemq brokers. So, a queue on node A, if it does not have any (activemq) consumers, it forwards to a node B which has. In my case, the elected as master node would have to get the activemq messages, even though I sent jms messages to node A, which was not elected from zookeeper. Instead, it skipped (prefetch size * consumer count) messages before the rest got forwarded (the skipped ones stayed in node B as 'inflight', apparently it awaits for the endpoint consumers to be started). If, instead of stopping the consumers, I was to stop the route itself, then the component did not get those messages as inflight and all messages got forwarded immediately. I have a patch available on top of the above one (it just stops the route where it stops the consumers of the endpoint, and starts the route wherever it starts the consumers. The idea is the same, but instead of consumers, the whole route gets started/stoped). I can attach it, if you like.

This is a matter of opinion, really. If someone sets the prefetch size = 0, then there is no problem. However, it would drop the performance significantly. In my opinion, however (in any case), I think the zookeeper policy should 'stop' the route entirely. I do not know if such a behaviour exists in other components (like jms/activemq's prefetch size and the inflight exchanges problem). So, perhaps this is a really unique/specific case."
0,CAMEL-5718,Bug,Major,None,"2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Christian Müller,Francois Kritzinger,0,4,2012-10-19 15:27:06+00:00,2012-11-15 21:15:19+00:00,"Bytes in the body of 8-bit SUBMIT_SMs which do not fall within the chosen charset's range are set to '?', which is obviously wrong because 8-bit/binary data should not be modified in any way.


EDIT: Turns out the RX SMs (DELIVER_SM, etc.) were also affected.","frankzinger:1350631873:2012-10-19T15:31:13.440+0000:1350631873:2012-10-19T15:31:13.440+0000:I've also noticed that SUBMIT_SMs with SmppConstants.ALPHABET set to Alphabet.ALPHA_8_BIT have their bodies mangled in the same way.
frankzinger:1350636004:2012-10-19T16:40:04.759+0000:1350636004:2012-10-19T16:40:04.759+0000:I guess all the other message types need to be checked too. I will do so on Monday and provide another patch if necessary. I know DELIVER_SM works fine though.
davsclaus:1350716384:2012-10-20T14:59:44.493+0000:1350716384:2012-10-20T14:59:44.493+0000:Looking forward for the remainder patches.
muellerc:1350736035:2012-10-20T20:27:15.883+0000:1350736035:2012-10-20T20:27:15.883+0000:Looking forward for the patch - and the unit test ;-)
frankzinger:1350884271:2012-10-22T13:37:51.785+0000:1350884271:2012-10-22T13:37:51.785+0000:This patch supercedes the previous one. It fixes the mangling of 8-bit bodies in all the message types I could identify (basically all subclasses of SmppSmCommand: SmppSubmitSmCommand, SmppSubmitMultiCommand, SmppReplaceSmCommand).

I.e.:

- Setting data coding or alphabet to one of the 8-bit values prevents body from getting narrowed to charset;

- Data coding takes precedence over alphabet. I.e. if both headers are set, only the value of the data coding is taken into account and the alphabet is ignored.
frankzinger:1350954483:2012-10-23T09:08:03.284+0000:1350954589:2012-10-23T09:09:49.133+0000:As mentioned before, DELIVER_SM bodies are not mangled, but here is a patch (test_deliver_sm_bodies_not_mangled.diff) containing tests that confirm the fact in case you think it would be useful.
muellerc:1351692919:2012-10-31T22:15:19.156+0000:1351692919:2012-10-31T22:15:19.156+0000:After applying your patches, 4 test on my machine failed:

{noformat}
Results :

Failed tests: 
  createSmppMessageFromDefaultDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFromLatin1DataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createSmppMessageFrom8bitDataCodingDeliverSmShouldNotModifyBody(org.apache.camel.component.smpp.SmppBindingTest): arrays first differed at element [0]; expected:<-1> but was:<-40>
  createBodyShouldNotMangle8bitDataCodingShortMessage(org.apache.camel.component.smpp.SmppMessageTest): arrays first differed at element [0]; expected:<-1> but was:<-40>

Tests run: 125, Failures: 4, Errors: 0, Skipped: 4
{noformat}

Could you please have a look at it? What's your OS and default charset?
frankzinger:1351727230:2012-11-01T07:47:10.708+0000:1351727230:2012-11-01T07:47:10.708+0000:I am on Linux and my default charset is Latin1.

But anyway, I have improved the tests (they now fail on my system as well because they try every supported character encoding) and have provided the code fixes in the patch called '8bit_deliver_sm_bodies_mangled.diff', which I will attach soon.
frankzinger:1351727469:2012-11-01T07:51:09.238+0000:1351727469:2012-11-01T07:51:09.238+0000:The tests in the other patch should probably also be updated to try every supported charset.
muellerc:1351926339:2012-11-03T15:05:39.758+0000:1351926339:2012-11-03T15:05:39.758+0000:I'm a bit confused. Do you work on an additional patch? Are both attached patches needed or only ""8bit_deliver_sm_bodies_mangled.diff""?
frankzinger:1351929162:2012-11-03T15:52:42.369+0000:1351929162:2012-11-03T15:52:42.369+0000:I added '8bit_deliver_sm_bodies_mangled.diff' and removed the previous patch which contained all the failing tests you pointed out. That one was called 'test_deliver_sm_bodies_not_mangled.diff'. Both of the currently-attached patches need to be committed.
muellerc:1352091576:2012-11-05T12:59:36.027+0000:1352091576:2012-11-05T12:59:36.027+0000:Francois, thanks for the patch. I applied both. Could you please have a look at it, because I had to resolve merge conflicts in both. And a had to do a lot other formatting changes to make Checkstyle happy. You can read more about how you can test it too before you create the patch at [1].

So, thanks again!

[1] http://camel.apache.org/building.html
frankzinger:1352159175:2012-11-06T07:46:15.916+0000:1352159175:2012-11-06T07:46:15.916+0000:Sorry for the conflicts. I checked both of the affected files (SmppMessageTest.java and SmppSubmitSmCommandTest.java; does that look right?) and it all looks OK to me. I have also been made aware of Checkstyle, and actually used it for the second patch, so it shouldn't be a problem again. Thanks!
davsclaus:1352601147:2012-11-11T10:32:27.526+0000:1352601147:2012-11-11T10:32:27.526+0000:This patch causes 2 failures on our CI servers. Is anybody looking into this?

If not I will revert the commit as it prevent the CI servers from continue testing other parts of Camel.
davsclaus:1352601245:2012-11-11T10:34:05.042+0000:1352601245:2012-11-11T10:34:05.042+0000:https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-smpp/1090/testReport/
muellerc:1352607235:2012-11-11T12:13:55.809+0000:1352607235:2012-11-11T12:13:55.809+0000:I will fix it later today.
bvahdat:1352680362:2012-11-12T08:32:42.535+0000:1352680362:2012-11-12T08:32:42.535+0000:They are still failing even after the latest fix:

https://builds.apache.org/job/Camel.trunk.fulltest/1092/org.apache.camel$camel-smpp/#showFailuresLink

Not sure if this sounds reasonable to you but I think the problem in both cases is the following line:

{code}
smppMessage.getBody(String.class).getBytes()
{code}

Which makes use of the platform's default charset for the byte array being returned. However the other body is a UTF-8 encoded byte array! So I think the usage of

{code}
IOConverter.toString(byte[] data, Exchange exchange)
{code}

could resolve the problem. To reproduce the problem on your local box you could set the following system property while running the tests:

{code}
-Dfile.encoding=UTF-16
{code}

bvahdat:1352680673:2012-11-12T08:37:53.069+0000:1352680673:2012-11-12T08:37:53.069+0000:That is the usage of the following header while converting:

{code}
Exchange.CHARSET_NAME
{code}
frankzinger:1352682236:2012-11-12T09:03:56.761+0000:1352682236:2012-11-12T09:03:56.761+0000:Not so sure. SmppMessage.getBody() doesn't appear to do any conversion because the body is set to a String at SmppBinding.createSmppMessage (line 109) and also at SmppMessage.createBody (line 94). All SmppMessage.getBody() does is call MessageSupport.getBody(Class<T> type, Object body), which simply casts 'body' to 'type' if the body is already an instance of the type, which is the case here.

I think the problem is where the body is being set using String(byte[]) (at the above-mentioned locations). This String constructor decodes the byte array using the system's default charset. I initially was setting the body to a byte[] and I think that would prevent conversion and just seems generally safer and more sensible. I changed it to a String at the last minute for the sake of consistency because the body is a String when it's not 8-bit and the tests were passing under my default charset of Latin1.
frankzinger:1352682422:2012-11-12T09:07:02.631+0000:1352682422:2012-11-12T09:07:02.631+0000:Sorry, I guess you were talking about String.getBytes() doing conversion.

Anyway, I still think the best option would be to set and leave 8-bit bodies as byte[] unless you guys think the difference in types would be a problem? The body really should be left untouched in the case of 8-bit DCS. Otherwise there is just too much scope for things to go wrong.
muellerc:1352726410:2012-11-12T21:20:10.239+0000:1352726410:2012-11-12T21:20:10.239+0000:I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.
muellerc:1352731898:2012-11-12T22:51:38.416+0000:1352731898:2012-11-12T22:51:38.416+0000:I can reproduce this issue on my new Ubuntu instance. Looking for the issue...
frankzinger:1352754388:2012-11-13T05:06:28.903+0000:1352754388:2012-11-13T05:06:28.903+0000:I could also have a look, so please let me know if it's necessary.
muellerc:1352762648:2012-11-13T07:24:08.060+0000:1352762648:2012-11-13T07:24:08.060+0000:It would be great if you could have a look at it. I did a small update two days ago but it didn't fixed the issue on Ubuntu. :-(
bvahdat:1352765458:2012-11-13T08:10:58.758+0000:1352765458:2012-11-13T08:10:58.758+0000:{quote}
I create a new Ubuntu VM and run the test locally. On my MacOS all tests pass.
{quote}

You can also reproduce the two failing tests even on MacOS:

{code}
mvn test -Dfile.encoding=UTF-16
{code}

That's you change the default platform encoding from {{MacRoman}} to {{UTF-16}}. Unfortunatley I've got no knowledge of the SMPP protocol or jsmpp library but looking at the changes being made by this ticket I see the configured encoding (that's {{SmppConfiguration.getEncoding()}}) [is not taken into the account *anymore*|http://svn.apache.org/viewvc/camel/trunk/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppBinding.java?r1=1395645&r2=1405775] to build Strings out of the given byte arrays:

{code}
smppMessage.setBody(new String(deliverSm.getShortMessage()));
{code}

which explains why the test results are platform depended!

frankzinger:1352765897:2012-11-13T08:18:17.692+0000:1352765897:2012-11-13T08:18:17.692+0000:OK thanks for the help so far guys, I will take a look today still and report back.
frankzinger:1352782470:2012-11-13T12:54:30.790+0000:1352783408:2012-11-13T13:10:08.754+0000:I have had a look and I am of the opinion that leaving 8-bit bodies as byte[] is the only solution.

It is not possible to store a byte[] inside a String (using e.g. String.String(byte[])) and read those bytes out again later (using e.g. String.getBytes()) without involving the system's default charset. And as patch [1] shows, this fails (EDIT: fails as in the 8-bit data is modified) on at least one of my system's supported charsets (Big5, in this case). In a nutshell, storing 8-bit data inside a String is just plain wrong.

I don't think consistency (String vs. byte[] bodies) is an issue after all because users will still be able to get a String version of the body by calling SmppMessage.getBody(String.class) (although this will cause conversion on some systems). I think it's actually quite intuitive to retrieve 8-bit data using getBody(byte[].class) or (byte[])getBody().

I have attached two patches. *Note that these patches are not compatible*: patch [1] exists solely to show how I reproduced the CI failures on my machine. The real fix and its unit tests are in patch [2].

[1] _ci_failures_reproduced.diff_: For informational purposes only; modifies the tests that were causing the CI machine to fail so that they fail on my machine. (They should now fail on any machine which supports a reasonable set of character encodings.)

[2] _ci_failures_fixed_and_tested.diff_: The real fix and its unit tests.

muellerc:1352813219:2012-11-13T21:26:59.165+0000:1352813219:2012-11-13T21:26:59.165+0000:Thanks again Francois for the patch. It works on my Ubuntu VM too.
frankzinger:1352955733:2012-11-15T13:02:13.136+0000:1352955733:2012-11-15T13:02:13.136+0000:Cool, thanks to you guys too. Let's hope it survives the CI this time.
muellerc:1352985319:2012-11-15T21:15:19.924+0000:1352985319:2012-11-15T21:15:19.924+0000:It survived! ;-)
The last camel-smpp tests runs successfully..."
0,CAMEL-5717,New Feature,Major,2.10.1,"3.0.0, Future","

context
route

",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Robert Stepanek,3,6,2012-10-19 14:38:10+00:00,2019-07-31 18:08:20+00:00,"Currently, the XML schema does not permit use of RouteBuilders in a RouteContext.


This has been discussed on the mailing list: http://camel.465427.n5.nabble.com/RouteBuilder-not-allowed-in-RouteContext-why-td5721184.html


The improvement would add camelContext's powerful feature  of mixing Java DSL and XML based route declarations also to the routeContext.


For illustration, the following XML does not validate since the camel:routeBuilder element is not allowed in a camel:routeContext:



<camel:routeContext id=""fooRouteContext"">
    <camel:routeBuilder ref=""fooRouteBuilder""/>
</camel:routeContext>","SvenNold:1390182840:2014-01-20T09:54:00.810+0000:1390182840:2014-01-20T09:54:00.810+0000:As requested also consider the following:

http://camel.465427.n5.nabble.com/routeContext-features-td5746235.html

Short list:
- routeContext must not be empty
- routeBuilder (ref) not supported (as above)
- routeContextRef not supported


SvenNold:1390783861:2014-01-27T08:51:01.703+0000:1390783861:2014-01-27T08:51:01.703+0000:GitHub user SvenNold opened a pull request:

    https://github.com/apache/camel/pull/91

    Camel 5717

    https://issues.apache.org/jira/browse/CAMEL-5717
    
    Supporting:
    
     - empty routeContext 
     - routeBuilderRef
    -  routeContextRef 

githubbot:1437340409:2015-07-20T05:13:29.296+0000:1437340409:2015-07-20T05:13:29.296+0000:Github user SvenNold closed the pull request at:

    https://github.com/apache/camel/pull/91

onders:1525390961:2018-05-04T07:42:41.314+0000:1525390961:2018-05-04T07:42:41.314+0000:may i ask why we did hold this feature back and postponed?"
0,CAMEL-5716,Improvement,Trivial,2.10.1,2.19.0,"

patch

",Resolved,Fixed,2.19.0,Claus Ibsen,Petter Nordlander,0,5,2012-10-19 14:02:50+00:00,2017-02-28 13:54:30+00:00,"As far as I understand, the validator ""component"" in Camel can only use schemas deployed as file within the classpath (typically the deployed application - ear/war/jar whatever have you) or some file/http resource. 


Sometimes you might want to load the schema a bit more dynamically, I.E. from some datasource or semi-generate something on the fly. My suggestion is that a schema could be supplied in a propery or a header to the validator.


I wrote such an extension to the validator and could probably rewrite it easily as a patch to the regular validator. Do you think people want to use such a feature and that it might be good to have in Camel? Should I submit a patch?","muellerc:1350992157:2012-10-23T19:35:57.478+0000:1350992157:2012-10-23T19:35:57.478+0000:Petter, do you consider to work on a patch?
northlander:1351047127:2012-10-24T10:52:07.783+0000:1351047127:2012-10-24T10:52:07.783+0000:yes, I have most of it ready. Just need to make up some junit code to test it as well. 
muellerc:1353502230:2012-11-21T20:50:30.172+0000:1353502230:2012-11-21T20:50:30.172+0000:Any progress Petter?
davsclaus:1436592985:2015-07-11T13:36:25.092+0000:1436592985:2015-07-11T13:36:25.092+0000:I guess you didnt get around to contribute anything?
snurmine:1439542067:2015-08-14T16:47:47.685+0000:1439542067:2015-08-14T16:47:47.685+0000:I could try to implement this.
If schema (XSD XML string) is provided in header, then 
component will use that. 

Should these ""dynamic"" schemas be cached (for example in limited size LRU cache)? Caching could be configurable(yes/no, maxSize etc.).
"
0,CAMEL-5715,Task,Major,"2.10.3, 2.11.0","2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-19 12:59:54+00:00,2012-10-19 14:12:08+00:00,Need to check all the maven archetypes that they work as there was some commits to cleanup the pom.xml files that broke them.,davsclaus:1350627128:2012-10-19T14:12:08.406+0000:1350627128:2012-10-19T14:12:08.406+0000:And the resources-plugin that was added to the pom.xml also broke them.
0,CAMEL-5714,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-10-19 12:19:57+00:00,2012-10-20 15:00:29+00:00,"If the user doesn't setup the right camel context for the context component. The exception we got is misleading, we need to throw more meaningful exception for it.


Here is the mailing thread[1] for it.
[1]http://camel.465427.n5.nabble.com/Context-component-not-found-td5721236.html",
0,CAMEL-5713,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Francois Kritzinger,0,2,2012-10-19 11:49:08+00:00,2012-10-19 14:53:08+00:00,"It is currently not possible to specify the address_range SMPP parameter when creating a Camel SMPP consumer.


This parameter is important because, although most real SMSCs ignore it, it is nevertheless used by, for example, SMPPSim to route SMSes between ESMEs.","njiang:1350629588:2012-10-19T14:53:08.379+0000:1350629588:2012-10-19T14:53:08.379+0000:Applied the patch into trunk with thanks to Francois.
I also updated the wiki page for it."
0,CAMEL-5712,Bug,Critical,"2.9.0, 2.10.0","2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-18 12:41:47+00:00,2012-10-24 08:09:55+00:00,"The init() method in BlueprintCamelContext should not call maybeStart(). but instead should be started when the blueprint container is done doing all its dance and initialization.


For example Spring sends on ContextRefreshedEvent when its done.


We need something similar for blueprint to tell us when its done doing its initialization et all.


The problem is that the CamelContext should not be started until all that other stuff is initialized as well.",davsclaus:1350535340:2012-10-18T12:42:20.221+0000:1350535340:2012-10-18T12:42:20.221+0000:Now the trick is to figure out how to get the BlueprintContainer to tell me when its done.
0,CAMEL-5711,Improvement,Minor,2.10.1,"2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Christian Müller,Ray Slater,0,3,2012-10-18 10:39:06+00:00,2012-11-22 20:00:07+00:00,Only basic address information is currently exposed. The TON and NPI values for source and destination are not. This information is available from the JSMPP library in the same way as it is for DataSM. The Data Coding scheme should also be exposed.,"davsclaus:1350716466:2012-10-20T15:01:06.466+0000:1350716466:2012-10-20T15:01:06.466+0000:Ray, are you working on a patch for contribution?
muellerc:1350736280:2012-10-20T20:31:20.871+0000:1350736280:2012-10-20T20:31:20.871+0000:We love contributions - with unit tests - of course... ;-)
muellerc:1353585573:2012-11-22T19:59:33.929+0000:1353585573:2012-11-22T19:59:33.929+0000:have to correct the fix version"
0,CAMEL-5710,Bug,Major,2.10.1,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Amit Patel,0,2,2012-10-18 01:02:14+00:00,2012-10-18 16:39:38+00:00,"Rest route returns Response with http Status code 500 Internal Server Error and expected response headers/body when response has Last-Modified or Header-expires in header as string. 


I found the issue in below code it try to convert string Wed, 31 Dec 1969 18:00:00 CS to Date and it fails. Is it posible to convert String Date without knowing Date format?


DefaultRestletBinding
=======================


 if (header.equalsIgnoreCase(HeaderConstants.HEADER_LAST_MODIFIED)) {
                if (value instanceof Calendar) 

{
                    message.getEntity().setModificationDate(((Calendar) value).getTime());
                }

 else if (value instanceof Date) 

{
                    message.getEntity().setModificationDate((Date) value);
                }

 else 

{
                    Date date = exchange.getContext().getTypeConverter().mandatoryConvertTo(Date.class, value); //  Here it try to convert String to Date it throws No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CS
                    message.getEntity().setModificationDate(date);
                }

            }


Stack trace
===========


7 Oct 2012 08:28:06,010 WARN org.restlet.Component.StatusFilter - Exception or error caught in status service
org.apache.camel.RuntimeCamelException: Cannot process request
        at org.apache.camel.component.restlet.RestletConsumer$1.handle(RestletConsumer.java:62)
        at org.apache.camel.component.restlet.MethodBasedRouter.handle(MethodBasedRouter.java:54)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Router.doHandle(Router.java:500)
        at org.restlet.routing.Router.handle(Router.java:740)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.engine.application.StatusFilter.doHandle(StatusFilter.java:154)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.routing.Filter.doHandle(Filter.java:159)
        at org.restlet.routing.Filter.handle(Filter.java:206)
        at org.restlet.engine.ChainHelper.handle(ChainHelper.java:114)
        at org.restlet.Component.handle(Component.java:391)
        at org.restlet.Server.handle(Server.java:491)
        at org.restlet.engine.ServerHelper.handle(ServerHelper.java:75)
        at org.restlet.engine.http.HttpServerHelper.handle(HttpServerHelper.java:153)
        at org.restlet.ext.servlet.ServerServlet.service(ServerServlet.java:1031)
        at org.apache.shiro.grails.SavedRequestFilter.doFilter(SavedRequestFilter.java:56)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:360)
        at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:276)
        at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)
        at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)
        at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:344)
        at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:272)
        at org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:81)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)
        at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: java.util.Date with value Wed, 31 Dec 1969 18:00:00 CST
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:169)","davsclaus:1350508368:2012-10-18T05:12:48.191+0000:1350508368:2012-10-18T05:12:48.191+0000:Yes that date should be parsed in RFC 2822 format accordingly to:
http://en.wikipedia.org/wiki/List_of_HTTP_header_fields
davsclaus:1350509818:2012-10-18T05:36:58.659+0000:1350509818:2012-10-18T05:36:58.659+0000:Thanks for reporting.
amit1000:1350549578:2012-10-18T16:39:38.310+0000:1350549578:2012-10-18T16:39:38.310+0000:When are you planning to release 2.11.0?"
0,CAMEL-5709,Bug,Major,2.10.1,"2.10.3, 2.11.0","
None
",Resolved,Invalid,"2.10.3, 2.11.0",Claus Ibsen,Stijn Vranckx,0,2,2012-10-17 09:05:26+00:00,2012-10-17 13:11:31+00:00,"When using the http4 component in the following way:


<to uri=""http4://localhost:8090/axis2/services/BudgetManagementService?throwExceptionOnFailure=false""/>


The request gets send to the correct URI : http://localhost:8090/axis2/services/BudgetManagementService


When adding the additional parameter to determine the maxTotalConnections in the following way:


<to uri=""http4://localhost:8090/axis2/services/BudgetManagementService?throwExceptionOnFailure=false&maxTotalConnections=20""/>


This parameters is not remove from the URI and the request is send to:


http://localhost:8090/axis2/services/BudgetManagementService?maxTotalConnections=20


Which results in an error calling the webservice.","davsclaus:1350441580:2012-10-17T10:39:40.710+0000:1350441580:2012-10-17T10:39:40.710+0000:Its a documentation issue. I have updated the http4 wiki page.

There is a new table for component options, as you need to set this on the component.

For example these options is component level only
    protected int maxTotalConnections = 200;
    protected int connectionsPerRoute = 20;

bassegio14:1350447569:2012-10-17T12:19:29.359+0000:1350447569:2012-10-17T12:19:29.359+0000:Can you provide us with an example on how to use the maxTotalConnections parameters when using the http4 component in a spring context file.
davsclaus:1350449145:2012-10-17T12:45:45.082+0000:1350449145:2012-10-17T12:45:45.082+0000:Just as any other spring bean, eg as shown on http component page
http://camel.apache.org/http

{code}
<bean id=""http4"" class=""..."">
  // set the options here
</bean>
{code}

This applies to any of the Camel components."
0,CAMEL-5708,Improvement,Minor,2.10.1,"2.9.6, 2.10.4, 2.11.0","
None
",Closed,Fixed,"2.9.6, 2.10.4, 2.11.0",Christian Müller,Peter Salnikov,0,3,2012-10-17 07:49:40+00:00,2013-01-12 17:28:09+00:00,"Currently camel-smpp component gets username from address part of an uri
username@hostname
it's no ok when username is empty, because in that case I can't configure URI from properties


<inOnly uri=""smpp://smpp.username@smpp.address?password=smpp.password""/>


It will be more convenient and standard based if username will be passed via options:


<inOnly uri=""smpp://smpp.address?username=smpp.username&password=smpp.password""/>


in that case it will be easy and readable to put value to options file:


smpp.address=127.0.0.1:2775
smpp.username=
smpp.password=
smpp.from=3113","davsclaus:1350716524:2012-10-20T15:02:04.192+0000:1350716524:2012-10-20T15:02:04.192+0000:Peter, we love contributions. So you are welcome to work on a patch.
muellerc:1350738261:2012-10-20T21:04:21.955+0000:1350738261:2012-10-20T21:04:21.955+0000:IMO, it would be a  good addition to be able to override the systenId (user name) and password provided in the endpoint url with message headers.

I do not see any advantage to change the way how the systenId (user name) is configured in the url. The way we support in this component is the standard way and should be preferred. And you can of course use the Camel properties component to be able to set this value in a properties file.
muellerc:1357965622:2013-01-12T12:40:22.559+0000:1357965677:2013-01-12T12:41:17.487+0000:I plan to implement it in the way that if you use lazySessionCreation=true Camel will look up the in message header ""CamelSmppSystemId"" and ""CamelSmppPassword"" in the first exchange which receives at this producer. If both are present, Camel will use this system id (user name) and password to connect to the SMSC.

 [~psalnikov]: I think the best solution for your requirement is to use a producer template in a bean and build your SMPP endpoint url dynamicly. Than you can use the producer template like
{code}
Template template = context.createProducerTemplate();
Exchange result = template.request(endpointString, processor);
String messageId = result.getOut().getHeader(""CamelSmppId"", String.class);
...
{code}
muellerc:1357982889:2013-01-12T17:28:09.031+0000:1357982889:2013-01-12T17:28:09.031+0000:Updated the WIKI as well."
0,CAMEL-5707,Bug,Minor,"2.9.0, 2.10.0","2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-10-16 13:42:11+00:00,2012-10-16 13:47:32+00:00,In high concurrent tests the NotifyBuilder may miss a counter.,
0,CAMEL-5706,Bug,Major,2.10.1,2.11.0,"
None
",Resolved,Invalid,2.11.0,Claus Ibsen,David Carver,1,3,2012-10-15 18:25:45+00:00,2012-10-16 13:50:34+00:00,"I didn't see a component just for CSV so I'm filing this here.


1.  What version of CSV does camel-csv require.  As there has been no publicly released version, it seems you are using a version that is wrapped by service mix.


2. Is this component still supported, or has it been deprecated since there is no Camel-CSV jira component.


3. If still active, any chance of updating this to work with SuperCSV instead?  This has an official maven release, and is licensed as ASL 2.0 as well.


We have some production code currently that needs fixes from the current trunk of CSV but it looks like some functionality has been removed from CSV that was there before like the Writer package.  So guess need to know the status of this component so we can move forward.","davsclaus:1350366622:2012-10-16T13:50:22.835+0000:1350366622:2012-10-16T13:50:22.835+0000:Please use the mailing list for this kind of questions in the future.
http://camel.apache.org/support

camel-csv uses the Apache Commons CSV project and should continue to do so.
People in the community is much welcome to create a new Camel component that uses another project such as SuperCSV etc.

See details at how to contribute.
http://camel.apache.org/contributing.html

And a guide for creating new components is at
http://camel.apache.org/add-new-component-guide.html
"
0,CAMEL-5675,Improvement,Major,2.8.6,2.11.0,"

performance

",Resolved,Fixed,2.11.0,Claus Ibsen,Les Novell,1,3,2012-10-01 22:36:50+00:00,2012-10-05 07:12:34+00:00,"I am writing unit tests for Camel and found that each unit test was taking up to a second just to create the Camel routes. That's not very long, but we have a large unit test suite that needs to run quickly.


I did a performance profile and found that most of the time is going to the method org.apache.camel.util.IntrospectionSupport.getProperties(Object, Map, String). That method, then also calls IntrospectionSupport.isSetter(Method), and just running two unit tests I saw isSettter called 2.5 million times!


It seems to me that a cache per class of the properties would make a huge performance improvement on Camel route building.","davsclaus:1349159910:2012-10-02T14:38:30.040+0000:1349159910:2012-10-02T14:38:30.040+0000:I asume you have JMX enabled as well, as it does a fair bit of introspection as well.
davsclaus:1349162010:2012-10-02T15:13:30.066+0000:1349162010:2012-10-02T15:13:30.066+0000:Yeah I think we could have caching during startup of CamelContext. Having cache at runtime is a bit more problematic, as you would need to be able to limit the cache size. And as well have soft reference to avoid classloader issues etc.

Its easier to cache during startup only (and during shutdown as well) as we can control when caching is enabled/disable.
davidkarlsen@gmail.com:1349221236:2012-10-03T07:40:36.165+0000:1349221236:2012-10-03T07:40:36.165+0000:You could maybe use commons which has introspection cache already?
http://commons.apache.org/beanutils/xref/org/apache/commons/beanutils/PropertyUtils.html
davsclaus:1349224771:2012-10-03T08:39:31.634+0000:1349224771:2012-10-03T08:39:31.634+0000:Well even with some caching it only speedup for very big routes.

Les, can you tell us a bit about your setup? How many tests do you run? Do you have many routes, and are they small/big etc?
And do you have JMX enabled during testing?

For the Camel tests of itself there is hardly a speedup (many small route tests). And most tests have disabled JMX.

For a big route with 1000 nodes and JMX enabled, I could cut down startup time with 1.5-2s. But just wonder who would have such big routes?
davsclaus:1349237840:2012-10-03T12:17:20.454+0000:1349237840:2012-10-03T12:17:20.454+0000:I have attached a patch which has caching on JMX and IntrospectionSupport. 

The most noticeable performance improvements is when JMX is enabled, and if you have large routes.

The big route tests is about cut down from 8s to 4s on startup (looking at the startup time Camel reports itself).
davsclaus:1349237905:2012-10-03T12:18:25.591+0000:1349237905:2012-10-03T12:18:25.591+0000:David,

Thanks for the link. There is although already a cache in Camel we can leverage, LRUSoftCache.
davsclaus:1349239382:2012-10-03T12:43:02.207+0000:1349239382:2012-10-03T12:43:02.207+0000:Screenshot from profiler with full tracing enabled.

Running the big route test (lowered to 500, instead of 1000 nodes)

Apache Camel  (CamelContext: camel-1) started in 4.958 seconds
davsclaus:1349239606:2012-10-03T12:46:46.743+0000:1349239606:2012-10-03T12:46:46.743+0000:after screenshot with patch.

Notice the much lower invocation count, and the self time is also much lower.

Apache Camel  (CamelContext: camel-1) started in 2.447 seconds
davsclaus:1349240569:2012-10-03T13:02:49.333+0000:1349240569:2012-10-03T13:02:49.333+0000:Should be faster now, and no longer so high invocation counts.
lesnovell:1349357419:2012-10-04T21:30:19.068+0000:1349357419:2012-10-04T21:30:19.068+0000:Wow, thank you Claus. I was off work yesterday & surprised to come back today and see this issue already addressed :) I will definitely give the changes a try & report back the results.

I agree that the overall performance is generally OK. It was taking 1/2 - 1 sec to initialize our routes. We were also applying advice in order to mock out certain routes, which causes the routes to be stopped and restarted. All this caused a unit test to take 1-2 seconds on average.  We try and target our unit tests to run in <1/10 second, since our unit test suite is large (1200+ tests).

Your fix to the Introspection classes should help immensely. 

Much Thanks,
Les
davsclaus:1349387900:2012-10-05T05:58:20.399+0000:1349387900:2012-10-05T05:58:20.399+0000:If you run Camel 2.9+ then in the unit tests you can tell Camel that you use advice with, as said in the green box at
http://camel.apache.org/advicewith.html

That should avoid the restart of routes.
davsclaus:1349392354:2012-10-05T07:12:34.154+0000:1349392354:2012-10-05T07:12:34.154+0000:I did change the cache to use weak reference based. So if you have already run some tests, then try again with latest code from trunk."
0,CAMEL-5674,Task,Minor,2.10.1,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Christian Müller,0,2,2012-10-01 21:41:16+00:00,2013-01-07 12:23:09+00:00,No Desc,davsclaus:1357532589:2013-01-07T12:23:09.846+0000:1357532589:2013-01-07T12:23:09.846+0000:We have already upgraded to 2.6.0
0,CAMEL-5673,Improvement,Minor,2.10.1,2.11.0,"
None
",Resolved,Implemented,2.11.0,Christian Müller,Christian Müller,0,2,2012-10-01 21:36:46+00:00,2012-10-03 12:31:51+00:00,See http://camel.465427.n5.nabble.com/Access-XSD-Resources-in-from-an-OSGI-bundle-tp5720312.html,"davsclaus:1349236937:2012-10-03T12:02:17.359+0000:1349236937:2012-10-03T12:02:17.359+0000:There is already such an test
https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/core/validator/
muellerc:1349238711:2012-10-03T12:31:51.088+0000:1349238711:2012-10-03T12:31:51.088+0000:Ah, great. I was looking for a package like 'org.apache.camel.itest.osgi.validator'..."
0,CAMEL-5672,Task,Trivial,None,None,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Babak Vahdat,0,1,2012-10-01 12:57:14+00:00,2012-10-01 13:56:01+00:00,"Apparently while unit-testing / integration-testing inside the Camel modules the usage of System.out / System.error PrintStream for logging is not a good idea, some reasons for this are:



In case you make use of ConsoleAppender inside the module camel-xyz then you get a mix of unformatted System.out / System.error dumps together with the proper logs (having timestamp, thread-name, class-name etc.)
In case you make use of an appender other than ConsoleAppender (e.g. FileAppender) then your logs are scattered, partially being inside camel-xyz-test.log and the rest being logged inside your console!
Through the proper usage of slf4j API inside tests (instead of System.out / System.error PrintStream) you get much more context information for free (depending on the concrete log4j ConversionPattern you make use of) like the actual thread-name or the class-name etc.
Last but not least making use of System.out / System.error PrintStream inside tests brings outputs like the following (as the surefire-plugin runs) which is just annoying:




Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.193 sec
Running org.apache.camel.cdi.XmlRoutesFromURLTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.17 sec
Running org.apache.camel.cdi.component.properties.PropertiesComponentTest
This is the output of my System.out.println() call...
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.692 sec",bvahdat:1349070961:2012-10-01T13:56:01.931+0000:1349070961:2012-10-01T13:56:01.931+0000:Totally spotted 60 java sources making use of {{System.out}} or {{System.error PrintStream}} for logging.
0,CAMEL-5671,Test,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,1,1,2012-10-01 12:46:12+00:00,2013-01-08 09:48:05+00:00,"See AMQ-3723


We should add a test to tests in spring 3.1 to have a test that has an embedded <camelContext> in a spring beans which has a profile associated.


This is to ensure the namespace handler works with profiles.


It was not supported for ActiveMQ and hence AMQ-3723.",
0,CAMEL-5670,Bug,Minor,2.10.1,"2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,Stefan Hudelmaier,0,2,2012-10-01 08:44:10+00:00,2012-10-06 15:12:11+00:00,"Hi, 


from time to time, we get the following exception when producing messages via camel-mqtt:






Caused by: java.lang.NullPointerException
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:551)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:545)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:166)
	at org.apache.camel.component.mqtt.MQTTProducer.doProcess(MQTTProducer.java:66)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:38)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
[...]




From looking at the source of both camel-mqtt and the fusesource mqtt client, it looks like that this is caused by the mqtt-client being disconnected and trying to invoke the onFailure method on the callback:


CallbackConnection.java
public void publish(UTF8Buffer topic, Buffer payload, QoS qos, boolean retain, Callback<Void> cb) {
        queue.assertExecuting();
        if( disconnected ) {
            cb.onFailure(createDisconnectedError());
            return;
        }
        PUBLISH command = new PUBLISH().qos(qos).retain(retain);
        command.topicName(topic).payload(payload);
        send(command, cb);
    }




camel-mqtt passes in null for the callback though. Wouldn't it be better if a more fitting exception were thrown, or if camel passed in a Callback in order to receive the onFailure event when disconnected from the broker?","davsclaus:1349507531:2012-10-06T15:12:11.264+0000:1349507531:2012-10-06T15:12:11.264+0000:Thanks for reporting. A callback is now provided. I also polished the code and added a bit bitter logging etc.

And also made the mqtt producer leverage the async routing engine."
0,CAMEL-5669,New Feature,Minor,None,2.11.1,"
None
",Closed,Duplicate,2.11.1,Unassigned,Claus Ibsen,0,2,2012-09-30 10:03:03+00:00,2013-08-16 18:45:37+00:00,"Look into how it can be possible to add custom soap headers to using spring-ws.


See nabble
http://camel.465427.n5.nabble.com/Adding-custom-soap-header-in-camel-spring-ws-tp5719609.html",rkettelerij:1376649937:2013-08-16T18:45:37.946+0000:1376649937:2013-08-16T18:45:37.946+0000:Closing this one since it's a duplicate of CAMEL-4515 which is fixed in 2.11.1.
0,CAMEL-5668,Bug,Minor,"2.9.0, 2.10.0","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Claus Ibsen,0,3,2012-09-30 09:55:17+00:00,2012-10-08 02:00:53+00:00,"See nabble
http://camel.465427.n5.nabble.com/Help-with-nmr-cxf-endpoints-and-fault-handling-tp5719720.html


If a response is fault=true, then we should force the http response code to be 500. Which is what the SOAP 1.1 spec mandates.


See section 6.2 at: http://www.w3.org/TR/soap11/#_Ref477795996","jwcarman:1349026772:2012-10-01T01:39:32.228+0000:1349026772:2012-10-01T01:39:32.228+0000:I believe this is reported against the wrong component.  The issue actually lies within the HTTP component in the DefaultHttpBinding class.
jwcarman:1349027741:2012-10-01T01:55:41.729+0000:1349027741:2012-10-01T01:55:41.729+0000:Here's a patch that implements what I think you're looking for.  I should probably add a test in the http component also, since that's where the actual code change takes place.
jwcarman:1349028756:2012-10-01T02:12:36.280+0000:1349028756:2012-10-01T02:12:36.280+0000:Here's another patch that patches both the http and http4 components.
jwcarman:1349028859:2012-10-01T02:14:19.153+0000:1349028859:2012-10-01T02:14:19.153+0000:We should really think about consolidating this code.  There are some value-adds in the http component that aren't in the http4 component.  They're virtually the same exact code.  There has to be a way to extract a superclass from this and create some abstract supermodule that they can both reference.
njiang:1349030503:2012-10-01T02:41:43.932+0000:1349030503:2012-10-01T02:41:43.932+0000:@James,
Yes, we need to share these code in a common http module to avoid updating the code in camel-http and camel-http4 modules.
njiang:1349033589:2012-10-01T03:33:09.058+0000:1349033589:2012-10-01T03:33:09.058+0000:Applied the patch with thanks to James, I also fix the test errors of camel-jetty caused by this change.
jwcarman:1349085961:2012-10-01T18:06:01.195+0000:1349085961:2012-10-01T18:06:01.195+0000:Sorry about introducing the test failure.  I saw that late last night and didn't have time to fix it.  
njiang:1349632853:2012-10-08T02:00:53.780+0000:1349632853:2012-10-08T02:00:53.780+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5667,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-09-29 07:15:21+00:00,2012-10-12 12:14:06+00:00,"camel-scala wraps the camel java EIP DSL, we need to add more wrap methods as there are some improvements on the camel java EIP DSL.",njiang:1350015246:2012-10-12T12:14:06.052+0000:1350015246:2012-10-12T12:14:06.052+0000:Applied the patch into trunk.
0,CAMEL-5666,Bug,Major,2.10.1,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Willem Jiang,liugang,0,3,2012-09-29 04:40:47+00:00,2012-09-30 01:06:27+00:00,"the signature of ""errorHandler()"" seems changed from ""public RouteBuilder errorHandler(ErrorHandlerBuilder errorHandlerBuilder)"" to ""public void errorHandler(ErrorHandlerBuilder errorHandlerBuilder)""
So if I have a route compiled on and old version camel (for example, 2.9.3) which includes an ErrorHandler component, then it doesn't work again on 2.10.1","njiang:1348869179:2012-09-29T05:52:59.165+0000:1348869179:2012-09-29T05:52:59.165+0000:The change is to fix the issue of CAMEL-5032. 
I'm afraid you need to compile your route builder with Camel 2.10.x this time.
gangliu:1348875244:2012-09-29T07:34:04.914+0000:1348875244:2012-09-29T07:34:04.914+0000:嗯。了解。（测试一下你应该能看懂中文，呵呵）
OK. understand, but in this case, we may lost the compatibility. I have no chioce but re-compile, right?

However it also resolve me another problem: *Since the return type is a ""RouteBuilder"" at previous version, then user can write some code like ""errorHandler().from(...)..."" which looks like the bug [CAMEL-5032|https://issues.apache.org/jira/browse/CAMEL-5032]*

BTW, The JMX statistics for some component, for example ""setBody"", ""setHeader"" , doesn't exist. could you have a check? or I have to create an issue for that? 谢谢！

davsclaus:1348894958:2012-09-29T13:02:38.389+0000:1348894958:2012-09-29T13:02:38.389+0000:Please use english language so everybody can understand.

Yes you would need to recompile, that can be expected/needed to do when upgrading minor releases (eg 2.9 to 2.10). However we strive to keep patch releases (eg 2.9.2 -> 2.9.3) as binary compatible and as a drop in replacement.

And yes for other matters create a new JIRA. 
davsclaus:1348895037:2012-09-29T13:03:57.256+0000:1348895037:2012-09-29T13:03:57.256+0000:And btw dont stack code like errorHandler(xxx).from(xx).

That should be in separate code statements. As shown on all the Camel examples and docs as you can see on the Camel site.
{code}
errorHandler(xxx);

from(yyy)
  .to(zzz);
{code}


gangliu:1348930404:2012-09-29T22:53:24.560+0000:1348930404:2012-09-29T22:53:24.560+0000:Sorry, I will take care the language in future.
and I will create an issue about jmx problem. but it's better if we can have a full check for all components from camel side, seems there are many components have this problem, and we fired an issue before [onException|https://issues.apache.org/jira/browse/CAMEL-5191]
njiang:1348938387:2012-09-30T01:06:27.541+0000:1348938387:2012-09-30T01:06:27.541+0000:Please using the mailing list first before you fill a JIRA.
It could be more effective for us to track the issue if we start a discuss in the mailing list first."
0,CAMEL-5664,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-09-29 03:41:16+00:00,2012-09-29 05:46:19+00:00,"There are some deprecated camel-core API still be used in camel-scala module, we need to revisit them and add the wrap method which uses the prefer method.",njiang:1348868779:2012-09-29T05:46:19.052+0000:1348868779:2012-09-29T05:46:19.052+0000:Applied the patch into trunk now.
0,CAMEL-5663,Bug,Minor,None,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-28 09:49:52+00:00,2012-09-28 09:54:02+00:00,"This check is missing.


Which mean that prototype scoped bean would have been regarded as singleton by Camel.",
0,CAMEL-5662,Task,Minor,None,Future,"
None
",Resolved,Implemented,Future,Willem Jiang,Willem Jiang,0,2,2012-09-28 09:20:10+00:00,2014-03-02 13:03:39+00:00,"It looks like the Spring-data-neo4j will using the new version of Neo4j which could be friendly for OSGi bundle classloader.
We could create a camel-neo4j feature after the new Spring-data-neo4j is released.","njiang:1354495662:2012-12-03T08:47:42.136+0000:1354495662:2012-12-03T08:47:42.136+0000:I just checked the Neo4j-kernel 1.8 which is used with the latest spring-data-neo4j, it doesn't exports the packages of OSGi.
Maybe we still need to wait for a while when the user ask for this kind of feature.
davsclaus:1354527234:2012-12-03T17:33:54.502+0000:1354527234:2012-12-03T17:33:54.502+0000:Also a problem with 1.8 is that it uses some RC releases and they are not in maven central etc.
davsclaus:1393736619:2014-03-02T13:03:39.349+0000:1393736619:2014-03-02T13:03:39.349+0000:This is implemented in camel-extra where camel-spring-neo4j component lives"
0,CAMEL-5661,Improvement,Minor,None,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-28 08:49:10+00:00,2012-09-28 09:26:54+00:00,"This allows services to shutdown before the executor service, in case some services have been added later than the executor service itself.


This ensures that the executor service is shutdown later and can do its fail-safe shutdown of left over thread pools.",
0,CAMEL-5660,Improvement,Major,None,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-28 08:17:03+00:00,2012-09-28 09:54:18+00:00,"When using these annotations, you are in control of the lifecycle. But if you use a @Consume on a method its harder to stop the consumer.


We should offer an option on the annotation to tie it to the lifecycle of its CamelContext, so when the CamelContext is shutdown, they are shutdown as well.


The option should allow to turn this on|off.","davsclaus:1348795665:2012-09-28T09:27:45.399+0000:1348795665:2012-09-28T09:27:45.399+0000:Singleton beans is auto closed, so it would only apply to prototype scoped which wont make much sense."
0,CAMEL-5659,Improvement,Major,2.10.1,None,"
None
",Resolved,Fixed,"2.8.7, 2.9.4, 2.10.2, 2.11.0",Jonathan Anstey,Jonathan Anstey,0,2,2012-09-27 17:12:47+00:00,2012-10-03 11:27:51+00:00,The current size is 2048 bytes by default. When large numbers of CachedOutputStreams are created an OOM Error may occur - if we could tune this variable we could avoid some occurrences of the OOM.,"bvahdat:1349209491:2012-10-03T04:24:51.510+0000:1349209491:2012-10-03T04:24:51.510+0000:An awesome patch :-)

I just spotted svn talking about a merge conflict to be there as you backported the patch to the 2.10.x & 2.9.x branches:

http://camel.465427.n5.nabble.com/svn-commit-r1391115-in-camel-branches-camel-2-10-x-camel-core-src-main-java-org-apache-camel-converta-td5720150.html
http://camel.465427.n5.nabble.com/svn-commit-r1391133-in-camel-branches-camel-2-9-x-camel-core-src-main-java-org-apache-camel-convertea-td5720151.html

I also updated the Wiki to be more precise about this new feature:

http://camel.465427.n5.nabble.com/CONF-Apache-Camel-gt-Stream-caching-td5720419.html
http://camel.465427.n5.nabble.com/CONF-Apache-Camel-gt-Camel-2-11-0-Release-td5720421.html

janstey:1349234179:2012-10-03T11:16:19.700+0000:1349234179:2012-10-03T11:16:19.700+0000:Hey Babak,

When committing via Git, text about the merge conflicts (which are resolved before commit) is added to the commit message. So, nothing to worry about there :)

Thanks for updating the wiki!

Cheers,
Jon"
0,CAMEL-5658,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-27 14:28:30+00:00,2012-09-27 15:32:19+00:00,This makes it easier to create a new thread (without thread pool) using the Camel API. This can be used for single one-stop-short-lived tasks where the thread should just terminate after usage.,davsclaus:1348731139:2012-09-27T15:32:19.628+0000:1348731139:2012-09-27T15:32:19.628+0000:API change so not backporting
0,CAMEL-5657,Bug,Minor,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-27 14:15:09+00:00,2012-09-27 14:20:33+00:00,"We should shutdown the thread pool for recipient list if a pool was in use, and it can be shutdown.


The logic in doShutdown is missing that.


Camel would though have a fail-safe when it shutdown itself to shutdown that pool otherwise. But we should shutdown when the EIP is shutdown itself.",
0,CAMEL-5656,Improvement,Minor,None,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-27 13:39:30+00:00,2012-09-27 13:46:32+00:00,When using JMX Connector then its started async using a single thread pool. This is not needed as the thread should be terminated after usage.,"davsclaus:1348724517:2012-09-27T13:41:57.176+0000:1348724517:2012-09-27T13:41:57.176+0000:2012-09-27 15:28:10,082 [main           ] WARN  DefaultExecutorServiceManager  - Forcing shutdown of ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@54c8ab35[Running, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1][JMXConnector: service:jmx:rmi:///jndi/rmi://davsclaus.lan:1099/jmxrmi/camel]"
0,CAMEL-5655,Bug,Major,2.10.1,"2.9.4, 2.10.2, 2.11.0","

camelContextId
endpoint
spring

",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Anton Koscejev,0,2,2012-09-27 10:02:26+00:00,2012-09-27 11:40:16+00:00,"Camel Endpoint, if configured outside camelContext element in Spring configuration, ignores camelContextId property. 


Steps to reproduce: Configure two contexts in spring configuration. Then in the same config file configure two  endpoints outside camelContext, but with camelContextId specified. Both endpoints will be created pointing to the same (first) camel context, despite being configured to different contexts. Attempting to use them by reference results in failure, as endpoint camelContext doesn't match the expected one.","davsclaus:1348714323:2012-09-27T10:52:03.948+0000:1348714503:2012-09-27T10:55:03.946+0000:Can you post a sample.
davsclaus:1348715421:2012-09-27T11:10:21.293+0000:1348715421:2012-09-27T11:10:21.293+0000:Thanks I have the issue reproduced
koscejev:1348715504:2012-09-27T11:11:44.116+0000:1348715565:2012-09-27T11:12:45.407+0000:Attached a test suite. It fails to create ApplicationContext (not on assert). Proxy requests an endpoint by reference, which is found in Spring ApplicationContext, but with a different CamelContext specified.
davsclaus:1348717216:2012-09-27T11:40:16.055+0000:1348717216:2012-09-27T11:40:16.055+0000:Thanks for reporting."
0,CAMEL-5654,Task,Minor,None,,"
None
",Resolved,Implemented,None,Unassigned,Claus Ibsen,0,1,2012-09-27 07:30:25+00:00,2014-03-04 14:19:59+00:00,There is a slight API change so we should not backport this change.,"davsclaus:1348704568:2012-09-27T08:09:28.514+0000:1348704568:2012-09-27T08:09:28.514+0000:Stopping the restlet component now takes a lot longer time. Would need to dig into this to figure this out. As unit testing takes too long time.
davsclaus:1393913999:2014-03-04T14:19:59.369+0000:1393913999:2014-03-04T14:19:59.369+0000:We are on 2.1 now
org.restlet.osgi:org.restlet:jar:2.1.7:compile"
0,CAMEL-5653,Bug,Major,"2.10.0, 2.10.1","2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.10.2, 2.11.0",Ioannis Canellos,Ioannis Canellos,0,1,2012-09-27 00:36:48+00:00,2012-09-27 18:43:34+00:00,"In many cases the user would specify the families/columns of interest as part of the uri and then just specify the row id as part of the headers.


The way it currently works, it requires at least one family/column along with the row id as part of the headers.",iocanel:1348742614:2012-09-27T18:43:34.174+0000:1348742614:2012-09-27T18:43:34.174+0000:Committed to trunk and 2.10.x branch.
0,CAMEL-5652,Improvement,Minor,None,,"
None
",Resolved,Fixed,None,Ioannis Canellos,Ioannis Canellos,0,1,2012-09-26 15:39:14+00:00,2012-09-27 18:43:54+00:00,"Currently, the unit tests provided from the camel-hbase model, use dummy family and column names, that have no meaning at all.


This makes them hard to read and understand.


It would make some sense to give some additional love to the unit test, so that people can better understand how they work when they read them.",
0,CAMEL-5651,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,3,2012-09-26 14:41:47+00:00,2013-01-18 16:28:26+00:00,"Control Bus EIP
http://www.eaipatterns.com/ControlBus.html


I think we should consider a control bus EIP (eg implemented as a component).


Then people can manage their Camel apps by sending messages to a control bus endpoint.


For example to



start a route
stop a route
get statistics
shutdown camel (???)



eg a bit like what you can do with JMX management, but over Camel endpoint.


To trick would be to find a message format the control bus can parse. For example should we use a header for the command.


But that also makes it easier for people to start|stop a route from a route. Now just send a message to an endpoint, for example using wire tap.



from x
  to y
  wire tap (""controlbus:action=start-route&param=route2"")




Would need to give some more thought about the syntax and what to be supported by the control bus.","davsclaus:1348642023:2012-09-26T14:47:03.419+0000:1348642023:2012-09-26T14:47:03.419+0000:If we go a bit wacky then the control bus, could potential also be used for creating new routes, eg if the message body is an XML representation of a route. Likewise for updating existing route. Eg what we offer over JMX for that, and also what the Camel Karaf commands uses to show routes etc.
alanfoster:1348642655:2012-09-26T14:57:35.759+0000:1348642655:2012-09-26T14:57:35.759+0000:@[~davsclaus] Just a question about your notation, is the ""="" supposed to be a query string? ie

{code}
wiretap(""controlbus:name?action=start-route&param=route2"")
{code}

I can look into this, but if you wish to do this instead of me I understand

Alan
davsclaus:1348642963:2012-09-26T15:02:43.929+0000:1348642963:2012-09-26T15:02:43.929+0000:No I have not fleshed out any details yet.
Just wanted to record the JIRA because the control bus EIP is a bit missing in Camel.

Fell free to dive into this. 

Would love more feedback from other Camel riders about this. 
For starters being able to manage routes would be nice, eg just to start|stop|suspend|resume|shutdown|remove etc. And notice that when stopping/shutdown there is an optional timeout as well.

And the uri syntax is not set in stone. Feel free to give that some thought.
cwash:1351590253:2012-10-30T17:44:13.717+0000:1351590329:2012-10-30T17:45:29.842+0000:My client is requesting this... 

Agreed that the big outstanding question is around message format, if it can be standardized.  Spring Integration does support this EIP - but I haven't looked at the implementation.  To the extent that the command syntax can align with any exposed JMX capabilities would help... perhaps a convention for calling operations on a specific MBean?  I'm not an expert on JMX - understand there is a security model and stuff in place there as well that should be thought out, but cohesion between the two interfaces would be a big plus in my book.
davsclaus:1351660781:2012-10-31T13:19:41.487+0000:1351660781:2012-10-31T13:19:41.487+0000:Yeah the control bus ought to be able to use the management API. That allows you to control much out of the box then.
Though for people disabling JMX we may offer limited management using the API on CamelContext to control routes etc.

We should also allow to gather statistics which you can do from the management API. But in bulk as well.
Then you can do alike ActiveMQ which supports a plugin to gather stats, by sending a message to a queue.
http://activemq.apache.org/statisticsplugin.html

The SI control bus, is based on executing either a Spring Expression or Groovy expression, which you send in the message body.

alanfoster:1351687780:2012-10-31T20:49:40.331+0000:1351687780:2012-10-31T20:49:40.331+0000:Hi, I'm sorry for not posting any updates on this. I've been very tied with commitments recently and I haven't been able to get a solid start to this sadly

If anyone wants to complete this task then I am okay with this.

Apologies
Alan


davsclaus:1351731100:2012-11-01T08:51:40.985+0000:1351731100:2012-11-01T08:51:40.985+0000:Lets get a first cut into Camel, and then we can expand on this EIP later.
davsclaus:1351755721:2012-11-01T15:42:01.863+0000:1351755721:2012-11-01T15:42:01.863+0000:Added a simple ControlBus EIP as a component, which makes it easy, as you just send a message to an endpoint.

Some docs here
https://cwiki.apache.org/confluence/display/CAMEL/ControlBus+Component
davsclaus:1358497706:2013-01-18T16:28:26.517+0000:1358497706:2013-01-18T16:28:26.517+0000:We got a basic control bus now. We can always later enhance if needed."
0,CAMEL-5650,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Ioannis Canellos,Ioannis Canellos,0,1,2012-09-26 10:20:52+00:00,2012-09-28 07:43:09+00:00,"We can upgrade to jclouds and jclouds karaf 1.5.0 and replace some deprecated code references.


Also we should make sure that camel-jclouds can also work with jclouds apis and not only jclouds providers.",
0,CAMEL-5649,Improvement,Major,None,None,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,2,2012-09-25 14:30:50+00:00,2012-09-26 13:02:42+00:00,"JBoss Weld complaints that ""org.apache.Camel.builder.BuilderSupport"" is not proxyable as there is no by default constructor with no args. 


""WELD-001435 Normal scoped bean class org.apache.camel.builder.BuilderSupport is not proxyable because it has no no-args constructor ""","romain.manni-bucau:1348635762:2012-09-26T13:02:42.291+0000:1348635762:2012-09-26T13:02:42.291+0000:public class VetoExtension implements Extension
{
    protected void vetoInternalsBean(@Observes ProcessAnnotatedType<Object> processAnnotatedType)
    {
        Class beanClass = processAnnotatedType.getAnnotatedType().getJavaClass();
        if(BuilderSupport.class.isAssignableFrom(beanClass))
        {
            processAnnotatedType.veto();
        }
    }
}"
0,CAMEL-5648,Task,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Babak Vahdat,0,3,2012-09-25 11:53:20+00:00,2012-09-26 10:35:16+00:00,"See the discussion here: 
http://camel.465427.n5.nabble.com/Build-on-trunk-fails-camel-example-cdi-td5719732.html


According to what we say here the two glassfish & jboss profiles should work out-of-the-box for the users:
https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-cdi/README.txt


However the deployment using the glassfish profile ends up with a NullPointerException:



~/dev/workspace/camel/examples/camel-example-cdi>mvn deploy -Pglassfish
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-cdi:war:2.11-SNAPSHOT
[WARNING] The expression ${artifactId} is deprecated. Please use ${project.artifactId} instead.
[WARNING] The expression ${artifactId} is deprecated. Please use ${project.artifactId} instead.
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CDI 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/surefire-reports
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/classes] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Webapp assembled in [138 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-embedded-glassfish-plugin:3.1.1:run (default) @ camel-example-cdi ---
Created New Bootstrap ClassLoader. ServerId = maven, ClassPaths = 
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/extras/glassfish-embedded-all/3.1.1/glassfish-embedded-all-3.1.1.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/maven-embedded-glassfish-plugin/3.1.1/maven-embedded-glassfish-plugin-3.1.1.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/osgi/org.osgi.core/4.2.0/org.osgi.core-4.2.0.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/simple-glassfish-api/3.1.1/simple-glassfish-api-3.1.1.jar
25.09.2012 13:28:23 com.sun.enterprise.v3.server.CommonClassLoaderServiceImpl findDerbyClient
INFO: Cannot find javadb client jar file, derby jdbc driver will not be available by default.
25.09.2012 13:28:23 org.hibernate.validator.util.Version <clinit>
INFO: Hibernate Validator null
25.09.2012 13:28:23 org.hibernate.validator.engine.resolver.DefaultTraversableResolver detectJPA
INFO: Instantiated an instance of org.hibernate.validator.engine.resolver.JPATraversableResolver.
25.09.2012 13:28:23 PluginUtil getGlassFish
INFO: Created GlassFish ServerId = maven, BootstrapProperties = {GlassFish_Platform=Static}, GlassFishRuntime = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime@398f1ef8, GlassFishProperties = {embedded-glassfish-config.server.network-config.network-listeners.network-listener.http-listener.enabled=true, embedded-glassfish-config.server.network-config.network-listeners.network-listener.http-listener.port=8080}, GlassFish = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime$1@633a494d, GlassFish Status = INIT, TimeTaken = 652 ms
25.09.2012 13:28:23 com.sun.enterprise.v3.services.impl.GrizzlyService createNetworkProxy
INFO: Network listener https-listener on port 0 disabled per domain.xml
25.09.2012 13:28:23 com.sun.enterprise.v3.server.AppServerStartup run
INFO: GlassFish Server Open Source Edition 3.1.1 (12) startup time : Embedded (524ms), startup services(264ms), total(788ms)
25.09.2012 13:28:23 com.sun.enterprise.v3.services.impl.GrizzlyProxy$2$1 onReady
INFO: Grizzly Framework 1.9.36 started in: 75ms - bound to [0.0.0.0:8080]
25.09.2012 13:28:23 org.glassfish.admin.mbeanserver.JMXStartupService$JMXConnectorsStarterThread run
INFO: JMXStartupService: JMXConnector system is disabled, skipping.
25.09.2012 13:28:24 PluginUtil startGlassFish
INFO: Started GlassFish ServerId = maven, GlassFish = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime$1@633a494d, TimeTaken = 440 ms
25.09.2012 13:28:26 com.sun.enterprise.security.SecurityLifecycle <init>
INFO: SEC1002: Security Manager is OFF.
25.09.2012 13:28:26 com.sun.enterprise.security.SecurityLifecycle onInitialization
INFO: SEC1010: Entering Security Startup Service
25.09.2012 13:28:26 com.sun.enterprise.security.PolicyLoader loadPolicy
INFO: SEC1143: Loading policy provider com.sun.enterprise.security.jacc.provider.SimplePolicyProvider.
25.09.2012 13:28:26 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.
25.09.2012 13:28:26 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.
25.09.2012 13:28:26 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.
25.09.2012 13:28:26 com.sun.enterprise.security.SecurityLifecycle onInitialization
INFO: SEC1011: Security Service(s) Started Successfully
25.09.2012 13:28:26 com.sun.enterprise.web.WebContainer createHttpListener
INFO: WEB0169: Created HTTP listener [http-listener] on host/port [0.0.0.0:8080]
25.09.2012 13:28:26 com.sun.enterprise.web.WebContainer createHosts
INFO: WEB0171: Created virtual server [server]
25.09.2012 13:28:26 com.sun.enterprise.web.WebContainer loadSystemDefaultWebModules
INFO: WEB0172: Virtual server [server] loaded default web module []
classLoader = WebappClassLoader (delegate=true; repositories=WEB-INF/classes/)
SharedSecrets.getJavaNetAccess()=java.net.URLClassLoader$7@67635d96
25.09.2012 13:28:28 com.sun.ejb.containers.BaseContainer initializeHome
INFO: Portable JNDI names for EJB MyRoutes : [java:global/myapp/MyRoutes!org.apache.camel.example.cdi.MyRoutes, java:global/myapp/MyRoutes]
25.09.2012 13:28:28 org.jboss.weld.bootstrap.WeldBootstrap <clinit>
INFO: WELD-000900 SNAPSHOT
25.09.2012 13:28:28 org.hibernate.validator.engine.resolver.DefaultTraversableResolver detectJPA
INFO: Instantiated an instance of org.hibernate.validator.engine.resolver.JPATraversableResolver.
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.config.ConfigurationExtension activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.GlobalAlternative activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.CustomProjectStageBeanFilter activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exception.control.extension.ExceptionControlExtension activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.message.MessageBundleExtension activated=true
25.09.2012 13:28:28 org.apache.deltaspike.core.util.ProjectStageProducer initProjectStage
INFO: Computed the following DeltaSpike ProjectStage: Production
25.09.2012 13:28:29 org.glassfish.internal.data.ModuleInfo start
SCHWERWIEGEND: Exception while invoking class org.glassfish.ejb.startup.EjbApplication start method
javax.ejb.EJBException: javax.ejb.CreateException: Initialization failed for Singleton MyRoutes
	at com.sun.ejb.containers.AbstractSingletonContainer$SingletonContextFactory.create(AbstractSingletonContainer.java:721)
	at com.sun.ejb.containers.AbstractSingletonContainer.instantiateSingletonInstance(AbstractSingletonContainer.java:451)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.initializeSingleton(SingletonLifeCycleManager.java:216)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.initializeSingleton(SingletonLifeCycleManager.java:177)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.doStartup(SingletonLifeCycleManager.java:155)
	at org.glassfish.ejb.startup.EjbApplication.start(EjbApplication.java:177)
	at org.glassfish.internal.data.EngineRef.start(EngineRef.java:130)
	at org.glassfish.internal.data.ModuleInfo.start(ModuleInfo.java:269)
	at org.glassfish.internal.data.ApplicationInfo.start(ApplicationInfo.java:294)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:462)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:240)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:382)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$1.execute(CommandRunnerImpl.java:355)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:370)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1064)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1200(CommandRunnerImpl.java:96)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1244)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1232)
	at com.sun.enterprise.admin.cli.embeddable.DeployerImpl.deploy(DeployerImpl.java:129)
	at com.sun.enterprise.admin.cli.embeddable.DeployerImpl.deploy(DeployerImpl.java:105)
	at org.glassfish.maven.PluginUtil.doDeploy(PluginUtil.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.glassfish.maven.AbstractDeployMojo.doDeploy(AbstractDeployMojo.java:239)
	at org.glassfish.maven.RunMojo.execute(RunMojo.java:68)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: javax.ejb.CreateException: Initialization failed for Singleton MyRoutes
	at com.sun.ejb.containers.AbstractSingletonContainer.createSingletonEJB(AbstractSingletonContainer.java:547)
	at com.sun.ejb.containers.AbstractSingletonContainer.access$100(AbstractSingletonContainer.java:79)
	at com.sun.ejb.containers.AbstractSingletonContainer$SingletonContextFactory.create(AbstractSingletonContainer.java:719)
	... 47 more
Caused by: java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:768)
	at org.jboss.weld.manager.BeanManagerImpl.getBean(BeanManagerImpl.java:1209)
	at org.jboss.weld.manager.BeanManagerImpl.getBean(BeanManagerImpl.java:144)
	at org.glassfish.weld.services.JCDIServiceImpl._createJCDIInjectionContext(JCDIServiceImpl.java:169)
	at org.glassfish.weld.services.JCDIServiceImpl.createJCDIInjectionContext(JCDIServiceImpl.java:146)
	at com.sun.ejb.containers.BaseContainer.createEjbInstanceAndContext(BaseContainer.java:1636)
	at com.sun.ejb.containers.AbstractSingletonContainer.createSingletonEJB(AbstractSingletonContainer.java:489)
	... 49 more
25.09.2012 13:28:29 org.glassfish.api.ActionReport failure
SCHWERWIEGEND: Exception while loading the app
classLoader = WebappClassLoader (delegate=true; repositories=WEB-INF/classes/)
SharedSecrets.getJavaNetAccess()=java.net.URLClassLoader$7@67635d96
25.09.2012 13:28:29 org.glassfish.deployment.admin.DeployCommand execute
SCHWERWIEGEND: Exception while loading the app : javax.ejb.CreateException: Initialization failed for Singleton MyRoutes
javax.ejb.CreateException: Initialization failed for Singleton MyRoutes
	at com.sun.ejb.containers.AbstractSingletonContainer.createSingletonEJB(AbstractSingletonContainer.java:547)
	at com.sun.ejb.containers.AbstractSingletonContainer.access$100(AbstractSingletonContainer.java:79)
	at com.sun.ejb.containers.AbstractSingletonContainer$SingletonContextFactory.create(AbstractSingletonContainer.java:719)
	at com.sun.ejb.containers.AbstractSingletonContainer.instantiateSingletonInstance(AbstractSingletonContainer.java:451)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.initializeSingleton(SingletonLifeCycleManager.java:216)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.initializeSingleton(SingletonLifeCycleManager.java:177)
	at org.glassfish.ejb.startup.SingletonLifeCycleManager.doStartup(SingletonLifeCycleManager.java:155)
	at org.glassfish.ejb.startup.EjbApplication.start(EjbApplication.java:177)
	at org.glassfish.internal.data.EngineRef.start(EngineRef.java:130)
	at org.glassfish.internal.data.ModuleInfo.start(ModuleInfo.java:269)
	at org.glassfish.internal.data.ApplicationInfo.start(ApplicationInfo.java:294)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:462)
	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:240)
	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:382)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$1.execute(CommandRunnerImpl.java:355)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:370)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1064)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1200(CommandRunnerImpl.java:96)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1244)
	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1232)
	at com.sun.enterprise.admin.cli.embeddable.DeployerImpl.deploy(DeployerImpl.java:129)
	at com.sun.enterprise.admin.cli.embeddable.DeployerImpl.deploy(DeployerImpl.java:105)
	at org.glassfish.maven.PluginUtil.doDeploy(PluginUtil.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.glassfish.maven.AbstractDeployMojo.doDeploy(AbstractDeployMojo.java:239)
	at org.glassfish.maven.RunMojo.execute(RunMojo.java:68)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: java.lang.NullPointerException
	at java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:768)
	at org.jboss.weld.manager.BeanManagerImpl.getBean(BeanManagerImpl.java:1209)
	at org.jboss.weld.manager.BeanManagerImpl.getBean(BeanManagerImpl.java:144)
	at org.glassfish.weld.services.JCDIServiceImpl._createJCDIInjectionContext(JCDIServiceImpl.java:169)
	at org.glassfish.weld.services.JCDIServiceImpl.createJCDIInjectionContext(JCDIServiceImpl.java:146)
	at com.sun.ejb.containers.BaseContainer.createEjbInstanceAndContext(BaseContainer.java:1636)
	at com.sun.ejb.containers.AbstractSingletonContainer.createSingletonEJB(AbstractSingletonContainer.java:489)
	... 49 more
PlainTextActionReporterFAILUREDescription: deploy AdminCommandError occurred during deployment: Exception while loading the app : javax.ejb.CreateException: Initialization failed for Singleton MyRoutes. Please see server.log for more details.
    [name=myapp
25.09.2012 13:28:29 PluginUtil doDeploy
INFO: Deployed null
Hit ENTER to redeploy, X to exit




On the other hand the deployment using the jboss profile bootstraps the application server as well as the Camel context properly but the routing does not kick in, because the 2 routes defined by org.apache.camel.example.cdi.MyRoutes are not detected as one can see it on the console (Total 0 routes):



13:43:15,227 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-7) Total 0 routes, of which 0 is started.




And following the full output using this profile:



~/dev/workspace/camel/examples/camel-example-cdi>mvn deploy -Pjboss
[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-cdi:war:2.11-SNAPSHOT
[WARNING] The expression ${artifactId} is deprecated. Please use ${project.artifactId} instead.
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CDI 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/surefire-reports
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/classes] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Webapp assembled in [155 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] >>> jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Skipping execution of surefire because it has already been run for this configuration
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/classes] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Webapp assembled in [94 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] <<< jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi <<<
[INFO] 
[INFO] --- jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi ---
[INFO] Resolving artifact org.jboss.as:jboss-as-dist:zip:7.1.1.Final from [jboss -releases (https://repository.jboss.org/nexus/content/repositories/releases/, releases+snapshots), apache.snapshots (http://repository.apache.org/snapshots/, snapshots), central (http://repo.maven.apache.org/maven2, releases)]
[INFO] JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
[INFO] JBOSS_HOME=/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final

[INFO] Server is starting up. Press CTRL + C to stop the server.
25.09.2012 13:43:03 org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
25.09.2012 13:43:03 org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
25.09.2012 13:43:03 org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.7.GA
13:43:04,051 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
13:43:04,192 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
13:43:04,222 INFO  [org.jboss.as] JBAS015899: JBoss AS 7.1.1.Final ""Brontes"" starting
13:43:04,724 INFO  [org.xnio] XNIO Version 3.0.3.GA
13:43:04,724 INFO  [org.jboss.as.server] JBAS015888: Creating http management service using socket-binding (management-http)
13:43:04,733 INFO  [org.xnio.nio] XNIO NIO Implementation Version 3.0.3.GA
13:43:04,739 INFO  [org.jboss.remoting] JBoss Remoting version 3.2.3.GA
13:43:04,751 INFO  [org.jboss.as.logging] JBAS011502: Removing bootstrap log handlers
13:43:04,753 INFO  [org.jboss.as.configadmin] (ServerService Thread Pool -- 26) JBAS016200: Activating ConfigAdmin Subsystem
13:43:04,756 INFO  [org.jboss.as.clustering.infinispan] (ServerService Thread Pool -- 31) JBAS010280: Activating Infinispan subsystem.
13:43:04,763 INFO  [org.jboss.as.naming] (ServerService Thread Pool -- 38) JBAS011800: Activating Naming Subsystem
13:43:04,765 INFO  [org.jboss.as.osgi] (ServerService Thread Pool -- 39) JBAS011940: Activating OSGi Subsystem
13:43:04,768 INFO  [org.jboss.as.security] (ServerService Thread Pool -- 44) JBAS013101: Activating Security Subsystem
13:43:04,774 INFO  [org.jboss.as.security] (MSC service thread 1-15) JBAS013100: Current PicketBox version=4.0.7.Final
13:43:04,779 INFO  [org.jboss.as.webservices] (ServerService Thread Pool -- 48) JBAS015537: Activating WebServices Extension
13:43:04,799 INFO  [org.jboss.as.naming] (MSC service thread 1-5) JBAS011802: Starting Naming Service
13:43:04,811 INFO  [org.jboss.as.connector] (MSC service thread 1-13) JBAS010408: Starting JCA Subsystem (JBoss IronJacamar 1.0.9.Final)
13:43:04,813 INFO  [org.jboss.as.mail.extension] (MSC service thread 1-3) JBAS015400: Bound mail session [java:jboss/mail/Default]
13:43:04,856 INFO  [org.jboss.as.connector.subsystems.datasources] (ServerService Thread Pool -- 27) JBAS010403: Deploying JDBC-compliant driver class org.h2.Driver (version 1.3)
13:43:04,877 INFO  [org.jboss.ws.common.management.AbstractServerConfig] (MSC service thread 1-2) JBoss Web Services - Stack CXF Server 4.0.2.GA
13:43:04,943 INFO  [org.apache.coyote.http11.Http11Protocol] (MSC service thread 1-5) Starting Coyote HTTP/1.1 on http--127.0.0.1-8080
13:43:05,098 INFO  [org.jboss.as.connector.subsystems.datasources] (MSC service thread 1-15) JBAS010400: Bound data source [java:jboss/datasources/ExampleDS]
13:43:05,265 INFO  [org.jboss.as.server.deployment.scanner] (MSC service thread 1-11) JBAS015012: Started FileSystemDeploymentService for directory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final/standalone/deployments
13:43:05,279 INFO  [org.jboss.as.remoting] (MSC service thread 1-7) JBAS017100: Listening on /127.0.0.1:4447
13:43:05,279 INFO  [org.jboss.as.remoting] (MSC service thread 1-13) JBAS017100: Listening on /127.0.0.1:9999
13:43:05,338 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990
13:43:05,339 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss AS 7.1.1.Final ""Brontes"" started in 1508ms - Started 133 of 208 services (74 services are passive or on-demand)
[INFO] Deploying application 'camel-example-cdi-2.11-SNAPSHOT.war'

13:43:10,849 INFO  [org.jboss.as.repository] (management-handler-thread - 4) JBAS014900: Content added at location /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final/standalone/data/content/3b/2c977160488faaa98b563dd1428fc4c4b44c93/content
13:43:10,859 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015876: Starting deployment of ""camel-example-cdi-2.11-SNAPSHOT.war""
13:43:13,639 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.DFSClient$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,640 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.mapred.JobClient$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,640 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,641 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.mapreduce.security.token.JobTokenIdentifier$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,642 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.HftpFileSystem$TokenManager' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,642 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-8) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.web.WebHdfsFileSystem$DtRenewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
13:43:13,755 WARN  [org.jboss.weld.deployer] (MSC service thread 1-8) JBAS016003: Found beans.xml file in non-standard location: ""/content/camel-example-cdi-2.11-SNAPSHOT.war/WEB-INF/classes/META-INF/beans.xml"", war deployments should place beans.xml files into WEB-INF/beans.xml
13:43:14,023 INFO  [org.jboss.weld.deployer] (MSC service thread 1-6) JBAS016002: Processing weld deployment camel-example-cdi-2.11-SNAPSHOT.war
13:43:14,035 INFO  [org.jboss.as.ejb3.deployment.processors.EjbJndiBindingsDeploymentUnitProcessor] (MSC service thread 1-6) JNDI bindings for session bean named MyRoutes in deployment unit deployment ""camel-example-cdi-2.11-SNAPSHOT.war"" are as follows:

	java:global/camel-example-cdi-2.11-SNAPSHOT/MyRoutes!org.apache.camel.example.cdi.MyRoutes
	java:app/camel-example-cdi-2.11-SNAPSHOT/MyRoutes!org.apache.camel.example.cdi.MyRoutes
	java:module/MyRoutes!org.apache.camel.example.cdi.MyRoutes
	java:global/camel-example-cdi-2.11-SNAPSHOT/MyRoutes
	java:app/camel-example-cdi-2.11-SNAPSHOT/MyRoutes
	java:module/MyRoutes

13:43:14,233 INFO  [org.jboss.weld.deployer] (MSC service thread 1-6) JBAS016005: Starting Services for CDI deployment: camel-example-cdi-2.11-SNAPSHOT.war
13:43:14,251 INFO  [org.jboss.weld.Version] (MSC service thread 1-6) WELD-000900 1.1.5 (AS71)
13:43:14,280 INFO  [org.jboss.weld.deployer] (MSC service thread 1-7) JBAS016008: Starting weld service for deployment camel-example-cdi-2.11-SNAPSHOT.war
13:43:14,431 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension activated=true
13:43:14,431 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.exclude.GlobalAlternative activated=true
13:43:14,432 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.exclude.CustomProjectStageBeanFilter activated=true
13:43:14,433 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.config.ConfigurationExtension activated=true
13:43:14,433 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.exception.control.extension.ExceptionControlExtension activated=true
13:43:14,438 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-7) class: org.apache.deltaspike.core.impl.message.MessageBundleExtension activated=true
13:43:14,482 INFO  [org.apache.deltaspike.core.util.ProjectStageProducer] (MSC service thread 1-7) Computed the following DeltaSpike ProjectStage: Production
13:43:15,114 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-7) Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) is starting
13:43:15,122 INFO  [org.apache.camel.management.ManagementStrategyFactory] (MSC service thread 1-7) JMX enabled.
13:43:15,195 INFO  [org.apache.camel.impl.converter.DefaultTypeConverter] (MSC service thread 1-7) Loaded 175 type converters
13:43:15,217 INFO  [org.apache.camel.management.DefaultManagementLifecycleStrategy] (MSC service thread 1-7) Load performance statistics enabled.
13:43:15,227 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-7) Total 0 routes, of which 0 is started.
13:43:15,228 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-7) Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) started in 0.114 seconds","bvahdat:1348571946:2012-09-25T19:19:06.158+0000:1348571946:2012-09-25T19:19:06.158+0000:[~cmoulliard] resolved the issue with the JBoss profile {{""mvn deploy -Pjboss""}}. Now we can properly see the output of [SomeBean|https://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-cdi/src/main/java/org/apache/camel/example/cdi/SomeBean.java] beginning with the prefix {{""Received""}} at the bottom of the following run:

{code}
~/dev/workspace/camel/examples/camel-example-cdi>mvn deploy -Pjboss
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CDI 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/surefire-reports
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp resources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/webapp]
[INFO] Webapp assembled in [150 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] >>> jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Skipping execution of surefire because it has already been run for this configuration
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp resources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/webapp]
[INFO] Webapp assembled in [95 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] <<< jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi <<<
[INFO] 
[INFO] --- jboss-as-maven-plugin:7.2.Final:run (default) @ camel-example-cdi ---
[INFO] Resolving artifact org.jboss.as:jboss-as-dist:zip:7.1.1.Final from [apache.snapshots (http://repository.apache.org/snapshots/, snapshots), central (http://repo.maven.apache.org/maven2, releases)]
[INFO] JAVA_HOME=/Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home
[INFO] JBOSS_HOME=/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final

[INFO] Server is starting up. Press CTRL + C to stop the server.
25.09.2012 21:07:33 org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
25.09.2012 21:07:33 org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
25.09.2012 21:07:33 org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.7.GA
21:07:34,228 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
21:07:34,369 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
21:07:34,401 INFO  [org.jboss.as] JBAS015899: JBoss AS 7.1.1.Final ""Brontes"" starting
21:07:34,919 INFO  [org.xnio] XNIO Version 3.0.3.GA
21:07:34,919 INFO  [org.jboss.as.server] JBAS015888: Creating http management service using socket-binding (management-http)
21:07:34,925 INFO  [org.xnio.nio] XNIO NIO Implementation Version 3.0.3.GA
21:07:34,932 INFO  [org.jboss.remoting] JBoss Remoting version 3.2.3.GA
21:07:34,947 INFO  [org.jboss.as.logging] JBAS011502: Removing bootstrap log handlers
21:07:34,950 INFO  [org.jboss.as.configadmin] (ServerService Thread Pool -- 26) JBAS016200: Activating ConfigAdmin Subsystem
21:07:34,955 INFO  [org.jboss.as.clustering.infinispan] (ServerService Thread Pool -- 31) JBAS010280: Activating Infinispan subsystem.
21:07:34,961 INFO  [org.jboss.as.security] (ServerService Thread Pool -- 44) JBAS013101: Activating Security Subsystem
21:07:34,965 INFO  [org.jboss.as.osgi] (ServerService Thread Pool -- 39) JBAS011940: Activating OSGi Subsystem
21:07:34,969 INFO  [org.jboss.as.naming] (ServerService Thread Pool -- 38) JBAS011800: Activating Naming Subsystem
21:07:34,970 INFO  [org.jboss.as.security] (MSC service thread 1-7) JBAS013100: Current PicketBox version=4.0.7.Final
21:07:34,972 INFO  [org.jboss.as.webservices] (ServerService Thread Pool -- 48) JBAS015537: Activating WebServices Extension
21:07:34,997 INFO  [org.jboss.as.connector] (MSC service thread 1-2) JBAS010408: Starting JCA Subsystem (JBoss IronJacamar 1.0.9.Final)
21:07:35,026 INFO  [org.jboss.as.naming] (MSC service thread 1-8) JBAS011802: Starting Naming Service
21:07:35,031 INFO  [org.jboss.as.mail.extension] (MSC service thread 1-3) JBAS015400: Bound mail session [java:jboss/mail/Default]
21:07:35,060 INFO  [org.jboss.as.connector.subsystems.datasources] (ServerService Thread Pool -- 27) JBAS010403: Deploying JDBC-compliant driver class org.h2.Driver (version 1.3)
21:07:35,074 INFO  [org.jboss.ws.common.management.AbstractServerConfig] (MSC service thread 1-6) JBoss Web Services - Stack CXF Server 4.0.2.GA
21:07:35,138 INFO  [org.apache.coyote.http11.Http11Protocol] (MSC service thread 1-2) Starting Coyote HTTP/1.1 on http--127.0.0.1-8080
21:07:35,299 INFO  [org.jboss.as.connector.subsystems.datasources] (MSC service thread 1-13) JBAS010400: Bound data source [java:jboss/datasources/ExampleDS]
21:07:35,469 INFO  [org.jboss.as.server.deployment.scanner] (MSC service thread 1-9) JBAS015012: Started FileSystemDeploymentService for directory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final/standalone/deployments
21:07:35,480 INFO  [org.jboss.as.remoting] (MSC service thread 1-14) JBAS017100: Listening on /127.0.0.1:4447
21:07:35,480 INFO  [org.jboss.as.remoting] (MSC service thread 1-3) JBAS017100: Listening on /127.0.0.1:9999
21:07:35,536 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990
21:07:35,536 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss AS 7.1.1.Final ""Brontes"" started in 1549ms - Started 133 of 208 services (74 services are passive or on-demand)
[INFO] Deploying application 'camel-example-cdi-2.11-SNAPSHOT.war'

21:07:40,616 INFO  [org.jboss.as.repository] (management-handler-thread - 4) JBAS014900: Content added at location /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/jboss-as-run/jboss-as-7.1.1.Final/standalone/data/content/f2/a8bf6c64e2565e142f346474bc0eaacc669d74/content
21:07:40,628 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-9) JBAS015876: Starting deployment of ""camel-example-cdi-2.11-SNAPSHOT.war""
21:07:44,011 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.DFSClient$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,011 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.mapred.JobClient$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,012 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,012 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.mapreduce.security.token.JobTokenIdentifier$Renewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,013 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.HftpFileSystem$TokenManager' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,014 WARN  [org.jboss.as.server.deployment] (MSC service thread 1-12) JBAS015893: Encountered invalid class name 'org.apache.hadoop.hdfs.web.WebHdfsFileSystem$DtRenewer' for service type 'org.apache.hadoop.security.token.TokenRenewer'
21:07:44,351 INFO  [org.jboss.weld.deployer] (MSC service thread 1-5) JBAS016002: Processing weld deployment camel-example-cdi-2.11-SNAPSHOT.war
21:07:44,508 INFO  [org.jboss.weld.deployer] (MSC service thread 1-15) JBAS016005: Starting Services for CDI deployment: camel-example-cdi-2.11-SNAPSHOT.war
21:07:44,529 INFO  [org.jboss.weld.Version] (MSC service thread 1-15) WELD-000900 1.1.5 (AS71)
21:07:44,559 INFO  [org.jboss.weld.deployer] (MSC service thread 1-5) JBAS016008: Starting weld service for deployment camel-example-cdi-2.11-SNAPSHOT.war
21:07:44,682 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.config.ConfigurationExtension activated=true
21:07:44,683 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension activated=true
21:07:44,683 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.exclude.GlobalAlternative activated=true
21:07:44,684 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.exclude.CustomProjectStageBeanFilter activated=true
21:07:44,685 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.exception.control.extension.ExceptionControlExtension activated=true
21:07:44,689 INFO  [org.apache.deltaspike.core.util.ClassDeactivationUtils] (MSC service thread 1-5) class: org.apache.deltaspike.core.impl.message.MessageBundleExtension activated=true
21:07:44,741 INFO  [org.apache.deltaspike.core.util.ProjectStageProducer] (MSC service thread 1-5) Computed the following DeltaSpike ProjectStage: Production
21:07:45,385 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-5) Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) is starting
21:07:45,394 INFO  [org.apache.camel.management.ManagementStrategyFactory] (MSC service thread 1-5) JMX enabled.
21:07:45,490 INFO  [org.apache.camel.impl.converter.DefaultTypeConverter] (MSC service thread 1-5) Loaded 175 type converters
21:07:45,511 INFO  [org.apache.camel.management.DefaultManagementLifecycleStrategy] (MSC service thread 1-5) Load performance statistics enabled.
21:07:45,525 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-5) Total 0 routes, of which 0 is started.
21:07:45,527 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-5) Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) started in 0.140 seconds
21:07:45,626 INFO  [org.apache.camel.component.file.FileEndpoint] (MSC service thread 1-5) Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
21:07:45,626 INFO  [org.apache.camel.component.file.FileEndpoint] (MSC service thread 1-5) Using default memory based idempotent repository with cache max size: 1000
21:07:45,665 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-5) Route: route1 started and consuming from: Endpoint[file://src/data?noop=true]
21:07:45,720 INFO  [org.apache.camel.cdi.CdiCamelContext] (MSC service thread 1-5) Route: route2 started and consuming from: Endpoint[file://target/testdata/queue]
21:07:45,845 INFO  [org.jboss.web] (MSC service thread 1-10) JBAS018210: Registering web context: /camel-example-cdi-2.11-SNAPSHOT
21:07:45,888 INFO  [org.jboss.as.server] (management-handler-thread - 4) JBAS018559: Deployed ""camel-example-cdi-2.11-SNAPSHOT.war""
21:07:46,718 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) Received: <?xml version=""1.0"" encoding=""UTF-8""?>
21:07:46,718 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) <!--
21:07:46,718 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   Licensed to the Apache Software Foundation (ASF) under one or more
21:07:46,719 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   contributor license agreements.  See the NOTICE file distributed with
21:07:46,719 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   this work for additional information regarding copyright ownership.
21:07:46,719 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   The ASF licenses this file to You under the Apache License, Version 2.0
21:07:46,720 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   (the ""License""); you may not use this file except in compliance with
21:07:46,720 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   the License.  You may obtain a copy of the License at
21:07:46,720 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) 
21:07:46,721 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   http://www.apache.org/licenses/LICENSE-2.0
21:07:46,721 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) 
21:07:46,721 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   Unless required by applicable law or agreed to in writing, software
21:07:46,722 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   distributed under the License is distributed on an ""AS IS"" BASIS,
21:07:46,722 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
21:07:46,723 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   See the License for the specific language governing permissions and
21:07:46,723 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   limitations under the License.
21:07:46,723 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) -->
21:07:46,724 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) <person user=""james"">
21:07:46,724 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <firstName>James</firstName>
21:07:46,724 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <lastName>Strachan</lastName>
21:07:46,724 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <city>London</city>
21:07:46,725 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) </person>
21:07:46,729 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) Received: <?xml version=""1.0"" encoding=""UTF-8""?>
21:07:46,730 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) <!--
21:07:46,730 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   Licensed to the Apache Software Foundation (ASF) under one or more
21:07:46,730 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   contributor license agreements.  See the NOTICE file distributed with
21:07:46,731 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   this work for additional information regarding copyright ownership.
21:07:46,731 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   The ASF licenses this file to You under the Apache License, Version 2.0
21:07:46,731 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   (the ""License""); you may not use this file except in compliance with
21:07:46,731 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   the License.  You may obtain a copy of the License at
21:07:46,732 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) 
21:07:46,732 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   http://www.apache.org/licenses/LICENSE-2.0
21:07:46,732 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) 
21:07:46,732 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   Unless required by applicable law or agreed to in writing, software
21:07:46,733 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   distributed under the License is distributed on an ""AS IS"" BASIS,
21:07:46,733 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
21:07:46,733 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   See the License for the specific language governing permissions and
21:07:46,734 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   limitations under the License.
21:07:46,734 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) -->
21:07:46,734 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) <person user=""hiram"">
21:07:46,734 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <firstName>Hiram</firstName>
21:07:46,734 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <lastName>Chirino</lastName>
21:07:46,735 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue)   <city>Tampa</city>
21:07:46,735 INFO  [stdout] (Camel (camel-2) thread #2 - file://target/testdata/queue) </person>
{code}
bvahdat:1348572856:2012-09-25T19:34:16.935+0000:1348572856:2012-09-25T19:34:16.935+0000:And I fixed the Glassfish profile where the console output now becomes:

{code}
~/dev/workspace/camel/examples/camel-example-cdi>mvn deploy -Pglassfish
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CDI 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-example-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-cdi ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-example-cdi ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/surefire-reports
[INFO] 
[INFO] --- maven-war-plugin:2.2:war (default-war) @ camel-example-cdi ---
[INFO] Packaging webapp
[INFO] Assembling webapp [camel-example-cdi] in [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp webResources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/resources/META-INF] to [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT]
[INFO] Copying webapp resources [/Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/src/main/webapp]
[INFO] Webapp assembled in [175 msecs]
[INFO] Building war: /Users/bvahdat/dev/workspace/camel/examples/camel-example-cdi/target/camel-example-cdi-2.11-SNAPSHOT.war
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-example-cdi ---
[INFO] 
[INFO] --- maven-embedded-glassfish-plugin:3.1.2.2:run (default) @ camel-example-cdi ---
Created New Bootstrap ClassLoader. ServerId = maven, ClassPaths = 
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/main/extras/glassfish-embedded-all/3.1.2.2/glassfish-embedded-all-3.1.2.2.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/embedded/maven-embedded-glassfish-plugin/3.1.2.2/maven-embedded-glassfish-plugin-3.1.2.2.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/junit/junit/3.8.1/junit-3.8.1.jar
ClassPath Element : file:/Users/bvahdat/.m2/repository/org/glassfish/main/common/simple-glassfish-api/3.1.2.2/simple-glassfish-api-3.1.2.2.jar
25.09.2012 21:24:06 com.sun.enterprise.v3.server.CommonClassLoaderServiceImpl findDerbyClient
INFO: Cannot find javadb client jar file, derby jdbc driver will not be available by default.
25.09.2012 21:24:06 org.hibernate.validator.internal.util.Version <clinit>
INFO: HV000001: Hibernate Validator 4.3.0.Final
25.09.2012 21:24:07 PluginUtil getGlassFish
INFO: Created GlassFish ServerId = maven, BootstrapProperties = {GlassFish_Platform=Static}, GlassFishRuntime = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime@6c3d685f, GlassFishProperties = {embedded-glassfish-config.server.network-config.network-listeners.network-listener.http-listener.enabled=true, embedded-glassfish-config.server.network-config.network-listeners.network-listener.http-listener.port=8080}, GlassFish = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime$1@338f6c7d, GlassFish Status = INIT, TimeTaken = 647 ms
25.09.2012 21:24:07 com.sun.enterprise.v3.services.impl.GrizzlyService createNetworkProxy
INFO: Network listener https-listener on port 0 disabled per domain.xml
25.09.2012 21:24:07 com.sun.enterprise.v3.services.impl.GrizzlyProxy$2$1 onReady
INFO: Grizzly Framework 1.9.50 started in: 38ms - bound to [0.0.0.0:8080]
25.09.2012 21:24:07 com.sun.enterprise.v3.server.AppServerStartup run
INFO: GlassFish Server Open Source Edition 3.1.2.2 (java_re) startup time : Embedded (536ms), startup services(374ms), total(910ms)
25.09.2012 21:24:07 PluginUtil startGlassFish
INFO: Started GlassFish ServerId = maven, GlassFish = com.sun.enterprise.glassfish.bootstrap.StaticGlassFishRuntime$1@338f6c7d, TimeTaken = 542 ms
25.09.2012 21:24:09 com.sun.enterprise.security.SecurityLifecycle <init>
INFO: SEC1002: Security Manager is OFF.
25.09.2012 21:24:09 com.sun.enterprise.security.SecurityLifecycle onInitialization
INFO: SEC1010: Entering Security Startup Service
25.09.2012 21:24:09 com.sun.enterprise.security.PolicyLoader loadPolicy
INFO: SEC1143: Loading policy provider com.sun.enterprise.security.jacc.provider.SimplePolicyProvider.
25.09.2012 21:24:09 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [admin-realm] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.
25.09.2012 21:24:09 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [file] of classtype [com.sun.enterprise.security.auth.realm.file.FileRealm] successfully created.
25.09.2012 21:24:09 com.sun.enterprise.security.auth.realm.Realm doInstantiate
INFO: SEC1115: Realm [certificate] of classtype [com.sun.enterprise.security.auth.realm.certificate.CertificateRealm] successfully created.
25.09.2012 21:24:09 com.sun.enterprise.security.SecurityLifecycle onInitialization
INFO: SEC1011: Security Service(s) Started Successfully
25.09.2012 21:24:09 com.sun.enterprise.web.WebContainer createHttpListener
INFO: WEB0169: Created HTTP listener [http-listener] on host/port [0.0.0.0:8080]
25.09.2012 21:24:09 com.sun.enterprise.web.WebContainer createHosts
INFO: WEB0171: Created virtual server [server]
25.09.2012 21:24:10 com.sun.enterprise.web.WebContainer loadSystemDefaultWebModules
INFO: WEB0172: Virtual server [server] loaded default web module []
classLoader = WebappClassLoader (delegate=true; repositories=WEB-INF/classes/)
SharedSecrets.getJavaNetAccess()=java.net.URLClassLoader$7@705369a
25.09.2012 21:24:11 org.jboss.weld.bootstrap.WeldBootstrap <clinit>
INFO: WELD-000900 SNAPSHOT
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.config.ConfigurationExtension activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.extension.ExcludeExtension activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.GlobalAlternative activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exclude.CustomProjectStageBeanFilter activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.exception.control.extension.ExceptionControlExtension activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ClassDeactivationUtils cacheResult
INFO: class: org.apache.deltaspike.core.impl.message.MessageBundleExtension activated=true
25.09.2012 21:24:12 org.apache.deltaspike.core.util.ProjectStageProducer initProjectStage
INFO: Computed the following DeltaSpike ProjectStage: Production
25.09.2012 21:24:13 com.sun.enterprise.web.WebApplication start
INFO: WEB0671: Loading application [myapp] at [/Camel :: Example :: CDI]
No valid EE environment for injection of org.apache.camel.cdi.internal.CamelContextMap
25.09.2012 21:24:13 org.apache.camel.impl.DefaultCamelContext start
INFO: Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) is starting
25.09.2012 21:24:13 org.apache.camel.management.ManagementStrategyFactory create
INFO: JMX enabled.
25.09.2012 21:24:13 org.apache.camel.impl.converter.DefaultTypeConverter doStart
INFO: Loaded 175 type converters
No valid EE environment for injection of org.apache.camel.cdi.component.properties.CdiPropertiesComponent
25.09.2012 21:24:13 org.apache.camel.management.DefaultManagementLifecycleStrategy$TimerListenerManagerStartupListener onCamelContextStarted
INFO: Load performance statistics enabled.
25.09.2012 21:24:13 org.apache.camel.impl.DefaultCamelContext start
INFO: Total 0 routes, of which 0 is started.
25.09.2012 21:24:13 org.apache.camel.impl.DefaultCamelContext start
INFO: Apache Camel 2.11-SNAPSHOT (CamelContext: camel-2) started in 0.238 seconds
No valid EE environment for injection of org.apache.camel.example.cdi.MyRoutes
No valid EE environment for injection of org.apache.camel.cdi.internal.CamelFactory
No valid EE environment for injection of org.apache.camel.cdi.internal.CamelFactory
25.09.2012 21:24:13 org.apache.camel.component.file.FileEndpoint createConsumer
INFO: Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
25.09.2012 21:24:13 org.apache.camel.component.file.FileEndpoint createConsumer
INFO: Using default memory based idempotent repository with cache max size: 1000
25.09.2012 21:24:13 org.apache.camel.impl.DefaultCamelContext doStartOrResumeRouteConsumers
INFO: Route: route1 started and consuming from: Endpoint[file://src/data?noop=true]
25.09.2012 21:24:14 org.apache.camel.impl.DefaultCamelContext doStartOrResumeRouteConsumers
INFO: Route: route2 started and consuming from: Endpoint[file://target/testdata/queue]
25.09.2012 21:24:14 org.glassfish.deployment.admin.DeployCommand execute
INFO: myapp was successfully deployed in 6.607 milliseconds.
25.09.2012 21:24:14 PluginUtil doDeploy
INFO: Deployed myapp
Hit ENTER to redeploy, X to exit
Received: <?xml version=""1.0"" encoding=""UTF-8""?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the ""License""); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an ""AS IS"" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<person user=""james"">
  <firstName>James</firstName>
  <lastName>Strachan</lastName>
  <city>London</city>
</person>
Received: <?xml version=""1.0"" encoding=""UTF-8""?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the ""License""); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an ""AS IS"" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<person user=""hiram"">
  <firstName>Hiram</firstName>
  <lastName>Chirino</lastName>
  <city>Tampa</city>
</person>
{code}

Again you can see the same {{SomeBean}} in Action. Also note that we still see the log with *0 routes* as:

{code}
INFO: Total 0 routes, of which 0 is started.
{code}

This's just because the 2 routes are added into the {{CdiCamelContext}} *after* it's started.

cmoulliard:1348610456:2012-09-26T06:00:56.137+0000:1348610456:2012-09-26T06:00:56.137+0000:Add missing dependency

{code}
            <properties>
                <glassfish.version>3.1.1</glassfish.version>
                <embedded-glassfish-plugin-version>3.1.2.2</embedded-glassfish-plugin-version>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.glassfish.extras</groupId>
                    <artifactId>glassfish-embedded-all</artifactId>
                    <version>${glassfish.version}</version>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
{code}

otherwise mvn clean deploy -P glassfish generates the foolowing error :

{code}
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /Users/chmoulli/Apache/camel/examples/camel-example-cdi/src/main/java/org/apache/camel/example/cdi/MyRoutes.java:[19,16] package javax.ejb does not exist
[ERROR] /Users/chmoulli/Apache/camel/examples/camel-example-cdi/src/main/java/org/apache/camel/example/cdi/MyRoutes.java:[34,1] cannot find symbol
symbol: class Startup
@Startup
{code}
bvahdat:1348617017:2012-09-26T07:50:17.636+0000:1348617017:2012-09-26T07:50:17.636+0000:Thanks.

I did the same for the JBoss profile as well so that an explicit call for the maven {{clean}} goal works there as well:

{code}
mvn clean install -Pjboss
{code}
bvahdat:1348626742:2012-09-26T10:32:22.916+0000:1348626916:2012-09-26T10:35:16.438+0000:I decided [to do even better|http://svn.apache.org/viewvc?view=revision&revision=1390379] ;-) that's to remove *ALL* those dependencies defined inside the three profiles and just add only one *single* dependency which we really need:

{code:xml}
<dependency>
  <groupId>org.apache.geronimo.specs</groupId>
  <artifactId>geronimo-ejb_3.1_spec</artifactId>
  <version>${geronimo-ejb_3.1_spec.version}</version>
  <scope>provided</scope>
</dependency>
{code}"
0,CAMEL-5647,Bug,Major,"2.9.0, 2.10.0","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-25 07:37:16+00:00,2012-09-25 11:36:36+00:00,"Some EIPs support using a custom aggregations strategy. And if you use XML DSL to refer to a custom strategy, then you may have typo, or the strategy do not implement the interface.


What we should do is to ensure to fail if the custom strategy could not be looked up. 


Some EIPs such as the content enricher will fallback and use a default strategy. This is wrong.",
0,CAMEL-5646,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Linus Brimstedt,1,3,2012-09-25 06:21:49+00:00,2015-07-11 13:44:33+00:00,"It would be nice if the FTP conversation (i.e. commands sent and replies received) could be captured with an exchange.


For example, when a file is transferred, it could look like this:
ftp> bin    
200 Type set to I.
ftp> get camel.gif
200 PORT command successful.
150 Opening BINARY mode data connection for camel.gif (1337 bytes).
226 Transfer complete.
local: ex.gif remote: camel.gif
1337 bytes received in 0.07 seconds","brimstedt:1348525372:2012-09-25T06:22:52.180+0000:1348525372:2012-09-25T06:22:52.180+0000:The reason is that sometimes you communicate with customer FTP servers or servers that give special responses depending on files transferred. These replies would be nice to save in a storage for later reference when needed.
njiang:1348527272:2012-09-25T06:54:32.679+0000:1348527272:2012-09-25T06:54:32.679+0000:Maybe we can store this kind of information into the out message header.
brimstedt:1348527466:2012-09-25T06:57:46.506+0000:1348527466:2012-09-25T06:57:46.506+0000:Yes, sorry I forgot to mention this :-)
But a header where this is stored would work great, and probably there should be a config item if you want it or not.

davsclaus:1348789592:2012-09-28T07:46:32.542+0000:1348789592:2012-09-28T07:46:32.542+0000:And how would you capture this? The ftp clients must have an API that offers this functionality.
brimstedt:1348790765:2012-09-28T08:06:05.879+0000:1348790765:2012-09-28T08:06:05.879+0000:Of course, this would not be available for all different implementations (for example sftp is not even based on text commands). 
But for camel-ftp I believe it should be possible using org.apache.commons.net.ProtocolCommandListener

(I did a POF once, and my intentions are still to clean it up and commit, but someone on irc requested more jira tickets to work on, so I submitted this :-)"
0,CAMEL-5645,Improvement,Minor,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Rael,0,2,2012-09-24 17:02:59+00:00,2013-01-19 09:11:08+00:00,"Apns Component should allow sandbox/prod environment variable in apnsServiceFactory.


apnsServiceFactory does not seem to allow setting Apple's APNS environment to anything but production mode.
In addition, the certificatePath should allow an absolute path that is outside of the classpath (web root)","davsclaus:1348544254:2012-09-25T11:37:34.499+0000:1348544254:2012-09-25T11:37:34.499+0000:Patches is welcome. Do you want to work on that?

Read this about how to contribute to the project
http://camel.apache.org/contributing.html
davsclaus:1358557868:2013-01-19T09:11:08.913+0000:1358557868:2013-01-19T09:11:08.913+0000:You can configure sandbox/prod on the org.apache.camel.component.apns.factory.ApnsServiceFactory which has has getter/setters for gateway and feedback.

I made it possible to load the certificate from file and classpath by prefix file: or classpath:"
0,CAMEL-5644,Bug,Minor,"2.9.0, 2.10.0","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-24 08:41:35+00:00,2012-09-24 09:05:49+00:00,"When the bean component has to pick among overloaded methods, then it does best matching on parameter types etc.


We should relax the type conversion to try attempt.","davsclaus:1348447383:2012-09-24T08:43:03.850+0000:1348447383:2012-09-24T08:43:03.850+0000:For example the replace overloaded method on java.lang.String, has changed order between java6 and 7.
Which causes Camel to try the char based types on java7 first, where as on java6 it was the string based parameters.

Running the SimpleTest demonstrates this on Java7
{code}
testBodyOgnlReplace(org.apache.camel.language.simple.SimpleTest): Failed to invoke method: .replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replace(""Kamel"", ""Camel"") on null due to: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: char with value Kamel is a cool Kamel due java.lang.IllegalArgumentException: String must have exactly a length of 1: Kamel is a cool Kamel
{code}"
0,CAMEL-5643,New Feature,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Alan Foster,0,2,2012-09-23 14:43:53+00:00,2013-02-27 08:51:02+00:00,"Add support to show a readonly view of optionally the body and arbitrary headers to the existing JdbcAggregationRepository class which will allow for a human-readable view of values in a datasource


Related Mailing list link :
http://camel.465427.n5.nabble.com/Change-Sql-Component-BLOB-datatype-to-XML-for-Aggregator-serialization-td5718845.html","alanfoster:1348384120:2012-09-23T15:08:40.904+0000:1348384120:2012-09-23T15:08:40.904+0000:Patch added.

Example spring usage :
{code}
<property name=""storeBodyAsText"" value=""true"" />
<property name=""headersToStoreAsText"">
    <list>
        <value>companyName</value>
        <value>accountName</value>
    </list>
</property>
{code}
davsclaus:1358405506:2013-01-17T14:51:46.769+0000:1358405506:2013-01-17T14:51:46.769+0000:Alan, thanks a lot for the patch.
alanfoster:1361884194:2013-02-26T21:09:54.378+0000:1361884194:2013-02-26T21:09:54.378+0000:Awesome, thanks for dealing with this! And I see the documentation has been created too, brilliant :) 

Just a quick note on the camel documentation, it would be great if the code examples actually showed the code source location in their titles. When I first started camel I found it challenging to find examples that ""just worked"", ie I had to write a lot of extra code that was missing from the small example snippets. It was only when I gained access to confluence did I realise the snippets actually pointed to working examples from the trunk!

What I'm asking is for the title to contain the source code location if possible, like below

{code:title=camel/trunk/components/camel-sql/src/test/resources/org/apache/camel/processor/aggregate/jdbc/JdbcSpringDataSource.xml}

  <bean id=""repo3"" class=""org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository"">
        <property name=""repositoryName"" value=""aggregationRepo3""/>
        <property name=""transactionManager"" ref=""txManager3""/>
        <property name=""dataSource"" ref=""dataSource3""/>
        <!-- configure to store the message body and following headers as text in the repo -->
        <property name=""storeBodyAsText"" value=""true""/>
        <property name=""headersToStoreAsText"">
          <list>
      	    <value>companyName</value>
    	    <value>accountName</value>
          </list>
        </property>
    </bean>
{code}

This will allow for people to easily find and explore the full source code.
I think this would really improve the learning experience for new camel riders in my opinion! :)

Hopefully there's a way to do this automatically across all of the example snippets
I can raise a Jira issue for this if you think it will be something we can add :)
davsclaus:1361926262:2013-02-27T08:51:02.788+0000:1361926262:2013-02-27T08:51:02.788+0000:We use confluence wiki and it has a snippet tag that grabs the source code. Not sure if we can have it default to show the url if no explicit title has been configured.

Ideally years ahead we switch the docs to some better hosting than confluence wiki."
0,CAMEL-5642,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-23 11:49:33+00:00,2013-05-02 02:30:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/String-replacement-via-Spring-tp5719498.html


The simple language escaping using \ character makes it header to specify back-slashes. What we really only need escaping for is the new line related.


So by limiting the escaping to only \n \t and \r then we can allow people to specify backslashes in method parameters and the likes.",
0,CAMEL-5641,Bug,Minor,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","

patch

",Closed,Fixed,"2.9.4, 2.10.2, 2.11.0",Christian Müller,James Carman,0,2,2012-09-22 11:41:22+00:00,2012-09-22 18:05:43+00:00,"According to the documentation:


""The values must be primitives or their counter objects (such as
Integer, Long, Character). The types, String, CharSequence, Date,
BigDecimal and BigInteger are all converted to their toString()
representation. All other types are dropped.""


So, it would seem that BigInteger should be toString()ed.  However, in
the JmsBinding class, we see the following code:



protected Object getValidJMSHeaderValue(String headerName, Object headerValue) {
        if (headerValue instanceof String) {
            return headerValue;
        } else if (headerValue instanceof Number) {
            return headerValue;
        } else if (headerValue instanceof Character) {
            return headerValue;
        } else if (headerValue instanceof CharSequence) {
            return headerValue.toString();
        } else if (headerValue instanceof Boolean) {
            return headerValue;
        } else if (headerValue instanceof Date) {
            return headerValue.toString();
        }
        return null;
    }




Since BigInteger extends Number, it will merely return the instance
itself.","jwcarman:1348285682:2012-09-22T11:48:02.516+0000:1348285682:2012-09-22T11:48:02.516+0000:Fix with test case.
muellerc:1348305534:2012-09-22T17:18:54.492+0000:1348305534:2012-09-22T17:18:54.492+0000:Thanks for reporting and providing the patch James. I only did two small modifications to pass our Checkstyle checks. You can read more about it here [1].
It's now fixed. Do you consider to test the SNAPSHOT's whether your fix works for you? ;-)

[1] http://camel.apache.org/building.html
jwcarman:1348308343:2012-09-22T18:05:43.882+0000:1348308343:2012-09-22T18:05:43.882+0000:I'm going to run the build in my local Jenkins server.  I'll grab the snapshot once it's done.  Thanks!"
0,CAMEL-5640,Improvement,Minor,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Freeman Yue Fang,Claus Ibsen,0,3,2012-09-22 09:31:34+00:00,2012-09-25 03:34:53+00:00,"When stopping a route, you can specify a timeout to avoid having to wait for a long time in case the graceful shutdown takes a long time.


The karaf command should support that timeout as an option. Maybe just use seconds as the default time unit.


Contributions is welcome. Source code in platform/karaf/commands.","alanfoster:1348493233:2012-09-24T21:27:13.666+0000:1348493233:2012-09-24T21:27:13.666+0000:@[~ffang] I understand you've assigned this to yourself; But if you find yourself too busy to do this patch I can help look into it for you :)
ffang:1348515141:2012-09-25T03:32:21.978+0000:1348515141:2012-09-25T03:32:21.978+0000:Hi Alan,

Thanks for the kindness, I just commit the fix.

Regards
Freeman
ffang:1348515293:2012-09-25T03:34:53.199+0000:1348515293:2012-09-25T03:34:53.199+0000:commit fix
http://svn.apache.org/viewvc?rev=1389699&view=rev for trunk"
0,CAMEL-5639,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-22 09:17:56+00:00,2013-05-26 11:27:53+00:00,"The idempotent consumer API should allow to pass in additional details, so people can decide what the ""key"" is. 


I guess some method to compute the keys. Then the file/ftp components can pass in file/ftp details. And the EIP itself can pass in Exchange etc.


This is a slight API change so we should only introduce this in a new release.


See nabble
http://camel.465427.n5.nabble.com/Custom-Idempotent-Jdbc-repository-Using-lastmodified-time-tp5719480.html",davsclaus:1369538873:2013-05-26T11:27:53.603+0000:1369538873:2013-05-26T11:27:53.603+0000:This functionality was added to Camel 2.11
0,CAMEL-5638,Improvement,Minor,None,"2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-22 09:14:47+00:00,2013-04-16 11:25:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/FTP-Consumer-Handle-UnknowHostException-tp5719362.html


This allows the bridged error handler to deal with rollback.",davsclaus:1348559393:2012-09-25T15:49:53.388+0000:1348559393:2012-09-25T15:49:53.388+0000:This allows bridge error handler to work in all cases with scheduled poll consumers as well. Which is what end users would expect.
0,CAMEL-5637,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Raúl Kripalani,Raúl Kripalani,0,2,2012-09-21 22:44:49+00:00,2016-05-05 17:09:40+00:00,"In a modular middleware system, an Exchange will frequently traverse a number of routes and Camel contexts during its processing.


A Tracking Slip or Waypoint Slip is a special Camel property that keeps track of all the routes and contexts where the Exchange has been.


Envisioned as an InterceptStrategy, it will act as an InterceptFrom construct that adds the ID of the current route, the ID of the Camel context or both (configurable) into a List inside a property called CamelTrackingSlip or CamelWaypointSlip.


It will aid debugging, Business Activity Monitoring, data mining, log mining and what not. By using the log: endpoint with showProperties=true, this property will be printed to log files.","davsclaus:1348265756:2012-09-22T06:15:56.390+0000:1348266711:2012-09-22T06:31:51.227+0000:Raul, there is already support and logic for this.
eg hence why the Camel tracer can do what it does.

Its the message history EIP pattern
http://www.eaipatterns.com/MessageHistory.html

Its currently tied to UoW where you can get the trace nodes. For Camel 3.0 we have on the roadmap to refactor this logic, and introduce a better end user API for that as well.
http://camel.apache.org/camel-30-roadmap.html

So IMHO dont introduce a new layer of code when there is already existing. By that I mean as underlying logic. 

If you can add a intercepter that uses the existing UoW logic (eg would the tracer) then that is okay. But IMHO consider looking at what is there already first. We have to avoid ""bloating"" the core with to many features and functionality. And camel-core cannot support *every* end users use-case out of the box. 
raulvk:1349192306:2012-10-02T23:38:26.451+0000:1349192306:2012-10-02T23:38:26.451+0000:Hey Claus,

The intention of this ticket is different: the grain of tracing is not processor nodes, but routes and contexts. In a layered architecture, a message typically passes through a number of routes until it reaches its final destination. 

I'd like to build a feature for Camel to keep track of all the routes and contexts that have 'seen' that message. This entails propagating a new header like the breadcrumbId, so that all UoWs can add their routes to it. The data structure needs to be serialisable.

It's an analogy to AMQ's brokerPath or TIBCO's tracking Id token.

Regards,
Raúl.
davsclaus:1462439380:2016-05-05T17:09:40.823+0000:1462439380:2016-05-05T17:09:40.823+0000:Look at ziplkin"
0,CAMEL-5636,Bug,Major,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,2,2012-09-21 20:07:28+00:00,2012-10-20 16:47:18+00:00,"The Enricher does not handle exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. It leads to the following thread dump, callback thread remains blocked forever.



""Camel (context) thread #10 - JmsConsumer[queue]"" daemon prio=5 tid=103666000 nid=0x113c25000 waiting on condition [113c24000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <7fd4a8de0> (a java.util.concurrent.CountDownLatch$Sync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
        at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:120)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:680)","davsclaus:1348273562:2012-09-22T08:26:02.044+0000:1348273562:2012-09-22T08:26:02.044+0000:Its not the jms consumer that is the problem. Its the async routing engine that waits for a reply that is not coming back. Are you using any custom components. 

And as always upgrade your Camel version to see if its fixed, eg Camel 2.8.0 is an old release.
raulvk:1348579407:2012-09-25T21:23:27.724+0000:1348579407:2012-09-25T21:23:27.724+0000:I didn't have time to investigate as soon as I found this issue, so I just shoved it in JIRA to keep track of it. As you suggested, it has nothing to do with the JMS consumer, but rather with the Enricher processor not treating unhandled exceptions thrown from the AggregationStrategy when the async routing engine has kicked in. On the other hand, synchronous routing is handled properly.

Changing the summary and description of the ticket to match the real situation.
raulvk:1348580745:2012-09-25T21:45:45.007+0000:1348580745:2012-09-25T21:45:45.007+0000:Fixed in trunk, camel-2.10.x and camel-2.9.x.
davsclaus:1348610870:2012-09-26T06:07:50.837+0000:1348610870:2012-09-26T06:07:50.837+0000:Raul, do you mind double checking the other EIPs that use an AggregationStrategy, which may thrown an exception as well? For example there is also a PollEnricher, WireTap etc. We may have a flaw in one of them as well.
raulvk:1350722838:2012-10-20T16:47:18.393+0000:1350722838:2012-10-20T16:47:18.393+0000:Hey Claus,

Checked the following EIPs which reference {{AggregationStrategy}}:
* Splitter
* Recipient list
* Poll Enrich
* Multicast
* Aggregate

All clear.

Regards,
Raúl."
0,CAMEL-5634,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-21 14:27:48+00:00,2012-09-21 14:38:44+00:00,"When using JAXB to marhsal, then the generated XML may have auto assigned prefixes for namespaces in the XML. 


And these auto generated prefixes are: ns2, ns3, ns4 etc.
Sometimes people want to control this.


So we should allow people to define a bean/map where they can define the mapping.",
0,CAMEL-5633,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-09-21 13:31:05+00:00,2012-09-24 06:36:49+00:00,"Current Camel doesn't pick up the RecipientList annotation from the Interface. 
It could be good if camel can pick up the annotation from the method which is defined in the interface.",njiang:1348439809:2012-09-24T06:36:49.658+0000:1348439809:2012-09-24T06:36:49.658+0000:Applied the patch into trunk.
0,CAMEL-5632,Bug,Major,2.10.1,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Joakim Sundqvist,0,2,2012-09-21 13:00:04+00:00,2012-09-22 09:44:51+00:00,"In my xsl-files I have imports and includes that resides in folders a few levels up.


Ex:  


<xsl:include href=""../../common/myfunctions.xsl""/>


When camel starts up and tries to resolve the paths it crashes because of the current implementation in ObjectHelper.resolveUriPath(..)


Made a simple testcase that demonstrates my problem.



public void testResolveUriPath() throws Exception {
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../""));         //  OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/../two/../""));  // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/""));                // OK
        assertEquals("""", ObjectHelper.resolveUriPath(""./""));                        // OK
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../../""));  // Fails, gives 'xslt/one/.'
        assertEquals(""xslt/"", ObjectHelper.resolveUriPath(""xslt/one/two/../.././""));// Fails, gives 'xslt/one/.'
    }","davsclaus:1348273999:2012-09-22T08:33:19.581+0000:1348273999:2012-09-22T08:33:19.581+0000:This is a regression introduce by CAMEL-5321
davsclaus:1348278291:2012-09-22T09:44:51.090+0000:1348278291:2012-09-22T09:44:51.090+0000:Also fixed an issue with using multiple back paths, eg ""../../../foo"""
0,CAMEL-5631,Bug,Minor,2.10.0,"2.9.4, 2.10.2, 2.11.0","
None
",Closed,Fixed,"2.9.4, 2.10.2, 2.11.0",Christian Müller,Frank Schönheit,0,2,2012-09-20 11:18:09+00:00,2012-10-21 18:16:57+00:00,"Having two or more notifiers registered at the management strategy of a camel context, where one of the notifiers (not the last one) is set up to ignore route events, results in all remaining notifiers to be skipped when notifying a RouteStartedEvent.


Look at http://svn.apache.org/viewvc/camel/branches/camel-2.10.x/camel-core/src/main/java/org/apache/camel/util/EventHelper.java?revision=1340446&view=markup, line 237: There's a ""return"" which actually should be a ""continue"".


Note: CamelContextStoppingEvents are also affected.","frank.schoenheit:1348111196:2012-09-20T11:19:56.404+0000:1348111196:2012-09-20T11:19:56.404+0000:EventHelperTest.java contains a unit test exposing the problem.
muellerc:1348304143:2012-09-22T16:55:43.632+0000:1348304143:2012-09-22T16:55:43.632+0000:Thanks for reporting Frank.
It's now fixed. Do you consider to test the current SNAPSHOT's to see whether it works for you?
frank.schoenheit:1348531332:2012-09-25T08:02:12.554+0000:1348531332:2012-09-25T08:02:12.554+0000:Will do, probably today. Thanks for fixing.
frank.schoenheit:1350647286:2012-10-19T19:48:06.842+0000:1350647286:2012-10-19T19:48:06.842+0000:Uhm, this ... ??slightly?? slipped for a number of reasons. Well, finally: It's fixed in 2.10.3-SNAPSHOT. Thank you.
muellerc:1350697258:2012-10-20T09:40:58.751+0000:1350697258:2012-10-20T09:40:58.751+0000:It's fixed in 2.10.2 which is already released.
frank.schoenheit:1350814617:2012-10-21T18:16:57.991+0000:1350814617:2012-10-21T18:16:57.991+0000:ops :)"
0,CAMEL-5630,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,3,2012-09-20 03:56:35+00:00,2012-09-28 07:47:37+00:00,"As the windows printer has some prefix like ""[Win32 Printer : Microsoft XPS Document Writer, Win32 Printer :\\nrbnrw0264\nrbco006]"", it makes camel-printer impossible to look up the right printer without using prefix string.


We could resolve this issue by adding a PrinterPrefix option to the camel-printer endpoint.","davsclaus:1348182054:2012-09-21T07:00:54.076+0000:1348182054:2012-09-21T07:00:54.076+0000:What if the lookup is based on String endsWith matching? Then you can match on just do ""nrbnrw0264\nrbco006"", eg:
{code}
.to(""lpr:nrbnrw0264\nrbco006"")
{code}
I would assume that is sufficient to be unique?
njiang:1348186808:2012-09-21T08:20:08.024+0000:1348186808:2012-09-21T08:20:08.024+0000:Yeah, it could work, I will commit a quick patch for it.
bvahdat:1348190368:2012-09-21T09:19:28.484+0000:1348190403:2012-09-21T09:20:03.343+0000:There seems to be an old _not documented_ option called {{sendToPrinter}} as well which I just added it to the Wiki:

http://camel.465427.n5.nabble.com/CONF-Apache-Camel-gt-Printer-td5719714.html
"
0,CAMEL-5629,New Feature,Minor,2.10.1,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Amit Patel,0,2,2012-09-19 14:57:32+00:00,2012-09-21 13:19:47+00:00,"CamelContext allows to add InterceptStrategy not InterceptFromDefinition.
To add below intercept xml to camelContext, I need to add InterceptDefinition to CamelContext. I don't find any add method for InterceptDefinition just like addRouteDefinitions and addRouteDefinition.


InterceptDefinition 
======================== 
<interceptFrom xmlns=""http://camel.apache.org/schema/spring"" >
          <when>
          <groovy> return exchange.fromRouteId == 'test.hello.restlet.1.0' </groovy>
        </when>
        <to uri=""direct:test.intercepter.v1""/>
    </interceptFrom>""""""","davsclaus:1348181264:2012-09-21T06:47:44.151+0000:1348181264:2012-09-21T06:47:44.151+0000:See this page for examples with interceptFrom
http://camel.apache.org/intercept
amit1000:1348204787:2012-09-21T13:19:47.375+0000:1348204787:2012-09-21T13:19:47.375+0000:I need to add InterceptDefinition to CamelContext using addInterceptDefinition method. I don't find this method in camelContext class. I don't find this in document also. It shows I can add interceptFrom in camelContext xml, but i don't found it allow to add using camelContext class. Please let me know if you have any questions or need more information.


  "
0,CAMEL-5628,Improvement,Minor,2.10.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2012-09-19 07:07:13+00:00,2015-07-11 13:46:25+00:00,"If you use the sticky load balancer over http endpoints, and want to use the http session id as correlation expression, then you may have a problem on the initial call (eg no http session yet). Then the correlation expression would yield empty/null. 


We should add an option to the sticky load balancer, in that case, when the correlation expression is empty/null, to pick a random (or we can do round robin) endpoint, and then after the call, then execute the correlation expression again, to grab the value (eg such as a http session). Then it should use this matching for the future so on the next call it will pick the same http endpoint again.


The trick though is that the algorithm is no longer a simple hashing. But would need to be per client. And as we don't want to keep this matching list forever in Camel, we would need to use a LRUCache so the matching can expire if not in use. And for that we should offer an option to set the idle timeout value. So you can match that with eg the http session timeout. For example 30 minutes etc.


This would make it much easier to use Camel as http load balancer with the http session id from the remote http endpoints.","davsclaus:1348009733:2012-09-19T07:08:53.645+0000:1348009733:2012-09-19T07:08:53.645+0000:See problem describer here
http://fusesource.com/forums/thread.jspa?threadID=4251&tstart=0"
0,CAMEL-5627,Bug,Major,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Willem Jiang,0,2,2012-09-19 03:40:45+00:00,2012-09-19 13:50:46+00:00,"User complains that  ""The URI parameters on my consumer endpoint seem to be affecting the behaviour of my producer endpoint."" If he has two zookeeper endpoint with different uri configuration in the different routes. 
You can find more information in this thread[1]
[1]http://camel.465427.n5.nabble.com/URI-parameters-for-one-Zookeeper-endpoint-are-contaminating-another-endpoint-td5719559.html","davsclaus:1348006991:2012-09-19T06:23:11.831+0000:1348006991:2012-09-19T06:23:11.831+0000:In some of the other Camel components that have a Configuration class (assuming its the same case here), we do a copy of it beforehand (using clone) in the createEndpoint method. I think we should do the same. See for example the MailComponent.
njiang:1348033846:2012-09-19T13:50:46.908+0000:1348033846:2012-09-19T13:50:46.908+0000:Apply the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5626,Bug,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Raúl Kripalani,Raúl Kripalani,0,1,2012-09-19 00:12:35+00:00,2012-09-19 23:09:27+00:00,"Test JmsToJmsTransactedSecurityTest fails every now and then because of JMS message redelivery. When the entire test class is executed, it sometimes happens that the message that failed at testJmsSecurityFailure test method pops up in the assertions of testJmsSecurityOK.",raulvk:1348067367:2012-09-19T23:09:27.929+0000:1348067367:2012-09-19T23:09:27.929+0000:Resolved in r1387809. Test now consumes from the queue to remove the redelivered message before the method returns.
0,CAMEL-5625,Test,Minor,2.10.1,2.11.0,"

jt400

",Resolved,Fixed,2.11.0,Claus Ibsen,João Loureiro,0,2,2012-09-18 13:32:13+00:00,2012-09-21 06:56:30+00:00,Add a test case that tests Jt400PgmEndpoint.toString(). This is useful in asserting that the string does not contain the endpoint password.,"jloureiro:1347946350:2012-09-18T13:32:30.972+0000:1347946350:2012-09-18T13:32:30.972+0000:Patch attached.
davsclaus:1348181790:2012-09-21T06:56:30.376+0000:1348181790:2012-09-21T06:56:30.376+0000:Thanks"
0,CAMEL-5624,Improvement,Trivial,2.10.1,None,"

jt400
security

",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,João Loureiro,0,2,2012-09-18 13:29:19+00:00,2012-09-21 06:54:39+00:00,Sanitize the endpoint URI in the message of the runtime exception thrown in the constructors for Jt400DataQueueEndpoint and Jt400PgmEndpoint.,"jloureiro:1347946184:2012-09-18T13:29:44.304+0000:1347946184:2012-09-18T13:29:44.304+0000:Patch attached.
davsclaus:1348181679:2012-09-21T06:54:39.014+0000:1348181679:2012-09-21T06:54:39.014+0000:Thanks for the patch"
0,CAMEL-5593,Bug,Minor,2.9.3,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Meifang Shen,0,2,2012-09-12 03:46:19+00:00,2012-09-12 08:47:17+00:00,"When input the logger name, as if it againsts the rules, no any prompt message to user.
1. If the length of logger name is greater than 30, then it will be only shown the last 30 substring, but lose the first several substring.
2. if the logger name like the following string ., then only show that after dot sign but lose that before dot sign.


Sample
if te logger name is ""[===ErrorLog===]ppppppppppppp!@@"", then in the log info, it is ""==ErrorLog===]ppppppppppppp!@@""
if the logger name is ""ErrorLog.[===ErrorLog===]"", but show the name ""[===ErrorLog===]"".","davsclaus:1347399718:2012-09-12T05:41:58.951+0000:1347399718:2012-09-12T05:41:58.951+0000:I dont think this is a Camel problem. Sounds like your logging configuration is configured to cut the name after 30 chars.
mfshen:1347410322:2012-09-12T08:38:42.503+0000:1347410837:2012-09-12T08:47:17.240+0000:I think not because of the logging configuration, please see the below configuration.


{noformat} 
routeBuilder = new org.apache.camel.builder.RouteBuilder() {
	public void configure() throws Exception {
		errorHandler(loggingErrorHandler().logName(
				""TestLoggingErrorHandler[=====]@@"").level(
				org.apache.camel.LoggingLevel.ERROR));
		from(uriMap.get(""Sender_cMessagingEndpoint_1""))
				.routeId(""Sender_cMessagingEndpoint_1"")
				.process(new org.apache.camel.Processor() {
					public void process(org.apache.camel.Exchange exchange) throws Exception {
						throw new java.lang.Exception(""This is specially generated java.lang.Exception exception"");
					}

				}).id(""cProcessor_1"");
	}
};
getCamelContexts().get(0).addRoutes(routeBuilder);
{noformat} 

After execute this route, then the logger name is ""stLoggingErrorHandler[=====]@@"", just the last 30 chars."
0,CAMEL-5592,Bug,Minor,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Meifang Shen,0,2,2012-09-12 03:22:23+00:00,2012-09-28 13:05:49+00:00,"when logger level is set to other level (WARN, DEBUG or INFO) except for ERROR, but actually the log is always at ERROR level (it's the default level).","davsclaus:1347399780:2012-09-12T05:43:00.331+0000:1347399780:2012-09-12T05:43:00.331+0000:Can you post your configuration of the logger error handler. And an example of what is being logged.
mfshen:1347410468:2012-09-12T08:41:08.046+0000:1347410578:2012-09-12T08:42:58.260+0000:Please see the configuration of the logger error handler:
{noformat} 
routeBuilder = new org.apache.camel.builder.RouteBuilder() {
	public void configure() throws Exception {
		errorHandler(loggingErrorHandler().logName(
				""TestLoggingErrorHandler"").level(
				org.apache.camel.LoggingLevel.ERROR));
		from(uriMap.get(""Sender_cMessagingEndpoint_1""))
				.routeId(""Sender_cMessagingEndpoint_1"")
				.process(new org.apache.camel.Processor() {
					public void process(org.apache.camel.Exchange exchange) throws Exception {
						throw new java.lang.Exception(""This is specially generated java.lang.Exception exception"");
					}

				}).id(""cProcessor_1"");
	}
};
getCamelContexts().get(0).addRoutes(routeBuilder);
{noformat} 

BTW, about the urimap, please see below code.

protected void initUriMap() {
	uriMap = new java.util.HashMap<String, String>();
	uriMap.put(""Sender_cMessagingEndpoint_1"", ""timer:myTimer?repeatCount=1"");
}

davsclaus:1348808749:2012-09-28T13:05:49.265+0000:1348808749:2012-09-28T13:05:49.265+0000:Thanks for reporting."
0,CAMEL-5591,Improvement,Major,2.11.0,None,"
None
",Resolved,Fixed,2.11.0,Henryk Konsek,Henryk Konsek,0,1,2012-09-11 20:53:02+00:00,2012-09-12 07:01:59+00:00,There is new version of Javassist bundle available. Can somebody upgrade it as in attached patch?,hekonsek:1347404519:2012-09-12T07:01:59.790+0000:1347404519:2012-09-12T07:01:59.790+0000:Patched applied by Willem.
0,CAMEL-5590,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,skydjol,0,2,2012-09-11 20:38:09+00:00,2013-01-18 17:48:58+00:00,"When use parameters recursive=true in url and lot of directory/files the camel context never start correctly.


But processing file start.","davsclaus:1347399940:2012-09-12T05:45:40.638+0000:1347399940:2012-09-12T05:45:40.638+0000:Can you give more detail what is the problem for you? What do you mean by ""newer start correctly.""

Also please read this page first
http://camel.apache.org/support

Please use the mailing list first to talk about your Camel issues; there is a lot more people to help. We want the issue tracker to *only* be used for more technical issues where a bug is apparent, patches etc.


skydjol:1347411599:2012-09-12T08:59:59.871+0000:1347411599:2012-09-12T08:59:59.871+0000:When use camel-file with recursive option and camel context start then 'MarkerFileExclusiveReadLockStrategy' try to delete orphan file.
This action take some times with many files in many directory but file processing start.

While 'MarkerFileExclusiveReadLockStrategy' no finish process and the camel-context status not started (camelContext.getStatus().isStarting() return true).

It's a problem when you have a seda consumer on this route because he never consume the Exchange while camel context not start

I try to write a Unit Test to demonstrate this behaviour .

(Sorry for create ticket without discuss on forum before)
davsclaus:1347420793:2012-09-12T11:33:13.641+0000:1347420793:2012-09-12T11:33:13.641+0000:Ah yeah maybe we can move that delete orphaned files task to the scheduled task itself so its run onces first on the first poll."
0,CAMEL-5589,Task,Minor,None,None,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Babak Vahdat,0,1,2012-09-11 18:17:32+00:00,2012-09-11 18:37:14+00:00,"The StringBuilder Javadoc says it all already:



A mutable sequence of characters. This class provides an API compatible with StringBuffer, but with no guarantee of synchronization. This class is designed for use as a drop-in replacement for StringBuffer in places where the string buffer was being used by a single thread (as is generally the case). Where possible, it is recommended that this class be used in preference to StringBuffer as it will be faster under most implementations.",
0,CAMEL-5588,Improvement,Critical,2.10.1,"2.9.4, 2.10.2, 2.11.0","

aries
camel-cxf

",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Daniel Kulp,Sergey Beryozkin,0,1,2012-09-11 15:09:50+00:00,2012-09-11 18:34:30+00:00,"Camel CXF bundle gets the default Aries version range excluding Aries 1.0.0. This prevents Camel CXF from working in Karaf 2.3.0 (-SNAPSHOT).


The provided patch adds an explicit version range with 1.0 version being included. Alternatively it can be set to [0.3, 2.0)",
0,CAMEL-5587,Improvement,Minor,2.10.0,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Claus Ibsen,Claus Ibsen,0,2,2012-09-10 06:43:12+00:00,2015-07-11 14:05:19+00:00,"See nabble
http://camel.465427.n5.nabble.com/Getting-consumer-endpoint-details-or-exchange-headers-in-custom-ExceptionHandler-tp5718633.html


If people want to share a custom ExceptionHandler among a number of route consumers, then when an exception is being handled, they wont know which consumer failed.


We could add a method with the consumer parameter. But that would break the old API. But that may be okay as using a custom ExceptionHandler is not commonly used.","davsclaus:1347235021:2012-09-10T07:57:01.514+0000:1347235021:2012-09-10T07:57:01.514+0000:We could just add a (Object source) as parameter where {{this}} will be passed in as parameter. Then the implementation can check its type and do type cast to get the Consumer etc.
davsclaus:1347244378:2012-09-10T10:32:58.528+0000:1347244378:2012-09-10T10:32:58.528+0000:About 20 or so Camel components would need to migrate to this newer API.


davsclaus:1347245907:2012-09-10T10:58:27.150+0000:1347245907:2012-09-10T10:58:27.150+0000:Posted on @dev to discuss this impact
http://camel.465427.n5.nabble.com/DISCUSS-API-change-on-org-apache-camel-spi-ExceptionHandler-tp5719023.html
hadrian:1347444852:2012-09-12T18:14:12.478+0000:1347444852:2012-09-12T18:14:12.478+0000:Kinda old, but still instructive:
http://today.java.net/article/2006/04/04/exception-handling-antipatterns
davsclaus:1374995550:2013-07-28T15:12:30.091+0000:1374995550:2013-07-28T15:12:30.091+0000:Lets move this to 3.x as there is some API changes needed. And we may still decide to keep it as is, if there isn't a need for this anyway?"
0,CAMEL-5586,Task,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Christian Müller,0,3,2012-09-09 20:39:34+00:00,2012-09-12 05:46:08+00:00,"christian-muellers-macbook-pro:camel-elasticsearch cmueller$ mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: ElasticSearch 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-elasticsearch ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/components/camel-elasticsearch/target
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-elasticsearch ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-elasticsearch ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-elasticsearch ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-elasticsearch ---
[INFO] Compiling 4 source files to /Users/cmueller/workspaceCamel/camel/components/camel-elasticsearch/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-elasticsearch ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-elasticsearch ---
[INFO] Compiling 3 source files to /Users/cmueller/workspaceCamel/camel/components/camel-elasticsearch/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-elasticsearch ---
[INFO] Surefire report directory: /Users/cmueller/workspaceCamel/camel/components/camel-elasticsearch/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.elasticsearch.ElasticsearchComponentTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 29.103 sec
Running org.apache.camel.component.elasticsearch.ElasticsearchConfigurationTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running org.apache.camel.component.elasticsearch.SpringElasticsearchTest
Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 61.241 sec <<< FAILURE!

Results :

Tests in error: 
  testSendBody(org.apache.camel.component.elasticsearch.SpringElasticsearchTest): Exception occurred during execution on the exchange: Exchange[Message: {content=test}]

Tests run: 13, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:39.984s
[INFO] Finished at: Sun Sep 09 22:39:03 CEST 2012
[INFO] Final Memory: 11M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.8:test (default-test) on project camel-elasticsearch: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/cmueller/workspaceCamel/camel/components/camel-elasticsearch/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException","bvahdat:1347240685:2012-09-10T09:31:25.391+0000:1347240685:2012-09-10T09:31:25.391+0000:The latest JDK7 build right before was O.K.: https://builds.apache.org/job/Camel.trunk.fulltest.java7/257/org.apache.camel$camel-elasticsearch/testReport/org.apache.camel.component.elasticsearch/

bvahdat:1347241533:2012-09-10T09:45:33.067+0000:1347241533:2012-09-10T09:45:33.067+0000:I intend to upgrade to the newest v0.19.9 version.
bvahdat:1347243681:2012-09-10T10:21:21.727+0000:1347253451:2012-09-10T13:04:11.052+0000:I polished the camel-elasticsearch codebase a bit:

http://svn.apache.org/viewvc?rev=1382732&view=rev
http://svn.apache.org/viewvc?rev=1382802&view=rev
http://svn.apache.org/viewvc?rev=1382807&view=rev
bvahdat:1347256989:2012-09-10T14:03:09.823+0000:1347256989:2012-09-10T14:03:09.823+0000:O.K. it's fixed now. The tests also run now much faster than before (through overriding the [hook|http://camel.apache.org/maven/current/camel-test/apidocs/org/apache/camel/test/junit4/CamelTestSupport.html#isCreateCamelContextPerClass()]). On my box now running all the tests take about 3 seconds compared to around 30 seconds before!

{code}
~/dev/workspace/camel/components/camel-elasticsearch>mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: ElasticSearch 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-elasticsearch ---
[INFO] Deleting /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/target
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-elasticsearch ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.3:process (default) @ camel-elasticsearch ---
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-elasticsearch ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-elasticsearch ---
[INFO] Compiling 4 source files to /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-elasticsearch ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-elasticsearch ---
[INFO] Compiling 3 source files to /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.8:test (default-test) @ camel-elasticsearch ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.elasticsearch.ElasticsearchComponentTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.436 sec
Running org.apache.camel.component.elasticsearch.ElasticsearchConfigurationTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec
Running org.apache.camel.component.elasticsearch.SpringElasticsearchTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.793 sec

Results :

Tests run: 13, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:bundle (default-bundle) @ camel-elasticsearch ---
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for !org.apache.camel.component.elasticsearch.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for com.thoughtworks.xstream.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for freemarker.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for javax.persistence.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for net.sf.flatpack.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for net.sf.saxon.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.antlr.stringtemplate.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.abdera.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.commons.httpclient.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.commons.logging.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.cxf.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.qpid.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.velocity.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.apache.xmlbeans.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.ccil.cowan.tagsoup.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.eclipse.jetty.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.jivesoftware.smack.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.mortbay.cometd.*
[WARNING] Bundle org.apache.camel:camel-elasticsearch:bundle:2.11-SNAPSHOT : Did not find matching referal for org.springframework.*
[INFO] 
[INFO] --- maven-site-plugin:3.1:attach-descriptor (attach-descriptor) @ camel-elasticsearch ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-elasticsearch ---
[INFO] Checking legal files in: camel-elasticsearch-2.11-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ camel-elasticsearch ---
[INFO] Installing /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/target/camel-elasticsearch-2.11-SNAPSHOT.jar to /Users/bvahdat/.m2/repository/org/apache/camel/camel-elasticsearch/2.11-SNAPSHOT/camel-elasticsearch-2.11-SNAPSHOT.jar
[INFO] Installing /Users/bvahdat/dev/workspace/camel/components/camel-elasticsearch/pom.xml to /Users/bvahdat/.m2/repository/org/apache/camel/camel-elasticsearch/2.11-SNAPSHOT/camel-elasticsearch-2.11-SNAPSHOT.pom
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:install (default-install) @ camel-elasticsearch ---
[INFO] Installing org/apache/camel/camel-elasticsearch/2.11-SNAPSHOT/camel-elasticsearch-2.11-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.291s
[INFO] Finished at: Mon Sep 10 15:39:08 CEST 2012
[INFO] Final Memory: 17M/1011M
[INFO] ------------------------------------------------------------------------
~/dev/workspace/camel/components/camel-elasticsearch>
{code}
bvahdat:1347257479:2012-09-10T14:11:19.046+0000:1347257479:2012-09-10T14:11:19.046+0000:I'll still keep the ticket open because of SMX4-1233.
muellerc:1347279598:2012-09-10T20:19:58.194+0000:1347279598:2012-09-10T20:19:58.194+0000:Many thanks for fixing this issue!
davsclaus:1347399968:2012-09-12T05:46:08.723+0000:1347399968:2012-09-12T05:46:08.723+0000:Thanks it works now"
0,CAMEL-5585,Improvement,Major,2.11.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-09 13:17:28+00:00,2016-05-06 12:50:31+00:00,"If redeliverWhileStopping=false, and we are currently sleeping before attempting a redelivery. Then we could interrupt the thread and reject.


This allows to stop quicker.


The trick is to interrupt the sleep graceful. For example to sleep in a loop instead, and check if we should still sleep.


The scheduled thread pool on the other hand could have many pending tasks. So we would need to shutdown now, and then reject running them, eg need to set exception and invoke done callback.


An alternative instead of using a scheduled thread pool. Would to have a task queue, and a multiplexed background thread that runs once in a while (eg every second). Then that could more easy reject the tasks.


The caveat is if people use delays < 1 sec. As the thread would then need to be quicker. As well keep precise count when to execute the redelivery.",davsclaus:1462510231:2016-05-06T12:50:31.718+0000:1462510231:2016-05-06T12:50:31.718+0000:This is now implemented for synchronous. If using asyncDelayed then its still the scheduled thread pool that sleeps.
0,CAMEL-5584,Task,Trivial,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Babak Vahdat,0,1,2012-09-08 11:33:57+00:00,2012-09-08 11:49:57+00:00,The 3 constructors of this class should be deprecated as well with substitutions providing no such 'forcedShutdown' parameter.,
0,CAMEL-5583,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Claus Ibsen,0,4,2012-09-08 09:59:43+00:00,2016-01-27 09:21:04+00:00,"Ning-compress
https://github.com/ning/compress


Is a compression library. We should add a data format for it. Its already an OSGi bundle as well.","mnki:1438676579:2015-08-04T16:22:59.805+0000:1438676579:2015-08-04T16:22:59.805+0000:I would like to work on  this..
mnki:1440638364:2015-08-27T09:19:24.463+0000:1440638364:2015-08-27T09:19:24.463+0000:i am not working on this.Any one else can take this.
lb:1453701390:2016-01-25T13:56:30.749+0000:1453701390:2016-01-25T13:56:30.749+0000:[~davsclaus] I've implemented this JIRA [here|https://github.com/lburgazzoli/apache-camel/commit/d3cefe0a238afc7c0142064dd09186510d668c00] and it mimics GZipDataFormat.
As it introduces an optional dependency compression-lzf, should this be added to camel-core feature ? 
githubbot:1453784210:2016-01-26T12:56:50.959+0000:1453784210:2016-01-26T12:56:50.959+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/803

    CAMEL-5583 - Add ning-compress as data format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-5583

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/803.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #803
    
----
commit d3cefe0a238afc7c0142064dd09186510d668c00
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-25T13:49:30Z

    CAMEL-5583 - Add ning-compress as data format

----

githubbot:1453786126:2016-01-26T13:28:46.583+0000:1453786126:2016-01-26T13:28:46.583+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/803

githubbot:1453792799:2016-01-26T15:19:59.988+0000:1453792799:2016-01-26T15:19:59.988+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/805

    CAMEL-5583 - Add ning-compress as data format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-5583

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/805.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #805
    
----
commit 0ab856eb497d6a45831db33a57f1843e323be787
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-26T15:18:37Z

    CAMEL-5583 - Add ning-compress as data format

----

githubbot:1453801657:2016-01-26T17:47:37.108+0000:1453801657:2016-01-26T17:47:37.108+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/807

    CAMEL-5583 - add LZFDataFormat to jaxp.index

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-5583-jaxb

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/807.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #807
    
----
commit d5574fdb709b46cba926c14ee910757aab55f9ff
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-26T17:46:23Z

    CAMEL-5583 - add LZFDataFormat to jaxp.index

----

githubbot:1453801760:2016-01-26T17:49:20.497+0000:1453801760:2016-01-26T17:49:20.497+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/807

githubbot:1453801824:2016-01-26T17:50:24.489+0000:1453801824:2016-01-26T17:50:24.489+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/805
"
0,CAMEL-5582,Bug,Minor,2.10.1,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Daniel Gredler,0,2,2012-09-07 21:16:47+00:00,2012-09-11 06:51:38+00:00,"The following route doesn't work on Windows:



from(""file:foo"").marshal().pgp(...).to(""ftp:blah"")



The reason is that PGPDataFormat.marshal() and PGPDataFormat.unmarshal() both use IOUtils.toByteArray() to read the incoming stream into a byte array, but neither of these two methods closes the streams after they have been read from. My understanding is that not closing these streams prevents Camel from subsequently renaming the file once the route has completed. I've attached a sample stack trace at the bottom.


The following seems to fix the issue for me:


Replacing the following code in org.apache.camel.converter.crypto.PGPDataFormat.marshal(...):



InputStream plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);

byte[] compressedData = PGPDataFormatUtil.compress(IOUtils.toByteArray(plaintextStream),
        PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);



With this code:



byte[] plaintextData;
InputStream plaintextStream = null;
try {
    plaintextStream = ExchangeHelper.convertToMandatoryType(exchange, InputStream.class, graph);
    plaintextData = IOUtils.toByteArray(plaintextStream);
} finally {
    IOUtils.closeQuietly(plaintextStream);
}

byte[] compressedData = PGPDataFormatUtil.compress(plaintextData, PGPLiteralData.CONSOLE, CompressionAlgorithmTags.ZIP);



And replacing the following code in org.apache.camel.converter.crypto.PGPDataFormat.unmarshal(...):



InputStream in = new ByteArrayInputStream(IOUtils.toByteArray(encryptedStream));
in = PGPUtil.getDecoderStream(in);



With this code:



InputStream in;
try {
    byte[] encryptedData = IOUtils.toByteArray(encryptedStream);
    InputStream byteStream = new ByteArrayInputStream(encryptedData);
    in = PGPUtil.getDecoderStream(byteStream);
} finally {
    IOUtils.closeQuietly(encryptedStream);
}



And here's the stack trace mentioned above:



org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\opt\connect\just\a\test\lax\blah.txt to C:\opt\connect\just\a\test\lax\.sent\blah.txt
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:72)
    at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:107)
    at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86)
    at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:132)
    at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82)
    at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53)
    at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55)
    at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226)
    at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199)
    at org.apache.camel.processor.UnitOfWorkProcessor.access$000(UnitOfWorkProcessor.java:37)
    at org.apache.camel.processor.UnitOfWorkProcessor$1.done(UnitOfWorkProcessor.java:157)
    at org.apache.camel.processor.RouteContextProcessor$1.done(RouteContextProcessor.java:56)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:106)
    at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
    at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
    at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
    at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
    at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336)
    at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189)
    at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155)
    at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:139)
    at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:91)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
    at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.IOException: Renaming file from: C:\opt\connect\just\a\test\lax\blah.txt to: C:\opt\connect\just\a\test\lax\.sent\blah.txt failed due cannot delete from file: C:\opt\connect\just\a\test\lax\blah.txt after copy succeeded
    at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:362)
    at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:70)
    ... 36 more","davsclaus:1347150246:2012-09-09T08:24:06.912+0000:1347150246:2012-09-09T08:24:06.912+0000:Thanks for reporting.

The workaround is to convert the payload to a String before the marshal

from -> convertTo(String) -> marshal
sdanig:1347274405:2012-09-10T18:53:25.934+0000:1347274405:2012-09-10T18:53:25.934+0000:Thanks for the hint! For binary files, would it be OK to convert to a byte[] instead?
davsclaus:1347317498:2012-09-11T06:51:38.684+0000:1347317498:2012-09-11T06:51:38.684+0000:Yeah byte[] is good as well, eg .convertBodyTo(byte[].class)"
0,CAMEL-5581,Improvement,Minor,"2.10.1, 2.11.0","2.10.3, 2.11.0","
None
",Resolved,Won't Fix,"2.10.3, 2.11.0",Claus Ibsen,Claudio Corsi,0,3,2012-09-07 21:06:23+00:00,2012-11-11 15:56:09+00:00,"The current hbase component does not provide the ability to forward of the exchange information except for the associated hbase data.  


This improvement adds the concept of an ExchangeStrategy that users can extend and allow them to include information from the current exchange in-coming message to the out-going message.


I have a default implementation that does nothing that can be extended by a user.  This default implementation can be extended in the future such that users will then not be required to add missing methods.","ccorsi:1347023791:2012-09-07T21:16:31.989+0000:1347023791:2012-09-07T21:16:31.989+0000:Here is the patch the includes the addition of the ExchangeStrategy.

It does not extend the CellMappingStrategy such that users that have implemented this strategy will not be affected. 

It creates a new ExchangeStrategy interface that includes a DefaultExchangeStrategy that users can extend from.

davsclaus:1347151553:2012-09-09T08:45:53.306+0000:1347151553:2012-09-09T08:45:53.306+0000:We have 100+ components in Camel and none have this kind of custom strategy. I wonder why this is needed. Can you describe a use-case?

It seems to me you want to use the Content Enricher EIP instead? This EIP allows to enrich an existing Exchange with another Exchange.
http://camel.apache.org/content-enricher.html

For that there is the {{AggregationStrategy}} interface, where you can do custom coding.


ccorsi:1347259582:2012-09-10T14:46:22.686+0000:1347259582:2012-09-10T14:46:22.686+0000:The reason that I added this suggestion was that if I wanted to retrieve some data from a hbase repository but want to also log the original exchange after processing the hbase information then in this case I am unable to do just that.  The hbase component does not provide the ability to forward any data from the in-message to the out-message except for the hbase specific data.  You are limited to what is retrieved from hbase and any other data is lost along the way.

There are ways that can be used to forward that information using for instance the dynamic router pattern to route the message to its destination based on the hbase result but this does not provide an ability to propagate the hbase data to the destination unless you add all of that information on the required end point string returned.

Looking at the content enricher pattern, I see the use of this technique but in the prior case.  Looking at the aggregation strategy example.  This technique will try to combine to results into one but it does not seem to allow for the ability to use data from the in-coming exchange to be used by the aggregating exchange. You would need to create a Processor that uses the exchange in-coming message to setup a call to hbase and use the results in conjunction with the in-message to generate the out-message that will be forwarded to the resulting endpoint.  Your suggestion would require that the aggregate resource exchange instance would have to use a general endpoint.  If you are using a really large hbase set of data.  You would want to minimize the size of the returned data.  I do not see how that can be done unless you create multiple endpoints which will clutter the application.

I might be wrong in my assessment and will look at this further and thanks for the feedback.  It is greatly appreciated.

davsclaus:1347259830:2012-09-10T14:50:30.474+0000:1347259830:2012-09-10T14:50:30.474+0000:You can always store data as property on the exchange.

Also many Camel components propagated automatic headers. So maybe the hbase producer should support that as well.
ccorsi:1347261686:2012-09-10T15:21:26.987+0000:1347261686:2012-09-10T15:21:26.987+0000:Ah yes, that is a good point but then this will still require that the user includes a Processor that will extract data from the in-coming message and apply it as a Property in the Exchange.  That is a reasonable alternative.

Thanks...

muellerc:1347360160:2012-09-11T18:42:40.999+0000:1347360160:2012-09-11T18:42:40.999+0000:Sounds for me like the [content enricher|http://camel.apache.org/content-enricher.html] pattern...
davsclaus:1352620569:2012-11-11T15:56:09.350+0000:1352620569:2012-11-11T15:56:09.350+0000:Use the Content Enricher pattern"
0,CAMEL-5580,Bug,Minor,2.10.1,"2.10.2, 2.11.0","

camel-hbase

",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,Claudio Corsi,0,2,2012-09-07 20:54:13+00:00,2012-09-09 08:42:09+00:00,"The hbase component create a row model from the passed endpoint configuration using the family/qualifier/etc information from the uri.  


This process currently does not extra the value type for value type n greater than 1.  It currently uses the value type from the one defined for value 1.  This is currently not a problem since this information is not being used within the hbase component but if we intend to use it the future this fix insures that it will extract the correct information for the row model.


The extracted CellMappingStrategy within the HBaseConsumer is always going to return the same instance throughout the for loop.  This has been moved outside of the for loop so that it is extract only once instead of multiple times.


Added a check to the setValueType method of the HBaseCell class to sure that the passed value is non-null else raise an exception.","ccorsi:1347022548:2012-09-07T20:55:48.931+0000:1347022548:2012-09-07T20:55:48.931+0000:Here is the patch that implements those aforementioned changes.
davsclaus:1347150497:2012-09-09T08:28:17.366+0000:1347150497:2012-09-09T08:28:17.366+0000:Thanks for the patch. Mind that there was some checkstyle issues

You can check that with
{code}
mvn compile -Psourcecheck
{code}
davsclaus:1347151329:2012-09-09T08:42:09.368+0000:1347151329:2012-09-09T08:42:09.368+0000:Thanks for the patch."
0,CAMEL-5579,Improvement,Minor,None,2.11.0,"

camel-core,

",Resolved,Fixed,2.11.0,Claus Ibsen,Claudio Corsi,0,3,2012-09-07 20:36:38+00:00,2012-10-30 16:10:44+00:00,"The current GroupedExchangeAggregationStrategy will combine a list of exchange instances for a given correlation expression and propagate the exchange with that list.   This is great as long as users are content with processing the list of exchanges.  


What about users that would like to extract data from the exchange and add that to the forwarded list?  This is something that require users to create their own strategy.


What I propose is that we provide base class for users to extend such that it manages the grouped list and have the user state and return the type of instances that will be added to the grouped list.


I will attach a base class that users can extend and an example of a sub-classed version that will return a list of exchange instances like the default GroupedExchangeAggregateStrategy camel core class.","ccorsi:1347021660:2012-09-07T20:41:00.441+0000:1347021660:2012-09-07T20:41:00.441+0000:Here are the sources that implements this improvement to the grouped by aggregation strategy approach.  This will then simplify the task of implementing a grouped by aggregation strategy by extending this class instead and not having the re-implement what the default grouped by process already does.

I have also include an example of extending this class so that it does the same thing as the already existing grouped by exchange aggregation strategy class.

davsclaus:1347151645:2012-09-09T08:47:25.649+0000:1347151645:2012-09-09T08:47:25.649+0000:The GroupedExchangeAggregationStrategy is not a strategy that we encourage end users to use. I dont think we should add more classes to the core.
ccorsi:1347261387:2012-09-10T15:16:27.411+0000:1347261387:2012-09-10T15:16:27.411+0000:Ah, I see why you are skeptical in accepting this solution.  I understand discouraging users from even using this strategy.  I was not saying that this addition should be on top of the current one but more like enhancing the current implementation such that if there are users that would like to use this feature then they just sub-class the GroupedExchangeStrategy base class instead of copying it and then making changes to it.  This will at least reduce the possibility of users incorrectly applying this strategy.  

You can then still discourage users from using this feature by including that warning within the class javadoc.

akuhtz:1349680293:2012-10-08T15:11:33.640+0000:1349680293:2012-10-08T15:11:33.640+0000:Hi Claudio,
Do you have a unit test that shows the usage?
ccorsi:1349856145:2012-10-10T16:02:25.129+0000:1349856145:2012-10-10T16:02:25.129+0000:Hi Andreas,

Here is a project that includes an example of how to use this feature that I was suggesting.  Keep in mind that this update will probably not be included with the distribution since this is not encouraged.

Regards,

--Claudio

davsclaus:1351582468:2012-10-30T15:34:28.675+0000:1351582468:2012-10-30T15:34:28.675+0000:I have improved the code a bit which allows to transfer the completion from the exchange property to the message body. This makes it even easier to do aggregation strategies where you want to build together a List<V>. This is IMHO better than the exchange property where the grouped exchanges is stored by default in the old logic.
davsclaus:1351584644:2012-10-30T16:10:44.253+0000:1351584644:2012-10-30T16:10:44.253+0000:Added a little sample on the aggregate eip wiki page"
0,CAMEL-5578,Improvement,Minor,2.10.1,2.11.0,"
None
",Closed,Fixed,2.11.0,Christian Müller,Christian Müller,0,4,2012-09-07 16:10:41+00:00,2012-10-21 18:53:12+00:00,No Desc,"davsclaus:1348789815:2012-09-28T07:50:15.731+0000:1348789815:2012-09-28T07:50:15.731+0000:Is there more work to be done?
muellerc:1348886437:2012-09-29T10:40:37.381+0000:1348886437:2012-09-29T10:40:37.381+0000:I'm not sure. At the weekend I want to go through the modules and check the pom's.
hekonsek:1349354477:2012-10-04T20:41:17.483+0000:1349354477:2012-10-04T20:41:17.483+0000:What about adding test scope to test dependencies in parent POM?

For example now we define JUnit in parent POM as:

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit-version}</version>
      </dependency>

And in particular modules we define this dependency as:

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <scope>test</test>
      </dependency>

Since we never use JUnit in other scope than ""test"", then unnecessarily repeat <scope>test</test> in each module. If we want to keep our POMs DRY we should define JUnit in parent POM as follows:

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit-version}</version>
        <scope>test</scope>
      </dependency>

And then in concrete modules:

      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
      </dependency>

The case same is for mockito, easymock, camel-test and so forth.
muellerc:1349613647:2012-10-07T20:40:47.648+0000:1349613647:2012-10-07T20:40:47.648+0000:in camel-test, we use the ""compile"" scope for junit...
bvahdat:1350816792:2012-10-21T18:53:12.659+0000:1350816792:2012-10-21T18:53:12.659+0000:Just cleaned up the last pieces I could spot:

http://svn.apache.org/viewvc?view=revision&revision=1400696

"
0,CAMEL-5577,Improvement,Minor,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Closed,Fixed,"2.9.4, 2.10.2, 2.11.0",Christian Müller,Christian Müller,0,1,2012-09-07 11:20:23+00:00,2012-09-09 17:24:11+00:00,See Nabble for details.,
0,CAMEL-5576,Improvement,Major,None,,"
None
",Open,Unresolved,None,Unassigned,James Strachan,0,2,2012-09-07 08:41:03+00:00,2023-07-17 12:03:55+00:00,"the underlying JAXB model of Camel has nothing to do with spring and can be used outside of Spring (e.g. with CDI or Guice or even without any DI frameworks). However traditionally we've got 'spring' in the namespace URI and we package the XSD inside the camel-spring.jar.


maybe we could include the camel-core.xsd in the same jar as the model classes using a more generic name; e.g. URI = ""http://camel.apache.org/schema/core"". Then folks can load and save the XML model of Camel more easily - without requiring camel-spring.jar


When using Camel inside spring we still need the namespace http://camel.apache.org/schema/spring to be supported; but maybe we can do that in the way the blueprint works; by swizzling the namespace URI in the Spring namespace hander?


Then we have a core namespace/xsd, a spring namespace/xsd and a blueprint namespace/xsd",davsclaus:1662079161:2022-09-02T08:39:21.345+0000:1662079161:2022-09-02T08:39:21.345+0000:the xml-io parser can read without spring as namespace
0,CAMEL-5575,New Feature,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Closed,Fixed,"2.9.6, 2.10.4, 2.11.0",Christian Müller,Amit Patel,0,3,2012-09-06 22:26:21+00:00,2012-12-04 22:31:43+00:00,"Our third-party application accepts Date as Http header, but HttpHeaderFilterStrategy.java filters the date. To support out third-party application I want new feature to add Custom http filter on a Http4 Endpoint.


I made the following changes on HttpComponent createEndpoint method  to support custom http filter as opetion qq on Http4 Endpoint. Please find source code in the attached HttpComponent.java file. 


 HttpHeaderFilterStrategy httpHeaderFilterStrategy = resolveAndRemoveReferenceParameter(
                                                                                               parameters, ""httpHeaderFilterStrategy"",
                                                                                               HttpHeaderFilterStrategy.class);
        if (httpHeaderFilterStrategy == null) 

{
			httpHeaderFilterStrategy = resolveAndRemoveReferenceParameter(
                                                                          parameters, ""httpHeaderFilterStrategy"",
                                                                          HttpHeaderFilterStrategy.class);
        }




        if (httpHeaderFilterStrategy != null) 

{
			endpoint.setHeaderFilterStrategy(httpHeaderFilterStrategy);
		}

 else 

{
			setEndpointHeaderFilterStrategy(endpoint);
      }","njiang:1346955453:2012-09-07T02:17:33.208+0000:1346955499:2012-09-07T02:18:19.450+0000:You can setup you customer HeaderFilterStrategy by setting it directly on the HttpComponent like this.
{code}
 HttpComponent httpComponent = new HttpComponent();
 HeaderFilterStrategy headerFilterStrategy = new CustomeHeaderFilterStrategy();
 httpComponent.setHeaderFilterStrategy(headerFilterStrategy);
 camelContext.addComponent(""http4"", httpComponent);
{code}
njiang:1346976373:2012-09-07T08:06:13.021+0000:1346976373:2012-09-07T08:06:13.021+0000:As the user could write a customer HeaderFilterStrategy without extending the HttpHeaderFilterStrategy, I'd like to change the option name to ""headerFilterStrategy"".
The patch will be applied to camel-http and camel-http4 components.
njiang:1346977408:2012-09-07T08:23:28.918+0000:1346977408:2012-09-07T08:23:28.918+0000:Applied the patch into trunk and also update the wiki page for it.
amit1000:1354518899:2012-12-03T15:14:59.329+0000:1354518899:2012-12-03T15:14:59.329+0000:Would you please add this feature to 2.9.5 and Camel 2.10.3 releases so we don't have to wait for 2.11.0.

muellerc:1354546284:2012-12-03T22:51:24.641+0000:1354546284:2012-12-03T22:51:24.641+0000:Camel 2.9.5 and 2.10.3 are already in VOTE. I'm afraid it's to late to back port this fix to these versions.

http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-9-5-td5723412.html
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-10-3-td5723516.html
amit1000:1354595937:2012-12-04T12:38:57.249+0000:1354595937:2012-12-04T12:38:57.249+0000:Christian,


 The changes  to add this feature is minor and risk free. Actually  this feature help us to resolve the defect. We have been waiting for last two months for Camel 2.11.0 release, but Camel 2.11.0 is not going to release pretty soon.

We really appreciate your help!

Thanks,
Amit Patel




On Dec 3, 2012, at 5:51 PM, Christian Müller (JIRA) <jira@apache.org<mailto:jira@apache.org>> wrote:


   [ https://issues.apache.org/jira/browse/CAMEL-5575?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13509287#comment-13509287 ]

Christian Müller commented on CAMEL-5575:
-----------------------------------------

Camel 2.9.5 and 2.10.3 are already in VOTE. I'm afraid it's to late to back port this fix to these versions.

http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-9-5-td5723412.html
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-10-3-td5723516.html

Add new HttpEndpoint Option ""httpHeaderFilterStrategy"" on Http4 component
-------------------------------------------------------------------------

               Key: CAMEL-5575
               URL: https://issues.apache.org/jira/browse/CAMEL-5575
           Project: Camel
        Issue Type: New Feature
        Components: camel-http
          Reporter: Amit Patel
          Assignee: Willem Jiang
           Fix For: 2.11.0

       Attachments: HttpComponent.java


Our third-party application accepts Date as Http header, but HttpHeaderFilterStrategy.java filters the date. To support out third-party application I want new feature to add Custom http filter on a Http4 Endpoint.
I made the following changes on HttpComponent createEndpoint method  to support custom http filter as opetion qq on Http4 Endpoint. Please find source code in the attached HttpComponent.java file.


HttpHeaderFilterStrategy httpHeaderFilterStrategy = resolveAndRemoveReferenceParameter(
                                                                                              parameters, ""httpHeaderFilterStrategy"",
                                                                                              HttpHeaderFilterStrategy.class);
       if (httpHeaderFilterStrategy == null) {
httpHeaderFilterStrategy = resolveAndRemoveReferenceParameter(
                                                                         parameters, ""httpHeaderFilterStrategy"",
                                                                         HttpHeaderFilterStrategy.class);
       }

       if (httpHeaderFilterStrategy != null) {
endpoint.setHeaderFilterStrategy(httpHeaderFilterStrategy);
} else {
setEndpointHeaderFilterStrategy(endpoint);
     }



--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira


muellerc:1354631488:2012-12-04T22:31:28.502+0000:1354631488:2012-12-04T22:31:28.502+0000:I have back ported this features to Camel 2.9.6 and 2.10.4."
0,CAMEL-5574,Bug,Major,2.10.1,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Akitoshi Yoshida,0,3,2012-09-06 20:57:01+00:00,2013-01-24 16:54:59+00:00,"I am having a directory traversal problem using the stepwise mode of camel-sftp at the producer side. Basically, it can walk down the path from the starting directory to the walking directory, but it cannot go back correctly to the original starting directly. The server is SSH-2.0-Cleo VLProxy/3.0.1 SSH FTP server.
I saw a related JIRA issue CAMEL-3309 that describes some issues in the stepwise traversal and some background to this related problem.


My question is on the part that changes the working directory back to the original starting folder. I am wondering why we are using stepwise traversal from the ancestor directory towards the starting child directory, instead of moving upwards relatively from the working directory back to the starting directory. This reverse traversal does not require accessing the ancestry path above the staring directory (hence, not affected by the accessing problem). And in fact, I think this reverse stepwise traversal seems more natural order than doing stepwise traversal each time from top down. How do you think?


I have made a change that implements this reverse stepwise traversal in SftpOperations and also made a few minor improvement changes.
This changed version passes all the existing tests and works also against the above server.


I am attaching a patch file for this change. I would appreciate if you can comment on it.


Thanks.
regards, aki","njiang:1347836982:2012-09-17T07:09:42.328+0000:1347836982:2012-09-17T07:09:42.328+0000:Applied patch into with thanks to Aki into trunk, camel-2.10.x and camel-2.9.x branches.
davsclaus:1358829733:2013-01-22T12:42:13.911+0000:1358829733:2013-01-22T12:42:13.911+0000:-1 to this patch.

The code in ftp/sftp/ftps should be similar as we keep the code in sync between the various FTP protocols. This code is only done at sftp and not the others.

And it causes a regression bug logged as CAMEL-5989

About the logic for stepwise. It is as it was designed, and its better to be consistent across the FTP protocols, and hence why the code is identical in the xxxOperations source code.

If there is a better algorithm for stepwise then it has to be done across all FTP protocols and be consistent.
ay:1358832547:2013-01-22T13:29:07.913+0000:1358832547:2013-01-22T13:29:07.913+0000:Hi Claus,
I can work on the modified patch along your suggestion.

Regarding CAMEL-5989, I am not sure why it is causing an windows related issue, as I was also using windows and thought the directory path was normalized at that place. (by the way, you linked the wrong ticket from CAMEL-5989 in your comment there, 5564 instead of 5574). 

regards, aki

davsclaus:1358834638:2013-01-22T14:03:58.793+0000:1358834638:2013-01-22T14:03:58.793+0000:Aki,

Yeah its important that the code is similar between ftp and s-ftp. eg the code in FtpOperations and SftpOperations is the same, except for when they use the native ftp client. This ensures that functionality works the same. As well when we change/add new options etc then its easier to implement in both as its the same. Also the regular ftp tests will sort-of test sftp as well, as the code is following the same pattern.

In the early days we did not have a Java SFTP library to test against, so we did not have any SFTP tests. But recently we have a SFTP library now (though not sure if it works as well as a real SFTP server). And therefore we got a bit of sftp tests also.

Also in the earlier days the SFTP tests caused the CI servers to hang. But just recently we enabled the tests again. And it seems the SFTP library is more stable and allow CI servers to not hang anymore.


davsclaus:1358834764:2013-01-22T14:06:04.771+0000:1358834764:2013-01-22T14:06:04.771+0000:Also the ftp component is a bit complicated as people use different OS'es and different FTP servers. And depending on if they are client or server etc. connecting to another OS etc. It gets a bit complicated with the / or \ handling of path separators. As well how the FTP server accepts traversing file paths. Some servers require you to CD into a dir, before you can GET or PUT. Where as others do not so you can GET foo/bar/myfile.dat etc.

The world would have been easier if the windows guys just had used the same path separator as the rest of the world. :(
davsclaus:1358840379:2013-01-22T15:39:39.403+0000:1358840379:2013-01-22T15:39:39.403+0000:I agree the stepwise and directory traversal could be better.
Though its problematic when people use absolute or relative starting directories as well.

Also the logic for changing to parent directory could possible in sftp operations be using "".."" which we would assume should be supported by the ftp client as a valid input to change dir command.
ay:1359003538:2013-01-24T12:58:58.901+0000:1359003538:2013-01-24T12:58:58.901+0000:Hi Claus,
As I commented in CAMEL-5989, it looks like the original patch made in 2.10.2 worked for unix and windows as jsch consistently used the absolute path with ""/"" as delimiter and FileUtils.compactPath was not converting this path into the windows syntax on windows.

FileUtils.compachPath in 2.10.3 converted this path into the windows syntax on windows. And rev 1424437 changed SFTPOperations to call FileUtils.compactPath with the explicit delimiter.

To unify the processing in ftp and sftp, which have different behaviors, we need to make some of these underlining assumption detectable or if not, additionally configurable. Do you think it makes sense to use this ticket to do this refactoring or create a new one and refer to this ticket? 

How do you think?

Thanks.
regards, aki


davsclaus:1359017688:2013-01-24T16:54:48.116+0000:1359017688:2013-01-24T16:54:48.116+0000:Aki, yeah you found the solution.

That said, I still think the stepwise code can be improved and how sftp changes to parent directory etc.
I will open a new ticket, and then we can consider improving this in a future release or even 2.11 if we got the time.
"
0,CAMEL-5573,Improvement,Minor,None,"2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-06 09:57:30+00:00,2012-09-06 11:02:45+00:00,"The error handling in Camel supports redelivery. Which uses a thread pool for scheduling tasks for future redeliveries etc.


This thread pool is only needed if redelivery is enabled. There can be Camel apps that wont use any kind of redelivery. And for these use-cases we can omit creating the thread pool.",
0,CAMEL-5572,Improvement,Major,2.10.0,Future,"
None
",Resolved,Won't Do,Future,Unassigned,Claus Ibsen,1,3,2012-09-06 09:50:54+00:00,2022-09-02 08:38:46+00:00,"See nabble
http://camel.465427.n5.nabble.com/recipientList-with-parallelProcessing-how-to-stop-thread-s-tp5718552.html


We should look into improving how to graceful cancel/interrupt existing running tasks, when a timeout was triggered. 


Interrupting a thread may produce interrupt exceptions, and cause error handling to trigger, and also log nasty logs with stacktraces. So we have to find a gentle way to stop processing existing tasks. 


One way is to mark the exchange to stop continuing routing, so the routing engine wont advance processing. This is a gentle way.


And notice we can only do this for currently running threads, if the async routing engine kicked in, then the task can only be cancelled upon re-activation.


Likewise we may add an option to control a window period where we try to graceful stop running tasks, and if not all tasks stopped, then be more aggressively afterwards.",
0,CAMEL-5571,Bug,Major,2.10.1,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Harald Wellmann,0,2,2012-09-05 12:28:24+00:00,2012-09-28 14:02:17+00:00,"Given a Camel proxy for an @InOnly service interface, and a route from the proxy to a JMS endpoint, calling hashCode() on the proxy throws an exception, either immediately or after a number of retries, depending on the route configuration.


See the attached test case for different scenarios.


The reason is that hashCode() is forwarded by the CamelInvocationHandler to the remote endpoint, which does not make sense in this case.",davsclaus:1348812137:2012-09-28T14:02:17.614+0000:1348812137:2012-09-28T14:02:17.614+0000:Thanks for reporting. Your test cases now passes.
0,CAMEL-5570,Bug,Minor,"2.9.0, 2.10.0","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Øyvind Ingebrigtsen Øvergaard,0,3,2012-09-05 09:06:31+00:00,2012-09-05 13:52:16+00:00,"Given a route:



from(""direct:source"")
   .onException(FirstException.class)
         .handled(true)
         .maximumRedeliveries(-1)
    .end()
    .onException(SecondException.class)
        .handled(true)
        .to(""direct:error"")
    .end()
    .to(""direct:destination"");




If the consumer of direct:destination throws a FirstException, the message will be redelivered. Now if a SecondException is thrown while redelivering the message to direct:destination, it does NOT go to direct:error, as you would expect, but is redelivered again; using the same RedeliveryPolicy as for FirstException.


I have attached a test that illustrates this.


In OnExceptionDefinition.createRedeliveryPolicy, maximumRedeliveries is set to 0 if the OnExceptionDefinition has outputs and the parent RedeliveryPolicy has explicitly set maximumRedeliveries > 0. The latter check fails when maximumRedeliveries is -1 (infinite retries), and the parent RedeliveryPolicy is returned.


I have attached a patch that ensures that we don't inherit the parent maximumRedeliveries even if it is set to -1.","davsclaus:1346823260:2012-09-05T13:34:20.896+0000:1346823260:2012-09-05T13:34:20.896+0000:Thanks for the patch. Will get it backported as well.

This only affect when using -1, you can use a very high number as a workaround instead of -1. Lowering to minor priority."
0,CAMEL-5569,Improvement,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,0,2,2012-09-04 21:34:11+00:00,2012-09-10 14:34:49+00:00,"The camel-cxf-transport component should define the Spring import packages as optional given they are only required if using the Spring DSL namespaces.  If you are using Java DSL Spring is not required.


Best Regards,
Scott ES","sully6768:1346765803:2012-09-04T21:36:43.913+0000:1346765803:2012-09-04T21:36:43.913+0000:git svn patch
njiang:1347258889:2012-09-10T14:34:49.728+0000:1347258889:2012-09-10T14:34:49.728+0000:Applied patch into trunk with thanks to scott."
0,CAMEL-5568,Improvement,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,0,2,2012-09-04 20:42:38+00:00,2012-09-10 14:25:38+00:00,"I propose that the Spring feature reference in the camel-core feature be removed.


Camel Core no longer has a runtime dependency on Spring.  Camel Components that require Spring as a runtime dependency should have a feature reference to Spring and not depend on the camel-core feature to install it.  This will eliminate the addition of unnecessary installations of the Spring APIs into the Karaf container.  For example, the camel-sjms feature installs the camel-core feature which installs the Spring APIs though no dependency on Spring exists.


After a run through of all the components with a runtime dependency on Spring and their associated features I found only one feature that was missing a reference to a Spring feature: camel-test.


Below is a complete breakdown of the components with Spring runtime dependencies.


Component Features with a runtime dependency on Spring that include a a Spring Feature reference:



camel-bam
camel-cxf
camel-cxf-transport - Included in camel-cxf feature
camel-jms
camel-jpa
camel-spring
camel-spring-batch
camel-spring-integration
camel-spring-javaconfig
camel-spring-security
camel-spring-ws
camel-sql



Component Features with a runtime dependency on Spring but no Camel Feature is defined:



camel-gae
camel-neo
camel-testng
camel-web



Component Features with a runtime dependency on Spring that DO NOT include a a Spring Feature reference (require an update):



camel-test



I am attaching a patch shortly.


Best Regards,
Scott ES","sully6768:1346763087:2012-09-04T20:51:27.806+0000:1346763087:2012-09-04T20:51:27.806+0000:Attaching git svn patch
njiang:1347258338:2012-09-10T14:25:38.657+0000:1347258338:2012-09-10T14:25:38.657+0000:Applied patch into trunk with thanks to Scott."
0,CAMEL-5567,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Alan Foster,0,4,2012-09-04 18:42:20+00:00,2015-07-11 14:08:04+00:00,"Currently the aggregator component allows users to specifiy one expression that they would like to use for aggregation


It would be nice to add many different correlation expressions for all of the different payload contents that an aggregator can receive


For instance it may look like 



<camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route>
        <from uri=""direct:start""/>
      
        <aggregate strategyRef=""aggregatorStrategy"" completionTimeout=""3000"">
            <correlationExpression>
                <!-- If this xpath returns nothing try the next expression etc -->
                <xpath>/AcmeServiceResponse/CorrelationId/text()</xpath>
                <xpath>/FooResponse/Id/text()</xpath>
                <xpath>/CorrelationKey/text()</xpath>
            </correlationExpression>
            <to uri=""mock:aggregated""/>
        </aggregate>
    </route>
</camelContext>




I wonder what your thoughts are on this suggestion? If it seems like a good idea I can start to make a patch for it


Alan","hadrian:1346768481:2012-09-04T22:21:21.909+0000:1346768481:2012-09-04T22:21:21.909+0000:But that would still be one expression, albeit a composite one, isn't it?
alanfoster:1346800472:2012-09-05T07:14:32.418+0000:1346800472:2012-09-05T07:14:32.418+0000:@Hadrian Yes you're right, I've shown multiple xpath expressions which you could of course combine into one xpath.

But the intentions are that you can use any of the pluggable expression languages in a row ie

{code}
<correlationExpression>
    <!-- Try header first -->
    <header>foo</xpath>

    <!-- If this xpath returns nothing try the next expression -->
    <xpath>/AcmeServiceResponse/CorrelationId/text()</xpath>

    <!-- Default to an Unknown constant correlation id -->
    <constant>Unknown</xpath>
</correlationExpression>
{code}

This could be very powerful/useful to add I feel

What are your opinions on this Hadrian? :)
davsclaus:1346801493:2012-09-05T07:31:33.319+0000:1346801493:2012-09-05T07:31:33.319+0000:Alan

First of all XML is not a programming language, and we have to avoid bloating the DSLs.

What you talk about is already possible in a programming language such as Java, where you can combine expressions/predicates into compounds.
There is an ExpressionBuilder / PredicateBuilder with and|or constructs.

And if you are a XPath/XQuery ninja, you could most likely construct a single expression that has compound xpaths build in etc.

Also you have to think about consistency. All the EIPs and whatnot in the DSL have building blocks such as of a Predicate | Expression you can use to configure them with. So we cannot do something ""special"" for the aggregator etc.

Also its a bit hard to do a compound expression in XML language, as what does that mean exactly? Some maybe want all the expressions to be build together (AND), and others may want only the first which has a not null value (eg OR) as you. And others a combination of them. And then it gets tough to express such use-cases in a XML file. XML is after all not a programming language with powerful control flows and constructs.


davsclaus:1346801549:2012-09-05T07:32:29.398+0000:1346801549:2012-09-05T07:32:29.398+0000:Alan, do you have a real-life use-case for this need? 

And frankly you can do this in Java code, and use a method call expression to setup in the XML DSL.


davsclaus:1346802235:2012-09-05T07:43:55.642+0000:1346802235:2012-09-05T07:43:55.642+0000:Also we have a ticket reported by Christian S. about supporting nested expressions, as his use-case was to use nested expressions as parameter bindings to a method call expressions. This ticket is AFAIR currently scheduled for Camel 3.0.

Something a like:
{code:xml}
<method ref=""myBean"" method=""myMethod"">
  <compoundExpression>
    <header>foo</header>
    <xpath>/foo/bla</xpath>
    <constant>true</constant>
  </compundExpression>
</method>
{code}

So there is some synergy to this one. But we have to be careful adding this to the DSL to avoid bloat.
Also the DSL in Camel 2.x should be kept stable etc.
muellerc:1369574997:2013-05-26T21:29:57.241+0000:1369574997:2013-05-26T21:29:57.241+0000:I'm also not convinced of this. By adding one line in the route, you can accomplish the same:
{code}
<setHeader headerName=""myKey""><header>foo</header></setHeader>
{code}

{code}
<setHeader headerName=""myKey""><xpath>/foo/bla</xpath></setHeader>
{code}

{code}
<setHeader headerName=""myKey""><constant>true</constant></setHeader>
{code}

Let's keep the DSL as simple as possible..."
0,CAMEL-5566,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,James Strachan,James Strachan,0,4,2012-09-04 18:24:55+00:00,2013-03-10 19:50:13+00:00,"as per Romain's ideas on the dev list, it would be nice to have an annotation to make it easy to inject a RouteBuilder instance then bind it to a CamelContext (basically creating the CamelContext for the given context name and calling CamelContext.addRoutes(routes)).


Previously Romain had gone with @CamelContextId though am thinking, @Named is the way of associating an id/name with a bean and its really more about camel lifecycles, so thinking of using @CamelStartup to make it more obvious what it does (with the contextName being an optional parameter too; since multiple contexts within the same class loader are kinda rare - there's no huge need for more than one CamelContext).","jstrachan:1346754666:2012-09-04T18:31:06.654+0000:1346754666:2012-09-04T18:31:06.654+0000:see rev 1380791 and the examples/camel-example-cdi in the MyRoutes class http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-cdi/src/main/java/org/apache/camel/example/cdi/MyRoutes.java?revision=1380791&view=markup
jstrachan:1346813764:2012-09-05T10:56:04.616+0000:1346813764:2012-09-05T10:56:04.616+0000:just added an integration test here which shows explicitly specifying the CamelContext name on @Produces, @EndpointInject, @Inject @Uri etc - or defaulting its value from the @CamelStartup annotation to support multiple camel contexts

http://svn.apache.org/viewvc/camel/trunk/tests/camel-itest-cdi/
jstrachan:1346829561:2012-09-05T15:19:21.609+0000:1346829561:2012-09-05T15:19:21.609+0000:I just renamed @CamelStartup -> @ContextName which is a little more general and can then be used to associate either beans or injection points with a named CamelContext. e.g. we can use it with 
{code}
@Inject @ContextName(""foo"") CamelContext camelContext;
{code}

ldywicki:1347259711:2012-09-10T14:48:31.260+0000:1347259711:2012-09-10T14:48:31.260+0000:James,
@ContextName should be a regular CDI qualifier - that allows us to use it also with beans and limit visibility when used with different contexts.
jstrachan:1347260375:2012-09-10T14:59:35.240+0000:1347260375:2012-09-10T14:59:35.240+0000:great idea! will reopen until thats fixed
jstrachan:1347260433:2012-09-10T15:00:33.346+0000:1347260433:2012-09-10T15:00:33.346+0000:BTW I'd also like to be able to have named CamelContext injection working until this issue is resolved. i.e. so this works
{code}
@Inject @ContextName(""foo"") CamelContext camelContext;
{code}

antonin.stefanutti:1362475473:2013-03-05T17:24:33.871+0000:1362475768:2013-03-05T17:29:28.389+0000:Attaching [^CAMEL-5566.patch] so that {{@ContextName}} is a regular CDI qualifier to enable the injection of Camel context by name.

The processing of types implementing {{CamelContextAware}} in {{CamelExtension}} has yet to be fixed to make the injection of the Camel context scoped when multiple contexts exist, though I haven't been able to figure a way out for that. This is actually breaking the injection of {{CdiPropertiesComponent}} bean when property placeholders are declared in the Camel routes. Any suggestion are welcome.

@ [~jstrachan], would you be considering re-opening that issue as you suggested to get that fixed?
ldywicki:1362542061:2013-03-06T11:54:21.814+0000:1362542061:2013-03-06T11:54:21.814+0000:I'm not sure if we shouldn't remove support for multiple camel context instances since it's not widely used. [~antonin.stefanutti] do you need that?
antonin.stefanutti:1362548827:2013-03-06T13:47:07.924+0000:1362548827:2013-03-06T13:47:07.924+0000:Hello Łukasz, in my case, I have a CDI container starting with multiple bean archives in the classpath, each containing multiple beans annotated with {{@ContextName}}. Ideally, I'd like to have each bean archive and the routes within it executing in a dedicated Camel context.

Obviously, this can work with a single Camel context. Though for the sake of monitoring, operability and understanding of the system, I'd rather prefer structuring the runtime execution in multiple Camel contexts. Besides, from my understanding of the Camel CDI codeline, it seems closer in terms of code changes to having the multiple Camel contexts support enabled rather than removing all the related code.
ldywicki:1362653036:2013-03-07T18:43:56.100+0000:1362653036:2013-03-07T18:43:56.100+0000:[~antonin.stefanutti] I understand your problem and indeed in this case support for multiple context will make things easier. However it's tip of iceberg I would say - what's about beans or bean references called from route? Our registry integration do not include @ContextName in lookups. Same corresponds to simple language which assumes global bean registry. If @ContextName became a regular CDI qualifier we'll get some sort of sub-registries.
The CamelContextConfig itself is rather workaround than final solution I would say.
antonin.stefanutti:1362906951:2013-03-10T17:15:51.177+0000:1362906951:2013-03-10T17:15:51.177+0000:Hello Łukasz, I agree that enabling multiple Camel contexts in the CDI container raises further questions regarding the way {{CdiRegistry}} are managed as well as the scope of visible beans. I know that [~romain.manni-bucau] came up with a {{@ExchangeScoped}} scope in [camel-cdi-extension|https://github.com/rmannibucau/camel-cdi-extension]. Maybe a {{@ContextScope}} would be needed.

I understand that the topic is more complex than it seems. As my knowledge about CDI and Camel is still fairly limited, though my need to have multiple Camel contexts remains, I'd be happy to contribute given your guidance. Maybe we can create a dedicated issue to follow this up if you're still considering the need as valid.
romain.manni-bucau:1362916213:2013-03-10T19:50:13.096+0000:1362916213:2013-03-10T19:50:13.096+0000:Thought it was handled through @ContextName"
0,CAMEL-5565,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,James Strachan,James Strachan,0,1,2012-09-04 14:14:33+00:00,2012-09-05 18:24:44+00:00,"we should auto-default the uri properties in FromDefinition / SendDefinition when creating routes via Endpoint (as opposed to Strings) so that the XML / JAXB / JMX APIs can expose the actual URIs being used.


Testing a patch locally; should be fixed shortly...",jstrachan:1346741390:2012-09-04T14:49:50.037+0000:1346741390:2012-09-04T14:49:50.037+0000:fixed with rev 1380671.
0,CAMEL-5564,Bug,Minor,"2.9.3, 2.10.1","2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-09-04 14:07:19+00:00,2012-09-05 12:16:40+00:00,"If using JMX with Camel there is a background thread, that gathers load stat periodically. We should shutdown this task/thread pool explicit.


This ensures cleaner shutdown.",davsclaus:1346807870:2012-09-05T09:17:50.389+0000:1346807870:2012-09-05T09:17:50.389+0000:The default error handler thread pool should also be shutdown as well. Then we have a clean shutdown of all the pools when Camel is shutting down itself.
0,CAMEL-5563,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-09-04 13:35:56+00:00,2012-09-07 09:25:38+00:00,"We have so far favored shutting down thread pools a bit too aggressively from the start using shutdownNow. Instead we should favor shutdown, and allow the pool a bit time to shutdown orderly, before we go aggressively by shutting down now.


We should also allow end users to configure a await termination timeout value to control how long we wait to orderly shutdown.


By default this value could be 5 seconds (not too high and not to low).


Also we should consider allow to configure a log level, which logs the in-flight threads which wasn't shutdown orderly. This can aid people to identify these threads.


By default we could log this at WARN level. Notice that over time these threads may shutdown naturally when they complete, so its not a severe error. 


This requires minder API additions to ExeuctorServiceManager. However it ought to be worthy of being backported to the 2.10 branch IMHO","davsclaus:1346738710:2012-09-04T14:05:10.063+0000:1346738710:2012-09-04T14:05:10.063+0000:Gathering the in-flight threads is harder, so we will leave that out. All we can get is the not yet run tasks, which is not so important.
davsclaus:1346805975:2012-09-05T08:46:15.511+0000:1346805975:2012-09-05T08:46:15.511+0000:We use a 30 second timeout which allows more time to shutdown graceful, and then again when we shutdown aggressively.

Notice that Camel already shutdown really nice, so this is more aided as fallback, but also in case end users use their own thread pools, and do not shutdown them properly in their custom components etc.
davsclaus:1346975603:2012-09-07T07:53:23.911+0000:1346975603:2012-09-07T07:53:23.911+0000:Instead of graceful by default, we have decided to add a shutdownGraceful method instead. This gives end user to full power to chose what to use.

API documented in the bottom of this page
https://cwiki.apache.org/confluence/display/CAMEL/Threading+Model

This also avoids a slight API change in the 2.10 branch, which will be reverted.
davsclaus:1346981138:2012-09-07T09:25:38.735+0000:1346981138:2012-09-07T09:25:38.735+0000:We favor regular shutdown when stopping in doStop. And more aggressive when shutting down in doShutdown.
"
0,CAMEL-5562,Bug,Minor,2.10.1,"2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.10.2, 2.11.0",Claus Ibsen,Akitoshi Yoshida,0,2,2012-09-04 11:46:30+00:00,2012-09-07 06:17:32+00:00,"camel-beanio which uses beanio-2.0.x library should use the beanio 2.0's namepsace (http://www.beanio.org/2012/03) and not the 1.2 namespace ( http://www.beanio.org/2011/01) in its test cases.


The background to this is described in this mail thread.
http://camel.465427.n5.nabble.com/issue-with-camel-beanio-s-version-used-in-trunk-td5718596.html",davsclaus:1346969852:2012-09-07T06:17:32.272+0000:1346969852:2012-09-07T06:17:32.272+0000:Thanks for the patch.
0,CAMEL-5561,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,James Strachan,0,1,2012-09-04 11:17:08+00:00,2015-12-26 09:22:23+00:00,"folks can then use spring/blueprint/cdi with ""mvn camel:run"" with folks not having to specify <useBlueprint>true</useBlueprint> or <useCDI>true</useCDI>",
0,CAMEL-5560,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,James Strachan,James Strachan,0,2,2012-09-04 11:09:38+00:00,2012-09-04 14:53:41+00:00,"initial spike committed, you can try ""mvn camel:run"" inside examples/camel-example-cdi


Just need to figure out how to nicely force MyRouteConfig to be injected and started by CDI...","jstrachan:1346738343:2012-09-04T13:59:03.610+0000:1346738343:2012-09-04T13:59:03.610+0000:""mvn camel:run"" now works in examples/camel-example-cdi for example
jstrachan:1346738832:2012-09-04T14:07:12.234+0000:1346738832:2012-09-04T14:07:12.234+0000:docs updated to reflect the CDI support here: https://cwiki.apache.org/confluence/display/CAMEL/Camel+Run+Maven+Goal"
0,CAMEL-5559,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-09-04 08:50:17+00:00,2012-09-10 14:26:08+00:00,Add the solr solrj deprecate CommonsHttpSolrServer which is replace by HttpSolrServer and it is using the http client 4. We could consider to do some clean up work in the camel-solr component to use the http client 4 directly.,njiang:1347258368:2012-09-10T14:26:08.922+0000:1347258368:2012-09-10T14:26:08.922+0000:Applied the patch into trunk.
0,CAMEL-5558,New Feature,Major,2.10.0,2.23.0,"
None
",Resolved,Fixed,2.23.0,Onder Sezgin,Claus Ibsen,3,8,2012-09-03 07:07:44+00:00,2018-10-02 06:16:12+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-FTP-component-Append-a-sequence-number-if-the-filename-already-exists-tp5718469.html


We should allow to configure fileExists=RenameAndRetry option, which allows you to rename the file and retry writing the file again, in case there already exists a file. 


The trick is to find a optimal solution if  you append a sequence number to a file. And when there is a lot of files. You kinda want to know what is the highest filename, (some way of listing and sorting). 


Maybe a way to get a list of existing files based on a file name pattern, and a sort configuration. Then people can check in the list, to find a free sequence number to use etc.","jacovt:1346992575:2012-09-07T12:36:15.649+0000:1346992575:2012-09-07T12:36:15.649+0000:Hello guys,

Yes, it would be awesome if this could be configurable in such a way that you could place the sequence as an expression in the destination file name and also specify the format of the sequence, example 01, 0001 or 000001.

Use case:
Files get transfered from multiple sources into a single location. These files all have names generated by the sources, eg:
{code}
File1.dat
File6.dat
File17.dat
Data1.dat
20120904-001.dat
{code}

These files now have to be re-sequenced with a specific naming convention when they are consumed and produced to the upstream system:
{code}
CUST.FILE.20120904.000001.DAT
CUST.FILE.20120904.000002.DAT
CUST.FILE.20120904.000003.DAT
CUST.FILE.20120904.000004.DAT
CUST.FILE.20120904.000005.DAT
{code}

It would be nice if you could pick up the last sequence from the destination that the producer is writing to.
davsclaus:1363160379:2013-03-13T15:39:39.640+0000:1363160379:2013-03-13T15:39:39.640+0000:Yeah this is not an easy ticket to implement if we want to go all the way and let Camel ""figure out"" what the last filename with a sequence number is, and compute the next ""free"" name to use for renaming the existing file.

1)
I guess maybe something like adding a new attribute on file endpoint to allow to plugin a custom code to deal with the move existing file.

{code}
public interface MoveExistingFileStrategy {

   boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName) throws Exception;

}
{code}

Then return true if the file was moved succesfully, or false if something failed, but you do not have an exception, eg the File API in JDK returns true|false.


Then people can configure a custom strategy to do whatever they want.
And we can have a default implementation that is the current code.

2)
To support figure out free name. Then we may need to allow people to configure an option for the name pattern. I wonder if a regular expression is too complicated? Or maybe we invent our own token etc. Though lets look at this later. First step would be IMHO to have an interface where people can plugin custom strategy and be in control with java code what to do.


githubbot:1538366362:2018-10-01T11:59:22.032+0000:1538366362:2018-10-01T11:59:22.032+0000:onderson opened a new pull request #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541
 
 
   implementations be provided and add a test case for file component

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538366363:2018-10-01T11:59:23.169+0000:1538366363:2018-10-01T11:59:23.169+0000:GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2541

    CAMEL-5558 - add file existing move strategy interface to let custom

    implementations be provided and add a test case for file component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onderson/camel CAMEL-5558

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2541.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2541
    
----
commit 324ad6248686be751ab80cc6bd792345ab581e84
Author: onders <onders@...>
Date:   2018-10-01T11:44:57Z

    CAMEL-5558 - add file existing move strategy interface to let custom
    implementations be provided and add a test case for file component

----

githubbot:1538368772:2018-10-01T12:39:32.551+0000:1538368772:2018-10-01T12:39:32.551+0000:davsclaus commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-425892290
 
 
   LGTM.
   
   The interface for the file exist move strategy would be good to have its method and parameters javadoc'ed as that is what end users can implement for custom strategy.
   
   Does camel-jsch component compile and test with this as its AFAIR also extends the file component.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538370105:2018-10-01T13:01:45.440+0000:1538370105:2018-10-01T13:01:45.440+0000:onderson commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-425899092
 
 
   I had a similar requirement. I implemented and tested with file component and naturally ftp component. Have not checked upon jsch. I will look into and improve javadoc. Thanks for reviewing

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538397371:2018-10-01T20:36:11.280+0000:1538397371:2018-10-01T20:36:11.280+0000:onderson commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-426053567
 
 
   Javadoc improved and no affect on jsch.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538429863:2018-10-02T05:37:43.583+0000:1538429863:2018-10-02T05:37:43.583+0000:oscerd commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-426154736
 
 
   I'll merge this today.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538432161:2018-10-02T06:16:01.788+0000:1538432161:2018-10-02T06:16:01.788+0000:oscerd commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-426160938
 
 
   Thanks @onderson 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538432171:2018-10-02T06:16:11.250+0000:1538432171:2018-10-02T06:16:11.250+0000:oscerd commented on issue #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541#issuecomment-426160960
 
 
   Merged on master

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538432171:2018-10-02T06:16:11.796+0000:1538432171:2018-10-02T06:16:11.796+0000:oscerd closed pull request #2541: CAMEL-5558 - add file existing move strategy interface to let custom
URL: https://github.com/apache/camel/pull/2541
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/docs/file-component.adoc b/camel-core/src/main/docs/file-component.adoc
index 19eea919656..4efaac5f47d 100644
--- a/camel-core/src/main/docs/file-component.adoc
+++ b/camel-core/src/main/docs/file-component.adoc
@@ -72,7 +72,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (85 parameters):
+==== Query Parameters (86 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -111,6 +111,7 @@ with the following path and query parameters:
 | *eagerDeleteTargetFile* (producer) | Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment, just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled, and an existing file exists. If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed, if its true, then the existing file is deleted before the move operation. | true | boolean
 | *forceWrites* (producer) | Whether to force syncing writes to the file system. You can turn this off if you do not want this level of guarantee, for example if writing to logs / audit logs etc; this would yield better performance. | true | boolean
 | *keepLastModified* (producer) | Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers. | false | boolean
+| *moveExistingFileStrategy* (producer) | Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided |  | FileMoveExisting Strategy
 | *autoCreate* (advanced) | Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. | true | boolean
 | *bufferSize* (advanced) | Write buffer sized in bytes. | 131072 | int
 | *copyAndDeleteOnRenameFail* (advanced) | Whether to fallback and do a copy and delete file, in case the file could not be renamed directly. This option is not available for the FTP component. | true | boolean
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java
index 2481b88c905..b866cba8ad3 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java
@@ -29,6 +29,7 @@
 import org.apache.camel.Message;
 import org.apache.camel.PollingConsumer;
 import org.apache.camel.Processor;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
 import org.apache.camel.processor.idempotent.MemoryIdempotentRepository;
 import org.apache.camel.spi.Metadata;
 import org.apache.camel.spi.UriEndpoint;
@@ -158,7 +159,9 @@ public PollingConsumer createPollingConsumer() throws Exception {
         } else if (getMoveExisting() != null && getFileExist() != GenericFileExist.Move) {
             throw new IllegalArgumentException(""You must configure fileExist=Move when moveExisting has been set"");
         }
-
+        if (this.getMoveExistingFileStrategy() == null) {
+            this.setMoveExistingFileStrategy(createDefaultMoveExistingFileStrategy());
+        }
         return new GenericFileProducer<>(this, operations);
     }
 
@@ -181,6 +184,14 @@ protected FileConsumer newFileConsumer(Processor processor, GenericFileOperation
         return new FileConsumer(this, processor, operations, processStrategy != null ? processStrategy : createGenericFileStrategy());
     }
 
+    /**
+     * Default Existing File Move Strategy
+     * @return the default implementation for file component
+     */
+    private FileMoveExistingStrategy createDefaultMoveExistingFileStrategy() {
+        return new GenericFileDefaultMoveExistingFileStrategy();
+    }
+
     public File getFile() {
         return file;
     }
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
index 7a89227042f..9224b872ae6 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java
@@ -227,7 +227,7 @@ public boolean storeFile(String fileName, Exchange exchange, long size) throws G
                 throw new GenericFileOperationFailedException(""File already exist: "" + file + "". Cannot write new file."");
             } else if (endpoint.getFileExist() == GenericFileExist.Move) {
                 // move any existing file first
-                doMoveExistingFile(fileName);
+                this.endpoint.getMoveExistingFileStrategy().moveExistingFile(endpoint, this, fileName);
             }
         }
         
@@ -354,57 +354,7 @@ public boolean storeFile(String fileName, Exchange exchange, long size) throws G
             throw new GenericFileOperationFailedException(""Cannot store file: "" + file, e);
         }
     }
-
-    /**
-     * Moves any existing file due fileExists=Move is in use.
-     */
-    private void doMoveExistingFile(String fileName) throws GenericFileOperationFailedException {
-        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
-        // create a dummy exchange as Exchange is needed for expression evaluation
-        // we support only the following 3 tokens.
-        Exchange dummy = endpoint.createExchange();
-        String parent = FileUtil.onlyPath(fileName);
-        String onlyName = FileUtil.stripPath(fileName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME, fileName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
-        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
-
-        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
-        // we must normalize it (to avoid having both \ and / in the name which confuses java.io.File)
-        to = FileUtil.normalizePath(to);
-        if (ObjectHelper.isEmpty(to)) {
-            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + fileName);
-        }
-
-        // ensure any paths is created before we rename as the renamed file may be in a different path (which may be non exiting)
-        // use java.io.File to compute the file path
-        File toFile = new File(to);
-        String directory = toFile.getParent();
-        boolean absolute = FileUtil.isAbsolute(toFile);
-        if (directory != null) {
-            if (!buildDirectory(directory, absolute)) {
-                LOG.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
-            }
-        }
-
-        // deal if there already exists a file
-        if (existsFile(to)) {
-            if (endpoint.isEagerDeleteTargetFile()) {
-                LOG.trace(""Deleting existing file: {}"", to);
-                if (!deleteFile(to)) {
-                    throw new GenericFileOperationFailedException(""Cannot delete file: "" + to);
-                }
-            } else {
-                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + fileName + "" to: "" + to + "" as there already exists a file: "" + to);
-            }
-        }
-
-        LOG.trace(""Moving existing file: {} to: {}"", fileName, to);
-        if (!renameFile(fileName, to)) {
-            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + fileName + "" to: "" + to);
-        }
-    }
-
+    
     private void keepLastModified(Exchange exchange, File file) {
         if (endpoint.isKeepLastModified()) {
             Long last;
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java
new file mode 100644
index 00000000000..a8ddac8d92c
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java
@@ -0,0 +1,87 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+
+import java.io.File;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
+import org.apache.camel.util.FileUtil;
+import org.apache.camel.util.ObjectHelper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class GenericFileDefaultMoveExistingFileStrategy implements FileMoveExistingStrategy {
+    
+    private static final Logger LOG = LoggerFactory.getLogger(GenericFileDefaultMoveExistingFileStrategy.class);
+
+    /**
+     * Moves any existing file due fileExists=Move is in use.
+     */
+    @Override
+    public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName)
+            throws GenericFileOperationFailedException {
+
+        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
+        // create a dummy exchange as Exchange is needed for expression evaluation
+        // we support only the following 3 tokens.
+        Exchange dummy = endpoint.createExchange();
+        String parent = FileUtil.onlyPath(fileName);
+        String onlyName = FileUtil.stripPath(fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME, fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
+        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
+
+        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
+        // we must normalize it (to avoid having both \ and / in the name which confuses java.io.File)
+        to = FileUtil.normalizePath(to);
+        if (ObjectHelper.isEmpty(to)) {
+            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + fileName);
+        }
+
+        // ensure any paths is created before we rename as the renamed file may be in a different path (which may be non exiting)
+        // use java.io.File to compute the file path
+        File toFile = new File(to);
+        String directory = toFile.getParent();
+        boolean absolute = FileUtil.isAbsolute(toFile);
+        if (directory != null) {
+            if (!operations.buildDirectory(directory, absolute)) {
+                LOG.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
+            }
+        }
+
+        // deal if there already exists a file
+        if (operations.existsFile(to)) {
+            if (endpoint.isEagerDeleteTargetFile()) {
+                LOG.trace(""Deleting existing file: {}"", to);
+                if (!operations.deleteFile(to)) {
+                    throw new GenericFileOperationFailedException(""Cannot delete file: "" + to);
+                }
+            } else {
+                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + fileName + "" to: "" + to + "" as there already exists a file: "" + to);
+            }
+        }
+
+        LOG.trace(""Moving existing file: {} to: {}"", fileName, to);
+        if (!operations.renameFile(fileName, to)) {
+            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + fileName + "" to: "" + to);
+        }
+    
+        return true;
+    }
+
+}
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
index 954859303ff..fac9e7e8fbe 100644
--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java
@@ -36,6 +36,7 @@
 import org.apache.camel.Message;
 import org.apache.camel.Predicate;
 import org.apache.camel.Processor;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
 import org.apache.camel.impl.ScheduledPollEndpoint;
 import org.apache.camel.processor.idempotent.MemoryIdempotentRepository;
 import org.apache.camel.spi.BrowsableEndpoint;
@@ -135,6 +136,8 @@
     protected Expression preMove;
     @UriParam(label = ""producer"", javaType = ""java.lang.String"")
     protected Expression moveExisting;
+    @UriParam(label = ""producer,advanced"")
+    protected FileMoveExistingStrategy moveExistingFileStrategy;
     @UriParam(label = ""consumer,filter"", defaultValue = ""false"")
     protected Boolean idempotent;
     @UriParam(label = ""consumer,filter"", javaType = ""java.lang.String"")
@@ -570,6 +573,18 @@ public Expression getMoveExisting() {
     public void setMoveExisting(Expression moveExisting) {
         this.moveExisting = moveExisting;
     }
+    
+    public FileMoveExistingStrategy getMoveExistingFileStrategy() {
+        return moveExistingFileStrategy;
+    }
+
+    /**
+     * Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured.
+     * By default, there is an implementation used if no custom strategy is provided
+     */
+    public void setMoveExistingFileStrategy(FileMoveExistingStrategy moveExistingFileStrategy) {
+        this.moveExistingFileStrategy = moveExistingFileStrategy;
+    }
 
     public void setMoveExisting(String fileLanguageExpression) {
         String expression = configureMoveOrPreMoveExpression(fileLanguageExpression);
diff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileMoveExistingStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileMoveExistingStrategy.java
new file mode 100644
index 00000000000..48123e4cd3f
--- /dev/null
+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileMoveExistingStrategy.java
@@ -0,0 +1,43 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.strategy;
+
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperationFailedException;
+import org.apache.camel.component.file.GenericFileOperations;
+
+/**
+ * This is the interface to be implemented when a custom implementation needs to be 
+ * provided in case of fileExists=Move is in use while moving any existing file in producer
+ * endpoints.
+ */
+public interface FileMoveExistingStrategy {
+
+    /**
+     * Moves any existing file due fileExists=Move is in use.
+     *
+     * @param endpoint  the given endpoint of the component
+     * @param operations file operations API of the relevant component's API 
+     * @return result of the file opeartion can be returned
+     *         note that for now, implemetion classes for file component
+     *         and ftp components, always returned true. However,if such
+     *         a need of direct usage of File API returning true|false,
+     *         you can use that return value for implementation's return value.
+     */
+    boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName) throws GenericFileOperationFailedException;
+
+}
diff --git a/camel-core/src/test/java/org/apache/camel/component/file/FileProducerMoveExistingStrategyTest.java b/camel-core/src/test/java/org/apache/camel/component/file/FileProducerMoveExistingStrategyTest.java
new file mode 100644
index 00000000000..f8b2a6f8205
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/component/file/FileProducerMoveExistingStrategyTest.java
@@ -0,0 +1,137 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file;
+import java.io.File;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
+import org.apache.camel.impl.JndiRegistry;
+import org.apache.camel.util.FileUtil;
+import org.apache.camel.util.ObjectHelper;
+import org.junit.Before;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ *
+ */
+public class FileProducerMoveExistingStrategyTest extends ContextTestSupport {
+    
+    private MyStrategy myStrategy = new MyStrategy();
+
+    @Override
+    @Before
+    public void setUp() throws Exception {
+        deleteDirectory(""target/file"");
+        super.setUp();
+    }
+    
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry jndi = super.createRegistry();
+        jndi.bind(""myStrategy"", myStrategy);
+        return jndi;
+    }
+
+    @Test
+    public void testExistingFileExists() throws Exception {
+        template.sendBodyAndHeader(""file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy"",
+                ""Hello World"", Exchange.FILE_NAME, ""hello.txt"");
+        template.sendBodyAndHeader(""file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy"",
+                ""Bye Existing World 1"", Exchange.FILE_NAME, ""hello.txt"");
+        template.sendBodyAndHeader(""file://target/file?fileExist=Move&moveExisting=${file:parent}/renamed-${file:onlyname}&moveExistingFileStrategy=#myStrategy"",
+                ""Bye Existing World 2"", Exchange.FILE_NAME, ""hello.txt"");
+
+        assertFileExists(""target/file/hello.txt"");
+        assertEquals(""Bye Existing World 2"", context.getTypeConverter().convertTo(String.class, new File(""target/file/hello.txt"")));
+        
+        assertFileExists(""target/file/renamed-hello2.txt"");
+        assertEquals(""Bye Existing World 1"", context.getTypeConverter().convertTo(String.class, new File(""target/file/renamed-hello2.txt"")));
+
+        assertFileExists(""target/file/renamed-hello1.txt"");
+        assertEquals(""Hello World"", context.getTypeConverter().convertTo(String.class, new File(""target/file/renamed-hello1.txt"")));
+    }
+    
+    private static class MyStrategy implements FileMoveExistingStrategy {
+        
+        private static final Logger LOG = LoggerFactory.getLogger(FileMoveExistingStrategy.class);
+        private int counter;
+        
+        @Override
+        public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName)
+                throws GenericFileOperationFailedException {
+            
+            // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
+            // create a dummy exchange as Exchange is needed for expression evaluation
+            // we support only the following 3 tokens.
+            Exchange dummy = endpoint.createExchange();
+            String parent = FileUtil.onlyPath(fileName);
+            String onlyName = FileUtil.stripPath(fileName);
+            
+            dummy.getIn().setHeader(Exchange.FILE_NAME, fileName);
+            dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
+            dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
+
+            String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
+            counter++;
+            String fileNameWithoutExtension = to.substring(0, to.lastIndexOf('.')) + """" + counter;
+            to = fileNameWithoutExtension + to.substring(to.lastIndexOf('.'), to.length());
+            // we must normalize it (to avoid having both \ and / in the name which confuses java.io.File)
+            to = FileUtil.normalizePath(to);
+            if (ObjectHelper.isEmpty(to)) {
+                throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + fileName);
+            }
+
+            // ensure any paths is created before we rename as the renamed file may be in a different path (which may be non exiting)
+            // use java.io.File to compute the file path
+            File toFile = new File(to);
+            String directory = toFile.getParent();
+            boolean absolute = FileUtil.isAbsolute(toFile);
+            if (directory != null) {
+                if (!operations.buildDirectory(directory, absolute)) {
+                    LOG.debug(""Cannot build directory [{}] (could be because of denied permissions)"", directory);
+                }
+            }
+
+            // deal if there already exists a file
+            if (operations.existsFile(to)) {
+                if (endpoint.isEagerDeleteTargetFile()) {
+                    LOG.trace(""Deleting existing file: {}"", to);
+                    if (!operations.deleteFile(to)) {
+                        throw new GenericFileOperationFailedException(""Cannot delete file: "" + to);
+                    }
+                } else {
+                    throw new GenericFileOperationFailedException(""Cannot moved existing file from: "" + fileName + "" to: "" + to + "" as there already exists a file: "" + to);
+                }
+            }
+
+            LOG.trace(""Moving existing file: {} to: {}"", fileName, to);
+            if (!operations.renameFile(fileName, to)) {
+                throw new GenericFileOperationFailedException(""Cannot rename file from: "" + fileName + "" to: "" + to);
+            }
+            return true;
+        }
+    
+    }
+
+    @Override
+    public boolean isUseRouteBuilder() {
+        return false;
+    }
+}
diff --git a/components/camel-ftp/src/main/docs/ftp-component.adoc b/components/camel-ftp/src/main/docs/ftp-component.adoc
index a4046c0d07d..590eb5b6803 100644
--- a/components/camel-ftp/src/main/docs/ftp-component.adoc
+++ b/components/camel-ftp/src/main/docs/ftp-component.adoc
@@ -100,7 +100,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (108 parameters):
+==== Query Parameters (109 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -151,6 +151,7 @@ with the following path and query parameters:
 | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean
 | *eagerDeleteTargetFile* (producer) | Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment, just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled, and an existing file exists. If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed, if its true, then the existing file is deleted before the move operation. | true | boolean
 | *keepLastModified* (producer) | Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers. | false | boolean
+| *moveExistingFileStrategy* (producer) | Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided |  | FileMoveExisting Strategy
 | *sendNoop* (producer) | Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid, which allows to silently re-connect to be able to upload the file. However if this causes problems, you can turn this option off. | true | boolean
 | *activePortRange* (advanced) | Set the client side port range in active mode. The syntax is: minPort-maxPort Both port numbers are inclusive, eg 10000-19999 to include all 1xxxx ports. |  | String
 | *autoCreate* (advanced) | Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. | true | boolean
diff --git a/components/camel-ftp/src/main/docs/ftps-component.adoc b/components/camel-ftp/src/main/docs/ftps-component.adoc
index 3ccaf392519..797a1c8bc3d 100644
--- a/components/camel-ftp/src/main/docs/ftps-component.adoc
+++ b/components/camel-ftp/src/main/docs/ftps-component.adoc
@@ -60,7 +60,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (120 parameters):
+==== Query Parameters (121 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -111,6 +111,7 @@ with the following path and query parameters:
 | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean
 | *eagerDeleteTargetFile* (producer) | Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment, just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled, and an existing file exists. If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed, if its true, then the existing file is deleted before the move operation. | true | boolean
 | *keepLastModified* (producer) | Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers. | false | boolean
+| *moveExistingFileStrategy* (producer) | Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided |  | FileMoveExisting Strategy
 | *sendNoop* (producer) | Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid, which allows to silently re-connect to be able to upload the file. However if this causes problems, you can turn this option off. | true | boolean
 | *activePortRange* (advanced) | Set the client side port range in active mode. The syntax is: minPort-maxPort Both port numbers are inclusive, eg 10000-19999 to include all 1xxxx ports. |  | String
 | *autoCreate* (advanced) | Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. | true | boolean
diff --git a/components/camel-ftp/src/main/docs/sftp-component.adoc b/components/camel-ftp/src/main/docs/sftp-component.adoc
index b3c8d344ba5..2fc626ae211 100644
--- a/components/camel-ftp/src/main/docs/sftp-component.adoc
+++ b/components/camel-ftp/src/main/docs/sftp-component.adoc
@@ -51,7 +51,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (116 parameters):
+==== Query Parameters (117 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -95,6 +95,7 @@ with the following path and query parameters:
 | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean
 | *eagerDeleteTargetFile* (producer) | Whether or not to eagerly delete any existing target file. This option only applies when you use fileExists=Override and the tempFileName option as well. You can use this to disable (set it to false) deleting the target file before the temp file is written. For example you may write big files and want the target file to exists during the temp file is being written. This ensure the target file is only deleted until the very last moment, just before the temp file is being renamed to the target filename. This option is also used to control whether to delete any existing files when fileExist=Move is enabled, and an existing file exists. If this option copyAndDeleteOnRenameFails false, then an exception will be thrown if an existing file existed, if its true, then the existing file is deleted before the move operation. | true | boolean
 | *keepLastModified* (producer) | Will keep the last modified timestamp from the source file (if any). Will use the Exchange.FILE_LAST_MODIFIED header to located the timestamp. This header can contain either a java.util.Date or long with the timestamp. If the timestamp exists and the option is enabled it will set this timestamp on the written file. Note: This option only applies to the file producer. You cannot use this option with any of the ftp producers. | false | boolean
+| *moveExistingFileStrategy* (producer) | Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided |  | FileMoveExisting Strategy
 | *sendNoop* (producer) | Whether to send a noop command as a pre-write check before uploading files to the FTP server. This is enabled by default as a validation of the connection is still valid, which allows to silently re-connect to be able to upload the file. However if this causes problems, you can turn this option off. | true | boolean
 | *autoCreate* (advanced) | Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to. | true | boolean
 | *bindAddress* (advanced) | Specifies the address of the local interface against which the connection should bind. |  | String
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpDefaultMoveExistingFileStrategy.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpDefaultMoveExistingFileStrategy.java
new file mode 100644
index 00000000000..9d3757a5ed5
--- /dev/null
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpDefaultMoveExistingFileStrategy.java
@@ -0,0 +1,96 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import java.io.IOException;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperationFailedException;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
+import org.apache.camel.util.FileUtil;
+import org.apache.camel.util.ObjectHelper;
+import org.apache.commons.net.ftp.FTPFile;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class FtpDefaultMoveExistingFileStrategy implements FileMoveExistingStrategy {
+
+    private static final Logger LOG = LoggerFactory.getLogger(FtpDefaultMoveExistingFileStrategy.class);
+
+    /**
+     * Moves any existing file due fileExists=Move is in use.
+     */
+    @Override
+    public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName)
+            throws GenericFileOperationFailedException {
+        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
+        // create a dummy exchange as Exchange is needed for expression evaluation
+        // we support only the following 3 tokens.
+        Exchange dummy = endpoint.createExchange();
+        // we only support relative paths for the ftp component, so dont provide any parent
+        String parent = null;
+        String onlyName = FileUtil.stripPath(fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME, fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
+        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
+
+        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
+        // we only support relative paths for the ftp component, so strip any leading paths
+        to = FileUtil.stripLeadingSeparator(to);
+        // normalize accordingly to configuration
+        to = ((FtpEndpoint<FTPFile>)endpoint).getConfiguration().normalizePath(to);
+        if (ObjectHelper.isEmpty(to)) {
+            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + fileName);
+        }
+
+        // do we have a sub directory
+        String dir = FileUtil.onlyPath(to);
+        if (dir != null) {
+            // ensure directory exists
+            operations.buildDirectory(dir, false);
+        }
+
+        // deal if there already exists a file
+        if (operations.existsFile(to)) {
+            if (endpoint.isEagerDeleteTargetFile()) {
+                LOG.trace(""Deleting existing file: {}"", to);
+                boolean result;
+                try {
+                    result = ((FtpOperations)operations).getClient().deleteFile(to);
+                    if (!result) {
+                        throw new GenericFileOperationFailedException(""Cannot delete file: "" + to);
+                    }
+                } catch (IOException e) {
+                    throw new GenericFileOperationFailedException(((FtpOperations)operations).getClient().getReplyCode(), 
+                                                                  ((FtpOperations)operations).getClient().getReplyString(), 
+                                                                  ""Cannot delete file: "" + to, e);
+                }
+            } else {
+                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + fileName + "" to: "" + to + "" as there already exists a file: "" + to);
+            }
+        }
+
+        LOG.trace(""Moving existing file: {} to: {}"", fileName, to);
+        if (!operations.renameFile(fileName, to)) {
+            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + fileName + "" to: "" + to);
+        }
+        return true;
+    }
+
+}
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
index 8334e69861b..22a72ca61dc 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpEndpoint.java
@@ -28,6 +28,7 @@
 import org.apache.camel.component.file.GenericFileConfiguration;
 import org.apache.camel.component.file.GenericFileProducer;
 import org.apache.camel.component.file.remote.RemoteFileConfiguration.PathSeparator;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
 import org.apache.camel.spi.ClassResolver;
 import org.apache.camel.spi.UriEndpoint;
 import org.apache.camel.spi.UriParam;
@@ -103,12 +104,23 @@ public String getScheme() {
 
     protected GenericFileProducer<FTPFile> buildProducer() {
         try {
+            if (this.getMoveExistingFileStrategy() == null) {
+                this.setMoveExistingFileStrategy(createDefaultFtpMoveExistingFileStrategy());
+            }
             return new RemoteFileProducer<>(this, createRemoteFileOperations());
         } catch (Exception e) {
             throw new FailedToCreateProducerException(this, e);
         }
     }
 
+    /**
+     * Default Existing File Move Strategy
+     * @return the default implementation for ftp components
+     */
+    private FileMoveExistingStrategy createDefaultFtpMoveExistingFileStrategy() {
+        return new FtpDefaultMoveExistingFileStrategy();
+    }
+
     public RemoteFileOperations<FTPFile> createRemoteFileOperations() throws Exception {
         // configure ftp client
         FTPClient client = ftpClient;
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
index 196dfc258fe..25ea4fc8196 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/FtpOperations.java
@@ -646,7 +646,7 @@ private boolean doStoreFile(String name, String targetName, Exchange exchange) t
                 throw new GenericFileOperationFailedException(""File already exist: "" + name + "". Cannot write new file."");
             } else if (existFile && endpoint.getFileExist() == GenericFileExist.Move) {
                 // move any existing file first
-                doMoveExistingFile(name, targetName);
+                this.endpoint.getMoveExistingFileStrategy().moveExistingFile(endpoint, this, targetName);
             }
         }
 
@@ -715,61 +715,6 @@ private boolean doStoreFile(String name, String targetName, Exchange exchange) t
         }
     }
 
-    /**
-     * Moves any existing file due fileExists=Move is in use.
-     */
-    private void doMoveExistingFile(String name, String targetName) throws GenericFileOperationFailedException {
-        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
-        // create a dummy exchange as Exchange is needed for expression evaluation
-        // we support only the following 3 tokens.
-        Exchange dummy = endpoint.createExchange();
-        // we only support relative paths for the ftp component, so dont provide any parent
-        String parent = null;
-        String onlyName = FileUtil.stripPath(targetName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME, targetName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
-        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
-
-        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
-        // we only support relative paths for the ftp component, so strip any leading paths
-        to = FileUtil.stripLeadingSeparator(to);
-        // normalize accordingly to configuration
-        to = endpoint.getConfiguration().normalizePath(to);
-        if (ObjectHelper.isEmpty(to)) {
-            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + name);
-        }
-
-        // do we have a sub directory
-        String dir = FileUtil.onlyPath(to);
-        if (dir != null) {
-            // ensure directory exists
-            buildDirectory(dir, false);
-        }
-
-        // deal if there already exists a file
-        if (existsFile(to)) {
-            if (endpoint.isEagerDeleteTargetFile()) {
-                log.trace(""Deleting existing file: {}"", to);
-                boolean result;
-                try {
-                    result = client.deleteFile(to);
-                    if (!result) {
-                        throw new GenericFileOperationFailedException(""Cannot delete file: "" + to);
-                    }
-                } catch (IOException e) {
-                    throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString(), ""Cannot delete file: "" + to, e);
-                }
-            } else {
-                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + name + "" to: "" + to + "" as there already exists a file: "" + to);
-            }
-        }
-
-        log.trace(""Moving existing file: {} to: {}"", name, to);
-        if (!renameFile(targetName, to)) {
-            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + name + "" to: "" + to);
-        }
-    }
-
     public boolean existsFile(String name) throws GenericFileOperationFailedException {
         log.trace(""existsFile({})"", name);
         if (endpoint.isFastExistsCheck()) {
@@ -980,5 +925,9 @@ private boolean buildDirectoryChunks(String dirName) throws IOException {
 
         return success;
     }
+    
+    public FTPClient getClient() {
+        return client;
+    }
 
 }
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpDefaultMoveExistingFileStrategy.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpDefaultMoveExistingFileStrategy.java
new file mode 100644
index 00000000000..48a8fb4cba0
--- /dev/null
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpDefaultMoveExistingFileStrategy.java
@@ -0,0 +1,83 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.file.remote;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.component.file.GenericFileEndpoint;
+import org.apache.camel.component.file.GenericFileOperationFailedException;
+import org.apache.camel.component.file.GenericFileOperations;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
+import org.apache.camel.util.FileUtil;
+import org.apache.camel.util.ObjectHelper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class SftpDefaultMoveExistingFileStrategy implements FileMoveExistingStrategy {
+
+    private static final Logger LOG = LoggerFactory.getLogger(SftpDefaultMoveExistingFileStrategy.class);
+    /**
+     * Moves any existing file due fileExists=Move is in use.
+     */
+    @Override
+    public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperations operations, String fileName)
+            throws GenericFileOperationFailedException {
+        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
+        // create a dummy exchange as Exchange is needed for expression evaluation
+        // we support only the following 3 tokens.
+        Exchange dummy = endpoint.createExchange();
+        // we only support relative paths for the ftp component, so dont provide any parent
+        String parent = null;
+        String onlyName = FileUtil.stripPath(fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME, fileName);
+        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
+        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
+
+        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
+        // we only support relative paths for the ftp component, so strip any leading paths
+        to = FileUtil.stripLeadingSeparator(to);
+        // normalize accordingly to configuration
+        to = ((SftpEndpoint)endpoint).getConfiguration().normalizePath(to);
+        if (ObjectHelper.isEmpty(to)) {
+            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + fileName);
+        }
+
+        // do we have a sub directory
+        String dir = FileUtil.onlyPath(to);
+        if (dir != null) {
+            // ensure directory exists
+            operations.buildDirectory(dir, false);
+        }
+
+        // deal if there already exists a file
+        if (operations.existsFile(to)) {
+            if (endpoint.isEagerDeleteTargetFile()) {
+                LOG.trace(""Deleting existing file: {}"", to);
+                operations.deleteFile(to);
+            } else {
+                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + fileName + "" to: "" + to + "" as there already exists a file: "" + to);
+            }
+        }
+
+        LOG.trace(""Moving existing file: {} to: {}"", fileName, to);
+        if (!operations.renameFile(fileName, to)) {
+            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + fileName + "" to: "" + to);
+        }
+    
+        return true;
+    }
+
+}
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
index 5f82b3a1bee..069dfa7411d 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java
@@ -20,6 +20,7 @@
 import org.apache.camel.Processor;
 import org.apache.camel.component.file.GenericFileConfiguration;
 import org.apache.camel.component.file.GenericFileProducer;
+import org.apache.camel.component.file.strategy.FileMoveExistingStrategy;
 import org.apache.camel.spi.UriEndpoint;
 import org.apache.camel.spi.UriParam;
 
@@ -65,9 +66,20 @@ public void setConfiguration(GenericFileConfiguration configuration) {
     }
 
     protected GenericFileProducer<SftpRemoteFile> buildProducer() {
+        if (this.getMoveExistingFileStrategy() == null) {
+            this.setMoveExistingFileStrategy(createDefaultSftpMoveExistingFileStrategy());
+        }
         return new RemoteFileProducer<>(this, createRemoteFileOperations());
     }
 
+    /**
+     * Default Existing File Move Strategy
+     * @return the default implementation for sftp component
+     */
+    private FileMoveExistingStrategy createDefaultSftpMoveExistingFileStrategy() {
+        return new SftpDefaultMoveExistingFileStrategy();
+    }
+
     public RemoteFileOperations<SftpRemoteFile> createRemoteFileOperations() {
         SftpOperations operations = new SftpOperations(proxy);
         operations.setEndpoint(this);
diff --git a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
index 8c3a1e7cc53..1db1c84e210 100644
--- a/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
+++ b/components/camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpOperations.java
@@ -900,7 +900,7 @@ private boolean doStoreFile(String name, String targetName, Exchange exchange) t
                 throw new GenericFileOperationFailedException(""File already exist: "" + name + "". Cannot write new file."");
             } else if (existFile && endpoint.getFileExist() == GenericFileExist.Move) {
                 // move any existing file first
-                doMoveExistingFile(name, targetName);
+                this.endpoint.getMoveExistingFileStrategy().moveExistingFile(endpoint, this, targetName);
             }
         }
 
@@ -965,54 +965,7 @@ private boolean doStoreFile(String name, String targetName, Exchange exchange) t
             IOHelper.close(is, ""store: "" + name, LOG);
         }
     }
-
-    /**
-     * Moves any existing file due fileExists=Move is in use.
-     */
-    private void doMoveExistingFile(String name, String targetName) throws GenericFileOperationFailedException {
-        // need to evaluate using a dummy and simulate the file first, to have access to all the file attributes
-        // create a dummy exchange as Exchange is needed for expression evaluation
-        // we support only the following 3 tokens.
-        Exchange dummy = endpoint.createExchange();
-        // we only support relative paths for the ftp component, so dont provide any parent
-        String parent = null;
-        String onlyName = FileUtil.stripPath(targetName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME, targetName);
-        dummy.getIn().setHeader(Exchange.FILE_NAME_ONLY, onlyName);
-        dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);
-
-        String to = endpoint.getMoveExisting().evaluate(dummy, String.class);
-        // we only support relative paths for the ftp component, so strip any leading paths
-        to = FileUtil.stripLeadingSeparator(to);
-        // normalize accordingly to configuration
-        to = endpoint.getConfiguration().normalizePath(to);
-        if (ObjectHelper.isEmpty(to)) {
-            throw new GenericFileOperationFailedException(""moveExisting evaluated as empty String, cannot move existing file: "" + name);
-        }
-
-        // do we have a sub directory
-        String dir = FileUtil.onlyPath(to);
-        if (dir != null) {
-            // ensure directory exists
-            buildDirectory(dir, false);
-        }
-
-        // deal if there already exists a file
-        if (existsFile(to)) {
-            if (endpoint.isEagerDeleteTargetFile()) {
-                LOG.trace(""Deleting existing file: {}"", to);
-                deleteFile(to);
-            } else {
-                throw new GenericFileOperationFailedException(""Cannot move existing file from: "" + name + "" to: "" + to + "" as there already exists a file: "" + to);
-            }
-        }
-
-        LOG.trace(""Moving existing file: {} to: {}"", name, to);
-        if (!renameFile(targetName, to)) {
-            throw new GenericFileOperationFailedException(""Cannot rename file from: "" + name + "" to: "" + to);
-        }
-    }
-
+    
     public synchronized boolean existsFile(String name) throws GenericFileOperationFailedException {
         LOG.trace(""existsFile({})"", name);
         if (endpoint.isFastExistsCheck()) {
diff --git a/components/camel-jsch/src/main/docs/scp-component.adoc b/components/camel-jsch/src/main/docs/scp-component.adoc
index 836162ab3dd..7303285b145 100644
--- a/components/camel-jsch/src/main/docs/scp-component.adoc
+++ b/components/camel-jsch/src/main/docs/scp-component.adoc
@@ -83,7 +83,7 @@ with the following path and query parameters:
 |===
 
 
-==== Query Parameters (20 parameters):
+==== Query Parameters (21 parameters):
 
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
@@ -96,6 +96,7 @@ with the following path and query parameters:
 | *strictHostKeyChecking* (producer) | Sets whether to use strict host key checking. Possible values are: no, yes | no | String
 | *allowNullBody* (producer) | Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component, a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override', then the file will be truncated, and if set to append the file will remain unchanged. | false | boolean
 | *disconnectOnBatchComplete* (producer) | Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server. | false | boolean
+| *moveExistingFileStrategy* (producer) | Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided |  | FileMoveExisting Strategy
 | *connectTimeout* (advanced) | Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH | 10000 | int
 | *soTimeout* (advanced) | Sets the so timeout Used only by FTPClient | 300000 | int
 | *synchronous* (advanced) | Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported). | false | boolean


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1538432172:2018-10-02T06:16:12.371+0000:1538432172:2018-10-02T06:16:12.371+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2541
"
0,CAMEL-5557,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,stephen samuel,0,3,2012-09-02 11:46:24+00:00,2012-11-11 16:42:05+00:00,"Contribution of Camel-ZeroMQ component.


I've taken the liberty of adding documentation here:
https://cwiki.apache.org/confluence/display/CAMEL/ZeroMQ


90% test coverage.","davsclaus:1346558173:2012-09-02T11:56:13.312+0000:1346558173:2012-09-02T11:56:13.312+0000:ZeroMQ is LGPL license and cannot be accepted at ASF.

However it can be accepted at Camel Extra
https://code.google.com/a/apache-extras.org/p/camel-extra/?redir=1
samspade79:1346558321:2012-09-02T11:58:41.888+0000:1346558321:2012-09-02T11:58:41.888+0000:It's not using ZeroMQ's JZMQ driver, it's using the Akka ZeroMQ driver which is apache 2 licensed.
http://doc.akka.io/docs/akka/snapshot/project/licenses.html
The actual component has no dependencies on any part of the Zeromq project. 
davsclaus:1346558331:2012-09-02T11:58:51.225+0000:1346558331:2012-09-02T11:58:51.225+0000:You would need to rework the patch to be applicable to the camel-extra project.

See this guide about new components, step 2 is about the licensing
http://camel.apache.org/add-new-component-guide.html
samspade79:1346558393:2012-09-02T11:59:53.198+0000:1346558393:2012-09-02T11:59:53.198+0000:I've also mentioned that in the documenation, because the akka driver is a little slower, that users can easily switch to the zeromq driver (in fact I could write that and put that bit in the camel-extra project?)
samspade79:1346714689:2012-09-04T07:24:49.429+0000:1346714689:2012-09-04T07:24:49.429+0000:I was wondering if you had thought about my comments that the zeromq component does not depend on zeromq gpl or lgpl code. Do you think it might be ok to use ?
davsclaus:1346715857:2012-09-04T07:44:17.983+0000:1346715857:2012-09-04T07:44:17.983+0000:And you are sue the akka driver do not use any other 3rd party JARs? All the JARs that are pulled in must be ASF licesing compliant
samspade79:1346720583:2012-09-04T09:03:03.291+0000:1346720583:2012-09-04T09:03:03.291+0000:Akka uses the scala binding for zeromq, which is apache licensed. You can see that in the pom here on maven central:
http://search.maven.org/#artifactdetails%7Corg.zeromq%7Czeromq-scala-binding_2.9.1%7C0.0.6%7Cjar

It is the Java binding for zeromq (JZMQ) that is LGPL licensed which Akka doesn't use. This is the key point from the Akka documentation ""The ZeroMQ module for Akka is written against an API introduced in JZMQ, which uses JNI to interact with the native ZeroMQ library. Instead of using JZMQ, the module uses ZeroMQ binding for Scala that uses the native ZeroMQ library through JNA. In other words, the only native library that this module requires is the native ZeroMQ library."" http://doc.akka.io/docs/akka/snapshot/scala/zeromq.html

The native library they refer to is the libzmq that is built when you compile zeromq from source (there is no binary distribution for linux). http://www.zeromq.org/intro:get-the-software
davsclaus:1346970039:2012-09-07T06:20:39.995+0000:1346970039:2012-09-07T06:20:39.995+0000:Well if its okay for Akka then its most likely okay for ASF. That said though I would like a few more from the Camel team to take a look as well.
samspade79:1348204414:2012-09-21T13:13:34.863+0000:1348204414:2012-09-21T13:13:34.863+0000:In the meantime is there anything else I can add / improve for this patch ?
davsclaus:1348553497:2012-09-25T14:11:37.873+0000:1348553497:2012-09-25T14:11:37.873+0000:Posted on @dev to get feedback on this contribution
http://camel.465427.n5.nabble.com/ZeroMQ-contribution-Any-thoughts-on-licensing-hack-tp5719948.html
jwcarman:1348553683:2012-09-25T14:14:43.856+0000:1348553683:2012-09-25T14:14:43.856+0000:What's wrong with just leaving this in ""extras"" for now while the licensing issues are investigated?  
samspade79:1348553702:2012-09-25T14:15:02.354+0000:1348553702:2012-09-25T14:15:02.354+0000:I put a reply on. I think using term hack makes it sound like its bad :)
davsclaus:1348789501:2012-09-28T07:45:01.683+0000:1348789501:2012-09-28T07:45:01.683+0000:Lets host this at Camel Extra as discussed on the dev forum
davsclaus:1349574211:2012-10-07T09:43:31.290+0000:1349574211:2012-10-07T09:43:31.290+0000:Stephen would it be possible to attach a .zip/tar with the component. As we need to move it to camel-extra. So it may be easier to add if its not a patch.

An alternative would be for you to migrate the code to camel-extra and attach a new patch.
Mind that the code at Camel extra will be a different license; if you are okay with that.
samspade79:1349595739:2012-10-07T15:42:19.697+0000:1349595739:2012-10-07T15:42:19.697+0000:Ok I've added the src and pom as a tar. Is that acceptable?
davsclaus:1352623316:2012-11-11T16:41:56.942+0000:1352623316:2012-11-11T16:41:56.942+0000:The component is now in the camel extra source code, and will be part of next release.

To have it work with OSGi that's another case whether that is possible. But that's a task on the Camel Extra side, to work on OSGi supports of the components in this project."
0,CAMEL-5556,Bug,Major,2.8.6,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Krishna,0,2,2012-09-01 23:14:08+00:00,2012-09-10 14:27:31+00:00,"The Hazelcast idempotent repository does not add and confirm messages in a thread safe manner.


Patch attached to handle that.","krishy:1346512521:2012-09-01T23:15:21.543+0000:1346512521:2012-09-01T23:15:21.543+0000:Use putifAbsent for add and slightly safe semantics for confirm.
njiang:1347258451:2012-09-10T14:27:31.732+0000:1347258451:2012-09-10T14:27:31.732+0000:Applied patch into trunk and camel-2.9.x and camel-2.10.x branches with thanks to Krishna."
0,CAMEL-5555,Bug,Major,2.10.0,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Ashwin Pejavar,0,2,2012-08-31 18:47:01+00:00,2012-09-10 14:57:12+00:00,"If a route is suspended using the ScheduledRoutePolicy and its subclasses (CronScheduledRoutePolicy), it cannot be resumed or started.


Looking at the code in ScheduledRoutePolicy.onJobExecute(), on start/resume actions, the route status is first checked and must be stopped or suspended before any actions is taken.


Suspension of a route, only suspends the consumer and not the route, and hence the start/resume after a suspend does nothing.


One solution could be to also check the status of the consumer on start/resume. This would require adding a isSuspended() to serviceHelper and should be relatively straightforward.","njiang:1347260232:2012-09-10T14:57:12.016+0000:1347260232:2012-09-10T14:57:12.016+0000:Applied the patch into trunk, camel-2.9.x and camel-2.10.x branches."
0,CAMEL-5554,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,James Strachan,James Strachan,0,1,2012-08-31 09:41:09+00:00,2012-09-05 18:19:31+00:00,"I can see folks wanting to also use CDI with the XML DSL for Camel route definitions (e.g. so they can use round tripping visual editors rather than using the Java DSL, but use CDI for all dependency injection to minimise XML use for configuration).


Maybe we could have some simple way to import routes into a CDI @Produces method using some helper class; so the routes can then be injected via CDI into a CamelContext?



public class MyConfiguration {
  // loads some routes for injection into the CamelContext
  @Produces
  List<RouteDefinitions>  loadRoutes() {
     return XmlRouteLoader.loadFromClassPath(""com/acme/something/blah.xml"");
  }
}




or maybe we should allow routes to be injected so that they could be used to create a CamelContext...



public class MyConfiguration {
  @Inject @RouteXml(classpath=""com/acme/something/blah.xml"")
  List<RouteDefinitions> routes;

  @Produces
  CamelContext  createContext() {
     return new CdiCamelContext(routes);
  }
}","jstrachan:1346840288:2012-09-05T18:18:08.280+0000:1346840288:2012-09-05T18:18:08.280+0000:Added an initial implementation - e.g. see this test case
http://svn.apache.org/viewvc/camel/trunk/components/camel-cdi/src/test/java/org/apache/camel/cdi/XmlRoutesFromClassPathTest.java?revision=HEAD&view=markup

by using RoutesXml.loadRoutesFrom... (File / XML / ClassPath / URL) we can easily load a RoutesDefinition which via @Produces and @ContextName can be easily injected as routes into a CamelContext (with an optional contextName)"
0,CAMEL-5553,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,James Strachan,3,7,2012-08-31 09:34:15+00:00,2015-11-20 18:12:49+00:00,"we don't yet support the various camel annotation injections in CDI yet; we should support the same capabilities as we have in spring/guice


http://camel.apache.org/bean-integration.html
http://camel.apache.org/bean-injection.html


I guess a more CDI way to do endpoint injection might be to have an annotation for endpointURI specification. Then you'd either use 



public class MyBean { 
  // named reference injection
  @Inject @Named(""foo"") Endpoint bar;

  // URI based injection
  @Inject @Uri(""mock:whatnot"") MockEndpoint foo;
...
}




Rather than using the DI-agnostic @EndpointInject annotation - though I guess we could support it too (though having Inject twice looks a bit icky and not as DRY)...



public class MyBean { 
  // using current annotation...
  @Inject @EndpointInject(uri = ""mock:whatnot"") MockEndpoint bar;
...
}




For handling @Consume it would be nice to avoid having to use @Inject too as that seems a bit odd (since there's no injection going on).


For @Produce I guess we could support a straight @Inject of a ProcessorTemplate; allowing use of @Uri annotation to specify the default URI to send to","jstrachan:1346389579:2012-08-31T13:06:19.375+0000:1346389650:2012-08-31T13:07:30.889+0000:I've added a first spike to at least inject @Inject Endpoint instances which looks for @EndpointInject.

Even this simple example is hard to get working in CDI to support Spring/Guice style support (e.g. injecting either Endpoint or MockEndpoint) - I've not yet found the magic way to let one @Produces function provide both Endpoint and MockEndpoint kinds of endpoints.

e.g. so that both these styles can be used from the same plugin
http://svn.apache.org/viewvc/camel/trunk/components/camel-cdi/src/test/java/org/apache/camel/cdi/support/MockEndpointInjectedBean.java?revision=1379437&view=markup
http://svn.apache.org/viewvc/camel/trunk/components/camel-cdi/src/test/java/org/apache/camel/cdi/support/EndpointInjectedBean.java?revision=1379437&view=markup

e.g.

{code}
public class Foo {
  // the following can't be supported
  // as they use different types

  @Inject @EndpointInject(uri = ""mock:foo"")
  private Endpoint foo;

  @Inject @EndpointInject(uri = ""mock:bar"")
  private MockEndpoint bar;
...
}
{code}

since the @Produces method can produce either Endpoint or MockEndpoint but can't support both

jstrachan:1346392553:2012-08-31T13:55:53.187+0000:1346392553:2012-08-31T13:55:53.187+0000:I've added a @Mock qualifier so we can inject MockEndpoint now (it uses the name of the field as the endpoint name by default - or takes the uri from @EndpointInject if its specified). Would prefer to be able to use the above and not need @Mock if anyone can figure out a way to do it though :)

http://svn.apache.org/viewvc/camel/trunk/components/camel-cdi/src/test/java/org/apache/camel/cdi/support/MockEndpointInjectedBean.java?revision=HEAD&view=markup
cmoulliard:1346638807:2012-09-03T10:20:07.215+0000:1346638807:2012-09-03T10:20:07.215+0000:As @EndpointInject is a Camel annotation which is currently processed by the DefaultCamelBeanPostProcessor of Camel, CDI / BeanManager of the CDI container will not be able to resolve it. When a DefaultCamelContext is created, Camel will looks for an Injector which is provided by spring, Guice. If it fails to find it, then it will use the DefaultInjector which will use the DefaultCamelBeanPostProcessor where injectFields, injectMethods will allow Camel ro resolve the @Produce, @Consume, @EndpointInject camel annotations.
jstrachan:1346647401:2012-09-03T12:43:21.627+0000:1346647401:2012-09-03T12:43:21.627+0000:OK I've now added support for @Produce, @Consume, @EndpointInject as vanilla annotations (without requiring @Inject) using the CamelExtension
jstrachan:1346648197:2012-09-03T12:56:37.225+0000:1346648197:2012-09-03T12:56:37.225+0000:Note that injection via @EndpointInject or @Produce without @Inject currently does not work in OpenWebBeans due to https://issues.apache.org/jira/browse/OWB-700
jstrachan:1346654722:2012-09-03T14:45:22.898+0000:1346654786:2012-09-03T14:46:26.715+0000:You can now use a more CDI-like injection of Endpoints or ProducerTemplate via:
{code}
public class Foo {
    @Inject @Uri(""mock:foo"") Endpoint endpoint;

    @Inject @Uri(""seda:bar"") ProducerTemplate producer;
}
{code}

These are equivalent to the traditional annotations for Spring/Guice, but they play a little nicer with CDI tooling (e.g. in IDEs):
{code}
public class Foo {
    @EndpointInject(uri=""mock:foo"") Endpoint endpoint;

    @Produce(uri=""seda:bar"") ProducerTemplate producer;
}
{code}


jstrachan:1346658574:2012-09-03T15:49:34.732+0000:1346658732:2012-09-03T15:52:12.697+0000:I hit some issues when using @Inject with @EndpointInject / @Produce and with @Named so things are now much simpler.

Use either of these 2 combinations of annotations for Endpoint / ProducerTemplate injection:

* the traditional Camel injections (@EndpointInject, @Produce) 
* @Inject (from CDI) plus a qualifier:
** @Named (from CDI for the named 'ref' style from Camel)
** @Uri(""some:url"") 
** @Mock(""mock:optionaUriGoesHere"") for mock endpoint injection

So you can inject via @Inject via...

{code}
public class Foo {
  @Inject @Named(""someRef"") Endpoint a;
  @Inject @Uri(""seda:foo"") Endpoint b;
  @Inject @Mock MockEndpoint result; // mock:result
  @Inject @Mock(""mock:another"") MockEndpoint c; // mock:another

  @Inject @Uri(""seda:bar"") ProducerTemplate producer;
{code}




jstrachan:1346727793:2012-09-04T11:03:13.348+0000:1346727793:2012-09-04T11:03:13.348+0000:here's an [example camel route + configuration|http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-cdi/src/main/java/org/apache/camel/example/cdi/MyRouteConfig.java?revision=1380504&view=markup] along with an [integration test case|http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-cdi/src/test/java/org/apache/camel/example/cdi/IntegrationTest.java?revision=1380504&view=markup]
jstrachan:1346840610:2012-09-05T18:23:30.863+0000:1346840610:2012-09-05T18:23:30.863+0000:just needs documentation on the wiki and we can close this issue now
kawork:1357128635:2013-01-02T20:10:35.427+0000:1357128635:2013-01-02T20:10:35.427+0000:the ""integration test case"" link above is broken, could you update it?
davsclaus:1357343364:2013-01-05T07:49:24.048+0000:1357343364:2013-01-05T07:49:24.048+0000:Karim, you can find the tests by looking in: http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-cdi/
davsclaus:1436409194:2015-07-09T10:33:14.992+0000:1436409194:2015-07-09T10:33:14.992+0000:This is possible today, and the cdi example and archetype shows this
dseidewitz:1436409400:2015-07-09T10:36:40.618+0000:1436409400:2015-07-09T10:36:40.618+0000:Ich bin am 10. Juli noch mal im Büro. Bitte wendet euch bei allen Themen an die neuen Modul-Owner:
LMSBATCH: Justin Heesemann
SBC: Gerhard Knarr
Validata: Christian Binder
OSRR: Benjamin Konrad & Stefan Rinderle

"
0,CAMEL-5552,Task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-08-30 01:58:01+00:00,2012-08-31 02:32:20+00:00,"Current camel-cmis cannot leverage the OSGi service to locate the SessionFactory, and it also uses lot of internal API which is not expose by the chemistry-client-osgi bundle.


We also need an OSGi unit test for it.","njiang:1346351540:2012-08-31T02:32:20.807+0000:1346351540:2012-08-31T02:32:20.807+0000:Now the camel-cmis should work by using cmis client osgi bundle.
We will add more test on OSGi integration test when we find a way to deploy the cmis server into karaf."
0,CAMEL-5551,Improvement,Major,None,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Willem Jiang,Shaun Elliott,0,2,2012-08-29 18:12:49+00:00,2012-09-10 14:57:57+00:00,"Not all JBDC drivers support ""getObject"" on the resultset the same way. In particular, the jtds driver returns back a ""ClobImpl"" type Object when ""getObject"" is called on some text\varchar(MAX) columns.


The simple solution is to check the column type and if it is a Clob\Blob or other known String type, call ""getString"" instead.","njiang:1347260277:2012-09-10T14:57:57.199+0000:1347260277:2012-09-10T14:57:57.199+0000:Applied patch into trunk, camel 2.9.x and camel 2.10.x branch with thanks to Shaun."
0,CAMEL-5550,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Claus Ibsen,0,4,2012-08-29 16:37:07+00:00,2012-09-10 13:58:04+00:00,"We recently added headerName to @XPath / @XQuery to support doing xpaths on headers. We should add that as well to the xpath/xquery languages so its exposed in the DSL, so people can use that.


For example in a content based router. Today there is some functions that return a header, but its a bit cumbersome to use. Maybe people have stored a xml in a header, and just want the xpath to evaluate on that.


The Java / Scala DSL is a bit heavier to add, as it would entail new methods in various builder classes to support that. And we got a bunch already for the namespaces, and return type etc. So be selective and only add a few for the header which makes the most sense. People can always create the expression/predicate using the xpath builder itself.","davsclaus:1346229470:2012-08-29T16:37:50.861+0000:1346229470:2012-08-29T16:37:50.861+0000:See nabble
http://camel.465427.n5.nabble.com/xpath-for-header-tp5718190.html
alanfoster:1346235150:2012-08-29T18:12:30.490+0000:1346235150:2012-08-29T18:12:30.490+0000:I will try to see what I can do with this one... I'm new to camel development so I may be slow, so if someone else is eager to add this functionality just say and I'll stop :)
alanfoster:1346319551:2012-08-30T17:39:11.672+0000:1346319551:2012-08-30T17:39:11.672+0000:I hope this patch is OK

I wasn't able to do anything with the Scala side of things because I've never used it before :(

Alan
njiang:1346372900:2012-08-31T08:28:20.711+0000:1346372900:2012-08-31T08:28:20.711+0000:Applied the patch with thanks to Alan, I also added some Spring Xpath unit tests.
bvahdat:1346374921:2012-08-31T09:02:01.677+0000:1346374921:2012-08-31T09:02:01.677+0000:Willem

The patch provided by Alan doesn't include any modification for XQueryBuilder.java, however your commit has changed this source as well causing the previous commit being reverted!

http://svn.apache.org/viewvc/camel/trunk/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java?r1=1378534&r2=1379352&pathrev=1379352

njiang:1346612864:2012-09-03T03:07:44.457+0000:1346612864:2012-09-03T03:07:44.457+0000:@Babak,

I'm very Sorry about it.
I didn't update my eclipse workspace to pick up the grading change of saxon, so I revert the change you made before as my eclipse suggested and will reapply your change shortly today.
njiang:1347256684:2012-09-10T13:58:04.349+0000:1347256684:2012-09-10T13:58:04.349+0000:Applied patch into trunk with thanks to Alan.
As there are big gap between the Scala DSL and Java DSL. I think we should create another JIRA for it."
0,CAMEL-5549,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-08-29 16:04:24+00:00,2012-08-29 16:14:57+00:00,"See
https://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=2


It would be great with a component for vtd-xml library which is very efficient for xpath processing big files / payloads. 


The component is being hosted at Camel extra, eg camel-vtdxml is located at Camel Extra, due VTD-XML being GPL. 


We should though add integration in camel-core DSL for the vtdxml language so its easy to use out of the box, like we do for xquery and other languages that are not part in the core itself.","davsclaus:1346227859:2012-08-29T16:10:59.070+0000:1346227859:2012-08-29T16:10:59.070+0000:Docs added
https://cwiki.apache.org/confluence/display/CAMEL/VTD-XML"
0,CAMEL-5548,Bug,Major,2.10.0,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Andrew Wheat,0,3,2012-08-29 09:51:04+00:00,2017-09-21 09:48:46+00:00,"Setup:
Three Zookeeper instances (Z1, Z2, Z3) in two datacenters; A and B. Z1 and Z2 are in data center A; Z3 is in data center B.


Four Application servers (A1-A4) split evenly between the two datacenters, using a camel route to determine if the a message should be sent (quartz -> zookeeperpolicy -> activemq)


The master node is A3 in data center B.


When the network fails between the two data centers, The ZK servers in data center A have quorum.
When something causes an election to occur in data center A, one of A1 or A2 is elected.


Given that no election has occurred in data center B, A3 is also marked as master.


=========
Proposed solution:
A change in the zookeeper structure should trigger a re-election among the application servers. Since A3 and A4 will be connected to a zookeeper that does not have quorum, neither A3 or A4 will be elected as master.","davsclaus:1451462873:2015-12-30T16:07:53.424+0000:1451462873:2015-12-30T16:07:53.424+0000:Anyone wanna help improve the zookeeper route policy to cater for this situation
davsclaus:1505958526:2017-09-21T09:48:46.584+0000:1505958526:2017-09-21T09:48:46.584+0000:There has been several improvements and changes to the zookeeper and the new zookeeper-master component. So give those a try and report back in a new ticket if any problems"
0,CAMEL-5547,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.9.3,Daniel Kulp,Alan Foster,0,4,2012-08-29 08:34:54+00:00,2012-08-29 16:07:17+00:00,"(I apologise if this is the wrong place for this ticket to be raised)


It would be nice to be able to easily report documentation problems on the wiki pages. It would be good to encourage users to report any problems they find with the documentation without needing to create an account, or a lot of hassle.


At the bottom of the page there is only an edit option, perhaps it could be added there :
""Privacy Policy - (edit page) (report error)""


For instance there is currently a problem with the example junit test case on 
http://camel.apache.org/load-balancer.html
""For further examples of this pattern look at this junit test case""
This link is a 404.


It would've been nice to easily report this so it could be looked into","njiang:1346202585:2012-08-29T09:09:45.065+0000:1346202585:2012-08-29T09:09:45.065+0000:@Alan
I just fixed the link, you can bring the bugs of wiki to user@camel.apache.org instead of logging a JIRA for it.
alanfoster:1346205770:2012-08-29T10:02:50.405+0000:1346205770:2012-08-29T10:02:50.405+0000:Thanks for fixing the example problem [~njiang]. However as that was not the main reason I raised this ticket I wonder if it's possible to have this ticket left open, as the added option of easily reporting wiki bugs hasn't actually been added?
davsclaus:1346208907:2012-08-29T10:55:07.169+0000:1346208907:2012-08-29T10:55:07.169+0000:Alan, reporting documentation issues is just like reporting any other issues. You can use the mailing lists or the JIRA tracker etc.

And as in a future time we hopefully migrate our docs from wiki to be in the source code, so we can do versioned documentation, as many other projects. Then doc fixes would be just like code fixes.

What we can do is to add more details to this page how to report doc issues
http://camel.apache.org/contributing.html

I don't see a point in trying to add a new dimension how to report doc issues that goes beyond what we have today. Also considering how other projects have docs in source control, and a doc fix is just like a code fix. We should get to that point with Camel someday I hope.
dkulp:1346211162:2012-08-29T11:32:42.014+0000:1346211162:2012-08-29T11:32:42.014+0000:Claus,

We could add a ""Add Comment"" option to the bottom.   CXF does that.

davsclaus:1346211535:2012-08-29T11:38:55.030+0000:1346211535:2012-08-29T11:38:55.030+0000:The cwiki pages directly has this functionality, eg see this page
https://cwiki.apache.org/confluence/display/CAMEL/Aggregate+Example

Posting on the mailinglist, or JIRA ticket is just much higher visibility to the team, and much greater chance to get noticed and fixed. And this works.

I just tried on CXF on this page
http://cxf.apache.org/docs/how-do-i-develop-a-client.html

Clicking the add comment (the link is hardly noticeable) gives me an error page
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=59871?showComments=true&showCommentArea=true#addcomment


Page Not Found
The page you were trying to reach could not be found. This could be because:

The page does not exist.
The page exists, but you do not have permission to view it.

davsclaus:1346211887:2012-08-29T11:44:47.815+0000:1346211887:2012-08-29T11:44:47.815+0000:Daniel, on CXF, how do you guys get notified about a new comment? And how often is it used?
I guess as its similar to how the link to (edit page) works, it would possible be somewhat easy to add a (add comment) link as you do on CXF. We could then do that for Camel as well. 

dkulp:1346213004:2012-08-29T12:03:24.700+0000:1346213004:2012-08-29T12:03:24.700+0000:Claus,

I'll need to look at the comment link in the docs section.  Strange.   Seems to work OK from the root (cxf.apache.org), just not from docs.  Wonder if the last JIRA update broke something.

Anyway, the notifications go to the commits list just like changes to the page content.


davsclaus:1346213219:2012-08-29T12:06:59.781+0000:1346213219:2012-08-29T12:06:59.781+0000:Ah that is good to know so the comments gets awareness since we see those mails on the commits list.

If thats the case, we could add a similar link to Camel since CXF already do it. As after all we are a sister projects.
dkulp:1346213401:2012-08-29T12:10:01.813+0000:1346213401:2012-08-29T12:10:01.813+0000:
I'll try adding it once I figure out what is wrong with the CXF links...  Only some are not working (you just managed to find one of them).   I don't want a propagate a bug to the Camel site.  :-)
dkulp:1346224325:2012-08-29T15:12:05.658+0000:1346224325:2012-08-29T15:12:05.658+0000:
The comment links seem to have issues with pages that have special chars in the name (like the ""?"" at the end of ""How do I develop a client?"" for the page you sent).     I've updated the template for CXF to change how the link is generated to match how the edit link is created (generic url using the page Id) and that seems to work better.    I'll get this added to Camel as well.


dkulp:1346227637:2012-08-29T16:07:17.993+0000:1346227637:2012-08-29T16:07:17.993+0000:
There is now an ""add comment""  link at the bottom of every page on the Camel site.   That can be used to report any issues, comments, suggestions."
0,CAMEL-5546,Improvement,Minor,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Andrew Wheat,0,2,2012-08-29 08:29:08+00:00,2012-09-10 13:55:45+00:00,"The current structure of the ZooKeeperRoutePolicy does not allow the master election to be re-used.


Extracting the master election to a separate top-level class with a suitable, simple API;



public boolean isMaster() { ... } 



would make re-using the election for things that are not a route easier.


The election constructor then takes the same parameters as the existing ZookeeperRoutePolicy, and the new ZooKeeperRoutePolicy would take an election instance.","candle:1346381956:2012-08-31T10:59:16.204+0000:1346381956:2012-08-31T10:59:16.204+0000:Quite a large diff; I have the changes in several git commits (based on the github mirror of camel) that I can make public if that is a better or easier way of integrating the changes.
njiang:1347256545:2012-09-10T13:55:45.213+0000:1347256545:2012-09-10T13:55:45.213+0000:Applied patch into trunk with thanks to Andrew."
0,CAMEL-5545,Improvement,Major,2.10.0,None,"
None
",Resolved,Fixed,"2.10.2, 2.11.0",Unassigned,Rich Newcomb,0,2,2012-08-29 02:14:51+00:00,2012-08-31 13:29:55+00:00,"Enhance the XMLSecurity component to enable access of a private key (for decryption) from a Java key store using a password that is unique to the key, and different than the key store password.


The likely solution is to allow an optional 'keyPassword' parameter in the XMLSecurity data format.


A description of the issue in context is here :
http://camel.465427.n5.nabble.com/XMLSecurity-key-recovery-fails-when-keystore-and-key-use-different-passwords-td5718094.html","rnewcomb:1346187427:2012-08-29T04:57:07.680+0000:1346187427:2012-08-29T04:57:07.680+0000:Patch to allow retrieval of a password protected key for asymmetric decryption.  With this patch, a keyPassword value can be provided as part of the secureXML data format processor.

Note:  place the recipient-with-key-pass.ks file into $XMLSecurity/src/test/resources
davsclaus:1346200348:2012-08-29T08:32:28.520+0000:1346200348:2012-08-29T08:32:28.520+0000:Thanks Rich for the patch.

Do you mind updating the documentation at
http://camel.apache.org/xmlsecurity-dataformat.html

I will backport it to 2.10.2 as well to get.
davsclaus:1346200750:2012-08-29T08:39:10.202+0000:1346200750:2012-08-29T08:39:10.202+0000:Patch applied to trunk and 2.10 branch.

Rich feel free to update the docs, and mark the option to be included from Camel 2.10.2.
rnewcomb:1346223686:2012-08-29T15:01:26.056+0000:1346223686:2012-08-29T15:01:26.056+0000:The XMLSecurity data format wiki page and the 2.11.0 release notes are updated."
0,CAMEL-5544,Improvement,Minor,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Andrew Wheat,0,2,2012-08-28 12:04:53+00:00,2012-08-30 08:57:53+00:00,"The only exceptions that are thrown by the constructor of the ZooKeeperRoutePolicy are thrown by the requirement to make the node name more pretty - adding the hostname to the created zookeeper node.


This exception is fairly unlikely to happen and therefore can be caught closer to the cause, logging a warning and using a default hostname.


This would clean up the API by avoiding throwing any exceptions.","davsclaus:1346213103:2012-08-29T12:05:03.692+0000:1346213103:2012-08-29T12:05:03.692+0000:Thanks for the patch.

I had to fix the code to pass the checkstyle check. You can read how to run that test here
http://camel.apache.org/building.html

Also we use slf4j api for logging, and the support class for route policy already got a logger, so I polished that part as well.
Also instead of using string format, I use the logging api directly using its {} placeholders. (Was already wrong in the src)
davsclaus:1346213130:2012-08-29T12:05:30.326+0000:1346213130:2012-08-29T12:05:30.326+0000:Only on trunk to keep API stable in 2.10.x branch.
candle:1346288273:2012-08-30T08:57:53.239+0000:1346288273:2012-08-30T08:57:53.239+0000:I had spotted the non-standard logging, but decided to keep the diff small so that it was easier to see what had been changed."
0,CAMEL-5513,Improvement,Minor,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-16 07:57:14+00:00,2012-08-16 08:30:27+00:00,Some people may write zero files and want them to be accepted.,"davsclaus:1345077027:2012-08-16T08:30:27.559+0000:1345077027:2012-08-16T08:30:27.559+0000:There is a readLockMinLength option now, you can set it to 0 to accept zero length files. Updated wiki docs as well."
0,CAMEL-5512,Improvement,Minor,None,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-16 07:52:43+00:00,2012-08-16 10:57:17+00:00,"If you have a dir with a lot of files, then we are currently doing a LS each time. 


We should try to use the fine grained API from the ftp clients to get file size / timestamp when applicable.","davsclaus:1345074808:2012-08-16T07:53:28.646+0000:1345074808:2012-08-16T07:53:28.646+0000:he regular FTP client now has a improved API so we can possible improve on that client
{code}
public FTPFile[] listFiles(String pathname, FTPFileFilter filter)
{code}
There is a filter, so we can then filter, to only get details about the file in question.

As well there is a modification timestamp command (not supported by all servers)
{code}
public String getModificationTime(String pathname) throws IOException {
{code}
Also looks like the SFTP library now have a filter API in their newer version

{code}
public void ls(java.lang.String path, com.jcraft.jsch.ChannelSftp.LsEntrySelector selector) throws com.jcraft.jsch.SftpException {code}
So we should possible be able to optimize this if these list operations is faster.
davsclaus:1345085552:2012-08-16T10:52:32.307+0000:1345085552:2012-08-16T10:52:32.307+0000:You can now enable the option {{fastExistsCheck=true}} to make the {{readLock=changed}} go faster as well, as it will do a LIST operation with the file name to filter out and only select the single file. This should run faster on FTP servers in case it has a lot of files in a directory. Notice that the FTP server many not support this LIST operation with a file name, so you may have to revert back and disable the {{fastExistsCheck}} option.
davsclaus:1345085837:2012-08-16T10:57:17.105+0000:1345085837:2012-08-16T10:57:17.105+0000:No API changed was needed so backported to 2.10 branch."
0,CAMEL-5511,Task,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-08-16 06:44:12+00:00,2012-08-16 06:50:45+00:00,We should upgrade from 4.1 to 4.2 for http client 4 in camel-http4.,
0,CAMEL-5510,Bug,Minor,2.9.2,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Claus Ibsen,William McDonald,0,2,2012-08-15 20:36:11+00:00,2013-09-19 05:44:20+00:00,"I was trying to test two routes that start from the same endpoint.  The endpoint is a jms queue, so it should be able to have multiple consumers attach to it.  When I use the standard CamelTestSupport methodology and let it create and start my context, mock my out points, etc. everything passes (see CompetingConsumersWorks.java).  However when I try and use the strategy of not letting the junit support create everything, ie. 
        public boolean isUseRouteBuilder() 

{ return false; }

 
        public boolean isUseAdviceWith() 

{ return true; }

 
and try and use AdviceWithRouteBuilder to mock out routes the test doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get it to work, but only if I start the context before adding the second set of routes to the context (see comments in code).","ceposta:1375094723:2013-07-29T18:45:23.174+0000:1375094723:2013-07-29T18:45:23.174+0000:Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and both tests (...Works.java and ...DoesNotWork.java) seem to work just fine and pass the unit test.

Can you give it a try on your end with the latest release?
wjmcdonald:1375099308:2013-07-29T20:01:48.089+0000:1375099308:2013-07-29T20:01:48.089+0000:Not sure - I've been off on other things.  I don't know if I'll get back 
to it any time soon, but if I do, I'll let you know.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   07/29/2013 11:44 AM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13722817#comment-13722817 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

Hey Bill,

Is this still a problem? I've just tried on the latest release (2.11) and 
both tests (...Works.java and ...DoesNotWork.java) seem to work just fine 
and pass the unit test.

Can you give it a try on your end with the latest release?
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira


ceposta:1379510509:2013-09-18T21:21:49.540+0000:1379510509:2013-09-18T21:21:49.540+0000:I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on latest snapshots.
wjmcdonald:1379512192:2013-09-18T21:49:52.650+0000:1379512192:2013-09-18T21:49:52.650+0000:I can't get to it now, so if you think you can close it that's fine.  If 
it comes up again, we can always readdress it then.

William McDonald
Sr. Software Developer   |  TransCentra, Inc.
Office: 1-602-635-5910  |   Mobile: 1-602-741-3664  | 
william.mcdonald@transcentra.com   |   www.TransCentra.com
Regulus Group and J&B Software are now TransCentra

This email message is intended for the named recipient only and may be 
privileged and/or confidential. If you are not the intended or named 
recipient or have received this email in error then you should delete this 
email and you should not copy, forward or disclose it to any other person. 
The views and opinions expressed in this email are those of the sender and 
may not represent the views and opinions of TransCentra



From:   ""Christian Posta (JIRA)"" <jira@apache.org>
To:     william.mcdonald@transcentra.com, 
Date:   09/18/2013 02:19 PM
Subject:        [jira] [Commented] (CAMEL-5510) Competing Consumers fails 
for jms queue using AdviceWith




    [ 
https://issues.apache.org/jira/browse/CAMEL-5510?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=13771252#comment-13771252 
] 

Christian Posta commented on CAMEL-5510:
----------------------------------------

I can confirm these tests pass on master.

I think we should close this and reopen if reporter can reproduce on 
latest snapshots.
 
CompetingConsumersDoesNotWork.java, CompetingConsumersWorks.java
endpoint is a jms queue, so it should be able to have multiple consumers 
attach to it.  When I use the standard CamelTestSupport methodology and 
let it create and start my context, mock my out points, etc. everything 
passes (see CompetingConsumersWorks.java).  However when I try and use the 
strategy of not letting the junit support create everything, ie. 
doesn't pass (see CompetingConsumersDoesNotWork.java).  I can actually get 
it to work, but only if I start the context before adding the second set 
of routes to the context (see comments in code). 

--
This message is automatically generated by JIRA.
If you think it was sent incorrectly, please contact your JIRA 
administrators
For more information on JIRA, see: http://www.atlassian.com/software/jira

"
0,CAMEL-5509,Bug,Minor,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-08-15 14:39:00+00:00,2012-08-20 02:30:49+00:00,"When you using ""jetty:http://localhost:9000"" as the jetty http consumer uri, you will get a complain of 404 when you using ""http://localhost:9000"" to access the service.","njiang:1345401049:2012-08-20T02:30:49.655+0000:1345401049:2012-08-20T02:30:49.655+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5508,Improvement,Minor,"2.9.2, 2.10.0","2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-15 10:32:29+00:00,2012-08-20 07:31:28+00:00,"If you are not using property placeholders at all, then we can optimize to avoid lookup up properties component when parsing uris and the likes. Looking up the component is essentially only needed at startup.","davsclaus:1345419088:2012-08-20T07:31:28.508+0000:1345419088:2012-08-20T07:31:28.508+0000:Babak pointed out an issue in an itest, which uses the Camel Test Kit with advice with.

The solution would be to improve the test kit to ensure the properties component is pre configured when using advice with."
0,CAMEL-5507,Bug,Major,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Alan Foster,0,3,2012-08-14 19:37:15+00:00,2012-08-20 14:03:35+00:00,"When creating a new fuse project using the camel-blueprint archetype and  having multiple test methods it has problems deleting 'target\bundles\routetest.jar' in the setUp method of CamelBlueprintTestSupport


Reproduction steps:



Create new fuse project from camel-blueprint archetype
Open the RouteTest.java in (src/test/java/com/mycompany/camel/blueprint/RouteTest.java)
Copy the 'testRoute()' method a couple of times and give it a different method name to best see this problem.
Run the maven tests



The console will say this after the first test runs:



                    Thread-7] BlueprintCamelContext          INFO  Apache Camel 2.9.0.fuse-7-061 (CamelContext: blueprintContext) is shutdown in 0.005 seconds. Uptime 0.085 seconds.
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles\routetest.jar failed
[                          main] TestSupport                    WARN  Deletion of file: C:\FuseIDEEnterprise-2.1.462\workspace\camel-blueprint\target\bundles failed
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/FuseIDEEnterprise-2.1.462/workspace/camel-blueprint/target/classes/OSGI-INF/blueprint/blueprint.xml




You can also also get PojoSR class loader issues when running the exact same project as JUnit tests, rather than maven tests. But these errors may be related so I won't raise a ticket for that.


I will however give the stack trace for this, in case it isn't related



org.osgi.framework.BundleException: Unable to start bundle
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:144)
	at de.kalpatec.pojosr.framework.PojoSR.startBundles(PojoSR.java:405)
	at de.kalpatec.pojosr.framework.PojoSR.<init>(PojoSR.java:322)
	at de.kalpatec.pojosr.framework.PojoServiceRegistryFactoryImpl.newPojoServiceRegistry(PojoServiceRegistryFactoryImpl.java:51)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.createBundleContext(CamelBlueprintHelper.java:111)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(Unknown Source)
	at java.security.SecureClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.defineClass(Unknown Source)
	at java.net.URLClassLoader.access$100(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at de.kalpatec.pojosr.framework.PojoSRBundle.start(PojoSRBundle.java:130)
	... 30 more
Caused by: java.lang.ClassNotFoundException: org.eclipse.core.runtime.Plugin
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.net.URLClassLoader$1.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
	at java.lang.ClassLoader.loadClass(Unknown Source)
	... 43 more","davsclaus:1345090974:2012-08-16T12:22:54.259+0000:1345090974:2012-08-16T12:22:54.259+0000:Alan, Fuse issues should essentially be reported to FuseSource and not Apache.

I will try with the ASF Camel releases and see if I can reproduce the issue though, as the camel-test-blueprint is also part of ASF and it may have an issue on Windows. 
davsclaus:1345103470:2012-08-16T15:51:10.447+0000:1345103470:2012-08-16T15:51:10.447+0000:I have reproduced the WARN of deleting the file on my XP box, of the ASF trunk version of Camel. It could either be in the camel-test-blueprint, or in pojosr that has a open file handle to the file in question, which then cannot be deleted on windows.
alanfoster:1345198861:2012-08-17T18:21:01.209+0000:1345198861:2012-08-17T18:21:01.209+0000:Thanks for looking to this Claus

Would you happen to know of any quickfix for this? Or anything I could try to look into to find out the exact cause of the problem?
davsclaus:1345422177:2012-08-20T08:22:57.346+0000:1345422177:2012-08-20T08:22:57.346+0000:There is no easy quickfix. 

The issue is that something in pojosr/blueprint/etc. is keeping a file lock on that given JAR, which Windows then refuses to delete. Other OS such as linux/mac etc dont have this issue. And thus its only happens on windows.
davsclaus:1345442615:2012-08-20T14:03:35.399+0000:1345442615:2012-08-20T14:03:35.399+0000:The bundle JAR is now written in a separate directory, so we can cleanup the Karaf bundles.

On shutting down the tests there is no longer a 5 sec (+ WARN) on windows.

This is the best we can do so far."
0,CAMEL-5506,Bug,Major,2.10.0,None,"

camel-hbase

",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Claudio Corsi,0,3,2012-08-14 19:06:34+00:00,2012-08-15 15:20:27+00:00,"The current hbase component uses the URI getHost method to retrieve the table name but this method returns null if the host name does not conform to the requirements of this method.  For instance, it should include a '.' in the name, or is a ipv4 or ipv6 valid address string.  If the table name is a simple name then the getHost method will return null instead of the name of the table.  This will in turn cause a NPE exception.


The other issue is that if you are using 0.92.x or greater with the current implementation of the camel-hbase component.  An IllegalArgumentException is generated because of an incompatible host:port pair.  This is caused by the fact that the current hbase integration uses 0.90.5 and this will conflict with those versions.


I have a patch that solves both issues but in the second case.  It will require that the user define the specific hbase client version that they need to use.


btw, the camel-hbase component is not available as an option for the Component/s drop down list.","ccorsi:1344942445:2012-08-14T19:07:25.719+0000:1344942445:2012-08-14T19:07:25.719+0000:This is the patch that contains the fixes required for this issue.

ccorsi:1344943399:2012-08-14T19:23:19.933+0000:1344943399:2012-08-14T19:23:19.933+0000:BTW:  This issue has the following workaround.

The table name should include at the very least a '.' in the name.

If using hbase 0.92.x or greater than they need to add the following to their pom file.

{noformat}
	<dependency>
	    <groupId>org.apache.camel</groupId>
	    <artifactId>camel-hbase</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.apache.hbase</groupId>
                <artifactId>hbase</artifactId>
              </exclusion>
            </exclusions>
	</dependency>

        <dependency>
          <groupId>org.apache.hbase</groupId>
          <artifactId>hbase</artifactId>
          <version>${hbase-version}</version>
        </dependency>
{noformat}

Where base.version is defined.

Note that the patch that I have attached forces the users to define the required hbase client version. 
This might not be necessary in this case since the package will not include the hbase client and the users will need to include the runtime.  Come to think about it, you can just ignore that part of the patch and apply the rest.  Instead, state on the web site that trying to use the default hbase client with 0.92.x or greater will cause an exception.

davsclaus:1345010264:2012-08-15T13:57:44.366+0000:1345010264:2012-08-15T13:57:44.366+0000:Claudio, thanks for the patch.

The pom.xml code above, is that an information if people would upgrade to a newer hbase version that shipped with Camel?
I assume you patch can be applied to the ASF Camel trunk code.

We may be able to upgrade hbase version but i wonder if there was some osgi issues with newer release?
ccorsi:1345010888:2012-08-15T14:08:08.186+0000:1345010888:2012-08-15T14:08:08.186+0000:The pom.xml update is only required for users that have a maven project and want to test using camel:run against an already running hbase system.  If the service is using 0.92.x or greater, then the camel:run will produce the illegal argument exception with the not a host:port pair.  Adding the above update to their maven project pom file will resolve that issue.

The original patch that includes changing the hbase to provided is not required in general since the api using the 0.90.5 hbase is the same as the latest version of hbase.


iocanel:1345012402:2012-08-15T14:33:22.549+0000:1345012402:2012-08-15T14:33:22.549+0000:Regarding the provided scope I agree, as it seems that unless there is an exact version match between the client and the server, then there will be problems.

Regarding the getHost() thing, I am not sure I understand what exactly is the problem. AFAIK it doesn't have issues working with simple names too. In fact in the unit tests simple names have been used and they do work fine. Maybe I misunderstood the problem?
davsclaus:1345013695:2012-08-15T14:54:55.344+0000:1345013695:2012-08-15T14:54:55.344+0000:Oh we should remember to upon up the osgi feature so it uses a range of [0.9,1)
davsclaus:1345015227:2012-08-15T15:20:27.938+0000:1345015227:2012-08-15T15:20:27.938+0000:osgi range widen as well"
0,CAMEL-5505,Bug,Minor,"2.10.0, 2.11.0","2.9.3, 2.10.1, 2.11.0","

camel-core,
test
xslt

",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Hadrian Zbarcea,Alexander Titov,0,5,2012-08-14 13:33:05+00:00,2012-08-22 16:03:14+00:00,"In xslt component we can't customize uriResolver For instance in route with uri ""xslt:org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolver=#customURIResolver"" camel still uses default XsltUriResolver.","asbestos:1344922507:2012-08-14T13:35:07.746+0000:1344922507:2012-08-14T13:35:07.746+0000:Test case with fix.
hadrian:1344925986:2012-08-14T14:33:06.921+0000:1344925986:2012-08-14T14:33:06.921+0000:I am looking at your patch. A quick comment, the '#' should not be there. While it's used in some context to mean a reference, in a [URI|http://www.ietf.org/rfc/rfc2396.txt] that would indicate a fragment, so I would take it out.
davsclaus:1344926262:2012-08-14T14:37:42.919+0000:1344926262:2012-08-14T14:37:42.919+0000:The # is to denote a reference lookup in Camel, and is supported by any options in the URI. So Alexander is correct in his patch.

For example with the file component to use a custom filter, example on web page at
http://camel.apache.org/file2


hadrian:1344926793:2012-08-14T14:46:33.536+0000:1344926793:2012-08-14T14:46:33.536+0000:@claus, two wrongs don't make a right! I strongly encourage you to try understanding the spec. In this particular case we have an opportunity to fix things as the [xslt component|http://camel.apache.org/xslt.html] doesn't document a requirement to use the '#'.
davsclaus:1344927304:2012-08-14T14:55:04.077+0000:1344927304:2012-08-14T14:55:04.077+0000:All the components support the # reference lookup. Its to make it easy to configure endpoints! It has been link this 4+ years. Any option can use that, even types that are String etc.

The # dont need to be documented in all options, as its a general idiom in Camel. There is logic in camel-core that handles this!


asbestos:1344936143:2012-08-14T17:22:23.613+0000:1344936143:2012-08-14T17:22:23.613+0000:Hadrian, thanks for advice. Can you share some documentation or other reference about that?
I agree, that there is no documentation about '#' in xslt component. I studied souce code of camel-core, particularly EndpointHelper.resolveReferenceParameter and i see that in this version of camel all # signs replased with empty string. In samples from Camel in action book beans with # called reference beans. Maybe this book is old, or this information is outdated, or somthing like that. 

Despite this, proplem is in createEndpoint implementation of xslt component. Currently, after parameter is set in configureXslt, it is removed from parameters Map. URIResolver resolver = resolveAndRemoveReferenceParameter(parameters, ""uriResolver"", URIResolver.class) will allways return null, after configureXslt is called, and resolver will be always initialized to new XsltUriResolver.  
hadrian:1344949011:2012-08-14T20:56:51.541+0000:1344949011:2012-08-14T20:56:51.541+0000:Alexander, I understand what you wanted to do and why. From one point of view Claus is somewhat right in his statement that you are ""correct in this patch"" in the sense that you followed the same pattern in use in Camel today. My statement was that the logic in camel-core is flawed and not using '#' means one less place to clean up in the future. As you point out, the 'logic' in camel-core is kinda random, replacing chars with other chars, thus creating undocumented and even unknown to us edge cases that pop up a lot lately. There are other flaws, like adding the extra '//' thus not allowing for urns at all, and others. The fact that it stayed like this for 4+ years is imho not an assurance that it's correct.

hadrian:1344967844:2012-08-15T02:10:44.870+0000:1344967844:2012-08-15T02:10:44.870+0000:Patch applied. Will see tomorrow if I can improve the '#' usage.
asbestos:1344978749:2012-08-15T05:12:29.098+0000:1344978749:2012-08-15T05:12:29.098+0000:Ahh, i got it. 
But how can we today set reference property (lookup in registry) in URI?
Without # i got exception:
org.apache.camel.FailedToCreateRouteException
..............
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: uriResolver as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: javax.xml.transform.URIResolver with value uriResolver
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:347)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:367)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:297)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
	at org.apache.camel.component.xslt.XsltComponent.configureXslt(XsltComponent.java:145)
	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:124)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:450)
	... 33 more


I will look in other components to see, how i can lookup beans in registry. 

Thanks for help.

davsclaus:1344983176:2012-08-15T06:26:16.087+0000:1344983176:2012-08-15T06:26:16.087+0000:The # is documented here
http://camel.apache.org/configuring-camel.html

And its a general idiom to refer to beans, such as Alex mention above. How can you configure a non trivial option? You cannot say for example:
{code}
?uriResolver=new MyCustomUriResolver()&bla=123
{code}

The # is similar to the ""ref"" attribute in Spring Bean style configuration
{code:xml}
<bean id=""myXsltEndpoint"" class=""..."">
  <property name=""uriResolver"" ref=""myCustomUriResolver""/>
  ...
{code}
davsclaus:1344983250:2012-08-15T06:27:30.089+0000:1344983250:2012-08-15T06:27:30.089+0000:Does this issue also apply to the 2.9 branch? 
asbestos:1344985245:2012-08-15T07:00:45.803+0000:1344985309:2012-08-15T07:01:49.432+0000:Claus, as i can see from source code, no, it does not.
And thanks for link!

bvahdat:1344995806:2012-08-15T09:56:46.884+0000:1344995806:2012-08-15T09:56:46.884+0000:@Alexander beforehand many thanks for your contribution.

The unit-test you've provided by your patch has got *34* checkstyle errors. Would it be possible for you to fix them and attach a patch for it:

{code}
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:38:1: File contains tab characters (this is the first instance).
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41: member def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:41:30: 'EXPECTED_XML_CONSTANT' entspricht nicht dem Muster '^[a-z][a-zA-Z0-9]*$'.
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:43: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:44: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:45: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:47: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:49: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:50: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:52: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:53: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:54: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:55: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:56: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:57: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:60: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:62: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:64: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:65: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:67: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:68: method def modifier bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:69: method def throws bei Einr?cktiefe 40 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:70: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:73: Kind von method def bei Einr?cktiefe 32 nicht an korrekter Einr?cktiefe 24
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:74: method def rcurly bei Einr?cktiefe 24 nicht an korrekter Einr?cktiefe 20
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:76: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:78: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:79: method def modifier bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:80: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:81: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:82: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:83: Kind von method def bei Einr?cktiefe 16 nicht an korrekter Einr?cktiefe 8
/Users/bvahdat/dev/workspace/camel/camel-core/src/test/java/org/apache/camel/component/xslt/XsltCustomizeURIResolverTest.java:84: method def rcurly bei Einr?cktiefe 8 nicht an korrekter Einr?cktiefe 4
{code}

You could run:

{code}
mvn -Psourcecheck,fastinstall clean install
{code}

to fix them. See also http://camel.apache.org/building.html if you need more details. Thanks!

asbestos:1345001108:2012-08-15T11:25:08.809+0000:1345001108:2012-08-15T11:25:08.809+0000:Sorry for invalid code style. Fixed and patch included. 
hadrian:1345009050:2012-08-15T13:37:30.255+0000:1345009050:2012-08-15T13:37:30.255+0000:@Claus,

This is a discussion we'll have (again) on dev@. But to give you a couple of short answers now:
1. There was absolutely no attention given to non-trivial configuration options 4+ years ago. That slowly slipped into the current situation. No one to blame but ourselves.
2. You yourself give an example in which a '#' is not present (ref=""myCustomUriResolver"")
3. When using the XML dsl, no one would argue about the need to encode to make the xml valid, yet in the URI case some seem to argue that there can be a gray area.
4. The Camel in Action book states that ""In Camel, you configure endpoints using URIs"", which as we now know, is not quite correct. The Camel api uses the term URI all over the place (getEndpointUri()), but that's not a (String representation of a) URI.
5. You seem to imply that the only alternative is to put Java code in the URI, bulking up that ridiculous notion with the fact that the Camel URIs are badly designed, probably in an attempt to dismiss both. 

If you were fair, you would have said that you can do either of:
?uriResolver=org.example.camel.MyCustomUriResolver&bla=123
?uriResolverRef=myCustomUriResolver&bla=123

But as I said, I am waiting for the days when we'll be able to have a decent discussion and solution to fix this mess on dev@. I am patient. That's the last thing I'll say on the topic in this jira.
davsclaus:1345010040:2012-08-15T13:54:00.671+0000:1345010040:2012-08-15T13:54:00.671+0000:Ad 5)
This is not possible. There is no xxxRef option.

For example adjusting the unit test from this ticket
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt://org/apache/camel/component/xslt/include_not_existing_resource.xsl?uriResolverRef=customURIResolver due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{uriResolverRef=customURIResolver}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:148)
{code}
hadrian:1345010634:2012-08-15T14:03:54.006+0000:1345010634:2012-08-15T14:03:54.006+0000:Am I aware that there is no xxxRef option? Yes.
Do I know that if you configure an option that doesn't exist endpoint creation fails? Yes.
Why isn't a xxxRef option there? Because we didn't put it.
Who stops us from putting it there? Nothing.
Would I put it there now? No. Not until we had a real discussion on dev@ and came up with a solution for all Endpoint.

Does it matter how an option is called? Not really. It's just to be descriptive to the user.
Would xxxRef options be a solution? Probably.
Would it be the only solution? No.
Could we use the xxx options without a '#' in the value (and no internal hacks)? Absolutely.

Claus, please stop wasting my time. "
0,CAMEL-5504,Bug,Major,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-14 10:20:02+00:00,2012-08-14 10:46:28+00:00,"Having spaces in the content path in the <from> jetty endpoint that is being bridged causes problem when request is forwarded.



Caused by: org.apache.camel.RuntimeExchangeException: Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI on the exchange: Exchange[Message: [Body is instance of org.apache.camel.StreamCache]]
	at org.apache.camel.component.http.helper.HttpHelper.createURL(HttpHelper.java:195)",
0,CAMEL-5503,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Alan Foster,0,4,2012-08-13 19:03:35+00:00,2013-01-18 15:55:56+00:00,"Currently the bean binding annotations are applied to the body like so :


    public void doSomething(@XPath(""//foo/bar/text()"") String someValue) {
    }


It would be nice if you could specify what you want to apply it to; for instance you could specify to apply it to headers/properties etc


In terms of annotations it may look something like:


    public void doSomething(@XPath(""//foo/bar/text()"", @Header(""someHeader"")) String someValue) {
    }


For backwards compatability it would of course still apply to the body by default, but we can still offer the ability to use it apply it explicitly ie
    @XPath(""//baz/text(), @Body) String someOtherValue


I feel like this would be a useful addition to camel's bean binding.


If anyone feels this is a good idea, I am offering to try it out and see how it goes","davsclaus:1344907734:2012-08-14T09:28:54.204+0000:1344907734:2012-08-14T09:28:54.204+0000:The embedded @Header annotation seems not ideally as its confusing, and people would mistake that for a regular @Header annotation.

Is your use-case to execute a xpath on a header?

Instead maybe we could add an attribute on the annotations to refer to a header instead of using the body as by default

{code}
@XPath(""//baz/text()"", header = ""someHeader"") String someValue
{code}


alanfoster:1344909734:2012-08-14T10:02:14.149+0000:1344909734:2012-08-14T10:02:14.149+0000:@ClausIbsen Thanks for your response

I suggested using @XPath("".."", @Header(""someHeader"")) or @XPath("".."", @Property(""propertyName"")) because of consistency, but I can see how it might actually end up being confusing!

I do like your idea of using header = ""someHeader"". Sadly this won't allow for users to specify if they want the XPath to work on the exchange's Attachments or Properties however! :(

Do you have any thoughts on how to best allow users to specify something like that?

Alan
davsclaus:1344925857:2012-08-14T14:30:57.925+0000:1344925857:2012-08-14T14:30:57.925+0000:We should strive to keep things simple and cover common uses-cases. To execute xpaths on exchange properties and attachments is not common.

Also we should try to keep the annotations simple. The idea of the annotations is to map to the message data, and that is 99,9% the message body and headers. You do not so often have XML in headers, and thus why the @XPath so far covers the message body.

We have to be careful not adding features to Camel, we end up with too much.
alanfoster:1345988415:2012-08-26T21:40:15.983+0000:1345988415:2012-08-26T21:40:15.983+0000:Possible Patch for this
njiang:1346015112:2012-08-27T05:05:12.545+0000:1346015112:2012-08-27T05:05:12.545+0000:Applied patch with thanks to Alan, I also fixed some CS related issues.
davsclaus:1346022366:2012-08-27T07:06:06.113+0000:1346022366:2012-08-27T07:06:06.113+0000:Thanks for the patch. 

1)
I think the attribute should be named to be consistent with our DSL

header -> headerName

eg this is what we use in the DSL
{code:xml}
<xs:complexType name=""setHeaderDefinition"">
<xs:complexContent>
<xs:extension base=""tns:noOutputExpressionNode"">
<xs:sequence/>
<xs:attribute name=""headerName"" type=""xs:string"" use=""required""/>
<xs:anyAttribute namespace=""##other"" processContents=""skip""/>
</xs:extension>
</xs:complexContent>
</xs:complexType>
{code}

2)
Don't we have an @XQuery as well? If so it can also apply on this as well.
Its in camel-saxon component.


njiang:1346023565:2012-08-27T07:26:05.725+0000:1346023565:2012-08-27T07:26:05.725+0000:@Claus， I will take care of these two issue in my next commit shortly.
njiang:1346028533:2012-08-27T08:48:53.005+0000:1346028533:2012-08-27T08:48:53.005+0000:I just committed the patch of rename the ""header"" to ""headerName"", and also added the patch for ""XQuery"".
alanfoster:1346150193:2012-08-28T18:36:33.981+0000:1346150193:2012-08-28T18:36:33.981+0000:Thanks for accepting this patch;

I wonder how I can update the documentation for this change? Does that require an ICLA?

Alan
muellerc:1346152189:2012-08-28T19:09:49.088+0000:1346152189:2012-08-28T19:09:49.088+0000:Yes, you have to submit the ICLA. You can read more about it here: http://camel.apache.org/how-do-i-edit-the-website.html
alanfoster:1346397587:2012-08-31T15:19:47.029+0000:1346397587:2012-08-31T15:19:47.029+0000:Thanks [~muellerc], I have gotten my ICLA Signed and confirmed, and I've posted on the mailing lists too as suggested; http://camel.465427.n5.nabble.com/CLA-Signed-td5718476.html

I just need to wait for some Editing Karma I believe :)

Alan
davsclaus:1348789984:2012-09-28T07:53:04.729+0000:1348789984:2012-09-28T07:53:04.729+0000:Alan, did you update the docs?"
0,CAMEL-5502,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,0,2,2012-08-13 17:03:14+00:00,2012-08-16 01:54:27+00:00,"The SjmsEndpoint fails to remove the endpoint parameters which causes some JMS providers to fail when creating a destination.


See http://camel.465427.n5.nabble.com/SJMS-Issues-tp5716996.html for full details.",njiang:1345053267:2012-08-16T01:54:27.071+0000:1345053267:2012-08-16T01:54:27.071+0000:Applied patch with thanks to Scott.
0,CAMEL-5501,Bug,Minor,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-13 11:07:28+00:00,2012-08-13 16:15:09+00:00,"See CAMEL-3813


Look into the @XPath bean parameter binding and ensure its resources is cleaned up after usage.","davsclaus:1344835638:2012-08-13T13:27:18.944+0000:1344835638:2012-08-13T13:27:18.944+0000:Okay i have reproduce an issue when using ognl expressions on beans that use @XPath annoations
davsclaus:1344838432:2012-08-13T14:13:52.518+0000:1344838432:2012-08-13T14:13:52.518+0000:Its CAMEL-1930 that introduced improved concurrency in xpath builder. I think we can improved that a bit to only use a thread local for the exchange. The variable resolver do not really need to be thread local as well. But just refer to the exchange as it does today. And then we can remove the thread local on each evaluation, instead of keeping it set on the thread.

This should more nicely cleanup the resources in all situations also when using @XPath annotations in ognl method calls and whatnot.
davsclaus:1344845500:2012-08-13T16:11:40.750+0000:1344845500:2012-08-13T16:11:40.750+0000:This also optimized xpath builder under load as there is less thread locals, and no on completion etc. And makes it for better GC as no thread locals is kept for a longer time.
davsclaus:1344845709:2012-08-13T16:15:09.938+0000:1344845709:2012-08-13T16:15:09.938+0000:On a very crude test on my laptop by sending 33333 messages in org.apache.camel.language.XPathRouteConcurrentBigTest, i get the test to go from 90 sec to 60 sec on my laptop. Notice this is a crude test by running it locally 5 times in a row, and taking the avg. time."
0,CAMEL-5500,Bug,Minor,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-08-13 09:03:08+00:00,2012-08-13 09:06:57+00:00,"See nabble


http://camel.465427.n5.nabble.com/Problem-with-testng-CamelSpringTestSupport-several-contexts-runs-simultaneously-tp5716447.html",
0,CAMEL-5499,Bug,Major,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-08-13 02:08:59+00:00,2012-08-13 03:47:27+00:00,"As Camel will unregister the fallback converter if it convert the value to be null, we should avoid unregistering the fallback converter by returning the Void.value.","njiang:1344800847:2012-08-13T03:47:27.711+0000:1344800847:2012-08-13T03:47:27.711+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5498,Sub-task,Major,None,None,"
None
",Closed,Duplicate,2.11.0,Unassigned,Scott England-Sullivan,0,1,2012-08-10 11:34:57+00:00,2012-08-13 15:40:25+00:00,"New Feature:



Batch Transactions



Improvements:



Javadoc updates
Continued refactoring of unnecessary code



Bugs:



Fix getDestinationName() to remove parameters",sully6768:1344843625:2012-08-13T15:40:25.398+0000:1344843625:2012-08-13T15:40:25.398+0000:Issue was created twice
0,CAMEL-5497,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,0,2,2012-08-10 11:34:28+00:00,2012-09-26 18:17:59+00:00,"New Feature:



Batch Transactions","njiang:1346269647:2012-08-30T03:47:27.115+0000:1346269647:2012-08-30T03:47:27.115+0000:Applied patch with thanks to Scott, I also fix some CS issues and clean up the log.debug codes.
sully6768:1348654679:2012-09-26T18:17:59.850+0000:1348654679:2012-09-26T18:17:59.850+0000:Code committed with thanks to Willem."
0,CAMEL-5496,Task,Trivial,None,2.10.1,"

documentation

",Resolved,Fixed,2.10.1,Claus Ibsen,Alan Foster,0,2,2012-08-09 20:22:05+00:00,2012-08-13 11:21:50+00:00,"On the documentation page for file2, the default value for readLockTimeout is '<li></li>'


http://camel.apache.org/file2.html


This may indeed be intentional to notify the user that they should read the description, but it's unclear","davsclaus:1344828104:2012-08-13T11:21:44.569+0000:1344828104:2012-08-13T11:21:44.569+0000:The timeout is 10 sec for files, and 20 sec for ftp. I have updated the docs."
0,CAMEL-5495,Bug,Minor,2.9.2,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Akitoshi Yoshida,0,2,2012-08-09 16:48:26+00:00,2012-08-13 09:31:30+00:00,"I am using file endpoints on Windows without the volume name just like the normal unix based paths look.
That means, I have something like  file:///tmp/file-in and file:///tmp/file-out


The funny thing that I noticed is that each endpoint itself works fine, but when a route is set up from one to the other, it fails because there seems to be an inconsistency in the way the windows path is handled in the camel-core's file component.


As mentioned, each file endpoint itself is working fine. For example, the consumer file endpoint configured in a route
from(""file:///tmp/file-in"").to(""mock:test"")
works fine.


Similarly, the produce file endpoint configured in a route
from(""direct:test"").to(""file:///tmp/file-out"")
works fine.


But when a route is setup to connect these two file endpoints, the producer endpoint fails to create the output file.
Concretely, there is the following code in GenericFileEndpoint.configureMessage that determines the file name.


             String name = file.isAbsolute() ? file.getAbsoluteFilePath() : file.getRelativeFilePath();


            // skip leading endpoint configured directory
            String endpointPath = getConfiguration().getDirectory() + getFileSeparator();


In this particular case, the name variable is set to ""C:\tmp\file-in\sample.xml"" while the endpointPath variable is set to ""\tmp\file-in"".
So, the subsequent code to extract the file name part, shown below, fails to match the path.


            if (ObjectHelper.isNotEmpty(endpointPath) && name.startsWith(endpointPath)) 

{
                name = ObjectHelper.after(name, endpointPath);
            }


As a result, the file name is not extracted as ""sample.xml"" but remain unchanged as ""C:\tmp\file-in\sample.xml"".
Consequently, when the file producer endpoint tries to write this file in the file system, it tries to write a file as ""/tmp/file-out/C:\tmp\file-in\sample.xml"", resulting in an error.


I modified FileComponent and FileEndpoint so that the endpoint path is stored correctly in this case to make the above extraction code find the file name part correctly.


Attached is this proposed patch and a test case which runs on windows and on non-windows but this issue can only be demonstrated under windows.


testRouteToFileOnly and testRouteFromFileOnly work without this patch while testRouteFileToFile fails without this patch on windows.


Thanks for looking into this issue.


Regards, Aki","ay:1344502290:2012-08-09T16:51:30.344+0000:1344502290:2012-08-09T16:51:30.344+0000:patch for trunk

njiang:1344821490:2012-08-13T09:31:30.006+0000:1344821490:2012-08-13T09:31:30.006+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branches with thanks to Aki."
0,CAMEL-5494,Improvement,Major,2.10.0,2.11.0,"

annotations
javaconfig
mocks
spring
test

",Resolved,Fixed,2.11.0,Willem Jiang,Joshua Ecklund,0,2,2012-08-09 15:53:09+00:00,2012-08-30 03:36:01+00:00,"While implementing a Camel route in a new project which uses Spring's JavaConfig I ran into some issues with tests I had written.


Originally I implemented the tests using the old XML-based appContext, then once I had everything working I started converting it all to JavaConfig.  After some research, I found that to do this I had to use



@ContextConfiguration(
        locations = {""blah.EsbConfig"", ... },
        loader = JavaConfigContextLoader.class
)




Which was fine, except it completely broke the functionality of the @MockEndpoints annotation on my tests.  I tried adding a org.apache.camel.impl.InterceptSendToMockEndpointStrategy bean to my JavaConfig context, but that didn't change anything.  To fix it I ended up making a new (Smart)ContextLoader called CamelSpringDelegatingTestContextLoader, which extends Spring's DelegatingSmartContextLoader and is based on CamelSpringTestContextLoader.  It handles both XML and JavaConfig style Spring configuration, and so far seems to have fixed everything.  


You must use CamelSpringJUnit4ClassRunner for this to work, and change @ContextConfiguration's ""locations"" to ""classes"" (and specify them as Class instances). See example below.



@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        classes = {TestCamelSpringDelegatingTestContextLoader.TestConfig.class},
        loader = CamelSpringDelegatingTestContextLoader.class
)
@MockEndpoints
public class TestSomethingWithCamel { ... }","mprowler:1344498838:2012-08-09T15:53:58.580+0000:1344498838:2012-08-09T15:53:58.580+0000:Attached source and test case.
njiang:1346268961:2012-08-30T03:36:01.142+0000:1346268961:2012-08-30T03:36:01.142+0000:Applied the patch into trunk with thanks to Joshua."
0,CAMEL-5493,Bug,Major,2.10.0,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Sergey Zhemzhitsky,0,3,2012-08-08 22:43:26+00:00,2012-09-10 14:52:33+00:00,"Stacktrace:



Caused by: java.lang.ClassCastException: script13444652627211505912543 cannot be cast to groovy.lang.Script
        at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:52)
        at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:80)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverte
rHelper.java:61)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)","szhemzhitsky:1344437062:2012-08-08T22:44:22.745+0000:1344437374:2012-08-08T22:49:34.505+0000:Integration tests to reproduce the issue have been attached.

It seems that the following snippet in the GroovyLanguage causes this issue
{code}
protected Class<Script> parseExpression(String expression) {
    return new GroovyClassLoader().parseClass(expression);
}
{code}

as internally the default constructor of the GroovyClassLoader uses current thread context ClassLoader 
{code}
public GroovyClassLoader() {
    this(Thread.currentThread().getContextClassLoader());
}
{code}

njiang:1344477199:2012-08-09T09:53:19.872+0000:1344477199:2012-08-09T09:53:19.872+0000:I just went through the test cases, found the error is thrown when the consumer bundle is set to be ACTIVATION_LAZY (it is introduced by eclipse).
After digging the error more I found we get workaround it by switching the OSGi platform to equinox. You can do it by adding the below code into Option array.
{code}
editConfigurationFilePut(CustomProperties.KARAF_FRAMEWORK, ""equinox""),
{code}

Willem
szhemzhitsky:1345384169:2012-08-19T21:49:29.926+0000:1345384169:2012-08-19T21:49:29.926+0000:Hi Willem,

Thanks a lot for the workaround!

Seems, that it's a bug in the felix, as the following snippet in the GroovyExpression#evaluate(Exchange, Class)

{code}
System.out.printf(""Script type: %s@%s%n"", scriptType.getName(), System.identityHashCode(scriptType));
Object o = scriptType.newInstance();
System.out.printf(""Script instance: %s@%s%n"", o.getClass().getName(), System.identityHashCode(o));
System.out.printf(""Script instance superclass: %s@%s%n"",
    o.getClass().getSuperclass().getName(), System.identityHashCode(o.getClass().getSuperclass()));
System.out.printf(""Script.class: %s@%s%n"", Script.class.getName(), System.identityHashCode(Script.class));

System.out.printf(""Script.type classloader: %s@%s%n"",
    scriptType.getClassLoader().getClass().getName(), System.identityHashCode(scriptType.getClassLoader()));
System.out.printf(""Script.instance classloader: %s@%s%n"",
    o.getClass().getClassLoader().getClass().getName(), System.identityHashCode(o.getClass().getClassLoader()));
System.out.printf(""Script.class classloader: %s@%s%n"",
    Script.class.getClassLoader().getClass().getName(), System.identityHashCode(Script.class.getClassLoader()));
{code}

outputs the following for the passed test

{code}
Script type: script13454122538541505912543@999191884
Script instance: script13454122538541505912543@681806680
Script instance superclass: groovy.lang.Script@765505133
Script.class: groovy.lang.Script@765505133
Script.type classloader: groovy.lang.GroovyClassLoader$InnerLoader@1915502523
Script.instance classloader: groovy.lang.GroovyClassLoader$InnerLoader@1915502523
{code}

and outputs the following for the failed test

{code}
Script type: script13454122770291505912543@1670892698
Script instance: script13454122770291505912543@1556003292
Script instance superclass: groovy.lang.Script@798159189
Script.class: groovy.lang.Script@1292687619
Script.type classloader: groovy.lang.GroovyClassLoader$InnerLoader@1694302424
Script.instance classloader: groovy.lang.GroovyClassLoader$InnerLoader@1694302424
{code}

Script.class and Script instance superclass must be the same classes, but in the case of lazy bundle activation and felix framework they are different.
njiang:1347259953:2012-09-10T14:52:33.328+0000:1347259953:2012-09-10T14:52:33.328+0000:It's a Felix issue not the issue of camel."
0,CAMEL-5492,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Christian Müller,0,3,2012-08-08 21:32:08+00:00,2012-08-13 09:25:26+00:00,See http://camel.465427.n5.nabble.com/Jetty-consumer-restricting-methods-td5716938.html,"michal.warecki:1344577803:2012-08-10T13:50:03.747+0000:1344577803:2012-08-10T13:50:03.747+0000:I attach draft path for that feature. If it is OK, I will add some comments. Additionally I can create analogous patch for Servlet component.
njiang:1344818450:2012-08-13T08:40:50.908+0000:1344818450:2012-08-13T08:40:50.908+0000:Hi Michal,
I'm working on applying this patch, the patch sounds good and I will try to fix the Servlet issue at the same time.

Cheers,

Willem

njiang:1344820996:2012-08-13T09:23:16.687+0000:1344821126:2012-08-13T09:25:26.132+0000:Applied the patch into trunk with thanks to Michal, I also commit the patch of the camel-servlet and camel-http4."
0,CAMEL-5491,New Feature,Minor,2.10.0,"2.11.0, Future","
None
",Resolved,Not A Problem,"2.11.0, Future",Unassigned,Alan Foster,1,3,2012-08-08 20:29:27+00:00,2012-08-27 13:11:52+00:00,"There isn't a way within velocity to access properties set within the blueprint property-placeholder.


Currently you can only access the exchange's properties according to the documentation at http://camel.apache.org/velocity.html","muellerc:1344434976:2012-08-08T22:09:36.035+0000:1344434976:2012-08-08T22:09:36.035+0000:What's your use case?

I assume the properties are fix. Why do you not inject them into a bean/processor which can set these properties as message headers or exchange properties?
alanfoster:1344436591:2012-08-08T22:36:31.885+0000:1344436591:2012-08-08T22:36:31.885+0000:I rely on properties set in a configuration file for specific information to be used within velocity

Apache Camel's Simple is able to directly access both the properties within an exchange with the notation `${property.keyName}`
It is also able to access the property placeholder information with `${properties:keyName}`

I therefore wondered if a similar method of accessing properties can be added to velocity... As having full access to the property/configuration details within velocity would be a useful thing to have!
davsclaus:1344827702:2012-08-13T11:15:02.446+0000:1344827702:2012-08-13T11:15:02.446+0000:This would apply to the other template components such as freemarker etc. as well.

There is some logic in camel-core that prepares a Map with the data those template engines can access. The trick is that we dont know which properties exists, and thus can get it populated in a map. And thus would need some way of runtime access it as a function of some sort, and thus would rely on the API from those frameworks whether they would support that.

But it would be nice addition.
alanfoster:1344861990:2012-08-13T20:46:30.537+0000:1344861990:2012-08-13T20:46:30.537+0000:@ClausIbsen Thanks for your reply

I poked around and found that it was populating the map with ExchangeHelper.createVariableMap, which called populateVariableMap
  {code}   
  public static void populateVariableMap(Exchange exchange, Map<String, Object> map) {
        map.put(""exchange"", exchange);
        Message in = exchange.getIn();
        map.put(""in"", in);
        map.put(""request"", in);
        map.put(""headers"", in.getHeaders());
        map.put(""body"", in.getBody());
        if (isOutCapable(exchange)) {
            // if we are out capable then set out and response as well
            // however only grab OUT if it exists, otherwise reuse IN
            // this prevents side effects to alter the Exchange if we force creating an OUT message
            Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn();
            map.put(""out"", msg);
            map.put(""response"", msg);
        }
        map.put(""camelContext"", exchange.getContext());
    }
{code}

I was trying to find out where the placeholder's properties were defined as I couldn't find it in the exchange object, for some reason exchange.getContext().getProperties() doesn't actually contain this information (I wonder what properties are returned from getProperties? It was an empty map when I checked)...

Could you suggest where this information may be stored? I'm offering to make a patch for this, but I may need a small bit of help finding out where the property placeholder information could be accessed from :)

Alan
alanfoster:1344864058:2012-08-13T21:20:58.751+0000:1344864058:2012-08-13T21:20:58.751+0000:As an update to this :
I found that the context object has a protected method `getPropertiesComponent()`
I also noticed that the properties component object has the method `parseUri` which loads the required properties and puts all of the required overrides into the loaded properties too. So I can try to access all of the required information from here.

I will try to write a patch for this jira issue and see where I end up :)

Alan
davsclaus:1344904931:2012-08-14T08:42:11.224+0000:1344904931:2012-08-14T08:42:11.224+0000:Yeah notice that properties on Exchange and the properties placeholder is not the same thing.

I assume you want access to the latter from the templates, eg to use values from a .properties file etc.
And for that you need to use the API from CamelContext such as the resolvePropertyPlaceholders method, that is possible the easiest.

You would then need to fund a hook into velocity, so you can call the resolvePropertyPlaceholders with the value, and return the result to velocity.
alanfoster:1346044276:2012-08-27T13:11:16.818+0000:1346044276:2012-08-27T13:11:16.818+0000:I've put this as resolved as you can access the property placeholders values using resolvePropertyPlaceholders as suggested by @cibsen
{code}
${camelContext.resolvePropertyPlaceholders(""..."")}
{code}"
0,CAMEL-5490,Bug,Major,2.10.0,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Suray Philippe,0,3,2012-08-08 07:14:24+00:00,2012-10-24 15:40:50+00:00,"I use a Netty endPoint to forward messages to a client. These messages come from an another Netty endPoint.


After several forwarded messages, an error occurs on every forwarded message:
DEBUG 2012-08-06 15:30:06,482 New I/O  worker #27 org.apache.camel.component.netty.handlers.ClientChannelHandler - Closing channel as an exception was thrown from Netty
java.lang.IllegalStateException: Queue full
        at java.util.AbstractQueue.add(AbstractQueue.java:71)
        at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:209)
        at org.apache.camel.impl.DefaultServicePool.release(DefaultServicePool.java:96)
        at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:304)
        at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:125)
        at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:162)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
        at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:423)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:538)
        at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:437)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
        at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
        at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:91)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:373)
        at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:247)
        at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:662)","philippe.suray:1344381391:2012-08-08T07:16:31.501+0000:1344381391:2012-08-08T07:16:31.501+0000:Here is a small test case.
philippe.suray:1344381415:2012-08-08T07:16:55.900+0000:1344381415:2012-08-08T07:16:55.900+0000:See also http://camel.465427.n5.nabble.com/Error-in-DefaultServicePool-on-Netty-Producer-Queue-is-full-td5716882.html
njiang:1344466059:2012-08-09T06:47:39.631+0000:1344466059:2012-08-09T06:47:39.631+0000:I just played with the test case and found the Exception can be fixed by using the Processor directly instead of create AsyncProcessor.
Please check out the patched NettyTest.java.new
philippe.suray:1344473008:2012-08-09T08:43:28.553+0000:1344473008:2012-08-09T08:43:28.553+0000:Thank you for your response.
In fact in the test case, the second tcp endpoint simulate the tcp listener of one of our client who receive the forwarding messages.
Unfortunately, I have no possible action on this application.
What can I do?

njiang:1344484605:2012-08-09T11:56:45.693+0000:1344484605:2012-08-09T11:56:45.693+0000:Did you run the test directly with the tcp listener of your client?

I think you can add some flue control[1] on your route to work around this kind of issue, if there are so many messages to forward. 

[1]http://camel.apache.org/throttler.html

philippe.suray:1344485319:2012-08-09T12:08:39.774+0000:1344485319:2012-08-09T12:08:39.774+0000:Unfortunately, I cannot run the test against the server of the client.
I will try to add the throttler in the route, I'll keep you informed.
Thank you for your help.
davsclaus:1351064450:2012-10-24T15:40:50.279+0000:1351064450:2012-10-24T15:40:50.279+0000:This has been fixed in camel-netty. We are now using commons-pool to poll Netty Channel's. This is more efficient and dont have any upper limitations."
0,CAMEL-5489,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Sergey Zhemzhitsky,0,2,2012-08-07 22:41:42+00:00,2012-08-08 03:17:11+00:00,"It may be useful to support ant-like path expression when sending exchanges
to multiple direct-vm consumers.



protected RouteBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct:start"")
                .recipientList(new DirectVmConsumerExpression(""direct-vm://parent/**/context*""));
        }
    };
}

private RouteBuilder createRouteBuilderCamelContext2() {
    return new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct-vm:parent/child/context2"")
                .to(""mock:result2"");
        }
    };
}

private RouteBuilder createRouteBuilderCamelContext3() {
    return new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct-vm:parent/child/grandchild/context3"")
                .to(""mock:result3"");
        }
    };
}",njiang:1344367018:2012-08-08T03:16:58.085+0000:1344367018:2012-08-08T03:16:58.085+0000:Applied the patch with thanks to Sergey. 
0,CAMEL-5488,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Christian Ohr,0,2,2012-08-07 19:51:33+00:00,2012-08-17 07:02:27+00:00,"HAPI 2.0 has been recently released. camel-hl7 should depend on this version.


Apart from this update, I made some more improvements:



updated dependency from mina to mina2
inject (custom) Parser instance into unmarshal
ability to parse XML-encoded hl7
added ""Terser"" language and expression to be able to extract fields from a parsed message
added expression to generate acknowledgement messages
added predicate to validate a parsed message against a HAPI ValidationContext
corrected some javadocs","ohr:1344340498:2012-08-07T19:54:58.699+0000:1344340498:2012-08-07T19:54:58.699+0000:I can also help out with the docs, but I currently don't know how to
njiang:1345158147:2012-08-17T07:02:27.022+0000:1345158147:2012-08-17T07:02:27.022+0000:Applied patch with thanks to Christian, I also fix some issue on the HL7 data format which could cause the test failure, updated the karaf feature and made the OSGi integration test passed."
0,CAMEL-5487,Bug,Major,"2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-08-07 00:20:52+00:00,2012-08-08 06:30:34+00:00,"Here is the mail thread about it.
http://camel.465427.n5.nabble.com/HTTP4-HttpProducer-close-temporary-file-in-CachedOutputStream-tp5716885.html","njiang:1344378634:2012-08-08T06:30:34.689+0000:1344378634:2012-08-08T06:30:34.689+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5486,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,0,2,2012-08-06 04:47:22+00:00,2012-08-08 19:14:38+00:00,"Includes:



Fixed OSGi exports for the Connection Resources.
Created a cleaner ConnectionFactoryResource as the default.
Began refactoring JMS APIs to a single package structure.","njiang:1344207005:2012-08-06T06:50:05.840+0000:1344207005:2012-08-06T06:50:05.840+0000:@Scott,
It looks like you are doing lots of refactoring work and I cannot apply your patch by using the patch command.
I tried to move the files by myself, but I cannot find a good way to catch up the patch files.
Can you send me tar of the src directory instead of patch file?
I will try to fill the gap with it.

Willem
sully6768:1344229865:2012-08-06T13:11:05.226+0000:1344229865:2012-08-06T13:11:05.226+0000:Hi Willem,

I am on an engagement this week.  I will take a look at it tonight.  I am sure I was a little aggressive with the refactoring for SVN. :)
njiang:1344317407:2012-08-07T13:30:07.874+0000:1344317407:2012-08-07T13:30:07.874+0000:Committed the patch into the trunk with thanks to Scott.
I also fix some mini CS errors.
sully6768:1344424478:2012-08-08T19:14:38.654+0000:1344424478:2012-08-08T19:14:38.654+0000:Thanks Willem."
0,CAMEL-5485,Bug,Minor,2.10.0,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Babak Vahdat,Babak Vahdat,0,1,2012-08-04 21:12:13+00:00,2012-08-04 21:57:33+00:00,"See http://camel.465427.n5.nabble.com/MyBatis-Component-Bug-consumer-onConsume-hits-error-transactions-are-committed-instead-of-rollback-td5716774.html


Other than DefaultMyBatisProcessingStrategy the same issue exists by MyBatisProducer as well.


Another thing which is currently missing completley is that there's no transaction demarcation by the Producer at all while reading from the database, e.g. by SelectOne or SelectList statement types.",
0,CAMEL-5484,Bug,Major,2.10.0,None,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Henryk Konsek,0,2,2012-08-03 16:12:34+00:00,2012-09-27 10:59:48+00:00,"From Marco's message [1]:


I am migrating my application from Camel 2.8.2 to Camel 2.10.0 and found
following issue:


when normalizing a uri with URISupport.normalizeUri which contains %26 in
one of its parameters the entity is transformed to '&' and essentially lost
from the parameter value; this was not happening with camel 2.8.2.


for instance normalizing following URL:
""ftp://user@host/doveci?password=pass%26""


with camel 2.10.0 the result is following:
""ftp://user@host/doveci?&password=pass""


with camel 2.8.2 the result is following:
""ftp://user@host/doveci?password=pass%26""


it looks like in camel 2.10.0 '%26' is decoded to '&' and moved at the very
beginning of the string (possibly because camel thinks it is a parameter
named null string) resulting in an invalid Uri.


is there any way to workaround/fix this? I can't force all my customers to
avoid using & on their passwords.


[1] http://mail-archives.apache.org/mod_mbox/camel-users/201207.mbox/%3C1343748069925-5716633.post@n5.nabble.com%3E","davsclaus:1348714145:2012-09-27T10:49:05.372+0000:1348714145:2012-09-27T10:49:05.372+0000:This is working as designed. When using %nn you have decimal encoding. So if you have a password with %26 in the password, you would need to encode the % sign, into %25

So it becomes password=pass%2526""


davsclaus:1348714645:2012-09-27T10:57:25.658+0000:1348714645:2012-09-27T10:57:25.658+0000:What could be considered is a a special syntax to denote to use the raw part as is (eg no encoding). For example doing:
{code}
password=#raw##pass%26""##
{code}

The trick is to find unique start and end markers that wont clash with what people would type.
davsclaus:1348714788:2012-09-27T10:59:48.961+0000:1348714788:2012-09-27T10:59:48.961+0000:Or simply with no end token so its simple as, eg with both password and disconnect options. Yet again the trick is the & sign is used as parameter separator. So we may need an end token, in case people have % in passwords. eg if a password is
{code}
pass%26&a=b""
{code}
Then it may appear as 2 options, as we got a=b

{code}
password=#raw#pass%26""&disconnect=true
{code}"
0,CAMEL-5483,Improvement,Blocker,None,None,"
None
",Closed,Won't Fix,None,Willem Jiang,stephen samuel,0,7,2012-08-03 00:56:26+00:00,2013-03-28 09:21:48+00:00,"I have created a component for neo4j. It is a producer only and it allows you to create / remove nodes and relationships.


------ read me ----------


camel-neo4j
========


The camel-neo4j component allows you to treat Neo4j as a camel producer endpoint. This means you can use this component in to() calls but not from() calls. This component is backed by the Spring Data Neo4j Library.



As a producer, can create or remove nodes, and create or remove relationships.
Can support as many endpoints as required, eg for multiple databases across multiple instances.
Headers set for node id (for created nodes), relationship id (for created relationships)



How to Use
==========


You can use neo4j as an endpoint with the following URI.
`neo4j:http://hostname[:port]/database`


Then you need to set a header on each message, one of the following enum types


`	CREATE_NODE,


	REMOVE_NODE,


	CREATE_RELATIONSHIP,


	REMOVE_RELATIONSHIP`


Eg,


`exchange.getIn().setHeader(Neo4jEndpoint.HEADER_OPERATION, Neo4jOperation.CREATE_NODE);`


The body of the message is used to determine the node or relationship to manipulate. The following body types are supported:


For CREATE_NODE:



null body - create default node
Map body - create node with the properties set from the map



For REMOVE_NODE:



Long or Integer - remove node using the body as the id
neo4j Node instance - remove the node specified by that instance



 For CREATE_RELATIONSHIP:



SpringDataRelationship - create relationship specified by any @NodeEntity annoted Spring entities.
BasicRelationship - create relationship specified by the neo4j node types



For REMOVE_RELATIONSHIP:



Long or Integer - remove relationship using the body as the id
SpringDataRelationship - remove relationship specified by the @NodeEntity annoted Spring entities.
BasicRelationship - remove relationship specified by the neo4j node types



Tests
=====


camel-neo4j has a complete set of unit tests. In addition there are some integration tests that require you to run a local instance of neo4j. By default the tests will look at localhost:7474 on http://localhost:7474/db/data/



Initial contribution by Stephen Samuel.","njiang:1344208498:2012-08-06T07:14:58.258+0000:1344225348:2012-08-06T11:55:48.704+0000:Hi Stephen,

First I should say thanks for your donation, and we loves the contributors who make the camel more powerful by adding more and more components.

I just checked the dependency, you are using the spring-data-neo4j-rest module, as it is Apache license, I think we are OK to host it in Apache Camel. I will commit the patch shortly. 

Willem
njiang:1344226086:2012-08-06T12:08:06.517+0000:1344226086:2012-08-06T12:08:06.517+0000:@stephen,
The RestNeo4jProducerCreateRelationshipIntegrationTest failed due to there is no neo4j server running, can you update your code for it?

BTW, as the neo4j is using GPL license, I still not sure if it is OK to host this component in the Apache Camel svn repository. 
It should be OK for us to host it in the camel-extra.

Willem
samspade79:1344228897:2012-08-06T12:54:57.188+0000:1344228897:2012-08-06T12:54:57.188+0000:Hi. We can't run the integration tests without a server. They shouldn't be getting run as part of the unit test process. If you have automated integration tests then I'll need to add in an embedded neo db. I'll look into that and submit another patch.

As for GPL. The neo4j database itself is GPL but you're not distributing the database. You're distributing code that replies on the spring `drivers`, which are licensed under Apache. http://static.springsource.org/spring-data/data-graph/snapshot-site/license.html
I think should be fine otherwise Spring themselves are breaking the license.
muellerc:1344252939:2012-08-06T19:35:39.434+0000:1344252939:2012-08-06T19:35:39.434+0000:The license for org.springframework.data/spring-data-neo4j-rest is ok. We can add this component to our kit (at Apache).
samspade79:1344809023:2012-08-13T06:03:43.908+0000:1344809023:2012-08-13T06:03:43.908+0000:updated patch without int tests that need server.
njiang:1344815292:2012-08-13T07:48:12.625+0000:1344815292:2012-08-13T07:48:12.625+0000:@Stephen
I already add @Ignore annotation on the integration tests which need server, so these test will not be run by default.
If some people wants to run it he could remove the ignore annotation and setup a server for it.
njiang:1344821266:2012-08-13T09:27:46.460+0000:1344821266:2012-08-13T09:27:46.460+0000:@Stephen
Do you mind to add a wiki page of camel-neo4j?
samspade79:1344821531:2012-08-13T09:32:11.574+0000:1344821531:2012-08-13T09:32:11.574+0000:Sure, where do you want it ?
njiang:1344837221:2012-08-13T13:53:41.013+0000:1344837221:2012-08-13T13:53:41.013+0000:@Stephen, you can add an entry in the [component page|http://camel.apache.org/components.html] and take this [page|http://camel.apache.org/cmis.html] as an example.
samspade79:1344895946:2012-08-14T06:12:26.669+0000:1344895946:2012-08-14T06:12:26.669+0000:I signed up for Confluence but don't have privileges to create a new page.
njiang:1344898126:2012-08-14T06:48:46.575+0000:1344898126:2012-08-14T06:48:46.575+0000:@Stephen, 
you can send a mail to the dev with your Confluence id.
I think you will be grant with the right shortly.
davsclaus:1345013840:2012-08-15T14:57:20.925+0000:1345013840:2012-08-15T14:57:20.925+0000:@Stephen

We have instructions how to edit the docs here
http://camel.apache.org/how-do-i-edit-the-website.html

You need a signed ICLA at Apache to be able to edit the docs (eg copyright stuff).
If you have that in place, then let us know your conflucens user id, then we can grant your karma to edit docs.
samspade79:1345620476:2012-08-22T15:27:56.045+0000:1345620476:2012-08-22T15:27:56.045+0000:Dear Stephen Samuel,

This message acknowledges receipt of your ICLA, which has been filed in the Apache Software Foundation records.

If you have been invited as a committer, please advise the project PMC that your ICLA has been filed.

The username I requested was sksamuel (samspade79 on here).
davsclaus:1345676594:2012-08-23T07:03:14.659+0000:1345676594:2012-08-23T07:03:14.659+0000:Stephen, have you created an account on the wiki?

Read this page
http://camel.apache.org/how-do-i-edit-the-website.html
samspade79:1345684973:2012-08-23T09:22:53.613+0000:1345684973:2012-08-23T09:22:53.613+0000:I sure have

Full Name stephen samuel
Email samspade79@gmail.com
davsclaus:1345693251:2012-08-23T11:40:51.435+0000:1345693251:2012-08-23T11:40:51.435+0000:Okay I have granted your account karma to edit the wiki pages.
bvahdat:1345901468:2012-08-25T21:31:08.856+0000:1345937032:2012-08-26T07:23:52.492+0000:Just FYI, for this new component I aligned the POM stuff a bit: http://svn.apache.org/viewvc?view=revision&revision=1377357

And [~samspade79] bunch of thanks for your great contributions :-)
bibryam:1346224400:2012-08-29T15:13:20.572+0000:1346224400:2012-08-29T15:13:20.572+0000:Guys, I have a question: how do you find out whether a/this new component requires some new OSGI bundles or not? 
Shouldn't it also be added to features.xml in platfor/karaf?
Thanks

bvahdat:1346227750:2012-08-29T16:09:10.542+0000:1346227750:2012-08-29T16:09:10.542+0000:Hi [~bibryam],

Just received your question though a JIRA mail notification... I'm definitely the wrong guy to answer about this in detail as I'm a OSGi newbie (no OSGi-food @ breakfast :-)) but let me try and maybe [~njiang] will correct/complement what I say. If the dependencies of a new Camel component are already OSGi complaint then there's no need to ask/order a bundle for it, as an example consider concurrentlinkedhashmap dependency of camel-core itself which is already OSGi ready (look at it's MANIFEST.MF). Otherwise we should ask for a SMX bundle through a JIRA ticket, as an example I did it once: SMX4-1153

And concerning features.xml you asked about... Good question! I just checked how many Camel features are out there which is currently only 121:

{code}
~/dev/workspace/camel/platforms/karaf/features/src/main/resources>grep ""<feature name='camel-"" features.xml | wc
     121     604   11477
{code}

But we've got more than 130 components! So what about the rest? [~njiang] am I wrong here to expect more karaf features?

bvahdat:1346245101:2012-08-29T20:58:21.032+0000:1346245101:2012-08-29T20:58:21.032+0000:Maybe concurrentlinkedhashmap was not a good example as it's shaded into the camel-core jar. But as already said QuickFixJ is such a case which is not OSGi ready out of the box, then as soon as the SMX team provide us a bundle (@ central repo) then we reference that bundle inside the karaf features *instead of* the original jar of the given library. In this case artifactId org.apache.servicemix.bundles.quickfix:

{code}
  <feature name='camel-quickfix' version='${project.version}' resolver='(obr)' start-level='50'>
    <feature version='${project.version}'>camel-core</feature>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.quickfix/${quickfix-bundle-version}</bundle>
    <bundle>mvn:org.apache.camel/camel-quickfix/${project.version}</bundle>
  </feature>
{code}
samspade79:1346673457:2012-09-03T19:57:37.265+0000:1346673457:2012-09-03T19:57:37.265+0000:I've added the documentation for this now. Sorry for the delay.
bibryam:1346803412:2012-09-05T08:03:32.868+0000:1346803412:2012-09-05T08:03:32.868+0000:Thanks Babak. I didn't know that MANIFEST.MF can tell you whether it is OSGI bundled or not. Exactly what I was looking for.
njiang:1346998241:2012-09-07T14:10:41.181+0000:1346998241:2012-09-07T14:10:41.181+0000:@Bilgin
With the help of the [bnd|http://www.aqute.biz/Bnd/Bnd], you can easy tell if the jar is OSGi ready with checking the MANIFEST.MF file yourself.

I will take care of the camel-neo4j feature work.  

davsclaus:1348789900:2012-09-28T07:51:40.223+0000:1348789900:2012-09-28T07:51:40.223+0000:Whats the status of this? If there is some OSGi bundle missing, maybe create a new JIRA ticket for that, as the main work is done.
njiang:1348794597:2012-09-28T09:09:57.389+0000:1348794597:2012-09-28T09:09:57.389+0000:neo4j jars are not osgi ready, but there are some improve work on the github of Neo4j.
I think we can close this issue now, and wait for the new release of Neo4j to provide the camel-neo4j.
hadrian:1364362025:2013-03-27T13:27:05.537+0000:1364362025:2013-03-27T13:27:05.537+0000:I think the license is actually not OK. 
hadrian:1364378547:2013-03-27T18:02:27.167+0000:1364378547:2013-03-27T18:02:27.167+0000:For more details please follow the related thread on the [dev@|http://s.apache.org/camel-5483] list and the issue opened with [legal-discuss@|https://issues.apache.org/jira/browse/LEGAL-162]

Below is the full dependency tree. We obviously have direct dependencies on neo4j, required to build the component.

{code}
[INFO] --- maven-dependency-plugin:2.6:tree (default-cli) @ camel-spring-neo4j ---
[INFO] org.apache.camel:camel-spring-neo4j:bundle:2.11-SNAPSHOT
[INFO] +- org.springframework.data:spring-data-neo4j-rest:jar:2.2.0.RELEASE:compile
[INFO] |  +- org.springframework:spring-tx:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  +- org.springframework:spring-context:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  |  +- org.springframework:spring-expression:jar:3.1.4.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-asm:jar:3.1.4.RELEASE:compile
[INFO] |  +- org.springframework:spring-beans:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  +- org.springframework:spring-aspects:jar:3.1.4.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-context-support:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  +- org.springframework:spring-aop:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  +- org.springframework:spring-core:jar:3.1.4.RELEASE:compile (version managed from 3.1.4.RELEASE)
[INFO] |  +- org.neo4j:neo4j-kernel:jar:1.8.1:compile
[INFO] |  |  \- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile (version managed from 1.1.1)
[INFO] |  +- org.springframework.data:spring-data-neo4j:jar:2.2.0.RELEASE:compile
[INFO] |  |  +- org.aspectj:aspectjrt:jar:1.7.1:compile
[INFO] |  |  \- org.springframework.data:spring-data-commons:jar:1.5.0.RELEASE:compile
[INFO] |  +- org.neo4j:neo4j-rest-graphdb:jar:1.8.1:compile
[INFO] |  |  \- org.neo4j:server-api:jar:1.8.1:compile
[INFO] |  |     +- org.neo4j.3rdparty.javax.ws.rs:jsr311-api:jar:1.1.2.r612:compile
[INFO] |  |     +- commons-configuration:commons-configuration:jar:1.6:compile
[INFO] |  |     |  +- commons-collections:commons-collections:jar:3.2.1:compile (version managed from 3.2.1)
[INFO] |  |     |  +- commons-lang:commons-lang:jar:2.4:compile
[INFO] |  |     |  +- commons-logging:commons-logging:jar:1.1.1:compile (version managed from 1.1.1)
[INFO] |  |     |  \- commons-beanutils:commons-beanutils-core:jar:1.8.0:compile
[INFO] |  |     \- commons-digester:commons-digester:jar:1.8.1:compile
[INFO] |  |        \- commons-beanutils:commons-beanutils:jar:1.8.0:compile
[INFO] |  +- org.codehaus.jackson:jackson-jaxrs:jar:1.9.7:compile
[INFO] |  |  \- org.codehaus.jackson:jackson-core-asl:jar:1.9.7:compile
[INFO] |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.7:compile
[INFO] |  +- com.sun.jersey:jersey-client:jar:1.4:compile
[INFO] |  |  \- com.sun.jersey:jersey-core:jar:1.4:compile
[INFO] |  +- org.neo4j:neo4j:jar:1.8.1:compile
[INFO] |  |  +- org.neo4j:neo4j-lucene-index:jar:1.8.1:compile
[INFO] |  |  |  \- org.apache.lucene:lucene-core:jar:3.5.0:compile
[INFO] |  |  +- org.neo4j:neo4j-graph-algo:jar:1.8.1:compile
[INFO] |  |  +- org.neo4j:neo4j-udc:jar:1.8.1:compile
[INFO] |  |  +- org.neo4j:neo4j-graph-matching:jar:1.8.1:compile
[INFO] |  |  \- org.neo4j:neo4j-jmx:jar:1.8.1:compile
[INFO] |  +- org.neo4j:neo4j-cypher:jar:1.8.1:compile
[INFO] |  |  +- org.scala-lang:scala-library:jar:2.9.1-1:compile
[INFO] |  |  \- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.3.2:compile (version managed from 1.3.1)
[INFO] |  +- org.slf4j:slf4j-api:jar:1.6.6:compile (version managed from 1.7.1)
[INFO] |  \- org.slf4j:jcl-over-slf4j:jar:1.7.1:runtime
[INFO] +- org.apache.camel:camel-core:jar:2.11-SNAPSHOT:compile
[INFO] +- org.apache.mina:mina-core:jar:1.1.7:compile
[INFO] +- org.apache.camel:camel-test-spring:jar:2.11-SNAPSHOT:test
[INFO] |  +- org.apache.camel:camel-test:jar:2.11-SNAPSHOT:test (version managed from 2.11-SNAPSHOT)
[INFO] |  +- org.apache.camel:camel-spring:jar:2.11-SNAPSHOT:test (version managed from 2.11-SNAPSHOT)
[INFO] |  \- org.springframework:spring-test:jar:3.1.4.RELEASE:test (version managed from 3.1.4.RELEASE)
[INFO] +- junit:junit:jar:4.11:test
[INFO] |  \- org.hamcrest:hamcrest-core:jar:1.3:test
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.5:test
[INFO] |  \- log4j:log4j:jar:1.2.17:test (version managed from 1.2.17)
[INFO] +- org.mockito:mockito-all:jar:1.9.5:test
[INFO] \- org.apache.servicemix.specs:org.apache.servicemix.specs.jsr303-api-1.0.0:jar:2.2.0:test
{code}
muellerc:1364432305:2013-03-28T08:58:25.271+0000:1364432305:2013-03-28T08:58:25.271+0000:I removed this component from our Apache Camel SVN. Will add it to Camel Extra in a few minutes/hours.
muellerc:1364433708:2013-03-28T09:21:48.619+0000:1364433708:2013-03-28T09:21:48.619+0000:We cannot host this component at Apache for possible license issues. We decided to move this component to our Camel extra repository."
0,CAMEL-5482,Improvement,Trivial,2.10.0,"2.10.1, 2.11.0","
None
",Closed,Fixed,"2.10.1, 2.11.0",Christian Müller,Claudio Corsi,0,2,2012-08-02 16:46:40+00:00,2012-08-02 22:17:15+00:00,"The camel restlet component makes multiple calls to methods to an objects data.


Replaced those calls with local variables and use those instead.


There was a log entry that was displaying the wrong information and that is fixed with this patch.","ccorsi:1343897279:2012-08-02T16:47:59.207+0000:1343897279:2012-08-02T16:47:59.207+0000:This is the patch that contains the aforementioned changes.
muellerc:1343917035:2012-08-02T22:17:15.531+0000:1343917035:2012-08-02T22:17:15.531+0000:Thanks Claudio for the patch. I applied it into trunk and the camel-2.10.x branch."
0,CAMEL-5481,New Feature,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Benjamin P. O'Day,Benjamin P. O'Day,0,1,2012-08-02 02:18:52+00:00,2012-08-08 03:00:42+00:00,"currently only support adding to the index, need to support the GET/DELETE operations as well",
0,CAMEL-5480,Improvement,Minor,2.9.2,"2.9.4, 2.10.2, 2.11.0","
None
",Resolved,Fixed,"2.9.4, 2.10.2, 2.11.0",Claus Ibsen,Michael Horwitz,0,2,2012-07-31 21:25:59+00:00,2012-08-31 07:09:02+00:00,"To recreate the issue:


1) Configure the Camel context to have autostart=false
2) Create a route that processes the loggin message
3) Refresh the Spring application context
4) Start the Spring application context


The QuickFixj engine will be created and started at step 3 but the route that processes the login message only gets started at step 4. If there are other components in the Spring application context that are slow to initialize then the QuickFixj engines will login before the Camel context (and hence the routes) have been started.


This is an issue for us as we add a username and password to the login message using a Camel route.


Proposed solution:
Have the Dispatcher in the QuickFixjEngine extend ApplicationExtended and disable login until the CamelContext is started.


Patch and test to follow.","davsclaus:1345948247:2012-08-26T10:30:47.972+0000:1345948274:2012-08-26T10:31:14.291+0000:Should use {{org.apache.camel.StartupListener}} instead as its provided by Camel and dont depend on Spring etc.

This is for example how we do with camel-quartz to defer starting the scheduler until Camel is fully started.
davsclaus:1345949401:2012-08-26T10:50:01.464+0000:1345949401:2012-08-26T10:50:01.464+0000:The enginens is now deferred started until CamelContext has been fully started, similar to what we do in camel-quartz.
horwitzm:1346333137:2012-08-30T21:25:37.074+0000:1346333137:2012-08-30T21:25:37.074+0000:I tested this in our environment and found a few issues:

#   Inside the QuickFixJComponent engines are started when creating endpoints if the component is started. This happens before the Camel Context is fully started. Patch is attached.
#   The StartupListener is called twice from inside the DefaultCamelContext when using deferred startup, the first time before the context is properly started. Should this be raised on the dev mailing list?
horwitzm:1346333186:2012-08-30T21:26:26.835+0000:1346333186:2012-08-30T21:26:26.835+0000:Patch to ensure engines are only started when both the Camel context and the QuickFixj component are started.
davsclaus:1346368121:2012-08-31T07:08:41.588+0000:1346368121:2012-08-31T07:08:41.588+0000:Thanks for spotting this.

I adjusted the patch, to check the status on camel context, then there is no need for that boolean flag.

Ad 2)
Yeah if you can provided a little example then raise it on @dev or a new JIRA and we can take a look."
0,CAMEL-5479,Improvement,Major,2.10.0,2.11.0,"

feature
improvement
twitter

",Resolved,Fixed,2.11.0,Willem Jiang,Rafael Cordones,0,2,2012-07-31 11:55:39+00:00,2012-08-08 06:33:38+00:00,"We have a requirement in our application to be able to post to Twitter and associate the unique identifier for the published tweet (tweet id) to our application specific entity.


We are fairly new to Apache Camel and we have not been able to find a way to retrieve the tweet id with the current twitter component implementation (based on Twitter4J). If our current (limited) understanding of Apache Camel is correct, we believe that the way to accomplish this would be by using the InOut message exchange pattern (MEP) on the ""twitter://timeline/user"" endpoint. Nevertheless AFAIK the current endpoint implementation in UserProducer class only supports the InOnly MEP and discards the response object returned by the Twitter API which contains the published tweet id.


Adding InOut MEP support to the UserProducer would allow a very convenient Camel route like this one:



from(""direct:tweets"")
  ...
  .inOut(""twitter://timeline/user"")
  .transform().simple(""The tweet '${body.text}' was published with the tweet id '${body.id}'"")
  ...




The attached patch against the current trunk implements InOut MEP support in the UserProducer class together with two unit tests to exercise the code. We are available to provide patches for other branches and to update the Twitter Camel component documentation.","njiang:1344378805:2012-08-08T06:33:25.958+0000:1344378805:2012-08-08T06:33:25.958+0000:Applied the patch with thanks to Rafael, I also setup the result on the out message after copy the message headers first."
0,CAMEL-5478,Wish,Minor,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Duplicate,"2.10.1, 2.11.0",Claus Ibsen,Ashwin Pejavar,0,2,2012-07-30 22:37:10+00:00,2012-08-16 08:23:25+00:00,"In the 2.10.0 version of the FileChangedExclusiveReadLockStrategy, a read-lock cannot be obtained on a zero length file. There is an explicit check to disallow this.


e.g.
if (newLastModified == lastModified && newLength == length && length != 0) {
// We consider that zero-length files are files in progress
LOG.trace(""Read lock acquired."");


I disagree with the reasoning in the comment. If the size of a file hasn't changed in the poll interval, it should be consumed irrespective of size.","davsclaus:1344826707:2012-08-13T10:58:27.034+0000:1344826707:2012-08-13T10:58:27.034+0000:It doesnt make much sense to consume 0 length files. What is your use-case.
apejavar:1345026744:2012-08-15T18:32:24.126+0000:1345026744:2012-08-15T18:32:24.126+0000:I have a route that is triggered via a cron based policy, and has three distinct scenarios that I need to distinguish between:
1) Producer has updates to submit and generates a non-zero file
2) Producer has no updates to submit and hence generates a zero length file.
3) No file present. This is an exception scenario indicating that the producing system had an error

Basically i'm trying to distinguish between three states:
1) Value present and is non-empty
2) Value present but is null/empty
3) Value not present.

I guess this is analogous to the nillable attribute on xml element definitions that allows a element to have a null value against not being present at all.
davsclaus:1345076589:2012-08-16T08:23:09.550+0000:1345076589:2012-08-16T08:23:09.550+0000:I logged ticket
https://issues.apache.org/jira/browse/CAMEL-5513
davsclaus:1345076605:2012-08-16T08:23:25.731+0000:1345076605:2012-08-16T08:23:25.731+0000:See
https://issues.apache.org/jira/browse/CAMEL-5513"
0,CAMEL-5477,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,stephen samuel,0,5,2012-07-29 19:55:56+00:00,2012-09-07 06:21:54+00:00,Patch for my contribution for camel couchdb component.,"samspade79:1345685195:2012-08-23T09:26:35.363+0000:1345685195:2012-08-23T09:26:35.363+0000:I wondered if there are plans to include this in 2.11 or perhaps 2.12 ?
davsclaus:1345783063:2012-08-24T12:37:43.720+0000:1345783063:2012-08-24T12:37:43.720+0000:Stephen, thanks for your work. 

Is there anything still to be done on your patch? If so it would be nice to know of any work to come.
I am sure the Camel team will get to this, but we are also busy with our day time work and whatnot.

samspade79:1345794108:2012-08-24T15:41:48.382+0000:1345794108:2012-08-24T15:41:48.382+0000:It should be good to go as is.
davsclaus:1345865760:2012-08-25T11:36:00.363+0000:1345865760:2012-08-25T11:36:00.363+0000:Stephen, thanks for your contribution.

The component is now in the source code for inclusion in Camel 2.11.

We would need documentation. Do you mind helping with that?
samspade79:1345867814:2012-08-25T12:10:14.567+0000:1345867814:2012-08-25T12:10:14.567+0000:I'll make a wiki page like for the other components.
samspade79:1345908664:2012-08-25T23:31:04.224+0000:1345908664:2012-08-25T23:31:04.224+0000:Documentation is now here:
https://cwiki.apache.org/confluence/display/CAMEL/CouchDB
I'm not sure how it goes from wiki to being visible on the website.
davsclaus:1345936671:2012-08-26T07:17:51.716+0000:1345936671:2012-08-26T07:17:51.716+0000:Stephen, thanks. The doc get auto updated, it just takes a bit time to sync
http://camel.apache.org/couchdb

Would be nice to tell a bit about the message body restrictions, eg it should be in JSon format.
And possible if any of the headers can be set prior to inserting/updating the doc. 
And any information how a ""document"" is being identified. Or how does it know if its the same doc to be updated, or a new doc to be inserted. Or maybe its just me as a couchdb newbie wouldn't undertand how that it works.
samspade79:1346558535:2012-09-02T12:02:15.190+0000:1346558535:2012-09-02T12:02:15.190+0000:I've updated the documentation to be clearer about how/when the headers are set. And also about the message body formats.
davsclaus:1346970114:2012-09-07T06:21:54.864+0000:1346970114:2012-09-07T06:21:54.864+0000:Thanks for the contribution"
0,CAMEL-5476,Bug,Major,2.10.0,2.10.1,"
None
",Resolved,Cannot Reproduce,2.10.1,Willem Jiang,C G,0,2,2012-07-28 22:02:42+00:00,2012-08-08 06:31:35+00:00,"// BEGIN THIS CODE FAILS
from(""direct:stock-history-data"")
.setHeader( ""downloadUrl"", constant(""http://ichart.finance.yahoo.com/table.csv?s=MSFT&a=00&b=1&c=2005&d=06&e=29&f=2012&g=d&ignore=.csv"")).
.log(LoggingLevel.ERROR, ""got ${in.header.downloadUrl}"")
.setHeader(""CamelHttpUri"", simple(""${in.header.downloadUrl}""))
.setHeader(""User-Agent"", constant(""Mozilla""))
.to(""http://some-invalid-host"");
// END THIS CODE FAILS


// BEGIN THIS CODE WORKS (replace http with ahc:http)
from(""direct:stock-history-data"")
.setHeader( ""downloadUrl"", constant(""http://ichart.finance.yahoo.com/table.csv?s=MSFT&a=00&b=1&c=2005&d=06&e=29&f=2012&g=d&ignore=.csv"")).
.log(LoggingLevel.ERROR, ""got ${in.header.downloadUrl}"")
.setHeader(""CamelHttpUri"", simple(""${in.header.downloadUrl}""))
.setHeader(""User-Agent"", constant(""Mozilla""))
.to(""ahc:http://some-invalid-host"");
// END THIS CODE WORKS


This fails. However, when I replace 


org.apache.camel.component.http.HttpOperationFailedException: HTTP operation failed invoking http://ichart.finance.yahoo.com/table.csv?symbol=MSFT with statusCode: 404
	at org.apache.camel.component.http.HttpProducer.populateHttpOperationFailedException(HttpProducer.java:229)
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:157)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.jetty.CamelContinuationServlet.service(CamelContinuationServlet.java:113)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:547)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1359)
	at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:97)
	at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:44)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1330)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:478)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:941)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:409)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:875)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110)
	at org.eclipse.jetty.server.Server.handle(Server.java:349)
	at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:441)
	at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:919)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:582)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:218)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:51)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:586)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:44)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533)
	at java.lang.Thread.run(Thread.java:662)","njiang:1343697041:2012-07-31T09:10:41.376+0000:1343697041:2012-07-31T09:10:41.376+0000:@C G
I just did a quick test on the camel trunk code with camel-http component, everything looks good.
What's kind of message did you send to the ""direct:stock-history-data"" endpoint."
0,CAMEL-5475,Bug,Major,2.10.0,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Bryan McGuire,0,2,2012-07-28 03:52:58+00:00,2012-08-13 12:26:30+00:00,"Current strategy for finding the private key is to iterate the secret keychain and matching on the configured email address.  This is incorrect; the secret key chain should be searched by the key id found in the public key encrypted message. What happens now is the DSA signing key is matched instead of the ElGamal decryption key, and this throws java.security.InvalidKeyException.","scrybz:1343493630:2012-07-29T00:40:30.362+0000:1343493630:2012-07-29T00:40:30.362+0000:The attached patch fixes the problem.  It passes all existing tests, and also includes tests I've added for ElGamal keys.
scrybz:1343495039:2012-07-29T01:03:59.129+0000:1343495039:2012-07-29T01:03:59.129+0000:This patch is cleaner.
scrybz:1343496878:2012-07-29T01:34:38.923+0000:1343496878:2012-07-29T01:34:38.923+0000:My clean-ups on the previously uploaded patch introduced a possible bug where the encrypted stream wouldn't be rewound after finding the private key, but before the decryption.

This is my final answer. This is diffed against the 2.10.0 version, but these files don't seem to be updated in versions later than 2.10.0. 
njiang:1343695063:2012-07-31T08:37:43.195+0000:1343695063:2012-07-31T08:37:43.195+0000:@Bryan, 
Can you provide a test patch which shows the issue of looking up the ElGamal keys?

scrybz:1343768291:2012-08-01T04:58:11.489+0000:1343768291:2012-08-01T04:58:11.489+0000:@Willem
The RSA keys used for the existing tests just need to be swapped out for ElGamal keys.

delete pubring.gpg and secring.gpg from  components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/

Then with gnupg, regenerate the rings as ElGamal:
gpg --homedir components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/ --gen-key

it will ask questions as gpg is an interactive program:
For type of key
Pick DSA/ElGamal
For bit length, 1024 is fine
Pick 0 to make the key never expire
confirm yes if asked
For Real Name, use ""Super""
For email, use ""sdude@nowhere.net""
For passphrase, use ""sdude""
Confirm with O for Okay

run the unit test and watch for some failures.
apply the patches I submitted to PGPDataFormat and PGPDataFormatUtil and watch all tests pass.

svn revert the keys, and watch it pass again with the old keys."
0,CAMEL-5474,Improvement,Major,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-07-27 09:57:25+00:00,2012-07-27 10:05:20+00:00,"camel-soap introduce soap12.xsd which has the import from the internet, it will cause some trouble when you build the camel-soap offline.",njiang:1343354720:2012-07-27T10:05:20.879+0000:1343354720:2012-07-27T10:05:20.879+0000:Applied the patch into trunk and Camel 2.10.x branch.
0,CAMEL-5473,Bug,Minor,2.10.0,None,"
None
",Closed,Duplicate,"2.10.1, 2.11.0",Christian Müller,Babak Vahdat,0,2,2012-07-26 19:28:26+00:00,2012-09-13 14:24:46+00:00,"If you would try to hot deploy the example as described here:


http://camel.apache.org/cxf-tomcat-example.html


Then it'll blow up with:



org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/camel-example-cxf-tomcat]]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:963)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1600)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.NoClassDefFoundError: org/springframework/web/context/WebApplicationContext
	at java.lang.Class.getDeclaredFields0(Native Method)
	at java.lang.Class.privateGetDeclaredFields(Class.java:2291)
	at java.lang.Class.getDeclaredFields(Class.java:1743)
	at org.apache.catalina.util.Introspection.getDeclaredFields(Introspection.java:87)
	at org.apache.catalina.startup.WebAnnotationSet.loadFieldsAnnotation(WebAnnotationSet.java:261)
	at org.apache.catalina.startup.WebAnnotationSet.loadApplicationServletAnnotations(WebAnnotationSet.java:140)
	at org.apache.catalina.startup.WebAnnotationSet.loadApplicationAnnotations(WebAnnotationSet.java:67)
	at org.apache.catalina.startup.ContextConfig.applicationAnnotationsConfig(ContextConfig.java:382)
	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:858)
	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:346)
	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)
	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5173)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	... 11 more
Caused by: java.lang.ClassNotFoundException: org.springframework.web.context.WebApplicationContext
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1711)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1556)
	... 25 more
26.07.2012 20:54:56 org.apache.catalina.startup.HostConfig deployWAR
SCHWERWIEGEND: Error deploying web application archive /Users/bvahdat/Downloads/apache-tomcat-7.0.29/webapps/camel-example-cxf-tomcat.war
java.lang.IllegalStateException: ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/camel-example-cxf-tomcat]]
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:904)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:963)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1600)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)




The reason is the missing dependency spring-web-3.0.7.RELEASE.jar under the WEB-INF/lib folder inside the WAR.


If you would add the following dependency to pom.xml, rebuild the WAR and deploy it again then it will go well:



<!-- spring -->
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-web</artifactId>
  <version>${spring-version}</version>
</dependency>




Now looking at cataline.out you would see a proper deployment:



2012-07-26 21:09:29,123 [ost-startStop-2] INFO  ContextLoader                  - Root WebApplicationContext: initialization started
2012-07-26 21:09:29,141 [ost-startStop-2] INFO  XmlWebApplicationContext       - Refreshing Root WebApplicationContext: startup date [Thu Jul 26 21:09:29 CEST 2012]; root of context hierarchy
2012-07-26 21:09:29,174 [ost-startStop-2] INFO  XmlBeanDefinitionReader        - Loading XML bean definitions from class path resource [camel-config.xml]
2012-07-26 21:09:29,322 [ost-startStop-2] INFO  XmlBeanDefinitionReader        - Loading XML bean definitions from class path resource [META-INF/cxf/cxf.xml]
2012-07-26 21:09:30,008 [ost-startStop-2] INFO  XmlWebApplicationContext       - Bean 'cxf' of type [class org.apache.cxf.bus.spring.SpringBus] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2012-07-26 21:09:30,015 [ost-startStop-2] INFO  DefaultListableBeanFactory     - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@d16e5d6: defining beans [cxf,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,myRoutes,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy
2012-07-26 21:09:30,189 [ost-startStop-2] INFO  SpringCamelContext             - Apache Camel 2.11-SNAPSHOT (CamelContext: camel-1) is starting
2012-07-26 21:09:30,200 [ost-startStop-2] INFO  ManagementStrategyFactory      - JMX enabled.
2012-07-26 21:09:30,287 [ost-startStop-2] INFO  DefaultTypeConverter           - Loaded 193 type converters
2012-07-26 21:09:30,498 [ost-startStop-2] INFO  BusApplicationContext          - Refreshing org.apache.cxf.bus.spring.BusApplicationContext@5a0d2bee: startup date [Thu Jul 26 21:09:30 CEST 2012]; parent: Root WebApplicationContext
2012-07-26 21:09:30,514 [ost-startStop-2] INFO  DefaultListableBeanFactory     - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@6e00321: defining beans []; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@d16e5d6
2012-07-26 21:09:30,514 [ost-startStop-2] INFO  SpringCamelContext             - No spring-event endpoint enabled to handle event: org.springframework.context.event.ContextRefreshedEvent[source=org.apache.cxf.bus.spring.BusApplicationContext@5a0d2bee: startup date [Thu Jul 26 21:09:30 CEST 2012]; parent: Root WebApplicationContext]
2012-07-26 21:09:30,523 [ost-startStop-2] INFO  ReflectionServiceFactoryBean   - Creating Service {http://incident.cxf.example.camel.apache.org/}IncidentService from class org.apache.camel.example.cxf.incident.IncidentService
2012-07-26 21:09:30,754 [ost-startStop-2] INFO  ServerImpl                     - Setting the server's publish address to be /incident
2012-07-26 21:09:30,846 [ost-startStop-2] INFO  SpringCamelContext             - Route: route1 started and consuming from: Endpoint[cxf:///incident?serviceClass=org.apache.camel.example.cxf.incident.IncidentService]
2012-07-26 21:09:30,848 [ost-startStop-2] INFO  SpringCamelContext             - Route: route2 started and consuming from: Endpoint[direct://reportIncident]
2012-07-26 21:09:30,850 [ost-startStop-2] INFO  SpringCamelContext             - Route: route3 started and consuming from: Endpoint[direct://statusIncident]
2012-07-26 21:09:30,850 [ost-startStop-2] INFO  ultManagementLifecycleStrategy - StatisticsLevel at All so enabling load performance statistics
2012-07-26 21:09:30,855 [ost-startStop-2] INFO  SpringCamelContext             - Total 3 routes, of which 3 is started.
2012-07-26 21:09:30,856 [ost-startStop-2] INFO  SpringCamelContext             - Apache Camel 2.11-SNAPSHOT (CamelContext: camel-1) started in 0.667 seconds
2012-07-26 21:09:30,858 [ost-startStop-2] INFO  ContextLoader                  - Root WebApplicationContext: initialization completed in 1735 ms","bvahdat:1343302481:2012-07-26T19:34:41.449+0000:1343302481:2012-07-26T19:34:41.449+0000:The question is now where this dependency suddenly comes from! As already described adding the spring-web dependency inside the pom would resolve the issue but I prefer first to understand the reason why we suddenly need it on the classpath.

As I'm not much familiar with CXF I didn't assign the ticket to myself, so feel free to pick it up.
bvahdat:1343302629:2012-07-26T19:37:09.518+0000:1343302629:2012-07-26T19:37:09.518+0000:And maybe the example is broken by the previous releases other than 2.10.0 as well (e.g. 2.9.2) which has to be first verified.
muellerc:1343304343:2012-07-26T20:05:43.457+0000:1343304343:2012-07-26T20:05:43.457+0000:Camel 2.9.x dependency tree:
{noformat}
[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ camel-example-cxf-tomcat ---
[INFO] org.apache.camel:camel-example-cxf-tomcat:war:2.9.3-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.9.3-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.9.3-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-context:jar:3.0.7.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-expression:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-asm:jar:3.0.7.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  \- org.springframework:spring-tx:jar:3.0.7.RELEASE:compile
[INFO] +- org.apache.camel:camel-cxf:jar:2.9.3-SNAPSHOT:compile
[INFO] |  +- org.apache.camel:camel-cxf-transport:jar:2.9.3-SNAPSHOT:compile
[INFO] |  +- org.apache.cxf:cxf-rt-frontend-jaxrs:jar:2.5.4:compile
[INFO] |  |  +- org.apache.cxf:cxf-common-utilities:jar:2.5.4:compile
[INFO] |  |  |  \- org.codehaus.woodstox:woodstox-core-asl:jar:4.1.2:runtime
[INFO] |  |  |     \- org.codehaus.woodstox:stax2-api:jar:3.1.1:runtime
[INFO] |  |  +- javax.ws.rs:jsr311-api:jar:1.1.1:compile
[INFO] |  |  \- org.codehaus.jettison:jettison:jar:1.3:compile (version managed from 1.3.1)
[INFO] |  +- org.springframework:spring-core:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.1.1:compile
[INFO] |  +- org.springframework:spring-beans:jar:3.0.7.RELEASE:compile
[INFO] |  +- org.apache.camel:camel-blueprint:jar:2.9.3-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-core-xml:jar:2.9.3-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-core-osgi:jar:2.9.3-SNAPSHOT:compile
[INFO] |  |  \- javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO] |  |     +- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] |  |     \- javax.activation:activation:jar:1.1:compile
[INFO] |  +- org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:compile
[INFO] |  |  +- org.apache.aries:org.apache.aries.util:jar:0.3:compile
[INFO] |  |  +- org.apache.aries.testsupport:org.apache.aries.testsupport.unit:jar:0.3:compile
[INFO] |  |  \- org.apache.aries.proxy:org.apache.aries.proxy.api:jar:0.3:compile
[INFO] |  \- org.apache.cxf:cxf-rt-bindings-soap:jar:2.5.4:compile
[INFO] |     +- org.apache.cxf:cxf-tools-common:jar:2.5.4:compile
[INFO] |     \- org.apache.cxf:cxf-rt-databinding-jaxb:jar:2.5.4:compile
[INFO] +- org.apache.camel:camel-servlet:jar:2.9.3-SNAPSHOT:compile
[INFO] |  \- org.apache.camel:camel-http:jar:2.9.3-SNAPSHOT:compile
[INFO] |     +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |     \- commons-codec:commons-codec:jar:1.4:compile
[INFO] +- org.apache.cxf:cxf-rt-frontend-jaxws:jar:2.5.4:compile
[INFO] |  +- xml-resolver:xml-resolver:jar:1.2:compile
[INFO] |  +- asm:asm:jar:3.3.1:compile
[INFO] |  +- org.apache.cxf:cxf-api:jar:2.5.4:compile
[INFO] |  |  +- org.apache.ws.xmlschema:xmlschema-core:jar:2.0.2:compile
[INFO] |  |  +- org.apache.neethi:neethi:jar:3.0.2:compile
[INFO] |  |  \- wsdl4j:wsdl4j:jar:1.6.2:compile
[INFO] |  +- org.apache.cxf:cxf-rt-core:jar:2.5.4:compile
[INFO] |  |  +- com.sun.xml.bind:jaxb-impl:jar:2.1.13:compile
[INFO] |  |  \- org.apache.geronimo.specs:geronimo-javamail_1.4_spec:jar:1.7.1:compile
[INFO] |  +- org.apache.cxf:cxf-rt-bindings-xml:jar:2.5.4:compile
[INFO] |  +- org.apache.cxf:cxf-rt-frontend-simple:jar:2.5.4:compile
[INFO] |  \- org.apache.cxf:cxf-rt-ws-addr:jar:2.5.4:compile
[INFO] +- org.apache.cxf:cxf-rt-transports-http:jar:2.5.4:compile
[INFO] |  +- org.apache.cxf:cxf-rt-transports-common:jar:2.5.4:compile
[INFO] |  \- org.springframework:spring-web:jar:3.0.7.RELEASE:compile (version managed from 3.0.6.RELEASE)
[INFO] +- log4j:log4j:jar:1.2.16:compile
[INFO] \- org.slf4j:slf4j-log4j12:jar:1.6.1:compile
{noformat}

Camel 2.10.0  dependency tree:
{noformat}
[INFO] --- maven-dependency-plugin:2.4:tree (default-cli) @ camel-example-cxf-tomcat ---
[INFO] org.apache.camel:camel-example-cxf-tomcat:war:2.10.1-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.10.1-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.10.1-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-context:jar:3.0.7.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-expression:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-asm:jar:3.0.7.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  \- org.springframework:spring-tx:jar:3.0.7.RELEASE:compile
[INFO] +- org.apache.camel:camel-cxf:jar:2.10.1-SNAPSHOT:compile
[INFO] |  +- org.apache.camel:camel-cxf-transport:jar:2.10.1-SNAPSHOT:compile
[INFO] |  +- org.apache.cxf:cxf-rt-frontend-jaxrs:jar:2.6.1:compile
[INFO] |  |  \- javax.ws.rs:jsr311-api:jar:1.1.1:compile
[INFO] |  +- org.springframework:spring-core:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.1.1:compile
[INFO] |  +- org.springframework:spring-beans:jar:3.0.7.RELEASE:compile
[INFO] |  +- org.apache.camel:camel-blueprint:jar:2.10.1-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-core-xml:jar:2.10.1-SNAPSHOT:compile
[INFO] |  |  \- org.apache.camel:camel-core-osgi:jar:2.10.1-SNAPSHOT:compile
[INFO] |  +- org.apache.aries.blueprint:org.apache.aries.blueprint:jar:0.3:compile
[INFO] |  |  +- org.apache.aries:org.apache.aries.util:jar:0.3:compile
[INFO] |  |  +- org.apache.aries.testsupport:org.apache.aries.testsupport.unit:jar:0.3:compile
[INFO] |  |  \- org.apache.aries.proxy:org.apache.aries.proxy.api:jar:0.3:compile
[INFO] |  \- org.apache.cxf:cxf-rt-bindings-soap:jar:2.6.1:compile
[INFO] |     \- org.apache.cxf:cxf-rt-databinding-jaxb:jar:2.6.1:compile
[INFO] +- org.apache.camel:camel-servlet:jar:2.10.1-SNAPSHOT:compile
[INFO] |  \- org.apache.camel:camel-http:jar:2.10.1-SNAPSHOT:compile
[INFO] |     +- commons-httpclient:commons-httpclient:jar:3.1:compile
[INFO] |     \- commons-codec:commons-codec:jar:1.6:compile
[INFO] +- org.apache.cxf:cxf-rt-frontend-jaxws:jar:2.6.1:compile
[INFO] |  +- xml-resolver:xml-resolver:jar:1.2:compile
[INFO] |  +- asm:asm:jar:3.3.1:compile
[INFO] |  +- org.apache.cxf:cxf-api:jar:2.6.1:compile
[INFO] |  |  +- org.codehaus.woodstox:woodstox-core-asl:jar:4.1.3:runtime (version managed from 4.1.2)
[INFO] |  |  |  \- org.codehaus.woodstox:stax2-api:jar:3.1.1:runtime
[INFO] |  |  +- org.apache.ws.xmlschema:xmlschema-core:jar:2.0.2:compile
[INFO] |  |  +- org.apache.geronimo.specs:geronimo-javamail_1.4_spec:jar:1.7.1:compile
[INFO] |  |  \- wsdl4j:wsdl4j:jar:1.6.2:compile
[INFO] |  +- org.apache.cxf:cxf-rt-core:jar:2.6.1:compile
[INFO] |  |  \- com.sun.xml.bind:jaxb-impl:jar:2.1.13:compile
[INFO] |  +- org.apache.cxf:cxf-rt-bindings-xml:jar:2.6.1:compile
[INFO] |  +- org.apache.cxf:cxf-rt-frontend-simple:jar:2.6.1:compile
[INFO] |  \- org.apache.cxf:cxf-rt-ws-addr:jar:2.6.1:compile
[INFO] |     \- org.apache.cxf:cxf-rt-ws-policy:jar:2.6.1:compile
[INFO] |        \- org.apache.neethi:neethi:jar:3.0.2:compile
[INFO] +- org.apache.cxf:cxf-rt-transports-http:jar:2.6.1:compile
[INFO] +- log4j:log4j:jar:1.2.17:compile
[INFO] \- org.slf4j:slf4j-log4j12:jar:1.6.6:compile
{noformat}
muellerc:1343379735:2012-07-27T17:02:15.092+0000:1343379735:2012-07-27T17:02:15.092+0000:(didn't had enough time yesterday to explain it...)

Snippet from our web.xml file
{code}
<listener>
  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
{code}

ContextLoaderListener comes with spring-web. In the past, we didn't declare this dependency explicitly (what was wrong IMO) and we leveraged on the CXF dependencies. Now, CXF doesn't depend anymore on spring-web in cxf-rt-transports-http and we failed because of this...
Declaring this direct dependency is the right thing IMO."
0,CAMEL-5472,Bug,Major,2.10.0,"2.10.1, 2.11.0","
None
",Closed,Fixed,"2.10.1, 2.11.0",Christian Müller,Christian Müller,0,1,2012-07-26 19:16:55+00:00,2012-07-26 19:35:27+00:00,No Desc,
0,CAMEL-5471,Bug,Minor,2.9.3,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Christian Müller,Elena Tatarintseva,0,4,2012-07-26 13:57:04+00:00,2012-08-26 10:28:26+00:00,"Install apache-karaf-2.2.8.
Start karaf container


features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.3-SNAPSHOT/xml/features
features:install cxf
features:install camel-cxf
features:install camel-blueprint
features:install camel-stream


Copy to deploy folder camel-example-cxf-blueprint-2.9.2.jar and example.xml.
In SoapUI : http://localhost:8182/cxf/camel-example-cxf-blueprint/webservices/incident


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Header />
<soap:Body>
<ns2:inputReportIncident xmlns:ns2=""http://reportincident.example.camel.apache.org"">
<incidentId>111</incidentId>
<incidentDate>2011-03-05</incidentDate>
<givenName>Christian</givenName>
<familyName>Mueller</familyName>
<summary>Bla</summary>
<details>Bla bla</details>
<email>cmueller@apache.org</email>
<phone>0049 69 1234567</phone>
</ns2:inputReportIncident>
</soap:Body>
</soap:Envelope>


Response is:


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
<soap:Fault>
<faultcode>soap:Server</faultcode>
<faultstring>Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE</faultstring>
</soap:Fault>
</soap:Body>
</soap:Envelope>


And the exception in karaf console.","muellerc:1343381034:2012-07-27T17:23:54.940+0000:1343381034:2012-07-27T17:23:54.940+0000:Apache Camel 2.9.x was tested with Karaf 2.2.5 [1]
Apache Camel 2.9.x doesn't support Windows 7 [2]

Why did you install Camel 2.9.3-SNAPSHOT and use the Camel 2.9.2 example?
Could you try it with Camel 2.9.2 and Java 6 or Camel 2.10.0 and Java 7?

[1] http://camel.apache.org/karaf.html
[2] https://issues.apache.org/jira/browse/CAMEL-4955
etatarintseva:1343604923:2012-07-30T07:35:23.982+0000:1343604923:2012-07-30T07:35:23.982+0000:I search the reason of Talend bug: http://jira.talendforge.org/browse/TESB-6587.
In current version the TESB runtime include Apache Camel 2.9.3-SNAPSHOT and apache-karaf-2.2.8.

I found that this bug can be reproduced not only in our ServiceProxy example, but on Camel example too, if I use <multicast>.
If I don't use <multicast> I have no this exception.

So, if it can not be fixed on Camel side, please just provide information for TESB Runtime team, what kind of versions of Camel and Karaf can be used.
muellerc:1343606066:2012-07-30T07:54:26.718+0000:1343606066:2012-07-30T07:54:26.718+0000:More interesting would be to know whether you can reproduce it with Java 6? Java 7 is not supported for that version.
etatarintseva:1343607824:2012-07-30T08:23:44.419+0000:1343607824:2012-07-30T08:23:44.419+0000:I use:

java version ""1.6.0_20""
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)
etatarintseva:1343706777:2012-07-31T11:52:57.758+0000:1343708813:2012-07-31T12:26:53.472+0000:I tried Camel 2.9.2, Java 6 and karaf 2.2.8. No ""Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE"" exception. 
And Camel 2.10.0, Java 6 and karaf 2.2.8. No ""Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE"" exception too.

So, this exception exists only in Camel 2.9.3-SNAPSHOT version.

muellerc:1343739990:2012-07-31T21:06:30.026+0000:1343739990:2012-07-31T21:06:30.026+0000:Could you check Camel 2.9.3-SNAPSHOT with a newer JDK 6 version. 1.6.0_20 is a bit outdated. The actual version is 1.6.0_33.
I use:
Christian-Muellers-MacBook-Pro:~ cmueller$ java -version
java version ""1.6.0_33""
Java(TM) SE Runtime Environment (build 1.6.0_33-b03-424-11M3720)
Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03-424, mixed mode)
etatarintseva:1343783159:2012-08-01T09:05:59.354+0000:1343783159:2012-08-01T09:05:59.354+0000:The same exception on Camel 2.9.3-SNAPSHOT (and camel-example-cxf-blueprint-2.9.3-SNAPSHOT) with Java 1.6_33:

java version ""1.6.0_33""
Java(TM) SE Runtime Environment (build 1.6.0_33-b05)
Java HotSpot(TM) 64-Bit Server VM (build 20.8-b03, mixed mode)


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <soap:Fault>
         <faultcode>soap:Server</faultcode>
         <faultstring>Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE</faultstring>
      </soap:Fault>
   </soap:Body>
</soap:Envelope>
dkulp:1343797196:2012-08-01T12:59:56.131+0000:1343797196:2012-08-01T12:59:56.131+0000:
One more request:  can you also try with the latest CXF snaphost?  I ran into similar errors two weeks ago with some Camel routes I was working with and ended up fixing a bunch of things in CXF along with some issues in Camel.

etatarintseva:1343803906:2012-08-01T14:51:46.612+0000:1343804483:2012-08-01T15:01:23.389+0000:With 2.7.0.SNAPSHOT the same error: Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE.

   ID   State         Blueprint      Spring    Level  Name
[ 153] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.0.SNAPSHOT)
[ 154] [Active     ] [            ] [       ] [   50] camel-core (2.9.3.SNAPSHOT)
[ 155] [Active     ] [Created     ] [       ] [   50] camel-karaf-commands (2.9.3.SNAPSHOT)
[ 156] [Active     ] [            ] [       ] [   50] camel-spring (2.9.3.SNAPSHOT)
[ 157] [Active     ] [            ] [       ] [   50] camel-cxf-transport (2.9.3.SNAPSHOT)
[ 158] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.9.3.SNAPSHOT)
[ 159] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.9.3.SNAPSHOT)
[ 160] [Active     ] [            ] [       ] [   50] camel-stream (2.9.3.SNAPSHOT)
[ 161] [Active     ] [Created     ] [       ] [   80] camel-example-cxf-blueprint (2.9.3.SNAPSHOT)
[ 162] [Active     ] [Created     ] [       ] [   80] example.xml (0.0.0)

I installed next features:

features:addurl mvn:org.apache.cxf.karaf/apache-cxf/2.7.0-SNAPSHOT/xml/features
features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.3-SNAPSHOT/xml/features
features:install cxf
features:install camel-cxf
features:install camel-blueprint
features:install camel-stream

It is that test which you meant?
muellerc:1343824563:2012-08-01T20:36:03.145+0000:1343824563:2012-08-01T20:36:03.145+0000:I will give it a try...
muellerc:1343827450:2012-08-01T21:24:10.296+0000:1343827450:2012-08-01T21:24:10.296+0000:I build Camel 2.9.3-SNAPSHOT (rev 1366594) on my machine:

{noformat}
Apache Maven 3.0.4 (r1232337; 2012-01-17 09:44:56+0100)
Maven home: /Applications/apache-maven-3.0.4
Java version: 1.6.0_33, vendor: Apple Inc.
Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.8"", arch: ""x86_64"", family: ""mac""
{noformat}

Afterwards I started Karaf 2.2.8 and executed the following commands:
{noformat}
features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9.3-SNAPSHOT/xml/features
features:install cxf
features:install camel-cxf
features:install camel-blueprint
features:install camel-stream
{noformat}

Then I copied camel-example-cxf-blueprint-2.9.3-SNAPSHOT.jar into the Karaf's deploy folder (attached).
Than I stopped and started Karaf (I found some ClassNotFoundExceptions).

I used SOAPUI to send your request to the incident service and got the following result:

{code:xml}
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
   <soap:Body>
      <ns2:outputReportIncident xmlns:ns2=""http://reportincident.example.camel.apache.org"">
         <code>Accepted</code>
      </ns2:outputReportIncident>
   </soap:Body>
</soap:Envelope>
{code}

Looks good to me so far...

Best,
Christian
etatarintseva:1343862363:2012-08-02T07:06:03.105+0000:1343862363:2012-08-02T07:06:03.105+0000:Of course incident service works ok.

The problem is in route with <multicast>. 

Please copy example.xml from attachment of this bug to deploy folder with camel-example-cxf-blueprint-2.9.3-SNAPSHOT.jar 
and from soapUI send request to the route:

http://localhost:8182/cxf/camel-example-cxf-blueprint/webservices/incident

Port 8182.



davsclaus:1344827079:2012-08-13T11:04:39.621+0000:1344827079:2012-08-13T11:04:39.621+0000:When using streaming you need to use stream caching to ensure the stream can be re-read when doing multicast etc.
http://camel.apache.org/stream-caching.html

I guess maybe camel-cxf got some recent optimizations in streaming mode, so its not re-readable out of the box anymore.
dkulp:1344836530:2012-08-13T13:42:10.910+0000:1344836530:2012-08-13T13:42:10.910+0000:
You likely need to add the allowStreaming=false to the cxf component (which will then involve DOM parsing and all the downsides that entails).   I THINK you could also force a conversion of the body to a String or similar prior to the multicast.
etatarintseva:1344901205:2012-08-14T07:40:05.072+0000:1344903866:2012-08-14T08:24:26.766+0000:    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""routerEndpointFrom""/>
            <convertBodyTo type=""java.lang.String"" />
            <multicast>
                <to uri=""log:proxyLog?level=INFO""/>
                <to uri=""routerEndpointTo""/>
            </multicast>
        </route>
    </camelContext>

works ok. Thank you. Will discuss to our team do we need to change codegeneration of our example.


davsclaus:1345948106:2012-08-26T10:28:26.414+0000:1345948106:2012-08-26T10:28:26.414+0000:Working as designed, as would need to cache the stream or read content into memory when doing mutlicasting etc."
0,CAMEL-5470,Bug,Major,2.10.0,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,2,2012-07-26 09:19:43+00:00,2012-08-02 08:15:22+00:00,"I just checked the log and found the gtask doesn't work due to 



Caused by: java.lang.ClassNotFoundException: javax.xml.transform.stax.StAXSource
	at com.google.apphosting.runtime.security.UserClassLoader.loadClass(UserClassLoader.java:451)","njiang:1343270279:2012-07-26T10:37:59.379+0000:1343270279:2012-07-26T10:37:59.379+0000:Just work around this issue by doing the input stream to document transformation without using XmlConvertor.
bvahdat:1343293072:2012-07-26T16:57:52.790+0000:1343293072:2012-07-26T16:57:52.790+0000:Not sure if the removal of the security-constraint inside web.xml was really intentional:

http://svn.apache.org/viewvc/camel/trunk/examples/camel-example-gae/src/main/webapp/WEB-INF/web.xml?r1=1365917&r2=1365916&pathrev=1365917
njiang:1343333640:2012-07-27T04:14:00.732+0000:1343333640:2012-07-27T04:14:00.732+0000:Sorry, it should be committed and I was change the web.xml only for test.
I will commit a quick fix for it shortly.
"
0,CAMEL-5469,Bug,Major,2.10.0,2.11.0,"
None
",Resolved,Cannot Reproduce,2.11.0,Willem Jiang,Dumitru Pascu,0,7,2012-07-26 08:00:24+00:00,2022-09-29 14:49:09+00:00,"The example is based on the camel-example-cxf-tomcat.


Components:
1. Have a CXF rest web service configured in camel-config. 
2. Have a Camel CXF client cxf:rsClient used to call web service from point 1.
3. Have a Camel CXF server cxf:rsServer which acts as a proxy for service from point 1 by passing inbount message towards client from point 2.


Flow:
1. Service 3 receives message
2. Message is passed to component 2 (Camel cxf client)
3. Component 2 invokes service 1
4. Response received is transformed using a custom processor


Problem:


When having multiple requests in parallel, following error appears (CxfRsProducer does not seem to be thread safe):



java.lang.RuntimeException: java.util.ConcurrentModificationException
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWebClient(JAXRSClientFactoryBean.java:217)[cxf-rt-frontend-jaxrs-2.6.1.jar:2.6.1]
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(CxfRsProducer.java:100)[camel-cxf-2.10.0.jar:2.10.0]
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:87)[camel-cxf-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:120)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:292)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:115)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)[camel-core-2.10.0.jar:2.10.0]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.syncInvoke(CxfRsInvoker.java:122)[camel-cxf-2.10.0.jar:2.10.0]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:60)[camel-cxf-2.10.0.jar:2.10.0]
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)[cxf-api-2.6.1.jar:2.6.1]
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:167)[cxf-rt-frontend-jaxrs-2.6.1.jar:2.6.1]
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:94)[cxf-rt-frontend-jaxrs-2.6.1.jar:2.6.1]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)[cxf-api-2.6.1.jar:2.6.1]
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:94)[cxf-api-2.6.1.jar:2.6.1]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)[cxf-api-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:122)[cxf-api-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:211)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:213)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:154)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:129)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:187)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doGet(AbstractHTTPServlet.java:115)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:617)[servlet-api.jar:]
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:166)[cxf-rt-transports-http-2.6.1.jar:2.6.1]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)[catalina.jar:6.0.35]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)[catalina.jar:6.0.35]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)[catalina.jar:6.0.35]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)[catalina.jar:6.0.35]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)[catalina.jar:6.0.35]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)[catalina.jar:6.0.35]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)[catalina.jar:6.0.35]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)[catalina.jar:6.0.35]
	at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:877)[tomcat-coyote.jar:6.0.35]
	at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:594)[tomcat-coyote.jar:6.0.35]
	at org.apache.tomcat.util.net.AprEndpoint$Worker.run(AprEndpoint.java:1675)[tomcat-coyote.jar:6.0.35]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_25]




Whole project is attached, including Jmeter JMX (which is under \camel-example-cxf-tomcat\jmeter\ folder from the zip file).","sergey_beryozkin:1343291925:2012-07-26T16:38:45.685+0000:1343291925:2012-07-26T16:38:45.685+0000:Here is the updated test that has 200 threads hitting this route. Dumitru, I think it's close to your case :-)

Willem, can you give me a favor and try it on your side ? May be I haven't setup something obvious which can lead to reproducing the issue ?




davsclaus:1345949529:2012-08-26T10:52:09.786+0000:1345949529:2012-08-26T10:52:09.786+0000:Willem do you mind looking into this?

REST support is important.
dumi_p:1345980208:2012-08-26T19:23:28.668+0000:1345980208:2012-08-26T19:23:28.668+0000:Willem, FYI I couldn't reproduce the issue with the unit tests provided by Sergey. However, using JMeter and attached configuration you can still reproduce it.
njiang:1348812926:2012-09-28T14:15:26.205+0000:1348812926:2012-09-28T14:15:26.205+0000:Hi, Dumitru
I just take some time to do the test with tomcat 6.0.36 and tomcat 7.0.26 with the camel-example-cxf-tomcat.zip example.
I cannot reproduce the error. I also checked the code of JAXRSClientFactoryBean, I didn't see any thread related issue could cause that kind of exception. Can you try to run the test again with latest JDK 6 ?

Willem

davsclaus:1353628784:2012-11-23T07:59:44.445+0000:1353628784:2012-11-23T07:59:44.445+0000:Closing ticket as cannot reproduce with latest code and no action from reporter.
batwad:1518486312:2018-02-13T09:45:12.791+0000:1518570534:2018-02-14T09:08:54.402+0000:FYI I have encountered this exception in Camel 2.15
{noformat}
java.lang.RuntimeException: java.util.ConcurrentModificationException
        at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWebClient(JAXRSClientFactoryBean.java:233)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(CxfRsProducer.java:164)
        at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:90)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:167)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:304)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:162)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
        at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:201)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
        ... 7 more
Caused by: java.util.ConcurrentModificationException
        at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)
        at java.util.ArrayList$Itr.next(ArrayList.java:859)
        at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.applyFeatures(JAXRSClientFactoryBean.java:408)
        at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.initClient(JAXRSClientFactoryBean.java:372)
        at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWebClient(JAXRSClientFactoryBean.java:225)
        ... 30 more
{noformat}
jpoth:1518573246:2018-02-14T09:54:06.782+0000:1518573246:2018-02-14T09:54:06.782+0000:Hi [~batwad], you may want to try out CAMEL-9628 which is available since 2.17. With the singleton property set to true, Camel will only create one instance of CxfRsProducer and ConcurrentModificationException should be avoided. HTH
Christopher Tent:1664434149:2022-09-29T14:49:09.942+0000:1664434149:2022-09-29T14:49:09.942+0000:I am encountering the same exception with Camel 3.11.0 and Java 11


{code:java}
 o.a.c.c.cxf.jaxrs.CxfRsProducer - Error invoking request
java.lang.RuntimeException: java.util.ConcurrentModificationException
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWebClient(JAXRSClientFactoryBean.java:234)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeAsyncHttpClient(CxfRsProducer.java:141)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:119)
Caused by: java.util.ConcurrentModificationException: null
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.applyFeatures(JAXRSClientFactoryBean.java:409)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.initClient(JAXRSClientFactoryBean.java:377)


java.util.ConcurrentModificationException: null
	at java.base/java.util.ArrayList.forEach(Unknown Source)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.applyFeatures(JAXRSClientFactoryBean.java:409)
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.initClient(JAXRSClientFactoryBean.java:377)
Wrapped by: java.lang.RuntimeException: java.util.ConcurrentModificationException
	at org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean.createWebClient(JAXRSClientFactoryBean.java:234)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeAsyncHttpClient(CxfRsProducer.java:141)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:119)// code placeholder
{code}
Can you have a look into this problem? "
0,CAMEL-5468,Bug,Major,"2.7.5, 2.8.6, 2.9.2, 2.10.0","2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-07-25 13:57:35+00:00,2013-09-10 11:59:38+00:00,"Here is the mail thread[1] of it.


[1]http://camel.465427.n5.nabble.com/ClassCastException-using-cxf-bean-td5599810.html#a5716454","njiang:1343256997:2012-07-26T06:56:37.617+0000:1343256997:2012-07-26T06:56:37.617+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branch."
0,CAMEL-5467,Improvement,Minor,2.10.0,None,"
None
",Closed,Not A Problem,2.11.0,Unassigned,Alan Foster,0,4,2012-07-24 21:33:21+00:00,2012-08-27 16:46:46+00:00,"When deploying a bundle which has multiple contexts with the same id it gives erroneous stack trace messages about, With little indication as to what the actual problem is!


I spoke to hadrian about this issue and he suggested that it was something that would need to be looked at, and that I should raise a ticket for this problem","njiang:1343188963:2012-07-25T12:02:43.080+0000:1343188963:2012-07-25T12:02:43.080+0000:current camel context name is based on bundle id, did you try to specify the context id in you configuration, it may resolve your issue.
hadrian:1343194831:2012-07-25T13:40:31.954+0000:1343194831:2012-07-25T13:40:31.954+0000:@Alan, thanks for reporting this.
@Willem, I think you misunderstood the problem. It is (arguably) a user error. The issue is that Camel silently ignores is and starts misbehaving badly, without giving the user any clue of what the cause may be.
davsclaus:1344828825:2012-08-13T11:33:45.224+0000:1344828825:2012-08-13T11:33:45.224+0000:Alan, can you provide an example of such an use-case, eg from the logs or the likes?"
0,CAMEL-5466,Improvement,Major,2.9.2,None,"
None
",Resolved,Won't Fix,None,Unassigned,Ari Mando,0,5,2012-07-24 19:59:55+00:00,2014-08-23 07:54:01+00:00,"I had the recurring need for a virtual endpoint in camel routes. Often I need to define the same route, but just with different endpoint locations, typically queues.


For example the following simple route will move messages between queues:


    <route>
        <from uri=""virtual://source-queue?real=activemq://@?username=username@amp;password=password""/>
        <to uri=""virtual://destination-queue?real=activemq://@?username=username@amp;password=password""/>
    </route>


Then in a virtual.properties file you would list the substitution template values:


*source-queue,destination-queue
queue1-in,queue1-out
queue2-in,queue2-out
queue3-in,queue3-out


The above properties file would be like adding 3 routes, the first being like:


 <route>
        <from uri=""virtual://source-queue?real=activemq://queue1-in?username=username@amp;password=password""/>
        <to uri=""virtual://destination-queue?real=activemq2://queue1-out?username=username@amp;password=password""/>
    </route>


The supplied impl is a bit rough, it needs some more work. The first cut was sufficient for the usecase I needed it for.


I already thought it should be really like:


<virtual id=""test"" uri=""file://queues.xml"">
    <route>
        <from uri=""virtual://source-queue?real=amq://@?""/>
        <to uri=""virtual://destination-queue?real=amq2://@?""/>
    </route>
</virtual>


then an xml file:


<endpointValues>
    <header>
        <value>source-queue</value>
        <value>destination-queue</value>
    </headers>
    <entry>
        <value>queue1,queue4</value>
        <value>queue5,queue6</value>
    </entry>
</endpointValues> 


Using the DSL would allow multiple virtual routes with different config being pulled from other camel endpoints. 


Dynamic routing! Call it virtual routing or template routing.


Tasks to be finished on it:



implement threading (concurrentConsumers) and other scaling concerns
move to high level dsl model
unit tests
source configuration from enrichment uri call
more robust error handling
handling of ScheduledConsumers,async etc
expression (regex style) uri templating (current only @ value substituion)","arimando:1343131449:2012-07-24T20:04:09.171+0000:1343131449:2012-07-24T20:04:09.171+0000:the camel-virtual component
hadrian:1343214358:2012-07-25T19:05:58.319+0000:1343214358:2012-07-25T19:05:58.319+0000:How is that different than something like below?

Note that it's simpler, more concise, the template is configurable, the number of uri(s) to use is also flexible. I supplied a whole unit test for you to try out. In a real project you want to move the TempleateRouteBuilder in a separate file. (I can think of ways of making this even more flexible, powerful and 'functionaly' by defining an interface that supplies the templates, etc).

I hope I didn't miss something in the scenario you described. I will close this issue in a few days as ""won't fix"" unless you come up with a convincing argument that your solution is more appealing.

{code}
import org.apache.camel.RuntimeCamelException;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class TemplateRouteBuilderTest extends CamelTestSupport {

  @Test
  public void testHelloWorldValidInput() throws Exception {
    ((MockEndpoint)getMandatoryEndpoint(""mock:one"")).expectedMessageCount(1);
    ((MockEndpoint)getMandatoryEndpoint(""mock:two"")).expectedMessageCount(1);
    	
    template.sendBody(""direct:one"", ""Hello World"");
    template.sendBody(""direct:two"", ""Bonjour Monde"");
        
    assertMockEndpointsSatisfied();
  }

  @Override
  protected RouteBuilder createRouteBuilder() throws Exception {
    String[][] uris = {{""direct:one"", ""mock:one""}, {""direct:two"", ""mock:two""}};
    return new TemplateRouteBuilder(uris) {
      public void configureRouteTemplate(String[] uris) {
        if (uris.length != 2) {
          throw new RuntimeCamelException(""Invalid number of endpoints..."");
        }
        from(uris[0]).to(uris[1]);
      }
    };
  }
    
  public abstract class TemplateRouteBuilder extends RouteBuilder {
    private final String[][] config;

    public TemplateRouteBuilder(String[][] config) {
      this.config = config;
    }

    @Override
    public void configure() throws Exception {
      if (config != null) {
        for (String[] values : config) {
	  configureRouteTemplate(values);
        }
      }
    }
    	
    public abstract void configureRouteTemplate(String[] uris);
  }
}
{code}
muellerc:1343225819:2012-07-25T22:16:59.627+0000:1343225819:2012-07-25T22:16:59.627+0000:This was my first thought too.

The answer: Try this with the Spring XML DSL... ;-)

However, I don't really see a big benefit (maybe because I prefer the Java DSL)...
arimando:1343257041:2012-07-26T06:57:21.483+0000:1343257041:2012-07-26T06:57:21.483+0000:Yes, several large customers I have consulted for have insisted on XML routes, not necessarily ideal, but their teams implementing these routes have very little Java experience, think middleware admin teams, they're not developers. Fuse IDE doesn't support java routes, blar blar blar. :)

Additionally, your solution doesn't necessarily address internalization of redundant information (most of the URI for example) and externalization of configurable endpoint data (ie 100's of queuenames) in it's current form. Obviously, your snippet could me made to have these features. But your solution is neat and I think I'll use that for Java solutions too in the future. But I still see a functional difference. No big deal.  

I've just worked on a new system which would theoretically require 1000's of xml routes very soon, identical except the consumer queue name. Consider having to turn on a new store queue for corporate chain that has 1000's of stores. How does that work in your approach? You could implement externalized values in your java solution (from a properties file) but you have to list the full URI for each route? When I've done this approach in the past I've always had property files with lots of url's which have a lot of identical endpoint configuration information, maintenance nightmare.

In the current demo code you can turn on a jms consumer route by just updating a properties file, it currently requires a route restart. Easy for admins. If source list could be sourced from another camel endpoint, even better. I'm planning to update the virtual component to dynamically reconfigure it's template source, hopefully I get some time soon and look at extending the XML DSL as I described originally. 

I debated in my head whether this was virtual routing or template route, names, names names. But thinking this through just now I've realized the approach I've demonstrated uses a XML virtual notation around the route, but a templating mechanism to the endpoint URI's. 


hadrian:1343285240:2012-07-26T14:47:20.100+0000:1343285240:2012-07-26T14:47:20.100+0000:That's because it took me all of 5 mins to write that :). I mentioned I see many ways to improve it. One I didn't mention is to use pass an Expression to the constructor of the TemplateRouteBuilder. That alone would address both your issues. 

My code has another limitation: it only supports one template. One simple improvement is support multiple templates (identified by a String). You can make a convention then that the first String in the array is the template id. There are other solutions, this is a simple one, probably the one I would go with. There's also the possibility of leaving one template per TemplateRouteBuilder and have TemplateBuilderCollection (or something). More than one way to skin a camel.

You can have support for xml dsl as well. You'd only need to define your own namespace and reuse the camel xsd types. Implement a namespace handler for your namespace and use it to configure your templates. Something like: 

{code}
<yourns:templates>
  <yourns:template>
    <camel:route ... />
  </yourns:template>
</yourns:templates>
{code}

Your solution would require a lot more work to become viable. It only supports polling consumers for once, but just by looking at the code, there are scenarios already supported by Camel that I don't think would work. Not that it can't be fixed, but it'll require work. As I said, not my approach to solving the problem you described.

arimando:1343303130:2012-07-26T19:45:30.993+0000:1343303130:2012-07-26T19:45:30.993+0000:I'll look into the namespace handler. Thanks.

Yes, I should have added the different event handling support to the TODO above. I need to think more about this and look into the camel code a bit more. Using just the endpoint api, I couldn't create routes on the fly, hence the polling consumer approach.

I'll keep hacking away at in in my toolbox when customer needs dictate.

Am I missing something in your approach, how would I do this then in the XML DSL using your approach?

I think virtual routing is a known limitation of Camel when you start to deploy large scale systems. Out of curiosity have you seen camel ever been deployed with 1000's of routes (and/or routes files)? I think this would have FD and thread overkill problems. Everything repeats itself :)


hadrian:1343303932:2012-07-26T19:58:52.661+0000:1343303982:2012-07-26T19:59:42.538+0000:Actually you can deploy new routes at runtime from anywhere you have access to the CamelContext. If you have trouble with the xml dsl let us know, but it's pretty straightforward.

And yes, real applications have all sorts of needs, so seeing uncommon scenarios is not that, uhm, uncommon. One of the downsides of Camel (imho) is that being so flexible, it allows for various solutions, all with their pros and cons, sometimes making things quite confusing.

I did not see myself systems with 1000's of routes in the same context, but I've seen apps with routes hitting 1000's of Endpoints. We are working on improving the threading model too.
arimando:1343314830:2012-07-26T23:00:30.788+0000:1343314830:2012-07-26T23:00:30.788+0000:Will do. Yes I agree with your points.

I was thinking about the java side also just now, to your original point. I used the virtual component in a message migration tool recently, boot strapped from java as an executable jar. The main line was very short, including:

context.addRoutes(new RouteBuilder() {
			    public void configure() {
			    	from(""virtual://source-queue?real=activemqold://@"")
					.to(""virtual://destination-queue?real=activemqnew://@"");
			    }
			});

I think that reads more simpler and more concise then your looped routerbuilder approach, the component handles the externalization, it's deadly simple. The program is one java file and needs a only a property file with queuenames (actually another app property file too). In your java approach you would need to have several classes and you still have to build in the external config mechanism into your app code.  
mattrpav:1343643933:2012-07-30T18:25:33.638+0000:1343643933:2012-07-30T18:25:33.638+0000:Hi-

I see more customers finding the XML-based route as their preference for a number of reasons. I'm seeing clients heading there, because it is easier to manage, and you can have processes that output a XML-based route right into a deploy folder. That is a lot easier to manage than writing out some Java, compile+deploy. I'm also hearing the ""Fuse IDE"" as a reason to go XML-based.

I can see this being very useful in two scenarios:

1. Similar to Ari's, where we have 1,000's of queues doing simple q->q processing and message volume isn't a huge issue.

2. ActiveMQ migrations, where you need to drain all the queues in one system and move it into the new one.

My concern with #1 would be how to handle latency from looping over 1,000's of endpoints. I see the receive timeout of 100ms, and that would be pretty slow to complete for a couple thousand queues. Is there a way to leverage already existing Camel thread pools to split up some of this work?  Perhaps, have 4-10 core threads that split up the 1,000 as equally as possible to lower the latency a bit?

Very interesting component, thanks Ari!


davsclaus:1344810704:2012-08-13T06:31:44.798+0000:1344810704:2012-08-13T06:31:44.798+0000:ActiveMQ supports wildcards, so you could essentially maybe consume from ""queue*"" and then use the recipient list EIP to compute the corresponding output queue. There is a header in the JMS that has the actual destination name the message was consumed from.
"
0,CAMEL-5465,Bug,Major,"2.8.6, 2.9.2","2.9.3, 2.10.0","
None
",Resolved,Duplicate,"2.9.3, 2.10.0",Raúl Kripalani,Raúl Kripalani,0,1,2012-07-24 17:00:30+00:00,2012-08-09 16:10:12+00:00,"When handling synchronous invocations, both JMS reply managers TemporaryQueueReplyManager and PersistentQueueReplyManager remove the correlation too late.


ReplyManager.handleReplyMessage handles the reply triggering the continuation of the remaining route logic, which may as well contain yet another JMS invocation to exactly the same destination, e.g.:



<route>
  <from uri=""direct:hello"" />
  <inOut uri=""activemq:queue:test"" />
  <inOut uri=""activemq:queue:test"" />
</route>




As a result, the correlation is not removed from the CorrelationMap until the asynchronous dispatch to the second endpoint has finished and the stack unwinds.


What's worse is that, due to Camel's re-use of endpoints, both producers are represented as exactly the same Endpoint instance, sharing the same ReplyManager and CorrelationMap.


So during the dispatch to the second endpoint, the correlation is overwritten in the CorrelationMap but, immediately after, the first endpoint removes the correlation anyway!


Since correlation ID are dragged on (see CAMEL-5390), the route will fail, providing a bad out-of-box experience for such a simple use case.","raulvk:1344499730:2012-08-09T16:08:50.498+0000:1344499730:2012-08-09T16:08:50.498+0000:Was able to trace this back to CAMEL-5309. I was unable to reproduce in latest versions (trunk, 2.10 and 2.9.3), but the problem is still present in branch 2.8.x. The fix in CAMEL-5309 creates one Reply Manager per JMS producer, whereas previously there was only one reply manager shared across all producers with the same endpoint definition (the reply manager was scoped to the endpoint). That was indeed the root cause of the issue.

Since there will be no more 2.8.x releases, there's no point retrofitting for 2.8.x."
0,CAMEL-5464,Bug,Major,"2.8.6, 2.9.2, 2.10.0","2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Raúl Kripalani,0,4,2012-07-24 13:01:06+00:00,2012-11-07 10:30:32+00:00,"In a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present), the endpoint will not send back replies.


This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer => processor, and Camel doesn't find the need to ""weave in"" an implicit Pipeline processor, no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn't expect them too).


As a result, these routes DON'T WORK...



<route>
   <from uri=""timer:foo?fixedRate=true&amp;period=10000"" />
   <setBody><constant>Hello Raul</constant></setBody>
   <to uri=""log:SendingRequest?showAll=true"" />
   <inOut uri=""activemq:queue:test1?requestTimeout=1000"" />
   <to uri=""log:ReceivedReply?showAll=true"" />
</route>
        
<route>
   <from uri=""activemq:queue:test1"" />
   <to uri=""log:ReceivedRequest?showAll=true"" />
</route>




... but just by adding an additional log endpoint to the second route (or any other thing, for that matter), it starts to work because Camel weaves in the Pipeline processor.


Other workarounds that work:



explicitly wrapping the log endpoint in a <pipeline> DSL
<setBody><simple>${in.body}</simple></setBody>



Or simply introducing anything that will force Camel to insert a Pipeline processor.


IMHO, there are two solutions to avoid this issue:



Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions)
Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply exists



I'm happy to work on a patch for Camel 2.10.1.


EDIT: Just wrapping the single endpoint in <pipeline /> doesn't function as a workaround.","davsclaus:1344828670:2012-08-13T11:31:10.556+0000:1344828670:2012-08-13T11:31:10.556+0000:Yes #2 should be the case, as that is how the other components would have to do, eg cxf consumer etc.


jwcarman:1346091670:2012-08-28T02:21:10.309+0000:1346091670:2012-08-28T02:21:10.309+0000:Here's a patch that implements option #2.  Let me know if you see any regressions.  I can't get the full Maven build working on my computer right now.
njiang:1346370978:2012-08-31T07:56:18.709+0000:1346370978:2012-08-31T07:56:18.709+0000:The patch broke some tests of the camel-jms. After digging the tests, I found the tests keep the out message null to no send the response back. It can be fixed easily by changing the MEP to InOnly.
As this feature break the backward compatibility, I don't plan to merge the patch back to other branch. 
njiang:1346372842:2012-08-31T08:27:22.197+0000:1346372842:2012-08-31T08:27:22.197+0000:Applied patch with thanks to James.
jwcarman:1346391648:2012-08-31T13:40:48.292+0000:1346401840:2012-08-31T16:30:40.696+0000:Okay, cool!  Sorry about the regression.  I was (and still am) having a terrible time getting the build to run locally on my machine.  I'll keep tinkering.  This is my first Mac laptop, so getting used to Java development on here is somewhat of a chore.  Perhaps I'll just switch to a VM or something

Are we going to update the fix versions/status?
njiang:1347258041:2012-09-10T14:20:41.924+0000:1347258041:2012-09-10T14:20:41.924+0000:Applied the patch into trunk, as it breaks the behavior of old Camel version, I don't want to port it back to other branches.
davsclaus:1352252403:2012-11-07T09:40:03.280+0000:1352252403:2012-11-07T09:40:03.280+0000:I think this fix is more important, than those odd unit-tests that was needed to change.

If you do request/reply over JMS, then you would expect Camel to send back the reply always - also if the route, only do a single step like
from JMS
  to bean

So I am working on backporting this to older branches.
davsclaus:1352255432:2012-11-07T10:30:32.792+0000:1352255432:2012-11-07T10:30:32.792+0000:Backported to 2.10 and 2.9 branches."
0,CAMEL-5432,Bug,Major,2.10.0,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Babak Vahdat,Hartmut Lang,0,2,2012-07-09 08:05:20+00:00,2012-07-09 16:12:27+00:00,"Dynamically removing and adding a SEDA-route creates a not working route in Camel 2.10.0.
It is working in 2.9.2.


Test-Code:



public class DynamicRouteTest extends CamelTestSupport {

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""seda:in"").id(""sedaToMock"").to(""mock:out"");
            }
        };
    }
    
    @Test
    public void testDynamicRoute() throws Exception {
        MockEndpoint out = getMockEndpoint(""mock:out"");
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
        CamelContext camelContext = out.getCamelContext();
        camelContext.stopRoute(""sedaToMock"");
        camelContext.removeRoute(""sedaToMock"");
        
        camelContext.addRoutes(createRouteBuilder());
        out.reset();
        out.expectedMessageCount(1);
        
        template.sendBody(""seda:in"", ""Test Message"");
        
        out.assertIsSatisfied();
        
    }
}","bvahdat:1341810973:2012-07-09T13:16:13.612+0000:1341810973:2012-07-09T13:16:13.612+0000:CAMEL-5261 has broken the regression.
bvahdat:1341821547:2012-07-09T16:12:27.942+0000:1341821547:2012-07-09T16:12:27.942+0000:Thanks for reporting and providing the unit-test."
0,CAMEL-5431,Improvement,Minor,None,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Brett E. Meyer,0,2,2012-07-08 17:25:57+00:00,2012-07-09 14:57:57+00:00,"Implement support for Twitter ""Trends"" API
Improved inheritance and reduced duplication
Minor refactoring
Improved code coverage
Improved Javadoc comments","3riverdev:1341739616:2012-07-08T17:26:56.595+0000:1341739616:2012-07-08T17:26:56.595+0000:Patched
davsclaus:1341816051:2012-07-09T14:40:51.522+0000:1341816051:2012-07-09T14:40:51.522+0000:Thanks Brett

You may want to make sure checkstyle is valid for your patches. See here how to run a checkstyle check
http://camel.apache.org/building.html
davsclaus:1341817077:2012-07-09T14:57:57.616+0000:1341817077:2012-07-09T14:57:57.616+0000:I fixed the checkstyle for your patch. Thanks."
0,CAMEL-5430,Improvement,Minor,None,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Claus Ibsen,Brett E. Meyer,0,3,2012-07-07 18:53:18+00:00,2012-07-09 14:36:14+00:00,"Connects to the Twitter REST API are handled by Twitter4J objects.  These objects should be singletons within this component, created on-demand as needed.  While working with the component, I noticed some old code that, as an example, needlessly initialized a connection to the main API when only the Streaming API was needed.","3riverdev:1341658436:2012-07-07T18:53:56.059+0000:1341658436:2012-07-07T18:53:56.059+0000:Patch
davsclaus:1341702444:2012-07-08T07:07:24.915+0000:1341702444:2012-07-08T07:07:24.915+0000:Thanks for the patch.
muellerc:1341712905:2012-07-08T10:01:45.685+0000:1341712905:2012-07-08T10:01:45.685+0000:ATM, this issue is fixed for Camel 2.11.0 (and not for Camel 2.10.1 as the issue stated). We need a new release branch camel-2.10.x...
davsclaus:1341815774:2012-07-09T14:36:14.709+0000:1341815774:2012-07-09T14:36:14.709+0000:Willem have setup the 2.10 patch branch and this commit is included there."
0,CAMEL-5429,Bug,Minor,2.9.0,"2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,BJ Peter DeLaCruz,0,2,2012-07-07 00:36:20+00:00,2012-07-08 08:49:36+00:00,"I set ""jmsMessageType=Object"", and when I try to send a null in the body, I get an exception. See program and log.","bjpeter:1341592644:2012-07-07T00:37:24.662+0000:1341592644:2012-07-07T00:37:24.662+0000:Test program.
davsclaus:1341622197:2012-07-07T08:49:57.399+0000:1341622197:2012-07-07T08:49:57.399+0000:Whats your use-case for sending JMS messages without any body?
bjpeter:1341625820:2012-07-07T09:50:20.005+0000:1341626011:2012-07-07T09:53:31.191+0000:Before I used ""jmsMessageType=Object"", the application was sending null in a message, and it worked. However, I ran into a problem when I was trying to send a map of non-primitive, serialized objects. (See CAMEL-5293.) Using ""jmsMessageType=Object"" solved CAMEL-5293, but now I can no longer send null in a message as an exception will be thrown.
davsclaus:1341703996:2012-07-08T07:33:16.593+0000:1341703996:2012-07-08T07:33:16.593+0000:This is by design. 

We will add a new option {{allowNullBody}} you can configure to true, as in your use-case to allow sending messages with no message body.
davsclaus:1341704523:2012-07-08T07:42:03.360+0000:1341704523:2012-07-08T07:42:03.360+0000:And yes as we by default allow null bodies in the other message types, we should do that as well for Object message types. So I will fix that as well."
0,CAMEL-5428,Task,Trivial,2.10.0,2.10.1,"
None
",Resolved,Fixed,2.10.1,Claus Ibsen,Paul D Johe,0,2,2012-07-06 17:06:54+00:00,2012-07-07 08:47:13+00:00,"The seda endpoint website documentation has both size and queueSize.  At least in Camel 2.10.0, this parameter does not exist and appears to be called only size.  The documentation on the web site should be updated.","pdjohe:1341567344:2012-07-06T17:35:44.439+0000:1341567344:2012-07-06T17:35:44.439+0000:It appears that the SedaComponent has the queueSize, but I don't think it is used in the SedaComponent#createEndpoint(...) method.
davsclaus:1341622033:2012-07-07T08:47:13.526+0000:1341622033:2012-07-07T08:47:13.526+0000:I updated the doc"
0,CAMEL-5427,New Feature,Major,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Guillaume Nodet,0,1,2012-07-06 14:37:38+00:00,2022-09-02 08:38:27+00:00,"The camel-hdfs component has some nice strategies for aggregating data into files directly on the file system (avoiding to keep data in memory).  Such strategies could be rewritten to be more generic and reusable, allowing them to be used in file based components (file, ftp and others).
This would also allow the camel-hdfs to handle simple file transfers (such as those supported by file and ftp), which is not really the case atm.",
0,CAMEL-5426,Bug,Major,2.10.0,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Hadrian Zbarcea,Christian Schneider,0,2,2012-07-06 12:36:55+00:00,2012-11-23 08:49:10+00:00,"features:chooseurl camel 2.10.0
features:install camel-blueprint camel-stream


Deploy the following file into the deploy folder
https://github.com/cschneider/Karaf-Tutorial/blob/master/camel/simple-blueprint/simple-camel-blueprint.xml
Undeploy the file again


Now the karaf shell hangs


@Hadrian
I think this may be caused by as the issue does not happen with camel 2.9.1
https://fisheye6.atlassian.com/changelog/camel?cs=1339933


Could you take a look at it?","davsclaus:1353631750:2012-11-23T08:49:10.120+0000:1353631750:2012-11-23T08:49:10.120+0000:Fixing this as I am looking at the unresolved bugs, and this was fairly easy to fix."
0,CAMEL-5425,Task,Minor,2.10.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2012-07-06 11:58:39+00:00,2013-07-17 08:34:46+00:00,"See CAMEL-5050


Its basically a copy of camel-hawtdb for the aggregate EIP repo.",
0,CAMEL-5424,Bug,Minor,2.10.0,2.10.1,"
None
",Resolved,Fixed,2.10.1,Claus Ibsen,Michal Svab,0,2,2012-07-05 22:25:59+00:00,2012-07-06 12:47:46+00:00,"Due to copy & paste error in CamelSpringTestContextLoader.handleMockEndpointsAndSkip @MockEndpointsAndSkip annotation is ignored and it looks for @MockEndpoints annotation. Test for this annotation is wrong as well, as it tries to mock mock:* endpoint that cannot be mocked again.


I've attached a patch that fixes both CamelSpringTestContextLoader and the test. In case I missed anything, I'm happy to improve the patch.","davsclaus:1341532203:2012-07-06T07:50:03.487+0000:1341532203:2012-07-06T07:50:03.487+0000:Michal, can you re-attach your patch and mark [x] in grant license to Apache. Otherwise we cannot accept your patch.
msvab:1341534203:2012-07-06T08:23:23.817+0000:1341534203:2012-07-06T08:23:23.817+0000:Doh, missed that one.
davsclaus:1341550066:2012-07-06T12:47:46.466+0000:1341550066:2012-07-06T12:47:46.466+0000:Thanks for the patch."
0,CAMEL-5423,Bug,Minor,2.10.0,2.11.0,"
None
",Resolved,Abandoned,2.11.0,Claus Ibsen,Renato Weiner,0,4,2012-07-05 19:04:15+00:00,2013-02-03 11:17:32+00:00,"Running this route:


from(""direct:start"").unmarshal().bindy(BindyType.Csv, services.billing.BillingItem.class).to(""direct:middle"");


Where services.billing.BillingItem.class exists and has the following annotations:


@CsvRecord(separator = "","", quote = ""\"""", skipFirstLine = true)
public class BillingItem {
...


It throws a NPE:


java.lang.NullPointerException
	at org.apache.camel.dataformat.bindy.BindyAbstractFactory.initModel(BindyAbstractFactory.java:81)
	at org.apache.camel.dataformat.bindy.BindyAbstractFactory.<init>(BindyAbstractFactory.java:65)
	at org.apache.camel.dataformat.bindy.BindyCsvFactory.<init>(BindyCsvFactory.java:76)
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.createModelFactory(BindyCsvDataFormat.java:261)
	at org.apache.camel.dataformat.bindy.BindyAbstractDataFormat.getFactory(BindyAbstractDataFormat.java:69)
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.unmarshal(BindyCsvDataFormat.java:108)
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:57)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:330)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)


When I change the code to:


from(""direct:start"").unmarshal().bindy(BindyType.Csv, ""services.billing"").to(""direct:middle"");


It works.


Expected result: if this the incorrect way to use, it should return a readable message.


Thanks.","cmoulliard:1341956106:2012-07-11T05:35:06.259+0000:1341956106:2012-07-11T05:35:06.259+0000:Where do you deploy your camel project (JBoss, WebSphere, Tomcat, ...)? According to camel-bindy code, the NPE is generated when we try to get the package and name from the type. As the type object is not null, this is the package object which should be null.

    public void initModel() throws Exception {
        // Find classes defined as Model
        if (packageNames != null)  {
            initModelClasses(this.packageNames);
        } else if (type != null) {
            // use the package name from the type as it may refer to types in the same package
            String pckName = type.getPackage().getName(); // NPE generated here

According to Java Doc, the package could be null if no package object was created by the class loader of this class

http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getPackage()
davsclaus:1359861452:2013-02-03T11:17:32.630+0000:1359861452:2013-02-03T11:17:32.630+0000:No response from reported, and cannot reproduce."
0,CAMEL-5422,New Feature,Major,None,None,"
None
",Resolved,Implemented,None,Unassigned,Łukasz Dywicki,0,4,2012-07-05 10:26:43+00:00,2015-07-11 14:11:20+00:00,"So far camel-cdi can discover beans but still can not discovery routes or other things like interceptors. We would like to put that in place to have full featured alternative for blueprint and spring.


This issue is for tracking cdi stuff.","ldywicki:1342417108:2012-07-16T13:38:28.291+0000:1342417108:2012-07-16T13:38:28.291+0000:This issue requires CAMEL-5447 to be applied.
davsclaus:1436595080:2015-07-11T14:11:20.580+0000:1436595080:2015-07-11T14:11:20.580+0000:camel-cdi has been improved over the years - and there is an external camel-cdi component that is being donated with the best parts."
0,CAMEL-5421,Improvement,Major,None,,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,1,2012-07-04 16:56:48+00:00,2012-07-04 17:08:25+00:00,No Desc,
0,CAMEL-5420,Bug,Major,2.10.0,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Guillaume Nodet,0,2,2012-07-04 15:23:50+00:00,2013-05-02 02:29:56+00:00,"When defining an endpoint with a relative uri such as 



   protocol:mypath1/mypath2




camel transforms the given uri into the following:



   protocol://mypath1/mypath2




Note that this transformation is performed before the component is given the uri as it is done in DefaultCamelContext#getEndpoint() in the call to normalizeEnpointUri().


This has the big problem that mypath1 is not considered the path anymore, but rather the authority (host:port).


So if a component wants to support both relative and absolute uris, it has no real way to know if the original uri contained an authority or not.
It is possible to support absolute uris with no authority though, as



   protocol:/mypath1/mypath2




is converted to



   protocol:///mypath1/mypath2




I'm not sure why relative uris are transformed into absolute uris, which does not really seem like a good idea to me.",davsclaus:1348527100:2012-09-25T06:51:40.101+0000:1348527100:2012-09-25T06:51:40.101+0000:Components now support using raw uris.
0,CAMEL-5419,Bug,Minor,"2.9.2, 2.10.0","2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,Claus Ibsen,0,1,2012-07-04 12:03:24+00:00,2012-07-04 13:36:59+00:00,"If there is an exception on the Exchange which gets marshalled then the namespace of the fault is not the same namespace as the envelope.


The namespace on soap 1.1 is: ""http://schemas.xmlsoap.org/soap/envelope/""
But the fault is using soap 1.2: ""http://www.w3.org/2003/05/soap-envelope""


We should use the same namespace so its consistent.",
0,CAMEL-5418,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-07-04 11:54:03+00:00,2012-07-05 08:01:31+00:00,"The camel-soap data format only supports SOAP 1.1.
We should add support for SOAP 1.2 (it has a different namespace).
And for that we may have to let the end user decide in the DLS if using soap 1.1 or 1.2, as we may need to known this when we marshal (xml -> pojo).


The trick would be that we would have 2 set of generated pojos based on soap 1.1 or 1.2.","davsclaus:1341445958:2012-07-05T07:52:38.087+0000:1341445958:2012-07-05T07:52:38.087+0000:There is now a version attribute so you can set to ""1.2"" to use SOAP 1.2 when using XML DSL.
In Java DSL there is a jaxbsoap12 for using 1.2.

If creating the SoapJaxbDataFormat manually then there is a setVersion method.

Will fallback and use 1.1 if version not configured or some invalid value."
0,CAMEL-5417,Bug,Major,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Willem Jiang,Bruno Borges,0,2,2012-07-03 22:17:34+00:00,2012-07-04 01:52:08+00:00,"The Scala archetype (camel-archetype-scala) has incorrect configuration for the Maven Eclipse Plugin to generate Eclipse files integrated with the Scala IDE.


classpath, nature and build commands 


Source: http://www.assembla.com/wiki/show/scala-ide/With_Maven_CLI",njiang:1341337928:2012-07-04T01:52:08.043+0000:1341337928:2012-07-04T01:52:08.043+0000:Applied patch with thanks to Bruno.
0,CAMEL-5416,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Scott England-Sullivan,1,4,2012-07-03 20:20:37+00:00,2012-11-01 09:31:04+00:00,"I have developed a Camel JMS Component built with pure Java JMS APIs or Spring free.  I would like to include it in the next 2.x release of Camel and am assuming that will be 2.11.


Any guidance on how much lead time would be necessary to integrate it for that release would be appreciated (reads: when do you need the patch). 


First Iteration:



Full Queue and Topic Support (Durable & Non-Durable)
Full InOnly & InOut Support
Internal Connection, Session, Consumer, & Producer pooling/caching management
Full Asynchronous Support
JMS Internal Transaction Support



Future Iterations:



Robust JMX Support
Camel Transaction Support
JTA Support (Pure Java)
Robust-InOnly
Full Migration of Core Camel-JMS Unit Tests (where applicable)
Batch List support



Thanks,
Scott ES
http://fusesource.com","sully6768:1343592615:2012-07-30T04:10:15.414+0000:1343592615:2012-07-30T04:10:15.414+0000:Apache SJMS Component
sully6768:1343765335:2012-08-01T04:08:55.278+0000:1343765335:2012-08-01T04:08:55.278+0000:Camel SJMS Component Patch
bvahdat:1343936733:2012-08-03T03:45:33.946+0000:1343936733:2012-08-03T03:45:33.946+0000:The Integration-Tests @:
https://svn.apache.org/repos/asf/camel/trunk/components/camel-sjms/src/test/java/org/apache/camel/component/sjms/it
Have all the IT suffix, so that running:
{code}
mvn clean install -Psourcecheck -Dtest=false
{code}
Does *still* execute these Tests. Just wonder if we should rename them to XXXTest as all the other tests so that they are recognized properly by maven.
bvahdat:1343937335:2012-08-03T03:55:35.036+0000:1343937335:2012-08-03T03:55:35.036+0000:On the other hand running

{code}
mvn clean install -Pfastinstall
{code}

has *still* got the expected behaviour.

So the problem is only when you want to run with the sourcecheck profile but *without* executing the tests.
sully6768:1344194999:2012-08-06T03:29:59.442+0000:1344194999:2012-08-06T03:29:59.442+0000:Hi Babak,

-Dtest is used to specify the name of a test.  If you want to skip the tests as they are in *fastinstall* then you would need to pass in the -Dmaven.test.skip.exec=true.

I believe to do what you are attempting though can be accomplished as follows:

mvn -Psourcecheck,fastinstall

FYI, I am also uploading a new patch to fix some errors I found while documenting.

Best Regards,
Scott ES
sully6768:1344195226:2012-08-06T03:33:46.521+0000:1344195226:2012-08-06T03:33:46.521+0000:Willem,

Thanks so much for adding the component to SVN.  Much appreciated.

Scott ES
http://fusesource.com
sully6768:1344195661:2012-08-06T03:41:01.056+0000:1344195661:2012-08-06T03:41:01.056+0000:Updates:
* Fixed OSGi exports for the Connection Resources.
* Created a cleaner ConnectionFactoryResource as the default.
* Began refactoring JMS APIs to a single package structure.

sully6768:1344199681:2012-08-06T04:48:01.546+0000:1344199681:2012-08-06T04:48:01.546+0000:Moving latest patch to subtask.
bvahdat:1344253939:2012-08-06T19:52:19.356+0000:1344253939:2012-08-06T19:52:19.356+0000:Yeah the 

{code}
-Dtest=false
{code}

is the nasty way we've got used to it in Camel :-)

And as you already mentioned

{code}
mvn clean install -Pfastinstall,sourcecheck
{code}

brings the behaviour back I was looking for.

And also just noticed that on the SJMS Wiki we talk about a class called:

{code}
ConnectionFactoryResource connectionResource = new ConnectionFactoryResource();
...
{code}

Which doesn't exist in the codebase! Could you maybe please take a look at the code sample on the Wiki?

sully6768:1344272464:2012-08-07T01:01:04.267+0000:1344272464:2012-08-07T01:01:04.267+0000:Hi Babak,

It does exist, just not in trunk yet. :S

I submitted it as part of the CAMEL-5486 subtask.  The patch has some issues so Willem is going to go through it with me tonight.

For the time being you would only need that for a durable subscription so for the sake of the examples today it isn't needed.  It contains some refactoring that brings it into alignment with the JMS spec though.  Hopefully we will be through it tonight.  If not I will pull it out of the docs until we can get it in. 

I will send out an update when we are done.

Thanks,
Scott ES
njiang:1351733464:2012-11-01T09:31:04.163+0000:1351733464:2012-11-01T09:31:04.163+0000:I think we can resolve this issue, as the code has been committed into trunk and we can create new issue if we have future enhancement on it."
0,CAMEL-5415,Bug,Major,"2.9.0, 2.9.1, 2.9.2, 2.10.0","2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,Max Shalashov,0,3,2012-07-03 19:56:37+00:00,2012-07-04 07:24:39+00:00,"Example code:



...
<choice>
    <when>
        <simple>${property.someProperty} == ''</simple>
        ...
    </when>
...




Error message: right must be specified",davsclaus:1341357859:2012-07-04T07:24:19.994+0000:1341357859:2012-07-04T07:24:19.994+0000:Thanks for reporting.
0,CAMEL-5414,Bug,Major,2.9.2,"2.9.4, 2.10.2, 2.11.0","
None
",Closed,Fixed,"2.9.4, 2.10.2, 2.11.0",Christian Müller,Luc Pezet,0,2,2012-07-01 20:12:56+00:00,2012-09-19 20:23:05+00:00,"This would happen in 2 scenarios:
1. Queue already exists with vsibility timeout different than 30 seconds (say use AWS Console to create a queue and set a different visibility timeout). Using this queue as an endpoint and problem will occur
2. Queue DOES NOT already exist and is created by SqsEndpoint (createQueue). If ""defaultVisibilityTimeout"" configured, it will still work...the first time. But restarting the endpoint (or the whole camel app) and the problem will occur.","lpezet:1341144930:2012-07-01T20:15:30.420+0000:1341144981:2012-07-01T20:16:21.647+0000:This is the test which I think follows Amazon behavior and shows that getting the queue url with the current SqsEndpoint implementation is broken.
I'd be more than happy to provide the patch if someone could just check the test and give me the go :)
Maybe I missed something and it's not broken...
muellerc:1346162406:2012-08-28T22:00:06.908+0000:1346162406:2012-08-28T22:00:06.908+0000:I can confirm, this is an issue. Thanks for reporting!
Would you like to work on a patch? I think I could provide a fix by tomorrow...
muellerc:1346846144:2012-09-05T19:55:44.628+0000:1346846144:2012-09-05T19:55:44.628+0000:I committed a patch which fixed this behavior. The SQS endpoint will now list the existing queues and use the url of the existing queue *AND ITS ATTRIBUTES!* If the queues doesn't exist, we will create a new one with the provided attributes.
Is this also your expected behavior? Or should we also call 'setQueueAttributes' and update all of them if the queue already exists?
lpezet:1346879919:2012-09-06T05:18:39.787+0000:1346879919:2012-09-06T05:18:39.787+0000:Thanks a lot Christian. 
I would expect the endpoint to be setup as specified in the URI options, so I'd vote for setting the queue attributes when the queue already exists. 
What do you think?
muellerc:1346939565:2012-09-06T21:52:45.574+0000:1346939565:2012-09-06T21:52:45.574+0000:Yes, makes sense for me too. I will work on it in the next days.
muellerc:1348057385:2012-09-19T20:23:05.076+0000:1348057385:2012-09-19T20:23:05.076+0000:I updated the behavior as discussed."
0,CAMEL-5413,Bug,Major,2.9.2,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Jan Hornbøll Hansen,0,2,2012-06-30 09:37:29+00:00,2012-07-06 12:40:21+00:00,Creating injector for mule context causes mule context to be started.,"jhhdk:1341021033:2012-06-30T09:50:33.273+0000:1341021033:2012-06-30T09:50:33.273+0000:Small example that illustrates issue
davsclaus:1341048782:2012-06-30T17:33:02.120+0000:1341048782:2012-06-30T17:33:02.120+0000:Can you please provide better description what is the problem. One text line is not much to go after.
And you mention Mule, this is *Apache Camel*.
jhhdk:1341064147:2012-06-30T21:49:07.941+0000:1341064228:2012-06-30T21:50:28.359+0000:Ups that was a bit of a ""typo"". Sorry about the camel mule mixup. Anyway when I instantiate a context with ""new DefaultCamelContext();"" (ie. not using Guice) I have to start context explicitly after I have added routes. If context is created while creating injector as an eager singleton it gets started automatically deep within Guice. That is wrong. Creating context using dependency injection should not change its behavior. Also creating and starting should not be tied together, since you may want to create service objects in a different order than they are started (or rather you may not care what order objects are created as long as everyone gets their dependencies, but most likely will care what order things are started).
I am unsure whether this is an unintended bug or a design flaw, but it appears start is invoked somewhere inside guicyfruit.
davsclaus:1341549593:2012-07-06T12:39:53.963+0000:1341549593:2012-07-06T12:39:53.963+0000:There is tickets to upgrade camel-guice to use guice 3.0 and no longer guicyfruit.
Until then we wont prioritize this or fix guicyfruit.
davsclaus:1341549621:2012-07-06T12:40:21.467+0000:1341549621:2012-07-06T12:40:21.467+0000:This requires guice 3.0 upgrade etc. There is JIRA tickets about this."
0,CAMEL-5412,Bug,Major,"2.9.2, 2.10.0","2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,Pontus Ullgren,0,2,2012-06-29 13:44:32+00:00,2012-06-29 15:01:21+00:00,"When a route that has a CronScheduledRoutePolicy is removed it does not properly clean up the quartz jobs. 


The result (apart from possible memory leak) is that if the route is removed from the context and then readded with the same route id a ObjectAlreadyExistsException.


This is done using the following steps.
1. Stop the route
2. Remove the route (and it's endpoints) from the context.
3. (Re)add the route to the context using the same name.


Attached is a testcase that shows the problem.


I've solved this by adding my own implementation of onRemove (that calls doStop()) to CronScheduledRoutePolicy.","pontus.ullgren:1340948730:2012-06-29T13:45:30.595+0000:1340948730:2012-06-29T13:45:30.595+0000:Unit testcase
pontus.ullgren:1340949012:2012-06-29T13:50:12.182+0000:1340949012:2012-06-29T13:50:12.182+0000:Simple patch that ""works for me""(tm)
davsclaus:1340953281:2012-06-29T15:01:21.646+0000:1340953281:2012-06-29T15:01:21.646+0000:Thanks for the patch."
0,CAMEL-5411,Bug,Major,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Robert Davies,Ralf Kornberger,0,3,2012-06-29 13:02:09+00:00,2012-08-15 17:27:54+00:00,"MQTT Endpoint does not correctly return the MQTT-Payload. It returns the whole MQTT Message (header + payload).


The bug is in line 89 of MQTTEndpoint.java (version 2.11, but also in 2.10)


 exchange.getIn().setBody(body.getData());


must become


 exchange.getIn().setBody(body.toByteArray()); 


because getData() ignores the offset (to skip the MQTT header) set in the body byte array.","ralfkornberger:1340946336:2012-06-29T13:05:36.243+0000:1340946336:2012-06-29T13:05:36.243+0000:Patch with bug fixed :-)
davsclaus:1340946830:2012-06-29T13:13:50.209+0000:1340946830:2012-06-29T13:13:50.209+0000:Isn't there some headers from MQTT, you would need to map into Camel Message Headers as well?
ralfkornberger:1340947907:2012-06-29T13:31:47.227+0000:1340947907:2012-06-29T13:31:47.227+0000:I use Camel to fetch a Message (XML, Protobuf, ...) from the Broker. Using Camel-MQTT, as it is, the message is fetched, but the body still includes the MQTT header (topic and binary stuff before) which I don't want. I only want the payload (=my xml or protobuf stuff). 
Here is an example:

I sent the String 'Test123' via MQTT to Camel. Using the example code from your website 


 from(""mqtt:bar?subscribeTopicName=test.mqtt.topic"").transform(body().convertToString()).bean (myProcessingBean);

I expect body to be 'Test123'. But instead body is something like '0�^C^@^Ktest.mqtt.topicTest123' (the stuff before test.mqtt.topic are nonprintable chars).
So the body is the whole MQTT message instead of just the payload. I makes no sense to have the full MQTT message as body here because you can't really decode/spilt it well
without going deeply into the MQTT implemenation of the the MQTT Client (from org.fusesource.mqtt-client in my case). 
But when you apply the patch, it (in my opinion) sets body corretly to 'Test123'.







davsclaus:1340952200:2012-06-29T14:43:20.064+0000:1340952200:2012-06-29T14:43:20.064+0000:Ralf, yeah your patch makes sense. But then we may also want to map headers from MQTT to Camel Message Headers. So you get both body + headers from MQTT mapped to the Camel Message.


davsclaus:1340952222:2012-06-29T14:43:42.752+0000:1340952222:2012-06-29T14:43:42.752+0000:Rob, can you take a look
rajdavies:1342143737:2012-07-13T09:42:17.896+0000:1342143737:2012-07-13T09:42:17.896+0000:Added fix in Subversion: Committed revision 1361126. There's still some weirdness (timing issue) with publishing, which should be addressed in next release of ActiveMQ
davsclaus:1345022874:2012-08-15T17:27:54.545+0000:1345022874:2012-08-15T17:27:54.545+0000:Merged to 2.10 branch as well."
0,CAMEL-5410,Task,Minor,None,,"
None
",Resolved,Invalid,None,Henryk Konsek,Henryk Konsek,0,2,2012-06-29 12:04:54+00:00,2013-05-26 11:18:22+00:00,"Running 'mvn cobertura:cobertura' from camel-extra root module doesn't generate coverage reports at all.


Running 'mvn cobertura:cobertura' from 'components' module generates reports in each component's target directory, instead of single report in components/target.","davsclaus:1369538302:2013-05-26T11:18:22.500+0000:1369538302:2013-05-26T11:18:22.500+0000:Moved ticket to camel-extra project at
https://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=39"
0,CAMEL-5409,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-29 12:02:03+00:00,2012-09-01 07:42:39+00:00,Groovy 2.0 is out. We should upgrade to this in the next minor release of Camel.,
0,CAMEL-5408,New Feature,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Łukasz Dywicki,1,7,2012-06-28 10:04:00+00:00,2016-01-26 08:49:22+00:00,Camel-cdi integration allows to use beans registered in CDI registry. CDI supports also event mechanism which can be useful in many cases. Provided patch allows camel produce new CDI events.,"ldywicki:1340849269:2012-06-28T10:07:49.804+0000:1340849269:2012-06-28T10:07:49.804+0000:Proposed implementation.
hekonsek:1340933209:2012-06-29T09:26:49.502+0000:1340933209:2012-06-29T09:26:49.502+0000:What about adding an asynchronous CDI event consumer? It could work similarly to the Guava EventBus consumer [1].

from(""cdi-event:///?eventClass=com.foo.MyEvent"").to(""mock:consumedFromCdi"");

[1] http://camel.apache.org/guava-eventbus.html
ldywicki:1340936836:2012-06-29T10:27:16.481+0000:1340936836:2012-06-29T10:27:16.481+0000:At this moment I was unable to register camel consumer in CDI registry with given type which causes bad design (component would be receiving side, not consumer itself).
hekonsek:1340937450:2012-06-29T10:37:30.147+0000:1340937450:2012-06-29T10:37:30.147+0000:Yeah, I see that CDI annotations are more complex than Guava's events systems (which is based on classes hierarchy). This indeed makes consumer more complicated.

I'll try to look at consumer issues later - maybe I'll figure out how to implement it.
ldywicki:1341407358:2012-07-04T21:09:18.725+0000:1341407358:2012-07-04T21:09:18.725+0000:Second version of patch which allows to consume events.
ldywicki:1341407524:2012-07-04T21:12:04.582+0000:1341407524:2012-07-04T21:12:04.582+0000:Submitted second version of component with support for consumption of events. Events must have a @Event qualifier or implement empty CamelEvent interface to be received. Path changes a bit initialization, Consumer and Producer instance is injected directly to Endpoint instance. Creation of new instance is on CDI side.
hekonsek:1341408115:2012-07-04T21:21:55.619+0000:1341408115:2012-07-04T21:21:55.619+0000:What about making CdiEventConsumer an asynchronous one? You could do this in Consumer processor's setter (as I correctly understand how CDI works).

I'd be something like:

private AsyncProcessor processor;

public void setProcessor(Processor processor) {
  this.processor = AsyncProcessorConverterHelper.convert(processor);
}

private void handleEvent(Object event) throws Exception {
  if (isStarted()) {
    Exchange exchange = endpoint.createExchange();
    exchange.getIn().setBody(event);
    processor.process(exchange, new AsyncCallback() {
                @Override
                public void done(boolean doneSync) {
                    // noop
                }
    });
  } else {
     logger.warn(""Camel received event before starting the consumer. Event {} will be ignored"", event);
  }
}
hekonsek:1341433269:2012-07-05T04:21:09.162+0000:1341433269:2012-07-05T04:21:09.162+0000:Ok, maybe instead of creating AsyncProcessor in setProcessor, you could do it in doStart().
ldywicki:1342081900:2012-07-12T16:31:40.891+0000:1342081900:2012-07-12T16:31:40.891+0000:Please ignore second patch and stay with producer for now. I need reorganize component to get notifications handled in right way without breaking camel semantics.
hadrian:1342082108:2012-07-12T16:35:08.721+0000:1342082108:2012-07-12T16:35:08.721+0000:Thanks Lukasz, that's better.

I'd suggest doing that as a separate jira. I will take care of your first patch and mark this as resolved.
ldywicki:1342418073:2012-07-16T13:54:33.300+0000:1342418073:2012-07-16T13:54:33.300+0000:Patch supporting both - consumer and provider. Consumer is implemented very similar to quartz. It requires CAMEL-5447 and CAMEL-5448 to be present in working tree.
apache@christianbauer.name:1424321521:2015-02-19T12:52:01.472+0000:1424321521:2015-02-19T12:52:01.472+0000:I've implemented a Camel/CDI eventing component in this fork of the Camel CDI integration code: https://github.com/christianbauer/camel-cdi
antonin.stefanutti:1426038273:2015-03-11T09:44:33.031+0000:1426038273:2015-03-11T09:44:33.031+0000:I've updated [~apache@christianbauer.name]'s implementation and documented the new approach here:

https://github.com/astefanutti/camel-cdi#cdi-event-camel-endpoint

Main implementation is here:

https://github.com/astefanutti/camel-cdi/blob/0c0694767e6a6ba0ea80fb01e17d7f35e85b25f5/impl/src/main/java/org/apache/camel/cdi/CdiEventEndpoint.java

That be great to have your feedback on this.
davsclaus:1436410148:2015-07-09T10:49:08.714+0000:1436410148:2015-07-09T10:49:08.714+0000:We are working with [~antonin.stefanutti] to port some of his work with camel-cdi to Apache Camel in 2.16."
0,CAMEL-5407,Improvement,Minor,2.10.0,"2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.10.1, 2.11.0",Willem Jiang,Claus Ibsen,1,3,2012-06-28 07:58:48+00:00,2012-08-16 12:20:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/Can-t-route-wsdl-request-into-file-tp5715201.html


We should have a better error message instead of something about no type converter exception.


We could also consider an option to the file producer, to silently ignore writing files if there is no message body.


Finding a good name for this option is a challenge 



skipNullBody
ignoreWritingNullBody","alanfoster:1344781909:2012-08-12T22:31:49.730+0000:1344782774:2012-08-12T22:46:14.308+0000:I have attached the patch for this, including some tests.

I added the option as 'allowNullBody', following a similar naming convention of a different component.

For documentation purposes:
Name          | Default | Description
allowNullBody | false   | Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component, a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the `fileExist` option is set to 'Override', then the file will be truncated, and if set to `append` the file will remain unchanged

I appreciate any feedback for my first patch! :)
njiang:1344815722:2012-08-13T07:55:22.686+0000:1344815722:2012-08-13T07:55:22.686+0000:Applied the patch with thanks to Alan, I also fix some CS errors of the patch and updated the File2 wiki page.
davsclaus:1344817233:2012-08-13T08:20:33.798+0000:1344817233:2012-08-13T08:20:33.798+0000:This need to work for the ftp components as well as they are built on top of the file stuff. So we should try to ensure they are in sync.
davsclaus:1345080811:2012-08-16T09:33:31.948+0000:1345080811:2012-08-16T09:33:31.948+0000:Added allowNullBody option to camel-ftp as well. And backported to 2.10 branch.
alanfoster:1345090854:2012-08-16T12:20:54.364+0000:1345090854:2012-08-16T12:20:54.364+0000:@ClausIbsen

Thanks for this; I had completely forgotten to look into adding the allowNullBody option to the camel-ftp component too, sorry about that!"
0,CAMEL-5406,Bug,Minor,"2.9.1, 2.10.0","2.8.6, 2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.1",Claus Ibsen,emanuele gherardini,0,2,2012-06-27 19:12:12+00:00,2012-06-30 17:31:21+00:00,"If the 



 threds() 



 DSL keyword is used in a route and a Junit4 test is performed, the test hangs indefenitely.


The issue is descibed here:


http://camel.465427.n5.nabble.com/Threads-EIP-hangs-Unit-Tests-JUnit4-td5715031.html


please find attached a self-consistent sample project to reproduce it.","egherardini:1340795683:2012-06-27T19:14:43.599+0000:1340795683:2012-06-27T19:14:43.599+0000:A sample project reproducing the issue. I apologize for the bad variable names but I had to heavely refactor code prior to publishing it.
egherardini:1340796362:2012-06-27T19:26:02.428+0000:1340796362:2012-06-27T19:26:02.428+0000:This reproduces also on 2.10-SNAPSHOT
davsclaus:1341022430:2012-06-30T10:13:50.993+0000:1341022430:2012-06-30T10:13:50.993+0000:Its the intercept mock to endpoints that didnt support the async routing engine properly. So this issue is only when unit testing and using that feature."
0,CAMEL-5405,Bug,Major,2.9.2,"2.9.3, 2.10.1, 2.11.0","
None
",Resolved,Fixed,"2.9.3, 2.10.1, 2.11.0",Willem Jiang,Sergey Beryozkin,0,3,2012-06-27 17:24:07+00:00,2012-09-27 12:17:32+00:00,"DefaultCxfMesssageMapper (note the typo - to be fixed in a follow-up JIRA) wrongly initializes CXF Message Message.REQUEST_URI property with the value of Camel Exchange.HTTP_PATH, even though Camel Exchange.HTTP_URI is available.


The net effect is that the HTTP matrix parameters if any attached to the last HTTP path segment are lost. Another side-effect is that Exchange.HTTP_PATH will contain the decoded value (done at HTTPServletRequest level) which can lead to the matching issues at the JAX-RS level.


A simple patch is attached","njiang:1340921151:2012-06-29T06:05:51.656+0000:1340921151:2012-06-29T06:05:51.656+0000:Applied patch into trunk, 2.9.x and 2.8.x branch with thanks to Sergey.
I also added ASL header for the test file.
sergey_beryozkin:1344391961:2012-08-08T10:12:41.169+0000:1344391961:2012-08-08T10:12:41.169+0000:Propagating the actual Request URI causes the mis-match at the CXF level when Camel Servlet is also used. For example, Camel Servlet will set Request URI as ""/webapp/HelloWorld"", but also set the base URI as ""servlet:///HelloWorld"". 
To calculate the base address, CXF needs HttpServletRequest propagated too
sergey_beryozkin:1344392074:2012-08-08T10:14:34.521+0000:1344392074:2012-08-08T10:14:34.521+0000:HttpServletRequest and HttpServletResponse are also propagated, without introducing CXF HTTP Transport or Servlet API dependencies 
njiang:1344407111:2012-08-08T14:25:11.978+0000:1344407111:2012-08-08T14:25:11.978+0000:@Sergey,

I just applied the patch into the trunk, it could be great if you can provide an integration test to show the whole story :).
sergey_beryozkin:1344470030:2012-08-09T07:53:50.651+0000:1344470030:2012-08-09T07:53:50.651+0000:Hi Willem - thanks for applying it. This will fix one of our failing demos. 
I can promise here I'll take an action and work on creating an integration test. It may take a bit of time - I'm mostly offline till the end of next week, but I'll get it done.
Cheers
sergey_beryozkin:1344470336:2012-08-09T07:58:56.605+0000:1344470336:2012-08-09T07:58:56.605+0000:Btw, propagating servlet request/response will also make sure that they can be injected as JAX-RS Context objects or accessed as JAX-WS properties, so the fix is good :-)
njiang:1344470916:2012-08-09T08:08:36.200+0000:1344470916:2012-08-09T08:08:36.200+0000:Hi Sergey,

I will keep this issue open until we get the integration test committed :).
davsclaus:1348715942:2012-09-27T11:19:02.548+0000:1348715942:2012-09-27T11:19:02.548+0000:Any update on this. If a new test is needed then create a new ticket as we need this ticket to be in the changelog for upcoming releases.
sergey_beryozkin:1348717204:2012-09-27T11:40:04.240+0000:1348717204:2012-09-27T11:40:04.240+0000:I'll get the test done asap, still committed to it; I'm not sure it is needed though for this issue, propagating HTTP Servlet references is needed for some of our demos to work but it is useful irrespectively of that; please feel free to close this issue."
0,CAMEL-5404,Bug,Major,2.9.2,"2.8.6, 2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.1",Claus Ibsen,Thomas Johansen,0,2,2012-06-27 13:33:17+00:00,2012-06-29 08:29:09+00:00,"When MinaProducer is configured with 



sync=true&disconnect=true&disconnectOnNoReply=true&timeout=X



 and a timeout occurs, the connection is not disconnected.


First of all disconnectOnNoReply only applies to consumers, which can be (and was) very confusing. Allthough this is according to documentation.


Secondly this might (and did!) lead to wrong response messages set on an Exchange. The following scenario:
1. Client sends a request and waits for a response (InOut) on exchange A.
2. Client times out waiting for a response after X milliseconds.
3. Client sends another request on exchange B.
4. Server sends the response for exchange A.
5. Client gets response for exchange A on exchange B (disaster!).


This happens because the producer reuses exchange A's connection for exchange B, because it was not disconnected when exchange A timed out.","davsclaus:1340929732:2012-06-29T08:28:52.099+0000:1340929732:2012-06-29T08:28:52.099+0000:Thanks for reporting.

Fell free to give the 2.9 branch a test spin on your system.
davsclaus:1340929749:2012-06-29T08:29:09.309+0000:1340929749:2012-06-29T08:29:09.309+0000:Applied fix to camel-mina2 on 2.10 branch as well."
0,CAMEL-5403,New Feature,Major,"2.8.0, 2.9.2, 2.10.0",2.10.1,"

type-converter
xerces
xpath

",Resolved,Fixed,2.10.1,Raúl Kripalani,Raúl Kripalani,0,2,2012-06-27 11:37:28+00:00,2012-08-10 04:48:48+00:00,"In many cases, Xerces will return transformation results as a NodeList of size 1 even though the XPath evaluation only yields one element during runtime.



<transform>
   <xpath>/child::node()[local-name() = 'ABC']</xpath>
</transform>




(that XPath is capable of matching multiple elements - but let's assume only one is matched)


When applying an XPath choice afterwards, it is easy to come across this error:



java.lang.ClassCastException: org.apache.xml.dtm.ref.DTMNodeList cannot be cast to org.w3c.dom.Node
	at org.apache.xpath.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:121)[:]
	at org.apache.xpath.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:99)[:]
	at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:184)[:]
	at org.apache.camel.builder.xml.XPathBuilder.doInEvaluateAs(XPathBuilder.java:676)[88:org.apache.camel.camel-core:2.8.0.fuse-03-06]
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:640)[88:org.apache.camel.camel-core:2.8.0.fuse-03-06]
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:132)[88:org.apache.camel.camel-core:2.8.0.fuse-03-06]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:65)[88:org.apache.camel.camel-core:2.8.0.fuse-03-06]
[...]




To make the out-of-the-box experience smoother, I propose adding a little type converter that converts from NodeList => Node when the size of the former is 1.","raulvk:1344507975:2012-08-09T18:26:15.088+0000:1344507975:2012-08-09T18:26:15.088+0000:Attached patch including unit tests.
njiang:1344545328:2012-08-10T04:48:48.175+0000:1344545328:2012-08-10T04:48:48.175+0000:Applied patch with thanks to Raul, I also fixed some minor CS errors at the same time."
0,CAMEL-5402,Improvement,Minor,2.9.2,2.16.0,"

annotations
bean
binding
parameters
proxy

",Resolved,Fixed,2.16.0,Claus Ibsen,Anton Koscejev,2,3,2012-06-27 10:10:35+00:00,2015-08-11 16:35:21+00:00,"Parameter Binding Annotations (e.g., @Property, @Header, @Body) could be used to annotate an interface being proxied by Camel Proxy.
http://camel.apache.org/parameter-binding-annotations.html used for http://camel.apache.org/using-camelproxy.html


Currently these are used to identify which parameters Camel should provide when invoking a method of a bean. With the proposed functionality they could also be used to identify which parameter in the bean invocation map to body, and which parameters should be used to modify properties/headers. Possibly bypassing the creation of BeanInvocation object altogether, if @Body is specified.


Example:
public interface MyListener {
    void sendBodyWithHeader(@Body String body, @Header(""foo"") String headerFoo);
}


And when a Camel Proxy is created, invoking it will result in exchange having the String body as the OUT message with the header ""foo"" set to String headerFoo.","khinners:1410723667:2014-09-15T03:41:07.457+0000:1410723667:2014-09-15T03:41:07.457+0000:I would like this feature as well. Here is my service interface:

{code:title=Interface|borderStyle=solid}
public interface Transmitter {

  @InOnly
  public void send(@Header(""uuid"") String uuid, @Body String message);
  
}
{code}

And my Spring XML context:

{code:title=Context|borderStyle=solid}
  <camelContext id=""transmitContext"" xmlns=""http://camel.apache.org/schema/spring"">

    <proxy id=""transmitterProxy"" serviceUrl=""direct:transmitter"" serviceInterface=""com.example.Transmitter""/>
    
    <route id=""transmitRoute"">
      <from uri=""direct:transmitter""/>
      <to id=""auditQueue"" uri=""jms:queue:transmitQueue""/>
    </route>

  </camelContext>
{code}

However, this fails with exception:

{code:title=Exception|borderStyle=solid}
org.apache.camel.RuntimeCamelException: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]] of type: org.apache.camel.component.bean.BeanInvocation on: Message: BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]]. Caused by: No type converter available to convert from type: org.apache.camel.component.bean.BeanInvocation to the required type: java.lang.String with value BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]]. Exchange[Message: BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.camel.component.bean.BeanInvocation to the required type: java.lang.String with value BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]]]
{code}

Underlying cause is

{code:title=Cause|borderStyle=solid}
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.component.bean.BeanInvocation to the required type: java.lang.String with value BeanInvocation public abstract void com.example.Transmitter.send(java.lang.String,java.lang.String) with [09f9a567-6f67-4600-9771-e321fa0a17d0, Hello, World!]]
  at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)
  at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)
  ... 65 more
{code}

Seems to me this could be accomplished since all parameters are marked as to their purpose.
davsclaus:1436595229:2015-07-11T14:13:49.776+0000:1436595229:2015-07-11T14:13:49.776+0000:Yeah microservices and pojos is becoming more popular. Lets try to improve the camel proxy. Would be nice to hide all this with clean interfaces.
davsclaus:1439250217:2015-08-11T07:43:37.695+0000:1439250217:2015-08-11T07:43:37.695+0000:Kevin, good idea. We now bind by default and support those annotations listed in the table at
http://camel.apache.org/using-camelproxy.html
khinners:1439282121:2015-08-11T16:35:21.224+0000:1439282121:2015-08-11T16:35:21.224+0000:Thanks Claus. Apache Camel is my favorite open source project and it just got even better!"
0,CAMEL-5401,Bug,Major,"2.9.2, 2.10.0","2.9.3, 2.10.1","
None
",Resolved,Fixed,"2.9.3, 2.10.1",Claus Ibsen,Andrii Rubtsov,0,2,2012-06-27 09:48:32+00:00,2012-06-29 11:46:38+00:00,"I am looking for a way to get notified when route is being stopped/started (resumed/suspended). I have implemented trivial logging RoutePolicy (extending from RoutePolicySupport). However, during my tests I found that only onInit, onExchangeBegin and onExchangeDone methods are invoked. I tried both approaches - stopping/starting and suspending/resuming, but neither one worked.


Route state is being handled from another thread using ""CamelContext.*Route"" methods group. 


I am using SpringCamelApplicationContext. Route is configured using: routePolicyRef attribute of route tag.


I am fairly new to Camel. Let me know if I am missing something. Thanks.","davsclaus:1340931096:2012-06-29T08:51:36.950+0000:1340931096:2012-06-29T08:51:36.950+0000:Thanks for reporting.

Yeah I just spotted a bug with the routePolicyRef not invoking certain callbacks.
It works in Java DSL though, so its an issue when using the routePolicyRef as you would do in Spring XML."
0,CAMEL-5400,Bug,Minor,2.10.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,0,2,2012-06-27 09:26:31+00:00,2014-08-26 20:25:52+00:00,"The twitter websocket example used to allow dynamic updates of the tweet search word, so the website was updated in real time.


Now this is broken, with the latest refactorings in the camel-websocket component.


Twitter component works fine, as its updated and will poll new tweets.","davsclaus:1353641305:2012-11-23T11:28:25.835+0000:1353641305:2012-11-23T11:28:25.835+0000:The problem is deeper. If you stop a Camel route which uses web-socket. And start the route later.
Then any new WS clients can no longer connect and receive messages.
"
0,CAMEL-5399,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,3.0.0,Christian Schneider,Christian Schneider,0,3,2012-06-26 15:30:29+00:00,2013-10-22 07:31:22+00:00,"I have written a new camel-component that allows to listen on a dynamic list of endpoints. It works like this


from(""dynamicep:file:test,jms:myqueue"")...


So you simply supply a list of normal endpoints separated by commas. 


Some things we need to decide are:



Name of the component. I am not sure if dynamicep i ideal. Any better names?
Syntax of the endpoint URI. I am not sure if the combinded URI is a valid URI



I currently set the Fix version to 3.0.0 but we can easily backport this.","gnodet:1340761012:2012-06-27T09:36:52.765+0000:1340761012:2012-06-27T09:36:52.765+0000:Is the following:
  from(""dynamicep:file:test,jms:myqueue"").to(""xxx"")
just a shortcut for:
  from(""file:test"").to(""xxx"")
  from(""jms:myqueue"").to(""xxx"")
?
cschneider:1340761719:2012-06-27T09:48:39.621+0000:1340761880:2012-06-27T09:51:20.114+0000:Not exactly. There are some substantial differences that made me code this.

In the dynamicep component the exact same route is used while in your example there are two instances.
Using direct endpoints this could be achieved like:
rom(""file:test"").to(""direct:test"")
from(""jms:myqueue"").to(""direct:test"")
from(""direct:test"").to(""..."")

As you can use property placeholders in the uri you can have a dynamical list of endpoints to listen on:
from(""dynamicep:{{listenEndpoints}}"").to(""..."")
So this allows to listen on a list of endpoints where the number of endpoints to listen on is not known at compile time. We use this for a customer that wants to listen on a larger list of jms queues.
This behaviour is quite difficult to mimic without the new component.
... Seeems the curly braces in my route are swallowd by jira.. so imagine you see a placeholder there :-)
davsclaus:1340762290:2012-06-27T09:58:10.213+0000:1340762337:2012-06-27T09:58:57.192+0000:You can do today
{code}
from(""file:test"", ""jms:myqueue"").to(""xxx"")
{code}

Or stack multiple froms (maybe not so nice readable)
{code}
from(""file:test"").from(""jms:myqueue"").to(""xxx"")
{code}

The dynamiceip would IMHO only be interesting if it computes at route startup time (eg runtime) the incoming endpoints to the route.
{code}
from(""dynamiceip:bean:myInputs"").to(""xxx"")
{code}

And then myInputs could be a bean that returns a 1..n uris of endpoints, or Endpoint instances. 

And with the simple expression we could read the uris from a .properties file etc.
{code}
from(""dynamiceip:simple:${properties.myInputs}"").to(""xxx"")
{code}

I guess the syntax needs to be worked a bit, but then you could dynamic decide the inputs to the route from various sources, easily pluggable using the Camel expression.
cschneider:1340762718:2012-06-27T10:05:18.859+0000:1340763040:2012-06-27T10:10:40.114+0000:The from("".."").from("".."") does not work if you do not know the number of endpoints in advance. 
Building the endpoint list using an expression or bean could be a nice addition. It would allow to abstract the config from the endpoint syntax. 
So for example you could have only a list of queues in the config and a bean would create the the exact dynamicep uri. 

I think this is already possible though:
MyBean epBean = new MyBean();
from(epBean.getUri()).to("".."")

So I think we do not need to implement this in the component.

Btw. by using blueprint and conig admin service I was able to restart the context on property changes. So the endpoint list could be really changed at runtime without even redeploying the bundle.
davsclaus:1340762939:2012-06-27T10:08:59.144+0000:1340762939:2012-06-27T10:08:59.144+0000:You example above can only be done in Java, not in XML
gnodet:1340763017:2012-06-27T10:10:17.986+0000:1340763017:2012-06-27T10:10:17.986+0000:Yeah, I much prefer building the endpoints list using an expression instead of adding a new component.  Kinda like the same discussion we had with the proposed osgi component.
cschneider:1340763230:2012-06-27T10:13:50.806+0000:1340763230:2012-06-27T10:13:50.806+0000:@Guillaume I don´t think it is possible to achieve what I need (dynamic list of endpoints) with what we have now. If you find a good way then we do not need the component of course.
Btw. the component is really small (only has 3 files). I will commit it soon on trunk so you can have a look at it. If we find a nice way without the component we can remove the code again. 
davsclaus:1340763380:2012-06-27T10:16:20.481+0000:1340763380:2012-06-27T10:16:20.481+0000:Please dont commit to trunk, as we are in the process of releasing Camel 2.10, so the trunk code must be stable!
davsclaus:1340763417:2012-06-27T10:16:57.714+0000:1340763417:2012-06-27T10:16:57.714+0000:You can attach a patch or host the source on github etc if ppl wanna try it out now.
cschneider:1340763611:2012-06-27T10:20:11.051+0000:1340763611:2012-06-27T10:20:11.051+0000:Ok .. thought we were through with that already .. I will add a patch and wait till 2.10 is through
cschneider:1340763740:2012-06-27T10:22:20.902+0000:1340763740:2012-06-27T10:22:20.902+0000:Damn .. must have hit the wrong button while adding the resources locally .. Seems I just committed .. will roll back

gnodet:1340763814:2012-06-27T10:23:34.436+0000:1340763844:2012-06-27T10:24:04.388+0000:I didn't say we could do it now, but I think the same thing would be better achieved using an expression passed to from(xx)
such as from(myExpression) for a dynamic list or using multiple arguments from(xx, yy) for a fixed list.
So what I was suggesting is enhance the RouteBuilder to support using an expression as the from parameter instead of writing a new component.  Given the RouteBuilder already supports a few variations, one more would be more consistent and flexible than a new component, so in addition to
{code}
from(Endpoint)
from(Endpoint...)
from(String)
from(String...)
{code}
we'd have
{code}
from(Expression)
{code}
and afaik, that would fix your use case and be even more flexible than a component I think.

cschneider:1340764304:2012-06-27T10:31:44.169+0000:1340764304:2012-06-27T10:31:44.169+0000:Sounds basically good. My component had the advantage to work even with older camel versions but I agree that your proposal is nicer. I can work on that.
cschneider:1340764521:2012-06-27T10:35:21.064+0000:1340764521:2012-06-27T10:35:21.064+0000:Hmmm .. how about simply allowing "","" in from(String) like: from(""jms:myqueue, jms:myqueue2""). That would allow tools
like the Talend Route Builder to work with a list of endpoints already.

The from(Expression) has the disadvantage that tooling needs to be adapted to it. Still it makes sense to have it of course.
gnodet:1340765059:2012-06-27T10:44:19.520+0000:1340765059:2012-06-27T10:44:19.520+0000:Well, you can already pass an array of string, but you can already do that by using
{code}
  from(""jms:myqueue,mms:myqueue2"".split("",""))
{code}
afaiu.
cschneider:1340765304:2012-06-27T10:48:24.634+0000:1340765734:2012-06-27T10:55:34.848+0000:Absolutely .. but not in tooling if the tooling wants to put a string there. I think the change to achieve this split in the impl of from should be fairly small. I will try to implement that and report what I found. The only risk I see is if a Endpoint URI already contains a comma which is not meant to be a separator. 
cschneider:1340776618:2012-06-27T13:56:58.250+0000:1340776618:2012-06-27T13:56:58.250+0000:I have found a solution to implement the split by comma for any endpoint URI. See my patch. 

I first wanted to do it in the RouteDefinition.from(String) but then the spring dsl would not work. So I did the split in the helper which is called from Java and Spring DSL.

What do you guys think? In case we have a problem with the comma being used in come components we can refine the split regex to check if after the comma there is a component id and a colon. 
cschneider:1340776702:2012-06-27T13:58:22.672+0000:1340776702:2012-06-27T13:58:22.672+0000:I have also added the dynamicep component code if wedecide to do it this way.
cschneider:1382398282:2013-10-22T07:31:22.139+0000:1382398282:2013-10-22T07:31:22.139+0000:After looking into this again I think it is not worth to complicate endpoint syntax for this use case. It should be possible to adapt toolings to the syntax we already offer."
0,CAMEL-5398,Improvement,Minor,None,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Henryk Konsek,0,2,2012-06-26 11:19:06+00:00,2015-03-25 10:24:02+00:00,"Inspired by issue [1] regarding performance of JMS headers, I performed a little search in IDE and found out that there's pretty much not optimized String.replaceAll() calls.


I think it will be good to search the code base for such calls again and replace them with references to the static pre-compiled java.util.regex.Patterns. Of course if such action makes sense (like in StringHelper#removeQuotes()).


[1] https://issues.apache.org/jira/browse/CAMEL-5396","davsclaus:1340680941:2012-06-26T11:22:21.678+0000:1340680941:2012-06-26T11:22:21.678+0000:Frankly the compiler should IMHO be able to optimize this code itself, as if the input to the replace methods is a fixed string, then its not changed at runtime. And thus the compiler could take advantage of that.

Could you maybe do a test to see if you can measure and speed difference?
hekonsek:1340683782:2012-06-26T12:09:42.709+0000:1340683782:2012-06-26T12:09:42.709+0000:Actually executing the loop below:

for(int i = 0; i < 1000000; i++) {
  Pattern.compile(RandomStringUtils.randomAlphabetic(100));
}

...takes ~10 seconds.

I've never benchmarked the famous Pattern.compile() efficiency but If I can parse million of random 100-character long alphanumeric patterns in 10 seconds (on my 700$ laptop), then I screw Pattern precompilation for the rest of my life :) .
hekonsek:1340748105:2012-06-27T06:01:45.483+0000:1340748105:2012-06-27T06:01:45.483+0000:After playing more with CAMEL-5396, I come with conclusion that we could benefit from Pattern.compile() optimization in some cases.

I'm reopening this issue - I'll take a closer look at each individual case.
davsclaus:1362655075:2013-03-07T19:17:55.323+0000:1362655075:2013-03-07T19:17:55.323+0000:Any update on this?
hekonsek:1364264340:2013-03-26T10:19:00.127+0000:1364264340:2013-03-26T10:19:00.127+0000:Not really as this issue got pretty low priority.
davsclaus:1427247113:2015-03-25T09:31:53.925+0000:1427247113:2015-03-25T09:31:53.925+0000:I am optimizing the parts in camel-core that is relevant."
0,CAMEL-5397,Task,Major,None,None,"
None
",Resolved,Won't Fix,2.11.0,Henryk Konsek,Henryk Konsek,0,2,2012-06-26 06:58:27+00:00,2012-09-25 19:24:53+00:00,"Camel Extra is always in the tail of ""regular Camel"". This is sad and should be addressed  .


In order to deal with Camel Extra backlog we need to:



tag 2.10 release (so Camel Extra can be in sync mainstream Camel)
release 2.9 and 2.10 artifacts
start syncing artifacts from apache-extra with Maven Central (via
Sonatype I guess)
make sure that whenever new version of Camel (major and minor) is
released, we release Camel-Extra as well
add camel-extra to Jenkins
add e-mail notifications on SVN changes
rethink Camel-Extra voting process (there is no such now)
migrate issues from Google Project into Jira
configure Maven rat plugin","muellerc:1341148720:2012-07-01T21:18:40.645+0000:1341148720:2012-07-01T21:18:40.645+0000:I started to do some house keeping in camel-extra. Most of the files didn't had the right license headers which I fixed today. But because of this, I think we cannot release camel-extra 2.9.x in any public Maven repo.

I would like to have a very similar release procedure as we have for our normal Camel releases [1]. I started to get the rat plugin working - still in progress...

[1] http://camel.apache.org/release-guide.html
hekonsek:1341210300:2012-07-02T14:25:00.874+0000:1341210300:2012-07-02T14:25:00.874+0000:Regarding the licenses in releases - we can release Camel-extra 2.9 to the old Google-code SVN repository. The first version of camel-extra in public repo can be 2.10.
hekonsek:1341210371:2012-07-02T14:26:11.374+0000:1341210371:2012-07-02T14:26:11.374+0000:Regarding the release process - I think that 2.11 will be a good starting point to make it more formal.
hekonsek:1341210952:2012-07-02T14:35:52.123+0000:1341210952:2012-07-02T14:35:52.123+0000:As I understand [1], we want to deploy snapshots and publish to public repo via OSS sonatype repository.

According to the Sonatype OSS guide [2] we should inherit our parent POM from their org.sonaptype.oss:oss-parent:7 POM. Since we already inherit from camel-parent and Maven doesn't support multiple inheritance, we need to copy configuration from the oss-parent parent POM and add it to camel-extra parent manually.

I've done it and committed in rev894. Christian, could you take a look at my commit?

[1] https://issues.sonatype.org/browse/OSSRH-1465
[2] https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
hekonsek:1348572293:2012-09-25T19:24:53.784+0000:1348572293:2012-09-25T19:24:53.784+0000:Camel-Extra issues will be hosted on Google Issues [1] from now on.

[1] http://code.google.com/a/apache-extras.org/p/camel-extra/issues/list"
0,CAMEL-5396,Improvement,Major,2.9.2,2.11.0,"

patch
performance

",Resolved,Fixed,2.11.0,Claus Ibsen,Mark Hillary,0,4,2012-06-25 16:48:33+00:00,2012-08-28 13:32:54+00:00,"The current default implementation uses String.replace/replaceAll to escape the illegal characters in the header key. This is unfortunate because replace/replaceAll are implemented in terms of regular expressions which makes the escaping quite costly for something that is executed for every single message. Also it's quite likely that the headers will be identical for every single message that's published via JMS. 


The attached patch makes two changes;



Use Commons Lang StringUtil.replaceEach which using a StringBuilder internally to do the replacement. This adds a dependency on Commons Lang.
Cache the output of StringUtil.replaceEach in a ConcurrentHashMap. This could be moved to a separate class if caching every key is a concern. Or this could be changed to use an LRUCache","davsclaus:1340672151:2012-06-26T08:55:51.413+0000:1340672151:2012-06-26T08:55:51.413+0000:We do not want any more 3rd party JAR dependencies. And using the JDK library is a good thing.
davsclaus:1340672296:2012-06-26T08:58:16.590+0000:1340672296:2012-06-26T08:58:16.590+0000:We could use a pre compiled pattern, instead of replace from String. Then that should be reusable and thus faster. Can you try with that?
hekonsek:1340679417:2012-06-26T10:56:57.412+0000:1340679454:2012-06-26T10:57:34.883+0000:I've added a patch (CAMEL-5396.patch) that caches java.util.regex.Pattern as static members and then uses Pattern.mattcher.replaceAll() on them. This will save us compilation of the RegEx patterns.

There is no dependency for Apache Commons now.

I've removed the map cache however. We cannot just store all processed keys in maps. In case of long running routers this will lead to memory leaks. The option will be to use some LRU cache (from Commons[1] or Guava[2]). However if we do not want to have dependendency to Commons or Guava in JMS module, we should consider providing some kind of general cache service abstraction for Camel that could be retrieved from the Camel registry.

[1] http://commons.apache.org/collections/apidocs/org/apache/commons/collections/map/LRUMap.html
[2] http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/cache/Cache.html
hekonsek:1340679545:2012-06-26T10:59:05.032+0000:1340679545:2012-06-26T10:59:05.032+0000:Claus, could you take a look at my patch and possibly apply it to the code base?
davsclaus:1340681056:2012-06-26T11:24:16.752+0000:1340681056:2012-06-26T11:24:16.752+0000:There is a option to turn off this so you can use the header keys as is
jmsKeyFormatStrategy=passthrough

hekonsek:1340684171:2012-06-26T12:16:11.373+0000:1340684171:2012-06-26T12:16:11.373+0000:As I mention in CAMEL-5398 value added by Pattern.compile() optimization is terribly low and not worth to clutter the code with it.

The thing we can still address in this issues is caching replaced keys in LRU cache. But to do it without external dependencies (Commons, Guava), we need to use (introduce?) some kind of cache abstraction available for JMS module.
mhillary:1340711382:2012-06-26T19:49:42.466+0000:1340711559:2012-06-26T19:52:39.159+0000:I believe there is an LRUCache in camel-core. Though I don't have access to my pc right now to check.

On the regex side, I've had a go at writing the replacement as a single regex and using a stringbuffer (unfortunately regexs were added to the Jdk before stringbuilders. However it doesn't really matter these days as the compiler will optimise away the locks in most cases). It is quite a bit faster in my tests versus string.replace/all though still slower than the StringUtils version.

I will post the numbers and a new patch when I get home.
mhillary:1340711982:2012-06-26T19:59:42.377+0000:1340711982:2012-06-26T19:59:42.377+0000:Claus, would you prefer a patch that seperates the two concerns? Also would it be acceptable to use the LRUCache in camel core from camel-jms?
mhillary:1340716235:2012-06-26T21:10:35.110+0000:1340716235:2012-06-26T21:10:35.110+0000:Here are the numbers from my tests;

DefaultJmsKeyFormatStrategy: 5.3748ms
Precompiled Regex: 1.93471ms
String Utils: 0.83326ms

Each test exercises the different method of string escaping 1000 times. With these numbers being the average of running the tests 10 times.


muellerc:1340718039:2012-06-26T21:40:39.394+0000:1340718039:2012-06-26T21:40:39.394+0000:In camel-core we have an org.apache.camel.util.LRUCache<K, V>
mhillary:1340723442:2012-06-26T23:10:42.937+0000:1340723442:2012-06-26T23:10:42.937+0000:Ok a bit of bad news the LRUCache included in camel core is an order of magnitude slower than either commons collections LRUMap or the ConncurrentHashMap in the JDK. Which is a shame because it's used all over the place.
hekonsek:1340747975:2012-06-27T05:59:35.826+0000:1340747975:2012-06-27T05:59:35.826+0000:I've benchmarked DefaultJmsKeyFormatStrategy with my pattern precompilation patch (attached to the issue). In fact it makes DefaultJmsKeyFormatStrategy to run faster from 20% up to 80% (depending on the generated keys).

I propose to apply it to the code base as it is a safe change (due to the nice test coverage and non-invasive changes). Then we can think about improving DefaultJmsKeyFormatStrategy with Camel's LRUCache.

BTW Mark maybe you could create a new issue regarding the efficiency of the Camel's LRUCache?
davsclaus:1346131974:2012-08-28T13:32:54.744+0000:1346131974:2012-08-28T13:32:54.744+0000:Henryks patch improved the performance.

However not using any regexp is even faster, so I added a simple replaceAll method to StringHelper in camel-core that is based on a StringBuilder logic. Its at least 2x faster than the regexp on my testing."
0,CAMEL-5395,Improvement,Minor,None,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Henryk Konsek,Claus Ibsen,0,2,2012-06-25 11:19:49+00:00,2012-06-25 15:59:23+00:00,"If using camel-stream to eg print to system out, and the message body is a null, you will get an error about type conversion to null is not possible.


The stream component should be improved to ignore null bodies.","hekonsek:1340594801:2012-06-25T11:26:41.755+0000:1340594801:2012-06-25T11:26:41.755+0000:I've been playing around with Stream component lately so I'd be happy to handle this.
hekonsek:1340604708:2012-06-25T14:11:48.264+0000:1340604708:2012-06-25T14:11:48.264+0000:Null bodies sent to StreamProducer are now skipped (and logged).

Added appropriate unit test for that case.
hekonsek:1340604776:2012-06-25T14:12:56.101+0000:1340604776:2012-06-25T14:12:56.101+0000:Claus, could you apply my patch to the trunk?
hekonsek:1340605064:2012-06-25T14:17:44.498+0000:1340605064:2012-06-25T14:17:44.498+0000:I've updated the documentation [1] to make clear how Stream Producer handles null messages.

[1] https://cwiki.apache.org/confluence/display/CAMEL/Stream
davsclaus:1340611163:2012-06-25T15:59:23.683+0000:1340611163:2012-06-25T15:59:23.683+0000:Thanks Henryk for the patch. Its on the branches now."
0,CAMEL-5394,Improvement,Minor,2.9.2,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Marco Crivellaro,1,2,2012-06-25 10:30:35+00:00,2015-07-11 14:14:14+00:00,it would be great to have the possibility to define a dynamic timeout for recipientList in a similar way of aggretate,"davsclaus:1341548882:2012-07-06T12:28:02.393+0000:1341548882:2012-07-06T12:28:02.393+0000:A bit tough to implement, as its logic are in multicast processor and the timeout value can change from exchange to exchange etc."
0,CAMEL-5393,Task,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-25 07:43:25+00:00,2012-06-25 07:49:56+00:00,"Spring WS 2.0.3 is the last release that supports Spring 3.0. 
Any newer release requires Spring 3.1.0+ onwards.


We should use this version in the Camel 2.10 release so we have an out of the box camel-spring-ws component that works for any Spring users.","davsclaus:1340581791:2012-06-25T07:49:51.973+0000:1340581791:2012-06-25T07:49:51.973+0000:We can now install camel-spring-ws out of the box in Karaf / ServiceMix

{code}
karaf@root> features:install camel-spring-ws
Refreshing bundles org.springframework.context.support (57), org.springframework.context (56)
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Spring    Level  Name
[  64] [Active     ] [            ] [       ] [   50] camel-core (2.11.0.SNAPSHOT)
[  65] [Active     ] [Created     ] [       ] [   50] camel-karaf-commands (2.11.0.SNAPSHOT)
[  72] [Active     ] [            ] [       ] [   50] geronimo-jta_1.1_spec (1.1.1)
[  73] [Active     ] [            ] [       ] [   50] camel-spring (2.11.0.SNAPSHOT)
[  74] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)
[ 101] [Active     ] [            ] [       ] [   50] JavaMail API (compat) (1.4.5)
[ 102] [Active     ] [            ] [       ] [   50] Apache ServiceMix :: Bundles :: smack (3.2.1.1)
[ 103] [Active     ] [            ] [       ] [   50] Spring XML (2.0.3.RELEASE)
[ 104] [Active     ] [            ] [       ] [   50] Spring Web Services Core (2.0.3.RELEASE)
                                       Fragments: 105
[ 105] [Resolved   ] [            ] [       ] [   50] Spring Web Services Support (2.0.3.RELEASE)
                                       Hosts: 104
[ 106] [Active     ] [            ] [       ] [   50] camel-spring-ws (2.11.0.SNAPSHOT)
{code}"
0,CAMEL-5392,Improvement,Major,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,4,2012-06-25 06:59:46+00:00,2012-08-13 14:37:08+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bean-Expression-Performance-tp5715003.html


A bean expression is dynamic evaluated on each exchange. But the bean type and method may match previous evaluation, and therefore the introspection can be locally cached to avoid re introspection.","mhillary:1340595791:2012-06-25T11:43:11.396+0000:1340595791:2012-06-25T11:43:11.396+0000:Create the BeanHolder in the MethodCallExpression and pass to the BeanExpression so that it's only created once and not for each evaluation of the expression
davsclaus:1340610221:2012-06-25T15:43:41.952+0000:1340610221:2012-06-25T15:43:41.952+0000:Thanks for the patch.

I polished it a bit. And added an unit test as well.
mhillary:1340611656:2012-06-25T16:07:36.829+0000:1340611656:2012-06-25T16:07:36.829+0000:Great, thanks for applying the patch. 

I considered making the BeanHolder volatile but decided I didn't know enough about internals of Camel to decided if it was safe or not.
pbzdyl:1343966613:2012-08-03T12:03:33.116+0000:1344839828:2012-08-13T14:37:08.284+0000:FYI: This change also fixes XPathBuilder thread local memory leak reported in [CAMEL-3813]. Please, take a look at more info in [my comment|https://issues.apache.org/jira/browse/CAMEL-3813?focusedCommentId=13424875&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13424875]."
0,CAMEL-5391,Bug,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Freeman Yue Fang,Freeman Yue Fang,0,1,2012-06-25 01:03:52+00:00,2012-06-25 01:07:52+00:00,No Desc,"ffang:1340557672:2012-06-25T01:07:52.015+0000:1340557672:2012-06-25T01:07:52.015+0000:commit fix
http://svn.apache.org/viewvc?rev=1353371&view=rev"
0,CAMEL-5390,Improvement,Major,2.10.0,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,2,2012-06-24 16:33:00+00:00,2012-11-06 10:33:19+00:00,"Imagine a sequential JMS invocation across Camel routes, such as the following:



<route>
    <from uri=""timer:foo?fixedRate=true&amp;period=10000"" />
    <inOut uri=""activemq:queue:test1"" />
    <inOut uri=""activemq:queue:test2"" />
</route>




The camel-jms consumer listening on test1 will set the JMSCorrelationID header to the JMSMessageID for that exchange.


When the response returns to the route and sent to test2, this consumer also uses the same JMSCorrelationID as before.


IMHO, this behaviour is incorrect from the pragmatic perspective. Why should test2 reuse the Message ID from test1 after all?


Despite that, the correlation works for simple cases, but for complex routing with parallel JMS exchanges, it doesn't because the correlation ID is not unique for each exchange. Consider the following splitter:




        <route>
            <from uri=""timer:foo?fixedRate=true&amp;period=10000"" />
            <setBody><constant>1,2,3,4,5</constant></setBody>
            <inOut uri=""activemq:queue:test1"" />
            <split parallelProcessing=""true"">
                <tokenize token="","" />
                <inOut uri=""activemq:queue:test2"" />
            </split> 
            <to uri=""log:Finished?showAll=true"" />
        </route>
        
        <route>
            <from uri=""activemq:queue:test1"" />
            <to uri=""log:Received?showAll=true"" />
        </route>
 
         <route>
            <from uri=""activemq:queue:test2"" />
            <to uri=""log:Received?showAll=true"" />
            <setBody><constant>reply</constant></setBody>
            <delay><constant>100</constant></delay>
        </route>




There are several solutions here:



Remove the JMSCorrelationID header before each request to test2
Enable the useMessageIDAsCorrelationID option on both producer and consumer endpoints
Create a new option to assign a unique ID to the JMSCorrelationID header



The downside of 2 is that the message ID is only assigned after the JMS dispatch, so the component updates the correlation map with the final JMSMessageID after the JMS dispatch. Also, camel-jms is also prepared to handle cases where the reply comes in before the map update has occurred, by waiting 5 seconds if an unknown correlation ID is received, blocking the receipt of any further replies. You will agree with me this is inefficient and flaky for enterprise deployments.


That's where the upside of 3 lies. By expressly setting a static unique ID as the correlation ID, we get rid of these race conditions and inefficiencies.


I propose calling this option 'assignUniqueCorrelationID'.


I'm happy to submit a patch for this, targeting 2.10.1.","davsclaus:1340673239:2012-06-26T09:13:59.247+0000:1340673239:2012-06-26T09:13:59.247+0000:Ad 1)
Ideally if Camel auto assign a JMSCorrelationID, then that id could be removed when the reply comes back, as its not an explicit configured correlation id done by the end user

Ad 2)
Yeah this works in the sense the broker assigns a new ID for each message send to it, and don't reuse a previous message id.
The caveat is that the JMSMessageID is only available to Camel after the message has been sent, so we have extended logic to deal with that.

Ad 3)
This is what Camel does today by default, auto assign unique correlation ID, if no JMSCorrelationID is preset.
Either we can do as #1, or we can introduce a new option to force creating a new unique ID even if JMSCorrelationID already exists. Then ppl can configure this on the component level to have it in use always.

Option #1 is most compelling as its transparent and no ppl need to enable any option etc. The only downside is that the JMSCorrelationID header would be removed when the reply message is processed, where as before it was present.

4)
A new solution could be.

We could prefix the generated JMSCorrelationID (from #1) by Camel or Auto or Generated etc. eg some token, so we know its an auto generated ID, and therefor the producer can ""detect"" this and then re-assign a new auto generated id. Then all together this is transparent for the end users, and no changes whatsoever is needed at all.
raulvk:1343029021:2012-07-23T15:37:01.363+0000:1343029021:2012-07-23T15:37:01.363+0000:Yes, 4) should work too. Could there be a reason why a user would want to reuse an old JMSCorrelationID? Just saying because by introducing #4 we alter past behaviour unless we introduce an option flag to negate/enable the correlation ID re-generation. In that case, I would prefer to be the least intrusive and go with #3, i.e. an option to force a generation of a new, explicit JMSCorrelationID with every send.
raulvk:1347967240:2012-09-18T19:20:40.545+0000:1347967240:2012-09-18T19:20:40.545+0000:Claus, different day, fresh view. I think I misunderstood your proposal #4, now it makes more sense! I think this will be my first commit at Camel ;)
raulvk:1348067027:2012-09-19T23:03:47.486+0000:1348067027:2012-09-19T23:03:47.486+0000:Fixed in r1387808.
raulvk:1348067671:2012-09-19T23:14:31.722+0000:1348067671:2012-09-19T23:14:31.722+0000:New behaviour of JmsProducer: The ""Camel-"" prefix is prepended to the generated JMSCorrelationId. The key is regenerated with every send when a previous JMSCorrelationId exists and it begins with ""Camel-"".

Added two tests: {{JmsInOutParallelTest}} which represents the route in the ticket description and {{JmsInOutRepeatedInvocationsTest}} to test sequential sends to the same JMS endpoint.
davsclaus:1352168883:2012-11-06T10:28:03.230+0000:1352168883:2012-11-06T10:28:03.230+0000:Since this is transparent I would like to backport this to 2.10 as well, as its being included in the SMX 4.5.x releases."
0,CAMEL-5389,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,2,2012-06-24 14:47:27+00:00,2015-07-11 14:16:04+00:00,"It would be nice if you could just define ProducerTemplate / ConsumerTemplate as a parameter to a bean method, and have the bean component auto map an instance to these, using a shared template created from camel context.


We could even support @EndpointInject, @Produce, @Consume as well, so you can do


        public void handleError(@Properties Map properties, @EndpointInject(uri = ""seda:retry"") ProducerTemplate retry) {


Currently you can map those as fields on the bean, but its not possible on types, such as in a method signature.",
0,CAMEL-5388,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Benjamin P. O'Day,Claus Ibsen,0,2,2012-06-24 13:12:49+00:00,2012-11-17 05:48:04+00:00,"The karaf command context-info lists many things. We should have a --verbose option to limit what it display by default. Because it displays all the endpoints in use, and if people use dynamic endpoints and whatnot, then that list can be very long (up till 1000 by default).


And besides there is a new endpoint command as well now. So we could either



add verbose option
not list endpoints anymore



We should possible add more stats such as
Number of running routes: 15
Number of not running routes: 2


eg to give a quick overview of how many routes is running / not running etc.


Yes you can use the route-list command for that. But context-info should be a nice single command for a good overview of the Camel app.",boday:1353102484:2012-11-17T05:48:04.142+0000:1353102484:2012-11-17T05:48:04.142+0000:see r1410699
0,CAMEL-5387,Improvement,Major,None,2.11.0,"
None
",Resolved,Won't Fix,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-24 10:08:57+00:00,2013-01-19 10:09:45+00:00,"The camel-http4 should support the async routing engine in the producer.


eg it should use the process(exchange, callback) method, and leverage the native async api from http4 client.",davsclaus:1358561385:2013-01-19T10:09:45.879+0000:1358561385:2013-01-19T10:09:45.879+0000:The Async API in http client 4.x really sucks. Its only available in a fluent-hc component that uses a totally different API than the regular http client.
0,CAMEL-5386,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-24 10:04:37+00:00,2012-06-24 12:58:59+00:00,"You can create regular threads pools using



<threadPool>
ThreadPoolBuilder



We should improve these to allow to create scheduled thread pools as well. Currently this is not possible.


This is related to CAMEL-5385 that would need this feature as well.",
0,CAMEL-5385,New Feature,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,2,2012-06-24 09:49:16+00:00,2012-06-24 12:58:48+00:00,"For example if you have many routes that starts from a file endpoint, then they are scheduled consumers, each using its own private thread pool with 1 scheduled thread.


So for example having 30 file routes, means 30 threads. The JDK scheduled thread pool is always a fixed size.


We should allow people to configure a custom thread pool, so they can use a single shared pool, with a number of fixed thread, that is shared among the 30 file consumers.","davsclaus:1340513928:2012-06-24T12:58:48.669+0000:1340513928:2012-06-24T12:58:48.669+0000:There is a new scheduledExecutorService option you can configure on the scheduled endpoints, such as file/ftp etc."
0,CAMEL-5384,Task,Major,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Claus Ibsen,0,1,2012-06-23 12:39:52+00:00,2012-06-23 19:53:16+00:00,"Testing the RC of Camel 2.10 revealed that the wireTap in Java DSL is not fully backwards compatible in certain situations.


See nabble
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-10-0-tp5714768.html",
0,CAMEL-5383,Improvement,Major,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Henryk Konsek,0,5,2012-06-22 12:12:41+00:00,2013-07-18 08:49:00+00:00,"JDBC Component could (optionally?) add list of column names (retrieved from resultMetaData) to the message headers.


Claus suggested something like CamelJdbcColumnNames : List<String> .","toebez:1365923745:2013-04-14T15:15:45.746+0000:1365923745:2013-04-14T15:15:45.746+0000:start working on it. try to see if i can contribute to camel
devendra0008@yahoo.com:1367900903:2013-05-07T12:28:23.090+0000:1367900903:2013-05-07T12:28:23.090+0000:G'day Henryk, I'm a new contributor. Is there a way to take ownership of an issue/enhancement and drive it?
Thanks
-Dev
muellerc:1367925180:2013-05-07T19:13:00.556+0000:1367925180:2013-05-07T19:13:00.556+0000:Create a patch and attach it here. Read first:
- http://camel.apache.org/contributing.html
- http://camel.apache.org/building.html
devendra0008@yahoo.com:1368561454:2013-05-15T03:57:34.429+0000:1368561454:2013-05-15T03:57:34.429+0000:G'day Chris, Henryk,

Can you please review the unit test to see if this is exactly what you are looking for?

Thanks
-Dev
devendra0008@yahoo.com:1368663614:2013-05-16T08:20:14.991+0000:1368663614:2013-05-16T08:20:14.991+0000:Hi Chris,
I'm having trouble with my IDE and cant create a patch. Can you please import the attached classes into your workspace and give this code a try?
Instead of returning a List of columnNames, I thought it would be a good idea to return a Set of columnNames.
Please let me know your thoughts.
Cheers
devendra0008@yahoo.com:1369180243:2013-05-22T07:50:43.508+0000:1369180243:2013-05-22T07:50:43.508+0000:Hi Chris, did you get a chance to review the attached classes?

Thanks
-Dev
davsclaus:1369438983:2013-05-25T07:43:03.245+0000:1369438983:2013-05-25T07:43:03.245+0000:Thanks for the patch."
0,CAMEL-5352,Task,Major,2.10.0,None,"
None
",Resolved,Fixed,2.10.0,Ioannis Canellos,Claus Ibsen,0,1,2012-06-11 07:49:38+00:00,2012-06-13 04:48:36+00:00,"camel-hbase is a new component.


We need documentation for that before the 2.10 release.",
0,CAMEL-5351,Improvement,Major,2.10.0,2.10.0,"

twitter

",Resolved,Fixed,2.10.0,Claus Ibsen,Bruno Borges,0,2,2012-06-11 04:11:32+00:00,2012-06-11 07:07:23+00:00,"Tweeting a StatusUpdate gives more power, like setting the 'inReplyToStatusId' property.


This patch will let the UserProducer to tweet Exchanges that have either a String or a StatusUpdate object within its body.","bruno.borges:1339360013:2012-06-11T04:26:53.876+0000:1339360013:2012-06-11T04:26:53.876+0000:correct patch
davsclaus:1339369643:2012-06-11T07:07:23.643+0000:1339369643:2012-06-11T07:07:23.643+0000:Thanks for the patch.

I fixed the CS."
0,CAMEL-5350,Improvement,Minor,None,2.10.0,"

scala

",Resolved,Fixed,2.10.0,Claus Ibsen,Bruno Borges,0,2,2012-06-11 01:41:02+00:00,2012-06-12 13:08:28+00:00,"The new Scala Maven Plugin is this one:


<plugin>
  <groupId>net.alchim31.maven</groupId>
  <artifactId>scala-maven-plugin</artifactId>
  <version>3.0.2</version>
</plugin>


This should be used in camel-scala pom.xml file, and also in the camel-archetype-scala","davsclaus:1339368963:2012-06-11T06:56:03.035+0000:1339368963:2012-06-11T06:56:03.035+0000:Is this the official new maven plugin? Is there any news posted that tells people to use this one instead of the existing/old ?
bruno.borges:1339412626:2012-06-11T19:03:46.706+0000:1339412626:2012-06-11T19:03:46.706+0000:Please read:

https://github.com/davidB/scala-maven-plugin/wiki/frequently-asked-questions


bruno.borges:1339412721:2012-06-11T19:05:21.548+0000:1339412733:2012-06-11T19:05:33.887+0000:Actually, this is the official post:

http://posterous.implicit.ly/scala-maven-plugin-302
bruno.borges:1339477708:2012-06-12T13:08:28.869+0000:1339477708:2012-06-12T13:08:28.869+0000:Cool! Thanks Claus"
0,CAMEL-5349,New Feature,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-09 12:45:04+00:00,2012-06-09 13:08:06+00:00,"When unit testing you may use properties from osgi config admin, or external resources and whatnot.


We should make it easier to provide a java.util.Properties from the unit test source code. 


See nabble
http://camel.465427.n5.nabble.com/Overwrite-blueprint-properties-in-camel-blueprint-tests-tp5710948.html",davsclaus:1339218486:2012-06-09T13:08:06.428+0000:1339218486:2012-06-09T13:08:06.428+0000:Updated docs. See the using property placeholder docs for details.
0,CAMEL-5348,Bug,Minor,2.9.2,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Willem Jiang,Mark Waller,0,1,2012-06-08 14:56:49+00:00,2012-06-11 07:08:02+00:00,Similar to issue KARAF-760 the context.getUptime() reports invalid durations - such as '19 days 54 hours'. Problem is in org/apache/camel/util/TimeUtils.java,
0,CAMEL-5347,Improvement,Major,2.10.0,None,"
None
",Resolved,Fixed,2.10.0,Robert Davies,Robert Davies,0,1,2012-06-08 11:03:22+00:00,2012-06-08 11:59:02+00:00,MQTT is a light weight messaging protocol for small sensors and mobile devices - see http://mqtt.org,rajdavies:1339127942:2012-06-08T11:59:02.399+0000:1339127942:2012-06-08T11:59:02.399+0000:Initial MQTT Component added by SVN revision 1348030
0,CAMEL-5346,Bug,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,1,2012-06-08 06:34:02+00:00,2012-06-09 13:18:31+00:00,Just found the solr bundle is the dependencies of http4 client by running the validation on the apache-camel feature.,"njiang:1339108686:2012-06-08T06:38:06.427+0000:1339108686:2012-06-08T06:38:06.427+0000:I just checked camel-2.9.x feature, as we are using the solr 3.5.x, it doesn't has the dependency of http4 client. We don't need to port this patch to camel 2.9.x."
0,CAMEL-5345,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,1,2012-06-08 05:27:57+00:00,2012-06-09 13:23:21+00:00,"When upgrade the hadoop-core to 1.0, the code just use the jaxrs interface for management and doesn't need the jaxws api any more.","njiang:1339107985:2012-06-08T06:26:25.337+0000:1339107985:2012-06-08T06:26:25.337+0000:The jaxws API dependency is introduced by camel-hdfs, we could avoid it by introduce a Holder class into the camel-hdfs.
It will make the dependencies much clear, as the Holder class is used to handler the stream of camel-hdfs it will not effect the user unless they do some customization of camel-hdfs component.

"
0,CAMEL-5344,Bug,Major,2.8.4,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Rodrigo Vieira Couto,0,2,2012-06-07 22:02:06+00:00,2012-06-08 06:12:48+00:00,"If you pass a query using '#' in its body, through the CamelSqlQuery header, it doesn't get translated.


The replacement happens on SqlComponent only considering queries placed on the endpoint's URI.","davsclaus:1339107168:2012-06-08T06:12:48.621+0000:1339107168:2012-06-08T06:12:48.621+0000:This is by design, the header is using a proper SQL query with ? as placeholders. This is also what's being documented on the sql component page."
0,CAMEL-5343,Improvement,Minor,2.9.2,"2.10.1, 2.11.0","
None
",Closed,Fixed,"2.10.1, 2.11.0",Christian Müller,Christian Müller,0,2,2012-06-07 18:12:38+00:00,2012-07-23 21:43:30+00:00,See http://camel.465427.n5.nabble.com/camel-aws-s3-get-only-files-I-need-td5714095.html,davsclaus:1341548669:2012-07-06T12:24:29.064+0000:1341548669:2012-07-06T12:24:29.064+0000:Patches is welcome.
0,CAMEL-5342,Bug,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Willem Jiang,Mikhail Moussikhine,0,3,2012-06-07 01:33:39+00:00,2012-06-14 13:25:01+00:00,"Package com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru is included/shaded inside the camel-core jar.


It is not very nice if concurrentlinkedhashmap-lru.jar is already on the path. It is a deal breaker, if their versions are different. For example cassandra-1.1.1 requires ConcurrentLinkedHashMap$Builder.maximumWeightedCapacity(), which is missing from the version included in camel.


It would be nice if concurrentlinkedhashmap-lru was included as a normal dependency. Comment in the pom.xml says ""Shade the googlecode stuff for OSGi"". Well, if that is strictly required, maybe it could be better included in camel-core-osgi package.


In any case, if it must be shaded at all, it would be safer to use relocation property of the maven-shade-plugin. In this case, camel could stay with the version it wants, without conflicting with explicit dependencies.","ben.manes:1339102664:2012-06-08T04:57:44.558+0000:1339102664:2012-06-08T04:57:44.558+0000:CLHM v1.3 includes an OSGi manifest, if that helps.
njiang:1339651501:2012-06-14T13:25:01.123+0000:1339651501:2012-06-14T13:25:01.123+0000:Updated the shade plugin configure for it."
0,CAMEL-5341,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Henryk Konsek,Henryk Konsek,0,2,2012-06-06 15:32:44+00:00,2012-06-19 11:24:05+00:00,"Google Guava introduced event bus [1] utility implementing Event Collaboration pattern [2]. I will be nice to provide Guava Event Bus integration feature similar to the Akka Camel integration (i.e. to transparently transport messages using Camel-based routing).


I'll think about possible implementation and provide it later on. Any thoughts on this topic are welcome  . 


[1] http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/eventbus/package-summary.html
[2] http://martinfowler.com/eaaDev/EventCollaboration.html","hekonsek:1339979309:2012-06-18T08:28:29.115+0000:1339979309:2012-06-18T08:28:29.115+0000:I've created Guava Event Bus component.

It can be used both on the consumer and producer side. The idea behind it is to allow client applications using Google Guava [1] and Event Collaboration [2] to transparently integrate their code with the Camel infrastructure.

The nice thing here is that client application can stay unaware of using Camel as the transport and routing layer. Client depends only on Guava libraries.

__________________
Consumer use case:

from(""guava-eventBus:busName?eventClass=com.example.MyNotification"").to(""seda:eventQueue"");

Event bus consumer collects events incoming to the message bus and forward them to the Camel infrastructure.
__________________

Producer use case:

from(""direct:fireEvent"").to(""guava-eventBus:busName"");

Producer is used send body of Camel messages to the Guava event bus (so that client application listeners can consume them).
_______________________

Could somebody take a look at it and hopefully submit it to the trunk? :)

[1] http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/eventbus/package-summary.html
[2] http://martinfowler.com/eaaDev/EventCollaboration.html
davsclaus:1339984842:2012-06-18T10:00:42.245+0000:1339984842:2012-06-18T10:00:42.245+0000:Henryk

Looks good.
I have added a bit more logging, and also I register/unregister the consumer in the start/stop methods, so the lifecycle works.
I renamed the component name to be lower case only, so its like all the other components we have.

Do you mind working on the documentation, so we got that ready for the 2.10 release?
hekonsek:1339985151:2012-06-18T10:05:51.064+0000:1339985151:2012-06-18T10:05:51.064+0000:Glad you like it. :) And of course I'll add the documentation.
davsclaus:1339985427:2012-06-18T10:10:27.340+0000:1339985427:2012-06-18T10:10:27.340+0000:We could consider improving the consumer to support the async routing engine.
http://camel.apache.org/asynchronous-routing-engine.html

Then you can process an event without having threads blocking.
hekonsek:1339985976:2012-06-18T10:19:36.167+0000:1339985976:2012-06-18T10:19:36.167+0000:Good point. I'll take a look at the possibility of making the EventBus consumer asynchronous as soon as I finish the documentation.
hekonsek:1340076245:2012-06-19T11:24:05.668+0000:1340076245:2012-06-19T11:24:05.668+0000:Documentation updated. I see that you've already made Consumer asynchronous so I resolve the issue."
0,CAMEL-5340,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Andrew Firth,0,2,2012-06-06 11:10:45+00:00,2012-06-08 10:26:53+00:00,"We have added support for cross-domain filtering and would like to submit this back to the community.


For example, the following endpoint will enable cross-origin filtering for all origins  for the path ""/cometd"" 
cometd://127.0.0.1:%s?crossOriginFilterOn=true&allowedOrigins=*&filterPath=/cometd","firth:1338952488:2012-06-06T11:14:48.634+0000:1338952488:2012-06-06T11:14:48.634+0000:Attaching a patch of the change.
njiang:1339112535:2012-06-08T07:42:15.022+0000:1339112535:2012-06-08T07:42:15.022+0000:Applied patch with thanks to Andrew. I also update the wiki doc[1] for it.
@Andrew please double check it :)
[1]https://cwiki.apache.org/confluence/display/CAMEL/Cometd
firth:1339122413:2012-06-08T10:26:53.732+0000:1339122413:2012-06-08T10:26:53.732+0000:Looks good, thanks Willem!"
0,CAMEL-5339,Task,Minor,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-06-06 10:22:36+00:00,2012-06-06 10:27:11+00:00,The camel-mail component has a dependency on the activation JAR. This JAR is now embedded in the JDK from 6+. So we should not drag it along on the classpath.,
0,CAMEL-5338,Improvement,Major,2.9.2,None,"
None
",Closed,Won't Fix,3.0.0,Unassigned,Christian Müller,0,2,2012-06-06 08:23:31+00:00,2012-06-28 21:25:54+00:00,"We run into an issue where an exchange with a custom pojo as payload was sent to an multicast and changed in two different sub-routes at the same time (connected by using the direct protocol). The reason is that the Exchange.copy() method ""only"" creates shallow copies of the body (it's the same for the exchange properties and message headers). I think it's a good improvement to check whether the object implements java.lang.Cloneable and in this case create a deep copy of the object.  


[1] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/DefaultExchange.java
[2] https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/MessageSupport.java","davsclaus:1338943735:2012-06-06T08:48:55.464+0000:1338943735:2012-06-06T08:48:55.464+0000:There is an onPrepare option on the EIPs such as multicast you should use for this.
http://camel.apache.org/multicast

I would suggest *not* to change anything in the current logic in the 2.x lifetime.
Also Cloneable is a bit of an anti-pattern as cloning objects in a generic way is hard.
muellerc:1339064596:2012-06-07T18:23:16.009+0000:1339064596:2012-06-07T18:23:16.009+0000:Thanks for the hint Claus, but unfortunately we stick with Camel 2.6 (ServiceMix 4.3) for this application. We found a solution / workaround for it ...

I'm ok to move it to 3.0.
I'm wondering what's the downside of checking whether the Object implements Cloneable and call clone()? In this case it's the responsibility of the user to implement clone() in the right way. And the user is the one who should know how to do it in the right way.
davsclaus:1339207343:2012-06-09T10:02:23.928+0000:1339207343:2012-06-09T10:02:23.928+0000:If you read the effective java book (by Joshua Bloch), there is an item about clone.
He basically says its broken and you should use it with care if you go down that road.

The idea in Camel 2.x was to make end users deal with this, by the onPrepare callbacks. And besides the clone, you may need to do other work as well.

What we could do in your line of idea, is to offer a pluggable SPI, where people can plugin a custom implementation that does the deep cloning. Mind that deep cloning is hard to do generic, as you would need to traverse list/maps, etc. and create new copies of them, and clone the values, and put them into the list, and so forth.

With the pluggable SPI, it can be in line with the other functionality we have for that, documented at
http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html
muellerc:1340804954:2012-06-27T21:49:14.510+0000:1340804954:2012-06-27T21:49:14.510+0000:Copy Constructor versus Cloning: http://www.artima.com/intv/bloch13.html
muellerc:1340805006:2012-06-27T21:50:06.858+0000:1340805006:2012-06-27T21:50:06.858+0000:Claus, if you agree I would close this issue.
davsclaus:1340836637:2012-06-28T06:37:17.464+0000:1340836637:2012-06-28T06:37:17.464+0000:Yeah dont use clone is basically what they say."
0,CAMEL-5337,Task,Major,None,None,"
None
",Resolved,Fixed,"2.8.6, 2.9.3",Willem Jiang,Willem Jiang,0,1,2012-06-06 06:46:39+00:00,2012-06-06 15:12:21+00:00,No Desc,njiang:1338966741:2012-06-06T15:12:21.044+0000:1338966741:2012-06-06T15:12:21.044+0000:Applied patch into camel-2.9.x and camel-2.8.x.
0,CAMEL-5336,Improvement,Major,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Henryk Konsek,Henryk Konsek,0,2,2012-06-06 06:32:08+00:00,2012-06-06 15:55:56+00:00,"Hi,


I've improved the test coverage of Camel Stream component.


In particular I've added:


a) tests for Stream producer writing to the URL output stream (StreamToUrlTest).


b) assertions to StreamSystemOutTest. Previously we've been sending a messages to the System.out but made no assertions about it. This looked like the AssertionFreeTesting [1].  I changed the test to temporarily switch System.out with another PrintStream instance so we could make some assertions on it.


Could somebody take a look at patch and possibly apply it to the trunk?


[1] http://martinfowler.com/bliki/AssertionFreeTesting.html","hekonsek:1338936020:2012-06-06T06:40:20.971+0000:1338936020:2012-06-06T06:40:20.971+0000:I see that we generate a fragment of documentation based on the tests I've changed:

==========================
@Test
public void testStringContent() throws Exception {
    template.sendBody(""direct:in"", ""Hello Text World\n"");
}

@Test
public void testBinaryContent() {
    template.sendBody(""direct:in"", ""Hello Bytes World\n"".getBytes());
}

protected RouteBuilder createRouteBuilder() {
    return new RouteBuilder() {
        public void configure() {
            from(""direct:in"").to(""stream:out"");
        }
    };
}
==========================

I suggest to replace this snippet with dedicated custom code example (without @Test annotations). I can do it if you accept my patch.
davsclaus:1338946147:2012-06-06T09:29:07.505+0000:1338946147:2012-06-06T09:29:07.505+0000:Henryk I upgraded your JIRA account so you can self assign tickets.
hekonsek:1338946347:2012-06-06T09:32:27.615+0000:1338946347:2012-06-06T09:32:27.615+0000:Thanks Claus :) .
hekonsek:1338967474:2012-06-06T15:24:34.855+0000:1338967474:2012-06-06T15:24:34.855+0000:I'm reopening this since I need to update the Stream component documentation. Now usage example in documentation is generated from JUnit snippet - after my modification the snippet will be boilerplated. I'll create neat and clean dedicated code example.
hekonsek:1338969356:2012-06-06T15:55:56.415+0000:1338969356:2012-06-06T15:55:56.415+0000:Ok, documentation updated."
0,CAMEL-5335,Task,Trivial,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Jason Sherman,0,2,2012-06-05 15:15:10+00:00,2012-06-05 15:23:33+00:00,"The documentation on the Loan Broker Example at http://camel.apache.org/loan-broker-example.html is missing code samples and the following error occurs in the page:



Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20




There are seven instances of this error in the page.",davsclaus:1338881013:2012-06-05T15:23:33.352+0000:1338881013:2012-06-05T15:23:33.352+0000:Removed the code example as thats just a pain to keep up to date and whatnot. And its actually and old example and the code is a bit 'ugly'
0,CAMEL-5334,Task,Major,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Babak Vahdat,0,2,2012-06-05 13:31:49+00:00,2013-05-02 02:29:53+00:00,"QuickFIX/J 1.5.1 doesn't run under JDK 7 whereas 1.5.2 does!


We should upgrade to this version as soon as the required SMX bundles are on central.",
0,CAMEL-5333,Bug,Minor,"2.8.5, 2.9.3","2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-06-05 07:59:27+00:00,2012-06-05 08:02:37+00:00,"The camel aggregate example will generate an error every time that someone uses the completion predicate 'STOP'.


The issue is the type converter dont swallow conversion errors anymore.",
0,CAMEL-5332,Task,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,1,2012-06-05 01:23:20+00:00,2012-06-14 13:27:17+00:00,"As CXF 2.6.1 is out, it's time to upgrade it.",
0,CAMEL-5331,Bug,Major,"2.8.5, 2.9.2, 2.10.0","2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Willem Jiang,Gert Vanthienen,0,4,2012-06-04 20:35:34+00:00,2012-06-15 21:47:26+00:00,"When combining a webservice that uses bare SOAP parameter binding with payload mode in camel-cxf, you get this NullPointerException:



java.lang.NullPointerException
        at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:877)
        at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:512)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:457)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
...","gertvanthienen:1338813539:2012-06-04T20:38:59.188+0000:1338813539:2012-06-04T20:38:59.188+0000:I have added a unit test and a (very simplistic) fix for this problem ready in a local git branch, but because I'm not that familiar with the CXF and camel-cxf codebase, I'm attaching it to this issue first before committing it so other people can take a look or perhaps suggest a better solution.
njiang:1339740879:2012-06-15T14:14:39.136+0000:1339740879:2012-06-15T14:14:39.136+0000:@Gert,
The patch looks good, please go ahead to apply it into the trunk.
davsclaus:1339746468:2012-06-15T15:47:48.634+0000:1339746468:2012-06-15T15:47:48.634+0000:Willem, gert is on vacation. Can you commit this, so we get it in the 2.10 release that Hadrian is cutting early next week.
hadrian:1339768046:2012-06-15T21:47:26.346+0000:1339768046:2012-06-15T21:47:26.346+0000:Thanks Gert for the patch"
0,CAMEL-5330,Improvement,Major,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Akitoshi Yoshida,0,2,2012-06-04 19:36:02+00:00,2012-06-07 01:55:17+00:00,"A Camel-CXF's provider endpoint returns an HTTP 200 with an empty SOAP message when it should be returning an HTTP 202 with no content.


This is analogue to the jaxws's Provider behavior implemented in:


CXF-3926 Supporting JAXWS Provider's null response handling (the provider's invoke may return a null to indicate no response should be sent back)


where property jaxws.provider.interpretNullAsOneway at the endpoint determines whether a null is interpreted as a oneway call (i.e. no response).


Concretely, Jaxws 2.2 section 5.1.1 states:
""When an invoke method returns null, it is considered that no response needs to be sent by service.""
This use case assumes there is no information about the operation's MEP (no wsdl, no java annotation).


This offers an option of using a provider endpoint to dynamically change its response behavior based on the retern value.
Namely, if the service returns a non-null value, the response is a normal HTTP 200 with the corresponding payload. In contrast, if the service returns a null, the response becomes an HTTP 202 with no content. 


I think it makes sense to align the Camel-CXF Provider's endpoint to support this behavior.


I am proposing a fix in DefaultCxfBinding to provide this behavior.


Additionally, to simplify the configuration of a provider endpoint,  I think it is practical to introduce a default payload provider SEI so that the provider SEI does not explicitly configured in the endpoint configuration.


I am attaching a patch file including these changes and test cases to illustrate these points.


Could you have a look at this?


Thanks


regards, aki","njiang:1338922505:2012-06-06T02:55:05.749+0000:1338922505:2012-06-06T02:55:05.749+0000:Hi aki,

It looks like your patch is missing the file CxfProviderRouterBeans.xml, can you submit it again ?

Thanks,

Willem
ay:1338944733:2012-06-06T09:05:33.355+0000:1338944733:2012-06-06T09:05:33.355+0000:Hi Willem,
thanks for pointing out the missing file.

I added the file as binary and the svn diff was not picking up the file.

I attached the corrected patch file.

Regards, aki
njiang:1338966796:2012-06-06T15:13:16.182+0000:1338966796:2012-06-06T15:13:16.182+0000:Applied patch into trunk with thanks to Aki.
njiang:1339005317:2012-06-07T01:55:17.233+0000:1339005317:2012-06-07T01:55:17.233+0000:This is an improvement, so I didn't merge the patch into camel 2.9.x branch."
0,CAMEL-5329,Improvement,Minor,2.9.2,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-06-04 10:02:16+00:00,2012-06-04 10:19:19+00:00,"The camel-restlet producer do not preserve headers during routing. We do this with the other http components, such as camel-http.


We should be similar so people dont loose their headers.",
0,CAMEL-5328,Improvement,Major,2.9.1,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Preben Asmussen,0,3,2012-06-04 08:47:08+00:00,2013-04-03 00:04:16+00:00,"Spring PropetyPlaceholderConfigurer support the resolution of nested properties like this example http://robertmarkbramprogrammer.blogspot.dk/2008/02/nested-property-placeholders-in-spring.html


It would be nice if one would be able to use such property resolution feature directly in the camel context eg. in the simple language. 


See http://camel.465427.n5.nabble.com/Support-for-nested-properties-in-propertyplaceholder-td5713905.html",njiang:1345662538:2012-08-23T03:08:58.366+0000:1345662538:2012-08-23T03:08:58.366+0000:Applied the patch into trunk.
0,CAMEL-5327,Task,Minor,2.9.2,2.10.0,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,1,2012-06-03 16:37:52+00:00,2012-06-03 16:41:19+00:00,"Hibernate 3.6.x is supported by Spring 3.0.7, so we should use this version for our Hibernate tests.",
0,CAMEL-5326,Improvement,Major,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-03 14:10:59+00:00,2012-06-03 14:26:51+00:00,"Bindy should newer use locale if not explicit configured to use one, as they will format numbers and whatnot in unexpected ways.


For example an integer with an US locale will have comma as thousand separator, and that dont go well when marshalling to a CSV file, as the comma is also often a separator there.",
0,CAMEL-5325,Task,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Liu Jianhong,0,2,2012-06-03 00:18:54+00:00,2012-06-17 15:21:23+00:00,"This bug is fixed as ""https://issues.apache.org/jira/browse/CXF-2450"", by adding 


<fork>always</fork>
<additionalJvmArgs>-Duser.language=en</additionalJvmArgs>


to cxf-codegen-plugin's configuration section.","includeeasy:1338654100:2012-06-03T00:21:40.318+0000:1338654100:2012-06-03T00:21:40.318+0000:modified pom in camel-cxf-transport
njiang:1338663000:2012-06-03T02:50:00.232+0000:1338663000:2012-06-03T02:50:00.232+0000:What's the exception you got without applying the user.language property?
includeeasy:1338665036:2012-06-03T03:23:56.715+0000:1338665036:2012-06-03T03:23:56.715+0000:Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5:compile (default-compile) on project camel-soap:
Compilation failure: Compilation failure:
[ERROR] D:\devstudio\soa\source\camel\components\camel-soap\target\generated\src\main\java\org\xmlsoap\schemas\soap\envelope\Fault.java:[5,40] 错误: 编码UTF-8的不可映射字符

With the similar error,the folowing components can not build:
camel-soap,camel-cxf,camel-cxf-transport,camel-jmx.

The above error is relative to those maven plugins:

cxf-xjc-plugin,

maven-jaxb2-plugin (need to upgrade to version 0.8.1,see http://java.net/jira/browse/MAVEN_JAXB2_PLUGIN-27 )

cxf-codegen-plugin(need set ""user.language=en"")
njiang:1339114070:2012-06-08T08:07:50.939+0000:1339114070:2012-06-08T08:07:50.939+0000:@Jianghong,
Can you try to build latest camel trunk ?
I just upgrade the cxf version to 2.6.1, it should fix you issue without the work around.
Please double check it.
includeeasy:1339138529:2012-06-08T14:55:29.206+0000:1339138529:2012-06-08T14:55:29.206+0000:Component ""camel-cxf"" and ""camel-cxf-transport"" is OK.

but 
component ""camel-jmx"" has the following errors because it need to upgrade ""maven-jaxb2-plugin"" version to 0.8.1:


[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5:compile (default-compile) on project camel-jmx:
Compilation failure: Compilation failure:
[ERROR] D:\devstudio\soa\source\camel\components\camel-jmx\target\generated-sources\xjc\org\apache\camel\component\jmx\jaxb\TimerN
otification.java:[5,40] 错误: 编码UTF-8的不可映射字符
[ERROR] D:\devstudio\soa\source\camel\components\camel-jmx\target\generated-sources\xjc\org\apache\camel\component\jmx\jaxb\TimerN
otification.java:[5,41] 错误: 编码UTF-8的不可映射字符


component ""camel-soap"" also has similar error because ""${cxf-xjc-utils-version}"" value still is 2.6.0:


[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5:compile (default-compile) on project camel-soap:
 Compilation failure: Compilation failure:
[ERROR] D:\devstudio\soa\source\camel\components\camel-soap\target\generated\src\main\java\org\xmlsoap\schemas\soap\envelope\Fault
.java:[5,40] 错误: 编码UTF-8的不可映射字符
[ERROR] D:\devstudio\soa\source\camel\components\camel-soap\target\generated\src\main\java\org\xmlsoap\schemas\soap\envelope\Fault
.java:[5,41] 错误: 编码UTF-8的不可映射字符

njiang:1339205657:2012-06-09T09:34:17.811+0000:1339205657:2012-06-09T09:34:17.811+0000:I think I can fix the issue of camel-jmx by upgrading the version.
But for the camel-soap, I think we still need to fix it from CXF side.

Do you mind to fill a JIRA in CXF for the xjc plugin?

I will try to use the maven-jaxb2-plugin to generate the code from soap.xsd, which could avoid the CXF side.

Willem
includeeasy:1339209896:2012-06-09T10:44:56.975+0000:1339209896:2012-06-09T10:44:56.975+0000:Ok,already  filled , the Jira address is https://issues.apache.org/jira/browse/CXF-4369
njiang:1339651622:2012-06-14T13:27:02.151+0000:1339651622:2012-06-14T13:27:02.151+0000:@Jianhong
Can you try to build the latest camel trunk in you box?
I already committed a quick fix for it.
includeeasy:1339656485:2012-06-14T14:48:05.319+0000:1339656485:2012-06-14T14:48:05.319+0000:cxf-xjc-plugin is not updated to 2.6.1 version,and ""-Duser.language=en"" settings in cxf-xjc-plugin is not valid.

camel-soap component still has the following errors:

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5:compile (default-compile) on project camel-soap:
 Compilation failure: Compilation failure:
[ERROR] D:\devstudio\soa\source\camel\components\camel-soap\target\generated\src\main\java\org\xmlsoap\schemas\soap\envelope\Fault
.java:[5,40] 错误: 编码UTF-8的不可映射字符
[ERROR] D:\devstudio\soa\source\camel\components\camel-soap\target\generated\src\main\java\org\xmlsoap\schemas\soap\envelope\Fault
.java:[5,41] 错误: 编码UTF-8的不可映射字符
njiang:1339896493:2012-06-17T09:28:13.381+0000:1339896493:2012-06-17T09:28:13.381+0000:@Jianhong,
I just committed a patch to replace the cxf-xjc-plugin with jaxb2-plugin.
Please checkout and build it in your box.

njiang:1339910868:2012-06-17T13:27:48.033+0000:1339910868:2012-06-17T13:27:48.033+0000:Applied the patch into trunk.
includeeasy:1339917683:2012-06-17T15:21:23.073+0000:1339917683:2012-06-17T15:21:23.073+0000:Thank you very much.

Now camel-cxf,camel-cxf-transport, camel-jmx and camel-soap all build successfully without encoding error."
0,CAMEL-5324,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-06-02 17:49:31+00:00,2012-06-02 19:40:30+00:00,"See nabble
http://camel.465427.n5.nabble.com/Input-directory-with-multiple-file-consumers-tp5713788.html


If you run multiple nodes with Camel file consumers competing for files on a SAN then they may pickup the same file, if you use readLock=changed, etc. As the markerFile is not in use.


So ideally we should always use markerFile to prevent other consumers to pickup the file, regardless if they use changed,rename etc. as readLock.",
0,CAMEL-5323,New Feature,Minor,2.9.2,Future,"

maven

",Resolved,Won't Fix,Future,Unassigned,Manuel EVENO,1,3,2012-06-01 15:59:17+00:00,2021-04-19 19:06:34+00:00,"It would be nice to have the ability to fork away after a camel context has started. This is extremely useful for people that run integration tests during a maven build. They could fork an embedded camelContext (for example along with activemq:run), start their integrations tests (with soap ui), then later shut down the embedded instance.",davsclaus:1341548616:2012-07-06T12:23:36.433+0000:1341548616:2012-07-06T12:23:36.433+0000:Patches is welcome.
0,CAMEL-5322,Task,Major,"2.8.5, 2.9.2","2.8.6, 2.9.3","
None
",Resolved,Fixed,"2.8.6, 2.9.3",Gert Vanthienen,Gert Vanthienen,0,1,2012-06-01 11:43:52+00:00,2012-06-01 12:48:45+00:00,"In the Camel 2.9.x and 2.8.x branches, we are currently using ServiceMix' Hadoop bundle version 0.20.203.0_1 - we should upgrade that to 0.20.203.0_2 because the newer version fixes a few issues when using camel-hadoop inside ServiceMix/Karaf.


cfr. https://issues.apache.org/jira/browse/SMX4-1140 and https://issues.apache.org/jira/browse/SMX4-1138","gertvanthienen:1338526125:2012-06-01T12:48:45.658+0000:1338526125:2012-06-01T12:48:45.658+0000:Fixed in http://svn.apache.org/viewvc?view=revision&revision=1345131 for the Camel 2.9.x branch
and backport to the 2.8.x branch in http://svn.apache.org/viewvc?view=revision&revision=1345135"
0,CAMEL-5321,Bug,Major,2.10.0,None,"
None
",Resolved,Fixed,"2.9.3, 2.10.0",Willem Jiang,Scott England-Sullivan,0,4,2012-05-30 23:55:22+00:00,2013-06-01 19:18:40+00:00,"When using the Validator Component with an XSD file from a Jar that contains a relative import, the component will throw a FileNotFoundException.


This is due to the ObjectHelper.loadResourceAsStream(String) operation attempting to load the classpath resource using file path semantics that will not resolve canonically.


Test case and patch to follow.


Thread Reference


Best Regards,
Scott England-Sullivan
http://fusesource.com","sully6768:1338393740:2012-05-31T00:02:20.242+0000:1338393740:2012-05-31T00:02:20.242+0000:Test Case Project
sully6768:1338394099:2012-05-31T00:08:19.756+0000:1338394099:2012-05-31T00:08:19.756+0000:ObjectHelper and unit test patch
njiang:1338405328:2012-05-31T03:15:28.115+0000:1338405446:2012-05-31T03:17:26.802+0000:Applied patch into trunk and 2.9.x branch with thanks to Scott.
BTW, I took the test resources which are not included in the patch from the test resource jars.
 
sully6768:1338406904:2012-05-31T03:41:44.202+0000:1338406904:2012-05-31T03:41:44.202+0000:Willem,

For the test to be accurate you have to leave the resources in the jar file.  When the files are in the source path they are resolved as a file and as such will pass regardless.  It is only when the files are resolved with a ""jar"" protocol that the error can occur.  I wasn't sure how that should be applied in the patch which is why I left it out pending a discussion.

Let me know if you have any further questions.

Scott ES
http://fusesource.com
njiang:1338416723:2012-05-31T06:25:23.100+0000:1338416723:2012-05-31T06:25:23.100+0000:After went through the thread reference and debugging the code, I found we still need to let validator to load the resource from jar file. I will commit a quick fix for that shortly.
njiang:1338416885:2012-05-31T06:28:05.651+0000:1338416885:2012-05-31T06:28:05.651+0000:We need to find a way to do the test without introduce the system scope dependency to the camel-core. Maybe I should move the test to the integration testsuit. 
bvahdat:1338428924:2012-05-31T09:48:44.118+0000:1338428924:2012-05-31T09:48:44.118+0000:The removal of the XSD files through:

http://svn.apache.org/viewvc?view=revision&revision=1344597

Now causes the following test:

{code}
mvn test -Dtest=ValidatorSchemaImportTest
{code}

to fail with:

{code}
...
Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/relativeparent/child/child.xsd
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsInputStream(ResourceHelper.java:92)
	at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:44)
...
{code}

njiang:1338429473:2012-05-31T09:57:53.401+0000:1338429473:2012-05-31T09:57:53.401+0000:@Babak,
Sorry I forgot to remove the ValidatorSchemaImportTest, I will commit a patch shortly."
0,CAMEL-5320,Improvement,Major,2.9.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Nestor Urquiza,0,3,2012-05-30 16:03:57+00:00,2012-11-13 09:48:09+00:00,"download=false could be an option to stop poll consumers from downloading files when all you need is to check for file attributes.


The need was generated from ftp component but it could potentially apply to any file consumer. For more info see the original thread http://camel.465427.n5.nabble.com/Camel-FTP-SFTP-check-instead-of-download-td5713363.html","rnewcomb:1349190366:2012-10-02T23:06:06.088+0000:1349190366:2012-10-02T23:06:06.088+0000:It would be useful to have some clarification about the desired behavior when 'download = false'.

Should the message body contain some value, or should it instead be empty / null?

I propose propagating a null body, similar to the behavior that occurs when Camel optionally sends a null message for empty polling results.
In the case of 'download = false', the route is configured to _not_ return the results that would have otherwise been returned (i.e., the file content). Therefore, an empty message body seems appropriate.

Note that the message recipient could then access the file attributes as such:

 GenericFile<FTPFile> ftpFileInfo = (GenericFile<FTPFile>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE)

Does this seem reasonable?   If not, what content would you expect to see in the message body?
davsclaus:1349236873:2012-10-03T12:01:13.373+0000:1349236873:2012-10-03T12:01:13.373+0000:Yeah I think a null body is best. The headers will contain file information. So no need for exchange property.
nestoru:1349544071:2012-10-07T01:21:11.963+0000:1349544071:2012-10-07T01:21:11.963+0000:Claus is correct. Sorry for the late reply. Thanks!
-Nestor
rnewcomb:1352674518:2012-11-12T06:55:18.090+0000:1352674518:2012-11-12T06:55:18.090+0000:I finally found some time to do this. The patch is attached.
davsclaus:1352771289:2012-11-13T09:48:09.060+0000:1352771289:2012-11-13T09:48:09.060+0000:Thanks Rich for the patch.

I added an unit test to camel-ftp, as we tend to like stuff being tested ;)"
0,CAMEL-5319,Task,Minor,2.9.2,,"
None
",Resolved,Abandoned,None,Claus Ibsen,Christian Müller,0,2,2012-05-29 19:59:37+00:00,2016-04-26 07:12:53+00:00,"If you run 



mvn clean install -Popenjpa




in camel-bam, you get the following exception:



2012-05-29 21:55:05,228 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)
	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)
	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)
	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)
	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)
	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)
	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)
	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)
	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)
	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)
	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)
	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)
	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	... 41 more
2012-05-29 21:55:05,229 [d #0 - seda://a] DEBUG TransactionTemplate            - Initiating transaction rollback on application exception
org.apache.camel.RuntimeCamelException: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1256)
	at org.apache.camel.bam.processor.BamProcessorSupport.onError(BamProcessorSupport.java:151)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:101)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)
	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)
	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)
	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)
	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)
	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)
	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)
	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)
	... 33 more
Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null
	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)
	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)
	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)
	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)
	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)
	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)
	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)
	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)
	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)
	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)
	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)
	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)
	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)
	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)
	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)
	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)
	... 41 more




and the test failed.","davsclaus:1436597057:2015-07-11T14:44:17.451+0000:1436597057:2015-07-11T14:44:17.451+0000:It works with hibernate dialect, it looks as if openjpa has trouble with the auto generated primary keys
davsclaus:1461625973:2016-04-26T07:12:53.815+0000:1461625973:2016-04-26T07:12:53.815+0000:camel-bam is deprecated"
0,CAMEL-5318,Improvement,Minor,2.10.0,2.10.0,"

maven

",Resolved,Fixed,2.10.0,Willem Jiang,Daniel Galán y Martins,0,2,2012-05-29 14:47:06+00:00,2012-05-31 09:09:22+00:00,"When working in an IDE (here eclipse), digging into camels (here camel-core) snapshot sourcecode is not possible, since there is no source-archive on https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.10-SNAPSHOT/


In contrast I found (on http://camel.apache.org/download.html) that the source code exists, but in the wrong artifact (apache-camel). The source-code is also not limited to the correct artifact:
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.10-SNAPSHOT/


Is there a possiblity to provide the snapshot source-archive also? Thanks","njiang:1338358809:2012-05-30T14:20:09.778+0000:1338358809:2012-05-30T14:20:09.778+0000:The source of the apache-camel is for the whole source code from the camel trunk.
I think it could be easy to deploy the snapshot of the source. 

njiang:1338362486:2012-05-30T15:21:26.231+0000:1338362486:2012-05-30T15:21:26.231+0000:I just updated the jenkins configuration, now the snapshot source jars are deployed.
danielgalan:1338426562:2012-05-31T09:09:22.944+0000:1338426562:2012-05-31T09:09:22.944+0000:Thank you, this will help me and others working with the Snapshot a lot."
0,CAMEL-5317,Bug,Major,None,"2.9.3, 2.10.0","

netty

",Resolved,Fixed,"2.9.3, 2.10.0",Łukasz Dywicki,Łukasz Dywicki,0,2,2012-05-29 14:08:36+00:00,2012-05-29 14:50:22+00:00,In Camel TypeConverter API we have two ways to convert payload - with exchange or without. NettyConverter doesn't support ChannelBuffer -> toString conversion without exchange instance and throws NullPointerException.,"ldywicki:1338272052:2012-05-29T14:14:12.209+0000:1338272052:2012-05-29T14:14:12.209+0000:Proposed patch contains fix with fallback to default String constructor if no exchange is set.
davsclaus:1338274222:2012-05-29T14:50:22.419+0000:1338274222:2012-05-29T14:50:22.419+0000:Thanks for the patch."
0,CAMEL-5316,Improvement,Major,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-05-29 12:18:47+00:00,2012-05-29 12:53:37+00:00,"Similar to CAMEL-4950
We should do this in the failover EIP code. As that logic is not there to break out.",
0,CAMEL-5315,Bug,Major,2.9.2,None,"
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0, 3.0.0",Christian Schneider,Christian Schneider,0,1,2012-05-29 09:51:18+00:00,2012-05-29 10:02:37+00:00,"karaf@root()> feature:install camel-blueprint
Error executing command: Could not start bundle mvn:org.apache.camel/camel-blueprint/2.10-SNAPSHOT in feature(s) camel-blueprint-2.10-SNAPSHOT: Unresolved constraint in bundle org.apache.camel.camel-blueprint [171]: Unab
le to resolve 171.0: missing requirement [171.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.aries.blueprint)(version>=0.3.0)(!(version>=1.0.0)))",cschneider:1338256957:2012-05-29T10:02:37.183+0000:1338256957:2012-05-29T10:02:37.183+0000:Fixed
0,CAMEL-5314,Improvement,Major,"2.9.0, 2.9.1, 2.9.2","2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Ioannis Canellos,Ioannis Canellos,0,1,2012-05-29 05:36:38+00:00,2012-06-11 09:52:00+00:00,"When reading and writing from blob stores the camel jclouds component assumes that that the payload is always a java object. Moreover, it fully reads the object and places it inside the message body.


We should provide streaming support, since there is no limit in the size of the payload.


We should also make sure that it can handle any type of data and not just java objects.",
0,CAMEL-5313,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-05-29 04:03:05+00:00,2012-05-29 07:17:54+00:00,BeanIO 2.0 has been released. It has better OSGi support so we should upgrade to this version.,
0,CAMEL-5312,Bug,Major,2.9.1,2.10.0,"
None
",Resolved,Invalid,2.10.0,Claus Ibsen,Amit Patel,0,3,2012-05-28 16:02:53+00:00,2017-01-18 21:47:48+00:00,"Adding Restlet routes with relative paths to Apache Camel context does NOT
work after I send first request to restlet route.


1) Add Restlet route restletRoute1 with relative path to Apache Camel context
2) Send a request to restletRoute1 (works)
3) Add a route restletRoute2 with relative path to Apache Camel context
4) Send a request to restletRoute2 (does not works). RestletServlet
does not find the restlet endpoint and return Not Found message.


when I checked jconsole It saw the restletRoute1 and restletRoute2 started
successfully. If I add restletRoute1 and restletRoute2 then send a
request to restletRoute1 and restletRoute2 both works. Our
application supports add route on-the-fly feature, so we don't have
to start the application every time when we add a new route. Because of
the above issue we can't integrate restlet to our application.


Routes
-------
<routes xmlns=""http://camel.apache.org/schema/spring"">
<route>
<from uri=""restlet:/restletRoute1""/>
<setHeader headerName=""Content-Type"">
<constant>text/plain</constant>
</setHeader>
<setBody>
<constant>restletRoute1</constant>
</setBody>
</route>
<route>


<routes xmlns=""http://camel.apache.org/schema/spring"">
<route>
<from uri=""restlet:/restletRoute2""/>
<setHeader headerName=""Content-Type"">
<constant>text/plain</constant>
</setHeader>
<setBody>
<constant>restletRoute2</constant>
</setBody>
</route>
<route>


libs





'org.apache.camel:camel-restlet:2.9.1'
'org.restlet.jee:org.restlet.ext.spring:2.0.13'


Web.xml
-----------
<servlet>
                     <servlet-name>RestletServlet</servlet-name>
                     <servlet-class>org.restlet.ext.spring.SpringServerServlet</servlet-class>
                     <init-param>
                           <param-name>org.restlet.component</param-name>
                           <param-value>restletComponent</param-value>
                     </init-param>
              </servlet>
              <servlet-mapping>
                     <servlet-name>RestletServlet</servlet-name>
                     <url-pattern>/rs/*</url-pattern>
              </servlet-mapping>


Resources.groovy
-----------------
restletComponent(org.restlet.Component)
restletComponentService(org.apache.camel.component.restlet.RestletComponent, ref(""restletComponent""))","davsclaus:1338193119:2012-05-28T16:18:39.996+0000:1338193119:2012-05-28T16:18:39.996+0000:Please read this page first
http://camel.apache.org/support

eg we prefer that people use the mailing list / forum first to discuss your issue to identify if its a issue or not. This is the issue tracker which we prefer for tracking confirmed and known issues.

So to help with this tracker issue. 
Can you add a sample unit test, and route that demonstrates your issue?

davsclaus:1338801494:2012-06-04T17:18:14.498+0000:1338801494:2012-06-04T17:18:14.498+0000:How do you add a 2nd route at step #3 ?

And what server do you use? Apache Tomcat, or something else?
amit1000:1338808118:2012-06-04T19:08:38.539+0000:1338808118:2012-06-04T19:08:38.539+0000:RestletSpringServlet.java
amit1000:1338808601:2012-06-04T19:16:41.846+0000:1338808601:2012-06-04T19:16:41.846+0000:I wrote a Grails application. I don't know how to send this application to you. In this application, I can add route using Controller. I found issue in org.restlet.ext.spring.SpringServerServlet it only call createServer method on it first request. so
I extend the SpringServerServlet and call createServer method when new route is added. Please find this Servlet in attachment.

Improvement: If component store isNewRoute added variable and ServerServlet reset this variable i don't need isNewRouteAdded method, so i can gain performance. 
 



import org.apache.camel.CamelContext
import org.apache.camel.ProducerTemplate;

import grails.spring.BeanBuilder
import org.apache.camel.spring.spi.ApplicationContextRegistry
import org.apache.camel.model.RoutesDefinition
import java.io.ByteArrayInputStream
import javax.xml.bind.Unmarshaller
import org.apache.camel.model.RouteDefinition
import javax.xml.bind.JAXBContext
import javax.xml.bind.JAXBException
import javax.xml.bind.Unmarshaller
class BootService {
	
	def restletComponent
	def restletComponentService
	static transactional = false;
	static expose = ['jmx']
	def appCtx;
	CamelContext ctx;
	def grailsApplication;

	// Camel template - a handy class for kicking off exchanges
	ProducerTemplate template
	
	def serviceMethod() {
	}

	def init() {
		start();
	}

	def start() {

		println ""inside start""
	appCtx =org.codehaus.groovy.grails.commons.ApplicationHolder.getApplication().getMainContext()

        //Restlet URI matching set default to EQUALS
       // restletComponent.defaultHost.setDefaultMatchingMode(org.restlet.routing.Template.MODE_EQUALS); 
		
		// Load user defined beans into context
		// Load jars from NIMBUS_HOME/lib
		

		// Load beans from NIMBUS_HOME/conf/*Beans.groovy
		def bb = new BeanBuilder(appCtx)
		def bbAppCtx = bb.createApplicationContext()

		//Create a ApplicationContexRegistry from ApplicationContext
		//def applicationContextRegistry = new ApplicationContextRegistry(bbAppCtx)
		
		//create camel-1 conext to be used throughout this application
		//ctx = new org.apache.camel.impl.DefaultCamelContext(applicationContextRegistry)
		
				
		//create camel-1 conext to be used throughout this application
		ctx = new org.apache.camel.spring.SpringCamelContext(bbAppCtx)
		
		// Camel template - a handy class for kicking off exchanges
		template = ctx.createProducerTemplate();
		
		ctx.start()
		//loadRoutes();
	}
	

	def addRoute(routeId,routeDef) {
		
		try{
		    JAXBContext context = JAXBContext.newInstance(""org.apache.camel:org.apache.camel.model:org.apache.camel.model.config:org.apache.camel.model.dataformat:org.apache.camel.model.language:org.apache.camel.model.loadbalancer"");
			Unmarshaller unmarshaller = context.createUnmarshaller();
			Object value = unmarshaller.unmarshal(new StringReader(routeDef));//		RoutesDefinition routes = camelContext.loadRoutesDefinition(is);

			RouteDefinition route = (RouteDefinition)value;
//			def routeName = cr.namespace+"".""+cr.routeName+"".""+cr.routeVersion
			route.routeId(routeId)
//			// add or update route in running camel context
		ctx.stopRoute(routeId)
			ctx.removeRoute(routeId)
			//if(cr.deployStatus==""Active"")
			ctx.addRouteDefinitions(Collections.singletonList(route));
		}catch(all)
		{
			 	all.printStackTrace()
		}
		
		try{
			def status = ctx.getRouteStatus(routeId)
			def msg =  ""${routeId} status: ${status}""
			println ""\t\t${msg}""
			
		}catch(all){
	    	all.printStackTrace()
		}
	}

}



/* DO NOT USE THIS CONTROLLER. THIS CONTROLLER IS WRITTEN FOR LOAD TEST THE ADD AND DELETE ROUTE, AND SHOULD BE DELETED AFTER LOAD TEST IS OVER.
 * 
 * 
 */

class AddRouteController {
	def bootService
	def add = {
		def routeDef =params.routeDefinition
		def routeId =params.routeId
		try {
			bootService.addRoute(routeId,routeDef) 
			render ""Route Added""
		}catch(all) {
		all.printStackTrace()
		}
	}
}
 
davsclaus:1339108354:2012-06-08T06:32:34.759+0000:1339108354:2012-06-08T06:32:34.759+0000:This is not a problem in camel-reslet, but on your side when you use the Spring Restlet servlet or whatever.

You will need to handle this yourself, as you are not using the Camel RestletComponent.
amit1000:1339141546:2012-06-08T15:45:46.073+0000:1339141546:2012-06-08T15:45:46.073+0000:I am using Camel RestletComponent component. I found issue with Restlet(http://www.restlet.org/) API framework. To support camel add route on-the-fly feature.Fix should be done on both side RestletComponent component and Restlet(http://www.restlet.org/) API framework.

1) When a new restlet route added to camel context. Set varible isNewRouteAdded=true in reslet component.  (CAMEL changes) 
2) If isNewRouteAdded is ture in reslet component,  org.restlet.ext.servlet.ServerServlet.getServer method calls createServer. (Restlet(http://www.restlet.org/) API framework changes).







mcasperson:1484747242:2017-01-18T21:47:22.451+0000:1484747268:2017-01-18T21:47:48.418+0000:I know this bug is years old and not related to camel, but we had a similar issue with Restlet that others might appreciate some insight into given that this is now a Google result.

What was happening was that our REST DSL routes would randomly return a 404 after a server restart. The steps involved were:
1. Boot the Camel app
2. Hit a REST DSL route like /api/status before all routes were started
3. Additional routes were started
4. REST DSL endpoints like /api/doSomething were being added under paths like /api/status/doSomething. You would see messages like this in the logs : [Server:main-server] INFO  | default task-10 | SpringServerServlet: [Restlet] Attaching restlet: org.apache.camel.component.restlet.MethodBasedRouter@3e7385f to URI: /api/status/doSomething

What was happening was that the path of the first REST DSL endpoint to be requested was now being added to new REST DSL endpoints that were in the process of being created and exposed. As a result, we were getting 404 errors when we tried to access the expected URL.

We were creating an instance of org.restlet.Component as a Spring bean, and manually calling the start() method when the Component is created seems to have resolved the issue for us."
0,CAMEL-5311,New Feature,Major,2.10.0,None,"
None
",Resolved,Fixed,2.10.0,Henryk Konsek,Henryk Konsek,0,2,2012-05-28 14:27:30+00:00,2012-06-12 08:03:10+00:00,I'm attaching completed Spring Batch Component.,"davsclaus:1338251711:2012-05-29T08:35:11.002+0000:1338251711:2012-05-29T08:35:11.002+0000:Can you avoid any refactorings in the parent/pom.xml file. This makes backporting patches and whatnot much harder, when the pom.xml have merge conflicts.
davsclaus:1338251919:2012-05-29T08:38:39.552+0000:1338251919:2012-05-29T08:38:39.552+0000:In the resolveJobLauncher method of the component you lookup the JobLauncher classes. And if there is 1 or more, you grab the first. I suggest to change this to only grab it, if there is exactly 1. If there is 2 or more, then throw a failure.

Also I suggest to add this logic to the doStart method, so its run once upon initialization of the component.
davsclaus:1338251989:2012-05-29T08:39:49.615+0000:1338251989:2012-05-29T08:39:49.615+0000:And maybe add a getter/setter for the JobLauncher instance, so you can set explicit a launcher on the component. And maybe also allow to configure the name to lookup in the registry, in case the default name ""jobLauncher"" is not to your needs.
davsclaus:1338252064:2012-05-29T08:41:04.474+0000:1338252064:2012-05-29T08:41:04.474+0000:In the CamelJobExecutionListener I would assume the afterJob method should send a header with AFTER in the key. eg currently it looks like a copy/paste mistake.
davsclaus:1338252239:2012-05-29T08:43:59.542+0000:1338252239:2012-05-29T08:43:59.542+0000:In the endpoint class, then do the lookup in the doStart method, and keep the getter/setter as plain, eg the setJobLauncherRef method.
hekonsek:1338254417:2012-05-29T09:20:17.376+0000:1338254417:2012-05-29T09:20:17.376+0000:Hi Claus,

Thanks for the feedback.

> Can you avoid any refactorings in the parent/pom.xml file.
> This makes backporting patches and whatnot much harder, when the pom.xml have merge conflicts.

Grrrr, apparently IntelliJ sometimes reformat patch before export even when I explicitly tell it not to do so. I'll create patches with command line next time.

> allow to configure the name to lookup in the registry,
> in case the default name ""jobLauncher"" is not to your needs.

It's already there - to(""spring-batch:mockJob?jobLauncherRef=alternativeJobLauncher"") .

> And if there is 1 or more, you grab the first. I suggest to change 
> this to only grab it, if there is exactly 1. If there is 2 or more, then throw a failure.

I agree - I'll change it.

> And maybe add a getter/setter for the JobLauncher instance,
> so you can set explicit a launcher on the component.

I'll do it.

> Also I suggest to add this logic to the doStart method, so its run once upon initialization of the component.
> ...
> In the endpoint class, then do the lookup in the doStart method,
> and keep the getter/setter as plain, eg the setJobLauncherRef method.

Although doStart() seems like a good place to put this logic there but actually I followed the logic from the JdbcComponent here. Could you explain to me why JdbcComponent can perform lookup in createEndpoint()?

> In the CamelJobExecutionListener I would assume the afterJob method should send a
> header with AFTER in the key. eg currently it looks like a copy/paste mistake.

Maybe instead of setting boolean SPRING_BATCH_JOB_EVENT_BEFORE flag, I'll set String flag SPRING_BATCH_JOB_EVENT_TYPE with possible values of ""BEFORE"" and ""AFTER""? What do you think?

I'll let you know when I apply the fixes to the patch.
davsclaus:1338613208:2012-06-02T13:00:08.157+0000:1338613208:2012-06-02T13:00:08.157+0000:Any update on a new patch?
hekonsek:1338764403:2012-06-04T07:00:03.836+0000:1338764403:2012-06-04T07:00:03.836+0000:Will be done today, stay tuned :) .
hekonsek:1338808030:2012-06-04T19:07:10.054+0000:1338808142:2012-06-04T19:09:02.830+0000:I'm attaching optimized version of Spring Batch component. This time I used 'svn diff' instead of IntelliJ patching - this should deal with the whitespace formatting issue.
hekonsek:1338808165:2012-06-04T19:09:25.981+0000:1338808165:2012-06-04T19:09:25.981+0000:I'm waiting for the feedback :) .
davsclaus:1338861412:2012-06-05T09:56:52.838+0000:1338861412:2012-06-05T09:56:52.838+0000:The camelReader and camelWrite uses both a
- producer- or consumer Template
- endpoint uri

That is a bit clumsy to setup, we should consider a leaner approach to setup this.

davsclaus:1338861878:2012-06-05T10:04:38.316+0000:1338861878:2012-06-05T10:04:38.316+0000:Patch applied to trunk. Henryk can you help with documentation? You got an ICLA on file at Apache, so you can edit the wiki pages yourself?
hekonsek:1338861973:2012-06-05T10:06:13.862+0000:1338861973:2012-06-05T10:06:13.862+0000:Template plus URI is the classic approach from the Spring/IOC point of view. Reader and Writer just need these two dependencies to work properly. I got no idea how we can make it simpler :) .
hekonsek:1338862128:2012-06-05T10:08:48.434+0000:1338862128:2012-06-05T10:08:48.434+0000:Yes, I got wiki write permissions. I'll handle the documentation for the component.
davsclaus:1338863040:2012-06-05T10:24:00.071+0000:1338863040:2012-06-05T10:24:00.071+0000:Added osgi feature, and will add the new component to the release kit as well.
davsclaus:1339219383:2012-06-09T13:23:03.080+0000:1339219383:2012-06-09T13:23:03.080+0000:Initial docs added. Fell free to improve in the future.
hekonsek:1339459390:2012-06-12T08:03:10.664+0000:1339459390:2012-06-12T08:03:10.664+0000:I've added the missing section (regarding support classes) to the documentation. It is complete now."
0,CAMEL-5310,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,David Valeri,Claus Ibsen,0,3,2012-05-27 12:32:54+00:00,2012-06-24 13:13:42+00:00,"When using SSL it can be a bit pain to see what chipters, protocols, algorithms, and whatnot is available in the JVM. This can be different from SUN, Oracle, IBM, OpenJDK etc. Also between JDK versions as well.
And if you have bouncycastle installed or not etc.


We should add more logging details in the org.apache.camel.util.jsse classes so people can better see whats in use.


Also it would be nice with some option to turn on the configuration, that logs a nice summary of all those details at INFO level. This makes it much easier to troubleshoot.","davaleri:1340191183:2012-06-20T19:19:43.038+0000:1340191183:2012-06-20T19:19:43.038+0000:Claus,

I added a lot of detailed logging at the debug level.  Do you think it necessary to make the output level of this logging configurable or do you think that the configurability of the underlying logging system is enough to turn it on or off?  Take a look at the newly added logging and let me know what you think.
bvahdat:1340191887:2012-06-20T19:31:27.030+0000:1340191887:2012-06-20T19:31:27.030+0000:Making use of the hardcoded

{code}
\r\n
{code}

could be a pain for Camel users *not* running under Windows. So that I think making use of a LS constant could be a better approach as it's the case by:

{code}
org.apache.camel.component.log.LogFormatter
{code}

bvahdat:1340192737:2012-06-20T19:45:37.699+0000:1340192737:2012-06-20T19:45:37.699+0000:And I also think instead of the statements like:

{code}
LOG.debug(""…"", new Object[] {A, B, C});
{code}

We could better do:

{code}
if (LOG.isDebugEnabled()) {
 LOG.debug(""…"", new Object[] {A, B, C});
}
{code}

which would avoid unnecessary object array instantiation in case the Debug-Level is *not* enabled, making GC a bit happier :-)
davsclaus:1340234745:2012-06-21T07:25:45.175+0000:1340234745:2012-06-21T07:25:45.175+0000:David good work. The logging at DEBUG/TRACE level is fine.
Just wondering about the INFO level, I assume its logged once, in normal use-cases.

davaleri:1340259887:2012-06-21T14:24:47.461+0000:1340259887:2012-06-21T14:24:47.461+0000:Claus,
The INFO log event will trigger once for each created SSLContext, which is typically once per instance of the SSLContextParameters in your code / Spring XML.

Babak,

For the ifXxxEnabled.  This is an unnecessary optimization in many cases when using token replacement instead of string concat in the log statement.  I did a quick test and the if statement saves 0.000208ms per invocation on average (tested over 100 million iterations).  It also looks like the majority of that time difference is due to the method calls to the SSLContext or SSLEngine and not in the array allocation or GC.  There is less GC when using the ifXXXEnabled statements, but the performance impact appears largely negligible.  For cases where the log arguments going into the array are cheap to calculate, I would save yourself the typing unless you are looking to squeeze out every last fractional millisecond of performance.

I've put the ifXxxEnabled statements on the log statements that have expensive argument calculations and occur at high frequency in regular use.
bvahdat:1340261499:2012-06-21T14:51:39.236+0000:1340261499:2012-06-21T14:51:39.236+0000:Yeah the performance impact appears largely negligible, *BUT* just by this corner. Now sum up all these really tiny drops together if we would come up with the same approach all over the places in Camel code. Then suddenly you will realize a performance impact already even by 1000 iterations instead of 100 million.

Anyway, thanks for taking over of both recommendations."
0,CAMEL-5309,Bug,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Vladimir Tsvetkov,0,2,2012-05-25 18:29:04+00:00,2012-08-09 15:59:40+00:00,"When I first instantiate the following route, it works as expected. The Replies that come have the right correlation ids, just as Camel has assigned them.



from(""direct:fetchStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + FETCH_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-001"");




When this route completes, it is stopped and removed from the camel context. 


When a similar route is instantiated:



from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=completionsQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");




Half of the replies come as expected, while the other half results in the following warning: Reply received for unknown correlationID.


A workaround for this issues is to use a different ReplyTo-queue for each new instantiation of a similar route.


E.g. for the second route, it'll work if:



from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.routeId(""route-002"");","davsclaus:1338707196:2012-06-03T15:06:36.092+0000:1338707196:2012-06-03T15:06:36.092+0000:Why are you doing .threads(10) that dont makes sense, if you dont do any further routing.

Also when you report an issue, then please include more details, and full stacktraces etc.
The Camel team have to spend a lot of time to track down and reproduce peoples issues. So do as much upfront work for us.
For example to create a sample unit test that demonstrates the issue.


davsclaus:1338708416:2012-06-03T15:26:56.846+0000:1338708416:2012-06-03T15:26:56.846+0000:Okay I managed to track down an issue that the reply manager should be disposed when the route is stopped, so a new is re-created when you add the 2nd route using the same reply to queue.

npacemo:1338722759:2012-06-03T19:25:59.268+0000:1338722944:2012-06-03T19:29:04.922+0000:Is .threads(10) makes more sense if the route is:

{code}
from(""direct:processStateStart"")
.setExchangePattern(ExchangePattern.InOut)
.to(""activemq:queue:tasksQueue?replyTo=processedIndecesQueue"" +
        ""&replyToType=Exclusive"" +
        ""&requestTimeout="" + PROCESS_INDEX_TIMEOUT)
.threads(10)
.to(""log:REPLY?level=DEBUG"")
.routeId(""route-002"")
{code}

As to how I reported the issue, I've tried to provide the minimum information that can describe the issue, and I was waiting to add more (e.g. a unit test) upon request. If you say you need it, I'm willing to invest the time to provide you what you need to ease the troubleshooting.
davsclaus:1338769194:2012-06-04T08:19:54.456+0000:1338769194:2012-06-04T08:19:54.456+0000:I have committed a fix and backported to 2.9 branch.

If you could give the 2.9 SNAPSHOT branch a test that would be great.
npacemo:1339209064:2012-06-09T10:31:04.397+0000:1339209064:2012-06-09T10:31:04.397+0000:I'm still reproducing the issue with 2.9-SNAPSHOT.

I expect 5 replies, but instead I receive 2 and 3 are with incorrect correlation IDs:
{code}
2012-06-09 12:51:56,231 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:2:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339235516008, arrival = 0, brokerInTime = 1339235516008, brokerOutTime = 1339235516011, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-507, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@300eff0c, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":3}}
2012-06-09 13:06:29,605 [Camel (camel-1) thread #33 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2011,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":4}]
2012-06-09 13:16:48,811 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:4:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237008806, arrival = 0, brokerInTime = 1339237008806, brokerOutTime = 1339237008809, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-506, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@482163cd, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":2}}
2012-06-09 13:27:39,280 [Camel (camel-1) thread #34 - Threads] INFO  PROCESS_INDICES_STATE.RESPONSE - Exchange[ExchangePattern:InOut, BodyType:String, Body:{""fiscalYear"":2012,""indexCompression"":""ZIP"",""indexType"":""COMPANY"",""quarter"":1}]
2012-06-09 13:28:15,364 [Camel (camel-1) thread #13 - PersistentQueueReplyManager[completionsQueue]-1] WARN  org.apache.camel.component.jms.reply.PersistentQueueReplyManager - Reply received for unknown correlationID [ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508]. The message will be ignored: ActiveMQTextMessage {commandId = 5, responseRequired = true, messageId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:Vladimir-Tsvetkovs-MacBook-Pro.local-57252-1339232410422-1:6:1:1, destination = queue://completionsQueue, transactionId = null, expiration = 0, timestamp = 1339237695326, arrival = 0, brokerInTime = 1339237695327, brokerOutTime = 1339237695328, correlationId = ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-508, replyTo = queue://completionsQueue, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@bd53277, dataStructure = null, redeliveryCounter = 0, size = 1248, properties = {breadcrumbId=ID-Vladimir-Tsvetkovs-MacBook-Pro-local-57270-1339232420004-0-500, CamelJmsDeliveryMode=2, taskType=processIndexTask}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = {""fiscalYear"":2011,""indexCompression"":""ZIP"",""...""quarter"":1}}
{code}

davsclaus:1339209832:2012-06-09T10:43:52.393+0000:1339209832:2012-06-09T10:43:52.393+0000:Whats your timeout setting? 

And do you do anything to cancel the requests on the other party? If they send back old replies, then Camel logs that as WARN."
0,CAMEL-5308,Improvement,Trivial,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Daniel Galán y Martins,0,2,2012-05-25 13:12:05+00:00,2012-05-27 10:50:52+00:00,"We are using our own CamelContext, which is extending the DefaultCamelContext. Using Main is impossible in this case, since the getCamelContextMap()-method creates statically a DefaultCamelContext. Overriding this method doesn't works either, since the field registery is final, and no other accessors are defined.


The given path doesn't breaks existing code bases, and gives an easy possiblity to override the context-creation, as well as access to the registry.",davsclaus:1338087045:2012-05-27T10:50:45.177+0000:1338087045:2012-05-27T10:50:45.177+0000:Thanks for the patch.
0,CAMEL-5307,Task,Major,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-05-25 10:18:37+00:00,2012-05-25 13:51:20+00:00,"Using the camel-test-blueprint, there is a potential dead-lock as namespace parser and main method is separate threads, and the namespace parser may still run, when main thread starts the test.","davsclaus:1337912336:2012-05-25T10:18:56.133+0000:1337912336:2012-05-25T10:18:56.133+0000:{code}

Full thread dump

""Blueprint Extender: 3@1060"" daemon prio=5 tid=0x13 nid=NA waiting for monitor entry
  java.lang.Thread.State: BLOCKED
	 blocks main@1
	 waiting for main@1 to release lock on <0x92d> (a java.util.HashMap)
	  at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:303)
	  at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)
	  at org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)
	  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	  at java.lang.reflect.Method.invoke(Method.java:597)
	  at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
	  at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)
	  at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)
	  at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)
	  at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
	  - locked <0x953> (a java.lang.Object)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
	  at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
	  at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:718)
	  at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:47)
	  at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:49)
	  at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:62)
	  at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:108)
	  at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:128)
	  at org.apache.camel.util.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:150)
	  at org.apache.camel.impl.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:135)
	  at org.apache.camel.impl.CamelPostProcessorHelper.createInjectionProducerTemplate(CamelPostProcessorHelper.java:177)
	  at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:144)
	  at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelInjector.injectField(CamelNamespaceHandler.java:569)
	  at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelInjector.injectFields(CamelNamespaceHandler.java:556)
	  at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelInjector.afterInit(CamelNamespaceHandler.java:629)
	  at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcPostInit(BeanRecipe.java:668)
	  at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:726)
	  at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
	  at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:640)
	  at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:331)
	  at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:227)
	  - locked <0x954> (a java.util.concurrent.atomic.AtomicBoolean)
	  - locked <0x955> (a java.util.concurrent.atomic.AtomicBoolean)
	  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	  at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	  at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	  at java.lang.Thread.run(Thread.java:680)

""main@1"" prio=5 tid=0x1 nid=NA waiting for monitor entry
  java.lang.Thread.State: BLOCKED
	 blocks Blueprint Extender: 3@1060
	 waiting for Blueprint Extender: 3@1060 to release lock on <0x953> (a java.lang.Object)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
	  at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
	  at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
	  at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:718)
	  at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)
	  at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)
	  at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)
	  at org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)
	  at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:306)
	  - locked <0x92d> (a java.util.HashMap)
	  at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)
	  at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:480)
	  at org.apache.camel.test.blueprint.CamelEndpointInjectTest.testEndpointInjection(CamelEndpointInjectTest.java:36)
	  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	  at java.lang.reflect.Method.invoke(Method.java:597)
	  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	  at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	  at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	  at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	  at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	  at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	  at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)

""Blueprint Extender: 2@897"" daemon prio=5 tid=0x11 nid=NA waiting
  java.lang.Thread.State: WAITING
	  at sun.misc.Unsafe.park(Unsafe.java:-1)
	  at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	  at java.util.concurrent.DelayQueue.take(DelayQueue.java:164)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:609)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:602)
	  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	  at java.lang.Thread.run(Thread.java:680)

""Blueprint Extender: 1@893"" daemon prio=5 tid=0x10 nid=NA waiting
  java.lang.Thread.State: WAITING
	  at sun.misc.Unsafe.park(Unsafe.java:-1)
	  at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	  at java.util.concurrent.DelayQueue.take(DelayQueue.java:164)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:609)
	  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:602)
	  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:947)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	  at java.lang.Thread.run(Thread.java:680)

""FelixDispatchQueue@715"" prio=5 tid=0xf nid=NA waiting
  java.lang.Thread.State: WAITING
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.Object.wait(Object.java:485)
	  at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.run(EventDispatcher.java:858)
	  at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.access$000(EventDispatcher.java:45)
	  at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher$1.run(EventDispatcher.java:100)
	  at java.lang.Thread.run(Thread.java:680)

""Configuration Updater@961"" prio=5 tid=0x12 nid=NA waiting
  java.lang.Thread.State: WAITING
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.Object.wait(Object.java:485)
	  at org.apache.felix.cm.impl.UpdateThread.run(UpdateThread.java:67)

""Finalizer@2338"" daemon prio=8 tid=0x3 nid=NA waiting
  java.lang.Thread.State: WAITING
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118)
	  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134)
	  at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)

""Reference Handler@2339"" daemon prio=10 tid=0x2 nid=NA waiting
  java.lang.Thread.State: WAITING
	  at java.lang.Object.wait(Object.java:-1)
	  at java.lang.Object.wait(Object.java:485)
	  at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)

""Signal Dispatcher@2337"" daemon prio=9 tid=0x6 nid=NA runnable
  java.lang.Thread.State: RUNNABLE
{code}"
0,CAMEL-5306,New Feature,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,alex hutter,0,2,2012-05-24 16:27:42+00:00,2013-01-09 00:44:51+00:00,"When consuming messages from SQS the visibilityTimeout property controls how long the consumer has to call deleteMessage before the message is re-delivered to another consumer.  When processing messages that take an unpredicatible duration, such as requests to download large files, it is difficult to choose a good value for visibilityTimeout.


SQS provides an API ChangeMessageVisibility that can be used to extend visbilityTimeout if a consumer determins that it is going to need longer to process the current message (http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/APIReference/Query_QueryChangeMessageVisibility.html).


I would like Camel to be able to handle the calling of ChangeMessageVisibility based on how long the message consuming code is taking to process the received message.  Since Camel knows how long visibilityTimeout is set to it should be able to keep SQS notified that the processor is still running until it is ready to call deleteMessage.


I have had a first attempt at solving this and my code is in the attached patch.  This may not be a perfect solution so please provide me with feedback if you would like it changed before it is merged in.


The patch was made against the 2.9.x branch and my working copy is: https://github.com/haku/camel .","davsclaus:1337891390:2012-05-25T04:29:50.414+0000:1337891390:2012-05-25T04:29:50.414+0000:Can we avoid the complex logic with scheduled thread pool and whatnot.
Instead just set a fixed value.
alexhutter:1338265411:2012-05-29T12:23:31.254+0000:1338265411:2012-05-29T12:23:31.254+0000:As suggested I have tidied code to use scheduleAtFixedRate(), making the code easier to read and slightly shorter.
And feedback is appreciated.
davsclaus:1338277599:2012-05-29T15:46:39.953+0000:1338277599:2012-05-29T15:46:39.953+0000:Thanks for the patch. I got this into the trunk.
davsclaus:1338277785:2012-05-29T15:49:45.264+0000:1338277785:2012-05-29T15:49:45.264+0000:Thanks for the patch. I polished and fixed CS as well.
I updated the wiki doc for the sqs component as well."
0,CAMEL-5305,Improvement,Minor,"2.8.5, 2.9.2, 2.10.0","2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Chris Geer,0,2,2012-05-24 16:19:44+00:00,2012-11-09 20:10:03+00:00,Flatpack by default will throw errors if any line isn't the exact length of the definitions file. Sometime it makes sense to allow files that have rows that are either shorter or longer than configured.,"davsclaus:1337891229:2012-05-25T04:27:09.276+0000:1337891229:2012-05-25T04:27:09.276+0000:There seems to be an issue with your patch file. Can you double check the patch file and attach a valid file?
geerzo:1337894264:2012-05-25T05:17:44.496+0000:1337894264:2012-05-25T05:17:44.496+0000:Weird, I just uploaded the exact same file and now it looks ok.
davsclaus:1338803965:2012-06-04T17:59:25.771+0000:1338803965:2012-06-04T17:59:25.771+0000:Thanks for the patch."
0,CAMEL-5304,Improvement,Minor,2.9.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Arjen Duursma,0,3,2012-05-23 20:21:24+00:00,2012-09-05 07:29:40+00:00,The HL7MLLPCodes allows a setting (convertLFtoCR) to enable of disable the conversion of \n characters to \r.  The type converter from String to Messages has that same conversion hardcoded without an option to turn it off.  This means I cannot process messages which contain embeded \n characters in a ED (encapsulated data) section.,"davsclaus:1337891464:2012-05-25T04:31:04.059+0000:1337891464:2012-05-25T04:31:04.059+0000:Can you attach a HL7 sample file, and unit test?

And instead of using the type converters, then use the data format instead, where you can configure this.
wayam:1338813377:2012-06-04T20:36:17.822+0000:1338813377:2012-06-04T20:36:17.822+0000:Project containing 3 test-cases for ACK'ing a HL7 message. I would assume all three should succeed, but third one fails as I don't know how to kill \n to \r conversions
christian.ohr:1346417536:2012-08-31T20:52:16.653+0000:1346417536:2012-08-31T20:52:16.653+0000:Strictly speaking, it's the MLLP codec that has the option to disable \r to \n conversion. The Data Format uses the Type Converter under the hood. As the type converter right now is not configurable, I see four options (ordered by my personal preference):

* remove \n to \r conversion entirely and set the default to false in the codec. The HL7 standard strictly defines \r as segment delimiter (maybe the guy who decided on this was a Mac user ;-), and the conversion is usually only desired when you read a message from file. -> Changes the default behavior and need proper documentation. If you still want this conversion, you can do it in an extra string transformation _before_ parsing.
* make HL7Converter configurable so that at least the Data Format can choose whether to convert or not
* tweak the conversion a bit so that \n is only replaced by \r if three uppercase letters (the name of the next segment) follow right away, so that this \n is probably intended to be the end of a segment. Smells like a hack.
* leave everything as it is


davsclaus:1346716642:2012-09-04T07:57:22.055+0000:1346716642:2012-09-04T07:57:22.055+0000:As we have upgraded hl7 to mina2 and hapi 2.0 in Camel 2.11, I think its fine we go for your bullet #1.

Patches is welcome.
christian.ohr:1346762176:2012-09-04T20:36:16.918+0000:1346762176:2012-09-04T20:36:16.918+0000:Removed conversion from HL7DataFormat. Set HL7MLLPConfig#convertLFtoCR to false by default, but respect this setting in HL7MLLPDecoder. 
Added HL7#convertLFToCR expression.
Adapted tests.
christian.ohr:1346763093:2012-09-04T20:51:33.156+0000:1346763093:2012-09-04T20:51:33.156+0000:Also adapted Wiki docs.
davsclaus:1346800175:2012-09-05T07:09:35.010+0000:1346800175:2012-09-05T07:09:35.010+0000:Thanks for the patch. Applied to trunk.

Do you mind adding a note in the _important changes ..._ section of the release notes
http://camel.apache.org/camel-2110-release.html

About this default change. So people is aware of this.
davsclaus:1346800197:2012-09-05T07:09:57.820+0000:1346800197:2012-09-05T07:09:57.820+0000:Keeping this on 2.11, to keep older releases compatible as is.
christian.ohr:1346801380:2012-09-05T07:29:40.189+0000:1346801380:2012-09-05T07:29:40.189+0000:Updated 2.11 release notes."
0,CAMEL-5303,Bug,Major,2.8.4,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-05-23 18:46:24+00:00,2012-05-23 19:07:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/ExchangeTimedOutException-when-using-vm-seda-with-multipleConsumers-true-td5710951.html",
0,CAMEL-5272,New Feature,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Gregor Kopij,0,0,2012-05-11 18:40:00+00:00,2022-09-02 08:37:55+00:00,As for today camel-snmp has only a consumer which polls a snap-target for data. It also should be possible to read data from a snmp-target as part of a route (enricher).,
0,CAMEL-5271,New Feature,Minor,None,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Unassigned,Gregor Kopij,3,5,2012-05-11 18:25:42+00:00,2017-02-24 12:49:26+00:00,As for today the camel-snmp-component can only handle incoming TRAPs. It should be possible to send TRAPs (and INFORMS) from a route as part of the application logic.,"davsclaus:1341548159:2012-07-06T12:15:59.596+0000:1341548159:2012-07-06T12:15:59.596+0000:Contributions is welcome
githubbot:1487908443:2017-02-24T11:54:03.153+0000:1487908443:2017-02-24T11:54:03.153+0000:GitHub user sverkera opened a pull request:

    https://github.com/apache/camel/pull/1490

    Implemented SNMP Trap producer and solved bug in SnmpMessage

    Implemented a SNMP Trap producer with testcase, for solving CAMEL-5271.
    It requires the fix for CAMEL-10893 to work, therefore both in the same pull request.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sverkera/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1490.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1490
    
----
commit 6084a0af4f60315e4801b7c569eb32e0138c07ec
Author: Sverker Abrahamsson <sverker@limetransit.com>
Date:   2017-02-24T11:28:55Z

    CAMEL-10893 PDU was not copied when creating new instance

commit 79d37cbd9e7e682b61deab7e8e43e1e3465a24bc
Author: Sverker Abrahamsson <sverker@limetransit.com>
Date:   2017-02-24T11:37:33Z

    CAMEL-5271 Implemented a SNMP Trap producer. TrapTest now validates both producer and consumer (for which the test previously was disabled)

----

sverker:1487908468:2017-02-24T11:54:28.095+0000:1487908468:2017-02-24T11:54:28.095+0000:See pull request https://github.com/apache/camel/pull/1490
githubbot:1487911129:2017-02-24T12:38:49.719+0000:1487911129:2017-02-24T12:38:49.719+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1490

davsclaus:1487911766:2017-02-24T12:49:26.232+0000:1487911766:2017-02-24T12:49:26.232+0000:Contribured in another PR"
0,CAMEL-5270,Improvement,Major,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Jonathan Barber,0,0,2012-05-10 23:01:10+00:00,2012-05-11 06:44:05+00:00,"A patch is included to add the community and peer address of SNMP traps that are received by camel. This is useful to determine where a trap originated from, as not all SNMPv2 traps include an OID that identifies the sender.


The information is placed in the message header as strings with names:
securityName
peerAddress


These names correspond to the accessor names in the snmp4j API for the CommandResponderEvent class. securityName is not the correct name for SNMP v1/2 traps, but it's probably better to stick with a name that can be consistant between SNMP versions.","njiang:1336689829:2012-05-11T06:43:49.248+0000:1336689829:2012-05-11T06:43:49.248+0000:Applied patch with thanks to Jonathan, I also updated the camel SNMP wiki page for new enhancement. "
0,CAMEL-5269,Improvement,Minor,2.9.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Bengt Rodehav,0,1,2012-05-10 17:57:09+00:00,2013-01-30 17:56:32+00:00,"Currently, if you change the remote file name by changing the message header Exchange.FILE_NAME, this will not only change the remote file name but also the local file name. This is often undesirable. Instead it is a common requirement to archive the files that you process locally with their original file names unchanged.


This has been discussed on the user mailing list:


http://camel.465427.n5.nabble.com/how-to-specify-remote-file-name-when-using-FTP-endpoint-td5697227.html",davsclaus:1359537580:2013-01-30T17:19:40.110+0000:1359537580:2013-01-30T17:19:40.110+0000:There is now a CamelOverruleFileName header you can set which is used once and discarded after writing the file. 
0,CAMEL-5268,Bug,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",William Tam,William Tam,0,1,2012-05-09 23:15:13+00:00,2012-05-22 03:42:13+00:00,"Refer to the thread on user forum.
http://camel.465427.n5.nabble.com/camel-restlet-Accept-header-td5692917.html


DefaultRestletBinding.populateRestletRequestFromExchange() may be missing a Restlet API call to set the accepted media types the Request object.       


Request.getClientInfo().setAcceptedMediaTypes(acceptedMediaTypes)","davsclaus:1336607088:2012-05-10T07:44:48.956+0000:1336607088:2012-05-10T07:44:48.956+0000:William are you working on a patch?
wtam:1337599640:2012-05-21T19:27:20.032+0000:1337599640:2012-05-21T19:27:20.032+0000:@Claus.  Yes.
wtam:1337609444:2012-05-21T22:10:44.923+0000:1337609444:2012-05-21T22:10:44.923+0000:Committed revision 1341227.  (trunk)

@Claus Could you please back merge to other branches if necessary?
davsclaus:1337629319:2012-05-22T03:41:59.992+0000:1337629319:2012-05-22T03:41:59.992+0000:Thanks William. Nice to see you back with a commit.

I have backported the fix to the 2.9 branch."
0,CAMEL-5267,Improvement,Major,2.9.2,,"
None
",Closed,Not A Problem,None,Christian Müller,Christian Müller,0,0,2012-05-09 19:46:51+00:00,2012-05-11 16:31:25+00:00,See http://camel.465427.n5.nabble.com/camel-jaxb-namespace-prefix-td5685354.html#a5686544,"muellerc:1336724830:2012-05-11T16:27:10.562+0000:1336724830:2012-05-11T16:27:10.562+0000:Won't fix. See http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/XmlSchema.html how to customize the namespace prefix.
Use the ""-npa"" option from the xjc compiler or maven-jaxb2-plugin to prevent to update the package-info.java file."
0,CAMEL-5266,New Feature,Major,None,None,"
None
",Closed,Fixed,None,Moulliard Charles,Moulliard Charles,0,0,2012-05-09 16:47:54+00:00,2012-05-09 17:02:19+00:00,No Desc,"cmoulliard:1336554002:2012-05-09T17:00:02.232+0000:1336554002:2012-05-09T17:00:02.232+0000:Code tested on Apache Karaf 2.2.7

1) feature:add-url mvn:org.apache.camel.karaf/apache-camel/2.10-SNAPSHOT/xml/features

2) feature:install camel 

3) install mvn:org.apache.camel.karaf/camel-karaf-commands/2.10-SNAPSHOT

camel:endpoint-list  

Result :

karaf@root> camel:endpoint-list 
camel-id             uri                  Status              
[test              ] [timer://test      ] [Started           ]"
0,CAMEL-5265,Bug,Major,"2.8.0, 2.9.0","2.8.6, 2.9.3, 2.10.0","

patch

",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Manuel Holzleitner,0,1,2012-05-09 14:03:20+00:00,2012-05-10 07:38:54+00:00,"The camel-servlet component responds with an incorrect http Content-Length header, causing the HTTP client to retreive a incomplete response, when the body of the out message is of a POJO type and is converted into a string that contains unicode characters.


For example, the following route returns ""Büe Wör"", but should return ""Büe Wörld"".



from(""servlet:///testUnicodeWithObjectResponse?matchOnUriPrefix=true"") 
   .process(new Processor() {
       public void process(Exchange exchange) throws Exception {                    
           String contentType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);
           exchange.getOut().setHeader(Exchange.CONTENT_TYPE, contentType + ""; charset=UTF-8"");  
    }})
    .transform(constant(
        new Object(){
            @Override
            public String toString() 
Unknown macro: {                return ""Büe Wörld"";            } 
        }
    ));


The attached patch contains a fix for the problem and a test to reproduce the problem.","manuelh9r:1336543941:2012-05-09T14:12:21.414+0000:1336543941:2012-05-09T14:12:21.414+0000:Patch with tests
davsclaus:1336606732:2012-05-10T07:38:52.910+0000:1336606732:2012-05-10T07:38:52.910+0000:Thanks for the patch.

I used the \u0000 for the uni code chars, as people in eg China etc. will have trouble reading the source code. 

Also I am using the charset value from the exchange, which is what being used to convert the message to String."
0,CAMEL-5264,Improvement,Minor,2.9.2,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Gregor Kopij,0,2,2012-05-09 12:09:08+00:00,2012-05-28 14:30:21+00:00,"When using INFORMs instead of TRAPs the component must response to the Message. Otherwise the sender tries to send the same INFROM x-times and it will be processed x-times in the SNMP-Component.


The code below is taken from an example:



			if ((pdu.getType() != PDU.TRAP) &&
					(pdu.getType() != PDU.V1TRAP) &&
					(pdu.getType() != PDU.REPORT) &&
					(pdu.getType() != PDU.RESPONSE)) {
					pdu.setErrorIndex(0);
					pdu.setErrorStatus(0);
					pdu.setType(PDU.RESPONSE);
					StatusInformation statusInformation = new StatusInformation();
					StateReference ref = e.getStateReference();
					try {
						e.getMessageDispatcher().returnResponsePdu(e.
							getMessageProcessingModel(),
							e.getSecurityModel(),
							e.getSecurityName(),
							e.getSecurityLevel(),
							pdu,
							e.getMaxSizeResponsePDU(),
							ref,
							statusInformation);
						System.err.println(""Response sent"");
					}catch (MessageException ex) {
						System.err.println(""Error while sending response: ""+ex.getMessage());
					}
				}
            processPDU(pdu);





In this case the component sends a response to the sender before processing the message.","davsclaus:1336606918:2012-05-10T07:41:58.908+0000:1336606918:2012-05-10T07:41:58.908+0000:Do you mind working on a patch to resolve this?
gregor.kopij:1336607892:2012-05-10T07:58:12.668+0000:1336607892:2012-05-10T07:58:12.668+0000:yes, i'll provide a patch for this issue.


gregor.kopij:1336731300:2012-05-11T18:15:00.431+0000:1336731300:2012-05-11T18:15:00.431+0000:Patch attached. I hope it's ok. I've used the version from trunk.
njiang:1337282191:2012-05-18T03:16:31.182+0000:1337282191:2012-05-18T03:16:31.182+0000:Hi Gregor, 
Thanks for the patch.
Can you grant the apache license for your patch ?
I can't apply it unless you grant the license.

gregor.kopij:1337672611:2012-05-22T15:43:31.998+0000:1337672611:2012-05-22T15:43:31.998+0000:Hi Willem

yes, of course. Is it ok here as comment or is there a button for doing this?
njiang:1337930362:2012-05-25T15:19:22.770+0000:1337930362:2012-05-25T15:19:22.770+0000:@Gregor,
When you submit the patch, you can see a check box which means you grand the patch with ASL.
You may need to attached a new one this time.
gregor.kopij:1338125990:2012-05-27T21:39:50.300+0000:1338125990:2012-05-27T21:39:50.300+0000:done
njiang:1338186621:2012-05-28T14:30:21.543+0000:1338186621:2012-05-28T14:30:21.543+0000:Applied patch into trunk with thanks to Gergor."
0,CAMEL-5263,Bug,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Joshua Watkins,0,0,2012-05-09 10:55:36+00:00,2012-05-10 01:34:57+00:00,No Desc,"jwatkins:1336532249:2012-05-09T10:57:29.538+0000:1336532249:2012-05-09T10:57:29.538+0000:I noticed that I had made an error and not brought over a change from my branch into the patch. The initial version didn't pass the property to the binding. I have added a fix as well as more unit tests to cover this. Additionally, I have added support for booleans as values for the session headers.
njiang:1336551983:2012-05-09T16:26:23.755+0000:1336551983:2012-05-09T16:26:23.755+0000:Applied patch with thanks to Joshua, I also fixed some check style errors at the same time.
njiang:1336584897:2012-05-10T01:34:57.086+0000:1336584897:2012-05-10T01:34:57.086+0000:Applied patch into the trunk."
0,CAMEL-5262,Improvement,Minor,2.9.0,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-05-09 10:33:34+00:00,2012-05-20 12:17:06+00:00,"See nabble
http://camel.465427.n5.nabble.com/Translating-route-exceptions-to-JSON-with-Simple-Expression-Language-or-SPEL-tp5696933.html",
0,CAMEL-5261,Bug,Major,"2.9.1, 2.9.2","2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Thomas Johansen,0,1,2012-05-09 09:15:59+00:00,2012-05-20 19:57:21+00:00,"The producer side and consumer side of the SEDA (and VM) component seems to require the completely same URI to be able to communicate. Completely same meaning that all URI options must be the same on both sides. The strange thing is that this only is required when I have adviced the consumer route. 2.9.0 does not have this problem.


Attached a unit test - the producerWithDifferentUri will fail on 2.9.1 and 2.9.2. If the advice is removed it will not.","davsclaus:1336526721:2012-05-09T09:25:21.756+0000:1336526721:2012-05-09T09:25:21.756+0000:Thanks, can you re-attach the test case and mark [x] in grant license to Apache. Then we can use your code as an unit test in the source.
thxmasj:1336535512:2012-05-09T11:51:52.494+0000:1336535512:2012-05-09T11:51:52.494+0000:Done!
davsclaus:1337497583:2012-05-20T15:06:23.452+0000:1337497583:2012-05-20T15:06:23.452+0000:You need to do as told on the wiki page
http://camel.apache.org/advicewith.html

eg in the tip: Telling Camel you are using adviceWith

davsclaus:1337501007:2012-05-20T16:03:27.986+0000:1337501007:2012-05-20T16:03:27.986+0000:I have reproduced the issue and work on a fix."
0,CAMEL-5260,Bug,Major,2.9.0,"2.8.6, 2.9.3, 2.10.0","

ldap

",Closed,Fixed,"2.8.6, 2.9.3, 2.10.0",Christian Müller,Ana Cortés,0,0,2012-05-09 09:12:58+00:00,2012-05-10 18:37:56+00:00,"When we call to a LDAP endpoint, the result is returned in the Out body and we lose the IN headers (see http://camel.465427.n5.nabble.com/LDAP-Component-lose-headers-td5696602.html). 


A fix seems relatively easy. The solution could be add this line inside the process() method in LdapProducer.java
 exchange.getOut().setHeaders(exchange.getIn().getHeaders());","davsclaus:1336526679:2012-05-09T09:24:39.851+0000:1336526679:2012-05-09T09:24:39.851+0000:Do you want to try working on a patch, to fix this bug?
Likewise attachments should also be copied to preserve those.
muellerc:1336568397:2012-05-09T20:59:57.528+0000:1336568397:2012-05-09T20:59:57.528+0000:Until this fix is available in a version which is suitable for you, you can use a content enricher [1] as workaround.

[1] http://camel.apache.org/content-enricher.html
anacortes:1336639955:2012-05-10T16:52:35.416+0000:1336639955:2012-05-10T16:52:35.416+0000:Cool! You've done this really fast, i haven't had time to see how to create the patch :)
muellerc:1336646276:2012-05-10T18:37:56.167+0000:1336646276:2012-05-10T18:37:56.167+0000:But you are more than welcome to work on other issues ;-) [1]
Normally it's a good to let easy to resolve issues for new contributors, but because we considered this as a bug, I prefer to make sure it will be part of Camel 2.10.0 which we plan to release soon...

[1] http://camel.apache.org/contributing.html

Best,
Christian"
0,CAMEL-5259,Improvement,Major,2.8.1,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Joe Luo,0,2,2012-05-09 09:09:29+00:00,2012-06-05 07:27:31+00:00,"Suppose we have two camel routes using camel-quartz endpoint:


Route one:



<camelContext id=""camel-quartz-context"">
   <route id=""RouteOne"">
       <from uri=""quartz://testTimer/TimerOne?cron=0+0/1+*+*+*+?"" />
       <to uri=""log:CamelQuartzRouteOne - Route One fired?level=INFO"" />
   </route>
</camelContext>




Route two:



<camelContext id=""camel-quartz-context"">
   <route id=""RouteTwo"">
       <from uri=""quartz://testTimer/TimerTwo?cron=0+0/1+*+*+*+?"" />
       <to uri=""log:CamelQuartzRouteTwo - Route Two fired?level=INFO"" />
   </route>
</camelContext>




Accidentally, both routes were configured using the same camelContext ID of ""camel-quartz-context"". After deploying the two camel routes, say, into ServiceMix container, following message will be thrown:



14:50:00,004 | ERROR | context_Worker-1 | JobRunShell                      | 195 - org.apache.servicemix.bundles.quartz - 1.8.5.1 | Job DEFAULT.quartz-endpoint9 threw an unhandled Exception:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz://testTimer/TimerOne?cron=0+0%2F1+*+%3F due to: A Quartz job already exists with the name/group: TimerOne/testTimer
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:457)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]
        at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:50)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]
        at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]
Caused by: java.lang.IllegalArgumentException: A Quartz job already exists with the name/group: TimerOne/testTimer
        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:130)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]
        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:56)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:75)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:426)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]
        ... 4 more



despite two camel-quartz endpoints were using different job names.


The root cause was duplicate camelContext ID used by two camel routes as it has to be unique. However, the error message was certainly misleading.","davsclaus:1338780265:2012-06-04T11:24:25.301+0000:1338780265:2012-06-04T11:24:25.301+0000:Requires Camel 2.9.x to fix this as we need the unique management name.
davsclaus:1338852451:2012-06-05T07:27:31.813+0000:1338852451:2012-06-05T07:27:31.813+0000:Requires Camel 2.10 to fix this."
0,CAMEL-5258,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,1,2012-05-09 08:44:06+00:00,2012-05-25 15:34:42+00:00,No Desc,njiang:1337931282:2012-05-25T15:34:42.905+0000:1337931282:2012-05-25T15:34:42.905+0000:Already committed the patch into trunk.
0,CAMEL-5257,Bug,Major,"2.8.5, 2.9.2","2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-05-09 08:31:57+00:00,2012-06-02 18:36:50+00:00,"When I try to run the camel-itest-karaf, I found the camel-jpa feature can not be install out of box, as the servlet api cannot be resolved.",
0,CAMEL-5256,Task,Minor,2.8.5,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Adam Edwards,0,0,2012-05-09 04:07:27+00:00,2012-05-09 08:13:39+00:00,"I ran into a major issue today that was not so apparent.   My unit tests which use the camel-mail component would just hang (even though there is a timeout), they would work on my windows machine, but not on my ubuntu linux or the deployed rhel server.


After quite a bit of investigation, it turns out that upgrading the javax.mail from 1.4.4 to 1.4.5 resolved my problem.   My guess would be that something changed on our network/exchange server which caused this problem, but either way it was time consuming to solve.


I wanted to save someone else the problem and see if you could upgrade to 1.4.5 on the 2.8.x and 2.9.x branch.


<javax-mail-version>1.4.5</javax-mail-version>",
0,CAMEL-5255,Improvement,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Jonathan Barber,0,0,2012-05-08 23:15:16+00:00,2012-05-10 02:40:49+00:00,"The attached patch captures additional information available in an SNMPv1 TRAP PDU (enterprise trap ID, agent-addr, generic trap ID, specific trap ID, and system uptime) to the camel-snmp message body.","jbarber:1336492603:2012-05-08T23:56:43.689+0000:1336492603:2012-05-08T23:56:43.689+0000:This patch uses more sane output for v1 PDU and adds an attribute to the snmp tag so the user knows it's a SNMP V1 PDU, example XML for a v1 PDU:
{code}
<snmp messageType=""v1""><entry><enterprise>0.0</enterprise></entry><entry><agent-addr>1.2.3.4</agent-addr></entry><entry><generic-trap>1</generic-trap></entry><entry><specific-trap>0</specific-trap></entry><entry><time-stamp>10</time-stamp></entry><entry><oid>0.0</oid><value>foo</value></entry><entry><oid>0.0</oid><value>bar</value></entry></snmp>
{code}

generated by net-snmp command:
{code}
snmptrap  -v 1 -c publicasd 127.0.0.1:1162  0 1.2.3.4 1 0 10  0 s 'foo' 0 s 'bar'
{code}
njiang:1336588849:2012-05-10T02:40:49.429+0000:1336588849:2012-05-10T02:40:49.429+0000:Applied patch with thanks to Jonathan, I also fixed some CS error at the same time."
0,CAMEL-5254,Improvement,Major,2.9.2,None,"
None
",Resolved,Fixed,"2.9.3, 2.10.0",Christian Schneider,Christian Schneider,0,1,2012-05-08 20:28:36+00:00,2012-05-09 08:37:40+00:00,"Currently camel-core can not be installed  into Karaf 3. The error message is that the shell.console package it imports is in version 3.0.0 in karaf 3.
Our import range is [2.2-3) though. So we should change the import to [2.2-4).


Currently this does not work with Karaf 3 but I will make sure Karaf 3 will be compatible to the current camel commands.
It is important to do the import range change now so camel 2.10.0 is later compatible.","cschneider:1336480178:2012-05-08T20:29:38.317+0000:1336480178:2012-05-08T20:29:38.317+0000:Linking to the related issue in karaf
cschneider:1336521459:2012-05-09T07:57:39.972+0000:1336521459:2012-05-09T07:57:39.972+0000:Import range increased. This will only actually work as soon as the linked karaf issue is resolved"
0,CAMEL-5253,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Daniel Kulp,Daniel Kulp,0,0,2012-05-08 16:13:18+00:00,2012-05-08 17:00:29+00:00,Spring-WS 2.0.3 has a bug ( https://jira.springsource.org/browse/SWS-750 ) which is causing test failures with Java7.   We need to update to 2.0.4 or newer to get the fix for that issue.,
0,CAMEL-5252,Improvement,Minor,2.9.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,1,2,2012-05-08 14:31:23+00:00,2016-05-03 06:37:35+00:00,"See nabble
http://camel.465427.n5.nabble.com/Invoking-a-bean-returned-by-a-previous-bean-invocation-tp5676696.html


The example with the nested animal parameter.
We should see if we can better detect this use-case, and avoid the intermediate String conversion, when its a parameter type.



       public void testBodyOgnlOnAnimalWithOgnlParams() throws Exception {
               exchange.getIn().setBody(new Animal(""tiger"", 13));
               exchange.getIn().setHeader(""friend"", new Animal(""donkey"", 4));
               assertExpression(""${body.setFriend(${header.friend})}"", null);
       }




Fails with org.apache.camel.NoTypeConversionAvailableException: No type
converter available to convert from type: java.lang.String to the required
type: org.apache.camel.language.simple.SimpleTest.Animal with value donkey","davsclaus:1462073076:2016-05-01T11:24:36.932+0000:1462073076:2016-05-01T11:24:36.932+0000:We can lazy eval that embedded function which will allow make that ognl call, to pass in the Animal instance to the serFriend method.
davsclaus:1462151714:2016-05-02T09:15:14.592+0000:1462151714:2016-05-02T09:15:14.592+0000:Got this working with lazy eval, but this requires us to trigger the lazy eval at certain times when the expression is evaluated. So the code changes are needed in several places."
0,CAMEL-5251,Bug,Minor,2.9.2,2.10.0,"
None
",Resolved,Duplicate,2.10.0,Claus Ibsen,Ed Manero,0,0,2012-05-07 23:56:47+00:00,2012-05-10 07:04:15+00:00,"SnmpConverters.java of the camel-snmp component inspects the PDU using getVariableBindings().  This method does not contain any information for PDUs representing SNMPv1 messages. The javadoc for org.snmp4j.PDUv1 indicates that unique accessors are provided for PDU instances of this type.  Because of this SnmpConverters.java needs to check if the PDU provided by snmp4j represents an SNMPv1 message and if so use the special accessors to construct the message.


Here is a test case as posted from the user forum. Note that for SNMPv1 type messages the body is empty (Body:<snmp></snmp>).


I'm starting to create some simple use cases with Camel and SNMP
traps, and I'm running into some issues (this might just be because I
don't understand properly what's going on). My current problem is that
when I create a route for SNMP traps and send SNMP v1 traps to it,
Camel seems to lose information from the trap such as the originating
IP address of the trap.


Here's what I'm doing: I first generate my camel project with the maven command:
mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes
-DarchetypeArtifactId=camel-archetype-spring -DarchetypeVersion=2.9.2
-DgroupId=camel-snmp-test -DartifactId=camel-snmp-test


And modify the camel-context.xml file to contain the route:
<camel:route>
    <camel:from uri=""snmp://0.0.0.0:1162?type=TRAP""/>
    <camel:to uri=""log://foo?showAll=true""/>
</camel:route>


then run the project with:
mvn camel:run


I then generate a trap with the net-snmp command snmptrap and the syntax:
snmptrap -v 1 -c public 127.0.0.1:1162
SNMPv2-MIB::authenticationFailure 1.2.3.4 0 coldStart.0 10


This gives me a log message of:
[PTransportMapping_0.0.0.0/1162] foo                            INFO
Exchange[Id:ID-addict-33083-1335950429878-0-18,
ExchangePattern:InOnly,
Properties:

{CamelToEndpoint=log://foo?showAll=true,
CamelCreatedTimestamp=Wed May 02 10:28:25 WEST 2012}

,
Headers:

{breadcrumbId=ID-addict--33083-1335950429878-0-17}

,
BodyType:String, Body:<snmp></snmp>, Out: null]


I'd expect to see the enterprise-oid
(SNMPv2-MIB::authenticationFailure), agent (1.2.3.4), trap-type (0),
specific-type (coldStart.0), and uptime (10 seconds), it would be nice
to see the IP that the PDU came from as well because not all traps
include a useful agent address.


Interestingly, with SNMP v2 traps I get some of this information in
the body (although no sender IP address):
snmptrap -v 2c -c public localhost:1162 ''
SNMPv2-MIB::authenticationFailure SNMPv2-MIB::sysLocation.0 s ""just
here""


[PTransportMapping_0.0.0.0/1162] foo                            INFO
Exchange[Id:ID-addict-33083-1335950429878-0-20,
ExchangePattern:InOnly,
Properties:

{CamelToEndpoint=log://foo?showAll=true,
CamelCreatedTimestamp=Wed May 02 11:33:49 WEST 2012}

,
Headers:

{breadcrumbId=ID-addict-33083-1335950429878-0-19}

,
BodyType:String,
Body:<snmp><entry><oid>1.3.6.1.2.1.1.3.0</oid><value>11 days,
23:15:58.58</value></entry><entry><oid>1.3.6.1.6.3.1.1.4.1.0</oid><value>1.3.6.1.6.3.1.1.5.5</value></entry><entry><oid>1.3.6.1.2.1.1.6.0</oid><value>just
here</value></entry></snmp>, Out: null]","emanero:1336406309:2012-05-07T23:58:29.129+0000:1336406309:2012-05-07T23:58:29.129+0000:A suggestion.  While this may not be the best implementation for a fix it demonstrates what would be necessary to obtain basic information from an SNMPv1 type message.
davsclaus:1336432357:2012-05-08T07:12:37.360+0000:1336432357:2012-05-08T07:12:37.360+0000:Hi Ed

Thanks for the patch. Can you re-attach the patch file and this time make sure to mark [x] in grant license to Apache. Otherwise we cannot accept your patch.
emanero:1336534337:2012-05-09T11:32:17.096+0000:1336534337:2012-05-09T11:32:17.096+0000:I think the patch supplied by Jonathan in CAMEL-5255 addresses the deficiency and should be applied as the fix.
davsclaus:1336604654:2012-05-10T07:04:14.883+0000:1336604654:2012-05-10T07:04:14.883+0000:Thanks Ed. Willem have applied the patch from that other ticket."
0,CAMEL-5250,Bug,Major,2.8.0,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-05-06 07:16:29+00:00,2012-06-03 14:44:50+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-to-bind-an-object-in-the-registry-camel-tp5686392.html


We should add a test case in tests/camel-itest-osgi, for spring-dm and blueprint, that uses a data format defined in the XML, but used from a route builder.",davsclaus:1338705890:2012-06-03T14:44:50.357+0000:1338705890:2012-06-03T14:44:50.357+0000:Works as designed. You need to define your data formats inside the camelContext tags.
0,CAMEL-5249,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Claus Ibsen,0,0,2012-05-05 13:44:07+00:00,2012-06-02 12:08:32+00:00,No Desc,"davsclaus:1336196675:2012-05-05T13:44:35.012+0000:1336196675:2012-05-05T13:44:35.012+0000:See nabble
http://camel.465427.n5.nabble.com/Karaf-Camel-feature-and-blueprint-tp5683343.html
davsclaus:1336196721:2012-05-05T13:45:21.672+0000:1336196721:2012-05-05T13:45:21.672+0000:We should include camel-blueprint in the camel feature so its installed out of the box, when installing the camel feature. Currently its only spring-dm you get installed."
0,CAMEL-5248,Bug,Major,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-05-05 09:34:05+00:00,2012-05-05 09:43:27+00:00,"When running mvn camel:run with a blueprint app, you may get this exception.",
0,CAMEL-5247,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,2,2012-05-05 07:30:57+00:00,2012-05-24 05:14:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/Handling-unsuccessful-Session-send-in-Quickfix-component-td5680836.html


I think about the following solution: 
replace in QuickfixjConsumer.sendOutMessage: 
session.send(quickfixjMessage);
with 
if (! session.send(quickfixjMessage) ) {
    throw new CannotSendException(); // any idea if some existing exception would make sense here?
}","maroos:1336913954:2012-05-13T20:59:14.529+0000:1336913954:2012-05-13T20:59:14.529+0000:Added:
CannotSendException

Modified:
QuickfixjConsumer
QuickfixjProducer
QuickfixjProducerTest
davsclaus:1337807681:2012-05-24T05:14:41.979+0000:1337807681:2012-05-24T05:14:41.979+0000:Thanks for the patch."
0,CAMEL-5246,Bug,Major,2.9.0,"2.9.3, 2.10.0","
None
",Resolved,Not A Problem,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,1,2012-05-04 15:14:48+00:00,2012-06-03 07:52:16+00:00,"See nabble
http://camel.465427.n5.nabble.com/Component-file-move-and-moveFailed-tp5685631.html


eg



 from file (moveFailed=error)
  onException
    to log
  end
  to bla
  to damn




Then the file should be moved to error dir, even if onException didnt handle the exception.",davsclaus:1338681135:2012-06-03T07:52:15.821+0000:1338681135:2012-06-03T07:52:15.821+0000:Works fine
0,CAMEL-5245,Improvement,Minor,2.9.0,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-05-04 06:56:28+00:00,2012-05-04 06:58:54+00:00,The managementName should be exposed in the camel context mbean as a read only attribute.,
0,CAMEL-5244,Bug,Major,"2.9.2, 2.10.0, 3.0.0",,"

build-failure
maven

",Resolved,Invalid,None,Babak Vahdat,Mark,0,0,2012-05-03 23:37:15+00:00,2012-05-07 07:06:24+00:00,"Please see:


http://mail-archives.apache.org/mod_mbox/camel-dev/201202.mbox/%3C1330285496378-5517301.post@n5.nabble.com%3E","bvahdat:1336134512:2012-05-04T20:28:32.056+0000:1336134512:2012-05-04T20:28:32.056+0000:Please first ask for help on the user-forum *before* opening such tickets. 

The trunk *does* build with Maven 3.0.4

However as the fix has not been backported to 2.9.x & 2.8.x you would have to fix it by yourself on your workspace to make the source build on the branches. And the fix is pretty trivial:

http://camel.465427.n5.nabble.com/svn-commit-r1300914-in-camel-trunk-apache-camel-pom-xml-components-camel-msv-pom-xml-td5567682.html

Here is the complete thread talking about the issue:

http://camel.465427.n5.nabble.com/About-Camel-source-which-doesn-t-build-under-Maven-3-0-4-td5517301.html

bvahdat:1336345583:2012-05-07T07:06:23.890+0000:1336345583:2012-05-07T07:06:23.890+0000:The fix is now backported on both the 2.8.x as well as the 2.9.x branches:

http://svn.apache.org/viewvc?view=revision&revision=1334883
http://svn.apache.org/viewvc?view=revision&revision=1334397"
0,CAMEL-5243,Improvement,Major,2.9.2,None,"

jt400

",Resolved,Fixed,2.10.0,Claus Ibsen,João Loureiro,0,0,2012-05-03 17:28:30+00:00,2012-05-07 11:09:37+00:00,"Data queue message exchange supports both text and binary formats and so should the remote program call exchange. The specification is the same as the one for the data queue.


Additionally, this patch supports the concept of ommiting a parameter. This is achieved by passing null as the parameter value.


Implementation note:
Since I don't know Camel's policy regarding API breaking, I opted to refer to Jt400DataQueueEndpoint.Format; but Format should now be a top-level class, since the concept is the same for data queues and programs.","davsclaus:1336197397:2012-05-05T13:56:37.667+0000:1336197397:2012-05-05T13:56:37.667+0000:Joao,

Thanks for the patch. I have applied it to trunk. Do you have any points for improving the docs with this change?
http://camel.apache.org/jt400
jloureiro:1336358929:2012-05-07T10:48:49.837+0000:1336358929:2012-05-07T10:48:49.837+0000:Hi Claus,

Thanks for applying the patch. I think the options table for Program Call should include ""format"" (and ""guiAvailable"" is missing too). The specification for those options is the same as the one for the data queue exchange.
davsclaus:1336359500:2012-05-07T10:58:20.474+0000:1336359500:2012-05-07T10:58:20.474+0000:Thanks I have updated the documentation.
jloureiro:1336359979:2012-05-07T11:06:19.895+0000:1336359979:2012-05-07T11:06:19.895+0000:Sorry I forgot about the text description:

(There is also the detail of the possibility ""omitting"" a parameter, which is an AS/400 concept). The text under ""Remote program call (Camel 2.7)"" can then be rephrased thus:

This endpoint expects the input to be either a String array or byte[] array (depending on format) and handles all the CCSID handling through the native jt400 library mechanisms. A parameter can be _omitted_ by passing null as the value in its position (the remote program has to support it). After the program execution the endpoint returns either a String array or byte[] array with the values as they were returned by the program (the input only parameters will contain the same data as the beginning of the invocation)
This endpoint does not implement a provider endpoint!

The ""Remote program call example (Camel 2.7)"" text remains valid because the default format is ""text"".
davsclaus:1336360177:2012-05-07T11:09:37.964+0000:1336360177:2012-05-07T11:09:37.964+0000:Thx updated"
0,CAMEL-5242,Improvement,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Hadrian Zbarcea,Mohammad Wrk,0,0,2012-05-03 17:01:06+00:00,2012-06-15 02:31:49+00:00,"Camel uses JSCH (http://www.jcraft.com/jsch/) library to support both SCP and SFTP. This library supports public-private key based authentication using com.jcraft.jsch.JSch.addIdentity method. However looks like Camel only supports this feature for SFTP component (http://camel.apache.org/ftp2.html) and there is no support for SCP (http://camel.apache.org/jsch.html)!


Taking into account the fact that org.apache.camel.component.jsch.ScpConfiguration (version 2.9.2) already has two attributes (privateKeyFile and privateKeyFilePassphrase) for collecting the related data, I think the change for this improvement should be something like :


 org.apache.camel.component.jsch.ScpOperations.createSession(ScpConfiguration config) {
        ObjectHelper.notNull(config, ""ScpConfiguration"");
        try {
            final JSch jsch = new JSch();
            // get from configuration
            if (isNotEmpty(config.getCiphers())) {
                LOG.debug(""Using ciphers: {}"", config.getCiphers());
                Hashtable<String, String> ciphers = new Hashtable<String, String>();
                ciphers.put(""cipher.s2c"", config.getCiphers());
                ciphers.put(""cipher.c2s"", config.getCiphers());
                JSch.setConfig(ciphers);
            }
            //New code to handle public-private key based authentication
            if (isNotEmpty(config.getPrivateKeyFile())) {
               LOG.debug(""Using private keyfile: {}"", config.getPrivateKeyFile());
               if (isNotEmpty(config.getPrivateKeyFilePassphrase())) 

{
                   jsch.addIdentity(config.getPrivateKeyFile(), config.getPrivateKeyFilePassphrase());
               }

 else 

{
                   jsch.addIdentity(config.getPrivateKeyFile());
               }

           }


        ...","hadrian:1336224081:2012-05-05T21:21:21.382+0000:1336224081:2012-05-05T21:21:21.382+0000:Mohammad, your proposed fix is good. I need to finish a test for it. I noticed today that the same feature is not tested in sftp either. I have some time tomorrow afternoon to work on the test.
hadrian:1336331188:2012-05-07T03:06:28.517+0000:1336331188:2012-05-07T03:06:28.517+0000:Made some good progress. What's left is to use a PublickeyAuthenticator with the sshd server. I am traveling this week, I hope to find a free evening to finish this."
0,CAMEL-5241,Improvement,Major,2.9.2,"2.9.3, 2.10.0","

security

",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,João Loureiro,0,0,2012-05-03 11:22:02+00:00,2012-05-05 07:54:16+00:00,"Sanitizes URI in debug messages that may otherwise reveal sensitive information.


Design note:
I opted to provide a specific method, URISupport.sanitizePath(String), instead of relaxing the match in URISupport.sanitizeUri(String). This is because formally an authority component in an URI is preceded by ""//"", which is not contained in the path part of the URI (see http://docs.oracle.com/javase/6/docs/api/java/net/URI.html).","davsclaus:1336093125:2012-05-04T08:58:45.161+0000:1336093125:2012-05-04T08:58:45.161+0000:If you enable TRACE logging then you may get the raw data. And at that level the uris should NOT be changed.

Its only at INFO and possible DEBUG level that they should, as that is a level ppl can run with in their environments.
jloureiro:1336096793:2012-05-04T09:59:53.221+0000:1336096793:2012-05-04T09:59:53.221+0000:OK, I understand. The patch then still stands for two DEBUG occurences and a generic toString().
davsclaus:1336115081:2012-05-04T15:04:41.726+0000:1336115081:2012-05-04T15:04:41.726+0000:Do you mind attaching an updated patch?
jloureiro:1336144339:2012-05-04T23:12:19.952+0000:1336144339:2012-05-04T23:12:19.952+0000:Patch update - leaves TRACE messages unchanged.
davsclaus:1336175655:2012-05-05T07:54:15.424+0000:1336175655:2012-05-05T07:54:15.424+0000:Thanks for the updated patch."
0,CAMEL-5240,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Claus Ibsen,0,3,2012-05-02 12:42:06+00:00,2012-09-10 14:09:48+00:00,"http://snmp4j.org/html/download.html


There is a 2.x release now. We should try to upgrade to that release.
If not there is also a newer 1.x release we could upgrade.


I guess OSGi bundles may be needed
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.snmp4j/","davsclaus:1335933745:2012-05-02T12:42:25.957+0000:1335933745:2012-05-02T12:42:25.957+0000:See nabble
http://camel.465427.n5.nabble.com/SNMP-traps-missing-information-in-the-Camel-message-tp5680187.html
jbonofre:1341552255:2012-07-06T13:24:15.237+0000:1341552255:2012-07-06T13:24:15.237+0000:I updated to snmp4j bundle 2.1.0_1-SNAPSHOT on my local working copy and the unit tests work.
davsclaus:1341552408:2012-07-06T13:26:48.682+0000:1341552408:2012-07-06T13:26:48.682+0000:Great we will then upgrade when there is a new batch of bundle release from the SMX team.

As usual thanks a lot for the speedy bundle.
njiang:1345404938:2012-08-20T03:35:38.061+0000:1345404938:2012-08-20T03:35:38.061+0000:I just ran some test with the SNMP4j 2.1.0, it looks you don't need change any code when updating to SNMP4j 2.1.0.
njiang:1347257388:2012-09-10T14:09:48.962+0000:1347257388:2012-09-10T14:09:48.962+0000:Applied the patch into trunk."
0,CAMEL-5239,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,2,2012-05-02 07:59:14+00:00,2012-06-04 17:44:46+00:00,"As the pax-exam 2.3 is released for a long time, we should consider to upgrade out osgi integration tests to 2.x.","bvahdat:1336625013:2012-05-10T12:43:33.359+0000:1336625013:2012-05-10T12:43:33.359+0000:CAMEL-4847 seems to be a duplicate of this ticket.
njiang:1336625693:2012-05-10T12:54:53.854+0000:1336625693:2012-05-10T12:54:53.854+0000:Yes, they are same issue. I just create a link on the CAMEL-4847.
Now I'm heading an issue of paxexam-karaf, I will commit the patch once I found a solution.
njiang:1337931782:2012-05-25T15:43:02.315+0000:1337931782:2012-05-25T15:43:02.315+0000: I managed to get most test passed with PAX-Exam2.
There are some tests failed due the current paxexam-karaf-container doesn't support to modify the test prob on fly.

I will revisit those tests when we find a way to fix the issue of paxexam-karaf-container.
The ignored tests are
HdfsRouteTest, HL7MLLPCodecTest, HL7MLLPCodec2Test, ZookeeperOSGiTest

BTW, now the camel-itest-osgi only take about 20 mins to run in my box.
)
davsclaus:1338803086:2012-06-04T17:44:46.911+0000:1338803086:2012-06-04T17:44:46.911+0000:The bulk of this work has been done, thanks.

We can revisit those tests later."
0,CAMEL-5238,Test,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-05-01 14:43:55+00:00,2012-05-01 15:27:37+00:00,"Seen this on windows




-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.avro.AvroHttpConsumerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.578 sec
Running org.apache.camel.component.avro.AvroHttpProducerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 sec
Running org.apache.camel.component.avro.AvroHttpSpringProducerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.641 sec
Running org.apache.camel.component.avro.AvroNettyConsumerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.375 sec
Running org.apache.camel.component.avro.AvroNettyProducerTest
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.156 sec <<< FAILURE!
Running org.apache.camel.component.avro.AvroNettySpringConsumerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.657 sec
Running org.apache.camel.component.avro.AvroNettySpringProducerTest
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.265 sec <<< FAILURE!
Running org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshalSpringTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.422 sec
Running org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshallTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.719 sec

Results :

Failed tests:
  testInOut(org.apache.camel.component.avro.AvroNettyProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.generated
.Value
  testInOut(org.apache.camel.component.avro.AvroNettySpringProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.gen
erated.Value

Tests run: 22, Failures: 2, Errors: 0, Skipped: 0",davsclaus:1335856285:2012-05-01T15:11:25.397+0000:1335856285:2012-05-01T15:11:25.397+0000:Okay its an issue with the avro producer not handling the response properly.
0,CAMEL-5237,Task,Major,None,None,"
None
",Resolved,Fixed,Future,Claus Ibsen,Claus Ibsen,0,2,2012-05-01 10:40:13+00:00,2012-06-27 21:27:40+00:00,"The camel-jibx component uses some jibx plugin that cannot find its dependencies in any maven repo, and we get issues when building the source.


Just getting tired of maintaining this not used component, causing build to fail due artifacts not in reliable maven repos.","hadrian:1335849026:2012-05-01T13:10:26.640+0000:1335849026:2012-05-01T13:10:26.640+0000:I'd first try to get in touch with Dennis or Nigel, but I think ultimately that's what we need to do.
dkulp:1335852539:2012-05-01T14:08:59.749+0000:1335852539:2012-05-01T14:08:59.749+0000:I'd also emphasize that if we do this for jibx, we should do this for the other components that are using artifacts not at Central.  There are a bunch of them.

hekonsek:1337658188:2012-05-22T11:43:08.037+0000:1337658188:2012-05-22T11:43:08.037+0000:Hi guys, 

I'll happy to help you with that since I use this module in some production projects. It will be a little problem for me if you remove this data format from Camel trunk. :)

What artifacts jibx-plugin misses? I'm building (mvn clean install) the camel-jibx (against the clean local Maven repository and with no settings.xml) and module is built correctly. In particular 3rd party artifacts are downloaded from the public repo [1]. I cannot reproduce the issue - could you help me with that? 

[1] http://repo.maven.apache.org/maven2/org/jibx/config/3rdparty
hekonsek:1337734069:2012-05-23T08:47:49.038+0000:1337734069:2012-05-23T08:47:49.038+0000:Actually even just now (in the project I'm working in) I've run on the case where I need to use camel-jibx again. I work a lot with high-throughput XML processing (where I make heavy use of Jibx) so I find Jibx data format very useful :) .
hekonsek:1340622901:2012-06-25T19:15:01.005+0000:1340622928:2012-06-25T19:15:28.811+0000:Daniel fixed this issue by upgrading Jibx to the latest version.

rev1353651
muellerc:1340803660:2012-06-27T21:27:40.196+0000:1340803660:2012-06-27T21:27:40.196+0000:I back ported this to Camel 2.8.x and 2.9.x as well:
rev1354732
rev1354724"
0,CAMEL-5236,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,2,2012-05-01 09:34:38+00:00,2014-12-16 07:44:52+00:00,"Currently you can use the splitter and the tokenize langue to split on a line by line basis.


We should add a way so you can say that you want to group that into X number of lines, so people can split files into smaller chunks to work with.
Currently they would need to write their own expression to return the chunks.


We could support configuring



number of lines
number of bytes","davsclaus:1335850724:2012-05-01T13:38:44.586+0000:1335850724:2012-05-01T13:38:44.586+0000:There is now a group option on the tokenizer
caringe:1418686908:2014-12-16T07:41:48.319+0000:1418686908:2014-12-16T07:41:48.319+0000:Is there any way to set the *group* option via properties? I want to use my _property placeholder_ to make the split size configurable.
davsclaus:1418687092:2014-12-16T07:44:52.697+0000:1418687092:2014-12-16T07:44:52.697+0000:Use the mailing list / user forum to ask questions"
0,CAMEL-5235,Bug,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-05-01 06:51:47+00:00,2012-05-02 08:48:42+00:00,"See nabble
http://camel.465427.n5.nabble.com/File-Processor-Not-deleting-the-files-tp5670301.html


Need to explicit close the file input/output streams to avoid the files to be locked on windows.","bvahdat:1335835118:2012-05-01T09:18:38.180+0000:1335835118:2012-05-01T09:18:38.180+0000:Claus, one stupid question of mine:

Why don't we simply remove these two static member classes EncodingFileReader as well as EncodingFileWriter and just make use of JDK's own InputStreamReader & OutputStreamWriter directly? To my understanding these two classes provide no added value other than trouble. And the JDK's own bridges (byte streams to character streams) are already *encoding aware* anyway!

So the two usage methods would simply become:

{code}
    public static BufferedReader toReader(File file, String charset) throws IOException {
        FileInputStream in = new FileInputStream(file);
        return IOHelper.buffered(new InputStreamReader(in, charset));
    }
{code}


{code}
    public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {
        FileOutputStream os = new FileOutputStream(file, append);
        return IOHelper.buffered(new OutputStreamWriter(os, charset));
    }
{code}

They were both introduced by CAMEL-2056.
davsclaus:1335835882:2012-05-01T09:31:22.806+0000:1335835882:2012-05-01T09:31:22.806+0000:Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.

With the current code we explicit close those now.
davsclaus:1335835939:2012-05-01T09:32:19.163+0000:1335835939:2012-05-01T09:32:19.163+0000:You are welcome to do some investigations and see if we can do as you suggests, but we need to make sure the file streams gets closed, to avoid locking issues with windows.
bvahdat:1335839189:2012-05-01T10:26:29.477+0000:1335839189:2012-05-01T10:26:29.477+0000:{quote}
Maybe but dont you still have the the issue that the File input/output streams do not get closed when the InputStreamWriter/OutputStreamWriter gets closed.
{quote}

No as that's done for ""free"" through the close() method magic, that's the call-chaining of the close() call by the underlying input/output streams. As an example when we look at BufferedReader.close() method we see that the close() call get's chained and the underlying stream (hopefully) does properly chain the call again and again, until the OS native stream gets properly closed. *But* that's the user's responsibility to
do that:


{code}
BufferedReader myReader = CamelContext.getTypeConverter().convertTo(BufferedReader.class, ...);
…
…
myReader.close(); // user should close the stream properly after the usage
{code}

The main ""problem"" is that we can't control if the user do *properly* close the Reader, Writer, In and Outputstream after the usage. And if they don't, then they will run into trouble and think something in Camel could be the reason for that.
davsclaus:1335854908:2012-05-01T14:48:28.571+0000:1335854908:2012-05-01T14:48:28.571+0000:Yeah if the user gets a reader/stream etc then he may need to close it after use.

But in this use-case it was converting to String or byte[] etc directly. And for that Camel must make sure to close the stream internally.
bvahdat:1335917329:2012-05-02T08:08:49.269+0000:1335917381:2012-05-02T08:09:41.615+0000:While trying to find some resources on the web describing what my *poor* english is talking about, I came along many of them but the best one was given through that *already dissappered real vendor* itself:

{quote}
Similarly, when closing chained streams, you only need to close the outermost stream class because the close() call is automatically trickled through all the chained classes; in the example above, you would simply call the close() method on the GZIPOutputStream class.
{quote}

When you look at the example there the inner most OutputStream is also a FileOutputStream, however there's no need of an explicit close call on that:

http://java.sun.com/developer/technicalArticles/Streams/ProgIOStreams/

There are plenty of other APIs having similar semantics (call-chaining) like when you close a JDBC Statement:

{quote}
Note:When a Statement object is closed, its current ResultSet object, if one exists, is also closed.
{quote}

http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#close()

So why I still ask for your approval to get rid of those two obsolete static member classes.

davsclaus:1335919722:2012-05-02T08:48:42.273+0000:1335919722:2012-05-02T08:48:42.273+0000:Yes they can possible be removed, just make sure the FileInputStream gets closed, as otherwise it can lock file handles on Windows."
0,CAMEL-5234,Bug,Major,"2.7.5, 2.8.4, 2.9.2","2.9.3, 2.10.0","

in
out
out-capable
response
spring-ws

",Resolved,Fixed,"2.9.3, 2.10.0",Babak Vahdat,Benjamin Gniza,0,3,2012-04-30 17:15:01+00:00,2012-06-11 21:10:39+00:00,"Spring-WS component does not behave as expected from pipes and filters pattern if exchange is not outCapable.
If ExchangeHelper.isOutCapable returns false for the given exchange the IN-message is returned instead of the WS-Response.
Example:


ExampleRoute
        from(""timer://foo?fixedRate=true&period=1000"")//
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");




In the example above I would expect the WS-response written to the files in the responses directory. Currently (since 2.7.3) the IN message is written to the files.
This is caused by SpringWebserviceProducer#process because it only sets headers and body for the OUT-message if isOutCapable is true.


Workaround (maybe this has side effects!):


ExampleRoute
                from(""timer://foo?fixedRate=true&period=1000"")//
                .setExchangePattern(ExchangePattern.InOut) // <-- Override with InOut Pattern
                .setBody().simple(""<ex:getExampleResponse xmlns:ex=\""http://example.com/\"">"" //
                        + ""       <id>1</id>"" //
                        + ""     </ex:getExampleResponse>"")//
                .to(""spring-ws:http://localhost:9000/Example"")//
                .to(""file://responses"");




This behavior has been implemented to fix CAMEL-3974. From my point of view its counter intuitive since other processing-steps don't check the exchange's outCapability.
It took me several hours to find out why I always got the IN message back, although the webservice was called correctly and returned correct results.
Maybe an option should be provided to control this behavior. At least a log-message should be written to explain, that the webservice-reponse is thrown away.","bvahdat:1335836451:2012-05-01T09:40:51.604+0000:1335836451:2012-05-01T09:40:51.604+0000:This behavior is intended and not a bug!

So that if you need an InOut Exchange-Pattern then just say it using the DSL, that's instead of:

{code}
to(""spring-ws:http://..."")...
{code}

you could do:

{code}
...inOut(""spring-ws:http://..."")....
{code}

See also http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-0-td4584312i20.html#a4593321

bvahdat:1335943058:2012-05-02T15:17:38.064+0000:1335943058:2012-05-02T15:17:38.064+0000:BTW as in the meanwhile inOut() has been already deprecated, then better make use of setExchangePattern(exchangePattern) API.
See the Javadoc of inOut() for more details. 
bvahdat:1335944443:2012-05-02T15:40:43.225+0000:1335944443:2012-05-02T15:40:43.225+0000:Just realized that you have already made use of setExchangePattern(ExchangePattern.InOut) API.

I do agree to put a log-message to warn that the webservice-response will be thrown away. Do you have any suggestion for a meaningful and well-understandable log message to be used here?
benjamin.gniza:1335947876:2012-05-02T16:37:56.666+0000:1335947976:2012-05-02T16:39:36.467+0000:Regarding your linked post:
Didn't you say there that this seems API-breaking for you? Providing such a change in a patch version shouldn't be done. (This behavior was introduced from 2.7.2 to 2.7.3).

Anyway, I think this may be intentional but is very confusing. Using the restlet-component (http://camel.apache.org/restlet.html) you don't have to change the Exchange-Pattern but can go with the following example (which is similiar to my first spring-ws example):
{code:title=Restlet Example}
from(""timer://foo?fixedRate=true&period=1000"")//
                .setHeader(""id"", new SimpleExpression(""1""))//
                .to(""restlet:http://localhost:9000/Example/{id}"")//
                .to(""file://responses"");
{code}
I think we agree that this inconsitent component behavior may confuse a lot of people.
bvahdat:1335949400:2012-05-02T17:03:20.025+0000:1335949400:2012-05-02T17:03:20.025+0000:Yes at that time it seemed / was API breaking to me as it happened in a patch version. And do agree that this could be confusing for people trying to upgrade.

I will try to get in touch with Richard Kettelerij who has denoted this component. Just wonder what he thinks about this.
davsclaus:1338633559:2012-06-02T18:39:19.576+0000:1338633559:2012-06-02T18:39:19.576+0000:Yes the response from Spring-WS should be used regardless of the MEP pattern. Only if the actual invoked web service method is a OneWay web service, then it should not use the response from the WS. eg bottom line its the nature of the WS method that dictates this, not the MEP flag in Camel.
muellerc:1338686788:2012-06-03T09:26:28.137+0000:1338686788:2012-06-03T09:26:28.137+0000:This means if the MEP is inOnly and the web service returns a response, we should put this into the in message (body and headers) after cleaning it from the request body and headers, right?
davsclaus:1338687366:2012-06-03T09:36:06.220+0000:1338687366:2012-06-03T09:36:06.220+0000:Yes.

Normally the response is set on the IN message if its NOT out capable.

if OUT capable
  set response OUT
else
  set response IN

But in the world of WS you can have OneWay which is a bit special WS. Normally they are request/reply over WS.


bvahdat:1338689094:2012-06-03T10:04:54.680+0000:1338694255:2012-06-03T11:30:55.719+0000:Now I'm a bit confused :-(
Currently we have the following by SpringWebserviceProducer

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
}
{code}

Now do you mean we should change this to

{code}
if (ExchangeHelper.isOutCapable(exchange)) {
    exchange.getOut().copyFrom(exchange.getIn());
    exchange.getOut().setBody(body);
} else {
    exchange.getIn().setBody(body);
}
{code}

And what about camel-restlet? Seems it doesn't care about MEP:
https://fisheye6.atlassian.com/browse/~br=trunk/camel/trunk/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/DefaultRestletBinding.java?hb=true#to266

Also do we maybe have a documentation about these MEP rules somewhere where I can learn it from?
bvahdat:1338784632:2012-06-04T12:37:12.136+0000:1338784632:2012-06-04T12:37:12.136+0000:Also looking at camel-cxf it does the same way as camel-spring-ws (which is a *different behaviour* than camel-restlet :-():

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducer.java?hb=true#to183

muellerc:1338785947:2012-06-04T12:59:07.504+0000:1338785947:2012-06-04T12:59:07.504+0000:Babak, could you please start a general discussion about this on dev@.
My understanding is the following:
If a component provides integration for e.g. spring-ws and execute a request which will receive a respone, this component should check the MEP and put the respone into the out message if the MEP is ""put capable"" or replace the in message if not (and also the headers and attachments of course).
bvahdat:1338787585:2012-06-04T13:26:25.227+0000:1338787585:2012-06-04T13:26:25.227+0000:Done:
http://camel.465427.n5.nabble.com/About-what-to-do-with-the-Response-retrieved-through-a-Producer-when-the-Exchange-is-NOT-out-capable-td5713946.html
bvahdat:1339128536:2012-06-08T12:08:56.481+0000:1339128536:2012-06-08T12:08:56.481+0000:A potential patch for the review.
davsclaus:1339141145:2012-06-08T15:39:05.580+0000:1339141145:2012-06-08T15:39:05.580+0000:The patch seems fine
muellerc:1339420239:2012-06-11T21:10:39.272+0000:1339420239:2012-06-11T21:10:39.272+0000:Looks good for me too."
0,CAMEL-5233,Task,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-30 04:56:54+00:00,2012-04-30 06:15:22+00:00,"Fix the osgi import|export of camel-spring, so it wont include components from camel-core.


See nabble
http://camel.465427.n5.nabble.com/duplicated-classes-in-camel-core-and-camel-spring-2-9-2-tp5674967.html",
0,CAMEL-5232,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-28 07:21:57+00:00,2012-04-29 09:29:30+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-XSLT-Component-Load-XSLT-from-database-tp5033499p5033499.html


We should add support for query parameters in the xslt component if http/https is used.","davsclaus:1335662970:2012-04-29T09:29:30.538+0000:1335662970:2012-04-29T09:29:30.538+0000:Also freemarker, velocity and string template supports http resources with query parameters"
0,CAMEL-5231,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Claus Ibsen,0,1,2012-04-27 11:45:28+00:00,2017-02-28 12:49:05+00:00,"See nabble
http://camel.465427.n5.nabble.com/xpath-and-namespaces-tp5659835p5659835.html


We should look into if we can detect the custom namespaces from the XML files and inject those on the XPath/XQuery expressions (eg the namespace aware definitions). See the namespace handler code in camel-spring etc. as we inject it there when parsing the spring xml files.","davsclaus:1488257327:2017-02-28T12:48:47.910+0000:1488257327:2017-02-28T12:48:47.910+0000:We did improve this in recent versions, so this may work now."
0,CAMEL-5230,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Guillaume Nodet,Claus Ibsen,0,0,2012-04-27 08:12:48+00:00,2012-04-27 11:07:45+00:00,"We should allow people to use blueprint cm:property-placeholder and have it working with unit tests using pojosr.


Currently the container hangs when using this.",
0,CAMEL-5229,Bug,Minor,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-27 07:47:29+00:00,2012-04-27 07:55:15+00:00,"Property placeholders using blueprint, should avoid setting empty locations by default",
0,CAMEL-5228,Task,Minor,None,Future,"
None
",Resolved,Fixed,Future,Daniel Kulp,Claus Ibsen,0,2,2012-04-27 05:45:36+00:00,2013-05-26 11:09:11+00:00,"CXF 2.6 now supports Jetty 7.6, so we can upgrade to this version now: 7.6.3.v20120416","davsclaus:1335479283:2012-04-27T06:28:03.307+0000:1335479283:2012-04-27T06:28:03.307+0000:Ah damn its the usual osgi crapola. Created a ticket to let Karaf support Jetty 7.6
https://issues.apache.org/jira/browse/KARAF-1415
davsclaus:1335479461:2012-04-27T06:31:01.106+0000:1335479461:2012-04-27T06:31:01.106+0000:The subversion commits tab contains a commit with the upgrade. So when we can do this with Karaf then we can grab the commit and re apply it.
dkulp:1335498134:2012-04-27T11:42:14.535+0000:1335498154:2012-04-27T11:42:34.577+0000:I'm going to assign this to me.   CXF uses a bit of reflection to allow it to work with Jetty 7.5, 7.6, and 8.1.   I'll port some of that to camel-jetty and see what's possible.   In addition, the OSGi version range will need updating as well.

dkulp:1335527499:2012-04-27T19:51:39.966+0000:1335527499:2012-04-27T19:51:39.966+0000:The src/main/java tree is all set with 7.6 and the OSGi imports as well.  I've tested it all with 7.5, 7.6, and 8.1 and it now works fine.   However, left the ""default"" as 7.5 so as to maintain commonality with Karaf/CXF/etc...


davsclaus:1369537751:2013-05-26T11:09:11.413+0000:1369537751:2013-05-26T11:09:11.413+0000:We have upgraded to 7.6.x in recent time"
0,CAMEL-5227,Bug,Critical,2.9.2,"2.9.3, 2.10.0","
None
",Closed,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Scott Parkerson,0,0,2012-04-27 00:19:10+00:00,2012-04-30 13:57:03+00:00,"When attempting to create a camel-jetty endpoint in Camel 2.9.2, the following exception is thrown:



java.lang.NoSuchMethodError: org.eclipse.jetty.servlet.ServletContextHandler.addFilter(Lorg/eclipse/jetty/servlet/FilterHolder;Ljava/lang/String;Ljava/util/EnumSet;)V
at org.apache.camel.component.jetty.JettyHttpComponent.enableMultipartFilter(JettyHttpComponent.java:407)
    at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:325)
    at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:148)
    at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:56)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1707)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:1979)
    at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1934)
    at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1862)
    at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1646)
    at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1533)
    at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1420)
    at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
    at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1388)
.
.
.




This appears to be a regression of a caused by the this merge from trunk, which I suspect requires Jetty 8 to be used.


Creating the endpoint under 2.9.1 works fine.","davsclaus:1335474915:2012-04-27T05:15:15.459+0000:1335474915:2012-04-27T05:15:15.459+0000:What version of Jetty are you using?
davsclaus:1335475013:2012-04-27T05:16:53.508+0000:1335475013:2012-04-27T05:16:53.508+0000:Its this ticket
https://issues.apache.org/jira/browse/CAMEL-5016
davsclaus:1335475623:2012-04-27T05:27:03.493+0000:1335475623:2012-04-27T05:27:03.493+0000:I have reverted rev 1307901 on the 2.9 branch so the API is compatible with Jetty 7 again. This is the version we support on the 2.9 branch.
davsclaus:1335475702:2012-04-27T05:28:22.015+0000:1335475702:2012-04-27T05:28:22.015+0000:I am inclined to do the same on the Camel trunk as we are not supporting Jetty 8 currently. Jetty is hard to upgrade as many other projects depend on it, CXF, AMQ, Karaf etc.
davsclaus:1335476190:2012-04-27T05:36:30.138+0000:1335476190:2012-04-27T05:36:30.138+0000:Thanks for reporting. I have reverted the change on Camel trunk so Camel 2.10 is Jetty 7 API compatible again.
snortasprocket:1335765423:2012-04-30T13:57:03.140+0000:1335765423:2012-04-30T13:57:03.140+0000:Verified as fixed in 2.9.3-SNAPSHOT. Thank you!"
0,CAMEL-5226,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Mark Ford,0,2,2012-04-26 22:13:17+00:00,2012-07-08 06:47:28+00:00,"Currently it's possible to set a TTL at the cache level but there is no way to override this value at the Element.


I propose adding some headers for controlling this behavior. Something along the lines of:


CamelCacheTimeToLive (seconds)
CamelCacheTimeToIdle (seconds)
CamelCacheEternal (boolean)


These values would apply to the ADD and UPDATE operations. 


I'll look at creating a patch.","davsclaus:1341547902:2012-07-06T12:11:42.915+0000:1341547902:2012-07-06T12:11:42.915+0000:Any update on a patch?
massfords:1341640699:2012-07-07T13:58:19.643+0000:1341640699:2012-07-07T13:58:19.643+0000:I've made the changes to the CacheProducer and included unit tests for each of the new properties.

davsclaus:1341701247:2012-07-08T06:47:27.892+0000:1341701247:2012-07-08T06:47:27.892+0000:Thanks for the patch."
0,CAMEL-5225,Bug,Major,2.9.2,"2.9.3, 2.10.0","

netty

",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,edge wang,0,2,2012-04-26 16:03:53+00:00,2012-06-13 09:33:13+00:00,"Camel-netty uses general configuration model for referenced encoders/decoders for channel pipelines, see DefaultServerPipelineFactory. That is, create encoder/decoder objects at configuration parsing time and store them in a list, then use them when a pipeline is established. However, this will make encoder/decoder objects shared among different pipelines, that may cause data conflicts, when the encoder/decoder is not Sharable(has object status/not annotated as @Sharable), e.g. a LengthFieldBasedFrameDecoder.


Although we can avoid the problem by totally writing a new serverpipelinefactory for our apps, several problem still remains, please see detailed description and testcase for this bug at:


http://camel.465427.n5.nabble.com/camel-netty-bug-and-the-need-of-best-practice-for-creating-referenced-parameter-object-on-looking-up-td5627926.html","edge:1335432170:2012-04-26T17:22:50.893+0000:1335432170:2012-04-26T17:22:50.893+0000:here is the test for showing this bug, as mentioned in the post at nabble, you can get random results each time you run the testcase when this bug exists.
davsclaus:1335481075:2012-04-27T06:57:55.717+0000:1335481129:2012-04-27T06:58:49.834+0000:camel-netty have been improved for Camel 2.10.

And if you use decoders/encoders that cannot be shared with multiple consumers, then you need to enlist 2 in the registry etc.
This is *not* a bug, but how its designed. You as the end user must configure the endpoints/components correctly.

I have added your test to the source and it passes on trunk.
edge:1335516973:2012-04-27T16:56:13.441+0000:1335516973:2012-04-27T16:56:13.441+0000:Thank you very much for your response and adding my testcase to the trunk. However, your answer makes me aware of two things:

1.My testcase is very very misleading (so sorry for that), makes people think the problem is due to sharing decoders among consumers, but that's not the case, as I explained very clearly in the posts, it is because you share them among *pipelines*, not consumers.

2.Camel-netty in version 2.10 (as well as 2.9.2) introduced a new bug, severe than the one I reported, breaks netty's pipeline model more than before. Hence even I correct the implementation of DefaultServerPipelineFactory, the testcase still breaks.

So here I attach the correct testcase, and do some reference to show the problem I reported as well as the new bug introduced.

sorry again for the previous misleading testcase :)
edge:1335517845:2012-04-27T17:10:45.392+0000:1335517845:2012-04-27T17:10:45.392+0000:Here is the correct testcase and the patch to pass the testing. The patch simply creates a new decoder(by hard coding that matches the testcase) each time when getpipeline is called, when you run the testcase against patched 2.9.1 version of cammel-netty, you get it passed, but not for 2.9.2 and 2.10.
edge:1335518407:2012-04-27T17:20:07.863+0000:1335518407:2012-04-27T17:20:07.863+0000:Here are some references:

1.showing that unsharable decoders should not be shared among channels(pipelines)

http://stackoverflow.com/questions/9254800/is-framedecoder-not-safe-in-non-single-connection-situation

and of course the mentioned url:

http://netty.io/docs/stable/api/org/jboss/netty/channel/ChannelHandler.Sharable.html

2.the evidence showing the new bug

Line 183-185 of NettyConsumer.java in version 2.9.2 ant 2.10:
---------------------------------------------------------------------------------------------------
        // must get the pipeline from the factory when opening a new connection
        ChannelPipeline serverPipeline = pipelineFactory.getPipeline(this);
        serverBootstrap.setPipeline(serverPipeline);
---------------------------------------------------------------------------------------------------

The netty javadoc for ServerBootStrap.setPipeline:
---------------------------------------------------------------------------------------
public void setPipeline(ChannelPipeline pipeline)
Sets the default ChannelPipeline which is cloned when a new Channel is created. Bootstrap creates a new pipeline which has the same entries with the specified pipeline for a new channel.
Calling this method also sets the pipelineFactory property to an internal ChannelPipelineFactory implementation which returns a shallow copy of the specified pipeline.

Please note that this method is a convenience method that works only when 1) you create only one channel from this bootstrap (e.g. one-time client-side or connectionless channel) or 2) the ChannelPipelineCoverage of all handlers in the pipeline is ""all"". You have to use setPipelineFactory(ChannelPipelineFactory) if 1) your pipeline contains a ChannelHandler whose ChannelPipelineCoverage is ""one"" and 2) one or more channels are going to be created by this bootstrap (e.g. server-side channels).
----------------------------------------------------------------------------------------

So you are setting the pipeline to the serverbootstrap for netty consumer (which opens server-side channels), simply breaks the second situation when ""You have to use setPipelineFactory(ChannelPipelineFactory)"". However, the implementation in 2.9.1 and before is correct.


davsclaus:1339140628:2012-06-08T15:30:28.942+0000:1339140628:2012-06-08T15:30:28.942+0000:Thanks for reporting.

I have refactored to use the pipeline factory, so we support stateful codecs
edge:1339268491:2012-06-10T03:01:31.213+0000:1339268491:2012-06-10T03:01:31.213+0000:Would you please adopt my revised UnsharableCodecsConflictsTest.java and run the test? I only saw the code somewhat reverted to version 2.9.1, but didn't solve the problem I reported. The problem exists as long as you use code like this(DefaultServerPipelineFactory.java):

        List<ChannelUpstreamHandler> decoders = consumer.getConfiguration().getDecoders();
        for (int x = 0; x < decoders.size(); x++) {
            channelPipeline.addLast(""decoder-"" + x, decoders.get(x));
        }

this configuration model causes the decoders(created and cached in consumer.getConfiguration().getDecoders()) to be shared among pinelines and then lead to conflicts on stateful codecs.
davsclaus:1339551193:2012-06-13T09:33:13.188+0000:1339551193:2012-06-13T09:33:13.188+0000:Okay I have further improved the code to support for shareable and non-shareable encoders/decoders."
0,CAMEL-5224,Bug,Major,2.9.1,"2.9.3, 2.10.0","

camel-file

",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,David Cifer,0,0,2012-04-26 10:10:51+00:00,2012-04-29 12:51:37+00:00,"We are consuming a feed from a mounted windows network drive, where we have rw access.
During the download we shouldn't touch anything so other users see the directory intact.


However even if we turn noop=true the done file got deleted after successfull conumptions","edvicif:1335406322:2012-04-26T10:12:02.188+0000:1335406322:2012-04-26T10:12:02.188+0000:I've attached a unit test, which reproduce the issue.
edvicif:1335406349:2012-04-26T10:12:29.515+0000:1335406349:2012-04-26T10:12:29.515+0000:Ticket were generated based on conversation:
http://camel.465427.n5.nabble.com/Prevent-done-file-deletion-after-file-consumption-td5665345.html#a5667144
edvicif:1335406676:2012-04-26T10:17:56.538+0000:1335406676:2012-04-26T10:17:56.538+0000:Note the documentation:
http://camel.apache.org/file2.html#File2-Usingdonefiles

After the first example box it is stated: ""Camel will automatically delete the done file when it's done consuming the files.""

Maybe this needs to be updated as well."
0,CAMEL-5223,Bug,Major,2.9.2,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Tobias Hofer,0,3,2012-04-26 07:46:52+00:00,2012-06-15 15:46:55+00:00,"I switched from Apache Camel version 2.8.4 (in ServiceMix 4.4.1) to the most recent version 2.9.2. Resource loading in 2.8.4 worked well, but not in the named release.


Find attached a small test case that uses XSLT and String-Template Endpoints. Neither of them can load their resource from the separate bundle.



Install Apache ServiceMix 4.4.1
Configure ServiceMix to use Apache Camel 2.9.2 (see etc/org.apache.karaf.features.cfg)
Start up ServiceMix
Install feature 'camel-string-template'
Build the attached test project using maven
Copy/Link the built artifact into the deploy folder
Copy/Link the route src/test/resources/camel-route into the deploy folder



The XSLT Component tries to load the resource eagerly. Therefore the route will not start and throws the following exception:



Caused by: java.io.FileNotFoundException: Cannot find resource in classpath for URI: com/basis06/apache/camel/HelloWorld.xslt
	at org.apache.camel.util.ResourceHelper.resolveMandatoryResourceAsUrl(ResourceHelper.java:122)
	at org.apache.camel.component.xslt.XsltEndpoint.loadResource(XsltEndpoint.java:67)




The same problem exists with the String-Template Component. But this component will fail not until it is called in the route.","davsclaus:1335412938:2012-04-26T12:02:18.621+0000:1335412938:2012-04-26T12:02:18.621+0000:Resource loading works fine for me.

I moved the XML file into the src/main/resources/OSGI-INF/blueprint directory, which is the standard for blueprint XML files.
I removed the string template endpoint, so the route only did the xstl.

I installed the application on Fuse ESB which supports offically Camel 2.9, and it worked fine
I copied a test file and it was processed and from the shell I can get details
{code}
FuseESB:karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 165-camel-3

Properties
		id = helloWorld
		parent = 37fe883b

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 62ms
	Max Processing Time: 62ms
	Mean Processing Time: 62ms
	Total Processing Time: 62ms
	Last Processing Time: 62ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-04-26 14:01:03
	Last Exchange Completed Date: 2012-04-26 14:01:03

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""file:data/out"" id=""to2""/>
</route>
{code}
davsclaus:1335413454:2012-04-26T12:10:54.564+0000:1335413454:2012-04-26T12:10:54.564+0000:I did get puzzled by the code that loads the resource in camel-core-osgi, so I have asked for the OSGi experts to chim in.
I posted on Camel @dev so keep an eye there.
tsh:1335416319:2012-04-26T12:58:39.911+0000:1335416319:2012-04-26T12:58:39.911+0000:Putting the blueprint xml into the bundle works, because they share the same bundle context then.

But my test case tries to use a classpath resource from another bundle. This works fine for classes exported by the bundle but not for resources.

Putting the blueprint xml into the deploy folder deploys that in its own bundle context that will dynamically import required packages (from other bundles).

You can extend the test case and successfully invoke the HelloWorld class inside the route. But you cannot access any resource from the bundle that provides the HelloWorld class.


dkulp:1335418338:2012-04-26T13:32:18.255+0000:1335418338:2012-04-26T13:32:18.255+0000:
I ran into this same issue with CXF's WS-N server on Tuesday.   The xsd's are in the cxf-wsn-api bundle, but the cxf-wsn-core bundle could not load them even if importing the package.   The ONLY solutions I found were:

1) Make cxf-wsn-core use a Dynamic-Import for the package that contains the resources.  A normal import did not work, just the Dynamic-Import

2) Make cxf-wsn-core use a Require-Bundle: cxf-wsn-api

I'm not sure yet if this is a bug in the OSGi stuff.  (I also only checked with Felix, I need to also check to see if Equinox exhibits the same issue)



hadrian:1339742581:2012-06-15T14:43:01.268+0000:1339742581:2012-06-15T14:43:01.268+0000:This is not really a Camel issue but an Aries/Karaf one. I think it's already fixed, but we're not gonna block the 2.10.0 and wait for new releases. I unset the fix version for now.
tsh:1339743720:2012-06-15T15:02:00.760+0000:1339743764:2012-06-15T15:02:44.801+0000:The 'OsgiClassResolver' in the camel-spring bundle contains the bug.
{code}
public URL loadResourceAsURL(String uri) {
    ObjectHelper.notEmpty(uri, ""uri"");
    return bundleContext.getBundle().getEntry(uri);
}
{code}

The call to {{getEntry}} does only look in the classpath of the bundle. Imported packages are not considered. {{getResource}} is the correct method to call.

See http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getEntry(java.lang.String)
See also http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/Bundle.html#getResource(java.lang.String)

tsh:1339744120:2012-06-15T15:08:40.808+0000:1339744120:2012-06-15T15:08:40.808+0000:The {{OsgiClassResolver}} is now (in the trunk) located in {{camel-core-osgi}}. Same code, same problem.

davsclaus:1339746196:2012-06-15T15:43:16.879+0000:1339746196:2012-06-15T15:43:16.879+0000:I tried your suggestion with Karaf 2.2.7, and Camel 2.10-SNAPSHOT, and got it working.

The route is processed and I got a hello world in the output directory.

{code}
davsclaus:/opt/apache-karaf-2.2.7$ mv sample.xml data/in
davsclaus:/opt/apache-karaf-2.2.7$ ls data/
cache/             in/                out/               tmp/               
generated-bundles/ log/               port               
davsclaus:/opt/apache-karaf-2.2.7$ ls data/in/.camel/sample.xml 
data/in/.camel/sample.xml
davsclaus:/opt/apache-karaf-2.2.7$ cat data/out/sample.xml 
""Hello World""davsclaus:/opt/apache-karaf-2.2.7$ 
{code}
davsclaus:1339746237:2012-06-15T15:43:57.899+0000:1339746237:2012-06-15T15:43:57.899+0000:karaf@root> camel:route-info helloWorld 
Camel Route helloWorld
	Camel Context: 79-camel-3

Properties
		id = helloWorld
		parent = 6c4f7b4c

Statistics
	Exchanges Total: 1
	Exchanges Completed: 1
	Exchanges Failed: 0
	Min Processing Time: 177ms
	Max Processing Time: 177ms
	Mean Processing Time: 177ms
	Total Processing Time: 177ms
	Last Processing Time: 177ms
	Load Avg: 0.00, 0.00, 0.00
	First Exchange Date: 2012-06-15 17:43:41
	Last Exchange Completed Date: 2012-06-15 17:43:41

Definition
<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route id=""helloWorld"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""file:data/in""/>
    <to uri=""xslt:com/basis06/apache/camel/HelloWorld.xslt"" id=""to1""/>
    <to uri=""string-template:com/basis06/apache/camel/Quote.txt"" id=""to2""/>
    <to uri=""file:data/out"" id=""to3""/>
</route>"
0,CAMEL-5192,Bug,Major,"2.8.4, 2.9.1","2.8.6, 2.9.3","
None
",Resolved,Fixed,"2.8.6, 2.9.3",Claus Ibsen,Jean-Baptiste Onofré,0,0,2012-04-19 08:15:36+00:00,2012-06-03 14:53:24+00:00,"The URI of the Spring schema has been updated in Camel 2.9.1 and 2.8.4:


http://camel.apache.org/schema/cxf/


We can see that starting from 2.9.1 and 2.8.4, we suffix the schema with -spring or -blueprint.


However, the spring.schema resource file has not been updated with this suffix.",cschneider:1334796974:2012-04-19T08:56:14.522+0000:1334796974:2012-04-19T08:56:14.522+0000:Looks like a bug .. I think we should also update the spring.schema file to reflect this change
0,CAMEL-5191,Bug,Minor,2.9.2,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,XiaopengLi,0,0,2012-04-19 02:42:02+00:00,2012-04-29 14:11:24+00:00,"There is no JMX MBean for onException component, which makes statistics unavailable.


For example:




import javax.jms.ConnectionFactory;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;

/**
 * A Camel Router
 */
public class OnExceptionRouteBuilder extends RouteBuilder {

	/**
	 * A main() so we can easily run these routing rules in our IDE
	 */
	public static void main(String... args) throws Exception {

		CamelContext camelContext = new DefaultCamelContext();

		ConnectionFactory jmsConnectionFactory = new org.apache.activemq.ActiveMQConnectionFactory(
				""tcp://localhost:61616"");
		camelContext.addComponent(""jms"",
				org.apache.camel.component.jms.JmsComponent
						.jmsComponent(jmsConnectionFactory));

		camelContext.addRoutes(new OnExceptionRouteBuilder());

		camelContext.start();

		Thread.sleep(100000000);
	}

	/**
	 * Lets configure the Camel routing rules using Java code...
	 */
	public void configure() {

		onException(javax.jms.JMSException.class).process(new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				System.out.println(""error"");

			}
		}).to(""log:exception"");

		from(""timer://myTimer?period=2000&repeatCount=1"").setBody()
				.simple(""hello JMS!"").process(new Processor() {

					@Override
					public void process(Exchange exchange) throws Exception {
						System.out.println(""We will write to ActiveMQ queue: ""
								+ exchange.getIn().getBody(String.class));

					}
				}).to(""jms:queue:hello"");

	}

}





And there are only two processors(We have four in the test case) in org.apache.camel/processors, none for onException branch. See the picture attached.","davsclaus:1335679884:2012-04-29T14:11:24.805+0000:1335679884:2012-04-29T14:11:24.805+0000:Working as designed. See this FAQ
http://camel.apache.org/why-is-my-processor-not-showing-up-in-jconsole.html"
0,CAMEL-5190,Task,Major,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-04-18 15:47:16+00:00,2012-04-19 01:38:58+00:00,"As the CXF 2.5.3 is released, we should consider to upgrade CXF version in Camel.",njiang:1334770738:2012-04-19T01:38:58.898+0000:1334770738:2012-04-19T01:38:58.898+0000:Applied patch into trunk and camel-2.9.x branches.
0,CAMEL-5189,Improvement,Major,2.9.0,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,2,2012-04-18 12:19:05+00:00,2013-08-28 08:23:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/Stateful-Dynamic-Router-tp5647070p5647070.html


This allows other EIPs such as the dynamic route to use state when using a bean as its expression.","davsclaus:1334725251:2012-04-18T13:00:51.363+0000:1334725251:2012-04-18T13:00:51.363+0000:Updated the wiki page of the dynamic router EIP as well
coolhandl:1345804593:2012-08-24T18:36:33.334+0000:1345804593:2012-08-24T18:36:33.334+0000:It would seem that at some time there was a concern that bean/method expressions (expressions in general?) not have side effects on an exchange. Is that not still a concern?
This change negates the whole point of using a copy of the exchange, so wouldn't it be simpler to just not use a copy?
Also, a bean expression that uses a camel ognl expression for the method name will still not propagate state because the OgnlInvokeProcessor uses a copy as well.
larim:1377649398:2013-08-28T08:23:18.073+0000:1377649416:2013-08-28T08:23:36.090+0000:I'm facing the same problem using camel 10.3. Storing the state works until the routing method returns NULL."
0,CAMEL-5188,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-18 09:41:07+00:00,2012-04-18 09:41:16+00:00,"Its to confusing when some EIPs are not enlisted, while others are in JMX.


So we should make sure all the EIPs out of the box is enlisted in JMX.
Currently some of the transformation/validation etc EIPs is missing.",
0,CAMEL-5187,Bug,Minor,2.9.1,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,christian ohr,0,0,2012-04-17 13:18:24+00:00,2012-04-18 08:00:15+00:00,"While setting up a Camel web application for WebSphere (7) I encountered two issues


1. Documentation: the Camel JMX docs proposes the following settings for WebSphere:



<camel:jmxAgent id=""agent"" createConnector=""true"" mbeanObjectDomainName=""org.yourname"" mbeanServerDefaultDomain=""WebSphere""/>




This registers the beans with the PlatformMbeanServer instead of the WebSphere MBean server. The following setup works better:



<camel:jmxAgent id=""agent"" createConnector=""false"" mbeanObjectDomainName=""org.yourname"" usePlatformMBeanServer=""false"" mbeanServerDefaultDomain=""WebSphere""/>




2. For each Camel route, the same Tracer and DefaultErrorHandler MBeans are tried to be registered over and over again. Because WebSphere changes the ObjectNames on registration, 


server.isRegistered(name); in DefaultManagementAgent#registerMBeanWithServer always returns false, which causes the MBean to be re-registered, which again cause Exceptions, e.g.



14:35:48,198 [WebContainer : 4] [] WARN  - DefaultManagementLifecycleStrategy.onErrorHandlerAdd(485) | Could not register error handler builder: ErrorHandlerBuilderRef[CamelDefaultErrorHandlerBuilder] as ErrorHandler MBean.
javax.management.InstanceAlreadyExistsException: org.apache.camel:cell=wdf-lap-0319Node01Cell,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"",context=wdf-lap-0319/camelContext,type=errorhandlers,node=wdf-lap-0319Node01,process=server1
	at com.sun.jmx.mbeanserver.Repository.addMBean(Repository.java:465)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1496)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerDynamicMBean(DefaultMBeanServerInterceptor.java:975)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:929)
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:324)
	at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:494)
	at com.ibm.ws.management.PlatformMBeanServer.registerMBean(PlatformMBeanServer.java:484)
	at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:320)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:236)
...




The web application starts up, but with a lot of exceptions in the log.


Proposal:
Instead of using a Set<ObjectName> for mbeansRegistered, use a Map<ObjectName, ObjectName> where the key is the ""Camel"" ObjectName and the value is the actually deployed ObjectName.


I will provide a patch that illustrates the idea.",davsclaus:1334707213:2012-04-18T08:00:13.235+0000:1334707213:2012-04-18T08:00:13.235+0000:Thanks for the patch. I updated the doc as well.
0,CAMEL-5186,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-04-17 12:50:08+00:00,2012-05-26 11:19:39+00:00,"Apache qpid 0.14 is now in central repo, and we should upgrade. This version should be compatible with RabbitMQ","davsclaus:1334638457:2012-04-17T12:54:17.816+0000:1334638457:2012-04-17T12:54:17.816+0000:SMX bundles ticket at:
https://issues.apache.org/jira/browse/SMX4-1125
davsclaus:1338002379:2012-05-26T11:19:39.064+0000:1338002379:2012-05-26T11:19:39.064+0000:0.16 for regular, and 0.14 for osgi. We need a 0.16 osgi bundle. "
0,CAMEL-5185,Improvement,Major,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Willem Jiang,Claus Ibsen,0,0,2012-04-17 09:44:42+00:00,2012-04-21 14:35:28+00:00,"Hazelcast has an update checker that goes online, and reports 



WARNING: /192.168.xxx.xxx:5701 [dev] Newer version of Hazelcast is available.
======================================

You are running 1.9.4.6	[20120105]
Newer version 2.0.2	[20120321]

======================================




People running this in product really dislike such things. We should find a way to turn this off.",davsclaus:1334627239:2012-04-17T09:47:19.985+0000:1334627239:2012-04-17T09:47:19.985+0000:EHCache may have the same. For example Quartz does and we have disabled that in camel-quartz. So check also camel-cache as it uses EHCache.
0,CAMEL-5184,Improvement,Major,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-17 05:55:01+00:00,2012-04-22 08:46:17+00:00,"When shutting down seda endpoints they take a lille while to shutdown properly.


However during testing we dont need to do that, so we could shortcut this and shutdown faster.
For example the camel-test kit could tweak that. As well in camel-core.


I suspect we can cut down minutes of testing times.","davsclaus:1334643768:2012-04-17T14:22:48.079+0000:1334643768:2012-04-17T14:22:48.079+0000:Testing seda component in Camel core

Before:
[INFO] Total time: 2:34.154s

Improvement 1:
[INFO] Total time: 1:54.353s

Improvement 2:
[INFO] Total time: 53.398s
davsclaus:1334714373:2012-04-18T09:59:33.888+0000:1334714373:2012-04-18T09:59:33.888+0000:Added pollTimeout option to seda endpoint. The testing in camel-core will set that to a lower value to cut down 100 sec during testing.
davsclaus:1335055577:2012-04-22T08:46:17.220+0000:1335055577:2012-04-22T08:46:17.220+0000:Backported to 2.9 branch, as it cuts more than 5 minutes in total testing camel-core. "
0,CAMEL-5183,Bug,Major,2.9.0,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,2,2012-04-17 04:33:00+00:00,2015-02-15 08:51:07+00:00,"The endpoint configuration introduced in Camel 2.9 introduces more issues than per see. We should use the previous logic by default, and allow custom components to use a 3rd party EndpointConfiguration if they need to.


For example if you have a uri parameter named port then that is lost
Given the test below it fails



    @Test
    public void testConfigurationPortParameter() throws Exception {
        EndpointConfiguration cfg1 = ConfigurationHelper.createConfiguration(""mapped://foo:8080?one=true&two=2&port=123"", context);
        String uri1 = cfg1.toUriString(EndpointConfiguration.UriFormat.Complete);
        assertEquals(""mapped://foo:8080?one=true&two=2&port=123"", uri1);
    }




There is other facts with this EndpointConfiguration that causes side-effects as the previous logic was based on URISupport to parse the uris and whatnot. But the EndpointConfiguration introduced a new logic for that, and they are not identical.","davsclaus:1335134953:2012-04-23T06:49:13.992+0000:1335134953:2012-04-23T06:49:13.992+0000:This is a bad, as the API with getParameter do not differentiate between query parameters and uri parts.

I wonder if the API should be divided, so there is an API for the URI pieces such as
- host
- port
- userInfo
- authority
- etc.

And then another API for query parameters which is possible what people would like a nice API for to get/set.

The unit test above, shows 2 issues
- the endpoint configuration fails to create the same uri it was given (it looses parameters etc.)
- the endpoint configuration cannot get the port query parameter, as currently you will get 8080 as the port value.
davsclaus:1338803281:2012-06-04T17:48:01.555+0000:1338803281:2012-06-04T17:48:01.555+0000:This is a design flaw in the EndpointConfiguration. Not easy to fix.
davsclaus:1423961467:2015-02-15T08:51:07.904+0000:1423961467:2015-02-15T08:51:07.904+0000:From Camel 2.15 onwards we have a better way of knowing endpoint configuration."
0,CAMEL-5182,Bug,Major,2.10.0,,"
None
",Resolved,Cannot Reproduce,None,Willem Jiang,Jason Sherman,0,0,2012-04-17 00:36:21+00:00,2012-04-17 13:20:32+00:00,"When running either of the following tests, the following compilation error occurs from the camel-spring component:


mvn test -Dtest=SpringXsltRouteFileTest
mvn test -Dtest=SpringXsltRouteTest


Error:


[ERROR] /Users/jsherman/Development/sandbox/camel/components/camel-spring/src/test/java/org/apache/camel/spring/DummyLifecycleStrategy.java:[37,7] org.apache.camel.spring.DummyLifecycleStrategy is not abstract and does not override abstract method onErrorHandlerRemove(org.apache.camel.spi.RouteContext,org.apache.camel.Processor,org.apache.camel.ErrorHandlerFactory) in org.apache.camel.spi.LifecycleStrategy","jsherman1:1334594360:2012-04-17T00:39:20.360+0000:1334594360:2012-04-17T00:39:20.360+0000:Attached patch to resolve compilation error.
njiang:1334605610:2012-04-17T03:46:50.096+0000:1334605610:2012-04-17T03:46:50.096+0000:Hi,
Are you using the latest trunk code? As our daily build doesn't report this kind of building error.

I just checked the latest [DummyLifecycleStrategy|https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/DummyLifecycleStrategy.java], it just extends the LifecycleStrategySupport.

Willem

jsherman1:1334607819:2012-04-17T04:23:39.816+0000:1334607819:2012-04-17T04:23:39.816+0000:Hi Willem,

I am seeing this with the 2.10-SNAPSHOT, I did a hard reset on my branch and I still see the issue. I tried the same test with the 2.9.1 branch and I don't see the problem.
njiang:1334618904:2012-04-17T07:28:24.935+0000:1334618904:2012-04-17T07:28:24.935+0000:@Jason
Can you check if you modify the code?
If you are using git maybe you need checkout a new trunk branch from remote.
jsherman1:1334640032:2012-04-17T13:20:32.602+0000:1334640032:2012-04-17T13:20:32.602+0000:Thanks for having a look Willem.  I did a hard reset on my git branch which I thought would revert all changes and the problem persisted. I just did a clean checkout from the git repo and it is working as expected."
0,CAMEL-5181,New Feature,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,David Valeri,David Valeri,0,0,2012-04-16 18:39:02+00:00,2012-04-16 19:32:20+00:00,Add an annotation for feature parity with mockEndpointsAndSkip in CamelTestSupport,
0,CAMEL-5180,Bug,Minor,2.9.1,2.9.3,"
None
",Resolved,Fixed,2.9.3,Claus Ibsen,Magnus Palmér,0,0,2012-04-16 17:51:14+00:00,2012-04-17 07:57:30+00:00,"The issue, originally reported via CAMEL-5133, is to backmerge the CAMEL-5018 fix into the 2.9.x branch.


I merged revision 1292164 into my local 2.9.x branch that I had updated with two new test cases.
Before merge one test failed, after merge all tests were successfull.
Attaching the updated model and tabtest.
— 


Revision: 1292164
Author: ningjiang
Date: den 22 februari 2012 08:49:40
Message:
CAMEL-5018 support the set the default value on the field of bindy CVS





Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/BindyCsvFactory.java
Modified : /camel/trunk/components/camel-bindy/src/main/java/org/apache/camel/dataformat/bindy/annotation/DataField.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/csv/BindySimpleCsvUnmarshallTest.java
Modified : /camel/trunk/components/camel-bindy/src/test/java/org/apache/camel/dataformat/bindy/model/simple/oneclass/Order.java","magnuspalmer:1334570321:2012-04-16T17:58:41.025+0000:1334570321:2012-04-16T17:58:41.025+0000:Think that I haven't configured the right settings in my Eclipse for formatting unfortunately.
davsclaus:1334620650:2012-04-17T07:57:30.214+0000:1334620650:2012-04-17T07:57:30.214+0000:Thanks for the test cases.

I applied them to trunk and the 2.9 branch.
And backported CAMEL-5180 to 2.9 as well."
0,CAMEL-5179,Bug,Major,2.9.1,2.10.0,"

deployment
maven

",Resolved,Invalid,2.10.0,Claus Ibsen,Caspar MacRae,0,1,2012-04-16 14:04:35+00:00,2012-04-16 14:30:27+00:00,"May be there's a glitch in central but I can't find camel-ssh anywhere (also checked googlecode camel-extras)


http://search.maven.org/#search|ga|1|org.apache.camel%20ssh - return no results


https://oss.sonatype.org/index.html#nexus-search;quick~camel-ssh - and no snapshots here


Side note: there's no Jira component for camel-eventadmin","davsclaus:1334557192:2012-04-16T14:19:52.621+0000:1334557192:2012-04-16T14:19:52.621+0000:camel-ssh is a new component in Camel 2.10, which has not yet been released.
earcam:1334557827:2012-04-16T14:30:27.294+0000:1334557827:2012-04-16T14:30:27.294+0000:Ahem, yes and it clearly states that at the top of the component page http://camel.apache.org/ssh.html

Sorry Claus, a case of RTFM clearly."
0,CAMEL-5178,Improvement,Major,"2.9.0, 2.9.1","2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Anders,0,0,2012-04-16 10:35:58+00:00,2012-04-18 12:30:30+00:00,"When routing a file using the GenericFileConsumer object an exception is swallowed if the lock file cant be created (i.e there is no harddrive space).


GenericFileConsumer.java
protected void processExchange(final Exchange exchange) {
        GenericFile<T> file = getExchangeFileProperty(exchange);
        log.trace(""Processing file: {}"", file);

        // must extract the absolute name before the begin strategy as the file could potentially be pre moved
        // and then the file name would be changed
        String absoluteFileName = file.getAbsoluteFilePath();

        // check if we can begin processing the file
        try {
            final GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();

            boolean begin = processStrategy.begin(operations, endpoint, exchange, file);
            if (!begin) {
                log.debug(endpoint + "" cannot begin processing file: {}"", file);
                // begin returned false, so remove file from the in progress list as its no longer in progress
                endpoint.getInProgressRepository().remove(absoluteFileName);
                return;
            }
        } catch (Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(endpoint + "" cannot begin processing file: "" + file + "" due to: "" + e.getMessage(), e);
            }
            endpoint.getInProgressRepository().remove(absoluteFileName);
            return;
        }
.
.
.
.
}




When processStrategy.begin(operations, endpoint, exchange, file); throws an java.io.IOException this is swallowed in the catch method and never propagated to the error handling of camel. Output from log is: 



11:33:44.290 [Camel (camel-2) thread #1 - file:/Users/xxxx/yyyy/Files/] DEBUG o.a.c.component.file.FileConsumer - Endpoint[file:/Users/xxxx/yyyy/Files/] cannot begin processing file: GenericFile[//Users/xxxx/yyyy/Files/file01] due to: No space left on device
java.io.IOException: No space left on device
	at java.io.UnixFileSystem.createFileExclusively(Native Method) ~[na:1.6.0_31]
	at java.io.File.createNewFile(File.java:883) ~[na:1.6.0_31]
	at org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock(MarkerFileExclusiveReadLockStrategy.java:54) ~[camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:46) ~[camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:46) ~[camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:308) [camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:175) [camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:136) [camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:140) [camel-core-2.9.0.jar:2.9.0]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.9.0.jar:2.9.0]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_31]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_31]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_31]
	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_31]




I have tried both tried error handling on the route and the DefaultErrorHandler way but this exception is never handled by the methods, ie Camel log them and then swallow them.","davsclaus:1334544833:2012-04-16T10:53:53.983+0000:1334544833:2012-04-16T10:53:53.983+0000:This is by design.

Before a message can successfully be created/received by Camel, all error handling is component specific. 
The error handling from the route etc is only when Camel routes messages.

We could possible raise the logging level and have a WARN logging if we cannot get a lock on the file.
a.sandholm:1334546911:2012-04-16T11:28:31.395+0000:1334546911:2012-04-16T11:28:31.395+0000:
That sounds like a good design choice but it also means that its hard for clients to detect such error (without looking in the log). A solution would be to re-factor the following code in GenericFileConsumer.processExchange

{code:title=GenericFileConsumer.java|borderStyle=solid}
try {
            final GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();

            boolean begin = processStrategy.begin(operations, endpoint, exchange, file);
            if (!begin) {
                log.debug(endpoint + "" cannot begin processing file: {}"", file);
                // begin returned false, so remove file from the in progress list as its no longer in progress
                endpoint.getInProgressRepository().remove(absoluteFileName);
                return;
            }
        } catch (Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(endpoint + "" cannot begin processing file: "" + file + "" due to: "" + e.getMessage(), e);
            }
            endpoint.getInProgressRepository().remove(absoluteFileName);
            return;
        }
{code}

to its own protected method, so it can be be subclassed and extended by client in order to detect such an error and handled by the application instead of just being logged. 

davsclaus:1334714740:2012-04-18T10:05:40.942+0000:1334714740:2012-04-18T10:05:40.942+0000:You can configure your custom exclusiveReadLockStrategy and handle such exception in that code.


davsclaus:1334723430:2012-04-18T12:30:30.389+0000:1334723430:2012-04-18T12:30:30.389+0000:I improved this to propagate the exception to the org.apache.camel.spi.ExceptionHandler.

I wrote a FAQ
https://cwiki.apache.org/confluence/display/CAMEL/Why+do+my+file+consumer+not+pickup+the+file,+and+how+do+I+let+the+file+consumer+use+the+Camel+error+handler

And from the FAQ is a link to an example on the file page that shows how to do what you want."
0,CAMEL-5177,Improvement,Major,2.9.0,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-16 09:06:36+00:00,2012-04-23 05:32:53+00:00,"In Camel 2.9, a new EndpointConfiguration was introduced, which has more fine grained details about an URI.


However the getEndpointUri method on Endpoint is now parsing the uri on each call, this is not needed, and is also unnecessary overhead.
We should parse this once.


Also Camel's built-in type converter should be used during the parsing, and not just the hardcoded PropertyEditorTypeConverter which is to be considered removed as its not



thread safe
causes unforeseen side effects when 3rd party projects register property converter","davsclaus:1334550387:2012-04-16T12:26:27.069+0000:1334550387:2012-04-16T12:26:27.069+0000:There is also a slight other improvement to avoid calling lazy eval methods in toString/hashCode/equals (such as getEndpointUri), as the JVM may invoked these before the endpoint has been fully initialized."
0,CAMEL-5176,Improvement,Major,None,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-04-16 02:44:36+00:00,2012-06-02 12:51:29+00:00,"CAMEL-5173 removed the two type converters which could always to load the classes and it broke the itest of CxfToJmsInOutTest.


After digging the code for a while I found the CxfProducer always looks up the parameter by turning the message body into a List. With the change of CAMEL-5173, Camel will turn the message body into a List of ActiveQueue (as the String --> List converter are wildly used).


To fix this issue, we should let the CxfProducer pick up the parameter carefully.","njiang:1334515543:2012-04-16T02:45:43.351+0000:1334515543:2012-04-16T02:45:43.351+0000:We should update the code on the other camel branches, as it's a common use case these versions."
0,CAMEL-5175,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-15 12:09:19+00:00,2012-04-16 07:10:07+00:00,"We should add a bit of insight to the base type converter registry, so we can better see number of attempts, failures, misses, etc. And which miss from -> to, was requests, but there was no suitable type converter. 


The stats can then be exposed in JMX so ppl can see it at runtime.",
0,CAMEL-5174,Improvement,Minor,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-15 10:37:19+00:00,2013-11-01 20:45:40+00:00,"activemq-core includes a property editor that Camel will use as fallback type converter
org.apache.activemq.util.ListEditor


And this is a String -> List<ActiveMQDestination> converter which can be kicked in as fallback converter with Camel.
We should avoid using 3rd party property editors, but only rely on the built in from the JDK. Or provide them as core type converters.
As this can cause side effects.","davsclaus:1334458932:2012-04-15T11:02:12.407+0000:1334458932:2012-04-15T11:02:12.407+0000:It would be best to not use the JDK PropertyEditors as all, as the may introduce side effects like that above.
davsclaus:1335177625:2012-04-23T18:40:25.454+0000:1335177625:2012-04-23T18:40:25.454+0000:java beans property editor is no longer used for type conversion with Camel. 

The old class has been marked as @deprecated in camel-core, and not used. 

"
0,CAMEL-5173,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-15 09:09:51+00:00,2012-04-15 09:56:02+00:00,"In CxfConverter we have 2 type converters that does a



String -> List
String[] -> List



And it assumes the string is a class name.


This is really bad, as its too generic, eg String -> List. As the string can contain anything. And when adding camel-cxf to your application, you get these type converters added, that can cause side effects elsewhere.


For now this has not surfaced, as the type converter would ignore exceptions, but frankly when the type converter was used, it will use Apache CXF to load classes, on each attempt, which of couse is not desirable.",davsclaus:1334454962:2012-04-15T09:56:02.179+0000:1334454962:2012-04-15T09:56:02.179+0000:This applies to the CXFRS component. Now the component has the responsible for loading the classes.
0,CAMEL-5172,Improvement,Major,None,"2.8.5, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-14 13:51:23+00:00,2012-05-10 22:13:44+00:00,"The org.apache.camel.TypeConverter API would not propagate exceptions that would occur during type conversion back to the caller. But instead return null.


We should tighten this up and introduce a new API for trying to convert, so what we would have is



convertTo = converts, and throws exception if failure during conversion, can return null, if no value to convert, or no type converter exists to do this
mandatoryConvertTo = convertTo + will throw exception if no value, eg it never returns null
new tryConvertTo = convertTo but will catch exceptions and return null (like the old behavior)



This introduces an API change in TypeConverter. But it is more intuitive. There is some internal logic that needs to be adjust a bit due they rely on the old behavior.","davsclaus:1334473669:2012-04-15T15:07:49.321+0000:1334473669:2012-04-15T15:07:49.321+0000:The Type Converter API has been adjust accordingly. Now the default behavior by the Camel type converter system, is to fail fast, and propagate exceptions back the the caller by default. You can use the new tryConvertTo to use the old behavior.
davsclaus:1334525533:2012-04-16T05:32:13.872+0000:1334525533:2012-04-16T05:32:13.872+0000:Added TypeConverterSupport as base class to make it easier to implement custom TypeConverter
davsclaus:1334971567:2012-04-21T09:26:07.668+0000:1334971567:2012-04-21T09:26:07.668+0000:Backported to 2.8 branch as well.
bvahdat:1336268102:2012-05-06T09:35:02.029+0000:1336268102:2012-05-06T09:35:02.029+0000:Question:

What was the reason to deprecate those 4 utility methods by:

{code}
org.apache.camel.util.ExchangeHelper.getMandatory...Body()
{code}

As to my understanding they provide an easy-to-use shorthand writing.

davsclaus:1336272505:2012-05-06T10:48:25.057+0000:1336272505:2012-05-06T10:48:25.057+0000:See the javadoc of these methods as the @deprecated refers to what to use instead.
bvahdat:1336298048:2012-05-06T17:54:08.882+0000:1336298048:2012-05-06T17:54:08.882+0000:Thanks for your reply but my question was *why*? Why to deprecate them as they do provide an easy-to-use shorthand writing. I mean instead of

{code}
exchange.getOut().getMandatoryBody();
{code}

We can simply say:

{code}
ExchangeHelper.getMandatoryOutBody()
{code}

So 1 method call chain instead of 2 ==> shorthand writing.
davsclaus:1336342468:2012-05-07T06:14:28.172+0000:1336342468:2012-05-07T06:14:28.172+0000:The main interaction for end users to the message, is using the Exchange and Message API from org.apache.camel package. So in this case when you want the message body and expects a message body to exists, then use getMandatoryBody() on the Message.

The util classes is not primary intended for end users to use. But more for Camel itself, and Camel component developers etc.

Also in your example its more cumbersome to use ExchangeHelper as you need to
1. import the class
2. pass in exchange as parameter, eg your example above is wrong

This is not easier than just typing (no imports needed)
{code}
exchange.getIn().getMandatoryBody();
{code}

Also there is many classes in camel-core, and we should avoid having to many methods and APIs for end user to 'get lost in'. So its a good idea to @deprecate duplicates and whatnot. 

bvahdat:1336344785:2012-05-07T06:53:05.369+0000:1336344785:2012-05-07T06:53:05.369+0000:I still don't get the point but never mind.
Thanks anyway for your clarifications.
bvahdat:1336614158:2012-05-10T09:42:38.863+0000:1336614158:2012-05-10T09:42:38.863+0000:Fair enough, I did already remove the usage of those utility methods, so that we've got:

- Less JDK compiler warnings by *now*
- Less cleanup work while working on the Camel 3.x release

http://svn.apache.org/viewvc?view=revision&revision=1336558

My *personal* vote for the deprecation of these utilities is -1... However now it's already too late for that :-)

muellerc:1336647050:2012-05-10T18:50:50.010+0000:1336647050:2012-05-10T18:50:50.010+0000:Babak, please be careful with -1 votes on code modifications. -1 *AND* a comment ""let's do it in your way"" are contrary.
Votes for code modifications are binding votes as described here [1]. This means some time in the future, where you may are a PMC and vote with -1, the committer has to convince you or he has to roll back the change.
This *NOT* mean you should not express your meaning, but you should know what a -1 could imply in the future...

[1] http://www.apache.org/foundation/voting.html

Best,
Christian
bvahdat:1336650054:2012-05-10T19:40:54.082+0000:1336650054:2012-05-10T19:40:54.082+0000:Christian, thanks for the hint & the link as well. Seems I have to be more careful while expressing myself as there seems to be a bit of politics while choosing the ""wording"".

With ""My personal vote"" I did mean ""My personal opinion"" but according to the link you did provide it does really mean ""voting""!

Though still a question: I did also put some ""funny"" comments into CAMEL-4341 just for the sake of a relaxed atmosphere as well as good mood. Is there also something wrong with that as well?
muellerc:1336659224:2012-05-10T22:13:44.296+0000:1336659224:2012-05-10T22:13:44.296+0000:Don't worry, there is nothing wrong to add comments to build ""a relaxed atmosphere"". We mostly like it.
But the combination of the word ""vote(s)"" and ""-1"" should be used careful.

Don't stop sharing your opinions!

Best,
Christian"
0,CAMEL-5171,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-14 08:28:38+00:00,2012-04-23 04:48:01+00:00,"We should favor static classes if possible for Camel type converters when discovered and using @Converter. This allow to use a static method call, instead of having to create a new instance of the class, to invoke the converter method, for every type converstion.


In most cases a type conversion class do not need to store state, and thus it can be static method calls.


An alternative is to allow a new attribute on @Converter at the class level, where you can define if its thread safe or not.



@Converter(threadSafe = true)
public class MyComponentConverters",
0,CAMEL-5170,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Claus Ibsen,0,1,2012-04-14 07:30:41+00:00,2012-04-27 06:41:07+00:00,"See nabble
http://camel.465427.n5.nabble.com/Receiving-NodeDeleted-event-using-Camel-s-ZooKeeper-component-tp5630121p5630121.html


We should add support so this event is also triggered in the camel-zookeeper component.","arnoud:1335328228:2012-04-25T12:30:28.379+0000:1335328228:2012-04-25T12:30:28.379+0000:This patch adds support for communicating the NodeDeleted event to a Camel route as an empty message (sendEmptyMessageOnDelete flag on the endpoint controls this behaviour, defaulting to true). 
In addition a header is added that communicates ZooKeeper's EventType, adding information to the Message describing what sort of ZooKeeper event triggered the Camel route.
arnoud:1335341021:2012-04-25T16:03:41.813+0000:1335341021:2012-04-25T16:03:41.813+0000:Attached a new patch, as the previous patch missed a file.
njiang:1335386967:2012-04-26T04:49:27.483+0000:1335386967:2012-04-26T04:49:27.483+0000:Applied patch with thanks to Arnoud.

davsclaus:1335474535:2012-04-27T05:08:55.858+0000:1335474535:2012-04-27T05:08:55.858+0000:Is there anything to be added/updated on the documentation?
http://camel.apache.org/zookeeper


arnoud:1335479876:2012-04-27T06:37:56.462+0000:1335479876:2012-04-27T06:37:56.462+0000:In the *Options* section the new option sendEmptyMessageOnDelete should be documented as follows:

| sendEmptyMessageOnDelete | true | upon the delete of a znode, should an empty message be send to the consumer |

In the *Reading from znode* section the following should be added:

When data is read due to a WatchedEvent received from the ZooKeeper ensemble, the CamelZookeeperEventType header holds ZooKeeper's [EventType|http://zookeeper.apache.org/doc/current/api/org/apache/zookeeper/Watcher.Event.EventType.html] value from that WatchedEvent. If the data is read initially (not triggered by a WatchedEvent) the CamelZookeeperEventType header will not be set.
davsclaus:1335480067:2012-04-27T06:41:07.194+0000:1335480067:2012-04-27T06:41:07.194+0000:Thanks. I have updated the docs"
0,CAMEL-5169,Bug,Minor,2.9.0,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Geoffrey De Smet,0,1,2012-04-12 14:33:21+00:00,2012-04-29 13:29:53+00:00,"Regression since camel 2.4.0.
We have 2 tests in drools-camel:



org.drools.camel.component.cxf.CxfRestTest
org.drools.camel.component.cxf.CxfSoapTest
Both use port 9002.
If they are run alone in a process, both work.
If they are run together sequentially in a process (such as surefire or intellij), the second test fails.



Locally I get this error:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: [Body is null]]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1212)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:509)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:442)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:120)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:136)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:284)
	at org.drools.camel.component.cxf.CxfSoapTest.test1(CxfSoapTest.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:182)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.net.SocketTimeoutException: Read timed out
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:258)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:317)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:687)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:632)
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:766)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:632)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1195)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1541)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1498)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)




But jenkins gets this error:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <batch-execution lookup=""ksession1"">
  <insert out-identifier=""salaboy"">
      <org.drools.pipeline.camel.Person>
         <name>salaboy</name>
      </org.drools.pipeline.camel.Person>
   </insert>
   <fire-all-rules/>
</batch-execution>
]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1212)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:509)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:442)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:120)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:136)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:284)
	at org.drools.camel.component.cxf.CxfRestTest.test1(CxfRestTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:134)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:103)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:74)
Caused by: org.apache.cxf.jaxrs.client.ClientWebApplicationException: org.apache.cxf.jaxrs.client.ClientWebApplicationException: org.apache.cxf.interceptor.Fault: Could not send Message.
	at org.apache.cxf.jaxrs.client.WebClient.doChainedInvocation(WebClient.java:738)
	at org.apache.cxf.jaxrs.client.WebClient.doInvoke(WebClient.java:677)
	at org.apache.cxf.jaxrs.client.WebClient.invoke(WebClient.java:242)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(CxfRsProducer.java:155)
	at org.apache.camel.component.cxf.jaxrs.CxfRsProducer.process(CxfRsProducer.java:87)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:115)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:285)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:186)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:119)
	... 37 more
Caused by: org.apache.cxf.jaxrs.client.ClientWebApplicationException: org.apache.cxf.interceptor.Fault: Could not send Message.
	at org.apache.cxf.jaxrs.client.AbstractClient.checkClientException(AbstractClient.java:483)
	at org.apache.cxf.jaxrs.client.AbstractClient.preProcessResult(AbstractClient.java:470)
	at org.apache.cxf.jaxrs.client.WebClient.doChainedInvocation(WebClient.java:731)
	... 93 more
Caused by: org.apache.cxf.interceptor.Fault: Could not send Message.
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:263)
	at org.apache.cxf.jaxrs.client.WebClient.doChainedInvocation(WebClient.java:726)
	... 93 more
Caused by: java.net.SocketException: SocketException invoking http://localhost:9002/rest/execute: Unexpected end of file from server
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.mapException(HTTPConduit.java:1430)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1415)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:56)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:648)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	... 95 more
Caused by: java.net.SocketException: Unexpected end of file from server
	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:781)
	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:640)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1195)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1541)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1493)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1401)
	... 98 more




Note: I am going to workaround this issue by changing the port of 9002 to 58001 for the first test and 58002 for the second test. So 
Workaround: use AvailablePortFinder instead","davsclaus:1335677376:2012-04-29T13:29:36.873+0000:1335677376:2012-04-29T13:29:36.873+0000:When testing with live ports then you should favor using a port finder to find a free port.
Any prior test may not close down a port in time for this test, or some other services uses the port etc.

This is really not a bug."
0,CAMEL-5168,New Feature,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-12 10:29:23+00:00,2012-04-12 16:45:33+00:00,"This makes it possible to run Camel application that is using OSGi blueprint XML files.
Currently you can run Spring XML files.


But for people developing OSGi blueprint, it would be nice at least to have a chance to run their apps out of container.


The pojosr is the component we use in camel-test-blueprint.",davsclaus:1334220333:2012-04-12T16:45:33.487+0000:1334220333:2012-04-12T16:45:33.487+0000:Also updated the blueprint archetype to include this in the generated pom.xml file
0,CAMEL-5167,Improvement,Major,2.9.1,None,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Radoslaw Szymanek,0,0,2012-04-12 09:49:20+00:00,2012-04-13 14:39:36+00:00,"This may as well be Camel feature (limitation of Java DSL), but I found no indications/warning that this is a feature in Camel book or web documentation. 


The route is somewhat ill defined as local errorHandler should be placed before bean part, but maybe for those types of mistakes 
it should not have this nasty side effects of loosing global onException policy, but at least complain during route creation .  


Moreover, the route works properly if I remove global error handler, so it is rather nasty effect if route definition correctness depends on the existence of the global error handler definition.


If I move local errorHandler before bean part then the my test passes as the onException policy is triggered and works properly. 


As soon as I redefine the error handler within a route the onException policy is no longer applicable for the route and the route propagates the exception back to the caller. 



        errorHandler(defaultErrorHandler().maximumRedeliveries(1));

        onException(NullPointerException.class).setOnRedelivery(new NullRegistrationDateProcessor());

        from(""direct:toPropertyFile"").routeId(""registrationEntryToPropertyFile"")
                .setHeader(Exchange.FILE_NAME, simple(""${body.firstname}.${body.surname}""))
                .bean(RegistrationToPropertiesBean.class, ""convert"")
     // Potential bug in Camel, if the same error handler like global is turned on then onException defined in global context will not be picked up.
              .errorHandler(defaultErrorHandler().maximumRedeliveries(1))
     // the code above is working if no default handler was created for a global context.
              .to(""file://"" + outFolder);","davsclaus:1334197321:2012-04-12T10:22:01.106+0000:1334197321:2012-04-12T10:22:01.106+0000:The DSL will be improved in Camel 3.0 where we make it more strict how you configure error handling, interceptors etc, before routes etc.
davsclaus:1334263199:2012-04-13T04:39:59.555+0000:1334263199:2012-04-13T04:39:59.555+0000:Added unit test to camel-core. There is no issue, the onException is being used.
radsz:1334291071:2012-04-13T12:24:31.123+0000:1334291071:2012-04-13T12:24:31.123+0000:Hi, 

Sorry for being the pain in the ass, however your test case is not about the issue I wanted to raise. 

Try changing your route in test into something like this : 

{code}
                    from(""direct:start"")

                            .process(new Processor() {

                                private int counter;

                                public void process(Exchange exchange) throws Exception {

                                    if (counter++ < 2) {

                                        throw new IllegalArgumentException(""Damn"");

                                    }

                                    exchange.getIn().setBody(""Bye World"");

                                }

                            })

                            .errorHandler(defaultErrorHandler().maximumRedeliveries(2).redeliveryDelay(0))

                            .to(""log:result"")

                            .to(""mock:result"");

{code}

If you move errorHandler part after processor then your test case if failing. 

I am reopening it only because you did not understand the mistake the user may make, which should be warned about. 
radsz:1334291184:2012-04-13T12:26:24.257+0000:1334291184:2012-04-13T12:26:24.257+0000:I reopened this issue as you did not understand that the positioning of route scoped errorhandler in route definition will result in incorrect routing. 
davsclaus:1334299175:2012-04-13T14:39:35.990+0000:1334299175:2012-04-13T14:39:35.990+0000:And as I told you we will make the DSL stricter in Camel 3.0, where we will enforce that you can only configure error handler in certain positions etc.

We cannot make this changes in the DSL in the 2.x line as it will break the DSL contract for people.

Error handlers and onException is configured in the *start* of the route."
0,CAMEL-5166,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Claus Ibsen,0,0,2012-04-12 07:24:14+00:00,2012-04-27 12:38:11+00:00,"If the first line is CSV headers, then you want to skip this line. Currently there seems to be no easy way of configuring this on <csv> data format.
Likewise, we should check camel-flatpack for similar option. And camel-bindy as well.","muellerc:1334237093:2012-04-12T21:24:53.503+0000:1334237093:2012-04-12T21:24:53.503+0000:May this option should more flexible to define the number of lines which should be skipped.
bvahdat:1335496630:2012-04-27T11:17:10.055+0000:1335496630:2012-04-27T11:17:10.055+0000:According to the RFC-4180 there maybe *one* optional header line:

http://tools.ietf.org/html/rfc4180

{code}
There maybe an optional header line appearing as the first line
of the file with the same format as normal record lines.  This
header will contain names corresponding to the fields in the file
and should contain the same number of fields as the records in
the rest of the file (the presence or absence of the header line
should be indicated via the optional ""header"" parameter of this
MIME type).  For example:

field_name,field_name,field_name CRLF
aaa,bbb,ccc CRLF
zzz,yyy,xxx CRLF
{code}

So that IMHO providing ""number of lines"" semantics would be an unnecessary overkill.
bvahdat:1335500331:2012-04-27T12:18:51.264+0000:1335500331:2012-04-27T12:18:51.264+0000:The newly provided option is called *skipFirstLine* which is provided both on Java as well as XML DSL.
bvahdat:1335500515:2012-04-27T12:21:55.983+0000:1335500903:2012-04-27T12:28:23.752+0000:camel-bindy already provides an option with the same name (*skipFirstLine*): http://camel.apache.org/bindy.html

And the camel-flatpack's provided option is called *ignoreFirstRecord*: http://camel.apache.org/flatpack.html

So that by those two formats we're already fine in place."
0,CAMEL-5165,Improvement,Major,2.9.0,Future,"

smpp

",Closed,Won't Fix,Future,Christian Müller,Mohammady Mahdy,0,2,2012-04-12 06:53:29+00:00,2012-07-19 21:17:26+00:00,"For some reason when the SessionStateListener gets called back with new state SessionState.CLOSED. closeSession() is called and then reconnect. However, there is no way to send an unbind according to jsmpp, excerpt from AbstractSession: 
      if (sessionContext().getSessionState().equals(SessionState.CLOSED)) 

{
            throw new IOException(""Session is closed"");
        }

Which would fail reconnect attempts if for example the MC has a maximum active session limit.","davsclaus:1335677449:2012-04-29T13:30:49.429+0000:1335677449:2012-04-29T13:30:49.429+0000:Any suggests what should be done in camel-smpp?
mahdeto:1336255691:2012-05-06T06:08:11.838+0000:1336255691:2012-05-06T06:08:11.838+0000:I really don't know, this is fundamentally a problem at the JSMPP level the way I see it. I was hoping someone else can see it differently or have another solution. 
muellerc:1342703798:2012-07-19T21:16:38.072+0000:1342703798:2012-07-19T21:16:38.072+0000:IMO, it makes no sense to try to send an unbind to the SMSC via the already closed connection. How should this work?
If the SMSC which closed the connection, the SMSC should decrease the number of active sessions.
If a firewall in between your service and the SMSC is dropping the connection, chose a lower limit for the enquireLinkTimer to prevent this.

I will close this issue because I think there is nothing we can do. But feel free to reopen it if something came into your mind which could solve this issue."
0,CAMEL-5164,Bug,Major,2.9.1,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Luca Foppiano,0,1,2012-04-11 21:12:22+00:00,2012-07-17 22:12:42+00:00,"I've been digging into this problem for some time now and I haven't find why this is happening. I'm using camel 2.9.1. 
The whole problems is quite complicated to explain, I've created a test that reproduce the error that might be more useful.


I have a route that get some XML and transform it with a processor in an object generated from XSD with JAXB. After that the object (transported as XML) is then split based a certain logic. The route uses the deadLetterCHannel error handler to a 'reject' endpoint. 


Now, sometimes when I get some invalid character in the input file (0x10 eg.) (in my processor I don't polish them), the splitter will crash but, instead of detouring only the messages that contains errors to the deadLetterChanne, it will detour every message coming after the error occurs.


I know that I can fix the problem in the processor by removing the invalid characters, but in my opinion, camel should be more robust and doesn't block the entire processing for a ""non fatal"" error. Or I should use a different way for doing what I'm doing... 


Please have a look at the code and let me know, I think is a bug but I'm waiting for your opinion.


Thanks in advance","davsclaus:1334265380:2012-04-13T05:16:20.075+0000:1334265380:2012-04-13T05:16:20.075+0000:Luca thanks for reporting.

Do you mind re-attaching the test source code, and mark [x] in grant license to Apache. Then we can use that in Camel as an unit test and add to camel-jaxb so we can test against regressions.
davsclaus:1334269699:2012-04-13T06:28:19.269+0000:1334269699:2012-04-13T06:28:19.269+0000:I have re-produced the issue and am working on a fix.
davsclaus:1334463548:2012-04-15T12:19:08.132+0000:1334463548:2012-04-15T12:19:08.132+0000:CAMEL-5172 fixes this
davsclaus:1334473780:2012-04-15T15:09:40.702+0000:1334473780:2012-04-15T15:09:40.702+0000:This is now fixed by CAMEL-5172. However CAMEL-5172 has an API change, which makes it more harder to backport to the 2.9 branch. We may consider doing this despite the API change as its mostly internal facing. And for people using 3rd party type converters they most often use the @Converter annotation that is not affected by the API change.

If not we would need to implement a special fix for this in the 2.9 branch.
davsclaus:1334739065:2012-04-18T16:51:05.055+0000:1334739065:2012-04-18T16:51:05.055+0000:Should be fixed in the next 2.9 release.
lfoppiano:1342534361:2012-07-17T22:12:41.993+0000:1342534361:2012-07-17T22:12:41.993+0000:It has been implemented in 2.10.0. This fix made my day! :) 

cool stuff!"
0,CAMEL-5163,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-11 08:10:54+00:00,2012-04-11 08:47:56+00:00,"If you use the throttler or delayer EIP and the expression evaluated at runtime throws an exception, then that is not caught and handled on the exchange, causing the error handler not to react.


See CAMEL-5126",
0,CAMEL-5162,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-11 06:23:40+00:00,2012-04-11 07:16:31+00:00,"See CAMEL-5139


When using handled(predicate) or continued(predicate) those is evaluated twice per exception. We should only do this once, which is what the end user would normally except.",
0,CAMEL-5161,Bug,Major,2.10.0,"2.8.5, 2.9.2, 2.10.0","

exception
mybatis
sql

",Closed,Fixed,"2.8.5, 2.9.2, 2.10.0",Christian Müller,Aaron Daubman,0,0,2012-04-10 22:01:34+00:00,2012-04-11 22:03:48+00:00,"When MyBatis experiences an error committing a statement the session.close() is not called and the DB is caught in a writelock state until camel is exited.
I have not tested a fix yet, but I believe that if, in: camel/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java
session.commit() is placed in a try/catch block with session.close() in its finally it will ensure the session is closed even when MyBatis throws an exception during a commit.


One of the exceptions I've experienced this with is 'java.sql.BatchUpdateException' where a row was attempting to be inserted with a field that violated a table's unique index constraint.


I should be able to submit a patch later this week if necessary.","muellerc:1334152999:2012-04-11T22:03:19.625+0000:1334152999:2012-04-11T22:03:19.625+0000:Thanks for reporting Aaron! I fixed it today (because we will start releasing Camel 2.8.5 and 2.9.2 tomorrow).

Best,
Christian"
0,CAMEL-5159,New Feature,Minor,2.9.1,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Benoît Oury,1,2,2012-04-10 14:18:53+00:00,2012-05-20 14:52:35+00:00,"Sometimes, it would be helpfull to copy or move the treated mail into a specific folder after consuming it.
The idea is to add an option ""copyTo"" to copy (or move if delete is true) the read message in a treated"" imap folder after consuming it.","binamebou:1334038854:2012-04-10T14:20:54.283+0000:1334038854:2012-04-10T14:20:54.283+0000:Add ""copyTo"" option to camel-mail component
dcendents:1335242242:2012-04-24T12:37:22.623+0000:1335242242:2012-04-24T12:37:22.623+0000:It would be nice if the copyTo option could be set on a header on the message to override the default configuration:

Message in = exchange.getIn();
MailConfiguration config = getEndpoint().getConfiguration();
String copyTo = in.getHeader(""copyTo"") != null ? (String) in.getHeader(""copyTo"") : config.getCopyTo();

We could then move the message into a different folder depending on the message content.
davsclaus:1335253267:2012-04-24T15:41:07.469+0000:1335253267:2012-04-24T15:41:07.469+0000:Daniel thanks for the patch. Can you re-attach the patch and this time mark [x] in grant license to Apache
dcendents:1335312991:2012-04-25T08:16:31.152+0000:1335312991:2012-04-25T08:16:31.152+0000:
I didn't submit the original patch, so I'm not sure what's the procedure to submit a patch over another patch in term of granting license?

Should I submit a patch with all the modifications (Benoit + mine) or only my proposed modifications on top of Benoit's?

dcendents:1336964254:2012-05-14T10:57:34.303+0000:1336964254:2012-05-14T10:57:34.303+0000:Hi,

I've attached a patch against camel-mail-2.9.2.

It contains the original patch from Benoît and some extra lines to read the copyTo and delete configuration from the message headers.

Cheers
davsclaus:1337496755:2012-05-20T14:52:35.621+0000:1337496755:2012-05-20T14:52:35.621+0000:Thanks for the patches."
0,CAMEL-5158,Bug,Major,"2.6.0, 2.7.0, 2.8.0, 2.9.0","2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-04-10 14:00:43+00:00,2012-04-11 05:03:48+00:00,"CxfRsProducer doesn't put the response detail message into the exception instead of just calling response.toString().
We should fix it by looking up the response from input stream of the response entity.",
0,CAMEL-5157,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-10 12:34:50+00:00,2012-04-11 09:47:52+00:00,"This is needed to ensure we answer the correct.


For example it may report false, before the attachments has been initial populated.
hasAttachments -> false
getAttachments.size -> 2","davsclaus:1334033023:2012-04-10T12:43:43.206+0000:1334033023:2012-04-10T12:43:43.206+0000:As attachments is seldom used, we could consider @deprecating {{hasAttacments}} as pople can just use {{getAttachments}}, then we can optimize logic in Camel to avoid creating an empty HashMap when copying a Message. We do this for example as defensive copy for the redelivery error handler etc.

"
0,CAMEL-5156,Bug,Major,2.9.1,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Radoslaw Szymanek,0,0,2012-04-10 11:39:55+00:00,2012-04-29 14:08:58+00:00,"The bug was checked against 2.9.1 version of Camel. 


The simple language expressions are not calculated properly within onException clause. 


The route below only works as expected because I copy the the exchange and remove information about the exception. If the original exchange with exception information is used with simple language then the exception will be rethrown during (at the end?) the calculation of simple expression. 
If I copy the exchange and remove the exception information then the unit tests are passing nicely and the file with proper content is created, so simple language expression can be calculated properly for the object being routed.



from(""direct:toPropertyFileAvoidFixingUnfixable"")
            .onException(NullPointerException.class)
            .onRedelivery(new NullRegistrationDateProcessor())
            .handled(true)
            .retryWhile(new Predicate() {
                public boolean matches(Exchange exchange) {

                    Predicate composite = PredicateBuilder.and(PredicateBuilder.isNull(simple(""${body?.getRegistrationDate}"")),
                            PredicateBuilder.isNotNull(simple(""${body?.getBirthdate}"")));

                    // Exchange with exception will make computation of simple predicate fail.
                    Exchange local = exchange.copy();
                    local.setException(null);

                    boolean result = composite.matches(local);

                    return result;

                }
            })
            .end()
            .setHeader(Exchange.FILE_NAME, simple(""${body.firstname}.${body.surname}""))
            .bean(RegistrationToPropertiesBean.class, ""convert"")
            .to(""file://"" + outFolder);




It is related to the issue https://issues.apache.org/jira/browse/CAMEL-4513. My guess is that the problem is present for many other places where simple language can be used within onException part of the route definition. Not just retryWhile and custom predicate used within retryWhile.","radsz:1334030190:2012-04-10T11:56:30.957+0000:1334030190:2012-04-10T11:56:30.957+0000:It may be that at multiple places within onException part of the route definition that using simple language is affected by this bug.
davsclaus:1335679267:2012-04-29T14:01:07.875+0000:1335679267:2012-04-29T14:01:07.875+0000:What do you do in your processor: NullRegistrationDateProcessor
davsclaus:1335679738:2012-04-29T14:08:58.973+0000:1335679738:2012-04-29T14:08:58.973+0000:This works as designed. When you work with a predicate with the Exchange you get the raw details. And some people want to access the exception using getException etc."
0,CAMEL-5155,New Feature,Major,2.9.1,2.10.0,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Woonsan Ko,0,1,2012-04-10 05:14:14+00:00,2012-05-14 15:33:21+00:00,"I tried to use jcr component as consumer, expecting jcr observation event listener like behavior, but I realized that it's not supported yet. The current jcr component supports producer only. So, I'm considering to implement JcrConsumer an contribute a patch. 


My idea is as follows:
i) the uri format is the same. e.g. 'jcr://user:password@repository/absolute/path/from/node'; the node path is used for javax.jcr.observation.ObservationManager#addEventListener(..., absPath, ...).
ii) additionally, we need parameters for eventTypes, isDeep, uuid[], nodeTypeName[], noLocal parameters (See #addEventListener() for detail).
    For example, we may probably use somethings like 'jcr://user:password@repository/absolute/path/from/node?nodeTypeName=demo:news&eventTypes=3&isDeep=true.
iii) JcrConsumer registers JCR observation event listener from the specified uri information.
iv) When events notified, I think it can simply return a list of javax.jcr.observation.Event objects in IN message.","woon_san:1334006192:2012-04-10T05:16:32.242+0000:1334006192:2012-04-10T05:16:32.242+0000:Claus Ibsen:
""""""
This sounds like a really good idea.

We love contributions, and would look very much forward to your help
with this component.
http://camel.apache.org/contributing.html

I like the fact if the uri can be the same / almost the same.

Also when registering listeners in JCR, then remember to cleanup when
the JcrConsumer stops, in the doStop method.
There should be some API in JCR to unregister the listener as well.
""""""

Woonsan:
""Thank you very much for the valuable input!
Yes, JCR has an API to unregister listener, so I will need to do proper clean ups.
I'll keep you updated.""
woon_san:1334713209:2012-04-18T09:40:09.018+0000:1334713209:2012-04-18T09:40:09.018+0000:Attaching a patch implementing JCR Consumer with a unit test.
woon_san:1334714863:2012-04-18T10:07:43.487+0000:1334714863:2012-04-18T10:07:43.487+0000:Here's the detail of my implementation with the patch:

* Assumption/Constraint: A (remote) JCR server may restart at any time. So the JCR session, which is used to (un)register observation listener, should be checked if it is still live periodically and re-initialized unless it is live. This is the main difference from the producer implementation which creates a new session on demand whenever it needs to create nodes from the message.

* JcrEndpoint
 - The following parameters (properties) were added: eventTypes, deep, uuids, nodeTypeNames, noLocal.
   See the javadoc of those new properties for detail. Those are needed to register jcr observation listeners.
   Also, sessionLiveCheckIntervalOnStart and sessionLiveCheckInterval parameters were added for periodic session live checking.
 - #createConsumer() now creates and returns an instance of new JcrConsumer class.

* JcrConsumer
 - Overrides the lifecycle methods.
 - Session and listener are created asynchronously in a separate session live checker thread.
   The session live checker thread is responsible for creating session and registering listener. Also, it is responsible for checking if the session is still live and re-initializing the session and re-registering listener if necessary.
   This approach is more adequate for the cases where JCR repository server is separately deployed or managed.
 - JcrConsumer registers a JCR observation listener named 'EndpointEventListener'.

* EndpointEventListener
 - This JCR observation listener implementation receives JCR events, creates an exchange and process the exchange.

* JcrMessage
 - Camel message implementation for JCR events.
 - The message body is created as a List from the JCR events iterator for easy expression based integration.

* JcrConsumerTest
 - Unit test for JcrConsumer
 - Creates a route, ""jcr://user:pass@repository/home/test?eventTypes=1, which will be re-routed to ""direct:a"".
 - A test thread (""JcrConsumerThread"") receives from ""direct:a"".
 - Adds a node to /home/test/node to trigger the route (""jcr://..."").
 - The test thread should receive the message.
 - Wait the thread stopping and reads the exchange to verify.

* The old JcrRouteTest.java was divided to JcrProducerTest.java and JcrRouteTestSupport.java just for simple refactoring (e.g., JcrConsumerTest shared the some logic such as repository initialization).

* For information, I tested with the following spring route configuration in my test project:

    <route>
      <from uri=""jcr://user:pass@repository/import-application/inbox/signal?eventTypes=3&amp;deep=true&amp;synchronous=false"" />
      <to uri=""direct:execute-import-application"" />
    </route>


Where can I find the source of the JCR component documentation? I'd like to contribute the documentation, too, if applied.

Kind regards,

Woonsan
bibryam:1335075174:2012-04-22T14:12:54.149+0000:1335075174:2012-04-22T14:12:54.149+0000:Hi Woonsan,

I'm looking at your patch, great job. 
I have question though: in JcrConsumer.JcrConsumerSessionListenerChecker.run()

why are you calling unregisterListenerAndLogoutSession when there is no live session?

if (!isSessionLive && isObservationListeningAllowed()) {
unregisterListenerAndLogoutSession();
... 
}
   
Bilgin
rkettelerij:1335097419:2012-04-22T20:23:39.565+0000:1335097419:2012-04-22T20:23:39.565+0000:Hi Woonsan,

I've had a look at your patch and noticed you're starting a new thread in the {{JcrConsumer}} class. When starting new threads in Camel it's advisable to use the [ExecutorServiceManager|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/spi/ExecutorServiceManager.html]. This allows users to plugin different threading implementation (e.g. JCA WorkManager or CommonJ).

One minor detail: the try/catch in JcrMessage.toString() isn't necessary. 


Kind regards,
Richard
woon_san:1335259497:2012-04-24T17:24:57.865+0000:1335259497:2012-04-24T17:24:57.865+0000:Hi Bilgin,

> why are you calling unregisterListenerAndLogoutSession when there is no live session?
> 
> if (!isSessionLive && isObservationListeningAllowed()) { unregisterListenerAndLogoutSession(); ... }

Thanks for the sharp review!
I think the call on #unregisterListenerAndLogoutSession() in the if block can be removed. 
Yes, you're right. It was unnecessary to call it for non live session.
So, the if block (""if (!isSessionLive && isObservationListeningAllowed()) { ... }"") can contain only the try block of #createSessionAndRegisterListener() call.

Kind regards,

Woonsan
woon_san:1335265535:2012-04-24T19:05:35.049+0000:1335265535:2012-04-24T19:05:35.049+0000:Posting a new improved patch (jcr-consumer-patch-2.txt), adopting Bilgin's and Richard's suggestions.
woon_san:1335265941:2012-04-24T19:12:21.597+0000:1335265941:2012-04-24T19:12:21.597+0000:Hi Richard / Bilgin,

I've just uploaded a new improved patch (jcr-consumer-patch-2.txt) for the following, based on your suggestions:
- removing unnecessary call on #unregisterListenerAndLogoutSession() on non-live jcr session (see Bilgin's comment).
- replacing the background thread by ScheduledExecutorService via ExecutorServiceManager#newSingleThreadScheduledExecutor().
- removing try/catch in JcrMessage.toString().

Thank a lot for your reviews!

Cheers,

Woonsan
bibryam:1335291216:2012-04-25T02:13:36.485+0000:1335291216:2012-04-25T02:13:36.485+0000:Woonsan, 

I committed your patch, but will keep the ticket open till the documentation is updated.

Thanks again,

woon_san:1335295828:2012-04-25T03:30:28.605+0000:1335295828:2012-04-25T03:30:28.605+0000:Hi Bilgin,

Thank you very much!
By the way, where can I find the source of the JCR component documentation? It doesn't look having xdoc or something similar in the trunk.
Please let me know if I may help the documentation as well.

Kind regards,

Woonsan
bibryam:1335319118:2012-04-25T09:58:38.979+0000:1335319118:2012-04-25T09:58:38.979+0000:You documented pretty well the java classes, I will add them to the wiki. The latest jcr code is in trunk, have a look here http://camel.apache.org/how-can-i-get-the-source-code.html

I was thinking how this jcr consumer would be helpful, and once you got a list of jcr Event, and for example if it is an update/add operation, the next thing user wants to do would be to retrieve this node from jcr in order to do some action with it. So I think extending the jcr producer with ability to read nodes by a given id/path from the event might be helpful. WDYT?

Also are you using currently the Consumer, I wonder what is your use case to listen only for events, w/o retrieving the actual nodes?
woon_san:1335347615:2012-04-25T17:53:35.244+0000:1335347615:2012-04-25T17:53:35.244+0000:Hi Bilgin,

My actual use case is actually very simple. I've developed a data import tool [1] for a JCR repository product. Currently, I configure file2 component url to start the import tool at runtime in order to import xml files to jcr nodes. So, the file2 consumer is just a signal for the import tool execution. Now, I want to use jcr node(s) as signals instead of files, which helps me consolidate the management user interface into CMS UI and avoid thinking of clustering issues. My local workspace already contains jcr consumer configurations; I will commit that upon a new camel release with the feature.

Regarding the use case of producer reading events, I agree that users probably want to do more such as retrieving nodes from the events and doing some manipulation actions. 
But, I guess they need to weave some custom components with the consumer in most cases. For example, one of typical scenarios is that they might want to create summary data nodes when a news article document node is added/modified/deleted. Then a custom component, in the pipeline with the consumer, creates a jcr session from the repository, reads event infos, queries data from the repository and creates a summary data node.
Maybe we'll find a good use case for the idea later. e.g., simple logging node creation on news document events. Anyway, more generic options support with the producer might be needed. e.g., how to change primary node type for a new created node, how to change node creation paths dynamically, etc.

Regards, Woonsan

[1] http://import-tool.forge.onehippo.org/
bibryam:1336701853:2012-05-11T10:04:13.684+0000:1336701853:2012-05-11T10:04:13.684+0000:I updated the documentation and even blogged an example if its usage http://bit.ly/M34OiG
woon_san:1336980801:2012-05-14T15:33:21.588+0000:1336980801:2012-05-14T15:33:21.588+0000:Cool!
Also, the use cases you showed with the example (as well as r1332008) are very interesting and useful!

Cheers,

Woonsan"
0,CAMEL-5154,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-10 05:08:45+00:00,2012-04-10 06:07:33+00:00,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having



toUpperCase()
toUpperCase(Locale)



Then if you specify this in a simple ognl expression as follows



${body.toUpperCase()}




Then Camel bean component should pick the no-parameter method as specified.",
0,CAMEL-5153,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-10 05:08:45+00:00,2012-04-11 04:56:50+00:00,"If you want to invoke a method on a bean which is overloaded, such as a String with toUpperCase having



toUpperCase()
toUpperCase(Locale)



Then if you specify this in a simple ognl expression as follows



${body.toUpperCase()}




Then Camel bean component should pick the no-parameter method as specified.",
0,CAMEL-5152,Test,Major,2.10.0,2.10.0,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,0,2012-04-09 21:45:30+00:00,2012-04-10 05:54:26+00:00,"Disable the camel-leveldb test on windows platform because it's not supported yet
See: https://github.com/fusesource/leveldbjni


The failed tests: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.windows/326/",
0,CAMEL-5151,Bug,Major,2.9.1,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Claus Ibsen,Matt Narrell,1,3,2012-04-09 15:17:42+00:00,2012-06-13 11:40:04+00:00,"I have a route:


   from(""netty:tcp://somewhere:1234?..."")
     .to(""bean:myBean?method=callOut"")


Where the callOut method does several things, followed by a producerTemplate call to another netty endpoint:


   producerTemplate.sendBody(""netty:tcp://somewhereElse:6789..."", ExchangePattern.InOut, body);


I'm unable to proxy ""directly"" from/to the netty endpoints, and need to pass through this bean.  However, I receive the following exception:


   Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener()    instead or call await*() from a different thread.","matt.narrell:1333955885:2012-04-09T15:18:05.586+0000:1333955885:2012-04-09T15:18:05.586+0000:This works fine with Mina, but chokes with Netty.
davsclaus:1335656059:2012-04-29T07:34:19.418+0000:1335656059:2012-04-29T07:34:19.418+0000:Can you try with 2.9 or 2.10 SNAPSHOT as camel-netty have had some changes.
matt.narrell:1335774693:2012-04-30T16:31:33.344+0000:1335774725:2012-04-30T16:32:05.508+0000:Same exception with 2.10-SNAPSHOT:
{code}
Caused by: java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:314) ~[netty-3.4.2.Final.jar:na]
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:226) ~[netty-3.4.2.Final.jar:na]
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:314) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:175) ~[camel-netty-2.10-20120430.022021-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:352) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:324) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:223) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:324) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:186) [camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:119) ~[camel-core-2.10-20120430.021826-100.jar:2.10-SNAPSHOT]
{code}
ainhab:1339552174:2012-06-13T09:49:34.687+0000:1339552174:2012-06-13T09:49:34.687+0000:This problem needs to be fixed, it is easily reproducable, This will also effect the camel load-balancing with NETTY.
davsclaus:1339558804:2012-06-13T11:40:04.094+0000:1339558804:2012-06-13T11:40:04.094+0000:Should work now, also without using a bean, just by having from -> to"
0,CAMEL-5150,Improvement,Minor,None,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-08 11:26:32+00:00,2012-04-08 12:55:27+00:00,"Accordingly to Netty documentation we should use a cached thread pool for its boss and worker threads. Netty setup workers based on cpu cores. And besides you can configure the workerCounter option explicit.


Also the options on the producer should not be client prefix as its using a ClientBootstrap which dont have a child.",
0,CAMEL-5149,Improvement,Major,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-07 09:44:06+00:00,2012-04-07 10:39:09+00:00,"If you are not using Spring, Blueprint, Guice etc. And rely on the default implementation of the Injector, then that currently just creates a bean instance using the no-arg ctr. We should also perform bean post processing, which we have available from the DefaultCamelBeanPostProcessor which can inject @Procuce, @Consume etc. on the bean.


See nabble
http://camel.465427.n5.nabble.com/My-long-running-bean-sending-out-messages-tp5622710p5622710.html",
0,CAMEL-5148,Improvement,Major,None,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-04-07 07:37:56+00:00,2012-04-07 08:57:06+00:00,"The aggregator EIP has timeout options.


And if people implement the TimeoutAwareAggregationStrategy interface, then we should invoke the timeout method, if a timeout occurred during aggregation.",
0,CAMEL-5147,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-06 16:07:20+00:00,2012-04-06 17:29:12+00:00,The Java DSL uses both bean and method interchangeable for a method call expression. In XML DSLs its consistent named method. This is also what the model says. We should improved this in Java DSL to offer method consistently. And then @deprecate the bean method.,
0,CAMEL-5146,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-06 15:06:53+00:00,2012-04-06 16:00:46+00:00,"The Java DSL with the RouteBuilder has a number of built-in predicates and expressions we use in the DSL. Such as with the CBR or Filter etc to define predicates.


ValueBuilder contains many out of the box predicates for the DSL. We should let it be predicate as well.


Then you can use compound predicates such as with not, to stack predicates together:



                from(""direct:start"")
                    .filter(not(header(""foo"")))
                        .to(""mock:result"");




Before this was not possible as header from ValueBuilder is only an expression. And to fix that you would have to convert that to a predicate using a toPredicate static method. Which makes the DSL more verbose and not as stream-lined.


This causes a slight API change as we need to remove retryWhile(Expression) in OnException as it has 2 methods to accept a predicate or expression. But in reality we should only need the predicate, as that is what retryWhile is about.


This slight API change will break backwards compatibility (eg retryWhile in OnException) so we will keep this on the 2.10 trunk.",
0,CAMEL-5145,New Feature,Major,None,None,"

cdi

",Resolved,Fixed,2.10.0,Łukasz Dywicki,Łukasz Dywicki,0,1,2012-04-06 14:58:49+00:00,2012-06-04 17:46:53+00:00,"Currently camel-cdi supports lookups by name. If user would like to use CDI-annotated class then he will not get injections done. During implementation of this feature I've done some more changes:
1. Refactor test classes to rely on deltaspike container API. It allows to run tests with Open WebBeans (by default) or JBoss Weld (optional). There is no direct dependency to any implementation of CDI. Only public interfaces. Also I've removed long assert from test case and put equal check to test POJO.
2. Remove BeanProvider and BeanManagerProvider, as they are already implemented in deltaspike-core (which is independent from CDI implementation)
3. Implement CdiInjector.


There is a issue DELTASPIKE-151 created by me today to support also Map as result of lookup which needs to be applied. If it will be not included then I'll attach another patch which will implement necessary code in camel-cdi.","ldywicki:1333695587:2012-04-06T14:59:47.813+0000:1333695587:2012-04-06T14:59:47.813+0000:This issue needs additional effort in other project.
ldywicki:1333696029:2012-04-06T15:07:09.623+0000:1333696029:2012-04-06T15:07:09.623+0000:Patch for CDI injections and refactor camel-cdi.
davsclaus:1333760309:2012-04-07T08:58:29.542+0000:1333760309:2012-04-07T08:58:29.542+0000:Thanks Lukasz. Is there an ETA on a new release of deltaspike, so we can avoid SNAPSHOT dependencies.
ldywicki:1334042640:2012-04-10T15:24:00.102+0000:1334042640:2012-04-10T15:24:00.102+0000:Hey,
Deltaspike is planed to release 0.2 version soon, probably this or next week. Once issue I reported them will be closed I'll attach path to fix snapshot dependency.
davsclaus:1334091356:2012-04-11T04:55:56.436+0000:1334091356:2012-04-11T04:55:56.436+0000:Sounds good. Your patch looks great, so looking forward to the released deltaspike.

Do you mind help with CDI documentation?

Maybe a new page from the user guide about CDI? Like we have for blueprint etc.

Using CDI with Camel
http://camel.apache.org/user-guide.html


ldywicki:1334106225:2012-04-11T09:03:45.240+0000:1334106225:2012-04-11T09:03:45.240+0000:I'll take care about CDI docs too. There is bunch of features which are present for now in camel-spring but still missing in camel-cdi. I wish to implement at least part of them.
ldywicki:1334197831:2012-04-12T10:30:31.988+0000:1334197831:2012-04-12T10:30:31.988+0000:New path uses method introduced in latest deltaspike commits.
ldywicki:1334539057:2012-04-16T09:17:37.870+0000:1334539057:2012-04-16T09:17:37.870+0000:Change version of deltaspike to released (currently during vote).
davsclaus:1334620895:2012-04-17T08:01:35.066+0000:1334620895:2012-04-17T08:01:35.066+0000:Thanks Lukasz. Let us know when the release is in maven central, then we can apply the patch.
davsclaus:1334990195:2012-04-21T14:36:35.947+0000:1334990195:2012-04-21T14:36:35.947+0000:Lukasz you must mark [x] in grant license when you attach files. Otherwise we cannot accept your patches.
ldywicki:1335166021:2012-04-23T15:27:01.441+0000:1335166021:2012-04-23T15:27:01.441+0000:Claus,
All patches can be included in ASF works. At least the management page for attachements shows green ""YES"" for all of them. Btw. Do not include CAMEL-5145.diff it's outdated. Use 2nd and 3rd patch only.
hadrian:1335206023:2012-04-24T02:33:43.858+0000:1335206023:2012-04-24T02:33:43.858+0000:Lukasz, thanks for the patch(es). One thing you could try before we close this is to change the logging for org.apache.webbeans to file while running the tests, so that successful tests are silent.
ldywicki:1335242146:2012-04-24T12:35:46.421+0000:1335242146:2012-04-24T12:35:46.421+0000:Fix java.util.logging statements printed to console.
Fix checkstyle warnings.
Fix duplicated slf4j binding dependencies.
ldywicki:1335245732:2012-04-24T13:35:32.461+0000:1335245732:2012-04-24T13:35:32.461+0000:Merge previous patch with latest changes on trunk. Fixes logging issue with open web beans. Fixes duplicated slf4j binding for weld profile.
hadrian:1335272594:2012-04-24T21:03:14.419+0000:1335272594:2012-04-24T21:03:14.419+0000:Lukasz, patches applied with thanks. If the docs are up to date please feel free to mark this issue as resolved.
davsclaus:1338803213:2012-06-04T17:46:53.870+0000:1338803213:2012-06-04T17:46:53.870+0000:Create new tickets for other cdi improvements"
0,CAMEL-5144,Task,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-04-06 08:20:04+00:00,2012-04-06 08:40:36+00:00,"We should upgrade to the 2.5 version of EHCache from
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ehcache/2.5.1_1/",
0,CAMEL-5143,Improvement,Minor,2.10.0,2.10.0,"

batch
foreach
insert
mybatis

",Resolved,Fixed,2.10.0,Claus Ibsen,Aaron Daubman,0,1,2012-04-06 03:45:03+00:00,2012-04-08 08:05:27+00:00,"The camel-mybatis code will iterate over any list passed in and attempt to insert each item individually, bypassing foreach support in statements like:
    <insert id=""batchInsertdataCore"" parameterType=""java.util.List"">
        INSERT INTO CORE_DATA (
        <include refid=""dataCoreColumns""/>
        )
        VALUES (
        <foreach item=""dataCore"" collection=""_parameter"" open="""" close="""" separator=""),("">
            #

{dataCore.event_id}

, #

{dataCore.start_time_val}

, #

{dataCore.end_time_val}

        </foreach>
        )
    </insert>


This results in mybatis generating the following error even when the route is receiving a list of objects as desired:







Error updating database.  Cause: org.apache.ibatis.builder.BuilderException: Error evaluating expression '_parameter'.  Return value (dataCore{
    event_id=111222333,
    start_time_val=Thu Mar 01 02:03:04 EST 2001,
    end_time_val=Thu Mar 01 02:03:05 EST 2001,
}
) was not iterable.
The error may exist in mybatis/dataCore.xml
The error may involve dataCore.batchInsertdataCore
The error occurred while executing an update







---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java —
    private void doInsert(Exchange exchange) throws Exception {
        SqlSessionFactory client = endpoint.getSqlSessionFactory();
        SqlSession session = client.openSession();
        try {
            Object result;
            Object in = exchange.getIn().getBody();
            if (in != null) {
                // lets handle arrays or collections of objects
                Iterator<?> iter = ObjectHelper.createIterator(in);
                while (iter.hasNext()) {
                    Object value = iter.next();
                    LOG.trace(""Inserting: {} using statement: {}"", value, statement);
                    result = session.insert(statement, value);
                    doProcessResult(exchange, result);
                }
            } else {
                LOG.trace(""Inserting using statement: {}"", statement);
                result = session.insert(statement);
                doProcessResult(exchange, result);
            }
        } finally 

{
            session.commit();
            session.close();
        }

    }
---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java —


It should be simple to add a new statementType = 'InsertList' (similar to SelectOne versus SelectList) and add it to the switch statement further up in the MyBatisProducer.java code.


Then a new doInsertBatch would be created, copying the code above and just emoving the iterator related code, simply calling:
result = session.insert(statement, in);","daubman:1333655226:2012-04-06T03:47:06.233+0000:1333655226:2012-04-06T03:47:06.233+0000:I will work to submit a patch for this tonight. I am guessing I do not have rights to assign myself this issue?
daubman:1333657158:2012-04-06T04:19:18.219+0000:1333657158:2012-04-06T04:19:18.219+0000:Attached a patch for three modified files (created using IntelliJ IDEA) as well as the new test file.
davsclaus:1333671108:2012-04-06T08:11:48.277+0000:1333671108:2012-04-06T08:11:48.277+0000:Thanks for the patch. I have applied it to trunk, and updated the wiki documentation.
davsclaus:1333671138:2012-04-06T08:12:18.521+0000:1333671138:2012-04-06T08:12:18.521+0000:Just wonder if the InsertList should been named InsertForEach ?
daubman:1333691089:2012-04-06T13:44:49.845+0000:1333691089:2012-04-06T13:44:49.845+0000:Whatever makes the most sense works for me... I just named it InsertList as it seemed the converse/analog to the already existing SelectList. Thanks for the quick work applying to trunk! 
InsertForEach might make good sense as well since you will probably need to set up some sort of foreach operation in your mybatis mapper to use what you pass in... although I'm a novice mybatis user (you might be able to use the input from this method for collection-referenced things as well which wouldn't require a foreach?)
daubman:1333830518:2012-04-08T04:28:38.978+0000:1333830518:2012-04-08T04:28:38.978+0000:Not sure if this needs to be updated to check for greater-than-zero elements in the list to be processed? I have run into an issue where further up the route BeanIO encounters an invalid record, and, having setIgnoreInvalidRecords set to true, ignores it. Ideally, there would be a parameter for camel-beanio (similar to camel-mybatis' consumer.routeEmptyResultSet) that would prevent beanio from routing an empty body, however, I did not see any such option. So, camel-beanio passes the empty list along to MyBatis, which then tries (with foreach) to iterate over the list to produce the insert statement for the DB... since the list is empty, the SQL is never fully formed, and results in a SQL Query format error.

Should:
1) The code I provided check to see if the list is >0 (if so, what should the behavior be if in.size() == 0)?
2) Should an option be added to camel-beanio to prevent routing of empty message bodies? If so, how should this be done?
davsclaus:1333843526:2012-04-08T08:05:26.924+0000:1333843526:2012-04-08T08:05:26.924+0000:No it should be MyBatis or camel-mybatis that should handle empty lists for InsertList.
BeanIO is a data format and will always transform the message, either to contain 0 or N models.

Ideally MyBatis itself should handle that, maybe a new configuration you can configure in the mapper file.
I suggest to ask on their user mailing list about this. And possible get this implemented in a future release of MyBatis.

In the mean time maybe we can possible detect this in camel-mybatis, and then dont execute MyBatis at all. Just like the Insert where we create the iterator, we can do that same, and then just check if there is at least 1 element in the iterator."
0,CAMEL-5142,Bug,Major,2.9.1,"2.8.5, 2.9.2","
None
",Resolved,Fixed,"2.8.5, 2.9.2",Daniel Kulp,Daniel Kulp,0,0,2012-04-05 15:38:24+00:00,2012-04-06 14:34:28+00:00,"The StAXConverter uses singletons for the XMLInputFactory and XMLOutputFactory.   That works fine with woodstox where those implementations are threadsafe.   However, the sun parser built into the JDK is not thread safe.",
0,CAMEL-5111,Test,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Hadrian Zbarcea,0,1,2012-03-22 16:04:38+00:00,2012-06-02 12:09:52+00:00,Due to incomplete MANIFEST.MF in org.beanio:beanio:1.2.3. There is an issue reported we are only waiting for a new beanio release. Hopefully there will be one before 2.10.0.,"hadrian:1332408451:2012-03-22T17:27:31.831+0000:1332408451:2012-03-22T17:27:31.831+0000:Temporarily disabled failing test from pom.xml. Should re-enable once this issue is resolved.
davsclaus:1338610192:2012-06-02T12:09:52.241+0000:1338610192:2012-06-02T12:09:52.241+0000:Tests passes now. Beanio upgraded and is osgi compliant."
0,CAMEL-5110,Bug,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-21 19:15:33+00:00,2012-03-21 20:30:01+00:00,"See nabble
http://camel.465427.n5.nabble.com/Error-handling-issue-for-splitter-with-sharedUnitOfWork-and-stopOnException-td5550093.html


The issue is that the when the message is handled by the dead letter channel, then some state from the sub unit of work, should be cleared, to ensure the exchange can be processed by the dead letter channel. This becomes only an issue when the dead letter endpoint is another route.",
0,CAMEL-5109,Bug,Major,"2.8.4, 2.9.1",None,"
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2012-03-21 05:19:55+00:00,2013-01-10 08:48:31+00:00,"CAMEL-4192 upgrade to axiom 1.2.12, and we have camel-atom feature which use latest axiom 1.2.12 and abdera 1.1.2 together, however, actually abdera 1.1.2  need work with axiom 1.2.10.


In org.apache.abdera.parser.stax.util.FOMExtensionIterator(abdera code), it need use a field currentChild which inherit from org.apache.axiom.om.impl.traverse.OMAbstractIterator(axiom code),  but field currentChild was removed from axiom 1.2.12, so that we can see exception like
java.lang.NoSuchFieldError: currentChild
	at org.apache.abdera.parser.stax.util.FOMExtensionIterator.hasNext(FOMExtensionIterator.java:74)
	at org.apache.abdera.parser.stax.util.FOMList.buffer(FOMList.java:60)
	at org.apache.abdera.parser.stax.util.FOMList.size(FOMList.java:77)


As abdera 1.1.2 already the latest version so that I think we need rollback to axiom 1.2.10 utill next abdera version which can work with axiom 1.2.12


Btw I believe this is the reason that why CXF still use axiom 1.2.10.","ffang:1332289214:2012-03-21T08:20:14.008+0000:1332289214:2012-03-21T08:20:14.008+0000:commit fix
http://svn.apache.org/viewvc?rev=1303301&view=rev for trunk
http://svn.apache.org/viewvc?rev=1303304&view=rev for 2.9.x branch
http://svn.apache.org/viewvc?rev=1303306&view=rev for 2.8.x branch
ben.truitt:1355315941:2012-12-12T20:39:01.470+0000:1355315941:2012-12-12T20:39:01.470+0000:This appears to be broken again in Camel 2.10.2.  The change the re-introduced this issue was revision 1356481:
http://svn.apache.org/viewvc/camel/trunk/parent/pom.xml?r1=1356480&r2=1356481&diff_format=h
ffang:1355337286:2012-12-13T02:34:46.312+0000:1355337286:2012-12-13T02:34:46.312+0000:Hi,

Thanks for pointing out this issue.
Sent an alarm mail around to community.

Freeman
ffang:1355368203:2012-12-13T11:10:03.568+0000:1355368203:2012-12-13T11:10:03.568+0000:reopen it as this issue get introduced again"
0,CAMEL-5108,Improvement,Minor,2.9.1,"2.8.6, 2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.8.6, 2.9.3, 2.10.0",Claus Ibsen,Michael Shorter,0,1,2012-03-20 12:53:27+00:00,2012-06-14 18:01:33+00:00,"The underlying Restlet server options can now be set via an Endpoint option.
HTTP headers (e.g. Expires or Last Modified) are returned properly from the exchange to the Restlet.","mshorter:1332219282:2012-03-20T12:54:42.258+0000:1332219282:2012-03-20T12:54:42.258+0000:Patches to camel-restlet
mshorter:1332222408:2012-03-20T13:46:48.971+0000:1332222408:2012-03-20T13:46:48.971+0000:Sorry, I forgot to add that I didn't implement all of the HTTP headers (see http://wiki.restlet.org/docs_2.0/13-restlet/27-restlet/330-restlet/130-restlet.html), just a handful...
davsclaus:1332329387:2012-03-21T19:29:47.160+0000:1332329387:2012-03-21T19:29:47.160+0000:Michael, do you mind working on unit tests as well?

Also for patches it would be great if the source code passes the checkstyle rules. Read more here:
http://camel.apache.org/building.html
davsclaus:1338803175:2012-06-04T17:46:15.446+0000:1338803175:2012-06-04T17:46:15.446+0000:Waiting for unit test.
davsclaus:1339111030:2012-06-08T07:17:10.953+0000:1339111030:2012-06-08T07:17:10.953+0000:The options can be configured on the component, instead of the endpoint.

Thanks for the patch."
0,CAMEL-5107,Bug,Major,"2.6.0, 2.7.0, 2.8.0, 2.9.0","2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-03-19 14:21:17+00:00,2012-03-20 08:51:05+00:00,"Here is the discussion[1] about it.
[1]http://camel.465427.n5.nabble.com/CXFRS-producer-removing-JMS-headers-tp5568925p5574037.html","njiang:1332204665:2012-03-20T08:51:05.918+0000:1332204665:2012-03-20T08:51:05.918+0000:Applied patch into trunk, camel-2.9.x and camel-2.8.x branches."
0,CAMEL-5106,Bug,Major,2.6.0,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,chenwei,0,0,2012-03-19 04:02:17+00:00,2012-03-20 05:35:18+00:00,"e.g.
from(""http://ip:port/path"").end();
if the port is in use, the configure() will throw an exception, but when I changed the port and try to reconfigure it, the right port cannot be start up.
I am not sure it is a jetty issue or camel issue.","davsclaus:1332114408:2012-03-19T07:46:48.170+0000:1332114408:2012-03-19T07:46:48.170+0000:Please make a better effort when reporting a ticket.

See some instructions/suggestions at this page
http://camel.apache.org/support

For example:
- What error do you see?
- Do you have a stack trace?
- Your route is invalid, you cannot just have from() -> end. You need something more, such as from -> to -> end
- Have your tried to upgrade Camel? 
- How do you run the application? eg standalone, from a WAR file in Tomcat, JEE server, etc.


cww1769:1332115574:2012-03-19T08:06:14.590+0000:1332115574:2012-03-19T08:06:14.590+0000:my source code in configure() is:
from(sourceUri630)
		.log(""receive 6.3.0 mo "")
		.process(mm7SchemaREL6MM710ReceiverUtils).log(""deliverRoute -> End"").end();
sourceUri630 is a cxf endpoint like: ""cxf://http://0.0.0.0:port/mm7""+""?serviceClass="" + serviceClass_630 + ""&bus=#cxf"".
the port is configurable,when I configure it as 12, there will be error like:


com.alcatel_lucent.ae.ais.pp.scfdao.exception.ProvisionableException: Error return from proxy method: java.util.concurrent.ExecutionException: com.alcatel_lucent.aes.scf.component.common.ContextDataChangeException: Failed to build routes for AES_1.SCF_1.ScfAgent_1.EnablerNnsMMS_115 caused by Fault [Could not start Jetty server on port 12: Permission denied] caused by SocketException [Permission denied]

at com.alcatel_lucent.aes.scf.jmxagent.agent.ComponentManagerImpl.execProxyMethod(ComponentManagerImpl.java:453)

at com.alcatel_lucent.aes.scf.jmxagent.agent.ComponentManagerImpl.writeContextDataNotify(ComponentManagerImpl.java:1500)

at com.alcatel_lucent.aes.scf.modao.entity.ManagedElement.writeContextData(ManagedElement.java:395)

at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)

at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

at java.lang.reflect.Method.invoke(Method.java:597)

at com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn(ConvertingMethod.java:167)

at com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:96)

at com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:33)

at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:208)

at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:120)

at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:262)

at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)

at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)

at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1427)

at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72)

at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1265)

at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1360)

at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:788)

at sun.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)

at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)

at java.lang.reflect.Method.invoke(Method.java:597)

at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:305)

at sun.rmi.transport.Transport$1.run(Transport.java:159)

at java.security.AccessController.doPrivileged(Native Method)

at sun.rmi.transport.Transport.serviceCall(Transport.java:155)

at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)

at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)

at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)

at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)

at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)

at java.lang.Thread.run(Thread.java:619)


cww1769:1332115714:2012-03-19T08:08:34.550+0000:1332115714:2012-03-19T08:08:34.550+0000:we are using serviceMix to run the bundle. once this error occurs, the route cannot be used any more.
davsclaus:1332192801:2012-03-20T05:33:21.394+0000:1332192801:2012-03-20T05:33:21.394+0000:Well the port number 12 is in use, and therefore the route cannot be started.
> Could not start Jetty server on port 12: Permission denied

Also its really discouraged to use such low port numbers. Either use port 80, or 443.
Or better use a higher range port number such as 8080, etc.

This is not a bug in Camel / SerivceMix.
davsclaus:1332192917:2012-03-20T05:35:17.910+0000:1332192917:2012-03-20T05:35:17.910+0000:And please use the discussion forum for help with Camel.

You can find details about the forum / mailing list here
http://camel.apache.org/discussion-forums.html
http://camel.apache.org/mailing-lists.html

This JIRA tracker is not for support in general. But for tracking issues in the Camel software."
0,CAMEL-5105,Improvement,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Babak Vahdat,Babak Vahdat,0,0,2012-03-17 20:38:56+00:00,2012-03-17 21:05:15+00:00,"CAMEL-5100 provided the autogenColumns option which doesn't bring much on it's own (default is true), which with an explicit value set to false nothing will be appended into the output other than ""\n""'s.


So using the configRef and strategyRef options we could then bring the same power of expression inside XML DSL like inside Java. Following a sample where the user can customize the used CSVConfig and/or CSVStrategy being used:



  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">

    <route>
      <from uri=""direct:start"" />
      <marshal>
        <csv autogenColumns=""false"" delimiter=""|"" configRef=""csvConfig1"" />
      </marshal>
      <convertBodyTo type=""java.lang.String"" />
      <to uri=""mock:result"" />
    </route>

    <route>
      <from uri=""direct:start2"" />
      <marshal>
        <!-- make use of a strategy other than the default one which is 'org.apache.commons.csv.CSVStrategy.DEFAULT_STRATEGY' -->
        <csv autogenColumns=""false"" delimiter=""|"" configRef=""csvConfig2"" strategyRef=""excelStrategy"" />
      </marshal>
      <convertBodyTo type=""java.lang.String"" />
      <to uri=""mock:result2"" />
    </route>

  </camelContext>

  <bean id=""csvConfig1"" class=""org.apache.commons.csv.writer.CSVConfig"">
    <property name=""fields"">
      <list>
        <!-- here we're only interested in 'item' but not in 'orderId' or 'amount' -->
        <bean class=""org.apache.commons.csv.writer.CSVField"">
          <property name=""name"" value=""item"" />
        </bean>
      </list>
    </property>
  </bean>

  <bean id=""csvConfig2"" class=""org.apache.commons.csv.writer.CSVConfig"">
    <property name=""fields"">
      <list>
        <!-- here we're interested in both 'orderId' and 'amount' but not in 'item' -->
        <bean class=""org.apache.commons.csv.writer.CSVField"">
          <property name=""name"" value=""orderId"" />
        </bean>
        <bean class=""org.apache.commons.csv.writer.CSVField"">
          <property name=""name"" value=""amount"" />
        </bean>
      </list>
    </property>
  </bean>

  <bean id=""excelStrategy"" class=""org.springframework.beans.factory.config.FieldRetrievingFactoryBean"">
    <property name=""staticField"" value=""org.apache.commons.csv.CSVStrategy.EXCEL_STRATEGY"" />
  </bean>",bvahdat:1331989515:2012-03-17T21:05:15.082+0000:1331989515:2012-03-17T21:05:15.082+0000:Did update the 2.10.0 release notes as well.
0,CAMEL-5104,New Feature,Minor,None,Future,"

gsoc2012

",Resolved,Won't Fix,Future,Unassigned,Michał Warecki,0,1,2012-03-16 21:27:23+00:00,2015-07-10 08:54:11+00:00,"I think this functionality can help Camel meet some of the requirements of mission-critical systems.


Alerts are kind of events which may indicate threat to the proper functioning of the integration platform such as:



specified thread pool reaches a specified threshold ratio (http://camel.apache.org/threading-model.html),
low memory (i.e. 70% Perm Gen is used),
specified URL location is invalid (i.e. returns specified code),
specified JMX attribute has specifies value (it really can be a point to custom alert guard),
specified exception type occurs (i.e. IOException may be caused by lack of disk space),
route did not finish its execution within specified period of time,
some specified expression based on headers values.



Alerts should send predefined notifications (configured by standard Camel components like SMTP or SNMP). Additionally, it should be possible to set severity level of alert.


See nabble: http://camel.465427.n5.nabble.com/DISCUSS-Camel-Alerts-td5497221.html","ivxivx:1398143430:2014-04-22T13:10:30.499+0000:1398143430:2014-04-22T13:10:30.499+0000:You could put such logic at a higher level after data is collected via Camel SNMP.

Basically Camel SNMP is a data collection mechanism, after data collection, you may add on a data processing process (e.g. normalization, measurement (calculate KPIs) and analysis (compare against thresholds)).

Try to separate responsibilities into different classes.
"
0,CAMEL-5103,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Edward Ost,0,1,2012-03-16 17:42:13+00:00,2015-07-11 14:53:00+00:00,With the change to how Camel maps vm: endpoints between contexts it seems that only the queue is matched.  When I connect to a vm: consumer (server) endpoint in context B from a vm: producer (client) endpoint in context A everything works fine.  But if I add the ?exchangePattern=InOut to the producer (client) the MEP is still InOnly on the server side.  It works ok if I use a processor to change ExchangePattern prior to reaching the clients vm: endpoint.,
0,CAMEL-5102,Bug,Trivial,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-16 16:19:13+00:00,2012-03-16 16:26:04+00:00,The getState attribute does not work.,
0,CAMEL-5101,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2012-03-16 15:29:35+00:00,2012-06-08 14:11:00+00:00,"On the routes mbeans you can see number of messages processed, failed, etc.


We should aggregate and add some of those on the camel context mbean.
Its nice to see the total number of messages processed, failed etc.",davsclaus:1339128409:2012-06-08T12:06:49.176+0000:1339128409:2012-06-08T12:06:49.176+0000:The CamelContextMBean will now show an aggregated performance stats for all the routes.
0,CAMEL-5100,Improvement,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Babak Vahdat,Claus Ibsen,0,0,2012-03-16 11:30:49+00:00,2012-03-17 20:39:21+00:00,"See nabble
http://camel.465427.n5.nabble.com/CSV-dateformat-bug-Attribute-AutogenColumns-is-not-allowed-to-appear-in-element-camel-csv-tp5570066p5570066.html


This option is not exposed in the <csv> data format in the XML DSLs","davsclaus:1331868730:2012-03-16T11:32:10.761+0000:1331868730:2012-03-16T11:32:10.761+0000:Babak, do you want to try this?

See
org.apache.camel.model.dataformat.CsvDataFormat
bvahdat:1331869228:2012-03-16T11:40:28.152+0000:1331869228:2012-03-16T11:40:28.152+0000:Of course...
bvahdat:1331893391:2012-03-16T18:23:11.436+0000:1331893391:2012-03-16T18:23:11.436+0000:Did update the 2.10.0 release notes as well. Though 5100 is not as sexy as 5000 :-(
bvahdat:1331952950:2012-03-17T10:55:50.571+0000:1331952950:2012-03-17T10:55:50.571+0000:I added a comment on the user forum (mentioned in Description field). The option is already provided by this ticket but now because of this we should provide other option(s) as well so that the user can say which columns should be added (autogenColumns is true per default), because otherwise this new option lonely doesn't make much sense."
0,CAMEL-5099,Improvement,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-16 08:25:09+00:00,2012-04-02 19:16:27+00:00,"When using the timer component, the thread name will just be the timer name.


Before



2012-03-16 09:28:42,857 [foo                                ] INFO  route1                         - Fired timer




After



2012-03-16 09:28:18,611 [Camel (camel-1) thread #0 - foo    ] INFO  route1                         - Fired timer",
0,CAMEL-5098,Bug,Major,2.8.4,None,"
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2012-03-16 02:54:15+00:00,2012-03-21 14:55:54+00:00,"With multicast when an Exchange is sent to multiple endpoints, the FAILURE_ENDPOINT header points to the last endpoint hit, not the (last) one that actually caused the exception.


I have a fix for it, but I need to see if this happens for other EIPs as well.","hadrian:1332180654:2012-03-20T02:10:54.287+0000:1332180654:2012-03-20T02:10:54.287+0000:I have a few tests failing, looks like this will take one more day. There is a bit of inconsistency in the way exception handling is correlated with exchange properties."
0,CAMEL-5097,Bug,Minor,2.10.0,None,"
None
",Resolved,Fixed,2.10.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2012-03-16 02:47:23+00:00,2012-03-16 02:49:21+00:00,No Desc,
0,CAMEL-5096,New Feature,Major,None,None,"
None
",Resolved,Incomplete,Future,Christian Müller,Christian Müller,0,1,2012-03-16 00:01:57+00:00,2015-07-11 14:53:26+00:00,"See http://docs.oracle.com/cd/B40099_02/books/EAI3/EAI3_IntegJava.html


Feel free to pick up this ticket if you would like to work on it.",
0,CAMEL-5095,New Feature,Major,None,None,"
None
",Resolved,Invalid,Future,Christian Müller,Christian Müller,1,1,2012-03-15 23:57:51+00:00,2015-09-28 07:27:19+00:00,"See [1] and [2].


[1] http://publib.boulder.ibm.com/infocenter/txformp/v6r0m0/index.jsp?topic=%2Fcom.ibm.cics.te.doc%2Ferziak0026.htm
[2] http://www.javaworld.com/javaworld/jw-08-2005/jw-0822-cics.html


Feel free to pick up this ticket if you would like to work on it.",davsclaus:1369537497:2013-05-26T11:04:57.909+0000:1369537497:2013-05-26T11:04:57.909+0000:A cics component would be good.
0,CAMEL-5094,New Feature,Major,None,None,"
None
",Closed,Invalid,Future,Christian Müller,Christian Müller,0,1,2012-03-15 23:46:47+00:00,2012-11-10 13:48:30+00:00,"See http://camel.465427.n5.nabble.com/Do-Apache-Camel-needs-a-SAP-integration-td5144926.html.


Feel free to pick up this ticket if you would like to work on it.",muellerc:1352526488:2012-11-10T13:48:08.777+0000:1352526488:2012-11-10T13:48:08.777+0000:We will process this issue at camel-extra: http://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=31
0,CAMEL-5093,New Feature,Major,None,None,"
None
",Resolved,Invalid,Future,Christian Müller,Christian Müller,0,4,2012-03-15 23:39:38+00:00,2015-07-11 14:54:44+00:00,"See [1] for the SDK (if wecan use it - we have to check it) and/or the wsdl file for the soap interface.


[1] https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/library_download_sdks


Feel free to pick up this ticket if you would like to work on it.","joesan:1360895931:2013-02-15T10:38:51.850+0000:1360895931:2013-02-15T10:38:51.850+0000:This looks interesting to me. I can take this up.

I have created a Jira to discuss on the legal aspects of hosting the Paypal binaries as part of the camel-paypal component.

https://issues.apache.org/jira/browse/LEGAL-159

I would start with the Adaptive Payments library.


cemmersb:1380111563:2013-09-25T20:19:23.798+0000:1380111577:2013-09-25T20:19:37.599+0000:Hi Joe

I'm not sure if the license agreement suites the ASF requirements, especially due to the statement covering all subdependencies.

However, there might be different places to host a paypal component, e.g. camel-extra

Kind regards,

Christoph
janstey:1399951482:2014-05-13T11:24:42.627+0000:1399951482:2014-05-13T11:24:42.627+0000:Yeah, this one sounds like a good one for camel-extra. Especially since we didn't officially hear back from legal (LEGAL-159). If we do get the OK, we can always move it back into the main :-)

[~joesan] are you still working on this component? It would be a great addition to Camel IMO.
davsclaus:1436597684:2015-07-11T14:54:44.520+0000:1436597684:2015-07-11T14:54:44.520+0000:Seems not ASF license compliant. "
0,CAMEL-5092,Task,Major,"2.8.4, 2.9.1",None,"
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Babak Vahdat,Chris Geer,0,0,2012-03-15 18:51:49+00:00,2012-03-16 15:23:06+00:00,The defined repository is no longer accessible and the artifact id/version have changed.,"geerzo:1331808917:2012-03-15T18:55:17.882+0000:1331808917:2012-03-15T18:55:17.882+0000:Here is a patch that updates the required pom files to get it to build (only tested on 2.8.x branch)
bvahdat:1331820426:2012-03-15T22:07:06.706+0000:1331820650:2012-03-15T22:10:50.662+0000:Thanks for reporting. According to:

http://code.google.com/p/spymemcached/wiki/Maven

We should better move to:
 
http://files.couchbase.com/maven2/

Which is what you've already provided by your patch.

As the version 2.5 is not available anymore (the current version Camel makes use of) I'll also upgrade to the latest published version 2.8.0 which means we would also upgrade the dependencies by the 2.8.x and 2.9.x branches which is not a good practice in general (no backporting of upgrades to the branches). However I don't see any other options left.
bvahdat:1331868185:2012-03-16T11:23:05.319+0000:1331868185:2012-03-16T11:23:05.319+0000:I've cleaned my complete .m2-cache and currently run a full build to verify/check the new m2-repo for the usage of the newest version of spymemcached (2.8.0).
bvahdat:1331882573:2012-03-16T15:22:53.610+0000:1331882573:2012-03-16T15:22:53.610+0000:Thanks for the patch.

I did also correct the typo ""Codebase"" instead of ""Couchbase"".
The 2.10.0 release notes are also updated as well."
0,CAMEL-5091,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-15 17:43:44+00:00,2012-03-18 08:31:05+00:00,"We should consider not registering ProducerCache mbean in JMX as they are an mostly internal in use by the EIPs.
And for end users they do not bring much value, and just add more mbeans for them to stare at in jconsole.


Also each <to> in the Camel routes has its own producer cache, and thus you can have many producer cache mbeans in JMX.",
0,CAMEL-5090,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-15 13:35:25+00:00,2012-03-15 17:41:35+00:00,"When using the wire tap to a destination, then that process does not support error handling, such as redelivery or onException.
We should improve this and allow error handling.


If you send the message to a route using such as a direct endpoint, then that route will have error handling. So you can do it like that. But then you would need to add that 2nd route.


See nabble
http://camel.465427.n5.nabble.com/exception-in-the-wireTap-EIP-tp5566464p5566464.html",davsclaus:1331804495:2012-03-15T17:41:35.720+0000:1331804495:2012-03-15T17:41:35.720+0000:Wire tap now supports error handling
0,CAMEL-5089,Bug,Major,"2.7.0, 2.8.0, 2.9.0","2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-03-15 07:25:48+00:00,2012-03-15 08:55:35+00:00,The producer which is intercepted by the InterceptSendToMockEndpoint should manage the lifecycle of  the delegate producer otherwise the delegate producer will complain about it.,"njiang:1331772935:2012-03-15T08:55:35.118+0000:1331772935:2012-03-15T08:55:35.118+0000:Applied patch into trunk, camel 2.9.x and camel 2.8.x branches."
0,CAMEL-5088,Test,Minor,"2.8.4, 2.9.1","2.8.5, 2.9.2","
None
",Closed,Fixed,"2.8.5, 2.9.2",Christian Müller,Christian Müller,0,0,2012-03-15 07:21:17+00:00,2012-03-15 07:26:09+00:00,"org.apache.camel.component.mail.MailProducerConcurrentTest.testConcurrentProducers() fails in unpredictable in Camel 2.8.x and Camel 2.9.x


See: https://builds.apache.org/view/A-F/view/Camel/job/Camel.2.8.x.fulltest/org.apache.camel$camel-mail/151/testReport/junit/org.apache.camel.component.mail/MailProducerConcurrentTest/testConcurrentProducers/",
0,CAMEL-5087,Bug,Major,"2.8.0, 2.9.0","2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-03-15 02:58:25+00:00,2012-03-15 11:24:44+00:00,"Current camel-cometD component always use on server and it doesn't support to create multiples endpoints with different ports.


Here is the thread which discuss about it.
[1]http://camel.465427.n5.nabble.com/Error-with-multiple-CometD-components-td5562936.html","njiang:1331781884:2012-03-15T11:24:44.743+0000:1331781884:2012-03-15T11:24:44.743+0000:Committed the patch into trunk, camel-2.8.x and camel-2.9.x branches."
0,CAMEL-5086,Bug,Minor,2.9.1,"2.9.2, 2.10.0","

leak
memory
memory_leak
permgen
spring
tomcat
war
webapp

",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Dan Richelson,0,0,2012-03-14 16:53:48+00:00,2012-03-20 06:39:02+00:00,"Steps to reproduce:
1. Create a new camel web project (based on instructions here: http://camel.apache.org/camel-maven-archetypes.html ):


mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-web -DarchetypeVersion=2.9.1 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-group


2. Build the new project:
mvn clean install


3. Copy .war file in target/ to tomcat's webapps directory.
4. Reload webapp (easiest way is to touch the .war file)
5. If you are using a profiler, you will see that the permgen space increases on every reload (the previous webapp's classes don't get unloaded)
6. Eventually the webapp container will crash with a permgen out of memory error.


Workaround: restarting the webapp container will reset the permgen space.
Removing the Spring nature of the project makes this go away, so it could be a problem with Spring itself.


This also happens when using Jetty7, so I don't think it is a problem with the container.","davsclaus:1332193296:2012-03-20T05:41:36.607+0000:1332193296:2012-03-20T05:41:36.607+0000:I suggest to attach jvisualvm to the tomcat container and try to see if you can spot any leaks?
davsclaus:1332193782:2012-03-20T05:49:42.433+0000:1332193782:2012-03-20T05:49:42.433+0000:We have fixed a number of leaks on trunk. I suggest to try the upcoming 2.10 release. Or the 2.9.2 release.

I just tried with 2.10 and could not detect any leaks. I touched the web app 5 times
{code}
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
davsclaus:/opt/apache-tomcat-7.0.26/webapps$ touch bar-1.0-SNAPSHOT.war 
{code}

And memory usage was low. When performing a GC I get down to 7-8mb.
davsclaus:1332193985:2012-03-20T05:53:05.179+0000:1332193985:2012-03-20T05:53:05.179+0000:And my permgen, was not leaking, and getting down to 31mb - see tomcat2
davsclaus:1332194597:2012-03-20T06:03:17.975+0000:1332194597:2012-03-20T06:03:17.975+0000:I am trying with the 2.9-SNAPSHOT to see how it goes there.
davsclaus:1332196742:2012-03-20T06:39:02.659+0000:1332196742:2012-03-20T06:39:02.659+0000:Looks fine with the 2.9-SNAPSHOT (to be 2.9.2 release)."
0,CAMEL-5085,Bug,Major,2.8.1,"2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-14 14:52:34+00:00,2012-03-15 10:44:27+00:00,"When using the failover load balancer, it works directly on the given exchange, and in case of a failover, it clears the exception state etc.


However this does not work too well as if you use a processor directly then you can mutate the message before failover, which mean when the exchange is failed over, then its a 100% copy of the input message, but the previously mutated message.


We should do like the other EIPs by doing a defensive copy of the exchange.",
0,CAMEL-5084,Bug,Major,2.9.1,2.9.2,"
None
",Resolved,Fixed,2.9.2,Willem Jiang,Henrik Filtenborg Sørensen,0,0,2012-03-14 14:31:57+00:00,2012-03-15 08:57:51+00:00,"When upgrading from Apache Camel 2.9.0 to 2.9.1 I suddently get an error when using camel-cxf endpoints. When running my JUnit tests (extending CamelSpringTestSupport) I get this exception:


Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfProducer.getBindingOperationInfo(CxfProducer.java:331)
	at org.apache.camel.component.cxf.CxfProducer.prepareBindingOperation(CxfProducer.java:202)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:141)
	at org.apache.camel.impl.SynchronousDelegateProducer.process(SynchronousDelegateProducer.java:61)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:144)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:56)
When I debug my test I see that the method doStart() in CxfProducer is never called, resulting in client being null (hence the NullPointerException in CxfProducer.java:331 ). 


I suspect the mocking all endpoints with the InterceptSendToEndpoint, 
short-circut the startup procedure to not delegate the start call to 
the intercepted endpoint. Or there abouts. 


See discussion in camel user forum: http://camel.465427.n5.nabble.com/Error-using-apache-cxf-w-Camel-2-9-1-tc5560906.html","hefiso:1331706788:2012-03-14T14:33:08.408+0000:1331706788:2012-03-14T14:33:08.408+0000:Example showing the error. Downgrade to version 2.9.0 removes the error.
njiang:1331765859:2012-03-15T06:57:39.015+0000:1331765859:2012-03-15T06:57:39.015+0000:I just debugged the code with the test case, I found the InterceptSendToEndpoint doesn't sart the producer which it created.
After updated the code for it, the test passed.

njiang:1331768120:2012-03-15T07:35:20.049+0000:1331768120:2012-03-15T07:35:20.049+0000:This issue should be resolved by CAMEL-5089.
njiang:1331773071:2012-03-15T08:57:51.342+0000:1331773071:2012-03-15T08:57:51.342+0000:It should be resolve in camel 2.9.2, before that you can applied the patch of CAMEL-5089 yourself."
0,CAMEL-5083,Test,Major,"2.8.4, 2.9.1","2.8.5, 2.9.2, 2.10.0","
None
",Closed,Fixed,"2.8.5, 2.9.2, 2.10.0",Christian Müller,Christian Müller,0,0,2012-03-14 08:30:00+00:00,2012-03-15 07:07:38+00:00,"I assume we see this failure when we inserted the first test into the database (and only the first one) when the ibatis consumer starts to poll the database.
See https://builds.apache.org/view/A-F/view/Camel/job/Camel.2.8.x.fulltest/org.apache.camel$camel-ibatis/150/testReport/junit/org.apache.camel.component.ibatis/IBatisBatchConsumerTest/testBatchConsumer/",
0,CAMEL-5082,Improvement,Major,2.10.0,2.10.0,"

feature
patch

",Resolved,Fixed,2.10.0,Willem Jiang,Kai Heinecke,0,0,2012-03-13 21:36:18+00:00,2012-03-15 02:43:00+00:00,"camel-printer only supports one configuration. I needed two lpr endpoints...


javax.print allows to set a JobName - nice in the webinterface of cups. from(...).setHeader(PrinterEndpoint.JOB_NAME, simple(${file:onlyname})).to(""lpr://localhost/printer"");


The new testcases should work without a printer configured. mockito seems to be in use by other components, too.","njiang:1331750580:2012-03-15T02:43:00.375+0000:1331750580:2012-03-15T02:43:00.375+0000:Applied patch with thanks to Kai.
I did some clean up and fixed some CS errors."
0,CAMEL-5081,Improvement,Major,"2.8.4, 2.9.1","2.8.5, 2.9.2, 2.10.0","
None
",Closed,Fixed,"2.8.5, 2.9.2, 2.10.0",Christian Müller,Christian Müller,0,0,2012-03-13 21:05:34+00:00,2012-03-13 21:41:46+00:00,I assume we see this failure when we inserted the first test into the database (and only the first one) when the mybatis consumer starts to poll the database. See build failure: https://builds.apache.org/job/Camel.2.8.x.fulltest/org.apache.camel$camel-mybatis/149/,
0,CAMEL-5080,Bug,Minor,2.8.0,None,"

ProgramCall
camel-jt400
components

",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Claus Ibsen,João Anacleto,0,1,2012-03-13 18:14:18+00:00,2012-03-15 12:44:55+00:00,"When the length of each parameter of a program.PGM is greater than the length of his values, the parameters are setted incorrectly.


Example:


Input of program.pgm:
param1 -> A5 (alphanumeric with length 5) 
param2 -> A5 (alphanumeric with length 5) 


When the String array is 

{""123"", ""456""}

 the values are setted on each parameter as:
param1 = 12345
param2 = 6","janacleto:1331633738:2012-03-13T18:15:38.088+0000:1331633738:2012-03-13T18:15:38.088+0000:Here the patch to correct the issue.
davsclaus:1331779424:2012-03-15T10:43:44.358+0000:1331779424:2012-03-15T10:43:44.358+0000:Joao, can you re-attach your patch. And make sure to mark [x] in grant license to ASF. Otherwise we cannot accept your patch.
janacleto:1331780139:2012-03-15T10:55:39.456+0000:1331780183:2012-03-15T10:56:23.059+0000:Here is the attach with grant license to ASF. Thanks Claus.
davsclaus:1331786695:2012-03-15T12:44:55.601+0000:1331786695:2012-03-15T12:44:55.601+0000:Thanks for the patch."
0,CAMEL-5079,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-13 10:03:01+00:00,2012-03-13 16:28:03+00:00,"Some EIPs such as the wire tap, aggregator, splitter, etc supports thread pools. A thread pool can either be
a) use an existing thread pool
b) a new thread pool based on a profile
c) a new thread pool due parallel processing


For b+c we should regard this as safe to shutdown and remove the thread pool when the routes is removed, as the thread pool was only used by this EIP.


If its an existing thread pool, then Camel cannot handle the lifecycle, the end user is responsible for shutting down the pool when its no longer needed.


See nabble
http://camel.465427.n5.nabble.com/WireTap-threads-number-keeps-on-growing-tp5557827p5557827.html","davsclaus:1331627283:2012-03-13T16:28:03.797+0000:1331627283:2012-03-13T16:28:03.797+0000:There is a number of API changes on the processors in their constructors, to pass on details whether the thread pool should be shutdown when the processor is shutdown itself.

But now all the EIPs that uses thread pools can handle this, and will shutdown threads pools more eagerly if they are shutdown itself, such as from a route."
0,CAMEL-5078,Task,Minor,None,None,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-13 07:18:44+00:00,2012-03-13 10:47:38+00:00,There is a number of 3rd party JARs we should upgrade in parent/pom.xml.,
0,CAMEL-5077,Task,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-12 15:53:11+00:00,2012-03-12 16:15:02+00:00,Hazelcast 2.0.x is released. We should upgrade.,"davsclaus:1331539217:2012-03-12T16:00:17.926+0000:1331539217:2012-03-12T16:00:17.926+0000:We could be backwards compatible with Hazelcast 1.9 if we want to? Or just cut and require Hazelcast 2.0+ ?

There is a slight API change in Hazelcast in the ItemListener.
davsclaus:1331540102:2012-03-12T16:15:02.558+0000:1331540102:2012-03-12T16:15:02.558+0000:Upgraded, and kept backwards compatible with the 1.9.x releases."
0,CAMEL-5076,Sub-task,Major,None,2.10.0,"
None
",Resolved,Later,2.10.0,Claus Ibsen,Piotr Klimczak,0,1,2012-03-12 14:38:14+00:00,2012-06-02 12:46:17+00:00,Update wiki pages when patch will be accepted,"davsclaus:1338612377:2012-06-02T12:46:17.650+0000:1338612377:2012-06-02T12:46:17.650+0000:No need for many tickets, just refer to the parent ticket."
0,CAMEL-5075,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Łukasz Dywicki,Łukasz Dywicki,0,1,2012-03-12 10:50:04+00:00,2013-01-17 14:08:57+00:00,Currently input for the camel-sql must be an iterator. We can easily start supporting named parameters to make camel-sql more friendly.,davsclaus:1358402937:2013-01-17T14:08:57.016+0000:1358402937:2013-01-17T14:08:57.016+0000:Implemented by CAMEL-5977
0,CAMEL-5074,Improvement,Minor,None,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-10 09:18:48+00:00,2012-03-10 13:07:55+00:00,"Sometimes you want to use a async task to run some task, and for that the thread pools can be used.
However there may not be a need for the thread pool to keep 1 thread in the pool. So we should allow the pool to shrink to 0.","davsclaus:1331356075:2012-03-10T13:07:55.241+0000:1331356075:2012-03-10T13:07:55.241+0000:We can just use newThreadPool(source, name, 0, 1) instead. That should be fine."
0,CAMEL-5073,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-10 08:27:23+00:00,2012-03-10 08:40:03+00:00,"See
http://fusesource.com/forums/thread.jspa?threadID=3755&tstart=0",
0,CAMEL-5072,Improvement,Major,None,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-09 12:11:14+00:00,2012-03-09 13:21:06+00:00,"See nabble
http://camel.465427.n5.nabble.com/FTP-ConsumerTemplate-Threads-remaining-alive-tp5548338p5548338.html


This helps to shutdown thread pools more eagerly. And also helps for end users who create a lot of scheduled poll consumers on the fly, such as the use case from the nabble link.",
0,CAMEL-5071,New Feature,Minor,None,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Benjamin P. O'Day,Benjamin P. O'Day,0,0,2012-03-08 19:21:02+00:00,2012-03-08 21:11:54+00:00,support passing in XML (in SolrInputDocument format) as the Exchange Body to update a Solr index.,"boday:1331212314:2012-03-08T21:11:54.058+0000:1331212314:2012-03-08T21:11:54.058+0000:added in r1298581 in 2.9.X, r1298525 in trunk (for 2.10.0)"
0,CAMEL-5070,Bug,Major,2.9.1,"2.8.5, 2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.2, 2.10.0",Ashwin J. Karpe,Nikolaos Dimos,0,0,2012-03-08 16:48:00+00:00,2012-03-10 09:25:11+00:00,"chooseProcessor method accesses resources in a non synchronized fashion. This leads in errors during loadbalancing and as a result messages are lost. I have created a project that provides an integration test (using karaf 2.2.5 and a custom command to check messages of the activemq broker) with a custom weighted round robin loadbalancer that ""seems"" to solve the issue of lost messages.


The problem with the provided solution is that when messages are dequeued from the second stage of queues (queues1, 2 and 3) in custom-loadbalancer-route subproject the jmsconsumer threads also block (checked this using profiler). I would expect only the jmsconsumer threads of the first queue (initial.queue) to block waiting for the synchronized chooseProcessor method. Any clues on why this happens?","nikosd23:1331196595:2012-03-08T16:49:55.660+0000:1331196595:2012-03-08T16:49:55.660+0000:Attaching the maven project that contains the camel route, the custom activemq commands and the itest subproject
nikosd23:1331198047:2012-03-08T17:14:07.490+0000:1331198047:2012-03-08T17:14:07.490+0000:You can reproduce the problem by uncommenting the weightedRoundRobin line in the custom-loadbalancer-route subproject (and commenting of course the custom). The custom karaf command that was implemented (queue:broker-info) provides the following information QName|QConsumerCount|QSize|QEnqueueCount|QDequeueCount.
davsclaus:1331274087:2012-03-09T14:21:27.712+0000:1331274087:2012-03-09T14:21:27.712+0000:Which jms consumer is blocked?
And what is your problem exactly?

Can you post some more details. 
nikosd23:1331275459:2012-03-09T14:44:19.666+0000:1331275459:2012-03-09T14:44:19.666+0000:Weighted Round Robin Loadbalancer should be synchronized. The custom loadbalancer provided in the integration test does exactly this. It solves the problem of the index out of bound exception:

Caused by: java.lang.ArrayIndexOutOfBoundsException: 3
        at java.util.concurrent.CopyOnWriteArrayList.get(CopyOnWriteArrayList.java:343)[:1.6.0_20]
        at org.apache.camel.processor.loadbalancer.WeightedRoundRobinLoadBalancer.chooseProcessor(WeightedRoundRobinLoadBalancer.java:52)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:39)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[71:org.apache.camel.camel-core:2.9.0]
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[71:org.apache.camel.camel-core:2.9.0]

Nevertheless, if you follow this approach jms consumers of queue1, queue2 and queue3 block. If you try to loadbalance a large amount of messages from the first queue to the other 3, using the synchronized weighted round robin loadbalancer, then you will see that the queues (queue1,2 and 3) are growing without obvious to me reason. The second route is only from jms to log.
akarpe:1331278857:2012-03-09T15:40:57.314+0000:1331279366:2012-03-09T15:49:26.249+0000:Hi Nikos,

I can see the scenario you are mentioning happening under load where the counter and/or runtimeWeight may get out of synch under load...

I am however unclear on the queues growing without reason issue. Do you mean there are additional messages being created and dispatched to the queues.

Can you remove the synchronized on the chooseProcessor() method and synchronize just the counter and runtimeWeight and see if there is a change in behavior. 

Cheers,

Ashwin...
nikosd23:1331288833:2012-03-09T18:27:13.829+0000:1331288833:2012-03-09T18:27:13.829+0000:Hi Ashwin,

The provided sync load balancer solves the issue of lost messages. If you check the itest subproject you will see that the number of messages enqueued to initial route is the same as the sum of the messages dequeued from the three queues. I am not implying that additional messages are being created and dispatched to queues.

I believe that the whole process of chooseprocessor should be atomic not just the access to counter shared resource or weights, that is why I synched the whole method.

I have profiled the plain weighted round robin loadbalancer and experienced the same behaviour in terms of blocking jmsconsumer threads of all queues, so maybe this is the normal behavior. Sorry for not having done this before.

Thanks,
Nikos
akarpe:1331289716:2012-03-09T18:41:56.869+0000:1331289716:2012-03-09T18:41:56.869+0000:Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...
akarpe:1331289718:2012-03-09T18:41:58.108+0000:1331289718:2012-03-09T18:41:58.108+0000:Hi Nikos,

Excellent... I will make the fix right away, test, and check it in.

Thanks for your help in identifying the issue and providing the patch...

Cheers,

Ashwin...
akarpe:1331292257:2012-03-09T19:24:17.788+0000:1331292257:2012-03-09T19:24:17.788+0000:Hi Nikos,

I have applied the fix to the trunk... 

https://svn.apache.org/viewvc?view=revision&revision=1298993

Thanks for identifying the issue and offering a patch for it.

Cheers,

Ashwin...
akarpe:1331292320:2012-03-09T19:25:20.648+0000:1331301285:2012-03-09T21:54:45.851+0000:Applied fix to trunk as revision r1298993.

Thanks to Nikolaos Dimos for providing the patch.

- Ashwin...
davsclaus:1331341039:2012-03-10T08:57:19.609+0000:1331341039:2012-03-10T08:57:19.609+0000:See the asyncConsumer option on the JMS component
http://camel.apache.org/jms
nikosd23:1331342711:2012-03-10T09:25:11.095+0000:1331342711:2012-03-10T09:25:11.095+0000:Thanks Ashwin and Claus."
0,CAMEL-5069,Bug,Minor,None,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-03-08 16:34:56+00:00,2012-03-09 08:57:34+00:00,"See nabble
http://camel.465427.n5.nabble.com/Inconsistent-onException-behaviour-tp5541356p5541356.html


Having




                errorHandler(deadLetterChannel(""mock:error""));

                onException(Exception.class)
                    .handled(true);




Should not route message to the DLC as the onException is handling the failure.","davsclaus:1331208375:2012-03-08T20:06:15.196+0000:1331208375:2012-03-08T20:06:15.196+0000:Works as intended, as having an onException with no output, solves special cases, where you want to handle the exception, but still let the message be handled by the DLC.

Alternative we would have to break backwards compatible, and add validation to onException to fail if you use handled, and then do not have any outputs.

davsclaus:1331254654:2012-03-09T08:57:34.649+0000:1331254654:2012-03-09T08:57:34.649+0000:I added some notes for the Camel 3.0 roadmap to improve the onException.
https://cwiki.apache.org/confluence/display/CAMEL/Camel+3.0+-+Roadmap"
0,CAMEL-5068,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Claus Ibsen,0,0,2012-03-08 12:33:19+00:00,2012-03-09 10:21:03+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Properties-Component-Cache-tp5539115p5539115.html


It would be nice to expose the cache option in the <propertiesPlaceholder> so people can enable/disable cache.","bvahdat:1331195587:2012-03-08T16:33:07.122+0000:1331195587:2012-03-08T16:33:07.122+0000:Without your help to leave such trivial task to dummies like me, how could I ever survive in this challenging community? Thanks :-)

Though a question: I've got already a fix for this ticket in place on my workspace however I did touch only:

- camel-core-xml (modified AbstractCamelContextFactoryBean, CamelPropertyPlaceholderDefinition)
- camel-spring   (Only added one additional unit-test)

Are you really sure that:

- camel-spring
- camel-bluprint

Should be affected by this ticket? Or do I (again) miss something?

davsclaus:1331195802:2012-03-08T16:36:42.293+0000:1331195802:2012-03-08T16:36:42.293+0000:Yeah the implementation is in those other places, as its re-used by spring/blueprint.

But add unit tests in camel-spring and blueprint to verify that it works in the XML DSL.
bvahdat:1331259663:2012-03-09T10:21:03.154+0000:1331259663:2012-03-09T10:21:03.154+0000:Did put a Tip on the Wiki regarding this as well."
0,CAMEL-5067,Improvement,Minor,None,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-03-08 07:53:57+00:00,2012-03-08 16:07:50+00:00,"The CAMEL-5058 identified a leak when using producer template to send to many unique endpoints. The reason is the UoW add/remove itself from the inflight registry.


What we need to do is to make the inflight registry add/remove seperated into two



from UoW as of today, to track totals
from route consumer to tracker per route based



Then we can avoid synchronized access to the endpoint counter as we do with the fix from CAMEL-5058.


The requires a little API change in InflightRegistry. Which we may or may not consider backporting to 2.9.x",
0,CAMEL-5066,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,XiaopengLi,0,0,2012-03-08 06:35:27+00:00,2012-11-09 08:59:05+00:00,"Here is the test class:



public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              	intercept().to(""log:intercept"");
		from(""timer://myTimer?period=2000"").setBody()
				.simple(""Current time is ${header.firedTime}"").to(""log:out"");
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
}





The MBean [org.apache.camel/processors/XXX/to2/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed.


I used 2.9.2-SNAPSHOT.",salever:1331160152:2012-03-08T06:42:32.662+0000:1331160152:2012-03-08T06:42:32.662+0000:Related talend JIRA issue: http://jira.talendforge.org/browse/TESB-5142
0,CAMEL-5065,Improvement,Minor,2.9.1,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Claus Ibsen,Marco Zapletal,0,0,2012-03-07 17:18:42+00:00,2012-03-08 09:32:01+00:00,"We are currently working on the management of failed exchanged. For getting an insight what has happened the Exchange.FAILURE_ENDPOINT delivers valuable information. However, this property gets only populated by endpoints. This means, when using beans, the property is set when the bean is referenced using to(bean://exceptionBean), but not if the bean is referenced using bean(exceptionBean). In the latter case, the property gets either populated using the last endpoint before the bean(...) or not at all. Please see the attached test case.


Thus, I would like to suggest populating the Exchange.FAILURE_ENDPOINT also for beans that are referenced in the DSL using the .bean() notation","davsclaus:1331130731:2012-03-07T22:32:11.487+0000:1331130731:2012-03-07T22:32:11.487+0000:I will be -1 this idea, as the property is for *endpoints*.
So its when you send a message to another endpoint.

We should not mix in other situations where its being set.

You can build you own interceptor to track what is going on, as well tap into the tracer which have details where the message has been routed.
marcozapletal:1331168058:2012-03-08T08:54:18.983+0000:1331168058:2012-03-08T08:54:18.983+0000:Thanks for the quick response, Claus.

I am fine with your decision, but anyway I would like to give you some additional information on this request:

I agree with you that the TO_ENDPOINT property (which is eventually used to populate the FAILURE_ENDPOINT property) should be reserved for endpoints. However, I think that beans can also be considered as endpoints, which is also reflected by the possibility to call beans as endpoints using bean://...

In order to leverage the built-in functionality of FAILURE_ENDPOINT and stay somehow also ""typesafe"" in our routes we currently do the following:

- Each of our beans has a public static final String attribute NAME 
- Have an Endpoints class containing a bunch of static final Strings - each of those refers to a bean using the endpoint notation  and the NAME attribute of the respective bean
- use the string constants of the Endpoints class to refer to bean as endpoints in the routes (i.e., to(Endpoints.MY_BEAN)...)
- Annotate the beans with @Component to get auto-discovered by Spring

The other approach could be to write an interceptor, which sets the TO_ENDPOINT property also for beans. But I am not sure whether it is desirable to intervene (overwrite) standard camel behavior.


davsclaus:1331170321:2012-03-08T09:32:01.278+0000:1331170321:2012-03-08T09:32:01.278+0000:When using bean you can hand in an existing instance, which Camel cannot safely invoke from an endpoint, as it may not be enlisted in a registry, so the bean cannot be looked up. Neither the bean may not have a default no-args ctr, that Camel can use to instantiate the bean, etc. Its going down a wrong path.

Likewise what about other EIPs such as transform, split, etc. Should the FAILURE_ENDPOINT also have some details here?

What you are looking for is the message history, where you have the node id, of the route where the last failure occurred. That id, may point to a <bean> a <to> etc. The tracer got this detail.

"
0,CAMEL-5064,Bug,Major,2.8.2,,"
None
",Resolved,Cannot Reproduce,None,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2012-03-07 07:21:13+00:00,2012-04-02 12:02:36+00:00,"If we create a route with a CXF endpoint programmatically:


CxfEndpoint endpoint = new CxfEndpoint();
endpoint.setCamelContext(camelContext);
endpoint.setAddress(myAddress);
endpoint.setWsdlUrl(wsdl);


and register the route using


camelContext.add(routeDefinition);


the route is started and appears in the MBeans, but, in Karaf, routes:list doesn't display the route (as OSGi service is not there).","njiang:1331162877:2012-03-08T07:27:57.873+0000:1331162877:2012-03-08T07:27:57.873+0000:Hi JB,

How does the CxfEndpoint be referenced in your route ?

Willem

jbonofre:1331165710:2012-03-08T08:15:10.020+0000:1331165710:2012-03-08T08:15:10.020+0000:Hi Willem,

I create a RouteDefinition and put directly in the from:

RouteDefintion route = new RouteDefintion();
route.from(cxfEndpoint).process(new MyProcessor()).to(""other..."");

And I register the route definition in the CamelContext.
jbonofre:1333339355:2012-04-02T12:02:35.977+0000:1333339355:2012-04-02T12:02:35.977+0000:After a complete cleanup of the data folder, I don't have the issue anymore."
0,CAMEL-5063,Bug,Minor,2.9.1,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Preben Asmussen,1,1,2012-03-06 15:27:55+00:00,2012-03-19 19:04:30+00:00,"validator component seems broken in 2.9.1. Gives you a npe when loading xsd from classpath during unittesting.
See http://camel.465427.n5.nabble.com/npe-in-camel-2-9-1-validator-tc5540894.html
prefixing with classpath eg. <to uri=""validator:classpath:BroadcastMonitor.xsd""  /> doesn't help.","preben:1331163125:2012-03-08T07:32:05.999+0000:1331163125:2012-03-08T07:32:05.999+0000:Did some investigation and found the course of the npe. The XSD used for validation is an old legacy xsd that imported a namespace without any ref. to a xsd. I have attached a testcase that shows the problem.
The validator component should handle this without throwing a npe, and warn about the inconsistency.
preben:1331163194:2012-03-08T07:33:14.104+0000:1331163194:2012-03-08T07:33:14.104+0000:validator testcase
bvahdat:1332133779:2012-03-19T13:09:39.310+0000:1332133779:2012-03-19T13:09:39.310+0000:@Claus

There was a tiny typo by the XSD being referenced inside ValidatorIllegalImportTest: BroadCastMonitor.xsd instead of BroadcastMonitor.xsd making tests pass on Windows (case-insensitive) but not on CI-Server (Ubuntu), which is now fixed:

http://svn.apache.org/viewvc?view=revision&revision=1302393
http://svn.apache.org/viewvc?view=revision&revision=1302405

I should confess I was really surprised to see you using Windows!!!

davsclaus:1332134087:2012-03-19T13:14:47.545+0000:1332134087:2012-03-19T13:14:47.545+0000:Yeah I am using Windows Vista, with a OS-X look and feel.
preben:1332155070:2012-03-19T19:04:30.720+0000:1332155070:2012-03-19T19:04:30.720+0000:doh - my bad."
0,CAMEL-5062,Task,Trivial,2.9.0,None,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Babak Vahdat,0,0,2012-03-05 18:45:59+00:00,2012-03-05 19:03:18+00:00,And also cleanup of some unused imports.,
0,CAMEL-5031,Improvement,Minor,"2.6.0, 2.9.0",,"
None
",Resolved,Abandoned,None,Unassigned,Andre Piwoni,0,1,2012-02-22 22:26:10+00:00,2015-10-20 13:42:17+00:00,"DozerTypeConverter utilizes DozerBeanMappper's method map(Object source, Class<T> destinationClass) to convert objects. Unfortunately, this does not work for Dozer's context based mapping with map-id because it requires call to DozerBeanMappper.map(Object source, Class<T> destinationClass, String mapId).


Example below does not work without map-id, which is actually required for this type of mapping (see http://dozer.sourceforge.net/documentation/faq.html#complex-to-map)


<mapping  map-id=""myMapping"">
   <class-a>x.y.z.ComplexType</class-a>
   <class-b>java.util.Map</class-b>
   <field copy-by-reference=""true"">
      <a>complexTypeField</a>
      <b key=""complexTypeFieldKeyName"">this</b>
  </field>
  ...
</mapping>


DozerTypeConverterLoader has access to ClassMap and its map-id, if any, in order to construct a lookup for map-id for a given conversion pair. This is tricky, however, since there can be multiple mappings with different ids for the same conversion pair.
Interfaces for Dozer and Camel Conversion may not be fully compatible but it would be great if at least limitations can be stated in documentation.


Regards,
Andre Piwoni","davsclaus:1329951986:2012-02-23T07:06:26.695+0000:1329951986:2012-02-23T07:06:26.695+0000:I added a note about this limitation on the wiki page.

I am not sure there is much we can do about the map-id thingy.
szhemzhitsky:1332391627:2012-03-22T12:47:07.355+0000:1332391695:2012-03-22T12:48:15.361+0000:Hi guys,

May be you can find it quite useful, but we were able to workaround such a limitation by create our own converter
{code:java}
public class DozerTypeConverter implements TypeConverter {

    public static final String MAP_ID_PROP = ""DozerMapID"";

    private DozerBeanMapper mapper;

    public DozerTypeConverter(DozerBeanMapper mapper) {
        this.mapper = mapper;
    }

    public <T> T convertTo(Class<T> type, Object value) {
        return convertTo(type, value, null);
    }

    public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {
        return convertTo(type, value, exchange.getProperty(MAP_ID_PROP, null, String.class));
    }

    public <T> T mandatoryConvertTo(Class<T> type, Object value) throws NoTypeConversionAvailableException {
        return convertTo(type, value, null);
    }

    public <T> T mandatoryConvertTo(Class<T> type, Exchange exchange, Object value) throws NoTypeConversionAvailableException {
        return convertTo(type, value, exchange.getProperty(MAP_ID_PROP, null, String.class));
    }

    private <T> T convertTo(Class<T> type, Object value, String mapId) {
        if(mapId != null) {
            return mapper.map(value, type, mapId);
        }
        return mapper.map(value, type);
    }

}
{code}

Here is how the camel route looks like

{code:xml}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""startRoute"">
        <from uri=""direct://start"" />
        <setProperty propertyName=""DozerMapID"">
            <constant>Type2Map</constant>
        </setProperty>
        <convertBodyTo type=""java.util.Map""/>
        <to uri=""mock://complete""/>
    </route>
</camelContext>
{code}

and mapping file

{code:xml}
<mappings xmlns=""http://dozer.sourceforge.net"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""http://dozer.sourceforge.net http://dozer.sourceforge.net/schema/beanmapping.xsd"">

    <mapping map-id=""Type2Map"">
        <class-a>org.foo.bar.dozer.DozerTypeConverterTest$Type</class-a>
        <class-b>java.util.HashMap</class-b>
        <field>
            <a>p1</a>
            <b key=""P1"">this</b>
        </field>
        <field>
            <a>p2</a>
            <b key=""P2"">this</b>
        </field>
    </mapping>

</mappings>
{code}

We also had to modify DozerTypeConverterLoader to create our converter instead of the camel's one.

{code:java}
public class DozerTypeConverterLoader implements InitializingBean, CamelContextAware {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    private DozerBeanMapper mapper;
    private CamelContext camelContext;

    @Override
    public void afterPropertiesSet() throws Exception {
        Assert.notNull(mapper, ""mapper: null"");
        Assert.notNull(mapper, ""camelContext: null"");

        TypeConverterRegistry registry = getTypeConverterRegistry();
        load(registry);
    }

    public void load(TypeConverterRegistry registry) throws Exception {
        List<ClassMap> all = loadMappings(camelContext, mapper);
        registerClassMaps(registry, mapper, all);
    }

    private void registerClassMaps(TypeConverterRegistry registry, DozerBeanMapper dozer, List<ClassMap> all) {
        DozerTypeConverter converter = new DozerTypeConverter(dozer);
        for (ClassMap map : all) {
            if(logger.isInfoEnabled()) {
                logger.info(""Added {} -> {} as type converter to: {}"",
                        new Object[]{map.getSrcClassName(), map.getDestClassName(), registry});
            }
            registry.addTypeConverter(map.getSrcClassToMap(), map.getDestClassToMap(), converter);
            registry.addTypeConverter(map.getDestClassToMap(), map.getSrcClassToMap(), converter);
        }
    }

    private List<ClassMap> loadMappings(CamelContext camelContext, DozerBeanMapper mapper) {
        List<ClassMap> answer = new ArrayList<ClassMap>();

        // load the class map using the class resolver so we can load from classpath in OSGi
        MappingFileReader reader = new MappingFileReader(XMLParserFactory.getInstance());
        List<String> mappingFiles = mapper.getMappingFiles();
        if (mappingFiles == null) {
            return Collections.emptyList();
        }

        for (String name : mappingFiles) {
            URL url = camelContext.getClassResolver().loadResourceAsURL(name);
            MappingFileData data = reader.read(url);
            answer.addAll(data.getClassMaps());
        }

        return answer;
    }

    @Override
    public CamelContext getCamelContext() {
        return camelContext;
    }

    @Override
    public void setCamelContext(CamelContext camelContext) {
        this.camelContext = camelContext;
    }

    private TypeConverterRegistry getTypeConverterRegistry() throws Exception {
        TypeConverterRegistry registry = camelContext.getTypeConverterRegistry();
        if(registry == null) {
            TypeConverter converter = camelContext.getTypeConverter();
            if (converter != null) {
                Method method = converter.getClass().getMethod(""getRegistry"");
                registry = (TypeConverterRegistry) method.invoke(converter);
            }
        }
        return registry;
    }

    public void setMapper(DozerBeanMapper mapper) {
        this.mapper = mapper;
    }

}
{code}

Unfortunately the codebase is for camel 2.4, so there are some workarounds for CAMEL-3143 (Take a look at getTypeConverterRegistry method)
davsclaus:1369537411:2013-05-26T11:03:31.276+0000:1369537411:2013-05-26T11:03:31.276+0000:Any update on this?
davsclaus:1436597796:2015-07-11T14:56:36.563+0000:1436597796:2015-07-11T14:56:36.563+0000:camel-dozer has been improved recently. Take a new look with latest code"
0,CAMEL-5030,Improvement,Major,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Hadrian Zbarcea,chris snow,0,0,2012-02-22 17:45:16+00:00,2012-03-04 10:30:59+00:00,"I can't use camel-smpp in my enterprise environment because all outbound connections have to go through a proxy.  For SMPP, this means that using HTTP CONNECT is required similar to the implementation here:


https://github.com/rtyley/jsch/blob/master/src/com/jcraft/jsch/ProxyHTTP.java","snowch:1329926276:2012-02-22T23:57:56.218+0000:1329926276:2012-02-22T23:57:56.218+0000:I'll aim to get a patch uploaded tomorrow.
snowch:1329945402:2012-02-23T05:16:42.152+0000:1329945402:2012-02-23T05:16:42.152+0000:Patch for 2.9.1-SNAPSHOT
davsclaus:1329965765:2012-02-23T10:56:05.626+0000:1329965765:2012-02-23T10:56:05.626+0000:Is this the full patch? 

Wonder if there is a getInstance() method that the producer/consumer now uses?
And how is the new http proxy options being used? The patch does not seem to check if they have been configured or not.

Also why did you add a dependency on commons-codec? I assume this was a mistake.

snowch:1329971412:2012-02-23T12:30:12.795+0000:1329971412:2012-02-23T12:30:12.795+0000:Hopefully, this should be the full patch now!
snowch:1329971467:2012-02-23T12:31:07.440+0000:1329971467:2012-02-23T12:31:07.440+0000:btw - the dependency on commons-codec was to base64 encode the proxy authentication username:password
snowch:1330167172:2012-02-25T18:52:52.083+0000:1330167172:2012-02-25T18:52:52.083+0000:Is it likely that this patch will make it into 2.9.1?
hadrian:1330379330:2012-02-28T05:48:50.755+0000:1330379330:2012-02-28T05:48:50.755+0000:Hi Chris,

I looked into your patch and it's not bad but it required a bit of work. I had to fix a few typos and add the proper version for commons-codec in the pom (I wonder how it passed your tests, you probably had a hardcoded value when you tested). Then there were massive checkstyle violations I had to fix as the jsch style doesn't quite jive with ours. I also added the header indicating the origin of the code.

The method of reading proxy response line was a bit crude, I replaced that. I wonder if anything could be done about the manual testing of the proxy and using dynamic ports. I will look into that tomorrow.

snowch:1330402440:2012-02-28T12:14:00.879+0000:1330402440:2012-02-28T12:14:00.879+0000:Hi Hadrian - thanks for looking into this, and sorry for for the headache I've given you :)
davsclaus:1330496599:2012-02-29T14:23:19.859+0000:1330496599:2012-02-29T14:23:19.859+0000:The wiki page needs to be updated
http://camel.apache.org/smpp
snowch:1330498284:2012-02-29T14:51:24.295+0000:1330498284:2012-02-29T14:51:24.295+0000:Hi Claus - I'm getting permission denied when trying to update the wiki.
hadrian:1330498765:2012-02-29T14:59:25.237+0000:1330498765:2012-02-29T14:59:25.237+0000:The code is committed on both trunk and 2.9.x. The reason this jira is not closed is because of the doc, which I'll do when I'll have a bit of time. Chris, thanks for the offer to help. You cannot get edit rights until you submit an [icla|http://www.apache.org/licenses/icla.txt]. As soon as you do that (if you can and/or want) we can grant you the necessary rights.
snowch:1330573020:2012-03-01T11:37:00.638+0000:1330573020:2012-03-01T11:37:00.638+0000:Hi Hadrian - the icla is with my company's legal dept at the moment, so could be some time.
davsclaus:1330580554:2012-03-01T13:42:34.623+0000:1330580554:2012-03-01T13:42:34.623+0000:Chris, you can possible write up some suggestions for doc changes and attach as a .txt file to this JIRA and mark [x] in grant license.
snowch:1330666817:2012-03-02T13:40:17.291+0000:1330666817:2012-03-02T13:40:17.291+0000:attached wiki-update.txt containing the text changes required for the wiki.
davsclaus:1330828259:2012-03-04T10:30:59.688+0000:1330828259:2012-03-04T10:30:59.688+0000:Thanks Chris for the wiki documentation. Its been added to the wiki page."
0,CAMEL-5029,Improvement,Major,2.10.0,None,"

blueprint
camel

",Resolved,Fixed,2.10.0,Claus Ibsen,Łukasz Dywicki,0,0,2012-02-22 13:59:31+00:00,2012-02-22 14:15:27+00:00,No Desc,"ldywicki:1329890482:2012-02-22T14:01:22.874+0000:1329890482:2012-02-22T14:01:22.874+0000:Patch available.
davsclaus:1329891327:2012-02-22T14:15:27.531+0000:1329891327:2012-02-22T14:15:27.531+0000:Thanks for the patch."
0,CAMEL-5028,Improvement,Minor,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Preben Asmussen,0,0,2012-02-22 13:24:52+00:00,2012-02-23 03:38:47+00:00,"When using adviceWith in CamelSpringTestSupport you should override isUseAdviceWith in your testcase and return true.


But this results in a error been thrown from assertValidContext in CamelSpringTestSupport with error 'Should have at least one route'.


see : http://camel.465427.n5.nabble.com/Using-adviceWith-in-CamelSpringTestSupport-td5504936.html",njiang:1329939527:2012-02-23T03:38:47.850+0000:1329939527:2012-02-23T03:38:47.850+0000:Applied patch into trunk.
0,CAMEL-5027,Bug,Minor,2.8.4,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Claus Ibsen,XiaopengLi,0,0,2012-02-22 09:17:56+00:00,2012-02-22 16:49:02+00:00,"Here is the test class:



public class TestStatistics {
 
    public static void main(String[] args) throws Exception {
       DefaultCamelContext context = new DefaultCamelContext();
       context.addRoutes(new RouteBuilder() {
 
           @Override
           public void configure() throws Exception {
              from(""timer:foo?period=5000"").routeId(""timer"").loadBalance()
                     .roundRobin().id(""load_balance_1"").to(""log:one"")
                     .id(""log_one"").to(""log:two"").id(""log_two"").end();
 
           }
       });
       context.start();
       Thread.sleep(500000);
       context.stop();
    }
 
}




The MBean [org.apache.camel/processors/XXX/load_balancer_1/Attributes/ExchangesTotal] property has no value, therefore no statistics information can be accessed. The same problem exists in Intercept,Log.","salever:1329874178:2012-02-22T09:29:38.662+0000:1329874178:2012-02-22T09:29:38.662+0000:Details
salever:1329874725:2012-02-22T09:38:45.875+0000:1329874725:2012-02-22T09:38:45.875+0000:For detail, refer to http://jira.talendforge.org/browse/TESB-3905
davsclaus:1329891384:2012-02-22T14:16:24.888+0000:1329891384:2012-02-22T14:16:24.888+0000:Thanks for reporting and with screenshot.

I have reproduced the issue, the load balancer does not record any stats."
0,CAMEL-5026,Task,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Babak Vahdat,0,0,2012-02-21 17:44:18+00:00,2012-02-22 19:12:01+00:00,No Desc,"bvahdat:1329820619:2012-02-21T18:36:59.437+0000:1329820619:2012-02-21T18:36:59.437+0000:The Wiki is updated as well.
bvahdat:1329876056:2012-02-22T10:00:56.802+0000:1329876056:2012-02-22T10:00:56.802+0000:All camel-hazelcast tests passed on my box but apparently not on the CI-Server:

https://builds.apache.org/job/Camel.trunk.fulltest/707/#showFailuresLink

So I reopen the ticket to see if I can fix it. In worst case I'll ""@Ignore"" the failed tests, as it was the case by some of them before applying:

http://svn.apache.org/viewvc?view=revision&revision=1291945
bvahdat:1329909121:2012-02-22T19:12:01.160+0000:1329909121:2012-02-22T19:12:01.160+0000:Instructing Maven to fork the JVM for each test run did the trick:

https://builds.apache.org/job/Camel.trunk.fulltest/708/org.apache.camel$camel-hazelcast/"
0,CAMEL-5025,Bug,Major,"2.6.0, 2.7.0, 2.8.0, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Duplicate,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-02-21 14:58:01+00:00,2012-02-21 15:09:31+00:00,"When the Splitter working in Streaming model, the error handle does work if the exception is throw from body iterator.



errorHandler(deadLetterChannel(""mock:error""));
from(""direct:start"").
	split(body()).						
		streaming().
		to(""mock:end"").
	end();




Here is the mail thread[1] which discusses about it.
[1]http://camel.465427.n5.nabble.com/Streaming-splitter-ignores-exception-handling-tt5501036.html#a5501601",
0,CAMEL-5024,Bug,Major,"2.8.3, 2.8.4, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Razvan Ludvig,0,0,2012-02-21 13:22:54+00:00,2012-11-23 13:59:24+00:00,"If an exception occurs on the next() call of an Iterator in a streaming splitter, the exception is never propagated to the exception or the error handler. This will lead to improper route termination, and inifite rollback/retry cycles.


I attached the minimal test case demonstrating the issue.","njiang:1329853145:2012-02-22T03:39:05.390+0000:1329853145:2012-02-22T03:39:05.390+0000:Applied patch into trunk, camel-2.9.x and camel-2.8.x branches."
0,CAMEL-5023,Bug,Major,2.9.0,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Alexandre Gattiker,0,0,2012-02-21 12:46:11+00:00,2012-02-22 06:31:57+00:00,"The JavaDoc for javax.print.DocPrintJob.print(Doc, PrintRequestAttributeSet) reads:


""This method should only be called once for a given print job.""


However org.apache.camel.component.printer.PrinterOperations reuses the same DocPrintJob to print over and over again. This results in:


javax.print.PrintException: already printing
	at sun.print.UnixPrintJob.print(UnixPrintJob.java:286) ~[na:1.6.0_29]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:107) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterOperations.print(PrinterOperations.java:101) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.print(PrinterProducer.java:55) ~[camel-printer-2.9.0.jar:2.9.0]
	at org.apache.camel.component.printer.PrinterProducer.process(PrinterProducer.java:49) ~[camel-printer-2.9.0.jar:2.9.0]","njiang:1329855173:2012-02-22T04:12:53.977+0000:1329855173:2012-02-22T04:12:53.977+0000:Applied patch into trunk, camel-2.8.x and camel-2.9.x branches."
0,CAMEL-5022,Bug,Major,2.10.0,2.10.0,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,0,2012-02-20 22:18:03+00:00,2012-02-21 17:43:23+00:00,"christian-muellers-macbook-pro:camel cmueller$ cd platforms/karaf/
christian-muellers-macbook-pro:karaf cmueller$ mvn clean install -Pvalidate
...
[WARNING] Failed to validate feature camel-twitter
[WARNING] No export found to match com.google.appengine.api.urlfetch (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)
[WARNING] No export found to match twitter4j.internal.http.alternative (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.twitter4j/2.2.5_1)",muellerc:1329817372:2012-02-21T17:42:52.718+0000:1329817372:2012-02-21T17:42:52.718+0000:fixed by Willem with r1291623
0,CAMEL-5021,Bug,Major,2.8.1,"2.8.5, 2.9.1, 2.10.0","

camel-file

",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Claus Ibsen,Sergey Zhemzhitsky,0,0,2012-02-20 21:28:33+00:00,2012-02-24 06:56:18+00:00,"Symptoms: 



Exception is thrown from the child route with NoErrorHandler configured.
Parent and child routes are linked with async. endpoints (seda, vm, nmr, etc.), which are configured to behave synchronously (attribute waitForTaskToComplete=Always in seda, vm-endpoints and attribute synchronous=true in nmr-endpoint).



The behavior with nmr endpoint is almost the same except for the next file is picked up before the lock on the previous one is released.


Here is a unit test to reproduce the issue:


org.foo.bar.FileRedeliveryWithoutErrorHandlerTest.java
package org.foo.bar;

import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.processor.RedeliveryPolicy;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;

import static org.hamcrest.CoreMatchers.equalTo;

public class FileRedeliveryWithoutErrorHandlerTest extends CamelTestSupport {

    private File newFile;
    private File errorFile;
    
    @Before
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void createFile() throws Exception {
        newFile = new File(""target/files/in/newFile.txt"");
        newFile.createNewFile();
        errorFile = new File(""target/files/in/.error/newFile.txt"");
    }
    
    @After
    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public void deleteFile() throws Exception {
        newFile.delete();
        errorFile.delete();
    }
    
    @Test
    public void testFileRedeliveryWithoutErrorHandler() throws Exception {
        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.setExpectedMessageCount(1);

        result.assertIsNotSatisfied();
        
        // created file have to exist because redelivery attempts are not completed
        assertThat(newFile.exists(), equalTo(true));
        assertThat(errorFile.exists(), equalTo(false));
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();

        RedeliveryPolicy policy = new RedeliveryPolicy();
        policy.setAsyncDelayedRedelivery(false);
        policy.setLogRetryStackTrace(true);
        policy.setMaximumRedeliveries(100);
        policy.setMaximumRedeliveryDelay(30000);
        policy.setRedeliveryDelay(1000);
        policy.setUseExponentialBackOff(false);
        policy.setRetryAttemptedLogLevel(LoggingLevel.WARN);
        registry.bind(""redeliveryPolicy"", policy);

        return registry;
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                errorHandler(defaultErrorHandler())
                    .onException(Exception.class)
                    .redeliveryPolicyRef(""redeliveryPolicy"")
                    .log(LoggingLevel.ERROR, ""Error"");

                from(""file:target/files/in?initialDelay=100&delay=100&move=.backup&moveFailed=.error"")
                    .to(""seda:async?waitForTaskToComplete=Always&size=1"")
                    .to(""mock:result"");
                from(""seda:async"")
                    .errorHandler(noErrorHandler())
                    .delay(1000)
                    .throwException(new RuntimeException(""Hello World!""));
            }
        };
    }
}","davsclaus:1329958723:2012-02-23T08:58:43.734+0000:1329958723:2012-02-23T08:58:43.734+0000:Will be fixed by CAMEL-5033
szhemzhitsky:1330037778:2012-02-24T06:56:18.648+0000:1330037778:2012-02-24T06:56:18.648+0000:Hello Claus,

Thanks a lot."
0,CAMEL-5020,New Feature,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2012-02-20 18:42:44+00:00,2012-04-01 00:59:25+00:00,Camel already supports remote file processing via (s)ftp. We should add scp to the list of protocols supported. Jsch is supports scp and is already a dependency of camel-ftp.,"hadrian:1330001386:2012-02-23T20:49:46.883+0000:1330001386:2012-02-23T20:49:46.883+0000:Added skeleton for the camel-jsch component supporting the scp protocol. Will follow up with support for consumers, more tests, karaf feature and doc in the jira before closing this.
davsclaus:1330059704:2012-02-24T13:01:44.518+0000:1330059704:2012-02-24T13:01:44.518+0000:Great work so far, having scp is really nice"
0,CAMEL-5019,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Raúl Kripalani,0,1,2012-02-20 17:28:31+00:00,2012-02-23 07:15:38+00:00,"Creation of a camel-mongodb feature for quick installation of the component in Karaf environments.
Patch attached.","raulvk:1329730200:2012-02-20T17:30:00.499+0000:1329730200:2012-02-20T17:30:00.499+0000:Apply patch after CAMEL-4910.
davsclaus:1329952538:2012-02-23T07:15:38.743+0000:1329952538:2012-02-23T07:15:38.743+0000:Thanks for the patch.
Added an karaf test as well"
0,CAMEL-5018,Improvement,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Bruno Barin,0,1,2012-02-20 10:32:45+00:00,2012-03-03 13:11:15+00:00,"Actually when trying to unmarshall a CSV that does not contain all the fields described via @DataField annotation, an IllegalArgumentException is thrown. 
Would be better to define a default value for non required fields via @DataField annotation and therefore, not fail.","bbarin:1329782035:2012-02-21T07:53:55.639+0000:1329782035:2012-02-21T07:53:55.639+0000:Hello everybody!
I've attached a patch for this issue.
Cheers,
Bruno
njiang:1329844009:2012-02-22T01:06:49.111+0000:1329844009:2012-02-22T01:06:49.111+0000:Hi Bruno,

It looks like you reformat the code before you created the patch. 
Can you revert it and just send the change you made ?
It will help us to do a quick review of the patch.

Willem

bbarin:1329863258:2012-02-22T06:27:38.866+0000:1329863258:2012-02-22T06:27:38.866+0000:New version without the formatting
davsclaus:1329965810:2012-02-23T10:56:50.999+0000:1329965810:2012-02-23T10:56:50.999+0000:Remember to update the wiki documentation, so end users knows about this improvement
http://camel.apache.org/bindy
bbarin:1330299318:2012-02-27T07:35:18.728+0000:1330299318:2012-02-27T07:35:18.728+0000:I don't have permissions to edit the wiki.
Could someone with change rights do it? or can I become a commiter?
davsclaus:1330310589:2012-02-27T10:43:09.709+0000:1330310589:2012-02-27T10:43:09.709+0000:Bruno, you can read here about how to edit the web-site and how to get karma to do it yourself
http://camel.apache.org/how-do-i-edit-the-website.html
bbarin:1330666135:2012-03-02T13:28:55.690+0000:1330666135:2012-03-02T13:28:55.690+0000:Hi,

I've edited the WIKI with the new attribute info @
https://cwiki.apache.org/confluence/display/CAMEL/Bindy

I also noticed that the patch is integrated to the trunk.
Should I set this JIRA to Resolved?

Cheers
njiang:1330751475:2012-03-03T13:11:15.734+0000:1330751475:2012-03-03T13:11:15.734+0000:Committed the patch into trunk and updated the wiki page."
0,CAMEL-5017,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,0,2012-02-20 07:54:02+00:00,2012-02-20 14:24:28+00:00,"We could let the user choice how to group the lines if the groupLines option is enabled.
The Stream Endpoint can hold the strategy bean reference from the registry.",njiang:1329719068:2012-02-20T14:24:28.346+0000:1329719068:2012-02-20T14:24:28.346+0000:Applied the patch into trunk and updated the wiki page.
0,CAMEL-5016,Improvement,Minor,None,"2.9.3, 2.10.0","
None
",Resolved,Fixed,"2.9.3, 2.10.0",Daniel Kulp,Willem Jiang,0,0,2012-02-20 02:39:22+00:00,2012-04-27 19:48:51+00:00,Here is the git pull request https://github.com/rwfowler/camel/commit/29696ea143faaef91346ec2218bda066069b231b,"njiang:1329677615:2012-02-20T02:53:35.875+0000:1329677615:2012-02-20T02:53:35.875+0000:Applied the patch into trunk.
davsclaus:1335475775:2012-04-27T05:29:35.017+0000:1335475775:2012-04-27T05:29:35.017+0000:Have to revert this as we cannot support the API of Jetty 7 and 8 at the same time. This breaks for people using Jetty 7.
davsclaus:1335498602:2012-04-27T11:50:02.264+0000:1335498602:2012-04-27T11:50:02.264+0000:Dan there is also this ticket."
0,CAMEL-5015,New Feature,Major,2.9.0,None,"

camel
jt400
patch

",Resolved,Fixed,2.10.0,Claus Ibsen,Jeff Costello,0,0,2012-02-19 12:34:52+00:00,2012-02-22 07:07:07+00:00,"The current DTAQ support is limited to non-keyed data queues. I have created a patch that adds support for keyed data queues. Configuration is done via options on the endpoint, which is the standard.


When writing to a keyed data queue, the message header ""KEY"" must contain the desired message key. This can be binary or text, depending upon the Format used.


When reading from a keyed data queue, the searchKey and searchType must be set.


Example endpoint configurations
------------------------------
Writing to keyed data queue from JMS
from(""jms:queue:input"").
                        to(""jt400://username:password@system/lib.lib/MSGINDQ.DTAQ?keyed=true"");
------------------------------
Reading from keyed data queue to JMS
from(""jt400://username:password@system/lib.lib/MSGOUTDQ.DTAQ?keyed=true&searchKey=MYKEY&searchType=GE"").
                        to(""jms:queue:output"");
------------------------------


In addition, I have added the iSeries DTAQ Sender Information to the message header for messages read from a DTAQ.","jcostello:1329626169:2012-02-19T12:36:09.181+0000:1329626169:2012-02-19T12:36:09.181+0000:Patch to add support for keyed data queues
davsclaus:1329865627:2012-02-22T07:07:07.370+0000:1329865627:2012-02-22T07:07:07.370+0000:Thanks for your patch and examples."
0,CAMEL-5014,Improvement,Major,None,None,"
None
",Closed,Invalid,None,Unassigned,Alessio Giannetti,0,0,2012-02-17 09:16:36+00:00,2012-02-17 09:19:13+00:00,No Desc,
0,CAMEL-5013,Task,Major,2.9.0,2.10.0,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,0,2012-02-16 22:33:50+00:00,2012-02-17 07:27:22+00:00,"See http://netty.io/
io.netty/netty/3.3.1.Final is already an OSGI bundle",muellerc:1329434842:2012-02-17T07:27:22.026+0000:1329434842:2012-02-17T07:27:22.026+0000:Committed r1245333
0,CAMEL-5012,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-02-16 17:07:49+00:00,2012-02-16 17:18:42+00:00,"When starting and shutting down Camel, it reports a bit stuff at INFO level. We should make it less verbose. For example the type converter logs 3-4 lines, we should just log 1 line instead.","davsclaus:1329383788:2012-02-16T17:16:28.496+0000:1329383788:2012-02-16T17:16:28.496+0000:Now Camel is less verbose by default.

{code}
2012-02-16 18:18:49,186 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10-SNAPSHOT (CamelContext: camel-1) is starting
2012-02-16 18:18:49,188 [main           ] INFO  ManagementStrategyFactory      - JMX is disabled.
2012-02-16 18:18:49,317 [main           ] INFO  DefaultTypeConverter           - Loaded 178 type converters
2012-02-16 18:18:49,317 [main           ] INFO  DefaultCamelContext            - Total 0 routes, of which 0 is started.
2012-02-16 18:18:49,322 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10-SNAPSHOT (CamelContext: camel-1) started in 0.132 seconds

...

2012-02-16 18:18:49,592 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10-SNAPSHOT (CamelContext: camel-1) is shutting down
2012-02-16 18:18:49,614 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.10-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.001 seconds. Uptime 0.429 seconds.
{code}"
0,CAMEL-5011,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-02-16 15:29:00+00:00,2012-02-16 17:10:20+00:00,"We should mark this option as @deprecated as loading the TC is now fast (avoid file scanning as we did in the past).
As loading type converters should generally be part of bootstrapping CamelContext so everything is in order before starting routing.","davsclaus:1329383416:2012-02-16T17:10:16.610+0000:1329383416:2012-02-16T17:10:16.610+0000:Marked as @deprecated, and also changed the Camel test kit, to *not* be lazy anymore."
0,CAMEL-5010,Improvement,Minor,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-02-16 06:25:43+00:00,2012-02-21 23:36:24+00:00,"In the old days when using OSGi and Camel it was sometime tricky to get the stuff working and running correctly. So we had some logic to detect if OSGi environment. We have some left over code in camel-spring that logs this. We should now remove this as it does not offer any value.


And also causes a WARN to be logged in JBoss7 that may confuse users, when using Camel as a WAR app in JBoss.
http://camel.465427.n5.nabble.com/Camel-2-9-0-startup-error-message-ClassNotFoundException-org-osgi-framework-BundleActivator-tp5133932p5133932.html","raulvk:1329729397:2012-02-20T17:16:37.209+0000:1329729397:2012-02-20T17:16:37.209+0000:This fix breaks OSGi compatibility on Karaf 2.2.5 (and probably lower). Current HEAD of trunk, revision 1291263. The code deleted by this commit loaded the {{org.apache.camel.osgi.CamelContextFactoryBean}} class and then registered it. Due to a wrong import, it is now loading {{org.apache.camel.*spring*.CamelContextFactoryBean}} instead. As a result, Camel is unable to resolve components, languages, etc. from the OSGi environment.

I will attach a patch.
raulvk:1329729689:2012-02-20T17:21:29.147+0000:1329729689:2012-02-20T17:21:29.147+0000:Actually, it needs to be reverted entirely. 

Claus, I believe the code is not simply doing logging, it is actually overriding the CamelContextFactoryBean being used. It starts off by statically using the Spring one, and if the OSGi one is available, it switches to that one.
njiang:1329759730:2012-02-21T01:42:10.524+0000:1329759730:2012-02-21T01:42:10.524+0000:Yes, we need to revert the patch. I think we could try to loading the ""org.osgi.frameworkBundleActivator"" before the ""org.apache.camel.osgi.Activator"" which could avoid the WARNING Error.
davsclaus:1329783408:2012-02-21T08:16:48.502+0000:1329783408:2012-02-21T08:16:48.502+0000:I have seen a lot of weird OSGi crapola over the times, but this one beats them all.

I have not see any other OSGi framework have to do tricks like this to just work.
And if its really needed, then code comments must be in place stating, why this weird code must be in place.

The BlueprintCamelContext does not have the need for this weird code.
njiang:1329797466:2012-02-21T12:11:06.978+0000:1329797466:2012-02-21T12:11:06.978+0000:The BlueprintCamelContext is only supported in OSGi platform.

With those codes, we could let the namespace handler of ""http://camel.apache.org/schema/spring"" detect the OSGi platform and load the OSGi CamelContextFactoryBean automatically. In this way the user's spring camel context configuration file can be loaded by Spring or Spring-DM without any change.

I just add some comments on the code.
njiang:1329797514:2012-02-21T12:11:54.504+0000:1329797514:2012-02-21T12:11:54.504+0000:Reverted the original patch and added some comments on the code.
davsclaus:1329797640:2012-02-21T12:14:00.643+0000:1329797640:2012-02-21T12:14:00.643+0000:Fine, the INFO logging should be removed as ppl get confused it it says ""OSGi environment not detected"" or whatever it does, when they simply use Camel in Tomcat.


bvahdat:1329838584:2012-02-21T23:36:24.219+0000:1329838584:2012-02-21T23:36:24.219+0000:I assume because of this OSGi magic we should remove the following note included for the 2.10.0 release, right? 

{code}
Fixed issue with WARN logging running Camel as a WAR file in JBoss 7.
{code}"
0,CAMEL-5009,Bug,Major,2.8.0,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Fernando Ribeiro,0,0,2012-02-15 13:54:44+00:00,2012-02-16 16:43:37+00:00,"When I use the resourceClass parameter as described in the docs, I get an unexpected error:


import javax.ws.rs.Path;
import javax.ws.rs.PathParam;


@Path(""/sample/"")
public final class SampleResource {


  @Path(""/

{param1}

/

{param2}

"")
  public Object sampleOperation(@PathParam(""param1"") final String param1, @PathParam(""param2"") final String param2) 

{
    return null;
  }


}


import org.apache.camel.builder.RouteBuilder;


public final class SampleRouteBuilder extends RouteBuilder {


  @Override
  public void configure() 

{
    from(""cxfrs:http://0.0.0.0:8080?resourceClass=SampleResource"")...
  }


}


The workaround has been using the resourceClasses parameter instead.","njiang:1329365526:2012-02-16T12:12:06.950+0000:1329365526:2012-02-16T12:12:06.950+0000:Applied patch into trunk , camel-2.9.x, camel-2.8.x branches.
fribeiro:1329381817:2012-02-16T16:43:37.136+0000:1329381817:2012-02-16T16:43:37.136+0000:Thanks, Willem, I will keep the wiki updated accordingly."
0,CAMEL-5008,Bug,Major,2.8.2,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,Sebastian Rühl,0,0,2012-02-15 11:51:24+00:00,2012-02-16 08:02:43+00:00,"When working with streams, stream caching must be activated in order to use log:set trace, otherwise the streams will be consumed, as stated here http://camel.apache.org/jbi.html (""#Using Streaming Bodies""). When the stream caching now gets activated, the streams will be reseted after each step (as far as I Understand). This makes it impossible to work with InputStreams in a pipe manner (e.g. Read the first char, then in the next step work with the next chars), as the stream is after this every time in the beginning.
I would except that the stream caching provides a mechanism for the ""user"" to be able to read it more than once. Also its the right procedure to reset the streams after they are traced with the tracing mechanism, BUT the should be reseted to the state they were before and not to the very first beginning. I didn't dig into the code that deep but it seems that exactly this happens from user perspective.


So to summarize there are several problems:



Working in stream in camel is impossible when log:set debug trace get enabled. (Thus enable Stream caching)
When Stream caching is enabled it becomes impossible to work with ""stream pointers"" as camel reset the streams to the very beginning.



I illustrated the problem in the attached jUnit test.","sruehl:1329277952:2012-02-15T11:52:32.503+0000:1329277952:2012-02-15T11:52:32.503+0000:Works if streaming gets out commented in test. Sorry if the test is a bit incomplete.
sruehl:1329278397:2012-02-15T11:59:57.415+0000:1329278397:2012-02-15T11:59:57.415+0000:Currently I'm not sure but it seems to be more like 3 Bugs
- log:set trace destroys streams when stream caching deactivated
- stream:caching shouldn't do a reset or it should be a possibility to disable this
- when tracing on stream caching there should be a mark before the trace and then a reset (however this might destroy a user mark)
davsclaus:1329341984:2012-02-16T05:39:44.195+0000:1329341984:2012-02-16T05:39:44.195+0000:This is *not* a Camel bug/issue, if your logger is reading the stream, and causing the stream to not be re-readable.

In the parts where Camel is logging a message content, it will by default skip message contents that is stream based.
See the extractBodyForLogging methods.
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/MessageHelper.java


davsclaus:1329342153:2012-02-16T05:42:33.486+0000:1329342153:2012-02-16T05:42:33.486+0000:And in your case just do not use the streamCaching from Camel.
Then your message body is left untouched by Camel. 

sruehl:1329350563:2012-02-16T08:02:43.304+0000:1329350563:2012-02-16T08:02:43.304+0000:Sorry for the confusing Bug report. The log:set of what I talked about is from the the Talend ESB (Karaf), so ignore that."
0,CAMEL-5007,Improvement,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,Alessio Giannetti,0,0,2012-02-15 00:02:58+00:00,2012-03-11 17:30:32+00:00,PropertiesComponent should apply on errorHandler and redeliveryPolicy properties definition in the camel context.,"njiang:1329264728:2012-02-15T08:12:08.516+0000:1329264728:2012-02-15T08:12:08.516+0000:Hi Alessio,

I just take a quick look at the code (ErrorHandlerDefinitionParser). It is hard to add the support of resolving the value of PropertiesComponent, as the ErrorHandlder is not bund to the camel context which provides a way to resolve the value of properties.

To address that, we may need to do refactor on the camel-core to delay the creation of the ErrorHandler or find a more generic way resolve the value of PropertiesComponent.  

For now, we could workaround it by using the property resolve of spring. 

Willem


davsclaus:1330829785:2012-03-04T10:56:25.191+0000:1330829785:2012-03-04T10:56:25.191+0000:This should already be supported. Can you provide a use-case that does not?
agiannetti:1330916153:2012-03-05T10:55:53.529+0000:1330916489:2012-03-05T11:01:29.665+0000:Like said here http://camel.apache.org/properties.html 
""Camel now provides a new PropertiesComponent in camel-core which allows you to use property placeholders when defining Camel Endpoint URIs."" 
So it works just with endpoint definition.
I would have used something like:

<propertyPlaceholder id=""properties"" location=""classpath:bonus-tracker-context.properties"" prefixToken=""#["" suffixToken=""]""/>

<endpoint id=""getBulkBonusMessagesTimer""
    uri=""timer://getBulkBonusMessagesTimer?fixedRate=true&amp;period=#[bulkBonusMessagesTimerPeriod]""/>

<errorHandler id=""myErrorHandler"" type=""DefaultErrorHandler"">
<redeliveryPolicy maximumRedeliveries=""#[mrp]""
    retryAttemptedLogLevel=""#[rall]""
    redeliverDelay=""#[rd]""/>
</errorHandler>

But the propertiesComponent works only with the uri definition.

So i just defined 

<bean id=""errorHandler"" class=""org.apache.camel.builder.DeadLetterChannelBuilder"">
         <property name=""deadLetterUri"" value=""seda:deadLetterManager""/>
         <property name=""useOriginalMessage"" value=""true""/>
         <property name=""redeliveryPolicy"" ref=""redeliveryPolicy""/>
    </bean>

    <bean id=""redeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${errorHandler.maximumRedeliveries}""/>
        <property name=""redeliverDelay"" value=""${errorHandler.redeliveryDelay}""/>
        <property name=""retryAttemptedLogLevel"" value=""${errorHandler.retryAttemptedLogLevel}""/>
    </bean>

in spring and used it in the camel context.

davsclaus:1331360121:2012-03-10T14:15:21.295+0000:1331360121:2012-03-10T14:15:21.295+0000:Thanks I have reproduced the issue. Its when you embed a <redeliveryPolicy> inside the <errorHandler>. This requires a bit more than Spring can handle, so we need to adjust the error handler parser a bit in camel-spring, to fix this.
davsclaus:1331361939:2012-03-10T14:45:39.341+0000:1331361939:2012-03-10T14:45:39.341+0000:We should also check the Blueprint XML DSL as well to see if there is a problem as well.
davsclaus:1331431105:2012-03-11T09:58:25.332+0000:1331431105:2012-03-11T09:58:25.332+0000:I got a pending fix for camel-spring. Will have to do a similar fix for camel-blueprint.
davsclaus:1331458232:2012-03-11T17:30:32.190+0000:1331458232:2012-03-11T17:30:32.190+0000:Now works for both Spring and Blueprint XML DSLs"
0,CAMEL-5006,Bug,Minor,2.9.0,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Hadrian Zbarcea,Pat Fox,0,0,2012-02-14 20:17:46+00:00,2012-02-15 01:36:57+00:00,"A request/reply invocation results in the following exception when JMSCorrelationID is set to empty String ("""") on the inbound JMS message. 



[JmsConsumer[myqueue]] DefaultErrorHandler ERROR Failed delivery for exchangeId: ID-myexchange-id. Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
java.lang.NullPointerException
at java.util.concurrent.ConcurrentHashMap.put(ConcurrentHashMap.java:882)[:1.6.0_30]
at org.apache.camel.util.DefaultTimeoutMap.put(DefaultTimeoutMap.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.CorrelationMap.put(CorrelationMap.java:68)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.registerReply(TemporaryQueueReplyManager.java:42)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer$1.createMessage(JmsProducer.java:157)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:199)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:142)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:156)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:153)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:343)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:163)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:98)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)[camel-core-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:91)[camel-jms-2.8.0-fuse-01-20.jar:2.8.0-fuse-01-20]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[spring-jms-3.0.5.RELEASE.jar:3.0.5.RELEASE]
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_30]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_30]
at java.lang.Thread.run(Thread.java:662)[:1.6.0_30]





I have also tested this against Trunk version 1239497","pgfox:1329222297:2012-02-14T20:24:57.390+0000:1329222297:2012-02-14T20:24:57.390+0000:Added another test method to JmsRequestReplyCorrelationTest.java to show the issue. 

Where JMSCorrelationID is set to empty String I would expect the same behavior as if it set to Null. 
pgfox:1329223569:2012-02-14T20:46:09.437+0000:1329223901:2012-02-14T20:51:41.744+0000:I have made a simple change in JmsProducer.java.patch which appears to resolve the junit test. Perhaps someone more familiar with the JMSCorrelationID logic could see a better approach?
 
hadrian:1329226095:2012-02-14T21:28:15.045+0000:1329226095:2012-02-14T21:28:15.045+0000:Pat, we cannot include patches if you do not explicitly grant us the license to do so. There is a checkbox for that you need to check when you upload (if you are ok with us including your work). If that was your intention could you please remove the attachments and reattach with the grant option? Thanks.
pgfox:1329226693:2012-02-14T21:38:13.871+0000:1329226693:2012-02-14T21:38:13.871+0000:Thanks Hadrain, I have reattached and granted license.
hadrian:1329227099:2012-02-14T21:44:59.991+0000:1329227099:2012-02-14T21:44:59.991+0000:Thanks, looks good, testing now.
hadrian:1329241017:2012-02-15T01:36:57.730+0000:1329241017:2012-02-15T01:36:57.730+0000:Nice spot, good patch. Thanks Pat for the contribution."
0,CAMEL-5005,Bug,Minor,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Achim Nierbeck,0,0,2012-02-14 15:08:59+00:00,2012-02-15 15:00:56+00:00,"After switching to 2.9 


the following results in a NPE



<camel:setBody>
	<camel:simple></camel:simple>
</camel:setBody>




I'm not sure if it is now required to have something in the content of the simple element. 
I used it for setting the body element to an empty string before (worked with 2.8.1)",davsclaus:1329285672:2012-02-15T14:01:12.405+0000:1329285672:2012-02-15T14:01:12.405+0000:Using <camel:constant/> ought to set an empty string as well.
0,CAMEL-5004,Bug,Major,2.6.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Anton Kudinov,0,1,2012-02-14 14:35:18+00:00,2012-02-16 07:03:54+00:00,"I compute real number in route:
   <setBody>0.02</setBody>
After that I want to filter:
   <filter><simple>${body} > 0 </simple> ... </filter>
This expression return false for value in body = 0.02",davsclaus:1329347034:2012-02-16T07:03:54.769+0000:1329347034:2012-02-16T07:03:54.769+0000:I have improved the simple language to work better with floating point numbers.
0,CAMEL-5003,Improvement,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Thomas Gueze,0,0,2012-02-13 12:58:07+00:00,2012-03-25 14:22:38+00:00,"The JDBC component has no support of generated keys retrieval, i.e use of Jdbc api calls :



statement.execute(String, int)
[statement.execute(String, int[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])]
[statement.execute(String, String[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])]



This patch allow to retrieve the generated keys using headers :



JDBC_RETRIEVE_GENERATED_KEYS : boolean (mandatory to retrieve the generated keys)
JDBC_GENERATED_COLUMNS : containing the int[] or String[] generated keys expected (optional)



The results are put in two headers :



JDBC_GENERATED_KEYS_DATA : the generated keys rows
JDBC_GENERATED_KEYS_ROW_COUNT : the number of generated keys rows put","thomasgueze:1329109172:2012-02-13T12:59:32.186+0000:1329109172:2012-02-13T12:59:32.186+0000:Patch resolving the issue
hadrian:1329118951:2012-02-13T15:42:31.424+0000:1329118951:2012-02-13T15:42:31.424+0000:Thanks for the contribution. Looks good at the first glance.
davsclaus:1332656558:2012-03-25T14:22:38.769+0000:1332656558:2012-03-25T14:22:38.769+0000:Thomas, thanks for the patch.

I have applied it, as well updated documentation."
0,CAMEL-5002,Improvement,Major,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Nick Heudecker,0,1,2012-02-13 06:49:44+00:00,2012-02-16 15:48:48+00:00,"When load testing my application, BaseTypeConverter#getOrFindTypeConverter caused threads to block due to the synchronized block in the getOrFindTypeConverter method.  This was triggered when exchange.getIn().getBody(Class) was called.  Changing the method to getBody() resulted in higher application throughput.","njiang:1329201538:2012-02-14T14:38:58.176+0000:1329201538:2012-02-14T14:38:58.176+0000:Hi Nick,

I just checked the code of camel-2.9.x , there is no BaseTypeConveter.
Can  you double check the version of camel ?
BTW, a patch could be more precise to discrib the question.

Willem
davsclaus:1329293709:2012-02-15T16:15:09.676+0000:1329293709:2012-02-15T16:15:09.676+0000:Its the BaseTypeConverterRegistry.

I have reproduced the issue and using a profiler I can see the contention.
davsclaus:1329294034:2012-02-15T16:20:34.444+0000:1329294034:2012-02-15T16:20:34.444+0000:Before and after screenshots with the fix.
bvahdat:1329376161:2012-02-16T15:09:21.270+0000:1329376161:2012-02-16T15:09:21.270+0000:The fix provided by this ticket has broken regression:

https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-xmlbeans/698/testReport/junit/org.apache.camel.converter.xmlbeans/XmlBeansConcurrencyTest/testConcurrentProducers/

If you would revert BaseTypeConverterRegistry to what it was before (with synchronized blocks) then this test would pass. I'm looking into it but have not found a workround yet.
davsclaus:1329377243:2012-02-16T15:27:23.530+0000:1329377243:2012-02-16T15:27:23.530+0000:I have committed a fix for the test.
bvahdat:1329378028:2012-02-16T15:40:28.375+0000:1329378028:2012-02-16T15:40:28.375+0000:Thanks!

And +1 for CAMEL-5011
davsclaus:1329378528:2012-02-16T15:48:48.030+0000:1329378528:2012-02-16T15:48:48.030+0000:Just in case, there may be another component where we should enforce the TC to be loaded up-front. I just did a quick search for tests with similar name.

./components/camel-rmi/src/test/java/org/apache/camel/component/rmi/RmiConcurrencyTest.java
./components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryConcurrencyTest.java
./components/camel-saxon/src/test/java/org/apache/camel/component/xquery/XQueryURLBasedConcurrencyTest.java
./components/camel-xmlbeans/src/test/java/org/apache/camel/converter/xmlbeans/XmlBeansConcurrencyTest.java
./components/camel-xmlsecurity/src/test/java/org/apache/camel/dataformat/xmlsecurity/XMLSecurityConcurrencyTest.java
./components/camel-xstream/src/test/java/org/apache/camel/dataformat/xstream/XStreamConcurrencyTest.java"
0,CAMEL-5001,Improvement,Minor,None,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-02-11 12:17:35+00:00,2012-02-11 13:26:52+00:00,"The option shareUnitOfWork does not make sense for recipient list, and we should remove that option. In older Camel releases we should mark it as deprecated.","davsclaus:1328938012:2012-02-11T13:26:52.744+0000:1328938012:2012-02-11T13:26:52.744+0000:Lets keep the shareUnitOfWork around. Its useable when you want to move the original message into the DLC, and let the error handler do redeliveries for each recipient message."
0,CAMEL-5000,Bug,Major,"2.8.4, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-02-11 12:16:11+00:00,2012-02-11 13:19:21+00:00,"Given this route




                onException(Exception.class)
                        .handled(true)
                        .to(""mock:dead"");

                from(""direct:start"")
                    .recipientList(constant(""fail:endpoint""))
                    .to(""mock:result"");




You would assume the on exception will handle the exception from the recipient list with the non existing endpoint.
This is not the case. We should let recipient list detect and let the error handler handle it.",
0,CAMEL-4999,Bug,Major,2.9.0,2.9.1,"
None
",Resolved,Fixed,2.9.1,Claus Ibsen,Ashwin J. Karpe,0,1,2012-02-10 15:51:53+00:00,2012-02-11 13:38:40+00:00,"A Camel user reported the following in the Camel User Forum issue
http://camel.465427.n5.nabble.com/Validation-error-after-upgrade-from-Camel-2-8-3-to-2-9-0-td5472816.html


Details 
--------
I have a route that use 
http://camel.apache.org/validation.html


after upgrade Camel from 2.8.3 to 2.9.0 during validation I receive 
the following error 
by: org.xml.sax.SAXParseException: src-resolve: Cannot resolve the 
name 'ecc:PositionType' to a 'type definition' component. 
        at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown 
Source)[:] 
        at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)[:] 
        at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.getGlobalDecl(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseNamedElement(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseLocal(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseLocalElements(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown 
Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)[:] 
        at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown 
Source)[:] 
        at javax.xml.validation.SchemaFactory.newSchema(SchemaFactory.java:524)[:] 
        at org.apache.camel.processor.validation.ValidatingProcessor.createSchema(ValidatingProcessor.java:231)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.processor.validation.ValidatingProcessor.loadSchema(ValidatingProcessor.java:105)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.component.validator.ValidatorComponent.createEndpoint(ValidatorComponent.java:55)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)[90:org.apache.camel.camel-core:2.9.0] 
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:432)[90:org.apache.camel.camel-core:2.9.0]","fbalicchia:1328921183:2012-02-11T08:46:23.520+0000:1328921183:2012-02-11T08:46:23.520+0000:After some unit test i see that the problem is fixed in version 2.10-SNAPSHOT.
The jira issue that fix the problem is: 
CAMEL-4877: Validator component now supports xs:import again.

The version of camel that has this from are 2.9.0 and 2.9.0-RC1.

From my point of view this iusse can be closed 

Thanks from help





davsclaus:1328938720:2012-02-11T13:38:40.391+0000:1328938720:2012-02-11T13:38:40.391+0000:Already fixed"
0,CAMEL-4998,New Feature,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Babak Vahdat,0,0,2012-02-09 20:09:47+00:00,2012-03-19 21:15:03+00:00,See http://camel.465427.n5.nabble.com/How-to-implement-requestTimeout-in-the-spring-ws-component-td5469281.html,"bvahdat:1328817605:2012-02-10T04:00:05.511+0000:1328817605:2012-02-10T04:00:05.511+0000:My first intention was to provide both the connectTimeout as well as the readTimeout options, however the JDK setConnectTimeout() API itself is ""fragile"" which is already mentioned [1] in Javadoc as well:

{code}
Some non-standard implmentation of this method may ignore the specified timeout. To see the connect timeout set, please call getConnectTimeout().
{code}

For example for the plain HTTP under Sun-JDK that's the class:

{code}
sun.net.www.protocol.http.HttpURLConnection
{code}

comming into the play which does a really odd way of supporting the timeouts by *duplicating* both the fields

{code}
private int connectTimeout;
private int readTimeout;
{code}

which are *already* declared by it's super-super class:

{code}
java.net.URLConnection
{code}

Other than that the connectTimeout simply didn't behave the way I expected, as setting it even to 1ms didn't bring any SocketTimeoutException or the like. So that at last I will provide only the readTimeout option called timeout.

I think this is the more important option the Camel users can benefit from, as what they really want to specify is how long they want to wait for an answer written into the http socket after the connection has been already established but not neccessarily how log the completion of TCP/IP socket connection would take. That's they want to provide a timeout for how long the WebService is expected to take time for writing into the socket *after* the connect. 

[1] http://docs.oracle.com/javase/6/docs/api/java/net/URLConnection.html#setConnectTimeout%28int%29 
bvahdat:1328821397:2012-02-10T05:03:17.495+0000:1328821397:2012-02-10T05:03:17.495+0000:Wiki is already updated as well.
davaleri:1332161920:2012-03-19T20:58:40.904+0000:1332161920:2012-03-19T20:58:40.904+0000:CAMEL-4279 calls for adding support for Camel's JSSE configuration utility to the Camel Spring WS component.  I see a clear route to get there; however, in working through the code to implement this feature, I noticed that CAMEL-4998 introduced some sketchy, in my opinion, code in its implementation.

The code subclasses some Spring classes to mix in the needed functionality; however, the way these subclasses are used can be problematic for two reasons:

The subclass org.apache.camel.component.spring.ws.SpringWebserviceProducer.CamelHttpsUrlConnectionMessageSender uses reflection to access private fields of its parent class.  This won't fly in the scenario where the code is running on a hardened VM where such trickery is usually disallowed for user code (although it is possible to grant an exception this Camel component).
The instanceof test used may identify an end-user's custom sub-class of the built-in MessageSender implementations are replace it with one of the custom Camel versions thus wiping out the end-user's intended configuration without warning.

The desired outcome, allow users to set the timeout, can be achieved using the decorator pattern.  Unfortunately, it is not a 100% clean decorator implementation because the methods we want to decorate are not defined in an interface class but in another class.  Regardless, it is still very possible to avoid the reflection calls.  One can create a decorator of HttpUrlConnectionMessageSender instances by subclassing HttpUrlConnectionMessageSender and then overriding all methods to pass through to a delegate while also introducing the tweak to the timeout setting as called for in CAMEL-4998.  All methods in HttpUrlConnectionMessageSender are public and intended for overriding and methods from HttpUrlConnectionMessageSender's super-class are not final, intended for overriding, and defined in an interface.

While the decorator approach satisfies the desire to make the timeout configurable, it might still clobber an end-user's customization from their MessageSender sub-class.  It would be great if it were possible to detect if the MessageSenders being decorated/replaced were introduced by default or if they were customized by the end user in some way; however, with the default behavior of Spring WS being configurable through properties files, Camel allowing the end-user to inject their own WebServiceTemplate instance, and the use of instanceof, I don't think we can cover all cases.  What I think we can do is follow the principal of least surprise with the decorator pattern (doesn't clobber the original MessageSender completely) and document that this occurs when the timeout or SSLContextParameters configuration options are used.

I'd be happy to refactor this portion of the code as part of CAMEL-4279 and add some logging to indicate what is going on if there are no other reasons that I am missing.
bvahdat:1332162903:2012-03-19T21:15:03.228+0000:1332162903:2012-03-19T21:15:03.228+0000:Feel free to adjust the code to better fit it in the context of CAMEL-4279."
0,CAMEL-4997,Improvement,Minor,"2.8.4, 2.9.0","2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-02-09 14:55:35+00:00,2012-02-12 10:51:42+00:00,"See
http://stackoverflow.com/questions/9192458/apache-camel-methodnotfoundexception-in-transform


Its a side-effect of CAMEL-4733","davsclaus:1329014884:2012-02-12T10:48:04.640+0000:1329014884:2012-02-12T10:48:04.640+0000:This is actually not a bug. The compiler picks the (Object) parameter. You would have to type cast to Class if you want to explicit chose that method.
I will improve Camel to detect the Class type for the Object parameter."
0,CAMEL-4996,Bug,Major,2.8.4,2.10.0,"
None
",Resolved,Fixed,2.10.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2012-02-09 03:31:22+00:00,2012-02-09 03:51:23+00:00,"The DigitalSignatureEndpoint has a clearHeaders option that is supposed to clear headers after a verify operation. However that is not working because the headers cleared are not the actual header values, but the name of the java String fields, which is irrelevant at runtime.


The default value of the clearHeaders should also be true, so that Camel does not leave debris in the Exchange after a verify operation.",hadrian:1328730683:2012-02-09T03:51:23.280+0000:1328730683:2012-02-09T03:51:23.280+0000:Fixed. There is no workaround available.
0,CAMEL-4995,Improvement,Major,2.8.4,3.0.0,"
None
",Resolved,Fixed,3.0.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2012-02-08 21:59:14+00:00,2019-07-28 08:36:43+00:00,"In ProcessorDefinition camel returns the NoOutputExpressionNode (as opposed to its parent) while constructing the AST.


The problem can only be noticed when such nodes are used within something like a ChoiceDefinition, in which case the parent (choice) is never returned, so there cannot be another when after something like dynamicRouter is used in a 'when'.


A fix is relatively easy for the Expression flavor of the DSL and I will commit a fix shortly, but the ExpressionClause flavor is a bit trickier. I am looking into a solution for that that does not require an api change.",
0,CAMEL-4994,Improvement,Minor,2.9.0,"2.9.2, 2.10.0","
None
",Resolved,Fixed,"2.9.2, 2.10.0",Claus Ibsen,alex hutter,0,0,2012-02-08 16:53:58+00:00,2012-03-04 12:57:10+00:00,"If the org.apache.camel.Consume annotation is used on a method that is not public (e.g. default visibility), then the following exception will be thrown every time a message is delivered to that consumer and the message will roll-back with the consumer never invoked.


2012-02-08 16:29:37,298 [Camel Thread 0 - JmsConsumer[paula.inprogress] WARN  org.apache.camel.component.jms.JmsMessageListenerContainer  - Execution of JMS message listener failed, and no ErrorHandler has been set.
org.apache.camel.RuntimeCamelException: java.lang.UnsupportedOperationException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:115)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:243)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.UnsupportedOperationException
	at java.util.Collections$UnmodifiableMap.put(Collections.java:1285)
	at org.apache.camel.component.bean.BeanInfo.introspect(BeanInfo.java:256)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:136)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:142)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:92)
	... 11 more


I appreacate that this not specifically a bug, so I am filing this as an improvement.  However this is a REALLY misleading error message.  A more specific error message would be greaty appreaceated and save a lot of time.  Thanks.","davsclaus:1330830034:2012-03-04T11:00:34.211+0000:1330830034:2012-03-04T11:00:34.211+0000:Can you post your @Consume example.

davsclaus:1330833008:2012-03-04T11:50:08.506+0000:1330833008:2012-03-04T11:50:08.506+0000:Okay I am improving the code to do pre validation when using @Consume, that the method is valid.
As well fixing the put call to the unmodifiable collection which was wrong."
0,CAMEL-4993,Improvement,Minor,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Joshua Watkins,0,0,2012-02-08 10:05:03+00:00,2012-06-02 12:16:50+00:00,"The cometd component has the ability to authenticate a connection with a custom SecurityPolicy.[1] This information can then be added to the cometd session for further calls. Unfortunately, session attributes aren't passed to the camel message for processing by endpoints and processors further down the line.  


1. http://cometd.org/documentation/2.x/howtos/authentication","jwatkins:1329709202:2012-02-20T11:40:02.917+0000:1329709202:2012-02-20T11:40:02.917+0000:Patch for session attributes in Cometd to be added at camel headers. This will enable support for downstream authorization of messages passed through the Cometd security policy.

This feature is disabled by default with a uri parameter to enable it. Additionally only  long, string, int, and double are supported as other message mediums may not support more. Currently, I just log an info message when an incompatible type is a session attribute. You may want to change this to be something else.
njiang:1329855024:2012-02-22T04:10:24.049+0000:1329855024:2012-02-22T04:10:24.049+0000:Applied the patch into trunk with thanks to Joshua, I also fixed some Checkstyle errors.

jwatkins:1335235187:2012-04-24T10:39:47.346+0000:1335235187:2012-04-24T10:39:47.346+0000:I noticed that I had made an error and not brought over a change from my branch into the patch. The initial version didn't pass the property to the binding. I have added a fix as well as more unit tests to cover this. Additionally, I have added support for booleans as values for the session headers.
jwatkins:1336465898:2012-05-08T16:31:38.343+0000:1336465898:2012-05-08T16:31:38.343+0000:I found an issue with the previous patch. Fixes and more tests attached in second patch.
njiang:1336531584:2012-05-09T10:46:24.433+0000:1336531584:2012-05-09T10:46:24.433+0000:@Joshua,

You can create another issue for it, incase we release camel 2.10.0.
I will go through your new patch when I get some time today.
jwatkins:1336532201:2012-05-09T10:56:41.184+0000:1336532201:2012-05-09T10:56:41.184+0000:Done - https://issues.apache.org/jira/browse/CAMEL-5263"
0,CAMEL-4992,New Feature,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,7,4,2012-02-08 09:07:03+00:00,2022-06-24 13:31:51+00:00,"Currently jackson for json is available as the generic <json> data format. We should @deprecated the <json> and let people use the specialized such as <xstream> or <jackson> so they chose the json engine of choice.


Then we can offer jackson specific options to be configured, like we have for xstream.


See nabble
http://camel.465427.n5.nabble.com/Custom-Jackson-ObjectMapper-tp5060579p5060579.html",davsclaus:1656048711:2022-06-24T13:31:51.334+0000:1656048711:2022-06-24T13:31:51.334+0000:This has been done
0,CAMEL-4991,Bug,Major,2.9.0,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Duplicate,"2.8.5, 2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-02-08 06:00:38+00:00,2012-02-11 12:19:34+00:00,"See test-case attached on ticket CAMEL-4484.
This is a new variation of that issue.",davsclaus:1328933973:2012-02-11T12:19:33.975+0000:1328933973:2012-02-11T12:19:33.975+0000:Duplicate of CAMEL-5000
0,CAMEL-4990,Improvement,Minor,2.9.0,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-02-08 02:13:19+00:00,2012-02-08 12:43:01+00:00,"The expression could has ""\r"", ""\n"" character at the begin or end.
We should trim the expression before parsing it.
Here is the mail thread[1] which talks about it.


[1]http://camel.465427.n5.nabble.com/Please-consider-to-trim-simple-expressions-before-parsing-tt5455143.html","davsclaus:1328648383:2012-02-08T04:59:43.218+0000:1328648383:2012-02-08T04:59:43.218+0000:Willem can you add a note about this change in the release notes?
njiang:1328676181:2012-02-08T12:43:01.728+0000:1328676181:2012-02-08T12:43:01.728+0000:Applied the patch into trunk, camel-2.9.x and camel-2.8.x branches."
0,CAMEL-4989,Bug,Major,"2.4.0, 2.5.0, 2.6.0, 2.7.0, 2.8.0, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Willem Jiang,0,0,2012-02-07 15:07:51+00:00,2012-02-08 01:26:27+00:00,"Here is the mail thread[1] which discuss about it.
[1]http://camel.465427.n5.nabble.com/Bindy-CSV-parser-uses-default-encoding-tp5456136p5456136.html","njiang:1328635587:2012-02-08T01:26:27.340+0000:1328635587:2012-02-08T01:26:27.340+0000:Applied patch into trunk, camel 2.9.x and camel 2.8.x branches."
0,CAMEL-4988,Bug,Major,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Diego,0,0,2012-02-07 14:08:39+00:00,2012-02-23 12:14:58+00:00,"If you don't use a simple expresion that falls back to the SimpleBackwardsCompatibleParser, the simple language doesn't seem to work. If I override the start and end token with an explicit definition of the simplelanguage everything works well.


  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean> 


It seems that org.apache.camel.language.simple.SimpleExpressionParser.SimpleExpressionParser(String) fails to create an expression because startToken and endToken are ""automagically"" changed for strange Strings. It seems that when exchange.getContext().resolveLanguage(""simple"") tries to resolve the languaje it doesn't use the default construtor and injects a strange start and end token in the constructor SimpleLanguage(String functionStartToken, String functionEndToken).","davsclaus:1328648438:2012-02-08T05:00:38.279+0000:1328648438:2012-02-08T05:00:38.279+0000:Can you provide more details what you problem is?
dcondevigo:1328658318:2012-02-08T07:45:18.954+0000:1328658318:2012-02-08T07:45:18.954+0000:The problem is that I upgraded my application to Camel 2.9.0 from Camel 2.8.0 and all the routes with simple expressions started to fail. All the other routes seem to work as usual, Camel is an great framework!

I debugged the application and the source of the problem seems to be in the simple expressions. The parsers allways fails (sometimes silently) because the start and end tokens are strange strings (like ""97830e4816280eb7"") instead of the usual strings ""${"", ""}"".

Debugging the application with a breakpoint in the SimpleLanguage constructor ""public SimpleLanguage(String functionStartToken, String functionEndToken)"" I found that Camel automatically replaces the standard tokens with these strange strings (I copy the stacktrace at the end of the comment). It seems that in the SimpleLanguage initialization the SpringInjector chooses the wrong constructor instead of the default one.

If I declare a bean with de SimpleLanguage an set explicitly the tokens everything works fine.

Thread [DefaultQuartzScheduler-camel-7_Worker-1] (Suspended (breakpoint at line 110 in SimpleLanguage))	
	SimpleLanguage.<init>(String, String) line: 110	
	NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method]	
	NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	
	DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	
	Constructor<T>.newInstance(Object...) line: 513	
	BeanUtils.instantiateClass(Constructor<T>, Object...) line: 126	
	CglibSubclassingInstantiationStrategy(SimpleInstantiationStrategy).instantiate(RootBeanDefinition, String, BeanFactory, Constructor<?>, Object[]) line: 108	
	ConstructorResolver.autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 280	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).autowireConstructor(String, RootBeanDefinition, Constructor[], Object[]) line: 1003	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBeanInstance(String, RootBeanDefinition, Object[]) line: 907	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 485	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 456	
	DefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(Class, int, boolean) line: 331	
	SpringInjector.newInstance(Class<T>) line: 39	
	DefaultLanguageResolver.resolveLanguage(String, CamelContext) line: 75	
	SpringCamelContext(DefaultCamelContext).resolveLanguage(String) line: 951	
	SimpleBuilder.createExpression(Exchange) line: 86	
	SimpleBuilder.evaluate(Exchange, Class<T>) line: 80	
	Splitter.createProcessorExchangePairs(Exchange) line: 102	
	Splitter(MulticastProcessor).process(Exchange, AsyncCallback) line: 208	
	Splitter.process(Exchange, AsyncCallback) line: 97	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	TraceInterceptor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	TraceInterceptor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	TraceInterceptor.process(Exchange, AsyncCallback) line: 91	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	DefaultErrorHandler(RedeliveryErrorHandler).processErrorHandler(Exchange, AsyncCallback, RedeliveryErrorHandler$RedeliveryData) line: 322	
	DefaultErrorHandler(RedeliveryErrorHandler).process(Exchange, AsyncCallback) line: 213	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	DefaultChannel.process(Exchange, AsyncCallback) line: 303	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	Pipeline.process(Exchange, Exchange, AsyncCallback, Iterator<Processor>, AsyncProcessor) line: 117	
	Pipeline.process(Exchange, AsyncCallback) line: 80	
	RouteContextProcessor.processNext(Exchange, AsyncCallback) line: 45	
	RouteContextProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	UnitOfWorkProcessor.processAsync(Exchange, AsyncCallback, UnitOfWork) line: 150	
	UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 117	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	InstrumentationProcessor(DelegateAsyncProcessor).processNext(Exchange, AsyncCallback) line: 99	
	InstrumentationProcessor(DelegateAsyncProcessor).process(Exchange, AsyncCallback) line: 90	
	InstrumentationProcessor.process(Exchange, AsyncCallback) line: 71	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange, AsyncCallback) line: 73	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange, AsyncCallback) line: 44	
	AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 99	
	RoundRobinLoadBalancer(QueueLoadBalancer).process(Exchange) line: 71	
	QuartzEndpoint.onJobExecute(JobExecutionContext) line: 112	
	CamelJob.execute(JobExecutionContext) line: 54	
	JobRunShell.run() line: 216	
	SimpleThreadPool$WorkerThread.run() line: 549	

davsclaus:1329015206:2012-02-12T10:53:26.364+0000:1329015206:2012-02-12T10:53:26.364+0000:Can you paste your spring XML file so its easier for us to get started creating a test case that reproduces the issue you talk about.
dcondevigo:1329275780:2012-02-15T11:16:20.422+0000:1329275780:2012-02-15T11:16:20.422+0000:It seems that if you have a bean of java.lang.String type, it uses it to autowire the start and end token of the SimpleLanguage. If you have a bean of this type you have to define a bean to configure SimpleLanguage to keep routes work as usual. For example this file works:

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 
	  
  <bean id=""simple"" class=""org.apache.camel.language.simple.SimpleLanguage"">
      <constructor-arg name=""functionStartToken"" value=""${""/>
      <constructor-arg name=""functionEndToken"" value=""}""/>
  </bean>	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>

But this one doesn't work (it prints ""[${body}]"" instead of ""[Text]"")

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:p=""http://www.springframework.org/schema/p"" xmlns:camel=""http://camel.apache.org/schema/spring""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
  <bean id=""string"" class=""java.lang.String"" >
		<constructor-arg value=""Some text""/>
  </bean> 	  
    
  <camelContext xmlns=""http://camel.apache.org/schema/spring"" useMDCLogging=""true"">
    <route>
      <from uri=""quartz://grupo/timer01?cron=*/10+*+*+*+*+?""/>
      <transform><constant>Text</constant></transform>
      <transform><simple>[${body}]</simple></transform>
      <to uri=""stream:out""/>
    </route>
  </camelContext>
</beans>
davsclaus:1329965888:2012-02-23T10:58:08.754+0000:1329965888:2012-02-23T10:58:08.754+0000:How often do you have a <bean> of type String? Whats the point? I have never seen the need for that.
davsclaus:1329967991:2012-02-23T11:33:11.507+0000:1329967991:2012-02-23T11:33:11.507+0000:But yeah I think autowiring by type is bad practice. Lets see if we can change the SpringInjector to only auto wire by name instead.
davsclaus:1329968241:2012-02-23T11:37:21.477+0000:1329968241:2012-02-23T11:37:21.477+0000:Related to CAMEL-1811"
0,CAMEL-4987,New Feature,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,David Valeri,David Valeri,3,2,2012-02-06 16:15:09+00:00,2012-04-16 18:39:21+00:00,"Camel Spring Test support allows one to unit/integration test Camel routes bootstrapped using the Spring DSL or using other DSLs but wired together using Spring.  Many Spring users benefit from the features of Spring Test's declarative testing capabilities.  CamelTestSupport provides some overlap in features with those from Spring Test; however, the conventions are different.


This new feature would provide all of the features of CamelTestSupport using annotations that are compatible with the Spring Test framework.  I envision that this style of declarative test development may also be useful outside of Spring Test.  Eventual support of declarative test configuration in plain Camel tests without Spring is a long term option.


This approach to unit testing is not focused on the testing of Camel itself, but on the end users who are building Spring driven applications incorporating Camel.","davaleri:1330613711:2012-03-01T22:55:11.273+0000:1330613711:2012-03-01T22:55:11.273+0000:Code and documentation updates complete.
muellerc:1332382610:2012-03-22T10:16:50.104+0000:1332382610:2012-03-22T10:16:50.104+0000:This issue blocks CAMEL-4778 which is more requested by our users
muellerc:1332476724:2012-03-23T12:25:24.226+0000:1332476724:2012-03-23T12:25:24.226+0000:This patch can be use to revert my revert (for later inclusion of this functionality).
muellerc:1332664143:2012-03-25T16:29:03.830+0000:1332664143:2012-03-25T16:29:03.830+0000:I applied Davids patch again (reverted my revert). camel-test-spring will be always compiled with Spring 3.1. But it's still possible to use it with Spring 3.0.
davaleri:1332738288:2012-03-26T13:04:48.564+0000:1332738288:2012-03-26T13:04:48.564+0000:Re-opening again to improve support for Spring Test 3.1+ features."
0,CAMEL-4986,Bug,Minor,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Babak Vahdat,Erik Bakker,0,0,2012-02-06 13:02:48+00:00,2012-02-07 16:07:58+00:00,"ManagedPerformanceCounterMBean does not extend ManagedCounterMBean, while ManagedPerformanceCounter does extend ManagedCounter.","davsclaus:1328575608:2012-02-07T08:46:48.618+0000:1328575608:2012-02-07T08:46:48.618+0000:Babak, you got time to fix this? Seems easy, although running the unit tests on camel-core would be good to ensure the JMX tests still work as expected.
bvahdat:1328601902:2012-02-07T16:05:02.561+0000:1328602077:2012-02-07T16:07:57.992+0000:I verified the change by running all camel-core tests where they did all pass on trunk, however on the 2.9.x branch I got one failed test which has nothing to do with this change:

{code}
Failed tests:
  testShutdownGraceful(org.apache.camel.impl.PendingExchangesTwoRouteShutdownGracefulTest): mock://bar Received message count. Expected: <1> but was: <2>

Tests run: 4033, Failures: 1, Errors: 0, Skipped: 0
{code}"
0,CAMEL-4985,Bug,Major,"2.8.4, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Christian Schneider,Christian Schneider,0,0,2012-02-06 10:36:47+00:00,2012-02-10 05:25:02+00:00,When you try to run the spring security example and access it from a browser you get 404. I debugged into it and the reason is that the camel context does not attach to the camel http servlet.,
0,CAMEL-4984,Bug,Minor,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Marcus Abels,0,0,2012-02-06 09:32:08+00:00,2012-02-27 09:00:20+00:00,"HttpProducer does not send HTTP header if header value from camel was an empty string.


This is because ObjectHelper.createIterator(headerValue, null) will produce an empty iteration if headerValue is an empty string!","falkmarcus:1328494307:2012-02-06T10:11:47.440+0000:1328494307:2012-02-06T10:11:47.440+0000:There is a workarround: you can pass a list with an empty string as header value and than camel-http will send this header
davsclaus:1330071537:2012-02-24T16:18:57.226+0000:1330071537:2012-02-24T16:18:57.226+0000:I do not know when such a use-case is needed to send empty values as HTTP headers. When do you do that?
falkmarcus:1330303707:2012-02-27T08:48:27.242+0000:1330303707:2012-02-27T08:48:27.242+0000:Actually, the backend service which we are calling via HTTP requires that all required headers are set, even if there are no value for it. 

Also to me such a policy seems to be awkward. 


davsclaus:1330304419:2012-02-27T09:00:19.938+0000:1330304419:2012-02-27T09:00:19.938+0000:Well I could possible see a use-case if you want to reset a cache http header or the likes. Anyway its fixed now."
0,CAMEL-4983,Bug,Major,2.9.0,,"
None
",Closed,Duplicate,None,Unassigned,Thomas Letsch,0,0,2012-02-06 09:06:54+00:00,2012-02-08 16:29:29+00:00,"The bindy csv component uses the default encoding when importing a file.


In Detail:
Class org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat Line 115:



InputStreamReader in = new InputStreamReader(inputStream);
+ InputStreamReader in = new InputStreamReader(inputStream, IOConverter.getCharsetName(exchange));



the marshal method needs that fix probably too. This was already done for the standard CSV component:
https://issues.apache.org/jira/browse/CAMEL-3483",thomasle:1328689769:2012-02-08T16:29:29.277+0000:1328689769:2012-02-08T16:29:29.277+0000:Duplicate to https://issues.apache.org/jira/browse/CAMEL-4989
0,CAMEL-4982,Bug,Minor,2.9.0,,"
None
",Closed,Not A Problem,None,Unassigned,Edward Nickson,0,0,2012-02-05 23:44:48+00:00,2012-02-07 22:53:22+00:00,"If UNC paths are used to map to jar files on the classpath, the DefaultPackageScanResolver resolves the UNC path to an invalid value. This makes it impossible map using UNC paths.


The method DefaultPackageScanResolver.find(PackageScanFilter test, String packageName, ClassLoader loader, Set<Class<?>> classes) will attempt to convert the library path resulting in an incorrect path: urlPath = new URI(url.getFile()).getPath(); The first path element appears stripped from the path. If the path is specified using UNC this conversion should be skipped.


Ex. before conversion: jar:file://versioncontrol/D/version_control/Test/lib/activemq-camel-5.4.2.jar!/org/apache/activemq/camel/converter/


    after conversion:  java.io.FileNotFoundException: \D\version_control\Test\lib\activemq-camel-5.4.2.jar (The system cannot find the path specified)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:106)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:299)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:209)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:137)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:114)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:406)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:42)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:56)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:1635)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:903)
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:986)
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverterRegistry(DefaultCamelContext.java:1003)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:1963)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1437)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1349)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:176)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1317)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:221)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:115)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at com.wcg.llas.integration.SingletonServiceCallerFactory$1.call(SingletonServiceCallerFactory.java:68)
	at com.wcg.llas.integration.SingletonServiceCallerFactory$1.call(SingletonServiceCallerFactory.java:51)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)","davsclaus:1328481396:2012-02-06T06:36:36.172+0000:1328481396:2012-02-06T06:36:36.172+0000:Have you upgrade Camel manually in AMQ 5.4.2? As AMQ 5.4.2 does not officially support Camel 2.9.0.

You can fix AMQ yourself by applying the patch from this ticket
https://issues.apache.org/jira/browse/AMQ-3458
enickson:1328554971:2012-02-07T03:02:51.128+0000:1328554971:2012-02-07T03:02:51.128+0000:I tested first using AMQ 5.4.2 and then AMQ 5.5.1 with Camel 2.8.3. I did not test with 2.9, but since I can see exactly where the issue is in the code and I can see that this class is unchanged in 2.9, I am pretty sure this issue will also exist when testing with 2.9.
davsclaus:1328571199:2012-02-07T07:33:19.828+0000:1328571199:2012-02-07T07:33:19.828+0000:Its fixed by AMQ-3458, where a file in the META-INF is changed in the activemq-camel JAR. Do the same patch on your old AMQ 5.4.2 JAR and it should work with the newer Camel releases.
enickson:1328626402:2012-02-07T22:53:22.605+0000:1328626402:2012-02-07T22:53:22.605+0000:I have tested with ActiveMQ patch AMQ-3458 applied, and it does rectify the problem. Once ActiveMQ 5.6.0 is released I will upgrade to that version. Thanks!"
0,CAMEL-4951,Improvement,Minor,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Bilgin Ismet Ibryam,0,0,2012-01-28 14:16:15+00:00,2013-05-02 02:29:49+00:00,I need aws 1.3 in order to add dynamodb support to Camel.,"muellerc:1327745584:2012-01-28T18:13:04.238+0000:1327745584:2012-01-28T18:13:04.238+0000:The next SMX4 bundle release will include this OSGI bundle. At present it's only available as SNAPSHOT dependency.
bibryam:1327827432:2012-01-29T16:57:12.269+0000:1327827432:2012-01-29T16:57:12.269+0000:Thanks Christian.
When it is available the update should be straight forward, there are no failing tests
davsclaus:1328421781:2012-02-05T14:03:01.965+0000:1328421781:2012-02-05T14:03:01.965+0000:Upgraded from 1.2.x to 1.3.0"
0,CAMEL-4950,Improvement,Major,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,1,1,2012-01-28 13:55:08+00:00,2013-05-02 02:29:49+00:00,"Redelivery error handler, will keep attempting redeliveries, also during graceful shutdown.


We should improve this, so it detects the shutdown action, and breaks out earlier.


See CAMEL-4949","davsclaus:1327806462:2012-01-29T11:07:42.429+0000:1327806462:2012-01-29T11:07:42.429+0000:There is an API change in ShutdownStrategy, so lets keep this for 2.10"
0,CAMEL-4949,Bug,Major,2.9.0,2.10.0,"

shutdown

",Resolved,Fixed,2.10.0,Claus Ibsen,Dragisa Krsmanovic,2,1,2012-01-27 21:45:19+00:00,2013-05-02 02:29:49+00:00,"Our route looks like this:



from(""activemq:start"")
   .to(""direct:dir"")




On shutdown, if there is a message in the direct: route, Camel will wait indefinitely for the message to finish. Regardless of the shutdown strategy.


See attached unit test.","davsclaus:1327729389:2012-01-28T13:43:09.673+0000:1327729389:2012-01-28T13:43:09.673+0000:You have redelivery happening forever, this is really not a good idea.

There is already JIRA ticket to have redelivery error handler support breaking out redelivery attempts during graceful shutdown.
davsclaus:1327734580:2012-01-28T15:09:40.483+0000:1327734580:2012-01-28T15:09:40.483+0000:I created a new ticket as the other JIRA ticket is to interrupt/cancel delayed redeliveries, which is a bit harder to do.
dragisak:1327778849:2012-01-29T03:27:29.496+0000:1327778849:2012-01-29T03:27:29.496+0000:As shown in the unit test, SedaConsumer does this correctly. It's only the JMS that keeps retrying even when the shutdown is in progress. If your direct route is set to retry for a long time (exponential backoff, many redeliveries etc.), system shutdown can take forever. Infinite redelivery is set here just as an example. 
davsclaus:1327806514:2012-01-29T11:08:34.299+0000:1327806514:2012-01-29T11:08:34.299+0000:Thanks for reporting. Is fixed by CAMEL-4950."
0,CAMEL-4948,Bug,Minor,2.8.1,2.10.0,"
None
",Resolved,Not A Problem,2.10.0,Claus Ibsen,David Cifer,0,0,2012-01-27 16:23:15+00:00,2012-02-24 15:51:44+00:00,"Maybe this is two bug and maybe I miss understand something, but here is the issue.


I've created a test. A route, which reads a JMS transacted durable, but every fifth message is thrown back by an exception.


For example I send 10 message into the durrable, than I generate 2 exception. One for the fifth one and one for the nineth (because the fifth one going to be resend as transaction failed).


Here is the route:
from(""jms:topic:test2?clientId=testClient&durableSubscriptionName=testSubs&transacted=true"")
                .log(""Processign from durable: ${body}"").delay(100)
                .process(new ExceptionGenerator())
                .log(""Retrieved from durable: ${body}"").to(""mock:durable"");


Code of the Exception generator:
public void process(Exchange arg0) throws Exception {
      int i = counter.incrementAndGet();
      if (i % 5 == 0) 

{             
        throw new IllegalArgumentException(""Every fifth message is illegal: "" + arg0.getIn().getBody());
      }

    }


The issue, what I had is that the first message (the fifth) is rolled back just nice. But after that all message simply lost.
This is I think the reason that since 2.8.x you have to use CACHE_NONE otherwise you mess up the transaction cache.


Here is the second part of the problem:
The whole test works just fine under 2.7.5
But to make it start above that is a configuration nightmare. For example clientId and transacted options in the route definition cannot appear together.
To make it work above 2.7.5 You have to add manually to the connection configuration:


    ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ACTIVE_MQ_HOST);
    connectionFactory.setClientID(""testClient""); // <-- This is necessary above 2.7.5 meaning 2.8.x. Under 2.8.x so example 2.7.5 will break configuration
    ctx.addComponent(""activemq"", ActiveMQComponent.activeMQComponent(ACTIVE_MQ_HOST));


Summary:
Above 2.7.5 clientId and transacted cannot appear in the same durable specification. Which makes configuration brake backward compatibilty. It has to be configured on connection factory level, which means I have to create a connectionfactory for each durable endpoint.


Above 2.7.5 only the first transaction got rolled back. Upcomming failiures got lost.","edvicif:1327659291:2012-01-27T18:14:51.835+0000:1327659291:2012-01-27T18:14:51.835+0000:Example project to experiment
edvicif:1327659507:2012-01-27T18:18:27.504+0000:1327659581:2012-01-27T18:19:41.593+0000:Since the entry I had additional discoveries. Basically transaction handling above 2.8.x is simply colapsed. I decided to restart the ActiveMQ instance and it sorted out the problem. However I can conform that whenever I switched back to 2.7.5 previously the ActiveMQ restart it begin to work.
But I'm affraid the transaction part of the issue maybe become un-reproducable. Maybe it can be handled with strict configuration both on ActiveMQ and Camel side.

Still the configuration that clientID above 2.8.x has to be set on connection factory level is an issue. I lover the priority.


edvicif:1327659617:2012-01-27T18:20:17.324+0000:1327659617:2012-01-27T18:20:17.324+0000:Changing priority as transaction issue may become unreproducable.
edvicif:1327660863:2012-01-27T18:41:03.711+0000:1327660863:2012-01-27T18:41:03.711+0000:I changed my mind. I was able to reproduce the issue.

I've created a new route, which generates an exception, the same way as above. I made the previous queue to pass the elements at the end of the route.
I've run the test twice and again I begin to lose messages. This time activemq restart didn't sorted the problem.
edvicif:1327661608:2012-01-27T18:53:28.100+0000:1327661608:2012-01-27T18:53:28.100+0000:Here is the example which works just fine on 2.7.5 but collapse 2.8.0
edvicif:1327914272:2012-01-30T17:04:32.001+0000:1327914272:2012-01-30T17:04:32.001+0000:The transaction part of the issue can be removed. I found the missing messages on the ActiveMQ dead letter queue. Although it is a bit large step between 2.7.5 and 2.8.0 that from now on messages by default end on the dead letter channel.

But clientId configuration still open. The problem is worse when I begin to use spring distributed transaction. The connections messed up in Camel Context and I basically cannot connect to the same ActiveMQ multiple times. The clientId is defined in the ActiveMQConnectionFactory, but it overwrites other JMSconnections as well. So if I want to use producer to send messages it will break, that clientID already used. This is true even if I add two component. jms and activemq with different connectionfactories. These two component will use overwite each other. In javaDSL they behave differently.
davsclaus:1328481761:2012-02-06T06:42:41.338+0000:1328481761:2012-02-06T06:42:41.338+0000:Its better to ask first on the @user mailing list for help, instead of creating a JIRA ticket first.

This is what we say on the getting help page at:
http://camel.apache.org/support
edvicif:1328511136:2012-02-06T14:52:16.550+0000:1328511136:2012-02-06T14:52:16.550+0000:I've checked the release notes and I wasn't able to find anything that transation policy default changed. Although I agree that the new behaviour is lot more sense.

Still I think that jms context some how mixed up worth an investigation. I've deleted the test scenario. But durring the week I try to put it together again and post it here a reproducable scenario. If unable to do it I'll close down this personaly and say sorry in the comment ;)
"
0,CAMEL-4947,Bug,Minor,2.9.0,"2.8.4, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.4, 2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-27 11:48:09+00:00,2012-01-27 13:19:32+00:00,Reported on the user forum,"muellerc:1327636851:2012-01-27T12:00:51.536+0000:1327636851:2012-01-27T12:00:51.536+0000:I can confirm this. Yesterday I tried a few different configurations, but it didn't work.

{code:xml}
    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""direct:start"" />
            <delay>
            	<method bean=""delayer"" method=""sendAtTime""/> 
            	<to uri=""mock:end""/>
            </delay>
        </route>
    </camelContext>
{code}"
0,CAMEL-4946,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-26 14:33:48+00:00,2012-01-26 18:43:50+00:00,"Currently its harder for tooling such as JConsole, Camel Karaf Shell or others to gather performance statistics of a CamelContext and its routes, as you will have to use the JMX API and loop each route, and gather processors, and associate the processors with the route etc. And then use the fine grained attributes on the ManagedProcessorMBean to get the performance statistics.


This is a bit cumbersome, and also very chatty API calls, especially if the JMX is remoting, and it makes it slower to gather stats.


As we got XML outputs for bulk of data such as routes etc, we should have a single API call to get the full stats for the entire CamelContext, or per route basis. Using XML as return type, makes it much easier for any kind of tooling and language to use the data. Instead of tying to use the JMX OpenMBean structure which is Java only based.


SIDENOTE START:
For Camel 3.0 we should offer a JSON output with a REST based management API as well. But that would require a possible new camel-core-management component which as a JSON library in use such as Jackson.
SIDENOTE END:","preben:1327571748:2012-01-26T17:55:48.768+0000:1327571748:2012-01-26T17:55:48.768+0000:Regarding the Sidenode have a look at Jolokia http://www.jolokia.org/
It offers remote Json jmx stats via a nice query interface.
One would not only be able to query Camel, but every managed bean in the jvm eg. ActiveMQ. 
davsclaus:1327574630:2012-01-26T18:43:50.625+0000:1327574630:2012-01-26T18:43:50.625+0000:Thanks for sharing this Preben. Jolokia looks really great."
0,CAMEL-4945,Bug,Major,"2.8.3, 2.9.0","2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Willem Jiang,Stefan Boller,0,0,2012-01-26 13:38:44+00:00,2012-02-01 09:00:20+00:00,"If the CXF Producer of Camel is called asynchronously for a WS-RM endpoint, Camel receives multiple final events, like ExchangeCompletedEvent and ExchangeFailedEvent. This leads also to negative JMX counters for inflight exchanges. The root cause is a bug in the handleResponse and handleException methods of org.apache.camel.component.cxf.CxfClientCallback. In those methods, which are called for WS-RM communication, although it is oneway, the done method of camelAsyncCallback is called also for oneway exchanges. However this callback method is already called in the process method of org.apache.camel.component.cxf.CxfProducer for oneway exchanges, which causes the mentioned effects.
The following changes in org.apache.camel.component.cxf.CxfClientCallback can fix this:
    public void handleResponse(Map<String, Object> ctx, Object[] res) {
        try 

{
            super.handleResponse(ctx, res);            
        }

 finally {
            // bind the CXF response to Camel exchange
            if (!boi.getOperationInfo().isOneWay()) 

{
                // copy the InMessage header to OutMessage header
                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
				camelAsyncCallback.done(false);
            }


            if (LOG.isDebugEnabled()) {


                LOG.debug(""{} calling handleResponse"", Thread.currentThread().getName());


            }


        }


    }





    public void handleException(Map<String, Object> ctx, Throwable ex) {


        try {
            super.handleException(ctx, ex);
            camelExchange.setException(ex);
        } finally {


            // copy the context information


            if (!boi.getOperationInfo().isOneWay()) {                // copy the InMessage header to OutMessage header                camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());                binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);				camelAsyncCallback.done(false);            }

            if (LOG.isDebugEnabled()) {
                LOG.debug(""{} calling handleException"", Thread.currentThread().getName());
            }
        }
    }","davsclaus:1327642326:2012-01-27T13:32:06.480+0000:1327642326:2012-01-27T13:32:06.480+0000:Thanks for reporting.

Is it possible for you to either create a
- patch with a proposed fix
- unit test demonstrating the issue

ASF requires that any contributed code is attached as files to a JIRA ticket and where you click [x] in grant license to Apache.
If not then we cannot accept your contribution.
stefanbo72:1327890652:2012-01-30T10:30:52.589+0000:1327890652:2012-01-30T10:30:52.589+0000:Proposed patch
davsclaus:1327901188:2012-01-30T13:26:28.490+0000:1327901188:2012-01-30T13:26:28.490+0000:Thanks for the patch.

Would it be possible with an unit test as well? Or can you point to an existing unit-test in camel-cxf that would test your patch?
njiang:1328058005:2012-02-01T09:00:05.114+0000:1328058005:2012-02-01T09:00:05.114+0000:Applied patch into trunk, camel-2.9.x and camel-2.8.x branches."
0,CAMEL-4944,Improvement,Minor,Future,2.10.0,"

gson
json
marshaling

",Resolved,Fixed,2.10.0,Claus Ibsen,Denis Bardadym,0,0,2012-01-26 08:55:53+00:00,2012-01-28 17:53:49+00:00,Added support of fresh version Google Gson.,"btd:1327539415:2012-01-26T08:56:55.200+0000:1327539415:2012-01-26T08:56:55.200+0000:Patch for Gson support
btd:1327540116:2012-01-26T09:08:36.236+0000:1327540116:2012-01-26T09:08:36.236+0000:The same but with ASF
davsclaus:1327650766:2012-01-27T15:52:46.802+0000:1327650766:2012-01-27T15:52:46.802+0000:Thanks, this seems nice. gson seems like a nice project as well.


davsclaus:1327724726:2012-01-28T12:25:26.286+0000:1327724726:2012-01-28T12:25:26.286+0000:Denis thanks for your contribution.

I have added the osgi features, and updated the json data format wiki page to mention gson as well.
btd:1327744429:2012-01-28T17:53:49.342+0000:1327744429:2012-01-28T17:53:49.342+0000:Thanks."
0,CAMEL-4943,Task,Minor,None,None,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-26 08:27:44+00:00,2012-01-26 08:56:00+00:00,"Apache Shiro 1.2.0 has been released, and its an osgi bundle now.",
0,CAMEL-4942,Bug,Major,2.8.3,"2.8.5, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.5, 2.9.1, 2.10.0",Babak Vahdat,Christian Müller,0,0,2012-01-26 06:15:19+00:00,2012-01-27 20:13:33+00:00,"exchange.getIn().getBody(Foo.class);




should return a Foo instance or null, if no suitable type converter is available. The java doc says: ""return the body of the message as the specified type, or <tt>null</tt> if not possible to convert""


If Foo is an Jaxb object model, this method call:



throws an org.xml.sax.SAXParseException if the body content is a string
throws a javax.xml.bind.UnmarshalException if the body content is another Jaxb model object



Please have a look on the attached sample eclipse project.","muellerc:1327529792:2012-01-26T06:16:32.121+0000:1327529792:2012-01-26T06:16:32.121+0000:Test which shows the issue
bvahdat:1327566543:2012-01-26T16:29:03.175+0000:1327566543:2012-01-26T16:29:03.175+0000:Following my findings regarding the problem you've reported by this ticket:

- The problem raises *even if* you would use the trunk code as your Camel dependency, that's version 2.10-SNAPSHOT
- If you skip out your declared dependency to camel-jaxb then *ALL* of your tests would pass!
- The tests would also *ALL* pass if you would instead do
{code}
exchange.getContext().getTypeConverter().convertTo(Foo.class, exchange.getIn());
{code}

- IMHO the bug is the way the method

{code}
org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(Class<T> type, Exchange exchange, Object value)
{code}

Has been implemented on line 90 & 91
 
{code}
if (isJaxbType(type)) {
  return unmarshall(type, exchange, value);
{code} 

Which doesn't take into account if the class of the *value* object is JAXB complaint as well, that's isJaxbType(value.getClass())

Notes:
- IMHO we should better skip 2.6.0 as a Affects Version by this ticket, as that version is not supported anymore!
- As I'm a newbie, let's see what others (Claus?) think about this behaviour.
- In the case I'm *not* wrong, we should better backport the fix both to the 2.8.x & 2.9.x branches.

All in one the workaround solution is to avoid the FallbackTypeConverter be enlisted into the TypeConverterRegistry, for example in that you skip the dependency to camel-jaxb because of:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-jaxb/src/main/resources/META-INF/services/org/apache/camel/FallbackTypeConverter

muellerc:1327569842:2012-01-26T17:24:02.285+0000:1327569842:2012-01-26T17:24:02.285+0000:Hi Babak!

Thanks for looking into this issue (I'm too busy at the moment)... :-(
This issue is not urgent for us, because our workaround at the moment looks like below:
{code}
Object body = exchange.getIn().getBody();
if (body instanceof Foo) {
  // process Foo
} else {
  // process Bar
}
{code}

But in my opinion it's a bug.
+1 for for fixing this in 2.10, 2.9 and 2.8.

Best,
Christian
bvahdat:1327586102:2012-01-26T21:55:02.200+0000:1327586102:2012-01-26T21:55:02.200+0000:I committed a patch into the trunk which I will double check using your provided test as soon as it reaches the snapshot repo.
bvahdat:1327623876:2012-01-27T08:24:36.364+0000:1327623876:2012-01-27T08:24:36.364+0000:I added your provided test route (FallbackTypeConverterDoesNotThrowExceptionTest) which verifies the fix.
muellerc:1327636592:2012-01-27T11:56:32.627+0000:1327636592:2012-01-27T11:56:32.627+0000:Thank you Babak! I will be the sponsor for your beer the next time we meet. :-)
muellerc:1327637420:2012-01-27T12:10:20.722+0000:1327637420:2012-01-27T12:10:20.722+0000:I think the fix version for the 2.8.x branch has to be 2.8.5, because 2.8.4 is already in vote...
bvahdat:1327638407:2012-01-27T12:26:47.619+0000:1327638407:2012-01-27T12:26:47.619+0000:Yeah you're right but I intended to do it the same way as CAMEL-4947 as the vote has not passed yet.

I see that the overhead for a new 2.8.4 release would be huge to be done by the release manager (Hadrian) but IMHO these two fixes are *really* important. I wait to see how the vote will end up and will do 2.8.4 => 2.8.5 change if it would pass!
muellerc:1327650359:2012-01-27T15:45:59.691+0000:1327650359:2012-01-27T15:45:59.691+0000:I don't think this issue is really urgent because:
- it exists at least since release 2.6.0
- our users has workarounds for this

So, let's fix it in 2.8.5 if there is no other reason to build a new release version for 2.8.4...
bvahdat:1327651406:2012-01-27T16:03:26.096+0000:1327651406:2012-01-27T16:03:26.096+0000:Did change the Fix Version/s as you recommended.
bvahdat:1327666413:2012-01-27T20:13:33.536+0000:1327666413:2012-01-27T20:13:33.536+0000:Back-ported to both 2.8.x & 2.9.x branches as well."
0,CAMEL-4941,Bug,Minor,2.9.0,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Raúl Kripalani,Raúl Kripalani,0,0,2012-01-25 18:37:01+00:00,2012-01-27 13:41:25+00:00,"While unit testing the new camel-mongodb component, I realised that my consumer's doStop() method is called even if the route had autoStart=false and was never started. 


This occurs because when autoStartup=false, and the route has never been started manually, the RouteService's state flags are all false. 


During the cascading stopping routine, the ServiceHelper.isStopped() method is used to determine whether a service should be stopped or not. Since this method only checks the stopped and stopping flags, it returns false which indicates to the caller that the service is either started or suspended.


The stop routine will then proceed to call doStop on the service, which is erroneous.


To fix this, I propose to add the following new logic to the ServiceHelper.isStopped() method:



            // if none of the flags is true, consider that the service is uninitialized, equating this status to stopped
            if (!(service.isStarted() || service.isStarting() || 
                    service.isStopped() || service.isStopping() || 
                    service.isSuspended() || service.isSuspending())) 
            {
                return true;
            }","raulvk:1327488719:2012-01-25T18:51:59.291+0000:1327488719:2012-01-25T18:51:59.291+0000:Patch attached.
davsclaus:1327642103:2012-01-27T13:28:23.069+0000:1327642103:2012-01-27T13:28:23.069+0000:You should build your components so they are resilient for doStop calls.

For example when Camel is shutting down it will stop and shutdown all its services, routes, components, and whatnot.
davsclaus:1327642245:2012-01-27T13:30:45.232+0000:1327642425:2012-01-27T13:33:45.758+0000:We should not change behavior of this. This has been the behavior always with Camel.
davsclaus:1327642885:2012-01-27T13:41:25.085+0000:1327642885:2012-01-27T13:41:25.085+0000:I have polished the javadoc to explain the behavior of the doStop method."
0,CAMEL-4940,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-25 07:43:37+00:00,2012-01-25 10:13:01+00:00,"We should ensure the Camel maven archetypes have a pre configured camel-test kit appropriate to its type: spring, java, blueprint etc.
Likewise we should have a src/test/java and src/test/resources directory out of the box as well. So the project is all setup.",
0,CAMEL-4939,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,2,2012-01-25 05:53:27+00:00,2012-05-25 13:17:39+00:00,"See nabble
http://camel.465427.n5.nabble.com/DISCUSS-Add-camel-test-spring-component-tp5281207p5281207.html


This allows camel-test to be plain Java based without dragging in Spring JARs.
And for people using Spring, they can use the new camel-test-spring component.","davsclaus:1327442768:2012-01-25T06:06:08.462+0000:1327442768:2012-01-25T06:06:08.462+0000:camel-test
{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Test 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ camel-test ---
[INFO] org.apache.camel:camel-test:bundle:2.10-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.10-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] +- junit:junit:jar:4.8.1:compile
[INFO] \- org.slf4j:slf4j-log4j12:jar:1.6.1:test
[INFO]    \- log4j:log4j:jar:1.2.16:test
{code}




camel-test-spring
{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring :: Test 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ camel-spring-test ---
[INFO] org.apache.camel:camel-spring-test:bundle:2.10-SNAPSHOT
[INFO] +- org.apache.camel:camel-test:jar:2.10-SNAPSHOT:compile
[INFO] |  +- org.apache.camel:camel-core:jar:2.10-SNAPSHOT:compile
[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] |  \- junit:junit:jar:4.8.1:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.10-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-context:jar:3.0.7.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-beans:jar:3.0.7.RELEASE:compile
[INFO] |  |  +- org.springframework:spring-core:jar:3.0.7.RELEASE:compile
[INFO] |  |  |  \- commons-logging:commons-logging:jar:1.1.1:compile
[INFO] |  |  +- org.springframework:spring-expression:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- org.springframework:spring-asm:jar:3.0.7.RELEASE:compile
[INFO] |  +- org.springframework:spring-aop:jar:3.0.7.RELEASE:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  \- org.springframework:spring-tx:jar:3.0.7.RELEASE:compile
[INFO] \- org.slf4j:slf4j-log4j12:jar:1.6.1:test
[INFO]    \- log4j:log4j:jar:1.2.16:test
{code}
grexe:1337922579:2012-05-25T13:09:39.790+0000:1337922579:2012-05-25T13:09:39.790+0000:I want to use the CamelSpringJUnit4ClassRunner, as mentioned in the linked mailing list thread.
Sadly, the new camel-test-spring.jar is nowhere to be found and not included in the latest GA release 2.9.2, and the Runner class is not available (anymore?).
Could you please clarify what happened to it and if there's a new test runner to use with Spring?
davsclaus:1337923059:2012-05-25T13:17:39.179+0000:1337923059:2012-05-25T13:17:39.179+0000:This is for Camel 2.10, so you have to wait for that release."
0,CAMEL-4938,Bug,Major,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Babak Vahdat,Vid Cheruvu,0,0,2012-01-24 22:06:20+00:00,2012-01-30 17:22:13+00:00,"ManagedeBrowsableEndpoint are broken which means any component that inherit ManagedBrowsableEndpoint have errors as well. Please see the link below which will have error screen shot of queueSize JMX operations.


http://camel.465427.n5.nabble.com/JMX-queue-size-operation-fails-Camel-2-9-0-td5233089.html","bvahdat:1327486198:2012-01-25T18:09:58.985+0000:1327486198:2012-01-25T18:09:58.985+0000:A dirty fix would be to duplicate the JMX operations already provided by ManagedBrowsableEndpoint on the SedaEndpoint as well. This seems to be also the case for JmsQueueEndpoint!
davsclaus:1327900977:2012-01-30T13:22:57.379+0000:1327900977:2012-01-30T13:22:57.379+0000:Thanks for reporting.

We should add a specialized ManagedSedaEndpoint to combine the browsable with the custom seda operations, in one combined interface the JMX API can handle calling.

Also adding to the unit tests that it uses some of the JMX operations from browsable endpoint in the seda endpoint test.

I am running a test with a fix.
bvahdat:1327907810:2012-01-30T15:16:50.075+0000:1327907866:2012-01-30T15:17:46.477+0000:Claus,

thanks beforehand for providing & applying the patch which indeed resolved the problem, however the solution is to my understanding is not *generic* as we've now introduced SEDA Endpoint specific logic into DefaultManagementObjectStrategy:

{code}
        } else if (endpoint instanceof SedaEndpoint) {
            ManagedSedaEndpoint me = new ManagedSedaEndpoint((SedaEndpoint) endpoint);
            me.init(context.getManagementStrategy());
            return me;
{code}

And have also introduced a ManagedSedaEndpoint which is again *Endpoint specific*, IMHO not nice!

Another note: by enableing JMX on

{code}
org.apache.camel.component.jms.BrowsableQueueTest
{code}

I see that the JMX operations are enlisted twice, causing (almost) the same behaviour (see the attached screenshot).

Shouldn't we remove the ManagedResource & ManagedOperation annotations on JmsQueueEndpoint as well? The same as you did for SedaEndpoint?
davsclaus:1327914537:2012-01-30T17:08:57.754+0000:1327914537:2012-01-30T17:08:57.754+0000:Ah that single method is actually @deprecated and wasn't included on trunk.

There is no duplicate methods, just methods with the same name, but with different parameters (eg overloaded methods).
davsclaus:1327915333:2012-01-30T17:22:13.498+0000:1327915333:2012-01-30T17:22:13.498+0000:Yeah its a better idea to do like JMS endpoint. So I will fix that. Thanks."
0,CAMEL-4937,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Claus Ibsen,0,0,2012-01-24 13:11:00+00:00,2012-01-24 20:15:18+00:00,"The Camel maven archetypes creates projects where if you run maven to build/install the projects, you get a WARN about platform dependent encoding.


There is some maven plugin/setting or whatnot to set this to a fixed UTF-8 encoding. We have done this for the Camel project itself.","bvahdat:1327386213:2012-01-24T14:23:33.361+0000:1327386213:2012-01-24T14:23:33.361+0000:What I also realized is that since the 2.6.0 release the camel-archetype-war releases are *missing* by the central repo:

http://repo1.maven.apache.org/maven2/org/apache/camel/archetypes/camel-archetype-war/
http://repo2.maven.apache.org/maven2/org/apache/camel/archetypes/camel-archetype-war/

However I didn't check if this is the only missing archetype. But to me it seems as if something has gone wrong by the last couple of the releases.

Anyway this ticket is really trivial so why I picked it :-)

davsclaus:1327386519:2012-01-24T14:28:39.579+0000:1327386519:2012-01-24T14:28:39.579+0000:Its not missing, see
http://camel.apache.org/camel-maven-archetypes.html

Its been renamed.
bvahdat:1327387117:2012-01-24T14:38:37.583+0000:1327387117:2012-01-24T14:38:37.583+0000:Oh now see it: CAMEL-3748
bvahdat:1327407304:2012-01-24T20:15:04.868+0000:1327407304:2012-01-24T20:15:04.868+0000:Other than:

{code}
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
{code}

did also specify:

{code}
<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
{code}

explicitly so that the Camel users don't also get WARN in case they make use of the maven site or failsafe plugins. Also polished all the archetype poms as well.
"
0,CAMEL-4936,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-24 13:09:14+00:00,2013-05-02 02:29:48+00:00,"It would be good to be abel to use the @EndpointInject, and @Produce etc. annotations in the end user created unit test classes, that extends CamelBlueprintTestSupport. This is supported by camel-test and camel-testng already.",
0,CAMEL-4935,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Romain Manni-Bucau,0,2,2012-01-24 10:47:27+00:00,2012-07-06 12:52:55+00:00,No Desc,"romain.manni-bucau:1327373280:2012-01-24T10:48:00.816+0000:1327373280:2012-01-24T10:48:00.816+0000:adding patch
davsclaus:1341546960:2012-07-06T11:56:00.642+0000:1341546960:2012-07-06T11:56:00.642+0000:We see no demand for a EJB implementation specific Camel component. There is already a lot of Camel components. 
romain.manni-bucau:1341550375:2012-07-06T12:52:55.908+0000:1341550375:2012-07-06T12:52:55.908+0000:hmm, Claus your answer is not consistent with the component, it is not an EJB component, it is a deployment/undeployement integration. not link with EJBs"
0,CAMEL-4934,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-24 07:21:41+00:00,2013-05-02 02:29:48+00:00,"The CamelBeanPostProcessor is currently in camel-spring for historical reasons. We should move it to camel-core, to let it be reusable by camel-test and camel-blueprint as well.


This will also ensure that using CamelTestSupport you can use the Camel @EndpointInject, @Produce etc annotations in your unit test classes.","davsclaus:1327380227:2012-01-24T12:43:47.055+0000:1327380227:2012-01-24T12:43:47.055+0000:Moved logic to camel-core so it can be reused by camel-test, camel-blueprint and others without the need for Spring JARs on the classpath."
0,CAMEL-4933,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-24 06:04:07+00:00,2012-01-24 06:05:50+00:00,"The CamelTestSupport has dependency on Spring JARs. It should not. People should use the CamelSpringTestSupport if they use Spring for unit testing.


However Spring has a bean post processor logic that will IoC beans with members that has been annotated with @EndpointInject, @Produce, @Consume etc.
This is no longer supported, when using CamelTestSupport as that requires Spring JAR at runtime.",
0,CAMEL-4932,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Bilgin Ismet Ibryam,0,0,2012-01-24 01:58:27+00:00,2012-01-24 15:55:21+00:00,"Use twitter streaming api for getting ""real time"" status updates in an event based consumer.


Looking at twitter4j couldn't find a way to easily testing the application, so introduced some mock classes for testing purpose.
All the other tests still access twitter over internet",davsclaus:1327391705:2012-01-24T15:55:05.452+0000:1327391705:2012-01-24T15:55:05.452+0000:Thanks for the patch.
0,CAMEL-4931,Improvement,Minor,2.9.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Reuben Garrett,0,2,2012-01-23 15:58:17+00:00,2013-10-25 11:59:28+00:00,"Camel's shell extensions for Karaf print poorly-formatted results in some cases (particularly camel:route-list), impeding legibility and ease of use.  It appears that the fields are right-padded with spaces to 18 columns regardless of maximum actual column length.  


I understand there's ultimately a limit to the width of the console.  However, if the width of the console can be determined, it should be filled appropriately; middle truncation might be an option for excessively long fields (e.g.: ""thisIsAVeryLongField...ThatHadToBePartiallyTruncated"").  


If the console width cannot be determined, it may still be acceptable to scan for the longest field and set the entire column to its width in the interest of uniform appearance.","rubytuesdaydono:1327305733:2012-01-23T16:02:13.237+0000:1327305733:2012-01-23T16:02:13.237+0000:screen-capture of column mis-alignments
davsclaus:1327969536:2012-01-31T08:25:36.593+0000:1327969536:2012-01-31T08:25:36.593+0000:Patches is of course welcome
http://camel.apache.org/contributing.html
rubytuesdaydono:1327996139:2012-01-31T15:48:59.368+0000:1327996139:2012-01-31T15:48:59.368+0000:Touch&eacute;, my good Claus!  Young apprentice though I am, I must leave the nest and put my CLA to good use.  

This might take me a week or two since I'm not an all-star, but I'd like to own this issue if that's agreeable.  

Thanks for the encouragement!  
davsclaus:1328056584:2012-02-01T08:36:24.681+0000:1328056584:2012-02-01T08:36:24.681+0000:This is great.

Yeah Reuben, looking forward to your contribution.
And by writing in a JIRA ticket that ""hey I am going to work on this"" is a way for others to see you work on this.
When you have done then ""a number of times"" then we can give your JIRA account karma, so you can self assign tickets.
And then ... well if you go from strength to strength, then you land on the Camel team, as a committer :)
http://camel.apache.org/team
rubytuesdaydono:1333201415:2012-03-31T21:43:35.289+0000:1333201415:2012-03-31T21:43:35.289+0000:i know this is a minor issue, but i just want to give an update that i'm working on it and should have a patch ready for review within a week.  

i had to teach myself a few new skills, but i'm finally getting better oriented in the Camel ecosystem.  thanks, committers, for your enthusiastic support and leadership.  
rubytuesdaydono:1333525772:2012-04-04T15:49:32.718+0000:1333525772:2012-04-04T15:49:32.718+0000:initial patch for the camel:context-list command.  

i've seen some buzz in the Karaf project about a utility class for printing tables, so there might be an easier way to do this.  however for this case i've just rolled something myself since i don't know how to access that class.  

if this patch meets your approval, i can work the same technique into the other camel:*-list commands and retrofit them all.  
davsclaus:1333584734:2012-04-05T08:12:14.719+0000:1333584734:2012-04-05T08:12:14.719+0000:Didnt Karaf add some support for table outputs? It seems a pita if you have to roll out your own code to print out tables nicely. Also Karaf could also add support for sorting etc.
davsclaus:1333584971:2012-04-05T08:16:11.901+0000:1333584971:2012-04-05T08:16:11.901+0000:Looking at the patch I think its too much manual code for printing tables. I am not to fond of this as it puts more burden on the Camel team to support and maintain this.

So I think we should wait and use the support from Karaf when it becomes available. I suggest to ask on Karaf @dev about the status of support for 3rd party plugins to print tables.
davsclaus:1333585046:2012-04-05T08:17:26.370+0000:1333585046:2012-04-05T08:17:26.370+0000:In the mean team I suggest to for example to extend the current code and make the default column sizes longer. For example as you say the 18 may be a bit too small.
rubytuesdaydono:1333598637:2012-04-05T12:03:57.811+0000:1333598637:2012-04-05T12:03:57.811+0000:that's agreeable - i'll adjust column widths in the existing implementation while i pursue Karaf's builtin table printer.  thanks for your time!  
davsclaus:1338610532:2012-06-02T12:15:32.467+0000:1338610532:2012-06-02T12:15:32.467+0000:Need the karaf JAR with the table support.
davsclaus:1341546520:2012-07-06T11:48:40.263+0000:1341546520:2012-07-06T11:48:40.263+0000:I think the table JAR from Karaf takes a while, so lets use your patch to make the Camel karaf commands look nice.
davsclaus:1341546872:2012-07-06T11:54:32.341+0000:1341546872:2012-07-06T11:54:32.341+0000:Reuben, I have applied your 1st patch. Maybe you want to work on the other Camel Karaf commands, and maybe refactor the compute column length logic into a util class to be reused among the commands.

Then when Karaf has some util JAR we can use, then we can switch to that in the future.
davsclaus:1358754773:2013-01-21T15:52:53.181+0000:1358754773:2013-01-21T15:52:53.181+0000:Lets open new tickets for each command if there is demand for improving layout
ieugen:1382673559:2013-10-25T11:59:19.974+0000:1382673559:2013-10-25T11:59:19.974+0000:Camel still has bad alignement in 2.11.2, although issue indicates fixed in 2.11.0"
0,CAMEL-4930,New Feature,Major,2.9.0,None,"
None
",Resolved,Fixed,2.10.0,Raúl Kripalani,Raúl Kripalani,2,2,2012-01-23 14:16:37+00:00,2012-06-04 15:39:18+00:00,"Currently if one wants to convert from XML to JSON, the payload must first be serialised to an object / POJO.
The proposal is to create a new Data Format called camel-xmljson which uses the json-lib library to perform the conversion directly: http://json-lib.sourceforge.net/. This library is Apache-licensed.","raulvk:1332399900:2012-03-22T15:05:00.560+0000:1332399900:2012-03-22T15:05:00.560+0000:Work being carried out here: https://github.com/raulk/camel-xmljson. Once finalised, I will submit it to Apache for inclusion in trunk.
raulvk:1333352061:2012-04-02T15:34:21.056+0000:1333352061:2012-04-02T15:34:21.056+0000:Created https://issues.apache.org/jira/browse/SMX4-1121 on the SMX4 JIRA to request a bundle for json-lib, since the library is not OSGi-ready out of the box.
raulvk:1333429433:2012-04-03T13:03:53.913+0000:1333429433:2012-04-03T13:03:53.913+0000:[SMX4-1121|https://issues.apache.org/jira/browse/SMX4-1121] has been resolved, so json-lib and ezmorph are now OSGified within the ServiceMix project.
raulvk:1333430184:2012-04-03T13:16:24.213+0000:1333430184:2012-04-03T13:16:24.213+0000:Attaching diff which applies changes to the Camel parent POM and adds an Apache Karaf feature called ""camel-xmljson"".

Currently using snapshot versions for jsonlib and ezmorph bundles, as SMX4-1121 was only closed yesterday. We'll have to wait for the next SMX4 bundles release to drop the SNAPSHOT.
raulvk:1333438613:2012-04-03T15:36:53.810+0000:1333438613:2012-04-03T15:36:53.810+0000:Attaching one single diff file with all the modifications needed on top of r1308983 to create the camel-xmljson data format.

It can now be applied using the trunk directory as the base.
davsclaus:1333610713:2012-04-05T15:25:13.029+0000:1333610713:2012-04-05T15:25:13.029+0000:Thanks Raul.

I am trying your big patch.
davsclaus:1333611013:2012-04-05T15:30:13.728+0000:1333611013:2012-04-05T15:30:13.728+0000:Is the XML json lib project active at all? The last release is 2+ years old.
I am just a bit worried that adding new components which uses dead projects.

raulvk:1333611759:2012-04-05T15:42:39.699+0000:1333611759:2012-04-05T15:42:39.699+0000:The last release is less than 1.5 years old (December 2012), not 2+. 

json-lib is quite a stable and mature project from my experience.

It clearly isn't in heavy development at the moment, but ohloh.net shows higher adoption rate of json-lib (16 users) vs. Jackson (14 users) and Gson (7 users) - the other JSON-processing libraries supported in Camel (leaving XStream aside - which is a whole different story). 

So I'm inclined to think that Camel should offer json-lib support simply because users use it, and it solves a different use case than the rest of the libraries currently present in the project.
davsclaus:1333615469:2012-04-05T16:44:29.617+0000:1333615469:2012-04-05T16:44:29.617+0000:Patch in trunk. We need documentation and OSGi unit tests in camel-itest-osgi
davsclaus:1333615798:2012-04-05T16:49:58.996+0000:1333615798:2012-04-05T16:49:58.996+0000:When you have initialization logic etc. Then use the doStart/doStop methods from ServiceSupport. Alternative if you cannot extend ServiceSupport, them implement Service and use the start|stop methods. I committed a fix to trunk.

This is the proper way with Camel to have start/stop logic executed. As the previous logic have issues with concurrency when multiple threads invoke the marshal / unmarshal method.
raulvk:1337594140:2012-05-21T17:55:40.848+0000:1337594140:2012-05-21T17:55:40.848+0000:Added docs to wiki: https://cwiki.apache.org/confluence/display/CAMEL/XmlJson.
Updated https://cwiki.apache.org/confluence/display/CAMEL/Data+Format+List and https://cwiki.apache.org/confluence/display/CAMEL/JSON accordingly.

I'll work on the OSGi unit test tomorrow.
davsclaus:1338612749:2012-06-02T12:52:29.643+0000:1338612749:2012-06-02T12:52:29.643+0000:Raul any update on the last pieces?
raulvk:1338787357:2012-06-04T13:22:37.355+0000:1338787357:2012-06-04T13:22:37.355+0000:There goes {{camel-xmljson-osgi-tests.diff}}, a patch containing a test to validate the OSGi-readiness of camel-xmljson. Including some modifications to the camel-xmljson feature too to add missing libraries.
davsclaus:1338795558:2012-06-04T15:39:18.534+0000:1338795558:2012-06-04T15:39:18.534+0000:Thanks for the osgi patch, applied to trunk."
0,CAMEL-4929,Sub-task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Claus Ibsen,0,1,2012-01-22 13:00:23+00:00,2012-02-05 13:45:18+00:00,"We need documentation for this new component at
http://camel.apache.org/component-list","bmeyer2:1327407832:2012-01-24T20:23:52.706+0000:1327407832:2012-01-24T20:23:52.706+0000:I have documentation in the works.  I do not currently have access to edit the wiki.  I'll be submitting my CLIA.  In the meantime, I'll have Bruno add it for me.  Expect documentation by the end of the week.
3riverdev:1327608610:2012-01-27T04:10:10.958+0000:1327608610:2012-01-27T04:10:10.958+0000:I just mailed in my ICLA, in order to get wiki access.  In the meantime, I attached some *rough* documentation.  If someone would be willing to use it to create the initial wiki page, I'd sincerely appreciate it.
hadrian:1327609266:2012-01-27T04:21:06.566+0000:1327609266:2012-01-27T04:21:06.566+0000:ICLAs get processed fairly fast. I will keep an eye on it and grant you access as soon as it's done.
bibryam:1327627755:2012-01-27T09:29:15.679+0000:1327627755:2012-01-27T09:29:15.679+0000:This looks good Brett. If nobody beats me I can add this to the wiki tonight, also taking into account the new streaming/event based consumer.
bvahdat:1327631351:2012-01-27T10:29:11.243+0000:1327634415:2012-01-27T11:20:15.227+0000:Just spotted something by the provided documentation:

Camel users should better not be instructed to use whatever Twitter4J version they like to use but should stick *exactly* to the version camel-twitter4j depends on, with which it has been unit-tested as well, otherwise they will get odd NoSuchMethodError or the likes at runtime and what not.

As the  twitter4j 2.2.5 dependency is already given *transitively* through camel-twitter itself, *only* declaring a camel-twitter dependency would do the trick as it's already the case by all other camel components as well:

{code}
D:\Data\eclipse-workspace\camel\components\camel-twitter>mvn dependency:tree
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Twitter 2.10-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-dependency-plugin:2.1:tree (default-cli) @ camel-twitter ---
[INFO] org.apache.camel:camel-twitter:bundle:2.10-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.10-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.6.1:compile
[INFO] +- org.twitter4j:twitter4j-core:jar:2.2.5:compile
[INFO] +- org.twitter4j:twitter4j-stream:jar:2.2.5:compile
[INFO] +- org.apache.camel:camel-test:jar:2.10-SNAPSHOT:test
[INFO] +- junit:junit:jar:4.8.1:test
[INFO] \- org.slf4j:slf4j-log4j12:jar:1.6.1:test
[INFO]    \- log4j:log4j:jar:1.2.16:test
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.359s
[INFO] Finished at: Fri Jan 27 11:22:05 CET 2012
[INFO] Final Memory: 9M/494M
[INFO] ------------------------------------------------------------------------
{code}
3riverdev:1327646934:2012-01-27T14:48:54.443+0000:1327646934:2012-01-27T14:48:54.443+0000:Bilgin, I added a few notes about the event-driven streams, but admittedly I haven't had time to dig into the code that you added.  I'm sure there's some holes in my notes.  Thanks for adding the code -- it's a really useful idea.

Babak, good catch!
bibryam:1328199491:2012-02-03T00:18:11.085+0000:1328199491:2012-02-03T00:18:11.085+0000:Thanks for the documentation Brett.

Created http://camel.apache.org/twitter.html
and added it to http://camel.apache.org/component-list.html

I got also a question: are twitter4j-core and twitter4j-stream required maven dependencies in order to use this component? I thought camel-twitter would be enough?

3riverdev:1328206161:2012-02-03T02:09:21.194+0000:1328206161:2012-02-03T02:09:21.194+0000:Bilgin,

Thank you for adding that for me!  Hopefully I'll be on the list soon...

Unless I'm missing something, I believe both twitter4j-core and twitter4j-stream are necessary dependencies.  The message bodies are all twitter4j objects.
3riverdev:1328206394:2012-02-03T02:13:14.427+0000:1328206394:2012-02-03T02:13:14.427+0000:Can the link be added to components.html as well?
davsclaus:1328224310:2012-02-03T07:11:50.584+0000:1328224310:2012-02-03T07:11:50.584+0000:Usually camel-twitter should be enough, as it would bring in the needed dependencies from twitter.
bibryam:1328232786:2012-02-03T09:33:06.135+0000:1328232786:2012-02-03T09:33:06.135+0000:components.html ? I expect it to appear also there once added to components-list.html, hhmm strange

I agree with Claus, camel-twitter should be enough, also it was the way I used it a week ago 
davsclaus:1328234021:2012-02-03T09:53:41.380+0000:1328234021:2012-02-03T09:53:41.380+0000:The Apache wiki sync to html pages is a bit weird from time to time. But eventually it will be there.

eg its here
http://camel.apache.org/component-list
3riverdev:1328392077:2012-02-05T05:47:57.890+0000:1328392077:2012-02-05T05:47:57.890+0000:I removed the unnecessary dependencies in the wiki.  Thanks for the help with this!"
0,CAMEL-4928,Improvement,Minor,2.9.0,2.12.0,"

timer

",Resolved,Fixed,2.12.0,Claus Ibsen,Sergey Zhemzhitsky,0,1,2012-01-22 03:07:05+00:00,2013-08-07 16:49:11+00:00,"It would be great to have timer component support asynchronous API.
Such a feature can be useful when timer component generates events which must be processed by multiple threads. 
Current implementation of the timer component makes a blocking call so the usage of thread pools hardly possible to process multiple timer event simultaneously.


Sample
from(""timer:start"")
    .threads(1, 5)
    .to(""bean:very-long-operation"");","szhemzhitsky:1327173450:2012-01-22T03:17:30.359+0000:1327173450:2012-01-22T03:17:30.359+0000:New _async_ parameter has been added in the included patch.

{code:title=Sample}
from(""timer:start?async=true"")
    .threads(1, 5)
    .to(""bean:very-long-operation"")
{code}

So by default the behavior is exactly the same as in the previous version of timer and if one want to use asynchronous API _async=true_ parameter should be added in the endpoint uri.

The patch also includes _doSuspend_ and _doResume_ methods in the TimerConsumer to be able to stop the route faster and to prevent the timer running during stopping the route when using async. api.
davsclaus:1327202363:2012-01-22T11:19:23.654+0000:1327202363:2012-01-22T11:19:23.654+0000:I think the consumers should use the Async API by default. People can disable async in their routes by setting synchronous=false, on the endpoint uri's if they want that disabled.

Or we could introduce asyncConsumer=true|false as a general option, for people to control this.

The JMS consumer already have the asyncConsumer option.
szhemzhitsky:1327318912:2012-01-23T19:41:52.997+0000:1327318912:2012-01-23T19:41:52.997+0000:I noticed that *synchronous=false* is used primarily by producers and *asyncConsumer* parameter exists only in jms consumer, so I suppose that *synchronous* parameter can be used to determine whether both producers or consumers should be synchronous. (Maybe jms consumer should consider using of *synchronous* parameter instead of *asyncConsumer* to prevent introduction of new parameters for the same thing in other components)

So, the patch was replaced to involve usage of *synchronous* parameter.
davsclaus:1375865351:2013-08-07T16:49:11.770+0000:1375865351:2013-08-07T16:49:11.770+0000:Thanks for the patch."
0,CAMEL-4927,Task,Major,None,None,"
None
",Closed,Fixed,2.9.1,Christian Müller,Christian Müller,0,1,2012-01-20 18:24:06+00:00,2012-04-26 00:07:20+00:00,"Because we already released Camel 2.9.0, we should also release Camel-extra 2.9.0","earcam:1335143803:2012-04-23T09:16:43.753+0000:1335143803:2012-04-23T09:16:43.753+0000:

I cannot find camel extras 2.9.0 or 2.9.1

http://svn.codespot.com/a/apache-extras.org/camel-extra/maven2/releases/org/apache-extras/camel-extra/camel-esper/
http://search.maven.org/#search|ga|1|camel-esper
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/

Please advise of the correct location.


thanks.
muellerc:1335281350:2012-04-24T23:29:10.116+0000:1335281350:2012-04-24T23:29:10.116+0000:Done. You can find it here:
- http://svn.codespot.com/a/apache-extras.org/camel-extra/tags/camel-extra-2.9.1
- http://svn.codespot.com/a/apache-extras.org/camel-extra/tags/camel-extra-2.9.2

Best,
Christian
earcam:1335314970:2012-04-25T08:49:30.672+0000:1335314970:2012-04-25T08:49:30.672+0000:
Hi Christian,

I will checkout and deploy to our local nexus,  any chance this could also be pushed to the camel-extra repo http://svn.codespot.com/a/apache-extras.org/camel-extra/maven2/releases as documented here http://code.google.com/a/apache-extras.org/p/camel-extra/wiki/AddingMavenRepo

Thanks for your speedy help with this.

cheers,
Caspar
muellerc:1335344197:2012-04-25T16:56:37.905+0000:1335344197:2012-04-25T16:56:37.905+0000:The last version we published there is 2.6.0... :-(

I know how I can do it, but first I have to check whether we need a [VOTE] for it as we do it for all official Apache releases.
And I'm not sure whether our build is already set up to generate the sha1 and md5 files... I will check this, but this could may take a few days...

Best,
Christian
earcam:1335369907:2012-04-26T00:05:07.713+0000:1335369907:2012-04-26T00:05:07.713+0000:RE: 2.6.0 - I know, I had to check trunk POMs to make sure I didn't have repo-blindness ;)

This is certainly of no urgency on my part, having a tag is perfectly fine.

I've raised CAMEL-5221 as it would be good to pair releases (good for users vs more maintenance for devs)."
0,CAMEL-4926,Bug,Major,"2.8.3, 2.9.0",None,"
None
",Resolved,Fixed,"2.8.4, 2.9.1, 2.10.0",Jonathan Anstey,Jonathan Anstey,0,0,2012-01-20 18:04:28+00:00,2012-01-20 18:47:50+00:00,"Jetty, Apache HTTP, have HTTP TRACE disabled by default. We should also do this in Camel.",
0,CAMEL-4925,Bug,Minor,2.8.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Sergey Zhemzhitsky,0,0,2012-01-20 10:02:31+00:00,2012-01-23 17:00:43+00:00,"ThreadsProcessor configured with ExecutorService with DiscardPolicy or DiscardOldestPolicy leaves inflight exchanges for discarded tasks unprocessed.


Here is the code from ThreadsProcessor. In case of DiscardPolicy or DiscardOldestPolicy executorService will no throw RejectedExecutionException, so exchange remains unprocessed and count of inflight exchanges will not be decremented for such discarded exchanges.


ThreadsProcessor#process(Exchange, AsyncCallback)
public boolean process(Exchange exchange, AsyncCallback callback) {
    if (shutdown.get()) {
        throw new IllegalStateException(""ThreadsProcessor is not running."");
    }

    ProcessCall call = new ProcessCall(exchange, callback);
    try {
        executorService.submit(call);
        // tell Camel routing engine we continue routing asynchronous
        return false;
    } catch (RejectedExecutionException e) {
        if (isCallerRunsWhenRejected()) {
            if (shutdown.get()) {
                exchange.setException(new RejectedExecutionException());
            } else {
                callback.done(true);
            }
        } else {
            exchange.setException(e);
        }
        return true;
    }
}




Unit test is attached.","davsclaus:1327029338:2012-01-20T11:15:38.458+0000:1327029338:2012-01-20T11:15:38.458+0000:We would need to wrap those 2 policies, and then remove the exchange from them inflight registry, when the rejectedExecutor callback is invoked.
szhemzhitsky:1327031096:2012-01-20T11:44:56.752+0000:1327031096:2012-01-20T11:44:56.752+0000:So if we wrap these two policies, how to know which exchange must be removed from the inflight repository?
davsclaus:1327033510:2012-01-20T12:25:10.244+0000:1327033562:2012-01-20T12:26:02.741+0000:Yeah we would need to check in ThreadsDefinition if you have configured Discard and DiscardOldest. And then wrap those policies with a custom policy, so we get the callback from the JDK when the task is rejected.

The discard, would possible not be needed, as I would assume the thread pool will reject it asap, when you try to submit it. But the discard oldest, is an existing task from the task queue, so that is a different story.

Then we need to provide this as a callback to the ThreadsProcessor, so it can do custom logic when the RejectedExecutionHandler#rejectedExecution is invoked. We can then from the Runnable parameter cast that to ProcessCall, and then get access to the Exchange. Then we can set on the Exchange a RejectedExecutionException as exception, and invoke its callback. Then Camel will take it from there to remove the exchange from inflight registry and whatnot.

Something along the lines of that. Its a shame the API of the ExecutorService do not have a 2nd optional runnable parameter for rejected execution. Then it would have been easier. As you just submit 2 runnable's. And the JDK will invoke the appropriate.
davsclaus:1327128962:2012-01-21T14:56:02.333+0000:1327128962:2012-01-21T14:56:02.333+0000:After looking into this for a bit, then the JDK does *not* offer good APIs for being able to do custom logic when rejected, by which you get access to the inner details of the runnable task you submitted to the thread pool. That means for DiscardOldest, you do *not* know which Exchange is to be discarded, as you cannot get access to the Exchange. The JDK ThreadPoolExecutor will wrap the runnable/FutureTask using an adapter, which does not expose API for you to get access to the Exchange.

Even if you create a custom FutureTask and submit that, then it's the adapter you get when the task is rejected. And the adapter does not allow to get you to your custom FutureTask.

So the best we can do is to deny supporting DiscardOldest, and then we can handle Abort and Discard in the ThreadsProcessor, where we can mark the exchange to stop routing, so the exchange will be done, which means that it will be unregistered from the inflight registry and whatnot.
szhemzhitsky:1327137279:2012-01-21T17:14:39.542+0000:1327137279:2012-01-21T17:14:39.542+0000:Hi Claus,
I noticed the same things you mentioned and attached a sample patch that can possibly be used to support correct rejection of submitted tasks. The idea is to provide our own _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_ from _DefaultThreadPoolFactory_. These pools wrap submitted tasks with custom _FutureTask_ that supports rejection. _RejectedExecutionHandlers_ in the _ThreadPoolRejectedPolicy_ are also changed to check whether the discarded tasks can be rejected (I also added blocking policy into the _ThreadPoolRejectedPolicy_).

So if submitted tasks do not implement _Rejectable_ interface the behavior is exactly the same as with ordinary _ThreadPoolExecutor_ and _ScheduledThreadPoolExecutor_. If these tasks are _Rejectable_, their _reject()_ method will be called. 

The only problem is what to do if the user provides its own ExecutorService to configure the ThreadsProcessor. I suppose in that case this user should be fully responsible for handling rejections correctly (it should be mentions in camel docs or somewhere else).
davsclaus:1327201609:2012-01-22T11:06:49.028+0000:1327201609:2012-01-22T11:06:49.028+0000:Sergey,

Thanks for the patch. This seems promising. I am polishing this a bit
- discard and discard oldest = the exchange will not continue routing, done successfully
- abort = the exchange will not continue routing, an exception will be set, done with a failure

Then you can decide to use between abort or discard, to chose between whether the exchange should done with a failure or not.

I am removing the blocked policy, as its not tested, and we have no people asking for it. Don't give people robe to hang themselves.

And yeah if end user provide their own thread pool, then they are responsible for handling that situation. 

szhemzhitsky:1327217601:2012-01-22T15:33:21.927+0000:1327229688:2012-01-22T18:54:48.214+0000:Claus, thanks a lot.

I've done some experiments with the blocking policy that seems rather dangerous, as threads in the pool may become timed out before the rejected task will be put into the queue. So you're right that this policy has to be removed.
davsclaus:1327293205:2012-01-23T12:33:25.792+0000:1327293205:2012-01-23T12:33:25.792+0000:Thanks for the contribution. I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html

This outputs a report if the source code is not aligned with the checkstyle we have in place. eg checking for missing license headers, and code formatting and the likes.
szhemzhitsky:1327309243:2012-01-23T17:00:43.109+0000:1327309243:2012-01-23T17:00:43.109+0000:{quote}
I polished it a bit, and fixed CS. You may want to read about building with checkstyle here:
http://camel.apache.org/building.html
{quote}
Hi Claus, thanks for providing this useful link."
0,CAMEL-4924,Improvement,Major,2.9.0,2.10.0,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,0,2012-01-19 21:09:18+00:00,2012-01-23 08:35:42+00:00,"Build 203 on windows failed because the org.apache.camel.component.mina2.Mina2TcpWithInOutUsingPlainSocketTest hangs. I couldn't reproduce it on my Mac, but I found a none necessary code sniped which may is the reason for this. May it fix the problem...


See for the build failure: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.windows/203/console","muellerc:1326982265:2012-01-19T22:11:05.154+0000:1326982265:2012-01-19T22:11:05.154+0000:I will also remove the dependency to camel-properties because it's not needed and complicated the tests.
bvahdat:1326982586:2012-01-19T22:16:26.510+0000:1326982586:2012-01-19T22:16:26.510+0000:I also can't reproduce the test failure on Mac *but* on Windows-Vista! I've already mentioned this fact to Claus by CAMEL-4899.
bvahdat:1326982914:2012-01-19T22:21:54.399+0000:1326982914:2012-01-19T22:21:54.399+0000:And after the failure on

{code}
org.apache.camel.component.mina2.Mina2TcpWithInOutTest
{code}

The Maven JVM process simply hangs indefinitely!
bvahdat:1326983339:2012-01-19T22:28:59.521+0000:1326983339:2012-01-19T22:28:59.521+0000:I also attached the jconsole screenshot which exactly shows the thread-dump of the hanging thread by the testcase already mentioned.
muellerc:1326986108:2012-01-19T23:15:08.913+0000:1326986108:2012-01-19T23:15:08.913+0000:Committed r1233693
muellerc:1326986296:2012-01-19T23:18:16.166+0000:1326986296:2012-01-19T23:18:16.166+0000:Ok let's see whether this fix solved this issue or not.
bvahdat:1326991150:2012-01-20T00:39:10.582+0000:1326991181:2012-01-20T00:39:41.415+0000:Even with r1233693 in place it's still hanging on my Windows-Vista box :-(
muellerc:1327017124:2012-01-20T07:52:04.881+0000:1327017124:2012-01-20T07:52:04.881+0000:The same on my Windows 7 box. Mina2TcpWithInOutTest fails before. May this is the reason. I will look into it...
bvahdat:1327020557:2012-01-20T08:49:17.320+0000:1327021057:2012-01-20T08:57:37.579+0000:Exactly!
Mina2TcpWithInOutTest seems to be the root cause of the problem, causing the VM to hang. I assume as it's side effect (see by the attached screenshot) the thread running Mina2TcpWithInOutUsingPlainSocketTest test methods afterwards then becomes hanging.

Pressing the ""Detect Deadlocks"" button on Windows Vista didn't report any potential deadlock by me.
bvahdat:1327042728:2012-01-20T14:58:48.188+0000:1327042728:2012-01-20T14:58:48.188+0000:Christian, just to make sure that no revision on the camel-mina2 component has broken any regression, I reverted it to the first revision [1] by my workspace on *Windows*. Result: Running tests *still* hangs the VM at the same place:

{code}
...
Tests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 16.875 sec <<< FAILURE!
Running org.apache.camel.component.mina2.Mina2TcpWithInOutUsingPlainSocketTest
...
{code}

So at least by now we know that those revisions on this components have *not* broken anything!

[1] http://svn.apache.org/viewvc?view=revision&revision=1226449
bvahdat:1327203988:2012-01-22T11:46:28.475+0000:1327203988:2012-01-22T11:46:28.475+0000:Christian,

I checked in the revision [1] which now makes *ALL* tests to pass on Windows as well. I'll keep an eye on the next Windows build by the CI-Servers.

[1] http://svn.apache.org/viewvc?view=revision&revision=1234489
muellerc:1327225692:2012-01-22T17:48:12.868+0000:1327225692:2012-01-22T17:48:12.868+0000:Great Babak! Test test now also pass on my Windows 7 box.
Because the two last build aborted in camel-jms, I started it manually now again. I will also have an eye on it and close this issue...

Thanks,
Christian
bvahdat:1327278942:2012-01-23T08:35:42.469+0000:1327278942:2012-01-23T08:35:42.469+0000:They did indeed all past now by the newest build on Windows:

https://builds.apache.org/job/Camel.trunk.fulltest.windows/215/org.apache.camel$camel-mina2/"
0,CAMEL-4923,New Feature,Major,2.9.0,2.10.0,"

Amazon
aws

",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Christian Müller,0,0,2012-01-19 20:36:04+00:00,2012-02-28 10:32:21+00:00,Checkout Amazon DynamoDB for details.,"bibryam:1327838848:2012-01-29T20:07:28.847+0000:1327838848:2012-01-29T20:07:28.847+0000:Amazon DynamoDB support for Camel
davsclaus:1328420984:2012-02-05T13:49:44.372+0000:1328420984:2012-02-05T13:49:44.372+0000:Bilgin, thanks again.

Do you mind helping with the wiki documentation?
davsclaus:1328421925:2012-02-05T14:05:25.053+0000:1328421925:2012-02-05T14:05:25.053+0000:Thanks for the patch. Its committed to trunk. Documentation is pending.
bibryam:1328423401:2012-02-05T14:30:01.370+0000:1328423401:2012-02-05T14:30:01.370+0000:Thanks for the commit Claus.
I will add the documentation as part of this issue.
davsclaus:1329968721:2012-02-23T11:45:21.231+0000:1329968721:2012-02-23T11:45:21.231+0000:Any update on the documentation?
http://camel.apache.org/aws
bibryam:1329972467:2012-02-23T12:47:47.479+0000:1329972467:2012-02-23T12:47:47.479+0000:Thanks for the reminder Claus.

It is on top of my list :) I will add it probably before the weekend

Bilgin


On 23 February 2012 11:45, Claus Ibsen (Commented) (JIRA)


bibryam:1330367524:2012-02-28T02:32:04.643+0000:1330367524:2012-02-28T02:32:04.643+0000:Some code cleanup.
Documentation is also added to the website.
davsclaus:1330396288:2012-02-28T10:31:28.659+0000:1330396288:2012-02-28T10:31:28.659+0000:Applied the latest patch on trunk. Thanks.
davsclaus:1330396341:2012-02-28T10:32:21.214+0000:1330396341:2012-02-28T10:32:21.214+0000:Thanks for the docs as well."
0,CAMEL-4922,Improvement,Major,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Ioannis Canellos,Ioannis Canellos,0,0,2012-01-19 15:33:26+00:00,2012-01-19 16:58:19+00:00,Jclouds 1.3.1 providers access to more cloud providers and contains a lot of OSGi related fixes for existing ones.,iocanel:1326963499:2012-01-19T16:58:19.178+0000:1326963499:2012-01-19T16:58:19.178+0000:Committed to trunk and also merge into 2.9.x branch.
0,CAMEL-4921,Task,Minor,None,None,"
None
",Resolved,Duplicate,3.0.0,Babak Vahdat,Babak Vahdat,0,1,2012-01-19 15:18:34+00:00,2019-01-02 10:12:14+00:00,"The following tasks are in the scope of this ticket:



Usage of the @Deprecated & @Override annotations where required
Reapply the Clean-ups by CAMEL-4796 and CAMEL-4899 as in the meanwhile this is, again, required
Remove the trailing whitespaces on all lines, even on the empty ones
Remove @version from class javadoc","bvahdat:1403398158:2014-06-22T08:49:18.442+0000:1403398158:2014-06-22T08:49:18.442+0000:This [commit|https://github.com/apache/camel/commit/12a2c0d29bf1b9c828fdb75c0025d6173503a3f3] is only an ongoing partial fix of this ticket.
bvahdat:1417490179:2014-12-02T11:16:19.773+0000:1417500599:2014-12-02T14:09:59.460+0000:Some further work for this ticket:

https://github.com/apache/camel/commit/c8ae4cac990afd79704d318de8fbecea8f684a0d
https://github.com/apache/camel/commit/c7f775ffc179e7c87efc1d41d05116e1c1813659
https://github.com/apache/camel/commit/0e195428ee04531be27a0b659005e3aa8d159d23
https://github.com/apache/camel/commit/cc5c00f54365fda65cfb823ba984ce2b1af5bce5
https://github.com/apache/camel/commit/c778bbcd680ce0b405e2cefb8e0d3b0c20a1efd3
https://github.com/apache/camel/commit/da1813bbf36080c5ed976fc5f6a1665ed067ff75
bvahdat:1546395134:2019-01-02T10:12:14.698+0000:1546395134:2019-01-02T10:12:14.698+0000:In the meanwhile the  {{sandbox/camel-3.x}} branch includes what this ticket has been raised for, so going to close this one."
0,CAMEL-4920,Bug,Minor,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-19 13:49:03+00:00,2012-01-19 19:39:35+00:00,"Currently it uses receiveNoWait, it should use receive (eg block). You should use timeout = -1 for receiveNoWait. This is also what we write in the documentation and javadoc.","davsclaus:1326952447:2012-01-19T13:54:07.406+0000:1326952447:2012-01-19T13:54:07.406+0000:btw this issue causes the test failures on trunk
https://builds.apache.org/job/Camel.trunk.fulltest/663/#showFailuresLink

Which became apparent after the seda consumer does no longer poll during CamelContext is starting.
bvahdat:1326973175:2012-01-19T19:39:35.167+0000:1326973175:2012-01-19T19:39:35.167+0000:Well done :-)

Now all tests pass again [1] other than the one which has to do with CAMEL-4794 and the related one CAMEL-4900.

[1] https://builds.apache.org/job/Camel.trunk.fulltest/664/"
0,CAMEL-4919,Improvement,Minor,2.9.0,2.11.0,"

headers
messages
multiple

",Resolved,Fixed,2.11.0,Claus Ibsen,Paul-Emmanuel Faidherbe,0,2,2012-01-19 10:20:03+00:00,2012-07-06 11:46:24+00:00,"The need is something similar to expectedBodiesReceivedInAnyOrder applied to headers :


I know that a given endpoint will receive 3 messages in any order, and I need to test ONE header in each of these messages.


I wrote :
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""001.zip"");
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""002.zip"");
getMockEndpoint(""mock:zipSHP"").expectedHeaderReceived(""zippedFile"", ""003.zip"");


for the route :
for(""file://filesToBeZipped/"").to(""bean:my.bean.ZipperBean"").log(""Zipped : ..."");


The endpoint effectively received the three messages (the results of three ZIP operations) but the test failed saying that the first message header was ""003.zip"" and not the expected ""001.zip"".","davsclaus:1341538068:2012-07-06T09:27:48.215+0000:1341538068:2012-07-06T09:27:48.215+0000:You need a expectedHeadersReceivedInAnyOrder(key, values...)
davsclaus:1341546384:2012-07-06T11:46:24.284+0000:1341546384:2012-07-06T11:46:24.284+0000:There is now a new expectedHeaderValuesReceivedInAnyOrder on mock endpoint"
0,CAMEL-4918,Task,Trivial,2.8.3,None,"
None
",Resolved,Fixed,2.10.0,Babak Vahdat,Babak Vahdat,0,0,2012-01-18 18:44:32+00:00,2012-01-18 22:45:08+00:00,"This will also help for a faster execution of



mvn idea:idea",
0,CAMEL-4917,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Moulliard Charles,0,1,2012-01-18 17:53:45+00:00,2015-07-11 15:11:41+00:00,"When we generates a CSV file from the model, it is perfectly possible to use an order which is different from the one we have used to read the CSV in input. Currently, we use pos (for input positing) and position (for output csv generation)


We suggest to use --> outputPos (when output position is different)","davsclaus:1436598174:2015-07-11T15:02:54.548+0000:1436598174:2015-07-11T15:02:54.548+0000:Add outPos and deprecated position.
davsclaus:1436598701:2015-07-11T15:11:41.542+0000:1436598701:2015-07-11T15:11:41.542+0000:Ah all the other types use position for their output. So lets keep it as is, but make a bit better doc about pos vs position when using CSV"
0,CAMEL-4916,Bug,Major,None,Future,"
None
",Resolved,Cannot Reproduce,Future,Unassigned,Moulliard Charles,1,3,2012-01-18 17:51:08+00:00,2014-04-27 08:53:01+00:00,"This model is not correct - @Section should not be used and not being mandatory as now 



import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
import org.apache.camel.dataformat.bindy.annotation.DataField;
import org.apache.camel.dataformat.bindy.annotation.Section;

@Section(number = 1)
@CsvRecord(separator = "","", isOrdered = true)
public class Order implements Serializable {

	private static final long serialVersionUID = -3798205974172544528L;

	// Positions of the fields start from 1 and not from 0

    @DataField(pos = 1, position = 2)
    private int orderNr;

    @DataField(pos = 2, position = 1)
    private String clientNr;

    @DataField(pos = 3, position = 4)
    private String firstName;

    @DataField(pos = 4, position = 3)","bvahdat:1326881412:2012-01-18T18:10:12.637+0000:1326881412:2012-01-18T18:10:12.637+0000:The class mentioned is just simply part of the camel-bindy's own unit-testing (src/test/java) and doesn't belong to the public API. So that I just wonder if we should really mark this ticket as a Major-Bug?

Or do I miss something?
cmoulliard:1326932507:2012-01-19T08:21:47.411+0000:1326932507:2012-01-19T08:21:47.411+0000:From my point of view, this is a bug related to a change that somebody has made in the code. To be able to use position when we generate the CSV message, @section is mandatory now. That was not the case before. So there is a bug as we must change the code to revert the modification.
bvahdat:1391737758:2014-02-07T09:49:18.793+0000:1391737758:2014-02-07T09:49:18.793+0000:[~cmoulliard] this major bug is now more than 2 years old!

Maybe If you don’t have any free cycles to fix this then maybe “unassign"" yourself so that others in the community can look into this?
davsclaus:1398559981:2014-04-27T08:53:01.449+0000:1398559981:2014-04-27T08:53:01.449+0000:@Section is not mandatory in current code."
0,CAMEL-4915,Bug,Minor,2.9.0,"2.9.1, 2.10.0","

serialization

",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Raúl Kripalani,0,0,2012-01-18 14:13:13+00:00,2012-01-19 10:51:50+00:00,"This happens because camel-core doesn't have access to custom classes. Maybe this data format should be isolated into it's own package and have DynamicImport-Package: * in its manifest headers. That way it will be able to access any class from the environment.


Another possibility is to dig deeper into what classloader is being used to resolve the class. It seems like the camel-core classloader is used rather than the TCCL. Possible culprit could be http://docs.oracle.com/javase/6/docs/api/java/io/ObjectInputStream.html#resolveClass(java.io.ObjectStreamClass).","davsclaus:1326867439:2012-01-18T14:17:19.396+0000:1326867439:2012-01-18T14:17:19.396+0000:Its the ObjectConvert.toClass that needs to use the ClassResolver API from CamelContext to load the class. Then it ought to work, as this is how we do load stuff in osgi with Camel.


davsclaus:1326940172:2012-01-19T10:29:32.210+0000:1326940172:2012-01-19T10:29:32.210+0000:Committed a fix and added an osgi test for spring-dm.

"
0,CAMEL-4914,Improvement,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-18 14:08:49+00:00,2012-01-23 14:13:02+00:00,"In the new camel-test-blueprint, you need to return a Collection<URL> which is really cumbersome for end users, who just want to specify to use ""META-INF/blueprint/myBlueprint.xml"" as the test file.


Or some other file on the classpath.


So having some nicer way (possible both or whatever).


Also we should have better reporting if the file is not found. Like a FileNotFoundException with details about the file not found.",davsclaus:1327299182:2012-01-23T14:13:02.916+0000:1327299182:2012-01-23T14:13:02.916+0000:Added getBlueprintDescriptor() method that is simpler to use.
0,CAMEL-4913,Bug,Major,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-18 11:00:38+00:00,2012-01-18 11:25:29+00:00,"Using xpath predicates in a blueprint xml file does not work if you use custom namespaces, as the camel-blueprint component does not detect the custom namespaces, as camel-spring does.",
0,CAMEL-4912,Improvement,Minor,None,2.10.0,"
None
",Resolved,Won't Fix,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-18 08:35:33+00:00,2012-01-18 09:00:24+00:00,"When routes are started, they may poll and and intake new messages, that gets routed in the Camel routes.


So its best that the CamelContext state has been changed from starting to started. To indicate the CamelContext has been fully started.
Otherwise you may have a odd race condition, that you process a new message, while the state of CamelContext is starting.


For example as we have with the SedaConsumer that in CAMEL-4911","davsclaus:1326848424:2012-01-18T09:00:24.763+0000:1326848424:2012-01-18T09:00:24.763+0000:Starting routes while CamelContext is starting has been baked in, to rely on this fact, as it help ensure JMX stuff is setup correctly as well.
"
0,CAMEL-4911,Improvement,Minor,2.9.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-18 08:17:34+00:00,2012-01-18 08:20:52+00:00,"If you startup Camel with many routes, which mean starting Camel may take some seconds or whatnot, and then SedaConsumer may poll messages, while CamelContext is starting. It should avoid polling until CamelContext is fully started.",
0,CAMEL-4910,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,0,2012-01-18 04:36:36+00:00,2012-02-22 03:43:30+00:00,We need to pick up the saxon 9.3.0.11 with some bug fixing and enhancements.,"njiang:1326851391:2012-01-18T09:49:51.102+0000:1326851391:2012-01-18T09:49:51.102+0000:Applied patch into trunk
davsclaus:1327025178:2012-01-20T10:06:18.881+0000:1327025178:2012-01-20T10:06:18.881+0000:Willem, in which maven repo is saxon9he located? 

The CI servers may not be able to find it, from a clean build with no m2 cache.
njiang:1327026814:2012-01-20T10:33:34.203+0000:1327026814:2012-01-20T10:33:34.203+0000:The maven repo is here
http://svn.apache.org/repos/asf/servicemix/m2-repo


davsclaus:1327026934:2012-01-20T10:35:34.207+0000:1327026934:2012-01-20T10:35:34.207+0000:Ah great. There seems to be some examples or whatnot that will fail missing this dep

See console output from
https://builds.apache.org/job/Camel.trunk.notest/1442/

I guess adding that sxm repo will fix that.
bvahdat:1327027992:2012-01-20T10:53:12.218+0000:1327029370:2012-01-20T11:16:10.680+0000:But then I don't get it why the newest build [1] of today morning with *full test* did pass concerning this dependency!

[1] https://builds.apache.org/job/Camel.trunk.fulltest/665/
davsclaus:1327030552:2012-01-20T11:35:52.082+0000:1327030552:2012-01-20T11:35:52.082+0000:You should try deleting/moving your local m2 repo

~/.m2/repository

So maven will have to download all the JARs again. Then you may see if any JARs is missing
bvahdat:1327033112:2012-01-20T12:18:32.750+0000:1327033112:2012-01-20T12:18:32.750+0000:That's already clear to me ;-)

My concern is the CI-Server *itself*. I assume the Jenkins builds for *all* of the Apache projects on the CI-Server use *the same m2 cache* (maybe somewhere along the path /home/jenkins/.m2/repository). Now:

- The newest fulltest run was at Jan 20, 2012 6:01:25 AM: https://builds.apache.org/job/Camel.trunk.fulltest/665/
- The newest notest run was at Jan 20, 2012 8:29:25 AM: https://builds.apache.org/job/Camel.trunk.notest/1442/

And now what I don't get is that if the fulltest run could successfully resolve the saxon9he dependency, how is it possible that the notest run 2.5 hours later could not resolve that anymore, as at that time the saxon9he should have been already available inside the m2 cache of the user ""jenkins""!
njiang:1328125008:2012-02-02T03:36:48.932+0000:1328125008:2012-02-02T03:36:48.932+0000:@Babak,
There are lots of CI-Servers running in the Apache build fram. I don't think they are sharing the same m2 cache. It will cause lots of problem when different build try to install the same artifacts at the same time.
 
bvahdat:1328140645:2012-02-02T07:57:25.952+0000:1328140645:2012-02-02T07:57:25.952+0000:The whole INFRA Jenkins/Maven setup is somehow not much clear to me and we have currently also really *wired* behaviour on the Window builds as well [1] about which nobody from INFRA could resolve the problem til now.

What also seems to be really odd to me is that why INFRA makes use of a *SNAPSHOT* version (1.447-SNAPSHOT) of Jenkins! 

[1] https://issues.apache.org/jira/browse/INFRA-4272

raulvk:1329717253:2012-02-20T13:54:13.907+0000:1329717253:2012-02-20T13:54:13.907+0000:The Saxon bundle version in the features.xml is no longer valid. It refers to a SNAPSHOT which has already been released. Kindly apply the attached patch.
njiang:1329853410:2012-02-22T03:43:30.134+0000:1329853410:2012-02-22T03:43:30.134+0000:Patch was applied by Christian."
0,CAMEL-4909,Task,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Brett Meyer,0,0,2012-01-18 03:32:36+00:00,2012-01-19 03:14:53+00:00,Previous commits accidentally included authentication tokens from a private account.  Please update to a test account's tokens using the provided patch.  Thanks!,bmeyer2:1326828824:2012-01-18T03:33:44.618+0000:1326828824:2012-01-18T03:33:44.618+0000:patch
0,CAMEL-4908,Bug,Minor,2.10.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Bilgin Ismet Ibryam,0,0,2012-01-17 13:21:01+00:00,2012-01-24 08:45:46+00:00,"Fix ConcurrentModificationException for StreamingConsumer.
Fix NPE for FilterConsumer
Use additional query parameters for FilterConsumer like userIds, keywords.
I didn't added tests for these fixes, because currently it seems like it connects to the internet and does real twitter queries. I will check this in a separate issue.","davsclaus:1326778180:2012-01-17T13:29:40.369+0000:1326778244:2012-01-17T13:30:44.819+0000:Bilgin you may want to read about checkstyle, so you can run a test to run a report on the command line, which tells you if the source code is aligned as it should (eg indent, parenthesis, and whatnot)

See building with checkstyle here:
http://camel.apache.org/building.html

And btw I do not think you need to create a new ArrayList when you guard it as unmodified, as the caller will not be able to modify the list.
Or did I miss a point? If so please add a code comment in the source why this is done as is
return Collections.unmodifiableList(new ArrayList(receivedStatuses));

bibryam:1326782506:2012-01-17T14:41:46.691+0000:1326782506:2012-01-17T14:41:46.691+0000:I will pay more attention to CS. My editor intelliJ orders the imports in different order and I don't know the order expected from CS, will spent some time there.

About:
return Collections.unmodifiableList(new ArrayList(receivedStatuses));

the caller is not able to modify the array, but while the caller is iterating the source array is modified with clear/add methods and that's causing the error mentioned previously
bvahdat:1326783554:2012-01-17T14:59:14.161+0000:1326783554:2012-01-17T14:59:14.161+0000:@Bilgin
Personally I do use eclipse but in your case applying [1] will do the trick. Please also check [2] just in the case you don't know how to apply it to your IntelliJ installation.

[1] https://svn.apache.org/repos/asf/camel/trunk/etc/idea/settings.jar
[2] http://musingsofaprogrammingaddict.blogspot.com/2010/03/import-code-style-settings-into.html
davsclaus:1326919127:2012-01-19T04:38:47.048+0000:1326919127:2012-01-19T04:38:47.048+0000:Thanks for the patch.

I have fixed CS.
bibryam:1327341120:2012-01-24T01:52:00.337+0000:1327341120:2012-01-24T01:52:00.337+0000:Thanks for the info Babak. I installed the settings following the instructions, but still have to do some formatting manually, like indenting ""throws"" statements at 8 spaces instead of 12. Is this expected behaviour or the IDE should do all the formatting automatically?
bvahdat:1327365496:2012-01-24T08:38:16.622+0000:1327365946:2012-01-24T08:45:46.313+0000:I've got no experience of using IntelliJ but the problem you are facing seems really odd to me if IntelliJ doesn't honor the given settings. I would expect any given IDE to do all the formattings automatically!

AFAIK Claus makes use of IntelliJ and maybe he can help you here."
0,CAMEL-4906,New Feature,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-17 06:37:57+00:00,2012-01-17 10:03:02+00:00,"When Camel enlist itself in JMX it uses a auto assigning naming strategy, which can detect clashes (name already exist) and then re-calculate a new name, finding a free name. This ensures you can deploy multiple Camel apps in the same JVM, whether you run in Tomcat, JEE, OSGi etc.


However for some people they want to have full control of the JMX name.
For OSGi users in particular, as by default Camel uses the bundle-id as part of the JMX name. 


So the JMX name can change, for example if you restart the server (and have deleted the data directory) so bundle-ids is re-assigned by the OSGi container.
Or that you uninstall and install the app again. Then the old bundle-id is never reused.


We could possible add a managementName attribute to <camelContext>
with a syntax pattern, so end user can configure this in the XML as well, fairly easily


<camelContext id=""foo"" managementNamePattern=""myFoo"">


...
</camelContext>


eg the managementName is a new attribute, where you can use a syntax
to configure it with tokens



#name# - the camel context name
#camelId# - same as #name#
#bundleId# - the bundle id
#symbolicName# - the bundle symbolic name
#counter# - an incrementing counter, used to remedy clashes by finding a new free name



Then they can assemble their naming as they want.


The osgi default naming pattern could be, which it is hardcoded as currently:
#bundleId#-#name#


In the example above it uses a fixed name ""myFoo"" which then must be unique in the JVM",davsclaus:1326765782:2012-01-17T10:03:02.512+0000:1326765782:2012-01-17T10:03:02.512+0000:Update wiki documentation at the Camel JMX wiki page.
0,CAMEL-4905,Task,Trivial,None,None,"
None
",Resolved,Fixed,2.10.0,Bilgin Ismet Ibryam,Bilgin Ismet Ibryam,0,0,2012-01-17 00:36:22+00:00,2012-01-17 06:30:10+00:00,No Desc,davsclaus:1326753010:2012-01-17T06:30:10.537+0000:1326753010:2012-01-17T06:30:10.537+0000:Thanks for the patch. 
0,CAMEL-4904,Bug,Minor,"2.8.3, 2.9.0","2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.8.4, 2.9.1",Claus Ibsen,Stephen Saucier,0,0,2012-01-16 19:29:16+00:00,2012-04-05 17:10:18+00:00,"When the ""name"" parameter contains a '$', ""${"" or '}' substring, the getThreadName method will throw an erroneous IllegalArgumentException.","davsclaus:1326752800:2012-01-17T06:26:40.523+0000:1326752800:2012-01-17T06:26:40.523+0000:Thanks for reporting. I fixed that on trunk yesterday with CAMEL-4903.
Will have to manually backport a fix, for the older branches as the trunk changed. Basically you need to quote the names, so the replace works.
davsclaus:1326752888:2012-01-17T06:28:08.715+0000:1326752888:2012-01-17T06:28:08.715+0000:Stephen if you wish to work on a patch, then you can take a look at this commit
http://svn.apache.org/viewvc?rev=1232013&view=rev

Notice the quote replacement code.
bvahdat:1326759709:2012-01-17T08:21:49.944+0000:1326759709:2012-01-17T08:21:49.944+0000:Claus not that much important at all but I commented a svn-typo by CAMEL-4903 
davsclaus:1326777050:2012-01-17T13:10:50.472+0000:1326777050:2012-01-17T13:10:50.472+0000:Babak

In due time you will be able to make the commit log changes yourself :)

Its not really that important, and just risk something odd **** up with svn/git / syncing and whatnot.
So I would just leave it as is.
bvahdat:1326777590:2012-01-17T13:19:50.738+0000:1326777590:2012-01-17T13:19:50.738+0000:fair enough :-)
davsclaus:1326923172:2012-01-19T05:46:12.698+0000:1326923172:2012-01-19T05:46:12.698+0000:Fixed on 2.8 branch as well.
saucier:1333554469:2012-04-04T23:47:49.374+0000:1333554469:2012-04-04T23:47:49.374+0000:I am confused -- the bug details indicate that this fix should be present in 2.9.1 and 2.8.4, but as far as I can tell, it isn't in either. 

I am looking at
https://svn.apache.org/repos/asf/camel/tags/camel-2.8.4/camel-core/src/main/java/org/apache/camel/util/concurrent/ExecutorServiceHelper.java
and
https://svn.apache.org/repos/asf/camel/tags/camel-2.9.1/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

What is in trunk seems okay:
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/main/java/org/apache/camel/util/concurrent/ThreadHelper.java

Am I missing something? Testing with 2.9.1, my bug still exists.
davsclaus:1333579958:2012-04-05T06:52:38.636+0000:1333579958:2012-04-05T06:52:38.636+0000:
The fix works fine as we use this quote the matcher before using
{code}

    // must quote the names to have it work as literal replacement
        shortName = Matcher.quoteReplacement(shortName);
        longName = Matcher.quoteReplacement(longName);
{code}

However note that the syntax in Camel 2.10 has changed to use # instead of $ as tokens. This avoids any confusions with property placeholders, simple language etc. The 2.9 and older releases uses the $ to not break compatibility.
saucier:1333612916:2012-04-05T16:01:56.898+0000:1333612916:2012-04-05T16:01:56.898+0000:Could you please check again the links I posted previously? The code that is included in 2.8.4 and 2.9.1 does not quote the replacement, and still exhibits the issue as it is still checking after the replacement that that string does not contain a '}' character which my name does. This is working in trunk due to the use of a regular expression (and the fact that '#' is being used as the delimiter for placeholders, which are not contained in my particular names).
davsclaus:1333617018:2012-04-05T17:10:18.902+0000:1333617018:2012-04-05T17:10:18.902+0000:Then I suggest to not use { } in your thread names. Its very unusual."
0,CAMEL-4903,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-16 14:01:02+00:00,2012-01-17 08:19:54+00:00,We should use #camelId# instead of ${camelId} as the latter is a common property placeholder token by spring etc.,"davsclaus:1326697047:2012-01-16T14:57:27.959+0000:1326697047:2012-01-16T14:57:27.959+0000:Updated wiki site as well.
bvahdat:1326697424:2012-01-16T15:03:44.653+0000:1326697424:2012-01-16T15:03:44.653+0000:I don't know if it's possible to subsequently correct the JIRA ticket number by the svn log-message:
http://svn.apache.org/viewvc?view=revision&revision=1232013
bvahdat:1326759594:2012-01-17T08:19:54.875+0000:1326759594:2012-01-17T08:19:54.875+0000:I've found something here explaining a way how to do correct that:
http://stackoverflow.com/questions/304383/how-do-i-edit-a-log-message-that-i-already-committed-in-subversion"
0,CAMEL-4902,Bug,Major,2.9.0,,"
None
",Closed,Fixed,None,Willem Jiang,Alexander Kudrevatykh,0,0,2012-01-16 08:35:30+00:00,2012-01-17 09:23:12+00:00,"in spring.schemas we have line
http\://camel.apache.org/schema/cxf/camel-cxf-2.9.0.xsd=schema/cxfEndpoint.xsd
but there isn't such file on http://camel.apache.org/schema/cxf/ only camel-cxf.xsd and camel-cxf-2.9.0-spring.xsd
please make it correct.","njiang:1326677252:2012-01-16T09:27:32.435+0000:1326677252:2012-01-16T09:27:32.435+0000:I just updated the camel.apache.org web site with right name of the camel-cxf.xsd.
I also moved the camel-cxf-2.9.0-blueprint.xsd to  http://camel.apache.org/schema/blueprint/cxf 
akudrevatych:1326763392:2012-01-17T09:23:12.275+0000:1326763392:2012-01-17T09:23:12.275+0000:thanks"
0,CAMEL-4901,Bug,Major,2.8.3,"2.8.4, 2.9.1","
None
",Resolved,Duplicate,"2.8.4, 2.9.1",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2012-01-16 07:52:24+00:00,2012-01-16 08:02:58+00:00,"The fix has been made on trunk (Camel 2.9.1), but I raise this Jira to track it and merge it to 2.8.x branch.",
0,CAMEL-4868,Improvement,Minor,"2.8.3, 2.9.0",None,"
None
",Resolved,Fixed,"2.8.4, 2.9.1, 2.10.0",Jonathan Anstey,Jonathan Anstey,0,0,2012-01-06 15:01:16+00:00,2012-01-06 19:53:25+00:00,"Workaround until this makes it into a release is of course just


osgi:install -s mvn:org.apache.camel/camel-context/2.9.0",
0,CAMEL-4867,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Willem Jiang,Willem Jiang,0,0,2012-01-06 09:09:32+00:00,2012-01-06 13:42:24+00:00,We need to provide a camel-twitter feature for loading camel-twitter module in karaf.,njiang:1325828544:2012-01-06T13:42:24.351+0000:1325828544:2012-01-06T13:42:24.351+0000:committed the patch into trunk.
0,CAMEL-4866,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Ashwin J. Karpe,Claus Ibsen,0,0,2012-01-06 09:02:04+00:00,2012-02-29 13:31:23+00:00,"We should upgrade to the new 3.0.x version of Apache Commons Net for the camel-ftp component.
Its currently using the 2.2 version.


We may need an OSGi bundle for commons net 3.0.x","davsclaus:1325811803:2012-01-06T09:03:23.613+0000:1325811803:2012-01-06T09:03:23.613+0000:Commons Net is already an OSGi bundle.
akarpe:1330416197:2012-02-28T16:03:17.165+0000:1330416235:2012-02-28T16:03:55.778+0000:Hi Claus,

I have made the change to upgrade to Commons Net 3.0.1.

I have re-built everything to verify that the upgrade is good and clears the tests.

Unless you have additional feedback, I will commit this to trunk...

Cheers,

Ashwin...
davsclaus:1330416435:2012-02-28T16:07:15.953+0000:1330416435:2012-02-28T16:07:15.953+0000:Make sure it works with OSGi!!!! Both spring-dm and blueprint!
akarpe:1330416711:2012-02-28T16:11:51.204+0000:1330416711:2012-02-28T16:11:51.204+0000:OK sure...
davsclaus:1330417078:2012-02-28T16:17:58.098+0000:1330417078:2012-02-28T16:17:58.098+0000:The reason is that if it does not work in osgi then many users will get disappointed. And this is a big change from 2.x to 3.0 so we better check this a bit :)

akarpe:1330417078:2012-02-28T16:17:58.450+0000:1330417078:2012-02-28T16:17:58.450+0000:Hi Claus,

I checked the poms for the camel-core-osgi, camel-blueprint and camel-spring. I did not find direct dependencies for Commons Net. 

In any case, I re-built the same and they seem to work fine...

Cheers,

Ashwin...
akarpe:1330417205:2012-02-28T16:20:05.078+0000:1330417249:2012-02-28T16:20:49.988+0000:Fixed and committed to the trunk as revision r1294712
davsclaus:1330417348:2012-02-28T16:22:28.547+0000:1330417348:2012-02-28T16:22:28.547+0000:Remember to update the release notes about this upgrade in the upg section
http://camel.apache.org/camel-2100-release.html
akarpe:1330417702:2012-02-28T16:28:22.921+0000:1330417702:2012-02-28T16:28:22.921+0000:Thanks for the heads-up. I will do this right now...

Cheers,

Ashwin...
davsclaus:1330490684:2012-02-29T12:44:44.032+0000:1330490684:2012-02-29T12:44:44.032+0000:Doesnt work with OSGi

Running org.apache.camel.itest.karaf.CamelFtpTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 17.899 sec <<< FAILURE!
davsclaus:1330493483:2012-02-29T13:31:23.362+0000:1330493483:2012-02-29T13:31:23.362+0000:I fixed the wrong features of camel-ftp"
0,CAMEL-4865,Improvement,Minor,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-06 08:43:01+00:00,2012-01-06 09:37:00+00:00,"We should add camel-test as dependency to the archetypes, so its easier for end users to get up and testing.
There is a few which already do that.",
0,CAMEL-4864,Task,Minor,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2012-01-06 08:35:37+00:00,2012-01-06 08:44:31+00:00,We should upgrade to Karaf 2.2.5,
0,CAMEL-4863,Bug,Critical,2.9.0,2.10.0,"

performance
seda
threading
threads

",Resolved,Not A Problem,2.10.0,Claus Ibsen,Aaron Whiteside,0,1,2012-01-04 23:01:56+00:00,2012-01-06 17:04:32+00:00,"Snippets from my routing file:



<threads maxPoolSize=""10"" maxQueueSize=""10"">
   <to uri=""jms:queue:testQueue?deliveryPersistent=true""/>
</threads>




compared to:



<to uri=""seda:test?concurrentConsumers=10&size=10""/>





<from uri=""seda:test?concurrentConsumers=10&size=10""/>
<to uri=""jms:queue:testQueue?deliveryPersistent=true""/>




Using <threads> I get about 600 requests/per second.
Using seda endpoint I get about 3000 requests/per second.


Looking at the thread pools created by Camel in jconsole: I can see that the one created by <threads> is mostly idle as compared to the one created by the seda endpoint which is always busy.


Also in the MBean Camel creates for it's managed thread pools, for the ThreadPool created by <threads> the TaskQueueSize attribute is almost always 0 and never more than 1. This is in contrast to the TaskQueueSize attribute on ThreadPool created by the seda endpoint which is always 10 (the seda queue size, and obviously until all the tasks have completed).","davsclaus:1325744277:2012-01-05T14:17:57.811+0000:1325744277:2012-01-05T14:17:57.811+0000:What are you doing?

Can you post the full route snippets.

And frankly its best to use the @user mailing list first to ask questions about using Camel.
There may be some misunderstanding from your end what threads is doing.
aaronjwhiteside:1325746865:2012-01-05T15:01:05.411+0000:1325753611:2012-01-05T16:53:31.871+0000:I'll come up with a demo to illustrate the problem, as the full route was using a custom component.

I talked this over with jamieg on IRC before opening a ticket. I can paste the full conversation here if you wish.

Also correct me if I am wrong: The <threads>/threads() DSL is intended to allow processing part of a route asynchronously, which also has the side effect of processing part of a route in parallel.

This is essentially what the seda endpoint provides, so in my eyes for my needs they are equivalent. I would note that using the threads DSL is also easier/cleaner syntactically, then having to use another route and seda.

So since the threads DSL is just a wrapper around a ExecutorService just like the seda endpoint is, they should be roughly the same in terms of performance - At least in my mind.
aaronjwhiteside:1325753864:2012-01-05T16:57:44.292+0000:1325753864:2012-01-05T16:57:44.292+0000:IRC conversation #camel:

16:22   awon	getting better performance using seda then with threads, any ideas why
16:23	awon	600 requests/sec compared to 3000 requests/sec with 10 threads
16:54	awon	anyone?
16:56	jamieg	600 r/s on one thread VS 300 r/s over ten threads?
16:57	awon	<threads maxPoolSize=""10"" poolSize=""10""> vs <to uri=""seda:test?concurrentConsumers=10> .... in another route <from uri=""seda:test?concurrentConsumers=10""> .. yadda
16:57	jamieg	context switching, thread management, single threaded performance tweaking of the JVM, optimization trade offs, lower level thread management (OS), physical hardware (memory model, cores per socket), etc etc
16:57	awon	same machine.
16:58	awon	from looking at the code, both <threads> ThreadsDefinition.java and SedaEndpoint they're both just wrappers for an ExecuterService
16:58	jamieg	The above still applies -- i can see how a single thread can be faster than multiple threads - the important thing is that the increased threads do more work as a group
16:58	awon	umm
16:58	awon	I think you're missing what I am saying
16:59	jamieg	i think i am 
16:59	jamieg	you see 600 requests/sec on one thread, 3000 requests/sec with ten threads
16:59	awon	using either <threads> or seda:test has the same request, the Exchange being queued to a ExecutorService... a thread pool
16:59	awon	no.
17:00	jamieg	""600 requests/sec compared to 3000 requests/sec with 10 threads""
17:00	awon	600 requests/ a second on 10 threads using <threads> or threads() in Java DSL vs,  3000 using seda endpoint
17:00	jamieg	OOOggg
17:00	jamieg	ooohh
17:00	jamieg	sorry
17:00	awon	*with 10 threads
17:00	awon	heh
17:00	jamieg	that makes a major difference
17:00	awon	yeah
17:01	awon	I can see from jconsole that the thread pool created by the threads() isn't doing much work, they're all mostly idle 
17:01	jamieg	that is strange
17:01	awon	and from jmx, TaskQueueSize is always 0 and sometimes 1
17:02	jamieg	which version of Camel?
17:03	awon	last drop of 2.9 snapshot
17:03	awon	i should probably move to 2.9 final
17:03	awon	but i suspect there's no difference
17:04	awon	even if I set maxQueueSize=""100"" for threads() no difference
17:04	awon	I have a feeling its using the SynchronousQueue
17:04	awon	internally 
17:05	awon	since no more than 1 ever gets buffered up in the thread pool
17:07	jamieg	hmm, somethings sounds really fishy in there... i would expect the threads to all be trying to consume as fast as possible
17:07	jamieg	no contention
17:10	awon	yeah, i'm just about to debug the app.. will let you know more in a min
17:14	awon	jamieg: mm well it's not using a SynchronousQueue, it's using a LinkedBlockingQueue, so that's not the problem 
17:29	awon	even with seda:blah?concurrentConsumers=10&size=1 I still get 2800 a second...
17:39	awon	jamieg: I'll just open a bug.. for now the workaround is to use the seda endpoint, but threads() is nicer syntactically 
17:40	jamieg	sounds like a plan
aaronjwhiteside:1325768732:2012-01-05T21:05:32.921+0000:1325768790:2012-01-05T21:06:30.372+0000:As per http://camel.apache.org/async.html

{quote}
*Camel 2.4 onwards behavior*
The threads DSL leverages the JDK concurrency framework for multi threading. It can be used to turn a synchronous route into Async. What happens is that from the point forwards from threads the messages is routed asynchronous in a new thread. Camel leverages the asynchronous routing engine, which was re-introduced in Camel 2.4, to continue routing the Exchange asynchronously.
{quote}

I have attached an example which shows how using threads() DSL seems to result in the route being executed in a single thread from the thread pool and that the initial thread waits for the thread in the thread pool to finish before returning... 

However the example using the seda endpoint is much faster and results in all threads in the thread pool executing the work, without the initiating thread waiting for them to complete (except in the obvious case where the queue is full and the initiating thread waits for a spot in the queue).
davsclaus:1325797981:2012-01-06T05:13:01.877+0000:1325797981:2012-01-06T05:13:01.877+0000:The direct component is synchronous, which mean that it will block waiting for the exchange to be fully completed. So the threads EIP does not help much, as the direct component waits (in your case the producerTemplate with the direct producer) until the threads is done, before its done as well.

You will need to use a component that supports the async routing to take fully advantage of the threads EIP.
davsclaus:1325798002:2012-01-06T05:13:22.350+0000:1325798002:2012-01-06T05:13:22.350+0000:Working as designed.
aaronjwhiteside:1325832777:2012-01-06T14:52:57.195+0000:1325833602:2012-01-06T15:06:42.422+0000:I understand direct is synchronous. But it should only block until the threads EIP has queued the Exchange to its ExecutorService. So given this theory you should see the queue of the ExecutorService building up (to it's max size) as the loop iterators over - this however is not happening. The queue feeding the threads EIP ExecutorService never has more than 1 Exchange on it.

So the question becomes what is the threads EIP waiting for?
davsclaus:1325835672:2012-01-06T15:41:12.120+0000:1325835672:2012-01-06T15:41:12.120+0000:The direct producer *waits* (blocks) for the Exchange to be done. It does not matter if you use 1, 2, 5 or 100 threads to process the Exchange. The direct producer will still wait until the Exchange is done.


aaronjwhiteside:1325836717:2012-01-06T15:58:37.619+0000:1325836829:2012-01-06T16:00:29.153+0000:That I was not aware of... Nor is it documented..

http://camel.apache.org/async.html

What is the point of waiting for the Exchange to process if you are queuing it to a thread pool? You might as well process the exchange in the calling thread. The end result would be the same, in fact it would be more efficient to just process the Exchange in the calling thread... less context switches.

http://camel.apache.org/seda.html

{quote}
*Concurrent consumers*
By default, the SEDA endpoint uses a single consumer thread, but you can configure it to use concurrent consumer threads. So instead of thread pools you can use:
{code:lang=java}
from(""seda:stageName?concurrentConsumers=5"").process(...)
{code}

*Difference between thread pools and concurrent consumers*
The thread pool is a pool that can increase/shrink dynamically at runtime depending on load, whereas the concurrent consumers are always fixed.

*Thread pools*
Be aware that adding a thread pool to a SEDA endpoint by doing something like:
{code:lang=java}
from(""seda:stageName"").thread(5).process(...)
{code}
Can wind up with two BlockQueues: one from the SEDA endpoint, and one from the workqueue of the thread pool, which may not be what you want. Instead, you might want to consider configuring a Direct endpoint with a thread pool, which can process messages both synchronously and asynchronously. For example:
{code:lang=java}
from(""direct:stageName"").thread(5).process(...)
{code}
You can also directly configure number of threads that process messages on a SEDA endpoint using the concurrentConsumers option.
{quote}

Why does the SEDA endpoint documentation recommend the usage of threads EIP as an alternative to seda. Indeed it states that:

{quote}
The thread pool is a pool that can increase/shrink dynamically at runtime depending on load, whereas the concurrent consumers are always fixed.
{quote}

I am very confused by your answers and the documentation. Your answer seems to match what the test case is reproducing. But that doesn't match what the documentation says/infers.
aaronjwhiteside:1325837026:2012-01-06T16:03:46.304+0000:1325837026:2012-01-06T16:03:46.304+0000:Can I assume that the threads EIP is not http://www.eaipatterns.com/CompetingConsumers.html?

If so then what the hell is it?
davsclaus:1325840672:2012-01-06T17:04:32.252+0000:1325840672:2012-01-06T17:04:32.252+0000:Just to be more clear.

The direct component is *forced* to be synchronous. The DirectConsumer do *not* implement AsyncProcessor. That means the Camel routing engine will fallback to being synchronous (there is a latch, which makes the thread block if needed).

So if you edited the source code and let DirectConsumer implement AsyncProcessor, and implemented the needed logic correctly. Then you could turn that into async mode.

But again, the point of the direct component is to be *synchronous* and thus its forced this way.


So that means the direct consumer will wait from this point of execution, until the async callback is done. The threads EIP will invoke the done method, when its done processing the exchange. Which mean the direct consumer thread, will ""wake up"" (from the latch) and then continue processing.

And in your unit test, you have a for loop, which sends a message to a Camel route using the direct endpoint. That means, you use the direct component that is forced to be synchronous. So that mean you can only send in a new message, when the previous message has been fully processed. So it does not matter if you use threads, or whatever to process it. It will still wait.

And yes a fully straight through processing using the same thread would be faster, as there would be no context switching.
"
0,CAMEL-4862,Improvement,Major,2.9.0,"2.9.1, 2.10.0","
None
",Closed,Fixed,"2.9.1, 2.10.0",Christian Müller,Christian Müller,0,0,2012-01-04 20:31:56+00:00,2012-01-04 21:18:28+00:00,See Nabble for details,
0,CAMEL-4861,Test,Major,None,None,"
None
",Closed,Fixed,None,Unassigned,Stefan Boller,0,0,2012-01-04 11:51:29+00:00,2012-01-04 11:52:08+00:00,No Desc,
0,CAMEL-4860,Task,Trivial,2.9.0,None,"
None
",Resolved,Fixed,"2.9.1, 2.10.0",Babak Vahdat,Babak Vahdat,0,0,2012-01-04 11:48:30+00:00,2012-01-04 16:46:24+00:00,See http://ccil.org/~cowan/XML/tagsoup/CHANGES,"bvahdat:1325649144:2012-01-04T11:52:24.813+0000:1325649144:2012-01-04T11:52:24.813+0000:The Wiki[1] is also to be updated, however the page doesn't exist yet. The patch also contains minor CS-Fixes for the class

{code}
org.apache.camel.dataformat.tagsoup.TidyMarkupDataFormat
{code} 


[1] https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.9.1+Release
bvahdat:1325649481:2012-01-04T11:58:01.670+0000:1325649481:2012-01-04T11:58:01.670+0000:And of course the new 1.2.1 release is already available [1] by the central rep.

[1] http://repo1.maven.apache.org/maven2/org/ccil/cowan/tagsoup/tagsoup/1.2.1/
davsclaus:1325666784:2012-01-04T16:46:24.597+0000:1325666784:2012-01-04T16:46:24.597+0000:Thanks for the patch."
0,CAMEL-4859,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Ioannis Canellos,Ioannis Canellos,0,1,2012-01-04 08:42:46+00:00,2012-07-06 09:24:38+00:00,"It would be nice to have a camel component for apache avro.
The component ideally would provide:
i) a data format for marshaling / unmarshaling avro objects.
ii) Producer & Consumer for avro ipc (which is actually avro over netty).","iocanel:1325637843:2012-01-04T08:44:03.661+0000:1325637843:2012-01-04T08:44:03.661+0000:I found something similar on github: https://github.com/sgargan/camel-avro.
Maybe we could ask the user if he is interesting in contributing it to camel.
iocanel:1325637921:2012-01-04T08:45:21.011+0000:1325637921:2012-01-04T08:45:21.011+0000:We will need avro OSGi ready.
iocanel:1328277663:2012-02-03T22:01:03.303+0000:1328277663:2012-02-03T22:01:03.303+0000:Couldn't contact the user and took a stub at it from scratch.
Committed a first draft of the component. Will add documentation soon.
iocanel:1328611076:2012-02-07T18:37:56.998+0000:1328611076:2012-02-07T18:37:56.998+0000:Ok I managed to get in touch with Steve Gargan and he is willing to share his work with us.
So I would like to make use of some of his ideas, which I really find interesting.
davsclaus:1341537878:2012-07-06T09:24:38.188+0000:1341537878:2012-07-06T09:24:38.188+0000:There is now a camel-avro component with docs and osgi features file etc"
0,CAMEL-4858,Bug,Major,"2.8.3, 2.9.0","2.7.5, 2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.1",Claus Ibsen,Claus Ibsen,0,0,2012-01-04 07:15:51+00:00,2012-01-04 08:26:36+00:00,"See CAMEL-747


We should return an empty String instead of a Void.class, as this works with both JDK + Saxon XPathEngine.
Saxon does not work with the Void.class.","davsclaus:1325636796:2012-01-04T08:26:36.560+0000:1325636796:2012-01-04T08:26:36.560+0000:The workaround is to not use $headerName but a Camel function, using the Camel function namespace, to use the header function.

See details at: http://camel.apache.org/xpath"
0,CAMEL-4857,Bug,Major,2.9.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Alexander Azarov,0,5,2012-01-03 17:08:22+00:00,2013-05-02 02:29:56+00:00,"A project with a test case is here: https://github.com/alaz/camel290_uri


The test case with the problem description (the problem occured during migration of camel-beanstalk https://github.com/osinka/camel-beanstalk component onto 2.9.0):


UriTest.java
package camel290.uri;

import java.util.Map;
import org.apache.camel.Consumer;
import org.apache.camel.Endpoint;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.impl.DefaultComponent;
import org.apache.camel.impl.DefaultEndpoint;
import org.apache.camel.test.CamelTestSupport;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class UriTest extends CamelTestSupport {

  /**
   * An URI of Camel Beanstalk component consists of a hostname, port and a list
   * of tube names. Tube names are separated by ""+"" character (which is more or less
   * usualy used on the Web to make lists), but every tube name may contain URI special
   * characters like ? or +
   */

  class MyEndpoint extends DefaultEndpoint {
    String uri = null;
    String remaining = null;

    public MyEndpoint(final String uri, final String remaining) {
      this.uri = uri;
      this.remaining = remaining;
    }

    public Producer createProducer() throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public Consumer createConsumer(Processor prcsr) throws Exception {
      throw new UnsupportedOperationException(""Not supported yet."");
    }

    public boolean isSingleton() {
      return true;
    }
  }

  class MyComponent extends DefaultComponent {
    @Override
    protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {
      return new MyEndpoint(uri, remaining);
    }
  }

  @Before
  @Override
  public void setUp() throws Exception {
    super.setUp();
    context.addComponent(""my"", new MyComponent());
  }

  @Test
  public void testExclamationInUri() {
    /**
     * %3F is not an ?, it's part of tube name.
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B+tube%3F"", MyEndpoint.class);
    assertNotNull(""endpoint"", endpoint);
  }

  @Test
  public void testPath() {
    /**
     * Here a tube name is ""tube+"" and written in URI as ""tube%2B"", but it gets
     * normalized, so that an endpoint sees ""tube1+tube+""
     */
    MyEndpoint endpoint = context.getEndpoint(""my:host:11303/tube1+tube%2B"", MyEndpoint.class);
    assertEquals(""Path contains several tube names, every tube name may have + or ? characters"", ""host:11303/tube1+tube%2B"", endpoint.remaining);
  }
}","njiang:1325638514:2012-01-04T08:55:14.162+0000:1325638514:2012-01-04T08:55:14.162+0000:The issue is caused by CAMEL-4425, now camel is try to turn the encoded uri string to be a normalized one. That is why the ""%2B"" is changed to ""+"", ""%3F"" is changed to ""?"" at the end.

It think we need to find a way to resolve the issue of using unsafe uri code in camel uri. 

Willem


davsclaus:1326925993:2012-01-19T06:33:13.711+0000:1326925993:2012-01-19T06:33:13.711+0000:CAMEL-4256 is the real cause. It is too restrictive in terms of URI flexibility. We need to open up this so the component writers have the power back again, and can totally decide how to handle uri's in their components.
davsclaus:1326931543:2012-01-19T08:05:43.630+0000:1326931543:2012-01-19T08:05:43.630+0000:I noticed that CAMEL-4256 or thereabouts also broke some previous URI validation. For example we have a check for double ampersand, that is now being normalized into an empty parameter """" -> null. 
hadrian:1338808711:2012-06-04T19:18:31.298+0000:1338808711:2012-06-04T19:18:31.298+0000:I beg to differ.

The question is not if Camel is too restrictive, but rather if camel uses URIs or not. What a URI is and isn't is clearly defined by a spec. The changes for CAMEL-4256 were intended to still support the invalid uris we now use in Camel and provide a migration path for 3.0. If some scenarios were missed, that can be fixed.

However the question still remains, does Camel use URIs or not? Today, I wouldn't know how to define the concept of URI flexibility. I totally agree that that component writers should have complete control on how to handle URIs but those should be URIs to start with. That's not the case today, is it?
bvahdat:1338814909:2012-06-04T21:01:49.221+0000:1338816390:2012-06-04T21:26:30.673+0000:IMHO the *CORE* question should not be if Camel uses URIs correctly or not but more important than that if Camel is *REALLY* 100% backward-compatible by it's minor releases which to my understanding is much much more important than to be 100% IETF RFC_XYZ complaint.

In this concrete case the user reporting this issue (on Jan. 3rd) was struggling to upgrade to a newer Camel version a day before (on Jan. 2nd) which then ended up with:
https://plus.google.com/103504600126086444972/posts/5q1aFtYLryi

@Alexander please correct me if I'm wrong.

Anyway, I think this's really sad :-(
hadrian:1338817874:2012-06-04T21:51:14.095+0000:1338817874:2012-06-04T21:51:14.095+0000:@Babak,

Although we never were 100% backward compatible in minor releases, the intent is to be 100% backwards compatible. The incompatibility only crept in, I believe, because there are no unit tests for enough variations of URIs. When the changes got committed all the tests passed and it's not like existing tests were deleted or we introduced incompatibilities on purpose. We do strive to be 100% backwards compatible on patch releases though and we are, with very rare exceptions.

I was the one publishing that release, and believe it or not, vanity wasn't among the reasons. Sad? Maybe. I have a long list myself. 

That said, I totally agree that the the camel-core should be more stable and less incompatibilities should be introduced on minor releases. We can discuss on dev@ if and how this could be achieved.

azarov:1338852604:2012-06-05T07:30:04.684+0000:1339128108:2012-06-08T12:01:48.447+0000:[~bvahdat], please do not build your proofs based on my old emotions. In the end of a day, I'm rational in my decisions.

I perfectly understand every release may bring some bugs. [~hadrian] explains there were incomplete test coverage of URIs.

I still wonder why no Camel users have been affected by the same issue, since URI is the main transport of transmitting settings into Camel components. Anyway (a) the number of camel-beanstalk component users is very small and no one complained; (b) the number of voters/watchers of this issue shows no significant interest. Hence, if nobody needs it, it seems logical to postpone the fix.
bvahdat:1338858851:2012-06-05T09:14:11.439+0000:1338858851:2012-06-05T09:14:11.439+0000:@Alexander I'm absolutely aware of the fact that through providing that link I did abash you, I'm REALLY sorry for that and please accept my apologies  :-(

However my ONLY INTENTION was to show how frustrating an update could be, that's it! IMHO we had better postponed these URI issues and discussions for the Camel 3 roadmap to AVOID taking any risks and also breaking the existing behaviour given through the minor releases.
muellerc:1339077859:2012-06-07T22:04:19.332+0000:1339077859:2012-06-07T22:04:19.332+0000:I will go through this until end of this week...
davsclaus:1347591442:2012-09-14T10:57:22.332+0000:1347591442:2012-09-14T10:57:22.332+0000:A patch which allows component writers to control if the uri should be raw or encoded (default as now). 

davsclaus:1348526923:2012-09-25T06:48:43.229+0000:1348526923:2012-09-25T06:48:43.229+0000:Introduced {{useRawUri}} method to {{Component}} which gives component writers full power."
0,CAMEL-4856,Task,Minor,2.9.0,2.9.1,"
None
",Resolved,Fixed,2.9.1,Claus Ibsen,Martin,0,0,2012-01-03 15:59:30+00:00,2012-01-03 16:49:53+00:00,"Online Netty docs do not show new receiveBufferSizePredictor option


http://camel.apache.org/netty.html",davsclaus:1325580593:2012-01-03T16:49:53.342+0000:1325580593:2012-01-03T16:49:53.342+0000:Updated wiki page
0,CAMEL-4855,Sub-task,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Chad Beaulac,1,2,2012-01-03 13:28:30+00:00,2013-08-07 07:01:38+00:00,"Checkout the instructions here:
http://camel.apache.org/add-new-component-guide.html","davsclaus:1339219038:2012-06-09T13:17:18.192+0000:1339219038:2012-06-09T13:17:18.192+0000:lets keep camel-mina2 in progress, so we have time to make those improvements we want, before putting out docs and whatnot. So pushing this for Camel 2.11
davsclaus:1375830098:2013-08-07T07:01:38.654+0000:1375830098:2013-08-07T07:01:38.654+0000:I added a wiki page"
0,CAMEL-4854,Bug,Major,2.8.2,"2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.8.4, 2.9.1",Claus Ibsen,Marcin,0,0,2012-01-03 13:04:39+00:00,2012-01-03 17:03:19+00:00,"Take BAM example from http://camel.apache.org/bam-example.html  (or any other one, it doesn't matter).


Here is the one I'm using:


        ActivityBuilder request = activity(""eaiBroker:topic:SOME_TOPIC?concurrentConsumers=1"").name(""Request"")
                .correlate(xpath(""/MessageRequest/@Id"").stringResult());


        ActivityBuilder response = activity(""eaiBroker:topic:SOME_OTHER_TOPIC?concurrentConsumers=1"").name(""Response"")
                .correlate(xpath(""MessageResponse/@Id"").stringResult());


        response
                .starts().after(request.completes())
                .expectWithin(seconds(15))
                .errorIfOver(seconds(30))
                .to(""log:com.eai?level=error"");


 First run of the application and everything works. Restart application and try to activate one of BAM rules, there will be an exception that database constraint has been violated. Every time application is started, Camel tries to do following sql insert


insert into CAMEL_ACTIVITYDEFINITION (name, processDefinition_id, id) values (?, ?, ?)


but name columne must be unique in CAMEL_ACTIVITYDEFINITION .


Workaround for this is to purge BAM tables every time you want to restart the application, but it's not a solution.","marcin84:1325571860:2012-01-03T14:24:20.036+0000:1325571860:2012-01-03T14:24:20.036+0000:I tried to solve on my own, and the problem occurs because of invalid XML configuration. The BAM example that is in binary distribution 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <property name=""jpaTemplate"" ref=""jpaTemplate""/>
        <property name=""transactionTemplate"" ref=""transactionTemplate""/>
    </bean>

should be changed to 

<bean id=""activities"" class=""org.apache.camel.example.bam.MyActivities"">
        <constructor-arg><ref bean=""jpaTemplate""/></constructor-arg>
        <constructor-arg><ref bean=""transactionTemplate""/></constructor-arg>
    </bean>

Second version calls valid constructor for ProcessBuilder which creates ProcessName. The first one leaves process name as null.
davsclaus:1325581399:2012-01-03T17:03:19.172+0000:1325581399:2012-01-03T17:03:19.172+0000:I fixed the ProcessBuilder in camel-bam to create the processor name if not explicit configured."
0,CAMEL-4853,Improvement,Major,2.9.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-03 11:45:29+00:00,2012-04-09 15:38:18+00:00,"It should be easier to use a custom thread pool for the mina consumer, in case you use it in sync mode, where the consumer thread would then be synchronous, and thus take up a thread. So in case you put load on the mina consumer, it will use up the default thread pool size of 10 threads.


We should add documentation in the wiki, how to use a custom thread pool / and pool profile.


See nabble
http://camel.465427.n5.nabble.com/inflight-exchange-and-queue-of-apache-camel-tp5112396p5112396.html",davsclaus:1333957098:2012-04-09T15:38:18.924+0000:1333957098:2012-04-09T15:38:18.924+0000:Using threading model more accordingly to mina doc/recommendations. Ensure thread pools is also shutdown if shutting down the endpoint that created them.
0,CAMEL-4852,Sub-task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Raúl Kripalani,Raúl Kripalani,0,0,2012-01-03 11:44:58+00:00,2012-01-16 13:37:25+00:00,"Create a new option traceNamespaces which audits/analyses/extracts all namespaces present in the incoming message and logs them out, in order to help detect potential issues with namespace referencing in XPath expressions.


Since JAXP doesn't provide any mechanism to discover namespaces, this behaviour should be implemented with an XPath query.
To be used only in development mode, as the entire XML document will be traversed in order to discover the [prefix -> namespace URI/URL] pairs.


The default namespace should be discovered and output too.


For each message, if the traceNamespaces option is active, Camel should dump a line similar to the following:
E.g.: 

{xmlns:nsb=[http://namespaceb.net], xmlns:nsa=[http://namespacec.net, http://namespacea.net], DEFAULT=[http://defaultNamespace.net]}

 


If a prefix is declared multiple times, two things can happen:



The prefix is always bound to the same namespace
The prefix is bound to different namespaces in different parts of the XML document



In the first case, the duplicate should be eliminated in the log line. In the second case, the prefix should appear bound to all unique namespaces (see prefix nsa in the above example).


Additionally, when a new XPath expression / predicate is initialised, Camel should dump the NamespaceContext of the expression, so that the user can then compare the namespaces known by the expression against the namespaces that exist in the incoming message.","raulvk:1325563997:2012-01-03T12:13:17.853+0000:1325563997:2012-01-03T12:13:17.853+0000:Patch attached in CAMEL-4799.

All new logging output in TRACE level.

Namespace auditing in incoming message can be activated in Spring DSL by setting the traceNamespaces attribute to true (traceNamespace=true) or in Java DSL by using .traceNamespaces().

Tricky part was the unit test. To verify that the logging occurs, I mocked out the SLF4j Logger using EasyMock and replaced the private static final LOG variable in XPathBuilder via Java Reflection. All this is done in {{org.apache.camel.builder.xml.XPathTransformTest}}.
raulvk:1326692245:2012-01-16T13:37:25.522+0000:1326692245:2012-01-16T13:37:25.522+0000:Documentation added on the XPath Expression Language page."
0,CAMEL-4851,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Christian Müller,Claus Ibsen,0,2,2012-01-02 10:35:05+00:00,2013-01-07 13:16:20+00:00,"We should cleanup the wiki documentation, and remove the old Camel 1.x only documentation pieces.


Some end users may by mistake read the 1.x documentation and think that it applies for their current 2.x Camel apps.


See nabble
http://camel.465427.n5.nabble.com/DISCUSS-Remove-Camel-1-x-only-material-from-the-wiki-documentation-td5107266.html","muellerc:1347024378:2012-09-07T21:26:18.886+0000:1347024378:2012-09-07T21:26:18.886+0000:I went through our components and languages and removed the 1.x only documentation pieces.
muellerc:1347070542:2012-09-08T10:15:42.678+0000:1347070542:2012-09-08T10:15:42.678+0000:Now I went also through all the other pages. Only the examples documentations needs an update...
davsclaus:1348789780:2012-09-28T07:49:40.341+0000:1348789780:2012-09-28T07:49:40.341+0000:Great work. Lets get this done before the 2.11 release then, if there is only the examples missing."
0,CAMEL-4850,Bug,Minor,"2.8.3, 2.9.0","2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.8.4, 2.9.1",Claus Ibsen,Claus Ibsen,0,0,2012-01-02 10:08:21+00:00,2012-01-02 10:51:19+00:00,"See nabble
http://camel.465427.n5.nabble.com/Continuation-of-NPE-for-FTP-endpoint-tp5107992p5107992.html


The workaround is to not use double slashes.


This may also affect using a root as absolute path for FTP consumer, as the starting directory will be interpreted as empty.",
0,CAMEL-4849,Improvement,Minor,None,2.10.0,"
None
",Closed,Fixed,2.10.0,Bilgin Ismet Ibryam,Claus Ibsen,0,0,2012-01-02 09:00:41+00:00,2012-01-13 20:37:23+00:00,"If you use the properties component, then you may specify an optional resource for custom properties. For example for developers to have on their local laptop. We should add an option to the properties component to allow to ignore non existing resources.","davsclaus:1325466067:2012-01-02T09:01:07.371+0000:1325466067:2012-01-02T09:01:07.371+0000:The option should also be exposed in the XML DSL, for the <propertyPlaceholder> tag
bibryam:1326358972:2012-01-12T17:02:52.923+0000:1326358972:2012-01-12T17:02:52.923+0000:I think the tests can be improved a little bit but overall is ok.
Also noticed that uri option is called locations, whereas the xml attribute is location. Chose the new option name: ignoreMissingLocation
davsclaus:1326441720:2012-01-13T16:02:00.619+0000:1326441720:2012-01-13T16:02:00.619+0000:Thanks Bilgin for the patch.

I fixed CS and updated the wiki documentation as well.
bibryam:1326458243:2012-01-13T20:37:23.371+0000:1326458243:2012-01-13T20:37:23.371+0000:Thanks Calus. You haven't left anything for me then :)"
0,CAMEL-4848,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2012-01-02 06:51:21+00:00,2012-01-02 07:57:40+00:00,"The prefix and suffix tokens from the property placeholders, which has been quoted should be skipped. As it should be regarded as literal.


For example:



""'{{' + someStuffHere + '}}'""




For example as part of a groovy script.",
0,CAMEL-4847,Task,Major,2.9.0,2.10.0,"
None
",Resolved,Duplicate,2.10.0,Willem Jiang,Christian Müller,0,0,2012-01-01 21:37:56+00:00,2012-06-02 12:17:49+00:00,"Pax Exam 2.3.0 is releases. At present we use 1.2.4. We should consider to upgrade to this version.


They fixed 104 issues since 1.2.4 was released.
Query: project = PAXEXAM AND fixVersion > '1.2.4' AND fixVersion <= '2.3.0'",
0,CAMEL-4846,Task,Major,"2.8.3, 2.9.0",None,"
None
",Closed,Fixed,"2.8.4, 2.9.1, 2.10.0",Christian Müller,Christian Müller,0,0,2012-01-01 21:14:51+00:00,2012-01-07 17:48:12+00:00,"'mvn -e apache-rat:check' reported the following issues:



Christian-Muellers-MacBook-Pro:camel cmueller$ grep -e ' !?????' target/rat.txt
 !????? components/camel-cache/src/main/resources/ehcache.xml
 !????? components/camel-cache/src/main/resources/xpathreplacer.xsl
 !????? components/camel-cxf-transport/src/main/resources/META-INF/cxf/bus-extensions.txt
 !????? components/camel-irc/src/test/unrealircd/ircd.motd
 !????? components/camel-irc/src/test/unrealircd/unrealircd.conf
 !????? components/camel-javaspace/src/main/resources/policy.all
 !????? components/camel-jdbc/derby.log
 !????? components/camel-protobuf/pom.xml
 !????? components/camel-servlet/pom.xml
 !????? components/camel-sip/src/main/resources/log4j.properties
 !????? components/camel-spring-security/pom.xml
 !????? components/camel-sql/derby.log
 !????? components/camel-web/src/main/resources/application-doc.xml
 !????? components/camel-web/src/main/resources/application-grammars.xml
 !????? components/camel-web/src/main/webapp/css/prettify/prettify.css
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.api.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.systemProperties.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ComponentResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ComponentsResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ConvertersFromResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ConvertersResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointResource.send.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointsResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ExchangeResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/LanguageResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/LanguagesResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RouteResource.edit.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RouteResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.create.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/snippets/camelContextLinks.ssp
 !????? examples/camel-example-gae/pom.xml
 !????? examples/camel-example-gae/src/main/webapp/index.html
 !????? examples/camel-example-gauth/pom.xml
 !????? examples/camel-example-gauth/src/main/webapp/index.html
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/authorize.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/bottom.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/calendar.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/top.jsp
 !????? examples/camel-example-reportincident/src/main/resources/etc/MailBody.vm
 !????? examples/camel-example-reportincident-wssecurity/src/main/resources/etc/MailBody.vm
 !????? examples/camel-example-servlet-tomcat/src/main/webapp/index.html
 !????? examples/camel-example-simplejirabot/javadsl/pom.xml
 !????? examples/camel-example-simplejirabot/xmlconf/pom.xml
 !????? examples/camel-example-spring-security/client/access-admin-as-bob.sh
 !????? examples/camel-example-spring-security/client/access-admin-as-jim.sh
 !????? examples/camel-example-spring-security/client/access-user-as-jim.sh
 !????? examples/camel-example-spring-security/client/access-user-no-auth.sh
 !????? examples/camel-example-spring-xquery/src/main/resources/myTransform.xquery
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/imap
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/org.jvnet.mock_javamail.MockStore
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/org.jvnet.mock_javamail.MockTransport
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/pop3
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/smtp
 !????? tooling/camel-manual/src/styles/print.css",
0,CAMEL-4845,Task,Major,2.7.4,None,"
None
",Closed,Fixed,2.7.5,Christian Müller,Christian Müller,0,0,2012-01-01 18:48:54+00:00,2012-01-01 20:52:54+00:00,"'mvn -e apache-rat:check' reported the following issues:



Christian-Muellers-MacBook-Pro:camel cmueller$ grep -e ' !?????' target/rat.txt
 !????? components/camel-cache/src/main/resources/ehcache.xml
 !????? components/camel-cache/src/main/resources/xpathreplacer.xsl
 !????? components/camel-context/src/main/resources/META-INF/services/org/apache/camel/TypeConverter
 !????? components/camel-cxf/src/main/resources/META-INF/cxf/cxf.extension
 !????? components/camel-dns/src/main/resources/META-INF/services/org/apache/camel/TypeConverter
 !????? components/camel-javaspace/src/main/resources/policy.all
 !????? components/camel-protobuf/pom.xml
 !????? components/camel-protobuf/src/test/java/org/apache/camel/dataformat/protobuf/generated/AddressBookProtos.java
 !????? components/camel-scala/src/main/scala/org/apache/camel/scala/RichMessage.scala
 !????? components/camel-servlet/pom.xml
 !????? components/camel-sip/src/main/resources/log4j.properties
 !????? components/camel-snmp/src/main/resources/META-INF/services/org/apache/camel/TypeConverter
 !????? components/camel-spring-security/pom.xml
 !????? components/camel-web/src/main/resources/application-doc.xml
 !????? components/camel-web/src/main/resources/application-grammars.xml
 !????? components/camel-web/src/main/webapp/css/prettify/prettify.css
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.api.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/CamelContextResource.systemProperties.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ComponentResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ComponentsResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ConvertersFromResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ConvertersResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointResource.send.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/EndpointsResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/ExchangeResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/LanguageResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/LanguagesResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RouteResource.edit.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RouteResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.create.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/org/apache/camel/web/resources/RoutesResource.index.ssp
 !????? components/camel-web/src/main/webapp/WEB-INF/snippets/camelContextLinks.ssp
 !????? examples/camel-example-axis/src/main/resources/axis-example-context.xml
 !????? examples/camel-example-axis/src/main/webapp/WEB-INF/server-config.wsdd
 !????? examples/camel-example-axis/src/main/webapp/WEB-INF/web.xml
 !????? examples/camel-example-axis/src/main/webapp/WEB-INF/wsdl/report_incident.wsdl
 !????? examples/camel-example-gae/pom.xml
 !????? examples/camel-example-gae/src/main/resources/context.xml
 !????? examples/camel-example-gae/src/main/webapp/index.html
 !????? examples/camel-example-gae/src/main/webapp/WEB-INF/appengine-web.xml
 !????? examples/camel-example-gae/src/main/webapp/WEB-INF/web.xml
 !????? examples/camel-example-gauth/pom.xml
 !????? examples/camel-example-gauth/src/main/webapp/index.html
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/authorize.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/bottom.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/calendar.jsp
 !????? examples/camel-example-gauth/src/main/webapp/WEB-INF/jsp/top.jsp
 !????? examples/camel-example-reportincident/src/main/resources/etc/MailBody.vm
 !????? examples/camel-example-reportincident-ws-security-osgi/src/main/resources/etc/MailBody.vm
 !????? examples/camel-example-servlet-tomcat/src/main/webapp/index.html
 !????? examples/camel-example-simplejirabot/javadsl/pom.xml
 !????? examples/camel-example-simplejirabot/xmlconf/pom.xml
 !????? examples/camel-example-spring-security/client/access-admin-as-bob.sh
 !????? examples/camel-example-spring-security/client/access-admin-as-jim.sh
 !????? examples/camel-example-spring-security/client/access-user-as-jim.sh
 !????? examples/camel-example-spring-security/client/access-user-no-auth.sh
 !????? examples/camel-example-spring-xquery/src/main/resources/myTransform.xquery
 !????? tests/camel-itest-osgi/src/test/java/org/apache/camel/dataformat/protobuf/generated/AddressBookProtos.java
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/imap
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/org.jvnet.mock_javamail.MockStore
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/org.jvnet.mock_javamail.MockTransport
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/pop3
 !????? tests/test-bundles/mock-javamail_1.7/src/main/resources/META-INF/services/smtp
 !????? tooling/camel-manual/src/styles/print.css",
0,CAMEL-4844,Improvement,Minor,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-31 14:52:27+00:00,2012-01-02 08:02:18+00:00,"See CAMEL-4843


The embedded simple expression in the route definition, should also support property placeholders, to be resolved before the runtime route is created. Just as we already do for the definitions.


This will also fix that CAMEL-4843 can be done as it was previously done. Before the simple language was improved to do syntax parsing.",
0,CAMEL-4843,Bug,Major,2.9.0,2.9.0,"
None
",Resolved,Not A Problem,2.9.0,Unassigned,Christian Schneider,0,0,2011-12-30 15:50:25+00:00,2011-12-31 09:09:00+00:00,"I spotted a regression when using properties in the simple language.


I have a route like this:



.setHeader(Exchange.HTTP_URI, simple(""{{personServiceUri}}/${header.person_id}""))




and setup the properties component.
In camel 2.8.x the above expression works. In camel 2.9.0 it throws the following exception:


org.apache.camel.language.simple.types.SimpleParserException: functionEnd has no matching start token
	at org.apache.camel.language.simple.BaseSimpleParser.prepareBlocks(BaseSimpleParser.java:125)
	at org.apache.camel.language.simple.SimpleExpressionParser.doParseExpression(SimpleExpressionParser.java:75)
	at org.apache.camel.language.simple.SimpleExpressionParser.parseExpression(SimpleExpressionParser.java:47)
	at org.apache.camel.language.simple.SimpleLanguage.createExpression(SimpleLanguage.java:147)
	at org.apache.camel.builder.SimpleBuilder.createExpression(SimpleBuilder.java:90)
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:80)
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:96)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:105)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)","njiang:1325270909:2011-12-31T02:48:29.899+0000:1325273797:2011-12-31T03:36:37.965+0000:@Christian,
There is a workaround by using 
{code}
simple(""${properties:personServiceUri}/${header.person_id}""
{code}

BTW, I think the properties value should be resolved in the simple expression.
cschneider:1325293598:2011-12-31T09:06:38.175+0000:1325293598:2011-12-31T09:06:38.175+0000:This works. I will change the test accordingly or is this already shown in some test?
cschneider:1325293703:2011-12-31T09:08:23.633+0000:1325293703:2011-12-31T09:08:23.633+0000:Just saw you already changed the test to show how it is done
cschneider:1325293740:2011-12-31T09:09:00.082+0000:1325293740:2011-12-31T09:09:00.082+0000:There is a better way to use properties. So it is fine that this does not work."
0,CAMEL-4842,Bug,Major,"2.8.3, 2.9.0","2.8.4, 2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.8.4, 2.9.1, 2.10.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-30 13:35:34+00:00,2012-01-05 11:11:56+00:00,"If people add routes dynamic and remove the routes later on, we need to remove services which may have been added to the CamelContext services list. For example the ProducerCache by SendProcessor etc.


This will ensure that the ProducerCache can be GC'ed.","davsclaus:1325223349:2011-12-30T13:35:49.522+0000:1325223349:2011-12-30T13:35:49.522+0000:See nabble
http://camel.465427.n5.nabble.com/ProducerCache-memory-leak-tp5108206p5108206.html
davsclaus:1325657243:2012-01-04T14:07:23.263+0000:1325657243:2012-01-04T14:07:23.263+0000:When using route scoped onException in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown.
davsclaus:1325661370:2012-01-04T15:16:10.736+0000:1325661370:2012-01-04T15:16:10.736+0000:Fixed the route scoped onException issue
davsclaus:1325729366:2012-01-05T10:09:26.517+0000:1325729366:2012-01-05T10:09:26.517+0000:When using route scoped onCompletion in routes, then we should shutdown them as well, as they are route scoped to the given route being shutdown."
0,CAMEL-4841,Bug,Minor,2.8.3,"2.7.5, 2.8.4, 2.10.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.10.0",Willem Jiang,Anton Koscejev,0,0,2011-12-29 16:00:47+00:00,2011-12-30 08:49:09+00:00,"URI with empty path, but non-empty query part is not properly normalized. The query part is in fact duplicated. E.g, URI ""foobar://?foo=1&bar=2"" is incorrectly normalized to ""foobar://?foo=1&bar=2?bar=2&foo=1"".


This is caused by incorrect identification of the path part in org.apache.camel.util.URISupport.normalizeUri(String):
        int idx = path.indexOf('?');
        if (idx > 0) 

{
            path = path.substring(0, idx);
        }


The comparison of ""idx > 0"" is incorrect, because this way, if '?' is the first character, the path is not set to empty string. The correct comparison should be ""idx > -1"" or ""idx >= 0"" or even just ""idx != -1"" since that's the only value that String.indexOf returns when the character is not found.","njiang:1325206149:2011-12-30T08:49:09.780+0000:1325206149:2011-12-30T08:49:09.780+0000:Applied patch into trunk, camel-2.8.x, camel-2.7.x branch."
0,CAMEL-4840,Task,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,David Valeri,Claus Ibsen,0,0,2011-12-29 08:52:19+00:00,2012-03-01 22:56:42+00:00,"The camel-test component supports currently both JUnit 3.x and 4.x,
each in separate package.
Supporting both requires us to have a fair amount of duplicated code,
one for 3.x and another for 4.x.


I suggest to @deprecated the JUnit 3.x part of the camel-test component.
Then we can remove support for 3.x in Camel 3.0.


See nabble
http://camel.465427.n5.nabble.com/PROPOSAL-camel-test-deprecate-JUnit-3-x-API-tp5105436p5105436.html",davaleri:1330613802:2012-03-01T22:56:42.062+0000:1330613802:2012-03-01T22:56:42.062+0000:Code and documentation updated.
0,CAMEL-4839,Improvement,Major,2.6.0,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Willem Jiang,Mark,0,0,2011-12-29 00:25:34+00:00,2012-01-05 05:51:39+00:00,"I'm trying to use Camel (v 2.6.0) JMS Request/Reply with Websphere 7 using Websphere MQ.  I'm successfully able to put the request message onto the queue using the following URI: 


jms:queue:inboundQueue?connectionFactory=#connectionFactory&taskExecutor=#taskExecutor&transactionManager=#transactionManager&cacheLevelName=CACHE_NONE&replyTo=outboundQueue&requestTimeout=120000 


Note: I have to use cacheLevelName=CACHE_NONE in order for this to work on Websphere. 


However, when Camel creates the PersistentQueueMessageListenerContainer to read the reply message, it is hard coding the cache level to CACHE_SESSION (see PersistentQueueReplyManager.java line 192).  What happens is that Camel is successfully able to read the reply off the queue, but then spits out the following error repeatedly: 


23 Dec 2011 09:23:32,427|||WorkManager.DefaultWorkManager : 3||WARN |org.springframework.jms.listener.DefaultMessageListenerContainer|Setup of JMS message listener invoker failed for destination 'outboundQueue' - trying to recover. Cause: Connection closed 


I believe this is due to the PersistentQueueMessageListenerContainer using a cache level of CACHE_SESSION instead of CACHE_NONE. 


Can Camel be enhanced to have the ability to set the cache level on the reply queue?","wingtung.leung:1325489979:2012-01-02T15:39:39.282+0000:1325489979:2012-01-02T15:39:39.282+0000:Maybe something you can try easily in your application: overriding the complete ""PersistentQueueReplyManager"" implementation with your own ""hacked"" version, with the cache level set to ""CACHE_NONE"", and see if it fixes your problem? I worked around some bug in 2.6.0 this way, and this may ""prove"" the correctness of the fix?


dichotomy:1325600798:2012-01-03T22:26:38.634+0000:1325600798:2012-01-03T22:26:38.634+0000:I have already overridden the PersistentQueueReplyManager class to set the cache level to CACHE_NONE and this works with Websphere.
davsclaus:1325713899:2012-01-05T05:51:39.145+0000:1325713899:2012-01-05T05:51:39.145+0000:Updated wiki page as well"
0,CAMEL-4838,Improvement,Minor,None,2.9.1,"
None
",Resolved,Fixed,2.9.1,Willem Jiang,Glen Mazza,0,0,2011-12-28 16:31:31+00:00,2011-12-29 09:10:31+00:00,No Desc,njiang:1325121030:2011-12-29T09:10:30.945+0000:1325121030:2011-12-29T09:10:30.945+0000:Applied patch with thanks to Glen.
0,CAMEL-4837,Task,Major,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,Claus Ibsen,0,0,2011-12-28 09:48:13+00:00,2012-02-17 03:40:45+00:00,"We should use dynamic port number assignments in tests\camel-itest.


This avoids CI servers to fail with
java.net.BindException: Address already in use
	at sun.nio.ch.Net.bind(Native Method)",
0,CAMEL-4836,Task,Minor,None,2.9.1,"
None
",Resolved,Fixed,2.9.1,Willem Jiang,Willem Jiang,0,0,2011-12-28 03:39:18+00:00,2011-12-28 09:37:37+00:00,"As the smack 3.2.1 maven artifacts are in the maven central, we need to think about upgrading the version to get ride of the dependency of other maven repo.",njiang:1325036257:2011-12-28T09:37:37.031+0000:1325036257:2011-12-28T09:37:37.031+0000:Applied the patch into trunk.
0,CAMEL-4835,Improvement,Major,None,"2.7.5, 2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.1",Willem Jiang,Willem Jiang,0,0,2011-12-28 01:45:15+00:00,2011-12-28 11:42:14+00:00,It is useful for the user to lookup the CXF message instance from camel message header.,"njiang:1325043734:2011-12-28T11:42:14.749+0000:1325043734:2011-12-28T11:42:14.749+0000:Applied patch into trunk, camel-2.8.x, camel-2.7.x branch."
0,CAMEL-4834,Improvement,Major,None,"2.7.5, 2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.1",Willem Jiang,Willem Jiang,0,0,2011-12-28 01:32:53+00:00,2011-12-28 11:43:15+00:00,"If we don't specify the file location of the properties component, it will try to load the properties from the system environment.","njiang:1325043795:2011-12-28T11:43:15.467+0000:1325043795:2011-12-28T11:43:15.467+0000:Applied patch into trunk, camel-2.8.x and camel-2.7.x branches."
0,CAMEL-4833,Bug,Critical,2.9.0,2.9.0,"

karaf
osgi
spring-ws

",Closed,Not A Problem,2.9.0,Unassigned,Christian Müller,0,0,2011-12-27 22:00:34+00:00,2011-12-28 20:43:44+00:00,"Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / ///___ __________ _/ __/      
      / ,<  / __ `/ __/ __ `/ / 
     / /| |/ // / /  / // / __/        
    // ||_,//   _,//         


  Apache Karaf (2.2.5)


Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.


karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-spring-ws 
2011-12-27 22:57:32.760:INFO:oejs.Server:jetty-7.5.4.v20111024
2011-12-27 22:57:32.789:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8181 STARTING
Error executing command: Could not start bundle mvn:org.springframework.ws/spring-ws-core/2.0.3.RELEASE in feature(s) camel-spring-ws-2.9-SNAPSHOT: Unable to resolve module org.springframework.ws [100.0] because it is exposed to package 'javax.activation' from org.apache.felix.framework [0] and org.apache.servicemix.specs.activation-api-1.1 [63.0] via two dependency chains.


Chain 1:
  org.springframework.ws [100.0]
    import: (&(package=javax.activation)(version>=0.0.0))










    export: package=javax.activation
  org.apache.felix.framework [0]


Chain 2:
  org.springframework.ws [100.0]
    import: (&(package=org.springframework.oxm.mime)(version>=3.0.6)(!(version>=4.0.0)))










    export: package=org.springframework.oxm.mime; uses:=javax.activation
  org.springframework.oxm [97.0]
    import: (&(package=javax.activation)(version>=0.0.0))










    export: package=javax.activation
  org.apache.servicemix.specs.activation-api-1.1 [63.0]","muellerc:1325035889:2011-12-28T09:31:29.560+0000:1325035889:2011-12-28T09:31:29.560+0000:It works with the jre.properties.cxf.

I will close this issue, but we should document this for our users in the release notes!
muellerc:1325076224:2011-12-28T20:43:44.794+0000:1325076224:2011-12-28T20:43:44.794+0000:I added a notice to the Camel 2.9.0 release notes"
0,CAMEL-4832,Bug,Critical,2.9.0,2.9.0,"

karaf
mail
osgi

",Closed,Not A Problem,2.9.0,Unassigned,Christian Müller,0,0,2011-12-27 21:58:23+00:00,2011-12-28 20:45:15+00:00,"Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / ///___ __________ _/ __/      
      / ,<  / __ `/ __/ __ `/ / 
     / /| |/ // / /  / // / __/        
    // ||_,//   _,//         


  Apache Karaf (2.2.5)


Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.


karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-mail 
Error executing command: Could not start bundle mvn:org.apache.camel/camel-mail/2.9-SNAPSHOT in feature(s) camel-mail-2.9-SNAPSHOT: Unable to resolve module org.apache.camel.camel-mail [66.0] because it is exposed to package 'javax.activation' from org.apache.felix.framework [0] and org.apache.servicemix.specs.activation-api-1.1 [57.0] via two dependency chains.


Chain 1:
  org.apache.camel.camel-mail [66.0]
    import: (package=javax.activation)










    export: package=javax.activation
  org.apache.felix.framework [0]


Chain 2:
  org.apache.camel.camel-mail [66.0]
    import: (&(package=org.apache.camel.impl)(version>=2.9.0)(!(version>=2.10.0)))










    export: package=org.apache.camel.impl; uses:=javax.xml.bind.annotation
  org.apache.camel.camel-core [63.0]
    import: (package=javax.xml.bind.annotation)










    export: package=javax.xml.bind.annotation; uses:=javax.activation
  org.apache.servicemix.specs.jaxb-api-2.2 [59.0]
    import: (&(package=javax.activation)(version>=1.1.0))










    export: package=javax.activation
  org.apache.servicemix.specs.activation-api-1.1 [57.0]","dkulp:1324996910:2011-12-27T22:41:50.068+0000:1324996910:2011-12-27T22:41:50.068+0000:
Christian, are you using the jre.properties.cxf file from Karaf 2.2.5?   That is likely required.
muellerc:1325035679:2011-12-28T09:27:59.155+0000:1325035679:2011-12-28T09:27:59.155+0000:No, I tested it with the default Karaf jre.properties.
It works with the jre.properties.cxf.

I will close this issue, but we should document this for our users in the release notes!
muellerc:1325076315:2011-12-28T20:45:15.009+0000:1325076315:2011-12-28T20:45:15.009+0000:I added a notice to the Camel 2.9.0 release notes"
0,CAMEL-4831,Bug,Critical,2.9.0,2.9.0,"

cxf
karaf
osgi

",Closed,Not A Problem,2.9.0,Unassigned,Christian Müller,0,0,2011-12-27 20:46:56+00:00,2011-12-28 20:44:23+00:00,"Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / ///___ __________ _/ __/      
      / ,<  / __ `/ __/ __ `/ / 
     / /| |/ // / /  / // / __/        
    // ||_,//   _,//         


  Apache Karaf (2.2.5)


Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.


karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-cxf
2011-12-27 21:39:05.855:INFO:oejs.Server:jetty-7.5.4.v20111024
2011-12-27 21:39:05.877:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8181 STARTING
2011-12-27 21:39:06.061:INFO:oejsh.ContextHandler:started HttpServiceContext{httpContext=DefaultHttpContext{bundle=org.apache.karaf.deployer.features [34]}}
2011-12-27 21:39:07.441:INFO:oejsh.ContextHandler:stopped HttpServiceContext{httpContext=DefaultHttpContext{bundle=org.apache.karaf.deployer.features [34]}}
Error executing command: Could not start bundle mvn:org.apache.cxf/cxf-bundle/2.5.1 in feature(s) cxf-2.5.1: Unable to resolve module org.apache.cxf.bundle [136.0] because it is exposed to package 'javax.xml.bind.attachment' from org.apache.felix.framework [0] and org.apache.servicemix.specs.jaxb-api-2.2 [65.0] via two dependency chains.


Chain 1:
  org.apache.cxf.bundle [136.0]
    import: (&(package=javax.xml.bind.attachment)(version>=0.0.0)(!(version>=3.0.0)))










    export: package=javax.xml.bind.attachment
  org.apache.felix.framework [0]


Chain 2:
  org.apache.cxf.bundle [136.0]
    import: (package=com.sun.tools.xjc.reader.xmlschema.parser)










    export: package=com.sun.tools.xjc.reader.xmlschema.parser; uses:=javax.xml.bind
  org.apache.servicemix.bundles.jaxb-xjc [95.0]
    import: (&(package=javax.xml.bind)(version>=2.2.0)(!(version>=3.0.0)))










    export: package=javax.xml.bind; uses:=javax.xml.bind.attachment
    export: package=javax.xml.bind.attachment
  org.apache.servicemix.specs.jaxb-api-2.2 [65.0]","muellerc:1325035810:2011-12-28T09:30:10.129+0000:1325035810:2011-12-28T09:30:10.129+0000:It works with the jre.properties.cxf.

I will close this issue, but we should document this for our users in the release notes!
muellerc:1325076263:2011-12-28T20:44:23.163+0000:1325076263:2011-12-28T20:44:23.163+0000:I added a notice to the Camel 2.9.0 release notes"
0,CAMEL-4830,Improvement,Major,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,0,0,2011-12-26 14:58:15+00:00,2015-07-11 15:14:26+00:00,"We need to clean up the examples to



only use one technology, instead create a 2nd example if using a different technology
cleanup osgi pieces as CXF and whatnot have improved in this area
use property placeholders for dynamic port number assignments
unit test
do not OSGify every example as some examples should be kept osgi free, to show how to do plain Java, WAR, JEE etc.
polish wiki pages
add more javadoc and code comments
avoid using low level processor code, but use bean with parameter binding for java logic



For example some examples which grow to big and confusing: loan broker, cxf",
0,CAMEL-4829,Improvement,Major,None,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-12-26 03:47:11+00:00,2011-12-26 08:08:55+00:00,"CXF interceptor need to access the Bus instance from the exchange, it is important that we the bus instance on the exchange when sending the Camel message to CXF when Camel is deployed into container.","njiang:1324858135:2011-12-26T08:08:55.570+0000:1324858135:2011-12-26T08:08:55.570+0000:Applied patch into trunk, camel 2.8.x, camel 2.7.x."
0,CAMEL-4828,Bug,Major,2.8.3,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-12-23 20:25:49+00:00,2011-12-24 06:56:14+00:00,"Several Camel features uses javax.xml.stream. If ServiceMix Spec provides the API, it doesn't provide an implementation.


The xml-specs-api feature should ship an implementation, woodstox.","jbonofre:1324679620:2011-12-24T06:33:40.640+0000:1324679620:2011-12-24T06:33:40.640+0000:Fixed on trunk: revision 1222919.
jbonofre:1324680965:2011-12-24T06:56:05.393+0000:1324680965:2011-12-24T06:56:05.393+0000:Fixed on camel-2.8.x: revision 1222924."
0,CAMEL-4827,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-12-23 18:09:03+00:00,2011-12-23 21:51:26+00:00,No Desc,iocanel:1324648286:2011-12-23T21:51:26.648+0000:1324648286:2011-12-23T21:51:26.648+0000:Committed to trunk.
0,CAMEL-4826,Improvement,Trivial,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Glen Mazza,0,0,2011-12-23 12:55:06+00:00,2011-12-27 14:42:57+00:00,"Partial conversion of ""lets do..."" to ""let's do..."", ""allows for doing"", or ""do..."" as appropriate, and associated other nitpicks found.  ""Let's"" retained more where the code is part of an example or tutorial or if it's a matter-of-opinion on how to implement.",davsclaus:1324968177:2011-12-27T14:42:57.853+0000:1324968177:2011-12-27T14:42:57.853+0000:Thanks for the patch.
0,CAMEL-4825,Task,Minor,None,"2.9.1, 2.10.0","
None
",Resolved,Won't Fix,"2.9.1, 2.10.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-12-23 07:44:09+00:00,2012-01-19 03:18:47+00:00,"camel-spring-ws feature requires the same jre.properties tuning as CXF, and it should be mention in the documentation:


Error executing command: Could not start bundle mvn:org.springframework.ws/spring-ws-core/2.0.3.RELEASE in feature(s) camel-spring-ws-2.9-SNAPSHOT: Unable to resolve module org.springframework.ws [95.0] because it is exposed to package 'javax.activation' from org.apache.felix.framework [0] and org.apache.geronimo.specs.geronimo-activation_1.1_spec [67.0] via two dependency chains.


Chain 1:
  org.springframework.ws [95.0]
    import: (&(package=javax.activation)(version>=0.0.0))










    export: package=javax.activation
  org.apache.felix.framework [0]


Chain 2:
  org.springframework.ws [95.0]
    import: (&(package=org.springframework.oxm.mime)(version>=3.0.6)(!(version>=4.0.0)))










    export: package=org.springframework.oxm.mime; uses:=javax.activation
  org.springframework.oxm [92.0]
    import: (&(package=javax.activation)(version>=0.0.0))










    export: package=javax.activation
  org.apache.geronimo.specs.geronimo-activation_1.1_spec [67.0]","davsclaus:1326914327:2012-01-19T03:18:47.463+0000:1326914327:2012-01-19T03:18:47.463+0000:We now have a notice about this on the release notes, in general about Camel + Karaf."
0,CAMEL-4824,Bug,Major,None,2.9.0,"
None
",Resolved,Won't Fix,2.9.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-12-23 07:39:20+00:00,2011-12-24 07:01:25+00:00,"camel-spring-* features directly reference the Spring bundles. It means that we can have version mismatch.


These features should use the Karaf spring features.",
0,CAMEL-4823,Improvement,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-23 05:23:00+00:00,2011-12-23 05:49:57+00:00,"In the log EIP only evaluate the log message if really needed, eg shouldLog returns true",davsclaus:1324589778:2011-12-23T05:36:18.416+0000:1324589778:2011-12-23T05:36:18.416+0000:Not possible to backport easily as the logger has changed and API moves in 2.9.
0,CAMEL-4822,Improvement,Minor,2.8.3,2.9.0,"

patch

",Resolved,Fixed,2.9.0,Claus Ibsen,Philip Glebow,0,1,2011-12-23 00:30:38+00:00,2011-12-23 06:24:46+00:00,"The existing JdbcMessageIdRepository is tied to a particular table (CAMEL_MESSAGEPROCESSED) and includes an INSERT statement that is incompatible with MS SQL Server.  The design of the class makes it difficult to change the table name and related SQL statements.  In some environments, table names and structures are strictly controlled and it would be nice to be able to change these things easily.  It would also be nice for this to work on a variety of databases, including MS SQL Server.


I've submitted a patch that refactors the design of the class so that it can be easily extended.  An abstract base class called AbstractJDBCIdempotentRepository has been introduced that takes care of the plumbing required to query, insert and delete.  Classes that extend this abstract base class need only implement the query, insert, and delete operations.  This makes it very easy to customize an idempotent repository for a particular environment.


The existing JdbcMessageIdRepository has been changed to extend the AbstractJDBCIdempotentRepository and has retained the SQL statements present in the prior version.  A patch is attached to this JIRA and the existing unit test passes after applying this patch.","pglebow:1324571541:2011-12-23T00:32:21.483+0000:1324571541:2011-12-23T00:32:21.483+0000:Patch that implements the enhancement.
davsclaus:1324592686:2011-12-23T06:24:46.587+0000:1324592686:2011-12-23T06:24:46.587+0000:Thanks for the patch.

I fixed CS, removed @author tag, and renamed the abstract class to use Jdbc instead of JDBC."
0,CAMEL-4821,Task,Minor,None,2.9.2,"
None
",Resolved,Not A Problem,2.9.2,Claus Ibsen,Glen Mazza,0,0,2011-12-22 21:12:07+00:00,2012-03-21 19:31:49+00:00,"Hi, the OgnlHelper class:
http://svn.apache.org/viewvc/camel/trunk/camel-core/src/main/java/org/apache/camel/util/OgnlHelper.java?annotate=1145881


appears to have a couple of issues with it:


1.)  There's a nonsensically named ""isInvalidValidOgnlExpression(String expression)"" method at line #59, I'm not sure why it's needed because there is an isValidOgnlExpression() just above it, the negative of which can be used to accomplish to goal of isInvalidValidOgnlExpression.  If desired to retain this method, best to leave a comment why it's not named isInvalidOgnlExpression and why the negative of isValidOgnlExpression() is insufficient.  Otherwise, this method should be deprecated, either with a new isInvalidOgnlExpression in its place that does the same thing or with no replacement (i.e., users should just use !isValidOgnlExpression().


2.) The method ""isNullSafeOperator()"" at line #89 says it checks whether the ""Elvis"" operator is being used – but the code is just checking for a ""?"" According to here: https://docs.google.com/Doc?docid=ddb3zt39_78frdf87dc&hl=en the Elvis operator is the binary ""?:"" token (not the ternary a = (b > c) ? d : e one).  Perhaps a change is needed to the logic to check for ""?:"" or an update to the JavaDoc for this method that it's not the Elvis operator being checked for.","davsclaus:1324590949:2011-12-23T05:55:49.501+0000:1324590949:2011-12-23T05:55:49.501+0000:Ad 2)
The elvis was a mistake, it should say null safe operator.

Ad 1)
You need 2 methods, one to test if its a OGNL or not (sort of pre-test). And a 2nd to further validate if its a valid OGNL.
The naming of the method could possible be improved."
0,CAMEL-4820,Improvement,Minor,2.9.0,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Glen Mazza,0,0,2011-12-22 20:55:38+00:00,2012-01-04 16:34:26+00:00,Various minor edits.,njiang:1324584087:2011-12-23T04:01:27.500+0000:1324584087:2011-12-23T04:01:27.500+0000:Applied patch with thanks to Glen.
0,CAMEL-4819,Bug,Major,"2.8.3, 2.9.0","2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2011-12-22 20:36:31+00:00,2011-12-26 16:55:04+00:00,"The camel-jibx and camel-xstream features don't install out of the box:
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.dom4j/1.6.1_4 in feature(s) camel-xstream-2.9-SNAPSHOT, camel-jibx-2.9-SNAPSHOT: Unresolved constraint in bundle org.apache.servicemix.bundles.dom4j [65]: Unable to resolve 65.0: missing requirement [65.0] package; (&(package=javax.xml.stream)(version>=1.0.0)(!(version>=2.0.0)))


camel-jibx feature has a dependency to ServiceMix dom4j bundle.


This bundle requires javax.xml.stream (provided by woodstox).","jbonofre:1324641663:2011-12-23T20:01:03.920+0000:1324641663:2011-12-23T20:01:03.920+0000:Fixed on trunk: revision 1222821.
jbonofre:1324642664:2011-12-23T20:17:44.528+0000:1324642664:2011-12-23T20:17:44.528+0000:Fixed on camel-2.8.x: revision 1222825.
muellerc:1324694765:2011-12-24T10:46:05.180+0000:1324694765:2011-12-24T10:46:05.180+0000:I tested it with Karaf 2.2.4 and Camel 2.9 on MacOS and it works well (with the actual code in trunk):

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream
muellerc:1324705686:2011-12-24T13:48:06.333+0000:1324705686:2011-12-24T13:48:06.333+0000:It also works with the latest 2.8.4-SNAPSHOT version on Karaf 2.2.4 and MacOS:


Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx

Christian-Muellers-MacBook-Pro:bin cmueller$ ./karaf clean
karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.8.4-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream 
muellerc:1324889704:2011-12-26T16:55:04.133+0000:1324889704:2011-12-26T16:55:04.133+0000:It works also with the brand new Karaf 2.2.5:

Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-jibx 



Christian-Muellers-MacBook-Pro:bin cmueller$ /Applications/apache-karaf-2.2.5/bin/karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.2.5)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.

karaf@root> features:addurl mvn:org.apache.camel.karaf/apache-camel/2.9-SNAPSHOT/xml/features
karaf@root> features:install camel-xstream "
0,CAMEL-4788,Improvement,Minor,None,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Cédric Exbrayat,0,0,2011-12-16 15:03:31+00:00,2011-12-22 17:58:22+00:00,"If you declare an endpoint like
<cxf:rsServer id=""testEndpoint"" address=""address"" serviceClass=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService"" />
the address is not resolve with the properties.


It would be useful, as it is possible for CxfEndpoint. 


You can find with this issue, a small patch with a unit test to reproduce this use case, and a (naive but working) patch that fix the issue for us.","njiang:1324104977:2011-12-17T14:56:17.314+0000:1324104977:2011-12-17T14:56:17.314+0000:Applied the part of patch with thanks to Cedric.
I changed the part of how to get the address from the CxfRsEndpoint and also add the spring configuration file of testing which is missed from the patch.
cexbrayat:1324360510:2011-12-20T13:55:10.476+0000:1324360510:2011-12-20T13:55:10.476+0000:Willem, the actual version does not work, I think that the address should be also modified in the AbstractJAXRSFactoryBean (as I was trying to do in the first rough patch).

You can find a patch with an enhanced unit test that just check if the connection is ok (even with 404). Actually this test failed.
The other patch just show how it can be fixed to pass the test
njiang:1324404583:2011-12-21T02:09:43.315+0000:1324404583:2011-12-21T02:09:43.315+0000:Sorry we just missed the release train of Camel 2.9.0.
njiang:1324413010:2011-12-21T04:30:10.450+0000:1324413010:2011-12-21T04:30:10.450+0000:Applied patch into trunk with thanks to Cédric."
0,CAMEL-4787,Bug,Blocker,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-16 14:33:59+00:00,2011-12-16 14:35:34+00:00,"There is a problem in the UnitOfWork processor that wraps using a RouteContextProcessor, where the latter is used to track the current route the exchange is being routed. Unfortunately the wrapping may re-wrap itself, causing every growing processor paths.



	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)[file:/Users/davsclaus/workspace/camel/camel-core/target/classes/:]
	...",
0,CAMEL-4786,Improvement,Major,"2.8.3, 2.9.0","2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-16 14:09:04+00:00,2011-12-17 11:28:43+00:00,"The ScheduledThreadPoolExecutor from the JDK has a flaw that it has an unbounded queue task, which mean you can keep scheduling tasks to it, and it will never reject the tasks.
This could potential cause to eat up all memory if you add more tasks, than the thread pool can execute.


We need to guard the thread pool, and reject tasks if a queue size has been reached.


The default queue size in Camel is 1000, so the guard should use that option.


http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html","davsclaus:1324092499:2011-12-17T11:28:19.942+0000:1324092499:2011-12-17T11:28:19.942+0000:The irony is that the throttler is to guard against overloading another system. But the throttler itself could be overloaded :).
This only applies if asyncDelayed=true was enabled on the throttler. 
davsclaus:1324092523:2011-12-17T11:28:43.435+0000:1324092523:2011-12-17T11:28:43.435+0000:We should backport a fix to the 2.8 branch as well."
0,CAMEL-4785,Bug,Major,2.9.0,None,"
None
",Resolved,Fixed,2.9.0,Jonathan Anstey,Jonathan Anstey,0,0,2011-12-16 00:20:17+00:00,2011-12-17 08:58:26+00:00,The camel-aws component depends on aws-java-sdk which has several dependencies defined using version ranges. The problem with version ranges is that they can introduce SNAPSHOT versions if they are available on your system which is not so good... in my case I had this http://download.java.net/maven/2/com/sun/mail/javax.mail/1.4.5-SNAPSHOT/javax.mail-1.4.5-SNAPSHOT.jar jar in my local repo so camel-aws promptly used that SNAPSHOT lib.,"janstey:1323966097:2011-12-16T00:21:37.250+0000:1323966097:2011-12-16T00:21:37.250+0000:[janstey@duffman camel-aws]$ svn ci -m ""CAMEL-4785 - lock down versions of dependencies coming from aws sdk""
Sending        camel-aws/pom.xml
Transmitting file data .
Committed revision 1215000.
"
0,CAMEL-4784,Improvement,Minor,None,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-12-15 13:15:01+00:00,2011-12-17 08:57:46+00:00,"From Camel 2.8.0, camel support to load the type converter without using package scanning. We could use the scala object to define the static type converter method.",njiang:1323970161:2011-12-16T01:29:21.174+0000:1323970161:2011-12-16T01:29:21.174+0000:Applied patch into trunk and camel-2.8.x branch.
0,CAMEL-4783,Improvement,Major,"2.8.3, 2.9.0","2.8.4, 2.9.1","
None
",Resolved,Fixed,"2.8.4, 2.9.1",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-12-15 08:51:16+00:00,2011-12-22 09:31:12+00:00,"Currently, we use ${pom.version} is a set of file (spring.schemas, features.xml, etc).


${pom.version} is now deprecated and should be replaced by ${project.version}.","jbonofre:1324510317:2011-12-22T07:31:57.214+0000:1324510317:2011-12-22T07:31:57.214+0000:Fixed on trunk: revision 1222079.
jbonofre:1324517453:2011-12-22T09:30:53.517+0000:1324517453:2011-12-22T09:30:53.517+0000:Fixed on camel-2.8.x: revision 1222124."
0,CAMEL-4782,Improvement,Minor,None,"2.9.1, 2.10.0","
None
",Resolved,Fixed,"2.9.1, 2.10.0",Babak Vahdat,Claus Ibsen,0,0,2011-12-15 08:31:10+00:00,2012-02-26 16:15:48+00:00,"It would be nice if this EIP had a specialized MBean which has details about number of duplicate detected.
Then you can see this from management tooling or jconsole etc.


People may use this EIP as a sort of fail safe to detect and discard duplicates. So it would be nice if we have stats in JMX we can expose.","bvahdat:1324205757:2011-12-18T18:55:57.621+0000:1324205757:2011-12-18T18:55:57.621+0000:Attached a potential patch for review (including unit-test). Please let me know if it's the way you would go for it or do you think of some other approaches. With [1] as the newest revision on the trunk, following the test results on camel-core:

Results :

Tests run: 3978, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:2.3.4:bundle (default-bundle) @ camel-core ---
[WARNING] Warning building bundle org.apache.camel:camel-core:bundle:2.10-SNAPSHOT : Did not find matching referal for !org.apache.camel.*
[INFO]
[INFO] --- maven-shade-plugin:1.4:shade (default) @ camel-core ---
[INFO] Including com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.2 in the shaded jar.
[INFO] Excluding org.slf4j:slf4j-api:jar:1.6.1 from the shaded jar.
[INFO] Replacing original artifact with shaded artifact.
[INFO] Replacing c:\dev\workspace\camel\camel-core\target\camel-core-2.10-SNAPSHOT.jar with c:\dev\workspace\camel\camel-core\target\camel-core-2.10-SNAPSHOT-sh
aded.jar
[INFO]
[INFO] --- maven-jar-plugin:2.2:test-jar (default) @ camel-core ---
[INFO] Building jar: c:\dev\workspace\camel\camel-core\target\camel-core-2.10-SNAPSHOT-tests.jar
[INFO]
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-core ---
[INFO] Checking legal files in: camel-core-2.10-SNAPSHOT.jar
[INFO] Checking legal files in: camel-core-2.10-SNAPSHOT-tests.jar
[INFO]
[INFO] --- maven-install-plugin:2.3.1:install (default-install) @ camel-core ---
[INFO] Installing c:\dev\workspace\camel\camel-core\target\camel-core-2.10-SNAPSHOT.jar to C:\Users\Babak\.m2\repository\org\apache\camel\camel-core\2.10-SNAPSH
OT\camel-core-2.10-SNAPSHOT.jar
[INFO] Installing c:\dev\workspace\camel\camel-core\dependency-reduced-pom.xml to C:\Users\Babak\.m2\repository\org\apache\camel\camel-core\2.10-SNAPSHOT\camel-
core-2.10-SNAPSHOT.pom
[INFO] Installing c:\dev\workspace\camel\camel-core\target\camel-core-2.10-SNAPSHOT-tests.jar to C:\Users\Babak\.m2\repository\org\apache\camel\camel-core\2.10-
SNAPSHOT\camel-core-2.10-SNAPSHOT-tests.jar
[INFO]
[INFO] --- maven-bundle-plugin:2.3.4:install (default-install) @ camel-core ---
[INFO] Installing org/apache/camel/camel-core/2.10-SNAPSHOT/camel-core-2.10-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 26:31.083s
[INFO] Finished at: Sun Dec 18 19:24:16 CET 2011
[INFO] Final Memory: 27M/494M
[INFO] ------------------------------------------------------------------------  

[1] http://svn.apache.org/viewvc?view=revision&revision=1220370
bvahdat:1324254798:2011-12-19T08:33:18.826+0000:1324254798:2011-12-19T08:33:18.826+0000:Attached a new copy of the provided patch with some more code-polishment.
davsclaus:1324452962:2011-12-21T15:36:02.631+0000:1324452962:2011-12-21T15:36:02.631+0000:Yeah the runnable is the poor mans closure. 

I wonder if we should just keep the stats in the EIP processors directly, and the from the mbean, invoke the getXXX method from the processor?

The performance stats however is kept in the PerformanceMBean. So I understand that keeping stats in the MBean to make it similar.

Lets ponder a bit about this.
bvahdat:1324470934:2011-12-21T20:35:34.029+0000:1324470934:2011-12-21T20:35:34.029+0000:O.K. I did the way of your proposal and indeed that seems much better to me as well (see the second patch). But now as you see, we've got a trade-off situation here, that's we still keep counting the duplicate message count even if JMX is disabled! However we may want to argue that in the future there'll be probably API clients other than JMX who may want to make usage of the provided getDuplicateMessageCount() & resetDuplicateMessageCount() API offered *directly* by the IdempotentConsumer EIP processor.
bvahdat:1325316313:2011-12-31T15:25:13.783+0000:1325316313:2011-12-31T15:25:13.783+0000:Claus,

What do you think about this second approach?
bvahdat:1325640188:2012-01-04T09:23:08.189+0000:1325640188:2012-01-04T09:23:08.189+0000:Claus,

What do you think about this second approach?

davsclaus:1325661462:2012-01-04T15:17:42.371+0000:1325661462:2012-01-04T15:17:42.371+0000:I have been busy today tracking down a leak.

I suggest to post a mail on @dev as we may look for more feedback for a good way to store EIP statistics and how to expose those from JMX and in the future REST management APIs.
bvahdat:1325751531:2012-01-05T16:18:51.549+0000:1325751531:2012-01-05T16:18:51.549+0000:I put the question for further discussion [1] onto the @dev.

[1] http://camel.465427.n5.nabble.com/DISCUSS-How-to-better-enlist-the-duplicate-message-count-by-the-IdempotentConsumer-on-JMX-td5123118.html
bvahdat:1330233329:2012-02-26T13:15:29.805+0000:1330233329:2012-02-26T13:15:29.805+0000:Didn't get much of feedback I was looking for @dev. However the *second* patch provided seems reasonable to me.

Do you agree on applying it?
davsclaus:1330237074:2012-02-26T14:17:54.588+0000:1330237074:2012-02-26T14:17:54.588+0000:Yeah the 2nd patch is nicer.
bvahdat:1330244148:2012-02-26T16:15:48.754+0000:1330244148:2012-02-26T16:15:48.754+0000:Applied my provided second patch (attached to this ticket) both into the trunk as well as 2.9.x branch."
0,CAMEL-4781,Improvement,Major,None,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-12-15 07:00:01+00:00,2011-12-17 08:58:43+00:00,"The NoTypeConversionAvailableException message is misleading when it is caused by other exception.
It just eats up the cause message and let us think there is no converter which can turn an InputStream 
into a Dom from theThe below exception stack trace.



org.apache.camel.InvalidPayloadException: No body available of type: org.w3c.dom.Document but has value: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5 of 
type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream on: Message: [Body is instance of java.io.InputStream]. Caused by: No type converter available to convert from type: 
sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value 
sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: 
[org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required 
type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:58)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:171)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:42)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:134)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:317)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:330)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.interceptor.TraceInterceptor$1.done(TraceInterceptor.java:188)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:307)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:119)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.component.cxf.CxfClientCallback.handleResponse(CxfClientCallback.java:62)[143:org.apache.camel.camel-cxf:2.8.0.fuse-01-13]
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:818)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1626)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1498)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_23]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_23]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_23]
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the 
required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:140)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.core.osgi.OsgiTypeConverter.mandatoryConvertTo(OsgiTypeConverter.java:110)[91:org.apache.camel.camel-spring:2.8.0.fuse-01-13]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	... 36 more
Caused by: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:832)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:182)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	... 38 more
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)[:]
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)[:]
	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:110)[:]
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:733)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_23]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_23]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_23]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_23]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:828)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]
	... 41 more","njiang:1323908650:2011-12-15T08:24:10.138+0000:1323908650:2011-12-15T08:24:10.138+0000:Applied patch into trunk, camel-2.8.x and camel-2.7.x branch."
0,CAMEL-4780,Bug,Minor,2.8.3,,"
None
",Resolved,Not A Problem,None,Willem Jiang,Craig McDaniel,0,0,2011-12-14 22:12:32+00:00,2011-12-15 12:47:01+00:00,"The ObjectHelper is choking on a TypeConverter written in Scala. Two classes are compiled by Scala for singleton objects: XmlToScalaNode and XmlToScalaNode$


Here is the TypeConverter code:



import scala.xml.XML
import scala.xml.Elem
import org.apache.camel.Converter
import org.apache.camel.converter.jaxp.XmlConverter
import org.w3c.dom.Node
import org.w3c.dom.Element
@Converter object XmlToScalaNode {
    //val converter = new XmlConverter()
    @Converter
    def convert(xml: String) = XML.loadString(xml)
    @Converter
    def convert(elem: Node): Elem = convert(new XmlConverter().toString(elem, null))
    @Converter
    def convert(elem: Element): Elem = convert(new XmlConverter().toString(elem, null))
}


The root cause appears to be:


Caused by: java.lang.IllegalAccessException: Class org.apache.camel.util.ObjectHelper can not access a member of class com.db.fi.camel.scala.XmlToScalaNode$ with modifiers ""private""


This was working just fine with camel 2.7.3. As a workaround, I had to use the full class name for XmlToScalaNode in my TypeConverter file in META-INF. Using just the package name caused the error. My guess is that the annotation is existing on both classes and some change in ObjectHelper is now more strict with the XmlToScalaNode$ class.


Here is the full stack trace:


Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.704 sec <<< FAILURE!
testSplitConversion(com.db.fi.camel.XpathSplitterTest)  Time elapsed: 0.691 sec  <<< ERROR!
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <b>bar</b>]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1180)
	at org.apache.camel.builder.ExpressionBuilder$33.evaluate(ExpressionBuilder.java:814)
	at org.apache.camel.impl.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:371)
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:204)
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:204)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:151)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.Debug$1.process(Debug.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:572)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:505)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:218)
	at org.apache.camel.processor.Splitter.process(Splitter.java:96)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.processor.interceptor.Debug$1.process(Debug.java:50)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:111)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:104)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:351)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:323)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:222)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:323)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:168)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:123)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:130)
	at com.db.fi.camel.XpathSplitterTest.testSplitConversion(XpathSplitterTest.scala:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
Caused by: org.apache.camel.InvalidPayloadException: No body available of type: scala.xml.Elem but has value: [b: null] of type: com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl on: Message: <b>bar</b>. Caused by: No type converter available to convert from type: com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl to the required type: scala.xml.Elem with value [b: null]. Exchange[Message: <b>bar</b>]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl to the required type: scala.xml.Elem with value [b: null]]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)
	at org.apache.camel.builder.ExpressionBuilder$33.evaluate(ExpressionBuilder.java:812)
	... 94 more
Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl to the required type: scala.xml.Elem with value [b: null]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:140)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)
	... 95 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalAccessException: Class org.apache.camel.util.ObjectHelper can not access a member of class com.db.fi.camel.scala.XmlToScalaNode$ with modifiers ""private""
	at org.apache.camel.util.ObjectHelper.newInstance(ObjectHelper.java:1066)
	at org.apache.camel.util.ReflectionInjector.newInstance(ReflectionInjector.java:32)
	at org.apache.camel.impl.converter.CachingInjector.createInstance(CachingInjector.java:44)
	at org.apache.camel.impl.converter.CachingInjector.newInstance(CachingInjector.java:38)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:58)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:182)
	at org.apache.camel.impl.converter.LazyLoadingTypeConverter.doConvertTo(LazyLoadingTypeConverter.java:47)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)
	... 96 more
Caused by: java.lang.IllegalAccessException: Class org.apache.camel.util.ObjectHelper can not access a member of class com.db.fi.camel.scala.XmlToScalaNode$ with modifiers ""private""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)
	at java.lang.Class.newInstance0(Class.java:349)
	at java.lang.Class.newInstance(Class.java:308)
	at org.apache.camel.util.ObjectHelper.newInstance(ObjectHelper.java:1062)
	... 103 more","cpmcdaniel:1323872194:2011-12-14T22:16:34.104+0000:1323872194:2011-12-14T22:16:34.104+0000:Scala TypeConverter that causes the problem.
njiang:1323922781:2011-12-15T12:19:41.985+0000:1323922781:2011-12-15T12:19:41.985+0000:I don't think it is bug, we should avoid adding two type converter class to be load at the same time.
There are some improvement about the speed up the type converter loading the Camel 2.8 which let the XmlToScalaNode$ be loaded as converter.
As you know the XmlToScalaNode$ has no public method to create the instance to implement the singleton pattern, we should avoid the AnnotationTypeConverterLoader to load it, and you already find a way to archive it :)

I'm heading to add a FAQ entry in the Camel.

njiang:1323924303:2011-12-15T12:45:03.402+0000:1323924303:2011-12-15T12:45:03.402+0000:Added a FAQ entry[1] for it.
[1]https://cwiki.apache.org/confluence/display/CAMEL/How+to+define+a+static+camel+converter+method+in+Scala
njiang:1323924421:2011-12-15T12:47:01.309+0000:1323924421:2011-12-15T12:47:01.309+0000:As we are not supposed to load the XmlToScalaNode$ class, we should avoid letting camel to use the package scanning to find the converter."
0,CAMEL-4779,Improvement,Minor,2.8.3,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Daniel Gredler,0,0,2011-12-14 21:59:44+00:00,2012-01-09 15:42:45+00:00,"The existing codebase has an implicit optional dependency from camel-core to camel-spring; camel-core contains the class AntPathMatcherGenericFileFilter, which internally uses camel-spring's SpringAntPathMatcherFileFilter class via runtime classpath checks and reflection. The reason that SpringAntPathMatcherFileFilter is in camel-spring is that it uses Spring's AntPathMatcher class internally. Interestingly, there is already an AntPathMatcher class with an API very similar to Spring's class in the camel-core-xml module.


This patch moves camel-core-xml's AntPathMatcher into camel-core, removes the classpath and reflection magic in camel-core's AntPathMatcherGenericFileFilter class, and adds a new class to camel-core named GenericFileFilterConverter, which automagically converts strings to ant path file filters. The patch also adds some unit tests.


The end result is that Camel users can now use ant path matching with the file and FTP components without having to add a dependency on camel-spring, and Camel users can specify the ant path expression to use directly in the component querystring, rather than having to go through the work of registering an additional file filter instance in the registry (although this is only true when the user only needs to specify a single include path, which is a very common use case). For example:


from(""file://target/blah?recursive=true&filter=*/.txt"")
  .to(...);


Instead of:


from(""file://target/blah?recursive=true&filter=#myTxtFilter"")
  .to(...);","davsclaus:1324088208:2011-12-17T10:16:48.163+0000:1324088208:2011-12-17T10:16:48.163+0000:Can you redo a patch where you attach the moved/renamed files as plain .java files.
A patch file with file moves sucks to apply.


sdanig:1324380470:2011-12-20T19:27:50.177+0000:1324380470:2011-12-20T19:27:50.177+0000:I can do that, but I would be worried about losing the commit history for files that aren't moved via the appropriate SVN commands. Are you sure that's what you want me to do?

Another thing I was thinking about: the patch makes the ""filter"" attribute easier to use in most scenarios, but it might be better to leave it as is and provide explicit ""include"" and ""exclude"" options instead. This would allow us to cover the use cases where the user wants to provide more fine-grained file selection criteria, and still keeps it easy to use for the common use case. Unfortunately there are already ""include"" and ""exclude"" options that are interpreted as regex right now... maybe ""antInclude"" and ""antExclude""? What do you think? Is the approach in the patch fine, or should we think about creating two new include/exclude options on the file component instead?
davsclaus:1324452674:2011-12-21T15:31:14.179+0000:1324452674:2011-12-21T15:31:14.179+0000:Yeah I guess people may want to do ant style include/excludes. However the file component have a lot of options already, so we should be a bit careful adding new stuff.

The ANT filter itself supports multiple includes/excludes, for more complex scenarios. So people can fallback and do as today for those situations.

But I agree it would be nice to do ANT includes in the uri directly.
{code}
antInclude=**/*.txt&antExclude=**/backup-*
{code}

And then we do not need the type converter, which was sort of a ""smart hack"". 

Maybe give it a go and try with the antInclude and antExclude options.
And possible add a validation check that if you use antInclude/antExclude then the regular filter option is not supported.
sdanig:1325596714:2012-01-03T21:18:34.587+0000:1325596714:2012-01-03T21:18:34.587+0000:FYI, I'm just waiting for the 2.9 release to be finalized before picking this up again. It looks like it's about ready?

Regarding the file renames, how do you want to approach it?

(a) I attach a normal patch like before (keeps SVN history for moved files), or

(b) you move the files in SVN trunk from your end and then I can send a feature patch that takes advantage of the new class location, without any file moves in the patch (also would keep SVN history for moved files), or

(c) I attach a partial patch not including the moved files and attach the moved files separately (I don't think this would keep the SVN history for the moved files)

What do you think?
davsclaus:1325743612:2012-01-05T14:06:52.383+0000:1325743612:2012-01-05T14:06:52.383+0000:Yeah I can move the files, if you let me know which files you want to be moved.
sdanig:1325770429:2012-01-05T21:33:49.510+0000:1325770429:2012-01-05T21:33:49.510+0000:Here are the files that need to be moved:

components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/AntPathMatcher.java
 -> camel-core/src/main/java/org/apache/camel/util/AntPathMatcher.java

(move only; this is the central underlying utility class)

components/camel-core-xml/src/main/java/org/apache/camel/core/xml/scan/PatternBasedPackageScanFilter.java
 -> components/camel-core-xml/src/main/java/org/apache/camel/core/xml/PatternBasedPackageScanFilter.java

(move only; I decided to move this one level up in the package structure just because the first move operation leaves us with a package with a single class, and it doesn't seem appropriate to leave it there alone)

components/camel-spring/src/main/java/org/apache/camel/spring/util/SpringAntPathMatcherFileFilter.java
 -> camel-core/src/main/java/org/apache/camel/component/file/AntPathMatcherFileFilter.java

(move and rename; also change imports to use our AntPathMatcher instead of Spring's AntPathMatcher and use standard Java String.replace() instead of Spring's StringUtils.replace()):

+import org.apache.camel.util.AntPathMatcher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.util.AntPathMatcher;
-import org.springframework.util.StringUtils;

...

-        path = StringUtils.replace(path, File.separator, ""/"");
+        path = path.replace(File.separatorChar, '/');

davsclaus:1325803305:2012-01-06T06:41:45.706+0000:1325803305:2012-01-06T06:41:45.706+0000:Daniel I have moved the files.

You are welcome to attach an updated patch with the last needed changes.
sdanig:1325839498:2012-01-06T16:44:58.090+0000:1325839498:2012-01-06T16:44:58.090+0000:OK, I hope to attach a patch within the next 6 or 7 hours. I'll keep you updated.
sdanig:1325863916:2012-01-06T23:31:56.791+0000:1325863916:2012-01-06T23:31:56.791+0000:Attaching new patch.

One thing to be aware of is that AntPathMatcherFileFilter was rejecting files by default when one or more exclusions were specified but no inclusion was specified. The behavior in this situation has been changed to accept, e.g.:

{code}
  from(""file://target/blah?recursive=true&antExclude=**/*.txt"")
{code}

would previously have excluded everything, but would now exclude ""foo/bar.txt"" and include ""foo/bar.pdf"".

Another thing to note is that just like you can use the ""filter"" and ""include""/""exclude"" attributes at the same time, I've implemented it so that you can now use ""filter"", ""include""/""exclude"" and ""antInclude""/""antExclude"" all at the same time.

Let me know what you think!

davsclaus:1326012766:2012-01-08T16:52:46.338+0000:1326012766:2012-01-08T16:52:46.338+0000:Thanks for the patches.

I have applied them to trunk. And updated the wiki page as well.
sdanig:1326094965:2012-01-09T15:42:45.690+0000:1326094965:2012-01-09T15:42:45.690+0000:Great, thanks!"
0,CAMEL-4778,Task,Major,"2.8.3, 2.9.0",None,"

spring

",Resolved,Fixed,2.10.0,Christian Müller,Christian Müller,0,3,2011-12-14 18:31:19+00:00,2012-04-02 19:43:35+00:00,"We should consider to upgrade to Spring 3.1.0.RELEASE in Camel 2.10.0 or 3.0.0 depending on the backwards compatibility of Spring.


See: http://static.springsource.org/spring/docs/3.1.0.RELEASE/changelog.txt","jbonofre:1324517623:2011-12-22T09:33:43.115+0000:1324517623:2011-12-22T09:33:43.115+0000:This update require in update in Karaf (as Camel uses the Spring Karaf features).
bvahdat:1324518751:2011-12-22T09:52:31.640+0000:1324518751:2011-12-22T09:52:31.640+0000:To avoid the usage of any deprecated API in 3.1.x IMHO this would also require a huge refactoring in camel-jpa and also some other corners as well, as since the 3.1 RC1 release the JpaTemplate/JpaInterceptor/JpaDaoSupport and JdoTemplate/JdoInterceptor/JdoDaoSupport are *all* deprecated!

There're a bunch of places on the Web like [1] which explain this change since the 3.1.x branch.

But maybe we want to postpone the cleanup of the deprecated API usage to later and not necessarily do it in the context of this ticket.

[1] http://www.javaworld.com/community/node/8245

jbonofre:1327888028:2012-01-30T09:47:08.303+0000:1327888028:2012-01-30T09:47:08.303+0000:I tested to update to Spring 3.1.0.RELEASE and it works without problem.

Karaf 3.0 will also provide the Spring 3.1.0.RELEASE features, but I wonder if it doesn't make sense to update to Spring 3.1.0.RELEASE also in Karaf 2.2.x.
muellerc:1331300945:2012-03-09T21:49:05.781+0000:1331300945:2012-03-09T21:49:05.781+0000:JB, do you expect problems when we upgrade Camel 2.10.0 to Spring 3.1.0 (and deploy it into Karaf 2.2.x)?
Because Camel leverage on the Karaf Spring feature, it will use Spring 3.0.x when running inside Karaf 3.0x and Spring 3.1.x when running in Karaf 3.0.x. 

IMO, when we can upgrade to Spring 3.1.0 without any modification, it should not a problem...
muellerc:1331438005:2012-03-11T11:53:25.670+0000:1331438005:2012-03-11T11:53:25.670+0000:I found the following incompatibilities between Spring 3.0 and Spring 3.1 which we have to fix:
- org.apache.camel.test.spring.CamelSpringTestContextLoader extends org.springframework.test.context.support.AbstractContextLoader. AbstractContextLoader implements org.springframework.test.context.SmartContextLoader (a new interface since 3.1) which adds the new method ""ApplicationContext loadContext(MergedContextConfiguration mergedConfig)"" which is not implemented by AbstractContextLoader.
muellerc:1331473413:2012-03-11T21:43:33.061+0000:1331473413:2012-03-11T21:43:33.061+0000:I think because of this new class ""org.springframework.test.context.MergedContextConfiguration"" which is now (with Spring 3.1) part of ""org.springframework.test.context.support.AbstractContextLoader"", we cannot support Spring 3.0 or 3.1.

Any suggestions?
davsclaus:1331517099:2012-03-12T09:51:39.836+0000:1331517099:2012-03-12T09:51:39.836+0000:I suggest to log a JIRA at SPR to tell them about this binary incompatibility they introduced between 3.0 and 3.1.
muellerc:1331557313:2012-03-12T21:01:53.949+0000:1331557313:2012-03-12T21:01:53.949+0000:Claus, do you think the Spring guys will fix this? I think introducing binary incompatibility in a minor version is not a ""no go"", IMO. It's only bad for us...
muellerc:1332382275:2012-03-22T10:11:15.656+0000:1332382275:2012-03-22T10:11:15.656+0000:I added a ""spring3.1"" feature and set up a new Jenkins build for it.
I expect the build will fail in camel-test-spring but I'm interested in to see if this is the only issue.

If this is the case, I propose to revert the changes for camel-test-spring (it's a new component in Camel 2.10.0) because I think supporting Spring 3.1 is much more requested. In this case, I will reopen the issue which with David add camel-test-spring and attach a patch so that it's easy for us to apply it later (when we got this component working with Spring 3.0 or we drop the support for Spring 3.0 in Camel 2.11.0/3.0.0).

Doubts?
davaleri:1332419407:2012-03-22T20:30:07.651+0000:1332419516:2012-03-22T20:31:56.146+0000:Christian,

Just to be clear, you intend to keep camel-test-spring and its existing Spring test support through the CamelTestSupport classes but to roll-back the changes from CAMEL-4987 only?

I looked into this issue and concur that there is no straightforward way to work with Spring Test 3.1 and 3.0, short of having two modules in our code base, duplicating Spring code in our code base (Removing AbstractContextLoader from the hierarchy), or doing selective compilation.

I implemented the changes needed to compile with 3.1 locally and confirmed that the tests still pass.  So the code in question can definitely support 3.1 when the time comes.
muellerc:1332473569:2012-03-23T11:32:49.214+0000:1332473569:2012-03-23T11:32:49.214+0000:Yes, that's what I mean. Sorry for the unclear comment in my last post - I need some more sleep in these busy days... ;-)

In the meantime, I reverted the relevant changes and running the unit tests on my box. If they succeed, I will commit it and kick on the Jenkins builds for Spring 3.1 und 3.0. I also plan to attach the revert diff of this change to CAMEL-4987. May be this will make it easier to apply it later in Camel 2.11.0 or 3.0.0 (I really like this change).
davaleri:1332476294:2012-03-23T12:18:14.347+0000:1332476294:2012-03-23T12:18:14.347+0000:I did a little more digging and it turns out that my earlier conclusion was based on some bad observations in Eclipse.  It turns out that the only real issue is how Maven wants to do the build.  Maven wants one version of Spring on the classpath.  If we implement the new method needed to move to Spring 3.1, the camel-spring-test library compiled against 3.1 will work with client code using Spring 3.0 on its classpath.  This binary compatibility for client code means that the only issue is compiling the Spring 3.1 compatible camel-spring-test JAR against the Spring 3.0 JARs.  This feat won't be possible due to the aforementioned Maven behavior.

We need a way to compile the camel-test-spring module against Spring 3.1 but run the tests against Spring 3.1 and Spring 3.0.  I can think of some ways to achieve that, but they are a little bit messy.  Is there a clean way to get Maven to support this use case?


We also need to update the documentation to say from 2.11 or 3.0 onwards or export the documentation for later use.  The Camel 3 stuff is still up in the air so do you have a roadmap for Spring 3.0 support deprecation?
muellerc:1332644649:2012-03-25T11:04:09.553+0000:1332644649:2012-03-25T11:04:09.553+0000:+1
I did the following changes:
- revert my last revert ;-)
- implemented the new required method to be able to compile camel-test-spring with Spring 3.1
- stick camel-test-spring to Spring 3.1 (this should not be a problem)
- build all other components with Spring 3.0 or Spring 3.1

I think with this we are able to support Spring 3.0 and 3.1 *AND* the new first class support using Spring test based unit tests

My build is running. Keep you posted...
muellerc:1332663743:2012-03-25T16:22:23.930+0000:1332663743:2012-03-25T16:22:23.930+0000:camel-test-spring will be always compiled with Spring 3.1. It's possible to use it with Spring 3.0 because the methods we use didn't changed.
muellerc:1332663841:2012-03-25T16:24:01.528+0000:1332663841:2012-03-25T16:24:01.528+0000:I'm wondering what the default should be: Spring 3.1 or Spring 3.0...
At present, the default is still Spring 3.0.
davaleri:1332737871:2012-03-26T12:57:51.738+0000:1332738268:2012-03-26T13:04:28.442+0000:Let me know if anything doesn't pass in camel-test-spring or camel-testng since I added Spring Test support in both of those modules.

Also let me know when you push your changes up so I can review the method implementation you added.

EDIT: I see you already pushed the changes up.  There is a one line difference between the two method implementations in the super class.  The extra line supports a Spring Test feature and not a Camel related feature so it wouldn't show up in our unit tests.  I will update the code and re-open CAMEL-4987 for now.
muellerc:1332753161:2012-03-26T17:12:41.850+0000:1332753161:2012-03-26T17:12:41.850+0000:Ok, thanks for having a look at it. Go ahead with your changes..."
0,CAMEL-4777,Improvement,Major,2.8.3,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,0,2011-12-14 15:45:34+00:00,2011-12-16 07:41:18+00:00,"pax-web-jsp exports package jsp package.


So it means that Camel features that don't refer the http feature, explicitly install geronimo-jsp bundle.


We can have the situation where two bundles (pax-web-jsp and geronimo-jsp) provide the same package.


To avoid this, the Camel features should refer the http feature in place of installing geronimo-jsp bundle for instance.","jbonofre:1323849852:2011-12-14T16:04:12.374+0000:1323849852:2011-12-14T16:04:12.374+0000:We will fix that in Pax Web 2.0.0:
http://team.ops4j.org/browse/PAXWEB-333
http://team.ops4j.org/browse/PAXWEB-332

but I will fix in Camel as Pax Web 2.0.0 will be included at least in Karaf 3.0.0 (more probably in Karaf 3.1.0).
jbonofre:1323857045:2011-12-14T18:04:05.982+0000:1323857045:2011-12-14T18:04:05.982+0000:We have another potential issue with org.apache.geronimo.specs/geronimo-servlet_2.5_spec.

Some camel features (like camel-ibatis, camel-mybatis, camel-velocity, camel-http*, camel-servlet) refer and install geronimo-servlet spec.

On the other hand, Karaf jetty feature also refers geronimo-servlet.

So, we have to be sure that the geronimo-servlet versions used in Karaf and Camel are exactly the same.

Camel should use a Karaf feature (jetty for now) in place of referencing directly geronimo-servlet spec bundle.

I will update like this, but very soon, in order to avoid to fully install Jetty, Karaf should provide a set of spec features (for servlet/jsp, activation, jaxb, woodstox, etc).
jbonofre:1323909883:2011-12-15T08:44:43.942+0000:1323909883:2011-12-15T08:44:43.942+0000:Fixed on trunk: revision 1214428 (including in the release RC).
jbonofre:1323924141:2011-12-15T12:42:21.249+0000:1323924141:2011-12-15T12:42:21.249+0000:Fixed on camel-2.8.x: revision 1214732.
davsclaus:1323992280:2011-12-16T07:38:00.786+0000:1323992280:2011-12-16T07:38:00.786+0000:Ah okay the 1st commit is in 2.9.0 and that's the important piece.
The 2nd was more a little improvement to re-use feature from karaf instead.
jbonofre:1323992478:2011-12-16T07:41:18.302+0000:1323992478:2011-12-16T07:41:18.302+0000:You are right Claus :)

The second commit is just ""cleanup""."
0,CAMEL-4776,Bug,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-12-14 09:02:43+00:00,2011-12-14 10:08:12+00:00,"The Hazelcast map consumer, when creating an Exchange fills the out message, instead of the in message.",
0,CAMEL-4775,Task,Trivial,2.8.3,2.9.0,"

documentaion
newbie

",Closed,Fixed,2.9.0,Claus Ibsen,Bobby Hargett,0,0,2011-12-13 16:53:53+00:00,2011-12-14 12:09:06+00:00,"http://camel.apache.org/spring-testing.html says


You can overload the method createApplicationContext to provide the Spring ApplicationContext that isn't following the above default


This is after it says in the example that you test class should extend AbstractJUnit38SpringContextTests.  This is incorrect.


Solution
The test class should actually extend CamelSpringTestSupport",davsclaus:1323768119:2011-12-13T17:21:59.545+0000:1323768119:2011-12-13T17:21:59.545+0000:Thanks for reporting. I have updated the wiki page with a change.
0,CAMEL-4774,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-12-13 13:11:09+00:00,2011-12-13 13:55:21+00:00,"There is an issue when installing the camel-jclouds feature, while the obr resolver is installed.
A workaround for this has been added to the jclouds-karaf feature 1.2.1_3. We should upgrade to it.",iocanel:1323755721:2011-12-13T13:55:21.561+0000:1323755721:2011-12-13T13:55:21.561+0000:Committed r1213695 to trunk.
0,CAMEL-4773,Bug,Major,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-13 10:47:46+00:00,2011-12-13 14:27:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/Dynamic-Routing-tp5068570p5068570.html",
0,CAMEL-4772,Bug,Major,2.7.5,2.7.5,"
None
",Resolved,Fixed,2.7.5,Willem Jiang,Christian Müller,0,0,2011-12-12 21:19:02+00:00,2011-12-13 06:33:43+00:00,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf 2.7.5-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
Downloading: http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.commons-pool/${commons-pool-bundle-version}/org.apache.servicemix.bundles.commons-pool-${commons-pool-bundle-version}.jar
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.066s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [1:17.335s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:20.222s
[INFO] Finished at: Mon Dec 12 22:12:52 CET 2011
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.2:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: Could not find artifact org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-pool:jar:${commons-pool-bundle-version} in central (http://repo1.maven.org/maven2)
[ERROR]",njiang:1323729223:2011-12-13T06:33:43.316+0000:1323729223:2011-12-13T06:33:43.316+0000:Applied patch into camel-2.7.x.
0,CAMEL-4771,Bug,Major,2.8.4,2.8.4,"
None
",Resolved,Fixed,2.8.4,Willem Jiang,Christian Müller,0,0,2011-12-12 20:59:41+00:00,2011-12-13 09:34:01+00:00,"Christian-Muellers-MacBook-Pro:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf
[INFO] Camel :: Platforms :: Apache Karaf :: Commands
[INFO] Camel :: Platforms :: Apache Karaf :: Features
[INFO] 
[INFO] ------------------------------------------------------------------------
...
Downloaded: http://repository.apache.org/snapshots/org/apache/camel/camel-castor/2.8.4-SNAPSHOT/camel-castor-2.8.4-20111212.023754-18.jar (17 KB at 21.9 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel :: Platforms :: Apache Karaf ................ SUCCESS [2.195s]
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SUCCESS [7.749s]
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... FAILURE [29.685s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.617s
[INFO] Finished at: Mon Dec 12 21:54:41 CET 2011
[INFO] Final Memory: 16M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.2.4:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: mvn:commons-io/commons-io/1.3.2 is not an OSGi bundle -> [Help 1]",
0,CAMEL-4770,Improvement,Major,None,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Claus Ibsen,0,1,2011-12-12 17:11:24+00:00,2012-03-25 13:57:13+00:00,"This allows people to add routes which consumes from JMS destinations, by which the consumer should start async in a separate thread, this ensures Camel will continue starting the route, and continue the code. Then the asyns thread starts the JmsConsumer in the background. This is needed in case the remote connection to the JMS broker does not work. But you want to signal the route is started anyway, as the JMS consumer most likely support failover and retry, so the connection may come online later.


We may need to add some way to store a flag, so you from JMX can monitor if the JMS consumer is live or not.


See nabble
http://camel.465427.n5.nabble.com/Adding-JMS-route-may-block-if-remote-is-down-using-failover-connection-tp5037014p5037014.html","michal.warecki:1330863913:2012-03-04T20:25:13.617+0000:1330863913:2012-03-04T20:25:13.617+0000:I attach first part of patch. Option ""asyncStartListener"" (ie. activemq:test?asyncStartListener=true) is responsible for asynchronous start listener in a new thread. I will now try to look at how we can connect this option to JMX.
davsclaus:1330911990:2012-03-05T09:46:30.044+0000:1330911990:2012-03-05T09:46:30.044+0000:Thanks for your work on this.

Can you use a non scheduled thread pool, as a scheduled thread pool cannot shrink, so it just keep 1 thread alive all the time, which is really not needed. We essentially need a thread pool that has 0-1 in size, so the thread can terminate when no longer needed. Also as a good citizen you ought to shutdown the pool when the consumer is shutting down in its doShutdown method. Albeit Camel has a fallback mehanishm, so it will shutdown thread pools when it shutdown itself. But still being a good citizen is a good idea.

Also if you use maven from the command line, you may want to check about building with checkstyle, so the source code is formatted correct.
http://camel.apache.org/building.html
michal.warecki:1330917249:2012-03-05T11:14:09.566+0000:1330917249:2012-03-05T11:14:09.566+0000:Thanks for the tips. I'll work on it yet. Also I'll activate checkstyle in eclipse.
michal.warecki:1331041764:2012-03-06T21:49:24.481+0000:1331041764:2012-03-06T21:49:24.481+0000:I attach new version of the patch. I hope I interpreted your instructions well. If this is correct, I will begin work on a connection with JMX.
davsclaus:1331355664:2012-03-10T13:01:04.767+0000:1331355664:2012-03-10T13:01:04.767+0000:Thanks Michael.

I decided to use a shared cached thread pool on JmsComponent, this is to ensure each startup task gets a dedicated thread to run, as they can potentially take a long time and/or block. Also the cached thread pool will shrink when the task is no longer in use. And its better to have a shared thread pool, than a thread pool per consumer, that could add a lot of thread pools for people with many JMS routes.


michal.warecki:1331509627:2012-03-12T07:47:07.890+0000:1331509627:2012-03-12T07:47:07.890+0000:Great solution. At the start of Camel excess threads could cause problems with memory. I think I will take into account the problem of large number of threads in the pool while designing an alerts mechanism (http://camel.465427.n5.nabble.com/DISCUSS-Camel-Alerts-td5497221.html).

I think we should open a new ticket for the new JMX flags because, due to unified management solution in the Camel, it will cover all consumers. One solution would be to add new interface (extending org.apache.camel.Service) with method isRunning() or isAlive() and add the same method to org.apache.camel.management.mbean.MenagedService and org.apache.camel.api.management.mbean.ManagedServiceMBean. Implementation would be like in org.apache.camel.CamelContext.ManagedService#getState. I will try to implement this solution when I find some free time.
michal.warecki:1331646435:2012-03-13T21:47:15.307+0000:1331646435:2012-03-13T21:47:15.307+0000:I prepared a draft implementation of JMX flag specifying whether consumer is actively running. I'm still confused about the naming used so if you have better proposition feel free :-)
Empirically tested so if the implementation is correct I can prepare unit tests.
davsclaus:1332655028:2012-03-25T13:57:08.232+0000:1332655028:2012-03-25T13:57:08.232+0000:I am not keen on adding more APIs to camel-core, just for this little need here.

So for now lets leave it as is. If there is any JMX stats needed, then it should be JmsConsumer specific only."
0,CAMEL-4769,Bug,Minor,"2.7.4, 2.8.3, 2.9.0","2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-12 09:32:46+00:00,2011-12-12 12:11:04+00:00,"The group name is not properly resolved if people specify a invalid host name, such as with underscores.
If so we should fallback and grab the group name by grabbing the string until the first path separator char.


See nabble
http://camel.465427.n5.nabble.com/Camel-Quartz-consumer-doesn-t-allow-underscores-tp5063734p5063734.html","bibryam:1323660169:2011-12-12T11:22:49.317+0000:1323660169:2011-12-12T11:22:49.317+0000:simple fix
davsclaus:1323663064:2011-12-12T12:11:04.758+0000:1323663064:2011-12-12T12:11:04.758+0000:Bilgin thanks for the patch. I already had it fixed, but ASF infra was not working well this morning, so I had to delay committing until it worked again"
0,CAMEL-4768,Bug,Minor,2.8.3,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Xavier Vergés,0,0,2011-12-12 09:01:06+00:00,2016-06-16 13:08:00+00:00,"Described in http://camel.465427.n5.nabble.com/Extra-Request-Params-sent-in-camel-HTTP-component-GET-request-td5042808.html


Route 



from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http4://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 




sends to the server the bridgeEndpoint=true&throwExceptionOnFailure=false parameters,
while route 



from(""jetty:http://0.0.0.0:8080/myapp/myservice"") 
.to(""http://www.google.com/?q=camel&bridgeEndpoint=true&throwExceptionOnFailure=false""); 




behaves properly and removes them","njiang:1323736967:2011-12-13T08:42:47.964+0000:1323736967:2011-12-13T08:42:47.964+0000:Applied patch into trunk, 2.8.x and 2.7.x branch."
0,CAMEL-4767,Task,Minor,2.8.3,None,"
None
",Closed,Fixed,2.10.0,Christian Müller,Christian Müller,0,0,2011-12-11 09:33:53+00:00,2012-01-11 23:19:54+00:00,"Since commons-codec 1.4, they fixed a few issues: http://commons.apache.org/codec/changes-report.html",
0,CAMEL-4766,Task,Minor,2.8.3,None,"
None
",Resolved,Won't Fix,3.0.0,Christian Müller,Christian Müller,1,2,2011-12-11 09:27:08+00:00,2014-08-23 08:03:51+00:00,"There are a lot of bug fixes since 2.6.


See:



http://commons.apache.org/lang/release-notes/RELEASE-NOTES-3.0.txt
http://commons.apache.org/lang/release-notes/RELEASE-NOTES-3.0.1.txt
http://commons.apache.org/lang/release-notes/RELEASE-NOTES-3.1.txt



For upgrade: http://commons.apache.org/lang/article3_0.html","davsclaus:1323639518:2011-12-12T05:38:38.000+0000:1323639518:2011-12-12T05:38:38.000+0000:I will suggest to not do major upgrades on our patch branches, eg 2.x -> 3.x.
muellerc:1323685129:2011-12-12T18:18:49.173+0000:1323685129:2011-12-12T18:18:49.173+0000:Yes, you are right. I will change it.
muellerc:1323698040:2011-12-12T21:54:00.295+0000:1323698040:2011-12-12T21:54:00.295+0000:This means we have to upgrade for Camel 2.9.0 or wait until 2.10.0...
I will have a look what it means if we upgrade in Camel 2.9.0...
muellerc:1323701059:2011-12-12T22:44:19.762+0000:1323701059:2011-12-12T22:44:19.762+0000:We have a few dependencies like dozer, commons-configuration, openjpa and velocity which requires commons-lang 2.x. I will postpone this to Camel 2.10.0 
muellerc:1336459358:2012-05-08T14:42:38.594+0000:1336459358:2012-05-08T14:42:38.594+0000:As Claus suggested, we will postpone this update to Camel 3.0.0
davsclaus:1408752231:2014-08-23T08:03:51.369+0000:1408752231:2014-08-23T08:03:51.369+0000:We have some components that uses 3.x and others that must use 2.x are using that."
0,CAMEL-4765,Improvement,Minor,2.9.0,None,"
None
",Resolved,Fixed,2.9.0,Babak Vahdat,Babak Vahdat,0,0,2011-12-11 00:01:56+00:00,2011-12-12 09:00:49+00:00,"Some simple change examples on the trunk are:


From:



jpaTemplate = (JpaTemplate)applicationContext.getBean(""jpaTemplate"");




To:



jpaTemplate = applicationContext.getBean(""jpaTemplate"", JpaTemplate.class);




Or


From:



HttpEndpoint epOut = (HttpEndpoint) getContext().getEndpoint(""http://localhost:"" + port1 + ""?bridgeEndpoint=true&throwExceptionOnFailure=false"");




To:



HttpEndpoint epOut = getContext().getEndpoint(""http://localhost:"" + port1 + ""?bridgeEndpoint=true&throwExceptionOnFailure=false"", HttpEndpoint.class);




Here another one with the removal of @SuppressWarnings as a side effect:


From:



    @SuppressWarnings(""unchecked"")
    public <T> T lookup(Class<T> type) {
        ApplicationContext context = getApplicationContext();
        String[] names = context.getBeanNamesForType(type, true, true);
        if (names != null) {
            int count = names.length;
            if (count == 1) {
                // lets instantiate the single bean
                return (T)context.getBean(names[0]);
            } else if (count > 1) {
                throw new IllegalArgumentException(""Too many beans in the application context of type: "" + type + "". Found: "" + count);
            }
        }
        throw new IllegalArgumentException(""No bean available in the application context of type: "" + type);
    }




To:



    public <T> T lookup(Class<T> type) {
        ApplicationContext context = getApplicationContext();
        String[] names = context.getBeanNamesForType(type, true, true);
        if (names != null) {
            int count = names.length;
            if (count == 1) {
                // lets instantiate the single bean
                return context.getBean(names[0], type);
            } else if (count > 1) {
                throw new IllegalArgumentException(""Too many beans in the application context of type: "" + type + "". Found: "" + count);
            }
        }
        throw new IllegalArgumentException(""No bean available in the application context of type: "" + type);
    }




There're also cases where we could make a huge benefit of this so that the following code:



    public <T> T getMandatoryBean(Class<T> type, String name) {
        Object value = applicationContext.getBean(name);
        assertNotNull(""No spring bean found for name <"" + name + "">"", value);
        if (type.isInstance(value)) {
            return type.cast(value);
        } else {
            fail(""Spring bean <"" + name + ""> is not an instanceof "" + type.getName() + "" but is of type "" + ObjectHelper.className(value));
            return null;
        }
    }




became just a one liner as:



    public <T> T getMandatoryBean(Class<T> type, String name) {
        return applicationContext.getBean(name, type);
    }




I also came across the cases where the prefered API indeed was used but there were unneccessary casts around it:
From:



// must type cast to work with Spring 2.5.x
SpringCamelContext context = (SpringCamelContext) applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next();




To:



SpringCamelContext context = applicationContext.getBeansOfType(SpringCamelContext.class).values().iterator().next();




Another benefit of this patch is a better test code coverage, because as one would intuitively expect DefaultCamelContext.getEndpoint(String name, Class<T> endpointType) makes use of DefaultCamelContext.getEndpoint(String uri) before casting and returning the answer. So that now through the usage of the first method API (expecting two parameters) we do call both of them while testing (one explicitly and the other one implicitly) 


There're 147 sources affected by the provided patch (one source change is just because of an already pre-existing checkstyle violation by HtmlToPdfMojo.java on the trunk).


I did verify only the tests on camel-core but not the rest with the following test result (Windows-Vista):


Results :


Failed tests:
  testConcurrentAppend(org.apache.camel.component.file.FileConcurrentWriteAppendSameFileTest): mock://result Received message count. Expected: <5000> but was: <2655>


Tests run: 3969, Failures: 1, Errors: 0, Skipped: 0


[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25:49.095s
[INFO] Finished at: Sun Dec 11 00:45:35 CET 2011
[INFO] Final Memory: 20M/494M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.8:test (default-test) on project camel-core: There are test failures.","bvahdat:1323533298:2011-12-11T00:08:18.802+0000:1323533298:2011-12-11T00:08:18.802+0000:With this patch in place we would also propose a better coding-practice to the users as many of the fixes are along the lines:

{code}
// START SNIPPET: xyz
...
...
// END SNIPPET: xyz
{code}
davsclaus:1323642941:2011-12-12T06:35:41.667+0000:1323642941:2011-12-12T06:35:41.667+0000:The type casting was needed due Spring 2.x support did not have the API with the generics.
bvahdat:1323644847:2011-12-12T07:07:27.417+0000:1323644847:2011-12-12T07:07:27.417+0000:Yeah, exactly!
bvahdat:1323647631:2011-12-12T07:53:51.798+0000:1323647631:2011-12-12T07:53:51.798+0000:I also hit a bunch of the places (like [1]) where that was recently done using the Spring 3.0.6 API. In that concret case the caste was obsolete. Nevertheless that would be great to clean them up.

[1] http://svn.apache.org/viewvc?view=revision&revision=1212276

Babak
davsclaus:1323651649:2011-12-12T09:00:49.823+0000:1323651649:2011-12-12T09:00:49.823+0000:Thanks for the patch."
0,CAMEL-4764,New Feature,Minor,2.8.3,"2.8.4, 2.9.0","
None
",Closed,Fixed,"2.8.4, 2.9.0",Christian Müller,Bilgin Ismet Ibryam,0,0,2011-12-10 23:19:32+00:00,2011-12-24 11:33:30+00:00,"The SDB component supports putting, getting and deleting items with attributes from/to Amazon's Simple DB service.
The domain will be created during startup if it doesn't already exists.","bibryam:1323530484:2011-12-10T23:21:24.372+0000:1323530484:2011-12-10T23:21:24.372+0000:I will add the documentation after/if the patch gets committed.
davsclaus:1324088541:2011-12-17T10:22:21.159+0000:1324088541:2011-12-17T10:22:21.159+0000:Bilgin I have committed the patch to trunk. Do you mind working on the documentation?
davsclaus:1324089452:2011-12-17T10:37:32.065+0000:1324089452:2011-12-17T10:37:32.065+0000:Patch merged to 2.8 branch as well.
bibryam:1324117236:2011-12-17T18:20:36.033+0000:1324117236:2011-12-17T18:20:36.033+0000:Thanks for committing Claus, I will add the documentation.
muellerc:1324118760:2011-12-17T18:46:00.688+0000:1324118760:2011-12-17T18:46:00.688+0000:The following pages needs to be updated:
- http://camel.apache.org/aws.html
- http://camel.apache.org/aws-sdb.html (doesn't exists until now)
- http://camel.apache.org/component-list.html
- http://camel.apache.org/camel-290-release.html

Thanks in advance,
Christian
bibryam:1324395505:2011-12-20T23:38:25.371+0000:1324395505:2011-12-20T23:38:25.371+0000:Documentation finally added :)
muellerc:1324697610:2011-12-24T11:33:30.489+0000:1324697610:2011-12-24T11:33:30.489+0000:Well done, also the documentation."
0,CAMEL-4763,Task,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Guillaume Nodet,Claus Ibsen,1,1,2011-12-09 15:15:24+00:00,2019-07-31 04:19:41+00:00,"The logging error handler does not add much value.


People should instead use a DeadLetterChannel and send the message to a log endpoint.",
0,CAMEL-4762,Task,Minor,None,None,"
None
",Resolved,Fixed,2.9.0,Willem Jiang,Willem Jiang,0,0,2011-12-09 15:01:24+00:00,2011-12-09 15:09:56+00:00,"hawtbuf 2.7 has a fix which can help the ObjectCodec load the class dynamically.
We need to use it to fix the issue of CAMEL-4709.",njiang:1323414596:2011-12-09T15:09:56.497+0000:1323414596:2011-12-09T15:09:56.497+0000:Applied the patch into trunk.
0,CAMEL-4761,New Feature,Major,"2.8.3, 2.9.0",,"
None
",Resolved,Abandoned,None,Unassigned,Raúl Kripalani,1,2,2011-12-09 13:23:15+00:00,2019-07-28 08:25:10+00:00,"Only applicable to InOnly exchanges.


Using the right combination of Camel route + ActiveMQ or other JMS provider for internal routing, it is straight forward to achieve crash-proof routing. That is, if the container crashes in the middle of routing, when it comes back up it can resume processing from where it cut off. For this, we use the JMS broker as our persistent medium. This allows Camel to be lightweight and to not depend on a DB (like other middleware offerings do).


However, this entails splitting the route in several routes, chained together via JMS queues. For example:



from(""cxf:bean:..."")
  .to(""xslt:..."")
  .to(""cxf:bean:..."")
  .to(""activemq:queue:route.block2"");

from(""activemq:queue:route.block2"")
  .to(""xslt:..."")
  .to(""cxf:bean:..."")
  .to(""activemq:queue:route.block3"");

from(""activemq:queue:route.block3"")
  ...;




Even though the goal is achieved, the syntax is quite verbose and creates queue proliferation in the broker. It complicates the routing logic and is intrusive, since it forces the developer to ""pollute"" their code with concerns that could be handled by the middleware itself.


Ideas/paths to explore:



Provide a quick and easy way for folks to signal ""checkpoints"" or ""savepoints"" and have Camel take care of diverting out to the broker behind the curtains. Create a new DSL to mark checkpoints and have Camel automatically use the context id, route id and a checkpoint name to create JMS queues and transparently weave the to() and from() from the two sections separated by a checkpoint. For example, the route above turns into:




from(""cxf:bean:..."")
  .to(""xslt:..."")
  .to(""cxf:bean:..."")
  .checkpoint(""block2"")
  .to(""xslt:..."")
  .to(""cxf:bean:..."")
  .checkpoint(""block3)""
  ...;





Create a ""reliable:"" component wrapper to wrap endpoints and provide idempotence and store replies. Upon a second execution of the route after a failed first attempt, the entire route would be replayed from the beginning and when the reliable endpoints are hit, they would skip invoking the real endpoint and return the response received in the first iteration (thanks James Strachan). Would this require a DB?




Create an attribute on the <route> element (e.g. ""recoverable""), which automatically applies an InterceptionStrategy to divert in and out of the JMS broker before endpoints.","raulvk:1323408690:2011-12-09T13:31:30.593+0000:1323408690:2011-12-09T13:31:30.593+0000:Attached an example of a route based on Camel 2.8.3 that uses a ping-pong routing style to achieve reliability [https://issues.apache.org/jira/secure/attachment/12506738/test-crashProofProcessing.xml]. 

The entire route is implemented as a content-based router based on a StepPoint header. The onCompletion block takes care of incrementing the value of header each time a block finishes and returning the message to the JMS broker.

From there, it is read again and the whole cycle repeats until the last block sets the FinalStep property on the Exchange, which signals onCompletion to stop the ping-pong there.

In this pattern, each when is a processing block pertaining to a sequence. Between each processing block, persistence is provided automatically by the JMS broker and the user doesn't need to worry about sending to the JMS broker themselves.
davsclaus:1564273510:2019-07-28T08:25:10.665+0000:1564273510:2019-07-28T08:25:10.665+0000:Closing old tickets"
0,CAMEL-4760,Improvement,Minor,2.8.3,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Claus Ibsen,Sergey Zhemzhitsky,0,0,2011-12-09 12:58:04+00:00,2011-12-12 07:34:34+00:00,"The following snippets do not work, although each of the specified error handlers supports logName and executorServiceRef. The issue is actual for the DeadLetterChannel error handler too.


LoggingErrorHandler
<errorHandler id=""errorHandler"" type=""LoggingErrorHandler"" logName=""${router.logger.name}"" executorServiceRef=""redeliveryExecutor""/>




DefaultErrorHandler
<errorHandler id=""errorHandler"" type=""DefaultErrorHandler"" logName=""${router.logger.name}"" executorServiceRef=""redeliveryExecutor""/>




StackTrace
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/spring/camel-context.xml]; nested exception is java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:186)
	... 42 more
Caused by: java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler","davsclaus:1323408914:2011-12-09T13:35:14.374+0000:1323408914:2011-12-09T13:35:14.374+0000:This is working as designed. The logging error handler should only support the logName and level options.

I have improved the validation in camel-spring to better detect that.
szhemzhitsky:1323409312:2011-12-09T13:41:52.901+0000:1323409312:2011-12-09T13:41:52.901+0000:Hi Claus,

>> The logging error handler should only support the logName and level options.

As I understand I can configure redeliveryPolicy with asyncDelayedRedelivery for logging error handler and according to the [documentation|http://camel.apache.org/exception-clause.html#ExceptionClause-Asynchronousdelayedredelivery] for asyncDelayedRedelivery a custom executor service can be configured.
davsclaus:1323410807:2011-12-09T14:06:47.656+0000:1323410807:2011-12-09T14:06:47.656+0000:No the logging error handler does *not* support all those redelivery settings etc. It can only log.
szhemzhitsky:1323412663:2011-12-09T14:37:43.221+0000:1323412663:2011-12-09T14:37:43.221+0000:Here is the unit test that proves asyncDelayedRedelivery can be used with logging error handler.

{code:title=AsyncDelayedRedeliveryLogErrorHandlerTest.java}
package org.foo.bar;

import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.processor.RedeliveryPolicy;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

import javax.naming.Context;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class AsyncDelayedRedeliveryLogErrorHandlerTest extends CamelTestSupport {

    @Test
    public void asyncRedeliveryTimer() throws Exception {
        context().addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                    .to(""seda:next?waitForTaskToComplete=Never&size=10"");

                from(""seda:next"")
                    .errorHandler(loggingErrorHandler())
                    .onException(Exception.class)
                        .redeliveryPolicyRef(""redeliveryPolicy"")
                        .handled(true)
                        .to(""mock:exception"")
                    .end()
                    .process(new Processor() {
                        private AtomicInteger counter = new AtomicInteger();
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            if (counter.compareAndSet(1, 2)) {
                                exchange.setProperty(""ThrowException"", Boolean.TRUE);
                                exchange.getIn().setBody(counter.get() - 1);
                            } else {
                                exchange.getIn().setBody(counter.getAndIncrement());
                            }
                        }
                    })
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            if (Boolean.TRUE.equals(exchange.getProperty(""ThrowException"", Boolean.class))) {
                                exchange.removeProperty(""ThrowException"");
                                throw new RuntimeException(""Test Exception!"");
                            }
                        }
                    })
                    .to(""mock:result"");
            }
        });

        MockEndpoint result = getMockEndpoint(""mock:result"");
        result.expectedMessageCount(5);
        result.allMessages().property(""ThrowException"").isNull();

        // the 2nd sent message must be delivered 5th
        result.message(4).body().isEqualTo(1);
        // ensure there is no delay between the 1st and the 3rd sent messages
        result.message(1).arrives().noLaterThan(100).millis().afterPrevious();

        startCamelContext();

        for(int i = 0; i < 5; i++) {
            sendBody(""direct:start"", i);
        }

        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS);
    }

    @Override
    protected Context createJndiContext() throws Exception {
        Context jndiContext = super.createJndiContext();

        RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
        redeliveryPolicy.setAsyncDelayedRedelivery(true);
        redeliveryPolicy.setMaximumRedeliveries(1);
        redeliveryPolicy.setRedeliveryDelay(5000);
        jndiContext.bind(""redeliveryPolicy"", redeliveryPolicy);

        return jndiContext;
    }

    @Override
    public boolean isUseRouteBuilder() {
        return false;
    }

}
{code}

Please take a loot at assertions:

{code}
// the 2nd sent message must be delivered 5th
result.message(4).body().isEqualTo(1);
// ensure there is no delay between the 1st and the 3rd sent messages
result.message(1).arrives().noLaterThan(100).millis().afterPrevious();
{code}

The 2nd sent message is delivered 5th because of redelivery and the 2nd delivered message which is equal to 3rd sent message arrives no later than 100 millis after the first delivered message although _redeliveryDelay_ is equal to 5 seconds. That means I can configure async. redelivery with logging error handler, so I have two questions:

# If I can configure async. redelivery with logging error handler why I cannot specify custom executor service, although logging error handler extends default error handler?
# Is it possible to specify logName for default error handler, because it seems that spring dsl does not allow to specify logName for loggers although java dsl does?
davsclaus:1323414668:2011-12-09T15:11:08.438+0000:1323414668:2011-12-09T15:11:08.438+0000:The logging error handler is suppose to be a simple logger. The LoggingErrorHandlerBuilder does not offer any DSL for setting redelivery etc.
So you can only set the logName and log level on the loggingErrorHandler() in the DSL.

What you do is to configure redelivery settings using onException which supports that.
szhemzhitsky:1323645158:2011-12-12T07:12:38.615+0000:1323645178:2011-12-12T07:12:58.416+0000:Hello Claus,

Thanks a lot for clarification, but I'm still wondering how to use _onException_ and custom executor service at the same time.
What I need is async. redelivery + logging every redelivery attempt using custom logName and logLevel.

I have tried to use DefaultErrorHandler, but Spring DSL does not allow to specify custom logName, although Java DSL does.
Here is an exception:

{code}
Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'logName' of bean class [org.apache.camel.builder.DefaultErrorHandlerBuilder]: Bean property 'logName' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1024)
	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:900)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:76)
	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:58)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowire
{code}


davsclaus:1323646474:2011-12-12T07:34:34.530+0000:1323646474:2011-12-12T07:34:34.530+0000:The logging error handler is not for logging redelivery attempts and stacktraces etc. All it can do is log the failed *message*, not the cause of the problem etc.

What you are asking for is to configure the log name on the redelivery based error handlers.
You can configure many options about which level to use and whether to log stack traces etc.

See the API
http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html

What is missing is to configure the log name, as Camel will currently always use the class name of the error handler implementation."
0,CAMEL-4759,Sub-task,Major,"2.8.4, 2.9.0",2.10.0,"
None
",Resolved,Fixed,2.10.0,Raúl Kripalani,Raúl Kripalani,0,0,2011-12-09 12:10:03+00:00,2012-01-16 13:37:41+00:00,"The <xpath> XML element in Spring DSL doesn't allow to set the following options which are available on Java DSL:



factory
object model
shortcut to use Saxon



These options should be implemented as attributes on the xpath XML element, e.g.:



<xpath factory=""net.sf.saxon.xpath.XPathFactoryImpl"">...</xpath>





<xpath objectModel=""http://saxon.sf.net/jaxp/xpath/om"">...</xpath>




(this one somehow feels ugly, is the objectModel supposed to be a namespace?)



<xpath saxon=""true"">...</xpath>




Only one should be allowed at a time.","raulvk:1323403838:2011-12-09T12:10:38.232+0000:1323403838:2011-12-09T12:10:38.232+0000:I'll try and provide a patch soon.
raulvk:1324355918:2011-12-20T12:38:38.001+0000:1324355918:2011-12-20T12:38:38.001+0000:Patch attached. Users can now specify Saxon in three different ways in the <xpath /> Spring DSL element:
* saxon=true
* objectModel=""http://saxon.sf.net/jaxp/xpath/om""
* factoryRef=""ref to the bean of type XPathFactoryImpl""

saxon=true is a shortcut for setting the objectModel to the above value.
Added new logic to obtain the XPathFactory based on the objectModel URI on a per-instance basis. This was only being used to obtain the ""defaultXPathFactory"" which is set as a static field in the XPathBuilder.

Added a number of test cases to validate the changes. During initialisation, the XPathFactory system variable is set to force the JRE to use the platform default (Xalan), since having Saxon in the classpath will make the JRE pick it up due to Service Provider discovery. This does not happen in OSGi because the META-INF/services directory of the Saxon bundle is not exported (as Service Provider mechanism clashes with OSGi).

Also, added a toString() representation to DefaultNamespaceContext and a new log statement printed on TRACE level whenever a new XPath Expression is added to the pool, which also shows the Namespace context.

davsclaus:1324452771:2011-12-21T15:32:51.582+0000:1324452771:2011-12-21T15:32:51.582+0000:I wonder if the XPathLanguageTest works on IBM JDKs and the likes? I assume they are happy and embed the SUN xpath factory?
raulvk:1324453883:2011-12-21T15:51:23.400+0000:1324453883:2011-12-21T15:51:23.400+0000:That is a pretty good question. There should be at least two implementations on any JDK with the current project configuration: the Saxon one and the platform default. What do you think about using java.util.ServiceLoader<XPathFactory> to search all available implementations, discarding the Saxon one, thus sticking to the platform default?
raulvk:1324529233:2011-12-22T12:47:13.062+0000:1324529233:2011-12-22T12:47:13.062+0000:Claus, it looks like there is no way to find what the platform default XPath implementation is.
ServiceLoader doesn't help because as the XPathFactory javadoc specifies...

{quote}
Platform default XPathFactory is located in a platform specific way. There must be a platform default XPathFactory for the W3C DOM, i.e. DEFAULT_OBJECT_MODEL_URI.
{quote}

In fact, in the Sun JDK the platform default XPathFactory is not even registered via META-INF/services. Maybe someone who has the IBM JDK installed could do a little investigation to find out the name of the default Impl class, and we could spice up the logic in this test to use that one if the JDK is IBM's.
bvahdat:1324534228:2011-12-22T14:10:28.022+0000:1324534228:2011-12-22T14:10:28.022+0000:Hi Raul,

Until IBM JDK-5 they used to have only [1] as the only XPathFactory Impl and IBM JDK-6 (which is our concern)
provides both [1] & [2]. However [1] still seems to be the default.

As you've already mentioned the generic ServiceLoader mechanism (of Mark Reinhold) is (unfortunately) not used here as well and the IBM JDK goes through some proprietary steps similiar to below to load the defaults:

- first use the factory using the set system properties
- then through a jaxp.properties (inside JRE) with entries pointing what the default Impl is to be used for JAXP, Transformation, Validation APIs etc.
- if still not found go for some hard-coded defaults

Just as an extra note: Using [2] I used to have some memory-leak issues but had nothing to do with Camel
And just as the last note: I LOVE the glasses you wear as they're simply cool :-)

[1] org.apache.xpath.jaxp.XPathFactoryImpl
[2] com.ibm.xtq.xpath.jaxp.XPathFactoryImpl

davsclaus:1324538142:2011-12-22T15:15:42.702+0000:1324538142:2011-12-22T15:15:42.702+0000:We can just check if the java vendor is oracle/sun, and then run the test. For other vendors its fine to skip.
It's fine, we cannot solve all the worlds problems. We have some tests that dont run on IBM or Windows etc. 
raulvk:1325562929:2012-01-03T11:55:29.394+0000:1325562929:2012-01-03T11:55:29.394+0000:Done. Now checking if vendor is IBM and only running tests if not.
Cannot use JUnit Assume to conditionally skip tests because this test cases are based on JUnit 3.8.
To use JUnit 4 we'd have to import camel-test (to use {{org.apache.camel.test.junit4.CamelSpringTestSupport}}), but this means creating yet another intra-project dependency and I'm not sure whether it's the way to go. So instead, the tests are skipped by immediately returning (consequently counting the test as passed instead of skipped).

I've moved the patch from this subtask to the parent task.

P.S.: Babak, thanks! You mean my avatar on Twitter? I've changed it now though ;)
raulvk:1326692261:2012-01-16T13:37:41.540+0000:1326692261:2012-01-16T13:37:41.540+0000:Documentation added on the XPath Expression Language page."
0,CAMEL-4758,Improvement,Minor,2.9.0,2.9.1,"
None
",Resolved,Fixed,2.9.1,Claus Ibsen,Glen Mazza,0,0,2011-12-09 12:00:27+00:00,2011-12-22 10:27:03+00:00,"Mostly typos/grammatical errors fixed (from svn on ""trunk"") - see patch.","davsclaus:1323405960:2011-12-09T12:46:00.220+0000:1323405960:2011-12-09T12:46:00.220+0000:Thanks Glen
gmazza:1324454350:2011-12-21T15:59:10.617+0000:1324454350:2011-12-21T15:59:10.617+0000:Hi, I updated a few of the classes based on your responses to my questions on Camel-Dev:
http://camel.465427.n5.nabble.com/Convert-IsSingleton-and-MultipleConsumersSupport-to-marker-interfaces-td5061939.html#a5062086
http://camel.465427.n5.nabble.com/intended-scope-of-CamelAuthorizationException-td5062085.html

gmazza:1324454434:2011-12-21T16:00:34.694+0000:1324454434:2011-12-21T16:00:34.694+0000:Sorry -- just an additional patch attached of things missed the first time around.
davsclaus:1324520823:2011-12-22T10:27:03.441+0000:1324520823:2011-12-22T10:27:03.441+0000:Thanks Glen.

Applied the 2nd patch."
0,CAMEL-4757,Improvement,Minor,2.9.0,2.9.0,"
None
",Resolved,Duplicate,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-09 11:41:16+00:00,2011-12-09 12:22:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/XPath-Language-Saxon-for-XPath-2-0-on-Spring-DSL-tp5056545p5056545.html


We should add an option so you can configure to use saxon, like you can do in Java DSL.
Something alike:



<xpath saxon=""true"">/foo/bar</xpath>",davsclaus:1323404556:2011-12-09T12:22:36.577+0000:1323404556:2011-12-09T12:22:36.577+0000:Duplicate of CAMEL-4759
0,CAMEL-4756,Bug,Major,"2.8.2, 2.8.3","2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-12-09 03:58:51+00:00,2011-12-09 14:56:59+00:00,"We will get a NPE error when setting skipStartingCamelContext system property to be true.



      java.lang.NullPointerException
        at org.apache.camel.spring.SpringCamelContext.springCamelContext(SpringCamelContext.java:75)
        at org.apache.camel.test.junit4.CamelSpringTestSupport.createCamelContext(CamelSpringTestSupport.java:180)
        at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:197)
        at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:167)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)",njiang:1323413819:2011-12-09T14:56:59.457+0000:1323413819:2011-12-09T14:56:59.457+0000:Applied patch into trunk and camel-2.8.x branch.
0,CAMEL-4755,Bug,Major,2.8.3,2.9.0,"
None
",Resolved,Won't Fix,2.9.0,Claus Ibsen,Robin Howlett,0,0,2011-12-08 18:55:44+00:00,2011-12-09 04:59:09+00:00,"org.apache.camel.processor.RecipientListIgnoreInvalidEndpointsTest in camel-core does not pass if instead of using a non-existent component/endpoint like ""fail:endpoint"", a valid component is used but the endpoint does not exist e.g. ""direct:endpoint"".


The following exception is thrown and not ignored: ""org.apache.camel.CamelExchangeException: No consumers available on endpoint: Endpoint[direct://endpoint]. Exchange[Message: Hello World]""","davsclaus:1323377949:2011-12-09T04:59:09.376+0000:1323377949:2011-12-09T04:59:09.376+0000:This is working as designed.

The direct component will at runtime throw exception if you send a message to a unknown destination."
0,CAMEL-4754,Bug,Minor,2.8.3,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Babak Vahdat,0,0,2011-12-08 16:25:18+00:00,2011-12-12 05:48:37+00:00,See http://camel.465427.n5.nabble.com/global-onException-clause-wrongly-identifies-route-in-which-exception-occurs-log-name-td5058304.html,"bvahdat:1323338114:2011-12-08T17:55:14.098+0000:1323338114:2011-12-08T17:55:14.098+0000:Maybe just as a small hint, I attached a screenshot showing the cause of the problem: the LogProcessor gets (correctly) wired with the simple expression we've on log DSL, like:

{code}
onException(Exception.class)
    .log(""Error due ${exception.message}"");
{code}

But with the *wrong* CamelLoggger object which is to be used for the route 'bar'. Correctly it should be wired to the CamelLogger of the route 'foo'.
davsclaus:1323396456:2011-12-09T10:07:36.153+0000:1323396456:2011-12-09T10:07:36.153+0000:The workaround is to use route scoped onExceptions.


davsclaus:1323396768:2011-12-09T10:12:48.745+0000:1323396768:2011-12-09T10:12:48.745+0000:Its a bug in the error handler when using context scoped onException.

When the routes is built, then the error handler is mixed in the routes (Camel 2.x architecture), and in this logic error handlers is build based on the given route built, and a reference is stored in the context scoped OnException. However that reference should have been keyed to the given created route. This ensures when Camel picks the OnException to handle the exception that occurred, it should pick the error handler that matches the current route. Beforehand it will pick the last created error handler from the last created route. All though the error handler reacts similar, it was only the Log DSL that uses the route id in the log process, and thus that route id was wrong, causing the Log processor to log the wrong id.

davsclaus:1323405662:2011-12-09T12:41:02.418+0000:1323405662:2011-12-09T12:41:02.418+0000:This has API changes and a slightly bigger changes in the routing engine. So am a bit inclined to backport to a patch release, to only fix a route id in a log. And we have a known workaround.
bvahdat:1323414385:2011-12-09T15:06:25.256+0000:1323414385:2011-12-09T15:06:25.256+0000:@Claus,

I'm afraid that the test ContextScopedOnExceptionCorrectRouteContextTest doesn't really verify the fix, as we do swallow all the possible exceptions after the template.sendBody() call, so that using the processor DSL even if we would assert on:

{code}
assertEquals(""balabala"", routeId);
{code}

The tests would still pass well! as we swallow all kindes of the exceptions after the template.sendBody() calls (including a CamelExecutionException wrapping junit.framework.ComparisonFailure)

I went for another approach using a logger-name-recording-log4j-appender (see below) and removed the processor approach. If you think this would make more sense to you I would append the diff (tomorrow) into this ticket so that you can apply it into the trunk.

{code}
public class ContextScopedOnExceptionCorrectRouteContextTest extends ContextTestSupport {

    private LoggerNameRecordingAppender loggerNameRecordingAppender;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        // append our custom log4j Appender through which we want to verify the
        // logger name of the log messages
        loggerNameRecordingAppender = new LoggerNameRecordingAppender(""Error due Forced foo error"", ""Error due Forced bar error"");
        Logger.getRootLogger().addAppender(loggerNameRecordingAppender);
    }

    @Override
    protected void tearDown() throws Exception {
        // we're done, so remove our custom Appender from the root logger
        Logger.getRootLogger().removeAppender(loggerNameRecordingAppender);

        super.tearDown();
    }

    @Override
    public boolean isUseRouteBuilder() {
        return false;
    }

    public void testContextScopedOnExceptionLogRouteBarFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"")
                    .throwException(new IllegalArgumentException(""Forced bar error""));
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);
        
        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // ignore
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(1, barHits.size());
        assertEquals(""bar"", barHits.get(0));

        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(0, fooHits.size());
    }

    public void testContextScopedOnExceptionLogRouteFooFail() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                onException(Exception.class)
                    .log(""Error due ${exception.message}"");

                from(""direct:start"").routeId(""foo"")
                    .to(""mock:foo"")
                    .throwException(new IllegalArgumentException(""Forced foo error""))
                    .to(""direct:bar"")
                    .to(""mock:result"");

                from(""direct:bar"").routeId(""bar"")
                    .to(""mock:bar"");

                from(""direct:killer"").routeId(""killer"")
                    .to(""mock:killer"");
            }
        });
        context.start();

        getMockEndpoint(""mock:foo"").expectedMessageCount(1);
        getMockEndpoint(""mock:bar"").expectedMessageCount(0);
        getMockEndpoint(""mock:result"").expectedMessageCount(0);

        try {
            template.sendBody(""direct:start"", ""Hello World"");
            fail(""Should have thrown exception"");
        } catch (Exception e) {
            // expected
        }

        assertMockEndpointsSatisfied();

        // assert on the logger name through which we've logged the message
        // using the log dsl
        List<String> fooHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced foo error"");
        assertEquals(1, fooHits.size());
        assertEquals(""foo"", fooHits.get(0));

        List<String> barHits = loggerNameRecordingAppender.getRecordedLoggerNamesFor(""Error due Forced bar error"");
        assertEquals(0, barHits.size());
    }

    private static class LoggerNameRecordingAppender extends AppenderSkeleton {

        private final List<String> recordedLogMessages;
        private final Map<String, List<String>> recordedLoggerNames;

        LoggerNameRecordingAppender(String... logMessages) {
            this.recordedLogMessages = new ArrayList<String>(Arrays.asList(logMessages));
            this.recordedLoggerNames = new HashMap<String, List<String>>();
            for (String logMessage : logMessages) {
                recordedLoggerNames.put(logMessage, new ArrayList<String>());
            }
        }

        @Override
        protected void append(LoggingEvent event) {
            String logMessage = event.getRenderedMessage();
            if (recordedLogMessages.contains(logMessage)) {
                // add this hit to the list of the logger names we have got so far
                // for this log message
                List<String> actual = recordedLoggerNames.get(logMessage);
                actual.add(event.getLoggerName());
            }
        }

        List<String> getRecordedLoggerNamesFor(String logMessage) {
            return Collections.unmodifiableList(recordedLoggerNames.get(logMessage));
        }

        @Override
        public boolean requiresLayout() {
            return false;
        }

        @Override
        public void close() {
            // noop
        }
    }
}
{code}
davsclaus:1323415500:2011-12-09T15:25:00.715+0000:1323415500:2011-12-09T15:25:00.715+0000:The new unit tests has a inlined processor that checks the route id is the correct value.

However fell free to submit a patch with your logging appender ""trick"". You must attach a file to the JIRA and mark [x] in grant license to Apache. Otherwise we cannot accept your contribution.
bvahdat:1323416024:2011-12-09T15:33:44.731+0000:1323416024:2011-12-09T15:33:44.731+0000:But that check doesn't really work, because if you would do

{code}
assertEquals(""balabala"", routeId);
{code}

The test would still *pass*. The processor is O.K. the problem are those 2 catch blocks after the template.sendBody() calls. Maybe you want to give it a try with that ""balabala"" routeId to see what I mean.
bvahdat:1323443160:2011-12-09T23:06:00.126+0000:1323443160:2011-12-09T23:06:00.126+0000:Attached two potential fixes you may want to consider (either one *or* two, but not both)

- CAMEL-4754-option-one.patch: to remedy the potential exception swallowing on junit.framework.ComparisonFailure, I hope my pointer I tried to explain in my previous posts is clear by now

- CAMEL-4754-option-two.patch: how did you name it? Yeah, this's the one with that logging appender ""trick""

The decision is yours :-)
bvahdat:1323570373:2011-12-11T10:26:13.787+0000:1323570569:2011-12-11T10:29:29.460+0000:According to my previous post on this I reopened the ticket, so that we can remedy this ""false positive"" effect while unit-testing.
See the two provided patches for this.
davsclaus:1323640117:2011-12-12T05:48:37.916+0000:1323640117:2011-12-12T05:48:37.916+0000:Thanks for the patch. I went for number one and polished it a bit."
0,CAMEL-4753,New Feature,Major,2.9.0,3.0.0,"

dsl

",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,2,2011-12-08 12:56:34+00:00,2017-07-12 17:37:32+00:00,"When using a method call expression, people may want to map parameters. Currently they can use the method name attribute, which supports this in Camel 2.9 onwards. Using a syntax that is similar to java code. See
http://camel.apache.org/bean-binding.html


However Christian S. suggested to also allow to map using a nested list of Expression. So you can do



<method ref=""myBean"" method=""myMethod"">
  <xpath>/foo/bar</xpath>
  <simple>${header.cool}</simple>
</method>




That will invoke the myMethod with 2 parameters, and the 1st is the xpath, and the 2nd the simple.


Likewise we could consider improving the <bean> as well, if you want to invoke a bean in a route, eg like a <to>



<bean ref=""myBean"" method=""myMethod"">
  <xpath>/foo/bar</xpath>
  <simple>${header.cool}</simple>
</bean>




And for the Java DSL, we may support this as well by using varargs for the list of expressions



.beanRef(""myBean"", ""myMethod"", xpath(""/foo/bar""), simple(""${header.cool""))




The trick is to support this as well in the scala DSL.
And to ensure backwards compatibility.","davsclaus:1338610789:2012-06-02T12:19:49.075+0000:1338610789:2012-06-02T12:19:49.075+0000:Let the DSL API be as current, so moving to 3.0
onders:1499847577:2017-07-12T16:19:37.950+0000:1499847577:2017-07-12T16:19:37.950+0000:scala dsl is deprecated already? we should consider for java and xml dsls?
davsclaus:1499852252:2017-07-12T17:37:32.808+0000:1499852252:2017-07-12T17:37:32.808+0000:Yeah lets leave it as-is. The current DSL works fine and people in the community has not asked about this kind. Its also a bit too verbose IMHO."
0,CAMEL-4752,Task,Minor,None,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-08 09:01:52+00:00,2011-12-08 12:07:29+00:00,"See AMQ-3614
http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java?r1=1209162&r2=1209161&pathrev=1209162",
0,CAMEL-4751,Bug,Minor,2.8.2,"2.7.5, 2.8.4, 2.9.0","

2.8.3
2.9.0
camel

",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Claus Ibsen,surya,0,1,2011-12-07 21:59:41+00:00,2011-12-08 07:55:23+00:00,"in Camel-Guice component's pom.xml we have:
 <properties>    
    <camel.osgi.export.pkg>org.apache.camel.guice.*</camel.osgi.export.pkg>
    <camel.osgi.import.additional>
        com.google.inject*;version=""[2,3)""        
    </camel.osgi.import.additional>
  </properties>


i.e imported version of google-guice package is [2,3). Unfortunately this in not compatible with any of the releases from Google-Guice (version 2 or 3). Guice seems to maintain 'package' level versioning. ""com.google.inject;version=1.3""


Suggested:fix:
Change the lower version from 2 to 1.2 .
This bug is a showstopper for us to integrate and deploy solution with camel+guice+peaberry on to karaf osgi.


We have from guice 3:
guice 
----------
Manifest-Version = 1.0
Archiver-Version = Plexus Archiver
Built-By = mcculls
Build-Jdk = 1.6.0_24
Created-By = Apache Maven


Bundle-Vendor = Google, Inc.
Bundle-RequiredExecutionEnvironment = J2SE-1.5,JavaSE-1.6
Bundle-Name = guice
Bundle-Copyright = Copyright (C) 2006 Google Inc.
Bundle-DocURL = http://code.google.com/p/google-guice/
Bundle-Description = Guice is a lightweight dependency injection framework for J
ava 5 and above
Bundle-SymbolicName = com.google.inject
Bundle-Version = 3.0.0
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2


Import-Package =
        javax.inject,
        org.aopalliance.intercept
Export-Package =
        com.google.inject.matcher;version=1.3,
        com.google.inject.name;version=1.3,
        com.google.inject.spi;version=1.3,
        com.google.inject.binder;version=1.3,
        com.google.inject.util;version=1.3,
        com.google.inject;version=1.3","surya108:1323266462:2011-12-07T22:01:02.255+0000:1323266462:2011-12-07T22:01:02.255+0000:changed properties in camel-guice pom.xml. to be compatible with versioning from google-guice jars.
davsclaus:1323302123:2011-12-08T07:55:23.364+0000:1323302123:2011-12-08T07:55:23.364+0000:Thanks for the patch."
0,CAMEL-4750,Improvement,Minor,2.8.3,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Claus Ibsen,0,0,2011-12-07 15:25:55+00:00,2013-05-26 10:04:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/Mail-component-ContentTypeResolver-SPI-customization-tp5054171p5054171.html


We should use the ContentTypeResolver when extracting the attachments from the javax.mail.Message, when we receive emails.
It was at first intended to work around a Geronimo mail issue, but it can be used to let people fixup mime times which are not to their satisfaction.


And people may expect that ContentTypeResolver to be used on the consumer side as well. I dont think we clearly documented that it was only on producer side, when we added it years ago.",
0,CAMEL-4749,Improvement,Minor,2.8.3,"2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.8.4, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-07 12:33:14+00:00,2011-12-07 12:38:14+00:00,"We should ensure the client is closed when stopping the producer, as seeing these WARNs in the logs


WARN  AsyncHttpClient - AsyncHttpClient.close() hasn't been invoked, which may produce file descriptor leaks",
0,CAMEL-4748,Bug,Minor,"2.7.4, 2.8.3","2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Claus Ibsen,Claus Ibsen,0,0,2011-12-07 10:03:36+00:00,2011-12-07 10:12:25+00:00,"For example if scanStream=true then the previous stream should be closed, prior to re-initalizing a new stream.


For example on Windows this may cause a file to be locked by the JVM due the old InputStream is not closed.",
0,CAMEL-4747,Improvement,Major,None,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Willem Jiang,0,0,2011-12-06 08:41:48+00:00,2011-12-07 08:17:21+00:00,"Some time the scala user may need to compile the java code which could be generated from WSDL or others.
It could be better if we specify the java compile plugin in camel-archetype-scala.",
0,CAMEL-4746,Improvement,Minor,None,2.9.0,"
None
",Resolved,Fixed,2.9.0,Jean-Baptiste Onofré,Claus Ibsen,0,0,2011-12-06 05:55:53+00:00,2011-12-07 07:24:50+00:00,"See nabble
http://camel.465427.n5.nabble.com/DISCUSS-Align-Camel-karaf-commands-as-Karaf-is-doing-tp5042215p5042215.html","jbonofre:1323213890:2011-12-07T07:24:50.047+0000:1323213890:2011-12-07T07:24:50.047+0000:Revision 1211313.

NB: when moving to Karaf 3.0, we will update the shell xmlns in use."
0,CAMEL-4745,Improvement,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Andrew Firth,1,0,2011-12-05 15:44:51+00:00,2011-12-07 08:33:35+00:00,"When you listen to the /meta/subscribe channel, you can tell that a client has subscribed to a channel, but there is no way to determine which channel because the channel information is not passed in through the Exchange object that is received by the listener.


This also applies to listening to the /meta/unsubscribe for when a client unsubscribes from a channel.","firth:1323071664:2011-12-05T15:54:24.257+0000:1323071664:2011-12-05T15:54:24.257+0000:Attaching patch that fixes the issue
davsclaus:1323218015:2011-12-07T08:33:35.001+0000:1323218015:2011-12-07T08:33:35.001+0000:Andrew, thanks for the patch."
0,CAMEL-4744,Improvement,Minor,None,"2.7.5, 2.8.4, 2.9.0","
None
",Resolved,Fixed,"2.7.5, 2.8.4, 2.9.0",Willem Jiang,Claus Ibsen,0,0,2011-12-05 13:04:53+00:00,2011-12-06 06:26:47+00:00,"When CamelContext is started it logs at INFO level for the routes which had autoStartup=false.


We should change that to DEBUG level, and have a better wording, than current. It seems a bit as a mistake when we say ""Cannot start route XXX as its auto startup = false"". Instead we should have a different message saying this.


At INFO level Camel will still say started X routes out of Y. So people can see if some routes has been disabled auto startup, as the count would differ.","davsclaus:1323061526:2011-12-05T13:05:26.438+0000:1323061526:2011-12-05T13:05:26.438+0000:See nabble
http://camel.465427.n5.nabble.com/Odd-info-logs-about-startup-w-autoStartup-false-tp5037089p5037089.html
njiang:1323124007:2011-12-06T06:26:47.835+0000:1323124007:2011-12-06T06:26:47.835+0000:Applied patch into trunk, camel-2.8.x and camel-2.9.x.
"
0,CAMEL-4743,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.10.0,Ioannis Canellos,Ioannis Canellos,0,1,2011-12-05 12:45:42+00:00,2012-06-30 22:56:06+00:00,No Desc,"iocanel:1324282307:2011-12-19T16:11:47.158+0000:1324282307:2011-12-19T16:11:47.158+0000:I have put together a really basic draft for the component. And since we are stilling working on releasing camel 2.9, I thought its best to add it as patch for anyone interested in having a look / providing some feedback.

The component provider a:
i) Producer: Put, Get, Delete & Scan.
ii) A consumer.
iii) An idempotent repository.

The producer can add/get multiple rows and columns by specifying them as exchange headers along with the desired operation. Operations for single row/column can also use the endpoint uri (no multiple rows/columns on the uri yet).

The results will be added as headers.

For single row/column operations values and results can be inside the body. For multiple rows/columns headers will be used instead.

For users that have needs for customizing the way that an exchange is mapped to hbase rows/columns etc, there has been added the ability to implement and use custom mappings (e.g. a user may want to use a custom objects and map its properties to columns).

Its also possible to specify custom serializers for serializing row ids/values.
iocanel:1324283346:2011-12-19T16:29:06.627+0000:1324283346:2011-12-19T16:29:06.627+0000:Checkstyle fixes
iocanel:1338201878:2012-05-28T18:44:38.810+0000:1338201878:2012-05-28T18:44:38.810+0000:Committed component to trunk.

I'll work on documentation and close the issue."
0,CAMEL-4742,Bug,Minor,2.9.0,2.9.0,"
None
",Resolved,Fixed,2.9.0,Claus Ibsen,Claus Ibsen,0,0,2011-12-05 11:58:18+00:00,2011-12-05 12:37:54+00:00,"If you read from a file and use the tokenize pair in a predicate such as a filter / content based router, then the input stream should be closed. Otherwise OS such as Windows keep a lock on the stream, and the file cannot be moved/deleted after processing is done.


See nabble
http://camel.465427.n5.nabble.com/Riding-on-org-apache-camel-language-TokenPairPredicateTest-tp5041981p5041981.html


Note that using tokenizePair as a predicate is must likely very unusual, as its meant for splitting a stream into tokens, and thus most often only used with the splitter EIP.",
0,CAMEL-4741,Improvement,Trivial,None,None,"
None
",Resolved,Fixed,2.9.0,Ioannis Canellos,Ioannis Canellos,0,0,2011-12-05 09:03:15+00:00,2011-12-05 09:33:39+00:00,"This is a trivial issue, yet it is sometimes a bit annoying.
People that are familiar with jms/activemq components expect that the default behavior of the a queue producer is to add the message to the queue, without having to specify a special operation. Hazelcast Queue Producer instead will through an exception if no operation is defined. It would be good if it was consistent with the rest of the queue producers.",iocanel:1323048819:2011-12-05T09:33:39.244+0000:1323048819:2011-12-05T09:33:39.244+0000:Committed r1210367 to trunk.
0,CAMEL-4740,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.8.4, 2.9.0",Ioannis Canellos,Ioannis Canellos,0,0,2011-12-05 08:33:14+00:00,2011-12-22 16:39:39+00:00,"Version 1.9.4.x has some improvements related to class loading which makes it more appealing for use in OSGi.
We should upgrade camel-hazelcast to use this.",iocanel:1323045583:2011-12-05T08:39:43.971+0000:1323045583:2011-12-05T08:39:43.971+0000:Committed r1210361 to trunk.
0,CAMEL-4738,Improvement,Minor,2.8.3,None,"
None
",Closed,Fixed,"2.7.5, 2.8.4, 2.9.0",Christian Müller,Christian Müller,0,0,2011-12-03 17:12:33+00:00,2011-12-04 21:57:26+00:00,"Christian-Muellers-MacBook-Pro:camel cmueller$ grep -r --include ""*.xml"" ""3.0.xsd"" . | wc 
      40     146    7878
Christian-Muellers-MacBook-Pro:camel cmueller$ grep -r --include ""*.xml"" ""2.5.xsd"" . | wc 
      38     106    8009","bvahdat:1322989668:2011-12-04T17:07:48.647+0000:1322989668:2011-12-04T17:07:48.647+0000:Further to your patch, I found another bunch of the places which I append as partial patch to this ticket.
bvahdat:1322990777:2011-12-04T17:26:17.422+0000:1322990777:2011-12-04T17:26:17.422+0000:Attaching seems not to be possible as the ticket is already ""Fixed"", so that I paste the URLs here:


https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/cxfbean/CxfBeanTest-context.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsa/WSAddressingPAYLOADTest-context.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/wsa/WSAddressingTest-context.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/cxfbean/CxfBeanTest-context.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-restlet/src/test/resources/org/apache/camel/component/restlet/camel-context.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/weightedRandomLoadBalance.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/weightedRoundRobinLoadBalance.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring-security/src/test/resources/org/apache/camel/component/spring/security/SpringSecurityCamelContext.xml
https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring-security/src/test/resources/org/apache/camel/component/spring/security/config/SpringSecurityAuthorizationPolicy.xml

muellerc:1323007046:2011-12-04T21:57:26.246+0000:1323007046:2011-12-04T21:57:26.246+0000:Thanks Babak for this hint"
