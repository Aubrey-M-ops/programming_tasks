,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-536,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Eamonn Dwyer,0,0,2008-05-21 09:13:29+00:00,2008-06-18 04:17:15+00:00,"For POJO data formats the CxfProducer currently invokes the following method to invoke on a target server
result = client.invoke(operation, parameters.toArray());
This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interface
Object[] invoke(BindingOperationInfo oi,   Object[] params,  Map<String, Object> context) throws Exception;


Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase...
                // invoke the message prepare the context
                Map<String, Object> context = new HashMap<String, Object>();
                Map<String, Object> requestContext = new HashMap<String, Object>();
                Map<String, Object> responseContext = new HashMap<String, Object>();
                // TODO Get the requestContext from the CamelExchange
                context.put(CxfClient.REQUEST_CONTEXT, requestContext);
                context.put(CxfClient.RESPONSE_CONTEXT, responseContext);


The fix should also include a fix for all three data format types","njiang:1211351861:2008-05-21T14:37:41.096+0000:1211351861:2008-05-21T14:37:41.096+0000:Yes, we can get the context from exchange header or the in Message.  I will do a quick fix for it.


njiang:1211503030:2008-05-23T08:37:10.332+0000:1211503030:2008-05-23T08:37:10.332+0000:The patch is in the revision 659468.
Also update the CXF wiki page[1]

[1]http://cwiki.apache.org/confluence/display/CAMEL/CXF
njiang:1213733835:2008-06-18T04:17:15.210+0000:1213733835:2008-06-18T04:17:15.210+0000:Here is the Unit Test for it
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java"
0,CAMEL-535,New Feature,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,1,0,2008-05-21 08:17:08+00:00,2008-06-18 04:17:54+00:00,"We could add a full featured loan broker example from Gregor's EIP book[1] to show how to use camel to implement the EIP.


[1] http://www.enterpriseintegrationpatterns.com/ComposedMessagingExample.html","davsclaus:1211345358:2008-05-21T12:49:18.357+0000:1211345358:2008-05-21T12:49:18.357+0000:I have had the same idea about a much better sample and the one from the integration bible must be the best example.
njiang:1213733874:2008-06-18T04:17:54.473+0000:1213733874:2008-06-18T04:17:54.473+0000:Finished the sub tasks."
0,CAMEL-534,Bug,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-21 07:53:03+00:00,2008-06-18 05:07:44+00:00,http://www.nabble.com/camel-mina-udp-throws-exception-%22Already-released-buffer%22-td17342374.html#a17343387,"njiang:1211328018:2008-05-21T08:00:18.619+0000:1211328018:2008-05-21T08:00:18.619+0000:This issue is caused by the type converter does not acquire the ByteBuffer when it coverts it into ByteArray.
njiang:1211328297:2008-05-21T08:04:57.927+0000:1211328297:2008-05-21T08:04:57.927+0000:The patch is in the revision 658580."
0,CAMEL-533,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Aaron Mulder,0,0,2008-05-21 04:38:35+00:00,2009-02-16 05:53:17+00:00,"I have an ActiveMQ Queue and a Spring Bean.  The bean is set to throw an IllegalStateException on 1/3 of all invocations.  The message publisher sets the JMSReplyTo destination, and there's a listener on the reply queue.


If I configure a route in XML <from uri=""activemq:queue:Test""/><to uri=""bean:MyBean:doSomething"" /> then when the exception is thrown, the bean is invoked a second time.  (I can tell as the JMS Message ID is annotated into an argument to the doSomething method).  The reply queue gets exactly one response for every request, regardless of the number of exceptions thrown (I can tell as the JMSCorrelationID on the response is set to the incoming JMSMessageID using an @OutHeaders annotated argument).


If I drop the XML route and instead use @MessageDriven(uri=""activemq:queue:Test"") then when the exception comes up, the message silently disappears.  There is no error emitted by Camel, and the reply queue just never gets a message for those requests where the bean threw an exception.


This is unexpected â€“ I would have thought the configured routing and @MessageDriven routing had exactly the same behavior when the route was the same.","jstrachan:1218532247:2008-08-12T17:10:47.031+0000:1218532247:2008-08-12T17:10:47.031+0000:Got a test case you could contribute?
ammulder:1219047740:2008-08-18T16:22:20.738+0000:1219047740:2008-08-18T16:22:20.738+0000:I tried this again in 1.4 and it seems to have been fixed.

Specifically, with the default ""activemq"" component, when the bean throws an exception I see a stack trace in the console (below) and the message is not redelivered.  If I use a custom ActiveMQ component with transactions enabled, I see the same stack trace and then the message is redelivered.

[aultMessageListenerContainer-7] EndpointMessageListener        WARN  Endpoint[customJMS:topic:AnnotationTest] consumer caught an exception while processing JMS message: ActiveMQTextMessage {commandId = 5, responseRequired = false, messageId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1, destination = topic://AnnotationTest, transactionId = null, expiration = 0, timestamp = 1219076164434, arrival = 0, brokerInTime = 1219076164434, brokerOutTime = 1219076164434, correlationId = null, replyTo = null, persistent = false, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = org.apache.activemq.util.ByteSequence@63676602, dataStructure = null, redeliveryCounter = 0, size = 0, properties = {console=Wii, game=Dance Dance Revolution}, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = message text}
org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens.
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822)
	at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.IllegalStateException: This exception is just to see what happens.
	at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	... 8 more
[aultMessageListenerContainer-7] efaultMessageListenerContainer WARN  Execution of JMS message listener failed
org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens.
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822)
	at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.IllegalStateException: This exception is just to see what happens.
	at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68)
	... 8 more


davsclaus:1234734797:2009-02-16T05:53:17.428+0000:1234734797:2009-02-16T05:53:17.428+0000:Closing old tickets"
0,CAMEL-532,Improvement,Minor,None,None,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Glen Mazza,0,0,2008-05-21 04:03:50+00:00,2009-02-16 05:51:46+00:00,"The Camel-CXF documentation[1] says the ""serviceClass"" option is not required when you are using CXF as a consumer (SOAP client).  (Slightly differently, FUSE's documentation[2] is saying that the ""serviceClass"" is not required if you provide the wsdlURL, the portName, and the serviceName.) I believe the following CXF_URI should work then even if I exclude the serviceClass:


   private static final String JAXWS_SERVER_ADDRESS = ""http://localhost:8080/doubleit/services/doubleit"";
   private static final String CXF_URI = ""cxf://"" + JAXWS_SERVER_ADDRESS
     + ""?wsdlURL=http://localhost:8080/doubleit/services/doubleit?wsdl""
     + ""&serviceClass=com.mycompany.webservice.service.DoubleItPortTypeImpl""
     + ""&portName=

{http://www.example.org/DoubleIt}

DoubleItPort""
     + ""&serviceName=

{http://www.example.org/DoubleIt}

DoubleItService"";


...


      context.addRoutes(new RouteBuilder() {
         public void configure() {


            from(""test-jms:queue:test.queue"").process(new Processor() {
               public void process(Exchange e) 

{
                   System.out.println(""This was called - Body: "" + e.getIn().getBody(String.class));
                   e.getIn().setHeader(CxfConstants.OPERATION_NAME,""DoubleIt"");
                   final List<String> params = new ArrayList<String>();
                   params.add(e.getIn().getBody(String.class));
                   e.getOut().setBody(params);
                 }

           }).to(CXF_URI).to(""file://testfile"").process(new Processor() {
              public void process(Exchange e) 

{
                 System.out.println(""In process""); //  + e.getIn().getBody(String.class));
                 List<String> abc = e.getIn().getBody(ArrayList.class);
                 System.out.println(""This was called - in File list: "" + abc.get(0));
                }

               });
           }
      });     
...


But the problem is that the serviceClass seems to be always required, even if I supply the wsdlURL, portName, and serviceName as I did here.  When I remove the serviceClass from the code above, I get a NPE in the CXF code in both of these scenarios:


1.)  If I keep the wsdlURL, portName, and serviceName in the string above:


java.lang.NullPointerException
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:447)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:274)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:360)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:156)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)
        at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)
        at org.apache.camel.component.cxf.CxfProducer.createClientFormClientFactoryBean(CxfProducer.java:165)
        at org.apache.camel.component.cxf.CxfProducer.<init>(CxfProducer.java:66)


2.)  If I just keep the wsdlURL, and remove portName and serviceName also:


java.lang.NullPointerException
        at org.apache.cxf.service.factory.DefaultServiceConfiguration.getServiceNamespace(DefaultServiceConfiguration.java:168)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getServiceNamespace(ReflectionServiceFactoryBean.java:1383)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getServiceQName(ReflectionServiceFactoryBean.java:1338)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:268)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:360)
        at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:156)
        at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)
        at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)
        at org.apache.camel.component.cxf.CxfProducer.createClientFormClientFactoryBean(CxfProducer.java:165)
        at org.apache.camel.component.cxf.CxfProducer.<init>(CxfProducer.java:66)
...


If I'm correct, that serviceClass is required no matter what, I think we need to update our Camel documentation to clarify that.  Also, to modify CxfProducer to throw a clear exception (""serviceClass is required"") if the serviceClass is missing, instead of the user just getting the NPE somewhere deep in the CXF code.


Glen


[1] http://activemq.apache.org/camel/cxf.html
[2] http://open.iona.com/docs/router/1.3/deploy_guide/FMRC.CXFComp.html","njiang:1218503286:2008-08-12T09:08:06.757+0000:1218503286:2008-08-12T09:08:06.757+0000: http://svn.apache.org/viewvc?rev=685098&view=rev
davsclaus:1234734706:2009-02-16T05:51:46.949+0000:1234734706:2009-02-16T05:51:46.949+0000:Closing all 1.5.0 issues"
0,CAMEL-531,New Feature,Major,None,None,"
None
",Closed,Fixed,1.4.0,Unassigned,James Strachan,0,0,2008-05-20 18:19:28+00:00,2008-07-11 04:21:45+00:00,No Desc,"jstrachan:1211280717:2008-05-20T18:51:57.410+0000:1211280717:2008-05-20T18:51:57.410+0000:Just committed a Debugger InterceptStrategy which can be added to a DefaultCamelContext via .addInterceptStrategy() or via the Spring Main via -d parameter.

The interceptor doesn't do heaps yet other than provide a log of exchanges sent to each step
davsclaus:1211344564:2008-05-21T12:36:04.535+0000:1211344564:2008-05-21T12:36:04.535+0000:We should remember to document this on the wiki before 1.4 is released.

Maybe when we get a seperate page for the intercept concept this new feature could be added there also.
jstrachan:1211409545:2008-05-22T06:39:05.632+0000:1211409545:2008-05-22T06:39:05.632+0000:See the documentation http://cwiki.apache.org/CAMEL/debugger.html"
0,CAMEL-530,Improvement,Minor,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Glen Mazza,0,0,2008-05-20 00:42:12+00:00,2008-06-18 05:07:27+00:00,The CXF component throws an NPE if the serviceClass option is missing for data types PAYLOAD and MESSAGE.  This change will throw a basic Camel exception explaining the problem instead.,njiang:1211328426:2008-05-21T08:07:06.133+0000:1211328426:2008-05-21T08:07:06.133+0000:Patch applied with thanks to Glen.
0,CAMEL-529,Improvement,Major,None,None,"
None
",Closed,Fixed,1.4.0,James Strachan,James Strachan,0,0,2008-05-19 16:58:27+00:00,2008-07-11 04:21:45+00:00,"when using UI tooling we might wanna add extra metadata to the model. e.g. we might wanna specify x/y coords or descriptions or extra validation rules or documentation or whatnot.


So having an optional ID attribute on routes & nodes in the DSL would make it easy for us to have separate UI tooling metadata that links to the Camel model",jstrachan:1211196550:2008-05-19T19:29:10.334+0000:1211196550:2008-05-19T19:29:10.334+0000:added an optional id attribute on all nodes along with an optional <description> element
0,CAMEL-528,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,William Tam,0,0,2008-05-18 04:40:00+00:00,2008-07-06 06:30:56+00:00,"I am seeing MailFetchSizeTest failing on my windows box.  After taking a look at the mock mailbox code, I think it is because mock mailbox (org.jvnet.mock_javamail.Mailbox) is not threadsafe.  If I add a half second sleep before checking mailbox.size() (see attached patch), it does not fail on my box anymore.  It is still not a guaranteed fix though.  I think we could remove the mailbox size checks if the ""sleep"" trick does not work because mock mailbox does not seem to support our testcase and we already verify messages on the receiving mock endpoint.","davsclaus:1211401041:2008-05-22T04:17:21.279+0000:1211401041:2008-05-22T04:17:21.279+0000:CAMEL-528: Applied patch with thanks to William Tam
davsclaus:1215297056:2008-07-06T06:30:56.178+0000:1215297056:2008-07-06T06:30:56.178+0000:Closing 1.4 issues"
0,CAMEL-527,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,Christian Schneider,0,0,2008-05-17 23:05:32+00:00,2008-07-06 06:35:10+00:00,"Currently there is a dependency cycle between camel and camel.impl. While I think there is no problem when impl uses camel the other direction should not occur. Luckily there ist only one case where this happens. The class CamelTemplate from camel uses ServiceSupport from impl. 


As a solution I would suggest to move ServiceSupport and Service to util. ServiceHelper is already in util and Service as well as ServiceSupport do not need any other classes. This would help to break the dependency cycle and at the same time move some classes out of the already quite big camel package.","cschneider:1211038832:2008-05-17T23:40:32.762+0000:1211038832:2008-05-17T23:40:32.762+0000:Perhaps this was a little short sighted of me. I thought the util package would be self contained. It seems util uses camel and even camel.impl. So putting the classes there would be no good idea. 

So my suggestion is to move ServiceSupport and ServiceHelper to camel this brings some more bloat to camel but at least it removes the cycle.
cschneider:1211461278:2008-05-22T21:01:18.661+0000:1211461278:2008-05-22T21:01:18.661+0000:I have added a patch that moves ServiceHelper and ServiceSupport to the camel package like described before.
davsclaus:1211486947:2008-05-23T04:09:07.711+0000:1211486947:2008-05-23T04:09:07.711+0000:Christian, why should ServiceHelper be moved to the camel package? Why cant it stay in camel.util as all the other helper classes does?
cschneider:1211498898:2008-05-23T07:28:18.644+0000:1211498898:2008-05-23T07:28:18.644+0000:The problem with ServiceHelper is that ServiceSupport uses ServiceHelper. So we get a new dependency between camel and util. Currently there are 12 references from camel to util and 245 references from util to camel. So I think util needs camel but we have a chance to cut the other direction. 2 of the 12 references from camel to util come from ServiceSupport the other 10 come from CamelTemplate. So I thought we could start with ServiceHelper and solve the problem with CamelTemplate in a new issue. 

The alternative would be to try to move the whole Service thing to util. This would be ServiceHelper, ServiceSupport and Service. The problem with this is that Service is referenced from many classes in Camel. So we would make the cycle between camel and util even worse.

I think the problem with all this is that we need a util package that does not depend on camel. Somthing like base utils. Then we could move utility classes like ServiceSupport ... to this package. Our current util is to much dependent from Camel that we can hope to make it standalone.

Btw. I am using structure101 to analyse the dependencies. Do you also use this or another tool already? Normally the tool costs about 600$ but as Camel is an open source project we can get it free. If you are interested in the tool I can give you the contact from headway where I got my license. See http://activemq.apache.org/camel/acknowledgment.html

hadrian:1211527314:2008-05-23T15:21:54.836+0000:1211527314:2008-05-23T15:21:54.836+0000:fwiw, I don't think moving ServiceSupport and ServiceHelper to oac is a good idea.

My S101 shows 76 deps from impl->util and 13, from util->impl, so impl should depend on util I guess.  In that case the dependency between ServiceHelper and ServiceSupport is ok the way it is.
cschneider:1211541502:2008-05-23T19:18:22.010+0000:1211541502:2008-05-23T19:18:22.010+0000:I have another idea how to solve the cycle. The references from camel to impl go from CamelTemplate to ServiceSupport. So we could move CamelTemplate to impl. Perhaps it would be a good idea to also create an interface for CamelTemplate in camel and a way to retrieve the CamelTemplate without knowing the concrete implementation. This part would solve the cycle between camel and impl.

ServiceSupport is also referenced from util.ProducerCache. As util should not reference impl we should move ProducerCache to impl. As ProducerCache is currently only referenced from CamelTemplate and the processor package this should be ok.

What do you think about this change? Is impl a good place for CamelTemplate? I am not sure about it myself as CamelTemplate is visible to Camel users. If we create an interface for CamelTemplate I think it should be ok.
hadrian:1211555554:2008-05-23T23:12:34.042+0000:1211555602:2008-05-23T23:13:22.123+0000:That would work.  I took care of that, but there are a few others to sort out.  I think we can remove language >> component, model >> component and model >> language.  I am not sure what we can do with camel >> model because of RouteType.
davsclaus:1211578158:2008-05-24T05:29:18.606+0000:1211578158:2008-05-24T05:29:18.606+0000:CamelTemplate already have an interface = ProducerTemplate in the org.apache.camel package.
So what is needed is how the end-users retrieve an instance of the ProducerTemplate?

CamelTemplate is however much used in the documentation and examples how to use Camel so if its changed to ProducerTemplate then it can also confuse people, even though ProducerTemplate is what CamelTemplate is used for - to easily produce and send exchanges.
davsclaus:1211578438:2008-05-24T05:33:58.133+0000:1211578438:2008-05-24T05:33:58.133+0000:Christian, I would like to get the license for the great product s101. You can get in touch with my by email if you do not want to discuss on this public form

davsclaus at apache dot org
cschneider:1211587853:2008-05-24T08:10:53.611+0000:1211587853:2008-05-24T08:10:53.611+0000:@Hadrian: I have also seen the other cycles and thought to address them one after the other in jira issues. Do you think this is a good idea or should we rather make a plan first?

About the ProducerTemplate: For me ProducerTemplate looks great. I also have an idea how to create it. What about a factory method in CamelContext?

Like:
ProducerTemplate pt = camelContext.createProducerTemplate();

Inside the unit tests it seems there are only a few places where CamelTemplate is used directly. I think it is a good idea to stay with the name ProducerTemplate as it cleary states what you can do with it. CamelTemplate is too general. 

We could then rename CamelTemplate to DefaultProducerTemplate and move it to impl. It will then be referenced only from DefaultCamelContext.
davsclaus:1211588339:2008-05-24T08:18:59.867+0000:1211588339:2008-05-24T08:18:59.867+0000:@Christian

I really like your plan with the CamelTemplate moving and renaming and the factory on the CamelContext. This is +1 from me.
We should just rememeber to update all the wiki documentation that shows you can use CamelTemplate - especially the quick start guides etc.
And I do think we should start on a Camel 1.4 release notes where we state some of these new refactorings.
hadrian:1211602778:2008-05-24T12:19:38.486+0000:1211602778:2008-05-24T12:19:38.486+0000:@Claus

Having a plan is good, for now I only went after the low hanging fruits.

I like the ProducerTemplate factory idea.  Not sure about renaming CamelTemplate.  I think I'd leave it as CamelContext as people may be used to it by now.

cschneider:1211605923:2008-05-24T13:12:03.780+0000:1211605923:2008-05-24T13:12:03.780+0000:Move CamelTemplate to impl and rename it to DefaultProducerTemplate. Add a factory method createProducerTemplate to CamelContext. Make DefaultProducertTemplate private so it canÂ´t be instantiated from outside impl. Change the Tests so they use the new factory method instead of diectly instantiating CamelTemplate. 
cschneider:1211606151:2008-05-24T13:15:51.023+0000:1211606151:2008-05-24T13:15:51.023+0000:I have added a patch for the CamelTemplate stuff. I think it should work out quite well. The CamelTemplate is gone in this patch this of course means people have to adapt their code. But even if we only had moved CamelTemplate they would have to change their code as the import is from a different package. I think this way it is much cleaner and the implementation is much better encapsulated. If we document this step well it should be no big problem for people. I think the idea of decribing what we changed in Release notes and wiki is a very important thing.
davsclaus:1211614003:2008-05-24T15:26:43.317+0000:1211614003:2008-05-24T15:26:43.317+0000:We could mark CamelTemplate as @deprecated and remove it in Camel 1.5?

Christian have you compiled all the components as well to check if they use CamelTemplate - in eg. their unit tests?
Otherwise the patch looks good.
cschneider:1211615748:2008-05-24T15:55:48.280+0000:1211615748:2008-05-24T15:55:48.280+0000:I have only checked and compiled camel-core. There I changed all references to CamelTemplate. If you say you want to keep CamelTemplate does this mean you want to keep a copy of the DefaultProducertTemplate in camel named CamelTemplate and mark this class as deprecated?  I think this could be a good thing. We could describe in the comments of the deprecated class how to get a ProducerTemplate from CamelContext so people learn how they should chaange their code.
davsclaus:1211617576:2008-05-24T16:26:16.836+0000:1211617576:2008-05-24T16:26:16.836+0000:Yes I would leave it as it and remove it in a future release (either Camel 1.5 or Camel 2.0).

We just need to make sure that we change all the components code as well to use ProducerTemplate and not the @deprecated CamelTemplate so when its due time it can be safely deleted from the code base.
cschneider:1211618848:2008-05-24T16:47:28.890+0000:1211618848:2008-05-24T16:47:28.890+0000:Sounds good to me
davsclaus:1211688525:2008-05-25T12:08:45.934+0000:1211688525:2008-05-25T12:08:45.934+0000:I added a draft for the release notes
http://cwiki.apache.org/confluence/display/CAMEL/Camel+1.4.0+Release

We should state here the change of the @deprecatation of CamelTemplate and ProducerTemplate should be used instead, also with a small code sample how to get hold of a ProducerTemplate using the new method from CamelContext.
davsclaus:1212525803:2008-06-04T04:43:23.506+0000:1212525803:2008-06-04T04:43:23.506+0000:I am currently working on the ProducerTemplate patch, testing it before comitting it.

I have marked the old CamelTemplate as @deprecated and hinted to use ProducerTemplate instead that can be fetch using the CamelContext.
davsclaus:1212525965:2008-06-04T04:46:05.565+0000:1212525965:2008-06-04T04:46:05.565+0000:I do even think we could delegate all method calls from CamelTemplate to DefaultProducerTemplate as CamelContext requires a CamelContext in its constructors. Then we can ensure that the codebase is not duplicated.
davsclaus:1212529770:2008-06-04T05:49:30.779+0000:1212529770:2008-06-04T05:49:30.779+0000:Sending        camel-core\src\main\java\org\apache\camel\CamelContext.java
Sending        camel-core\src\main\java\org\apache\camel\EndpointInject.java
Sending        camel-core\src\main\java\org\apache\camel\impl\CamelTemplate.java
Sending        camel-core\src\main\java\org\apache\camel\impl\DefaultCamelContext.java
Adding         camel-core\src\main\java\org\apache\camel\impl\DefaultProducerTemplate.java
Sending        camel-core\src\test\java\org\apache\camel\ContextTestSupport.java
Sending        camel-core\src\test\java\org\apache\camel\component\file\DirectoryCreateIssueTest.java
Sending        camel-core\src\test\java\org\apache\camel\component\vm\VmRouteTest.java
Sending        camel-core\src\test\java\org\apache\camel\impl\StringDataFormatTest.java
Sending        camel-core\src\test\java\org\apache\camel\processor\SetOutBodyTest.java
Sending        camel-core\src\test\java\org\apache\camel\processor\TryProcessorHandleTest.java
Sending        camel-core\src\test\java\org\apache\camel\processor\aggregator\AlbertoAggregatorTest.java
Sending        components\camel-jms\src\test\java\org\apache\camel\component\jms\JmsRouteRequestReplyTest.java
Transmitting file data .............
Committed revision 662986.
hzbarcea@gmail.com:1212556620:2008-06-04T13:17:00.379+0000:1212556620:2008-06-04T13:17:00.379+0000:Hi,

I think this kind of changes have a big impact on other projects using  
camel, such as activemq and servicemix.  Not only code changes are  
required in these projects, but their ability to work with different  
versions of camel.  This has a cascading effect on users of such  
projects who may have to consider updating to camel 1.4 too.

I would suggest asking their opinion in the future before making such  
changes.

My $0.02,
Hadrian





cschneider:1212570756:2008-06-04T17:12:36.668+0000:1212570756:2008-06-04T17:12:36.668+0000:Any idea how to organize this? A mail to the respective developer lists? Which projects would you suggest to ask when we propose architectural changes that affect other projects? As soon as we know who to ask we could document this in the wiki for the future.
hadrian:1212572793:2008-06-04T17:46:33.666+0000:1212572793:2008-06-04T17:46:33.666+0000:Not sure.  I know we impacted activemq and servicemix.  What I'd suggest is to send a message on the users mailing list, assuming that those who use camel and may be impacted subscribed to that list, send urls to the jiras related to refactoring and ask them to subscribe to those jiras if they want to and shout if they think what we do impacts them in a negative way.

I will send such a mail later today if no one objects.
davsclaus:1212574487:2008-06-04T18:14:47.114+0000:1212574487:2008-06-04T18:14:47.114+0000:Good idea Hadrian.

Myabe some of the bigger changes should be target for Camel 2.0? To cater for ActiveMQ and SericeMix being able to work with less hazzle from us.
Maybe we could also get some feedback what the impacts was in ActiveMQ and/or SerivceMix?
davsclaus:1212575330:2008-06-04T18:28:50.071+0000:1212575330:2008-06-04T18:28:50.071+0000:Hadrian, if the breaking API was the we moved CamelTemplate to impl package, we could move it back again?
cschneider:1212593742:2008-06-04T23:35:42.758+0000:1212593742:2008-06-04T23:35:42.758+0000:I think moving the CamelTemplate back could be a good idea. So people do not have to change right now. But we leave it deprecated so people know it will disappear soon.
davsclaus:1212698005:2008-06-06T04:33:25.246+0000:1212698005:2008-06-06T04:33:25.246+0000:Hadrian has moved it back.
davsclaus:1212715842:2008-06-06T09:30:42.797+0000:1212715842:2008-06-06T09:30:42.797+0000:Hadrian, should we close this ticket now that CamelTemplate is moved back and we have fixed a few tangles that hopefully doesn't cause trouble for ServiceMix and ActiveMQ?

There are lot of other patches from Christian that we could potentially use, or postpone to Camel 2.0?
hadrian:1212727841:2008-06-06T12:50:41.405+0000:1212727841:2008-06-06T12:50:41.405+0000:Wow, forgot to add a comment after committing the patch.  Sorry and thanks Claus!

I actually removed the use of CamelTemplate from our code too and made CamelTemplate extend from DefaultProducerTemplate vs just being a copy.

I think we can close this, yes, there are no other tangles now.  This was a big chunk of work, thanks everybody!
hadrian:1212728173:2008-06-06T12:56:13.573+0000:1212728173:2008-06-06T12:56:13.573+0000:As per Claus proposal, this can be closed, we have at least to other issues where we can continue the untangling work.
davsclaus:1215297310:2008-07-06T06:35:10.625+0000:1215297310:2008-07-06T06:35:10.625+0000:Closing 1.4 issues"
0,CAMEL-526,Improvement,Major,1.4.0,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Unassigned,Claus Ibsen,0,0,2008-05-17 05:52:06+00:00,2008-07-14 14:48:27+00:00,"CAMEL-385 added attachment support to camel 1.4 but it requires the JAF jar on the classpath for camel-core even though end users does not use the attachment support at all.


We should try to avoid this dependency and let somekind of delegate/lazy init determine of the JAF jar is on the classpath or not - As AXIS 1.x does and logs that activation is not supported since class XXX was not found on the classpath


See more on the forum:
http://www.nabble.com/Attachment-support-in-camel-core-depends-on-JAF-but-where-is-it-td16931910s22882.html",davsclaus:1213909819:2008-06-20T05:10:19.944+0000:1213909819:2008-06-20T05:10:19.944+0000:Not possible. Camel 1.4 is also nearly out of the door with this dependency.
0,CAMEL-525,Bug,Minor,1.3.0,None,"
None
",Closed,Cannot Reproduce,1.4.0,Claus Ibsen,Glen Mazza,0,0,2008-05-17 03:38:09+00:00,2008-10-23 20:01:03+00:00,"For that attached code, if I use the correct component URI prefix ""test-jms"" that I have registered, Camel runs fine:
            from(""test-jms:queue:test.queue"").process(new Processor() { ...


[Registration done via:
      context.addComponent(""test-jms"", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));
]


But if I misspell the component prefix (here, ""test-jms4""), Camel halts with no output or feedback to the user informing him of the problem:
            from(""test-jms4:queue:test.queue"").process(new Processor() { ...


No feedback about the problem is given in the log files either.  


I think in the from() and to() methods, Camel should be changed to throw an exception whenever it cannot resolve the component (i.e., if the user uses ""test-jms4"" instead of ""test-jms"", ""cfx"" instead of ""cxf"", etc.), not just halt silently.","gmazza:1210966953:2008-05-17T03:42:33.721+0000:1210966953:2008-05-17T03:42:33.721+0000:Test file.
gmazza:1210967105:2008-05-17T03:45:05.560+0000:1210967105:2008-05-17T03:45:05.560+0000:pom file used to run sample.
davsclaus:1210976788:2008-05-17T06:26:28.059+0000:1210976788:2008-05-17T06:26:28.059+0000:Glen

Do you not get a NoSuchEndpointException. The code below throws this fatal exception on me.

{code}
org.apache.camel.NoSuchEndpointException: No endpoint could be found for: mistyped://hello

public class Issue525Test extends ContextTestSupport {

    public void testXXX() throws Exception {
        Thread.sleep(1000);
    }

    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() throws Exception {
                from(""mistyped://hello"").to(""mock:result"");
            }
        };
    }
}
{code}
davsclaus:1210977063:2008-05-17T06:31:03.243+0000:1210977063:2008-05-17T06:31:03.243+0000:I tried your code in the camel-jms component and also got the exception

{code}
org.apache.camel.NoSuchEndpointException: No endpoint could be found for: test-jms4:queue:test.queue
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:54)


public class Issue5252Test extends TestCase {

    public void testXXX() throws Exception {
        CamelContext context = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
            ""vm://localhost?broker.persistent=false"");
        context.addComponent(""test-jms"", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));

        context.addRoutes(new RouteBuilder() {
            public void configure() {

                from(""test-jms4:queue:test.queue"").process(new Processor() {
                    public void process(Exchange e) {
                        System.out.println(""This was called - Body: "" + e.getIn().getBody(String.class));
                    }

                });
            }
        });

        CamelTemplate template = new CamelTemplate(context);
        context.start();
        for (int i = 0; i < 3; i++) {
            System.out.println(""i is: "" + i);
            template.sendBody(""test-jms:queue:test.queue"", """" + i);
        }
        Thread.sleep(60000);
        context.stop();
    }

}
{code}
davsclaus:1210977167:2008-05-17T06:32:47.470+0000:1210977167:2008-05-17T06:32:47.470+0000:Damm the anwser is right before my eyes.

Glenn you swallow the exception yourself in your run method()

{code}
   public static void main(String[] args) {
      CamelSample2 cs = new CamelSample2();
      try {
         cs.run();
      } catch (Exception e) {
      }
   }
{code}

You should remove the catch block

{code}
   public static void main(String[] args) throws Exception {
      CamelSample2 cs = new CamelSample2();
     cs.run();
   }
{code}
davsclaus:1210977233:2008-05-17T06:33:53.305+0000:1210977233:2008-05-17T06:33:53.305+0000:It is not a bug in Camel. End-user swallows the exception.
gmazza:1211007776:2008-05-17T15:02:56.276+0000:1211007776:2008-05-17T15:02:56.276+0000:Oh heavens!  I did not take that into account.  Sorry about that...

Glen

davsclaus:1215297056:2008-07-06T06:30:56.130+0000:1215297056:2008-07-06T06:30:56.130+0000:Closing 1.4 issues"
0,CAMEL-524,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,William Tam,0,0,2008-05-16 21:04:12+00:00,2008-06-18 05:07:08+00:00,"The InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done.  The InstrumentationProcessor does not actually record the time spent on the route.  It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.


There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter.  We probably only need to expose one MBean.  The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don't really work.  This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.


This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor's level.


With this patch, the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package.  It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.


Another update is to following the JMX spec convention of including a ""type"" property in the ObjectName (replacing the current ""groups"" property).  This patch also simplify the ManagedRoute's ObjectName a bit by removing builder and group properties.  If for some reasons, they need to be in the ObjectName, please add them back.","wtam@iona.com:1210943254:2008-05-16T21:07:34.660+0000:1210943254:2008-05-16T21:07:34.660+0000:Here's how the tree will look in JConsole
davsclaus:1210976062:2008-05-17T06:14:22.943+0000:1210976062:2008-05-17T06:14:22.943+0000:Great spot William and very nice screenshot.

Willem (the assignee) now we should get the JMX page stuff added to the wiki - its great eye candy to see your routes on the jconsole and get some metrics.

I guess these metrics also could be read by Hyperic or some similar monitoring agents, that would be sweet to have it alerts if the routes starts to process more slowly.
Okay sorry this topic is for the miss-timing. 


njiang:1211134662:2008-05-19T02:17:42.747+0000:1211134662:2008-05-19T02:17:42.747+0000:patch applied with thanks to  William."
0,CAMEL-523,Improvement,Minor,1.4.0,2.6.0,"
None
",Closed,Later,2.6.0,Willem Jiang,Hadrian Zbarcea,0,0,2008-05-16 16:43:49+00:00,2011-04-24 09:57:06+00:00,"Please see TODO in ConvertersMojo.java


converters-report creates a URLClassLoader with whatever is in
${project.testClasspathElements}, reason why we don't see all
converters in the report. First we need a list of classpath elements the
user could customize via plugin configuration, and elements of that
list be added to the URLClassLoader. This should also be factored out
into a utility class.","davsclaus:1293776230:2010-12-31T14:17:10.278+0000:1293776230:2010-12-31T14:17:10.278+0000:Closing ticket which isnt been worked on or in demand.
davsclaus:1303610226:2011-04-24T09:57:06.635+0000:1303610226:2011-04-24T09:57:06.635+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-522,Bug,Major,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,Andreas Kuhtz,0,3,2008-05-16 13:35:45+00:00,2009-11-04 05:33:41+00:00,"I've encountered a problem with the scanning of jar files with the @Converter annotation if the Jars are loaded with the webstart classloader. Because the URL starts with http: the conversion to a file fails in ResolverUtil. 
I've attached a patch that uses an UrlResource if the url starts with http: and this works if the jar-resource has the version information added to the jar file in the JNLP-file (like <jar href=""camel-core-1.4-SNAPSHOT.jar""/>). But if the version is added separately (like <jar href=""activemq-core.jar"" version=""5.1.0""/>) it fails because the classloader returns the name of the jar-file without the version information (like http://....../activemq-core.jar) and this file does not exist. 


I'm currently trying if it is possible to check whether the application is started via webstart (there is a class Tool that should only exist in the webstart classloader) and in this case I'll check if the filename of the jar-file is returned correctly. If yes maybe we can provide another patch to get rid of the problem described above.","davsclaus:1210975731:2008-05-17T06:08:51.527+0000:1210975731:2008-05-17T06:08:51.527+0000:Good work Andreas.

Could be an idea to look how Spring does loading jars. I know Juergen has done tremendous work to get Spring to work with all kind of strange behaviors in various version of WebSphere, WebLogic, JBoss, and even AFIAR on the AS400 platform maybe also from webstart.


akuhtz:1211005156:2008-05-17T14:19:16.734+0000:1211005156:2008-05-17T14:19:16.734+0000:While searching for a solution I stumbled over the following pages (http://jdevelopment.nl/java/jdk6-web-start-cache-location/ and http://java.sun.com/javase/6/docs/technotes/guides/javaws/enhancements6.html) and now I'm not sure if the behaviour is different on JDK5 and JDK6 because I've tested only with JDK6 (I forgot to list that in the environment...).
davsclaus:1211344742:2008-05-21T12:39:02.581+0000:1211344742:2008-05-21T12:39:02.581+0000:See CAMEL-537 for an example of log errors
akuhtz:1216857359:2008-07-24T07:55:59.143+0000:1216857359:2008-07-24T07:55:59.143+0000:The patch resolves the issue with url based JAR locations.
I use the webstart-maven-plugin to generate the jnlp and I had to specify the JARs that contain the converters as jarResources with a specific version number because in this case the JAR is referenced in the url with the version number added and not in a separate version attribute. Specified this way the location of the jar returned by the classloader is correct and the scan proceeds.


{code:xml|title=pom.xml|borderStyle=solid} 
<plugin>
  <groupId>org.codehaus.mojo.webstart</groupId>
  <artifactId>webstart-maven-plugin</artifactId>
  .....
  <configuration>
    .....
    <jnlpFiles>
      <jnlpFile>
      <templateFilename>jnlpTemplate.vm</templateFilename>
        <outputFilename>appl.jnlp</outputFilename>
        <jarResources>
          <jarResource>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>${camel-version}</version>
            <!-- set the outputJarVersion to false appends the version to the jar filename in the href -->
            <outputJarVersion>false</outputJarVersion>
          </jarResource>
          <jarResource>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-core</artifactId>
            <version>${activemq-version}</version>
            <outputJarVersion>false</outputJarVersion>
          </jarResource>
          .....
        </jarResources>
      <jnlpFile>
    <jnlpFiles>
    .....
  <configuration>
<plugin>
{code} 


{code:xml|title=appl.jnlp|borderStyle=solid} 
<jnlp .....>
  .......
  <resources>
    .......
    <jar href=""camel-core-1.4.01.jar""/>
    <jar href=""activemq-core-5.2-SNAPSHOT.jar""/>
    .......
    <jar href=""spring-core.jar"" version=""2.5.5""/>
  </resources>
</jnlp>
{code} 
davsclaus:1217324008:2008-07-29T17:33:28.692+0000:1217324008:2008-07-29T17:33:28.692+0000:We need a patch that is not dependent on spring-core. The current attached patch uses spring.
davsclaus:1217324408:2008-07-29T17:40:08.062+0000:1217324408:2008-07-29T17:40:08.062+0000:Okay I think I got it without dependency to spring .jars
davsclaus:1217324550:2008-07-29T17:42:30.754+0000:1217324550:2008-07-29T17:42:30.754+0000:Andreas do you mind posting some parts of the .vm template you use for creating the output .jnlp file?

I would like to add a wiki page how to get Camel working with webstart and how to generate the jnlp using maven.
Maybe if you have the ideas how such a wiki page could be please feel free to post it here.

I will test the patch a bit more before commiting.
davsclaus:1217326415:2008-07-29T18:13:35.731+0000:1217326415:2008-07-29T18:13:35.731+0000:Andreas can you resubmit the patch with the ASF license granted. There is a bullet in the attach file wizard to grant license.

And can you load .jars over the HTTPS protocol as well? If so I think we should also test for ""https:"" as well.
akuhtz:1217372523:2008-07-30T07:02:03.988+0000:1217372523:2008-07-30T07:02:03.988+0000:Updated patch with AFS license
akuhtz:1217375791:2008-07-30T07:56:31.044+0000:1217376296:2008-07-30T08:04:56.680+0000:Claus, a good description is under http://mojo.codehaus.org/webstart/webstart-maven-plugin/ (and a copy under http://coffeebreaks.org/tmp/maven-staging/webstart/site/).

This is almost the default jnlpTemplate.vm. The properties in the resources tag are not required, they just show how to set properties that can be used in the spring configuration....

{code:xml|title=jnlpTemplate.vm|borderStyle=solid}
$explicitTimestamp
<?xml version=""1.0"" encoding=""utf-8""?>
<jnlp
    spec=""$jnlpspec""
    codebase=""$$codebase""
    context=""$$context""
    href=""$$name"">
  <information>
    <title>$project.Name $project.Version</title>
    <vendor>$project.Organization.Name</vendor>
    <description>$project.Description</description>
	<icon href=""images/mylogo.gif"" width=""64"" height=""64""/>
	<icon kind=""splash"" href=""images/mysplash.gif""/>
#if($offlineAllowed)
    <offline-allowed/>
#end
  </information>
#if($allPermissions)
  <security>
     <all-permissions/>
  </security>
#end
  <resources>
    <j2se version=""$j2seVersion"" max-heap-size=""448m"" />
    <property name=""remoteSite"" value=""https://$$hostname:32463""/>
    <property name=""amq.broker.url"" value=""failover:tcp://$$hostname:32935""/>
    $dependencies
  </resources>
  <application-desc main-class=""$mainClass""/>
</jnlp>
{code}
davsclaus:1217404550:2008-07-30T15:55:50.697+0000:1217404550:2008-07-30T15:55:50.697+0000:*TODO*: Update wiki with how to use Camel with webstart
davsclaus:1217450330:2008-07-31T04:38:50.474+0000:1217450330:2008-07-31T04:38:50.474+0000:Thanks Andreas a lot for the help.

I added the webstart to the FAQ:
http://cwiki.apache.org/confluence/display/CAMEL/How+do+I+run+Camel+using+Java+WebStart
davsclaus:1234734706:2009-02-16T05:51:46.883+0000:1234734706:2009-02-16T05:51:46.883+0000:Closing all 1.5.0 issues
aptesameer:1257233250:2009-11-03T15:27:30.507+0000:1257233250:2009-11-03T15:27:30.507+0000:I am using camel 2.0.0 and the application works ok when  the codebase attribute starts with ""http://...""
However it fails when codebase attribute value starts with ""https....""
In the resources section I am putting jar names along with version. e.g. 

      <jar href=""camel-core-2.0.0.jar""/>
      <jar href=""camel-csv-2.0.0.jar""/>
      <jar href=""camel-ftp-2.0.0.jar""/>
      <jar href=""camel-mvel-2.0.0.jar""/>
      <jar href=""camel-quartz-2.0.0.jar""/>
      <jar href=""camel-spring-2.0.0.jar""/>

As said earlier with ""https"" I can see following exception in log file.
2009-11-03 12:00:36,406 [ApplicationMain] WARN  efaultPackageScanClassResolver - Could not read entries in url: jar:https://localhost:8443/tabernus/despatchnotegenerator/camel-ftp-2.0.0.jar!/org/apache/camel/component/file/remote
java.io.FileNotFoundException: https:\localhost:8443\tabernus\despatchnotegenerator\camel-ftp-2.0.0.jar (The filename, directory name, or volume label syntax is incorrect)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(Unknown Source)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:250)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:178)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:98)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:62)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:359)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:153)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:113)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:107)
	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:270)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:226)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:193)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:151)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:213)
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:65)
	at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:35)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:79)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:394)
	at org.apache.camel.spring.CamelEndpointFactoryBean.createEndpoint(CamelEndpointFactoryBean.java:108)
	at org.apache.camel.spring.CamelEndpointFactoryBean.getObject(CamelEndpointFactoryBean.java:54)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116)
	at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:884)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:41)
	at org.apache.camel.impl.DefaultRouteContext.lookup(DefaultRouteContext.java:124)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:111)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at com.thehutgroup.despatchnotegenerator.GuernseyDespatchNoteGenerator.main(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at com.sun.javaws.Launcher.executeApplication(Unknown Source)
	at com.sun.javaws.Launcher.executeMainClass(Unknown Source)
	at com.sun.javaws.Launcher.doLaunchApp(Unknown Source)
	at com.sun.javaws.Launcher.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)


Any help is welcome!

Regards,
Sameer
davsclaus:1257282907:2009-11-04T05:15:07.539+0000:1257284021:2009-11-04T05:33:41.327+0000:Sameer please do *not* reopen old tickets.

Create a new ticket and link to this one.

Reopening old tickets messes with the changelogs and release notes.
And you issue is just a sub issue of this.


Can you try with latest code from trunk (e.g. Camel 2.1-SNAPSHOT).
I have added additional TRACE logging.

And then enable TRACE logging for {{org.apache.camel.impl.DefaultPackageScanClassResolver}}
That can help identify the issue and help fix it"
0,CAMEL-521,Task,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-16 13:14:07+00:00,2008-06-18 05:06:46+00:00,Need to add an example to show use camel with spring integration,"njiang:1213129629:2008-06-11T04:27:09.087+0000:1213129629:2008-06-11T04:27:09.087+0000:Update the Spring Integration wiki page[1] with the spring configuration examples.
[1]http://cwiki.apache.org/CAMEL/springintegration.html"
0,CAMEL-520,Bug,Minor,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,Gert Vanthienen,0,0,2008-05-16 06:19:01+00:00,2009-02-16 05:51:46+00:00,"The dead letter channel will retry to send the same message multiple times, so the message content should be stream-cached before trying to process it the first time.","gertvanthienen:1219965207:2008-08-29T07:13:27.090+0000:1219965207:2008-08-29T07:13:27.090+0000:The current fix handles an InputStream being sent as the message body correctly, but I think we should also handle other kinds of streaming data (StaxSource, Reader, ...).  How about using the same as the interceptor logic from the StreamCachingInterceptor?  We still have to find a way to reset the stream between redelivery attempts (adding a reset() method to the StreamCache interface perhaps?)
njiang:1220030882:2008-08-30T01:28:02.845+0000:1220030882:2008-08-30T01:28:02.845+0000:Added the unit test to show how the Source, Read, InputStream can be cached with StreamCache.
davsclaus:1234734706:2009-02-16T05:51:46.841+0000:1234734706:2009-02-16T05:51:46.841+0000:Closing all 1.5.0 issues"
0,CAMEL-519,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Gert Vanthienen,0,0,2008-05-16 05:58:15+00:00,2008-07-11 04:26:54+00:00,No Desc,gertvanthienen:1211325234:2008-05-21T07:13:54.196+0000:1211325234:2008-05-21T07:13:54.196+0000:Fixed in http://svn.apache.org/viewvc?view=rev&revision=658131 and http://svn.apache.org/viewvc?view=rev&revision=658240
0,CAMEL-518,Bug,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-16 04:38:19+00:00,2008-05-16 05:43:56+00:00,"nntp is reserved for future implementation in camel-mail. Camel registers this protocol as supported by the autoscan of the META-INF files.


We should throw an exception to the end-user stating its not implemented yet.
Link to ticket that has the request for NNTP protocol support.",
0,CAMEL-517,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-16 03:58:22+00:00,2008-06-05 09:46:21+00:00,"The javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.


It's all the javadoc also for the components.","davsclaus:1211451992:2008-05-22T18:26:32.073+0000:1211800144:2008-05-26T19:09:04.941+0000:- Add Ref as a Component *DONE*
- Remove duplicated javadoc in classes that should use the javadoc from the interface *DONE*
- Prefer to have javadoc on interfaces rather than impl classes *DONE*
davsclaus:1211452135:2008-05-22T18:28:55.317+0000:1211613654:2008-05-24T15:20:54.538+0000:- Add missing summaries for Exceptions in Camel *DONE*
davsclaus:1211452747:2008-05-22T18:39:07.880+0000:1211797838:2008-05-26T18:30:38.147+0000:- Fix layput problems on the published javadoc *DONE*
- Add missing class javadoc for public classes in Camel core *DONE*
davsclaus:1211487126:2008-05-23T04:12:06.670+0000:1211615338:2008-05-24T15:48:58.734+0000:- Remove unused imports *DONE*
davsclaus:1211582564:2008-05-24T06:42:44.934+0000:1211796001:2008-05-26T18:00:01.491+0000:- consider renaming InstrumentationAgentImpl to DefaultInstrumentationAgent *DONE*
- look for other xxxImpl could be renamed to a more appropriate name *DONE, only InstrumentationAgentImpl exists*
davsclaus:1211583277:2008-05-24T06:54:37.793+0000:1211583277:2008-05-24T06:54:37.793+0000:- XPathLanguage should be moved to language package and not the builder.xml package as now
davsclaus:1211587083:2008-05-24T07:58:03.139+0000:1211587083:2008-05-24T07:58:03.139+0000:- XPathAnnotationExpressionFactory, DefaultAnnotationExpressionFactory, AnnotationExpressionFactory should be moved from the bean component to a better suited package
davsclaus:1211593299:2008-05-24T09:41:39.128+0000:1211616408:2008-05-24T16:06:48.516+0000:- ListPollingConsumer on the SEDA component is not used - marked as @deprecated but we should consider deleting it *DONE*
davsclaus:1211613631:2008-05-24T15:20:31.721+0000:1211750093:2008-05-26T05:14:53.723+0000:- ReportingTypeConverterLoader and the likes has been marked as @deprecated (not used at all) *No used by camel maven plugin*
- Out.class from the util package has been removed (not used at all) *DONE*
davsclaus:1211617930:2008-05-24T16:32:10.431+0000:1211619982:2008-05-24T17:06:22.315+0000:Damm for some obsure reason someone is using Out in camel-jms.
- Fixed by adding Out.java as ValueHolder.java and updated camel-jms *DONE*
davsclaus:1211620833:2008-05-24T17:20:33.263+0000:1211750246:2008-05-26T05:17:26.102+0000:- track down Eclipse non javadoc to see if it can be removed: (non-Javadoc) *DONE*
hadrian:1211696617:2008-05-25T14:23:37.276+0000:1211696617:2008-05-25T14:23:37.276+0000:@Claus

The Reporting* classes are used by the camel-maven-plugin!
davsclaus:1211696987:2008-05-25T14:29:47.569+0000:1211696987:2008-05-25T14:29:47.569+0000:Thanks Hadrian I have removed the @deprecations
davsclaus:1211800125:2008-05-26T19:08:45.717+0000:1211800125:2008-05-26T19:08:45.717+0000:- Fixed loggers to be transient and commons-logging *DONE*
davsclaus:1211801088:2008-05-26T19:24:48.125+0000:1211801088:2008-05-26T19:24:48.125+0000:Pheeevv no more javadoc polishing for ... a while ;)"
0,CAMEL-516,Bug,Major,1.3.0,None,"
None
",Closed,Won't Fix,1.4.0,Unassigned,Mike Gardiner,0,0,2008-05-15 23:23:02+00:00,2008-07-06 06:35:10+00:00,"In the servicemix/conf/log4j.xml file if I don't set the org.apache.servicemix log level to DEBUG I get SAXParseExceptions.


For example, if I leave the log level to INFO as specified below


    <logger name=""org.apache.servicemix"">
        <!-- To enable debug logging, replace the INFO by DEBUG -->
        <level value=""INFO""/>
    </logger>


I get the following:


11:24:14,008 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:15,006 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 1 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:16,019 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 2 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:16,129 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:17,018 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:17,127 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 1 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:18,016 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 4 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:18,125 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 2 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:19,030 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 5 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:19,045 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger   69 | Exchange[Message: javax.xml.transform.stream.StreamSource@1c192c8]
11:24:19,045 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  106 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. Handled by the failure processor: RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]
11:24:19,061 | ERROR | pool-flow.seda.servicemix-camel-thread-3 | JmsComponent             | ervicemix.common.BaseLifeCycle   48 | Error processing exchange InOut[
  id: ID:166.29.99.171-119e34d4895-7:0
  status: Done
  role: consumer
  service: 

{urn:com.lmco.isgs.bais}

interfaceRules
  endpoint: camel166-29-99-171-119e34d4895-28-0
  operation: 

{urn:com.lmco.isgs.bais}

operationInOut
  in: Unable to display: org.xml.sax.SAXParseException: Premature end of file.
  out: null
]
javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473)
	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502)
	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663)
	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)
	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130)
	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106)
	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200)
	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
11:24:19,061 | ERROR | pool-flow.seda.servicemix-camel-thread-3 | JmsComponent             | ervicemix.common.BaseLifeCycle   60 | Error setting exchange status to ERROR
java.lang.IllegalStateException: component is not owner when trying to set error: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at org.apache.servicemix.jbi.messaging.MessageExchangeImpl.setError(MessageExchangeImpl.java:264)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:57)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473)
	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502)
	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663)
	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)
	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130)
	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106)
	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200)
	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	... 7 more
11:24:19,139 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:20,137 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 4 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:21,135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 5 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326)
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50)
	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98)
	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47)
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73)
	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.xml.sax.SAXParseException: Premature end of file.
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415)
	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322)
	... 26 more
11:24:21,135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger   69 | Exchange[Message: javax.xml.transform.stream.StreamSource@14b1d80]
11:24:21,135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  106 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. Handled by the failure processor: RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]
11:24:21,151 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | JmsComponent             | ervicemix.common.BaseLifeCycle   48 | Error processing exchange InOut[
  id: ID:166.29.99.171-119e34d4895-7:1
  status: Done
  role: consumer
  service: 

{urn:com.lmco.isgs.bais}

interfaceRules
  endpoint: camel166-29-99-171-119e34d4895-28-0
  operation: 

{urn:com.lmco.isgs.bais}

operationInOut
  in: Unable to display: org.xml.sax.SAXParseException: Premature end of file.
  out: null
]
javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473)
	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502)
	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663)
	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)
	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130)
	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106)
	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200)
	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
11:24:21,151 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | JmsComponent             | ervicemix.common.BaseLifeCycle   60 | Error setting exchange status to ERROR
java.lang.IllegalStateException: component is not owner when trying to set error: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at org.apache.servicemix.jbi.messaging.MessageExchangeImpl.setError(MessageExchangeImpl.java:264)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:57)
	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610)
	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167)
	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at java.lang.Thread.run(Thread.java:619)
Caused by: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473)
	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502)
	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663)
	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585)
	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130)
	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79)
	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106)
	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200)
	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538)
	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512)
	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46)
	... 7 more


<?xml version=""1.0"" encoding=""UTF-8""?>


<beans 
	xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring-1.3.0.xsd""
	xmlns:fn=""http://www.w3.org/2005/02/xpath-functions"">


	<camelContext id=""camelInterfaceRules"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
		<route>
			<from uri=""jbi:service:urn:com.a.b.c:testRules""/>
			<choice>
				<when>
					<xpath>//*[local-name() = 'testMsg1']</xpath>
					<to uri=""jbi:service:urn:com.a.b.c:Service1""/>					
				</when>
				<when>
					<xpath>//*[local-name() = 'testMsg2']</xpath>
					<to uri=""jbi:service:urn:com.a.b.c:Service2""/>
				</when>
			</choice>	      	
		</route>
	</camelContext>
</beans>


Thanks.","davsclaus:1210978290:2008-05-17T06:51:30.918+0000:1210978290:2008-05-17T06:51:30.918+0000:Mike can you
- attach a zip file with your sample project that fails.
- what version of ServiceMix are you using?
- and how do you start your sample and see the bug

It would get us much faster up to speed how to see the bug
gertvanthienen:1211326135:2008-05-21T07:28:55.396+0000:1211326135:2008-05-21T07:28:55.396+0000:This issue has been split into two issues: CAMEL-519 and CAMEL-520
davsclaus:1215297310:2008-07-06T06:35:10.552+0000:1215297310:2008-07-06T06:35:10.552+0000:Closing 1.4 issues"
0,CAMEL-515,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Cannot Reproduce,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-15 04:07:43+00:00,2008-07-06 06:29:23+00:00,"The bean component doesn't seem to copy headers from the message and exchange across.


See forum topic:
http://www.nabble.com/Missing-Headers-in-pipline-with-bean-components-td17234481s22882.html


First we should have a junit test that demonstrates the bug before digging into fixing it. Anyone feel free to contribute the unit test.","davsclaus:1212723026:2008-06-06T11:30:26.153+0000:1212723026:2008-06-06T11:30:26.153+0000:See the unit test:
http://svn.apache.org/viewvc/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanPipelineTest.java?view=markup"
0,CAMEL-514,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-14 12:20:54+00:00,2008-06-05 09:46:21+00:00,"Yes I think we need to document it much better how Camel handles this file/folder stuff when its



consuming files
producing files



It's a bit confusing when Camel uses the unique message id for filename instead of the path from the URI.",
0,CAMEL-513,New Feature,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2008-05-14 09:26:06+00:00,2008-07-11 04:21:45+00:00,No Desc,"gnodet:1210728425:2008-05-14T09:27:05.073+0000:1210728425:2008-05-14T09:27:05.073+0000:Sending        camel-spring/pom.xml
Sending        camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java
Transmitting file data ..
Committed revision 656177."
0,CAMEL-512,Task,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-14 09:14:40+00:00,2008-06-05 09:27:12+00:00,"Current CamelContextFactoryBean do not handle the jmxAgent creation and we can't configure the JMX agent through the spring configuration file.
We need add this feature in the feature release of Camel.",njiang:1210921832:2008-05-16T15:10:32.836+0000:1210921832:2008-05-16T15:10:32.836+0000:The patch is in the svn repository.
0,CAMEL-511,New Feature,Major,1.3.0,2.0-M1,"
None
",Closed,Won't Fix,2.0-M1,Unassigned,Claus Ibsen,0,0,2008-05-14 04:26:49+00:00,2009-10-24 11:16:12+00:00,"Currently the validation that certain properties is mandatory / optional and that they value is validated is handled ad-hoc by each endpoint or component.
There should be somekind of support from camel-core that creates these objects that it has a callback method to allow the programmer of the component/endpoint to do some programmatic validation that the endpoint is in a validate state before its let's loose on the playground.


In spring this method is named afterPropertiesSet() AFAIR. We could have a similar callback method in camel-core for this.


We could also start to use somekind of annotations to mark what properties the endpoint/component support and which is mandatory/optional - kinda like the stuff for the Camel DSL.
I think there is a ticket for this already.","jstrachan:1218532676:2008-08-12T17:17:56.497+0000:1218532676:2008-08-12T17:17:56.497+0000:the fix for this problem is for an Endpoint to just implement the org.apache.camel.Service interface - then it will have a standard start() / stop() method invoked?
davsclaus:1218575651:2008-08-13T05:14:11.042+0000:1218575651:2008-08-13T05:14:11.042+0000:Ah excellent sometimes the answer is already there.

Something to streamline for Camel 2.0 is that our components does property validation using the Service interface and we can improve the error feedback to the end-user why this component couldn't be started."
0,CAMEL-510,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,William Tam,0,0,2008-05-13 03:43:12+00:00,2008-07-06 06:30:56+00:00,There is a race condition in the test that both in/out aggregators are aggregating the output.  It looks like the InAggregator should to make a copy of the exchange.  The attached patch also gets rid of a unused method.,"davsclaus:1210623686:2008-05-13T04:21:26.217+0000:1210623686:2008-05-13T04:21:26.217+0000:Applied patch with thanks to William Tam
davsclaus:1215297056:2008-07-06T06:30:56.096+0000:1215297056:2008-07-06T06:30:56.096+0000:Closing 1.4 issues"
0,CAMEL-509,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,William Tam,0,0,2008-05-12 20:58:18+00:00,2008-07-10 19:59:06+00:00,No Desc,hadrian:1210615264:2008-05-13T02:01:04.298+0000:1210615264:2008-05-13T02:01:04.298+0000:Patch applied with many thanks!
0,CAMEL-508,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,William Tam,0,0,2008-05-12 19:59:44+00:00,2008-06-05 09:27:30+00:00,"In InstrumentationAgentImpl.doStart(), the method createMBeanServer() is never get invoked if mbean server  is not injected because
the getMBeanServer() always return non-null (the getMBeanServer() method always returns the platform mbean server)


         if (getMBeanServer() == null) 

{
             // The MBeanServer was not injected
            createMBeanServer();
         }


A few side effects if not calling the createMBeanServer() method.
1. users always get platform mbean server
2. system properties processing in createMBeanServer() is bypassed
3. jmx connector is not created as it is created indirectly by the createMBeanServer() metthod.


I propose to invoke createMBeanServer() inside getMBeanServer() and update createMBeanServer() to read a property to determine when platform mbean should be use. (see attached patch)","davsclaus:1210623021:2008-05-13T04:10:21.795+0000:1210623021:2008-05-13T04:10:21.795+0000:I propose the system property is named with org.apache.camel or similar name to indicate its a system property for Camel.

We should also remember to add this feature to a JMX wiki page whenever we get one up. There is already a ticket for the documentation.
njiang:1210723336:2008-05-14T08:02:16.661+0000:1210723336:2008-05-14T08:02:16.661+0000:I think the system property named with org.apache.camel.jmx as prefix is OK , I will head on the JMX wiki document right now ."
0,CAMEL-507,Improvement,Major,None,None,"
None
",Closed,Fixed,2.0-M1,Hadrian Zbarcea,James Strachan,1,0,2008-05-12 16:14:41+00:00,2009-07-31 06:33:33+00:00,They don't add any value and are just a PITA . We zapped the generics on Processor and we should do the same for Expression & Predicate,"jstrachan:1210633631:2008-05-13T07:07:11.475+0000:1210633631:2008-05-13T07:07:11.475+0000:test case applied along with a patch - many thanks!
jstrachan:1210633747:2008-05-13T07:09:07.201+0000:1210633747:2008-05-13T07:09:07.201+0000:Whoops - I closed the wrong JIRA, please ignore my previous comment :)
hadrian:1225470127:2008-11-01T00:22:07.325+0000:1225470127:2008-11-01T00:22:07.325+0000:Done
davsclaus:1248993213:2009-07-31T06:33:33.691+0000:1248993213:2009-07-31T06:33:33.691+0000:Closing 2.0m1 tickets"
0,CAMEL-506,Improvement,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,James Strachan,0,0,2008-05-12 16:12:44+00:00,2010-02-07 09:54:14+00:00,"e.g. doing things like



<fileEndpoint directory=""/foo/bar"" noop=""true""/>
<jmsEndpoint destination=""foo.bar""/>","davsclaus:1220498650:2008-09-04T11:24:10.760+0000:1220498650:2008-09-04T11:24:10.760+0000:Moving to 2.0
davsclaus:1258027119:2009-11-12T19:58:39.489+0000:1258027119:2009-11-12T19:58:39.489+0000:James I do not think we  should go this way.

Looking at Mule and SI you need to add a ton of XML namespace wrabble which a lot of people forget to do correct and you get poor errors at start what the real cause is.

And the Spring XML is really good as is. So often you do not need to configure endpoints in the XML. And if needed the regular bean style works.
davsclaus:1258777146:2009-11-21T12:19:06.735+0000:1258777146:2009-11-21T12:19:06.735+0000:We dont want to go down that road"
0,CAMEL-505,Improvement,Major,1.3.0,None,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,0,0,2008-05-12 15:16:46+00:00,2009-07-31 06:33:32+00:00,"right now its a bit tricky creating Endpoint instances in a spring XML using the <bean><property> mechanism.


It'd be nice to be able to configure them more easily as...



<bean id=""foo"" class=""org.apache.camel.component.file.FileEndpoint"">
  <property name=""foo"" value=""bar""/> 
   ...




type stuff and have folks Spring IDE's smart complete stuff etc","jstrachan:1210658814:2008-05-13T14:06:54.770+0000:1210658814:2008-05-13T14:06:54.770+0000:See comments here: http://www.nabble.com/Re%3A-Camel-1.4---Improved-URI-validation---%28Component-Writers-pay-attention%29---Feedback-please-p17209308s22882.html

we have a test for the file endpoint now

SpringFileRouteTest.java. 
http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/component/file/SpringFileRouteTest.java

the spring XML is here 
http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/component/file/SpringFileRouteTest-context.xml

davsclaus:1220498650:2008-09-04T11:24:10.823+0000:1220498650:2008-09-04T11:24:10.823+0000:Moving to 2.0
jstrachan:1228722927:2008-12-08T15:55:27.991+0000:1228722927:2008-12-08T15:55:27.991+0000:JmsEndpoint can now be created nicely in a Spring XML or Java Config...

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest-context.xml

see the definition of *customJmsEndpoint*
davsclaus:1232447812:2009-01-20T18:36:52.533+0000:1232447812:2009-01-20T18:36:52.533+0000:James I will take over this tedious work as part of my next focus in Camel 2.0.

Then you can lookup at the dont copy to much the exchange, please :)
davsclaus:1232523743:2009-01-21T15:42:23.260+0000:1234420118:2009-02-12T14:28:38.903+0000:camel-core *DONE*
camel-jms *DONE*
camel-ftp *DONE*
camel-mail *DONE*
camel-mina *DONE*
camel-http *DONE*
camel-jdbc *DONE*
camel-sql *DONE*
camel-atom *DONE*
camel-rss *DONE*
camel-freemarker *DONE*
came-velocity *DONE*
camel-quartz *DONE*
camel-xmpp *DONE*
came-jpa *DONE*
camel-rmi *DONE*

camel-jetty (Need to be created with component)
camel-restlet (Need to be created with component)

davsclaus:1232681815:2009-01-23T11:36:55.993+0000:1234333313:2009-02-11T14:21:53.411+0000:To allow setting cosumer scheduler options from spring bean (delay, initialDelay etc.) *DONE*

You can do it like this:
{code}
        <property name=""consumerProperties"">
            <map key-type=""java.lang.String"">
                <entry key=""initialDelay"" value=""2000""/>
            </map>
        </property>
{code}
davsclaus:1232683618:2009-01-23T12:06:58.561+0000:1232683618:2009-01-23T12:06:58.561+0000:Not all components will be done, only the most important. That are a few not often used that is a bit of a hazzle to get working such as the test component.
davsclaus:1232693875:2009-01-23T14:57:55.767+0000:1232693875:2009-01-23T14:57:55.767+0000:Its easier to fix when the endpoint is not so dependt on component working.

davsclaus:1234420558:2009-02-12T14:35:58.645+0000:1234420558:2009-02-12T14:35:58.645+0000:Okay got nearly all component fixed. I guess there might be a single rarely used component out there. If so and some end users wanted it as spring bean style then we can ticket for it later.
davsclaus:1248993212:2009-07-31T06:33:32.920+0000:1248993212:2009-07-31T06:33:32.920+0000:Closing 2.0m1 tickets"
0,CAMEL-504,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-12 14:00:11+00:00,2008-05-16 04:52:24+00:00,"The AtomProducer that creates the feed does not set all needed entries such as author and other fields.


There is a TODO in the code:
// TODO categories, authors etc


Also we need an unit test that covers the producing part. We now only have the consuming.","davsclaus:1210799925:2008-05-15T05:18:45.749+0000:1210799925:2008-05-15T05:18:45.749+0000:I refactored the atom component:
- removed the producer as it does make sense currently
- improved the consumer to add options on the uri configuration
- added unit tests

Now it needs documentation on the wiki - there is a ticket for this
davsclaus:1210807759:2008-05-15T07:29:19.707+0000:1210807759:2008-05-15T07:29:19.707+0000:Oh I forgot to set a sensible default for the AtomConsumer as it will now consume every 500 millis and that is to fast.

We should set a default of one poll pr. 60 seconds.
davsclaus:1210884744:2008-05-16T04:52:24.003+0000:1210884744:2008-05-16T04:52:24.003+0000:Refactored and added a default poll interval of 60 seconds."
0,CAMEL-503,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,Andri Saar,0,0,2008-05-12 13:55:54+00:00,2008-07-11 04:21:45+00:00,"Currently, the camel-cxf pom declares dependencies on two test JARs without specifying their scope:
   <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <type>test-jar</type>
    </dependency>


    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring</artifactId>
      <type>test-jar</type>      
    </dependency>


This means that the scope defaults to ""compile"", and those test JARs are included with every compile, although they aren't really needed.


The fix would be to add a <scope>test</scope> element to both of these dependencies.","davsclaus:1210578741:2008-05-12T15:52:21.685+0000:1210578741:2008-05-12T15:52:21.685+0000:Willem this is your territory ;)
hadrian:1210595161:2008-05-12T20:26:01.728+0000:1210595161:2008-05-12T20:26:01.728+0000:Andri, nice spot!  Thanks!"
0,CAMEL-502,Task,Major,"1.3.0, 1.4.0, 1.5.0",2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,Claus Ibsen,0,0,2008-05-12 12:30:35+00:00,2009-07-31 06:33:32+00:00,"org.springframework.jms.listener.serversession.ServerSessionFactory



@deprecated as of Spring 2.5, in favor of DefaultMessageListenerContainer
and JmsMessageEndpointManager. To be removed in Spring 3.0.



We should change Camel to use the new classes before Spring 3.0 starts rolling out so we can be compatible with Spring.","davsclaus:1225863643:2008-11-05T13:40:43.322+0000:1225863643:2008-11-05T13:40:43.322+0000:davsclaus jstrachan - as I read CAMEL-502 I see it as we ""just"" need to remove the consumer type ServerSessionPool since Spring's DefaultMessageListenerContainer is now a super duper general purpose JMS listener 
14:37 jstrachan agreed 

davsclaus:1225869622:2008-11-05T15:20:22.681+0000:1225869622:2008-11-05T15:20:22.681+0000:Removed spring-jms code that was marked as @deprecated in Spring. Also removed some methods marked as @deprecated in Camel.

*Do NOT backport this to Camel 1.x branch.* as it removes code in Camel.
davsclaus:1248993212:2009-07-31T06:33:32.886+0000:1248993212:2009-07-31T06:33:32.886+0000:Closing 2.0m1 tickets"
0,CAMEL-501,Improvement,Major,1.3.0,1.5.0,"
None
",Closed,Fixed,1.5.0,Jonathan Anstey,Claus Ibsen,0,0,2008-05-11 08:06:50+00:00,2009-01-15 12:14:34+00:00,"ScheduledPollConsumer.run() swallows any exception thrown from a polling consumer.



    /**
     * Invoked whenever we should be polled
     */
    public void run() {
        LOG.debug(""Starting to poll"");
        try {
            poll();
        } catch (Exception e) {
            LOG.warn(""Caught: "" + e, e);
        }
    }




See this forum
http://www.nabble.com/Re%3A-svn-commit%3A-r654414---in--activemq-camel-trunk-components-camel-mail-src%3A-main-java-org-apache-camel-component-mail--test-java-org-apache-camel-component-mail--td17121927s22882.html#a17122075",janstey:1221750028:2008-09-18T23:00:28.350+0000:1221750028:2008-09-18T23:00:28.350+0000:Fix in revision 696845.
0,CAMEL-500,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,William Tam,0,0,2008-05-10 17:17:43+00:00,2008-05-30 08:38:57+00:00,"Typo in StickyLoadBalanceStrategy causes class member loadBalancerType not getting initialized.


  public StickyLoadBalanceStrategy(ExpressionType expressionType, LoadBalancerType loadBalancerTyep) {",njiang:1210443240:2008-05-11T02:14:00.911+0000:1210443240:2008-05-11T02:14:00.911+0000:Applied patch with thanks to William.
0,CAMEL-499,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-05-08 17:24:17+00:00,2008-07-06 06:35:10+00:00,"camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[871,12] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType


camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[872,39] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType


camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[884,12] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType


camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[885,38] inconvertible types
 found   : org.apache.camel.model.ProcessorType<Type>
 required: org.apache.camel.model.InterceptType","janstey:1210238714:2008-05-08T17:25:14.032+0000:1210238714:2008-05-08T17:25:14.032+0000:Fixes the compile error and doesn't change functionality :)
davsclaus:1210280944:2008-05-09T05:09:04.007+0000:1210280944:2008-05-09T05:09:04.007+0000:Applied the patch with thanks.
davsclaus:1215297310:2008-07-06T06:35:10.486+0000:1215297310:2008-07-06T06:35:10.486+0000:Closing 1.4 issues"
0,CAMEL-498,Bug,Major,1.3.0,None,"
None
",Closed,Fixed,1.4.0,James Strachan,James Strachan,0,0,2008-05-08 09:09:35+00:00,2008-07-11 04:21:45+00:00,No Desc,jstrachan:1210242169:2008-05-08T18:22:49.149+0000:1210242169:2008-05-08T18:22:49.149+0000:Fix applied - see test MoveFilesToDirectoryWithNoopTest
0,CAMEL-497,Task,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-08 08:52:06+00:00,2008-06-05 09:22:40+00:00,"Since CXF 2.0.6 released for a while,  we need to upgrade the CXF to 2.0.6.",njiang:1211236671:2008-05-20T06:37:51.587+0000:1211236671:2008-05-20T06:37:51.587+0000:The patch is committed into the svn repository.
0,CAMEL-496,Sub-task,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-08 07:49:22+00:00,2008-05-12 07:46:40+00:00,No Desc,"davsclaus:1210204173:2008-05-08T07:49:33.149+0000:1210204173:2008-05-08T07:49:33.149+0000:Consuming mails (polling) with minimal out-of-the-box settings is invoked to often. We should probably add a sensitive delay default of etc. 60 seconds, to not exhaust the mail server.
davsclaus:1210280246:2008-05-09T04:57:26.642+0000:1210280246:2008-05-09T04:57:26.642+0000:Default delay for MailConsumer is now 60 seconds (instead of 500 millis).

End user can of course override this value with a value in consumer.delay URI parameter.
Updated wiki with this new default"
0,CAMEL-495,Sub-task,Minor,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-08 07:42:01+00:00,2008-05-12 07:46:40+00:00,I should add some validation logic in the endpoint when an consumer is created to scan for smtp that is invalid. (Added on my ticket list now),
0,CAMEL-494,Bug,Major,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Cannot Reproduce,1.4.0,Claus Ibsen,Dean Thompson,0,1,2008-05-05 14:07:00+00:00,2009-02-16 05:53:17+00:00,"Because CamelBeanPostProcessor.setCamelContext(SpringCamelContext) takes the class SpringCamelContext as its parameter, bean initialization fails if SpringCamelContext is proxied.  The error is as follows:



org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [$Proxy61] to required type [org.apache.camel.spring.SpringCamelContext] for property 'camelContext'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [$Proxy61] to required type [org.apache.camel.spring.SpringCamelContext] for property 'camelContext': no matching editors or conversion strategy found




In my project's Spring conf, we declare <aop:aspectj-autoproxy/>, which causes all Spring beans to be proxied.  This triggers the problem shown above.  The problem should be reproducible by adding <aop:aspectj-autoproxy/> to any Spring config that uses <camel:camelContext>.


The fix will be to separate the interface and class for SpringCamelContext, and use the interface where appropriate.","davsclaus:1210105498:2008-05-07T04:24:58.752+0000:1210105498:2008-05-07T04:24:58.752+0000:Added code blocks.

Dean, Can you whirl together a small sample / preferred unit test that demonstrates this bug? Would aid much during the fixing of the bug.
davsclaus:1212900764:2008-06-08T12:52:44.288+0000:1212900764:2008-06-08T12:52:44.288+0000:Dan what version of Spring are you using?
davsclaus:1212907519:2008-06-08T14:45:19.900+0000:1212907519:2008-06-08T14:45:19.900+0000:Dan I have refined a sample in camel trunk that uses the aop autoproxy stuff and I can not reproduce the bug you have reported.

The sample is the camel-example-jms-spring.

Can you give any hints how to reproduce the bug? Have you tried with a Camel 1.4 version?
There is a RC here:

Please find a first release candidate of apache-camel-1.4.0 here:
http://people.apache.org/~hadrian/apache-camel-1.4.0-RC1/maven2/
davsclaus:1212907544:2008-06-08T14:45:44.122+0000:1212907544:2008-06-08T14:45:44.122+0000:Or if using maven try the 1.4-SNAPSHOT version instead.
deansher:1212985313:2008-06-09T12:21:53.583+0000:1212985313:2008-06-09T12:21:53.583+0000:Thanks very much, Claus, for looking at this.  I'm sorry I didn't find time to submit an example.  I was using Camel 1.3.0.  I'll try with 1.4.  I haven't been able to find camel-example-jms-spring; could you point me to it?
davsclaus:1212987298:2008-06-09T12:54:58.375+0000:1212987298:2008-06-09T12:54:58.375+0000:Its in svn trunk.

However I can attach it to this jira as a .zip file later if you rather would like this, instead of having to checkout the code from svn.
deansher:1213013393:2008-06-09T20:09:53.589+0000:1213013393:2008-06-09T20:09:53.589+0000:I did check out https://svn.apache.org/repos/asf/activemq/camel/trunk.  Unfortunately, I am stuck trying to get it to compile in maven:

[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: CXF
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
Downloading: http://repo1.maven.org/maven2//com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom
Downloading: http://people.apache.org/repo/m2-incubating-repository/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom
Downloading: http://uface.googlecode.com/svn/maven//com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom
Downloading: http://repo1.maven.org/maven2/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom
[INFO] [cxf-codegen:wsdl2java {execution: generate-test-sources}]
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 23 source files to C:\java\apache-camel-svn\camel\components\camel-cxf\target\classes
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Compilation failure
C:\java\apache-camel-svn\camel\components\camel-cxf\target\generated\org\apache\camel\wsdl_first\PersonService.java:[67,20] cannot find symbol
symbol  : method getPort(javax.xml.namespace.QName,java.lang.Class<org.apache.camel.wsdl_first.Person>,javax.xml.ws.WebServiceFeature[])
location: class javax.xml.ws.Service

I got as far as downloading the JAXWS package manually and trying to follow its installation process, but so far I'm stuck there.  I am assuming maven doesn't install that package automatically because it thinks of it as built into the JDK, but Sun doesn't install it automatically because it is javax (and hence an add-on)?

I did review the Camel 1.4.0 source code to see if the problem appears to have been fixed, and it does not appear to have been.
The fundamental problem, if I am following the code correctly, is that org.apache.camel.spring.CamelBeanPostProcessor.java is being placed into the spring configuration as a bean.
It has a method setCamelContext(SpringCamelContext), which is being driven from the Spring configuration also.  However, SpringCamelContext is a class, not an interface.  This means
that if the SpringCamelContext is proxied by <aop:aspectj-autoproxy/>, the resulting proxy is *not* a SpringCamelContext.  So the attempt to invoke CamelBeanPostProcessor.setCamelContext(the proxy) fails.

I assume the test you added was examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server-aop.xml.  I find myself wondering whether the <aop:aspectj-autoproxy/> declaration in that file applies to the 
beans in the previously included     <import resource=""camel-server.xml""/>.  Perhaps you have to either move the <aop:aspectj-autoproxy/> up above the <import resource=""camel-server.xml""/>, or else do the <aop:aspectj-autoproxy/>
in the same file as the 

    <camel:camelContext id=""camel"">
        <camel:package>org.apache.camel.example.server</camel:package>
    </camel:camelContext>

?
davsclaus:1213015412:2008-06-09T20:43:32.403+0000:1213015412:2008-06-09T20:43:32.403+0000:I am sure I had them in one file to start with. But then I changed to two files to cater for two kind of servers (with and without AOP) in the example.

Do you do anything special to proxy the camel bean?

I am sure we can extract and interface and let Camel use this but I would like to have a unit test that demonstrates the bug before starting the refactoring.
Okay I gotta jump into the bed.
deansher:1213016058:2008-06-09T20:54:18.782+0000:1213016058:2008-06-09T20:54:18.782+0000:Here is the Spring configuration file in which the problem occurs.  Note that the portion of the XML that actually declares the     <camel:camelContext> (and thus triggers the problem) is commented out with a reference to this issue.
davsclaus:1213041844:2008-06-10T04:04:04.406+0000:1213041844:2008-06-10T04:04:04.406+0000:Hi Dean

Thanks for your spring file. I can see that the aspectj autoproxy declaration is in line 660 in your file.

I dont suppose you do some fancy magic in this file that is relevant for this bug?
<import resource=""spring-magic.xml""/>

And in your file the Camel XSD reference is Camel 1.2. What version are you exactly using of Camel?
davsclaus:1213042830:2008-06-10T04:20:30.275+0000:1213042830:2008-06-10T04:20:30.275+0000:Dean I have tried a single file and can not reproduce the bug.

However I noticed this answer that has been there all the time
{code}
ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
{code}

That means that the CamelBeanPostProcessor that is being created during post processing is not auto proxied.
Dean do you see this INFO logging from Spring?

This is from the spring 2.5.3 source, in its AbstractApplicationContext
{code}
		public Object postProcessAfterInitialization(Object bean, String beanName) {
			if (!(bean instanceof BeanPostProcessor) &&
					this.beanFactory.getBeanPostProcessorCount() < this.beanPostProcessorTargetCount) {
				if (logger.isInfoEnabled()) {
					logger.info(""Bean '"" + beanName + ""' is not eligible for getting processed by all "" +
							""BeanPostProcessors (for example: not eligible for auto-proxying)"");
				}
			}
			return bean;
		}
{code}

But I am running the example with Spring 2.5.4. What version of Spring are you using?
davsclaus:1213043993:2008-06-10T04:39:53.550+0000:1213043993:2008-06-10T04:39:53.550+0000:I tried the example-spring-jms with Camel 1.3.0 and it also works out-of-the-box
{code}
D:\project\camel\examples\camel-example-spring-jms>mvn clean compile exec:java -PCamelServer494
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'exec'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring :: JMS
[INFO]    task-segment: [clean, compile, exec:java]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] Deleting directory D:\project\camel\examples\camel-example-spring-jms\target
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 6 source files to D:\project\camel\examples\camel-example-spring-jms\target\classes
[INFO] Preparing exec:java
[INFO] No goals needed for project - skipping
[INFO] [exec:java]
[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.3.0 starting
[pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19fe451: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19fe451]; startup date [Tue Jun 10 06:38:16 CEST 2008]; root o
f context hierarchy
[pache.camel.spring.Main.main()] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from class path resource [META-INF/spring/camel-494.xml]
[pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19fe451]: org.springframework.beans.factory.support.DefaultListableBeanFactory@1757337
[pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'org.apache.camel.example.server.ServerRoutes' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'Claus' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'Claus' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1757337: defining beans [multiplier,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframewor
k.context.annotation.internalAutowiredAnnotationProcessor,Claus:beanPostProcessor,Claus,AuditTracker,AuditStore,jms,org.apache.activemq.xbean.XBeanBrokerService#0,org.springframework.aop.config.internalAutoProxyCreator]; root of factory hierarchy
[pache.camel.spring.Main.main()] BrokerService                  INFO  Using Persistence Adapter: MemoryPersistenceAdapter
[pache.camel.spring.Main.main()] BrokerService                  INFO  ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting
[pache.camel.spring.Main.main()] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org/
[pache.camel.spring.Main.main()] TransportServerThreadSupport   INFO  Listening for connections at: tcp://claus-acer:61616
[pache.camel.spring.Main.main()] TransportConnector             INFO  Connector tcp Started
[pache.camel.spring.Main.main()] BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost, ID:claus-acer-2460-1213072701953-0:0) started
[pache.camel.spring.Main.main()] TransportConnector             INFO  Connector vm://localhost Started
{code}
deansher:1213079097:2008-06-10T14:24:57.607+0000:1213079097:2008-06-10T14:24:57.607+0000:Thanks for all of your hard work on this, Claus!  I am enclosing the ""spring-magic.xml"" file that you asked about.
deansher:1213079299:2008-06-10T14:28:19.591+0000:1213079299:2008-06-10T14:28:19.591+0000:Claus, I think I should take the next step on this end.  If you are able to help me get unstuck and take it,
that would be great.  But in any case, I need to reproduce my problem on a small test case.

Since I was unable to compile the project in maven (as I reported above), I decided to try to use maven to generate an IntelliJ IDEA project.  That failed too:

Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar
Downloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar
Downloading: http://download.java.net/maven/2/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar
Downloading: http://repository.codehaus.org//org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar
Downloading: http://repo.open.iona.com/maven2/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] A required plugin was not found: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository

Try downloading the file manually from the project website.

Then, install it using the command: 
    mvn install:install-file -DgroupId=org.apache.camel -DartifactId=maven-html-to-pdf -Dversion=1.4-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file

Alternatively, if you host your own repository you can deploy the file there: 
    mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=maven-html-to-pdf -Dversion=1.4-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]


  org.apache.camel:maven-html-to-pdf:maven-plugin:1.4-SNAPSHOT

from the specified remote repositories:
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),
  codehaus.repo (http://repository.codehaus.org/),
  open.iona.m2 (http://repo.open.iona.com/maven2),
  apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository),
  maven2-repository.dev.java.net (http://download.java.net/maven/2),
  central (http://repo1.maven.org/maven2)

  org.apache.camel:maven-html-to-pdf:maven-plugin:1.4-SNAPSHOT

from the specified remote repositories:
  apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository),
  codehaus.repo (http://repository.codehaus.org/),
  open.iona.m2 (http://repo.open.iona.com/maven2),
  apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository),
  maven2-repository.dev.java.net (http://download.java.net/maven/2),
  central (http://repo1.maven.org/maven2)

If you are able to help with either a native Maven compile or a Maven -> Idea conversion, that would be great.  Otherwise, I'll try porting your test case to ant to see it it works or breaks for me.
davsclaus:1213081222:2008-06-10T15:00:22.890+0000:1213081222:2008-06-10T15:00:22.890+0000:Dean. 

If you follow the instructions from: http://activemq.apache.org/camel/building.html you should be able to build the source from SVN checkout.

If you are still having problems then you could build only what you need:

cd camel-core
mvn clean install -Dtest=false

cd ..
cd components
mvn clean install -Dtest=false

cd ..
cd examples
mvn clean install -Dtest=false
davsclaus:1213081345:2008-06-10T15:02:25.377+0000:1213081345:2008-06-10T15:02:25.377+0000:And you should be able to generate the idea project files for the example

cd examples
cd camel-examples-spring-jms
mvn idea:idea
davsclaus:1213081456:2008-06-10T15:04:16.112+0000:1213081456:2008-06-10T15:04:16.112+0000:Dean you can also try the camel 1.4.0 release candidate

Please find a first release candidate of apache-camel-1.4.0 here:
http://people.apache.org/~hadrian/apache-camel-1.4.0-RC1/maven2/

It doesn't include all the latest AOP changes to the example but you could try with Camel 1.4.0 on your existing project.
davsclaus:1213081899:2008-06-10T15:11:39.313+0000:1213081899:2008-06-10T15:11:39.313+0000:mvn package of the camel-example-spring-jms example.

Need to find all the jars needed on the CP yourself.
davsclaus:1213701086:2008-06-17T19:11:26.153+0000:1213701086:2008-06-17T19:11:26.153+0000:Dean any update on this? We are homing into a Camel 1.4 release and want to either fix it asap or reschedule it for 1.5 or later.
deansher:1213702322:2008-06-17T19:32:02.446+0000:1213702322:2008-06-17T19:32:02.446+0000:Yikes -- thanks for the heads up!  I like the ASAP option :-).  Do I still have a couple of days to jump on this?  I don't know whether I can work on it tomorrow, but I'm fairly sure I can on Thursday.
davsclaus:1214338773:2008-06-25T04:19:33.558+0000:1214338773:2008-06-25T04:19:33.558+0000:Hi Dean

Any updates? I am sorry but I can not reproduce the problem with Camel 1.4 and Spring 2.5.4.
deansher:1214370599:2008-06-25T13:09:59.466+0000:1214370599:2008-06-25T13:09:59.466+0000:No updates yet.  I'm trying very hard to get back to this, but we have done a new beta release of our own software that has required ""all hands"".  
If Camel 1.4 has to ship with no further work in this area, I understand.  At the same time, I'm holding out hope that I can return to this issue
this week.  Thank you, Claus, for your diligent and well-chosen work to help isolate this issue.
deansher:1214371052:2008-06-25T13:17:32.225+0000:1214371052:2008-06-25T13:17:32.225+0000:One other thought on this: Any class that is intended as a Spring bean really should make its functionality available through an interface.
Proxying class interfaces in Spring is possible in many cases, but is certainly not the norm or the recommended approach.  Although
I agree, Claus, that the best first approach was to create a unit test that would fail, would you consider creating an interface for SpringCamelContext
just as a matter of good general Spring practice, and just verifying that the existing unit tests still work?
deansher:1214371209:2008-06-25T13:20:09.575+0000:1214371209:2008-06-25T13:20:09.575+0000:Sorry, my choice of language was confusing.  I should say ""proxying class APIs in Spring is possible...but not the norm"".
davsclaus:1214424343:2008-06-26T04:05:43.011+0000:1214424343:2008-06-26T04:05:43.011+0000:Hi Dean

I agree that Camel should prefer to use interfaces, However I do think at current time its to late to refactor the code in the 1.4 timeframe.

I will schedule this for 1.5 and could you please try out the 1.4 distro when its released.
davsclaus:1219358364:2008-08-22T06:39:24.855+0000:1219358364:2008-08-22T06:39:24.855+0000:Dean any update on this?
Have you tried with the new Camel 1.4 release?

I am about to close it as Cannot Reproduce. 
deansher:1219414847:2008-08-22T22:20:47.986+0000:1219414847:2008-08-22T22:20:47.986+0000:Sadly, I don't have time to focus on this for a while.  Because of this problem, we ended up using RMI for our message instead of Camel/ActiveMQ.  I would still like to integrate Camel sometime; I think it will have many benefits.  But you can close this for now, and I will report a new ticket if I have problems when we try it again.  Thanks for your work on this!  Camel seems like it will be a great package for us one day.
davsclaus:1219448403:2008-08-23T07:40:03.793+0000:1219448403:2008-08-23T07:40:03.793+0000:Dean I am sorry it didn't work out-of-the-box for you.

Yes by all means if you have time later and still have issues then open a new ticket. 
davsclaus:1234734797:2009-02-16T05:53:17.339+0000:1234734797:2009-02-16T05:53:17.339+0000:Closing old tickets"
0,CAMEL-493,New Feature,Major,1.3.0,Future,"
None
",Closed,Won't Fix,Future,Unassigned,Claus Ibsen,1,1,2008-05-04 07:31:50+00:00,2010-02-07 09:54:14+00:00,"The camel mail component registers nntp as a supported protocol but there is no javacode or documentation how to use it. It is currently not support out-of-the-box in Camel.
This feature has been requested by an end-user by private mail correspondence.","srw:1210409589:2008-05-10T16:53:09.033+0000:1210409589:2008-05-10T16:53:09.033+0000:Is somebody working on this issue or is it planned an nntp protocol support?

It will be good to know since we like to add this feature but don't like to duplicate work efforts.
davsclaus:1210462005:2008-05-11T07:26:45.155+0000:1210462005:2008-05-11T07:26:45.155+0000:Sebastian.

Nobody has started working on this yet. However the person from the private mail said he would like to give it a go and maybe contribute it back to Camel.

We love contributions. And if you supply a patch granted Apache license rights then I has a very high chance that it will be accepted and committed.
http://activemq.apache.org/camel/contributing.html

I took a quick glimpse to look for a good NNTP open source library to use under the covers and only found Apache Commons Net. Is there a better option or is it the best candidate to use?
What feature should the NNTP support have? What are your requirements Sebastian?

And btw voting for the tickets will give people a better chance to work on the more popular ones than not.
srw:1210517750:2008-05-11T22:55:50.089+0000:1210517800:2008-05-11T22:56:40.380+0000:Claus,

I am aware of:
 - Apache Commons Net
 - Topcoders nntp client: http://software.topcoder.com/catalog/c_component.jsp?comp=5800322&ver=1
 - JScape: http://www.jscape.com/inetfactory/nntp.html

But I think apache commons is the way to go.

IMHO the Camel component basic features must include:
 - Caching: Retrieving only new articles from server and save them locally
 - Stateful: For each routing configuration it can remember the messages already received.

I don't know if it's too ventured to say this, but I think search engines like Nutch must migrate to an ESB/EIP concept, so if you want to build an nntp search engine you just connect your nntp connector to a system indexer.
davsclaus:1258027007:2009-11-12T19:56:47.582+0000:1258027007:2009-11-12T19:56:47.582+0000:Sorry I dont see currently a demand for this ticket.

We love contributions so if anyone in the community want to step up and create such a component, then that would be great."
0,CAMEL-492,Sub-task,Major,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-03 06:36:08+00:00,2008-05-12 07:46:40+00:00,No Desc,"davsclaus:1209767785:2008-05-03T06:36:25.383+0000:1209767785:2008-05-03T06:36:25.383+0000:Destinations to be configured as (more intuitive for email):

    * TO
    * CC
    * BCC
"
0,CAMEL-491,Sub-task,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-05-03 06:35:06+00:00,2008-05-12 07:46:40+00:00,"Created this subtask to spin off work from CAMEL-335


ServiceMix 3 has support for secure protocols. Lars pointed to the code we could use for inspiration.
Camel should support these schemes



pop3s
imaps
smtps","davsclaus:1209886514:2008-05-04T15:35:14.727+0000:1209886514:2008-05-04T15:35:14.727+0000:Camel has support for these protocols out-of-the-box as the underlying framework has this support such as the SUN mail framework v1.4.

However having a mocked unit test with SSL is a bit difficult as the current mock framework does not support SSL.
davsclaus:1209887147:2008-05-04T15:45:47.009+0000:1209887147:2008-05-04T15:45:47.009+0000:Added documentation to wiki *DONE*
davsclaus:1209887450:2008-05-04T15:50:50.765+0000:1209888465:2008-05-04T16:07:45.120+0000:Add the extended security stuff from ServiceMix to use a dummy trust manager
davsclaus:1210156363:2008-05-07T18:32:43.081+0000:1210156363:2008-05-07T18:32:43.081+0000:Got Camel to poll my gmail box so imaps is working fine. Will add it to wiki for SSL sample
davsclaus:1210394636:2008-05-10T12:43:56.039+0000:1210394636:2008-05-10T12:43:56.039+0000:Added dummyTrustManager option and wiki documentation"
0,CAMEL-490,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Marat Gubaidullin,0,0,2008-05-03 01:39:19+00:00,2008-05-12 07:20:07+00:00,"Currently if there is a two way route using jms component replies are collected via a temporary destination. However it is also desirable to be able to have a persistent queue to be used as replyTo destination. 


The attached patch address this requirement.


in order to have a persistent replyTo destination used in your route the route should look like this:


from(""amq-1:queue:foo?replyTo=fooReply"").to(...)


There are two strategies for correlating requests and replies when the replyTo destination is a persistent one.


1. This is the same strategy that used when used with temporary replyTo destination. Either JMSCorrelationID or MessageID are used. No changes are needed to have JMSCorrelationID to correlate request with reply and useMessgeIDAsCorrelationID=true needs to be passed into the route URI or via configuration for using MessageID as correlation id. 


For example: ""amq-1:queue:foo?useMessgeIDAsCorrelationID=true&replyTo=queue:fooReply""


However because this is a persistent replyTo destination and a shared resource the implementation has to dynamically update the consumer's selector waiting on possible replies in order to avoid consuming someone else's messages. This is very inefficient in JMS. 


So to deal with this issues a second strategy is introduced.


2. The second strategy is to use a well known selector name that you provide at configuration time. This selector will then be used to create a reply awaiting consumer with a unique value for each of those consumer instances. To pass the selector name use this configuration property ""replyToDestinationSelectorName"".  


For example: ""amq-1:queue:foo?replyToDestinationSelectorName=replySelector&replyTo=queue:fooReply""


This selector will be available in the Exchange's incoming message header in your ultimate destination processor or as a String property in JMSMessage. You will need to copy this property back into the reply message so that the reply consumer will have its selector match the reply's message selector value and receive the message


This is a cumulative patch that address this Jira as well: https://issues.apache.org/activemq/browse/CAMEL-474","njiang:1210139287:2008-05-07T13:48:07.943+0000:1210139287:2008-05-07T13:48:07.943+0000:Applied patch with thanks to Marat.
marat:1210548007:2008-05-12T07:20:07.681+0000:1210548007:2008-05-12T07:20:07.681+0000:Thanks Willem."
0,CAMEL-489,Bug,Minor,1.3.0,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Claus Ibsen,Glen Mazza,0,0,2008-05-02 01:25:00+00:00,2008-10-23 20:01:02+00:00,"For CXF usage, the exchange body needs to be an array list (or list of strings) to hold the Web service request's parameters.  However file components are failing if that is the datatype of the Exchange message.


The source file at the bottom runs fine, giving this output:


i is: 0
i is: 1
i is: 2
This was called - Body: 0
In file's process
This was called - Body: 1
In file's process
This was called - Body: 2
In file's process


However, if I change the one line of code below marked ""----->""  with ""params"" instead of ""Hello!"", this is the output:


i is: 0
This was called - Body: 0
i is: 1
i is: 2
This was called - Body: 1
This was called - Body: 2


The ""In file's process"" never appears, because for some reason the file component cannot handle the fact that the Exchange body is a list array.  It appears that either the Camel code needs to be changed to allow arraylists for file components, or some exception should be raised--it presently just runs quietly, not giving the user the feedback that an invalid body type is given.


Source file:



package com.mycompany.camel;

import java.util.ArrayList;
import java.util.List;

import javax.jms.ConnectionFactory;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.CamelContext;
import org.apache.camel.CamelTemplate;
import org.apache.camel.component.cxf.CxfConstants;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.impl.DefaultCamelContext;

/**
 * Hello world!
 * 
 */
public class CamelSample2 {
   private CamelSample2() {
   }

   public static void main(String[] args) {
      CamelSample2 cs = new CamelSample2();
      try {
         cs.run();
      } catch (Exception e) {
      }
   }

   private void run() throws Exception {
      CamelContext context = new DefaultCamelContext();
      
      ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
            ""vm://localhost?broker.persistent=false"");
      context.addComponent(""test-jms"", JmsComponent
            .jmsComponentAutoAcknowledge(connectionFactory));

      context.addRoutes(new RouteBuilder() {
         public void configure() {

            from(""test-jms:queue:test.queue"").process(new Processor() {
               public void process(Exchange e) {
                   System.out.println(""This was called - Body: "" + e.getIn().getBody(String.class));
                   final List<String> params = new ArrayList<String>();
                   params.add(e.getIn().getBody(String.class));
---->            e.getOut().setBody(""Hello"");  // params);
                 }
               
           }).to(""file://testfile.txt"").process(new Processor() {
              public void process(Exchange e) {
                 System.out.println(""In file's process"");
                }
               });
           }
      });
            
      CamelTemplate template = new CamelTemplate(context);
      context.start();
      for (int i = 0; i < 3; i++) {
         System.out.println(""i is: "" + i);
         template.sendBody(""test-jms:queue:test.queue"", """" + i);
      }
      Thread.sleep(60000 * 3);  
      context.stop();
   }
}","davsclaus:1209803748:2008-05-03T16:35:48.182+0000:1209803748:2008-05-03T16:35:48.182+0000:Added code block in description
njiang:1209879546:2008-05-04T13:39:06.032+0000:1209879546:2008-05-04T13:39:06.032+0000:Hi Glen,

I think you could add another process between camel-cxf endpoint and camel-file endpoint, 
this process could turn the list into the common object which could be consumed by camel-file endpoint.

Regards,

Willem

gmazza:1209881948:2008-05-04T14:19:08.790+0000:1209881964:2008-05-04T14:19:24.667+0000:Yes, I probably could do that.  But I don't think that fixes the real problem here -- should Camel really just quietly ignore the problem and keep running without giving the needed ""In file's process"" output?  I would think that if Camel can't process the type, either it (a) goes ahead and prints ""In file's process"" anyway or (b) throws an exception listing the problem so the user can understand why he's not getting that message--IllegalStateException, perhaps.

davsclaus:1209889889:2008-05-04T16:31:29.011+0000:1209889889:2008-05-04T16:31:29.011+0000:I have reproduced the problem as a unit test. I do think its because there is no type converter that converts the list of string to something that can be streamed to the file.
davsclaus:1209889940:2008-05-04T16:32:20.731+0000:1209889940:2008-05-04T16:32:20.731+0000:I agree with Glen that Camel should have thrown somekind of error when producing the file as it could not generate the content.
njiang:1209920483:2008-05-05T01:01:23.405+0000:1209920483:2008-05-05T01:01:23.405+0000:Yes, the type converter will return null if there is no right convert method to be called. 
I agree we could add some check point in the file producer to throw the exception when it can't generate the file content.
It could also be the common scenario for the other endpoints.
davsclaus:1209931377:2008-05-05T04:02:57.298+0000:1209931377:2008-05-05T04:02:57.298+0000:If this is really the case then I do think the type converter system should handle it and throw a exception since it could not convert it. Dont we have a ticket for this already?
davsclaus:1209933548:2008-05-05T04:39:08.914+0000:1209933548:2008-05-05T04:39:08.914+0000:It is the problem with type converters. But in Glens use-case the DeadLetterChannel will handle the problem and Camel *does* indeed report an error on this

{code}
2008-05-05 06:09:59,234 [main           ] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/1882-1209960593968/0-0. On delivery attempt: 5 caught: org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: [Hello World] of type: java.util.ArrayList on: FileMessage: issue489 on the exchange: Exchange[FileMessage: issue489]
org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: [Hello World] of type: java.util.ArrayList on: FileMessage: issue489 on the exchange: Exchange[FileMessage: issue489]
	at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127)
{code}

Glen you should check your log files for such kind of error message as above InvalidPayloadException.
The exchange is moved to the default error queue (see wiki documentation elsewhere on the DeadLetterChannel).

Glen if you need to be able to stream an array of String to a file then you can add your own converter that does the needed conversion for the FileProducer

{code}
    @Converter
    public static InputStream toString(List<String> params) {
        StringBuffer sb = new StringBuffer();
        for (String s : params) {
            sb.append(s).append(""\n"");
        }
        return IOConverter.toInputStream(sb.toString());
    }
{code}
davsclaus:1209934236:2008-05-05T04:50:36.440+0000:1209934236:2008-05-05T04:50:36.440+0000:CAMEL-84 is the ticket for the error reporting of no type converters found.

However the problem is that camel-core and all now is used to the fact that some conversions should return null. I am working on a patch. See CAMEL-84
gmazza:1210019899:2008-05-06T04:38:19.267+0000:1210019899:2008-05-06T04:38:19.267+0000:Quote: ""Glen you should check your log files for such kind of error message as above InvalidPayloadException.""

Where are my ""log files""?  I'm not explicitly configuring any logging here--does anyone have any simple samples of configuring logging?  The camel page[1], just provides generic links to commons-logging and log4J, which isn't very convenient or helpful.  (Also, there seems to be something wrong with the website on the DeadLetterChannel[2] (and other pages as well)--code is no longer being shown, it just says: ""An error occurred: Connection refused. The system administrator has been notified."")

[1] http://activemq.apache.org/camel/how-do-i-change-the-logging.html
[2] http://activemq.apache.org/camel/dead-letter-channel.html

davsclaus:1210021210:2008-05-06T05:00:10.047+0000:1210021210:2008-05-06T05:00:10.047+0000:Glen we are in bad luck recently. The Apache infrastructure changed hardware for the SVN server. So I guess it has the influence of the wiki pages not showing code snippets from the source files.

To enable logging you could do as I (I prefer log4j anytime over Java Util Logging).
- Add log4j.jar to your classpath
- copy a log4j.properties to the root folder where your compiler have generated the .class files of your source code (lo4j.properties must be on the classpath)
You can grap a log4j.properties from the Camel distributions from the examples folder such as: \examples\camel-example-bam\src\main\resources

In the log4j.properties file you can change the log levels from INFO to DEBUG to get much more verbose logging. But the error should be reported at ERROR level so you should see it anyway.
davsclaus:1210021463:2008-05-06T05:04:23.021+0000:1210021463:2008-05-06T05:04:23.021+0000:The code snippets for the DeadLetterChannel can be viewed using SVN viewer (viewvc)

http://svn.apache.org/viewvc/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java?view=markup
davsclaus:1210021585:2008-05-06T05:06:25.461+0000:1210021585:2008-05-06T05:06:25.461+0000:Glen if you are able to see the ERROR in the log files / system out console etc.

Then you should try adding the type converter shown above the does the conversions from List<String> to InputStream as the FileComponent expects.
Then the ERROR should be gone and you are good.
gmazza:1210027966:2008-05-06T06:52:46.538+0000:1210027966:2008-05-06T06:52:46.538+0000:If I understand you correctly, CAMEL-84 (whenever it's fixed) will throw an exception when it cannot find the correct converter type.  That will allow newbies like me to be able to visually see this error from a command-line terminal window without first needing to configure logging.  That sounds good.  If so, this issue can be closed or marked as a duplicate of CAMEL-84.  Also, I updated the logging page with your instructions above so others can quickly reference it.  Thanks!





davsclaus:1210031223:2008-05-06T07:47:03.284+0000:1210031223:2008-05-06T07:47:03.284+0000:The user had a difficulty identify the problem. CAMEL-84 would provided better user feedback.
davsclaus:1210031239:2008-05-06T07:47:19.886+0000:1210031239:2008-05-06T07:47:19.886+0000:Hi Glenn

Glad you got it working with the logging. And nice addition to the wiki - thanks ;)

I have closed this as wont fix as it is basically you as the end user that uses a custom object type on the body.
The resolution is to provide your own conversion using the annotation tags etc."
0,CAMEL-488,New Feature,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-01 08:37:19+00:00,2008-06-05 09:22:21+00:00,"CXF client provides calling the web service with wrapped parameters, we may need an option for the camel-cxf provider to invoke the service with wrapped parameters.","njiang:1210139235:2008-05-07T13:47:15.591+0000:1210139235:2008-05-07T13:47:15.591+0000:The patch is committed into the repository.
"
0,CAMEL-487,Task,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-05-01 08:30:42+00:00,2008-06-05 09:22:08+00:00,"To show how to set response back for the camel-cxf consumer , and how to set the request parameters for the camel-cxf provider.","njiang:1210142406:2008-05-07T14:40:06.049+0000:1210142435:2008-05-07T14:40:35.561+0000:Added the description in the CXF component page[1]
[1]http://cwiki.apache.org/confluence/display/CAMEL/CXF "
0,CAMEL-456,Bug,Critical,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,Hadrian Zbarcea,0,0,2008-04-09 15:48:03+00:00,2008-07-11 04:21:45+00:00,"The apache-camel jar in the binary distribution misses a lot of files, including class and schema files (12k in size compared to the 1.9M released jar).","janstey:1207996499:2008-04-12T18:34:59.950+0000:1207996499:2008-04-12T18:34:59.950+0000:Here's a patch to fix this issue.

Basically, the shaded jar (i.e. the larger one) was being generated *after* the assemblies were created and so was not being included. The simple fix would have been to change the ordering in the pom... when I tried to do this, the shade plugin messed up the environment such that the assembly plugin didn't work anymore. Try it for yourself, it was quite wonky :) Anyway, the solution was to separate out the shade portion to a submodule.
hadrian:1208009566:2008-04-12T22:12:46.511+0000:1208009566:2008-04-12T22:12:46.511+0000:Awesome.  Thanks a lot Jon."
0,CAMEL-455,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Willem Jiang,0,0,2008-04-09 01:15:04+00:00,2008-04-12 13:45:01+00:00,"Since CXF 2.0.5 released for a while , we need to upgrade it in Camel.","davsclaus:1207858353:2008-04-11T04:12:33.161+0000:1207858353:2008-04-11T04:12:33.161+0000:Willem is there more work to be done than upgrading the pom files?
njiang:1207979049:2008-04-12T13:44:09.658+0000:1207979049:2008-04-12T13:44:09.658+0000:There are just some bugs fixing in the CXF 2.0.5.  
We may need to do more than updating pom thing for the coming up CXF 2.1.
njiang:1207979101:2008-04-12T13:45:01.023+0000:1207979101:2008-04-12T13:45:01.023+0000:This patch is in the SVN repository."
0,CAMEL-454,New Feature,Minor,1.4.0,Future,"
None
",Closed,Won't Fix,Future,Unassigned,Claus Ibsen,0,0,2008-04-08 04:46:36+00:00,2010-02-07 09:54:14+00:00,"camel-swing and camel-uface is not documented at all on our wiki.


It should be documented with



added to the component list
own page with documentation of the component with uri syntax, options and java examples
link to the underlying projects",davsclaus:1243069009:2009-05-23T16:56:49.178+0000:1243069009:2009-05-23T16:56:49.178+0000:These components is @deprecated and will be removed in the future
0,CAMEL-453,New Feature,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Roman Kalukiewicz,Claus Ibsen,0,0,2008-04-08 04:43:56+00:00,2008-05-12 07:48:07+00:00,"camel-sql is not documented at all on our wiki.


It should be documented with



added to the component list
own page with documentation of the component with uri syntax, options and java examples
link to the underlying Spring JDBC that is used to do the actual query",romkal:1208324651:2008-04-16T13:44:11.538+0000:1208324651:2008-04-16T13:44:11.538+0000:http://cwiki.apache.org/confluence/display/CAMEL/SQL+Component
0,CAMEL-452,New Feature,Minor,1.4.0,Future,"
None
",Closed,Won't Fix,Future,Unassigned,Claus Ibsen,0,0,2008-04-08 04:37:36+00:00,2010-02-07 09:54:14+00:00,"camel-jhc is not documented at all on our wiki.


It should be documented with



added to the component list
own page with documentation of the component with uri syntax, options and java examples
link to the Jakarta Commons HTTP projects",davsclaus:1243069047:2009-05-23T16:57:27.411+0000:1243069047:2009-05-23T16:57:27.411+0000:this component is @deprecated and is to be removed
0,CAMEL-451,New Feature,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-08 04:34:19+00:00,2008-06-05 09:46:21+00:00,"camel-atom is not documented at all on our wiki.


It should be documented with



added to the component list
own page with documentation of the component with uri syntax, options and java examples
link to the Apache abdera project",davsclaus:1210899938:2008-05-16T09:05:38.136+0000:1210899938:2008-05-16T09:05:38.136+0000:Added a long sample and documented how to use it Now its in pretty good shape.
0,CAMEL-450,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Cannot Reproduce,1.3.0,Unassigned,Glen Mazza,0,0,2008-04-07 22:19:02+00:00,2008-10-23 19:54:53+00:00,"Running the JMS-file example[1] using Maven from a command window is raising an error stack (http://issues.apache.org/activemq/browse/AMQ-1132).  ActiveMQ has an apparent bug in that it is trying to log to a hardcoded directory that doesn't exist on most machines.


[1] http://svn.apache.org/viewvc/activemq/camel/trunk/examples/camel-example-jms-file/","davsclaus:1207874870:2008-04-11T08:47:50.593+0000:1207874870:2008-04-11T08:47:50.593+0000:Isn't this bug a ActiveMQ bug, and thus should be fixed in ActiveMQ?

I am not keen on creating a workaround in Camel for a bug in ActiveMQ where the workaround would be ugly.
davsclaus:1207875011:2008-04-11T08:50:11.913+0000:1207875011:2008-04-11T08:50:11.913+0000:Glen I can not reproduce it at my local machine.

When I run mvn compile exec:java I do not get any ERROR level logging. This is using the log4j.properties from the trunk.
gmazza:1207947978:2008-04-12T05:06:18.441+0000:1207948008:2008-04-12T05:06:48.721+0000:I stand corrected -- I wasn't able to duplicate it off trunk either.  Never mind -- this issue is invalid.  Sorry about that."
0,CAMEL-449,Improvement,Minor,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-07 19:04:20+00:00,2008-05-12 07:46:40+00:00,"We should upgrade Apache Felix to either 1.4.0 or 1.2.1


We are currently running 1.2.0.
Apache Felix 1.4 should be all that 1.2 is but much better.


We opt for 1.4 but should verift that it builds on peoples machines.
1.4 works on my local XP laptop.","davsclaus:1207566384:2008-04-07T19:06:24.406+0000:1207566384:2008-04-07T19:06:24.406+0000:Lets see if Bamboo works tomorrow.
davsclaus:1207598217:2008-04-08T03:56:57.956+0000:1207598217:2008-04-08T03:56:57.956+0000:Bamboo is happy with build 112"
0,CAMEL-448,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-07 18:52:18+00:00,2008-05-12 07:46:40+00:00,"OpenJPA in release 1.0 and onwards requires a change in the ant build in the pom.xml


It now requires a persistance.xml file to use.","davsclaus:1207565856:2008-04-07T18:57:36.194+0000:1207565856:2008-04-07T18:57:36.194+0000:Commited a patch to trunk.

Open-jpa from v1.0.0 requires a persistance.xml file in its enhancer:

The tasks in ant now have included a reference to the persistence.xml fil
<config propertiesFile=""${basedir}/src/main/resources/META-INF/persistence.xml""/>


{code}
                <openjpac directory=""${basedir}/target/jpa-classes"">
                  <classpath refid=""cp""/>
                  <fileset dir=""${basedir}/target/classes"">
                    <include name=""org/apache/camel/processor/**/M*.class""/>
                  </fileset>
				  <config propertiesFile=""${basedir}/src/main/resources/META-INF/persistence.xml""/>
                </openjpac>
                <openjpac directory=""${basedir}/target/jpa-test-classes"">
                  <classpath refid=""cp""/>
                  <fileset dir=""${basedir}/target/test-classes"">
                    <include name=""org/apache/camel/examples/*.class""/>
                  </fileset>
				  <config propertiesFile=""${basedir}/src/main/resources/META-INF/persistence.xml""/>
                </openjpac>
{code}
davsclaus:1207566068:2008-04-07T19:01:08.602+0000:1207566068:2008-04-07T19:01:08.602+0000:OpenJPA / JPA experts please review the open-jpa component on trunk
davsclaus:1207972311:2008-04-12T11:51:51.130+0000:1207972311:2008-04-12T11:51:51.130+0000:Closing for now."
0,CAMEL-447,Task,Major,1.3.0,1.4.0,"
None
",Closed,Duplicate,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-07 12:08:02+00:00,2008-04-08 04:48:05+00:00,"In camel components is registered using auto discovery of special files in the META-INF folder.


We are missing some of these files on the wiki that are used as the protocol prefix in the URI configuration.
eg. in camel-mail we have also pop3s and smtps that are not on the wiki.


Do this for all the components one by one.","davsclaus:1207542779:2008-04-07T12:32:59.888+0000:1207542779:2008-04-07T12:32:59.888+0000:camel-core:
bean
dataset
direct
file
list
log
mock
pojo
queue
ref
seda
timer
vm


camel-amqp:
amqp


camel-atom:
atom


camel-bam:
Is not a component


camel-csv:
Is not a component


camel-cfx:
cfx
soap


camel-ftp:
ftp
sftp
webdav


camel-groovy:
Is not a component


camel-http:
http


camel-ibatis:
ibatis


camel-irc:
irc


camel-jaxb:
Is not a component


camel-jcr:
jcr


camel-jdbc:
jdbc


camel-jetty:
jetty


camel-jhc:
jhc


camel-jing:
rnc
rng


camel-jms:
jms


camel-josql:
Is not a component


camel-jpa:
jpa


camel-juel:
Is not a component


camel-jxpath:
Is not a component


camel-mail:
imap
nntp
pop3
pop3s
smtp
smtps


camel-mina:
mina


camel-msv:
msv


camel-ognl:
Is not a component


camel-osgi:
Is not a component


camel-quartz:
quartz


camel-rmi:
rmi


camel-ruby:
Is not a component


camel-saxon:
xquery


camel-scala:
Is not a component


camel-script:
Is not a component


camel-spring:
test
validator
xslt


camel-sql:
sql


camel-stream:
stream


camel-stringtemplate:
string-template


camel-supercsv:
Is not a component


camel-swing:
swing


camel-testng:
Is not a component


camel-uface:
swing
uface


camel-velocity:
velocity


camel-xmlbeans:
Is not a component


camel-xmpp:
xmpp


camel-xstream:
Is not a component
davsclaus:1207544098:2008-04-07T12:54:58.920+0000:1207544098:2008-04-07T12:54:58.920+0000:Edit the wiki from ths page:

http://cwiki.apache.org/confluence/display/CAMEL/Component+List
davsclaus:1207601285:2008-04-08T04:48:05.098+0000:1207601285:2008-04-08T04:48:05.098+0000:I have created tickets for the missing components that should be documented"
0,CAMEL-446,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,1.3.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-07 04:42:07+00:00,2008-10-23 20:02:07+00:00,No Desc,davsclaus:1209768113:2008-05-03T06:41:53.878+0000:1209768113:2008-05-03T06:41:53.878+0000:Hard to get a mock library for SFTP protocol.
0,CAMEL-445,Sub-task,Minor,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-07 04:41:49+00:00,2008-05-12 07:46:40+00:00,No Desc,davsclaus:1207963873:2008-04-12T09:31:13.059+0000:1207963873:2008-04-12T09:31:13.059+0000:Ported fixes from FTP to SFTP manly due a bug in the build directory code
0,CAMEL-444,Sub-task,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-06 08:57:02+00:00,2008-05-12 07:46:40+00:00,"The FTPConsumer seems in the unit tests not to properly close.


We get these WARN in the logs



[ Thread: 1 RemoteFileComponent] ScheduledPollConsumer          WARN  Caught: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.
org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.
        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:267)
        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:460)
        at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:520)
        at org.apache.commons.net.ftp.FTP.cwd(FTP.java:745)
        at org.apache.commons.net.ftp.FTPClient.changeWorkingDirectory(FTPClient.java:725)
        at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:101)
        at org.apache.camel.component.file.remote.FtpConsumer.poll(FtpConsumer.java:77)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)","davsclaus:1207466981:2008-04-06T15:29:41.944+0000:1207466981:2008-04-06T15:29:41.944+0000:Hmmm the FTP Component doesn't have nice house keeping when its stopping. The WARN above is logged when the consumer is stopped such as stopping Camel or a unit test.
davsclaus:1207468816:2008-04-06T16:00:16.173+0000:1207468816:2008-04-06T16:00:16.173+0000:Resolution is to shutdown unit testing in correct order to avoid these WARNs"
0,CAMEL-443,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-05 16:40:43+00:00,2008-05-12 07:46:40+00:00,"I have added two missings options and then I discovered a few more missing so I am created this ticket so we get this done.


The File Component has several options we haven't documented on the wiki yet.
Also its javadoc should be improved.
And we should provide some better java samples on the wiki.","davsclaus:1207988682:2008-04-12T16:24:42.613+0000:1207988682:2008-04-12T16:24:42.613+0000:Improved javadoc, added missing properties to wiki and added a snippet how to write files."
0,CAMEL-442,Improvement,Minor,"1.2.0, 1.3.0, 1.4.0",1.5.0,"
None
",Closed,Won't Fix,1.5.0,Unassigned,Claus Ibsen,0,0,2008-04-05 15:22:42+00:00,2008-10-23 04:40:04+00:00,"The documentation how to use the interceptor features is scattered in the current wiki documentation.


Interceptor should be have its own page and be linked from the Architecture page.
We should also provide some better java examples as the current are quite testish","davsclaus:1215318075:2008-07-06T12:21:15.224+0000:1215318075:2008-07-06T12:21:15.224+0000:Some documentation here
http://activemq.apache.org/camel/dsl.html

Also write that you can add your own java code interceptor code logic with addInterceptorXXX() on the context itself."
0,CAMEL-441,Improvement,Minor,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,Claus Ibsen,0,0,2008-04-05 15:20:13+00:00,2008-06-05 09:47:39+00:00,"Add wiki documentation for the missing core component: RefComponent.
It should be on the component list.


Would also be nice with a java sample for what it can be useful for.",
0,CAMEL-440,Sub-task,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-05 07:44:26+00:00,2008-05-12 07:46:40+00:00,"Wiki documentation
Code snippets in wiki



Start from this wiki page:
http://activemq.apache.org/camel/error-handler.html",davsclaus:1207365772:2008-04-05T11:22:52.456+0000:1207365772:2008-04-05T11:22:52.456+0000:Updated wiki for both Error Handler and Dead Letter Channel.
0,CAMEL-439,Bug,Minor,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Art Gramlich,0,0,2008-04-04 19:49:05+00:00,2008-06-05 09:01:41+00:00,The assertResultType method In org.apache.camel.language.jxpath.JXPathExpression throws a null pointer exception if the result parameter is null.  A null test in that method or in the evaluate method in that class is needed.,"gertvanthienen:1207347458:2008-04-05T06:17:38.917+0000:1207347458:2008-04-05T06:17:38.917+0000:Added a unit test and the check to assertResultType.
njiang:1207351939:2008-04-05T07:32:19.314+0000:1207351939:2008-04-05T07:32:19.314+0000:patch applied with thanks to Art."
0,CAMEL-438,New Feature,Minor,1.4.0,None,"
None
",Closed,Won't Fix,2.0-M1,Unassigned,Georgios Georgiadis,0,0,2008-04-04 09:30:42+00:00,2009-10-24 11:16:12+00:00,"Currently a component using the Axis (not Axis2) framework is not available in Camel. many projects use Axis for web services integration, thus it will be very useful to have this component. Currently web service component in Camel is Camel CXF.","davsclaus:1232448246:2009-01-20T18:44:06.510+0000:1232448246:2009-01-20T18:44:06.510+0000:I doubt there is any easy hooks into Axis 1.x.

See the Axis tutorial we have where you can kinda nice integrate with Axis.
http://camel.apache.org/tutorial-axis-camel.html
"
0,CAMEL-437,Bug,Minor,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Won't Fix,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-04 07:34:55+00:00,2008-05-12 07:46:40+00:00,"See the user form
http://www.nabble.com/Some-questions-about-a-simple-setHeader-test-td16467528s22882.html


Attached is a unit tests that demonstrates some problems.


Created this ticket to investigate to see if there is a bug/problem in Camel. And not forget about it.","davsclaus:1207955117:2008-04-12T07:05:17.920+0000:1207955117:2008-04-12T07:05:17.920+0000:At first glance it doesnt look like to be a problem in Camel.

However the interceptor documentation could be wrong, how its meant to be used.
davsclaus:1207961727:2008-04-12T08:55:27.199+0000:1207961727:2008-04-12T08:55:27.199+0000:Not a problem in Camel. 

However we need better documentation how interceptors works
davsclaus:1207961765:2008-04-12T08:56:05.715+0000:1207961765:2008-04-12T08:56:05.715+0000:See CAMEL-442"
0,CAMEL-436,Improvement,Trivial,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Glen Mazza,0,0,2008-04-04 05:05:36+00:00,2008-06-05 09:00:51+00:00,Still doing this trivial stuff while learning the codebase...,"gmazza:1207256764:2008-04-04T05:06:04.398+0000:1207256764:2008-04-04T05:06:04.398+0000:patch for camel-cxf package.
njiang:1207358232:2008-04-05T09:17:12.393+0000:1207358232:2008-04-05T09:17:12.393+0000:Patch applied with thank to Glen."
0,CAMEL-435,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-04-03 15:06:45+00:00,2008-05-12 12:45:35+00:00,We should be able to patch the code so that it still works; just without the queue browsing support,"jstrachan:1207206671:2008-04-03T15:11:11.947+0000:1207206671:2008-04-03T15:11:11.947+0000:Issue resolved; see tests/camel-itest-spring-2.0 for the integration test
davsclaus:1210567535:2008-05-12T12:45:35.777+0000:1210567535:2008-05-12T12:45:35.777+0000:Closed all 1.3 tickets"
0,CAMEL-434,Improvement,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,Martin Gilday,0,0,2008-04-03 13:25:28+00:00,2008-06-05 09:00:39+00:00,The camel:run and camel:embeddable operations use META-INF/spring/*.xml as the default for the Spring ApplicationContext.  It should be possible to change this through the plugin configuration.,"njiang:1207357962:2008-04-05T09:12:42.857+0000:1207357962:2008-04-05T09:12:42.857+0000:Here is the example
      <!-- Allows the routes to be run via 'mvn camel:run' -->
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <configuration>
           <applicationContextUri>camel-context.xml</applicationContextUri>
        </configuration>
       </plugin>
davsclaus:1207358186:2008-04-05T09:16:26.283+0000:1207358186:2008-04-05T09:16:26.283+0000:Williem

Please update the wiki also:
http://activemq.apache.org/camel/camel-maven-plugin.html
njiang:1207359985:2008-04-05T09:46:25.646+0000:1207359985:2008-04-05T09:46:25.646+0000:The wiki is also updated.
pledge:1207364603:2008-04-05T11:03:23.781+0000:1207364603:2008-04-05T11:03:23.781+0000:Does the URI take all the usual Spring styles?  i.e classpath:/ paths and *.xml expressions?  Can you specify more than one file?
njiang:1207371546:2008-04-05T12:59:06.333+0000:1207371546:2008-04-05T12:59:06.333+0000:The URI will be split by "";"" and  feed to the ClassPathXmlApplicationContext as a construction parameter.
{code}
     protected AbstractApplicationContext createDefaultApplicationContext() {
        String[] args = getApplicationContextUri().split("";"");
        return new ClassPathXmlApplicationContext(args);
    }
{code}

so if you want to specfiy more than one file, it could be ""META-INF/spring/*.xml;file-in-the-class.file"""
0,CAMEL-433,Improvement,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-03 05:27:11+00:00,2008-05-12 12:31:44+00:00,"During the hunt for a bug in the JPA sample (etl) the bug was that the uri configuration was mistyped and there was two ? markers, so one option was actually skipped during initialization.


This is a bit serious, so we should add validation to the core code to throw somekind of exception when there are two ? markers in the uri etc.","davsclaus:1207171657:2008-04-03T05:27:37.514+0000:1207171657:2008-04-03T05:27:37.514+0000:It was CAMEL-430 that had the two ? markers
davsclaus:1210469065:2008-05-11T09:24:25.802+0000:1210469065:2008-05-11T09:24:25.802+0000:DefaultComponent has the endpoint uri code that should have better validation
davsclaus:1210497693:2008-05-11T17:21:33.638+0000:1210497693:2008-05-11T17:21:33.638+0000:Implemented validation in camel-core so Camel will throw a ResolveEndpointFailedException if there are parameters left overs.
It also validates if you have & in the uri but no ? marker.

See the wiki http://activemq.apache.org/camel/writing-components.html for how to resolve this as a component writer (you must removed parameters you support).


davsclaus:1210552962:2008-05-12T08:42:42.518+0000:1210552962:2008-05-12T08:42:42.518+0000:Use the new getAndRemoveParameter methods in all our components
davsclaus:1210561926:2008-05-12T11:12:06.153+0000:1210561926:2008-05-12T11:12:06.153+0000:camel-mina *DONE*
davsclaus:1210564310:2008-05-12T11:51:50.369+0000:1210564310:2008-05-12T11:51:50.369+0000:camel-stream *DONE*
davsclaus:1210565603:2008-05-12T12:13:23.902+0000:1210565603:2008-05-12T12:13:23.902+0000:camel-spring (xslt component) *DONE*
davsclaus:1210566674:2008-05-12T12:31:14.528+0000:1210566674:2008-05-12T12:31:14.528+0000:spring-jms *DONE*
davsclaus:1210566704:2008-05-12T12:31:44.243+0000:1210566704:2008-05-12T12:31:44.243+0000:Okay no more components uses parameters.remove directly"
0,CAMEL-432,Improvement,Minor,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-03 05:24:41+00:00,2008-05-12 07:46:40+00:00,"There are two options missing from the wiki documentation


flushOnSend (default = true)
maximumResults (default = -1)",davsclaus:1208291393:2008-04-16T04:29:53.507+0000:1208291393:2008-04-16T04:29:53.507+0000:consumeLockEntity was also missing
0,CAMEL-431,Improvement,Trivial,"1.2.0, 1.3.0",1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Glen Mazza,0,0,2008-04-03 04:53:48+00:00,2008-05-12 12:45:35+00:00,Really minor--typos I found for the last four Camel examples.,"davsclaus:1207171397:2008-04-03T05:23:17.240+0000:1207171397:2008-04-03T05:23:17.240+0000:Applied patch with thanks to Glen
davsclaus:1210567535:2008-05-12T12:45:35.758+0000:1210567535:2008-05-12T12:45:35.758+0000:Closed all 1.3 tickets"
0,CAMEL-430,Bug,Major,"1.2.0, 1.3.0",1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Peter Jones,0,1,2008-04-02 19:20:26+00:00,2008-05-12 12:45:35+00:00,"In org/apache/camel/example/etl/EtlRoutes.java, the following line:



    from(""jpa:org.apache.camel.example.etl.CustomerEntity?consumeDelete=false?consumer.delay=3000&consumeLockEntity=false"")
        .setHeader(FileComponent.HEADER_FILE_NAME, el(""${in.body.userName}.xml""))
        .to(""file:target/customers?append=false"");




seems to successfully dump the database entries to files in the target/customers directory.  Unless I'm misunderstanding the sample, the consumeDelete=false is meant to ensure that the dump of the database does not delete the entries from the database.  However, when running the etl sample querying the customer table in the database, the list is empty.  I suspect the consumeDelete=false isn't working.","davsclaus:1207169490:2008-04-03T04:51:30.471+0000:1207169490:2008-04-03T04:51:30.471+0000:A few other options hasnt been documented

flushOnSend   (default = true)
maximumResults   (default = -1)
davsclaus:1207170533:2008-04-03T05:08:53.503+0000:1207170533:2008-04-03T05:08:53.503+0000:It was just a mistyped URI in the sample.

The JPA component works fine.
I will spin off a new task for the missing options in the wiki
davsclaus:1207170558:2008-04-03T05:09:18.636+0000:1207170558:2008-04-03T05:09:18.636+0000:committed a fix to trunk
davsclaus:1210567535:2008-05-12T12:45:35.721+0000:1210567535:2008-05-12T12:45:35.721+0000:Closed all 1.3 tickets"
0,CAMEL-429,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-04-02 14:37:00+00:00,2008-05-12 12:45:35+00:00,No Desc,"jstrachan:1207120514:2008-04-02T15:15:14.118+0000:1207120514:2008-04-02T15:15:14.118+0000:patch applied
davsclaus:1207133303:2008-04-02T18:48:23.713+0000:1207133303:2008-04-02T18:48:23.713+0000:This is the wiki police ;)

James remember to update the wiki for the mock component if you have added new options etc.
davsclaus:1210567535:2008-05-12T12:45:35.702+0000:1210567535:2008-05-12T12:45:35.702+0000:Closed all 1.3 tickets"
0,CAMEL-428,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Willem Jiang,James Strachan,1,0,2008-04-02 14:19:02+00:00,2008-05-12 12:45:35+00:00,"I find I often just wanna rebuild, say camel-core when running tests from maven. However it now takes a long time to make just a jar as we make the javadoc stuff when running 'mvn install'.


I wonder could we make it easy to avoid this step in the build if we wanna?","njiang:1207163898:2008-04-03T03:18:18.396+0000:1207163898:2008-04-03T03:18:18.396+0000:The patch is in the trunk now.
jstrachan:1207273304:2008-04-04T09:41:44.748+0000:1207273304:2008-04-04T09:41:44.748+0000:I've just patched the assembly to also use the release profile too
davsclaus:1210567535:2008-05-12T12:45:35.673+0000:1210567535:2008-05-12T12:45:35.673+0000:Closed all 1.3 tickets"
0,CAMEL-427,Improvement,Trivial,"1.2.0, 1.3.0",1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Glen Mazza,0,0,2008-04-02 11:55:34+00:00,2008-05-12 12:45:35+00:00,Found a few more typos.,"davsclaus:1207129967:2008-04-02T17:52:47.393+0000:1207129967:2008-04-02T17:52:47.393+0000:Glenn. Could you re attach the patch file with granting ASF rights to the patch. (there should be a Apache icon next to the file).

JIRA only shows the tick box when you attach the file after the ticket has been created (not during creation, to my knowledge).
gmazza:1207131947:2008-04-02T18:25:47.473+0000:1207131947:2008-04-02T18:25:47.473+0000:Done.
davsclaus:1207168235:2008-04-03T04:30:35.865+0000:1207168235:2008-04-03T04:30:35.865+0000:Applied patch with thanks to Glen Mazza
davsclaus:1210567535:2008-05-12T12:45:35.039+0000:1210567535:2008-05-12T12:45:35.039+0000:Closed all 1.3 tickets"
0,CAMEL-426,Improvement,Major,1.4.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-04-02 11:11:25+00:00,2009-02-16 05:53:17+00:00,"Ability to have



from(""direct:parallel"").splitter(body().tokenize("",""), true).to(""mock:result"");




where true parameter to splitter should behave like in multicast() â€” processing is done in separate threads for each 'part'.","romkal:1207107943:2008-04-02T11:45:43.808+0000:1207107943:2008-04-02T11:45:43.808+0000:Functionality added by refactoring {{MulticastProcessor}}
davsclaus:1207130621:2008-04-02T18:03:41.622+0000:1207130621:2008-04-02T18:03:41.622+0000:Roman, remember to update the wiki with the new ""true"" parameter. We need the wiki documentation to shine and that users will be able to see what features and options Camel really has.
davsclaus:1217056070:2008-07-26T15:07:50.739+0000:1217056070:2008-07-26T15:07:50.739+0000:Its fixed in Camel 1.4 actually.
davsclaus:1234734797:2009-02-16T05:53:17.256+0000:1234734797:2009-02-16T05:53:17.256+0000:Closing old tickets"
0,CAMEL-425,Improvement,Minor,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Glen Mazza,0,0,2008-04-02 04:30:42+00:00,2008-05-12 12:45:35+00:00,Typos fixed for the Camel/CXF sample.,"njiang:1207093168:2008-04-02T07:39:28.337+0000:1207093168:2008-04-02T07:39:28.337+0000:patch applied with thanks to Glen
davsclaus:1210567535:2008-05-12T12:45:35.020+0000:1210567535:2008-05-12T12:45:35.020+0000:Closed all 1.3 tickets"
0,CAMEL-424,Improvement,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-02 04:25:33+00:00,2008-05-12 07:46:39+00:00,"The wiki documentation for FTP usage could be improved with:



java code examples (snippets in unit test classes)
that you need the convertTo(String.class) for ASCII file transfer
The FTP component is an extension of the File component so it inherits behaviour, features and options from file. State precise witch options a FTPProducer and FTPConsuer can use.
Consuming using FTP there are special header key/values for the remote filename etc. that could be of interest for the end users (Maybe for the producer as well)","davsclaus:1207448762:2008-04-06T10:26:02.932+0000:1207448762:2008-04-06T10:26:02.932+0000:FTPConsumer has an option: setNames(boolean)
davsclaus:1207448855:2008-04-06T10:27:35.579+0000:1207448855:2008-04-06T10:27:35.579+0000:The remote message has these headers

map.put(""file.remote.host"", hostname);
map.put(""file.remote.name"", fullFileName);
davsclaus:1207471477:2008-04-06T16:44:37.102+0000:1207471477:2008-04-06T16:44:37.102+0000:ASCII conversion to string is now out-of-the-box so no need for convertBodyTo(String.class)
davsclaus:1207990166:2008-04-12T16:49:26.292+0000:1207990166:2008-04-12T16:49:26.292+0000:Removed webdav as scheme/protocol from the FTP component as there was no code for it after all. And it belongs more naturally in a HTTP component.
davsclaus:1207991865:2008-04-12T17:17:45.622+0000:1207991865:2008-04-12T17:17:45.622+0000:Added missing properties, wrote about the ""consumer."" prefix and added a sample how to download files. etc."
0,CAMEL-423,Sub-task,Major,None,1.4.0,"
None
",Closed,Won't Fix,1.4.0,Unassigned,Peter Jones,0,1,2008-04-01 22:13:58+00:00,2008-07-06 06:35:10+00:00,"There are a number of jars not included in the binary distribution which are
required to compile and run the samples.  To run these samples without maven,
the following jars need to be added.


The cxf, jms-file, and spring samples have dependencies on activemq:


    org/apache/activemq/activemq-core/4.1.1/activemq-core-4.1.1.jar
    backport-util-concurrent/backport-util-concurrent/2.1/backport-util-concurrent-2.1.jar


The bam, and etl samples have dependencies on hibernate jars to compile/run:


    javax/persistence/persistence-api/1.0/persistence-api-1.0.jar
    org/apache/geronimo/specs/geronimo-jta_1.0.1B_spec/1.0/geronimo-jta_1.0.1B_spec-1.0.jar
    org/hibernate/hibernate-annotations/3.2.1.ga/hibernate-annotations-3.2.1.ga.jar
    org/hibernate/hibernate-entitymanager/3.2.1.ga/hibernate-entitymanager-3.2.1.ga.jar
    org/hibernate/hibernate/3.2.1.ga/hibernate-3.2.1.ga.jar
    antlr/antlr/2.7.6/antlr-2.7.6.jar
    asm/asm/1.5.3/asm-1.5.3.jar
    cglib/cglib/2.1_3/cglib-2.1_3.jar
    dom4j/dom4j/1.6.1/dom4j-1.6.1.jar
    hsqldb/hsqldb/1.8.0.7/hsqldb-1.8.0.7.jar
    jboss/javassist/3.3.ga/javassist-3.3.ga.jar
    jboss/jboss-archive-browsing/5.0.0alpha-200607201-119/jboss-archive-browsing-5.0.0alpha-200607201-119.jar


The etl example also has a dependency on:


    de/odysseus/juel/juel/2.1.0/juel-2.1.0.jar


The samples use log4j for runtime logging:


    log4j/log4j/1.2.12/log4j-1.2.12.jar


The docs, jms-file, and spring samples include a test class which requires junit
to compile (could ignore these test classes rather than include junit):


    junit/junit/3.8.1/junit-3.8.1.jar


Finally, the cxf sample depends on another 32 jars to generate code from its wsdl and run
the sample:


    org/apache/cxf/cxf-api/2.0.2-incubator/cxf-api-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-core/2.0.2-incubator/cxf-rt-core-2.0.2-incubator.jar
    org/apache/cxf/cxf-common-utilities/2.0.2-incubator/cxf-common-utilities-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-bindings-soap/2.0.2-incubator/cxf-rt-bindings-soap-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-databinding-jaxb/2.0.2-incubator/cxf-rt-databinding-jaxb-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-frontend-jaxws/2.0.2-incubator/cxf-rt-frontend-jaxws-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-frontend-simple/2.0.2-incubator/cxf-rt-frontend-simple-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-transports-http-jetty/2.0.2-incubator/cxf-rt-transports-http-jetty-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-transports-http/2.0.2-incubator/cxf-rt-transports-http-2.0.2-incubator.jar
    org/apache/cxf/cxf-rt-transports-jms/2.0.2-incubator/cxf-rt-transports-jms-2.0.2-incubator.jar
    org/apache/cxf/cxf-tools-common/2.0.2-incubator/cxf-tools-common-2.0.2-incubator.jar
    org/apache/cxf/cxf-tools-wsdlto-core/2.0.2-incubator/cxf-tools-wsdlto-core-2.0.2-incubator.jar
    org/apache/cxf/cxf-tools-wsdlto-frontend-jaxws/2.0.2-incubator/cxf-tools-wsdlto-frontend-jaxws-2.0.2-incubator.jar
    org/apache/cxf/cxf-tools-wsdlto-databinding-jaxb/2.0.2-incubator/cxf-tools-wsdlto-databinding-jaxb-2.0.2-incubator.jar
    org/apache/geronimo/specs/geronimo-annotation_1.0_spec/1.1.1/geronimo-annotation_1.0_spec-1.1.1.jar
    org/apache/geronimo/specs/geronimo-servlet_2.5_spec/1.1-M1/geronimo-servlet_2.5_spec-1.1-M1.jar
    org/apache/geronimo/specs/geronimo-ws-metadata_2.0_spec/1.1.1/geronimo-ws-metadata_2.0_spec-1.1.1.jar
    javax/xml/ws/jaxws-api/2.0/jaxws-api-2.0.jar
    javax/xml/soap/saaj-api/1.3/saaj-api-1.3.jar
    velocity/velocity/1.4/velocity-1.4.jar
    velocity/velocity-dep/1.4/velocity-dep-1.4.jar
    commons-lang/commons-lang/2.3/commons-lang-2.3.jar
    wsdl4j/wsdl4j/1.6.1/wsdl4j-1.6.1.jar
    xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar
    org/apache/ws/commons/schema/XmlSchema/1.2/XmlSchema-1.2.jar
    org/apache/neethi/neethi/2.0.2/neethi-2.0.2.jar
    org/mortbay/jetty/jetty-util/6.0.1/jetty-util-6.0.1.jar
    org/mortbay/jetty/jetty/6.0.1/jetty-6.0.1.jar
    org/codehaus/woodstox/wstx-asl/3.2.1/wstx-asl-3.2.1.jar
    javax/xml/jaxb-api/2.0/jaxb-api-2.0.jar
    com/sun/xml/bind/jaxb-impl/2.0.5/jaxb-impl-2.0.5.jar
    com/sun/xml/bind/jaxb-xjc/2.0/jaxb-xjc-2.0.jar


Note the last 3 jars... the version of cxf used by the demo in the latest
distribution (cxf 2.0.2) works with jaxb 2.0.5... a different version of jaxb than
the one currently in the camel distribution.


With these 49 jars, the samples could all be compiled and run without relying on
maven to download dependencies in the binary distribution.","ghennebu:1207117197:2008-04-02T14:19:57.899+0000:1207117197:2008-04-02T14:19:57.899+0000:We also need the following for camel-example-spring-xquery:

net/sf/saxon/saxon/8.7/saxon-8.7.jar
net/sf/saxon/saxon-dom/8.7/saxon-dom-8.7.jar

gmazza:1207164861:2008-04-03T03:34:21.617+0000:1207164861:2008-04-03T03:34:21.617+0000:Are you sure this is really necessary?  You might get 90% of what you're looking for simply by including Ant build files with commented-out declarations instructing the user precisely which versions of which products they would need to download, something like:

<property name=""cxf.libs"" value=""{place location of CXF 2.0.4/lib here}""/>

Such a design would be nicely self-documenting, letting Ant users know which versions are being used and which JARs are precisely needed for each sample (and later, their own work) without them needing to learn Maven.  The version information in the build.xml files can be easily updated along with updates to the POM's.

My main concerns about including these JARs:

1.)  Anyone not wishing to manually download all those JARs can use Maven anyway.  If the concern is (1) that some people don't want to manually download JARs, but (2) do not know how to use Maven, I don't think that has much validity because the skills needed to work with Maven is much less than the skills needed to work intelligently with Camel, ActiveMQ and CXF.  (i.e., saying ""I know how to develop web services and work with message queues but can't work with Maven"" is kind of like saying ""I know calculus but can't understand algebra.""  You don't need to worry about such people, because they almost don't exist.)

2.)  Camel can branch in endless directions (for example, future support for Glassfish Metro and Jersey and...), and can easily become overburdened with maintaining 75 or more JARs.  Camel is not like ActiveMQ or CXF, each of which have a more or less finite number of needed libs.  Rather, because of all the ways it can grow, Camel is similar to Apache Ant, so what Ant does might be instructive for Camel here:  they include a core set of JARs, but then precisely list the optional JARs[1] you must manually download if you want to run extended tasks.

3.)  It will be confusing and perplexing to the Ant user, because they will not know which of the 50 or so JARs are needed and which aren't when using Camel, also, which libs are needed when running particular functions (CXF or ActiveMQ, for example) with Camel.  They'll start including all 50 JARs when running *any* process with Camel, not knowing the subset they need.  Even if I personally were *not* to use Maven but just use Ant instead, I would still rather just have explicit declarations of which versions of which products I need to download in the Ant build files.  Creating a bulky download of 50-75 JARs will not tell me which JARs I need for my production work.

Regards,
Glen

[1] http://ant.apache.org/manual/install.html#librarydependencies
pledge:1207183458:2008-04-03T08:44:18.541+0000:1207183458:2008-04-03T08:44:18.541+0000:I would also say -1 to this.  The distribution would become unnecessarily large and confusing.
peterjones:1207201207:2008-04-03T13:40:07.098+0000:1207201207:2008-04-03T13:40:07.098+0000:
I agree, it's much better to set up the sample ant build files to accept something like a cxf.home, a hibernate.home or an activemq.home to pick up the majority of these jars, and just add a comment in the readmes to let the user know.
peterjones:1207304409:2008-04-04T18:20:09.623+0000:1207304409:2008-04-04T18:20:09.623+0000:For ant build.xml files to work, will require users to install dependencies.  e.g., For the cxf demo, update the readme to explain that to run that demo with ant, users must install cxf.  Then the camel-example-cxf build.xml file will pick up required jars from an environment variable or property set by the user. 
davsclaus:1215297310:2008-07-06T06:35:10.376+0000:1215297310:2008-07-06T06:35:10.376+0000:Closing 1.4 issues"
0,CAMEL-422,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-04-01 19:47:35+00:00,2008-05-12 12:45:34+00:00,problem shown in org.apache.camel.processor.ValidationWithErrorInHandleAndFinallyBlockTest,davsclaus:1210567534:2008-05-12T12:45:34.996+0000:1210567534:2008-05-12T12:45:34.996+0000:Closed all 1.3 tickets
0,CAMEL-421,Sub-task,Minor,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-01 11:50:39+00:00,2008-07-06 06:29:23+00:00,"The stream component documentation should be improved with:



java examples using snippet tags
how to use the stream:header","davsclaus:1213735539:2008-06-18T04:45:39.049+0000:1213735539:2008-06-18T04:45:39.049+0000:It also has a delay option
davsclaus:1213735967:2008-06-18T04:52:47.835+0000:1213735967:2008-06-18T04:52:47.835+0000:Need an option to set charset for text mode
davsclaus:1213737517:2008-06-18T05:18:37.793+0000:1213737517:2008-06-18T05:18:37.793+0000:Needs additional unit tests to cover the in part also and the existing unit test is not working correctly. It terminates and thus doesn't end junit test properly.
davsclaus:1213920727:2008-06-20T08:12:07.971+0000:1213920727:2008-06-20T08:12:07.971+0000:Okay improved the wiki and polished the code and added missing unit tests.

Marked the file and url stuff as @deprecated as such stuff is better supported by their respective components."
0,CAMEL-420,Bug,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-04-01 11:46:17+00:00,2008-05-12 07:46:39+00:00,"See this forum:
http://www.nabble.com/FTP-to-FILE-td16354813s22882.html


Problems:



Using ASCII you need to use convertBodyTo(String.class) to let it work out of the box Fixed
Using BINARY we need some Type Converters to let it consume files from a FTP Server and store it as a File Fixed
You have to set the filename using the header in the configuration otherwise the filename can be wrong Fixed","davsclaus:1207021673:2008-04-01T11:47:53.803+0000:1207021673:2008-04-01T11:47:53.803+0000:The binary transfer type could also be a problem.
davsclaus:1207083674:2008-04-02T05:01:14.416+0000:1207083674:2008-04-02T05:01:14.416+0000:The binary is failing out-of-the-box as we do not provide type converters. I got it working now with binary files.
davsclaus:1207083782:2008-04-02T05:03:02.737+0000:1207084327:2008-04-02T05:12:07.808+0000:Does camel FTP support using the remote FTP filename to use as filename when writing to a file if not configured to a fixed filename using the header propery

{code}
                String fileUrl = ""file:target/ftptest/?noop=true"";
                from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME, constant(""deleteme.jpg"")).
                        to(fileUrl, ""mock:result"");
{code}

Does it work with the setHeader? And use the remote filename from the FTP Server?

No it does not: camel tries to store the file using concatted filename as:
java.io.FileNotFoundException: target\ftptest\localhost:\tmp4\camel\logo.jpeg (The filename, directory name, or volume label syntax is incorrect) 

To culprint: FileProducer.createFileName(Message msg) is bogus. It does not handle remote filenames to well.

davsclaus:1207443766:2008-04-06T09:02:46.652+0000:1207443766:2008-04-06T09:02:46.652+0000:Comitted missing file converters to trunk so we can consume binary files (download binary files)
davsclaus:1207459993:2008-04-06T13:33:13.849+0000:1207459993:2008-04-06T13:33:13.849+0000:We are changing a default option on the FTPConsumer in Camel 1.4.

Camel 1.3
setNames=false

Camel 1.4
setNames=true


The issue is tracked in CAMEL-420.


The issue is that Camel in v1.3 or below does not default to use the filenames from the downloaded files from the FTP Server. So you as the end user have to explicity set a filename if you want to eg. store the downaloded file directly to a local file etc using the File component.

An example (Camel 1.3)
{code}
String fileUrl = ""file:target/ftptest/?append=false&noop=true"";
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false"";

from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME,
constant(""deleteme.txt"")).
convertBodyTo(String.class).to(fileUrl);
{code}
In the example above we have to set an filename using the setHeader option with the special key FileComponent.HEADER_FILE_NAME

If we just want to use the filename from the FTP Server we have to do this in Camel 1.3. Set the setNames option to true. So the ftpUrl is:
{code}
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false&consume
r.setNames=true"";
{code}
In Camel 1.4 the default value of consumer.setNames is true as opposed to false in Camel 1.3

So in Camel 1.4 it works out of the box that Camel will use the filename from the FTP Server if you have not explicity set a new filename using the setHeader(FileComponent.HEADER_FILE_NAME, ""mynewfilename.txt"")

So the Camel 1.4 example is:
{code}
String fileUrl = ""file:target/ftptest/?append=false&noop=true"";
String ftpUrl =
""ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false"";

from(ftpUrl).convertBodyTo(String.class).to(fileUrl);
{code}
davsclaus:1207527172:2008-04-07T08:12:52.947+0000:1207527172:2008-04-07T08:12:52.947+0000:Fix failing unit test on Bamboo
davsclaus:1207981971:2008-04-12T14:32:51.261+0000:1207981971:2008-04-12T14:32:51.261+0000:Most of the major problems is fixed now.

Unit test for the SFTP part would be nice but it requires some mocking as we do not have a SFTP java server at the moment."
0,CAMEL-419,New Feature,Major,None,None,"
None
",Closed,Fixed,1.4.0,Unassigned,Gert Vanthienen,0,0,2008-04-01 10:46:21+00:00,2008-07-23 03:57:31+00:00,Scala appears to be a promising language for building DSLs and it integrates very well with Java.,"gertvanthienen:1207018375:2008-04-01T10:52:55.066+0000:1207018375:2008-04-01T10:52:55.066+0000:Initial contribution, it just does basic routing/filter/pipeline/multicast for now.

There are two main DSL syntax variants:
- a very short one that allows you to quickly specify from().to()
- a more elaborate one, that uses blocks and should be able to support all the other Java DSL features more easily
gertvanthienen:1207018661:2008-04-01T10:57:41.634+0000:1207018661:2008-04-01T10:57:41.634+0000:How about adding a page to the wiki to keep track of the DSL development progress and documenting it as we move along?  I guess we could use JIRA sub-tasks as well, but the list might grow very long and it would probably just be cluttering JIRA and the mailing list. 
gertvanthienen:1207029923:2008-04-01T14:05:23.751+0000:1207029923:2008-04-01T14:05:23.751+0000:Added a basic CBR implementation and test to this patch (which contains everything, so it supersedes the tarball)
jstrachan:1207296886:2008-04-04T16:14:46.657+0000:1207296886:2008-04-04T16:14:46.657+0000:Patch applied with *huge* thanks - this is awesome! :) BTW I applied the diff which is newer right?
gertvanthienen:1207301406:2008-04-04T17:30:06.308+0000:1207301406:2008-04-04T17:30:06.308+0000:James,

Yes, the diff is newer than the tarball.  How do you think we should track progress on the new DSL, using the wiki or rather do it all in JIRA (see earlier comments)?

Gert
hadrian:1207301953:2008-04-04T17:39:13.954+0000:1207301953:2008-04-04T17:39:13.954+0000:What about both?  I think we need jira, as this is the best way to ensure we don't drop the ball.  A wiki page would be a better way to add coordinate the work and could link to jiras.  My $0.02.
davsclaus:1216756651:2008-07-23T03:57:31.403+0000:1216756651:2008-07-23T03:57:31.403+0000:Closing 1.4 issues."
0,CAMEL-418,New Feature,Major,None,None,"
None
",Closed,Won't Fix,Future,Unassigned,James Strachan,0,0,2008-04-01 05:42:31+00:00,2010-02-07 09:54:14+00:00,"Folks have issues installing Graphviz, it'd be nice to see if we can do better using Eclipse / Zest / GEF...


See


http://www.eclipse.org/mylyn/zest.php
http://wiki.eclipse.org/index.php/Mylar_Zest_Visualization","janstey:1207021178:2008-04-01T11:39:38.573+0000:1207021178:2008-04-01T11:39:38.573+0000:Thread that spawned this 

http://www.nabble.com/Remote-images-not-resolving-in-camel-example-docs-td16373419s22882.html
jstrachan:1216712333:2008-07-22T15:38:53.536+0000:1216712333:2008-07-22T15:38:53.536+0000:This looks an interesting project; I've not been able to build it yet mind you, but it does look really promising! :) 

http://www.nabble.com/an-camel-route-view-td18572319s22882.html 
jstrachan:1216872763:2008-07-24T12:12:43.055+0000:1216872763:2008-07-24T12:12:43.055+0000:just moved to 1.5.0 in hope it happens that fast :) we can always push it back if it doesn't get done in time

davsclaus:1220498650:2008-09-04T11:24:10.520+0000:1220498650:2008-09-04T11:24:10.520+0000:Moving to 2.0
davsclaus:1253486106:2009-09-21T06:35:06.481+0000:1253486106:2009-09-21T06:35:06.481+0000:Lets keep 3rd part to create visual tooling and stuff for Camel. We should focus on the core."
0,CAMEL-417,Improvement,Trivial,1.3.0,1.4.0,"
None
",Closed,Duplicate,1.4.0,Unassigned,Claus Ibsen,0,0,2008-04-01 04:37:11+00:00,2008-07-17 12:01:14+00:00,"<groupId>com.jcraft</groupId> 
  <artifactId>jsch</artifactId> 
  <version>0.1.31</version> 




jsch has released 0.1.37. The current version we have is getting older. Seems like they have improved quite a bit on the SFTP part so its relevant for Camel.


Can be a problem to find a newer version on a maven repo",davsclaus:1216265062:2008-07-17T11:24:22.834+0000:1216265062:2008-07-17T11:24:22.834+0000:We have fixed this by another ticket number
0,CAMEL-416,Improvement,Trivial,None,None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-03-30 15:32:05+00:00,2008-05-12 07:46:39+00:00,"Upgraded dependencies



Spring from 2.5.1 to 2.5.3
OpenJPA 0.9.6-incubator to 1.0.2



Apache Felix has released v1.2.1 and v1.4.0 - we are running v1.2.0","davsclaus:1206868780:2008-03-30T17:19:40.279+0000:1206868780:2008-03-30T17:19:40.279+0000:There seems to be checksum errors on the repos

[WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'db09de3099b694e88076052aaf428d5252
Downloading: http://repo1.maven.org/maven2//org/springframework/spring-test/2.5.2/spring-test-2.5.2.pom
davsclaus:1207443939:2008-04-06T09:05:39.944+0000:1207443939:2008-04-06T09:05:39.944+0000:Or Spring 2.5.3 when its about to be released.
davsclaus:1207564040:2008-04-07T18:27:20.069+0000:1207564040:2008-04-07T18:27:20.069+0000:Spring upgraded to 2.5.3
davsclaus:1207564060:2008-04-07T18:27:40.213+0000:1207564060:2008-04-07T18:27:40.213+0000:Open JPA fails to upgraded to 1.0.2

INFO] Executing tasks
openjpa-1.0.0-r420667:568756 fatal user error> org.apache.openjpa.util.MetaDataException: MetaDataFactory could not be configured (conf.newMetaDataFactoryInstance() returned null). This might mean that no configuration properties were found. Ensure that you have a META-INF/persistence.xml file, tha
 it is available in your classpath, or that the properties file you are using for configuration is available. If you are using Ant, please see the <properties> or <propertiesFile> attributes of the task's nested <config> element. This can also occur if your OpenJPA distribution jars are corrupt, or
if your security policy is overly strict.
       at org.apache.openjpa.meta.MetaDataRepository.initializeMetaDataFactory(MetaDataRepository.java:1520)
       at org.apache.openjpa.meta.MetaDataRepository.endConfiguration(MetaDataRepository.java:1513)
       at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:467)
davsclaus:1207565472:2008-04-07T18:51:12.804+0000:1207565472:2008-04-07T18:51:12.804+0000:Upgraded to Spring 2.5.3"
0,CAMEL-415,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Claus Ibsen,0,0,2008-03-30 14:23:43+00:00,2008-05-12 07:46:39+00:00,"public MulticastType multicast(AggregationStrategy aggregationStrategy, boolean parallelProcessing) {
        MulticastType answer = new MulticastType();
        addOutput(answer);
        answer.setAggregationStrategy(aggregationStrategy);
        answer.setParallelProcessing(true);
        return answer;
    }




The parameter parallelProcessing is never used. setParallelProcessing is always true.","davsclaus:1206858253:2008-03-30T14:24:13.407+0000:1206858270:2008-03-30T14:24:30.509+0000:Fixed by
{code}
answer.setParallelProcessing(parallelProcessing);
{code}"
0,CAMEL-414,Test,Minor,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-03-29 17:34:35+00:00,2008-03-31 21:33:40+00:00,I forgot to add in a test for this when I updated the MockEndpoint recently...,"davsclaus:1206841933:2008-03-30T09:52:13.944+0000:1206841933:2008-03-30T09:52:13.944+0000:Jon the patch has not been granted ASF rights. Could you reattach the patch with these rights so I can commit it to the trunk?
davsclaus:1206842176:2008-03-30T09:56:16.115+0000:1206842176:2008-03-30T09:56:16.115+0000:Jon if you fancy we have a better method on the ContextTextSupport to get hold of a MockEndpoint

{code}
resolveMandatoryEndpoint(""mock:result"", MockEndpoint.class)
{code}

should be replaced with
{code}
getMockEndpoint(""mock:result"");
{code}
janstey:1206865550:2008-03-30T16:25:50.455+0000:1206865550:2008-03-30T16:25:50.455+0000:Oh yeah, getMockEndpoint is much nicer :)

Here is the updated patch. Thanks!
davsclaus:1206867476:2008-03-30T16:57:56.116+0000:1206867476:2008-03-30T16:57:56.116+0000:Applied patch with thanks to Jonathan"
0,CAMEL-413,New Feature,Major,"1.2.0, 1.3.0",None,"
None
",Closed,Fixed,1.3.0,Unassigned,Kevin Ross,0,0,2008-03-29 16:31:12+00:00,2008-05-12 12:45:34+00:00,"For ease of unit testing, I separate distinct routes under different camel contexts.  Unit testing is then quite easy, but DOT generation is really not a good representation when seeking to view the system as a whole.


This is a patch to camel-spring (Main.java), and the camel-maven-plugin.  It allows the optional pom.xml configuration parameter (as well as a new Main.java parameter) to allow routes to be aggregated for the purposes of DOT generation only.  Aggregation should have no impact on the runtime, and routes should not be started again.","jstrachan:1206945700:2008-03-31T14:41:40.432+0000:1206945700:2008-03-31T14:41:40.432+0000:Any chance you could re-cut the patches without reformatting all the code? Its really hard to see what you actually changed
kevin.ross@metova.com:1206946010:2008-03-31T14:46:50.766+0000:1206946059:2008-03-31T14:47:39.406+0000:Sorry, we have auto-format on save here, somewhat mandatory so we don't run into this exact situation (amongst our own team).  I'll take a look and try to generate another patch.

kevin.ross@metova.com:1206946987:2008-03-31T15:03:07.341+0000:1206946987:2008-03-31T15:03:07.341+0000:Ok, I believe the new patches should be good.  I replaced from the repo then copied over the changes and generated a new patch.
jstrachan:1206998337:2008-04-01T05:18:57.220+0000:1206998337:2008-04-01T05:18:57.220+0000:Patch applied, thanks!
davsclaus:1210567534:2008-05-12T12:45:34.959+0000:1210567534:2008-05-12T12:45:34.959+0000:Closed all 1.3 tickets"
0,CAMEL-412,Bug,Major,"1.2.0, 1.3.0",None,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Kevin Ross,0,0,2008-03-29 15:04:28+00:00,2008-07-06 06:30:55+00:00,"Though the intent seemed to be there, the DotMojo does not skip conversion of the file if there is no value for <executable/> in the pom.xml.  The parameter was defaulted.


#. removed the default.
#. added log message.","jstrachan:1206945343:2008-03-31T14:35:43.577+0000:1206945343:2008-03-31T14:35:43.577+0000:I've applied half of your patch - that if the executable property is empty or null then the generation is skipped.

BTW its maybe an idea not to reformat the code before sending patches in the future, its kinda hard to see what you really did :)

I'm not sure if we should remove the default executable name for DOT. Its up to users to use the plugin or not - you can also use [maven profiles|http://maven.apache.org/guides/introduction/introduction-to-profiles.html] to only enable the plugin if its activated and so forth. So I like the idea of the plugin invoking ""dot"" on the path by default (as thats gonna work on most OSes).
 
Maybe to disable the use of dot we can just use another property? I've added a useDot property so folks can disable the running of dot - would that do the trick?
davsclaus:1208128316:2008-04-14T07:11:56.624+0000:1208128316:2008-04-14T07:11:56.624+0000:This ticket is a new solution to avoid using dot.exe (GraphicViz)
davsclaus:1208341025:2008-04-16T18:17:05.951+0000:1208341025:2008-04-16T18:17:05.951+0000:Kevin have you seen the option to setup the executable at http://activemq.apache.org/camel/camel-dot-maven-goal.html
where you can configure the DOT.exe to use (on windows).

And if patch is meant to be include then please provide a patch that doesn't change the current code style in Camel.
kevin.ross@metova.com:1208345395:2008-04-16T19:29:55.612+0000:1208345395:2008-04-16T19:29:55.612+0000:Claus, I'm aware of how to set the executable, I mention this in the description of the issue.  I don't want it to execute any dot program, I just want the dot file to be generated so that I can view in Graphviz for Mac.  It will automatically render for me when I choose to view it.

I think James has the right idea.  If the doc page you referenced were updated to reflect the additional that James made, this could be resolved without further work or application of the patch.
davsclaus:1208379549:2008-04-17T04:59:09.677+0000:1208379549:2008-04-17T04:59:09.677+0000:James / Kevin

How do you actually configued the new option useDot to eg set it to false?
I am not a super maven wizard and have tried with

mvn camel:dot
Is what I used to start it

-DuseDot=false
<useDot>false</useDot> in the pom.xml in the configuration tag.

But neither fails.

Also in the source code
runCamelEmbedded()
it has hardcoded useDot to true

            mojo.setDotEnabled(true);

Shouldn't it honor the useDot option instead so it should be
            mojo.setDotEnabled(useDot);


jstrachan:1210228951:2008-05-08T14:42:31.262+0000:1210228951:2008-05-08T14:42:31.262+0000:To show this in use I've disabled the dot invocation in examples/camel-example-spring-xquery

{code}
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <configuration>
          <useDot>false</useDot>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
{code}


davsclaus:1210281209:2008-05-09T05:13:29.234+0000:1210281209:2008-05-09T05:13:29.234+0000:I updated the wiki with James example
davsclaus:1215297055:2008-07-06T06:30:55.957+0000:1215297055:2008-07-06T06:30:55.957+0000:Closing 1.4 issues"
0,CAMEL-411,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonathan Anstey,Jonathan Anstey,0,0,2008-03-28 20:34:33+00:00,2008-05-12 12:45:34+00:00,No Desc,"janstey:1206780444:2008-03-29T16:47:24.565+0000:1206780444:2008-03-29T16:47:24.565+0000:Add routing slip test case to camel-spring. Also added snippet for the upcoming wiki doc.
davsclaus:1206842821:2008-03-30T10:07:01.482+0000:1206842821:2008-03-30T10:07:01.482+0000:Applied the patch with thanks
davsclaus:1210567534:2008-05-12T12:45:34.942+0000:1210567534:2008-05-12T12:45:34.942+0000:Closed all 1.3 tickets"
0,CAMEL-410,Bug,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Dan Dudley,0,0,2008-03-28 19:51:00+00:00,2008-07-06 06:30:55+00:00,"When you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception. 


Now say the bean you call as your end point throws a NullPointer, wouldn't you think the NullPointer policy would handle that exception? 


Well I'm seeing sometimes it does and sometimes it doesn't due to the map not keeping the exceptions in any particular order.  Is there anyway this could be changed to a LinkedHashMap or a List?


Issue with class: org.apache.camel.processor.ErrorHandlerSupport","davsclaus:1206842920:2008-03-30T10:08:40.317+0000:1206842920:2008-03-30T10:08:40.317+0000:Dan could you re attach you patch with the license to ASF granted.
We can not apply patches that we do not hold rights for.

When you attach a file to an existing ticket there is a tick box to grant this license.
davsclaus:1207047599:2008-04-01T18:59:59.181+0000:1207047599:2008-04-01T18:59:59.181+0000:Dan do you have a snippet of your camel context cofiguration where you have the exceÃ¥tions configured.

I would like to create a unit test that tests this problem.

Looking at the ErrorHandlerSupport code it would use the first found Exception that isInstanceof so it could potentially find a less specific type exception that was not the best suited.
ddudley:1207120887:2008-04-02T15:21:27.476+0000:1207120887:2008-04-02T15:21:27.476+0000:That's the problem we are experiencing.  The camel context configuration only encounters this problem sometimes.  I would be more than happy to make a unit test to prove that this is a problem, but it seems to be...impossible since the IdentityHashMap is ignoring the hashcode method and is going directly to a native method to resolve the hashcode.

If you discover a way to test this and get it consistently to fail I would like to see how you did it.
ddudley:1207121548:2008-04-02T15:32:28.231+0000:1207121548:2008-04-02T15:32:28.231+0000:Here is the unit test I was working on.  It was consistently failing for me, but you may see different results. :0(
davsclaus:1207129721:2008-04-02T17:48:41.026+0000:1207129721:2008-04-02T17:48:41.026+0000:Thanks Dan for the unit test.

I was also looking for a camel context configuration eg. with the fluent builder (DSL) that demonstrates the use-case with configuration using several exceptions and an exchange between endpoints etc.

Dan if you have relevant parts of the camel context configuration in question that only encounters the problem sometimes, then please attach this material also.
davsclaus:1207168569:2008-04-03T04:36:09.895+0000:1207168569:2008-04-03T04:36:09.895+0000:Dan I can not get the unit test to fail on my system.

However I do think we need an example using the DSL configuration to see how the ExecptionType configures the DeadLetterChannel that extends the ErrorHandlerSupport.
So this is why I am calling for your camel route configuration that only encounters this problem sometimes.
ddudley:1207205288:2008-04-03T14:48:08.092+0000:1207205288:2008-04-03T14:48:08.092+0000:This is our base RouteBuilder that sets up the general error handling.
davsclaus:1207217349:2008-04-03T18:09:09.941+0000:1207217349:2008-04-03T18:09:09.941+0000:Dan, thanks for the new attachment. I can reproduce the bug here. Camel pick ups java.lang.Exception at first even though there is a exact match such as NPE.
davsclaus:1207223052:2008-04-03T19:44:12.751+0000:1207223052:2008-04-03T19:44:12.751+0000:I got something better now that finds the best suited exception type configured for the given thrown exception.

The code need a little polishing and some more testing.
davsclaus:1207266543:2008-04-04T07:49:03.418+0000:1207266543:2008-04-04T07:49:03.418+0000:Target for 1.3 release
davsclaus:1207266571:2008-04-04T07:49:31.852+0000:1207266571:2008-04-04T07:49:31.852+0000:
I am introducing a strategy to resolve which is the best exception type to handle the thrown exception in questions. The default strategy will be to use the exception that is the closets match to the thrown exception.

eg. java.net.ConnectionException will match java.io.IOException
eg. CamelExchangeException will match CamelException
eg. MyBusinessException will match MyBaseBusinessException
eg. NullPointerException will match Exception

Well you might get the picture.

A different strategy could be to use the ordering of how the exceptions was configured. Use the fist match that can handle it etc (top-down).
davsclaus:1207347968:2008-04-05T06:26:08.395+0000:1207347968:2008-04-05T06:26:08.395+0000:Moving it to 1.4 release.

1.3 is about to be released really soon.
davsclaus:1207365807:2008-04-05T11:23:27.941+0000:1207365807:2008-04-05T11:23:27.941+0000:Fixed in trunk now wtih wiki documentation at Error Handler and Dead Letter Channel.

See also the unit tests for details etc.
davsclaus:1215297055:2008-07-06T06:30:55.040+0000:1215297055:2008-07-06T06:30:55.040+0000:Closing 1.4 issues"
0,CAMEL-409,Sub-task,Major,1.3.0,None,"
None
",Closed,Fixed,1.4.0,Gary Tully,James Strachan,0,1,2008-03-28 19:01:42+00:00,2008-07-11 04:21:45+00:00,No Desc,"gtully:1207791882:2008-04-10T09:44:42.876+0000:1207791882:2008-04-10T09:44:42.876+0000:jetty HttpsRouteTest - uses ssl attributes on JettyHttpComponent and system property for jsse client trust store configuration.
The keystore, localhost.ks is binary so it is not part of this patch.
gtully:1207792260:2008-04-10T09:51:00.570+0000:1207792260:2008-04-10T09:51:00.570+0000:components\camel-jetty\src\test\resources\jsse\localhost.ks a binary keystore file.

the contents of this file were created with:
keytool -genkey -alias server -keystore localhost.ks
using passwords: changeit and name components with value: localhost


The cert is used by the https endpoint and made available to the clients via their truststore so that the server cert can be validated. The cert is self signed. This is a dummy cert that is useful only for testing.
The use of localhost as the OU and CN allows the cert to pass spoofing validation as implemented by the jdk jsse implementation.
gtully:1207793492:2008-04-10T10:11:32.677+0000:1207793492:2008-04-10T10:11:32.677+0000:this patch superseeds the camel-409.patch file. 
It adds an additional negative test for camel http component calling https endpoint and expects an exception.
davsclaus:1207874383:2008-04-11T08:39:43.012+0000:1207874383:2008-04-11T08:39:43.012+0000:Gary thanks a lot for all the hard work creating such a patch. We will definitely add it to Camel.
mickysantomax:1207875622:2008-04-11T09:00:22.042+0000:1207875622:2008-04-11T09:00:22.042+0000:Gary, I think is a good solution to set getter and setter methods for SslSocketConnector in JettyHttpComponent so that one can set (for example) the keystore path or anything else.

If you want to consider this suggestion I have attached file of jetty component with this patch implemented
gtully:1207882643:2008-04-11T10:57:23.010+0000:1207882643:2008-04-11T10:57:23.010+0000:Micky, yea, that is a far better idea than replicating all of the Ssl attributes on JettyHttpComponent.
One thing to note is that in order for the jsse system properties to be picked up by the SssSocketConnector, a call to the setter methods is required, hense the default values of  """" for the key and keystore passwords in the JettyHttpComponent.
Without that we get the ""no password"" error. 
Best may be to lazily initialize the SslSocketConnector and call the setters if a user has not already provided an instance.
davsclaus:1207969198:2008-04-12T10:59:58.356+0000:1207969198:2008-04-12T10:59:58.356+0000:Gary could you provide a final patch with your and Mickys latest suggesting included.

I will then be able to commit the patch. It is a great addition to Camel.
gtully:1208163847:2008-04-14T17:04:07.964+0000:1208163847:2008-04-14T17:04:07.964+0000:adds sslsocketConnector accessor along with simple default sslPassword and sslKeyPassword that will solicit the default jetty behaviour of looking for jetty system properties or prompting the user.
If your config needs are simple, the accessors will work, if they are more complex, the ability to set the sslsocketconnector should be used. added another test that uses the sslsocketconnector accesor
davsclaus:1208172573:2008-04-14T19:29:33.587+0000:1208172573:2008-04-14T19:29:33.587+0000:Comitted to trunk

CAMEL-409 Added unit tests for Jetty doing https. With huge thanks to Gary Tully and Micky Santomax for the patches"
0,CAMEL-408,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonathan Anstey,James Strachan,0,0,2008-03-28 12:49:04+00:00,2008-05-12 12:45:34+00:00,"Fancy improving the docs a little for this page...


http://cwiki.apache.org/CAMEL/routing-slip.html


many thanks!","janstey:1206781702:2008-03-29T17:08:22.709+0000:1206781702:2008-03-29T17:08:22.709+0000:Updated the wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/Routing+Slip
davsclaus:1206854238:2008-03-30T13:17:18.744+0000:1206854238:2008-03-30T13:17:18.744+0000:We should state on the wiki doc that this is only avail from v1.4 onwards.
janstey:1206862299:2008-03-30T15:31:39.761+0000:1206862299:2008-03-30T15:31:39.761+0000:Good point. I've added an entry to this effect.
davsclaus:1206993672:2008-04-01T04:01:12.609+0000:1206993672:2008-04-01T04:01:12.609+0000:It did make it in the 1.3 after all. So I have changed the wiki documents.
davsclaus:1210567534:2008-05-12T12:45:34.921+0000:1210567534:2008-05-12T12:45:34.921+0000:Closed all 1.3 tickets"
0,CAMEL-407,Bug,Critical,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Micky Santomax,0,0,2008-03-28 10:56:00+00:00,2008-05-12 12:45:34+00:00,"I've defined an http endpoint by this code :
        this.from(""jetty:https://localhost:8193/SSLTest/"")
              .process(new Processor());


When I install my application in Tomcat 6.0.13 it throws this exception :


2008-03-18 20:05:42.998::WARN:  EXCEPTION
java.security.UnrecoverableKeyException: Password must not be null
        at sun.security.provider.JavaKeyStore.engineGetKey(JavaKeyStore.java:107)
        at sun.security.provider.JavaKeyStore$JKS.engineGetKey(JavaKeyStore.java:38)
        at java.security.KeyStore.getKey(KeyStore.java:763)
        at com.sun.net.ssl.internal.ssl.SunX509KeyManagerImpl.<init>(SunX509KeyManagerImpl.java:113)
        at com.sun.net.ssl.internal.ssl.KeyManagerFactoryImpl$SunX509.engineInit(KeyManagerFactoryImpl.java:48)
        at javax.net.ssl.KeyManagerFactory.init(KeyManagerFactory.java:239)
        at org.mortbay.jetty.security.SslSocketConnector.createFactory(SslSocketConnector.java:202)
        at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:407)
        at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)
        at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)
        at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)
        at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)
        at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)
        at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)
        at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)
        at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
        at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)
        at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)
        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:619)
2008-03-18 20:05:42.012::WARN:  failed SslSocketConnector@0.0.0.0:8193
java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null
        at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:446)
        at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)
        at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)
        at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)
        at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)
        at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)
        at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)
        at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)
        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)
        at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)
        at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)
        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)
        at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)
        at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)
        at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)
        at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)
        at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)
        at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)
        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)
        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)
        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
        at java.lang.Thread.run(Thread.java:619)
ERROR [it.unibas.springfreesbee.ContextStartup - contextInitialized] - org.apache.camel.RuntimeCamelException: java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null


I have follow all steps of jetty ssl configuration, but the error is the same with both keytool and openssl applications.


I think that problems are in routing because if I set only 
     this.from(""jetty:https://localhost:8193/SSLTest/""); 
There aren't installation problems in Tomcat, when I access to the endpoint by browser it ask the acceptance of certificate. In this case there is another exception at runtime :


2008-03-26 18:56:14.933::WARN:  handle failed
java.lang.NullPointerException
        at org.mortbay.thread.BoundedThreadPool.isLowOnThreads(BoundedThreadPool.java:216)
        at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:218)
        at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:620)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)","jstrachan:1206702071:2008-03-28T19:01:11.677+0000:1206702071:2008-03-28T19:01:11.677+0000:I think this is now resolved in trunk - I'll spin up a separate JIRA for a test case once we've figured out how to get the certs & stuff working with maven/junit
mickysantomax:1207105291:2008-04-02T11:01:31.896+0000:1207105291:2008-04-02T11:01:31.896+0000:I run the HttpRouteTest with https protocol, but receive the following error : 

    [junit] DEBUG [temp.TestHttpRoute - tearDown] - tearDown test: testHelloEndpoint
    [junit] ------------- ---------------- ---------------
    [junit] ------------- Standard Error -----------------
    [junit] 2008-04-02 12:50:52.776::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
    [junit] 2008-04-02 12:50:52.881::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.169::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.618::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] 2008-04-02 12:50:52.733::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.738::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.747::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] ------------- ---------------- ---------------
    [junit]
    [junit] Testcase: testEndpoint took 1,136 sec
    [junit]     Caused an ERROR
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86)
    [junit]     at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27)
    [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623)
    [junit]     at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)
    [junit]     at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)
    [junit]     at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)
    [junit]     at java.io.FilterOutputStream.flush(FilterOutputStream.java:123)
    [junit]     at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
    [junit]     at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59)
    [junit]     at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147)
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Testcase: testHelloEndpoint took 0,222 sec
    [junit]     Caused an ERROR
    [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405)
    [junit]     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    [junit]     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977)
    [junit]     at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
    [junit]     at java.net.URL.openStream(URL.java:1009)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Test it.unibas.icar.temp.TestHttpRoute FAILED
mickysantomax:1207105445:2008-04-02T11:04:05.550+0000:1207105445:2008-04-02T11:04:05.550+0000:I run personalized HttpRouteTest with https protocol but I receive the following error :


    [junit] DEBUG [temp.TestHttpsRoute - tearDown] - tearDown test: testHelloEndpoint
    [junit] ------------- ---------------- ---------------
    [junit] ------------- Standard Error -----------------
    [junit] 2008-04-02 12:50:52.776::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
    [junit] 2008-04-02 12:50:52.881::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.169::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.618::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] 2008-04-02 12:50:52.733::INFO:  jetty-6.1.8
    [junit] 2008-04-02 12:50:52.738::INFO:  Started SslSocketConnector@0.0.0.0:18196
    [junit] 2008-04-02 12:50:52.747::WARN:  EXCEPTION
    [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615)
    [junit]     at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)
    [junit] ------------- ---------------- ---------------
    [junit]
    [junit] Testcase: testEndpoint took 1,136 sec
    [junit]     Caused an ERROR
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86)
    [junit]     at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225)
    [junit]     at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27)
    [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623)
    [junit]     at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)
    [junit]     at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)
    [junit]     at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)
    [junit]     at java.io.FilterOutputStream.flush(FilterOutputStream.java:123)
    [junit]     at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110)
    [junit]     at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
    [junit]     at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
    [junit]     at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
    [junit]     at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59)
    [junit]     at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147)
    [junit]     at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Testcase: testHelloEndpoint took 0,222 sec
    [junit]     Caused an ERROR
    [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    [junit]     at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
    [junit]     at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107)
    [junit]     at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405)
    [junit]     at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166)
    [junit]     at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977)
    [junit]     at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234)
    [junit]     at java.net.URL.openStream(URL.java:1009)
    [junit]     at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47)
    [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285)
    [junit]     at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191)
    [junit]     at sun.security.validator.Validator.validate(Validator.java:218)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
    [junit]     at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
    [junit]     at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954)
    [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    [junit]     at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
    [junit]     at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
    [junit]     at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280)
    [junit]
    [junit] Test temp.TestHttpsRoute FAILED
gtully:1207109513:2008-04-02T12:11:53.136+0000:1207109513:2008-04-02T12:11:53.136+0000:for: Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
see a good explination @ http://blogs.sun.com/andreas/entry/no_more_unable_to_find

Essentially the problem is that the cert is self signed or does not use a hostname as the CN component. The blog post and referenced code should help.

For my test I used a a jetty client (which uses apache commons httpclient) and added a protocol handler that will not validate the servers cert. Configuring the default jdk httpClient is probably a little different.

return new RouteBuilder() {
            public void configure() {
                
                Protocol easyhttps = new Protocol(""https"", new EasySSLProtocolSocketFactory(), 8080);
                Protocol.registerProtocol(""https"", easyhttps);
                
                
                from(""jetty:https://localhost:8080/test"").to(""mock:a"");

                Processor proc = new Processor() {
                    public void process(Exchange exchange) throws Exception {
                        exchange.getOut(true).setBody(""<b>Hello World</b>"");
                    }
                };
                from(""jetty:https://localhost:8080/hello"").process(proc);
            }
        };

where EasySSLProtocolSocketFactory is @ http://svn.apache.org/viewvc/httpcomponents/oac.hc3x/trunk/src/contrib/org/apache/commons/httpclient/contrib/ssl/EasySSLProtocolSocketFactory.java?view=markup

more doco for httpClient @ http://hc.apache.org/httpclient-3.x/sslguide.html

This is all to work around the use of a self-signed cert which is a little bogus.

The alternative is to use a real valid signed cert from one of the approved authorities and add it to the keystore.

mickysantomax:1207132847:2008-04-02T18:40:47.552+0000:1207132847:2008-04-02T18:40:47.552+0000:James, I think is a good solution to set getter and setter methods for SslSocketConnector in JettyHttpComponent with which one can set (for example) the keystore path or anything else. 

If you want to consider this suggestion I have attached file with this patch
gtully:1207792704:2008-04-10T09:58:24.829+0000:1207792704:2008-04-10T09:58:24.829+0000:I have uploaded the HttpsRouteTest to https://issues.apache.org/activemq/browse/CAMEL-409?focusedCommentId=42164#action_42164

I added an exception test that verifies a SocketException on access to the https endpoint via http which works as expected. I don't get a status 200 ok. This is from the jdk URLConnection, not from a camel consumer however. I need to try the camel consumer.
gtully:1207793767:2008-04-10T10:16:07.250+0000:1207793767:2008-04-10T10:16:07.250+0000:just added another test and resubmitted the patch to CAMEL-409. The camel consumer throws an exception as expected when a http endpoint is invoked from http.
davsclaus:1210567534:2008-05-12T12:45:34.858+0000:1210567534:2008-05-12T12:45:34.858+0000:Closed all 1.3 tickets"
0,CAMEL-376,Sub-task,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Claus Ibsen,0,0,2008-03-08 13:44:18+00:00,2008-05-12 07:48:07+00:00,"The TODO in the source code to let MinaConsumer give access to Mina IoSession in the MinaExchange holder object.


See the new unit test MinaExchangeTest for sample how you now can get access to various Mina information from its session.",
0,CAMEL-375,Improvement,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Claus Ibsen,0,0,2008-03-08 13:41:52+00:00,2008-05-12 07:48:07+00:00,This ticket holds reference to the various camel-mina improvments and bugfixes lately.,"davsclaus:1204958592:2008-03-08T14:43:12.277+0000:1204958592:2008-03-08T14:43:12.277+0000:Many of the issues has been resolved. I will attach a new patch will all the fixes.
davsclaus:1204970475:2008-03-08T18:01:15.022+0000:1204970475:2008-03-08T18:01:15.022+0000:Patch fixing
- subtask 1
- subtask 2
- CAMEL-364
davsclaus:1205029149:2008-03-09T10:19:09.444+0000:1205029149:2008-03-09T10:19:09.444+0000:Willem, you are doing a fine job merging and submitting the patch - this is good team work.
davsclaus:1205039420:2008-03-09T13:10:20.550+0000:1205039420:2008-03-09T13:10:20.550+0000:UDP bug we might as well get fixed also"
0,CAMEL-374,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,David White,0,0,2008-03-07 21:31:47+00:00,2008-05-12 12:45:33+00:00,"When writing out an Http response, the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it's there.  This allows requests made via the http component to be output with the correct status code info.  If also allows processors in the flow to control the status code by setting the header themselves.","njiang:1205956564:2008-03-20T03:56:04.583+0000:1205956564:2008-03-20T03:56:04.583+0000:Hi David,
Please grand your patch with Apache license, or I can't apply this patch.
You can use the Manage Attachments link to do that .

Thanks,
Willem
njiang:1206301862:2008-03-24T03:51:02.772+0000:1206301862:2008-03-24T03:51:02.772+0000:Patch applied with thanks to David
davsclaus:1210567533:2008-05-12T12:45:33.900+0000:1210567533:2008-05-12T12:45:33.900+0000:Closed all 1.3 tickets"
0,CAMEL-373,Bug,Major,1.3.0,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-03-07 15:09:32+00:00,2008-05-12 12:45:33+00:00,"Give something like this:


[                          main] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-xxxxx/63907-1204902526306/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:124)","hadrian:1204874082:2008-03-07T15:14:42.450+0000:1204874082:2008-03-07T15:14:42.450+0000:Patch applied, needs documentation.
hadrian:1204894218:2008-03-07T20:50:18.864+0000:1204894218:2008-03-07T20:50:18.864+0000:Patch and documentation done
davsclaus:1210567533:2008-05-12T12:45:33.881+0000:1210567533:2008-05-12T12:45:33.881+0000:Closed all 1.3 tickets"
0,CAMEL-372,Improvement,Major,None,None,"
None
",Closed,Won't Fix,2.0-M2,Willem Jiang,James Strachan,0,1,2008-03-07 13:28:17+00:00,2009-11-21 11:57:54+00:00,Its such a common use case - using camel-jms should be transactional out of the box unless the user explicitly disables transactions. So defaulting the transactionManager property seems to make sense,"njiang:1229893695:2008-12-22T05:08:15.312+0000:1229893695:2008-12-22T05:08:15.312+0000:Here is a question if the MessageExchangePattern is InOut, and there are two message queue share the same local transcation manager, the JMS endpoint can't be transcational .
Please see CAMEL-959 for more information.
njiang:1229903172:2008-12-22T07:46:12.126+0000:1229903172:2008-12-22T07:46:12.126+0000:Now I don't think we should set the JMS endpoint to be true.
If we have the rule like this 
{code}
 from(""jms:queue:queueA?concurrentConsumers=4"").to(""jms:queue:queueB"")
 form(""jms:queue:queueB?concurrentConsuers=4"").to(""mock:endpoint"");
{code}
The upper 2 JMS endpoint will share a same JMSTransactionMananger if we set the transacted to be true and the CurrentConsumer=4, we can't not get the result message from jms:queue:queueB.
So I don't think we need to make the JMS endpoint default to be transactional.
Since it is so complicated when we write the queue to queue routing rules, to be make sure the rule can work without any additional configuration, I don't want to set the JMS endpoint to be trasactional by default.
But if the user doesn't inject the transactionManager and set the transactioned to be true , we should create a JMSTransactionManager by default.

jstrachan:1229917010:2008-12-22T11:36:50.091+0000:1229917010:2008-12-22T11:36:50.091+0000:We still haven't figured out why reusing a transaction manager is bad - it should work across many threads & transactions.

FWIW setting the JMS endpoint to transactional by default only applies to InOnly. i.e. oneway JMS operations (which is the common use case).

For InOut we should not enable transacted by default - since its typically not what users want/expect.
njiang:1230249904:2008-12-26T08:05:04.602+0000:1230249904:2008-12-26T08:05:04.602+0000:Since current JMS endpoint (for producer) don't know if the exchange it processed is InOnly or InOut when it is created. 
And the exchange's exchange pattern can be changed any time in the route. I don't feel it is right to set the transacted default value to be true.
njiang:1230250306:2008-12-26T08:11:46.353+0000:1230250306:2008-12-26T08:11:46.353+0000:I committed a patch of create a JMSTransactionManager if there is no transaction manager specified for the Jms endpoint.
http://svn.apache.org/viewvc?rev=728624&view=rev
davsclaus:1239672947:2009-04-14T09:35:47.185+0000:1239672947:2009-04-14T09:35:47.185+0000:Willem we can set the transacted option to true by default. 

As CAMEL-1475 handles the rest, eg no need to explict declare a transacted error handler etc. Then its safe to change the transacted option from false to true.
njiang:1240080266:2009-04-19T02:44:26.621+0000:1240080266:2009-04-19T02:44:26.621+0000:Back to my comment,  when the JMS endpoint is created  we don't know the message exchange pattern of the message which the endpoint will process, and the JMS endpoint will get into trouble if the message exchange pattern is InOut and we set the trasacted option to be true by default.
Maybe we should let the user have the choice.
davsclaus:1240097024:2009-04-19T07:23:44.038+0000:1240097114:2009-04-19T07:25:14.758+0000:Willem

Yeah I have been trying to change the defaults and I think the issue with {{from (jms) -> to (jms)}} with *inOut* in the same route will fireback end users. 

So we can keep the option as disabled by default. 
Even though it would be unusual to use JMS *without* transaction in a real system.

Any thoughts from others?
davsclaus:1242627892:2009-05-18T14:24:52.273+0000:1242627892:2009-05-18T14:24:52.273+0000:Lets leave it as is. 

The end user must set *transacted=true* to use JMS transactions. This is the best behavior as no other components like JDBC default to be transacted.
davsclaus:1258775874:2009-11-21T11:57:54.278+0000:1258775874:2009-11-21T11:57:54.278+0000:Closing all 2.0M2 tickets"
0,CAMEL-371,Improvement,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Claus Ibsen,0,0,2008-03-07 05:11:45+00:00,2008-05-12 07:48:07+00:00,"Currently the camel mina producer (MinaProducer) defaults to have a 10 sec timeout.


This is currently not possible to configured eg from the URL parameters etc.
Also we should documented on the wiki that 10 sec. is default.","davsclaus:1204974540:2008-03-08T19:09:00.565+0000:1204974540:2008-03-08T19:09:00.565+0000:Okay I got it now. Will prepare a patch later today/tomorrow
davsclaus:1204981395:2008-03-08T21:03:15.593+0000:1204981395:2008-03-08T21:03:15.593+0000:The 10 sec default is to short i think? I think it should be at least 30 or 60 sec. 

Better to have a higher sensible default than having nasty surprises for end users that they will have a timeout just because the response could not be generated in less than 10 seconds. 

Anyone got their opinion on this?
njiang:1204999213:2008-03-09T02:00:13.396+0000:1204999213:2008-03-09T02:00:13.396+0000:I think we could set it to 30 sec, since CXF's conduit's default time out is 30 sec and I do not get any complain about  that :)
davsclaus:1205021237:2008-03-09T08:07:17.953+0000:1205021237:2008-03-09T08:07:17.953+0000:The timeout patch
davsclaus:1205029184:2008-03-09T10:19:44.015+0000:1205029184:2008-03-09T10:19:44.015+0000:Fixed and updated wiki documentation"
0,CAMEL-370,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Chris Custine,0,0,2008-03-06 23:09:39+00:00,2008-05-12 12:45:33+00:00,SftpConsumer does not connect to server due to patch for CAMEL-251.  The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file.  I will attach the fixes to this issue.,"ccustine:1204818500:2008-03-06T23:48:20.692+0000:1204818500:2008-03-06T23:48:20.692+0000:This patch fixes these issues and also reduces the log level on reconnects from WARN to INFO since this will happen on the first connection attempt every time and is normal behavior.  I also removed the TODO comments about checking TZ on the remote server because the SSH FTP spec already specifies UTC.
hadrian:1204828231:2008-03-07T02:30:31.754+0000:1204828231:2008-03-07T02:30:31.754+0000:Thanks Chris!
davsclaus:1210567533:2008-05-12T12:45:33.861+0000:1210567533:2008-05-12T12:45:33.861+0000:Closed all 1.3 tickets"
0,CAMEL-369,New Feature,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-03-06 19:37:05+00:00,2008-05-12 12:45:33+00:00,they should implement BrowsableEndpoint,"jstrachan:1204804311:2008-03-06T19:51:51.577+0000:1204804311:2008-03-06T19:51:51.577+0000:patch applied - see BrowsableQueueTest in camel-jms
davsclaus:1210567533:2008-05-12T12:45:33.832+0000:1210567533:2008-05-12T12:45:33.832+0000:Closed all 1.3 tickets"
0,CAMEL-368,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Kevin Ross,0,0,2008-03-06 15:52:42+00:00,2008-05-12 12:45:33+00:00,"From:
http://activemq.apache.org/camel/recipient-list.html



    <to>
      <uri>seda:b</uri>
      <uri>seda:c</uri>
      <uri>seda:d</uri>
    </to>","janstey:1204828187:2008-03-07T02:29:47.117+0000:1204828187:2008-03-07T02:29:47.117+0000:Based on this forum entry 

http://www.nabble.com/Help-with-WireTap-please%21-%28Noob%29-to15710292s22882.html#a15712739

it seems that the correct format for this kinda thing is

{code}
  <route>
    <from uri=""seda:a""/>
    <to uri=""seda:b""/>
    <to uri=""seda:c""/>
    <to uri=""seda:d""/>
  </route>
{code}

That said, the public xsd (http://activemq.apache.org/camel/schema/spring/camel-spring.xsd) is way behind the one that gets auto generated in the camel-spring component... anybody know if that is planned to be updated?



janstey:1204833958:2008-03-07T04:05:58.076+0000:1204833958:2008-03-07T04:05:58.076+0000:Just noticed that there was no test case for a static recipient list... attached is one using the DSL and one using Spring XML Extensions. 
jstrachan:1204884323:2008-03-07T18:05:23.208+0000:1204884323:2008-03-07T18:05:23.208+0000:patch applied with thanks
davsclaus:1210567533:2008-05-12T12:45:33.811+0000:1210567533:2008-05-12T12:45:33.811+0000:Closed all 1.3 tickets"
0,CAMEL-367,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Won't Fix,1.3.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-03-06 15:22:09+00:00,2008-05-12 12:45:33+00:00,No Desc,"hadrian:1204801478:2008-03-06T19:04:38.875+0000:1204801478:2008-03-06T19:04:38.875+0000:Already fixed in  a previous merge.
davsclaus:1210567533:2008-05-12T12:45:33.784+0000:1210567533:2008-05-12T12:45:33.784+0000:Closed all 1.3 tickets"
0,CAMEL-366,Improvement,Major,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,James Strachan,0,0,2008-03-06 14:18:18+00:00,2011-04-24 09:57:45+00:00,No Desc,davsclaus:1303610265:2011-04-24T09:57:45.143+0000:1303610265:2011-04-24T09:57:45.143+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-365,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonathan Anstey,James Strachan,0,1,2008-03-06 09:47:03+00:00,2008-05-12 12:45:33+00:00,http://www.enterpriseintegrationpatterns.com/RoutingTable.html,"raulvk:1206609057:2008-03-27T17:10:57.305+0000:1206609286:2008-03-27T17:14:46.207+0000:Hi,

Isn't what you are referring to what Camel calls Pipes and Filters?? http://activemq.apache.org/camel/pipes-and-filters.html.   (Leaving aside the fact that Pipes and Filters EIP is oriented towards breaking up large logic into smaller bits.... isn't the routing strategy the same?).

Im sorry if I got it all wrong..... I am a beginner in all this ;)

-- Raul.


janstey:1206610171:2008-03-27T17:29:31.947+0000:1206610171:2008-03-27T17:29:31.947+0000:The two patterns are similar in that they chain together several endpoints. The routing slip pattern is a bit more dynamic though since the endpoint list is defined at runtime in a message header. 

For example, take a pipeline ala

{code}
from(""direct:a"").pipeline(""direct:x"", ""direct:y"", ""direct:z"", ""mock:result"");
{code}

In order to route is this way using the routing slip pattern, you would create a route like

{code}
from(""direct:a"").routingSlip();
{code}

and send a message to direct:a with a routing slip header that contains the list of URIs (direct:x, direct:y, direct:z, and mock:result). You can't do this in the current build though, I'm still working on it ;)
janstey:1206678145:2008-03-28T12:22:25.758+0000:1206678145:2008-03-28T12:22:25.758+0000:This patch adds the routing slip EIP to camel. 
jstrachan:1206678988:2008-03-28T12:36:28.123+0000:1206678988:2008-03-28T12:36:28.123+0000:Patch applied with huge thanks Jon! :)

I guess we should add a little test case to the camel-spring module to check it works when using the XML version as well.

BTW fancy adding a wiki page to the EIP page?

http://activemq.apache.org/camel/enterprise-integration-patterns.html


janstey:1206679452:2008-03-28T12:44:12.158+0000:1206679452:2008-03-28T12:44:12.158+0000:Sure thing. I may get around to it over the weekend.
jstrachan:1206679703:2008-03-28T12:48:23.124+0000:1206679703:2008-03-28T12:48:23.124+0000:Here's some basic documentation : http://cwiki.apache.org/confluence/display/CAMEL/RoutingSlip
janstey:1206787944:2008-03-29T18:52:24.059+0000:1206787944:2008-03-29T18:52:24.059+0000:Just noticed that I specified an image file that doesn't exist in the NodeData class. The thumbnail for the routing slip is actually RoutingTableIcon.png not RoutingSlipIcon.png.

I attached a patch for this.
davsclaus:1206841480:2008-03-30T09:44:40.717+0000:1206841480:2008-03-30T09:44:40.717+0000:Jon I have applied you nodeData patch - thanks a lot for this great addition to Camel
davsclaus:1210567533:2008-05-12T12:45:33.149+0000:1210567533:2008-05-12T12:45:33.149+0000:Closed all 1.3 tickets"
0,CAMEL-364,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Claus Ibsen,0,0,2008-03-06 06:04:57+00:00,2008-05-12 07:48:07+00:00,"Using the camel-mina component in synchronous mode (InOut exchange pattern) there is a potential bug if eg a processor throws an exception.


This is a failed delivery in camel. And out-of-the-box the default policy is to retry up till 6 times. And if still failing camel-mina will continue and return a response to the client.
The respons is a duplicate of the in body.


A workaround is to set the out body to null immediately in your processor. If the body is null before the exception is thrown then camel-mina will no return a response.


To reproduce the bug see the MinaTcpWithInOutUsingPlainSocketTest and remove the setbody null code below and the test should fail.



 else if (""force-exception"".equals(in)) {
                            // clear out before throwing exception
                            e.getOut().setBody(null);
                            throw new IllegalArgumentException(""Forced exception"");
                        }




In MinaConsumer there is a TODO comment where the bug should be handled (from CAMEL-356)","davsclaus:1204754742:2008-03-06T06:05:42.532+0000:1204754742:2008-03-06T06:05:42.532+0000:Requires this patch
davsclaus:1204970503:2008-03-08T18:01:43.643+0000:1204970503:2008-03-08T18:01:43.643+0000:See patch on CAMEL-375
davsclaus:1205019466:2008-03-09T07:37:46.314+0000:1205019466:2008-03-09T07:37:46.314+0000:Fixed with patch from CAMEL-375"
0,CAMEL-363,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Marc Giger,0,0,2008-03-05 18:10:04+00:00,2008-05-12 12:45:33+00:00,"From: Willem Jiang
To: camel-user@activemq.apache.org
Subject: Re: camel-cxf throwing a fault
Date: Wed, 05 Mar 2008 16:26:41 +0800
Reply-To: camel-user@activemq.apache.org


Hi Marc,


It looks like camel-cxf component's issue which can't deal with the 
exception message in MESSAGE dataFormat.
Could you fill a JIRA for it ? I will fix it later this week.
As usual ,you just need throw the exception from the processor , CXF 
will try to marshal it into a soap fault.


Regards,
Willem


Marc Giger wrote:
> Hi,
>
> I'm trying to get the following camel route working where the
> dataformat is MESSAGE.
>
> <from uri=""cxf:bean:routerEndpoint?dataFormat=MESSAGE""/>            
> <process ref=""decryptProcessor""/>  
> <choice>
>     <when>  
>     	<methodCall bean=""endpointSelector"" method=""matches""/>
> 	    <to uri=""cxf:bean:serviceEndpoint?dataFormat=MESSAGE""/>  
>     </when>
>     <otherwise>  
>     	<to uri=""cxf:bean:localEndpoint?dataFormat=MESSAGE""/>   
>     </otherwise>
> </choice>  
>
> if the endpointSelector bean returns true the request is redirected to
> a remote webservice.
> otherwise the request is forwarded to a local cxf service (with
> local-transport)
>
> Now, if I invoke the routerEndpoint and somewhere in the pipeline
> happens an exception (in my case in the decryptProcessor), I get the
> following Exception in the outFault chain:
>
> Mar 4, 2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain
> doIntercept INFO: Interceptor has thrown exception, unwinding now
> org.apache.cxf.interceptor.Fault
>         at
> org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)
> at
> org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
> at
> org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74)
> at
> org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208)
> at
> org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77)
> at
> org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79)
> at
> org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264)
> at
> org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160)
> at
> org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170)
> at
> org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148)
> at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at
> javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at
> org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
> at
> org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
> at
> org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
> at
> org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
> at
> org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
> at
> org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
> at
> org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)
> at
> org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
> at
> org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
> at org.mortbay.jetty.Server.handle(Server.java:313) at
> org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
> at
> org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)
> at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at
> org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at
> org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at
> org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
> at
> org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
> Caused by: java.lang.NullPointerException at
> org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at
> org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at
> org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ...
> 28 more
>
> This is because the InputStream is null in
> RawMessageContentRedirectInterceptor:
>
> public void handleMessage(Message message) throws Fault {
>
>         InputStream is = message.getContent(InputStream.class);
>         OutputStream os = message.getContent(OutputStream.class);
>         
>         try 

{            
>             IOUtils.copy(is, os);
>             is.close();
>             os.flush();
>         }

 catch (Exception e) 

{
>             throw new Fault(e);
>         }

>     }
>
> How can I return a custom soap-fault in a processor/filter?
>
> Thanks,
>
> Marc
>
>","njiang:1205217242:2008-03-11T14:34:02.316+0000:1205217242:2008-03-11T14:34:02.316+0000:The patch is committed, please check it out :)
davsclaus:1210567533:2008-05-12T12:45:33.126+0000:1210567533:2008-05-12T12:45:33.126+0000:Closed all 1.3 tickets"
0,CAMEL-362,Improvement,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-03-05 15:58:45+00:00,2008-05-12 12:45:33+00:00,"In the current implementation with a mina component producer if the server is not up when we start Camel it fails. This is because the mina session creation is in the doStart method which is called when Camel starts.
A simple solution is to optionally allow to lazily create the session just before sending the exchange in the Producer's process method.","davsclaus:1204714539:2008-03-05T18:55:39.129+0000:1204714539:2008-03-05T18:55:39.129+0000:I updated the wiki document for the Mina component
davsclaus:1210567533:2008-05-12T12:45:33.107+0000:1210567533:2008-05-12T12:45:33.107+0000:Closed all 1.3 tickets"
0,CAMEL-361,Bug,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,James Strachan,0,1,2008-03-05 13:37:19+00:00,2008-06-05 09:04:51+00:00,No Desc,"magnusheino:1204696028:2008-03-05T13:47:08.233+0000:1204696028:2008-03-05T13:47:08.233+0000:@Componet doesn't seem to matter. Same thing if I remove @Component. (Component was only there because I injected some spring stuff also)

My context looks like this:

<camelContext>
        <package>se.lantmateriet.origo</package>
        <endpoint id=""receiptChannel"" uri=""mock:updateReceipt"" />
        <endpoint id=""updateChannel"" uri=""file://src/test/data/EmptyChangeTransactionWithSoap.xml?noop=true"" />
        <endpoint id=""updateServiceChannel"" uri=""bean:updateService"" />
    </camelContext>

and in se.lantmateriet.origo.service.internal.ServiceRoutes that extends SpringRouteBuilder, configure is called before and @EndpointInject's are injected.
jstrachan:1210576250:2008-05-12T15:10:50.962+0000:1210576250:2008-05-12T15:10:50.962+0000:wonder if you fancy taking a look at this?
njiang:1210634919:2008-05-13T07:28:39.504+0000:1210634919:2008-05-13T07:28:39.504+0000:Hi Magnus

Did you specify the <component-scan xmlns=""http://www.springframework.org/schema/context"" base-package=""*** /> in you spring configuration file?
You could take a look at the SpringComponentScanTest[1], which is workable for injecting the @component.

[1]https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/SpringComponentScanTest.java

Willem    
magnusheino:1210639990:2008-05-13T08:53:10.564+0000:1210639990:2008-05-13T08:53:10.564+0000:I'm not sure I understand.

Create a class that extends SpringRouteBuilder.

Add @EndpointInject to inject endpoints created in the camelcontext, as the xml above.

Now, SpringRouteBuilder.configure is called before @EndpointInject is populated, so it is not possible to refer to the endpoints when you configure the route.

Ok?

/Magnus
njiang:1210644292:2008-05-13T10:04:52.068+0000:1210644292:2008-05-13T10:04:52.068+0000:Hi Magnus,

You need add @Autowired before the  @EndpointInject(name = ""yourEndpoint"") .
I just added a test to show that , please check out the MyRouteBuilder[1] for more information.

[1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/route/MyRouteBuilder.java

Willem
jstrachan:1210644683:2008-05-13T10:11:23.188+0000:1210644683:2008-05-13T10:11:23.188+0000:I wonder if we can avoid having to use @Autowired? Are you sure that @EndpointInject is even being used? (e.g. is it just @Autowired thats finding the Endpoint in the context?)

Is there some way to mark the @EndpointInject annotation so Spring knows its an injection point or something?
njiang:1210645958:2008-05-13T10:32:38.464+0000:1210645958:2008-05-13T10:32:38.464+0000:Hi James,

I just traced the code and found only the CamelBeanPostProcessor is in charge of the @EndpointInject. 
But the builder is not the bean that is created by spring, so the CamelBeanPostProcessor can't work here.
How can I touch the CamelBeanPostProcessor with the builder ?

Willem
jstrachan:1210646261:2008-05-13T10:37:41.774+0000:1210646261:2008-05-13T10:37:41.774+0000:So I guess the problem is if we use Camel's package scan, we're not using Spring to instantiate the RouteBuilder maybe? I wonder if we could use Spring to instantiate the RouteBuilder it'd invoke the CamelBeanPostProcessor? I wonder how we get Spring to invoke the BeanPostProcessor if a bean doesn't exist in the spring.xml?

I guess ultimately we should reuse Spring's @Component mechanism instead of the camel 'package' mechanism maybe?
njiang:1210717659:2008-05-14T06:27:39.339+0000:1210717659:2008-05-14T06:27:39.339+0000:The patch was committed into the trunk in Revision  656103, please check it out :)"
0,CAMEL-360,Improvement,Trivial,1.3.0,1.3.0,"
None
",Closed,Duplicate,1.3.0,Unassigned,Mikhail Krivoshein,0,1,2008-03-05 12:44:04+00:00,2008-10-23 20:02:07+00:00,"The dependency on Spring Framework is defined as:
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
    </dependency>
in camel-spring's pom.xml file.


Can you please replace this generic dependency with a set of dependencies on individual spring modules as recommended by Spring Framework team?


Thank you in advance!","davsclaus:1208083732:2008-04-13T18:48:52.549+0000:1208083732:2008-04-13T18:48:52.549+0000:Is a duplicate of CAMEL-281
davsclaus:1208084320:2008-04-13T18:58:40.413+0000:1208084320:2008-04-13T18:58:40.413+0000:Mikhail you are welcome to help us resolved witch of the individual spring jars we should use for each of the camel components.

There is a list of TODOs on the CAMEL-281"
0,CAMEL-359,Sub-task,Trivial,1.3.0,None,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Claus Ibsen,0,0,2008-03-05 10:51:59+00:00,2008-05-12 07:46:39+00:00,The new CSV component (apache-csv) is lacking documentation on the wiki - ie its not listed on the component overview page.,"gertvanthienen:1205816584:2008-03-18T13:03:04.181+0000:1205816584:2008-03-18T13:03:04.181+0000:My first shot at the documentation at http://cwiki.apache.org/confluence/x/ijgB
We still need to add a link on the Data Formats pages afterwards -- how about using the {children} macro to get it there automatically in the future?
davsclaus:1206525573:2008-03-26T17:59:33.961+0000:1206525573:2008-03-26T17:59:33.961+0000:Gert nice first stab at it.

Would it be possible to add samples to the wiki page of the input and output format. How does the salaries.csv file looks like and how is the bean method signature and what types are the map objects etc.
davsclaus:1206525595:2008-03-26T17:59:55.957+0000:1206525595:2008-03-26T17:59:55.957+0000:And a example how to do it the other way (marshal)
gertvanthienen:1206660453:2008-03-28T07:27:33.383+0000:1206660453:2008-03-28T07:27:33.383+0000:Could you apply this patch first?  It contains an additional unit test with a sample CSV file and some {{// START SNIPPET }} comments for adding the requested documentation.
davsclaus:1206663057:2008-03-28T08:10:57.880+0000:1206663057:2008-03-28T08:10:57.880+0000:CAMEL-359 patch applied with thanks to Gert (I love your daltons example)
gertvanthienen:1206665366:2008-03-28T08:49:26.139+0000:1206665366:2008-03-28T08:49:26.139+0000:Claus, 

Could you rename two snippets for me (Confluence doesn't seem to like a - in the snippet name)?
- marshal-result &rarr; marshalInput
- unmarshal-result &rarr; unmarshalResult

Thanks,
Gert
davsclaus:1206667177:2008-03-28T09:19:37.707+0000:1206667177:2008-03-28T09:19:37.707+0000:Yes of course. Just committed:
At revision 642157 
jstrachan:1206669630:2008-03-28T10:00:30.929+0000:1206669630:2008-03-28T10:00:30.929+0000:Have just cleared the snippet cache to force the wiki to re-evaluate it (it usually takes an hour :)
jstrachan:1206669649:2008-03-28T10:00:49.613+0000:1206669649:2008-03-28T10:00:49.613+0000:Can we mark this issue as resolved now?
davsclaus:1206682395:2008-03-28T13:33:15.597+0000:1206682395:2008-03-28T13:33:15.597+0000:It need a link to it from the main dataformat page

http://activemq.apache.org/camel/data-format.html

Before it can be resolved
jstrachan:1206683933:2008-03-28T13:58:53.946+0000:1206683933:2008-03-28T13:58:53.946+0000:Done :)

http://cwiki.apache.org/CAMEL/data-format.html
"
0,CAMEL-358,Test,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Kevin Ross,0,1,2008-03-04 20:11:55+00:00,2008-05-12 12:45:33+00:00,"I spent a good amount of time attempting to understand camel and spring (I know JMS reasonably well).  Though each component is easy in the end, everything put together was somewhat painful to put together.


I have created test cases for JMS transactions using camel in both Java DSL and using Spring XML.  These were initiated from:



Martin Krasser's sample: http://www.nabble.com/JMS-Transactions---How-To-td15168958s22882.html#a15198803
http://activemq.apache.org/camel/transactional-client.html



This work should be reviewed, perhaps with simple repackaging it is suitable to commit to the test hierarchy.  It may also be useful to point to from the doc page if it is in fact committed to the test hierarchy.","njiang:1204738376:2008-03-06T01:32:56.585+0000:1204738376:2008-03-06T01:32:56.585+0000:Hi Kevin,

Could you grand the ASF license to the test case that you attached ? so I can go on to review and patch it.

Thanks,
Willem
kevin.ross@metova.com:1204783431:2008-03-06T14:03:51.811+0000:1204783431:2008-03-06T14:03:51.811+0000:Apache License Granted.

Is that what you need?  I signed a committer agreement for a different Apache Project so I am on record...

Please let me know if you need something different and I'll get it done.
njiang:1204785562:2008-03-06T14:39:22.763+0000:1204785562:2008-03-06T14:39:22.763+0000:No, it has nothing to do with your committer agreement.
When you attach the files into the JIRA, you can grand the file with the ASF license.
Here is  the link[1] for management this JIRA's attachment.
[1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=26576


hadrian:1204786171:2008-03-06T14:49:31.016+0000:1204786171:2008-03-06T14:49:31.016+0000:Hi Kevin,

If you check the link above there is a flag that means that your patch is not informational only and you allow ASF to use your contribution under its license.  Committers in a project cannot contribute other people original work without the authors explicit consent.

Unfortunately, the way the gui works is that it does not offer that option if the patch is attached during the issue creation and the default is 'false'.  So it has to be a 2 step process.  First create the jira, then attach patch.  Then you get a different screen that allows you to check that 'Grant License to ASF...' flag.

kevin.ross@metova.com:1204787164:2008-03-06T15:06:04.478+0000:1204787164:2008-03-06T15:06:04.478+0000:just re-added with the grant.
njiang:1205090274:2008-03-10T03:17:54.387+0000:1205090274:2008-03-10T03:17:54.387+0000:The Path is in the svn repository. 
davsclaus:1210567533:2008-05-12T12:45:33.075+0000:1210567533:2008-05-12T12:45:33.075+0000:Closed all 1.3 tickets"
0,CAMEL-357,New Feature,Trivial,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Claus Ibsen,0,0,2008-03-04 19:44:10+00:00,2008-05-12 07:46:39+00:00,The component list is now really long. Would like to document witch are part of the camel-core.jar and thus you don't need to look for the camel-XXX.jar that fits for the component.,"davsclaus:1206525041:2008-03-26T17:50:41.431+0000:1206525041:2008-03-26T17:50:41.431+0000:Better eating your own dog food and do the wiki documentation myself as I was the requester ;)
davsclaus:1207540529:2008-04-07T11:55:29.124+0000:1207540529:2008-04-07T11:55:29.124+0000:There are some TODO and some in the source component folder that is not on the wiki
davsclaus:1207544683:2008-04-07T13:04:43.877+0000:1207544683:2008-04-07T13:04:43.877+0000:See CAMEL-447
davsclaus:1207652471:2008-04-08T19:01:11.124+0000:1207652471:2008-04-08T19:01:11.124+0000:The only one missing is the MSMQ component. 

Who knows anything about it?
davsclaus:1207903696:2008-04-11T16:48:16.831+0000:1207903696:2008-04-11T16:48:16.831+0000:Got the last piece of information."
0,CAMEL-356,Improvement,Trivial,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Claus Ibsen,0,0,2008-03-04 16:11:04+00:00,2008-05-12 07:48:06+00:00,"Camel MINA in synchronous mode (InOut exchange pattern) does not handle exception thrown from MINA. Currently MINA intercepts this and logs the exception at WARN level.


We should override the proper method in Mina and handle it so the end user can deal with it.
Also it has been raisen on the forum that it does not propogate header and other properties. This should be raised in another ticket.


In the weekend I will work on a patch for Camel to fix this problem.","davsclaus:1204684284:2008-03-05T10:31:24.254+0000:1204684284:2008-03-05T10:31:24.254+0000:Okay got it sorted this morning at home. I will prepare at patch later this week.
njiang:1204764891:2008-03-06T08:54:51.259+0000:1204764891:2008-03-06T08:54:51.259+0000:Applied the patch with thanks.
njiang:1204786732:2008-03-06T14:58:52.388+0000:1204786732:2008-03-06T14:58:52.388+0000:The test of testReceiveNoResponseSinceOutBodyIsNull() and testReceiveNoResponseSinceOutBodyIsNullTwice() are failed in the linux box.

I just comment out this two test and reopen it.
davsclaus:1204801319:2008-03-06T19:01:59.513+0000:1204801319:2008-03-06T19:01:59.513+0000:Hmm the tests are failing because of the TCP port is already bound when the MinaConsumer is started.
davsclaus:1204801599:2008-03-06T19:06:39.266+0000:1204801599:2008-03-06T19:06:39.266+0000:Now it fails with another test for same problem. I guess camel or mina doesn't properly unbind the TCP listener. Maybe there should be some delays between the tests to allow some time for the unbind to settle in.

Anyone got a better clue. The tests runs with no problem on my XP box.

A workaround is to use a random port number each time but that is not what we really want is it?
davsclaus:1204802096:2008-03-06T19:14:56.351+0000:1204802096:2008-03-06T19:14:56.351+0000:Okay I am on track on something here. Inspired by the ReverseServer unit test in Camel.
http://java.sun.com/j2se/1.5.0/docs/api/java/net/ServerSocket.html#setReuseAddress(boolean)

The reuse address is not set.
I will create a patch for this, and hopfully the tests will blaze on the Bamboo box.
davsclaus:1204803669:2008-03-06T19:41:09.852+0000:1204803669:2008-03-06T19:41:09.852+0000:Okay MinaConsumer in camel was on a wrong foot with the configuration.

Apache Mina has distint configuration for acceptor and connector - in Camel this was the same configuration. We should split this into to config objects on the endpoint. Then we can have a acceptor config for the consumer that sets the reuse address configuration.

Also we could have a logger on the filer chain as the unit test does.

A patch is on the way before he end of the weekend.
davsclaus:1204840388:2008-03-07T05:53:08.654+0000:1204840388:2008-03-07T05:53:08.654+0000:Got it up and running except the UDP tests are failing. 

Using the right configuration objects also fixed a lot of warnings from Mina, so we are on the right track.
davsclaus:1204842550:2008-03-07T06:29:10.946+0000:1204842550:2008-03-07T06:29:10.946+0000:Everything passes now. 

There are a few other corners of the camel-mina component I would like to improve and polish before submitting a patch.
And especially a few more unit tests is needed to cove the holes.

I added the synchronous mode for the UDP protocol as well.
davsclaus:1204942369:2008-03-08T10:12:49.428+0000:1204942369:2008-03-08T10:12:49.428+0000:The 2nd patch:
- fixing all the unit tests so they should run
- UDP protocol now also supports synchronous mode
- added more unit tests to cover nearly 100%
- Mina configuration split into separate for acceptor and connector
- TCP protocol defaults to setReuseAddress(true) (UDP does this out-of-the-box from Mina)
davsclaus:1204968729:2008-03-08T17:32:09.793+0000:1204968729:2008-03-08T17:32:09.793+0000:Should be fixed with the patch applied.

Please see CAMEL-375 instead"
0,CAMEL-355,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Willem Jiang,James Strachan,0,0,2008-03-04 14:20:57+00:00,2009-02-16 05:51:46+00:00,"See the currently disabled test case: BeanMethodWithMultipleParametersTest to see the problem.


Basically we currently filter only allowable methods (taking a single unannotated body argument). We need to be a bit smarter so that if the payload is an Object[] and the methodName is specified; then try to find a Method to invoke","njiang:1218148355:2008-08-08T06:32:35.601+0000:1218148355:2008-08-08T06:32:35.601+0000:This issue has been resolved in CAMEL-759
davsclaus:1234734706:2009-02-16T05:51:46.668+0000:1234734706:2009-02-16T05:51:46.668+0000:Closing all 1.5.0 issues"
0,CAMEL-354,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-03-04 11:03:46+00:00,2008-05-12 12:45:33+00:00,"For example, define a DataSet of 10,000,000 messages and be able to send them to some endpoint and assert that they are all received by another endpoint...



from(""dataset:foo"").to(""activemq:SomeQueue"");

// lets assert that the data set is received again
from(""activemq:SomeQueue"").to(""dataset:foo"");","jstrachan:1204603628:2008-03-04T12:07:08.318+0000:1204603628:2008-03-04T12:07:08.318+0000:Documentation is here : http://cwiki.apache.org/CAMEL/dataset.html
magnusheino:1204611375:2008-03-04T14:16:15.729+0000:1204611375:2008-03-04T14:16:15.729+0000:Please add info about since what version or camel features are available in the wiki.
davsclaus:1204630923:2008-03-04T19:42:03.536+0000:1204630923:2008-03-04T19:42:03.536+0000:The surce code sample (spring config) uses 10000 in size but the documentation text said 10 mio. Would be nice to align these numbers, eg change the text to 10000.
jstrachan:1204670440:2008-03-05T06:40:40.553+0000:1204670440:2008-03-05T06:40:40.553+0000:Thanks for your comments guys - I've updated the wiki page to reflect your comments - let me know what you think...

http://cwiki.apache.org/CAMEL/dataset.html

davsclaus:1204684078:2008-03-05T10:27:58.092+0000:1204684078:2008-03-05T10:27:58.092+0000:I think that the example on the wiki page doesn't clearly state how this magic test is performed.

- Does it test that the message are received in the same order?
- Is it using a single thread to send the message or can you set concurrent users
- The reporting, is it timing only the executed time to consume the message or also the sending part?
- Could the wiki also have a sample of the logging reporting - (help as eye candy)

And for features. Maybe the recent added code for delay could be improved to allow random delay. JMeter and SoapUI have features for randomizing sending with
- constant offset
- random delay
that can be combined.

jstrachan:1204883878:2008-03-07T17:57:58.415+0000:1204883878:2008-03-07T17:57:58.415+0000:* yes its testing that the messages are received in the same order (we don't yet support out-of-order messages, but am hopefully gonna add that soon, so we could use concurrent consumers)
* currently the test is using single thread to send and consume; ideally we'd have a way to do concurrent sending & consumption
* yes, just sending right now; we could patch the code to report the sending time too I guess?
* yeah, good idea

Also love the idea for randomizing the delay. We should have a plugin for 'delay' we can use in each side - anyone fancy submitting patch? :)
jstrachan:1206657437:2008-03-28T06:37:17.288+0000:1206657437:2008-03-28T06:37:17.288+0000:I've spun up a separate issue CAMEL-405 for future improvements
davsclaus:1210567533:2008-05-12T12:45:33.053+0000:1210567533:2008-05-12T12:45:33.053+0000:Closed all 1.3 tickets"
0,CAMEL-353,Bug,Minor,None,None,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Stephen Gargan,0,0,2008-03-04 01:59:55+00:00,2008-05-12 12:45:33+00:00,"The Distributions are missing this core tests jar. THe spring tests jar is included, but depends in turn of the core tests jar. This is due to the core tests dependency being set with test scope. Removing the scoping includes it correctly. 


A patch is attached.


rgs,


ste","njiang:1204570855:2008-03-04T03:00:55.727+0000:1204570855:2008-03-04T03:00:55.727+0000:Hi stephen,

Can you grand the ASF licence for you patch?  
Or I can't apply it .

Thanks,
Willem
sgargan:1204571450:2008-03-04T03:10:50.343+0000:1204571450:2008-03-04T03:10:50.343+0000:What do you need for me to do? Is it enough for me to grant it here? If so, duly granted! If you need a new patch with some extras just shout.

thx

ste
sgargan:1204572135:2008-03-04T03:22:15.763+0000:1204572135:2008-03-04T03:22:15.763+0000:Didn't see the selector the first time round. Good now.

njiang:1204576572:2008-03-04T04:36:12.691+0000:1204576572:2008-03-04T04:36:12.691+0000:conformed the issue and applied the patch.


davsclaus:1210567533:2008-05-12T12:45:33.032+0000:1210567533:2008-05-12T12:45:33.032+0000:Closed all 1.3 tickets"
0,CAMEL-352,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Gary Tully,Gary Tully,0,1,2008-03-03 14:13:07+00:00,2008-04-22 14:13:45+00:00,"The Batch processor behind the Aggregrator has a batch expiry timeout that governs the delivery of messages.  If the timeout expires during aggregration the resulting timeout value passed to PollingConsumer.receive will be negative. In the jms consumer case with the spring templates, a negative timeout != -1 is considered infinite/blocking.","gtully:1204524878:2008-03-03T14:14:38.647+0000:1204524878:2008-03-03T14:14:38.647+0000:fix that breaks out of the processBatch loop if the batchTimeout goes negative.
Test case with jms component to validate and additional test case to the aggregrator to exercise the expiry code path.
hadrian:1204526167:2008-03-03T14:36:07.142+0000:1204526167:2008-03-03T14:36:07.142+0000:Patch applied with thanks! "
0,CAMEL-351,Bug,Trivial,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Claus Ibsen,0,0,2008-03-02 11:33:35+00:00,2008-03-28 02:45:50+00:00,"1)
apache-camel/pom.xml
Geronimo j2ee jacc spec is duplicated (2 of them)


2)
root/pomx.ml
httpcore-version>4.0-alpha6</httpcore-version
httpcore has released a -beta1 version


3)
root/pomx.ml
And groovy is listed as 
<version>1.1-beta-3</version>
Groovy 1.5.4 has been released.


4)
Hibernate has just released a new batch of GA versions


5)
camel-http/pom.xml
http-client has released a 3.1 final, the pom uses -rc1


camel-string/pom.xml
stringtemplate has released v3.1 but Camel refers to 2.3b6","davsclaus:1204683402:2008-03-05T10:16:42.728+0000:1204683402:2008-03-05T10:16:42.728+0000:If not mistaking OGNL has also released a newer version than i pom.xml files in Camel
njiang:1204697917:2008-03-05T14:18:37.695+0000:1204697917:2008-03-05T14:18:37.695+0000:I just upgrade the httpcore to 4.0 beta1 and found there is no httpcore-niossl 4.0 beta1 component, also the latest stringtemplate in maven is v3.1b1. 
I will commit what I get at this moment.
davsclaus:1204716265:2008-03-05T19:24:25.468+0000:1204716265:2008-03-05T19:24:25.468+0000:#1 Fixed
#2 Partly fixed
#3 Fixed
#5 Fixed

7)
camel-mina/pom.xml
Mina has released 1.1.6 (is in maven)

8)
camel-amqp/pomx.ml
Refers to and old version of mina 1.1.3. Can it be upgraded to 1.1.6?

9)
camel-ognl/pom.xml
OGNL has released 2.7.2 (it is in maven)

10)
camel-script/pom.xml
jython has released 2.2.1 (is in maven)
davsclaus:1204716419:2008-03-05T19:26:59.676+0000:1204716419:2008-03-05T19:26:59.676+0000:ActiveMQ is set to v4.1.1, is there a reason it can not be upgraded to 5.0.0?
njiang:1204738168:2008-03-06T01:29:28.424+0000:1204738168:2008-03-06T01:29:28.424+0000:Fixed #7, #8, #9, #10 and upgraded ActiveMQ version to 5.0.0.
davsclaus:1205546438:2008-03-15T10:00:38.243+0000:1205546438:2008-03-15T10:00:38.243+0000:#11
In the root pom.xml line #1056 there is a single > char that doesn't seem to have a purpose.

{code}
                      <classpath refid=""etc.path""/>
                    </whichresource>
                    >

                    <mkdir dir=""${full.eclipse.workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings""/>
{code}
davsclaus:1205546917:2008-03-15T10:08:37.213+0000:1205546917:2008-03-15T10:08:37.213+0000:#12
In prereq we could bump maven to 2.0.8

#13
junit can be upgraded to 3.8.2

#14
easymock can maybe be upgraded to 2.3

#15
hsqldb can maybe be upgraded to 1.8.0.9

#16
apache derby has released 10.3.2.1

#17
commons-dbcp has released 1.2.2

#18
commons-pool is on release 1.4 now


njiang:1205695882:2008-03-17T03:31:22.985+0000:1205695882:2008-03-17T03:31:22.985+0000:Done #11  #13, #14, #16, #17, #18 

#12,  If there is a critical bug in maven 2.0.7 for camel build , I don't we need to upgrade the prerequisite's version of maven.
#15,  there is no hsqldb 1.8.0.9 in the maven repository
njiang:1206643550:2008-03-28T02:45:50.669+0000:1206643550:2008-03-28T02:45:50.669+0000:Fixed most of them , and created the CAMEL-403 to keep an eye on http-core upgrading."
0,CAMEL-350,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Cannot Reproduce,1.3.0,Unassigned,Hadrian Zbarcea,0,0,2008-02-29 21:10:49+00:00,2008-05-12 12:45:32+00:00,"FtpRouteTest fails (no messages received)


The reason is that the FtpConsumer.java [line:102] fails to properly retrieve the files from the ftp server, although i can see the file present on the filesystem.  Using listNames instead of listFiles, does return the names of the files present (as expected) but a subsequent listFiles(filename) would return again an empty array.  I did not check the IP packets to see where the problem comes from, but i suspect the issue is with the test server.","janstey:1204481905:2008-03-03T02:18:25.538+0000:1204481905:2008-03-03T02:18:25.538+0000:Hey man, this test works fine for me. I ran it on Windows XP on the command line and in Eclipse. How did you run this and on what platform?

On another note, I noticed that the MINA FtpServer that we're using is a snapshot version.. and its been a snapshot version for all previous camel releases :( 
hadrian:1204485852:2008-03-03T03:24:12.323+0000:1204485892:2008-03-03T03:24:52.705+0000:Yeah, I know.  The funny thing is that it graduated (in Dec iirc) without having a release.  There is still no release for it.  For now, as it was blocking consistently for me I commented out the assert as it was blocking the 1.3 release.  

I spend a couple of hours on it and didn't figure out what was wrong.  I added my findings to the comment in the code.  Did you uncomment the assertIsSatisfied() and it passed?  Hopefully it was just a glitch on my system (so many weird things happened on it lately) and then we can reenable it.


janstey:1204490955:2008-03-03T04:49:15.081+0000:1204490955:2008-03-03T04:49:15.081+0000:Yep, I uncommented the assertion and it passed.
gertvanthienen:1204527027:2008-03-03T14:50:27.327+0000:1204527027:2008-03-03T14:50:27.327+0000:Since the issue was reported last Friday (29/02/2008), it was probably caused by a leap year bug in commons-net (cfr. https://issues.apache.org/jira/browse/NET-188).  We'll have to wait another 4 years for reproducing it ;)
davsclaus:1210567532:2008-05-12T12:45:32.995+0000:1210567532:2008-05-12T12:45:32.995+0000:Closed all 1.3 tickets"
0,CAMEL-349,New Feature,Major,None,None,"
None
",Closed,Won't Fix,None,Unassigned,James Strachan,0,0,2008-02-28 17:56:29+00:00,2011-04-24 10:01:38+00:00,No Desc,"davsclaus:1266494266:2010-02-18T19:57:46.934+0000:1266494266:2010-02-18T19:57:46.934+0000:We have the Camel EL language already, the simple, which already can do this.
davsclaus:1303610498:2011-04-24T10:01:38.438+0000:1303610498:2011-04-24T10:01:38.438+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-348,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-02-27 08:26:46+00:00,2008-05-12 12:45:32+00:00,"e.g. setHeader(""foo"").header(""bar"")","jstrachan:1204075133:2008-02-27T09:18:53.752+0000:1204075133:2008-02-27T09:18:53.752+0000:fixed, see the test case org.apache.camel.processor.SetHeaderUsingDslExpressionsTest in camel-core
davsclaus:1210567532:2008-05-12T12:45:32.977+0000:1210567532:2008-05-12T12:45:32.977+0000:Closed all 1.3 tickets"
0,CAMEL-347,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-02-27 06:41:03+00:00,2008-05-12 12:45:32+00:00,They need to be explicitly enabled in JUEL - see http://juel.sourceforge.net/guide/advanced/index.html,"jstrachan:1204065721:2008-02-27T06:42:01.860+0000:1204065721:2008-02-27T06:42:01.860+0000:patch applied
davsclaus:1210567532:2008-05-12T12:45:32.958+0000:1210567532:2008-05-12T12:45:32.958+0000:Closed all 1.3 tickets"
0,CAMEL-346,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-02-26 23:29:22+00:00,2008-02-29 20:57:37+00:00,"In following code message should go to mock:invalid when invalid message is sent. Currently message is sent nowhere as exceptions in handle() clause are swallowed.



exception(ValidationException.class).to(""mock:invalid"");
                
from(""direct:start"").tryBlock().process(validator).to(""mock:valid"")
    .handle(ValidationException.class).process(validator);",romkal:1204288539:2008-02-29T20:35:39.938+0000:1204288539:2008-02-29T20:35:39.938+0000:Fix commited
0,CAMEL-345,Task,Minor,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Jonathan Anstey,0,0,2008-02-26 18:07:24+00:00,2008-05-12 12:45:32+00:00,No Desc,"njiang:1204154711:2008-02-28T07:25:11.039+0000:1204154711:2008-02-28T07:25:11.039+0000:Applied the patch with thanks to Jonathan.
davsclaus:1210567532:2008-05-12T12:45:32.932+0000:1210567532:2008-05-12T12:45:32.932+0000:Closed all 1.3 tickets"
0,CAMEL-344,Task,Minor,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,Jonathan Anstey,0,0,2008-02-26 17:41:10+00:00,2008-05-12 12:45:32+00:00,No Desc,"jstrachan:1204076422:2008-02-27T09:40:22.117+0000:1204076422:2008-02-27T09:40:22.117+0000:Patch applied with thanks! :)
davsclaus:1210567532:2008-05-12T12:45:32.914+0000:1210567532:2008-05-12T12:45:32.914+0000:Closed all 1.3 tickets"
0,CAMEL-343,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2008-02-26 11:22:57+00:00,2008-05-12 12:45:32+00:00,"There is an inconsistency in exchange properties propagation. To show few examples:





code
test property value at mock:test 
 due to 



from(""direct:start"")
    .setProperty(""test"", ""inStart"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setBody(""test"")
    .setProperty(""test"", ""inSubflow"");

 
 inStart 
 properties are not propagated  back if they were set in super flow 



from(""direct:start"")
    .setProperty(""test"", ""inStart"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setProperty(""test"", ""inSubflow"")
    .setBody(""test"");

 
 inSubflow 
 property is set to new value as  pipeline sends original  exchange to first step of pipeline 



from(""direct:start"")
    .to(""direct:subflow"")
    .to(""mock:test"");
from(""direct:subflow"")
    .setBody(""test"")
    .setProperty(""test"", ""inSubflow"");

 
 inSubflow 
 properties are propagated  back by default 





I believe we should clearly define how properties should be propagated:



should they be kept for the whole flow and every change is visible to sub/super flows, or
should they be visible only in scope of current flow and interaction with sub-flows (invoked by and endpoint) should be done with headers.



I believe that first is easier for users as they have a way to hold some data for further processing (while they are not exposed as protocol specific headers).


If you have another ideas - please advice.","romkal:1204287934:2008-02-29T20:25:34.258+0000:1204287934:2008-02-29T20:25:34.258+0000:Properties are propagated back to super/sub flows. If property gets changed or removed in subflow it is also propagated back to original flow.
davsclaus:1210567532:2008-05-12T12:45:32.894+0000:1210567532:2008-05-12T12:45:32.894+0000:Closed all 1.3 tickets"
0,CAMEL-342,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Unassigned,James Strachan,0,0,2008-02-25 09:25:46+00:00,2008-07-11 04:21:44+00:00,"Support URIs of the form



jms:tempQueue:foo




To refer to a named temporary destination","jstrachan:1208763182:2008-04-21T15:33:02.234+0000:1208763182:2008-04-21T15:33:02.234+0000:You can now use 

{code}jms:temp:queue:foo{code}

to talk to a temporary queue or

{code}jms:temp:topic:bar{code}

to work with a temporary topic
jstrachan:1208763778:2008-04-21T15:42:58.267+0000:1208763778:2008-04-21T15:42:58.267+0000:Updated the documentation: http://cwiki.apache.org/CAMEL/jms.html"
0,CAMEL-341,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Gary Tully,Andrea Chiodoni,0,1,2008-02-21 20:21:35+00:00,2008-03-31 18:40:33+00:00,"Hi I'm using camel 1.3-SNAPSHOT. I don't get the aggregator to work as expected when messages come from a JMS endpoint and sent to a bean. I've tried the following configuration: 


//private static final String ENDPOINT = ""jms:myqueue""; 
private static final String ENDPOINT = ""direct:myqueue""; 


from(ENDPOINT).aggregator(header(""JMSCorrelationId""),new MyAggregatorStrategy()).bean(new SomeBean()); 


With ENDPOINT = ""jms:myqueue"" I get: 


[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:2 (null) 


End with ENDPOINT = ""direct:myqueue"" I get: 


[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:2 
[meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:2, message:3 
[meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1, message:2, message:3 (null) 


Only with ENDPOINT = ""direct:myqueue"" I get the expected behavior. 


I've noticed the AggregatorStrategy even does not get called while using the JMS endpoit. 


I upload the complete sample (sample.zip) 


There is also a second issue I can not explain: on the sample I've tried to use a JMSCorrelationId but printing @Header(name=""JMSCorrelationID"") String correlationID I get ""null"". 


PS: Same sample using 1.2.0, the AggregatorStrategy get called but I loose message 2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2 
[                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3 
[meBean@2cfeb7]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1, message:3 
[meBean@2cfeb7]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1, message:3 (null) 


Andrea","gtully:1204525123:2008-03-03T14:18:43.773+0000:1204525123:2008-03-03T14:18:43.773+0000:adding reference to timeout expiry being ignored issue which can occur with the sample code provided with this issue
gtully:1204527077:2008-03-03T14:51:17.293+0000:1204527077:2008-03-03T14:51:17.293+0000:There are a bunch of interesting issues with the sample:

first, as there is no completedPredicate for the aggregation strategy, the default strategy of reaching the batch size of 100 or the default timeout of 1 second needs to kick in.
With 3 messages, the batch size will never get there so the 1 second timeout will be in effect. With the 5 second delay before sending messages and with the batchTimeout starting once the route is created, so it will already have expired 5 times, CAMEL-352 is sometimes coming in to play.

A workaround (till 352 is committed) is to add a larger batchTimeout interval to the route in the sample code so that the receive does not time out for the duration of the test scenario:

{code}
from(ENDPOINT).aggregator(header(""JMSCorrelationID""),
				new MyAggregatorStrategy()).batchTimeout(20000).bean(new SomeBean());
{code}

In this case, the message batch will be delivered every 20 seconds and can't have timedout before the messages have been submitted by the client. 

second: with the default timeout, the vm broker seems to be re initialised, turning on jmx, I find that the jmx connection is dropped every time a batch is processed, as if the broker is being decommissioned. This needs some more investigation and may be part of the reason there is a jms and an activemq camel component.
With new sessions/connections being created on each batch receive and with the default prefetch size of amq being 100, the first connection consumes all three messages and the next receive does not get any.
Adding a sleep between sends of > 1 second, in the producer(client) and leaving the default batch timeoutOut  of 1 second, will get reliable results also.

In camel-context.xml, it is possible to set the default fetch as a property:

{code:xml}
<bean id=""prefetchPolicy"" class=""org.apache.activemq.ActiveMQPrefetchPolicy"">
    <property name=""queuePrefetch"" value=""1"" />
  </bean>
    
  <!-- lets configure the default ActiveMQ broker URL -->
  <bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
    <property name=""connectionFactory"">
       <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
         <property name=""brokerURL"" value=""vm://localhost?broker.persistent=false&amp;broker.useJmx=true""/>
         <property name=""prefetchPolicy"" ref=""prefetchPolicy""/>
       </bean>   
    </property>
  </bean>
{code}


third: the code uses JMSCorrelationID and JMSCorrelationId, it needs to be JMSCorrelationID (note capital ID)

gtully:1204530111:2008-03-03T15:41:51.335+0000:1204530111:2008-03-03T15:41:51.335+0000:all of the above relates to using the endpoint of the form jms:myqueue

with direct:myqueue, jms is totally out of the picture, the route interaction is through a java.util.Queue as you probably know.
davsclaus:1206843333:2008-03-30T10:15:33.288+0000:1206843333:2008-03-30T10:15:33.288+0000:Gary what is the status of this? CAMEL-352 has been committed.

Is there still a problem? Should it be postponed to be fixed in 1.4 or can we close it?
gtully:1206924400:2008-03-31T08:46:40.971+0000:1206924400:2008-03-31T08:46:40.971+0000:Claus, i think this can be closed as I don't think there is any issue here save CAMEL-352. Andrea should comment that all is ok though.
andrea.chiodoni:1206960033:2008-03-31T18:40:33.310+0000:1206960033:2008-03-31T18:40:33.310+0000:Hi Gary
it was a first of all a problem due to my little knowledge on camel.  
The I also run into CAMEL-352.
The explanation helped me to understand more on CAMEL.
Thanks
Andrea




"
0,CAMEL-340,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Claus Ibsen,0,0,2008-02-17 16:54:37+00:00,2008-05-12 07:48:06+00:00,"See this thread:
http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.html


This builder does not support InOut when a client send a textline to localhost:8888.
The client never receives a response.


url = ""mina:tcp://localhost:8888?textline=true"";
from(uri).process(new Processor() {
                    public void process(Exchange e) 

{
                        String in = e.getIn().getBody(String.class);
                        // append newline at end to denote end of data for textline codec
                        e.getOut().setBody(""Hello "" + in + ""\n"");
                    }

                });


Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)


Using this url instead and the patch then Camel will send a response back to the client:
mina:tcp://localhost:8888?textline=true&sync=true","davsclaus:1203238589:2008-02-17T16:56:29.092+0000:1203238589:2008-02-17T16:56:29.092+0000:The patch
davsclaus:1203238676:2008-02-17T16:57:56.842+0000:1203238676:2008-02-17T16:57:56.842+0000:And the unit tests for the patch.

To demonstrate the original bug use this unit test. It is a test that uses a plain socket client to send a message to Camel and wait for the response.
davsclaus:1203239125:2008-02-17T17:05:25.317+0000:1203239125:2008-02-17T17:05:25.317+0000:Oh I forgot to add code tags.

{code}
url = ""mina:tcp://localhost:8888?textline=true"";
from(uri).process(new Processor() {
    public void process(Exchange e) {
        String in = e.getIn().getBody(String.class); 
        // append newline at end to denote end of data for textline codec
        e.getOut().setBody(""Hello "" + in + ""\n"");
    }
});
{code}
jstrachan:1204076259:2008-02-27T09:37:39.848+0000:1204076259:2008-02-27T09:37:39.848+0000:fancy applying this patch before 1.3.0? 
njiang:1204159783:2008-02-28T08:49:43.643+0000:1204159783:2008-02-28T08:49:43.643+0000:Applied the patch with thanks to Claus"
0,CAMEL-339,Sub-task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-02-17 04:48:57+00:00,2008-05-12 12:45:32+00:00,Need to add new method call for calling the stream message and configure the feature in the ClientFactoryBean.,"njiang:1203963167:2008-02-26T02:12:47.342+0000:1203963167:2008-02-26T02:12:47.342+0000:the patch has be committed
davsclaus:1210567532:2008-05-12T12:45:32.869+0000:1210567532:2008-05-12T12:45:32.869+0000:Closed all 1.3 tickets"
0,CAMEL-338,Sub-task,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-02-17 04:46:57+00:00,2008-05-12 12:45:32+00:00,We could use the cxf feature API to set the server interceptor for working with PAYLOAD and MESSAGE data fromat,"njiang:1203962796:2008-02-26T02:06:36.336+0000:1203962796:2008-02-26T02:06:36.336+0000:The patch is in the svn repository
davsclaus:1210567532:2008-05-12T12:45:32.844+0000:1210567532:2008-05-12T12:45:32.844+0000:Closed all 1.3 tickets"
0,CAMEL-337,Task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,Jonathan Anstey,0,0,2008-02-16 17:17:04+00:00,2008-05-12 12:45:32+00:00,The newest release of the maven-bundle-plugin from Apache Felix is 1.2.0. We should upgrade from 1.1-SNAPSHOT.,"janstey:1203153674:2008-02-16T17:21:14.216+0000:1203153674:2008-02-16T17:21:14.216+0000:The tests pass when I upgraded to 1.2.0. Shall we go ahead with this?

By the way, I have an Apache process question: should I even attach patches for such stupidly simple things like this? ;)
hadrian:1203155035:2008-02-16T17:43:55.454+0000:1203155035:2008-02-16T17:43:55.454+0000:Patch applied with thanks!
No need to post patches for such things :).
davsclaus:1210567532:2008-05-12T12:45:32.197+0000:1210567532:2008-05-12T12:45:32.197+0000:Closed all 1.3 tickets"
0,CAMEL-336,New Feature,Major,None,None,"
None
",Closed,Won't Fix,Future,James Strachan,James Strachan,0,0,2008-02-15 19:23:56+00:00,2010-02-07 09:54:13+00:00,"See http://code.google.com/p/hamcrest/
http://code.google.com/p/hamcrest/wiki/Tutorial


we could make this reuseable in our tests - see 
http://activemq.apache.org/camel/spring-testing.html
http://activemq.apache.org/camel/mock.html","davsclaus:1206654345:2008-03-28T05:45:45.601+0000:1206654345:2008-03-28T05:45:45.601+0000:Lowered priority from critical to major
jstrachan:1210576193:2008-05-12T15:09:53.039+0000:1210576193:2008-05-12T15:09:53.039+0000:I've started a little module with some helper methods. 
http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-hamcrest/

I was hoping we can harvest most of the code from ContextTestSupport and friends and add them to static helper methods or add new Matchers to hamcrest etc. 
davsclaus:1220498650:2008-09-04T11:24:10.566+0000:1220498650:2008-09-04T11:24:10.566+0000:Moving to 2.0"
0,CAMEL-335,Improvement,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Lars Heinemann,0,0,2008-02-15 13:09:12+00:00,2008-05-12 12:48:01+00:00,"It should be possible to configure the behaviour of the mail component. 


see thread: http://www.nabble.com/Problem-with-Camel-Mail-Component-in-Route-td15497818s12049.html#a15497818","davsclaus:1206527056:2008-03-26T18:24:16.217+0000:1206527056:2008-03-26T18:24:16.217+0000:Lars any suggestions for what kind of behavior you want?
lhe:1206578607:2008-03-27T08:43:27.243+0000:1206578607:2008-03-27T08:43:27.243+0000:Claus,

what I would suppose for the camel mail is following:

- configurable behaviour of what to do with a consumed mail (delete or leave)
- configurable behaviour of what to poll from the mail folder (only new messages or all messages etc.)
- attachment handling

I saw that there is already some flag for deleting or not deleting processed messages in the mailconfiguration class. But I do not know if 
it is settable from the DSL...at least there is nothing described at the mail component's web page.

Regards
Lars

jstrachan:1206579206:2008-03-27T08:53:26.709+0000:1206579206:2008-03-27T08:53:26.709+0000:The idea is that individual components or endpoints can be configured; either via the URI, via Java code or Spring - then the DSL just routes between endpoints by URI or by reference. So configuring things like whether to delete mail or not or what to poll would ideally be configuration options on the mail component / endpoint.

Sometimes its easier to configure a component once then reuse that configuration for many endpoints (e.g. for mail or JMS for example you could configure the general behaviour - then have multiple endpoints for different mailboxes all sharing the same configuration).
lhe:1206583617:2008-03-27T10:06:57.430+0000:1206583617:2008-03-27T10:06:57.430+0000:James,

I agree with you that the configuration is the correct point for that. 
Are there samples or some documentation which guides me how to configure the mail component?

Regards,
Lars

davsclaus:1208726630:2008-04-21T05:23:50.355+0000:1208726630:2008-04-21T05:23:50.355+0000:Lars some of the missing options have been added.
There is a option to set if a mail should be DELETED or SEEN.
This option is of course already in Camel 1.2+.

But Camel is definitely missing some of the features you have stated here. We should try to get them in Camel 1.4.
If anyone fancy submitting a patch we would greatly appreciate it.
lhe:1208753198:2008-04-21T12:46:38.468+0000:1208753198:2008-04-21T12:46:38.468+0000:Claus,

recently I did an email binding component for the ServiceMix project.
It already contains the features I spoke of. Maybe you want to have a look at
the code there and try to adapt it for camel.

Regards,
Lars

davsclaus:1208755823:2008-04-21T13:30:23.118+0000:1208755823:2008-04-21T13:30:23.118+0000:Lars,

We / I would love that.
If the code cant be shared at this JIRA you can mail it to my apache accout

davsclaus@apache.org


lhe:1208772546:2008-04-21T18:09:06.885+0000:1208772546:2008-04-21T18:09:06.885+0000:Claus,

ServiceMix is an open source Apache project.
Just have a look at the sources here:
http://svn.apache.org/viewvc/servicemix/smx3/trunk/deployables/bindingcomponents/servicemix-mail/
or use your favourite IDE for subversion :)

If you have questions feel free to contact me at: lhein@apache.org

Regards
Lars

davsclaus:1208810886:2008-04-22T04:48:06.610+0000:1209263185:2008-04-27T10:26:25.744+0000:Lars

Great I will look at ServiceMix and adapt it to Camel. The code looks really good and has some great ideas that Camel could use.

Also needed
- Default port numbers for protocols *DONE*
- Alternative set of parameter for username in URI *DONE*
lhe:1208822717:2008-04-22T08:05:17.341+0000:1208822717:2008-04-22T08:05:17.341+0000:Claus,

first I had a look at the camel-mail if it satisfies my needs, but it doesn't. 
So many things you will see in this component are very similar to the camel component as
I took it as a base reference. So this uri syntax is mainly the same...I just extended it a bit.
The default ports where useful as many mail servers are configured in a standard way regarding the
port settings. So why bother the user to configure it if it's not really needed at all.

If I can help you in some way, just let me know.

Regards,
Lars

davsclaus:1209252870:2008-04-27T07:34:30.807+0000:1209252870:2008-04-27T07:34:30.807+0000:Destinations to be configured as (more intuitive for email):
- TO
- CC
- BCC
davsclaus:1209254504:2008-04-27T08:01:44.651+0000:1209263198:2008-04-27T10:26:38.385+0000:Protocol missing
- imaps *DONE*
davsclaus:1209254810:2008-04-27T08:06:50.755+0000:1209254810:2008-04-27T08:06:50.755+0000:Attachment support added due to CAMEL-385
davsclaus:1209263475:2008-04-27T10:31:15.355+0000:1209272628:2008-04-27T13:03:48.079+0000:Setting subjects is only possible using message header. We need to document this on wiki
davsclaus:1209279485:2008-04-27T14:58:05.326+0000:1209594434:2008-05-01T06:27:14.718+0000:Camel mail should do better logging to aid end-user to identify problems *DONE*
- Logging mails being sent from producer
- Logging mails received on consumer
- Each mail should log: exchange id, message id, from, to, subject, etc.
davsclaus:1209882516:2008-05-04T14:28:36.801+0000:1209882516:2008-05-04T14:28:36.801+0000:Added option for setting a fetch size when consuming mails *DONE*
- fetchSize
davsclaus:1209885430:2008-05-04T15:17:10.000+0000:1209885430:2008-05-04T15:17:10.000+0000:Added option for setting the debugmode of the underlying mail framework *DONE*
- debugMode
davsclaus:1209888474:2008-05-04T16:07:54.080+0000:1209888474:2008-05-04T16:07:54.080+0000:Add the properties configuration from ServiceMix to Camel to configure the underlying java mail framework with options for connection timeout etc. *DONE*
davsclaus:1210394734:2008-05-10T12:45:34.770+0000:1210394734:2008-05-10T12:45:34.770+0000:Lars thanks a lot for the great code from ServiceMix and help you provided here. 
lhe:1210407826:2008-05-10T16:23:46.038+0000:1210407826:2008-05-10T16:23:46.038+0000:Claus,

no problem. You did the job, not me :)

Regards,
Lars
"
0,CAMEL-334,Bug,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-02-13 09:41:22+00:00,2008-05-12 12:45:32+00:00,No Desc,"jstrachan:1202869891:2008-02-13T10:31:31.865+0000:1202869891:2008-02-13T10:31:31.865+0000:patch applied!
davsclaus:1210567532:2008-05-12T12:45:32.172+0000:1210567532:2008-05-12T12:45:32.172+0000:Closed all 1.3 tickets"
0,CAMEL-333,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Freeman Yue Fang,0,0,2008-02-13 09:21:10+00:00,2008-05-12 12:45:32+00:00,No Desc,"njiang:1202931585:2008-02-14T03:39:45.101+0000:1202931585:2008-02-14T03:39:45.101+0000:Patch is applied with thank to Freeman.
davsclaus:1210567532:2008-05-12T12:45:32.152+0000:1210567532:2008-05-12T12:45:32.152+0000:Closed all 1.3 tickets"
0,CAMEL-332,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Aswani Kumar,0,1,2008-02-12 23:55:40+00:00,2008-05-12 12:45:32+00:00,No Desc,"aswin.nair:1202832330:2008-02-13T00:05:30.912+0000:1202832330:2008-02-13T00:05:30.912+0000:CXF component currently does not support JAX WS WebServiceProvider service endpoint.  This would give the ability to route all the data formats defined by specification through Camel.


aswin.nair:1202849379:2008-02-13T04:49:39.586+0000:1202849379:2008-02-13T04:49:39.586+0000:Please find the patch for the changes I have made. 
aswin.nair:1202851399:2008-02-13T05:23:19.353+0000:1202851399:2008-02-13T05:23:19.353+0000:Patch file with full example showing the usage of the Webservice Provider with the client using  JaxWS Dispatch API.
njiang:1203963331:2008-02-26T02:15:31.520+0000:1203963331:2008-02-26T02:15:31.520+0000:Patch is applied with thank to Aswani
davsclaus:1210567532:2008-05-12T12:45:32.132+0000:1210567532:2008-05-12T12:45:32.132+0000:Closed all 1.3 tickets"
0,CAMEL-331,New Feature,Major,None,None,"
None
",Closed,Duplicate,2.0-M2,Unassigned,James Strachan,0,0,2008-02-12 16:00:25+00:00,2009-11-21 11:57:54+00:00,See the browsable endpoint feature for details of how it'd work,"davsclaus:1240019470:2009-04-18T09:51:10.248+0000:1240019470:2009-04-18T09:51:10.248+0000:James have added the new camel-web console that has this feature.
davsclaus:1258775874:2009-11-21T11:57:54.256+0000:1258775874:2009-11-21T11:57:54.256+0000:Closing all 2.0M2 tickets"
0,CAMEL-330,New Feature,Major,1.2.0,Future,"
None
",Open,Unresolved,Future,Unassigned,Hadrian Zbarcea,0,1,2008-02-12 14:51:49+00:00,2017-04-10 14:11:45+00:00,"In the current version a conversion is attempted on a best effort basis.


An endpoint does not have knowledge about the data types supported by the previous or next endpoint in the route.  If an endpoint would publish what data types it supports, static analysis would be possible to determine if messages could be processed successfully or additional type converters are necessary.","bruno.borges:1287461442:2010-10-19T12:10:42.791+0000:1287461442:2010-10-19T12:10:42.791+0000:In Apache Wicket there was a time where people thought adding Generics support would be great. In the end it became a nightmare. 

This feature should add the possibility to static type data while keeping the current behaviour of best effort on convertions.

Two possibilities: annotations and generics.

IMO, annotations would be better, even though it wouldn't avoid dynamic types. But at least would better document endpoints/components, and also help runtime checks that could perform better than best effort convertions."
0,CAMEL-329,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-02-12 13:34:31+00:00,2008-05-12 12:45:32+00:00,"Please see the discussion below
http://www.nabble.com/%22cxf%22-name-conflict-in-the-spring-context-td15427019s22882.html",davsclaus:1210567532:2008-05-12T12:45:32.106+0000:1210567532:2008-05-12T12:45:32.106+0000:Closed all 1.3 tickets
0,CAMEL-328,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-02-12 12:02:57+00:00,2008-05-12 12:45:32+00:00,No Desc,"jstrachan:1202791757:2008-02-12T12:49:17.538+0000:1202791757:2008-02-12T12:49:17.538+0000:See the documentation : http://cwiki.apache.org/CAMEL/list.html
davsclaus:1210567532:2008-05-12T12:45:32.086+0000:1210567532:2008-05-12T12:45:32.086+0000:Closed all 1.3 tickets"
0,CAMEL-327,New Feature,Critical,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,James Strachan,0,0,2008-02-11 15:53:38+00:00,2008-05-12 12:45:32+00:00,"e.g. it'd be nice to be able to write a test case as something like...



from(""something"").to(""mock:file://src/test/data"");




Where the mock endpoint is smart enough to spot that its name is a URI - in which case it basically consumes messages from that URI and for each message it receives, it uses that as another assertion on the actual mock endpoint.


i.e. we can use a directory of expected messages as the assertion statements in a test case.


We might want to support some kinda XML message payload, so that we can make assertions on what kinda headers and payloads we expect on the messages. Or maybe we just have some kinda transform in between to strip out any headers we don't care about. Something like...



from(""something"").bean(RemoveSomeHeaders.class).to(""mock:file://src/test/data"");","jstrachan:1202716691:2008-02-11T15:58:11.493+0000:1202716691:2008-02-11T15:58:11.493+0000:Maybe we need to use another kind of endpoint - an 'expects' endpoint.

e.g. then we could do something like...

{code}
// setup the expectations
from(""file://src/test/data"").unmarshall().jaxb().to(""expects:foo"");

// now the actual test case
from(""something"").to(""mock:foo"");
{code}

So that the expects endpoint would look for the related mock endpoint and as a message arrives it'd add a new expectation to the mock?
hadrian:1202718820:2008-02-11T16:33:40.328+0000:1202718820:2008-02-11T16:33:40.328+0000:Hmm, interesting.  This would have to be synchronized somehow too.
jstrachan:1202719956:2008-02-11T16:52:36.819+0000:1202719956:2008-02-11T16:52:36.819+0000:Yeah good point :) I guess we'd hope that the route to the expects endpoint was fast; I wonder if we need some way to say that its 'finished'.

Or maybe we use a kinda modified mock endpoint where input messages are stashed away in a List; then as the expectations arrive they are added to already received messages - or are stashed away for the future or something. i.e. coding the endpoint so that the actual and expected messages could arrive in any order. The only real timeout being that the expectations are met within some timeout value (for both actual and expects messages to be received).
jstrachan:1204066478:2008-02-27T06:54:38.442+0000:1204066478:2008-02-27T06:54:38.442+0000:See the [test endpoint|http://activemq.apache.org/camel/test.html] which pulls messages on startup until there are no more available
davsclaus:1210567532:2008-05-12T12:45:32.065+0000:1210567532:2008-05-12T12:45:32.065+0000:Closed all 1.3 tickets"
0,CAMEL-296,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,James Strachan,0,0,2008-01-18 12:40:53+00:00,2010-07-14 23:39:40+00:00,"When I run a build I see this...


Running org.apache.camel.example.spring.IntegrationTest
[                          main] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting
[                          main] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb: display name [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]; startup date [Fri Jan 18 12:34:29 GMT 2008]; root of context hierarchy
[                          main] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from file [/workspace/java/camel/examples/camel-example-spring/target/classes/META-INF/spring/camel-context.xml]
[                          main] ClassPathXmlApplicationContext INFO  Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]: org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9
[                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'org.apache.camel.example.spring.MyRouteBuilder' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[                          main] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9: defining beans [camel:beanPostProcessor,camel,jms,agent,mbeanServer,registry,serverConnector]; root of factory hierarchy
[                          main] InstrumentationProcessor       WARN  Could not register CamelContext MBean
javax.management.InstanceAlreadyExistsException: org.apache.camel:context=stracbook.local/camel,name=context
        at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936)
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337)
        at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497)
        at org.apache.camel.management.InstrumentationAgentImpl.registerMBeanWithServer(InstrumentationAgentImpl.java:186)
        at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:119)
        at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:102)
        at org.apache.camel.management.InstrumentationLifecycleStrategy.onContextCreate(InstrumentationLifecycleStrategy.java:53)
        at org.apache.camel.management.InstrumentationAgentImpl.doStart(InstrumentationAgentImpl.java:157)
        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)
        at org.apache.camel.spring.SpringInstrumentationAgent.afterPropertiesSet(SpringInstrumentationAgent.java:39)","hzbarcea:1200989070:2008-01-22T16:04:30.629+0000:1200989070:2008-01-22T16:04:30.629+0000:Conflicting spring definitions in the example spring xml caused this error.
davsclaus:1210567530:2008-05-12T12:45:30.991+0000:1210567530:2008-05-12T12:45:30.991+0000:Closed all 1.3 tickets"
0,CAMEL-295,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,James Strachan,1,0,2008-01-18 09:32:24+00:00,2010-07-14 23:39:14+00:00,"e.g. something like



<camelContext ...>
  <routeBuilderRef ref=""someBean""/>
  <routeBuilderRef ref=""anotherBean""/>
  ...","jstrachan:1202204195:2008-02-05T17:36:35.363+0000:1202204195:2008-02-05T17:36:35.363+0000:Have committed the code for this - though this test case still doesn't work. Am not totally sure why not :)

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteBuilderRefTest.java

hzbarcea:1202252232:2008-02-06T06:57:12.761+0000:1202252232:2008-02-06T06:57:12.761+0000:There were a couple of issues related to spring injection.  JAXB was doing its job just fine.
davsclaus:1210567530:2008-05-12T12:45:30.948+0000:1210567530:2008-05-12T12:45:30.948+0000:Closed all 1.3 tickets"
0,CAMEL-294,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2008-01-18 09:30:52+00:00,2008-05-12 12:45:30+00:00,"Which will dramatically improve JMS performance, while ensuring that we reuse JMS transactions by default


http://www.nabble.com/please-vote-for-SPR-3890-to-improve-Camel%27s-JMS-support-for-both-JMS-transactions-and-efficiency-to13210355s22882.html#a13210355","jstrachan:1200619876:2008-01-18T09:31:16.592+0000:1200619876:2008-01-18T09:31:16.592+0000:As this was a workaround for it...
jstrachan:1200631047:2008-01-18T12:37:27.488+0000:1200631108:2008-01-18T12:38:28.082+0000:Here's the spring issue thats now resolved in 2.5.1

http://jira.springframework.org/browse/SPR-3890?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel


davsclaus:1210567530:2008-05-12T12:45:30.928+0000:1210567530:2008-05-12T12:45:30.928+0000:Closed all 1.3 tickets"
0,CAMEL-293,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Cannot Reproduce,1.3.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2008-01-16 21:14:13+00:00,2010-07-14 23:42:26+00:00,"Trying to get a simple example working where I move any message put on queue
""A"" to queue ""B"".


   public void configure() 

{
       from(""activemq:queue:Foo"").to(""activemq:queue:Bar"");
   }


My camel-context.xml file looks like the following:


 <camelContext useJmx=""true""
xmlns=""http://activemq.apache.org/camel/schema/spring"">
   <package>org.apache.camel.example.spring</package>
 </camelContext>


 <bean id=""activemq"" class=""org.apache.camel.component.jms.JmsComponent"">
 <property name=""connectionFactory"">
   <bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
     <property name=""brokerURL""
value=""vm://localhost?broker.persistent=false""/>
   </bean>
 </property>
 </bean>


I get the following error:


javax.management.MalformedObjectNameException: Could not create ObjectName
from:
org.apache.camel:context=j3g8zc1/camelContext,group=routeBuilder,routeType=routeType,route=[activemq]queue:warwick.134923438,name=route.
Reason: javax.management.MalformedObjectNameException: Invalid character ':'
in value part of property
       at
org.apache.camel.management.CamelNamingStrategy.createObjectName(CamelNamingStrategy.java:213)
       at
org.apache.camel.management.CamelNamingStrategy.getObjectName(CamelNamingStrategy.java:142)
       at
org.apache.camel.management.InstrumentationLifecycleStrategy.onRoutesAdd(InstrumentationLifecycleStrategy.java:74)
       at
org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:312)
...","hzbarcea:1200594618:2008-01-18T02:30:18.378+0000:1200594618:2008-01-18T02:30:18.378+0000:Already fixed in 1.3
davsclaus:1210567530:2008-05-12T12:45:30.261+0000:1210567530:2008-05-12T12:45:30.261+0000:Closed all 1.3 tickets"
0,CAMEL-292,Improvement,Major,None,1.3.0,"
None
",Closed,Won't Fix,1.3.0,Unassigned,Dhiraj Sureshkumar Bokde,0,0,2008-01-15 16:57:43+00:00,2008-10-23 20:02:07+00:00,"A RouteBuilder may need to create Java POJO Beans dynamically and register them in the registry to be accessed from a route using a bean:.. URI, the current Java DSL does not have a method to do so.","jstrachan:1200631386:2008-01-18T12:43:06.860+0000:1200631386:2008-01-18T12:43:06.860+0000:the references are typically to some external [Registry|http://activemq.apache.org/camel/registry.html] such as JNDI or Spring.

However if a RouteBuilder wants to use its own bean inside the DSL just use the bean() method.

{code}
from(""activemq:myQueue"").bean(new MyBean()).to(""activemq:anotherQueue"");
{code}

or

{code}
from(""activemq:myQueue"").bean(MyBean.class).to(""activemq:anotherQueue"");
{code}

The main thing is, its not really that easy to register a new bean in, say, Spring - so am tempted to leave thing as they are. Would that be ok with you?


jstrachan:1200631446:2008-01-18T12:44:06.906+0000:1200631446:2008-01-18T12:44:06.906+0000:See if my explanation in my previous comment is acceptable - if not, let us know and we can reopen
davsclaus:1215297310:2008-07-06T06:35:10.274+0000:1215297310:2008-07-06T06:35:10.274+0000:Closing 1.4 issues"
0,CAMEL-291,Improvement,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Przemyslaw Budzik,0,0,2008-01-15 14:45:56+00:00,2010-07-14 23:39:38+00:00,"Probably it would be useful to have recipientList that in InOut mode doesn't work as a pipeline. I faced that problem, however InOnly is ok. It seems 
in InOut it reminds of RoutingSlip. Optionally we could use MulticastProcessor to process ""recipients"". If you think it makes sense, attached patch enhances camel-core with such feature.","jstrachan:1200632202:2008-01-18T12:56:42.771+0000:1200632202:2008-01-18T12:56:42.771+0000:Great stuff - any chance you could remove and re-attach the patch clicking the ""Grant to ASF"" button so we can use this patch? e.g. [see this page|https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=26299], its not granted
pbudzik:1200632969:2008-01-18T13:09:29.410+0000:1200632969:2008-01-18T13:09:29.410+0000:Granted. Sorry for inconvenience.
hadrian:1202477951:2008-02-08T21:39:11.366+0000:1202477951:2008-02-08T21:39:11.366+0000:Przemyslav,

I decided to not apply the patch and fix the RecipientList instead.  The change is similar to your patch with the only notable change that I used multicast with a UseLatestAggregationStrategy to preserve the previous semantics.  That is it works as expected for in only and as before for in/out(s) - last result is returned.  Currently the strategy is hardcoded and I don't see a serious reason to make it pluggable as one could use multicast for that.  If you disagree please reopen the issue and comment.

That said, you get credit both for spotting this and for the patch.  Thanks and keep them coming!
davsclaus:1210567530:2008-05-12T12:45:30.218+0000:1210567530:2008-05-12T12:45:30.218+0000:Closed all 1.3 tickets"
0,CAMEL-290,Bug,Trivial,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2008-01-15 09:28:51+00:00,2008-05-12 12:45:30+00:00,patch and summary explains everything,"hzbarcea:1200489694:2008-01-16T21:21:34.350+0000:1200489694:2008-01-16T21:21:34.350+0000:Roman, could you please grant license to ASF if you want the patch applied? Thanks!
romkal:1200552419:2008-01-17T14:46:59.708+0000:1200552419:2008-01-17T14:46:59.708+0000:Granted
hzbarcea:1200571485:2008-01-17T20:04:45.290+0000:1200571485:2008-01-17T20:04:45.290+0000:Patch applied with thanks!  Keep them coming.
davsclaus:1210567530:2008-05-12T12:45:30.198+0000:1210567530:2008-05-12T12:45:30.198+0000:Closed all 1.3 tickets"
0,CAMEL-289,Task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-01-14 08:44:42+00:00,2008-05-12 12:45:30+00:00,"cxfEndpoint.xsd's the name space is http://activemq.apache.org/camel/schema/cxfEndpoint , we need to put it into this url.
BTW you can find the cxfEndpoint.xsd here 
https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd","njiang:1204787653:2008-03-06T15:14:13.273+0000:1204787653:2008-03-06T15:14:13.273+0000:In Camel 1.2 we point to cxfEndpoint schema with this url[1]
Now we need to update the schema file to this url[2]for automatic deploying

So we need to put the file into this two url[1][2] for supporting  both the Camel 1.2 and 1.3 

[1]http://activemq.apache.org/camel/schema/cxf/cxfEndpoint.xsd
[2]http://activemq.apache.org/camel/schema/cxfEndpoint/camel-cxf.xsd
njiang:1205102498:2008-03-10T06:41:38.638+0000:1205102498:2008-03-10T06:41:38.638+0000:I just commit a python script which can copy the m2 snapshot xsd into the web site.
Here is script url
https://svn.apache.org/repos/asf/activemq/scripts/copy_camel_snapshot_xsd.py
njiang:1205385485:2008-03-13T13:18:05.341+0000:1205385485:2008-03-13T13:18:05.341+0000:I just committed a second version of python script that copy the snapshot xsd. Now we can call the python script from bash. 
njiang:1205437154:2008-03-14T03:39:14.606+0000:1205437154:2008-03-14T03:39:14.606+0000:The script is working now :)
davsclaus:1210567530:2008-05-12T12:45:30.176+0000:1210567530:2008-05-12T12:45:30.176+0000:Closed all 1.3 tickets"
0,CAMEL-288,Improvement,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-01-13 12:23:01+00:00,2008-05-12 12:45:30+00:00,"I have a use case , the router configuration could like this


               from(""direct:a"").multicast().to(""direct:x"", ""direct:y"", ""direct:z"");              
               from(""direct:x"").process(new AppendingProcessor(""x"")).to(""direct:aggregater"");
               from(""direct:y"").process(new AppendingProcessor(""y"")).to(""direct:aggregater"");
               from(""direct:z"").process(new AppendingProcessor(""z"")).to(""direct:aggregater"");
                             from(""direct:aggregater"").aggregator(header(""cheese""), new BodyAggregatingStrategy()).
                        completedPredicate(header(""aggregated"").isEqualTo(3)).to(""mock:result"");


Now I send the message to endpoint ""direct:a"" and I want to get the final result of the processors.


And this requirement  is much like the CAMEL-260.","njiang:1200198347:2008-01-13T12:25:47.179+0000:1200198347:2008-01-13T12:25:47.179+0000:We can get the out result by specifying aggregation strategy for multicast processor.
njiang:1200198677:2008-01-13T12:31:17.194+0000:1200198677:2008-01-13T12:31:17.194+0000:The patch is in the svn repository now.
davsclaus:1210567530:2008-05-12T12:45:30.133+0000:1210567530:2008-05-12T12:45:30.133+0000:Closed all 1.3 tickets"
0,CAMEL-287,Task,Major,1.2.0,None,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2008-01-13 08:10:55+00:00,2008-05-12 12:45:30+00:00,"I just checked the kit of apache camel, found the pom.xml in the apach-camel module is missing some modules which were added few month ago.
The missing modules are camel-csv, camel-groovy, camel-jcr, camel-jhc,  ...","njiang:1200197617:2008-01-13T12:13:37.637+0000:1200197617:2008-01-13T12:13:37.637+0000:The patch is in the svn repository now.
davsclaus:1210567530:2008-05-12T12:45:30.114+0000:1210567530:2008-05-12T12:45:30.114+0000:Closed all 1.3 tickets"
0,CAMEL-286,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Wilson Freitas,0,1,2008-01-11 17:08:07+00:00,2008-05-12 12:45:30+00:00,"When an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.


Example code:


----JAVA-BEGIN---------------------------------------------------------
//This code works
from(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI)); 


// This code crashes (same problem with seda and log endpoints)
String anyEndpoint = ""activemq:someQueue"";
----JAVA-END---------------------------------------------------------


from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); 


----EXCEPTION-BEGIN-----------------------------------
09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault
        at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137)
        at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)
        at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71)
        at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
        at org.mortbay.jetty.Server.handle(Server.java:313)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)
Caused by: java.lang.NullPointerException
        at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025)
        at org.apache.commons.io.IOUtils.copy(IOUtils.java:999)
        at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39)
        ... 32 more 
----EXCEPTION-END-----------------------------------


Known workaround:


Change the code like this:


----JAVA-BEGIN---------------------------------------------------------
        String anyEndpoint = ""activemq:someQueue"";


        from(StringUtils.join(cxfRouterURI)).process(new Processor(){
			public void process(Exchange exchange) throws Exception 

{
				exchange.setOut(exchange.getIn());
			}

        }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));
----JAVA-END---------------------------------------------------------","njiang:1200093988:2008-01-12T07:26:28.143+0000:1200093988:2008-01-12T07:26:28.143+0000:The patch has been committed to trunk.
davsclaus:1210567530:2008-05-12T12:45:30.089+0000:1210567530:2008-05-12T12:45:30.089+0000:Closed all 1.3 tickets"
0,CAMEL-285,New Feature,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,1,1,2008-01-08 09:52:06+00:00,2008-05-12 12:45:30+00:00,"So that we can browse the available messages such as on a message queue, in a file system, on a HTTP server etc Useful for management really","jstrachan:1202791111:2008-02-12T12:38:31.706+0000:1202791111:2008-02-12T12:38:31.706+0000:We have an optional BrowseableEndpoint interface that an Endpoint can implement now.

so you can browse the endpoints and their messages via this code

{code}
List<BrowsableEndpoint> list = CamelContextHelper.getSingletonEndpoints(context, BrowsableEndpoint.class);
{code}

then call the getExchanges() method.



davsclaus:1210567530:2008-05-12T12:45:30.047+0000:1210567530:2008-05-12T12:45:30.047+0000:Closed all 1.3 tickets"
0,CAMEL-284,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,James Strachan,2,1,2008-01-08 09:48:06+00:00,2008-06-05 08:57:10+00:00,"Maybe with a screen shot of jconsole in action etc. e.g. like the ActiveMQ page...


http://activemq.apache.org/jmx.html","davsclaus:1210623233:2008-05-13T04:13:53.915+0000:1210623233:2008-05-13T04:13:53.915+0000:CAMEL-508 introduces a new feature for JMX - a system property to alter behavior of which MBeanServer to use
njiang:1211139255:2008-05-19T03:34:15.520+0000:1211139255:2008-05-19T03:34:15.520+0000:Added a wiki page http://cwiki.apache.org/CAMEL/camel-jmx.html
davsclaus:1211341536:2008-05-21T11:45:36.396+0000:1211341536:2008-05-21T11:45:36.396+0000:This is a really cool jmx page you have added Willem. However the jconsole image could use to be cropped so its size isn't so large. 
njiang:1211352898:2008-05-21T14:54:58.636+0000:1211352898:2008-05-21T14:54:58.636+0000:done. 
It may need to wait a while to sync the wiki page."
0,CAMEL-283,Improvement,Trivial,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Claus Ibsen,0,0,2008-01-05 14:02:28+00:00,2008-05-12 07:48:06+00:00,"The submitted patch have these improvements to the logger in deadletterchannel for delivery attempts



outputs exchange id so we can correlate the lines in the log files.
now also logs when the exchange could not be delivered and was handled by the failure processer (usually a deadletterchannel)
minor issues with existing debug logging when sleeping (now also output millis) to be in line with other similar log lines in Camel



I have not outputted the exchange itself (exchange.toString()) when the delivery could not be delivered successfully since there could be sensitive data in the exchange (e.g. an invoice input message) that we do not want to be logged in our log.


But I think the logging of the exchange id is a good improvement and that they are aligned in the same position in the logline so it's easier to grep/find in the logs when you investigate and incident.","davsclaus:1199513681:2008-01-05T14:14:41.510+0000:1199513681:2008-01-05T14:14:41.510+0000:The patch.

I have faxed and signed the Apache CLA 2-3 years ago (my name is on the list, but I do not recall when the list is on the apache site).
davsclaus:1199513808:2008-01-05T14:16:48.198+0000:1199513808:2008-01-05T14:16:48.198+0000:And a sample of the logging I have tested with:

2008-01-05 15:00:41,140 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. On delivery attempt: 0 caught: java.lang.IllegalArgumentException: Hey I forced this exception to test something

2008-01-05 15:00:42,187 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. On delivery attempt: 1 caught: java.lang.IllegalArgumentException: Hey I forced this exception to test something

And now the new log line where we can see that its moved to the ActiveMQ deadletter channel

2008-01-05 15:00:42,218 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. Handled by the failure processor: sendTo(Endpoint[activemq:queue:dead])

njiang:1200866994:2008-01-21T06:09:54.798+0000:1200866994:2008-01-21T06:09:54.798+0000:patch is applied with thanks."
0,CAMEL-282,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-12-31 15:49:31+00:00,2008-05-12 07:56:36+00:00,For a discussion see: http://www.nabble.com/spliting-iBatis-query-result-tp14499404s22882p14499404.html,jstrachan:1199087838:2007-12-31T15:57:18.747+0000:1199087838:2007-12-31T15:57:18.747+0000:Patch applied to support arrays or Collection objects being sent to the ibatis endpoint
0,CAMEL-281,Improvement,Major,"1.2.0, 1.3.0",1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Steven Marcus,2,0,2007-12-29 23:41:44+00:00,2008-05-12 12:48:46+00:00,"Prefer dependency on unbundled spring jars.


camel-core depends on spring-context
camel-jms depends on spring-jms


Discussion at http://www.nabble.com/pom-dependency-on-%22spring%22-instead-of-%22spring-context%22-et-al.-td14475572s22882.html#a14531049","davsclaus:1208083630:2008-04-13T18:47:10.448+0000:1208083630:2008-04-13T18:47:10.448+0000:Steven

Its quite a work to find out exactly all the spring related dependencies in all the camel components.

There are 40 pom files using spring. So we need a patch that covers all those 40.
davsclaus:1208084157:2008-04-13T18:55:57.632+0000:1208084157:2008-04-13T18:55:57.632+0000:Resolved
camel-core
camel-jms


TODO:
camel-groovy
camel-ibatis
camel-jpa
camel-mail
camel-osgi
camel-ruby
camel-script
camel-spring
camel-sql
camel-stringtemplate
camel-testng
camel-uface
camel-velocity
camel-example-spring
camel-example-spring-xquery
camel-itest-spring-2.0
davsclaus:1208084234:2008-04-13T18:57:14.124+0000:1208084234:2008-04-13T18:57:14.124+0000:Renamed title and target this for 1.4
davsclaus:1208086597:2008-04-13T19:36:37.411+0000:1208086597:2008-04-13T19:36:37.411+0000:I got most of them covered now.
davsclaus:1208086685:2008-04-13T19:38:05.880+0000:1208086685:2008-04-13T19:38:05.880+0000:Some of the components depend on camel-spring, maybe we need to double check that this is really true.
davsclaus:1208121119:2008-04-14T05:11:59.652+0000:1208121119:2008-04-14T05:11:59.652+0000:First cut patch, there could still be some issues. Could Maven super freaks take a look.
njiang:1208125899:2008-04-14T06:31:39.087+0000:1208125899:2008-04-14T06:31:39.087+0000:I am OK for that patch . Claus ,  just a question.
Why do you add dependency of  the spring-aop and spring-tx  in the camel-spring module?

davsclaus:1208126671:2008-04-14T06:44:31.142+0000:1208126671:2008-04-14T06:44:31.142+0000:Willem I think it was because camel-spring needs these to compile. We should take a 2nd look, maybe they are only used for testing. Try removing them and see what happens.
davsclaus:1208170013:2008-04-14T18:46:53.567+0000:1208170013:2008-04-14T18:46:53.567+0000:spring-tx is needed by camel-spring to compile

camel\components\camel-spring\src\main\java\org\apache\camel\spring\spi\TransactionInterceptor.java:[25,39] package org.springframework.transaction does not exist
davsclaus:1208170103:2008-04-14T18:48:23.677+0000:1208170103:2008-04-14T18:48:23.677+0000:And spring-aop is needed by the unit tests

Caused by: java.lang.NoClassDefFoundError: org/springframework/aop/framework/ProxyFactory
davsclaus:1208171918:2008-04-14T19:18:38.533+0000:1208171918:2008-04-14T19:18:38.533+0000:Committed to trunk at rev 647941
davsclaus:1208289595:2008-04-16T03:59:55.254+0000:1208289595:2008-04-16T03:59:55.254+0000:Willem fixed the problem with pom in came-bam.

Bamboo is also happy and it looks like it works. If anyone having trouble then reopen."
0,CAMEL-280,New Feature,Minor,1.3.0,2.0-M1,"
None
",Closed,Duplicate,2.0-M1,Unassigned,Przemyslaw Budzik,0,0,2007-12-28 08:32:06+00:00,2009-10-24 11:16:12+00:00,"I decided to get my hands dirty by taking https://issues.apache.org/activemq/browse/CAMEL-8  I had in mind a feature like this:


from(""...."").dynamicRouter(myRouter);


where myRouter is a class that implements some interface so that it provides a list of endpoints (or one endpoint as well) to send messages to. Of course it creates some room for further improvements like providing Drools integration or another sophisticated routing mechanism based on ""rules"" so to speak. The idea is to have message and depending on its content create destinations dynamically per flow. 
Anyway when expressed by DSL it's quite nice to use (however still the same is doable playing with processors). What do you think about it? Does it make sense?","hzbarcea:1198818079:2007-12-28T13:01:19.185+0000:1198818079:2007-12-28T13:01:19.185+0000:Great initiative!

I think we'll need to think a bit about this one.  AFAIK, the intent behind CAMEL-8 is to support the following scenario:
* client sends message to router (camel)
* camel processes and send to a server, server replies, but the response contains a service url (e.g. a 'createAccount' operation that returns the url for the newly created Account service).  Now the issue is that the new url may be of no use to the client for quite a few reasons, for instance client may not support the protocol - but camel does - or the server may be behind a firewall, accessible to camel, but not to the client)
* camel creates new endpoint and deploys route to the new service, modifies the response to send its own url back to the client
We can implement a control feature in camel to support dynamic creation and deployment of routes.

From looking at your patch, i am not sure how it's different than using a Processor.  Do I miss something?  How is your scenario different from CAMEL-8?

I'll be out for a week, but I'd be more than happy to tackle this one when back.  Happy New Year!
davsclaus:1220498778:2008-09-04T11:26:18.038+0000:1220498778:2008-09-04T11:26:18.038+0000:Moving to 2.0
davsclaus:1235372391:2009-02-23T14:59:51.795+0000:1235372391:2009-02-23T14:59:51.795+0000:We already got it
http://camel.apache.org/dynamic-router.html
"
0,CAMEL-279,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Roman Kalukiewicz,0,0,2007-12-27 10:45:18+00:00,2008-05-12 12:45:30+00:00,Issue described here: http://www.nabble.com/BeanProcessor-multiple-method-invocation-on-same-bean-to14506245s22882.html#a14506245,"njiang:1200522629:2008-01-17T06:30:29.229+0000:1200522629:2008-01-17T06:30:29.229+0000:Applied the patch with thanks to Roman.
jstrachan:1200620356:2008-01-18T09:39:16.121+0000:1200620356:2008-01-18T09:39:16.121+0000:I was wondering if a neater solution would be that whenever we use code like this...

{code}
beanRef(""someBeanName"", ""someMethodName"")
{code}

that we always use that method name - and ignore the header thats on the message. i.e. if someone really wants a *foo* method to be called in the DSL, we shouldn't magically call some other method just because there's a header (from maybe a previous message exchange or something).

Thoughts?
njiang:1200778700:2008-01-20T05:38:20.304+0000:1200778700:2008-01-20T05:38:20.304+0000:Hi James, 

I agree with you and  just did a quick fix for this , it will be committed soon.

Willem.
romkal:1200794930:2008-01-20T10:08:50.719+0000:1200794930:2008-01-20T10:08:50.719+0000:Hello Guys!

Didn't we just came back to the very beginning of the issue with the patch that was applied?
Because now we explicitly set the {{METHOD_NAME}} header in {{BeanProcessor}} so it affects further invocations and clears the current value of the header (title of this issue ;) ).

I agree with James that we should use the method name provided, but

{code}
setHeader(METHOD_NAME, constant(""bar"")
.beanRef(""someBeanName"", ""foo"")
.beanRef(""someBeanName"")
{code}

should result (I think) with {{foo()}} invocation and then {{bar()}} (from header) while now the header seems to be overridden.

BTW I don't have any access to java on the computer I'm using right now, so it is hard to test it. If I'm wrong - just ignore it. I'm just looking at the mail that describes the latest commit.
njiang:1200858068:2008-01-21T03:41:08.568+0000:1200858068:2008-01-21T03:41:08.568+0000:Hi Roman,

I think there are lots of place can change the Message header  (the sender or the processor).
If you treat the DSL rule as the first class citizen in camel , I think we need to let DSL override the message Header's METHOD_NAME.

Any thoughts?


romkal:1200905211:2008-01-21T16:46:51.606+0000:1200905211:2008-01-21T16:46:51.606+0000:I agree on the fact, that DSL could modify some header, and there is nothing wrong about it. I just think, that in a case I presented in my comment it shouldn't.

the question is: what is the intended behavior of

{code}
beanRef(""someBean"", ""fooMethod"")
{code}

I think, that it is 'execute {{fooMethod()}} on {{someBean}} (and doesn't change current {{METHOD_NAME}} header)', while it is not 'execute {{fooMethod()}} and overwrite {{METHOD_NAME}} so all next invocations will execute {{fooMethod()}}'.

Maybe it is my misunderstanding of the concept, but I believe, that from external point of view {{BeanProcessor}} shouldn't change {{METHOD_NAME}} header.

I assume that internally it could change this header, but I can imagine a bean that tries to use {{@Header(METHOD_NAME)}} annotation - should it be given it's own method name, or original value of {{METHOD_NAME}} header? I believe that the second answer is 'more' correct (but I'm not 100% convinced).

What I describe is only my thoughts - if we assume that it should work the way it does now, then let's document it and we are done. I just think, that it is not working in a way I would expect it to.

hadrian:1202497828:2008-02-09T03:10:28.867+0000:1202497828:2008-02-09T03:10:28.867+0000:I think Roman's right.  The effects of an invocation 
{code:java}
beanRef(""someBeanName"", ""someMethodName"").
beanRef(""someBeanName"")
{code}
should not extend beyond its scope.  For the second call one should either explicitly define the method to be invoked or to rely on the request made by the caller via the METHOD_NAME header.  I updated the code to reflect this behavior.
hadrian:1202497897:2008-02-09T03:11:37.105+0000:1202497897:2008-02-09T03:11:37.105+0000:Roman, before I close this bug, could you please grant Apache license for inclusion of your patch (which Willem already applied).  Thanks!
romkal:1202562800:2008-02-09T21:13:20.999+0000:1202562800:2008-02-09T21:13:20.999+0000:License granted.

But have in mind that this patch is my original proposal. It *always* looks at the {{METHOD_NAME}} header, while it should look there only if there is no method explicitily specified on an endpoint (see James comment at the very beginning)
hadrian:1202579687:2008-02-10T01:54:47.595+0000:1202579687:2008-02-10T01:54:47.595+0000:Roman, I was aware of that, thanks for pointing it out.  Camel already behaves and James suggested.  My last patch addresses your comment that there should be no side effects if a method name is explicitly defined as per James' comment.  Please see my comment above.  I think this issue can now be closed to everybody's satisfaction.
davsclaus:1210567530:2008-05-12T12:45:30.023+0000:1210567530:2008-05-12T12:45:30.023+0000:Closed all 1.3 tickets"
0,CAMEL-278,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,JÃ©rÃ´me Delagnes,0,0,2007-12-26 13:30:52+00:00,2008-05-12 12:45:29+00:00,"http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsd
http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsd


There's no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/","jstrachan:1200632008:2008-01-18T12:53:28.105+0000:1200632008:2008-01-18T12:53:28.105+0000:Many thanks for the JIRA and patch. This was an easy fix so I fixed it without the patch.

Next time you submit a patch file could you please click on the ""Grant license to ASF for inclusion in ASF work"" button please?

Keep up the great work - thanks!
davsclaus:1210567529:2008-05-12T12:45:29.993+0000:1210567529:2008-05-12T12:45:29.993+0000:Closed all 1.3 tickets"
0,CAMEL-277,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,JÃ©rÃ´me Delagnes,0,0,2007-12-26 13:16:52+00:00,2010-07-14 23:39:19+00:00,"TheadType is missing in org/apache/camel/model/jaxb.index => JAXB don't know how to unmarshall thread.


Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html","hzbarcea:1200521622:2008-01-17T06:13:42.164+0000:1200521622:2008-01-17T06:13:42.164+0000:Hi Jerome, could you please grant license to ASF for patch inclusion? Thanks!

jstrachan:1200631786:2008-01-18T12:49:46.367+0000:1200631786:2008-01-18T12:49:46.367+0000:since it was such a trivial fix, I just went ahead and added that string myself without using the patch :)
davsclaus:1210567529:2008-05-12T12:45:29.346+0000:1210567529:2008-05-12T12:45:29.346+0000:Closed all 1.3 tickets"
0,CAMEL-276,New Feature,Major,1.3.0,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Przemyslaw Budzik,0,0,2007-12-25 16:24:04+00:00,2010-07-14 23:39:36+00:00,"New component proposal for dealing with streams (System.in,System.err,System.out). It might be very usable for testing/prototyping purposes eg.  to be able to get some input from System.in and pass it through the workflow  or maybe to ""wiretap"" some exchange to System.out in order to have some debug output on the console. Simple thing, but hopefully could enrich Camel components stack somehow","njiang:1200527050:2008-01-17T07:44:10.422+0000:1200527050:2008-01-17T07:44:10.422+0000:Patch has been applied with thanks to Przemyslaw. 

BTW, 
Please use svn diff to generate the patch , there is a bug which will generate the different file twice in the svn tortoises if you create a patch for new added directory.
hzbarcea:1200549012:2008-01-17T13:50:12.569+0000:1200549012:2008-01-17T13:50:12.569+0000:Przemyslaw, could you please grant ASF license to include this patch?  I will let it in for now, but we'd have to back it out if this is not addressed.  Thanks a lot and keep them coming!
pbudzik:1200550158:2008-01-17T14:09:18.498+0000:1200550158:2008-01-17T14:09:18.498+0000:ASF licence has been granted and I've attached the new version. 
hzbarcea:1200588286:2008-01-18T00:44:46.566+0000:1200588286:2008-01-18T00:44:46.566+0000:Patch applied with thanks!
jstrachan:1207001318:2008-04-01T06:08:38.437+0000:1207001318:2008-04-01T06:08:38.437+0000:I took a stab at some initial documentation...

http://cwiki.apache.org/CAMEL/stream.html

feel free to add improvements :)
davsclaus:1207021764:2008-04-01T11:49:24.582+0000:1207021764:2008-04-01T11:49:24.582+0000:How the stream header really works should be better documented, maybe with a java snippet example
davsclaus:1207021869:2008-04-01T11:51:09.795+0000:1207021869:2008-04-01T11:51:09.795+0000:I created a subtask for the doc improvements
pbudzik:1207022072:2008-04-01T11:54:32.755+0000:1207022072:2008-04-01T11:54:32.755+0000:


I'm gonna look at it and add something soon :)

davsclaus:1210567529:2008-05-12T12:45:29.324+0000:1210567529:2008-05-12T12:45:29.324+0000:Closed all 1.3 tickets"
0,CAMEL-275,Improvement,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Freeman Yue Fang,0,0,2007-12-25 08:27:20+00:00,2008-05-12 12:45:29+00:00,"when cxf bus init, all tranports module on the classpath should register itself to the bus automatically.
cxf machenism for this is just add a spring bean to describe the transport id and transport factory class mapping per as below
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:foo=""http://cxf.apache.org/configuration/foo""
       xsi:schemaLocation=""
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"">


    <bean class=""org.apache.camel.component.cxf.transport.CamelTransportFactory"" lazy-init=""true"">
        <property name=""bus"" ref=""cxf""/>
        <property name=""transportIds"">
            <list>
              <value>http://cxf.apache.org/transports/camel</value>
            </list>
        </property>
    </bean>
</beans>","ffang:1198542573:2007-12-25T08:29:33.680+0000:1198608964:2007-12-26T02:56:04.221+0000:files affected

M      src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java
M      src/test/java/org/apache/camel/component/cxf/transport/CamelTestSupport.java
M      src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java
A      src/main/resources/META-INF/cxf
A      src/main/resources/META-INF/cxf/cxf-extension-camel.xml
A      src/main/resources/META-INF/cxf/cxf.extension
M      src/main/resources/bus-extensions.xml



gnodet:1199408386:2008-01-04T08:59:46.874+0000:1199408386:2008-01-04T08:59:46.874+0000:Sending        camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java
Adding         camel-cxf/src/main/resources/META-INF/cxf
Adding         camel-cxf/src/main/resources/META-INF/cxf/cxf-extension-camel.xml
Adding         camel-cxf/src/main/resources/META-INF/cxf/cxf.extension
Sending        camel-cxf/src/main/resources/bus-extensions.xml
Sending        camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java
Sending        camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelTestSupport.java
Transmitting file data ......
Committed revision 608777.
davsclaus:1210567529:2008-05-12T12:45:29.301+0000:1210567529:2008-05-12T12:45:29.301+0000:Closed all 1.3 tickets"
0,CAMEL-274,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Przemyslaw Budzik,0,0,2007-12-24 13:11:51+00:00,2010-07-14 23:39:06+00:00,Bug in AggregatorType which makes setBatchTimeout method unusable if setBatchSize is not set before.,"hzbarcea:1200517913:2008-01-17T05:11:53.269+0000:1200517913:2008-01-17T05:11:53.269+0000:Nice catch Przemyslaw!

You didn't grant ASF license to apply this patch.  Do you mind doing it?  Thanks a bunch!
hzbarcea:1200557119:2008-01-17T16:05:19.746+0000:1200557119:2008-01-17T16:05:19.746+0000:Patch applied with thanks!
davsclaus:1210567529:2008-05-12T12:45:29.261+0000:1210567529:2008-05-12T12:45:29.261+0000:Closed all 1.3 tickets"
0,CAMEL-273,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Guillaume Nodet,Guillaume Nodet,0,0,2007-12-20 13:49:14+00:00,2008-05-12 07:56:36+00:00,"A workaround seems to be
   delayer(constant(new Long(0)), 3000)","gnodet:1198129897:2007-12-20T13:51:37.639+0000:1198129897:2007-12-20T13:51:37.639+0000:Sending        camel-core/src/main/java/org/apache/camel/model/DelayerType.java
Sending        camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java
Sending        camel-core/src/test/java/org/apache/camel/processor/DelayerTest.java
Transmitting file data ...
Committed revision 605931."
0,CAMEL-272,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,Christian Schneider,0,0,2007-12-19 22:32:01+00:00,2008-05-23 19:18:18+00:00,"After my first smaller rework in issue camel-262 I now completely reworked the file component to remove any cyclic references and clean up the code.


The first thing I did was separating the FileComponent from the other classes in package file by moving them to a new package .impl. This way I was able to remove the cycle between the strategy package and the file package.


The second step was to move all config data from FileEndPoint to a new class FileEndPointConfig. This way I was able to remove the cycle between FileEndPoint, FileProducer and FileConsumer.


Next I removed FileMessage and FileExchange and instead relied on the default objects. The file is simply stored in DefaultMessage.body. There was even a comment in the code asking if FileExchange was necessary before. So I hope this is ok?


I had to adapt the tests to the new structure but only changed the tests where it was absolutely necessary. All tests run fine.


What do you think?","hzbarcea:1201110934:2008-01-24T01:55:34.258+0000:1201110934:2008-01-24T01:55:34.258+0000:Christian, is the FileEndpointConfig class missing from the patch?

cschneider:1201589917:2008-01-29T14:58:37.427+0000:1201589917:2008-01-29T14:58:37.427+0000:Hi Hadrian,

sorry that I reply so late. I was on a conference last week and had a bad flue afterwards.

I have created the patchfile like described in the wiki. But I am not so sure it is correct. I have created a new directory impl and the patch looks not correct there. So I have also attached complete copies of the source files in components/file as well as the corresponding tests.

I have also updated my checkout before making the patch and copies so I hope there are no conflicts.

Best regards

Christian
hadrian:1211454859:2008-05-22T19:14:19.319+0000:1211454859:2008-05-22T19:14:19.319+0000:I ended up not using the patch.  I removed the tangle by loading the factory dynamically.  The factory is now pluggable via a strategy.factory.class property.

Christian, thanks for spotting this!
davsclaus:1211486480:2008-05-23T04:01:20.510+0000:1211486480:2008-05-23T04:01:20.510+0000:Hadrian. Shouldn't we reuse the helper methods on ObjectHelper to load class, create a new instance and invoke methods. It already has the try .. catch handling etc.

ObjectHelper.loadClass
ObjectHelper.newInstance
ObjectHelper.invokeMethod
hadrian:1211524095:2008-05-23T14:28:15.998+0000:1211524095:2008-05-23T14:28:15.998+0000:Fixed per Mr Hawk-Eye's request.  Thanks! :)"
0,CAMEL-271,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Balaji Masur Ravi,0,0,2007-12-19 18:36:15+00:00,2008-05-12 07:56:36+00:00,"In the CxfEndpointBeanDefinitionParser, the list elements being read are cast to com.sun.xml.bind.v2.schemagen.xmlschema.List class which is never true...


Why don't we just leave it as a object or atleast cast it to a java.util.List?


For getting the error just add the following configuration to a cxf endpoint:


  <cxf:cxfEndpoint id=""toEndpoint1"" 
                   address=""http://localhost:9091/GreeterContext/GreeterPort"" 
                   serviceClass=""demo.router.Greeter"">
      <cxf:features>
          <cxfcore:logging/>
      </cxf:features>
  </cxf:cxfEndpoint>


cxfcore points to the ""http://cxf.apache.org/core"" namespace.


I have attached a patch for this problem & would appreciate if someone applied it.


Thanks


Balaji",hzbarcea:1198235184:2007-12-21T19:06:24.953+0000:1198235184:2007-12-21T19:06:24.953+0000:Patch applied with thanks!
0,CAMEL-270,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Axel Hohaus,0,1,2007-12-19 13:50:23+00:00,2008-05-12 12:45:29+00:00,"Found an error in method contains of class org.apache.camel.util.ObjectHelper.
If using an array instead of a collection.


Following line is wrong:
Iterator iter = ObjectConverter.iterator(value);


It should be iterated over collectionOrArray variable.
Correct line is:
Iterator iter = ObjectConverter.iterator(collectionOrArray);


Complete new method is:


public static boolean contains(Object collectionOrArray, Object value) {
    if (collectionOrArray instanceof Collection) 

{
        Collection collection = (Collection)collectionOrArray;
        return collection.contains(value);
    }

 else {
        Iterator iter = ObjectConverter.iterator(value);
        while (iter.hasNext()) {
            if (equal(value, iter.next())) 

{
                return true;
            }

        }
        return false;
    }
}","njiang:1200863333:2008-01-21T05:08:53.590+0000:1200863333:2008-01-21T05:08:53.590+0000:This issue has been fixed with the CAMEL-290
davsclaus:1210567529:2008-05-12T12:45:29.241+0000:1210567529:2008-05-12T12:45:29.241+0000:Closed all 1.3 tickets"
0,CAMEL-269,Improvement,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Donatello Santoro,0,1,2007-12-18 14:58:43+00:00,2008-05-12 12:45:29+00:00,I need to stop a RouteBuilder. A solution for this issue could be access to routeCollection property in RouteBuilder class.,"njiang:1200864833:2008-01-21T05:33:53.534+0000:1200864833:2008-01-21T05:33:53.534+0000:The method is added in the svn repository.
davsclaus:1210567529:2008-05-12T12:45:29.223+0000:1210567529:2008-05-12T12:45:29.223+0000:Closed all 1.3 tickets"
0,CAMEL-268,Bug,Major,"1.2.0, 1.3.0",None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Aaron Crickenberger,0,0,2007-12-18 14:16:34+00:00,2008-05-12 12:45:29+00:00,"apache-camel-1.2.jar's META-INF/services/org/apache/camel/TypeConverter file contained only ""org.apache.camel.converter""
The lastest apache-camel-1.3-SNAPSHOT.jar's file contains only ""org.apache.camel.components.mail""


Apparently, the file should contain the concatenation of all of the sub-component TypeConverter files.


For more info see: http://www.nabble.com/apache-camel-1.3-SNAPSHOT.jar-TypeConverter-to14387417s22882.html",davsclaus:1210567529:2008-05-12T12:45:29.174+0000:1210567529:2008-05-12T12:45:29.174+0000:Closed all 1.3 tickets
0,CAMEL-267,Bug,Minor,"1.3.0, 1.4.0",1.4.0,"
None
",Closed,Fixed,1.4.0,James Strachan,Aaron Crickenberger,0,0,2007-12-17 17:41:57+00:00,2008-07-11 04:26:37+00:00,"The current Bean Expression mechanism doesn't support the use of a Predicate as the Bean/POJO.  The problem is that BeanInfo tries to use matches(Object) instead of matches(Exchange).  If you use the extra ""methodName"" hint, this happens because BeanInfo uses operations.get(name), which will only return the most recently introspected method (potentially the Object one.)  If you don't, then BeanInfo will try to find a method based on the inbound message body type, ignoring methods that take Exchange as a parameter.


This may too esoteric to bother working around?  It's relatively easy to workaround for the common case (match the incoming body), but it's still a little unexpected.  The only thing I can see this preventing is the use of Predicates that are looking at multiple messages at once (eg: comparing delta between in & out messages in an exchange.)","acricken:1202188371:2008-02-05T13:12:51.936+0000:1202188371:2008-02-05T13:12:51.936+0000:CAMEL-320 may solve this issue (it makes the attached test pass, at any rate)
davsclaus:1210623963:2008-05-13T04:26:03.219+0000:1210623963:2008-05-13T04:26:03.219+0000:Aaron. 

Running latest camel trunk with your test case still fails. 
Hence I do not think CAMEL-320 fixed your issue.

{code}
-------------------------------------------------------------------------------
Test set: org.apache.camel.component.bean.PredicateAsBeanTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.531 sec <<< FAILURE!
testSendMessage(org.apache.camel.component.bean.PredicateAsBeanTest)  Time elapsed: 0.375 sec  <<< FAILURE!
junit.framework.ComparisonFailure: bean body: org.apache.camel.component.bean.PredicateAsBeanTest$MyPredicate@197a37c expected:<Wobble> but was:<null>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at org.apache.camel.component.bean.PredicateAsBeanTest.testSendMessage(PredicateAsBeanTest.java:43)
{code}
jstrachan:1210633796:2008-05-13T07:09:56.177+0000:1210633796:2008-05-13T07:09:56.177+0000:I've just added the test case and a fix (to provide Type Converter methods for Predicate or Expression implementations to a Processor)
davsclaus:1210634563:2008-05-13T07:22:43.679+0000:1210634563:2008-05-13T07:22:43.679+0000:Damm James that was clever - using the type converter to do the trick. 
acricken:1210656942:2008-05-13T13:35:42.427+0000:1210656942:2008-05-13T13:35:42.427+0000:Good find!  Thanks for looking into this.
jstrachan:1210658106:2008-05-13T13:55:06.269+0000:1210658106:2008-05-13T13:55:06.269+0000:Claus - you can use the Type Converter stuff do do all kinds of wacky stuff! :)

e.g. here's how we can invoke a JMS MessageListener as a bean in any Camel route...

https://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/camel/converter/InvokeJmsMessageListenerTest.java

we could use a similar trick to integrate with any other 'messaging' API - whether its Servlets, Restlets, JBI, Mule or whatever"
0,CAMEL-266,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,James Strachan,0,0,2007-12-17 11:26:53+00:00,2008-05-12 12:45:29+00:00,"we should be able to easily throw an exception or a SOAP fault from inside a Camel route. e.g. something vaguely like..



from(""foo"").
  filter().xquery(""/foo/bar = 'abc').throwFault().xquery(""<someFaultExpression/>"").end().
  to(""success"");","jstrachan:1204600569:2008-03-04T11:16:09.217+0000:1204600569:2008-03-04T11:16:09.217+0000:Fancy taking a stab?
njiang:1205986870:2008-03-20T12:21:10.521+0000:1205986870:2008-03-20T12:21:10.521+0000:Hi James,

Here is a Unit test in camel-cxf component [1] which shows how to throw a soap fault from the processor. I  don't know if it relate to this JIRA. 
Do we still need to support the DSL style throwFault() method ?

[1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustmerizedExceptionTest.java

Willem
njiang:1205992816:2008-03-20T14:00:16.447+0000:1205992816:2008-03-20T14:00:16.447+0000:I'd like to throwFault like this
 from(""cxf:consumer"").filter().xquery(""/foo/bar = 'abc').throwFault(""ExceptionMessage"").end().to(""success""); 
or 
SoapFault fault = new SoapFault();
//setting the fault message

from(""cxf:consumer"").filter().xquery(""/foo/bar = 'abc').throwFault(fault).end().to(""success""); 
njiang:1206320449:2008-03-24T09:00:49.366+0000:1206320449:2008-03-24T09:00:49.366+0000:The patch is applied into the svn repository.
davsclaus:1210567529:2008-05-12T12:45:29.151+0000:1210567529:2008-05-12T12:45:29.151+0000:Closed all 1.3 tickets"
0,CAMEL-265,Task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,James Strachan,0,0,2007-12-17 11:19:24+00:00,2008-05-12 07:56:36+00:00,See http://activemq.apache.org/camel/cxf.html,"jstrachan:1197861644:2007-12-17T11:20:44.605+0000:1197861644:2007-12-17T11:20:44.605+0000:Fancy trying to document what CXF support we have so far?
njiang:1198093910:2007-12-20T03:51:50.000+0000:1198093910:2007-12-20T03:51:50.000+0000:Done."
0,CAMEL-264,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,Christian Schneider,0,2,2007-12-16 02:00:22+00:00,2008-07-06 06:30:54+00:00,"Currently spi.LifecycleStrategy depends on impl.RouteContext.
This is bad because the spi is an interface package that should have no dependencies on implementation packages.


The solution is to rename RouteContext to RouteContextImpl, extract an interface class RouteContext from the implementation and put this interface into spi. So spi is self contained.


The other problem is that spi.InstrumentationAgent depends on management.CamelNamingStrategy. In this case I would suggest to simply remove the method getNamingStrategy from the IntrumentationAgent. Instead I add the naming strategy param to the constructor of InstrumentationLifecycleStrategy. So the dependency disappears. Of course this way the naming strategy is no longer part of the spi but I think it is an internal thing anyway. What do you think?


I will attach a patch for the issues.","cschneider:1197741935:2007-12-16T02:05:35.863+0000:1197741935:2007-12-16T02:05:35.863+0000:I have added screenshots that show the dependencies before and after the patch. According to structure 101 the XS value of the tangle in the screenshot dropped from about 5900 to 5100.
cschneider:1197888688:2007-12-17T18:51:28.619+0000:1197888688:2007-12-17T18:51:28.619+0000:My patch was defective. I have removed it. I will try to recreate the patch.
davsclaus:1210677053:2008-05-13T19:10:53.612+0000:1210677053:2008-05-13T19:10:53.612+0000:RouteContext should not have been in the impl package from the start but just in the camel package along side CamelContext and it should have been an interface.

Maybe a refactor could do to extract an interface for RouteContext and a class for DefaultRouteContext in the impl package. Then all spi classes is not dependent on any impl classes.
cschneider:1210775119:2008-05-14T22:25:19.589+0000:1210775119:2008-05-14T22:25:19.589+0000:I tried to do the steps you advised but have some problems with my eclipse. I renamed RouteContext to DefaultRouteContext. Then I did refactor / extract Interface named it RoutceContext, selected all methods and hit Preview. After checking for preconditions I got the above error. Does this also happen to you?

I already tried to recreate the .project file, delete and rebuild my workspace aand reinstall eclipse. I even get this error when I start eclipse on linux instead of windows. Any idea how I can get ahead?
davsclaus:1210795094:2008-05-15T03:58:14.324+0000:1210795094:2008-05-15T03:58:14.324+0000:No I have not tried to do the refactor (yet). 
I assume you are running one of the latest Eclipse versions?

I am using IDEA when coding on the Camel project. I can try it out to see if it can do it.

cschneider:1210801940:2008-05-15T05:52:20.657+0000:1210801940:2008-05-15T05:52:20.657+0000:I have used Eclipse 3.3 and Eclipse 3.4 M7. Both had the same problem. When I tried extract interface on a class with much less references it worked.
davsclaus:1210978047:2008-05-17T06:47:27.507+0000:1210978047:2008-05-17T06:47:27.507+0000:Discussing this on the dev forum for feedback if the plan is accepted.
cschneider:1211033959:2008-05-17T22:19:19.429+0000:1211033959:2008-05-17T22:19:19.429+0000:I have done the refactoring in Netbeans and created a patch. I renamed impl.RouteContext to impl.DefaultRouteContext. Then I extracted the interface spi.RouteContext. The result is the spi does not depend on impl anymore. I think this is an improvement in any case. 

While I analysed the dependencies deeper I realized that spi depends on model and model depends on impl. So spi is still not clean but we should try to solve this in subsequent changes. I would also advise to put the NamingStrategy problem in a separate change. 
cschneider:1211074159:2008-05-18T09:29:19.072+0000:1211074159:2008-05-18T09:29:19.072+0000:I have found one other problem in RouteContext. The method intercept uses the class Interceptor from processor. I think Interceptor should be an interface that should reside in spi. So we could avoid referencing the processor package from spi. What do you think?
cschneider:1211075541:2008-05-18T09:52:21.350+0000:1211075541:2008-05-18T09:52:21.350+0000:When I look into the current Interceptor implementation I think the two main methods that need to be in the interface are process and proceed.  Process can be inherited from Processor but proceed is only declared in the implementation class DelegateProcessor. So I tihnk the clean way to handle this would be to create an interface DelegateProcessor.

public interface DelegateProcessor extends Processor {

	/**
	 * Proceed with the underlying delegated processor
	 */
	public abstract void proceed(Exchange exchange) throws Exception;

}

and an interface Interceptor

public interface Interceptor extends DelegateProcessor {

	public abstract void process(Exchange exchange) throws Exception;

	public abstract Processor getInterceptorLogic();

	public abstract void setInterceptorLogic(Processor interceptorLogic);

}

When we put these to spi and use them instead of the implementations where possible the spi would not depend on processor anymore. As this is no trivial change I think this should be handled in a separate Jira issue. Should I open one?

davsclaus:1211401233:2008-05-22T04:20:33.150+0000:1211401233:2008-05-22T04:20:33.150+0000:Christian great findings.

Yes please open a new ticket for the process/proceed stuff.

I will try to get your patch in the SVN as agreed here:
http://www.nabble.com/RouteContext-to-be-an-interface---CAMEL-264-td17288713s22882.html
davsclaus:1211404396:2008-05-22T05:13:16.539+0000:1211404396:2008-05-22T05:13:16.539+0000:CAMEL-264: Refactored RouteContext to avoid the spi package being dependent on impl package - thanks to Christian Schneider for the patch

Committed revision 659007.
davsclaus:1215297054:2008-07-06T06:30:54.849+0000:1215297054:2008-07-06T06:30:54.849+0000:Closing 1.4 issues"
0,CAMEL-263,Improvement,Major,None,2.0-M1,"
None
",Closed,Won't Fix,2.0-M1,Unassigned,Christian Schneider,0,0,2007-12-15 18:19:16+00:00,2009-10-24 11:16:12+00:00,"Most of the components (except bean and mock) below package components are not referenced from the rest of the camel code. So my suggestion is to move these into a separate maven project that could be called camel-components-standard. The new project will of course include camel_core but camel_core will not need to include the components. 


The only components that are heavily referenced from the rest of the camel_core are bean and mock. These will have to stay in the maven core project of course.


The separation will make understanding the camel core code easier as it gets smaller.","davsclaus:1207992462:2008-04-12T17:27:42.371+0000:1207992462:2008-04-12T17:27:42.371+0000:-1

Then all the people need a lot of more dependent jars to work with Camel.

I would even argue that some of the camel-spring components should be in the core or camel-core and came-spring be merged.
When you combine Camel and Spring gives you the outstanding power.


cschneider:1208008402:2008-04-12T21:53:22.078+0000:1208008402:2008-04-12T21:53:22.078+0000:I donÂ´t mean each component should be in itÂ´s own package. But a package with the basic components could be easily separated from the core. The separation would make sure that no core class references a component class. 
davsclaus:1223630918:2008-10-10T17:28:38.837+0000:1223630918:2008-10-10T17:28:38.837+0000:We will get complications with the build order in maven, as we use the current components extensively in unit testing camel-core itself."
0,CAMEL-262,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Guillaume Nodet,Christian Schneider,0,1,2007-12-15 17:53:40+00:00,2007-12-21 23:45:20+00:00,"I have used structure101 on camel and found some design tangles that are quite easy to resolve.


The first is in impl. Defaultcomponent contains a special case to handle ScheduledPollEndpoint. As they reference each other there is a dependency tangle. I have attached a screenshot from struture101 with current and suggested status.
This is the current code:
if (endpoint instanceof ScheduledPollEndpoint) {
                ScheduledPollEndpoint scheduledPollEndpoint = (ScheduledPollEndpoint)endpoint;
                scheduledPollEndpoint.configureProperties(parameters);
}
My suggestion is to add configureProperties to Endpoint and DefaultEndpoint. So any endpoint offers this useful method. The code is then simpler and the tangle is resolved:
endpoint.configureProperties(parameters);


The second tangle is in components file. The package file and strategy reference each other heavily. I have attached screenshots of the tangle.
This is because The strategies are configured directly in Endpoint (package file). My suggestion is to create a factory inside the package strategy. So there is only on dependency from file to strategy.  Another reason is that the FileProcessStrategy interface is in the strategy package. I think this interface belongs to the package file.  Using these two changes I managed to reduce the dependencies between strategy and file from 12/17 to 8/1. This makes the code much easier to grasp as you can understand the packages separately.


I have attached a patch and screenshots for both issues. 


What do you think?","gnodet:1197868030:2007-12-17T13:07:10.813+0000:1197868030:2007-12-17T13:07:10.813+0000:The patch uses absolute paths for the files instead of relative paths which makes it quite difficult to apply.
Did you use svn diff on your source folder to create it ?
hzbarcea:1197868751:2007-12-17T13:19:11.405+0000:1197868751:2007-12-17T13:19:11.405+0000:You can use `patch -p 3 < patch.txt` from the base dir of your local copy.
cschneider:1197887577:2007-12-17T18:32:57.830+0000:1197887577:2007-12-17T18:32:57.830+0000:Patch with local pathnames
cschneider:1197887696:2007-12-17T18:34:56.092+0000:1197887696:2007-12-17T18:34:56.092+0000:I used the diff from the Eclipse Subversion plugin. I have checked the config in Eclipse but did not find any option to use local path names. So I used svn diff on the command line to create the new patch like you suggested.
gnodet:1197889113:2007-12-17T18:58:33.031+0000:1197889113:2007-12-17T18:58:33.031+0000:Sending        camel-core/src/main/java/org/apache/camel/Endpoint.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java
Adding         camel-core/src/main/java/org/apache/camel/component/file/FileProcessStrategy.java
Deleting       camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategy.java
Adding         camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java
Sending        camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java
Sending        camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java
Sending        components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapEndpoint.java
Sending        pom.xml
Transmitting file data ..........
Committed revision 604966.
acricken:1197915651:2007-12-18T02:20:51.728+0000:1197917721:2007-12-18T02:55:21.350+0000:This seems to have broken (at least) DeleteFileStrategy.  FileStrategySupport defines begin/commit using Endpoint, but the subclasses then define separate methods that use FileEndpoint.  The end result is that FileStrategySupport takes the begin/commit calls, regardless of the subclass being used.  Attached is a patch that changes the interface to use FileEndpoint and adds @Override annotations to ensure the compiler catches something like this next time.
acricken:1197915951:2007-12-18T02:25:51.679+0000:1197917793:2007-12-18T02:56:33.934+0000:Attached is a patch that causes FileDeleteRouteTest to poll every second while sleeping for 4 seconds before calling result.assertIsSatisfied().  This ensures the test will fail if the sent file isn't deleted.
gnodet:1197937067:2007-12-18T08:17:47.986+0000:1197937067:2007-12-18T08:17:47.986+0000:Sending        camel-core/src/main/java/org/apache/camel/component/file/FileProcessStrategy.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/strategy/DeleteFileProcessStrategy.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java
Sending        camel-core/src/main/java/org/apache/camel/component/file/strategy/RenameFileProcessStrategy.java
Sending        camel-core/src/test/java/org/apache/camel/component/file/FileDeleteRouteTest.java
Transmitting file data .....
Committed revision 605128.
cschneider:1198251920:2007-12-21T23:45:20.480+0000:1198251920:2007-12-21T23:45:20.480+0000:Thanks for the fix.  I overlooked this."
0,CAMEL-261,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Freeman Yue Fang,0,0,2007-12-14 05:52:32+00:00,2008-05-12 12:45:29+00:00,"this patch 
1.
@override
    protected boolean useIntrospectionOnEndpoint() 

{
        return false;
    }

to let parameter start with ""soap."" passed in soap endpoint


2. use
WSDLServiceFactory factory = new WSDLServiceFactory(getBus(), getWsdlURL(), getServiceQName());
instead of
WSDLServiceFactory factory = new WSDLServiceFactory(getBus(), getWsdlURL(), null);
so that can pass in servicename to WSDLServiceFactory, in case that more than one service in the wsdl, we can specify the one we want


3. add wait response into CxfProducer, so that if the MEP is not oneway, we can waiting for the response in certain period


4. add more type convert for CxfSoapBinding and CxfBinding, so that we can handle message body more than InputStream .","davsclaus:1197955406:2007-12-18T13:23:26.248+0000:1197955406:2007-12-18T13:23:26.248+0000:In the attached patch the file CxfSoapBinding.java has a Eclipse auto generated catch block where exceptions is swallowed and reported to system err.

Isn't this a problem, exceptions should be handled and logged properly.
ffang:1197956347:2007-12-18T13:39:07.287+0000:1197956347:2007-12-18T13:39:07.287+0000:thanks for pointing out this problem

I will fix it in next patch
njiang:1204160835:2008-02-28T09:07:15.504+0000:1204160835:2008-02-28T09:07:15.504+0000:Added the affects and fix version
davsclaus:1210567529:2008-05-12T12:45:29.131+0000:1210567529:2008-05-12T12:45:29.131+0000:Closed all 1.3 tickets"
0,CAMEL-260,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Roman Kalukiewicz,0,1,2007-12-11 14:54:59+00:00,2008-05-12 12:45:29+00:00,"Idea is described here: http://www.nabble.com/Re%3A-Aggregator-strategies-%28again%29-p13588242.html


Currently splitter as a processor doesn't propagate out message at all so there is no way to use it in InOut scenario.


Patch attached lets you to specify aggregation strategy for splitter so returning messages are aggregated into one response.


Aggregation Strategy works the same way as in aggregator so if there is only one exchange returning then aggregation strategy is not executed at all and the result from that one exchange is used as a result of splitter.","njiang:1200198626:2008-01-13T12:30:26.836+0000:1200198626:2008-01-13T12:30:26.836+0000:The Patch is applied with thanks to Roman.
davsclaus:1210567529:2008-05-12T12:45:29.080+0000:1210567529:2008-05-12T12:45:29.080+0000:Closed all 1.3 tickets"
0,CAMEL-259,Sub-task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Willem Jiang,0,0,2007-12-06 08:40:22+00:00,2008-05-12 12:45:29+00:00,No Desc,"ffang:1200186425:2008-01-13T09:07:05.770+0000:1200186425:2008-01-13T09:07:05.770+0000:we have some tests in servicemix 4 to show how to use cxf camel transport to support ws-* feature in servicemix
[1]http://svn.apache.org/repos/asf/servicemix/smx4/features/trunk/camel/servicemix-camel/src/test/java/org/apache/servicemix/camel/ws/security/WSSecurityTest.java
[2]http://svn.apache.org/repos/asf/servicemix/smx4/features/trunk/camel/servicemix-camel/src/test/java/org/apache/servicemix/camel/ws/policy/WSPolicyTest.java
in those tests, . camel cxf transport just use cxf transport api and can use camel supporting protocol as underlying protocol, for example we can use jetty which is supported by camel, instead of http transport from cxf. So far test for ws-security and ws-policy is done, test for ws-addressing and ws-rm is still in progress, seems we need complete back channel of camel cxf transport in apache camel project.
njiang:1201480675:2008-01-28T08:37:55.972+0000:1201480675:2008-01-28T08:37:55.972+0000:I just added an example to show how to set up a load balancer camel context for the camel transport through the spring configuration.

njiang:1203963575:2008-02-26T02:19:35.569+0000:1203963575:2008-02-26T02:19:35.569+0000:An example has been added.
davsclaus:1210567529:2008-05-12T12:45:29.025+0000:1210567529:2008-05-12T12:45:29.025+0000:Closed all 1.3 tickets"
0,CAMEL-258,Sub-task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Willem Jiang,0,0,2007-12-06 08:35:19+00:00,2010-07-14 23:39:15+00:00,"Support to load camel context from spring configuration for camel transport factory , camel conduit , camel destination.","njiang:1197250041:2007-12-10T09:27:21.905+0000:1197250041:2007-12-10T09:27:21.905+0000:Added the parsers to deal with camel:destination and camel:conduit 's configuration, also included the unit tests for them.
Added j.u.l configuration to make camel-cxf component mvn:run much quiet.

hzbarcea:1197266649:2007-12-10T14:04:09.830+0000:1197266649:2007-12-10T14:04:09.830+0000:Patch applied with thanks!
njiang:1197410707:2007-12-12T06:05:07.320+0000:1197410707:2007-12-12T06:05:07.320+0000:Hi Hadrian,

I think you do not use svn add to the new files in the patch. 
I had to reopen this JIRA.

Here is a tool[1] to avoid this kind of error ;)
http://svn.haxx.se/dev/archive-2003-04/0164.shtml

You can use ""svn st |grep ?""  to find them in you work space.

Thanks,

Willem.

Here are the list of files that you did not add into svn. 
components/camel-cxf/src/test/resources/logging.properties
components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/transport/CamelDestination.xml
components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/transport/CamelConduit.xml
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/AbstractCamelContextBeanDefinitionParser.java
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/CamelDestinationDefinitionParser.java
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/NamespaceHandler.java
components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/CamelConduitDefinitionParser.java
components/camel-cxf/src/main/resources/schema/configuration/camel.xsd
 
hzbarcea:1197437797:2007-12-12T13:36:37.771+0000:1197437797:2007-12-12T13:36:37.771+0000:Files add.  Thanks Willem for noticing that!"
0,CAMEL-257,Bug,Minor,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Bozhong Lin,0,0,2007-12-05 02:28:31+00:00,2008-05-12 12:45:28+00:00,"-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.mina.MinaUdpTest
1578 [AnonymousIoService-1] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
2143 [AnonymousIoService-2] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
3151 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Sent 3 messages
Dec 5, 2007 10:28:57 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.442 sec
Running org.apache.camel.component.mina.MinaFileUdpTest
Dec 5, 2007 10:28:58 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:results] is satisfied
1600 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.842 sec
Running org.apache.camel.component.mina.MinaUdpUsingTemplateTest
495 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
497 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
498 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION, please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling:
java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
        at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)
        at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)
        at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)
        at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)
        at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
        at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
        at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
        at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
        at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
        at java.lang.Thread.run(Thread.java:595)
Dec 5, 2007 10:29:00 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied","davsclaus:1204983568:2008-03-08T21:39:28.045+0000:1204983568:2008-03-08T21:39:28.045+0000:Is fixed in the recent Mina patches
davsclaus:1204983635:2008-03-08T21:40:35.828+0000:1204983635:2008-03-08T21:40:35.828+0000:Apache MINA 2.0 has a much better API where all the allocate and release should be handled internally by itself.
davsclaus:1204983673:2008-03-08T21:41:13.729+0000:1204983673:2008-03-08T21:41:13.729+0000:Is fixed by the latest mina patches that has been comitted
njiang:1205010154:2008-03-09T05:02:34.433+0000:1205010154:2008-03-09T05:02:34.433+0000:The Exception
 Caused by: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.
is still there in the latest trunk.

We still need to so something to fix it :(
davsclaus:1205021764:2008-03-09T08:16:04.601+0000:1205021764:2008-03-09T08:16:04.601+0000:Willem. Yes its potentially a little harder bug to track.

In the roadmap for MINA 2.x they have refactored this so the alloc/release would be much easier for clients. So we might get this for free when we upgrade to Mina 2.0. However it could take a while as Mina has just released the first milestone on 2.0 and we would like to fix it for MINA 1.1 users.

I have tried to track it down but as I had other bugs/improvements in the mina component I did not do a deep debugging.
davsclaus:1205022637:2008-03-09T08:30:37.516+0000:1205022637:2008-03-09T08:30:37.516+0000:The type should be changed from improvement to bug
davsclaus:1205025617:2008-03-09T09:20:17.776+0000:1205025617:2008-03-09T09:20:17.776+0000:Yes got it now.

The hint was here:
http://markmail.org/message/ye7ijfeb4i4j7e2o#query:%22Already%20released%20buffer.%20You%20released%20the%20buffer%20too%20many%20times.%22+page:1+mid:34ud5ugapa5jz2bz+state:results

We should acquire the ByteBuffer in the datagram decoder.

I will attach a patch.
davsclaus:1205026004:2008-03-09T09:26:44.443+0000:1205026004:2008-03-09T09:26:44.443+0000:The patch. Notice that this file also contains parts for the CAMEL-371 patch.

I assume that applying CAMEL-371 and then this patch is the right order.

This fix is just the acquire() stuff in the datagram decoder.
njiang:1205027167:2008-03-09T09:46:07.411+0000:1205027200:2008-03-09T09:46:40.654+0000:Got that , you just added in.acqurie() call after the CAMEL-371 patch.
I need to keep up my speed to catch you patch ;)


davsclaus:1205029226:2008-03-09T10:20:26.324+0000:1205029226:2008-03-09T10:20:26.324+0000:Finally we got this nailed and fixed.
davsclaus:1205029287:2008-03-09T10:21:27.991+0000:1205029287:2008-03-09T10:21:27.991+0000:Sorry for the little mess with all these new JIRAs

I wanted to let 375 be a master and all the others as sub-task but I could not moved the already created bugs as a subtask of 375.
hadrian:1205058140:2008-03-09T18:22:20.247+0000:1205058140:2008-03-09T18:22:20.247+0000:As the patch is already applied could we close this issue?  A test for this patch would be great though! Thanks!



davsclaus:1210567528:2008-05-12T12:45:28.369+0000:1210567528:2008-05-12T12:45:28.369+0000:Closed all 1.3 tickets"
0,CAMEL-256,Improvement,Minor,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-12-04 12:44:20+00:00,2008-05-12 07:56:36+00:00,"XPathBuilder contains namespace() method that can configure namespaces for XPathBuilder but there is no easy way to reuse many namespaces using DSL.
We could use Namespaces object and its xpath() method, but it returns XPathExpression so there is no easy way to set return type.


Applied path adds namespaces() method on XPathBuilder so we can configure it with namespaces provided using DSL.
Another solution would be to change xpath() method on Namespaces class so it returns XPathBuilder, but I'm not sure if it doesn't influence XML configuration.","jstrachan:1196823123:2007-12-05T10:52:03.537+0000:1196823123:2007-12-05T10:52:03.537+0000:BTW have you seen these two test cases that show different ways to reuse namespaces...

* XPathWithNamespaceBuilderFilterTest
* XPathWithNamespacesFilterTest
jstrachan:1196823180:2007-12-05T10:53:00.850+0000:1196823180:2007-12-05T10:53:00.850+0000:Patch applied with thanks Roman! I've also added a helper method to the Namespaces class so you can do

{code}
Namespaces ns = ...;
ns.xpath(""/foo/bar"", String.class);
{code}

i.e. you can specify the result type if you want."
0,CAMEL-255,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-12-04 12:31:11+00:00,2008-05-12 07:56:36+00:00,"Current JMSBinding doesn't allow to send JMS ByteMessage and MapMessage. Natural behavior would be to send those messages if body contains byte[] and Map. Now if you want those messages to be sent you have to create them yourself, that cannot be done easily as messages require JMS session to be created.


Patch applied represents BytesMessage}}s as {{byte[] body.


Moreover when byte[] body arrives it is sent as BytesMessage. When Map body arrives it tries to create MapMessage â€“ if it cannot be created (for example because map elements are not primitives) then if falls back to previous behaviour - creates ObjectMessage.


It means that JMS component is now symmetric â€“ if BytesMessage is received then it is sent as BytesMessage. If MapMessage is received then MapMessage is sent.","jstrachan:1196933850:2007-12-06T17:37:30.280+0000:1196933850:2007-12-06T17:37:30.280+0000:Patch applied with thanks!
davsclaus:1196940744:2007-12-06T19:32:24.096+0000:1196940744:2007-12-06T19:32:24.096+0000:I think the unit test method for testing the bytes is a copy/paste error from the other test. (map)

It is named: testSendMapMessage() in both unit tests (for byte and map).
romkal:1196997414:2007-12-07T11:16:54.044+0000:1196997414:2007-12-07T11:16:54.044+0000:Right! And there is also testConsumeMapMessage() test in bytes, and you're right - copy/paste error ;)

Let's correct it - I don't think it requires a separate patch ;)
jstrachan:1196998080:2007-12-07T11:28:00.099+0000:1196998080:2007-12-07T11:28:00.099+0000:Fixed - on the ConsumeJmsBytesMessageTest - thanks! :)"
0,CAMEL-254,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2007-12-04 09:43:17+00:00,2008-05-12 12:45:28+00:00,"Now there is no way to set http request headers via camel headers while  response headers are available.
This functionality is required when we want to send SOAP request via http component as there is SOAPAction header required.","romkal:1196733345:2007-12-04T09:55:45.749+0000:1196733345:2007-12-04T09:55:45.749+0000:Maybe we should exclude some of headers by default like content-length or host? On the other hand maybe it will be required by someone?
Or maybe some flag?

To show the problem there is a code snippet that could lead to a problem:
{code}
from(""direct:start"").to(""http://host:1234/a"").to(""http://host:1234/b"");
{code}

After first http invocation we have {{content-length}} header set and when we execute the second http endpoint this header is propagated and {{/b}} endpoint is fooled by wrong value in {{content-length}} header.

On the other hand maybe it is a feature we shouldn't worry about -- header set, header used..
gnodet:1196733891:2007-12-04T10:04:51.887+0000:1196733891:2007-12-04T10:04:51.887+0000:We need to worry about that, as basic use case will fail.
There are at least two ways to solve the problem:
  * do not include those http headers in the camel exchange 
  * do not use these headers when building the http request 

I'm thinking we need to implement the second one, as if we don't, requests will be unusable.
But the first option may be interesting to save bandwith and could be controlled by a flag in the uri maybe.

Also, I suppose the same patch should be applied to the camel-jhc component, which uses asynchronous nio.
romkal:1200919385:2008-01-21T20:43:05.059+0000:1200919385:2008-01-21T20:43:05.059+0000:I applied a patch to camel-http and commited it.
I have the same change for camel-jhc, but it is copy/paste code then, as there is no dependency between those two projects.
romkal:1200919422:2008-01-21T20:43:42.291+0000:1200919422:2008-01-21T20:43:42.291+0000:Patches applied
davsclaus:1210567528:2008-05-12T12:45:28.304+0000:1210567528:2008-05-12T12:45:28.304+0000:Closed all 1.3 tickets"
0,CAMEL-253,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-12-03 15:42:45+00:00,2008-05-12 12:45:28+00:00,We should default to CACHE_CONSUMER for non-durable topics until Spring fix their bug then we can use CACHE_CONSUMER by default on all endpoints,"jstrachan:1196673479:2007-12-03T17:17:59.217+0000:1196673479:2007-12-03T17:17:59.217+0000:A workaround is to append your URL as follows

{code}
activemq:topic.Cheese?cacheLevelName=CACHE_CONSUMER
{code}

Though trunk now has a fix so we use CACHE_CONSUMER for non-durable subscriptions on topics.
davsclaus:1210567528:2008-05-12T12:45:28.286+0000:1210567528:2008-05-12T12:45:28.286+0000:Closed all 1.3 tickets"
0,CAMEL-252,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Gert Vanthienen,0,0,2007-11-30 13:48:03+00:00,2010-07-14 23:39:33+00:00,Adding a new component to Camel to access JCR-compliant content repositories (e.g. Apache Jackrabbit),"gertvanthienen:1196401934:2007-11-30T13:52:14.389+0000:1196401934:2007-11-30T13:52:14.389+0000:This is a very basic implementation, which allows a user to add a node in the repository and receive the UUID of the newly created node in the ""out"" message.  Based on Lars Heinemann's code donation to ServiceMix and many thanks to him for helping me test this one.

We probably need to add more features afterwards (full CRUD support, searching/polling for nodes, ...), but at least this is a start.
hzbarcea:1196721310:2007-12-04T06:35:10.991+0000:1196721310:2007-12-04T06:35:10.991+0000:Awsome patch, thanks Gert!
gertvanthienen:1196944973:2007-12-06T20:42:53.106+0000:1196944973:2007-12-06T20:42:53.106+0000:This new patch adds the necessary {{SNIPPET}} comment to be able to show a code example in the JCR component web page.
hzbarcea:1197437995:2007-12-12T13:39:55.434+0000:1197437995:2007-12-12T13:39:55.434+0000:Patch already applied.  Thanks!"
0,CAMEL-251,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,Aaron Crickenberger,0,0,2007-11-29 19:16:53+00:00,2008-05-12 07:56:35+00:00,"RemoteFileConfiguration.toString() displays the file instead of directory (a boolean)


FtpProducer/SftpProducer automagically attempt to reconnect if disconnected/timed-out from their destinations.  This should probably be shared with Consumers, and could maybe done more cleanly using camel's try/catch features, but there you go.


Smarter directory/file building/handling.  This lets you handle URI's like ftp://somehost/somedir, ftp://somehost/somedir/ similarly, avoid putting files in '/' on servers that expose the full filesystem, etc.


More verbose logging.  Stuff like ""what file went where,"" reconnection attempts, etc.","acricken:1196368099:2007-11-30T04:28:19.089+0000:1196368099:2007-11-30T04:28:19.089+0000:Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue)
acricken:1196429517:2007-11-30T21:31:57.940+0000:1196429517:2007-11-30T21:31:57.940+0000:D'oh!  That patch completely broke FtpConsumer and SftpConsumer, and a few unit tests.  I'll have something that fixes those shortly.
acricken:1196430013:2007-11-30T21:40:13.261+0000:1196430013:2007-11-30T21:40:13.261+0000:Reconnect logic was added to FtpConsumer/SftpConsumer.  UriConfigurationTest was re-written to more thoroughly check defaults and file/path parsing.
hzbarcea:1196970759:2007-12-07T03:52:39.239+0000:1196970759:2007-12-07T03:52:39.239+0000:Patch applied.  Excellent work, thanks Aaron!"
0,CAMEL-250,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,Aaron Crickenberger,0,0,2007-11-29 18:39:51+00:00,2008-05-12 07:56:35+00:00,"The use case is a FileConsumer polling a directory that's populated by an FTP server.  Currently, the FileConsumer is almost guaranteed to grab files that aren't complete.  Setting the consumer delay to something large just reduces the likelihood, and requiring external lock files or renaming (though potentially more atomic) seems like too many moving parts.


In an attempt to combat this, I added an isUnchanged() method to FileConsumer that is used similar to isMatched(), along with two properties, unchangedDelay and unchangedSize.  Setting unchangedDelay to eg: 5000 will cause FileConsumer to avoid processing a file until its last modified time is at least 5 seconds in the past.  For large files being copied across a local filesystem, this doesn't always work, because the modified date may be preserved even though the file's not done copying.  Thus, setting unchangedSize to true will cause FileConsumer to avoid processing a file until its filesize remains unchanged across two successive polls.


There's probably a more camel-like way to do this, maybe involving a polling strategy, so that the technique could shared with RemoteFileConsumers, but that made my brain hurt.","acricken:1196367992:2007-11-30T04:26:32.461+0000:1196367992:2007-11-30T04:26:32.461+0000:Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue)
hzbarcea:1196721278:2007-12-04T06:34:38.943+0000:1196721278:2007-12-04T06:34:38.943+0000:Patch applied with thanks!

It would be nice if the logic of deciding when a file is ready would not be hardcoded though.  What about a pluggable strategy?"
0,CAMEL-249,Bug,Major,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Aaron Crickenberger,0,0,2007-11-29 18:16:24+00:00,2010-07-14 23:39:05+00:00,FileEndpoint generates an empty string for the relative pathname it places in the header.,"hzbarcea:1196364055:2007-11-30T03:20:55.221+0000:1196364055:2007-11-30T03:20:55.221+0000:Aaron, thank you for reporting this and for the patch.  Could you please add a unit test and, more importantly, grant license to ASF for inclusion.  Without this check we cannot apply it.
acricken:1196367902:2007-11-30T04:25:02.187+0000:1196368193:2007-11-30T04:29:53.536+0000:Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue).  I'll see if I can get a unit test up by tomorrow.
acricken:1196425433:2007-11-30T20:23:53.621+0000:1196425433:2007-11-30T20:23:53.621+0000:Added patch to FileConfigureTest
hzbarcea:1196969513:2007-12-07T03:31:53.128+0000:1196969513:2007-12-07T03:31:53.128+0000:Patch applied with thanks!"
0,CAMEL-248,Bug,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,Willem Jiang,0,0,2007-11-29 14:59:33+00:00,2008-05-12 07:56:35+00:00,This patch fixed the Camel loadBalance tag 's attribute ref do not support to ref another loadBalancer strategy issue.,"hzbarcea:1196329133:2007-11-29T17:38:53.534+0000:1196329133:2007-11-29T17:38:53.534+0000:Patch applied with thanks!
hzbarcea:1196363765:2007-11-30T03:16:05.735+0000:1196363765:2007-11-30T03:16:05.735+0000:Hi Willem,

I just noticed that you did not grant the license to ASF for inclusion.  Could you please resubmit the patch with the appropriate check or I will have to roll it back tomorrow.

Thanks
Hadrian
njiang:1196364726:2007-11-30T03:32:06.382+0000:1196364726:2007-11-30T03:32:06.382+0000:Resubmit the patch with granting license to ASF.
hzbarcea:1196365521:2007-11-30T03:45:21.128+0000:1196365521:2007-11-30T03:45:21.128+0000:That was quick.  Thanks Willem!"
0,CAMEL-247,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Freeman Yue Fang,0,0,2007-11-29 09:09:11+00:00,2008-05-12 07:56:35+00:00,"1. input params List shouldn't be null, at lease it should be a empty List,
so use
List<Object> params = new ArrayList<Object>();
instead of 
List<Object> params = null;
in CamelInvoker.java
to avoid input params is null


2. Cxf Producer should only copy back exchange when ExchangePattern is not InOnly
so  use
if (exchange.getPattern() != ExchangePattern.InOnly) {
        	exchange.copyFrom(cxfExchange);
}
instead of 
    exchange.copyFrom(cxfExchange);","ffang:1196298842:2007-11-29T09:14:02.600+0000:1196298842:2007-11-29T09:14:02.600+0000:address this issue and append test to verify it works
Could anyone review and apply this patch for me?

Thanks 
hzbarcea:1196329113:2007-11-29T17:38:33.781+0000:1196329113:2007-11-29T17:38:33.781+0000:Patch applied with thanks!"
0,CAMEL-216,Task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Willem Jiang,0,0,2007-11-13 18:04:43+00:00,2008-05-12 07:56:34+00:00,"Since CXF 2.0.3 will be released , and there are some internal API changes happens , 
we need update CXF version to 2.0.x snap shot for coming up release.","njiang:1194980259:2007-11-14T02:57:39.229+0000:1194980259:2007-11-14T02:57:39.229+0000:Upgraded CXF from 2.0.2 to 2.0.3,  also included some refactoring work of CXFSoapBinding and part of work of camel CXF transport.
jstrachan:1195114220:2007-11-15T16:10:20.823+0000:1195114220:2007-11-15T16:10:20.823+0000:Patch applied with thanks!"
0,CAMEL-215,New Feature,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Willem Jiang,0,0,2007-11-13 14:31:44+00:00,2008-05-12 07:56:34+00:00,"LoadBalancingProcessor myStrategy;  // my own strategy to choose an endpoint


 from(endpointA).loadBalance().setLoadBalance(myStrategy).to(Endpoint1, Endpoint2, ...);


 or if can use an out of the box strategy like:


 from(endpointA).loadBalance().roundRobin(),to(endpoint1, endpoint2, ...);


Just a minor twist on that idea; how about


from(endpointA).loadBalance().roundRobin().endpoints().<someExpression>


where loadBalance() returns a LoadBalanceClause rather like filter()
returns an ExpressionClause which lets folks pick the strategy of load
balancer to use.


Using a named reference could be by


from(endpointA).loadBalance().ref(""someName"")...


I also added the idea of using an expression to determine the
endpoints to load balance across as we might wanna support dynamic
load balancing. e.g. querying the endpoints in OSGi or JNDI or
whatever.","njiang:1194937214:2007-11-13T15:00:14.539+0000:1194937214:2007-11-13T15:00:14.539+0000:This patch just implement configure the load balance endpoints with a static list.
We could add the dynamical endpoints support  in the next phase.
jstrachan:1195012644:2007-11-14T11:57:24.344+0000:1195012644:2007-11-14T11:57:24.344+0000:patch applied with thanks!
davsclaus:1195022440:2007-11-14T14:40:40.887+0000:1195022440:2007-11-14T14:40:40.887+0000:Is this really correct for the random() strategy (new RoundRobin)?


+    public LoadBalanceType random() {
+        loadBalancer = new RoundRobinLoadBalancer();
+        return this;
+    }

njiang:1195029137:2007-11-14T16:32:17.661+0000:1195029137:2007-11-14T16:32:17.661+0000:sorry , it is my fault. 
We should create a RandomLoadBalancer here.
jstrachan:1195119857:2007-11-15T17:44:17.645+0000:1195119857:2007-11-15T17:44:17.645+0000:Patch applied thanks Claus & Willem"
0,CAMEL-214,Bug,Major,1.2.0,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,James Strachan,0,0,2007-11-13 12:20:42+00:00,2010-07-14 23:39:09+00:00,I wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?,"davsclaus:1206843376:2008-03-30T10:16:16.846+0000:1206843376:2008-03-30T10:16:16.846+0000:What is the status. Do we have the javadocs in the 1.3 RC3 release?
njiang:1206853139:2008-03-30T12:58:59.288+0000:1206853139:2008-03-30T12:58:59.288+0000:I did some fixing work last week by adding the camel-core and camel-spring java doc into the doc directory.
But there is no user guide doc in the 1.3 RC3 since the build machine did not install the  Prince :(
hadrian:1206970014:2008-03-31T21:26:54.890+0000:1206970014:2008-03-31T21:26:54.890+0000:Fixed in apache-camel-1.3.0-RC4
davsclaus:1210567528:2008-05-12T12:45:28.127+0000:1210567528:2008-05-12T12:45:28.127+0000:Closed all 1.3 tickets"
0,CAMEL-213,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-13 11:38:59+00:00,2008-05-12 07:56:34+00:00,No Desc,"jstrachan:1194925419:2007-11-13T11:43:39.945+0000:1194925419:2007-11-13T11:43:39.945+0000:I've fixed the code for the JMSXAppID header - see test case MQSeriesHeaderTest.

If there are any other MQ headers it doesn't like clients setting we can reopen this issue and fix them...
jstrachan:1195010764:2007-11-14T11:26:04.869+0000:1195010764:2007-11-14T11:26:04.869+0000:I just made another patch so that only valid Java identifier headers are output to the JMS message - to avoid further exceptions with MQSeries - see http://www.nabble.com/Camel-1.2-Websphere-MQ-6-issue-tf4793824s22882.html
jstrachan:1195032139:2007-11-14T17:22:19.913+0000:1195032139:2007-11-14T17:22:19.913+0000:Just added another patch to conform to page 39 of the JMS 1.1 spec ignoring a bunch of other headers...

{code}
                ""JMSXUserID"", ""JMSXAppID"",
                ""JMSXDeliveryCount"", ""JMSXProducerTXID"", ""JMSXConsumerTXID"",
                ""JMSXRcvTimestamp"", ""JMSXState""
{code}"
0,CAMEL-212,Improvement,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-11-12 22:25:18+00:00,2008-05-12 07:56:34+00:00,"There should be easy way to disable JMSReplyTo behavior using URI in an endpoint.
As it is partially implemented in EndpointMessageListener there is still no easy way to set it up.","jstrachan:1194925254:2007-11-13T11:40:54.140+0000:1194925254:2007-11-13T11:40:54.140+0000:Now resolved see test case JmsEndpointConfigurationTest.testConfigureMessageListener(). e.g. use ?disableReplyTo=true on your JMS URI


romkal:1195717943:2007-11-22T15:52:23.009+0000:1195717943:2007-11-22T15:52:23.009+0000:Currently jms endpoint sets MEP according to presence of JMSReplyTo property. I believe that if we disableReplyTo then we should behave as there is no JMSReplyTo so we should have InOnly MEP.
jstrachan:1195777841:2007-11-23T08:30:41.061+0000:1195777841:2007-11-23T08:30:41.061+0000:patch applied with thanks!"
0,CAMEL-211,Bug,Minor,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-11-08 12:37:45+00:00,2008-05-12 07:56:34+00:00,httpClientConfigurer property is not propagated to the endpoint on endpoint creation.,jstrachan:1195013952:2007-11-14T12:19:12.329+0000:1195013952:2007-11-14T12:19:12.329+0000:Patch applied with thanks!
0,CAMEL-210,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Roman Kalukiewicz,0,0,2007-11-06 11:46:53+00:00,2010-07-14 23:38:57+00:00,"Problem is very similar to CAMEL-191 but this time with exception clause.
As exceptions are not cleared pipeline doesn't proceed.","romkal:1194344260:2007-11-06T18:17:40.396+0000:1194344260:2007-11-06T18:17:40.396+0000:This patch modifies DeadLetterQueue so before it sends a message to error processor it will clear exception information and store it as property.
At the end it retrieves it so all other flows are notified about the error that happened and (for example) pipelines will be terminated.

hzbarcea:1194591722:2007-11-09T15:02:02.507+0000:1194591722:2007-11-09T15:02:02.507+0000:hmm, looks like this was the patch for camel-208, also copied here.
romkal:1194932215:2007-11-13T13:36:55.173+0000:1194932215:2007-11-13T13:36:55.173+0000:This patch should be better..

Sorry for this mistake - to many patches on my drive ;)
jstrachan:1195013760:2007-11-14T12:16:00.972+0000:1195013760:2007-11-14T12:16:00.972+0000:patch applied with thanks!"
0,CAMEL-209,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Jonathan Anstey,Nicky Sandhu,0,1,2007-11-05 18:13:36+00:00,2009-07-31 06:33:31+00:00,ContentEnricher (http://www.enterpriseintegrationpatterns.com/DataEnricher.html) support is needed. Here's a thread that outlines the usecase http://www.nabble.com/How-to-enrich-message-with-the-result-of-other-invocation-t4714129s22882.html,"davsclaus:1234060605:2009-02-08T10:36:45.943+0000:1234060605:2009-02-08T10:36:45.943+0000:We can do this today, but the DSL could be spiced up a bit.

If we have the consumer template (oppose to producer template) you could consume from a processor and enrhich the original exchange with the result.

{code}
void process(Exchange e) {
  Exchange result = consumerTemplate.consume(""jdbc:xxx"")
  // enrich original exchange with result
{code}

Letting you do the enrich in Java gives you the full power how it should be enriched.
mrt1nz:1234071970:2009-02-08T13:46:10.320+0000:1234071970:2009-02-08T13:46:10.320+0000:You might also want to take a look at the [content enricher|http://repo.openehealth.org/confluence/display/ipf/Core+features#Corefeatures-Contentenrichment] in the Open eHealth Integration Platform (IPF) which is based on Camel. The example is written in Groovy but its easy to make it running in Java a well (except for using the closure). If you think this way of content enrichement is helpful for you I can contribute the enricher to Camel. Any thoughts? 


davsclaus:1234153711:2009-02-09T12:28:31.953+0000:1234153711:2009-02-09T12:28:31.953+0000:Martin, looks great. Closures really comes handy for the merge logic.

We have also talked about a DSL for spawning an Exchange so there could be a double win here, since I see that enricher needs to spawn an Exchange.

And as always we love contributions :)
janstey:1234158162:2009-02-09T13:42:42.862+0000:1234158162:2009-02-09T13:42:42.862+0000:Very nice impl Martin. We'd love it contributed to Camel!
mrt1nz:1234345252:2009-02-11T17:40:52.368+0000:1234345252:2009-02-11T17:40:52.368+0000:Attached are two patches that add content support enrichment to Camel trunk. A Java DSL example is

{noformat}
AggregationStrategy myAggregationStartegy = ...

from(""direct:start"")
.enrich(""direct:resource"", myAggregationStrategy)
.to(""mock:result"");

// get additional data from this endpoint
from(""direct:resource"")
.transform().constant(""blah"");
...
{noformat}

A Spring DSL example is

{noformat}
  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
    <route>
      <from uri=""direct:start""/>
      <enrich resourceUri=""direct:resource"" aggregationStrategyRef=""sampleAggregator""/>
      <to uri=""mock:result""/>
    </route>
    <route>
      <from uri=""direct:resource""/>
      <transform>
        <constant>blah</constant>
      </transform>
    </route>
  </camelContext>

  <bean id=""sampleAggregator"" class=""org.apache.camel.processor.enricher.SampleAggregator"" />
{noformat}

If you don't have any objections to these patches I'll add some documentation to the Camel Wiki.

janstey:1234346659:2009-02-11T18:04:19.692+0000:1234346659:2009-02-11T18:04:19.692+0000:Looks cool. Just taking a peek at the source now.
janstey:1234348175:2009-02-11T18:29:35.542+0000:1234348175:2009-02-11T18:29:35.542+0000:Martin,

I just committed your patches in revision 743442. Great work!

I'm wondering now if we should shorten the Spring syntax a bit though. Something like this would align better with the other processors

{code:language=xml}
<enrich uri=""direct:resource"" strategyRef=""sampleAggregator""/>
{code}

What do you think?



mrt1nz:1234353149:2009-02-11T19:52:29.403+0000:1234353149:2009-02-11T19:52:29.403+0000:Let's do that. Do you need a further patch or do you want to change that yourself?
janstey:1234353866:2009-02-11T20:04:26.823+0000:1234353866:2009-02-11T20:04:26.823+0000:No need for a patch. I'll update it shortly.
janstey:1234354108:2009-02-11T20:08:28.917+0000:1234354108:2009-02-11T20:08:28.917+0000:Committed the change in rev 743474.
davsclaus:1234393220:2009-02-12T07:00:20.113+0000:1234393220:2009-02-12T07:00:20.113+0000:Martin. Great work.

Yeah I was about to suggest to use uri as the attribute in spring DSL but I can see that you have also that covered.
davsclaus:1234395080:2009-02-12T07:31:20.243+0000:1234395080:2009-02-12T07:31:20.243+0000:In the enrich code part where you create a producer template you need to close it as well

See this faq:
http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html

It would be better to create it once and keep it around. We have the service interface for that with start/stop.

I will patch it.
davsclaus:1234395283:2009-02-12T07:34:43.616+0000:1234395283:2009-02-12T07:34:43.616+0000:Martin, please feel free to add some wiki documentation to this great new feature. Its great with the community stepping up to help.

And we should mention it on the release guide as well
http://camel.apache.org/camel-200-release.html

davsclaus:1234395683:2009-02-12T07:41:23.712+0000:1234395683:2009-02-12T07:41:23.712+0000:On the EIP page:
http://camel.apache.org/content-enricher.html

Maybe we should divide it into 2 sections
- the old solution, where you have full power in a processor and can enrich the exchange how you like it
- and the new one with the enrich DSL

So end users can see two kind of solutions.
mrt1nz:1234406911:2009-02-12T10:48:31.073+0000:1234406911:2009-02-12T10:48:31.073+0000:Claus,

wouldn't it be even better to resolve the resource endpoint in the EnricherType.doCreateProcessor() method, create a producer from that endpoint and inject that producer into the Enricher?

{code}
public class EnricherType extends OutputType<EnricherType> {

  ...

  public Processor createProcessor(RouteContext routeContext) throws Exception {
      Enricher enricher = new Enricher(...);
      enricher.setProducer(routeContext.resolveEndpoint(resourceUri).createProducer());
      ...
      return enricher;
  }

}
{code}

The Enricher then starts and stops the producer within its start()/stop() methods and uses it in its process(Exchange) method to send the resourceExchange

{code}
public class Enricher extends ServiceSupport implements Processor {

   public void process(Exchange exchange) {
      ...
      producer.process(resourceExchange);
      ...
   }
}
{code}

Then the enricher creation and wiring code has been moved to the EnricherType and the Enricher is only doing the logic it needs to do.  What do you think?

I can provide a patch if you want.
davsclaus:1234408063:2009-02-12T11:07:43.124+0000:1234408063:2009-02-12T11:07:43.124+0000:@Martin

Good idea. Patch is much welcome.
mrt1nz:1234413766:2009-02-12T12:42:46.777+0000:1234413811:2009-02-12T12:43:31.031+0000:Here's the patch to resolve the resource endpoint inside the EnricherType (camel-core.patch.2).
janstey:1234416919:2009-02-12T13:35:19.050+0000:1234416919:2009-02-12T13:35:19.050+0000:Committed your patch in revision 743733. Thanks again Martin.
janstey:1234422630:2009-02-12T15:10:30.533+0000:1234422630:2009-02-12T15:10:30.533+0000:Documentation looks good. I'm closing this one.
davsclaus:1248993211:2009-07-31T06:33:31.847+0000:1248993211:2009-07-31T06:33:31.847+0000:Closing 2.0m1 tickets"
0,CAMEL-208,Bug,Major,1.3.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Roman Kalukiewicz,0,0,2007-11-05 17:41:45+00:00,2010-07-14 23:39:34+00:00,"Construct like:



setOutHeader(""header"", constant(""test"")).
setOutBody(constant(""body""));




doesn't work because setOutHeader() sets only header on out message that has null body. Then in pipeline when it creates new exchange it copies out message to in only when out message is not null and it contains not null body (that is not the case here). So pipeline copies in -> in so our out header is lost.


Set out header should just copy message body or (I believe better solution) createNewExchange in pipeline should use out message even if body is null (consistent with ExchangeHelper.copyResults).","romkal:1194257434:2007-11-05T18:10:34.965+0000:1194257434:2007-11-05T18:10:34.965+0000:File with JUnit test and patch itself attached.
romkal:1194314417:2007-11-06T10:00:17.945+0000:1194314417:2007-11-06T10:00:17.945+0000:I see that my patch doesn't solve all the problem that is a little deeper. When you call {{setOutBody}} all it does it sets body of out message. As it is invoked in pipeline then previous _out_ header becomes _in_ header. Then we set _out_ body and the header previously set is lost.

I'm starting to think that this is just a _feature_ of the fact that we have _in_ and _out_ messages and the way pipeline works. But then it is quite confusing for end users as the first impression is that after executing the snippet I presented in previous comment we will have body _and_ header set.

At the moment I don't really know how to solve that problem, but I just want to show it.

Anyway patch I provided is (I believe) OK because of consistency with {{ExchangeHelper.copyResults}}.
hzbarcea:1196971914:2007-12-07T04:11:54.885+0000:1196971914:2007-12-07T04:11:54.885+0000:Patch applied with thanks!"
0,CAMEL-207,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-05 15:08:25+00:00,2008-05-12 07:56:34+00:00,No Desc,"jstrachan:1194246588:2007-11-05T15:09:48.622+0000:1194246588:2007-11-05T15:09:48.622+0000:Discussions on this issue are here

http://www.nabble.com/splitter-aggregator-scenatio-tf4726642s22882.html
http://www.nabble.com/Aggregator-strategies-%28again%29-tf4750834s22882.html

jstrachan:1194247283:2007-11-05T15:21:23.058+0000:1194247283:2007-11-05T15:21:23.058+0000:an early spike implementation has been committed - try adding a Predicate to the AggregatorType or DSL; though it needs testing!
romkal:1195117427:2007-11-15T17:03:47.172+0000:1195117427:2007-11-15T17:03:47.172+0000:Test for aggregator scenario together with fix for a bug that was in current implementation - aggregated messages were not cleared and condition in the loop was wrong.

jstrachan:1195120222:2007-11-15T17:50:22.974+0000:1195120222:2007-11-15T17:50:22.974+0000:Many thanks - patch applied!
romkal:1195124143:2007-11-15T18:55:43.704+0000:1195124143:2007-11-15T18:55:43.704+0000:Sorry for constantly reopening this issue but my patch partially fixed the problem. Another one shows up when you aggregate things for different correlation id's at the same time.

I hope this is the last patch for this problem - now better tested..
jstrachan:1195128419:2007-11-15T20:06:59.687+0000:1195128419:2007-11-15T20:06:59.687+0000:BTW I commit your previous patch without checking that the camel-spring model worked - I think your last patch broke the Spring test case...
jstrachan:1195128949:2007-11-15T20:15:49.690+0000:1195128949:2007-11-15T20:15:49.690+0000:when I apply your second patch, I get the testPredicate failing - only 5 messages received instead of 20
jstrachan:1195190630:2007-11-16T13:23:50.076+0000:1195190630:2007-11-16T13:23:50.076+0000:BTW I fixed the failing SpringAggregatorTest by using the new <methodCall bean=""foo"" method=""whatnot""/> expression for example

{code}
    <route>
      <from uri=""direct:predicate""/>
      <aggregator strategyRef=""myAggregatorStrategy"">
        <simple>header.cheese</simple>
        <to uri=""mock:result""/>
        <completedPredicate>
          <methodCall bean=""myAggregatorStrategy"" method=""isCompleted""/>
        </completedPredicate>
      </aggregator>
    </route>
{code}
romkal:1196744563:2007-12-04T13:02:43.993+0000:1196744563:2007-12-04T13:02:43.993+0000:Sorry I've missed your comment.

I've just updated my sources and created this patch. I've already tested it on my source code and everything passes now (for me ;) ).

I believe previously I had not updated my sources or you had different source code and patch was applied in some wrong way..

jstrachan:1196923464:2007-12-06T14:44:24.071+0000:1196923464:2007-12-06T14:44:24.071+0000:Patch applied with thanks!"
0,CAMEL-206,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-05 15:03:38+00:00,2008-05-12 07:56:34+00:00,No Desc,jstrachan:1194246296:2007-11-05T15:04:56.710+0000:1194246296:2007-11-05T15:04:56.710+0000:see the test case SplitterTest
0,CAMEL-205,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-05 12:45:05+00:00,2008-05-12 07:56:34+00:00,No Desc,jstrachan:1194238216:2007-11-05T12:50:16.016+0000:1194238216:2007-11-05T12:50:16.016+0000:for the test case see ConsumeJmsMapMessageTest in camel-jms
0,CAMEL-204,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-05 12:12:04+00:00,2008-05-12 07:56:34+00:00,No Desc,"jstrachan:1194237189:2007-11-05T12:33:09.852+0000:1194237189:2007-11-05T12:33:09.852+0000:See the test case 

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/aggregator-custom-strategy.xml
"
0,CAMEL-203,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Arjan Moraal,0,1,2007-11-05 11:32:17+00:00,2007-11-19 08:18:02+00:00,"When using the FileComponent (""file://"") to publish to a non-existent directory tree, the last part of the path is created as file instead of directory. It only happens when setting the filename in the header (FileComponent.HEADER_FILE_NAME).


This is because the method that determines the file name (which checks whether a directory exists), is called before the directory tree is built.


See also http://www.nabble.com/Problem-with-concurrent-dir-file-access--tf4724448s22882.html","jstrachan:1195206907:2007-11-16T17:55:07.799+0000:1195206907:2007-11-16T17:55:07.799+0000:patch applied with thanks! 
arjanm:1195431482:2007-11-19T08:18:02.522+0000:1195431482:2007-11-19T08:18:02.522+0000:Thanks James!"
0,CAMEL-202,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,James Strachan,0,0,2007-11-02 17:38:05+00:00,2010-07-14 23:39:00+00:00,No Desc,"jstrachan:1193996579:2007-11-02T17:42:59.086+0000:1193996579:2007-11-02T17:42:59.086+0000:fancy taking a stab?
hzbarcea:1194297713:2007-11-06T05:21:53.808+0000:1194297713:2007-11-06T05:21:53.808+0000:I attached a partial fix that works for choice, with or without the optional otherwise.  I had no choice but to introduce the concept of parent in the ProcessorType, as an end() in a ProcessorType with nested Block(s) should continue with it's parent context.

I'll try to fix the others tomorrow.  Cheers.
hzbarcea:1194382467:2007-11-07T04:54:27.348+0000:1194382467:2007-11-07T04:54:27.348+0000:Complete patch, please disregard the previous one.
 * fixes block semantics for choice, filter and try/handle/handleAll
 * fixes catch semantics to continue normal processing, clearing the exception.
 * fixes semantics for handleAll() to be equivalent to java finally.  The equivalent of a catch(Throwable) can be achieved with a handle(Throwable.class)"
0,CAMEL-201,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,James Strachan,0,0,2007-11-02 17:37:12+00:00,2008-07-11 04:25:15+00:00,"e.g.



<route>
  <from uri=""activemq:Foo.Bar""/>
   <transform>
     <xquery>....</xquery>
  </transform>
</route>




This basically means renaming the DSL's setOutBody() to be transform(Expression)","janstey:1209402409:2008-04-29T01:06:49.280+0000:1209402409:2008-04-29T01:06:49.280+0000:I finally got around to doing this one up. There are no XQuery specific tests (mainly because of not knowing where to put them ;)), but it is generic enough to work for any expression language. Let me know if you have any questions!  
davsclaus:1209416029:2008-04-29T04:53:49.735+0000:1209416029:2008-04-29T04:53:49.735+0000:Johathan. The patch looks great. Only two issues with the ident of the code.
One @override was not idented properly. And one method parameter was on a new line instead of singleline. Just nitpicking.

Would love to have it documented on the wiki that we got this new transform DSL now.
And we should remember to add it to the release notes that setOutBody() is depreacted and replaced with transform()

And since setOutBody() is to be replaced with transform. Could we have a unit test that verifies a setOutBody() test that is done by transform render the same OUT body?
janstey:1209485040:2008-04-30T00:04:00.954+0000:1209485040:2008-04-30T00:04:00.954+0000:Hey Claus,

Nitpick away :) I fixed up the indentations and added a test that verifies the deprecated setOutBody method still behaves. Yeah, the wiki will need to be updated once this feature gets in.
hadrian:1209494113:2008-04-30T02:35:13.351+0000:1209494800:2008-04-30T02:46:40.701+0000:Patch applied.  Excellent contribution, thanks Jon.  I will leave this issue open until we update the documentation.
janstey:1209796223:2008-05-03T14:30:23.973+0000:1209796223:2008-05-03T14:30:23.973+0000:Updated the docs for this at: http://cwiki.apache.org/confluence/display/CAMEL/Message+Translator

Unfortunately, it doesn't look as nice as it should because confluence is barfing all over the place with the following message:
""An error occurred: Connection refused. The system administrator has been notified.""
jstrachan:1210056162:2008-05-06T14:42:42.232+0000:1210056162:2008-05-06T14:42:42.232+0000:Jonathan: btw there's some XQuery tests in [components/camel-saxon|http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-saxon/src/test/java/org/apache/camel/builder/saxon/] where the XQuery implementation lives, for example [XQueryFilterTest.java|http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-saxon/src/test/java/org/apache/camel/builder/saxon/XQueryFilterTest.java]
janstey:1210060176:2008-05-06T15:49:36.127+0000:1210060176:2008-05-06T15:49:36.127+0000:IIRC one of my issues for putting a spring transform test in camel-saxon was that the public camel xsd did not contain the transform element *yet* and so it failed to resolve. The camel-spring module has some magic in there to use a locally built xsd, so the transform element could be tested there fine. Since putting an XQuery test in camel-spring is a bad idea (circular dependency!), I opted for a test case using the ""simple"" expression language. Make sense?
jstrachan:1210060499:2008-05-06T15:54:59.590+0000:1210060499:2008-05-06T15:54:59.590+0000:Got it.

BTW when running unit tests using the Spring XSD, Spring will use the XSD thats on the classpath by default. So the XSD will validate in camel-saxon as it'll use the latest/greatest XSD generated by camel-spring.

The only time it won't validate is in your IDE when editing the XML :)

But then you can fudge your IDE to take the XSD from your generated XSD in camel-spring/target/schema/camel-*.xsd :)


janstey:1210060970:2008-05-06T16:02:50.864+0000:1210060970:2008-05-06T16:02:50.864+0000:Oh, neat! I could swear I hit the case where it wasn't using the locally built xsd though... perhaps I'm going crazy :)

I was just gonna try it out again but it seems apache svn is down... grumble grumble...
jstrachan:1210061231:2008-05-06T16:07:11.400+0000:1210061231:2008-05-06T16:07:11.400+0000:You've gotta make sure your project is using the latest/greatest built camel-spring jar though! Sometimes IDE based maven projects have a tendency to pick a different version :)
janstey:1210061750:2008-05-06T16:15:50.942+0000:1210061750:2008-05-06T16:15:50.942+0000:Yeah, I know... because of this I still don't trust Eclipse based results when it comes to multi-module maven projects. When multiple modules are involved I always run the maven build from the command line just to be sure!"
0,CAMEL-200,Bug,Major,None,None,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-11-02 07:26:36+00:00,2008-05-12 12:45:28+00:00,can we either fix the release guide - or make the archetype somehow use the current version?,"janstey:1202405495:2008-02-08T01:31:35.239+0000:1202405495:2008-02-08T01:31:35.239+0000:This patch will make the archetype use the current version of camel.
hadrian:1202412116:2008-02-08T03:21:56.324+0000:1202412116:2008-02-08T03:21:56.324+0000:Applied with thanks!
davsclaus:1210567528:2008-05-12T12:45:28.107+0000:1210567528:2008-05-12T12:45:28.107+0000:Closed all 1.3 tickets"
0,CAMEL-199,Improvement,Minor,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Gert Vanthienen,0,0,2007-11-02 07:11:47+00:00,2008-05-12 07:56:34+00:00,"Currently, there is no converter from Node -> Source.


It is required when using Camel's splitter() functionality inside ServiceMix:



from(""jbi:service:urn:eu:java:smx:fleetintegrator:camel"")
   .splitter(xpath(""/traces/trace""))
   .to(""jbi:endpoint:urn:eu:java:smx:fleetintegrator:jms:mq"");",jstrachan:1195205905:2007-11-16T17:38:25.835+0000:1195205905:2007-11-16T17:38:25.835+0000:patch applied with thanks!
0,CAMEL-198,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,James Strachan,James Strachan,0,0,2007-10-31 16:24:23+00:00,2008-05-12 07:56:34+00:00,"e.g. 



from(""file"").to(""xquery:com/acme/foo.xquery"").to(""activemq:foo.bar"");




treating XQuery as an endpoint",jstrachan:1193819521:2007-10-31T16:32:01.458+0000:1193819521:2007-10-31T16:32:01.458+0000:see the documentation: http://cwiki.apache.org/CAMEL/xquery-endpoint.html
0,CAMEL-197,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Hadrian Zbarcea,0,0,2007-10-31 14:50:18+00:00,2010-07-14 23:42:21+00:00,"Please see attached patch to reproduce.


I made a small change to an existing unit test and created a route like this:
from(""direct:a"").intercept(interceptor1).process(orderProcessor).intercept(interceptor2).to(""direct:d""); 


I think one would expect to have one route and the invocation order to be interceptor1 -> orderProcessor -> interceptor2 -> direct:d.


Instead we have:
1. two routes
1. interceptor1 and interceptor2 are invoked twice
2. orderProcessor is never invoked
3. direct:d is invoked twice, i think.","jstrachan:1194246146:2007-11-05T15:02:26.658+0000:1194246146:2007-11-05T15:02:26.658+0000:fixed - see the test cases...
InterceptorBuilderTest and InterceptorBuilderWithEndTest
"
0,CAMEL-196,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-10-30 17:29:55+00:00,2008-05-12 07:56:33+00:00,No Desc,"jstrachan:1193812338:2007-10-31T14:32:18.653+0000:1193812338:2007-10-31T14:32:18.653+0000:code committed - just needs documentation
jstrachan:1193813210:2007-10-31T14:46:50.676+0000:1193813210:2007-10-31T14:46:50.676+0000:See http://cwiki.apache.org/CAMEL/xslt.html"
0,CAMEL-195,Improvement,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Jonathan Anstey,James Strachan,0,0,2007-10-30 16:42:42+00:00,2008-07-11 04:24:54+00:00,"See the discussion: : http://www.nabble.com/How-to-do-that-in-Camel-XML-%28again%29---tf4647505s22882.html#a13276113


we need to add more of the built in Java processors to the XSD...","janstey:1207675059:2008-04-09T01:17:39.808+0000:1207675059:2008-04-09T01:17:39.808+0000:This patch incorporates setHeader and converyBodyTo into the Spring XML Extensions.

Seems as though the intercept feature is already available in XML (see [1]). Is this correct?

[1] http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/model/InterceptType.java
davsclaus:1207685867:2008-04-09T04:17:47.787+0000:1207685867:2008-04-09T04:17:47.787+0000:Jonathan as always quality work from you. The patch is great with good unit tests as well.

[1] It is there in the core with a unit tests that however has a TODO attached to it :(
XmlParseTest.java

{code}
    //TODO get the test fixed
    public void xtestParseRouteWithInterceptorXml() throws Exception {
        RouteType route = assertOneRoute(""routeWithInterceptor.xml"");
        assertFrom(route, ""seda:a"");
        assertChildTo(""to"", route, ""seda:d"");
        assertInterceptorRefs(route, ""interceptor1"", ""interceptor2"");
    }
{code}
acricken:1207717458:2008-04-09T13:04:18.056+0000:1207717458:2008-04-09T13:04:18.056+0000:Thanks for this!

One comment... it looks like the <setHeader> syntax requires a child processor? I don't believe it does in the Java DSL.  I would expect the syntax to look more like it does for <convertBodyTo>, eg:
{code}
    <route>
      <from uri=""seda:a""/>
      <setHeader headerName=""oldBodyValue"">
        <simple>body</simple>
      </setHeader>
      <to uri=""mock:b""/>     
    </route>
{code}
janstey:1207718419:2008-04-09T13:20:19.570+0000:1207718419:2008-04-09T13:20:19.570+0000:Hey Claus, thx for the props!

That test appears to be for the following feature... 
http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/model/InterceptorRef.java

Without looking deeper I'm not sure how it differs from InterceptType. 

I wonder if the original author of this feature would care to comment? ;)
janstey:1207718543:2008-04-09T13:22:23.663+0000:1207718543:2008-04-09T13:22:23.663+0000:Hmmm... yeah, I believe this is a side effect of me extending from the ExpressionNode in the SetHeaderType JAXB object. From the schema, it appears though that the child processor is optional, so you should be able to safely omit it. Also, the underlying SetHeaderProcessor does not require it. See the following snippet from http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
{code}
  <xs:complexType name=""expressionNode"">
    <xs:complexContent>
      <xs:extension base=""tns:processorType"">
        <xs:sequence>
          <xs:element ref=""tns:interceptor"" maxOccurs=""unbounded"" minOccurs=""0""/>
          <xs:choice maxOccurs=""1"" minOccurs=""1"">
            <xs:element ref=""tns:el""/>
            ...
            <xs:element ref=""tns:xpath""/>
            <xs:element ref=""tns:xquery""/>
          </xs:choice>
          <xs:choice maxOccurs=""unbounded"" minOccurs=""0"">
            <xs:element ref=""tns:aggregator""/>
            ...
            <xs:element ref=""tns:to""/>
            <xs:element ref=""tns:try""/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
{code}
davsclaus:1207858225:2008-04-11T04:10:25.091+0000:1207858225:2008-04-11T04:10:25.091+0000:Aaron has a valid point of the XML syntax. 
Its not intuitive if the to tag should be inlined in the setHeader tag, etc.

Jonathan looks like you last comment states that its doable. If so can the unit tests and documentations, code snippets etc. be updated accordingly?
janstey:1207902465:2008-04-11T16:27:45.920+0000:1207902465:2008-04-11T16:27:45.920+0000:Updated patch to include tests using the setHeader syntax suggested by Aaron.

{code}
<route>
  <from uri=""seda:a""/>
  <setHeader headerName=""oldBodyValue"">
    <simple>body</simple>
  </setHeader>
  <to uri=""mock:b""/>     
</route>
{code}
davsclaus:1207903946:2008-04-11T16:52:26.621+0000:1207903946:2008-04-11T16:52:26.621+0000:Jonathan have you update all the XML examples?

SpringSetHeaderTestWithChildProcessor-context.xml 
setHeaderToConstant.xml
setHeaderWithChildProcessor.xml

uses the ""odd"" style in the patch.2 file.

janstey:1207904856:2008-04-11T17:07:36.790+0000:1207904856:2008-04-11T17:07:36.790+0000:Claus, you have eyes like a hawk ;)

I've updated setHeaderToConstant.xml only since the other two test the odd child processor case (since its technically valid).
davsclaus:1207971239:2008-04-12T11:33:59.797+0000:1207971239:2008-04-12T11:33:59.797+0000:CAMEL-195 applied patch with huge thanks to Jonathan
janstey:1207977637:2008-04-12T13:20:37.794+0000:1207977637:2008-04-12T13:20:37.794+0000:Cool. Thanks Claus!"
0,CAMEL-194,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-10-30 15:33:01+00:00,2008-05-12 07:56:33+00:00,"There is default converter from dom.Document -> xml.transform.DOMSource


Unfortunately when you try to send DOM document (implementation) and convert it to Source there is no converter found, because Document cannot be assigned to implementation without a cast.",jstrachan:1195015982:2007-11-14T12:53:02.124+0000:1195015982:2007-11-14T12:53:02.124+0000:Patch applied with thanks! I guess we could do with a test case though :) 
0,CAMEL-193,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-10-30 15:25:47+00:00,2008-05-12 07:56:33+00:00,"current XsltBuilder lazy creates out messages even it doesn't work on them.


It causes problems as out messages are propagated by pipeline then.",romkal:1194930939:2007-11-13T13:15:39.761+0000:1194930939:2007-11-13T13:15:39.761+0000:This problem is fixed in 1.3 branch as now pipeline always copies Out->In that wasn't the case in 1.2.0 branch. Now xmls should populate Out message and it does it.
0,CAMEL-192,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-10-26 15:20:32+00:00,2008-05-12 07:56:33+00:00,No Desc,jstrachan:1193386512:2007-10-26T16:15:12.594+0000:1193386512:2007-10-26T16:15:12.594+0000:fix committed 
0,CAMEL-191,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Nicky Sandhu,0,0,2007-10-25 19:26:22+00:00,2008-05-12 07:56:33+00:00,"Catch clause with pipeline does not proceed. This is because the pipeline is designed to reject exceptions. The catch processor should give the exchange a fresh start


This started from thread http://www.nabble.com/Camel-1.2---CatchProcessor-not-working--t4690438s22882.html","nickysandhu:1193311873:2007-10-25T19:31:13.158+0000:1193311873:2007-10-25T19:31:13.158+0000:Review patch. Gives the exchange a fresh start by removing the exception that caused it to reach the catch clause. The exception is still available in the in header map with ""caught.exception"" key
jstrachan:1193370822:2007-10-26T11:53:42.522+0000:1193370822:2007-10-26T11:53:42.522+0000:Patch applied with huge thanks!"
0,CAMEL-190,Sub-task,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Willem Jiang,0,0,2007-10-23 08:02:33+00:00,2008-05-12 07:56:33+00:00,"We could implement an Camel transport for CXF to use.
In this case, CXF client can easily access the service which is provided by other Camel endpoint.
BTW, we could save hop by not send the message to the camel-cxf component's consumer.


To avoid the circlar dependency between the Camel and CXF,  all the Camel transport work will be done in the Camel svn.","jstrachan:1196827680:2007-12-05T12:08:00.680+0000:1196827680:2007-12-05T12:08:00.680+0000:Is this issue still open? Just wondered if we can close it yet with all the CXF effort lately
njiang:1196830338:2007-12-05T12:52:18.998+0000:1196830338:2007-12-05T12:52:18.998+0000:Hi James,

I am working on this JIRA and  the camel conduit can work now,
If everything is OK , I can submit the patch tomorrow.

Regards,
Willem.

njiang:1196900873:2007-12-06T08:27:53.881+0000:1196900873:2007-12-06T08:27:53.881+0000:Implementingthe cxf transport API with Camel core, 
also adding the unit test for test camel transport.

TODO
support load camel context in camel transport from spring configuration.
Adding systest and example to show how to use camel transport.

I will fill new camel JIRAs to trace the upper works.
jstrachan:1196917243:2007-12-06T13:00:43.558+0000:1196917243:2007-12-06T13:00:43.558+0000:Patch applied with thanks!"
0,CAMEL-189,Bug,Trivial,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Claus Ibsen,0,0,2007-10-19 22:38:20+00:00,2008-05-12 07:48:06+00:00,"I was browsing the source for the FTP component to see how the inner works.


I discovered a System.out statement in the class FtpProducer:
            System.out.println(sb.toString() + "" = "" + success);",
0,CAMEL-188,Bug,Major,None,1.3.0,"
None
",Closed,Won't Fix,1.3.0,Unassigned,Dejan Predovic,0,0,2007-10-19 14:17:14+00:00,2008-10-23 20:02:07+00:00,"<route>
            <from uri=""direct:foo""/>
            <filter>
                <xpath>
                    /alwaysFalse
                </xpath>
            </filter>
            <to uri=""mock:foo""/>
</route>


Exchange to mock:foo gets executed even when expression evaluates to false. when it evaluates to true, it doesn't get executed twice.","jstrachan:1192778617:2007-10-19T15:23:37.711+0000:1192778617:2007-10-19T15:23:37.711+0000:So this is our bad - the XML encoding has changed a little.  now  a <filter> contains the prediate and the actions to perform if the filter matches (like <when> as well).

e.g. this should do what you want

{code}
<route>
<from uri=""direct:foo""/>
<filter>
  <xpath>
  /alwaysFalse
  </xpath>
  <to uri=""mock:foo""/>
</filter>
</route>
{code}



dpredovic:1192780703:2007-10-19T15:58:23.547+0000:1192780703:2007-10-19T15:58:23.547+0000:Ok, works. :) But I wouldn't call it ""filter"" then, it's actually an ""if"".
"
0,CAMEL-187,Bug,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Dejan Predovic,0,0,2007-10-19 14:12:52+00:00,2008-05-12 07:56:33+00:00,"When used in ServiceMix messages are of the type javax.xml.transform.dom.DOMSource and not org.w3c.dom.Node, so we get a class cast exception.",jstrachan:1192778518:2007-10-19T15:21:58.518+0000:1192778518:2007-10-19T15:21:58.518+0000:patch applied with thanks!
0,CAMEL-186,New Feature,Minor,None,None,"
None
",Closed,Duplicate,"1.6.0, 2.0-M1",Willem Jiang,Hiram R. Chirino,0,0,2007-10-18 19:52:09+00:00,2009-10-24 11:16:12+00:00,"JSON is becoming a big data format for the Web 2.0 world.  Supporting this in camel could be interesting.  Perhaps we should support coverting the body of the JSON message do JSON based DOM like:


http://json.org/java/


What would be nicer is there were JSON binding annotations so that a JSON message could get mapped to a bean similar to how JAXB maps XML to beans.  But I don't think there is anything out there does does this.  [jabsorb\http://code.google.com/p/jabsorb/wiki/Manual] takes a stab at it and so does  rocket-gwt but I find it a bit lacking.  Also they don't provide a nice marshaling API that a 3rd party lib like Camel can leverage.",njiang:1229492593:2008-12-17T13:43:13.016+0000:1229492593:2008-12-17T13:43:13.016+0000:This issue is resolved in CAMEL-822.
0,CAMEL-185,New Feature,Minor,None,None,"
None
",Resolved,Later,Future,Unassigned,Hiram R. Chirino,2,2,2007-10-18 19:11:39+00:00,2013-05-26 08:56:49+00:00,"It would be cool if GWT RPC calls could be handled and routed VIA camel.  For more info on GWT RPC see:
http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.RemoteProcedureCalls.html


They have nice RPC class that allows frameworks to easily encode and decode it method invocations.. see:
http://code.google.com/webtoolkit/documentation/com.google.gwt.user.server.rpc.RPC.html","plankscale:1289285736:2010-11-09T14:55:36.152+0000:1289285736:2010-11-09T14:55:36.152+0000:Recently noticed a similar mechanism seems to exist for the 'soafaces' project, dubbed the UniversalClient API; ""An API to use from any GWT client to make SOA service calls with no RPC.""   Not sure if it only works for Mule endpoints or not based on the following.

http://code.google.com/p/soafaces/wiki/UniversalClient

""No need to write GWT RPC code anymore. Use the UniversalClient API to talk with POJO services that are packaged in your application server and/or talk with Mule accessible services/endpoints all across your enterprise and internet. Your GWT application will have convenient access to messaging services (SOAP, JMS, ESB ...etc) that can return JavaBeans or JSON objects back to the GWT client. All marshaling is handled by the framework.""

davsclaus:1369529809:2013-05-26T08:56:49.002+0000:1369529809:2013-05-26T08:56:49.002+0000:Closing old tickets which has no activity"
0,CAMEL-184,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,James Strachan,James Strachan,0,1,2007-10-18 18:40:43+00:00,2008-05-12 07:56:33+00:00,No Desc,"hohausal:1196778229:2007-12-04T22:23:49.935+0000:1196778229:2007-12-04T22:23:49.935+0000:If response of jms server and consumer ist very fast, i get an error that correlationId isn't registered and the wait of response end with a timeout.

I moved in JMSproducer.java the lines:

long requestTimeout = endpoint.getRequestTimeout();
FutureTask future = requestor.getReceiveFuture(correlationId, requestTimeout);

before the send:

getInOutTemplate().send(endpoint.getDestination(), new MessageCreator() {


Now all works fine.
jstrachan:1196818492:2007-12-05T09:34:52.079+0000:1196818492:2007-12-05T09:34:52.079+0000:great catch - reopening unti this is fixed
jstrachan:1196818820:2007-12-05T09:40:20.977+0000:1196818820:2007-12-05T09:40:20.977+0000:Patch appled Axel, many thanks!
hohausal:1196921212:2007-12-06T14:06:52.056+0000:1196921212:2007-12-06T14:06:52.056+0000:Hi James,

i have another problem wit jms INOUT messages. On some Client computers there are problems. When i send a request to the ActiveMQ server it will be shown in the log of the ActiveMQ, but my consumer (A AsyncProzessor with Spring) doesn't receive the message.

In the class JmsConfiguration in method createInOutTemplate in case of inout message the explicitQosEnabled is set to true

If i remove this line
   jmsTemplate.setExplicitQosEnabled(true);
all work fine with all clients.

Have you any idea?

Regards Axel


"
0,CAMEL-183,New Feature,Major,None,None,"
None
",Closed,Fixed,1.3.0,James Strachan,James Strachan,0,0,2007-10-18 18:37:43+00:00,2008-05-12 07:56:33+00:00,No Desc,"jstrachan:1192764700:2007-10-19T11:31:40.490+0000:1192764700:2007-10-19T11:31:40.490+0000:Code committed to trunk; just waiting for docs
jstrachan:1192778684:2007-10-19T15:24:44.552+0000:1192778684:2007-10-19T15:24:44.552+0000:see http://cwiki.apache.org/CAMEL/xstream.html"
0,CAMEL-182,Bug,Major,1.2.0,1.3.0,"
None
",Closed,Duplicate,1.3.0,Unassigned,Roman Kalukiewicz,0,0,2007-10-17 22:41:57+00:00,2008-05-12 07:56:33+00:00,"Exceptions are not handled when exception processing is done by pipeline.


It is probably because pipeline breaks when exchange contains an exception and there is exception because in org.apache.camel.processor.DeadLetterChannel.process(Exchange, AsyncCallback, RedeliveryData) method when you handle exception you clear it, but just few lines later in incrementRedeliveryCounter invocation you set it back.


JUnit test attached.","romkal:1192676935:2007-10-18T11:08:55.482+0000:1192676935:2007-10-18T11:08:55.482+0000:I have another comment to this issue. From one side we should be able to process exception in pipeline. On the other hand we should have an access to exception that was thrown in exception handling flow. Maybe some way to reset the exception or move it to property?
romkal:1194344554:2007-11-06T18:22:34.863+0000:1194344554:2007-11-06T18:22:34.863+0000:Duplicate of CAMEL-210"
0,CAMEL-181,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-10-15 09:25:08+00:00,2008-05-12 07:56:33+00:00,No Desc,"jstrachan:1192436034:2007-10-15T16:13:54.838+0000:1192436034:2007-10-15T16:13:54.838+0000:You can now do things like

{code}
from(""activemq:foo.bar"").filter().
{code}

then smart completion will find things like 

* el()
* groovy()
* ognl()
* xpath()
* xquery()

etc
jstrachan:1192499658:2007-10-16T09:54:18.299+0000:1192499658:2007-10-16T09:54:18.299+0000:We can now do better namespace based queries in XPath / XQuery now using the following

{code}
                Namespaces ns = new Namespaces(""c"", ""http://acme.com/cheese"");

                from(""direct:start"").filter().
                        xpath(""/c:person[@name='James']"", ns).
                        to(""mock:result"");
{code}"
0,CAMEL-180,Sub-task,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Willem Jiang,0,0,2007-10-15 08:05:01+00:00,2008-05-12 07:56:33+00:00,"In camel we want to create the soap endpoint which can leverage the CXF soap interceptors to do the soap message processing. 
In this case we do not want to create the endpoint with the SEI , we just want to create the endpoint with WSDL. 


this task includes these subtask
*Supporting to create server and client without SEI 
*Supporting the Spring configuration of the  CXF soap endpoint 
*Processing the inMessage and outMessage","njiang:1192749446:2007-10-19T07:17:26.665+0000:1192749446:2007-10-19T07:17:26.665+0000:This patch implements the soap component by calling the CXF soap binding's interceptors to do the soap relate work.
The unit test is CxfSoapTest, which show how to send input stream to the soap consumer and how to send the source object to a soap provider.

This patch is not include the Spring configuration support. 
I will create an other JIRA to trace this.
gnodet:1192781754:2007-10-19T16:15:54.181+0000:1192781754:2007-10-19T16:15:54.181+0000:Awesome,  I will have a look at it asap :-)
njiang:1194980311:2007-11-14T02:58:31.177+0000:1194980311:2007-11-14T02:58:31.177+0000:the patch is in the trunk"
0,CAMEL-179,Improvement,Minor,1.1.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,Gert Vanthienen,0,0,2007-10-13 07:54:30+00:00,2008-05-12 12:45:28+00:00,"If the original message in the example below contains a StreamSource, the second target in the to() will probably fail.  Auto-converting it to e.g. DOMSource should fix this...



from(""jbi:service:urn:servicemix:tutorial:wiretap"")
         .to(""jbi:endpoint:urn:servicemix:tutorial:jms:myQueue"", ""jbi:endpoint:urn:servicemix:tutorial:file:sender"");","gertvanthienen:1193052156:2007-10-22T19:22:36.277+0000:1193052156:2007-10-22T19:22:36.277+0000:This patch is a first attempt to solve this issue.  As discussed on IRC, a reusable ReReadableInterceptor was created to make it easier to add message re-readability to e.g. the dead letter channel afterwards.
jstrachan:1205801508:2008-03-18T08:51:48.473+0000:1205801508:2008-03-18T08:51:48.473+0000:Great stuff. I guess there are more routes that could lead to the same body being re-read other than just the multicast type; so I guess we might wanna apply this interceptor by default anyway - or at least make it a default and let folks remove it maybe?

I can imagine we'd also wanna do things like support other types such as...

* InputStream
* Reader

I wonder if the default behaviour should be to make things re-readable by default to avoid common issues (e.g. retry logic) - but have some way where we can explicitly disable the re-reading behaviour when we really don't want it (which is gonna be pretty rare)
gertvanthienen:1206413361:2008-03-25T10:49:21.069+0000:1206413361:2008-03-25T10:49:21.069+0000:Second attempt in attached CAMEL-179-v2.diff

The interceptor now uses Camel's type converter with a new interface instead of a hard-coded conversion map.  

I've added methods to RouteBuilder and RouteType to make it easier to use the new interceptor, but if we still want to make it the default, I would like some feedback on the asynchonous test cases going astray after implementing this -- can't seem to figure out what's going on there. 
jstrachan:1206658869:2008-03-28T07:01:09.662+0000:1206658869:2008-03-28T07:01:09.662+0000:Patch applied with huge thanks! Its just missed the cut of the 1.3.0 release; but I figure it'd be good to kick the tyres on this one a bit then we'll release 1.4.0 pretty soon I hope
davsclaus:1210567528:2008-05-12T12:45:28.064+0000:1210567528:2008-05-12T12:45:28.064+0000:Closed all 1.3 tickets"
0,CAMEL-178,Improvement,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-10-12 19:52:49+00:00,2008-05-12 07:56:33+00:00,also add a test case showing XQuery injection of a bean,"jstrachan:1192190793:2007-10-12T20:06:33.544+0000:1192190793:2007-10-12T20:06:33.544+0000:the <xquery> tag is also namespace aware too; so if you do

{code:lang=xml}
<beans xmlns:foo=""whatnot"">
...

<filter>
  <xquery>//foo:bar</xquery>
{code}

You can reuse the namespace prefixes in the doc"
0,CAMEL-177,Bug,Major,None,2.0-M1,"
None
",Closed,Incomplete,2.0-M1,Unassigned,Nicky Sandhu,0,0,2007-10-11 21:03:09+00:00,2009-10-24 11:16:11+00:00,"Added to test... existing test passes, new test fails. Follow up from discussion http://www.nabble.com/Pipeline-createNewExchange-t4609319s22882.html


Index: C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java
===================================================================
â€” C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java	(revision 583358)
+++ C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java	(working copy)
@@ -30,19 +30,40 @@
 public class SplitterTest extends ContextTestSupport {
     protected Endpoint<Exchange> startEndpoint;
     protected MockEndpoint resultEndpoint;
+    protected MockEndpoint nextResultEndpoint;


     public void testSendingAMessageUsingMulticastReceivesItsOwnExchange() throws Exception {
         resultEndpoint.expectedBodiesReceived(""James"", ""Guillaume"", ""Hiram"", ""Rob"");
+        nextResultEndpoint.expectedBodiesReceived(""James"", ""Guillaume"", ""Hiram"", ""Rob"");
+        
+        template.send(""direct:a"", new Processor() {
+            public void process(Exchange exchange) 

{
+                Message in = exchange.getIn();
+                in.setBody(""James,Guillaume,Hiram,Rob"");
+                in.setHeader(""foo"", ""bar"");
+            }

+        });


+        resultEndpoint.assertIsSatisfied();
+        nextResultEndpoint.assertIsSatisfied();
+    }
+
+    public void testSendingAMessageDoesNotForwardOutBody() throws Exception {
+        resultEndpoint.expectedBodiesReceived(""James"", ""Guillaume"", ""Hiram"", ""Rob"");
+        nextResultEndpoint.expectedBodiesReceived(""James"", ""Guillaume"", ""Hiram"", ""Rob"");
+        
         template.send(""direct:a"", new Processor() {
             public void process(Exchange exchange) 

{
                 Message in = exchange.getIn();
                 in.setBody(""James,Guillaume,Hiram,Rob"");
                 in.setHeader(""foo"", ""bar"");
+                Message out = exchange.getOut();
+                out.setBody(""Some Junk"");
             }

         });


         resultEndpoint.assertIsSatisfied();
+        nextResultEndpoint.assertIsSatisfied();
     }


     @Override
@@ -50,12 +71,13 @@
         super.setUp();


         resultEndpoint = getMockEndpoint(""mock:result"");
+        nextResultEndpoint = getMockEndpoint(""mock:nextResult"");
     }


     protected RouteBuilder createRouteBuilder() {
         return new RouteBuilder() {
             public void configure() 

{
-                from(""direct:a"").splitter(body().tokenize("","")).to(""mock:result"");
+                from(""direct:a"").splitter(body().tokenize("","")).to(""mock:result"",""mock:nextResult"");
             }

         };
     }","nickysandhu:1192114826:2007-10-11T23:00:26.253+0000:1192114826:2007-10-11T23:00:26.253+0000:Please review this patch carefully. It makes some changes to the tests as well so some assertions are removed/changed to make the test pass. I did this after some thought of what a pipeline should do and am looking for other suggestions/solutions
davsclaus:1223629745:2008-10-10T17:09:05.327+0000:1223629745:2008-10-10T17:09:05.327+0000:Nicky I know this is +1 year since. But what was the original problem you try to solve?
davsclaus:1236825881:2009-03-12T10:44:41.515+0000:1236825881:2009-03-12T10:44:41.515+0000:Create a new bug if this issue still exists. We have changed a lot in the code base since this bug was reported, and James have already fixed what Nicky spotted."
0,CAMEL-176,Improvement,Major,None,None,"
None
",Closed,Fixed,1.3.0,James Strachan,James Strachan,0,0,2007-10-11 15:03:52+00:00,2008-05-12 07:56:33+00:00,No Desc,jstrachan:1192099662:2007-10-11T18:47:42.308+0000:1192099662:2007-10-11T18:47:42.308+0000:Sorted - see the test cases in camel-jaxb
0,CAMEL-175,New Feature,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Unassigned,James Strachan,0,0,2007-10-11 12:26:17+00:00,2008-05-12 07:56:32+00:00,No Desc,jstrachan:1192076979:2007-10-11T12:29:39.216+0000:1192076979:2007-10-11T12:29:39.216+0000:trunk fixed now
0,CAMEL-174,Improvement,Minor,"1.1.0, 1.2.0",None,"
None
",Closed,Won't Fix,1.2.0,Unassigned,Bozhong Lin,0,0,2007-10-11 08:34:08+00:00,2008-10-23 20:03:02+00:00,"right now, some examples can be run with ""mvn exec:java"" command, some examples can be run with ""mvn camel:run"" command, some example can be run with either command. We should make ""how to run"" behavior consistent across all examples.","jstrachan:1192085456:2007-10-11T14:50:56.773+0000:1192085456:2007-10-11T14:50:56.773+0000:Am not sure really - as the main reason we support ""mvn exec:java"" is for the examples which don't use spring - ""mvn camel:run"" is only for spring based demos.

So the only demo which should rely on mvn exec:java is the hello-world one
davsclaus:1207651250:2008-04-08T18:40:50.287+0000:1207651250:2008-04-08T18:40:50.287+0000:Its stated in the README how to run it with the correct maven command. And after all there is only two styles.

Also in 1.4 we will have ANT files to start the samples with thanks to Peter for the hard work of creating the ANT files and provide it as a patch."
0,CAMEL-173,Bug,Minor,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Bozhong Lin,0,0,2007-10-11 08:13:31+00:00,2008-05-12 12:45:27+00:00,"the example throws following error:


[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.2.0 starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: /opt/dev/apache-camel-1.2.0/examples/camel-example-bam/target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@352d87
[nent.file.FileComponent@db248c] JDBCExceptionReporter          WARN  SQL Error: 0, SQLState: null
[nent.file.FileComponent@db248c] JDBCExceptionReporter          ERROR failed batch
Failed to load preferences.  Proceeding with defaults:


[nent.file.FileComponent@db248c] AbstractFlushingEventListener  ERROR Could not synchronize database state with session
org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update
        at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:249)
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:235)
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:139)
        at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
        at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)
        at org.hibernate.ejb.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:296)
        at org.springframework.orm.jpa.JpaTemplate$8.doInJpa(JpaTemplate.java:289)
        at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191)
        at org.springframework.orm.jpa.JpaTemplate.flush(JpaTemplate.java:287)
        at org.apache.camel.bam.processor.JpaBamProcessorSupport.loadEntity(JpaBamProcessorSupport.java:118)
        at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:96)
        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127)
        at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:91)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:76)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:49)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: java.sql.BatchUpdateException: failed batch
        at org.hsqldb.jdbc.jdbcStatement.executeBatch(Unknown Source)
        at org.hsqldb.jdbc.jdbcPreparedStatement.executeBatch(Unknown Source)
        at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)
        at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:242)
        ... 28 more
[nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Attempt to insert duplicate row due to concurrency issue, so retrying: org.springframework.orm.jpa.JpaSystemException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update
[nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Retry attempt due to duplicate row: 1
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[2 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[7 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]]","davsclaus:1206668679:2008-03-28T09:44:39.042+0000:1206668679:2008-03-28T09:44:39.042+0000:The exception is happening on startup, it does not affect the application later on. 
However it would be nicer to remove this noise.
jstrachan:1206669732:2008-03-28T10:02:12.456+0000:1206669732:2008-03-28T10:02:12.456+0000:Agreed. I""m thinking this could be caused by concurrent threads trying to insert the same row? Am wondering if a different JDBC provider does locking better or something?
davsclaus:1206674826:2008-03-28T11:27:06.213+0000:1206674826:2008-03-28T11:27:06.213+0000:CAMEL-173
- fixed concurrency issue with creating a new entity. Now using a ReentrantLock from Java.
- no more exceptions in the camel-bam-example demo app as well.
- added some assertions to the unit test
davsclaus:1206674911:2008-03-28T11:28:31.192+0000:1206674911:2008-03-28T11:28:31.192+0000:James please by all means review my patch committed. 

Running the demo app now only displays:
{code}
[INFO] [camel:run]
[pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting
[pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@ae4f8b
Failed to load preferences.  Proceeding with defaults:

[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[4 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]]
[         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]]
Stopping
{code}
jstrachan:1206675148:2008-03-28T11:32:28.620+0000:1206675148:2008-03-28T11:32:28.620+0000:Awesome stuff! :)

I guess the problem could still happen if folks were running multiple JVMs against the same database; though in that case a real database would be used that properly implements locks etc :)
davsclaus:1210567527:2008-05-12T12:45:27.425+0000:1210567527:2008-05-12T12:45:27.425+0000:Closed all 1.3 tickets"
0,CAMEL-172,Bug,Major,1.1.0,1.3.0,"
None
",Closed,Cannot Reproduce,1.3.0,Unassigned,Bozhong Lin,0,0,2007-10-11 03:07:10+00:00,2008-03-26 18:28:25+00:00,"Running org.apache.camel.example.JAXBConvertTest
2007-10-11 10:58:30,209 [mponent@1a99561] ERROR FileConsumer                   - com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType


org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType


        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:70)
        at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:68)
        at org.apache.camel.builder.ExpressionBuilder$16.evaluate(ExpressionBuilder.java:339)
        at org.apache.camel.builder.ValueBuilder.evaluate(ValueBuilder.java:36)
        at org.apache.camel.builder.ProcessorBuilder$1.process(ProcessorBuilder.java:42)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:103)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:87)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:76)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:49)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:595)
Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions
XmlElementRef points to a non-existent class.
        this problem is related to the following location:
                at java.util.List org.apache.camel.converter.jaxb.MessageType.headers
                at org.apache.camel.converter.jaxb.MessageType


        at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:66)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:361)
        at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:217)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:76)
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:55)","davsclaus:1206527305:2008-03-26T18:28:25.235+0000:1206527305:2008-03-26T18:28:25.235+0000:Haven't seen this error on the 1.3 trunk on either local or Bamboo.

Bozhong you you try again on the latest SVN code to see if you can reproduce the problem on your machine.
If you still have a problem then we can reopen this ticket."
0,CAMEL-171,Bug,Major,1.1.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Claus Ibsen,Bozhong Lin,0,0,2007-10-11 03:05:14+00:00,2008-05-12 12:45:27+00:00,"Running org.apache.camel.component.file.remote.FromFileToFtpTest
Server ready :: Apache FTP Server
Oct 11, 2007 10:57:43 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied
INFO: Asserting: Endpoint[mock:result] is satisfied
/ = true
//tmp2 = true
//tmp2/camel = true
Oct 11, 2007 10:57:44 AM org.apache.camel.processor.Logger log
SEVERE: On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: error sending file
org.apache.camel.RuntimeCamelException: error sending file
        at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:51)
        at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:37)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)
        at org.apache.camel.component.file.File


The build still said ""successful"" at the end","davsclaus:1206527373:2008-03-26T18:29:33.818+0000:1206527373:2008-03-26T18:29:33.818+0000:Will see if the test has a problem on the trunk
davsclaus:1206659317:2008-03-28T07:08:37.803+0000:1206659317:2008-03-28T07:08:37.803+0000:Was fixed on trunk.
davsclaus:1210567527:2008-05-12T12:45:27.388+0000:1210567527:2008-05-12T12:45:27.388+0000:Closed all 1.3 tickets"
0,CAMEL-170,Bug,Major,1.2.0,None,"
None
",Closed,Cannot Reproduce,1.2.0,Unassigned,Andreas Guther,0,0,2007-10-09 21:46:21+00:00,2008-10-23 20:03:02+00:00,"----Original Message----
From: Jos Dirksen jos.dirksen@gmail.com 
Sent: Tuesday, October 09, 2007 2:06 PM
To: camel-user@activemq.apache.org
Subject: Re: Receipient List seems not to work in Camel 1.2.0


I'm experiencing the same problem. With the 1.2.0 release and also with the
latest from SVN. One way or the other the last route is always used.


    private final static String ENDPOINT_1 =
""jbi:endpoint:http://servicemix.apache.org/samples/filemover/fileSender/fileSenderEndpoint"";
    private final static String ENDPOINT_2 =
""jbi:endpoint:http://servicemix.apache.org/samples/filemover/anotherFileSender/anotherFileSenderEndpoint"";


    public void configure() throws Exception 

{
       
from(""jbi:service:http://servicemix.apache.org/samples/filemover/camelReceiver"").to(ENDPOINT_1,ENDPOINT_2);
    }


Very simple route, however instead of sending it once to endpoint_1 it get's
sent twice to endpoint_2.


I've been debugging a bit and to problem seem to occur in the ""
wrapProcessorInInterceptors(RouteContext routeContext, Processor target)""
method of the ProcessorType class. 


To be more specific, I can see my old routes being overwritten in this part
of the method:


        for (InterceptorType interceptorRef : interceptors) {
            DelegateProcessor p =
interceptorRef.createInterceptor(routeContext);
            if (first == null) 

{
                first = p;
            }

            if (last != null) 

{
                last.setProcessor(p);
            }

            last = p;
        }


        if (last != null) 

{
            last.setProcessor(target);
        }



Andreas G Guther wrote:
> 
> Either I am getting something wrong or the current 1.2.0 version has
> some problems.
> 


â€“ 
View this message in context: http://www.nabble.com/Receipient-*List*-seems-not-to-work-in-Camel-1.2.0-tf4596679s22882.html#a13124770
Sent from the Camel - Users mailing list archive at Nabble.com.","jstrachan:1192100833:2007-10-11T19:07:13.034+0000:1192100833:2007-10-11T19:07:13.034+0000:FWIW I've just added this test case from that thread...


{code}

public class MyRouteBuilder extends RouteBuilder { 

   public static final String Q1 = ""jms:test.MyQueue.ONE-1""; 
   public static final String Q2 = ""jms:test.Number.2""; 
   public static final String Q3 = ""jms:test.Number.3""; 
    /** 
     * Allow this route to be run as an application 
     * 
     * @param args 
     */ 
    public static void main(String[] args) { 
        new Main().run(args); 
    } 

    public void configure() { 
                System.out.println(""**** Configuring ****""); 
        // lets populate the message queue with some messages 
        from(""file:src/data?noop=true"").to(Q1); 

        //from(Q1).to(""file://target/test?noop=true"");  // works fine 
and writes into file system 
                //from(Q1).to(Q2); // works also fine, writes into Q2 

                //from(Q1).to(""file://target/test?noop=true"", Q2); // 
writes to Q2 but not to file 
                //from(Q1).to(Q2, ""file://target/test?noop=true""); // 
writes to file but not to Q2 
                from(Q1).to(Q2, Q3); // write to Q3 but not to Q2 

        // set up a listener on the file component 
        from(""file://target/test?noop=true""). 
                bean(new SomeBean()); 
    } 

    public static class SomeBean { 

        public void someMethod(String body) { 
            System.out.println(""Received: "" + body); 
        } 
    } 
} 
{code}

I refactored a little and added it as Issue170Test to camel-core - though its working fine with trunk!

Will investigate trying to break it - such as by moving to the JMS transport
jstrachan:1192101558:2007-10-11T19:19:18.060+0000:1192101558:2007-10-11T19:19:18.060+0000:OK I've added another test case which derives from Issue170Test which rather than using mock endpoints, uses JMS. So we send a message to a queue (Q1), then go from Q1 -> two JMS queues. Then separately we consume from those 2 JMS queues to send to the 2 mock endpoints for the tests. It all works for me.

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsIssue170Test.java

and here's the base class which tests using just mock endpoints
https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/issues/Issue170Test.java

Any idea how to reproduce using just camel and file / JMS endpoints? Maybe this has now been resolved in trunk?
jstrachan:1195017348:2007-11-14T13:15:48.214+0000:1195017348:2007-11-14T13:15:48.214+0000:Until we figure out how to reproduce this issue, I'm gonna mark it as cannot reproduce - let us know if you can find a way to reproduce and we can reopen"
0,CAMEL-169,Bug,Major,1.2.0,None,"
None
",Closed,Fixed,1.2.0,James Strachan,Andreas Guther,0,0,2007-10-09 18:07:36+00:00,2008-05-12 07:56:32+00:00,"The release candidate seems to declare dependencies on camel-core 1.1-SNAPSHOT.  A release should not declare dependencies on SNAPSHOT version and also not on previous releases.


http://people.apache.org/~chirino/apache-camel-1.2.0-RC1/maven2/org/apache/camel/camel-parent/1.2.0/camel-parent-1.2.0.pom


I checked out 1.2.0 from tags and build it myself.  I noticed that there were some 1.1 SNAPSHOT versions but did not pay too much attention to it.  I then deployed to our internal Maven repository and clean-up my local repository.  I had a dependency to camel-core 1.2.0 declared in my project.  This give me the following error:


Exception in thread ""main"" java.lang.NoSuchMethodError: org.apache.camel.util.CamelContextHelper.convertTo(Lorg/apache/camel/CamelContext;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;


If I remove the dependency I get the following compilation error:


Missing:
----------
1) org.apache.camel:camel-core:jar:1.1-SNAPSHOT


  Try downloading the file manually from the project website.


  Then, install it using the command:
      mvn install:install-file -DgroupId=org.apache.camel -DartifactId=camel-core \
          -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file
Alternatively, if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=camel
-core \
          -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file \
           -Durl=[url] -DrepositoryId=[id]


  Path to dependency:
        1) markettools.platform:messaging:jar:1.0-SNAPSHOT
        2) org.apache.camel:camel-jms:jar:1.2.0
        3) org.apache.camel:camel-core:jar:1.1-SNAPSHOT


----------
1 required artifact is missing.",jstrachan:1192099525:2007-10-11T18:45:25.557+0000:1192099525:2007-10-11T18:45:25.557+0000:fixed in RC2
0,CAMEL-168,Bug,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,Nicky Sandhu,0,0,2007-10-09 15:24:36+00:00,2008-05-12 07:56:32+00:00,camel-ognl has a typo in its packaging. This causes the classes to be not included in the snapshot,jstrachan:1191915542:2007-10-09T15:39:02.155+0000:1191915542:2007-10-09T15:39:02.155+0000:Patch applied with thanks!
0,CAMEL-167,New Feature,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-10-09 11:15:36+00:00,2008-05-12 07:56:32+00:00,"e.g. it'd be nice to do things like



from(someUri).bean(myJmsListenerBean);




and it'd work out how to invoke a JMS MessageListener from the route; or indeed any kind of service / message API or transformation API thats around.


i.e. allow a Type Converter to be specified from the POJO's class to a Processor; then if one is available use that for processing the bean.","jstrachan:1191907176:2007-10-09T13:19:36.959+0000:1191907176:2007-10-09T13:19:36.959+0000:Issue resolved. Its documented here for an example
http://cwiki.apache.org/CAMEL/activemq.html

or the principle is described here...
http://cwiki.apache.org/CAMEL/bean-binding.html

jstrachan:1191907232:2007-10-09T13:20:32.265+0000:1191907232:2007-10-09T13:20:32.265+0000:ActiveMQ 5.0 can use this mechanism to invoke any JMS MessageListener in a bean flow...

{code}
from(anyURI).bean(aJmsMessageListener);
{code}


"
0,CAMEL-136,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.0-M1,Unassigned,James Strachan,0,0,2007-09-06 11:34:21+00:00,2009-07-31 06:33:31+00:00,"e.g. to support reordering according to the JMSXGroupID / JMSXGroupSeq headers we only reorder messages for the same value of JMSXGroupID if the sequence numbers are out of range.


For ActiveMQ we generally only reorder messages for the same Destination and ProducerId but differing ProducerSequenceId.


So in pseudocode its 



if (groupComparator.compare(firstMessage, secondMessage) == 0) {
  if (messageComparator.compare(firstMessage, secondMessage) > 0) {
    // lets swap the messages
  }","davsclaus:1220498777:2008-09-04T11:26:17.885+0000:1220498777:2008-09-04T11:26:17.885+0000:Moving to 2.0
davsclaus:1235372158:2009-02-23T14:55:58.069+0000:1235372158:2009-02-23T14:55:58.069+0000:This is already fixed by Martins great resequencer:


You can also use multiple expressions; so you could for example sort by priority first then some other custom header
{code}
resequencer(header(""JMSPriority""), header(""MyCustomerRating""))
{code}


davsclaus:1248993211:2009-07-31T06:33:31.771+0000:1248993211:2009-07-31T06:33:31.771+0000:Closing 2.0m1 tickets"
0,CAMEL-135,Improvement,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-09-04 17:29:23+00:00,2008-05-12 07:56:30+00:00,"when sending a message exchange into a pipeline, the pipeline should terminate as soon as there's any kind of exception or fault.


also the output, fault and exception should be returned from the last step called in a pipeline","jstrachan:1188899323:2007-09-04T17:48:43.542+0000:1188899323:2007-09-04T17:48:43.542+0000:For examples of this working, see the FaultRouteTest and PipelineTest"
0,CAMEL-134,Improvement,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-09-03 15:30:34+00:00,2008-05-12 07:56:30+00:00,No Desc,"jstrachan:1188805670:2007-09-03T15:47:50.015+0000:1188805670:2007-09-03T15:47:50.015+0000:I've added some debug logging to DefaultCamelContext and DefaultComponentResolver to provide debug logging of how components are resolved and to show which component creates endpoint URIs. 

I wonder how this could be improved? I wonder if we should invent some logging names for the discovery of components / endpoints / type converters so its easy to watch the 'magic' via log4j config files?
jstrachan:1190238572:2007-09-20T05:49:32.496+0000:1190238572:2007-09-20T05:49:32.496+0000:Am gonna mark this one as fixed for now; if anyone has any good ideas for how to improve this we can reopen it"
0,CAMEL-133,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-31 15:22:10+00:00,2008-05-12 07:56:30+00:00,currently MINA assumes InOnly; we should make it easy to configure things to be InOut or InOnly - maybe also defaulting the MEP via a URI parameter?,"jstrachan:1188872993:2007-09-04T10:29:53.078+0000:1188872993:2007-09-04T10:29:53.078+0000:trunk now supports Exchange.getExchangePattern() which is-a ExchangePattern
jstrachan:1188876981:2007-09-04T11:36:21.917+0000:1188876981:2007-09-04T11:36:21.917+0000:now you can do endpoint.createExchange(pattern) to specify an exact ExchangePattern to be used on an endpoint
nickysandhu:1190190725:2007-09-19T16:32:05.788+0000:1190190725:2007-09-19T16:32:05.788+0000:I was in need to communicate with a text based protocol socket. I am adding a patch to configure codec via URI parameters. This patch also allows for InOut ExchangePattern on the MinaProducer and waits for response.

There is test case (MinaTcpWithInOutTest)  using the ReverserServer from mina examples. The test case only works when stepping via debugger and not when run... I think its related to the AsyncProcessor changes. Please take a look

nickysandhu:1190198104:2007-09-19T18:35:04.520+0000:1190198104:2007-09-19T18:35:04.520+0000:Fixed the previous problem with this patch. It now runs fine ( I learnt that I have to wait for the response and there is no ReadFuture equivalent of WriteFuture). 
jstrachan:1190238715:2007-09-20T05:51:55.172+0000:1190238715:2007-09-20T05:51:55.172+0000:patch applied with huge thanks Nicky! Great job!"
0,CAMEL-132,Improvement,Major,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-31 11:12:02+00:00,2008-05-12 07:56:30+00:00,No Desc,"jstrachan:1188531801:2007-08-31T11:43:21.133+0000:1188531801:2007-08-31T11:43:21.133+0000:fixed, see HttpPollingGetTest"
0,CAMEL-131,New Feature,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,James Strachan,Hiram R. Chirino,0,0,2007-08-30 14:52:39+00:00,2008-05-12 07:56:30+00:00,No Desc,chirino:1188461402:2007-08-30T16:10:02.250+0000:1188461402:2007-08-30T16:10:02.250+0000:implemented.
0,CAMEL-130,New Feature,Major,1.2.0,1.3.0,"
None
",Closed,Fixed,1.3.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2007-08-30 14:51:35+00:00,2008-05-12 07:56:30+00:00,No Desc,chirino:1188461443:2007-08-30T16:10:43.716+0000:1188461443:2007-08-30T16:10:43.716+0000:Implemented but it looks like the Jetty client implementation still has a few bugs in it so I don't recommend it get used in anger yet.
0,CAMEL-129,New Feature,Major,1.0.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2007-08-29 16:02:21+00:00,2008-05-12 07:56:30+00:00,No Desc,"chirino:1188374943:2007-08-29T16:09:03.668+0000:1188374943:2007-08-29T16:09:03.668+0000:The lack of support for doing this was first noticed on this thread:
http://www.nabble.com/JMSExpiration-not-being-maintained-by-routing--tf4346887s22882.html

chirino:1188375138:2007-08-29T16:12:18.014+0000:1188375138:2007-08-29T16:12:18.014+0000:The JMS endpoint now supports a a preserveMessageQos={boolean} option.  This option is used by the endpoint producer when sending a message to JMS to determine if it should use the QoS options that are in the message that it is given when sending.

example usage:
{code}
from(""activemq:queue:p1"").to(""activemq:queue:p2?preserveMessageQos=true"");
{code}
chirino:1188375160:2007-08-29T16:12:40.475+0000:1188375160:2007-08-29T16:12:40.475+0000:fixed in trunk in rev 570851"
0,CAMEL-128,New Feature,Major,1.1.0,None,"
None
",Closed,Fixed,1.2.0,James Strachan,Nicky Sandhu,0,0,2007-08-28 23:18:15+00:00,2008-05-12 07:56:30+00:00,Adds a JDBC component,"jstrachan:1188348152:2007-08-29T08:42:32.172+0000:1188348152:2007-08-29T08:42:32.172+0000:Awesome stuff! Patch applied with thanks! Am just tinkering a bit with the test case...

We just need to document it on the wiki. I've added a basic page here...

http://cwiki.apache.org/confluence/display/CAMEL/JDBC

Fancy filling in any more details? :)
jstrachan:1191223330:2007-10-01T15:22:10.256+0000:1191223330:2007-10-01T15:22:10.256+0000:Documentation is here: http://cwiki.apache.org/CAMEL/jdbc.html"
0,CAMEL-127,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-28 11:33:45+00:00,2008-05-12 07:56:30+00:00,No Desc,jstrachan:1188281975:2007-08-28T14:19:35.890+0000:1188281975:2007-08-28T14:19:35.890+0000:See http://cwiki.apache.org/CAMEL/timer.html
0,CAMEL-126,Improvement,Major,None,1.5.0,"
None
",Closed,Fixed,1.5.0,Gert Vanthienen,James Strachan,7,1,2007-08-28 11:09:53+00:00,2009-02-16 05:51:46+00:00,"Currently the ResequencerEngine uses a Queue for asynchronous delivery of the messages. We might want to provide a Processor instead; so we could if we prefer use synchronous dispatch. 


e.g. to be able to use a single thread and JMS transaction on a single JMS session (to avoid XA etc) to do 



consume messages
reorder
send them on to another destination
jms session.commit()



As far as I understand it, the current async mechanism will make transactional re-sequencing harder right?","mrt1nz:1188339301:2007-08-29T06:15:01.911+0000:1188339301:2007-08-29T06:15:01.911+0000:Right. Also, we have turn off delivery of messages from the internal timer thread. Hope, I have a patch ready within the next days ...

I guess jms session.commit() gets implicitly called when setting the JMSConfiguration.transacted property to true (during JMSComponent setup), right?

mrt1nz:1188522870:2007-08-31T09:14:30.418+0000:1188522870:2007-08-31T09:14:30.418+0000:Attached is a patch for synchronous delivery of messages. Messages are now consumed from an endpoint and sent to the next processor by a single thread. Further unit tests are included as well.

mrt1nz:1189822812:2007-09-15T10:20:12.103+0000:1189822812:2007-09-15T10:20:12.103+0000:Attached is some documentation (Wiki markup) about the stream-processing resequencer.
jstrachan:1191566466:2007-10-05T14:41:06.469+0000:1191566466:2007-10-05T14:41:06.469+0000:Sorry this issue fell through the cracks. I tried applying the patch and got compile errors in the StreamResequencer; not yet sure its that trunk has moved on since the patch was created or if its an IDEA bug applying the patch...


mrt1nz:1191582900:2007-10-05T19:15:00.195+0000:1191582900:2007-10-05T19:15:00.195+0000:I could not reproduce the compile errors when using Eclipse for applying the patch. There was only a minor conflict within the javadocs. However, I re-created a patch for the latest trunk (attachment: camel-core.patch-update) to remove these minor conflicts. Also, the path names in the patch are now relative to the camel-core module.

mrt1nz:1206664383:2008-03-28T08:33:03.749+0000:1206664383:2008-03-28T08:33:03.749+0000:James,

can you please try again to apply the patch (camel-core.patch-update-2.zip). I re-created the patch from today's trunk.

I also tested to apply the patch locally and found that there are unmatched regions in StreamResequencer.java. Therefore, I included a local copy of StreamResequencer.java file as well. Copying the file over the old version of StreamResequencer.java in addition to applying the patch should work.

Thanks in advance,
Martin


gertvanthienen:1222046829:2008-09-22T09:27:09.666+0000:1222046829:2008-09-22T09:27:09.666+0000:Martin,

Thanks for your patch!  It has been committed in http://svn.eu.apache.org/viewvc?view=rev&revision=697732.
I did need to make some minor changes to get it working again, so feel free to reopen this issue and attach a new patch to correct the things I messed up in the process ;)

Regards,

Gert
mrt1nz:1222560732:2008-09-28T08:12:12.504+0000:1222560732:2008-09-28T08:12:12.504+0000:Gert,

thanks for applying the patch. I re-opened this issue because of a thread-safety problem introduced with the latest changes: {{StreamResequencer.process(Exchange)}} used the non-thread-safe {{ResequencerEngine}}. I changed this method to be empty (this consistent with {{BatchProcessor.process(Exchange)}}) so that exchanges are only polled from an endpoint and synchronously sent to a destination/processor using a single polling thread. The corresponding patch is {{camel-core.patch-update-3}}. 

(A multi-threaded {{Processor}}-based implementation has been discussed in [http://www.nabble.com/forum/ViewPost.jtp?post=19344150&framed=y&skin=22882]. Not sure yet when I can provide an additional patch for that but as soon as I have one I'll open another related JIRA issue for it).

With {{camel-core.patch-update-3}} I also added support for a more fluent resequencer configuration. For example instead of writing {{from(...).resequencer(...).stream(new StreamResequencerConfig(5000, 4000L))}} you can now alternatively write {{from(...).resequencer(...).stream().capacity(5000).timeout(4000L)}}. I'll update the documentation in the Camel Wiki as soon as the patch is applied.

Regards,
Martin
davsclaus:1222563162:2008-09-28T08:52:42.974+0000:1222563162:2008-09-28T08:52:42.974+0000:Martin,

Thanks for the patch. I have applied it.

Please open a new ticket for the missing multi thread processor, otherwise we forget about it
davsclaus:1223293029:2008-10-06T19:37:09.147+0000:1223293029:2008-10-06T19:37:09.147+0000:Martin, I think the Config object could be a shared object for all kind that uses the BatchProcessor
- resequencer
- aggregator

So we should consider having a shared config object for this in Camel 2.0. But I like it. Then its possible to have Java DSL and use Spring XML for dynamic values, where they are easier to spot and change.
mrt1nz:1223353488:2008-10-07T12:24:48.145+0000:1223353488:2008-10-07T12:24:48.145+0000:Claus, I'll address that when I work on https://issues.apache.org/activemq/browse/CAMEL-949. 
davsclaus:1234734706:2009-02-16T05:51:46.391+0000:1234734706:2009-02-16T05:51:46.391+0000:Closing all 1.5.0 issues"
0,CAMEL-125,Improvement,Major,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Martin Krasser,0,0,2007-08-26 17:00:33+00:00,2008-05-12 07:56:30+00:00,"Attached is a patch that adds a stream-processing resequencer to Camel. The resequencing algorithm is based on the detection of gaps in a message stream rather than on a fixed batch size. Gap detection in combination with timeouts removes the constraint of having to know the number of messages of a sequence in advance (although a capacity parameter prevents the resequencer from running out of memory) 


Route builder examples for the stream-processing resequencer:


from(""direct:start"").resequencer(header(""seqnum"")).stream().to(""mock:result"")


is equivalent to:


from(""direct:start"").resequencer(header(""seqnum"")).stream(StreamResequencerConfig.getDefault()).to(""mock:result"")


Custom values for the resequencer's capacity and timeout can be set like in this example:


from(""direct:start"").resequencer(header(""seqnum"")).stream(new StreamResequencerConfig(300, 4000L)).to(""mock:result"")


The XML configuration looks like:



<camelContext id=""camel"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
  <route>
    <from uri=""direct:start""/>
    <resequencer>
      <simple>in.header.seqnum</simple>
      <to uri=""mock:result"" />
      <stream-config capacity=""300"", timeout=""4000""/>
    </resequencer>
  </route>
</camelContext>




The existing batch-processing resequencer can be defined as usual:


from(""direct:start"").resequencer(header(""seqnum"")).to(""mock:result"")


which is now equivalent to 


from(""direct:start"").resequencer(header(""seqnum"")).batch().to(""mock:result"")


It is now also possible to define a custom configuration for the existing batch-processing resequencer:  


from(""direct:start"").resequencer(header(""seqnum"")).batch(new BatchResequencerConfig(300, 4000L)).to(""mock:result"")


This set the batchSize to 300 and the batchTimeout to 4000 ms. 


For the stream-processing resequencer to work, messages must contain a sequence number for which a predecessor and a successor is known. For example a message with the sequence number 3 has a predecessor message with the sequence number 2 and a successor message with the sequence number 4. The message sequence 2,3,5 has a gap because the sucessor of 3 is missing. The resequencer therefore has to retain message 5 until message 4 arrives (or a timeout occurs). 


Gap detection is done with strategies that implement the SequenceNumberComparator<E> interface. In addition to the java.util.Comparator<E>.compare(E, E) operation the SequenceNumberComparator<E> interface defines the predecessor(E, E) and successor(E, E) operations. The stream resequencer can be configured with cutstom SequenceNumberComparator<E> strategies.


The stream-processing resequencer uses the same algorithm as the one in ServiceMix-3.2-SNAPSHOT (servicemix-eip). In order to avoid compile-time dependencies to ServiceMix I've copied the ServiceMix-independent resequencing engine over to Camel. This redundancy should be removed once Camel and servicemix-eip are going to be combined (are they?). I can contribute to this task, if needed.","jstrachan:1188170926:2007-08-27T07:28:46.151+0000:1188170926:2007-08-27T07:28:46.151+0000:Awesome patch and comments! Am on vacation today but will hopefully get chance to review fully and commit on tueday. 

Incidentally yes I'd love to combine camel and servicemix-eip together - contributions most welcome. In ServiceMix 4 it'd be great to combine them into Camel and have ServiceMix natively understand Camel components maybe (FWIW the Camel API is extremely close to the new ServiceMix 4 APIs). Contributions always welcome! Keep up the great work Martin!
jstrachan:1188270447:2007-08-28T11:07:27.962+0000:1188270447:2007-08-28T11:07:27.962+0000:Patch applied with huge thanks - great work Martin!

One thought I had was, should we make the ResequenceEngine take a Processor type thing to deliver messages rather than using the Queue and SequenceSender. I guess we could reuse a SedaProcessor or something; I did wonder if we might want to support synchronous dispatch of the messages for easier transaction handling. 

e.g. in one JMS session say, consume a bunch of messages and send them on in the right order - in a single thread & JMS transaction.
mrt1nz:1188276331:2007-08-28T12:45:31.620+0000:1188276331:2007-08-28T12:45:31.620+0000:... Processor instead of Queue and SequenceSender:
Good idea. I'll provide a patch (within the next two weeks, I hope).

... Synchronous dispatch:
Here I can imagine to use a polling consumer as done in org.apache.camel.processor.Resequencer. With a small (configurable) receive-timeout (e.g. of 200 ms) the polling consumer repeatedly receives messages and adds it to resequencer engine. With every receive-timeout the polling thread also attempts to deliver() re-ordered exchanges (to the next processor). In this case we can turn off the deliver() call from the internal timer thread and we remain with a single thread that performs the delivery/dispatch. Does this address your point? If yes, I'll start working on that and provide a patch.

Cheers,
Martin
mrt1nz:1188276412:2007-08-28T12:46:52.828+0000:1188276412:2007-08-28T12:46:52.828+0000:... and thanks for applying the patches :)"
0,CAMEL-124,Improvement,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,2,0,2007-08-25 06:59:54+00:00,2009-07-31 06:33:31+00:00,No Desc,"davsclaus:1217056188:2008-07-26T15:09:48.469+0000:1217056188:2008-07-26T15:09:48.469+0000:Scheduled for Camel 2.0 where we have time to refactor so we can have more common code in file, ftp etc using a VFS.
davsclaus:1230264279:2008-12-26T12:04:39.682+0000:1230264279:2008-12-26T12:04:39.682+0000:The major refactor to camel-ftp introduced the RemoteFileProcessStrategy.

We have these strategies
- delete
- rename
- lock

davsclaus:1248993211:2009-07-31T06:33:31.729+0000:1248993211:2009-07-31T06:33:31.729+0000:Closing 2.0m1 tickets"
0,CAMEL-123,Improvement,Major,None,2.0-M2,"
None
",Closed,Duplicate,2.0-M2,Claus Ibsen,James Strachan,3,0,2007-08-25 06:58:53+00:00,2009-11-21 11:57:54+00:00,e.g. file / FTP should only delete the file after successful processing has occurred etc,"jstrachan:1188345419:2007-08-29T07:56:59.178+0000:1188345419:2007-08-29T07:56:59.178+0000:have added a UnitOfWork object on an Exchange which can act as the registration point for onComplete / onFailure callbacks - it just needs to be wired into the sync/async processing changes Hiram made yesterday
davsclaus:1206344219:2008-03-24T15:36:59.642+0000:1206344219:2008-03-24T15:36:59.642+0000:James any update/status on this? Is there some work pending?
davsclaus:1232446559:2009-01-20T18:15:59.539+0000:1232446559:2009-01-20T18:15:59.539+0000:The File components could benefit from this so they will hook into UOW and get a onComplete or onFailure callbacks.

These components handle it themself today using try .. catch logic.

I might as well take on this one and use the file component as use-case. For starters the API can be exposed internally/spi and later we can consider some nice DSL supports so you can attach custom code to be invoked.
davsclaus:1234136368:2009-02-09T07:39:28.505+0000:1234136368:2009-02-09T07:39:28.505+0000:UnitOfWork is only weaven into the route if you use the route builder.

For manual code such as creating a consumer from an endpoint will not inject the UoW
davsclaus:1234137302:2009-02-09T07:55:02.265+0000:1234137302:2009-02-09T07:55:02.265+0000:We got a catch-22 situation

UnitOfWorkProcessor set up the add/remove synchronzation callbacks but they are lazy created just before the Exchange is processed.
So in another component/consumer component/producer you can not add the synchronization before its processed.

But you need to use the async processor and do it in the callback done method. 

Need to look into this some more. The idea is also to expose some nice methods in the DSL so end users can add their own custom processing, such as being able to send an email, log or whatever an exchange is done/failed.
davsclaus:1234154056:2009-02-09T12:34:16.731+0000:1234154056:2009-02-09T12:34:16.731+0000:A work in progress patch.

We need to step back and rethink this one. James have some good ideas.
davsclaus:1234154218:2009-02-09T12:36:58.887+0000:1234154218:2009-02-09T12:36:58.887+0000:[13:22]  <jstrachan> cibsen: with all this consumer v route v UOW; we maybe need a review of all that code really - as when we allow for routes to be started/stopped as independent things it might change things a bit
[13:23]  <cibsen> yeah
[13:24]  <cibsen> there is a gremlin lying there waiting when starting/stopping routes is more dynamic
[13:24]  <cibsen> I will park my work and attach a patch to the ticket
[13:26]  <jstrachan> yeah
[13:26]  <jstrachan> might have a big impact when we try add that
[13:26]  <jstrachan> it'd be great if we can keep all the big impacts inside the core common impl of camel rather than having component/endpoint developers having to worry about it
[13:29]  <cibsen> +1
[13:29]  <cibsen> yeah I wanted the UoW stuff for components as well so they can register custom code for clean up
[13:29]  <jstrachan> yeah!
[13:29]  <jstrachan> however that works - we need a nice simple API the component developers can use
[13:30]  <jstrachan> then we can tinker under the covers to figure out how it works
[13:30]  <jstrachan> (whether using real spring transactions, or UOW or whatever)
[13:30]  <jstrachan> maybe we should just use spring transactions for example?
[13:30]  <cibsen> I also thoght that we needed a nice DSL in the route: from(x).onComplete(process).to(zzz)
[13:30]  <jstrachan> and just kinda make transactions look like a transaction manager?
[13:30]  <jstrachan> though then there's the transaction context propogating threads issue etc
[13:30]  <jstrachan> yeah
[13:31]  <jstrachan> we might also want to be able to start/stop routes by ID too
[13:31]  <cibsen> yeah i think we should stick with Spring TX
[13:31]  <jstrachan> yeah
[13:31]  <cibsen> its to comple to roll out your own
[13:31]  <jstrachan> lets do it :)
[13:31]  <jstrachan> yeah
[13:31]  <jstrachan> then we'd just need a file transaction manager
[13:31]  <jstrachan> or some kinda 'simple local transaction manager' for non-tx resources
davsclaus:1234166800:2009-02-09T16:06:40.604+0000:1234166800:2009-02-09T16:06:40.604+0000:We need a bit more time on this one, and I want to narrow down on a milestone build of Camel 2.0
davsclaus:1242345341:2009-05-15T07:55:41.676+0000:1242345341:2009-05-15T07:55:41.676+0000:CAMEL-1604 implements this feature
davsclaus:1258775874:2009-11-21T11:57:54.176+0000:1258775874:2009-11-21T11:57:54.176+0000:Closing all 2.0M2 tickets"
0,CAMEL-122,Task,Major,None,"1.6.0, 2.0-M1","
None
",Closed,Fixed,"1.6.0, 2.0-M1",Hadrian Zbarcea,James Strachan,1,0,2007-08-25 06:55:26+00:00,2009-07-31 06:33:31+00:00,No Desc,"davsclaus:1216093682:2008-07-15T11:48:02.692+0000:1216093682:2008-07-15T11:48:02.692+0000:James has recently added stuff so you can ref to a spring bean that is the error handler and redelivery policy. So in fact you can do all the spring configuration.
Maybe this issue is less important now.
janstey:1222661654:2008-09-29T12:14:14.112+0000:1222661654:2008-09-29T12:14:14.112+0000:I agree with Claus on this one. Hadrian, if you haven't put too much work into this, maybe we could move to 2.0?
davsclaus:1222662126:2008-09-29T12:22:06.937+0000:1222662126:2008-09-29T12:22:06.937+0000:I think if we need full DSL support using the same name as java DSL then there are many xml elements to add, and what if end-users mix/match with this and the errorHandlerRef stuff? Then it gets complicated.

However maybe we can not do complex error handling routing as in Java DSL. How do you do this?

{code}
errorHandler(deadLetterChannel()).processRef(myErrorProcessor).to(""bean:someBean).to(""file://backup/errror"");
{code}

beware of syntax error as Firefox does not have code intellisence ;)
davsclaus:1232447155:2009-01-20T18:25:55.634+0000:1232447155:2009-01-20T18:25:55.634+0000:The Spring DSL can now properly do error handling, albeit you should define it as spring beans etc.

See wiki doc:
http://camel.apache.org/error-handler.html

davsclaus:1248993211:2009-07-31T06:33:31.686+0000:1248993211:2009-07-31T06:33:31.686+0000:Closing 2.0m1 tickets"
0,CAMEL-121,Sub-task,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Willem Jiang,0,0,2007-08-24 08:43:44+00:00,2008-05-12 07:56:30+00:00,"A CXF request message will be handled with a bunch of interceptor, we can dived these different stage message to raw message , payload message, and POJO invocation
Raw Message
This message is the fresh message which come from CXF transport, it is not been handled any other interceptors .
Payload Message
The message which is marshaled message headers and leave the remain message as StaX stream reader.
POJO invocation
The client side request will be marshaled into Java objcets as the POJO invocation finally, we can it a POJO invocation.


This task just work on to enable the CXF components to deal with RawMessage and Payload Message.","njiang:1189811285:2007-09-15T07:08:05.933+0000:1189811285:2007-09-15T07:08:05.933+0000:The patch 121 has some unit tests to show how to create a camel router with different message model.
I will continue to do some clean up work about it task , they are listed in the todo comments of the code.
njiang:1190931574:2007-09-28T06:19:34.480+0000:1190931574:2007-09-28T06:19:34.480+0000:Current CXF component do not support the oneway message and handle the fault message in the PAYLOAD and MESSAGE Data Formate 
jstrachan:1191896564:2007-10-09T10:22:44.444+0000:1191896564:2007-10-09T10:22:44.444+0000:The patch now doesn't work as I've applied CAMEL-119.

Any chance you could re-create the patch for this issue?
njiang:1191908930:2007-10-09T13:48:50.650+0000:1191908930:2007-10-09T13:48:50.650+0000:Hi James,

This patch has been applied by chirino in the revision 576522  at Sep 17. I think we can close it now.

Willem.
jstrachan:1191916901:2007-10-09T16:01:41.305+0000:1191916901:2007-10-09T16:01:41.305+0000:applied by chirino in the revision 576522 at Sep 17."
0,CAMEL-120,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-24 08:40:07+00:00,2008-05-12 07:56:29+00:00,"then folks could poll a HTTP resource via


from(""http://foo.bar"").to(""..."") etc",chirino:1188294812:2007-08-28T17:53:32.181+0000:1188294812:2007-08-28T17:53:32.181+0000:The jetty sever is now in it's own component.. see rev 570501
0,CAMEL-119,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,Willem Jiang,0,0,2007-08-24 07:54:23+00:00,2008-05-12 07:56:29+00:00,No Desc,"njiang:1187913413:2007-08-24T07:56:53.902+0000:1187913413:2007-08-24T07:56:53.902+0000:Support spring context in CXF endpoint, which can help camel to build up CXF Server and CXF Client

njiang:1191885403:2007-10-09T07:16:43.932+0000:1191885403:2007-10-09T07:16:43.932+0000:Added of the CXF endpoint spring support.
Now camel-cxf component support the get the cxf endpoint information from the Spring Application Context
The CXF endpoint schema CxfEndpoint.xsd can be found at 
trunk/components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd

The endpoint spring example can be found at 
trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointBeans.xml

BTW, this patch(cxf-spring.patch) also includes the CAMEL-162's patch.

jstrachan:1191896417:2007-10-09T10:20:17.310+0000:1191896417:2007-10-09T10:20:17.310+0000:Patch applied with thanks!"
0,CAMEL-118,Sub-task,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Willem Jiang,0,0,2007-08-24 07:20:36+00:00,2008-05-12 07:56:29+00:00,"CXFProducer  holds the CXF client's reference,CXFConsumer holds the  CXF server's reference, Now I just wrote a router test which redirect a service request from CXFService A to CXFService B


I attached a patch and a svn state out put which would be helpful to verify the files statues","jstrachan:1188268528:2007-08-28T10:35:28.091+0000:1188268528:2007-08-28T10:35:28.091+0000:After applying your changes I get these compile errors

{code}

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[24,38] package org.apache.cxf.transport.local does not exist

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[26,38] package org.apache.cxf.transport.local does not exist

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[33,18] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfConsumer

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[36,66] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfConsumer

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[30,38] package org.apache.cxf.transport.local does not exist

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[80,11] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[39,12] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[61,11] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[71,41] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[75,14] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java:[10,30] cannot find symbol
symbol  : class MessageContentsList
location: package org.apache.cxf.message

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[46,15] internal error; cannot instantiate org.apache.camel.component.cxf.CxfProducer.<init> at org.apache.camel.component.cxf.CxfProducer to ()

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[65,44] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[78,16] cannot find symbol
symbol  : class LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[78,65] cannot find symbol
symbol  : variable LocalTransportFactory
location: class org.apache.camel.component.cxf.CxfComponent

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java:[32,25] cannot find symbol
symbol  : class MessageContentsList
location: class org.apache.camel.component.cxf.CamelInvoker

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[78,31] cannot find symbol
symbol  : method getAddress()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[79,28] cannot find symbol
symbol  : method getServiceClass()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[80,63] cannot find symbol
symbol  : method getServiceClass()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[82,28] cannot find symbol
symbol  : method getWsdlURL()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[83,35] cannot find symbol
symbol  : method getWsdlURL()
location: class org.apache.camel.component.cxf.CxfEndpoint
{code}
jstrachan:1188268567:2007-08-28T10:36:07.886+0000:1188268567:2007-08-28T10:36:07.886+0000:BTW is it your intention in this patch to delete the CxfInvoke component right? Are you saying that you are combining both CXF components together right?
jstrachan:1188268981:2007-08-28T10:43:01.716+0000:1188268981:2007-08-28T10:43:01.716+0000:Adding back the transport-local dependency you deleted removes some of the compile errors...

{code}
/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[46,15] cannot find symbol
symbol  : constructor CxfProducer(org.apache.camel.component.cxf.CxfEndpoint,org.apache.cxf.transport.local.LocalTransportFactory)
location: class org.apache.camel.component.cxf.CxfProducer

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[78,31] cannot find symbol
symbol  : method getAddress()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[79,28] cannot find symbol
symbol  : method getServiceClass()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[80,63] cannot find symbol
symbol  : method getServiceClass()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[82,28] cannot find symbol
symbol  : method getWsdlURL()
location: class org.apache.camel.component.cxf.CxfEndpoint

/workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[83,35] cannot find symbol
symbol  : method getWsdlURL()
location: class org.apache.camel.component.cxf.CxfEndpoint
{code}

Am guessing you used a different CXF version?
jstrachan:1188269245:2007-08-28T10:47:25.665+0000:1188269245:2007-08-28T10:47:25.665+0000:Hmm - it seems that the patch cannot be applied on a few files - e.g. the CxfEndpoint.java patch. As it seems your patch is against an old version of the code?

e.g. your patch uses the line

{code}
  * @version $Revision$
{code}

when trunk is

{code}
 * @version $Revision: 563665 $
{code}

Any chance you could do an 'svn update' to ensure you are using the latest/greatest trunk, then create the patch again please? As right now I cant apply it
njiang:1188279162:2007-08-28T13:32:42.169+0000:1188279162:2007-08-28T13:32:42.169+0000:remove the cxf invoke componet
njiang:1188279292:2007-08-28T13:34:52.345+0000:1188279292:2007-08-28T13:34:52.345+0000:patch for cxf componets
jstrachan:1188283992:2007-08-28T14:53:12.063+0000:1188283992:2007-08-28T14:53:12.063+0000:So I've tried IDEA, eclipse, patch and TextMate. None of them are capable of applying your latest cxf.patch2 file. I've no idea what it is you're doing thats screwing up any attempt at an automated apply.

How are you creating the patch file?

Here's the output from patch...

{code}
stracbook:/workspace/java/camel jstrachan$ patch -i ~/Desktop/cxf.patch2 
(Stripping trailing CRs from patch.)
patching file CxfRouterTest.java
(Stripping trailing CRs from patch.)
patching file CxfProducerTest.java
(Stripping trailing CRs from patch.)
can't find file to patch at input line 227
Perhaps you should have used the -p or --strip option?
The text leading up to this was:
--------------------------
|
|Property changes on: components\camel-cxf\src\test\java\org\apache\camel\component\cxf\CxfProducerTest.java
|___________________________________________________________________
|Name: svn:keywords
|   + Rev Date
|Name: svn:eol-style
|   + native
|
|Index: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java
|===================================================================
|--- components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java    (revision 570399)
|+++ components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java    (working copy)
--------------------------
File to patch: ^C
{code}

In Ecilpse most of the changes are marked with a red ! which means eclipse won't apply them. 



jstrachan:1188285221:2007-08-28T15:13:41.387+0000:1188285221:2007-08-28T15:13:41.387+0000:Here are the rejections from TextMate (which seems to give the best rejection messages)

{code}
***************
*** 16,42 ****
   */
  package org.apache.camel.component.cxf;
  
- import java.net.URI;
  import java.util.Map;
  
  import org.apache.camel.CamelContext;
  import org.apache.camel.Endpoint;
  import org.apache.camel.impl.DefaultComponent;
- import org.apache.cxf.Bus;
- import org.apache.cxf.BusException;
- import org.apache.cxf.bus.CXFBusFactory;
- import org.apache.cxf.service.model.EndpointInfo;
- import org.apache.cxf.transport.DestinationFactoryManager;
- import org.apache.cxf.transport.local.LocalTransportFactory;
- import org.xmlsoap.schemas.wsdl.http.AddressType;
  
  /**
   * Defines the <a href=""http://activemq.apache.org/camel/cxf.html"">CXF Component</a>
  
   * @version $Revision$
   */
  public class CxfComponent extends DefaultComponent<CxfExchange> {
-     private LocalTransportFactory localTransportFactory;
  
      public CxfComponent() {
      }
--- 16,36 ----
   */
  package org.apache.camel.component.cxf;
  
  import java.util.Map;
  
  import org.apache.camel.CamelContext;
  import org.apache.camel.Endpoint;
  import org.apache.camel.impl.DefaultComponent;
+ import org.apache.camel.util.IntrospectionSupport;
  
+ 
  /**
   * Defines the <a href=""http://activemq.apache.org/camel/cxf.html"">CXF Component</a>
  
   * @version $Revision$
   */
  public class CxfComponent extends DefaultComponent<CxfExchange> {
+ 	
  
      public CxfComponent() {
      }
{code}

{code}
***************
*** 18,72 ****
  
  import org.apache.camel.Processor;
  import org.apache.camel.impl.DefaultConsumer;
  import org.apache.cxf.message.Message;
  import org.apache.cxf.transport.Destination;
  import org.apache.cxf.transport.MessageObserver;
- import org.apache.cxf.transport.local.LocalTransportFactory;
  
  /**
   * A consumer of exchanges for a service in CXF
   * 
   * @version $Revision$
   */
  public class CxfConsumer extends DefaultConsumer<CxfExchange> {
-     private CxfEndpoint endpoint;
-     private final LocalTransportFactory transportFactory;
      private Destination destination;
  
-     public CxfConsumer(CxfEndpoint endpoint, Processor processor, LocalTransportFactory transportFactory) {
          super(endpoint, processor);
          this.endpoint = endpoint;
-         this.transportFactory = transportFactory;
      }
  
      @Override
      protected void doStart() throws Exception {
-         super.doStart();
- 
-         destination = transportFactory.getDestination(endpoint.getEndpointInfo());
-         destination.setMessageObserver(new MessageObserver() {
-             public void onMessage(Message message) {
-                 incomingCxfMessage(message);
-             }
-         });
      }
  
      @Override
      protected void doStop() throws Exception {
-         if (destination != null) {
-             destination.shutdown();
-         }
          super.doStop();
      }
  
-     protected void incomingCxfMessage(Message message) {
-         try {
-             CxfExchange exchange = endpoint.createExchange(message);
-             getProcessor().process(exchange);
-         } catch (Exception e) {
-             // TODO: what do do if we are getting processing errors from camel?
-             // Shutdown?
-             e.printStackTrace();
-         }
-     }
  }
--- 18,71 ----
  
  import org.apache.camel.Processor;
  import org.apache.camel.impl.DefaultConsumer;
+ import org.apache.cxf.endpoint.Server;
+ import org.apache.cxf.frontend.ServerFactoryBean;
  import org.apache.cxf.message.Message;
  import org.apache.cxf.transport.Destination;
  import org.apache.cxf.transport.MessageObserver;
  
+ 
  /**
   * A consumer of exchanges for a service in CXF
   * 
   * @version $Revision$
   */
  public class CxfConsumer extends DefaultConsumer<CxfExchange> {
+     private CxfEndpoint endpoint;    
+     private Server server;
      private Destination destination;
  
+     public CxfConsumer(CxfEndpoint endpoint, Processor processor) throws ClassNotFoundException {
+        
          super(endpoint, processor);
+         System.out.println(processor.toString());
          this.endpoint = endpoint;
+         //we setup the interceptors by the endpoint configuration
+         //create server here, now we just use the simple front-end        
+         ServerFactoryBean svrBean = new ServerFactoryBean();
+         Class serviceClass = Class.forName(endpoint.getServiceClass());        
+         svrBean.setAddress(endpoint.getAddress());
+         svrBean.setServiceClass(serviceClass);
+         if (endpoint.isInvoker()) {
+             System.out.println(""setup the invoker "");
+             svrBean.setInvoker(new CamelInvoker(this));
+         }    
+         svrBean.setStart(false);
+         server = svrBean.create();
      }
  
      @Override
      protected void doStart() throws Exception {
+         super.doStart();        
+         
+         server.start();
      }
  
      @Override
      protected void doStop() throws Exception {
+         server.stop();
          super.doStop();
      }
  
+     
  }
{code}

{code}
***************
*** 16,53 ****
   */
  package org.apache.camel.component.cxf;
  
  import org.apache.camel.Consumer;
  import org.apache.camel.Processor;
  import org.apache.camel.Producer;
  import org.apache.camel.impl.DefaultEndpoint;
- import org.apache.cxf.BusException;
  import org.apache.cxf.message.Message;
- import org.apache.cxf.service.model.EndpointInfo;
- import org.apache.cxf.transport.local.LocalTransportFactory;
  
  /**
   * Defines the <a href=""http://activemq.apache.org/camel/cxf.html"">CXF Endpoint</a>
   * 
   * @version $Revision$
   */
- public class CxfEndpoint extends DefaultEndpoint<CxfExchange> {
      private CxfBinding binding;
-     private final CxfComponent component;
-     private final EndpointInfo endpointInfo;
      private boolean inOut = true;
  
-     public CxfEndpoint(String uri, CxfComponent component, EndpointInfo endpointInfo) {
          super(uri, component);
-         this.component = component;
-         this.endpointInfo = endpointInfo;
      }
- 
      public Producer<CxfExchange> createProducer() throws Exception {
-         return new CxfProducer(this, getLocalTransportFactory());
      }
  
      public Consumer<CxfExchange> createConsumer(Processor processor) throws Exception {
-         return new CxfConsumer(this, processor, getLocalTransportFactory());
      }
  
      public CxfExchange createExchange() {
--- 16,59 ----
   */
  package org.apache.camel.component.cxf;
  
+ import javax.xml.namespace.QName;
+ 
  import org.apache.camel.Consumer;
  import org.apache.camel.Processor;
  import org.apache.camel.Producer;
  import org.apache.camel.impl.DefaultEndpoint;
+ import org.apache.cxf.endpoint.Endpoint;
  import org.apache.cxf.message.Message;
  
+ 
  /**
   * Defines the <a href=""http://activemq.apache.org/camel/cxf.html"">CXF Endpoint</a>
   * 
   * @version $Revision$
   */
+ public class CxfEndpoint extends DefaultEndpoint<CxfExchange> {    
+     private final CxfComponent component;
+     private final String address;
+     private String wsdlURL;
+     private String serviceClass;
      private CxfBinding binding;
+     private QName portName;
+     private QName serviceName;
      private boolean inOut = true;
+     private boolean invoker = true;
  
+     public CxfEndpoint(String uri, String address, CxfComponent component) {
          super(uri, component);
+         this.component = component;        
+         this.address = address;
      }
+         
      public Producer<CxfExchange> createProducer() throws Exception {
+         return new CxfProducer(this);
      }
  
      public Consumer<CxfExchange> createConsumer(Processor processor) throws Exception {
+         return new CxfConsumer(this, processor);
      }
  
      public CxfExchange createExchange() {
{code}


jstrachan:1188289341:2007-08-28T16:22:21.731+0000:1188289341:2007-08-28T16:22:21.731+0000:Patch applied with thanks! Could you check I've applied it correctly please?"
0,CAMEL-117,Task,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,Willem Jiang,0,0,2007-08-24 07:09:19+00:00,2008-05-12 07:56:29+00:00,No Desc,jstrachan:1191916945:2007-10-09T16:02:25.017+0000:1191916945:2007-10-09T16:02:25.017+0000:Am guessing this is resolved now? If not let us know and we can reopen
0,CAMEL-116,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-23 14:06:27+00:00,2008-05-12 07:56:29+00:00,"currently the timer component assumes its used with runnable beans; we should change that so it just sends a message exchange that can then be used to poll any endpoint etc.


maybe setting a header for the time etc",jstrachan:1188278045:2007-08-28T13:14:05.816+0000:1188278045:2007-08-28T13:14:05.816+0000:See http://cwiki.apache.org/CAMEL/timer.html
0,CAMEL-115,Improvement,Major,1.1.0,None,"
None
",Closed,Fixed,1.5.0,Hadrian Zbarcea,Brian McCallister,0,0,2007-08-21 19:51:46+00:00,2009-02-16 05:51:46+00:00,I ran into a problem where I need to move some data from a Header into the body. It would be nice to supply the exchange to the type converter o this can be done in type conversion rather than as an explicit processor,"davsclaus:1206525807:2008-03-26T18:03:27.807+0000:1206525807:2008-03-26T18:03:27.807+0000:Need access to metadata about charset to use for encoding etc.

So while working on a clever way of getting hold on the Exchange you could also think about how to get hold of other kind of metadata for the future.
davsclaus:1207047747:2008-04-01T19:02:27.319+0000:1207047747:2008-04-01T19:02:27.319+0000:This is important, scoping it for 1.4 release
jstrachan:1216263747:2008-07-17T11:02:27.011+0000:1216263747:2008-07-17T11:02:27.011+0000:It'd be nice to be able to pass in context parameters, like Exchange or Message as another parameter to the converter.

e.g.

public InputStream toStream(File file, Exchange context) {....}


davsclaus:1216332001:2008-07-18T06:00:01.788+0000:1216332001:2008-07-18T06:00:01.788+0000:Hadrian see also the chat log for yesterday. James and I had a little chat about this one.

But it would really be great for Camel 1.5 to get this one. We need this especially for byte converters that need encoding configuration.
davsclaus:1234734706:2009-02-16T05:51:46.354+0000:1234734706:2009-02-16T05:51:46.354+0000:Closing all 1.5.0 issues"
0,CAMEL-114,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-20 06:48:03+00:00,2008-05-12 07:56:29+00:00,No Desc,
0,CAMEL-113,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-08-19 04:39:03+00:00,2015-10-20 13:42:16+00:00,No Desc,jstrachan:1187476750:2007-08-19T06:39:10.692+0000:1187476750:2007-08-19T06:39:10.692+0000:see BeanWithPropertiesAndHeadersInjectionTest
0,CAMEL-112,Bug,Major,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-17 16:05:54+00:00,2008-05-12 07:56:29+00:00,See thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef%28%29-tf4285009s22882.html#a12198390,jstrachan:1187338392:2007-08-17T16:13:12.342+0000:1187338392:2007-08-17T16:13:12.342+0000:See test case ActiveMQReplyToHeaderUsingConverterTest
0,CAMEL-111,Bug,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-16 20:18:11+00:00,2008-05-12 07:56:29+00:00,See  http://www.nabble.com/Exception-based-routing-tf4226796s22882.html#a12183747,"jstrachan:1187295781:2007-08-17T04:23:01.455+0000:1187295781:2007-08-17T04:23:01.455+0000:See the test case 

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java
"
0,CAMEL-110,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-08-16 19:00:21+00:00,2008-05-12 07:56:29+00:00,No Desc,jstrachan:1187263349:2007-08-16T19:22:29.112+0000:1187263349:2007-08-16T19:22:29.112+0000:code in SVN along with test case (InjectBeanTest in camel-spring)
0,CAMEL-109,New Feature,Minor,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Aaron Crickenberger,0,0,2007-08-16 16:28:36+00:00,2008-05-12 07:56:29+00:00,"For routes that start and end with File-based endpoints, there's utility in preserving the pathnames of the Files relative to the endpoints, instead of using generated message id's.


Modified RemoteFileProducers to behave more like FileProducers, writing to a pre-specified filename if it's in the message's header.  I used FileComponent.HEADER_FILE_NAME to settle on a standard.


Modified RemoteFileConsumers and FileConsumer to place the relative path in the header if the setNames property is set to true.  By default this property is set to false, because I haven't tested this out with Windows.


For example, using the route from(""file://incoming/path/?setNames=true"").to(""ftp://somehost/outgoing/""), the file ""incoming/path/some/nested/filename"" would get transferred to ""ftp://somehow/outgoing/some/nested/filename""","jstrachan:1187304775:2007-08-17T06:52:55.758+0000:1187304775:2007-08-17T06:52:55.758+0000:Patch applied - many thanks Aaron, thats awesome.

I actually made this behaviour the default - since I can't see much of a reason to ever not preserve the relative file name. In those rare cases, you can always use the DSL to fix it. e.g.

{code}
from(""file:foo"").setHeader(""org.apache.camel.file.name"", null).to(""file:foo"")
{code}

We could maybe add a producer flag that says to ignore the file name"
0,CAMEL-108,Improvement,Major,None,None,"
None
",Closed,Fixed,1.2.0,James Strachan,James Strachan,0,0,2007-08-16 08:17:05+00:00,2008-05-12 07:56:29+00:00,"So that



class Cheese {
  @EndpointInject
  ProducerTemplate fooEndpoint;
}




would look up in the registry (such as Spring AppContext) to find ""fooEndpoint""","jstrachan:1187227781:2007-08-16T09:29:41.725+0000:1187227781:2007-08-16T09:29:41.725+0000:code checked into svn; just requires a test case to confirm it does actually work!
jstrachan:1187263389:2007-08-16T19:23:09.759+0000:1187263389:2007-08-16T19:23:09.759+0000:test case added to InjectBeanTest in camel-spring"
0,CAMEL-107,Bug,Major,None,1.2.0,"
None
",Closed,Cannot Reproduce,1.2.0,Hiram R. Chirino,Hadrian Zbarcea,0,0,2007-08-16 05:05:47+00:00,2010-07-14 23:42:32+00:00,"org.apache.camel.component.activemq.JournalRouteTest fails due to accumulation of messages and no cleanup.


The attached patch fixes the test by creating and cleaning up an AsyncDataManager.  The JournalEndpoint does not expose its inner AsyncDataManager nor does it provide a cleanup method.  So the cleanup has to be done manually via activemq api.  Is that sufficient?","chirino:1187613311:2007-08-20T20:35:11.569+0000:1187613311:2007-08-20T20:35:11.569+0000:Hi.. the test case should consume the message. so there should be no accumulation of messages.

There was a bug in the ActiveMQ journal code where the mark was not being store properly but this has now been committed.  Hadrian, could you check to see if the reported bug goes away if you run it against a freshly built SNAPSHOT?

Thanks,
Hiram
hzbarcea:1187615262:2007-08-20T21:07:42.223+0000:1187615262:2007-08-20T21:07:42.223+0000:Hi, I can confirm that the test runs fine now both in a clean local copy and during subsequent runs.  
Thanks,
hz"
0,CAMEL-106,Bug,Major,None,None,"
None
",Closed,Won't Fix,1.2.0,James Strachan,James Strachan,0,0,2007-08-15 12:16:52+00:00,2008-05-12 07:56:29+00:00,"For a full breakdown of the investigation and issue see 
http://www.nabble.com/CAMEL-and-ActiveMQ5---Integration-tf4140859s22882.html#a12160309",jstrachan:1187263447:2007-08-16T19:24:07.398+0000:1187263447:2007-08-16T19:24:07.398+0000:It seems like these are bad jars - see the thread for more details. If anyone knows how to deal with bad jars with no actual folders inside them - please let us know and we can reopen this one!
0,CAMEL-105,Bug,Major,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Aaron Crickenberger,0,0,2007-08-14 21:27:14+00:00,2008-05-12 07:56:29+00:00,"Thanks to NIO's awesomely intuitive behavior, the FileProducer is only writing out the first & last buffers it reads.  Apparently ByteBuffer needs to be cleared after each FileChannel write?","acricken:1187098120:2007-08-14T21:28:40.099+0000:1187098120:2007-08-14T21:28:40.099+0000:Added patch
jstrachan:1187098985:2007-08-14T21:43:05.487+0000:1187098985:2007-08-14T21:43:05.487+0000:Patch applied with thanks!"
0,CAMEL-104,Task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Hadrian Zbarcea,Noah Nordrum,0,0,2007-08-14 18:34:42+00:00,2010-07-14 23:39:03+00:00,No Desc,"jstrachan:1187089135:2007-08-14T18:58:55.250+0000:1187089135:2007-08-14T18:58:55.250+0000:Fancy taking a stab at this one?
jstrachan:1187599255:2007-08-20T16:40:55.165+0000:1187599255:2007-08-20T16:40:55.165+0000:unflagged the patch available, as there isn't one yet :)
hzbarcea:1187599434:2007-08-20T16:43:54.518+0000:1187599434:2007-08-20T16:43:54.518+0000:It looks like I didn't verify that the patch got attached.  Sorry.
 I think I found a jira bug though.
jstrachan:1187601913:2007-08-20T17:25:13.342+0000:1187601913:2007-08-20T17:25:13.342+0000:Patch applied with thanks!"
0,CAMEL-103,Bug,Major,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-08-14 18:22:55+00:00,2008-05-12 07:56:29+00:00,"Caused by: java.lang.ClassCastException:
org.springframework.context.support.GenericApplicationContext


           at
org.apache.camel.spring.SpringCamelContext.createInjector(SpringCamelCon
text.java:147)


           at
org.apache.camel.impl.DefaultCamelContext.getInjector(DefaultCamelContex
t.java:322)


           at
org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(Defaul
tCamelContext.java:407)


           at
org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.ja
va:373)


           at
org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.ja
va:139)


           at
org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:38)


           at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(Camel
ContextFactoryBean.java:103)


           ... 20 more","jstrachan:1187089035:2007-08-14T18:57:15.185+0000:1187089035:2007-08-14T18:57:15.185+0000:I've just committed a patch which I think resolves this - need a test case to be sure...
jstrachan:1187296931:2007-08-17T04:42:11.970+0000:1187296931:2007-08-17T04:42:11.970+0000:added a test case in CamelContextFactoryBeanTest"
0,CAMEL-102,New Feature,Major,None,2.0-M1,"
None
",Closed,Fixed,2.0-M1,Claus Ibsen,James Strachan,1,0,2007-08-14 12:18:22+00:00,2009-07-31 06:33:31+00:00,No Desc,"davsclaus:1220499557:2008-09-04T11:39:17.665+0000:1220499557:2008-09-04T11:39:17.665+0000:Moving to 2.0
davsclaus:1227742950:2008-11-27T07:42:30.578+0000:1227742950:2008-11-27T07:42:30.578+0000:Notice this only applies for non transactions (i.e. using the DeadLetterChannel as error handler)
davsclaus:1227753925:2008-11-27T10:45:25.007+0000:1227753925:2008-11-27T10:45:25.007+0000:Added to 2.0

Sending        camel-core\src\main\java\org\apache\camel\model\ExceptionType.java
Sending        camel-core\src\main\java\org\apache\camel\processor\DeadLetterChannel.java
Sending        camel-core\src\main\java\org\apache\camel\processor\RedeliveryPolicy.java
Adding         camel-core\src\test\java\org\apache\camel\processor\onexception\OnExceptionRetryUntilTest.java
Transmitting file data ....
Committed revision 721149.

Updated exception clause wiki documentation and release notes *DONE*
davsclaus:1248993211:2009-07-31T06:33:31.631+0000:1248993211:2009-07-31T06:33:31.631+0000:Closing 2.0m1 tickets"
0,CAMEL-101,New Feature,Major,None,1.2.0,"
None
",Closed,Duplicate,1.2.0,Unassigned,Noah Nordrum,0,0,2007-08-13 23:40:25+00:00,2008-10-23 20:03:02+00:00,"feel free to break out the inner class too...


builder to limit throughput on a given route.


package org.apache.camel.builder;


import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.impl.ServiceSupport;
import org.apache.camel.util.ServiceHelper;


public class SquelchBuilder extends FromBuilder {
    private long minMessageSpacingInMs;


    public SquelchBuilder(FromBuilder parent, long minMessageSpacingInMs) 

{
        super(parent);
        this.minMessageSpacingInMs = minMessageSpacingInMs;
    }


    public SquelchProcessor createProcessor() throws Exception 

{
        // lets create a single processor for all child predicates
        final Processor childProcessor = super.createProcessor();
        return new SquelchProcessor(minMessageSpacingInMs, childProcessor);
    }


    class SquelchProcessor extends ServiceSupport implements Processor {
        private long minMessageSpacingInMs;
        private Processor processor;
        private long nextLetThroughTime;


        public SquelchProcessor(long minMessageSpacingInMs, Processor processor) 

{
            this.minMessageSpacingInMs = minMessageSpacingInMs;
            this.processor = processor;
        }


        public void process(Exchange exchange) throws Exception {
            final long now = System.currentTimeMillis();
            if (now < nextLetThroughTime) 

{
                final long sleepTime = nextLetThroughTime - now;
                Thread.sleep(sleepTime);
            }

            processor.process(exchange);
            nextLetThroughTime = System.currentTimeMillis() + minMessageSpacingInMs; // reset the now
        }


        protected void doStart() throws Exception 

{
            ServiceHelper.startServices(processor);
        }


        protected void doStop() throws Exception 

{
            ServiceHelper.stopServices(processor);
        }

    }
}


add this method in FromBuilder (might need to change the annotations, not sure how they affect things...)
    @Fluent
    public SquelchBuilder squelch(
            @FluentArg(value = ""minMessageSpacingInMs"", element = true)
            long minMessageSpacingInMs) 

{
        SquelchBuilder answer = new SquelchBuilder(this, minMessageSpacingInMs);
        addProcessBuilder(answer);
        return answer;
    }","nnordrum:1187029405:2007-08-14T02:23:25.243+0000:1187029405:2007-08-14T02:23:25.243+0000:[3:42pm] nnordrum: hey chirino_m, does Camel have a ""squaker"", i.e. only let 5 messages through a second
[3:42pm] chirino_m: don't recall off the to of my head.
[3:43pm] nnordrum: should be pretty simple to do though... would you do it as a component, or a processor?
[3:44pm] chirino_m: could be either.
[3:44pm] chirino_m: but I think a component is more reasonable
[3:44pm] chirino_m: since it acts like a queue.
[3:44pm] nnordrum: that's what I was thinking...
[3:44pm] chirino_m: you might want to even extend the seda component


just discovered there's a throttler..."
0,CAMEL-100,Improvement,Minor,1.1.0,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Aaron Crickenberger,0,0,2007-08-13 19:28:46+00:00,2008-05-12 07:56:29+00:00,"This may be moot given the projects' relationship, but it's a recently introduced side effect.  Before the most recent snapshot, I was able to use Camel without any ActiveMQ jar's floating around so long as I never tried to use any ""activemq:queue:foo"" URI's.  Now with the most recent snapshot, the first time I do something that uses AnnotationTypeCoverterLoader, ActiveMQConverter gets loaded, and then causes a NoClassDefFoundError for ActiveMQDestination.","jstrachan:1187005011:2007-08-13T19:36:51.942+0000:1187005011:2007-08-13T19:36:51.942+0000:Any idea how to reproduce the ClassNotFoundException? e.g. the camel-core project doesn't use activemq yet it uses the AnnotationTypeConverterLoader OK?
acricken:1187010628:2007-08-13T21:10:28.824+0000:1187010628:2007-08-13T21:10:28.824+0000:In my case, I'm using these jars in a jboss deployment.  So long as I include each individual camel jar except camel-activemq, things are OK.

Add camel-activemq to camel-spring's pom.xml, and the run ""mvn test"" for camel-spring.  I couldn't get this to reproduce for camel-core for some reason.    I apologize that this isn't the most direct example, but the stack trace looks the same.
jstrachan:1187043226:2007-08-14T06:13:46.503+0000:1187043226:2007-08-14T06:13:46.503+0000:Any chance of getting a stack trace to see exactly where this occurs?

BTW I think I get it now - Camel auto-discovers type converters in each library. So if you add, say, camel-activemq.jar to the classpath but without the activemq code, it won't be able to load the type converters defined in camel-activemq.jar.

To fix this we should just log some kinda warning that the type converters in camel-activemq cannot be used or something?
jstrachan:1188866185:2007-09-04T08:36:25.597+0000:1188866185:2007-09-04T08:36:25.597+0000:I've added a test case to try reproduce this issue...

https://svn.apache.org/repos/asf/activemq/camel/trunk/tests/camel-partial-classpath-test/

am using a custom type converter, adding camel-activemq to the classpath but (AFAIK) without ActiveMQ and its working without any errors.

Maybe this has been fixed; or maybe I'm just not doing the right thing to reproduce your issue? Any ideas how to reproduce it? e.g. an example classpath that causes problems maybe?
jstrachan:1188871501:2007-09-04T10:05:01.134+0000:1188871501:2007-09-04T10:05:01.134+0000:I figured out how to make this test case actually fail in the end; then added a fix for it.
acricken:1188885607:2007-09-04T14:00:07.030+0000:1188885607:2007-09-04T14:00:07.030+0000:Nice work!  Out of curiosity, what was it that finally made the test case fail?  I couldn't quite discern from the svn commits.
jstrachan:1188887422:2007-09-04T14:30:22.303+0000:1188887422:2007-09-04T14:30:22.303+0000:Am not 100% sure :) I added a custom converter to the test case, which certainly helped; then the test didn't fail in my IDE, but definitely failed in maven (i'd maybe not ran the test in maven when I thought it wasn't failing). It could have been not failing in my IDEA due to a bad classpath (e.g. an ActiveMQ jar on the classpath etc)"
0,CAMEL-99,Improvement,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Hadrian Zbarcea,0,0,2007-08-13 14:06:33+00:00,2010-07-14 23:42:16+00:00,jstrachan: I was wondering about moving the LifecycleStrategy and InstrumentationAgent from camel -> camel.spi (as they are kinda internal things for providers of Camel rather than end users) - any objections?,jstrachan:1187165702:2007-08-15T16:15:02.600+0000:1187165702:2007-08-15T16:15:02.600+0000:Patch applied with thanks!
0,CAMEL-98,Bug,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-10 16:48:14+00:00,2008-05-12 07:56:28+00:00,"For more details see: 
http://www.nabble.com/FileConsumer-to-FtpProducer-bug-tf4249639s22882.html","jstrachan:1186736153:2007-08-10T16:55:53.593+0000:1186736153:2007-08-10T16:55:53.593+0000:Test case here: https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpTest.java
jstrachan:1186987656:2007-08-13T14:47:36.891+0000:1186987656:2007-08-13T14:47:36.891+0000:moved to 1.1.0 release..."
0,CAMEL-97,Improvement,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,James Strachan,James Strachan,0,0,2007-08-10 15:49:32+00:00,2008-05-12 07:56:28+00:00,"e.g. something like



exception(Validation.class).maximumRetries(3);

from(""foo"").to(""bar"");","jstrachan:1186733655:2007-08-10T16:14:15.608+0000:1186733655:2007-08-10T16:14:15.608+0000:for more background see: http://www.nabble.com/Exception-based-routing-tf4226796s22882.html
jstrachan:1186986353:2007-08-13T14:25:53.627+0000:1186986353:2007-08-13T14:25:53.627+0000:see the test case https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RedeliveryPolicyPerExceptionTest.java 
jstrachan:1187000452:2007-08-13T18:20:52.313+0000:1187000452:2007-08-13T18:20:52.313+0000:Documentation here: http://cwiki.apache.org/CAMEL/exception-clause.html"
0,CAMEL-96,Bug,Major,None,None,"
None
",Closed,Fixed,1.1.0,James Strachan,James Strachan,0,0,2007-08-10 11:53:53+00:00,2008-05-12 07:56:28+00:00,"e.g JMSCorrelationID, JMSReplyTo, JMSType","jstrachan:1186718208:2007-08-10T11:56:48.604+0000:1186718208:2007-08-10T11:56:48.604+0000:also the other JMS properties like JMSMessageID and JMSDestination are not explicitly visible on the Exchange/Message APIs - unless casting to the JmsExchange/JmsMessage and grabbing the underlying JMS Message object
jstrachan:1186720951:2007-08-10T12:42:31.139+0000:1186720951:2007-08-10T12:42:31.139+0000:Fixed - see test cases

* https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQJmsHeaderRouteTest.java
* https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQReplyToHeaderUsingConverterTest.java"
0,CAMEL-95,Bug,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-10 07:17:38+00:00,2008-05-12 07:56:28+00:00,See http://www.nabble.com/FileConsumer-to-FileProducer-bug-tf4245175s22882.html for issue and patch,"jstrachan:1186701702:2007-08-10T07:21:42.212+0000:1186701702:2007-08-10T07:21:42.212+0000:See the test case

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerProducerRouteTest.java"
0,CAMEL-94,Improvement,Minor,"1.3.0, 1.4.0",1.5.0,"
None
",Closed,Fixed,1.5.0,Claus Ibsen,James Strachan,0,0,2007-08-10 07:15:22+00:00,2009-02-16 05:51:46+00:00,"If we are given a File body, we could optmiise the implementation to use either FileChannel. transferFrom() or FileChannel.transferTo()","davsclaus:1212488798:2008-06-03T18:26:38.779+0000:1212488798:2008-06-03T18:26:38.779+0000:I do plan to do some upgrades of the File component so I might as well have this assigned as wel..
davsclaus:1218271909:2008-08-09T16:51:49.833+0000:1218271909:2008-08-09T16:51:49.833+0000:Fixed in rev 684296
davsclaus:1234734706:2009-02-16T05:51:46.293+0000:1234734706:2009-02-16T05:51:46.293+0000:Closing all 1.5.0 issues"
0,CAMEL-93,New Feature,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-09 17:36:35+00:00,2008-05-12 08:01:41+00:00,"For discussions see this thread
http://www.nabble.com/Exception-based-routing-tf4226796s22882.html","jstrachan:1186652678:2007-08-09T17:44:38.924+0000:1186652678:2007-08-09T17:44:38.924+0000:Code implemented - see this test case

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ValidationWithExceptionTest.java

just waiting for documentation
jstrachan:1187000459:2007-08-13T18:20:59.891+0000:1187000459:2007-08-13T18:20:59.891+0000:Documentation here: http://cwiki.apache.org/CAMEL/exception-clause.html"
0,CAMEL-92,New Feature,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-09 16:31:37+00:00,2008-05-12 08:01:41+00:00,"See this discussion for details of the feature...


http://www.nabble.com/Exception-based-routing-tf4226796s22882.html","jstrachan:1186649209:2007-08-09T16:46:49.700+0000:1186649209:2007-08-09T16:46:49.700+0000:Implementation committed; see these test cases...

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptRouteTest.java
https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateAndProceedRouteTest.java
https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateRouteTest.java
https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithoutProceedRouteTest.java

just waiting for documentation...
jstrachan:1187003267:2007-08-13T19:07:47.007+0000:1187003267:2007-08-13T19:07:47.007+0000:See the documentation here: http://cwiki.apache.org/CAMEL/dsl.html"
0,CAMEL-91,New Feature,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,James Strachan,James Strachan,0,0,2007-08-08 15:28:35+00:00,2008-05-12 08:01:41+00:00,No Desc,"jstrachan:1186566301:2007-08-08T17:45:01.114+0000:1186566301:2007-08-08T17:45:01.114+0000:the code is in examples/camel-example-bam we just need the documentation
jstrachan:1186999398:2007-08-13T18:03:18.811+0000:1186999398:2007-08-13T18:03:18.811+0000:See the documentation here: http://cwiki.apache.org/CAMEL/bam-example.html"
0,CAMEL-90,Improvement,Major,None,None,"
None
",Closed,Fixed,1.1.0,James Strachan,James Strachan,0,0,2007-08-08 15:16:06+00:00,2008-05-12 08:01:41+00:00,No Desc,
0,CAMEL-89,New Feature,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-07 09:52:00+00:00,2008-05-12 08:01:40+00:00,"So far it appears that Jing is the only library capable of validating using RNC, so lets have a camel-jing component","jstrachan:1186468910:2007-08-07T14:41:50.623+0000:1186468910:2007-08-07T14:41:50.623+0000:code committed in the camel-jing module - just waiting for documentation
jstrachan:1186475810:2007-08-07T16:36:50.613+0000:1186475810:2007-08-07T16:36:50.613+0000:see http://cwiki.apache.org/CAMEL/jing.html"
0,CAMEL-88,New Feature,Major,None,None,"
None
",Closed,Fixed,1.1.0,James Strachan,James Strachan,0,0,2007-08-06 14:00:41+00:00,2008-05-12 08:01:40+00:00,No Desc,"jstrachan:1186468930:2007-08-07T14:42:10.253+0000:1186468930:2007-08-07T14:42:10.253+0000:code committed to camel-msv, just waiting for documentation
jstrachan:1186475843:2007-08-07T16:37:23.113+0000:1186475843:2007-08-07T16:37:23.113+0000:http://cwiki.apache.org/CAMEL/msv.html"
0,CAMEL-87,New Feature,Major,1.0.0,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-08-03 19:46:57+00:00,2008-05-12 08:01:40+00:00,No Desc,"jstrachan:1186141995:2007-08-03T19:53:15.132+0000:1186141995:2007-08-03T19:53:15.132+0000:code committed, just waiting for documentation
jstrachan:1186142965:2007-08-03T20:09:25.437+0000:1186142965:2007-08-03T20:09:25.437+0000:Here's the documentation
http://cwiki.apache.org/CAMEL/ognl.html"
0,CAMEL-55,New Feature,Major,None,None,"
None
",Closed,Fixed,1.0.0,James Strachan,Noah Nordrum,0,0,2007-06-25 13:42:14+00:00,2008-05-12 08:01:38+00:00,"example endpoint to connect to the camel IRC channel: ""irc://camel-irc@irc.codehaus.org/%23camel""


Component has no unit tests, and breaks when you try and do to(endpointA, endpointB).


Connections are shared between Endpoints of the same username and host. 


only dep is IRClib v. 1.10  http://moepii.sourceforge.net/","jstrachan:1182752813:2007-06-25T14:26:53.534+0000:1182752813:2007-06-25T14:26:53.534+0000:Patch applied with great thanks! Will work on a unit test...
jstrachan:1182816445:2007-06-26T08:07:25.512+0000:1182816445:2007-06-26T08:07:25.512+0000:BTW I've added an integration test case...

https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcRouteIntegration.java

I've named it *Integration.java rather than *Test.java to differentiate from unit tests. You can run integration tests using the maven profile...

http://cwiki.apache.org/CAMEL/testing.html"
0,CAMEL-54,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 11:05:56+00:00,2008-05-12 08:01:38+00:00,"It'd be great to reuse the html-to-docbook plugin on other projects like ActiveMQ and ServiceMix. While its totally cool being able to overload the XSL's on a per project basis; mostly it seems to be generic apache HTML -> DocBook stuff. So am wondering if it'd make more sense to put these XSL files into the plugin (so that they are shared among all the various projects, rather than cutting and pasting into each project).","jlim:1182993177:2007-06-28T09:12:57.375+0000:1182993177:2007-06-28T09:12:57.375+0000:fixed in rev: 551512

also added an optional configuration parameter <xslFile>  which will handle an xsl location if a project would like to overload the default  xsl"
0,CAMEL-53,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 10:55:17+00:00,2008-05-12 08:01:38+00:00,"If you look at chapter 3 on Enterprise Integration Patterns; or section 5 the Pattern Appendix; there's lots of h2 usage for each collection of patterns. e.g. the first section is 


""Message Systems"" then ""Messaging Channels"" etc.


http://cwiki.apache.org/CAMEL/book-pattern-appendix.html


yet these don't seem to come out in the docbook; nor do they appear in the table of contents etc","jstrachan:1182740189:2007-06-25T10:56:29.012+0000:1182740189:2007-06-25T10:56:29.012+0000:BTW all the <h2>'s disapper in the HTML version of Pattern Appendix and the first <h2> (Messaging Systems) disappears from chapter 3 (Enterprise Integration Patterns)
jlim:1183412677:2007-07-03T05:44:37.891+0000:1183412677:2007-07-03T05:44:37.891+0000:fixed in r552673
jstrachan:1183430175:2007-07-03T10:36:15.173+0000:1183430175:2007-07-03T10:36:15.173+0000:Am reopening; the h2 headings no longer disappear - but they don't appear in the table of contents
jlim:1184625687:2007-07-17T06:41:27.021+0000:1184625687:2007-07-17T06:41:27.021+0000:h2 headings are now included in the  html/pdf.  had to modify the source a bit before transforming it via xsl.   All contents after a <h2> element are moved  to <h2_section> element created  inside the <h2>. If another  <h2> is found the process is repeated.   This is so that the  contents inside a chapter can be divided by section with <h2> as the delimiter

rev: 556828"
0,CAMEL-52,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 10:46:04+00:00,2008-05-12 08:01:38+00:00,"sometimes we get some strange stuff inserted into the generated docbook. e.g. the first part of book-architecture.xml contains some bogus stuff...



 <title>Architecture</title>
  <section>
    <ulink url=""http://cwiki.apache.org/CAMEL/dsl.html"">Routing Domain Specific Language (DSL)</ulink>
    <ulink url=""http://cwiki.apache.org/CAMEL/xml-configuration.html"">Xml Configuration</ulink>
    <ulink url=""http://cwiki.apache.org/CAMEL/routes.html"">routing and mediation rules</ulink>
    <ulink url=""http://cwiki.apache.org/CAMEL/http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html"">
      CamelContext
      <mediaobject>
        <imageobject>
          <imagedata fileref=""../images/linkext7.gif"" depth=""7"" width=""7""/>
        </imageobject>
      </mediaobject>
    </ulink>
    <ulink url=""http://cwiki.apache.org/CAMEL/enterprise-integration-patterns.html"">Enterprise Integration Patterns
    </ulink>
    <para>At a high level Camel consists of a




Everything between <section> and <para> looks bogus (or at least generates strangeness in the PDF). I wonder if might help if we keep the HTML that is downloaded from the site so we can see, is this a wiki issue or XSL issue etc. As right now I've no idea!","jlim:1182802316:2007-06-26T04:11:56.423+0000:1182802316:2007-06-26T04:11:56.423+0000:refactored a bit the output source location. 

docbook source are now extracted by default to : /docbkx/docbkx-source   
wiki source  are now extracted by default to :  /docbkx/wiki-source   

rev: 550675"
0,CAMEL-51,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 10:37:18+00:00,2008-05-12 08:01:38+00:00,"Am not sure if its easy to just configure the 'target/docbkx' directory in the maven plugins, or if we need a separate copy task","jlim:1182815894:2007-06-26T07:58:14.671+0000:1182815894:2007-06-26T07:58:14.671+0000:updated the maven plugin configurations to  output the pdf/html to target/site/book

rev: 550722
jstrachan:1182823117:2007-06-26T09:58:37.020+0000:1182823117:2007-06-26T09:58:37.020+0000:looks like we need to copy the images too for the html version...

http://activemq.apache.org/camel/maven/camel-book/book/html/ch03.html
jlim:1182824490:2007-06-26T10:21:30.121+0000:1182824490:2007-06-26T10:21:30.121+0000:oops..forgot to copy the images :)

rev: 550767"
0,CAMEL-50,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 10:29:57+00:00,2008-05-12 08:01:38+00:00,I think this is due to the generated HTML on the Auto-Export plugin in Confluence; its generating those little icons after a link to indicate if its external links etc. Can we shave these things off in the XSL?,jlim:1182837798:2007-06-26T14:03:18.047+0000:1182837798:2007-06-26T14:03:18.047+0000:fixed in revision 550810
0,CAMEL-49,Sub-task,Major,None,None,"
None
",Closed,Fixed,1.3.0,Jonas B. Lim,James Strachan,0,0,2007-06-25 10:27:16+00:00,2008-05-12 08:01:38+00:00,No Desc,"jlim:1182985115:2007-06-28T06:58:35.008+0000:1182985115:2007-06-28T06:58:35.008+0000:I don't  believe table layout ""auto"" is  implemented in FOP since it seems to only support  table-layout=""fixed"". 
We can probably hack a work around  by modifying our xsl - we can discover all the things a fixed-layout table needs before creating the FO elements

jstrachan:1183430458:2007-07-03T10:40:58.005+0000:1183430458:2007-07-03T10:40:58.005+0000:I guess longer term, we may wish to customize the widths of tables on specific pages. e.g. in the pom we could maybe do something like (am using a properties file notation here, but we could use XML if you prefer)

{code}
# this page has 2 tables
1.uri = cheese.html
1.table.1.widths = 10% 10% 80%
1.table.2.widths = 30% 80%

2.url = foo.html
3.url = bar.html
{code}

As a hacky workaround for now - how about we come up with some good defaults. Basically in all the tables in the current document, the first 1 or 2 columns are kinda small; the last column is always the big one as its the description. So how about our default table sizing is something along the lines of the last column is double the width?

jstrachan:1187220682:2007-08-16T07:31:22.948+0000:1187220682:2007-08-16T07:31:22.948+0000:Hiram's change to use princexml.com fixes this issue"
0,CAMEL-48,New Feature,Major,None,1.3.0,"
None
",Closed,Fixed,1.3.0,Willem Jiang,Noah Nordrum,0,0,2007-06-22 16:16:24+00:00,2008-05-12 12:45:27+00:00,No Desc,"njiang:1205177518:2008-03-11T03:31:58.823+0000:1205177518:2008-03-11T03:31:58.823+0000:The archetype has been committed into the repository.
davsclaus:1205183177:2008-03-11T05:06:17.246+0000:1205183177:2008-03-11T05:06:17.246+0000:Remember to add some doc on the wiki how to use it and what it is there for.

The tools section of the wiki is rather hard to find, maybe it should be a top level link to it from the Documentation page/right menu.

This link is only from the architecture link and not from user guide etc.
http://activemq.apache.org/camel/tools.html
njiang:1205218154:2008-03-11T14:49:14.216+0000:1205218154:2008-03-11T14:49:14.216+0000:I changed  the tools page's parent from architecture to developer and added a page to talk about the camel component archetype.
davsclaus:1210567527:2008-05-12T12:45:27.282+0000:1210567527:2008-05-12T12:45:27.282+0000:Closed all 1.3 tickets"
0,CAMEL-47,Improvement,Major,1.0.0,1.1.0,"
None
",Closed,Fixed,1.1.0,Jonas B. Lim,Jonas B. Lim,0,0,2007-06-15 07:00:31+00:00,2008-05-12 08:01:38+00:00,"The content of the docbook would exist inside confluence and have the tool retrieve it and  transform them nicely into a docbook format.


Here's an example of the book for ActiveMQ 
https://svn.apache.org/repos/asf/activemq/trunk/activemq-book/","jlim:1181866364:2007-06-15T08:12:44.571+0000:1181866364:2007-06-15T08:12:44.571+0000:added initial source for the maven plugin and  docbook project at  :

https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-book 
https://svn.apache.org/repos/asf/activemq/camel/trunk/tooling/maven/maven-html-to-docbook/

r547564

The docbook transformation still needs a lot of improvement in the following   :
1. handling of images - currently does not handle images
2. handling of href links (current transformation converts all local links to complete url ie. http://activemq.apache.org/camel/user-guide.html)
3. improving the format of the docbook markup
jstrachan:1181875424:2007-06-15T10:43:44.720+0000:1181875424:2007-06-15T10:43:44.720+0000:Great work!

Does the build work for you btw; when I tried it I got...

[INFO] [docbkx:generate-pdf {execution: default}]
[INFO] Processing Camel.xml
Error 
  Failure reading /workspace/java/camel/camel-book/target/docbkx/source/Camel.xml: /workspace/java/camel/camel-book/target/docbkx/source/index.xml  (No such file or directory)

which is a bit bizarre as that file does exist
jlim:1182126976:2007-06-18T08:36:16.255+0000:1182126976:2007-06-18T08:36:16.255+0000:I seem to have  left out an extra space on  the entity declarion in the main docbook  xml (Camel.xml). Windows  was just ignoring this space so it was builiding in my environment.

updated the maven docbook plugin at : r548256


jlim:1182321136:2007-06-20T14:32:16.640+0000:1182321136:2007-06-20T14:32:16.640+0000:added  process to download all image files  and store them where the html output can reference them.  Next would be to figure out how to apply this for the pdf output

r:549119
jstrachan:1182483744:2007-06-22T11:42:24.156+0000:1182483744:2007-06-22T11:42:24.156+0000:BTW I've updated the pom to include a decent amount of content; though it seems to break the generator now. Not sure why.

It seemed to be when I added all the enterprise integration pattern pages; I tried looking at the XML to see if I could grok why things bafed but I couldn't spot it - any ideas?
jstrachan:1182483863:2007-06-22T11:44:23.277+0000:1182483863:2007-06-22T11:44:23.277+0000:Incidentally, could we change the XSL so that the <chapter><title> is actually the <h1> heading on the page? Right now the chapter headings are the file names which are not great as they are lower case and have - in them :)
jstrachan:1182487231:2007-06-22T12:40:31.169+0000:1182487231:2007-06-22T12:40:31.169+0000:BTW I was wondering; should we switch the phase that the docbook generation happens to the site phase? Then the build only kicks in when creating the site etc.

(We probably wanna also copy the HTML and PDF to the site/doc directory or something so that site:deploy will deploy the PDFs etc)
jstrachan:1182487298:2007-06-22T12:41:38.098+0000:1182487298:2007-06-22T12:41:38.098+0000:Oh one more thought :) When we get the PDF generation thingy working again; we should include the PDF and HTML versions in the distro. Maybe in 

doc/
  reference/
     html/
     camel.pdf


Then we've somewhere we can put the site / javadoc in there later on
jlim:1182736601:2007-06-25T09:56:41.027+0000:1182736601:2007-06-25T09:56:41.027+0000:added  updates to
 -  use the first h1/h2 find as the page heading
 -  change the plugin phase to site 
 - handle duplicate anchor/bridgehead ids - this was causing the generator to break on book-pattern-appendix.html and book-component-appendix.html resources

images are now handled nicely in html but still needs work when to support pdf output.  Another thing to work on are the html links. It would be nice if the  links are  inside the docbook :)

rev: 550436
 
jstrachan:1182738455:2007-06-25T10:27:35.424+0000:1182738455:2007-06-25T10:27:35.424+0000:to make it easier to track the various bits and pieces, I'm gonna create a few sub-tasks
jstrachan:1182747825:2007-06-25T13:03:45.562+0000:1182747825:2007-06-25T13:03:45.562+0000:BTW I just moved the camel-book module into the tooling directory (as new users won't really need to look much at this module as its mostly a tool to create the PDF from the wiki)
jstrachan:1183430078:2007-07-03T10:34:38.254+0000:1183430078:2007-07-03T10:34:38.254+0000:Great work Jonas - its looking good! :)
jstrachan:1187221041:2007-08-16T07:37:21.028+0000:1187221041:2007-08-16T07:37:21.028+0000:Hiram's change to use princexml.com fixes this issue.

I've refactored the camel-book module to be called camel-manual now and it generates both a HTML and PDF representation nicely now in target/site/manual/

Note that you must have princexml.com installed for this to work!"
0,CAMEL-46,Improvement,Major,1.3.0,1.4.0,"
None
",Closed,Fixed,1.4.0,Claus Ibsen,James Strachan,1,2,2007-06-13 18:32:57+00:00,2008-05-12 12:48:33+00:00,"Peter thanks a lot for the great work on the ant files.


We will sure include it in the 1.4.


Would it be possible to have a property etc to easy set the correct Camel version. I am sure we forget.
In you build files its set to 1.3-SNAPSHOT.","peterjones:1207564604:2008-04-07T18:36:44.470+0000:1207564604:2008-04-07T18:36:44.470+0000:Hi there,

I've attached a patch which adds some build.xml files for building the examples with ant.  Includes minor README.txt file changes for instructions for ant.  If you have any comments or would like any additions/modifications made please let me know!

Thanks,
Peter
davsclaus:1207651317:2008-04-08T18:41:57.908+0000:1207651317:2008-04-08T18:41:57.908+0000:Damm I changed the description and did not add a new comment. Peter see my notes in the description.
peterjones:1207679807:2008-04-09T02:36:47.435+0000:1207679807:2008-04-09T02:36:47.435+0000:Hi Claus,

Leaving the camel.version property set to 1.3-SNAPSHOT in the common-build.xml is definitely likely to not get updated.  The only place this property was being used, was in building a jar for a sample (in the jar name), and it was included just to be consistent with maven naming.  However, the build.jar target is only executed if you pass in -Dbuild.jar=true right now.  So, I'm thinking of just deleting the camel.version property, and the build.jar target altogether... the samples will run fine without this, so it doesn't serve much purpose.  Do you think thats reasonable?

One other thing I accidentally omitted was executing dot to generate svg files for the camel-example-docs sample.  I've updated my copy of that sample's build file to do that, and I'll attach an updated patch in the morning to replace the earlier patch.

Cheers,
Peter
peterjones:1207720580:2008-04-09T13:56:20.731+0000:1207720580:2008-04-09T13:56:20.731+0000:Attached a replacement for the previous patch.  This patch removes the reference to camel.version and the build.jar target from common_build.xml and adds a generatedot macro which is used by the camel-example-docs sample.
davsclaus:1207859274:2008-04-11T04:27:54.583+0000:1207859274:2008-04-11T04:27:54.583+0000:Peter I suppose the requirement for the backport jar is a requirement by ActiveMQ 5.0 to support JDK1.4?
      <include name=""**/backport-util-concurrent-*.jar""/>

Camel does however only run on JDK1.5 but it is possible to run it on 1.4
http://activemq.apache.org/camel/can-i-use-camel-on-java-14.html
davsclaus:1207859814:2008-04-11T04:36:54.135+0000:1207859814:2008-04-11T04:36:54.135+0000:Peter I get the ANT warning while starting the bam example

run:
Warning: Reference sample.run.classpath has not been set at runtime, but was found during
build file parsing, attempting to resolve. Future versions of Ant may support
 referencing ids defined in non-executed targets.

I am using ANT v1.7.0
davsclaus:1207860614:2008-04-11T04:50:14.053+0000:1207860614:2008-04-11T04:50:14.053+0000:Peter.

The spring-xquery sample does not properly initialize log4j so it uses the log4j.properties from the src/main/resources folder

run:
Warning: Reference sample.run.classpath has not been set at runtime, but was found during
build file parsing, attempting to resolve. Future versions of Ant may support
 referencing ids defined in non-executed targets.
     [java] log4j:WARN No appenders could be found for logger (org.apache.camel.spring.Main).
     [java] log4j:WARN Please initialize the log4j system properly.

davsclaus:1207861065:2008-04-11T04:57:45.213+0000:1207861065:2008-04-11T04:57:45.213+0000:Applied the patch to trunk and added a few missing log4j.properties to some examples.
peterjones:1207904208:2008-04-11T16:56:48.981+0000:1207904208:2008-04-11T16:56:48.981+0000:
Hi Claus,

Yes, the backport_util_concurrent seems to be required by the samples which use activemq.

For the ant 1.7 warning:
Warning: Reference sample.run.classpath has not been set at runtime, but was found during
build file parsing

I've attached a small patch for common_build.xml.  Sorry about that, I only tested with ant 1.6.5, and it seems that there has been a change which prints this warning if you reference a property prior to its definition in the build file.

Thanks for applying the patch!
Peter
davsclaus:1207904719:2008-04-11T17:05:19.878+0000:1207904719:2008-04-11T17:05:19.878+0000:Peter sure think. Your patch is great.

Is it possible to add an ant target for all the samples so the end user can generate the visualization dot documentation.
Using maven you run

mvn camel:dot
peterjones:1207905718:2008-04-11T17:21:58.291+0000:1207905718:2008-04-11T17:21:58.291+0000:Hi Claus,

For sure this is possible.  Probably would add a camel.dot target to each build.xml which calls the generatedot macro in common_build.xml.  So something like:

  <target name=""camel.dot"">
    <generatedot ... />
  </target>

The run target in camel-examples-docs/build.xml is the only one which uses the generatedot macro at the moment.

There is one issue which I wasn't quite able to work out so far with the generatedot macro.  On unix, passing a wildcard to the dot executable seems to work, so the macro can call: ""dot -T svg -O *.dot"" for instance and generate svg files for all of the .dot files.  When I tested on windows though, I had to pass in the full name of the .dot file: ""dot.exe -T svg -O routes.dot"".  Would be nice to figure out a better way to make the macro as generic as possible.
peterjones:1208010139:2008-04-12T22:22:19.582+0000:1208010139:2008-04-12T22:22:19.582+0000:Hi Claus,

I attached a patch which adds a camel.dot target to the common_build.xml file.  So this should be able to be called from the other samples.  It generates .svg files for any .dot files in the samples.  I'm not sure if this is everything you meant though.  It looks like the maven plugin probably also generates an index.html file.  I'll have to look at that a bit closer.  If this is needed also, could maybe add an ant xslt task to create the index.html somehow.
What do you think?

Cheers,
Peter
davsclaus:1208041407:2008-04-13T07:03:27.716+0000:1208041407:2008-04-13T07:03:27.716+0000:Peter this is great.

I would love some more information in the README.TXT files that you can run the ant camel.dot target to generate visualization graphs
And that you need dot.exe in the PATH for it to work.

You could add a link to:
http://activemq.apache.org/camel/visualisation.html


davsclaus:1208041442:2008-04-13T07:04:02.475+0000:1208041442:2008-04-13T07:04:02.475+0000:And this wiki page could use an update of that you can run the examples using ANT now (@since 1.4)

http://activemq.apache.org/camel/running-examples.html
peterjones:1208163359:2008-04-14T16:55:59.400+0000:1208163359:2008-04-14T16:55:59.400+0000:Hi Claus,

I attached readme.patch which has a very minor change to mention the camel.dot target in the spring example and an update for the docs example.  I don't have the permissions to edit the wiki page linked above.  I think updating the page with text as follows should do (the elipsis... just indicates stuff that doesn't need to be changed):

[...]

Before you start

[...]

  To run the demos with maven, you need to download and install Apache Maven.

[...]

  Since Camel 1.4, you can also run the examples with Ant.  To do so, download
  and install Apache Ant.
  Several of the examples depend on other projects which you will need to
  download to run with Ant.  Refer to the individual example README.txt files for
  details.

[...]

Running the examples in Ant

  To run an example, change to the directory of the example you want to run,
  set any environment variables mentioned in the README.txt, and then launch
  ant:

  on UNIX
    cd camel-example-spring
    export ACTIVEMQ_HOME=<path to ActiveMQ install directory>
    ant
  on Windows
    cd camel-example-spring
    set ACTIVEMQ_HOME=<path to ActiveMQ install directory>
    ant
davsclaus:1208172144:2008-04-14T19:22:24.823+0000:1208172144:2008-04-14T19:22:24.823+0000:Thanks a lot Peter for all the patches and keep on improving it. 

Now Camel has a broader audience as they can try it out of the box with ANT.
Now we just need some better examples ;)"
0,CAMEL-45,New Feature,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,1,0,2007-06-13 18:31:42+00:00,2008-05-12 08:01:38+00:00,No Desc,"njiang:1185843060:2007-07-31T08:51:00.487+0000:1185843060:2007-07-31T08:51:00.487+0000:we could add a demo to show how to combine the CXF with camle
njiang:1190924494:2007-09-28T04:21:34.739+0000:1190924494:2007-09-28T04:21:34.739+0000:This patch contains a demo to show how to use came as a port router of webservice.
njiang:1190933075:2007-09-28T06:44:35.908+0000:1190933075:2007-09-28T06:44:35.908+0000:Just fixed a cxf producer client create bug. 
Please use this patch file.
jstrachan:1191218831:2007-10-01T14:07:11.382+0000:1191218831:2007-10-01T14:07:11.382+0000:Patch applied - though it needs documentation - could you edit this page please to add a link to the CXF example?
http://activemq.apache.org/camel/examples.html

I get this log when I try and run it - is that expected?...

Hello there jstrachan
01-Oct-2007 15:02:13 org.apache.cxf.transport.jms.JMSDestination$JMSExecutor run
INFO: run the incoming message in the threadpool
01-Oct-2007 15:02:13 org.apache.camel.example.cxf.GreeterImpl pingMe
INFO: Executing operation pingMe, throwing PingMeFault exception, message = hello
Executing operation pingMe, throwing PingMeFault exception

01-Oct-2007 15:02:13 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: PingMeFault raised by server
        at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:101)
        at org.apache.cxf.jaxws.JAXWSMethodInvoker.createFault(JAXWSMethodInvoker.java:76)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:90)
        at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:100)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:63)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:73)
        at org.apache.cxf.transport.jms.JMSDestination.incoming(JMSDestination.java:200)
        at org.apache.cxf.transport.jms.JMSDestination$JMSExecutor.run(JMSDestination.java:331)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
        at java.lang.Thread.run(Thread.java:613)
Caused by: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server
        at org.apache.camel.example.cxf.GreeterImpl.pingMe(GreeterImpl.java:69)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:585)
        at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:107)
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:77)
        ... 12 more
01-Oct-2007 15:02:13 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
INFO: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: PingMeFault raised by server
        at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:171)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:73)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:268)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:224)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
        at org.mortbay.jetty.Server.handle(Server.java:313)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)
        at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475)
Caused by: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
        at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:125)
        at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:68)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:90)
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:179)
        at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:56)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:395)
        at org.apache.cxf.transport.jms.JMSConduit$JMSOutputStream.handleResponse(JMSConduit.java:375)
        at org.apache.cxf.transport.jms.JMSConduit$JMSOutputStream.doClose(JMSConduit.java:256)
        at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:119)
        at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
        at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:254)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:205)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:180)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:200)
        at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:186)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152)
        at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:136)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174)
        at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:161)
        ... 19 more
Expected exception: PingMeFault has occurred: PingMeFault raised by server
njiang:1191220678:2007-10-01T14:37:58.428+0000:1191220678:2007-10-01T14:37:58.428+0000:Yes, the exception is expected.


jstrachan:1192098714:2007-10-11T18:31:54.042+0000:1192098714:2007-10-11T18:31:54.042+0000:gonna mark this as resolved as we've quite a few examples now"
0,CAMEL-44,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:47:51+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181652487:2007-06-12T20:48:07.078+0000:1181652487:2007-06-12T20:48:07.078+0000:implemented.

See:
http://activemq.apache.org/camel/dsl.html"
0,CAMEL-43,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:44:44+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181652304:2007-06-12T20:45:04.088+0000:1181652304:2007-06-12T20:45:04.088+0000:Implemented. http://activemq.apache.org/camel/timer.html
chirino:1181652376:2007-06-12T20:46:16.830+0000:1181652376:2007-06-12T20:46:16.830+0000:The timer:// endpoint is a simpler version of the Quartz timer which only depends on Java 1.5"
0,CAMEL-42,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2007-06-12 20:43:01+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181652209:2007-06-12T20:43:29.741+0000:1181652209:2007-06-12T20:43:29.741+0000:implemented.  see:
http://activemq.apache.org/camel/queue.html"
0,CAMEL-41,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2007-06-12 20:41:54+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181652131:2007-06-12T20:42:11.805+0000:1181652131:2007-06-12T20:42:11.805+0000:implemented.  See:

http://activemq.apache.org/camel/pojo.html"
0,CAMEL-40,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:40:25+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181652045:2007-06-12T20:40:45.405+0000:1181652045:2007-06-12T20:40:45.405+0000:Implemented.  see:
http://activemq.apache.org/camel/mock.html"
0,CAMEL-39,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,Unassigned,Hiram R. Chirino,0,0,2007-06-12 20:38:08+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181651906:2007-06-12T20:38:26.825+0000:1181651906:2007-06-12T20:38:26.825+0000:implemented. See:

http://activemq.apache.org/camel/file.html"
0,CAMEL-38,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:35:42+00:00,2008-05-12 08:01:38+00:00,No Desc,"chirino:1181651772:2007-06-12T20:36:12.684+0000:1181651772:2007-06-12T20:36:12.684+0000:implemented. see:

http://activemq.apache.org/camel/direct.html"
0,CAMEL-37,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:22:15+00:00,2008-05-12 08:01:37+00:00,No Desc,"chirino:1181650967:2007-06-12T20:22:47.980+0000:1181650967:2007-06-12T20:22:47.980+0000:implemented:
http://activemq.apache.org/camel/xmpp.html"
0,CAMEL-36,Task,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:20:54+00:00,2008-05-12 08:01:37+00:00,No Desc,jstrachan:1186143728:2007-08-03T20:22:08.555+0000:1186143728:2007-08-03T20:22:08.555+0000:Done - see http://cwiki.apache.org/CAMEL/spring-remoting.html
0,CAMEL-35,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:19:44+00:00,2008-05-12 08:01:37+00:00,Provide a spring remoting implemenation that can invoke Camel PojoExchanges and expose Spring pojos as via PojoExchanges on the camel router.,chirino:1181650793:2007-06-12T20:19:53.473+0000:1181650793:2007-06-12T20:19:53.473+0000:implemented.
0,CAMEL-34,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:16:42+00:00,2008-05-12 08:01:37+00:00,No Desc,chirino:1181650627:2007-06-12T20:17:07.922+0000:1181650627:2007-06-12T20:17:07.922+0000:implemented.  See the JMS component for a use case.
0,CAMEL-33,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:14:48+00:00,2008-05-12 08:01:37+00:00,No Desc,"chirino:1181650540:2007-06-12T20:15:40.451+0000:1181650540:2007-06-12T20:15:40.451+0000:implemented. see:

http://activemq.apache.org/camel/spring.html"
0,CAMEL-32,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:13:03+00:00,2008-05-12 08:01:37+00:00,No Desc,chirino:1181650399:2007-06-12T20:13:19.594+0000:1181650399:2007-06-12T20:13:19.594+0000:implemented.
0,CAMEL-31,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:11:24+00:00,2008-05-12 08:01:37+00:00,No Desc,chirino:1181650292:2007-06-12T20:11:32.970+0000:1181650292:2007-06-12T20:11:32.970+0000:implemented.
0,CAMEL-30,New Feature,Major,None,None,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:09:14+00:00,2010-07-01 06:11:17+00:00,No Desc,"chirino:1181650197:2007-06-12T20:09:57.644+0000:1181650197:2007-06-12T20:09:57.644+0000:implemented.  See:

http://activemq.apache.org/camel/rmi.html"
0,CAMEL-29,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:08:12+00:00,2008-05-12 08:01:37+00:00,No Desc,"chirino:1181651021:2007-06-12T20:23:41.316+0000:1181651021:2007-06-12T20:23:41.316+0000:implemented:
http://activemq.apache.org/camel/quartz.html"
0,CAMEL-28,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:06:25+00:00,2008-05-12 08:01:36+00:00,No Desc,"chirino:1181649992:2007-06-12T20:06:32.979+0000:1181649992:2007-06-12T20:06:32.979+0000:implemented.
chirino:1181651108:2007-06-12T20:25:08.461+0000:1181651108:2007-06-12T20:25:08.461+0000:see: http://activemq.apache.org/camel/mina.html"
0,CAMEL-27,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:04:31+00:00,2008-05-12 08:01:36+00:00,No Desc,chirino:1181649877:2007-06-12T20:04:37.662+0000:1181649877:2007-06-12T20:04:37.662+0000:implemented. see: http://activemq.apache.org/camel/mail.html
0,CAMEL-26,New Feature,Major,None,None,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:03:44+00:00,2008-05-12 08:01:36+00:00,No Desc,chirino:1181649841:2007-06-12T20:04:01.559+0000:1181649841:2007-06-12T20:04:01.559+0000:implemented. see: http://activemq.apache.org/camel/mail.html
0,CAMEL-25,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 20:02:58+00:00,2008-05-12 08:01:36+00:00,No Desc,"chirino:1181649795:2007-06-12T20:03:15.630+0000:1181649795:2007-06-12T20:03:15.630+0000:implemented: http://activemq.apache.org/camel/mail.html
chirino:1181651056:2007-06-12T20:24:16.027+0000:1181651056:2007-06-12T20:24:16.027+0000:implemented:
http://activemq.apache.org/camel/mail.html"
0,CAMEL-24,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:58:24+00:00,2008-05-12 08:01:36+00:00,No Desc,"chirino:1181649558:2007-06-12T19:59:18.632+0000:1181649558:2007-06-12T19:59:18.632+0000:implemented.  See:
http://activemq.apache.org/camel/idempotent-consumer.html"
0,CAMEL-23,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:56:42+00:00,2008-05-12 08:01:36+00:00,"The jpa: component allows you to work with databases using JPA (EJB 3 Persistence) such as for working with OpenJPA, Hibernate, TopLink to work with relational databases.


Sending POJOs to the JPA endpoint inserts entities into the database. Consuming messages removes (or updates) entities in the database.",chirino:1181649429:2007-06-12T19:57:09.319+0000:1181649429:2007-06-12T19:57:09.319+0000:implemented see: http://activemq.apache.org/camel/jpa.html
0,CAMEL-22,New Feature,Major,None,None,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:53:16+00:00,2010-07-01 06:10:57+00:00,No Desc,chirino:1181649273:2007-06-12T19:54:33.616+0000:1181649273:2007-06-12T19:54:33.616+0000:implemented.  See: http://activemq.apache.org/camel/sql.html
0,CAMEL-21,New Feature,Major,None,None,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:50:31+00:00,2008-05-12 08:01:36+00:00,No Desc,chirino:1181649039:2007-06-12T19:50:39.790+0000:1181649039:2007-06-12T19:50:39.790+0000:implemented.
0,CAMEL-20,New Feature,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,Hiram R. Chirino,0,0,2007-06-12 19:47:55+00:00,2008-05-12 08:01:36+00:00,Allows for subsequent Exchange processors to work with an exchanages that has a Pojo based body.,"chirino:1181648911:2007-06-12T19:48:31.823+0000:1181648911:2007-06-12T19:48:31.823+0000:The JaxbConverter has been implemented but I have not seen any use cases for it.
jstrachan:1185785575:2007-07-30T16:52:55.567+0000:1185785575:2007-07-30T16:52:55.567+0000:the camel-jaxb module now has a FaillbackTypeConverter so that any POJO which has an @XmlRootElement is automatically convertable to a stream/Source/Result/Document etc.

However we should also add some JaxbMarshaller plugin so that if a POJO does not have any JAXB annotations we can still use a JAXB conversion
jstrachan:1192098586:2007-10-11T18:29:46.369+0000:1192098586:2007-10-11T18:29:46.369+0000:see the [Data Format support|http://activemq.apache.org/camel/data-format.html] such as for [JAXB|http://activemq.apache.org/camel/jaxb.html]"
0,CAMEL-19,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:45:26+00:00,2008-05-12 08:01:36+00:00,No Desc,chirino:1181648737:2007-06-12T19:45:37.411+0000:1181648737:2007-06-12T19:45:37.411+0000:implemented.
0,CAMEL-18,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:40:33+00:00,2022-05-26 11:31:49+00:00,No Desc,chirino:1181648448:2007-06-12T19:40:48.926+0000:1181648448:2007-06-12T19:40:48.926+0000:implemented.
0,CAMEL-17,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:37:34+00:00,2008-05-12 08:01:36+00:00,Provide a declarative way to correlate the multiple process actions related to business activity and generate monitoring events when pocessing constraints are violated.,chirino:1181648293:2007-06-12T19:38:13.674+0000:1181648293:2007-06-12T19:38:13.674+0000:initial framework has been implemented.
0,CAMEL-16,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:24:14+00:00,2008-05-12 08:01:36+00:00,Be able to send and receive exchanges from JMS endpoints.,chirino:1181647467:2007-06-12T19:24:27.122+0000:1181647467:2007-06-12T19:24:27.122+0000:implemented.
0,CAMEL-15,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Hiram R. Chirino,0,0,2007-06-12 19:16:51+00:00,2008-05-12 08:01:36+00:00,No Desc,chirino:1181647021:2007-06-12T19:17:01.351+0000:1181647021:2007-06-12T19:17:01.351+0000:implemented.
0,CAMEL-14,New Feature,Major,None,1.2.0,"
None
",Closed,Duplicate,1.2.0,Unassigned,Noah Nordrum,0,0,2007-06-11 19:07:33+00:00,2009-02-16 05:53:17+00:00,"If you have a route that goes through a processor that is expensive, you may want to pool that processor so it's not holding up the rest of the route.


Configuration could look as such:



from(""activemq:queue:SOMETHING"").pool(5 [min], 15 [max]).process(new ExpensiveMessageEnricher()).to(""activemq:queue:SOMEWHERE_ELSE"");
or
from(""activemq:queue:SOMETHING"").process(new ExpensiveMessageEnricher()).pool(5 [min], 15 [max]).to(""activemq:queue:SOMEWHERE_ELSE"");




I'm not sure exactly how these would differ, but I think the first one would have 5-15 MQ queue listeners, which would all go through 1 EME, and then through 1 mq producer, and the second would have 1 mq listener that would dispatch to one of the 5-15 EME threads (if available?, not sure if that level of interaction between steps is good), and then go through 1 mq producer.


Seems like the first would be the better option as I write this...


Notes from IRC convo with James:
first thought is; we might wanna wrap a Producer in a factory thingy that does pooling (e.g. like the way spring does pooling using interceptors etc); but that the pool part could be done wherever a Processor can be used","cmoulliard:1218151007:2008-08-08T07:16:47.142+0000:1218151007:2008-08-08T07:16:47.142+0000:Be careful, what you propose (pool(5,15)) can generate confusion in the head of the users because actually, you can define the number of thread that you  want :

from(""activemq:queue:SOMETHING"").thread(5).process(new ExpensiveMessageEnricher()).to(""activemq:queue:SOMEWHERE_ELSE"");

Personally, what you request already exist except that we cannot now define the limit of the thread to be created.

If you want to process tasks in // (parallel), you can use the multicast EIP (http://activemq.apache.org/camel/multicast.html).
davsclaus:1218169152:2008-08-08T12:19:12.225+0000:1218169152:2008-08-08T12:19:12.225+0000:Yes as Charles said there is a thread() DSL type that can be used for thread pool.

It has attributes you can configure (see ThreadType.java) for instance it has a max size property:
 private Integer maxSize = 1;

Can't you just append the options using the fluent builder?

{code}
from(""activemq:queue:SOMETHING"").thread(5).setMaxSize(15).process(new ExpensiveMessageEnricher()).to(""activemq:queue:SOMEWHERE_ELSE"");
{code}

I think thus we already have this feature in Camel 1.4
davsclaus:1218169261:2008-08-08T12:21:01.718+0000:1218169261:2008-08-08T12:21:01.718+0000:Ah it got fluent builders already so you should use

{code}
thread(5).maxSize(15)
{code}
davsclaus:1218169362:2008-08-08T12:22:42.222+0000:1218169362:2008-08-08T12:22:42.222+0000:Implemented by CAMEL-149. Closing this one.
davsclaus:1234734797:2009-02-16T05:53:17.055+0000:1234734797:2009-02-16T05:53:17.055+0000:Closing old tickets"
0,CAMEL-13,New Feature,Major,None,1.0.0,"
None
",Closed,Fixed,1.0.0,James Strachan,Noah Nordrum,0,0,2007-06-11 17:42:58+00:00,2008-05-12 08:01:35+00:00,"Component for Remote Files. Similar to the File Component, but using remote files over various protocols (currently supporting FTP, SFTP. WebDAV planned).


Generally works, but still needs unit tests.",jstrachan:1181557490:2007-06-11T18:24:50.536+0000:1181557490:2007-06-11T18:24:50.536+0000:Patch applied with many thanks! I added an Apache FtpServer based test case too. We get an error warning when the test case runs we should tidy up (to do with shutting down while the poller keeps on going) but other than that its looking great! Nicely done!
0,CAMEL-12,New Feature,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Unassigned,James Strachan,0,0,2007-06-07 21:17:53+00:00,2008-05-12 08:01:35+00:00,"we've got the basic camel.view classes for making a DOT file (wiki notation for graphical pictures of routes). e.g. see ServiceMix stuff...


http://incubator.apache.org/servicemix/visualisation.html


so we need to be able to automatically generate nice graphs","jstrachan:1188270869:2007-08-28T11:14:29.179+0000:1188270869:2007-08-28T11:14:29.179+0000:See http://activemq.apache.org/camel/camel-maven-plugin.html

and 

http://activemq.apache.org/camel/camel-dot-maven-goal.html
"
0,CAMEL-11,New Feature,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Hadrian Zbarcea,James Strachan,1,0,2007-06-07 21:14:53+00:00,2008-07-23 03:57:31+00:00,"e.g. be able to look in camel-core or camel-jms or whatever and see what types from -> to etc


e.g.


Document -> String, Source, byte[], Stax ....


etc","hzbarcea:1189177253:2007-09-07T23:00:53.661+0000:1189177253:2007-09-07T23:00:53.661+0000:In an earlier version I had the logic in the Mojo, but I thought it's better to move it in camel-core utils.  Now the mojo uses the same logic as the camel core so the results are more likely to be relevant.  Reporting is quite primitive, but all the info is there.  It's not a problem for instance to make it xml and use xslt later.  Please give it a shot and let me know if this is what you expected.
jstrachan:1189207740:2007-09-08T07:29:00.302+0000:1189207740:2007-09-08T07:29:00.302+0000:Patch applied with huge thanks Hadrian! 

I'm wondering; should we move this code into the camel-maven-plugin as another goal/report? Also making it a real maven report, so it  gets its own page in the maven generated site; like the 'mvn camel:dot' plugin does?

http://activemq.apache.org/camel/camel-maven-plugin.html

we could use one of those Sink classes, like the DotMojo does to generate HTML nicely for the report.

BTW when I did a build, I found the converters.txt only had the stuff from camel-core in there? Am thinking, we might wanna use a similar trick to the DotMojo (maybe even combine the two) - we basically boot up the camel context in a new class loader so that all the jars are available, then generate the EIP diagrams.

Maybe we just need to do like the EmbeddedMojo does and just create a new classloader; then in that class loader we run the actual generation of the report via reflection?




davsclaus:1210976344:2008-05-17T06:19:04.966+0000:1210976344:2008-05-17T06:19:04.966+0000:Hadrian

Is there some wiki documentation that should be added/updated with this change?
davsclaus:1216756651:2008-07-23T03:57:31.176+0000:1216756651:2008-07-23T03:57:31.176+0000:Closing 1.4 issues."
0,CAMEL-10,New Feature,Major,None,1.2.0,"
None
",Closed,Fixed,1.2.0,Hadrian Zbarcea,James Strachan,0,0,2007-06-07 21:12:21+00:00,2010-07-14 23:39:12+00:00,No Desc,"chirino:1181646077:2007-06-12T19:01:17.506+0000:1181646077:2007-06-12T19:01:17.506+0000:this issue is related to CAMEL-4
jstrachan:1187053611:2007-08-14T09:06:51.216+0000:1187053611:2007-08-14T09:06:51.216+0000:Fancy taking a stab at this one - given the great work of your other patch? :)
jstrachan:1188807281:2007-09-03T16:14:41.097+0000:1188807281:2007-09-03T16:14:41.097+0000:Patch applied with thanks!"
0,CAMEL-9,New Feature,Major,None,1.2.0,"
None
",Closed,Won't Fix,1.2.0,Unassigned,James Strachan,0,0,2007-06-07 21:11:14+00:00,2008-10-23 20:03:02+00:00,To visualise routes as DOT files or in Eclipse we need to be able to walk the tree as simple POJOs more easily,"jstrachan:1185785624:2007-07-30T16:53:44.738+0000:1185785624:2007-07-30T16:53:44.738+0000:FWIW the need for this has diminished slightly due to the new JAXB2 POJO model we have; as the POJO model is fairly easy to navigate
jstrachan:1188270777:2007-08-28T11:12:57.847+0000:1188270777:2007-08-28T11:12:57.847+0000:I don't think we need this anymore as we have the POJO model for the routing definition in org.apache.camel.model package"
0,CAMEL-8,New Feature,Major,None,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Unassigned,James Strachan,0,0,2007-06-07 21:09:09+00:00,2009-11-21 11:57:54+00:00,"Background: http://www.enterpriseintegrationpatterns.com/DynamicRouter.html


Docs: http://activemq.apache.org/camel/enterprise-integration-patterns.html","davsclaus:1220498650:2008-09-04T11:24:10.268+0000:1220498650:2008-09-04T11:24:10.268+0000:Moving to 2.0
janstey:1234244497:2009-02-10T13:41:37.099+0000:1234244497:2009-02-10T13:41:37.099+0000:James added some documentation here http://camel.apache.org/dynamic-router.html

Maybe this is sufficient?
davsclaus:1243068613:2009-05-23T16:50:13.858+0000:1243068613:2009-05-23T16:50:13.858+0000:Jonathan, yes that is perfect.

With the dynamic recipient list and getting the endpoints from your dynamic store allows you to do the dynamic router EIP.
So lets call this a day then.
davsclaus:1258775874:2009-11-21T11:57:54.048+0000:1258775874:2009-11-21T11:57:54.048+0000:Closing all 2.0M2 tickets"
0,CAMEL-7,New Feature,Major,None,1.1.0,"
None
",Closed,Fixed,1.1.0,Unassigned,James Strachan,0,0,2007-06-07 21:07:52+00:00,2008-05-12 08:01:35+00:00,"Background: http://www.enterpriseintegrationpatterns.com/Aggregator.html


Docs go here: http://activemq.apache.org/camel/enterprise-integration-patterns.html",jstrachan:1183444365:2007-07-03T14:32:45.889+0000:1183444365:2007-07-03T14:32:45.889+0000:See the documentation here: http://cwiki.apache.org/CAMEL/aggregator.html
0,CAMEL-6,New Feature,Major,None,1.4.0,"
None
",Closed,Fixed,1.4.0,Willem Jiang,James Strachan,1,1,2007-06-07 20:54:38+00:00,2008-06-05 08:55:57+00:00,There's some discussion on this issue here: http://www.nabble.com/Monitoring-and-management-of-Camel-tf3886171s22882.html,"njiang:1211135521:2008-05-19T02:32:01.485+0000:1211135521:2008-05-19T02:32:01.485+0000:Current Camel uses LifecycleStrategy to listen the Context's creation, Endpoint, Router, Service's adding events.
So they are the same thing with the CamelRouterListener and CamelEndpointListener.

Since there is no method call for the route and endpoint stopping, removing in camel, all these instance will be clean up when stopping the CamelContext.
I think we can resolve this issue."
