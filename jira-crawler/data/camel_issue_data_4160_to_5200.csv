,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-16176,Bug,Major,"3.7.2, 3.8.0","3.7.3, 3.9.0","
None
",Resolved,Fixed,"3.7.3, 3.9.0",Claus Ibsen,Claus Ibsen,0,1,2021-02-10 06:40:54+00:00,2021-02-10 08:24:03+00:00,"Reported on twitter 
https://twitter.com/AlbanAuzeill/status/1359278148039368704


For this blog
https://blog.sonarsource.com/regular-expressions-present-challenges


And pointing to our code at
https://github.com/apache/camel/blob/41e5be070279a77aec13b8aba7c387015b75bccc/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaHeaderFilterStrategy.java#L29",
0,CAMEL-16175,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.9.0,Luca Burgazzoli,Claus Ibsen,0,1,2021-02-09 16:26:48+00:00,2021-03-17 10:09:47+00:00,"With the pluggable routes loader in 3.8, we can port over more from camel-k.


Lets port over JS
And the others we can do too Kotlin, Groovy",
0,CAMEL-16174,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Unassigned,Claus Ibsen,0,2,2021-02-09 15:49:20+00:00,2021-03-17 10:10:23+00:00,"There is a newer 3.5.x version.


Check with kafka what ZK version it uses, whether we can jump to ZK 3.6.x","acosentino:1612857070:2021-02-09T15:51:10.729+0000:1612857070:2021-02-09T15:51:10.729+0000:Kafka 2.7.0 uses Zookeeper 3.5.8
davsclaus:1612858566:2021-02-09T16:16:06.882+0000:1612858566:2021-02-09T16:16:06.882+0000:Ah okay yeah there is a ZK 3.5.9 released"
0,CAMEL-16173,Bug,Minor,"3.7.1, 3.7.2",None,"
None
",Resolved,Fixed,"3.7.4, 3.9.0",Claus Ibsen,Jesper Duelund Isaksen,0,2,2021-02-09 15:47:08+00:00,2022-09-14 13:56:52+00:00,"In an attempt to ensure proper error handling once a Camel route would reach its configured Resilience4j Bulkhead limit, it was experienced that regardless of Bulkhead configuration, the limit was never upheld. Seemingly the Bulkhead has no effect within the circuit breaker.


The context in which the bug was experienced:
Spring Boot 2.4.2, Apache Camel 3.7.1 (reproducer tested using 3.7.2 as well).


A reproducer Maven project can be found here: sys-jdi/camel-bulkhead-test: Test of Resilience4J in Spring Boot application using Apache Camel.",davsclaus:1616035110:2021-03-18T10:38:30.300+0000:1616035110:2021-03-18T10:38:30.300+0000:Thanks for the excellent reproducer. I can likely see what is the problem in camel-resilience4j
0,CAMEL-16172,Improvement,Minor,"3.7.2, 3.8.0",3.9.0,"
None
",Resolved,Fixed,3.9.0,Andrea Cosentino,Thomas Heggelund,0,1,2021-02-09 13:28:29+00:00,2021-02-11 10:29:57+00:00,"Camel-OpenTelemetry should be upgraded to version 0.15 of the OpenTelemetry libraries.


There are some breaking changes that require codechange in the component",
0,CAMEL-16171,Task,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Andrea Cosentino,Peter Palaga,0,1,2021-02-09 13:10:48+00:00,2021-03-05 08:17:00+00:00,As agreed in https://github.com/apache/camel-quarkus/pull/2217 we'd like to add uri-endpoint-override and override-endpoint options to all AWS2 components not having it yet.,
0,CAMEL-16170,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Claus Ibsen,Claus Ibsen,0,1,2021-02-08 18:14:14+00:00,2021-02-12 12:12:20+00:00,"Lets trim down camel-spring and move the common/core to camel-spring-core, and then leave camel-spring with the legacy XML routes.


This reduces the overhead of using camel-jms and other spring components that rely on camel-spring.


And in camel spring boot we can also look at making a camel-spring-boot-core starter that is tiny and dont have all the many components so SB users can reduce number of JARs","davsclaus:1613018364:2021-02-11T12:39:24.906+0000:1613103011:2021-02-12T12:10:11.195+0000:TODO: camel-spring and camel-spring XML *DONE*
TODO: camel-spring-boot and camel-spring-boot-xml *DONE*
TOOD: camel-karaf *DONE*
TODO: camel-examples *DONE*
TODO: upgrade guide *DONE*"
0,CAMEL-16169,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Claus Ibsen,Claus Ibsen,0,1,2021-02-08 17:54:37+00:00,2021-03-18 09:50:42+00:00,"If you use getComponent then camel will create and auto start the component if needed. But if you use addComponent(name, instance) with an existing instance you have created manually then its not auto started.


We should likely make this consistent with getComponent.


Jeremy had a glitch with salesforce with out own test.
https://github.com/apache/camel/blob/03ec304bd09cc83adb92bffe2d1339a5dac411d1/components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/AbstractSalesforceTestBase.java#L47-L67


https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Problem.20with.20nightlies",
0,CAMEL-16168,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.8.0,Alex Dettinger,Alex Dettinger,0,1,2021-02-08 17:46:46+00:00,2021-02-09 09:32:01+00:00,No Desc,
0,CAMEL-16167,Task,Major,None,"3.7.3, 3.8.0","
None
",Resolved,Fixed,"3.7.3, 3.8.0",Unassigned,Claus Ibsen,0,1,2021-02-08 17:44:51+00:00,2021-02-10 08:24:26+00:00,No Desc,
0,CAMEL-16166,Task,Major,None,"3.7.3, 3.8.0","
None
",Resolved,Fixed,"3.7.3, 3.8.0",Unassigned,Claus Ibsen,0,1,2021-02-08 17:41:46+00:00,2021-02-10 08:24:18+00:00,9.4.36.v20210114,
0,CAMEL-16165,Improvement,Minor,3.7.0,,"
None
",Resolved,Duplicate,None,Unassigned,DIMITRIS BOURAS,0,2,2021-02-08 14:35:14+00:00,2021-02-08 14:52:37+00:00,"When using RouteTemplate noAutoStartup seems to be ignored. I believe it is not set in:




public RouteDefinition asRouteDefinition()",lb:1612767141:2021-02-08T14:52:21.939+0000:1612767141:2021-02-08T14:52:21.939+0000:This has been fixed https://issues.apache.org/jira/browse/CAMEL-16161
0,CAMEL-16164,Task,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Andrea Cosentino,0,1,2021-02-08 09:40:53+00:00,2021-02-08 10:15:55+00:00,"<feature>camel|camel-(?!(ignite|pgevent|script-groovy|spring-redis|spring-security|cdi))*</feature>


Except Ignite and pgevent that require an additional step to work, the other features are not tested and don't really work. It makes sense to remove them directly and cleanup for 3.8.0",
0,CAMEL-16163,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-02-07 15:54:27+00:00,2021-02-08 08:30:32+00:00,"We create a new loader per resource being loaded, which is overhead.


We should make it a static service and reusable.",
0,CAMEL-16162,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Claus Ibsen,Claus Ibsen,0,1,2021-02-07 15:09:56+00:00,2021-03-19 06:56:36+00:00,"When using onCompletion then there is a limitation that only 1 is effectively in use. 


So if you have 2 but they are mutative exclusive


onCompletion onComplete
onCompletion onFailure


Then we don't detect this and allow them to co-exist.


Also we should either look at allowing N+ on completions in a route, and also the above problem.


This ticket is as a reminder to look into this.",
0,CAMEL-16161,Bug,Minor,None,"3.7.3, 3.8.0","
None
",Resolved,Fixed,"3.7.3, 3.8.0",Claus Ibsen,Claus Ibsen,0,1,2021-02-07 13:22:41+00:00,2021-02-08 14:52:32+00:00,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/RouteTemplate.20noAutoStartup,
0,CAMEL-16160,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Claus Ibsen,0,1,2021-02-06 14:56:40+00:00,2021-02-06 17:05:22+00:00,"If you have a camel main app and in the application.properties have


camel.main.name = Foo


Then you should be able to override this with


-D camel.main.name = Bar


On the CLI args to the JVM.


We have this for ENV variables",
0,CAMEL-16159,New Feature,Minor,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,James Hilliard,0,2,2021-02-06 10:17:28+00:00,2021-02-08 08:37:59+00:00,https://github.com/apache/camel/pull/5034,"davsclaus:1612744640:2021-02-08T08:37:20.524+0000:1612744640:2021-02-08T08:37:20.524+0000:Thanks for the work on this
davsclaus:1612744679:2021-02-08T08:37:59.364+0000:1612744679:2021-02-08T08:37:59.364+0000:You are welcome to work on a PR to update the documentation, see the src/main/doc folder of the component"
0,CAMEL-16158,Bug,Minor,3.7.0,,"
None
",Resolved,Incomplete,None,Unassigned,Leo Guo,0,2,2021-02-06 10:15:50+00:00,2021-03-29 09:23:47+00:00,"Using JDBC based aggregate EIP, in cluster multiple applications shared the same database for aggregation repository, different application use different correlation key to store aggregated message, set completionTimeout to 10s as condition of completion.


There is randomly issue when reach the complete condition the aggregated message will be repeated process in multiple instances which means multiple applications will pick up aggregated message to process.


 


Below is setting for aggregator


completion-size: 500
 completion-timeout-ms: 10000
 recovery-maximum-redeliveries: 3
 recovery-interval-ms: 30000
 optimisticlock-maximum-retries: 3
 optimisticlock-maximum-retry-delay: 2000


 


Checked thread Camel (camel-1) thread #1 - AggregateRecoverChecker picked up msg and process repeatly.","davsclaus:1616401961:2021-03-22T16:32:41.387+0000:1616401961:2021-03-22T16:32:41.387+0000:Can you provider a reproducer example project - otherwise its hard to help, with this vague description.
davsclaus:1616981027:2021-03-29T09:23:47.592+0000:1616981027:2021-03-29T09:23:47.592+0000:User is not active assisting - closing ticket"
0,CAMEL-16157,Improvement,Minor,None,,"
None
",Closed,Not A Problem,None,Unassigned,Jeremy Ross,0,1,2021-02-05 19:04:21+00:00,2021-11-16 18:33:12+00:00,"From the docs:


Controls whether the API collates unrelated subrequests to bulkify them (true) or not (false).
When subrequests are collated, the processing speed is faster, but the order of execution is not guaranteed (unless there is an explicit dependency between the subrequests).
If collation is disabled, then the subrequests are executed in the order in which they are received.
Subrequests that contain valid HTTP headers are not collated.
In API version 49.0 and later, the default value is true. In version 48.0, the default value is false.
Subrequests can be collated if they meet these conditions: * The HTTP methods are the same.

The API versions of the resources are the same.
The parents of the resources are /sobjects resources.
No more than five sObjects resources are present across a grouping of subrequests.","jeremyross:1637058792:2021-11-16T18:33:12.954+0000:1637058792:2021-11-16T18:33:12.954+0000:Since salesforce collates automatically starting with v49, I don't see a need to change anything."
0,CAMEL-16156,Task,Major,None,None,"
None
",Resolved,Fixed,3.9.0,Guillaume Nodet,Guillaume Nodet,0,2,2021-02-05 17:05:37+00:00,2022-03-31 13:59:58+00:00,The usage of a system property makes running tests concurrently impossible.,"davsclaus:1612572097:2021-02-06T08:41:37.661+0000:1612572097:2021-02-06T08:41:37.661+0000:Yeah so there are some old JVM sys properties from camel 2.x days where JMX was enabled and included out of the box. Today in Camel 3 JMX is not included, and you just enable JMX by adding camel-management to the classpath.

I think we can look at removing those JVM sys properties. They are also not really in use anymore. And if any JMX configuration is needed then you can configure this in the standard way in Camel anyway."
0,CAMEL-16155,Improvement,Minor,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Claus Ibsen,Luca Burgazzoli,0,2,2021-02-05 16:49:01+00:00,2021-02-09 16:15:35+00:00,"As today the ManagedGroupFactoryBuilder tries to detect if it is running on an OSGi platform but we could add an option to explicit set the  ManagedGroupFactory so as example for quarkus, we can skip the check as OSGi is definitively not in use.


See: https://github.com/apache/camel/pull/5032","davsclaus:1612858529:2021-02-09T16:15:29.426+0000:1612858529:2021-02-09T16:15:29.426+0000:Created a ticket at quarkus-camel
https://github.com/apache/camel-quarkus/issues/2221

So we can just register DefaultManagedGroupFactory in the registry so its autowired and then it avoids the osgi lookup"
0,CAMEL-16154,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-02-05 15:39:03+00:00,2021-02-06 10:43:19+00:00,"We support Exchange, Message and AsyncCallback today.
And this is in hardcoded order. Lets make this more flexible and have parameter binding for



no parameters
exchange type
message type
camel context type
async callback type
any other type is then regarded as the message body and will be converter to the type",
0,CAMEL-16153,New Feature,Minor,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Unassigned,Benjamin,0,1,2021-02-05 14:28:23+00:00,2021-02-09 15:46:19+00:00,"The camel-report-maven-plugin reports the coverage of each route individually. When failOnError is activated, the coverageThreshold will therefore apply on a per route basis. Projects may, however, have many smaller helper routes that don't necessarily need to be tested. In this case, an overall coverage threshold across all routes in the project should be available.","Bürgisser:1612831209:2021-02-09T08:40:09.500+0000:1612831209:2021-02-09T08:40:09.500+0000:Starting to work on it today
Bürgisser:1612838976:2021-02-09T10:49:36.970+0000:1612838976:2021-02-09T10:49:36.970+0000:Pull request opened https://github.com/apache/camel/pull/5057"
0,CAMEL-16152,Bug,Minor,3.5.0,"3.4.6, 3.7.3, 3.8.0","

camel
language
simple
tokenizer

",Resolved,Fixed,"3.4.6, 3.7.3, 3.8.0",Claus Ibsen,Michal Stepan,0,2,2021-02-05 13:07:24+00:00,2021-02-08 07:26:55+00:00,"We discovered a problem within <tokenize>  component in <split>.


We have tokenize with:



token is simple expression
group



 


When the route gots executed, following wrong behaviour occur:



the simple expression is not evaluated



All can be seen in example route:




<route id=""test-foo-route"">
    <from uri=""timer://foo?repeatCount=1""/>
    <setHeader name=""test"">
        <constant>B</constant>
    </setHeader>
    <setBody>
        <constant>aaBaaBaaB</constant>
    </setBody>
    <split>
        <tokenize token=""${headers.test}"" group=""2""/>
        <log message=""Body in tokenize ${body}""/>
    </split>
</route>




Log:




14:03:29.943 | INFO  | Camel (camel-1) thread #1 - timer://foo | test-foo-route | ID-michal-desktop-1612530209931-0-2 | test-foo-route | Body in tokenize aa${headers.test}aa
14:03:29.943 | INFO  | Camel (camel-1) thread #1 - timer://foo | test-foo-route | ID-michal-desktop-1612530209931-0-3 | test-foo-route | Body in tokenize aa




The correct behaviour would be that the body will contain evaluated simple expression given in token.","davsclaus:1612572137:2021-02-06T08:42:17.206+0000:1612572137:2021-02-06T08:42:17.206+0000:Can you try and test with Camel 3.7.1
davsclaus:1612665887:2021-02-07T10:44:47.375+0000:1612665887:2021-02-07T10:44:47.375+0000:Yeah it should use the computed delimiter - eg B in this case.
davsclaus:1612667132:2021-02-07T11:05:32.033+0000:1612667132:2021-02-07T11:05:32.033+0000:I have reproduced the issue and have a fix 
michalstepan:1612740415:2021-02-08T07:26:55.457+0000:1612740415:2021-02-08T07:26:55.457+0000:Hi Claus, 

thanks for so fast approach and fix. I will test it once a fix version becomes available.

Regards,

Michal"
0,CAMEL-16151,Task,Trivial,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Aurélien Pupier,0,1,2021-02-05 08:46:14+00:00,2021-02-07 13:02:40+00:00,No Desc,
0,CAMEL-16150,Task,Trivial,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Aurélien Pupier,0,1,2021-02-05 08:17:54+00:00,2021-02-07 13:03:42+00:00,it is currently using an http url http://camel.apache.org/writing-components.html,
0,CAMEL-16149,New Feature,Minor,3.7.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Aurélien Pupier,0,1,2021-02-05 08:02:04+00:00,2022-09-02 17:38:17+00:00,it woudl avoid errors in workspace when creating a component in an Eclipse desktop workspace,
0,CAMEL-16148,New Feature,Minor,3.7.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Aurélien Pupier,0,2,2021-02-05 08:01:26+00:00,2022-09-02 17:38:10+00:00,it would avoid errors when creating a new API component in an Eclipse desktop workspace,"davsclaus:1612572234:2021-02-06T08:43:54.414+0000:1612572234:2021-02-06T08:43:54.414+0000:What do you mean? 
apupier:1612747692:2021-02-08T09:28:12.070+0000:1612747692:2021-02-08T09:28:12.070+0000:currently, when developing a Camel API component in Eclipse Desktop, there is an error message that the camel-api-component-maven-plugin is not supported. It woudl nice to have the plugin supported by m2e. it will avoid the errors and even be able to potentially generate code automatically.
To make the maven plugin compatible: https://wiki.eclipse.org/M2E_compatible_maven_plugins
"
0,CAMEL-16147,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2021-02-05 05:55:58+00:00,2023-08-09 09:22:01+00:00,"Add description attribute for documentation, which the tooling can grab and use for metadata generation, so we can store this information in the component json file, so we now know about those header keys and documentation. We can then generate this in the adoc doc files.",
0,CAMEL-16146,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Claus Ibsen,0,2,2021-02-04 13:40:04+00:00,2021-02-07 14:27:54+00:00,For example secretKey vs secret-key,"acosentino:1612417305:2021-02-04T13:41:45.601+0000:1612417305:2021-02-04T13:41:45.601+0000:https://github.com/apache/camel/commit/6641e41d4a1b683806d70d9c051a6d5c0b3a90c6
acosentino:1612417325:2021-02-04T13:42:05.185+0000:1612417325:2021-02-04T13:42:05.185+0000:I've added some more keys. 
davsclaus:1612674340:2021-02-07T13:05:40.790+0000:1612674340:2021-02-07T13:05:40.790+0000:We should maybe remove all non A..Z chars from the input text and match against those, the you can match against all the different cases with and without dashes and so on
davsclaus:1612674699:2021-02-07T13:11:39.176+0000:1612674699:2021-02-07T13:11:39.176+0000:An idea is to look in the catalog for all secret options we have and compile that as a list to use
davsclaus:1612679274:2021-02-07T14:27:54.913+0000:1612679274:2021-02-07T14:27:54.913+0000:We now automate the list of secret names in the util source code when building camel-catalog."
0,CAMEL-16145,Bug,Minor,3.7.1,"3.7.3, 3.8.0","
None
",Resolved,Fixed,"3.7.3, 3.8.0",Unassigned,Benjamin,0,1,2021-02-04 13:36:12+00:00,2021-02-06 19:04:08+00:00,"By default, the coverage threshold is set to 100% for each route. According to a comment in the code, we should be able to set the threshold via the option coverageThreshold. However, the @Parameter annotation is missing before the declaration of ""private byte coverageThreshold"" in RouteCoverageMojo.java. Therefore, the threshold cannot be set.","Bürgisser:1612501515:2021-02-05T13:05:15.674+0000:1612501515:2021-02-05T13:05:15.674+0000:Will work on it today
Bürgisser:1612505431:2021-02-05T14:10:31.230+0000:1612505431:2021-02-05T14:10:31.230+0000:Done and tested (using a local project). PR: https://github.com/apache/camel/pull/5030"
0,CAMEL-16144,New Feature,Minor,None,None,"
None
",Resolved,Abandoned,3.x,Unassigned,Andrea Cosentino,0,3,2021-02-04 13:34:01+00:00,2023-07-24 18:02:47+00:00,"for the moment we are using the binance stuff from xchange. They are providing also a stream-binance artifacts for streaming information. 


 


We could start with binance and maybe explore other API","jamesnetherton:1621562360:2021-05-21T09:59:20.718+0000:1621562360:2021-05-21T09:59:20.718+0000:Any progress on this one? I could try to take a look.
acosentino:1621810020:2021-05-24T06:47:00.136+0000:1621810020:2021-05-24T06:47:00.136+0000:[~jamesnetherton] Feel free to go ahead! Thank you!
davsclaus:1631920306:2021-09-18T07:11:46.832+0000:1631920306:2021-09-18T07:11:46.832+0000:Any update on this?
jamesnetherton:1632091333:2021-09-20T06:42:13.085+0000:1632091333:2021-09-20T06:42:13.085+0000:Yeah, sorry. I'll move it to 3.13. Spare time is currently lacking somewhat so I'll unassign myself for now.

"
0,CAMEL-16143,New Feature,Major,None,,"
None
",Resolved,Abandoned,None,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2021-02-04 13:00:18+00:00,2022-09-02 17:37:17+00:00,The idea is to be able to interact with Druid broker to execute SQL query.,
0,CAMEL-16142,Improvement,Minor,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,James Netherton,James Netherton,0,1,2021-02-04 09:35:10+00:00,2021-02-05 10:28:25+00:00,No Desc,
0,CAMEL-16141,Test,Major,None,3.15.0,"
None
",Resolved,Fixed,3.15.0,Guillaume Nodet,Guillaume Nodet,0,2,2021-02-04 08:13:45+00:00,2021-12-14 16:18:08+00:00,No Desc,"jondruse:1639450691:2021-12-14T10:58:11.898+0000:1639450691:2021-12-14T10:58:11.898+0000:Hi [~gnodet],

do you work on this issue?

If not, may I assign  this issue to myself and investigate it?
jondruse:1639466421:2021-12-14T15:20:21.649+0000:1639466421:2021-12-14T15:20:21.649+0000:I found a simple fix and created a PR - [https://github.com/apache/camel/pull/6538] "
0,CAMEL-16140,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2021-02-04 06:51:13+00:00,2022-09-02 17:37:02+00:00,"We should look at moving more to build phase, so we can get ready for build time optimization of routes as well.


Currently routes is setup at init phase, but we can start with adding an option the end user can turn on to do this at build time.",
0,CAMEL-16139,New Feature,Minor,3.7.1,,"
None
",Resolved,Information Provided,None,Unassigned,Bob Paulin,0,2,2021-02-04 02:24:07+00:00,2021-02-05 10:17:43+00:00,"The Java DSL offers a simple way to get started marshalling and unmarshaling objects mid route by:


 




.unmarshal().json(JsonLibrary.Jackson, Map.class)



 


In 3.x an option was added to allow Jackson to automatically discover ObjectMappers in the Camel registry:


autoDiscoverObjectMapper 


 


This is very convenient to apply global Object mapper configurations to an entire application.  However it's defaulted to false and there does not appear to be a way to set this option in the Java DSL without replacing the above code with a DataFormat Object


EX




JacksonDataFormat format = new JacksonDataFormat(Map.class);
format.setAutoDiscoverObjectMapper(true);
.unmarshal(format);



This is a big change to make all over the project.


I'd like to propose being able to set this option globally in the camel context with the GlobalOptions


EX




 getContext().getGlobalOptions().put(""jackson.json.autoDiscoverObjectMapper"", ""true"");



Then use the Java DSL as is to a ObjectMapper that is already bound in the registry.  Would this be an acceptable approach?  Other options I'm missing. 


 


I have a patch with a suggested implementation.","davsclaus:1612392976:2021-02-04T06:56:16.031+0000:1612392976:2021-02-04T06:56:16.031+0000:You can use DataFormatCustomizer
bob:1612417878:2021-02-04T13:51:18.741+0000:1612417878:2021-02-04T13:51:18.741+0000:Thanks [~davsclaus]  That did the trick.

 

 
{code:java}
DataFormatCustomizer.forType(JacksonDataFormat.class, target -> target.setAutoDiscoverObjectMapper(true)); {code}"
0,CAMEL-16138,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,John Poth,Nicola Ferraro,0,2,2021-02-03 11:58:57+00:00,2021-03-09 11:43:47+00:00,"CAMEL-16071 has added support for KafkaClientFactory (thanks to javierholguera). It allows plugging a different implementation of the Kafka Producer/Consumer, but the component still requires setting the ""brokers"" configuration property in the component/endpoint, otherwise an IllegalArgumentException is thrown.


 


This prevents users and platforms to plug implementations of the Kafka Producers/Consumers with fully externalized configuration (e.g. in Camel-Quarkus we may be able in the near future to plug configuration injected into files via Kubernetes service-binding).


 


I think the check on the presence of the ""brokers"" property should be moved into the default factory.


 


cc: jpoth","davsclaus:1612325198:2021-02-03T12:06:38.022+0000:1612325198:2021-02-03T12:06:38.022+0000:btw we should focus on camel-vertx-kafka going forward. This component will become deprecated over time
nferraro:1612330956:2021-02-03T13:42:36.239+0000:1612330956:2021-02-03T13:42:36.239+0000:Yeah, I think that option is available in both components
davsclaus:1612824686:2021-02-09T06:51:26.598+0000:1612824686:2021-02-09T06:51:26.598+0000:The check is now moved to the client factory, so a custom impl can do its own, and for example return null in broker urls. Then they are not set on the kafka props.
davsclaus:1612830676:2021-02-09T08:31:16.418+0000:1612830676:2021-02-09T08:31:16.418+0000:Implemented this also for camel-vertx-kafka, and the client factory is autowired so its easier to plugin a custom impl"
0,CAMEL-16137,Task,Major,None,None,"
None
",Resolved,Fixed,3.9.0,Guillaume Nodet,Guillaume Nodet,0,2,2021-02-03 10:13:52+00:00,2021-02-16 16:01:30+00:00,"In particular, this disables all camel-printer tests.  There may other usages


The problem has been found because mvnd does not honour the .mvn/jvm.config JVM options.","Mahas_M:1612320977:2021-02-03T10:56:17.509+0000:1612320977:2021-02-03T10:56:17.509+0000:Hi,

I'm Mohammadu Milhar Mahas, a second year undergraduate in Computer science at the University of Jaffna, Srilanka. i would like to do this priject for GSoC  2021. please help me get started.
gnodet:1613461744:2021-02-16T15:49:04.102+0000:1613461744:2021-02-16T15:49:04.102+0000:Sorry, I missed you comment.  {{mvnd}} has been fixed (though not released yet) and the printer tests have been somewhat fixed too, so not sure there's much left to do here.
Mahas_M:1613462490:2021-02-16T16:01:30.440+0000:1613462490:2021-02-16T16:01:30.440+0000:Well, can you suggest me Gsoc 2021 issues, then I can try to do it"
0,CAMEL-16136,Improvement,Minor,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2021-02-03 09:50:29+00:00,2021-02-03 13:57:29+00:00,"I noticed that in SimpleCamelContext and other few pieces we use the following patter:




        BaseServiceResolver<DeferServiceFactory> resolver = new BaseServiceResolver<>(
                DeferServiceFactory.FACTORY,
                DeferServiceFactory.class,
               getBootstrapFactoryFinder());

        Optional<DeferServiceFactory> result = resolver.resolve(getCamelContextReference());
        if (result.isPresent()) {
            return result.get();
        } else {
            throw new IllegalArgumentException(""..."");
        }




I wonder if we really need to allocate a BaseServiceResolver as in fact the instance is never reused and I do not see any location where the class is extended so maybe we can either replace it with a static method or we can add a similar functionality to ExtendedCamelContext.",
0,CAMEL-16135,Bug,Major,3.7.1,"3.7.2, 3.8.0","

spring
spring-boot

",Resolved,Fixed,"3.7.2, 3.8.0",Claus Ibsen,Sita Geßner,0,2,2021-02-03 09:04:52+00:00,2021-02-10 11:07:26+00:00,"The routeinitialization failes with spring-boot or spring, when the route has an onException-Block with an split.


There were no problems in version 2.25.0. The exception occured after the migration from 2.25.0 to 3.7.1.


See https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/NullPointerException.20in.20ErrorHandlerReifier


Reproducer:


https://github.com/razilein/cameltest","davsclaus:1612325102:2021-02-03T12:05:02.313+0000:1612325102:2021-02-03T12:05:02.313+0000:Thanks for the reproducer, its due to a bit how spring-boot starts, but I have a fix in the works.

btw when you use camel on spring boot, then the JARs should be the starter JARs, eg camel-quartz => camel-quartz-starter
sgessner:1612926446:2021-02-10T11:07:26.550+0000:1612926446:2021-02-10T11:07:26.550+0000:[~davsclaus] Thanks a lot! The route has started and works correctly. The issue can be closed."
0,CAMEL-16134,New Feature,Minor,None,3.11.0,"
None
",Resolved,Fixed,3.11.0,Unassigned,Gerasimos Kalouris,0,2,2021-02-03 08:16:34+00:00,2021-06-11 04:32:56+00:00,"When sending a long SMS (multipart) with the registered delivery receipt flag, each and every segment would be registered with the DLR flag.


This makes the SMSC send a DLR for every segment of the message and you have to make a bigger effort on keeping their state, so you can merge the final state of the whole SMS. 


I would like to request an `SmppConfiguration` option (i.e DlrOnLast) that would enable the DLR flag only on the last segment of the long SMS. 


A possible work-around that should occur on the SubmitSm and SubmitMulti:


 




// i.e on SmppSubmitSmCommand:70
SubmitSm[] submitSms = new SubmitSm[segments.length];
byte registeredDelivery = submitSms[0].getRegisteredDelivery();

for(int i = 0; i < segments.length; ++i) {
    SubmitSm submitSm = SmppUtils.copySubmitSm(template);
    submitSm.setShortMessage(segments[i]);
    if (this.config.getDlrOnLast()) {
        submitSm.setSmscDelReceiptNotRequested();
    }
    submitSms[i] = submitSm;
}
submitSms[segments.length - 1].setRegisteredDelivery(registeredDelivery);

return submitSms;




A possible better solution incorporating this would be to remove the DLR flag from the submit-sm template, at the first place.","memas.kal:1621407979:2021-05-19T15:06:19.515+0000:1621407979:2021-05-19T15:06:19.515+0000:[~davsclaus] I would like to work on a PR on this. Do you have any suggestions and guidelines ?
davsclaus:1621467527:2021-05-20T07:38:47.283+0000:1621467527:2021-05-20T07:38:47.283+0000:There is a contribute page at
https://camel.apache.org/community/contributing/

And then a good idea is to be on the zulip chat where you can also ask for advice/help, and if you got some code, then you can do a PR as draft for review/feedback etc."
0,CAMEL-16133,Improvement,Minor,3.7.0,None,"
None
",Open,Unresolved,Future,Unassigned,fly,0,2,2021-02-03 02:47:33+00:00,2023-08-09 09:22:13+00:00,How can I use TMultiplexProtocol in camel-thrift component? It doesn't seem to support it,"davsclaus:1612310605:2021-02-03T08:03:25.937+0000:1612310605:2021-02-03T08:03:25.937+0000:Can you explain more what you want, and can you find information from Apache Thrift about this protocol so we can better help
weborld:1612418511:2021-02-04T14:01:51.300+0000:1612419070:2021-02-04T14:11:10.860+0000:I need to use the component as the client to connect to a server. The server uses the [TMultiplexedProtocol|https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TMultiplexedProtocol.java]. The component has no place to set this protocol and specify the service name"
0,CAMEL-16132,Task,Trivial,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Matthias Streidel,Matthias Streidel,0,2,2021-02-02 23:53:27+00:00,2021-02-06 08:39:39+00:00,"The README.adoc (this one here) of the example module spring-boot-widget-gadget in camel-spring-boot-examples is currently empty.


It needs some basic description on how to start up the example application and the typical closing:




=== Help and contributions

If you hit any problem using Camel or have some feedback, then please
https://camel.apache.org/support.html[let us know].

We also love contributors, so
https://camel.apache.org/contributing.html[get involved] :-)

The Camel riders!","davsclaus:1612316325:2021-02-03T09:38:45.855+0000:1612316325:2021-02-03T09:38:45.855+0000:You are welcome to add such readme, maybe copy from one of the other similar examples and adjust the text
metters:1612536942:2021-02-05T22:55:42.208+0000:1612536942:2021-02-05T22:55:42.208+0000:I added the readme and created the PR. I also linked to a picture file: https://camel.apache.org/components/latest/eips/_images/eip/DistributionAggregate.gif
I assumed that won't be a problem, because the file is part of the camel-project. If this causes copy right issues let me know and i'll remove the href."
0,CAMEL-16131,Wish,Minor,3.8.0,None,"
None
",Resolved,Fixed,3.8.0,Unassigned,Reji Mathews,0,1,2021-02-02 18:26:20+00:00,2021-02-03 09:38:13+00:00,"Currently, the unit testing is done via mocked SdkClient. Additionally, add a disabled unit test case which can take in user parameters and perform a test against real huaweicloud smn service to validate functional aspects.",
0,CAMEL-16130,Wish,Minor,3.8.0,None,"
None
",Closed,Resolved,None,Unassigned,Reji Mathews,0,1,2021-02-02 17:39:59+00:00,2021-02-03 01:33:00+00:00,"New version of Cloud SDK is released by huawei cloud team. ( https://github.com/huaweicloud/huaweicloud-sdk-java-v3/releases/tag/v3.0.32-rc )


 


Upgrade to use the same",
0,CAMEL-16129,Improvement,Major,3.7.1,"3.7.2, 3.8.0","
None
",Resolved,Fixed,"3.7.2, 3.8.0",Claus Ibsen,James Netherton,0,2,2021-02-02 15:01:43+00:00,2021-02-03 07:59:10+00:00,"Not too sure about the logic in NettyConfiguration.parseURI but it invokes PropertyBindingSupport.bindProperties. Depending on the combination of URI options it can lead to some of the NettyConfiguration setters being invoked via reflection.


E.g I was testing this URI in camel-quarkus. Both sync & allowDefaultCodec are being set through reflection.


netty:udp://localhost:8081?sync=false&allowDefaultCodec=false","davsclaus:1612251767:2021-02-02T15:42:47.269+0000:1612251767:2021-02-02T15:42:47.269+0000:Yes this is wrong, most of the options can be set automatic. Just that logic about port tcp/udp and a few others. But that should be in the component.
davsclaus:1612271729:2021-02-02T21:15:29.341+0000:1612271729:2021-02-02T21:15:29.341+0000:This has an affect on camel-netty-http which I am working on now"
0,CAMEL-16128,Bug,Major,"3.5.0, 3.7.1",None,"
None
",Resolved,Not A Bug,None,Unassigned,Adam Ostrožlík,0,3,2021-02-02 08:12:36+00:00,2021-02-02 09:35:14+00:00,"spring-boot camel-cron-starter + endpointdsl throws exception while using this expression:


 




0 0 0 1/1 * ? *




Doc says that supported field count is 7. https://camel.apache.org/components/latest/cron-component.html


Workaround is probably to omit last optional year character.


Code causing this:




from(cron(""cleanup"").schedule(""0 0 0 1/1 * ? *))





org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Cron expression must consist of 6 fields (found 7 in ""0 0 0 1/1 * ? *"")org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Cron expression must consist of 6 fields (found 7 in ""0 0 0 1/1 * ? *"") at org.apache.camel.RuntimeCamelException.wrapRuntimeCamelException(RuntimeCamelException.java:51) ~[camel-api-3.5.0.jar:3.5.0] at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) ~[camel-spring-3.5.0.jar:3.5.0] at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:167) ~[camel-spring-3.5.0.jar:3.5.0] at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE] at cz.multima.nathan.integration.producer.NathanKafkaProducer.main(NathanKafkaProducer.java:14) ~[main/:na] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) ~[na:na] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na] at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na] at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.3.4.RELEASE.jar:2.3.4.RELEASE]Caused by: java.lang.IllegalArgumentException: Cron expression must consist of 6 fields (found 7 in ""0 0 0 1/1 * ? *"") at org.springframework.scheduling.support.CronSequenceGenerator.parse(CronSequenceGenerator.java:273) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.scheduling.support.CronSequenceGenerator.<init>(CronSequenceGenerator.java:98) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.springframework.scheduling.support.CronTrigger.<init>(CronTrigger.java:55) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE] at org.apache.camel.spring.pollingconsumer.SpringScheduledPollConsumerScheduler.doStart(SpringScheduledPollConsumerScheduler.java:118) ~[camel-spring-3.5.0.jar:3.5.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.5.0.jar:3.5.0] at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) ~[camel-api-3.5.0.jar:3.5.0] at org.apache.camel.support.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:481) ~[camel-support-3.5.0.jar:3.5.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3126) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:362) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:282) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:181) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:115) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2907) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2740) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2703) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43) ~[camel-spring-boot-3.5.0.jar:3.5.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.5.0.jar:3.5.0] at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2469) ~[camel-base-3.5.0.jar:3.5.0] at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:130) ~[camel-spring-3.5.0.jar:3.5.0] ... 20 common frames omitted","acosentino:1612224966:2021-02-02T08:16:06.325+0000:1612224966:2021-02-02T08:16:06.325+0000:Can you try with latest LTS release 3.7.1? 3.5.0 was a development version
drezir:1612225214:2021-02-02T08:20:14.956+0000:1612225214:2021-02-02T08:20:14.956+0000:Also affected
davsclaus:1612229568:2021-02-02T09:32:48.107+0000:1612229676:2021-02-02T09:34:36.030+0000:That is because you are using spring as cron implementation and it seems to not support 7, if you use quartz then it can do 7 and more advanced cron expressions

However the 7 digit is year which is seldom in use.
http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html"
0,CAMEL-16127,Improvement,Minor,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2021-02-01 17:08:38+00:00,2021-02-03 08:02:19+00:00,"The PackageScanResourceResolver has two methods to resolve resources:




Set<InputStream> findResources(String location) throws Exception;
Set<String> findResourceNames(String location) throws Exception;




The default implementation provided by DefaultPackageScanResourceResolver is:




@Override
public Set<String> findResourceNames(String location) throws Exception {
    Set<KeyValueHolder<String, InputStream>> answer = new LinkedHashSet<>();
    doFindResources(location, answer);
    return answer.stream().map(KeyValueHolder::getKey).collect(Collectors.toSet());
}
@Override
public Set<InputStream> findResources(String location) throws Exception {
    Set<KeyValueHolder<String, InputStream>> answer = new LinkedHashSet<>();
    doFindResources(location, answer);
    return answer.stream().map(KeyValueHolder::getValue).collect(Collectors.toSet());
}




There are two issues here:
1. findResourceNames leaks resources as the InpuStreams found by doFindResources are never closed.  
2. is is not possible to correlate an InputStream with the related resource name which would be useful for CAMEL-15560


I'd propose to refactor this interface to something like:




Map<String, ThrowingSupplier<InputStream>> findResources();

default Collection<String> findResourceNames()  throws Exception {
    return findResources().keySet():
}

default Collection<InputStream> findResourceStreams() throws Exception {
    Collection<ThrowingSupplier<InputStream>> values = findResources().values();
    List<InputStream> answer = new ArrayList(values.size());
    for (ThrowingSupplier<InputStream> supplier : values) {
        streams.add(supplier.get());
    }

    return answer;
}","lb:1612170795:2021-02-01T17:13:15.221+0000:1612170818:2021-02-01T17:13:38.203+0000:[~davsclaus], [~acosentino] what do you think ?
davsclaus:1612172145:2021-02-01T17:35:45.646+0000:1612172145:2021-02-01T17:35:45.646+0000:Yeah that is better."
0,CAMEL-16096,Improvement,Major,None,3.8.0,"
None
",Resolved,Won't Fix,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-27 15:54:07+00:00,2021-02-01 13:52:12+00:00,"The generated converter for string -> type via the spring boot tooling for -starter JARs support # and #bean: lookup.


But we can add support for #class and #type like you can do in camel-main.",davsclaus:1612158732:2021-02-01T13:52:12.421+0000:1612158732:2021-02-01T13:52:12.421+0000:Lets keep this spring boot style
0,CAMEL-16095,Improvement,Minor,3.7.0,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Jan Schulze,0,3,2021-01-27 15:21:07+00:00,2021-02-01 08:06:25+00:00,"Component camel-ssh is not working in Karaf 4.3.0, because Karaf upgraded to SSHD 2.x. This results in the stack trace below when using Camel to write a file via SSH. A discussion about the issue can be found at: http://camel.465427.n5.nabble.com/Component-quot-camel-ssh-quot-broken-NoSuchMethodError-ConnectFuture-getSession-td5904212.html


Stack Trace:


org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[F2205BFA0B31B1C-0000000000000000]
{{ at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:45) ~[!/:3.7.1]}}
{{ at org.apache.camel.support.DefaultExchange.setException(DefaultExchange.java:425) ~[!/:3.7.1]}}
{{ at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:69) ~[!/:3.7.1]}}
{{ at org.apache.camel.processor.SendProcessor.lambda$process$2(SendProcessor.java:188) ~[!/:3.7.1]}}
{{ at org.apache.camel.support.cache.DefaultProducerCache.doInAsyncProducer(DefaultProducerCache.java:317) ~[!/:3.7.1]}}
{{ at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:187) ~[!/:3.7.1]}}
{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:714) [!/:3.7.1]}}
{{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:623) [!/:3.7.1]}}
{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) [!/:3.7.1]}}
{{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) [!/:3.7.1]}}
{{ at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) [!/:3.7.1]}}
{{ at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:312) [!/:3.7.1]}}
{{ at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:207) [!/:3.7.1]}}
{{ at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76) [!/:3.7.1]}}
{{ at java.util.TimerThread.mainLoop(Timer.java:556) [?:?]}}
{{ at java.util.TimerThread.run(Timer.java:506) [?:?]}}
Caused by: java.lang.NoSuchMethodError: 'org.apache.sshd.client.session.ClientSession org.apache.sshd.client.future.ConnectFuture.getSession()'
{{ at org.apache.camel.component.ssh.SshHelper.sendExecCommand(SshHelper.java:84) ~[?:?]}}
{{ at org.apache.camel.component.ssh.SshProducer.process(SshProducer.java:74) ~[?:?]}}
{{ at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66) ~[!/:3.7.1]}}
{{ ... 13 more}}",davsclaus:1612137985:2021-02-01T08:06:25.568+0000:1612137985:2021-02-01T08:06:25.568+0000:Upgraded to SSHD 2.5
0,CAMEL-16094,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Claus Ibsen,1,2,2021-01-27 14:48:53+00:00,2021-02-09 19:04:54+00:00,"Add an SPI interface to plugin a connection factory, so users can choose different implementations. 


This is what other component would do like messaging components.


Then end users can build pooling or shared connection factories or whatnot.","pla:1611740862:2021-01-27T17:47:42.988+0000:1611740916:2021-01-27T17:48:36.796+0000:Sounds great. For my use case it would be good when the connection pool can have something like the clientId from the JMS component. Because i have to define which endpoints can share an connection.

 

What do you think. When is this issue solved? Or should i start the task?
davsclaus:1611749424:2021-01-27T20:10:24.771+0000:1611749424:2021-01-27T20:10:24.771+0000:Philipp, you are welcome to start. 

Yeah a client id is a good idea.
If the connection cannot be used concurrently, then we would need to use commons-pool which can handle the pooling, otherwise if the connection can be used by multiple threads then its fine as-is. Usually a connection factory may allow to reuse concurrently a connection, but not something in the form of a client session. Not sure what the concepts are with milo
pla:1612092622:2021-01-31T19:30:22.247+0000:1612092925:2021-01-31T19:35:25.725+0000:I am not sure if a connection pool is the right pattern for my use case. What i want is a cache for connections. Because eclipse-milo (respectively OPC-UA) supports [subscription |https://github.com/eclipse/milo/blob/master/milo-examples/client-examples/src/main/java/org/eclipse/milo/examples/client/SubscriptionExample.java] on a OPC-UA Node value. So for my use case i have multiple subscriptions (round about 100) which can use the same connection. The follow code shows the routes in my application:

 
{code:java}
from(""milo-client:opc.tcp://localhost:4344?node=RAW(nsu=urn:foo:bar;s=item-1)""
// ...
from(""milo-client:opc.tcp://localhost:4344?node=RAW(nsu=urn:foo:bar;s=item-2)""
// ..
from(""milo-client:opc.tcp://localhost:4345?node=RAW(nsu=urn:foo:bar;s=item-3)""{code}
In the example above i would have two connections. One connection per server.

So my suggestion would be to define a new SPI."
0,CAMEL-16093,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-27 14:01:17+00:00,2022-01-21 19:19:41+00:00,See CAMEL-16078,
0,CAMEL-16092,Bug,Minor,3.7.1,3.8.0,"
None
",Closed,Fixed,3.8.0,Unassigned,Mark Andreev,0,1,2021-01-27 12:02:04+00:00,2021-01-29 15:53:12+00:00,"After message was consumed from Azure Storage Queue camel-azure-storage-queue add addOnCompletion trigger that delete message after all. If we want to download file in this route with Azure Storage Blob we will lose MessageId & PopReceipt header. Without this headers we can not remove message from queue.


Known workaround is download file in new exchange using producerTemplate. 


 


My case: get notification about new file using Azure Storage Queue and download this file with Azure Storage Blob.",
0,CAMEL-16091,Bug,Major,3.7.1,"3.7.2, 3.8.0","
None
",Resolved,Fixed,"3.7.2, 3.8.0",Claus Ibsen,Michał Ostrowski,0,2,2021-01-27 11:53:07+00:00,2021-01-30 15:12:10+00:00,"NettyHttpProducer depends on onCompletion synchronization do release allocated buffer. However content enricher could create exchanges without UnitOfWork. Here is example unit test to reproduce issue:


EnricherIssueTest.java

public class EnricherIssueTest extends CamelTestSupport {

    @Test
    public void leakTest() {
        ResourceLeakDetector.setLevel(Level.PARANOID);
        for (int i = 0; i < 10; ++i) {
            template.requestBody(""direct:outer"", ""input"", String.class);
        }
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                ResourceLeakDetector.setLevel(Level.PARANOID);

                final int port = AvailablePortFinder.getNextAvailable();

                from(""netty-http:http://localhost:"" + port + ""/test"")
                    .transform().simple(""${body}"");

                from(""direct:outer"")
                    .enrich(""netty-http:http://localhost:""+ port + ""/test?disconnect=true"",
                        AggregationStrategies.string(), false, false);
            }
        };
    }
}




Setting shareUnitOfWork=true on enrich() causes snippet to behave correctly.
 I'm not sure where is the bug. Does Enricher is allowed to create exchanges without UOW? Maybe org.apache.camel.component.netty.http.NettyHttpProducer should create UOW if none is available? Or maybe my usage is wrong?",davsclaus:1611989562:2021-01-30T14:52:42.012+0000:1611989562:2021-01-30T14:52:42.012+0000:Thanks for reporting. No we should make the enricher ensure this work out of the box. Thanks for the unit test that reproduces this.
0,CAMEL-16090,Task,Minor,3.7.1,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Alexander Zobkov,0,2,2021-01-27 06:50:59+00:00,2021-01-30 21:12:31+00:00,"When trying to download https://repo1.maven.org/maven2/org/apache/camel/camel-core-xml/3.7.1/camel-core-xml-3.7.1-sources.jar, the server responses with ""404 Not Found"". 


This blocks IDEs to download and display sources.


This failures builds of projects what includes sources in their distribution archives/packages.


Other artifacts for camel-core-xml seem ok at the Maven central.


The same source artifact seems ok at the Apache maven repo:


https://repository.apache.org/content/repositories/releases/org/apache/camel/camel-core-xml/3.7.1/camel-core-xml-3.7.1-sources.jar","davsclaus:1611701617:2021-01-27T06:53:37.833+0000:1611701617:2021-01-27T06:53:37.833+0000:Its a maven central issue - try get in touch with them.
davsclaus:1611970528:2021-01-30T09:35:28.674+0000:1611970528:2021-01-30T09:35:28.674+0000:The JAR can now be downloaded
alexanderz:1612012351:2021-01-30T21:12:31.425+0000:1612012351:2021-01-30T21:12:31.425+0000:!image-2021-01-31-00-12-06-829.png!"
0,CAMEL-16089,Task,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Andrea Cosentino,0,1,2021-01-27 06:42:13+00:00,2021-02-01 14:11:55+00:00,No Desc,
0,CAMEL-16088,New Feature,Major,None,3.12.0,"
None
",Resolved,Fixed,3.12.0,Jean-Baptiste Onofré,Andrea Cosentino,0,2,2021-01-27 06:05:16+00:00,2021-09-26 17:39:08+00:00,No Desc,jbonofre:1627679057:2021-07-31T05:04:17.882+0000:1627679057:2021-07-31T05:04:17.882+0000:The bundle is now available.
0,CAMEL-16087,Task,Major,None,3.8.0,"
None
",Closed,Fixed,3.8.0,Omar Al-Safi,Andrea Cosentino,0,1,2021-01-27 06:04:30+00:00,2021-01-27 12:50:13+00:00,No Desc,
0,CAMEL-16086,Bug,Minor,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Jeremy Ross,Jesse Sightler,0,4,2021-01-26 22:42:36+00:00,2021-03-17 17:07:36+00:00,"https://github.com/apache/camel/blob/ae2c79dcd64424acc82a29c9a46620809ea6414c/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/processor/CompositeApiProcessor.java#L251https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/processor/CompositeApiProcessor.java#L251


 


This requires the SOBJECT_EXT_ID_NAME, but this should not be required. SFDC Documentation: https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_composite.htm


In our case, we are using platform events, and upsert ids would not make sense for us.


 


Also this line is requiring a COMPOSITE_METHOD: https://github.com/apache/camel/blob/ae2c79dcd64424acc82a29c9a46620809ea6414c/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/processor/CompositeApiProcessor.java#L252


 


This seems unnecessary, as it is already defaulted to POST in DefaultCompositeApiClient: https://github.com/apache/camel/blob/ae2c79dcd64424acc82a29c9a46620809ea6414c/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/DefaultCompositeApiClient.java#L106","jsightle@redhat.com:1611742552:2021-01-27T18:15:52.410+0000:1611742573:2021-01-27T18:16:13.278+0000:I'm not sure that this is really minor. It makes Composite operations involving platform-events impossible in raw mode, unless I am overlooking some workaround.
davsclaus:1612327640:2021-02-03T12:47:20.198+0000:1612327640:2021-02-03T12:47:20.198+0000:[~jeremyross] wonder if you have any thoughts on this ticket?
jeremyross:1612515488:2021-02-05T16:58:08.649+0000:1612515488:2021-02-05T16:58:08.649+0000:I'm also a little confused why these are required. My understanding is that External Id field (if applicable), SObject, and http method for each sub-request should all be provided *inside* the raw payload. 

The http method for the actual/parent HTTP composite resource is always POST, so again, I don't see a reason to provide this.

[~jsightle@redhat.com] Do we have the same understanding?
jsightle@redhat.com:1612516482:2021-02-05T17:14:42.963+0000:1612516482:2021-02-05T17:14:42.963+0000:[~jeremyross] - I think so. I believe that external ID becomes part of the URL (if present), but it is an optional part of the URL and should not be required IMO. In my case, I have no valid value to supply for this.

I think POST is the common case, and IMO should be the default. It sounds like a composite GET is also possible, though I've never used it.
jawwad124:1615860065:2021-03-16T10:01:05.158+0000:1615860065:2021-03-16T10:01:05.158+0000:We should keep the support optional instead of removing it altogether. Because it's pretty common to use an external id when you're moving data from external systems.
jeremyross:1615876951:2021-03-16T14:42:31.306+0000:1615876951:2021-03-16T14:42:31.306+0000:[~jawwad124] Inside the composite request, each sub-request specifies the http method, including the use of an external id if applicable. E.g.:

{code:json}
{
  ""compositeRequest"": [
    {
      ""method"": ""PATCH"",
      ""url"": ""services/data/v51.0/sobjects/Account/customExtIdField__c/11999"",
      ""referenceId"": ""refAccount"",
      ""body"": {
        ""Name"": ""Sample Account""
      }
    }
  ]
}
{code}

jawwad124:1615877275:2021-03-16T14:47:55.552+0000:1615878702:2021-03-16T15:11:42.458+0000:[~jeremyross] I am using rawPayload to submit sObject Composite Collection Requests. I don't think I can submit its external id in body. On v3.7 it works because external id is part of URL.

[https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobjects_collections_upsert.htm]
jeremyross:1615879089:2021-03-16T15:18:09.896+0000:1615879089:2021-03-16T15:18:09.896+0000:[~jawwad124] can you provide an example of how you're using the salesforce producer for this case? Just the .to() call would help to see.
jawwad124:1615883519:2021-03-16T16:31:59.140+0000:1615883519:2021-03-16T16:31:59.140+0000:.process(this::toJson)
.to(""salesforce:composite?rawPayload=true&compositeMethod=PATCH"")

With SObjectName and External Id field name in headers.

It builds the URL in the DefaultCompositeApi client and the payload get submitted fine.
jeremyross:1615890967:2021-03-16T18:36:07.149+0000:1615890967:2021-03-16T18:36:07.149+0000:[~jawwad124] It looks like the {{composite}} operation plus {{rawPayload=true}} was targeting the Composite Collections API. This would be a bug. In order to have this functionality, I could create a {{composite-collections}} operation which would allow you to use a raw payload. Would that work?

jawwad124:1615898411:2021-03-16T20:40:11.655+0000:1615898468:2021-03-16T20:41:08.010+0000:[~jeremyross]  Yes, that would be great. Composite collections API is great as it can hold up to 200 records so really helps to stay within API limits."
0,CAMEL-16085,Bug,Major,3.6.0,,"
None
",Resolved,Invalid,None,Unassigned,Philip,0,2,2021-01-26 22:32:18+00:00,2021-02-03 12:48:00+00:00,"After enabling authentication on the Apache http (/webdav) server, I started getting 401 http responses. After analysing the http traffic, I saw there was no authorization header that was sent.


My original configuration was restconfiguration() with some dynamic to rest endpoints (put, delete), using the http component, running on quarkus (camel quarkus 1.4.0). 
After a lot of searching, trying and double checking, I just added the header myself before the to( instead of using authmethod, authuser... In the options or http_query
.
I know there are test cases, but I cannot find an error on my side. Camel even replaced the password with xxxxxx in the error message: it knows that it is the password.","davsclaus:1611697401:2021-01-27T05:43:21.355+0000:1611697401:2021-01-27T05:43:21.355+0000:Can you provide more details such as some code that shows what you do.
davsclaus:1612327680:2021-02-03T12:48:00.813+0000:1612327680:2021-02-03T12:48:00.813+0000:Okay this is wrong JIRA as its about Apache HTTP server (not Camel)"
0,CAMEL-16084,Bug,Major,3.7.1,3.8.0,"
None
",Resolved,Information Provided,3.8.0,Jeremy Ross,Jeremy Ross,0,3,2021-01-26 21:54:12+00:00,2021-03-29 13:46:35+00:00,"When using a salesforce operation after an aggregator,  control seems to return to the aggregate caller immediately instead of proceeding with processors downstream from the salesforce operation. This is the behavior I'd expect if using the aggregator with parallelProcessing.


I believe this is longstanding behavior, however with the removal of the `synchronous` option from the salesforce component (CAMEL-14138), we've removed a workaround to this issue. 


I'm seeing the same behavior with a salesforce operation via a wiretap with a threadpool with poolsize, maxsize and queuesize of 1, which should effectively behave in a synchronous manner.


Test case: https://gist.github.com/jeremyross/4d7d14a33452edf236faefda77ad3e3d","jeremyross:1611669365:2021-01-26T21:56:05.295+0000:1611669365:2021-01-26T21:56:05.295+0000:[~zregvart] would like your thoughts, please.
davsclaus:1611697277:2021-01-27T05:41:17.946+0000:1611697277:2021-01-27T05:41:17.946+0000:No this is correct, and aggregator is a 2 leg operator. Whatever comes out of the aggregator is completely separated from the incoming thread, regardless of parallel processing, number of message in the batch etc.

Same with wiretap etc.
zregvart:1611720218:2021-01-27T12:03:38.917+0000:1611720260:2021-01-27T12:04:20.722+0000:Not 100% sure what the problem is, but I played around with a simple route with split/aggregation without {{synchronous}} seems to work okay with Salesforce. This is the route:
{code:java}
import static java.util.Arrays.asList;
import static org.apache.camel.builder.AggregationStrategies.groupedBody;

from(""direct:start"")
    .split(body(), groupedBody())
        .to(""salesforce:getSObject?sObjectName=Contact&rawPayload=true"")
        .transform().jsonpath(""$.FirstName"")
        .log(""individual: ${body}"")
    .end()
    .log(""aggregated: ${body[0]} ${body[1]} ${body[2]}""); // just to get a nicer output, GroupedExchangeList overrides toString
{code}
I'm triggering the route with a list of IDs:
{code:java}
producer.sendBody(""direct:start"", asList(""0030Y000002vBoFQAU"", ""0030Y000002vBoGQAU"", ""0030Y000002vBoHQAU"")){code}
This gives me:
{code:java}
2021-01-27 13:02:02,425 INFO  [SalesforceHttpClient@156b88f5-20] route1: individual: Rose
2021-01-27 13:02:02,503 INFO  [SalesforceHttpClient@156b88f5-20] route1: individual: Sean
2021-01-27 13:02:02,587 INFO  [SalesforceHttpClient@156b88f5-19] route1: individual: Jack
2021-01-27 13:02:02,626 INFO  [SalesforceHttpClient@156b88f5-19] route1: aggregated: Rose Sean Jack
{code}
jeremyross:1611741778:2021-01-27T18:02:58.501+0000:1611741778:2021-01-27T18:02:58.501+0000:[~davsclaus] If the aggregator output is separate from the incoming thread, what effect does parallelProcessing have on it? 

I've also noticed this doesn't seem to be a problem with non-{{AsyncProducer}} components, such as http. 

Here's my real-world use case. I'm reading a CSV file of tens of thousands of records, aggregating them in to batches of 25, then sending the batch to salesforce. Because reading the CSV file is fast, and the aggregator is operating asynchronously, *hundreds* of batches are being sent to salesforce, all in-flight at once, before a single response is received. HttpClient hits its request limits, and I'm sure salesforce doesn't appreciate getting slammed. What's the best way to operate in a more synchronous fashion, or at least throttle down the number of in-flight requests? 




davsclaus:1611797089:2021-01-28T09:24:49.660+0000:1611797089:2021-01-28T09:24:49.660+0000:Okay for such use case you may consider

a)
splitting up into 2 legs (routes) where you can store the aggregated into a single file

read CSV
split CSV
aggreagate 
save aggregate to disk

read aggregate from disk
to salesforce

Then the file reader is single threaded and wont slammer salesforce

Or b)

Use a seda queue where you can limit the size of the queue, and make the producer block if full to avoid pushing too many pending tasks on the internal seda queue while waiting for the consumer to catch up,

Or c)

We introduce synchronous=true|false on the direct component, then we can force it to use sync mode which would automatic block in this situation.

davsclaus:1611797274:2021-01-28T09:27:54.930+0000:1611797274:2021-01-28T09:27:54.930+0000:I created a ticket about (c). You are welcome to work on that and try it out

from csv
  aggregate
    to foo ? synchronous = true

from direct foo
  to salesforce

Then its a bit like the ""seda"" (staged event driven) which is a good design practice. Separating steps (concerns)

davsclaus:1611798289:2021-01-28T09:44:49.629+0000:1611798289:2021-01-28T09:44:49.629+0000:btw there is also throttler eip

d)
however the throttler is based on max X per time. And you are more max X concurrently.

But we can look at to see if we can improve the throttler to support X inflights instead. Its almost the same, but the problem is we need to track when an exchange is done inflight, and where the bounder of the throttler is.

There is the throttling inflight route policy which can do this per route, btw that can suspend/resume depending on water marks

jeremyross:1611823769:2021-01-28T16:49:29.435+0000:1611823769:2021-01-28T16:49:29.435+0000:Thanks Claus. B seems viable for my case, and I think C would be nice long-term also. However, when using seda to achieve a synchronous effect:
{code:java}
from(""seda:query?size=1&blockWhenFull=true"")
{code}

I get: {{Cannot use existing queue seda://query as the existing queue size 1000 does not match given queue size 1}}

I haven't dug into this yet. I may have to set the queue size on the component at the global level. Not sure why the {{size}} query option doesn't work.

I still have lingering questions:
 * Why is Aggregate operating as if parallelProcessing=true? Should the docs mention that the out leg of aggregate is always asynchronous?
 * This was one of my attempted workarounds. It also sends unlimited number of concurrent requests to salesforce. Shouldn't it only send one at a time?
{code:java}
.wireTap(""direct:sendToSalesforce"").executorService(
 new ThreadPoolBuilder(context).maxPoolSize(1).maxQueueSize(1).poolSize(1).build()); {code}

 
davsclaus:1611828893:2021-01-28T18:14:53.344+0000:1611828893:2021-01-28T18:14:53.344+0000:You need to set size=1 in the producer, as its the 1st one that ""discovers"" this endpoint and creates the queue.

So add to(seda:foo?size=1)

Yes we can maybe make this smarter and ""if there are no other seda endpoints that use a different size, then we use size=1) but so far it was first one to be created controls the size.
davsclaus:1611828983:2021-01-28T18:16:23.844+0000:1611828983:2021-01-28T18:16:23.844+0000:The wire tap will use caller runs if its full, so it will use the current thread, you can configure it to not do that.
jeremyross:1611836934:2021-01-28T20:28:54.396+0000:1611855575:2021-01-29T01:39:35.108+0000:[~davsclaus] the wiretap is still firing off hundreds of requests to salesforce at once. This might have something to do with salesforce being an AsyncProducer. 

I'm attaching an example of using a wiretap with a threadpool of 1. You can see that each wiretap invocation alternates between the main thread and the 1 thread from the threadpool. All 100 requests are sent off within 50ms. Then about 500ms later, all 100 results come back in.

[^wiretap-results.txt]

Again, this issue does not exist with, e.g., the http component. The requests and responses interleave exactly as you'd expect. Not sure if this is the difference between a Producer (http) and AsyncProducer (salesforce), or something else.

 

 
davsclaus:1612326710:2021-02-03T12:31:50.310+0000:1612326755:2021-02-03T12:32:35.833+0000:the camel-http component is using blocking (synchronous) in its http client so that is why its ""waiting for the reply"" and therefore has lower scalability.

If you use camel-vertx-http then its non blocking.
davsclaus:1612337981:2021-02-03T15:39:41.026+0000:1612337981:2021-02-03T15:39:41.026+0000:> Why is Aggregate operating as if parallelProcessing=true? Should the docs mention that the out leg of aggregate is always asynchronous?

Oh yeah sorry that depends. It may be using the current thread if the aggregator is completing the group, and you have parallel = false.
jeremyross:1612863003:2021-02-09T17:30:03.943+0000:1612863028:2021-02-09T17:30:28.176+0000:[~davsclaus] My feeling is this is problematic behavior, and requires a workaround that requires users to deal with threading issues when they really shouldn't have to. But if you don't think there's an issue here, I'll close this. 
davsclaus:1612929833:2021-02-10T12:03:53.426+0000:1612929833:2021-02-10T12:03:53.426+0000:Even if synchronous=true was there, then concurrent threads would be able to overload your SLA with salesforce, if you had the Camel route to be callable from other routes, etc. But you just happen to be that you had a single threaded consumer that by synchronous=true gets blocked waiting for the salesforce reply, before continuing. 

The better solution is to use EIP patterns, about throttling / rate-limiting.
Where you can specify that there should only be at most 1 (or what number you can configure) in-flight message to this endpoint at any given time.
Unfortunately the current throttler EIP is based on timed window. So you can for example can say 1 message per 10 sec. But in other use-cases you dont care about the time window, but just want to say ""at most X request at any given time"". So for this we have CAMEL-16099

And in Camel 3.8 onwards you can leverage the direct component to make it synchronous (its about direct method invocations like in Java that are synchronous - or async with its CompletableFuture API etc) so there is some resembles  there. 

from x
   split xxx
      to direct:rate

from (""direct:rate?synchronous=true"")
   .to(""salesforce...."")

But for Camel 3.9 with the rate in throttler (or if we develoed as a new EIP term - rate)

from xxxx
   split xxxx
     rate 1 
       to salesforce
    // end rate
   /// end split

Or you can put the rate on top of the route

from xxxx
   rate 1
    split xxx
     to sales



davsclaus:1612930816:2021-02-10T12:20:16.218+0000:1612930816:2021-02-10T12:20:16.218+0000:> .wireTap(""direct:sendToSalesforce"").executorService(
 new ThreadPoolBuilder(context).maxPoolSize(1).maxQueueSize(1).poolSize(1).build()); 

You can get concurrent access because the wiretap rejection policy is CallerRuns by default. So it will just use current thread to call the direct endpoint.
There is no rejection policy from JDK thread pools that has a ""block"" or ""timeout"". And we do not have any custom implementation for that.

jeremyross:1612944781:2021-02-10T16:13:01.003+0000:1612944781:2021-02-10T16:13:01.003+0000:[~davsclaus] Thanks for the explanation. I'd like to clarify that while playing nice with salesforce (or any API) is a concern, the number of threads that get spun up is absurd, and starts hitting Jetty HttpClient limits:

{code}
java.util.concurrent.RejectedExecutionException: Max requests queued per destination 1024 exceeded for HttpDestination[https://full.my.salesforce.com]@18c0722d,queue=1024,pool=DuplexConnectionPool@164eaea8[c=0/64/64,a=64,i=0] 
{code}

So this really isn't about rate limiting. This is about a runaway integration process that brings itself down. I still can't wrap my head around why anything downstream from an aggregator runs in hyper parallel mode. 

Theoretically, I think the new synchronous property on the direct component should help. Per your suggestion, I tried SEDA, a la:

{code:java}
from(""seda:sendSalesforceComposite?concurrentConsumers=1"")
...
.to(""seda:sendSalesforceComposite?blockWhenFull=true"")
{code}
 
But I get the same result. Is there some other option I should set?

davsclaus:1616981299:2021-03-29T09:28:19.209+0000:1616981299:2021-03-29T09:28:19.209+0000:Jeremy did you get close to something you can use?

The throttler with max-inflight is a more general and ideal solution. But I can also see that having to use sub routes with seda/direct to only have 1 thread per salesfroce can be annoying.
jeremyross:1616996715:2021-03-29T13:45:15.736+0000:1616996715:2021-03-29T13:45:15.736+0000:I think the direct synchronous option will work. I'm still stuck on 3.7.x though since the salesforce components in 3.8.0 and 3.9.0 are borked."
0,CAMEL-16083,Bug,Major,3.7.1,"3.7.2, 3.8.0","
None
",Resolved,Fixed,"3.7.2, 3.8.0",Claus Ibsen,Bob Paulin,0,1,2021-01-26 21:12:43+00:00,2021-02-05 10:09:38+00:00,"After upgrading from Camel 3.7.0 to 3.7.1 we noticed a regression where routes that had onCompletion defined in the route scope no longer fired.  EX


 




    from(""direct:start"")
        .transform(constant(""a""))
        .to(""mock:a"")
        .to(""direct:sub"")
        .transform(constant(""c""))
        .to(""mock:c"");
 
    from(""direct:sub"")
         .transform(constant(""b""))
         .to(""mock:b"")
         .onCompletion()
	     .to(""mock:end"")
	 .end(); 



 


In following the change made in CAMEL-13553 the onCompletion does not fire since the routeId of the direct:sub route where the onCompletion is scoped does not match the route id of direct:start where the onCompletion fires. 


This works fine if I move the onCompletion defintion into direct:start.


While on one hand this breaks our existing code it also makes me think it might just be a bad practice to define an AfterConsumerOnCompletion in a sub route.  So perhaps this should not be supported? If it should be supported I think we'll need to evaluate the routeId compare in the after route so that we do the compare in the same scope as the definition.  Open to other suggestions.  Will provide a PR with a potential approach to the supported use case.",bob:1611671131:2021-01-26T22:25:31.652+0000:1611671131:2021-01-26T22:25:31.652+0000:The attached PR is one approach that could address this.  I think adding the array list may be a bit heavy but I'm unsure if there's a better way to track multiple routeScope onCompletions.  Happy to discuss other options!
0,CAMEL-16082,Bug,Major,"3.7.0, 3.7.1","3.7.2, 3.8.0","
None
",Resolved,Fixed,"3.7.2, 3.8.0",Claus Ibsen,Frank Wippermüller,0,2,2021-01-26 15:48:17+00:00,2021-01-27 10:24:16+00:00,"When building a route including a choice with a single when() and without an otherwise(), the first SimpleExpression-when() is always satisfied:




from(""direct:start"")
    .choice()
        .when().simple(expression)
		       // always routed to
		       .to(whenTarget)
    .end()
    .to(end)




An empty otherwise() restores choice logic:




from(""direct:start"")
    .choice()
        .when().simple(expression).to(whenTarget)
        .otherwise()
    .end()
    .to(end)




I included a simple Test-Case that fails with Camel 3.7.x and passes with Camel 3.6.x.","davsclaus:1611707946:2021-01-27T08:39:06.313+0000:1611707946:2021-01-27T08:39:06.313+0000:If you do    .when(simple(expression))
eg put simple inside when then it works
davsclaus:1611714256:2021-01-27T10:24:16.720+0000:1611714256:2021-01-27T10:24:16.720+0000:Thanks for reporting and the test case"
0,CAMEL-16081,Improvement,Major,None,3.8.0,"
None
",Resolved,Won't Fix,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-26 13:22:42+00:00,2021-01-27 06:48:13+00:00,"BaseMainSupport at 


Object bean = PropertyBindingSupport.resolveBean(camelContext, name, value);


This is when you define a bean



# configure beans
camel.beans.myBean = #class:org.apache.camel.example.MyBean
camel.beans.myBean.hi = Hello



Then a new instance is created but it does post process that does reflection injection. That should not happen as the bean is configured afterwards via configurer (if possible).","davsclaus:1611701044:2021-01-27T06:44:04.946+0000:1611701044:2021-01-27T06:44:04.946+0000:Ah okay you can turn this off with, which is potentially better as its then disabled generally

camel.main.bean-post-processor-enabled = false"
0,CAMEL-16080,Task,Minor,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2021-01-26 11:07:26+00:00,2021-01-28 13:39:53+00:00,No Desc,
0,CAMEL-16079,Bug,Minor,"3.7.0, 3.7.1, 3.7.2, 3.8.0","3.7.3, 3.9.0","
None
",Resolved,Fixed,"3.7.3, 3.9.0",Andrea Cosentino,Aurore Weber,0,4,2021-01-25 15:46:30+00:00,2021-02-11 08:23:28+00:00,"When configuring an AWS SNS that is a fifo through the topic, the code that identify it as FIFO does not pick up the information, and so does not provide the provide the required attribute messageGroupId.


 


Issues is in file https://github.com/apache/camel/blob/master/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Configuration.java 


 




boolean isFifoTopic() {        
 return topicName.endsWith("".fifo"");    
}




Likely this would fix it as the topicName is null, but the topicArn is not null whether it has been configured by topic or by arn : 




boolean isFifoTopic() { 
 return topicArn.endsWith("".fifo"") ; 
}","aurorew:1611560851:2021-01-25T15:47:31.709+0000:1611560851:2021-01-25T15:47:31.709+0000:It was introduced when the support of SNS FIFO queue started
acosentino:1611561103:2021-01-25T15:51:43.473+0000:1611561103:2021-01-25T15:51:43.473+0000:Thanks, I think we need to address this in SQS too, maybe. I'll fix this, if you're not creating a PR already
aurorew:1611561738:2021-01-25T16:02:18.499+0000:1611561905:2021-01-25T16:05:05.148+0000:Was trying but unsure on which branch if should go to as I don't know the project branching / forking / good practise. I believe you will be quicker than me on this. 

 

-FIFO seemed to work on SQS though as it was my first use case and it was successfully working.- (I was not using the aws-sqs2 conponent but the aws-sqs one)
Antauri:1612955866:2021-02-10T19:17:46.077+0000:1612955880:2021-02-10T19:18:00.334+0000:Not sure it's fixed in 3.7.2 as we've just tested this today.

 
{code:java}
java.lang.NullPointerException: null
	at org.apache.camel.component.aws2.sns.Sns2Configuration.isFifoTopic(Sns2Configuration.java:354) ~[camel-aws2-sns-3.7.2.jar:3.7.2]
	at org.apache.camel.component.aws2.sns.Sns2Producer.configureFifoAttributes(Sns2Producer.java:138) ~[camel-aws2-sns-3.7.2.jar:3.7.2]
	at org.apache.camel.component.aws2.sns.Sns2Producer.process(Sns2Producer.java:65) ~[camel-aws2-sns-3.7.2.jar:3.7.2]
	at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66) ~[camel-support-3.7.2.jar:3.7.2]
{code}
Here's how we declare the SNS endpoint.
{code:java}
  fromF (direct (this))
    .routeId (currentRoute)
    .process (this::notifyViaSns)
    .toF (""log:%s?level=INFO"", currentRoute)
    .to (""aws2-sns://{{output.sns-topic}}?amazonSNSClient=#snsClient"");{code}
Is there a test that can confirm this works in 3.7.2? Could be an idea to pass it via testcontainers (with localstack). We're a bit blocked going to production by this and may have to revert to 3.6.x. Somehow feels like a regression.

This happens at run-time (the application starts). If indeed the topicName is null, maybe the component initialization should fail? (given the topic is part of the path). Though this may hinder dynamic endpoints ...

 
acosentino:1612956369:2021-02-10T19:26:09.942+0000:1612956369:2021-02-10T19:26:09.942+0000:Can you explain why the topic name should be null? It's not really clear.
Antauri:1612956440:2021-02-10T19:27:20.117+0000:1612957812:2021-02-10T19:50:12.775+0000:Here's a full stack:
{code:java}
java.lang.NullPointerException: nulljava.lang.NullPointerException: null at org.apache.camel.component.aws2.sns.Sns2Configuration.isFifoTopic(Sns2Configuration.java:354) ~[camel-aws2-sns-3.7.2.jar:3.7.2] at org.apache.camel.component.aws2.sns.Sns2Producer.configureFifoAttributes(Sns2Producer.java:138) ~[camel-aws2-sns-3.7.2.jar:3.7.2] at org.apache.camel.component.aws2.sns.Sns2Producer.process(Sns2Producer.java:65) ~[camel-aws2-sns-3.7.2.jar:3.7.2] at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66) ~[camel-support-3.7.2.jar:3.7.2] at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:169) ~[camel-core-processor-3.7.2.jar:3.7.2] at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395) ~[camel-core-processor-3.7.2.jar:3.7.2] at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) [camel-base-engine-3.7.2.jar:3.7.2] at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) [camel-base-engine-3.7.2.jar:3.7.2] at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) [camel-core-processor-3.7.2.jar:3.7.2] at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:312) [camel-base-engine-3.7.2.jar:3.7.2] at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:207) [camel-timer-3.7.2.jar:3.7.2] at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76) [camel-timer-3.7.2.jar:3.7.2] at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_275] at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_275]
{code}
Here's the shortest code to reproduce it:
{code:java}
        from (""timer://runOnce?repeatCount=1&delay=2000"")
          .setBody (constant (""Not required, but added a body""))
          .to (""aws2-sns://arn:aws:sns:eu-west-1:123456789:somewhere-over-the-rainbow?amazonSNSClient=#snsClient"");
{code}
We are compiling against JDK8 and running on JDK8 as more information. For the moment until 3.7.3 or some other version is released with the bug-fix we'll try to re-configure the component/endpoint as an workaround and set the topicName/topicArn in the SnsConfiguration in the hope that it passes over the NPE. That or we revert to a pre 3.7 version, we'll see. Hopefully this will be a valid workaround, without the need to revert:
{code:java}
private final Sns2Component sns2Component; // Auto-wired
sns2Component.getConfiguration ().setTopicName/setTopicArn
{code}
acosentino:1612957952:2021-02-10T19:52:32.303+0000:1612957952:2021-02-10T19:52:32.303+0000:We need a guard on the check. My bad, my bad.
dogerzz:1612961335:2021-02-10T20:48:55.188+0000:1613003008:2021-02-11T08:23:28.702+0000:A valid workaround would be:
{code:java}
// code placeholder
Sns2Component sns2Component = camelContext.getComponent (""aws2-sns"",Sns2Component.class);
sns2Component.getConfiguration ().setTopicArn (""arn:aws:sns:eu-west-1:123456789"");
sns2Component.getConfiguration ().setTopicName (""somewhere-over-the-rainbow"");{code}
acosentino:1612996572:2021-02-11T06:36:12.353+0000:1612996572:2021-02-11T06:36:12.353+0000:Fixed with a check guard, will be in 3.9.0 and 3.7.3"
0,CAMEL-16078,Bug,Major,3.7.1,,"
None
",Resolved,Information Provided,None,Unassigned,Jeremy Ross,0,2,2021-01-25 15:18:48+00:00,2021-01-27 14:01:49+00:00,"In certain scenarios, it seems that IdempotentConsumer is allowing duplicate message to pass. In the test case below, with a cache size of 50, duplicate message within a few messages of each other are allowed to pass. 


Test case: https://gist.github.com/jeremyross/d76f658767b4f476f93a12f9067ed515","jeremyross:1611579962:2021-01-25T21:06:02.840+0000:1611579962:2021-01-25T21:06:02.840+0000:I believe Caffeine's Window TinyLfu algorithm is the culprit here. If I exclude camel-caffeine-lrucache, the SimpleLRUCache is used, which seems to have a strict policy of eldest entry is removed. Considering the importance of idempotency and ""once and only once"" semantics, this is a far more preferable algorithm, even if it's not designed for massive scale. 

Considering that Caffeine's LRU cache can drop entries almost as soon as they're added, I don't see this as an appropriate backing for MemoryIdempotencyRepository, unless perhaps if the use case is massive scale, and it's ok if some duplicate messages get through as long as performance is good. Overall, to me, this behavior violates the [Principle of Least Surprise|https://en.wikipedia.org/wiki/Principle_of_least_astonishment]. We might consider, if nothing else, documenting this behavior. Long term it may be better to find a backing that can truly support idempotency. Hoping others can weigh in as I haven't used this part of Camel much.

I'm also curious if excluding camel-caffeine-lrucache has any other side effects for other parts of camel.


davsclaus:1611726728:2021-01-27T13:52:08.811+0000:1611726728:2021-01-27T13:52:08.811+0000:Yeah Caffeine is not ideal for this use-case where a strict LRU order is required.

It was used for internal caches to keep the most ""active"" elements, and there its okay that its not 100% lru ordered

In the past we used a LRU implementation that then was requested to switch to caffeine by its author
https://issues.apache.org/jira/browse/CAMEL-8602

And this was also before we had our own implementation now with the DefaultLRUCache that uses JDK collections.
So I think we can deprecate caffeine and just use our default. 

The internal caches are really only used during startup/warmup and has less ""contention today"". In the past it was the endpoint registry that benefitted from concurrency to lookup endpoints. But we now keep known/static endpoints in a fixed registry so its not dynamic and dont need the LRU anymore."
0,CAMEL-16077,Bug,Major,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Tadayoshi Sato,Tadayoshi Sato,0,1,2021-01-25 06:07:42+00:00,2021-01-26 04:18:20+00:00,"camel-undertow ignores content-type specified by REST DSL produces (""application/json"") and always returns ""text/plain"" when the exchange body returned from the REST endpoint is null:




    <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
        <restConfiguration bindingMode=""auto"" component=""undertow""
            contextPath=""test"" host=""localhost"" port=""8005""/>
        <rest id=""rest-0b0215bd-f133-46f8-968c-4fe21ba4af4f"" path=""demo"">
            <get id=""get-1"" produces=""application/json"" uri=""/ping"">
                <description>direct:hello</description>
                <route>
                    <to uri=""direct:hello""/>
                </route>
            </get>
        </rest>
        <route id=""simple-route"">
            <from id=""_from1"" uri=""direct:hello""/>
            <setBody id=""_setBody1"">
                <simple>${null}</simple>
            </setBody>
            <log id=""route-log"" message="">>> ${body}""/>
        </route>
    </camelContext>




This behaviour doesn't align with camel-jetty & REST DSL or bare undertow server.",
0,CAMEL-16076,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-24 17:32:34+00:00,2021-01-29 14:17:05+00:00,"If you use supervised route controller (not default) then you dont get a nice route summary in the logs.


We should make this more informative ala the default route controller",
0,CAMEL-16075,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-23 18:02:49+00:00,2021-01-24 14:06:17+00:00,"All the loaded configurations are logged on startup which can be good to see what are in use. But in some situations you may want to not log this, or be quite on the logging output.",davsclaus:1611468377:2021-01-24T14:06:17.624+0000:1611468377:2021-01-24T14:06:17.624+0000:We already have autoConfigurationLogSummary
0,CAMEL-16074,Improvement,Major,None,None,"
None
",Resolved,Won't Do,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-23 13:35:00+00:00,2021-01-23 13:52:19+00:00,So you can skip fast events that are < 2 millis etc.,davsclaus:1611381139:2021-01-23T13:52:19.814+0000:1611381139:2021-01-23T13:52:19.814+0000:Flight recorder has its own timing so lets just leave it as-is - the JDK mission control can build in filtering.
0,CAMEL-16073,Improvement,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2021-01-23 10:00:24+00:00,2023-08-09 09:22:32+00:00,We should use negativeAck if exchange has exception after processing.,
0,CAMEL-16072,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-22 13:01:11+00:00,2021-01-29 11:12:03+00:00,"Lets see if we can not improve the summary log on startup of those routes. 
We have a nicer format with camel-main on the configurations it has detected and applied.","davsclaus:1611388792:2021-01-23T15:59:52.639+0000:1611888681:2021-01-29T10:51:21.073+0000:Adding a new option to configure logging level

- classic, default, brief, oneline, off

This should also affect shutdown as we can make that less verbose too depending on this level"
0,CAMEL-16071,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Javier Holguera,0,2,2021-01-22 11:37:30+00:00,2021-01-26 03:58:18+00:00,"The camel-kafka component instantiates Kafka client instances (e.g., KafkaConsumer and KafkaProducer) directly. This prevents users to leverage their own custom implementations for them. Kafka Streams library solved this issue a long time ago (see https://issues.apache.org/jira/browse/KAFKA-3616) adding the ability to pass a factory of Kafka clients to the Streams processor.


Steps for implementation:



Add a new `KafkaClientFactory` interface with methods to get instances of Kafka's `KafkaConsumer` and `KafkaProducer`.
Add a default implementation `DefaultKafkaClientFactory` that instantiates both as they are at the moment inside the Camel's `KafkaConsumer` and `KafkaProducer` (simply calling `new` with a `Properties` object).
Add a new 'KafkaClientFactory' configuration option that defaults to `DefaultKafkaClientFactory`.
Use this factory inside Camel's `KafkaConsumer` and `KafkaProducer` (instead of doing a `new` directly).","davsclaus:1611286813:2021-01-22T11:40:13.057+0000:1611286813:2021-01-22T11:40:13.057+0000:camel-vertx-kafka is the kafka component we priortize for the future, so please look at this component if it can be improved.
javierholguera:1611400735:2021-01-23T19:18:55.532+0000:1611400735:2021-01-23T19:18:55.532+0000:PR for `camel-vertx-kafka`: https://github.com/apache/camel/pull/4916
javierholguera:1611471607:2021-01-24T15:00:07.603+0000:1611471607:2021-01-24T15:00:07.603+0000:PR for `camel-kafka`: https://github.com/apache/camel/pull/4918
davsclaus:1611480262:2021-01-24T17:24:22.031+0000:1611480262:2021-01-24T17:24:22.031+0000:Thanks for the PRs"
0,CAMEL-16070,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-22 09:50:07+00:00,2021-02-01 09:17:33+00:00,"If you want to ""stop"" and ""start"" camel context on a Camel app, then use suspend/resume on the context.


There is some logic to call start again from old time, but it complicates the internal core. So its time to cleanup some bit there.


This can also help with optimizing for build/init optimizations with microservices / graal compiled et all.",
0,CAMEL-16069,Improvement,Minor,2.25.1,3.x,"
None
",Resolved,Not A Problem,3.x,Unassigned,François Loison,0,1,2021-01-22 07:40:03+00:00,2021-01-25 17:13:21+00:00,"SSL supports SSL session resume.


This feature saves a lot of time because SSL initialization (time consuming is skipped).


For details, please see : https://vincent.bernat.ch/en/blog/2011-ssl-session-reuse-rfc5077


I did a standalone test with Apache HttpClient having same version the one used in Camel 2.25.1 : it works.


But SSL session resuming fails with Camel.


Server Hello is rejected by Apache Web server.


Apache says : 


AH02255: Changed client verification type will force renegotiation


And then previous session is invalidated.


This problem doesn't occur in my standalone tester.


Resuming SSL sessions would increase drasticaly performance.","floison:1611565986:2021-01-25T17:13:06.925+0000:1611565986:2021-01-25T17:13:06.925+0000:Sorry, it's application related, not Camel related."
0,CAMEL-16068,Bug,Minor,3.7.0,"3.7.2, 3.8.0","
None
",Resolved,Fixed,"3.7.2, 3.8.0",Andrea Cosentino,fly,0,2,2021-01-21 11:54:58+00:00,2021-01-22 01:40:15+00:00,"Wrong code on line 119:


```


if (ase.awsErrorDetails().errorCode().equalsIgnoreCase(""404"")) 

{
 throw ase;
 }





 





Correct writing method:





```





if (!ase.awsErrorDetails().errorCode().equalsIgnoreCase(""404"")) {
 throw ase;
 }


There are similar bugs elsewhere","acosentino:1611201725:2021-01-21T12:02:05.227+0000:1611201725:2021-01-21T12:02:05.227+0000:Why do we have to throw the exception only in case the error code is different from 404? Can you please explain a bit better?
acosentino:1611201837:2021-01-21T12:03:57.017+0000:1611201837:2021-01-21T12:03:57.017+0000:Ah yeah, in the listBucket invocation while creating the endpont. Thank you for spotting this!
acosentino:1611201852:2021-01-21T12:04:12.994+0000:1611201852:2021-01-21T12:04:12.994+0000:Are you going to open a PR for this?
acosentino:1611207569:2021-01-21T13:39:29.533+0000:1611207569:2021-01-21T13:39:29.533+0000:Looking at this better, the problem is how we are looking for the error too, we need to look for ase.awsErrorDetails().sdkHttpResponse().statusCode() the getCode method return NoSuchBucket, so it's a bit more work. I'm doing it.
weborld:1611208872:2021-01-21T14:01:12.663+0000:1611208872:2021-01-21T14:01:12.663+0000:You can directly capture the NoSuchBucketException to judge

You can consider using listObjectsV2 instead

 
weborld:1611250815:2021-01-22T01:40:15.105+0000:1611250815:2021-01-22T01:40:15.105+0000:If you just want to determine whether the bucket exists, you can use the following code:

 

try {
 s3Client.headBucket(HeadBucketRequest.builder().bucket(bucketName).build());
 return true;
 }catch (NoSuchBucketException ne){
 return false;
 }catch (Exception e) {
 log.error(e.getMessage(), e.getCause());

throw e;
 }"
0,CAMEL-16067,New Feature,Major,None,3.x,"
None
",Resolved,Not A Problem,3.x,Unassigned,Claus Ibsen,0,2,2021-01-21 06:01:06+00:00,2021-01-21 13:50:37+00:00,The load balancer is using static uris. We could look at adding support for dynamic-to (eg toD) which can make the load balancer more dynamic.,
0,CAMEL-16066,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-20 18:20:46+00:00,2021-01-21 13:28:41+00:00,"On the user mailing list


        AdviceWith.adviceWith(context, ""foo"", rb ->

{
            rb.weaveById(""*"").after().wireTap(""xxx"").newExchangeHeader(""fff"", HERE_I_WANT_CSIMPLE))
        }

);


For that we need the languges on Builder. It currently lacks a number of them.


If you do not use Lambda style but AdviceWithRouteBuilder you have all the languages via BuilderSupport out of the box.


http://camel.465427.n5.nabble.com/CSimple-language-usage-tp5902701.html",
0,CAMEL-16065,Bug,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Jesse Sightler,0,2,2021-01-20 18:07:33+00:00,2021-02-03 12:32:58+00:00,"Sample project demonstrating the issue:


https://github.com/jsight/camel-undertow-configbug


 


If the tests are run all together, DirtiesContext will cause the configuration to be reloaded between each test. This will work fine for the first test that runs, but will fail for subsequent tests.


 


Why is this? Well, it turns out that the camel undertow component registers a type converter that causes non-bean-reference Strings to get converted to null. For some reason, this only happens on the second test within an execution.","davsclaus:1611138101:2021-01-20T18:21:41.872+0000:1611138101:2021-01-20T18:21:41.872+0000:Try with 3.7.1
jsightle@redhat.com:1611145371:2021-01-20T20:22:51.518+0000:1611145371:2021-01-20T20:22:51.518+0000:I'm not sure how to try 3.7.1, but 3.8.0-SNAPSHOT does not have the issue."
0,CAMEL-16064,New Feature,Major,None,4.4.0,"
None
",Open,Unresolved,4.4.0,Otavio Rodolfo Piske,Claus Ibsen,1,2,2021-01-20 09:44:24+00:00,2024-01-19 08:55:23+00:00,"It would be good to make camel-kafka and camel-vertx-kafka consumer able to batch together N messages via aggregation strategy as a single outgoing exchange. The batch should support group size, and timeout.


Something that was in the sjms-batch component.


The batching should use the same KafkaConsumer instance and defer the commit till the batching has been done. This requires manual offset commit by the consumer.


The use-case has been discussed on the chat at
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/kafka.20and.20batching","davsclaus:1611107152:2021-01-20T09:45:52.045+0000:1611107152:2021-01-20T09:45:52.045+0000:Also it may be worth to look at if we can add some support code in camel-support for BatchingConsumer with code for handling the aggregation and completion check based on size/timeout, and then the on completion logic to do the commit.

As the sjms / jms component could potentially also have such feature.
And some other components as well.
davsclaus:1623908193:2021-06-17T13:36:33.637+0000:1623908193:2021-06-17T13:36:33.637+0000:We should also look at some general batch consumer in transactional way with aggregation (something like the old camel-sjms had). And have some SPI for this, and then we can implement this for messaging systems like kafka, rabbitmq, jms, etc.
davsclaus:1690192892:2023-07-24T18:01:32.177+0000:1690192892:2023-07-24T18:01:32.177+0000:There is also another ticket about this"
0,CAMEL-16063,Bug,Major,None,"2.25.4, 3.7.3, 3.9.0","
None
",Resolved,Fixed,"2.25.4, 3.7.3, 3.9.0",Freeman Yue Fang,Freeman Yue Fang,0,3,2021-01-19 18:47:35+00:00,2021-03-02 14:37:26+00:00,"As the attached reproducer, when the SB camel application has another management.server.port specified, not all camel routes from the classpath(xml, java) can be collected.
The output is like 




2021-01-19 13:43:25.932  INFO 61489 --- [1 - timer://foo] hello from Java DSL                      : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:43:25.933  INFO 61489 --- [1 - timer://foo] hello from Camel XML                     : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:43:25.933  INFO 61489 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]




if no management.server.port specified. Otherwise, if management.server.port specified for spring-boot-acturator, then the output is like




2021-01-19 13:19:38.236  INFO 61101 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:19:39.227  INFO 61101 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:19:40.228  INFO 61101 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:19:41.228  INFO 61101 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]
2021-01-19 13:19:42.227  INFO 61101 --- [1 - timer://foo] hello from Spring XML                    : Exchange[ExchangePattern: InOnly, BodyType: null, Body: [Body is null]]




Camel route from classpath not collected","ffang:1611053693:2021-01-19T18:54:53.082+0000:1611053693:2021-01-19T18:54:53.082+0000:The problem comes from that if management.server.port specified, there are two ApplicationContext, one is for the default Web Container(8080) with ID ""Application"", another one is for the actuator management port(8081) with ID ""Application Management"", and the second one is the child of the first one. We should consider this when running CamelRouteCollector
ffang:1611054457:2021-01-19T19:07:37.013+0000:1611054457:2021-01-19T19:07:37.013+0000:Send PR https://github.com/apache/camel-spring-boot/pull/260
squakez:1614068652:2021-02-23T16:24:12.936+0000:1614068652:2021-02-23T16:24:12.936+0000:With this change I think we can have a problem when we include external routes, (ie, camel.springboot.java-routes-include-pattern = io/syndesis/example/*). In such situation it seems we duplicate the Post-processing CamelContext, see:

{code}
2021-02-23 17:18:28.406 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Post-processing CamelContext bean: tea
2021-02-23 17:18:28.407 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Java RoutesBuilder: io/syndesis/example/RestRouteConfiguration$1 accepted by include/exclude filter: true
2021-02-23 17:18:28.407 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: []
2021-02-23 17:18:28.420 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Java RoutesBuilder: io/syndesis/example/RestRoute accepted by include/exclude filter: true
2021-02-23 17:18:28.420 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: []
...
2021-02-23 17:18:28.835 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Post-processing CamelContext bean: tea
2021-02-23 17:18:28.835 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Java RoutesBuilder: io/syndesis/example/RestRouteConfiguration$1 accepted by include/exclude filter: true
2021-02-23 17:18:28.835 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: [Route(route1)[[From[rest:get:/openapi.json?description=Returns+the+OpenAPI+specification+for+this+service&componentName=servlet]] -> [SetHeader[Content-Type, constant{application/vnd.oai.openapi+json}], SetBody[constant{resource:classpath:openapi.json}]]]]
2021-02-23 17:18:28.835 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Java RoutesBuilder: io/syndesis/example/RestRoute accepted by include/exclude filter: true
2021-02-23 17:18:28.835 DEBUG 97383 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: [Route(route2)[[From[rest:get:/api:/{id}?produces=application%2Fjson&description=Fetches+task+by+given+identifier&componentName=servlet]] -> [To[direct:79aeded8-c57a-4403-bdc4-5838678bf503]]]]
...
{code}

in this particular case, it results with an Exception due to multiple consumer on the same route. [~ffang] what do you think?
ffang:1614071095:2021-02-23T17:04:55.069+0000:1614071095:2021-02-23T17:04:55.069+0000:Hi [~squakez],

Thanks for reporting this!

I think I can do more stricter check to see if the child application context ID is ""Application Management""(for the management.server.port web container) to avoid messing up other cases.

Any chance you can append your reproducer, so that ensure we are on the same page.

Thanks!
Freeman 
squakez:1614159150:2021-02-24T17:32:30.206+0000:1614159150:2021-02-24T17:32:30.206+0000:Thanks [~ffang]. While making the reproducer I realized that maybe the issue is on my side, so, for now please just disregard this issue. I will come back and let you know if I found something else.

Cheers,
Pasquale.
davsclaus:1614388531:2021-02-27T09:15:31.816+0000:1614388531:2021-02-27T09:15:31.816+0000:This causes more problem that pain, as it can trigger camel spring boot to start twice. 
Reverting this.
davsclaus:1614388865:2021-02-27T09:21:05.131+0000:1614388865:2021-02-27T09:21:05.131+0000:I suggest to ignore those events from that self management app context if there is a way to find out - thats not the context camel should be associated with
ffang:1614604347:2021-03-01T21:12:27.494+0000:1614604347:2021-03-01T21:12:27.494+0000:Hi [~davsclaus],

A new PR to address this is here
https://github.com/apache/camel/pull/5149

Just ignore the event from self management app context(ID: application:management) can resolve this problem.

Thanks!
Freeman
davsclaus:1614641901:2021-03-02T07:38:21.758+0000:1614641901:2021-03-02T07:38:21.758+0000:Freeman, I wonder if you could create a PR for the 3.7.x branch.
ffang:1614667046:2021-03-02T14:37:26.655+0000:1614667046:2021-03-02T14:37:26.655+0000:Hi Claus,

Backported to 3.7.x and 2.25.x branches.

Cheers
Freeman"
0,CAMEL-16062,Bug,Major,3.4.4,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Jörg Gonschior,0,2,2021-01-18 15:43:13+00:00,2021-03-02 12:55:06+00:00,"Hello,


we have defined a Spring based custom instance of AsyncHttpClient. This instance should be used by adding the property




camel.component.ahc-ws.client = asyncHttpClientTimeseriesImpl



to yaml file.


The implementation looks like this:


 




@Component
@RequiredArgsConstructor
public class AsyncHttpClientTimeseriesImpl extends DefaultAsyncHttpClient {
/* ... custom members ... */
@Override
 @SuppressWarnings(""ConstantConditions"")
 public synchronized BoundRequestBuilder prepareGet(String url) {
  /* a token is requested to be added to the httpHeaders */
}




 


When using the ahc-wss endpoint in a route, the custom client is never used. Instead a DefaultAsyncHttpClient is instanciated and will fail to connect, due to missing httpHeader containing the valid token.


Example of the route:




<route id=""distributorCloudRoute"">
  <from uri=""seda:distributorEntryPoint?multipleConsumers=true""/>
  <to uri=""ahc-wss:<url_of_externalHost>""/>
</route>



 


used dependencies from pom.xml:




<parent>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-dependencies</artifactId>
  <version>2.2.0.RELEASE</version>
</parent>
<apache-camel.version>3.4.4</apache-camel.version>
<dependency>
  <groupId>org.apache.camel.springboot</groupId>
  <artifactId>camel-spring-boot-starter</artifactId>
  <version>${apache-camel.version}</version>
</dependency>
<dependency>
  <groupId>org.apache.camel.springboot</groupId>
  <artifactId>camel-ahc-ws-starter</artifactId>
  <version>${apache-camel.version}</version>
</dependency>



 


In the former version that was used - Camel 3.1.0 - the error didn't occur.


It would be nice if you can confirm the wrong behaviour of AHC-WS component and give an possible version containing the fix.


Best regards


Jörg Gonschior","davsclaus:1612310946:2021-02-03T08:09:06.359+0000:1612310946:2021-02-03T08:09:06.359+0000:You should use # syntax

camel.component.ahc-ws.client = #bean:asyncHttpClientTimeseriesImpl
jgonschior:1614651586:2021-03-02T10:19:46.266+0000:1614656108:2021-03-02T11:35:08.452+0000:Thx for the hint, but we solved it by injecting via Spring the custom client into an own implementation of the endpoint.

So we created an own component extending {{WSComponent}},  an own endpoint extending {{WsEndpoint}}.

The own client is injected in the endpoint and assigned to the super class in the constructor.

 

So from our point of view the issue can be closed.

Thanks in advance

 

P.S.:
 We do not use the to uri="""" expression to assign the url the client should connect to. The address is hold by the client directly."
0,CAMEL-16061,Improvement,Major,3.7.0,None,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Nicolas Weber,0,2,2021-01-18 13:25:07+00:00,2021-01-26 06:19:45+00:00,"Hi there,


When using the JSLT-Component, large Decimal-Numbers seem to be represented in scientific notation and rounded (probably double). This changes the value itself, which is a big no no in my use cases. 
 Example:


in=> 11321321.12 : out => 1.132132112E7 (scientific)
 in=> 321321321.123657891234 : out => 3.213213211236579E8 (scientific and rounded)


ObjectMapper (Jackson) is instantiated without config, which causes actually trouble with Decimal-Numbers as far as I know.


Dealing with BigDecimal needs to be configured in Jackson. Since the ObjectMapper is instantiated in the Component itself, it's hard to get the Mapper-Instance.


 




<org.apache.camel.component.jslt.JsltEndpoint.onExchange(Exchange exchange):138> (decompiled source)
protected void onExchange(Exchange exchange) throws Exception {
.....................
ObjectMapper objectMapper = new ObjectMapper();
JsonNode input;
if (exchange.getIn().getBody() instanceof String) {
input = objectMapper.readTree((String)exchange.getIn().getBody(String.class));
}
......................



  


cibsen@e-ma.net suggested following change:


""We can surely look at making this configurable, and also maybe some simple option you can turn on|off to affect the object mapper - so you dont need to configure a custom instance. So maybe its 2 things, 1 simple option to set true|false, and 2 to setup a custom ObjectMapper.""","acosentino:1611323381:2021-01-22T21:49:41.922+0000:1611323381:2021-01-22T21:49:41.922+0000:I added an option for the mapper feature to map big decimal to floats.

I'll add the custom object mapper option and then we can consider this done."
0,CAMEL-16060,Improvement,Major,"3.7.0, 2.25.3",3.10.0,"
None
",Resolved,Fixed,3.10.0,Unassigned,Jens Kordowski,0,3,2021-01-18 13:19:15+00:00,2021-04-09 07:44:51+00:00,"Currently, the camel-kafka producer requires the definition of kafka.PARTITION_KEY and kafka.KEY to specify the partition to send to. While the key is usually used to determine the partition to send to, I don't understand the hard limitation on this header, when specifically defining the exact partition to send to anyway (via kafka.PARTITION_KEY).


Also, this is not clearly stated in the documentation.


Not sure, if this qualifies as bug or improvement, looks like a limitation to me. I can create a PR, if desired.","davsclaus:1616367304:2021-03-22T06:55:04.802+0000:1616367304:2021-03-22T06:55:04.802+0000:You are welcome to submit a PR for review, thanks.
omarsmak:1616374748:2021-03-22T08:59:08.785+0000:1616374794:2021-03-22T08:59:54.864+0000:for your info, [camel-vertx-kafka |https://camel.apache.org/components/latest/vertx-kafka-component.html#_message_headers_evaluated_by_the_component_producer], uses only one message key. As we know, message key can be as well partition key and thus made no sense to keep two keys headers which may lead to confusion.
jenskordowski:1617925491:2021-04-09T07:44:51.811+0000:1617925491:2021-04-09T07:44:51.811+0000:the kafka key also transports metadata information with the record. the key is usually used to influence the partition, but not necessarily. I can see the need for two headers to define each independently (if required). If somebody wants to send a key-value pair to partition 0 (independent of the key), why not, it might be required for some reason."
0,CAMEL-16059,Bug,Major,3.7.0,,"
None
",Closed,Cannot Reproduce,None,Unassigned,Gianpaolo Lopresti,0,2,2021-01-18 10:28:53+00:00,2021-01-28 10:06:38+00:00,"Hi,


When using camel-http-starter (with Spring boot), if you try to set the property (as per https://camel.apache.org/camel-spring-boot/latest/http-starter.html):


camel.component.http.x509-hostname-verifier = NoopHostnameVerifier


Camel crashes at start up with the message:


 


Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier:


Property: camel.component.http.x509-hostname-verifier
 Value: NoopHostnameVerifier
 Origin: class path resource [config/application.yml] - 71:31
 Reason: No converter found capable of converting from type [java.lang.String] to type [javax.net.ssl.HostnameVerifier]


 


Thanks.","davsclaus:1610936985:2021-01-18T10:29:45.645+0000:1610936985:2021-01-18T10:29:45.645+0000:Try with 3.7.1 when its released
gilo:1611719529:2021-01-27T11:52:09.541+0000:1611719529:2021-01-27T11:52:09.541+0000:Hi [~davsclaus],

i confirm that the issue is still present with the version 3.7.1 (and Spring Boot 2.4.2).

 

Thanks,

Regards.
davsclaus:1611731236:2021-01-27T15:07:16.021+0000:1611731236:2021-01-27T15:07:16.021+0000:Ah NoopHostnameVerifier is just a string text, it expects a bean id to lookup a bean with that name, eg hostname-verifier = #myBeanId

Or use #class:com.foo.bla.bla. NoopHostnameVerifier

To refer to the FQN classname
gilo:1611733635:2021-01-27T15:47:15.662+0000:1611733682:2021-01-27T15:48:02.016+0000:Hi [~davsclaus],

i've tried both solutions, none of them work...

Example: i've created this class:

{code:java}
@Configuration
public class CamelBeans {

    @Bean
    @Qualifier(""noopHostnameVerifier"")
    public HostnameVerifier noopHostnameVerifier() {
        return NoopHostnameVerifier.INSTANCE;
    }
}
{code}
 
and put this inside application.yaml:
{code}
camel:
  component:
    http:
      x509-hostname-verifier: noopHostnameVerifier
{code}

but when the app starts it crashes with this message:

{code}
Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier:

    Property: camel.component.http.x509-hostname-verifier
    Value: noopHostnameVerifier
    Origin: class path resource [config/application.yml] - 71:30
    Reason: No converter found capable of converting from type [java.lang.String] to type [javax.net.ssl.HostnameVerifier]
{code}

Please note that if i use Camel 3.2.0 with Spring Boot 2.2.6.RELEASE it works with the option
x509-hostname-verifier: NoopHostnameVerifier (that i've taken from documentation).

Thanks,
best regards.

davsclaus:1611733768:2021-01-27T15:49:28.889+0000:1611734110:2021-01-27T15:55:10.862+0000:USe

x509-hostname-verifier: #noopHostnameVerifier

A bit more correct would be to use #bean: as prefix to make it stand out its a bean lookup

#bean:noopHostnameVerifier
gilo:1611734616:2021-01-27T16:03:36.326+0000:1611734616:2021-01-27T16:03:36.326+0000:Thanks,
tried both, with no luck...

1)
Description:

Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier:

    Property: camel.component.http.x509-hostname-verifier
    Value: #bean:noopHostnameVerifier
    Origin: class path resource [config/application.yml] - 71:31
    Reason: No converter found capable of converting from type [java.lang.String] to type [javax.net.ssl.HostnameVerifier]

Action:

Update your application's configuration


2)

Description:

Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier:

    Property: camel.component.http.x509-hostname-verifier
    Value: #noopHostnameVerifier
    Origin: class path resource [config/application.yml] - 71:31
    Reason: No converter found capable of converting from type [java.lang.String] to type [javax.net.ssl.HostnameVerifier]

Action:

Update your application's configuration
davsclaus:1611739250:2021-01-27T17:20:50.533+0000:1611739250:2021-01-27T17:20:50.533+0000:This works for me


camel.component.http.x509-hostname-verifier = #bean:myVerifier

    @Bean(name = ""myVerifier"")
    public HostnameVerifier myVerifier() {
        return NoopHostnameVerifier.INSTANCE;
    }


gilo:1611794885:2021-01-28T08:48:05.126+0000:1611794885:2021-01-28T08:48:05.126+0000:Hi [~davsclaus],
thanks for you reply, i've tried to set the bean name like you did, i've also put the property inside application.properties instead of application.yml, i've put the Bean instantiation in the @SpringBootApplication class, but i still have the issue:

application.properties:
camel.component.http.x509-hostname-verifier = #bean:myVerifier

main class:
@Bean(name = ""myVerifier"")
public HostnameVerifier myVerifier() {
    return NoopHostnameVerifier.INSTANCE;
}

Error on startup:
***************************
APPLICATION FAILED TO START
***************************

Description:

Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier:

    Property: camel.component.http.x509-hostname-verifier
    Value: #bean:myVerifier
    Origin: class path resource [config/application.properties] - 1:47
    Reason: No converter found capable of converting from type [java.lang.String] to type [javax.net.ssl.HostnameVerifier]

Action:

Update your application's configuration


Process finished with exit code 1

I don't know if it's my fault, but the same configuration with Camel 3.2.0 and Spring Boot 2.2.6.RELEASE works.

My pom starts with this:
<dependencyManagement>

        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <!-- Import dependency management from Camel - Spring Boot -->
                <groupId>org.apache.camel.springboot</groupId>
                <artifactId>camel-spring-boot-dependencies</artifactId>
                <version>${camel.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>

    </dependencyManagement>

where the camel version is 3.7.1 and spring boot version is 2.4.2 (that is the one mentioned in the maven page of the camel 3.7.1 version).

Do you think that i'm doing something wrong?

Anyway thanks for all your support, if we can't figure out the problem and it affects only me we can close the issue.

Thanks,
best regards.
davsclaus:1611795416:2021-01-28T08:56:56.862+0000:1611795416:2021-01-28T08:56:56.862+0000:No its really weird. 

You are welcome to put together a small project and attach as .zip file to this JIRA or put the sample code on github or some place like that.

BTW for the camel bom, you may want to use camel-spring-boot-bom instead of camel-spring-boot-dependencies
gilo:1611798306:2021-01-28T09:45:06.080+0000:1611798306:2021-01-28T09:45:06.080+0000:Update: i've created a project from scratch and it works, even with this:

camel.component.http.x509-hostname-verifier = NoopHostnameVerifier

i've also put a route that uses the http component, and the app starts normally.

So i think that the problem is with some dependency (in the original project i've also tried with the ""camel-spring-boot-bom"", but this has not solved the issue.

Maybe i should try to put all the original dependencies to the new project one at time, but i think that this means that the problem is not into the http component.

I've found another error message that i haven't seen before:

""ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apache.camel.component.http.springboot.HttpComponentAutoConfiguration': Unsatisfied dependency expressed through field 'configuration'; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'camel.component.http-org.apache.camel.component.http.springboot.HttpComponentConfiguration': Could not bind properties to 'HttpComponentConfiguration' : prefix=camel.component.http, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'camel.component.http.x509-hostname-verifier' to javax.net.ssl.HostnameVerifier""

Thanks [~davsclaus], now i close this issue, and maybe i'm going to open a new one when i find the real bug.

Regards
gilo:1611799598:2021-01-28T10:06:38.322+0000:1611799598:2021-01-28T10:06:38.322+0000:The root cause of the issue is in some other component."
0,CAMEL-16058,Improvement,Minor,None,,"
None
",Closed,Information Provided,None,Luigi De Masi,Luigi De Masi,0,2,2021-01-18 10:22:58+00:00,2021-01-18 11:08:16+00:00,"There is no option to configure allowOptimisedComponents for toD EIP using Java DSL, it can only be configured in an XML route.
 The only option available is to define a ToDynamicDefinition and add it to the route definition, for example:




public class TestRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        ToDynamicDefinition tdd = new ToDynamicDefinition(""direct:${header.whereto}"")
           .ignoreInvalidEndpoint()
           .pattern(ExchangePattern.InOut)
           .allowOptimisedComponents(true);
        
        RouteDefinition route = 
                from(""direct:start"")
                .log(LoggingLevel.INFO, ""This is a test"");
        
        route.addOutput(tdd);
    }
}","davsclaus:1610936941:2021-01-18T10:29:01.289+0000:1610936941:2021-01-18T10:29:01.289+0000:You can do

                from(""direct:start"")
                        .toD().cacheSize(5).allowOptimisedComponents(false).uri(""mock:${header.foo}"");
"
0,CAMEL-16057,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-18 09:24:26+00:00,2021-01-20 11:36:46+00:00,"So we can capture more information for monitoring, such as better identify which services are slow to startup. 


Currently the events are a bit coarse grained. We need fine grained for



per route
per service



And maybe have a way of grouping/categorizing services so you can better understand what they are used for.","davsclaus:1611113792:2021-01-20T11:36:32.253+0000:1611113792:2021-01-20T11:36:32.253+0000:We dont need this per service, as we use StartupStep to capture startup exeuction times for various works."
0,CAMEL-16056,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-18 09:20:30+00:00,2021-01-20 11:35:55+00:00,To capture events for JFR so they can be analyzed. For example to find bottlenecks on startup/shutdown and for fine grained services.,"davsclaus:1610932883:2021-01-18T09:21:23.146+0000:1610932883:2021-01-18T09:21:23.146+0000:This requires java 11 to have JFR included (AFAIR it may be backported to some JDK8 versions but not across all of them).
davsclaus:1611029485:2021-01-19T12:11:25.504+0000:1611029485:2021-01-19T12:11:25.504+0000:JFR is out of the box in Java 8 onwards (use a fairly up to date JDK8) so lets add this to camel-core. Spring Framework have done that too.
Then we can capture ""work steps"" during startup that we can then emit to JFR for diagnosis.

Then users can just start with JFR enabled and have Camel data out of the box.
davsclaus:1611061808:2021-01-19T21:10:08.174+0000:1611109816:2021-01-20T10:30:16.353+0000:TODO: Add configuration to setup a automatic recording on startup, so you dont nessasary have to use complex java command line args. *DONE*"
0,CAMEL-16055,Improvement,Major,3.7.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Gregor Zurowski,0,2,2021-01-18 09:02:01+00:00,2021-06-14 08:08:23+00:00,"During release:perform of release 3.7.1, the build broke with the following error due to missing details from the distributionManagement section:




[INFO] [ERROR] Failed to execute goal
org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy
(default-deploy) on project camel-spring-boot-bom: Deployment failed:
repository element was not specified in the POM inside
distributionManagement element or in
-DaltDeploymentRepository=id::layout::url parameter -> [Help 1]




The changes made for https://issues.apache.org/jira/browse/CAMEL-15428 essentially removed the dependency on the parent where the distributionManagement section is defined, see commit: https://github.com/apache/camel-spring-boot/commit/1003bdb50c04e8ab7684ad06d5c277a7163b93ef#diff-6b74b1847f48b03edc897908eb7ae2c657e81124830cd07bfb77ea9ac58ad036


The commit was reverted for 3.7.x in order to perform the release of 3.7.1.


This issue needs to be fixed in order to address the issues described in CAMEL-15428 as well as to allow building releases going forward.","davsclaus:1611209858:2021-01-21T14:17:38.522+0000:1611209858:2021-01-21T14:17:38.522+0000:[~gzurowski] I created a PR with a potential fix
https://github.com/apache/camel-spring-boot/pull/262

The BOM now points to the parent again in the root. But the problematic dependencies that was included in the root pom
has moved into its own parent/pom.xml (like we have on camel)

Then the generated BOM should point to <distributionManagement> from the root pom

I am not sure if its possible to do a dry run or some kind of testing? If so you are very welcome to try that.
davsclaus:1611209887:2021-01-21T14:18:07.986+0000:1611209887:2021-01-21T14:18:07.986+0000:The PR is merged on this branch you can switch to and try testing
https://github.com/apache/camel-spring-boot/tree/CAMEL-16055
gzurowski:1611281507:2021-01-22T10:11:47.985+0000:1611281507:2021-01-22T10:11:47.985+0000:I will test this with the next release."
0,CAMEL-16054,Task,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Andrea Cosentino,0,1,2021-01-18 08:56:08+00:00,2021-01-18 09:36:20+00:00,No Desc,
0,CAMEL-16053,Test,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Unassigned,Claus Ibsen,0,1,2021-01-17 09:59:29+00:00,2021-02-01 13:52:27+00:00,The CI server reports some test failures and they also happens if testing locally.,
0,CAMEL-16052,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Claus Ibsen,0,3,2021-01-17 08:46:37+00:00,2021-05-17 14:59:40+00:00,"Currently an internal ObjectMapper is used that uses default settings. It would be good to allow to configure a custom ObjectMapper instance to use instead.


More details at
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/JSLT.20Component/near/222735549","klease78:1621000984:2021-05-14T22:03:04.886+0000:1621000984:2021-05-14T22:03:04.886+0000:[~davsclaus], based on the referenced chat message, this is an issue with camel-jslt & not camel-xslt, no?
davsclaus:1621198472:2021-05-17T04:54:32.323+0000:1621198472:2021-05-17T04:54:32.323+0000:Yes I have updated the JIRA ticket, thanks
acosentino:1621234751:2021-05-17T14:59:11.708+0000:1621234751:2021-05-17T14:59:11.708+0000:This has been done in this https://issues.apache.org/jira/browse/CAMEL-16061"
0,CAMEL-16051,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Unassigned,Perttu,0,1,2021-01-16 15:39:09+00:00,2021-01-17 13:03:16+00:00,Add usePublisherConnection option to allow developers to configure underlying RabbitTemplate usePublisherConnection property.,
0,CAMEL-16050,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-16 12:29:56+00:00,2021-01-16 12:33:56+00:00,To better support using consumerTemplate to receive one message only,
0,CAMEL-16049,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Unassigned,Perttu,0,1,2021-01-16 12:24:09+00:00,2021-01-16 14:35:38+00:00,Reuse Jackson ObjectMapper because it's thread safe,
0,CAMEL-16048,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-16 10:11:32+00:00,2021-01-16 15:15:21+00:00,When you use ConsumerTemplate we can have a PollingConsumer impl that does a single receive via rabbitmq template. As otherwise the EML is in use which is intended for continued receive which is overkill.,
0,CAMEL-16047,Task,Major,None,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Unassigned,Thomas Cunningham,0,1,2021-01-15 19:22:18+00:00,2021-01-15 21:22:04+00:00,"Getting an error trying to build camel 3.7.0 with jdk11 : 


Caused by: java.io.FileNotFoundException: /tmp/camel-3.7.0/catalog/camel-catalog/target/../../etc/apache-header.xml (No such file or directory)


Can be fixed by setting the <licenceHeader> property in camel-catalog.",tcunning:1610709835:2021-01-15T19:23:55.474+0000:1610709835:2021-01-15T19:23:55.474+0000:https://github.com/apache/camel/pull/4892
0,CAMEL-16016,Bug,Minor,"2.20.4, 3.8.0",3.8.0,"
None
",Resolved,Not A Bug,3.8.0,Claus Ibsen,Pavel Kostelnik,0,3,2021-01-11 15:09:35+00:00,2021-03-25 12:34:55+00:00,"we have the following FTP password:




String password= ""%j#7%c6i"";



when encoded with camel (we are using RAW()) this results in a gibberish string with <?> (unprintable characters)


==> expected output:


%25j%237%25c6i


Sample test demonstrating the bug / reproducer:




@Test
public void testWrongEncoding(){
   String password= ""%j#7%c6i"";
   String result = UnsafeUriCharactersEncoder.encode(password);
   String expected = ""%25j%237%25c6i"";
   System.out.println(""expected ->  ""+expected);
   System.out.println(""vs"");
   System.out.println(result);
   if (!result.equals(expected)){
      System.err.println(""not the same , no no "");
   }

}","chardahe@redhat.com:1610571501:2021-01-14T04:58:21.994+0000:1610571501:2021-01-14T04:58:21.994+0000:Thanks [~koszta] for reporting it, I'll look into it
davsclaus:1616624709:2021-03-25T06:25:09.708+0000:1616624709:2021-03-25T06:25:09.708+0000:Its because the password have % which Camel uses to detect if part of the text is already decimal encoded, and it happens that %c6 is then a decimal.

Because its a password and you want to use as-is, then you should enclose the password in RAW style and encode in raw mode enabled, eg this works

{code}
    @Test
    public void testWrongEncoding(){
        String password= ""RAW(%j#7%c6i)"";
        String result = UnsafeUriCharactersEncoder.encode(password, true);
        // remove RAW
        result = result.substring(4);
        result = result.substring(0, result.length() - 1);
        String expected = ""%25j%237%25c6i"";
        System.out.println(""expected ->  ""+expected);
        System.out.println(""vs"");
        System.out.println(result);
        if (!result.equals(expected)){
            System.err.println(""not the same , no no "");
        }
    }
{code}
koszta:1616625823:2021-03-25T06:43:43.980+0000:1616625823:2021-03-25T06:43:43.980+0000:Hi [~davsclaus] - ok I get your point but the problem originates from us using this in an endpoint URI definition.

So:
 * when using password without RAW in endpoint URI camel complains about invalid characters
 * when we wrap password in RAW in our camel endpoint URI it is encoded to gibberish

I understand that  by giving this special parameter it is fixed but this would mean we have to manually check for passwords every time and think about this and encode and the password appropriately. If this (
UnsafeUriCharactersEncoder.encode(password, true);
) is the definitive solution to the problem is there a reason why it is not used by default for encoding all passwords?
davsclaus:1616643871:2021-03-25T11:44:31.113+0000:1616643871:2021-03-25T11:44:31.113+0000:About gibberish then it sounds like its a display problem - the string value and its bytes should be encoded to US-ASCII so the password ought to be readable.

Yes you can argue that the %c6 in your password is an unfortunate little but that it does not gets encoded also
So the only issue at this moment is with password of that combination.
davsclaus:1616645618:2021-03-25T12:13:38.012+0000:1616645618:2021-03-25T12:13:38.012+0000:Here is an unit test that shows your password works fine with camel-ftp
https://github.com/apache/camel/commit/d48befa92b991f76d4790a8dae4b9721807db17b
davsclaus:1616645718:2021-03-25T12:15:18.710+0000:1616645718:2021-03-25T12:15:18.710+0000:When endpoints are build Camel does a bunch of stuff, so its not only that single encoder in use. And it may be that you have only tried old Camel 2.x.

koszta:1616646895:2021-03-25T12:34:55.651+0000:1616646895:2021-03-25T12:34:55.651+0000:Thanks for feedback. Yes - our primary problem is on 2.20

We plan to eventually migrate to 3 in near future so that might take it away since the Junit passes. The reason why I put 3 in affected versions is I noticed that passwords got processed in the same way but there has to be something done differently in 3 since your test does pass. "
0,CAMEL-16015,Bug,Minor,3.4.5,3.10.0,"
None
",Resolved,Fixed,3.10.0,Claus Ibsen,Grégory Van Herck,0,2,2021-01-11 10:19:10+00:00,2021-03-22 18:01:31+00:00,"When doing SFTP to file with the local work directory option, like described here:


https://camel.apache.org/components/latest/ftp-component.html#_using_local_work_directory


The target file should be written by renaming the local work file.


Instead, it is written by InputStream because of the following code in FileOperations:


if (body instanceof WrappedFile) {
     body = ((WrappedFile<?>)body).getFile();
}
if (body instanceof File) {
     source = (File)body;
     fileBased = true;
}


 


The exchange contains a RemoteFile and after unwrapping, a SftpRemoteFileJCraft which is not a File. The exchange is not marked as fileBased and the local work file is therefore not used.


Issue was discovered on version 3.4.5 but might affect other versions.","chardahe@redhat.com:1610571654:2021-01-14T05:00:54.877+0000:1610571654:2021-01-14T05:00:54.877+0000:Thanks [~gregvh] for bringing this into notice, I'll look into it"
0,CAMEL-16014,Bug,Major,"3.7.0, 3.8.0","3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2021-01-11 10:15:46+00:00,2021-01-12 09:23:34+00:00,The code is using tcp:// as the scheme for AMQP. It should be amqp://.,
0,CAMEL-16013,Task,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Andrea Cosentino,0,1,2021-01-11 07:22:43+00:00,2021-01-12 16:31:15+00:00,No Desc,
0,CAMEL-16012,Sub-task,Major,None,3.9.0,"
None
",Closed,Fixed,3.9.0,Matthias Streidel,Matthias Streidel,0,2,2021-01-09 23:51:23+00:00,2021-03-04 15:28:03+00:00,edit folder names in camel-examples,"metters:1612332302:2021-02-03T14:05:02.655+0000:1612332302:2021-02-03T14:05:02.655+0000:I am going to take case of this task. I just dont know how to assign that ticket to me.
davsclaus:1612334107:2021-02-03T14:35:07.211+0000:1612334107:2021-02-03T14:35:07.211+0000:Thanks Matthias. I granted your user karma to self assign tickets
metters:1612538093:2021-02-05T23:14:53.785+0000:1612538801:2021-02-05T23:26:41.044+0000:I am getting started with this, but one of the example module *{{camel-example-main-xml}}*, as well as {{*camel-example-ssh*}} do not compile, [~davsclaus].
The other module are fine and will be renamed shortly
davsclaus:1613297751:2021-02-14T18:15:51.581+0000:1613297751:2021-02-14T18:15:51.581+0000:Ah there are many more. Keep new PRs coming
metters:1613301659:2021-02-14T19:20:59.292+0000:1613301659:2021-02-14T19:20:59.292+0000:Yes, I am working in smaller chunks now, instead of renaming everything at once, which makes it a bit easier to keep an overview 
metters:1613560146:2021-02-17T19:09:06.749+0000:1613560146:2021-02-17T19:09:06.749+0000:The link inside of the [README.adoc|https://github.com/apache/camel-examples/blob/a78cfc9d39737e8fdec618505d1b5372aedd8f87/examples/camel-example-fhir/README.adoc] of the module [camel-example-fhir|https://github.com/apache/camel-examples/tree/a78cfc9d39737e8fdec618505d1b5372aedd8f87/examples/camel-example-fhir] refers to a 404'd repo.
Unfortunately, it was one prerequisite for the user to test that example, to let a FHIR server run.

I searched (only a little bit to be honest) for alternatives in github and found only those two: [https://github.com/search?q=hapi-fhir-jpaserver-example] of which I added the first one. I did not test whether the example runs, but that example server is still being maintained actively (19 days ago) while the original one is gone.
metters:1614760181:2021-03-03T16:29:41.341+0000:1614760181:2021-03-03T16:29:41.341+0000:[~davsclaus], this should be done
davsclaus:1614760902:2021-03-03T16:41:42.329+0000:1614760902:2021-03-03T16:41:42.329+0000:Thanks you very much Matthias for all this work.

If you want more then we have the SB examples that can be renamed too
https://github.com/apache/camel-spring-boot-examples
metters:1614762638:2021-03-03T17:10:38.693+0000:1614762638:2021-03-03T17:10:38.693+0000:The spring boot examples are already renamed by me, [~davsclaus]
davsclaus:1614842883:2021-03-04T15:28:03.049+0000:1614842883:2021-03-04T15:28:03.049+0000:Ah yeah but now that the regular examples are so nice, then the SB would be great if we could remove all `spring-boot-` as prefix so eg `spring-boot-activemq` is just `activemq` and so on"
0,CAMEL-16011,Sub-task,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Matthias Streidel,Matthias Streidel,0,2,2021-01-09 23:50:27+00:00,2021-03-06 16:27:15+00:00,edit folder names in camel-spring-boot-examples,"metters:1610208112:2021-01-10T00:01:52.610+0000:1610212787:2021-01-10T01:19:47.120+0000:-[~cibsen@e-ma.net], is it 'just' removing the prefix from the folder names or are there any side-effects that I have to keep an eye open for?-
I started working on it.


metters:1610544217:2021-01-13T21:23:37.530+0000:1610544217:2021-01-13T21:23:37.530+0000:{{camel-example-spring-boot-rest-swagger-simple}} seems to be broken:
 {{mvn spring-boot:run}} returns an ERROR: [^apache camel swagger simple springbootrun.txt]
metters:1610634869:2021-01-14T22:34:29.906+0000:1610634869:2021-01-14T22:34:29.906+0000:client of hystrix example does not run: [^camel spring boot hystrix stacktrace.txt]
davsclaus:1610680648:2021-01-15T11:17:28.744+0000:1610680648:2021-01-15T11:17:28.744+0000:The swagger example requires to download the spec online - it works for me. Wonder if they had a glitch or that you are behind some HTTP proxy and it returned some error.
davsclaus:1610680918:2021-01-15T11:21:58.583+0000:1610680918:2021-01-15T11:21:58.583+0000:Thanks the hystrix example has been fixed
metters:1610857408:2021-01-17T12:23:28.537+0000:1610857827:2021-01-17T12:30:27.987+0000:I merged the fix into my branch and tried again to run swagger-simple.

In my browser I can access [https://petstore.swagger.io/v2/swagger.json] without issues. When running the application, unfortunately it still returns the following for both ways to startup (see README of that example implementation):
{code:java}
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.4.2)2021-01-17 13:18:39.864  INFO 13936 --- [           main] o.a.c.example.RestSwaggerApplication     : Starting RestSwaggerApplication v3.8.0-SNAPSHOT using Java 14.0.2 on metters-PC with PID 13936 (/home/metters/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-rest-swagger-simple/target/camel-example-spring-boot-rest-swagger-simple-3.8.0-SNAPSHOT.jar started by metters in /home/metters/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-rest-swagger-simple)
2021-01-17 13:18:39.867  INFO 13936 --- [           main] o.a.c.example.RestSwaggerApplication     : No active profile set, falling back to default profiles: default
2021-01-17 13:18:40.812  INFO 13936 --- [           main] o.apache.camel.support.LRUCacheFactory   : Detected and using LRUCacheFactory: camel-caffeine-lrucache
2021-01-17 13:18:41.147  INFO 13936 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML routes from: classpath:camel/*.xml
2021-01-17 13:18:41.147  INFO 13936 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
2021-01-17 13:18:41.148  INFO 13936 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
2021-01-17 13:18:41.213  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.8.0-SNAPSHOT (camel-1) is starting
2021-01-17 13:18:41.215  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : StreamCaching is not in use. If using streams then it's recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2021-01-17 13:18:41.219  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Total 0 routes, of which 0 are started
2021-01-17 13:18:41.220  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.8.0-SNAPSHOT (camel-1) started in 7ms
2021-01-17 13:18:41.226  INFO 13936 --- [           main] o.a.c.example.RestSwaggerApplication     : Started RestSwaggerApplication in 1.773 seconds (JVM running for 2.221)
2021-01-17 13:18:41.728  INFO 13936 --- [           main] io.swagger.parser.Swagger20Parser        : reading from http://petstore.swagger.io/v2/swagger.json
2021-01-17 13:18:41.886  INFO 13936 --- [           main] io.swagger.parser.Swagger20Parser        : reading from http://petstore.swagger.io/v2/swagger.json
2021-01-17 13:18:41.994  INFO 13936 --- [           main] ConditionEvaluationReportLoggingListener : Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-01-17 13:18:42.015 ERROR 13936 --- [           main] o.s.boot.SpringApplication               : Application run failedjava.lang.IllegalStateException: Failed to execute ApplicationRunner
        at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798) ~[spring-boot-2.4.2.jar!/:2.4.2]
        at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:785) ~[spring-boot-2.4.2.jar!/:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:333) ~[spring-boot-2.4.2.jar!/:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar!/:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar!/:2.4.2]
        at org.apache.camel.example.RestSwaggerApplication.main(RestSwaggerApplication.java:65) ~[classes!/:3.8.0-SNAPSHOT]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
        at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49) ~[camel-example-spring-boot-rest-swagger-simple-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:107) ~[camel-example-spring-boot-rest-swagger-simple-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:58) ~[camel-example-spring-boot-rest-swagger-simple-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88) ~[camel-example-spring-boot-rest-swagger-simple-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
Caused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: rest-swagger://http://petstore.swagger.io/v2/swagger.json%23getInventory. Reason: java.lang.IllegalArgumentException: The given Swagger specification could not be loaded from `http://petstore.swagger.io/v2/swagger.json`. Tried loading using Camel's resource resolution and using Swagger's own resource resolution. Swagger tends to swallow exceptions while parsing, try specifying Java system property `debugParser` (e.g. `-DdebugParser=true`), the exception that occurred when loading using Camel's resource loader follows
        at org.apache.camel.support.cache.DefaultProducerCache.acquireProducer(DefaultProducerCache.java:154) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:170) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176) ~[camel-base-engine-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172) ~[camel-base-engine-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBodyAndHeaders(DefaultProducerTemplate.java:439) ~[camel-base-engine-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.example.RestSwaggerApplication.run(RestSwaggerApplication.java:56) ~[classes!/:3.8.0-SNAPSHOT]
        at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:795) ~[spring-boot-2.4.2.jar!/:2.4.2]
        ... 13 common frames omitted
Caused by: java.lang.IllegalArgumentException: The given Swagger specification could not be loaded from `http://petstore.swagger.io/v2/swagger.json`. Tried loading using Camel's resource resolution and using Swagger's own resource resolution. Swagger tends to swallow exceptions while parsing, try specifying Java system property `debugParser` (e.g. `-DdebugParser=true`), the exception that occurred when loading using Camel's resource loader follows
        at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.loadSpecificationFallback(RestSwaggerEndpoint.java:651) ~[camel-rest-swagger-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.loadSpecificationFrom(RestSwaggerEndpoint.java:626) ~[camel-rest-swagger-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.createProducer(RestSwaggerEndpoint.java:177) ~[camel-rest-swagger-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.DefaultEndpoint.createAsyncProducer(DefaultEndpoint.java:194) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.cache.ServicePool$SinglePool.acquire(ServicePool.java:212) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.cache.ServicePool$SinglePool.acquire(ServicePool.java:196) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.cache.ServicePool.acquire(ServicePool.java:112) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.support.cache.DefaultProducerCache.acquireProducer(DefaultProducerCache.java:125) ~[camel-support-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        ... 19 common frames omitted
Caused by: com.fasterxml.jackson.core.JsonParseException: Unexpected character ('<' (code 60)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
 at [Source: (sun.net.www.protocol.http.HttpURLConnection$HttpInputStream); line: 1, column: 2]
        at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(ParserMinimalBase.java:632) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2686) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:865) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:757) ~[jackson-core-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4555) ~[jackson-databind-2.11.4.jar!/:2.11.4]
        at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2955) ~[jackson-databind-2.11.4.jar!/:2.11.4]
        at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.parseInputStream(RestSwaggerEndpoint.java:661) ~[camel-rest-swagger-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        at org.apache.camel.component.rest.swagger.RestSwaggerEndpoint.loadSpecificationFrom(RestSwaggerEndpoint.java:624) ~[camel-rest-swagger-3.8.0-SNAPSHOT.jar!/:3.8.0-SNAPSHOT]
        ... 25 common frames omitted2021-01-17 13:18:42.021  WARN 13936 --- [           main] o.a.c.s.boot.SpringBootCamelContext      : CamelContext has only been running for less than a second. If you intend to run Camel for a longer time then you can set the property camel.springboot.main-run-controller=true in application.properties or add spring-boot-starter-web JAR to the classpath.
2021-01-17 13:18:42.021  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.8.0-SNAPSHOT (camel-1) is shutting down
2021-01-17 13:18:42.031  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.8.0-SNAPSHOT (camel-1) uptime 818ms
2021-01-17 13:18:42.031  INFO 13936 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.8.0-SNAPSHOT (camel-1) is shutdown in 10ms

{code}
I will leave this example for now and continue with the renaming/migration of the others where it is possible.

These are the remaining modules:
 !camel example remaining modules.png!

 
metters:1610858482:2021-01-17T12:41:22.155+0000:1610858482:2021-01-17T12:41:22.155+0000:Hystrix example was moved and works like before.
metters:1610870825:2021-01-17T16:07:05.868+0000:1610870870:2021-01-17T16:07:50.251+0000:If I follow the readme of {{camel-example-spring-boot-master}} the command {{mvn spring-boot:run}} fails:
{code:java}
...
2021-01-17 17:03:31.724 ERROR 26096 --- [ main] o.s.boot.SpringApplication : Application run failedorg.apache.camel.FailedToCreateRouteException: Failed to create route clustered: Route(clustered)[From[master:{{node.namespace}}:timer:cluste... because of Failed to resolve endpoint: master://camel-master:timer:clustered?period=5000 due to: Cannot auto create component: master
...
{code}
Full Stacktrace:
{code:java}
(base) <0>metters@metters-PC:~/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-master$ mvn spring-boot:run
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.google.inject.internal.cglib.core.$ReflectUtils$1 (file:/usr/share/maven/lib/guice.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of com.google.inject.internal.cglib.core.$ReflectUtils$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[INFO] Scanning for projects...
[INFO] 
[INFO] --< org.apache.camel.springboot.example:camel-example-spring-boot-master >--
[INFO] Building Camel SB Examples :: Master 3.8.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot-maven-plugin:2.4.2:run (default-cli) > test-compile @ camel-example-spring-boot-master >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce-maven-version) @ camel-example-spring-boot-master ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ camel-example-spring-boot-master ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- camel-package-maven-plugin:3.8.0-SNAPSHOT:prepare-example (default) @ camel-example-spring-boot-master ---
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ camel-example-spring-boot-master ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ camel-example-spring-boot-master ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/metters/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-master/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ camel-example-spring-boot-master ---
[INFO] No sources to compile
[INFO] 
[INFO] <<< spring-boot-maven-plugin:2.4.2:run (default-cli) < test-compile @ camel-example-spring-boot-master <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot-maven-plugin:2.4.2:run (default-cli) @ camel-example-spring-boot-master ---
[INFO] Attaching agents: []  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.4.2)2021-01-17 17:03:30.556  INFO 26096 --- [           main] o.a.camel.examples.master.MasterNode     : Starting MasterNode using Java 14.0.2 on metters-PC with PID 26096 (/home/metters/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-master/target/classes started by metters in /home/metters/IdeaProjects/camel-spring-boot-examples/camel-example-spring-boot-master)
2021-01-17 17:03:30.559  INFO 26096 --- [           main] o.a.camel.examples.master.MasterNode     : No active profile set, falling back to default profiles: default
2021-01-17 17:03:31.253  INFO 26096 --- [           main] o.apache.camel.support.LRUCacheFactory   : Detected and using LRUCacheFactory: camel-caffeine-lrucache
2021-01-17 17:03:31.596  INFO 26096 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML routes from: classpath:camel/*.xml
2021-01-17 17:03:31.597  INFO 26096 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
2021-01-17 17:03:31.597  INFO 26096 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
2021-01-17 17:03:31.712  INFO 26096 --- [           main] ConditionEvaluationReportLoggingListener : Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-01-17 17:03:31.724 ERROR 26096 --- [           main] o.s.boot.SpringApplication               : Application run failedorg.apache.camel.FailedToCreateRouteException: Failed to create route clustered: Route(clustered)[From[master:{{node.namespace}}:timer:cluste... because of Failed to resolve endpoint: master://camel-master:timer:clustered?period=5000 due to: Cannot auto create component: master
        at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:79) ~[camel-core-reifier-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[camel-core-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:603) ~[camel-core-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:558) ~[camel-core-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2658) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2430) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2447) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:130) ~[camel-spring-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:167) ~[camel-spring-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:176) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:169) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:143) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:426) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:943) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591) ~[spring-context-5.3.3.jar:5.3.3]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1311) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1300) ~[spring-boot-2.4.2.jar:2.4.2]
        at org.apache.camel.examples.master.MasterNode.main(MasterNode.java:33) ~[classes/:na]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: master://camel-master:timer:clustered?period=5000 due to: Cannot auto create component: master
        at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:916) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:797) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:58) ~[camel-support-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.reifier.AbstractReifier.resolveEndpoint(AbstractReifier.java:177) ~[camel-core-reifier-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:93) ~[camel-core-reifier-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:73) ~[camel-core-reifier-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        ... 24 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: master
        at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:584) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:541) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:874) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        ... 29 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: master
        at org.apache.camel.impl.engine.AbstractCamelContext.initComponent(AbstractCamelContext.java:648) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.access$000(AbstractCamelContext.java:180) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext$2.apply(AbstractCamelContext.java:570) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext$2.apply(AbstractCamelContext.java:566) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1740) ~[na:na]
        at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:566) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        ... 31 common frames omitted
Caused by: java.lang.IllegalStateException: No cluster service found
        at org.apache.camel.component.master.MasterComponent.lambda$doInit$0(MasterComponent.java:113) ~[camel-master-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at java.base/java.util.Optional.orElseThrow(Optional.java:401) ~[na:na]
        at org.apache.camel.component.master.MasterComponent.doInit(MasterComponent.java:112) ~[camel-master-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.support.service.ServiceHelper.initService(ServiceHelper.java:55) ~[camel-api-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.spring.boot.util.CamelPropertiesHelper.setCamelProperties(CamelPropertiesHelper.java:90) ~[camel-spring-boot-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.spring.boot.util.CamelPropertiesHelper.copyProperties(CamelPropertiesHelper.java:45) ~[camel-spring-boot-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.component.master.springboot.MasterComponentAutoConfiguration$1.configure(MasterComponentAutoConfiguration.java:70) ~[camel-master-starter-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.CustomizersLifecycleStrategy.lambda$onComponentAdd$2(CustomizersLifecycleStrategy.java:52) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ~[na:na]
        at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) ~[na:na]
        at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357) ~[na:na]
        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[na:na]
        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[na:na]
        at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150) ~[na:na]
        at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173) ~[na:na]
        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:na]
        at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497) ~[na:na]
        at org.apache.camel.impl.engine.CustomizersLifecycleStrategy.onComponentAdd(CustomizersLifecycleStrategy.java:52) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.postInitComponent(AbstractCamelContext.java:535) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        at org.apache.camel.impl.engine.AbstractCamelContext.initComponent(AbstractCamelContext.java:645) ~[camel-base-engine-3.8.0-SNAPSHOT.jar:3.8.0-SNAPSHOT]
        ... 36 common frames omitted[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  3.952 s
[INFO] Finished at: 2021-01-17T17:03:31+01:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:2.4.2:run (default-cli) on project camel-example-spring-boot-master: Application finished with exit code: 1 -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException

{code}
metters:1611332387:2021-01-23T00:19:47.677+0000:1611334921:2021-01-23T01:02:01.230+0000:[~davsclaus],
 I would like to create a PR soon, as I could not make much progress recently and I want to avoid loosing all that is done already.
h3. The current situation is as follows:
h5. {color:#de350b}Not able to start/test{color}
 * camel-spring-boot-rest-swagger-simple:
 The startup consistently fails on my systems. I have tested this on my PC (Ubuntu, no VPN), ThinkPad (Ubuntu, no VPN), and MacBook (with and without VPN). They all fail. I can migrate, but someone else must confirm that it works.
 * camel-spring-boot-master:
 I don't really get the manual as there are supposed to be two nodes, but I can only find one main class to start. Even more, the first node doesn't start ({{mvn spring-boot:run}} being in root directory of the module)
 * camel-spring-boot-twitter-salesforce
 I do not have - and do not want to create - a salesforce account so i cannot test this. Again, I can migrate this module, too, but someone else should confirm it still works.

h5. {color:#ff8b00}Maybe will be able to start/test{color}
 * camel-spring-boot-kafka-avro
 * camel-spring-boot-kafka-offsetrepository
 * camel-spring-boot-strimzi

This is mostly as I am not super familiar with kafka and its configuration. Might be a hint to improve the readme files
h5. {color:#ff8b00}Started effort and might succeed {color} (still a maybe, though)
 * camel-spring-boot-webhook
 [https://serveo.net/] is down open source and independent alternative would be [https://github.com/localtunnel/localtunnel.|https://github.com/localtunnel/localtunnel] Have to give it a try
 * camel-spring-boot-grpc-kubernetes
 managed to start kubectl but I still get an error, that I am sure I can fix

All other modules not mentioned here should still be tested by a third party of course, but I did my best here. Kudos to those who write actual Tests!
h3. One more question
 * What about the artifactIds?
 I updated the root pom.xml, but should the artifactId of each module be updated, too?
 Currently those still have the prefix:
 !image-2021-01-23-01-18-27-929.png|width=806,height=123!
davsclaus:1612229821:2021-02-02T09:37:01.533+0000:1612229821:2021-02-02T09:37:01.533+0000:Ah yeah the artefacts are okay to stay as is, its just that the folder names are soo long, and harder to navigate and browse on github etc.
davsclaus:1612230399:2021-02-02T09:46:39.268+0000:1612230399:2021-02-02T09:46:39.268+0000:Thanks you are welcome to just rename the last remainder examples (and skip the testing).
metters:1612281974:2021-02-03T00:06:14.004+0000:1612281974:2021-02-03T00:06:14.004+0000:PR for the remaining modules is created.
metters:1612311008:2021-02-03T08:10:08.559+0000:1612311008:2021-02-03T08:10:08.559+0000:Alle module directories were renamed.
metters:1615019235:2021-03-06T16:27:15.448+0000:1615019235:2021-03-06T16:27:15.448+0000:[~davsclaus], I am going go to keep my eyes open for tickets around apache camel.

I am searching for something that includes coding, but is beginner friendly regarding camel, as well as regarding the skill level (not absolute beginner obviously)."
0,CAMEL-16010,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2021-01-09 15:02:47+00:00,2021-01-11 17:29:15+00:00,No Desc,
0,CAMEL-16009,Bug,Major,3.7.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Andrea Cosentino,Sergey Chernolyas,0,1,2021-01-08 13:37:48+00:00,2021-01-11 07:26:45+00:00,"OPC/UA Tree has two nodes with name ""Camel"" (see attached image) . The tree should have only one node with name ""Camel"".",
0,CAMEL-16008,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Radovan Netuka,0,1,2021-01-08 13:26:39+00:00,2021-01-21 07:54:34+00:00,"Provide a way or option to implement consumer-priority in camel-amqp and camel-jms components ?
https://activemq.apache.org/components/artemis/documentation/latest/consumer-priority.html
  
 The request https://issues.apache.org/jira/browse/ARTEMIS-196 adds JMS Core and Openwire tests. How can we do something like this in the camel consumer ?",rnetuka:1610084081:2021-01-08T13:34:41.790+0000:1610084081:2021-01-08T13:34:41.790+0000:PR: https://github.com/apache/camel/pull/4846
0,CAMEL-16007,Task,Major,None,3.8.0,"
None
",Closed,Fixed,3.8.0,Omar Al-Safi,Omar Al-Safi,0,1,2021-01-08 09:06:25+00:00,2021-01-10 04:01:20+00:00,per title,
0,CAMEL-16006,Improvement,Minor,3.7.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas Küstermann,0,1,2021-01-08 08:16:58+00:00,2022-09-02 17:31:55+00:00,"I'm currently reading about error handling in Camel, specifically Using a Processor as a failure handler.


The code example lists


Code Example

// send it to our mock endpoint
exchange.getContext().createProducerTemplate().send(""mock:myerror"", exchange);




According to the Javadoc of createProducerTemplate() and ProducerTemplate this is problematic:



stop() must be called when the ProducerTemplate is not further needed
Recommended practice is to use just one ProducerTemplate in the application
Why does Camel use too many threads with ProducerTemplate?



Since we're all lazy devs, we tend to copy paste code listings and think we're done.


I suggest the following:



Add a section Recommended Practice to user manual ProducerTemplate which basically lists the important bits of FAQ article Why does Camel use too many threads with ProducerTemplate?
Fix code example in Using a Processor as a failure handler.
Maybe scan through other code samples?",
0,CAMEL-16005,Bug,Major,3.7.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Claus Ibsen,Marco Collovati,0,2,2021-01-07 18:43:46+00:00,2021-01-08 10:37:53+00:00,"Adding multiple route instances using a route template with a recipient list configured for parallel processing, fails with a FailedToStartRouteException when starting the second route instance, due to duplicate id on recipientList node.


To reproduce, define a route template as following




routeTemplate(""myTemplate"")
 .templateParameter(""input"")
 .from(""direct:input"")
 .recipientList(constant(""mock:a,mock:b"")).parallelProcessing().end()
 .to(""mock:result"");




and then add multiple routes to the context




context.addRouteFromTemplate(""testRouteId1"", ""myTemplate"", Map.of(""input"", ""a""));
context.addRouteFromTemplate(""testRouteId2"", ""myTemplate"", Map.of(""input"", ""b""));



 when Camel Context starts, the following exception is throw



Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route testRouteId2 because of duplicate id detected: recipientList1. Please correct ids to be unique among all your routes.
 at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:581)
 at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:557)
 at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2642)
 at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
 at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2414)
 at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2431)



 
 This happens with Camel 3.7, but not with 3.6. It seems to me that the problem may be in the new implementation of DefaultExecutorServiceManager.forceId;
 on camel 3.6 the method was defined as




protected Object forceId(Object source) {
  if (source instanceof OptionalIdentifiedDefinition) { 
    NodeIdFactory factory = getCamelContext().adapt(ExtendedCamelContext.class).getNodeIdFactory();
    ((OptionalIdentifiedDefinition) source).idOrCreate(factory); 
  }
  return source;
 }




in 3.7 the implementation is




 protected Object forceId(Object source) {
    if (source instanceof NamedNode && source instanceof IdAware) {
        NamedNode node = (NamedNode) source;
        NodeIdFactory factory = getCamelContext().adapt(ExtendedCamelContext.class).getNodeIdFactory();
        if (node.getId() == null) { 
            String id = factory.createId(node);
            ((IdAware) source).setId(id); 
       }
    }
 return source;
 }




The main difference I noticed here is that using idOrCreate on source object does not set the internal customId flag, whereas setId sets the flag to true.
 if I have correctly understood, RouteDefinitionHelper.validateUniqueIds only takes care of custom ids when searching for duplicates, so using setId may be the culprit
 of the problem.


 


Attached source code to reproduce the error","davsclaus:1610023129:2021-01-07T20:38:49.901+0000:1610023129:2021-01-07T20:38:49.901+0000:Oh very good catch. You are welcome to provide a PR with a fix. Yes the fix should be to use idOrCreate so it assings customId = true.
And you are welcome to include the unit test in the PR.
mcollovati:1610062298:2021-01-08T07:31:38.578+0000:1610062298:2021-01-08T07:31:38.578+0000:I would be glad to create a PR, but I need some help.
*IdAware* interface does not expose a *idOrCreate* method, so I can see one of this options:

* revert to the former *forceId* implementation
* add *idOrCreate* method to the *IdAware* interface
* introduce a new interface for *idOrCreate* method and handle it in *forceId* togheter with *IdAware*
* simply add an additional instance check for *OptionalIdentifiedDefinition* to actual *forceId* method, and invoke *idOrCreate* or *setId* accordingly.

I don't like very much option one and two. I think the last option will be the one with less impact on existing code, but it couples the fix to a specific class (*OptionalIdentifiedDefinition*); the third one may be a better fit and may leave doors open to fix similar cases on other type of *source* objects, but requires a bit more work.

[~davsclaus] , maybe you have a better solution in mind; can you give me some advice?

 
davsclaus:1610068406:2021-01-08T09:13:26.392+0000:1610068406:2021-01-08T09:13:26.392+0000:Thanks Marco.

Yeah I looked into this, and I am adding a setGeneatedId method on IdAware so we can use this method instead to know it was an auto assigned ID. 

You are welcome to create a PR with your unit test so we have that to help test my change.
davsclaus:1610070001:2021-01-08T09:40:01.126+0000:1610070001:2021-01-08T09:40:01.126+0000:Ah okay there is actually a bit more to this - the auto assigned ids, should be scrubbed before a route is created from the template, as currently it mistakenly would reuse pervious auto assigned ids, that cause the clash, but its often not a problem. But would be if you use JMX etc.
mcollovati:1610070599:2021-01-08T09:49:59.122+0000:1610070599:2021-01-08T09:49:59.122+0000:You're right. This was a concern I forgot to mention.
davsclaus:1610073473:2021-01-08T10:37:53.801+0000:1610073473:2021-01-08T10:37:53.801+0000:Thanks its fixed now"
0,CAMEL-16004,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.8.0,John Poth,John Poth,0,1,2021-01-07 13:36:15+00:00,2021-01-07 13:46:15+00:00,No Desc,
0,CAMEL-16003,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2021-01-07 09:49:49+00:00,2021-01-12 15:49:18+00:00,"Instead of our own home grown code, that over time has become harder to maintain due to many different ""good attempts"" but they have messed up the code.


If we use spring-rabbitmq then we can reimplement the component and base it on how we do it for camel-jms that uses spring-jms.


Then users can also use the spring cached connection factory etc. Also since rabbitmq is spring product then it makes sense to use their spring java client also.",
0,CAMEL-16002,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2021-01-07 09:09:50+00:00,2021-01-12 15:50:38+00:00,"The rabbitmq java client has automatic recovery out of the box
https://www.rabbitmq.com/api-guide.html#recovery


We can remove all the hacky code in camel-rabbitmq to cleanup it as its a bit of mess, and rely on the connection doing this automatic.","davsclaus:1609984242:2021-01-07T09:50:42.482+0000:1609984242:2021-01-07T09:50:42.482+0000:Lets rewrite the component using spring rabbitmq
davsclaus:1610437838:2021-01-12T15:50:38.424+0000:1610437838:2021-01-12T15:50:38.424+0000:use camel-spring-rabbitmq instead"
0,CAMEL-16001,New Feature,Minor,3.4.0,None,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Reji Mathews,0,4,2021-01-06 20:26:18+00:00,2021-02-17 21:14:58+00:00,New camel component to integrate with huawei cloud - [Simple Notification Services](https://support.huaweicloud.com/en-us/productdesc-smn/en-us_topic_0043394877.html),"davsclaus:1609969686:2021-01-07T05:48:06.150+0000:1609969686:2021-01-07T05:48:06.150+0000:Are you working on this?
contactreji:1610000885:2021-01-07T14:28:05.455+0000:1610000885:2021-01-07T14:28:05.455+0000:Yes [~davsclaus] . I will be taking up this task. The component code is ready. Am just waiting on the cloud sdk (https://github.com/huaweicloud/huaweicloud-sdk-java-v3) team to release the rc version (currently its beta). I hear that its coming in few days. 
njiang:1610479537:2021-01-13T03:25:37.650+0000:1610479537:2021-01-13T03:25:37.650+0000:[~contactreji] It's could be more easy for us to review the code if you can submit the PR earlier.

I think it is fine that the code still uses the rc version of Cloud SDK.

We can merge the code once the office version is released.
contactreji:1610697132:2021-01-15T15:52:12.084+0000:1610697132:2021-01-15T15:52:12.084+0000:Sounds good. Raising PR shortly for review
contactreji:1610720316:2021-01-15T22:18:36.440+0000:1610720316:2021-01-15T22:18:36.440+0000:A draft version is available for review at https://github.com/apache/camel/pull/4894 . I am still waiting on HuaweiCloud SDK team for their release candidate version to be published.
contactreji:1610722676:2021-01-15T22:57:56.346+0000:1610722676:2021-01-15T22:57:56.346+0000:PR was raised against 3.4.0 branch. As per review comments from [~acosentino], I will shortly raise a fresh PR against the master branch.
contactreji:1610964243:2021-01-18T18:04:03.902+0000:1610964243:2021-01-18T18:04:03.902+0000:Fresh PR created against master branch - https://github.com/apache/camel/pull/4900
contactreji:1610971318:2021-01-18T20:01:58.052+0000:1610971318:2021-01-18T20:01:58.052+0000:Conversation on [camel.zulipchat.com]([https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/huawei-cloud-components/near/221798759] )
contactreji:1611695219:2021-01-27T05:06:59.690+0000:1611695219:2021-01-27T05:06:59.690+0000:Most of the review comments have been accommodated and PR is updated. 

https://github.com/apache/camel/pull/4900
contactreji:1611782185:2021-01-28T05:16:25.250+0000:1611782185:2021-01-28T05:16:25.250+0000:Guess we can close this Jira now. PR was merged.
acosentino:1611786756:2021-01-28T06:32:36.340+0000:1611786756:2021-01-28T06:32:36.340+0000:I fixed some mistakes and added the component to kit. Thanks [~contactreji]
contactreji:1611945774:2021-01-30T02:42:54.167+0000:1611945774:2021-01-30T02:42:54.167+0000:Thats amazing. thanks [~acosentino]. cheers.!
contactreji:1613486521:2021-02-16T22:42:01.786+0000:1613486827:2021-02-16T22:47:07.970+0000:Opening this issue again regarding queries around licensing related work for this contribution. We will be working on contributing more huawei cloud components in coming days. I will be heading it for Huawei. Would like to confirm if we should submit the CCLA/ICLA as mentioned in the following link

[https://www.apache.org/licenses/contributor-agreements.html#submitting] 
acosentino:1613513089:2021-02-17T06:04:49.712+0000:1613513089:2021-02-17T06:04:49.712+0000:You're welcome to submit the ICLA, since you're the person who is submitting the PRs, but it's not required for sporadic contributions. Usually you should submit an ICLA to secretary, in case you'll become committer. For the CCLA, it's a bit different, because who will sign the CCLA should be someone with the authority to sign legal contracts and the CCLA should reports a list of contributors.

Up to you and your corporation. In terms of contributions, an ICLA is enough.
contactreji:1613567698:2021-02-17T21:14:58.528+0000:1613567698:2021-02-17T21:14:58.528+0000:ICLA submitted via email to [secretary@apache.org|mailto:secretary@apache.org]"
0,CAMEL-16000,Bug,Minor,3.7.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Unassigned,Antoine DESSAIGNE,0,3,2021-01-05 14:26:49+00:00,2021-01-07 12:26:31+00:00,"Hello,


When trying to update from 3.6.0 to 3.7.0 we noticed a regression in the type converter system.


The following route no longer works




from(""timer:foo?repeatCount=1"").
setBody(constant(Map.of(""a"", ""A"", ""b"", ""B""))).
convertBodyTo(Collection.class).
split(body()).log(""${body}"");




In 3.6.0 it finds the converter org.apache.camel.converter.CollectionConverter#toSet(java.util.Map<K,V>) but now in 3.7.0 it throws the following exception



Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.util.ImmutableCollections.MapN to the required type: java.util.Collection with value {a=A, b=B}
	at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:275)
	at org.apache.camel.support.MessageSupport.getMandatoryBody(MessageSupport.java:115)
	... 11 more




Can you have a look? Thank you very much","chardahe@redhat.com:1609963241:2021-01-07T04:00:41.408+0000:1609963241:2021-01-07T04:00:41.408+0000:Thanks [~antoine.dessaigne] for reporting it, I'll look into it
davsclaus:1609989097:2021-01-07T11:11:37.033+0000:1609989097:2021-01-07T11:11:37.033+0000:The optimized type converter requires a mapping pair of this unusual conversion from map to collection. As you then loose the keys.
That is not a sensible converter, and you are likely best with a message transformation where you on purpose does what you want.


davsclaus:1609989327:2021-01-07T11:15:27.125+0000:1609989327:2021-01-07T11:15:27.125+0000:Okay lets add that type converter since we have toSet that is the most sensible to use

In your code you should use
convertBodyTo(Set.class).



davsclaus:1609993591:2021-01-07T12:26:31.511+0000:1609993591:2021-01-07T12:26:31.511+0000:[~chardahe@redhat.com] I jumped in as its a core issue and it takes a bit to know how to do that, see this commit for the fix
https://github.com/apache/camel/commit/d734f80b00bf22095c774d9886e2593ac870c703

As for the type converters the order matters, and hence you need to know where to add it and what number to assign it."
0,CAMEL-15999,Bug,Major,3.7.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Claus Ibsen,Pascal Schumacher,0,3,2021-01-04 17:14:48+00:00,2021-01-11 08:20:29+00:00,"We tried updating camel-spring-boot from version 3.6.0 to 3.7.0.


Components using camel-caffeine-starter now fail to start because a property was not found:



2021-01-04 18:02:39.155 ERROR 18328 --- [           main] o.s.boot.SpringApplication               : Application run failed
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[http://{{http.username}}:{{http.password}}@{{http.host}}:{{http.port}}] <<< in route: Route(route1)[From[seda:in] -> [To[http://{{http.username}}:... because of Failed to resolve endpoint: http://{{http.username}}:xxxxxx@{{http.host}}:{{http.port}} due to: Property with key [http.username] not found in properties from text: http://{{http.username}}:{{http.password}}@{{http.host}}:{{http.port}}
       at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:229) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:73) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[camel-core-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:599) ~[camel-core-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:557) ~[camel-core-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2642) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2414) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2431) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:130) ~[camel-spring-3.7.0.jar:3.7.0]
       at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:167) ~[camel-spring-3.7.0.jar:3.7.0]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:426) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:943) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:591) ~[spring-context-5.3.2.jar:5.3.2]
       at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:144) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:767) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:759) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:426) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:326) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:1309) ~[spring-boot-2.4.1.jar:2.4.1]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:1298) ~[spring-boot-2.4.1.jar:2.4.1]
       at test.App.main(App.java:10) ~[classes/:na]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http://{{http.username}}:xxxxxx@{{http.host}}:{{http.port}} due to: Property with key [http.username] not found in properties from text: http://{{http.username}}:{{http.password}}@{{http.host}}:{{http.port}}
       at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:835) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:793) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123) ~[camel-support-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:43) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:36) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:829) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:575) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:227) ~[camel-core-reifier-3.7.0.jar:3.7.0]
       ... 26 common frames omitted
Caused by: java.lang.IllegalArgumentException: Property with key [http.username] not found in properties from text: http://{{http.username}}:{{http.password}}@{{http.host}}:{{http.port}}
       at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:250) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:146) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:104) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:88) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:61) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:256) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:155) ~[camel-base-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.resolvePropertyPlaceholders(AbstractCamelContext.java:1715) ~[camel-base-engine-3.7.0.jar:3.7.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:833) ~[camel-base-engine-3.7.0.jar:3.7.0]
       ... 33 common frames omitted




We are using Spring Boot 2.4.1.


I have created a simplified example, which can be run as a unit test or as a spring boot app:


https://github.com/PascalSchumacher/CamelSpringBootPropertyNotFoundWhenUsingCaffeineStarter


The example does not use camel-caffeine, but our real components do. 


When camel-caffeine-starter is removed from the pom, everything works fine. Our Camel Spring Boot components without camel-caffeine-starter work fine.","davsclaus:1609915508:2021-01-06T14:45:08.171+0000:1609915508:2021-01-06T14:45:08.171+0000:Thanks for the sample app, I have a fix in the works
pascalschumacher:1609923683:2021-01-06T17:01:23.819+0000:1609923683:2021-01-06T17:01:23.819+0000:Thank you very much for the quick fix! :)
santa.85:1610324324:2021-01-11T08:18:44.941+0000:1610324324:2021-01-11T08:18:44.941+0000:Same seems to be happening for camel-ehcache, would the fix cover that too?
davsclaus:1610324429:2021-01-11T08:20:29.817+0000:1610324429:2021-01-11T08:20:29.817+0000:Yeah its fixing all of those"
0,CAMEL-15998,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Andrea Cosentino,0,2,2021-01-04 15:42:08+00:00,2021-01-15 15:23:02+00:00,"We can specify something more through headers. The problem is similar to camel-git, we need to have a plain type as body and enrich the information through headers. It will be much more easier to use, instead of having to deal with egit pojos","acosentino:1610666460:2021-01-15T07:21:00.360+0000:1610666460:2021-01-15T07:21:00.360+0000:Done for commit and events. The other consumers provides complex object, so it's not so easy to define what to put in the body and what in headers.
bvahdat:1610693411:2021-01-15T14:50:11.233+0000:1610693411:2021-01-15T14:50:11.233+0000:Hi

I think we override one set header value with another one:

[https://github.com/apache/camel/blob/bd790e5afb5bd3d4fbe294138d4b0be111717847/components/camel-github/src/main/java/org/apache/camel/component/github/consumer/CommitConsumer.java#L75-L76]

Maybe it needs another header name for that?

And IMHO the downside of these changes is that as the github and / or git APIs evolve through time with more properties in those exposed POJOs of them then we continuously need to add them to the corresponding new headers as the time passes by. This however would not be necessary in case of the original implementation.
acosentino:1610695162:2021-01-15T15:19:22.351+0000:1610695162:2021-01-15T15:19:22.351+0000:Yeah, it's a copy/paste problem.

In this case the fields are just a subset of the original pojo. I don't think there is any values in having the whole Pojo, also end user may not know what kind of class will be in the body (for our fault, because it's not always well documented).

In this case I think the essential information are returned.
acosentino:1610695382:2021-01-15T15:23:02.558+0000:1610695382:2021-01-15T15:23:02.558+0000:Fixed."
0,CAMEL-15997,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.8.0,Alex Dettinger,Alex Dettinger,0,1,2021-01-04 15:09:43+00:00,2021-01-04 16:51:15+00:00,No Desc,aldettinger:1609750275:2021-01-04T16:51:15.955+0000:1609750275:2021-01-04T16:51:15.955+0000:Fixed in https://github.com/apache/camel/commit/d85f230d1b7acaee2594e5fc1b561dd2e4eb3268
0,CAMEL-15996,Bug,Major,2.24.0,,"
None
",Resolved,Invalid,None,Unassigned,Ravi Rama,0,2,2020-12-30 19:11:49+00:00,2020-12-30 19:34:32+00:00,"I am trying to receive salesforce change data capture event body from salesforce, but receiving null (empty message) value when there is any update on Account object, expecting complete response body. Can you please help, which version that I am supposed to use?


<dependencyManagement>                 <dependencies>                          <dependency>                                   <groupId>org.apache.camel</groupId>                                   <artifactId>camel-spring-boot-dependencies</artifactId>                                   <version>2.24.0</version>                                    <type>pom</type>                                   <scope>import</scope>                          </dependency>                 </dependencies>         </dependencyManagement>


 


Here is complete route builder


@Component


    class EventConsumerRouteBuilder extends RouteBuilder {


        @Override


        public void configure() throws Exception {


 


            SalesforceEndpointConfig config = new SalesforceEndpointConfig();


            config.setApiVersion(""49.0"");


            SalesforceComponent component = this.getContext().getComponent(""salesforce"", SalesforceComponent.class);


            component.setConfig(config);


 


            from(""salesforce:event/Order_Event__e?replayId=-1&rawPayload=true"")


                    .log(""Platform Event Received: ${body}"");


           


            //from(""salesforce:data/AccountChangeEvent?replayId=-1&rawPayload=true"")


            from(""salesforce:data/AccountChangeEvent?replayId=-1"")


            .log(""CDC Event Received: ${body}"");


           


        }


    }


Below are logs, I am using api version ""45.0"" and camel version ""2.24.0"". 2020-12-22 08:21:22.225  INFO 27340 — [ent@6475472c-48] o.a.c.c.s.i.s.SubscriptionHelper         : Subscribed to channel /data/AccountChangeEvent2020-12-22 08:23:11.596 DEBUG 27340 — [ent@6475472c-46] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [\{clientId=h3ectdw6piysatb1a1t7s1bopn5q, channel=/meta/connect, id=3, successful=true}]2020-12-22 08:23:11.596 DEBUG 27340 — [ent@6475472c-46] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=h3ectdw6piysatb1a1t7s1bopn5q, channel=/meta/connect, id=3, successful=true}2020-12-22 08:23:56.036 DEBUG 27340 — [ent@6475472c-45] o.a.c.c.s.i.s.SubscriptionHelper$5       : Received messages [{data={schema=qlbfz598kJgHdPdgIoLiLw, payload={LastModifiedDate=2020-12-22T13:23:57.000Z, Full_Account_Name_c=Test1234rc, ChangeEventHeader={commitNumber=10724561884739, commitUser=00556000004IScuAAG, sequenceNumber=1, entityName=Account, changeType=UPDATE, changedFields=[Ljava.lang.Object;@409e2f60, changeOrigin=com/salesforce/api/soap/50.0;client=SfdcInternalAPI/, transactionKey=0008ea61-2c18-977d-6f6f-a853fecd091a, commitTimestamp=1608643437000, recordIds=[Ljava.lang.Object;@2baf97bc}}, event=\{replayId=29127}}, channel=/data/AccountChangeEvent}, \{clientId=h3ectdw6piysatb1a1t7s1bopn5q, channel=/meta/connect, id=5, successful=true}]2020-12-22 08:23:56.036 DEBUG 27340 — [ent@6475472c-45] o.a.c.c.s.i.s.SubscriptionHelper         : Received Message: {data={schema=qlbfz598kJgHdPdgIoLiLw, payload={LastModifiedDate=2020-12-22T13:23:57.000Z, Full_Account_Name_c=Test1234rc, ChangeEventHeader={commitNumber=10724561884739, commitUser=00556000004IScuAAG, sequenceNumber=1, entityName=Account, changeType=UPDATE, changedFields=[Ljava.lang.Object;@409e2f60, changeOrigin=com/salesforce/api/soap/50.0;client=SfdcInternalAPI/, transactionKey=0008ea61-2c18-977d-6f6f-a853fecd091a, commitTimestamp=1608643437000, recordIds=[Ljava.lang.Object;@2baf97bc}}, event={replayId=29127}}, channel=/data/AccountChangeEvent}2020-12-22 08:23:56.040 DEBUG 27340 — [ent@6475472c-45] o.a.c.c.salesforce.SalesforceConsumer    : Received event /data/AccountChangeEvent on channel /data/AccountChangeEvent2020-12-22 08:23:56.062 DEBUG 27340 — [ent@6475472c-45] o.a.c.c.salesforce.SalesforceConsumer    : Received SObject: null2020-12-22 08:23:56.079  INFO 27340 — [ent@6475472c-45] testLog                                  : Exchange[Id: ID-LATL-4SV4KR2-1608643268617-0-1, ExchangePattern: InOnly, Properties: {CamelCreatedTimestamp=Tue Dec 22 08:23:56 EST 2020, CamelExternalRedelivered=false, CamelMessageHistory=[DefaultMessageHistory[routeId=route1, node=to1]], CamelToEndpoint=log://testLog?showAll=true}, Headers: {breadcrumbId=ID-LATL-4SV4KR2-1608643268617-0-1, CamelSalesforceChannel=/data/AccountChangeEvent, CamelSalesforceCreatedDate=null, CamelSalesforceEventType=null, CamelSalesforceReplayId=29127, CamelSalesforceTopicName=data/AccountChangeEvent}, BodyType: String, Body: null, Out: null: ]2020-12-22 08:23:56.086 DEBUG 27340 — [ent@6475472c-45] o.a.c.c.s.i.s.SubscriptionHelper         : [CHANNEL:META_CONNECT]: {clientId=h3ectdw6piysatb1a1t7s1bopn5q, channel=/meta/connect, id=5, successful=true}","acosentino:1609326829:2020-12-30T19:13:49.048+0000:1609326829:2020-12-30T19:13:49.048+0000:Ask on the users mailing list first
rcrama:1609327060:2020-12-30T19:17:40.726+0000:1609327060:2020-12-30T19:17:40.726+0000:Thanks Andrea. Is this one - users@camel.apache.org?
acosentino:1609327811:2020-12-30T19:30:11.922+0000:1609327811:2020-12-30T19:30:11.922+0000:Yes. The version is really old. Try with 2.25.2 or 2.25.3

 

 
rcrama:1609328072:2020-12-30T19:34:32.572+0000:1609328072:2020-12-30T19:34:32.572+0000:I tried even with ""2.25.3"", but did not work either."
0,CAMEL-15995,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-29 18:29:21+00:00,2021-01-06 11:56:44+00:00,"Related to CAMEL-15990 as refactoring this component, can benefit to be more similar to camel-jms, and its features.


The request/reply can be enhanced to be fully async / reactive. And some of the other options that camel-jms have.",
0,CAMEL-15994,Task,Minor,None,,"
None
",Resolved,Fixed,None,Andrea Cosentino,Sebb,0,1,2020-12-29 17:08:32+00:00,2020-12-29 20:41:19+00:00,"The links at https://camel.apache.org/download/#camel-kafka-connector are all broken.


The files apache-camel-kafka-connector-0.7.0-src.zip* do not exist; they appear to be called:
camel-kafka-connector-0.7.0-src.zip* instead.


Please fix the page!","githubbot:1609238623:2020-12-29T18:43:43.186+0000:1609238623:2020-12-29T18:43:43.186+0000:oscerd opened a new pull request #524:
URL: https://github.com/apache/camel-website/pull/524


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1609240004:2020-12-29T19:06:44.022+0000:1609240004:2020-12-29T19:06:44.022+0000:github-actions[bot] commented on pull request #524:
URL: https://github.com/apache/camel-website/pull/524#issuecomment-752207977


   🚀 Preview for e822ae9f7bd14d11f77a11b96a21b5f42dafa8d9 is available at https://pr-524--camel.netlify.app


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1609240174:2020-12-29T19:09:34.341+0000:1609240174:2020-12-29T19:09:34.341+0000:oscerd merged pull request #524:
URL: https://github.com/apache/camel-website/pull/524


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15993,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-27 12:19:53+00:00,2020-12-27 12:20:53+00:00,No Desc,
0,CAMEL-15992,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-27 12:13:36+00:00,2020-12-27 14:08:50+00:00,No Desc,
0,CAMEL-15991,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-27 12:13:15+00:00,2020-12-27 14:40:43+00:00,If we can optimize this for toD like some of the other messaging components,
0,CAMEL-15990,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-25 09:51:33+00:00,2021-01-06 11:56:38+00:00,"Instead of our own internal home grown pool, then lets add support for general connection pools that people are using with camel-jms etc. This can help make this component a bit more similar to camel-jms which better support sending to dynamic destinations.


Also the internal pool is per producer and cannot be shared where as the regular connection pools is capable of that.",davsclaus:1608940089:2020-12-26T07:48:09.457+0000:1608940089:2020-12-26T07:48:09.457+0000:At first lets make the existing pool more dynamic as for example spring-jms pool is using reflection and wont work so well in serverless / graalvm runtimes.
0,CAMEL-15989,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-24 07:32:19+00:00,2020-12-27 12:11:24+00:00,"We should look into adding support for optimized toD with camel-kafka, and also camel-vertx-kafka","davsclaus:1609041252:2020-12-27T11:54:12.025+0000:1609042280:2020-12-27T12:11:20.722+0000:- camel-kafka *DONE*
- camel-vertx-kafka *DONE*"
0,CAMEL-15988,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-23 16:53:57+00:00,2020-12-27 11:25:44+00:00,"This component can only send messages to fixed destinations.


We should add support for dynamic destinations like camel-jms has with its override header and toD.",
0,CAMEL-15987,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-23 13:20:40+00:00,2020-12-27 11:25:16+00:00,See if we can do this for camel-sjms also.,"davsclaus:1608765509:2020-12-24T07:18:29.811+0000:1608765509:2020-12-24T07:18:29.811+0000:This requires to not pool the producers as the current implementation is hardcoded to use producers that can only send to the original destination. spring-jms supports dynamic destinations, so we need to be able to do something like spring-jms does."
0,CAMEL-15986,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-23 09:53:00+00:00,2020-12-23 14:08:06+00:00,"For example if you setup an 2nd jms component with name wmq or jms2 or whatelse, then we should be able to detect that the dynamic aware is via base name jms.",
0,CAMEL-15985,Bug,Major,None,3.8.0,"
None
",Resolved,Cannot Reproduce,3.8.0,Unassigned,Claus Ibsen,0,1,2020-12-23 08:17:01+00:00,2021-01-06 14:49:56+00:00,"Reported on an older Camel 2.x version but there is a potential problem when a new JmsEndpoint / JmsProducer is created via toD and it creates a JmsInOnlyTemplate that seems to have a race condition causing a NPE in ConnectionFactory.


Using toD(""jms:queue:${property.queuename}) in a route which normally works fine but under high load it sometimes fails with:


(stacktrace for Camel 2.x)


java.lang.IllegalArgumentException: connectionFactory must be specified
        at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:321)
        at org.apache.camel.component.jms.JmsConfiguration.createConnectionFactory(JmsConfiguration.java:1656)
        at org.apache.camel.component.jms.JmsConfiguration.getConnectionFactory(JmsConfiguration.java:782)
        at org.apache.camel.component.jms.JmsConfiguration.createTemplateConnectionFactory(JmsConfiguration.java:1673)
        at org.apache.camel.component.jms.JmsConfiguration.getTemplateConnectionFactory(JmsConfiguration.java:835)
        at org.apache.camel.component.jms.JmsConfiguration.createInOnlyTemplate(JmsConfiguration.java:683)
        at org.apache.camel.component.jms.JmsEndpoint.createInOnlyTemplate(JmsEndpoint.java:316)
        at org.apache.camel.component.jms.JmsProducer.getInOnlyTemplate(JmsProducer.java:496)
        at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:416)
        at org.apache.camel.component.jms.JmsProducer.processInOnly(JmsProducer.java:394)
        at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:157)
        at org.apache.camel.processor.SendDynamicProcessor$1.doInAsyncProducer(SendDynamicProcessor.java:178)
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:439)","davsclaus:1608700903:2020-12-23T13:21:43.542+0000:1608700903:2020-12-23T13:21:43.542+0000:Cannot reproduce this on master branch from an unit test in camel-jms, and also with using load testing via http server from undertow and AB testing via hey."
0,CAMEL-15984,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-23 08:14:17+00:00,2020-12-23 14:07:58+00:00,"see CAMEL-13646


Lets see if we got a bit smarter this year, as it would benefit the JMS component",davsclaus:1608702370:2020-12-23T13:46:10.509+0000:1608702370:2020-12-23T13:46:10.509+0000:Also implemented this for camel-activemq
0,CAMEL-15983,Bug,Major,3.6.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Unassigned,Benjamin Zheng,0,1,2020-12-23 03:24:29+00:00,2020-12-23 05:46:55+00:00,"Did not set prev with key after compareTo, and prev value is always the first item of parameter.keySet(), if keyset like this: a, c, b, and the value of sort after for loop is false, but its shoud be true. 





when I build two routes with similar to-endpoint, build 2nd route will trigger registerEndpointCallback method, this makes AbstractCamelContext have two endpoint with similar endpointkey in endpoints(EndpointRegistry), then if I remove one of them by removeRoute method, camel context will invoke removeEndpoints by matchEndpoint at line 742, camel will stop all of them(include its connection pool) but did not remove from EndpointRegistry(key is not match), then when new exchange passing to to-endpoint, connection pool shut down exception is arised.





plz have alook about this issue.",
0,CAMEL-15982,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,2,2020-12-22 08:35:07+00:00,2021-09-02 10:33:42+00:00,"Mind we need to be aligned with the Camel Kafka Connector project, and also vertx-kafka as we have a Camel component for that too. And potentially also debezium.","orpiske:1630550022:2021-09-02T10:33:42.171+0000:1630550022:2021-09-02T10:33:42.171+0000:This has been resolved in previous versions of Camel 3.x. Therefore, marking as resolved."
0,CAMEL-15981,Dependency upgrade,Minor,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,Alex Dettinger,0,3,2020-12-21 10:06:36+00:00,2023-05-27 07:48:42+00:00,"See discussion in context here: https://github.com/apache/camel-quarkus/pull/2088#discussion_r546605397.


Keep in mind that 2.8.6 doesn't work in OSGi.","ppalaga:1608522503:2020-12-21T11:48:23.483+0000:1608522503:2020-12-21T11:48:23.483+0000:Blocked by https://github.com/google/gson/issues/1677
davsclaus:1662111028:2022-09-02T17:30:28.725+0000:1662111028:2022-09-02T17:30:28.725+0000:We are on java 11 now"
0,CAMEL-15980,Bug,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Mohammed Sohaib,0,3,2020-12-21 03:57:42+00:00,2020-12-21 07:22:41+00:00,"Dear Team,


We are using the Apache Camel Core version of 2.21.1 in our Project. Our Project is a Rest Web Service application to communicate between client/server.


We are facing a memory leak issue with the current Jira version.


 


Question: What is the next higher version we can upgrade to resolve this issue?


 


Kindly guide me accordingly.","shohaib:1608494483:2020-12-21T04:01:23.029+0000:1608494483:2020-12-21T04:01:23.029+0000:The below exception, identified in the heap dump analsis. We are using the server as IBM WebSphere.

 


One instance of ""com.sun.jmx.mbeanserver.JmxMBeanServer"" loaded by ""<system class loader>"" occupies 583,304,320 (22.88%) bytes. The instance is referenced by com.ibm.ws.management.component.JVMMBean @ 0x6c087acf0 , loaded by ""<system class loader>"". The memory is accumulated in one instance of ""java.util.HashMap$Node[]"" loaded by ""<system class loader>"".

Keywords
com.sun.jmx.mbeanserver.JmxMBeanServer
java.util.HashMap$Node[]

 

 
davsclaus:1608500429:2020-12-21T05:40:29.465+0000:1608500429:2020-12-21T05:40:29.465+0000:Ask on the mailing list first, or the chat room
shohaib:1608501727:2020-12-21T06:02:07.525+0000:1608501840:2020-12-21T06:04:00.003+0000:Hi,
 Meaning?

I want to upgrade into the next higher version.

Wanted to know which version will be more suitable to resolve this memory leakage issue.

Please check the attachment with this Jira ticket in reference to the error message.
acosentino:1608503914:2020-12-21T06:38:34.089+0000:1608503914:2020-12-21T06:38:34.089+0000:It means ask on [users@camel.apache.org|mailto:users@camel.apache.org] or [dev@camel.apache.org|mailto:dev@camel.apache.org]

The Jira is for real bugs and not for inquiries like this. 

2.21.1 is really old, we are going to release 2.25.3 as latest version for 2.x, you can try it once released or test with 2.25.2
shohaib:1608506561:2020-12-21T07:22:41.572+0000:1608506561:2020-12-21T07:22:41.572+0000:Okay.

 

Thanks for the confirmation."
0,CAMEL-15979,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-20 14:49:44+00:00,2020-12-20 20:35:17+00:00,"As today if you want to include all xml files you need to use include=.xml which is a regular expression, and some users may get this wrong. And if you need to include both xml and json files, then you need include=.(xml|json).


So we can also offer includeExt=xml,json
where you can specify multiple separated by comma",
0,CAMEL-15978,Improvement,Minor,None,"4.0-RC2, 4.0.0","

help-wanted

",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2020-12-19 09:40:36+00:00,2023-07-24 18:01:01+00:00,"There is a 1.0.x version of their library.
Maybe we need a OSGi bundle for it too (not sure)","davsclaus:1610602561:2021-01-14T13:36:01.126+0000:1610602561:2021-01-14T13:36:01.126+0000:Okay this requires also upgrading smack to 4.4 as then it uses jxmpp 1.0.x library.
And after that there are some security tests failing with certificates (yeah lovely). So its actually a harder work to do.
davsclaus:1690192861:2023-07-24T18:01:01.755+0000:1690192861:2023-07-24T18:01:01.755+0000:We have upgraded to 1.0.3"
0,CAMEL-15977,Improvement,Major,None,2.25.3,"
None
",Resolved,Fixed,2.25.3,Claus Ibsen,Claus Ibsen,0,1,2020-12-19 09:29:04+00:00,2020-12-19 09:30:03+00:00,To upgrade to latest netty to pickup latest bugs and security issues,
0,CAMEL-15976,Improvement,Major,None,2.25.3,"
None
",Resolved,Fixed,2.25.3,Claus Ibsen,Claus Ibsen,0,1,2020-12-19 09:28:29+00:00,2020-12-19 09:29:58+00:00,To make it work in apache karaf,
0,CAMEL-15975,Task,Major,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,Andrea Cosentino,0,2,2020-12-18 15:01:34+00:00,2022-09-02 17:29:43+00:00,"Headers ideally should be placed in classes like the constants classes we have around the components. We should try to place this class always in the same package, so we could be able to list the headers automatically in the catalog and document them, we could also add some annotations for this purpose, like a little description or something. This could be handy for documentation but also for re-using catalog in subprojects.


cibsen@e-ma.net lb nferraro this is just a placeholder for discussion and maybe find a way.",davsclaus:1662110983:2022-09-02T17:29:43.888+0000:1662110983:2022-09-02T17:29:43.888+0000:We have headers in constant classes and they are annotated and in the metadata json
0,CAMEL-15974,Bug,Minor,2.25.2,"3.7.1, 2.25.4, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 2.25.4, 3.8.0",Claus Ibsen,Iliya Grushevskiy,0,2,2020-12-18 12:47:25+00:00,2020-12-23 08:08:25+00:00,"Dynamic parameters enclosed inside RAW are not resolved inside HttpSendDynamicAware.createPreProcessor method and get passed to CamelHttpQuery enclosed to RAW.


Endpoint example:




<toD uri=""https4://example.com/path?parameter=RAW(${headers.a}-${headers.b})""/>




The actual query request will be: 



https4://example.com/path?parameter=RAW(a-b)","davsclaus:1608427144:2020-12-20T09:19:04.322+0000:1608427144:2020-12-20T09:19:04.322+0000:On Camel 2.x you can try without the RAW()
iliya.gr:1608609180:2020-12-22T11:53:00.609+0000:1608609180:2020-12-22T11:53:00.609+0000:It will work without placing RAW in most cases, only case I can imagine: {code}https4://example.com/path?parameter=RAW(${headers.a}&${headers.b}){code} (the & will break URL in that case).

I can provide patch for Camel 2.x"
0,CAMEL-15973,Improvement,Major,None,3.8.0,"
None
",Resolved,Implemented,3.8.0,Andrea Cosentino,Andrea Cosentino,0,2,2020-12-18 12:14:16+00:00,2021-02-02 13:03:38+00:00,"Instead of having a plain string for the topic security policy, we should provide it as file to be loaded from classpath: http: etc.","davsclaus:1612235151:2021-02-02T11:05:51.268+0000:1612235151:2021-02-02T11:05:51.268+0000:Andrea do you have time to work on this soon or should we move it to 3.9
acosentino:1612235245:2021-02-02T11:07:25.832+0000:1612235245:2021-02-02T11:07:25.832+0000:I'll finish this week, before release cut
acosentino:1612242208:2021-02-02T13:03:28.962+0000:1612242208:2021-02-02T13:03:28.962+0000:This is already implemented"
0,CAMEL-15972,Improvement,Major,None,2.25.3,"
None
",Resolved,Fixed,2.25.3,Claus Ibsen,Claus Ibsen,0,1,2020-12-18 11:42:26+00:00,2020-12-24 08:47:19+00:00,Lets upgrade to latest SB 2.1.x,
0,CAMEL-15971,Bug,Minor,2.23.2,"3.7.1, 2.25.4, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 2.25.4, 3.8.0",Claus Ibsen,Kurt Stam,0,2,2020-12-18 11:25:06+00:00,2020-12-20 16:19:53+00:00,"I'm trying to use the File component to move all *.txt files from the 'source' to the 'target' directory. 




        public void configure() throws Exception {
            from(""file://source?fileName=%24%7Bfile%3Aonlyname.noext%7D.txt"")
                .to(""log://org.apache.camel.howto?showAll=true"")
                .to(""file://target"");
        }




I'm configuring the fileName as ${file:onlyname.noext}.txt. 


https://github.com/apache/camel/blob/camel-2.25.x/camel-core/src/main/java/org/apache/camel/language/simple/SimpleLanguage.java#L85


However, not any file names match ever because the ${file:onlyname.noext} is always null because it's trying to obtain the file name from the exchange which is completely empty.


It seems to me that you should not create a DummyExchange:
https://github.com/apache/camel/blob/camel-2.25.x/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConsumer.java#L701


Please find a demo project attached.","davsclaus:1608262374:2020-12-18T11:32:54.400+0000:1608262374:2020-12-18T11:32:54.400+0000:If you only want to include .txt files, then use include option. 
https://camel.apache.org/components/2.x/file-component.html

Mind include is a regexp pattern, so use include=.*txt
kstam:1608265832:2020-12-18T12:30:32.011+0000:1608265832:2020-12-18T12:30:32.011+0000:We don't support that feature in Syndesis (yet). I can't do it this way?
davsclaus:1608452393:2020-12-20T16:19:53.749+0000:1608452393:2020-12-20T16:19:53.749+0000:Okay fixed this in 2.25.x branch"
0,CAMEL-15970,Task,Major,None,,"
None
",Resolved,Auto Closed,None,Zoran Regvart,Zoran Regvart,0,2,2020-12-18 11:23:52+00:00,2022-01-16 18:46:34+00:00,"When we re-organize content on the website we might accidentally shuffle the URLs around. We do check if within the website links are not broken, but we could also check if we changed any of the URLs so we know we broke links from other websites pointing to Camel and that we might need to add a redirect from old to the new content.
Perhaps looking up the current sitemap and the built sitemap on the pull request might be a way to check for any changes in the URL.","davsclaus:1642329994:2022-01-16T18:46:34.868+0000:1642329994:2022-01-16T18:46:34.868+0000:Tracked by camel-website issue tracker now:
https://github.com/apache/camel-website/issues/758"
0,CAMEL-15969,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-12-18 10:30:37+00:00,2020-12-18 12:14:17+00:00,"Instead of having a plain string for the topic security policy, we should provide it as file to be loaded from classpath: http: etc.


Now that we are using SNS FIFO too, the policy will be longer and more complex.",
0,CAMEL-15968,Improvement,Minor,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Andrea Cosentino,0,2,2020-12-18 09:13:30+00:00,2023-07-25 06:51:41+00:00,"There are more gateway classes available, we should support them.","davsclaus:1612316357:2021-02-03T09:39:17.620+0000:1612316357:2021-02-03T09:39:17.620+0000:Andrea, do you know or can point to which new classes is added?
acosentino:1623965525:2021-06-18T05:32:05.398+0000:1623965525:2021-06-18T05:32:05.398+0000:Not specifically ones, but they added some more to their SDK, so probably we can have a look at adding some of them."
0,CAMEL-15967,Improvement,Major,None,,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Andrea Cosentino,0,1,2020-12-18 09:12:45+00:00,2020-12-18 09:18:48+00:00,"Actually we return a POJO, but since this stuff is used to temporary get credentials or assume a role, it makes sense to return some of the critical information as headers.","acosentino:1608254317:2020-12-18T09:18:37.972+0000:1608254317:2020-12-18T09:18:37.972+0000:Looking at it a bit better, the pojo is still makes sense."
0,CAMEL-15936,Bug,Major,3.4.0,3.4.0,"
None
",Resolved,Invalid,3.4.0,Unassigned,Prabhu Sharma,0,2,2020-12-11 07:54:03+00:00,2020-12-11 07:58:02+00:00,"Is there .HttpConfiguration$Customizer present in updated camel 3.4.0  version becuase this class is not found by org.eclipse.jetty.aggregate.jetty-all-server


 


Error Detail - 


org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:


Activator start error in bundle org.ops4j.pax.web.pax-web-jetty [335].


at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)


at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)


at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)


at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)


at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)


at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)


at java.base/java.lang.Thread.run(Thread.java:834)


Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.ops4j.pax.web.pax-web-jetty [335].


at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)


at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)


at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)


at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)


at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)


at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)


at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)


... 6 more


Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/HttpConfiguration$Customizer


at org.ops4j.pax.web.service.jetty.internal.Activator.start(Activator.java:109)


at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)


at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)


... 12 more


Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.server.HttpConfiguration$Customizer not found by org.eclipse.jetty.aggregate.jetty-all-server [365]


at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)


at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)


at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)


at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)


at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)


at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)


at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)


at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)


at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)


at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)


... 15 more


Error executing command: Error restarting bundles:


Activator start error in bundle org.ops4j.pax.web.pax-web-jetty [335].",acosentino:1607644682:2020-12-11T07:58:02.289+0000:1607644682:2020-12-11T07:58:02.289+0000:Please ask on the users mailing list or dev mailing list.
0,CAMEL-15935,Task,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jared Whiklo,0,1,2020-12-10 23:10:58+00:00,2020-12-11 15:56:19+00:00,"Two snippets on this page are missing when compared to the old documentation


The snippets do exist in the main user manual page on properties.",
0,CAMEL-15934,Task,Major,None,None,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-10 12:52:31+00:00,2020-12-14 12:06:24+00:00,There is a new 3.6.x version we should upgrade,
0,CAMEL-15933,New Feature,Minor,None,None,"
None
",Closed,Fixed,3.8.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-12-10 11:13:12+00:00,2021-01-27 12:50:46+00:00,"Stitch is an ETL platforms running in the cloud. So far there is no good way to produce the data from Camel to Stitch, hence it would make sense to have a producer only Stitch component that produces data over Stitch Import API.
References:



Stitch Import API: https://www.stitchdata.com/docs/developers/import-api/",
0,CAMEL-15932,Task,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-12-10 10:46:53+00:00,2020-12-10 11:08:46+00:00,Actually the documentation is the same as camel-google plain component. We need to fix this.,
0,CAMEL-15931,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Scott Anderson,0,2,2020-12-09 15:37:12+00:00,2020-12-10 06:41:49+00:00,"Our system is configured with spring boot and there is a bean named pulsarClient in the context. In camel pre 3.6, this configuration works:


camel:
  component:
  pulsar:
    enabled: true
    subscription-type: SHARED
    pulsar-client: '#bean:pulsarClient'


In camel 3.6, it throws an exception:


Property: camel.component.pulsar.pulsar-client
 Value: #bean:pulsarClient
 Origin: class path resource [application-default.yml]:112:22
 Reason: No converter found capable of converting from type [java.lang.String] to type [org.apache.pulsar.client.api.PulsarClient]","davsclaus:1607501134:2020-12-09T16:05:34.457+0000:1607501134:2020-12-09T16:05:34.457+0000:Yeah that should be fixed in 3.7, so try SNAPSHOT or wait for the 3.7 release
diemscott:1607504827:2020-12-09T17:07:07.677+0000:1607504827:2020-12-09T17:07:07.677+0000:Hi! Thank you for the quick response.

 

I've run a test with the 3.7.0-SNAPSHOT and the result is the same message.
davsclaus:1607553709:2020-12-10T06:41:49.123+0000:1607553709:2020-12-10T06:41:49.123+0000:You need to build both camel and camel-spring-boot. I just tried and it works for me.
"
0,CAMEL-15930,Bug,Minor,"3.4.4, 3.6.0",None,"
None
",Resolved,Fixed,"3.7.1, 3.8.0",Claus Ibsen,Jeroen Weijers,0,2,2020-12-09 12:05:59+00:00,2020-12-14 08:21:11+00:00,"The ClusteredRouteController cannot start a clustered route (in Camel 3.4.4, Camel 3.6 and probably other versions of Camel 3).


The problem can be reproduced with example camel-example-spring-boot-clustered-route-controller from the examples project (https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-clustered-route-controller).


When an instance is the lead in the cluster and tries to start the routes an exception is thrown:
 java.lang.UnsupportedOperationException: Operation not supported as route clustered is clustered","davsclaus:1607736862:2020-12-12T09:34:22.896+0000:1607736862:2020-12-12T09:34:22.896+0000:The ClusteredRouteController is experimental (see its annotation on the class level).
davsclaus:1607740727:2020-12-12T10:38:47.334+0000:1607740727:2020-12-12T10:38:47.334+0000:Okay so it looks like the problem is that its own startup of routes hits the public API of starting routes, that the route controller would deny the end user to do manually such as via JMX - because a route is under clustering management."
0,CAMEL-15929,Task,Major,None,,"
None
",Resolved,Done,None,Zoran Regvart,Claus Ibsen,0,4,2020-12-09 10:29:42+00:00,2020-12-10 07:47:15+00:00,"Apache Camel K -> Camel K
Apache Camel Karaf -> Camel Karaf
Camel Quarkus Examples -> SHOULD BE REMOVED
Camel Spring Boot Starters -> Camel Spring Boot


And can we order them so Camel Components are in the top?


Camel Components","davsclaus:1607481039:2020-12-09T10:30:39.842+0000:1607481039:2020-12-09T10:30:39.842+0000:[~zregvart] wonder if you could take a look. I can do a git grep to find text and change that, but not sure how to remove that quarkus examples from the menu picker.
davsclaus:1607481047:2020-12-09T10:30:47.689+0000:1607481047:2020-12-09T10:30:47.689+0000:See screenshot
zregvart:1607484890:2020-12-09T11:34:50.093+0000:1607484890:2020-12-09T11:34:50.093+0000:Sure thing, I'll look into this.
zregvart:1607484995:2020-12-09T11:36:35.612+0000:1607484995:2020-12-09T11:36:35.612+0000:[~ppalaga] are you okay with the removal of Camel Quarkus examples?
zregvart:1607487970:2020-12-09T12:26:10.314+0000:1607487970:2020-12-09T12:26:10.314+0000:Just found out that I can also add LTS via {{display_version}}, so I'll do that as well, for example for Camel Components, Camel Spring Boot and Camel Karaf, we can have ""3.4.x (LTS)"" as version.
zregvart:1607490361:2020-12-09T13:06:01.492+0000:1607490361:2020-12-09T13:06:01.492+0000:The order of components is determined by title, they're sorted by it alphabetically (https://gitlab.com/antora/antora/-/blob/1c4089164b11f5a7ed70960188ed9dcd52d52d07/packages/page-composer/lib/build-ui-model.js#L51). We can add our own ordering in the partial used in the theme. I'd set the manual first, component reference second, and the rest of the documentation components in alphabetical order. Does that make sense [~davsclaus]?
davsclaus:1607492229:2020-12-09T13:37:09.765+0000:1607492229:2020-12-09T13:37:09.765+0000:Yeah that is okay
githubbot:1607505385:2020-12-09T17:16:25.599+0000:1607505385:2020-12-09T17:16:25.599+0000:zregvart opened a new pull request #506:
URL: https://github.com/apache/camel-website/pull/506


   We want the manual first, components next, and the rest of the
   sub-projects after them sorted alphabetically.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1607506797:2020-12-09T17:39:57.031+0000:1607506797:2020-12-09T17:39:57.031+0000:zregvart merged pull request #506:
URL: https://github.com/apache/camel-website/pull/506


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1607506953:2020-12-09T17:42:33.937+0000:1607506953:2020-12-09T17:42:33.937+0000:The only thing is the removal of Camel Quarkus Examples component, waiting on feedback from [~ppalaga] on that.
ppalaga:1607518292:2020-12-09T20:51:32.895+0000:1607518292:2020-12-09T20:51:32.895+0000:bq. Peter Palaga are you okay with the removal of Camel Quarkus examples?

Yes, no problem with that.
zregvart:1607557635:2020-12-10T07:47:15.582+0000:1607557635:2020-12-10T07:47:15.582+0000:Last of the changes should be visible on the website in 15mins or so, when the build completes."
0,CAMEL-15928,Bug,Major,3.4.4,"3.7.1, 3.4.6, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.4.6, 3.8.0",Unassigned,Alex Liroyd,0,2,2020-12-08 14:53:04+00:00,2020-12-23 09:47:53+00:00,"Currently Timeout exceptions does not trigger circuit breaker. But they should. I don't want to continue spam my server, if it slightly started dying.


I tried to hot-fix in the next way - hot_fix.diff


The idea behind patch is next. Currently we wrap our call with circuit breaker and only after that with time limiter. So, circuit breaker doesn't know anything about time-outs. 


And basically I do opposite - initially wrap call with time limiter and only after that, wrap it with circuit breaker. So circuit breaker will aware about time-out exception and can react properly.


The issue which I have afterward, that, for cases when circuit breaker was open, I started receiving blank 200 OK response.


I tried to fix it by removing recover(fallbackTask) part at all:


 




// Try.ofCallable(task).recover(fallbackTask).andFinally(() -> callback.done(false)).get(); //old code
Try.ofCallable(task).andFinally(() -> callback.done(false)).get(); // new line of code




And seems like it works fine. But tests are failing, and I'm not sure how exactly it should be fixed. 


Also another fix, which seems like works fine and tests are not failing:


CircuitBreakerFallbackTask


 




} else if (throwable instanceof CallNotPermittedException) {
    // the circuit breaker triggered a call rejected
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_SUCCESSFUL_EXECUTION, false);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_FROM_FALLBACK, false);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_SHORT_CIRCUITED, true);
    exchange.setProperty(CircuitBreakerConstants.RESPONSE_REJECTED, true);
    throw RuntimeExchangeException.wrapRuntimeException(throwable); // new line of code
    //return exchange; // old code




 


 


Please, assist.","davsclaus:1607464848:2020-12-09T06:00:48.745+0000:1607464848:2020-12-09T06:00:48.745+0000:How do you wrap your call with timeout, eg show us what you do
Liroyd:1607465454:2020-12-09T06:10:54.977+0000:1607473371:2020-12-09T08:22:51.950+0000:Did you mean, how to reproduce?

Currently I have simple camel route
{code:xml}
<circuitBreaker configurationRef=""{{myName}}"">
       <to uri=""direct:someUri""/>
</circuitBreaker>{code}
In config, I have timeout:
{code:java}
Resilience4jConfigurationDefinition config = new Resilience4jConfigurationDefinition();
config.circuitBreakerRef(cbName)
        .timeoutEnabled(true)
        .timeoutDuration(100)
        .timeoutCancelRunningFuture(true);
{code}
 

If you ment, how did I fix it, then please check attached patch [^hot_fix.diff]

^Note: fix for fallback is not included.^
davsclaus:1607480277:2020-12-09T10:17:57.640+0000:1607480277:2020-12-09T10:17:57.640+0000:Okay so you want in case of a timeout, the fallback task to not run? On top of my head a fallback is only run if you have <onFallback> in the route, and you do not have that.

Or do you say that only if there is a timeout exception than skip any kind of fallback and fail the call? 
Liroyd:1607481481:2020-12-09T10:38:01.990+0000:1607481481:2020-12-09T10:38:01.990+0000:I don't have fallback for my particular case, but I have routes with fallback in general. And it somehow supposed to work.

What I'm saying, that time-out exception should trigger circuit breaker, regardless of existence of fallback. 

If in my route I have fallback configuration and time-out exception occurred, I would expect next behavior:
 # Circuit breaker counter should be increased (added one more failed call to statistic)
 # Fallback logic should be executed

 
Liroyd:1607481719:2020-12-09T10:41:59.980+0000:1607481730:2020-12-09T10:42:10.527+0000:From the other side, it also should depends on which level fallback is configured. Later on will come up with examples

 
Liroyd:1607500768:2020-12-09T15:59:28.382+0000:1607500802:2020-12-09T16:00:02.999+0000:E.g. Case#1:
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
       <to uri=""direct:route1""/>
       <onFallback>
           <to uri=""route2""/>
       </onFallback>
   </circuitBreaker>
</route>
{code}
Time-out configuration should be applied to both <to uri> and <onFallback> logic. So, if I set 10sec for time-out, it doesn't matter on which step I'm currently on, execution should be interrupted.

E.g. >10 sec on main uri = interrupt.

5 sec on  main uri + >5sec on fallback = interrupt.

Case#2
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
        <to uri=""direct:route#1""/>
   </circuitBreaker>
   <onFallback>
        <to uri=""rout#2""/>
   </onFallback>
</route>
{code}
If time-out exception, onFallback should be still executed, because it's outside of time-out configuration

E.g. Case#3:
{code:xml}
<route id=""routeName"">
   <circuitBreaker configurationRef=""{{config}}"">
       <to uri=""direct:route1""/>
   </circuitBreaker>
</route>{code}
Current case from ticket - no fallback, time-out applied to main uri.

Note: I didn't test first two cases, but based on xml definition, they should work.
davsclaus:1607501249:2020-12-09T16:07:29.153+0000:1607501249:2020-12-09T16:07:29.153+0000:I would actually not think this is how circuit breakers work. The timeout is on the normal task, the fallback runs indepently and is not under timeout or the likes. The goal of the fallback is to do some simpler task that you can use instead, such as returning a fixed response, or last known good response (from a cache) or something.
Liroyd:1607502491:2020-12-09T16:28:11.267+0000:1607502511:2020-12-09T16:28:31.477+0000:Currently we have logic like, go to the system#1, on fallback go to the system#2. Both calls should be wrapped in different circuit breakers. So, fallback in my case could take a while.

Moreover, I would like to have one time-out for operation itself (e.g. 10 sec for this route in total) and separate time-outs for each of its parts. Not sure, how it should be properly configured.
Liroyd:1608020123:2020-12-15T16:15:23.342+0000:1608020123:2020-12-15T16:15:23.342+0000:Any suggestions, how fallback issue can be solved? I would gladly provide PR for this, but not sure how to fix it correctly.
Liroyd:1608270825:2020-12-18T13:53:45.269+0000:1608518933:2020-12-21T10:48:53.949+0000:Hello, I did a small investigation, and I want to insist that it's a critical bug and not a major improvement:).

 

Regarding initial issues - resilience4J provides ability to select explicitly, which errors should trigger circuit breaker and which should not. 

And you can specify TimeoutException as one of those. And it works perfectly, when using pure resilience4J. If you specifies TimeoutException, it will trigger CB, if no, then no.

Camel-resilience4j also provides ability to select list off exceptions. But it's not possible to select TimeoutException as one for triggering CB. Yes, you can provide it for config, but camel itself will never treat it correctly.

 

*And I found another issue with fallback.* Basically fallback for such camel routes will be executed only in one case - yes, only in case of TimeoutException. Example:

 
{code:java}
<route id=""myROute"">
    <from uri=""direct:myURI""/>
    <circuitBreaker configurationRef=""{{myConfig}}"">
        <to uri=""myExecutionRoute""/>
        <onFallback>
            <bean method=""test"" ref=""myFallbackBean""/>
        </onFallback>
    </circuitBreaker>
</route>
{code}
 

For such configuration, onFallback will be executed only when we receive TimeoutException.

The rootcause for both issue is the same - currently ResilienceProcessor wraps task CB first, and only after that wraps it in TimeLimiter.

 

Regarding fallback - currently it's called like:

 
{code:java}
Try.ofCallable(task).recover(fallbackTask).andFinally(() -> callback.done(false)).get();
{code}
 

_recover_ executes _fallback_ only if - _this.isFailure()_,

_Try.ofCallable(task)_ returns _Failure_ only for TimeoutExceptions. -All other exceptions will be catched by _MethodInfo#MethodInvocation#proceed_ - therefore it will be success for every other exception.- Updated: see my last comment regarding rootcause.

 

I will try to find a solution, but any help would be appreciable.
Liroyd:1608292785:2020-12-18T19:59:45.781+0000:1608292912:2020-12-18T20:01:52.362+0000:Please check attached patch: [^camel_fix_for_fallback.diff]

 

*Some explanation for fix:*
 # The idea is the same : wrap in time-out, then wrap in circuit-breaker
 # I had to remove - CircuitBreakerTimeoutTask, because fallback was not triggered for regular exceptions
 # processInCopy - it's just copy-paste, what u had in task
 # throw exception is added to fallback(where we don't have registered any fallback)
 throw RuntimeExchangeException.wrapRuntimeException(throwable);
 because, otherwise for case when CB is OPEN, I would not able to receive target exception as result of route execution
 Note: probably //exchange.setException(throwable); would be enough, but in this case ResilienceRouteRejectedTest is failing, and I decided to not touch it

That's pretty much it.

 

*Cases which tested:*
 # No fallback configured:
{code:java}
<route id=""myRoute"">
    <from uri=""myRouteID""/>
    <circuitBreaker configurationRef=""{{myCB}}"">
        <to uri=""direct:myExecute""/>
    </circuitBreaker>
</route>{code}
 ## Throw exception, which is not in ""recordException"" for CB
 AR=ER - received exception on client, CB is not triggered
 ## Throw exception, which is in ""recordException"" for CB
 AR=ER - received exception on client, CB is triggered 
 AR2=ER2 - if CB is open - get CB open exception right away
 ## Set time-out
 ### If time-out exception is in recorded for CB
 AR=ER CB is triggered
 ### if time-out is not in recorded for CB
 AR=ER CB is not triggered
 # Fallback is configured:
{code:java}
<route id=""myRoute"">
    <from uri=""myRouteID""/>
    <circuitBreaker configurationRef=""{{myCB}}"">
        <to uri=""direct:myExecute""/>
        <onFallback>
            <bean method=""test"" ref=""myFallback""/>
        </onFallback>
    </circuitBreaker>
</route>{code}
 ## Throw exception, which is not in ""recordException"" for CB
 AR=ER - CB is not triggered. Fallback executed
 ## Throw exception, which is in ""recordException"" for CB
 AR=ER - CB is triggered. Fallback is executed
 AR2=ER2 - if CB is open - initial call falls right away without any execution + fallback is executed
 ## Set time-out
 ### If time-out exception is in recorded for CB
 AR=ER CB is triggered + fallback is executed
 ### if time-out is not in recorded for CB
 AR=ER CB is not triggered, fallback is executed

Note: so basically fallback is executed for every case

 

[~davsclaus], please check patch and my explanation.

I really need this fix in 3.4.5. I will be able to create PR on Monday. Just take a look, and say, what do you think. I basically tested all existing cases + change itself is not really huge.
Liroyd:1608520434:2020-12-21T11:13:54.676+0000:1608535870:2020-12-21T15:31:10.087+0000:I wanted to write a test, which proofs my patch, and I was surprised, that there are already tests, which actually works. E.g. for fallback ResilienceRouteFallbackTest.
 And now I finally found a rootcause. In my previous comment I wrote:
{quote}All other exceptions will be catched by MethodInfo#MethodInvocation#proceed - therefore it will be success for every other exception.
{quote}
It's not quite correct. All other exceptions will be catched by CircuitBreakerTimeoutTask
{code:java}
  public Exchange get() {
            try {
                return future.call();
            } catch (Exception e) {
                exchange.setException(e);
            }
{code}
And _Try.ofCallable(task)_ will return true.

*The reason, why tests aren't failing,* that almost all of them are executed without time-out configuration, e.g.:
{code:java}
.circuitBreaker().inheritErrorHandler(true).to(""mock:a"").throwException(new IllegalArgumentException(""Forced"")).end().to(""log:result"").to(""mock:result"");
{code}
So, code is not wrapped in CircuitBreakerTimeoutTask, which catches exception:
{code:java}
        if (timeLimiterConfig != null) {
            // timeout handling is more complex with thread-pools
            final CircuitBreakerTimeoutTask timeoutTask = new CircuitBreakerTimeoutTask(task, exchange);
            Supplier<CompletableFuture<Exchange>> futureSupplier;
...
{code}
I basically added time-outs to every test - [^failed_tests_with_time_out.patch], and now, as I expected, 4 of them are failing (actually 5 - SpringResilienceRouteFallbackTest - will also fail -after changing it in spring config):

!image-2020-12-21-13-10-40-893.png!

Stack Trace is attached - [^test_errors_stackTrace.txt]

 

With my patch all tested executed successfully. Hope, the issue is clear now and I am waiting for you comment
Liroyd:1608539243:2020-12-21T16:27:23.186+0000:1608539243:2020-12-21T16:27:23.186+0000:Please check [https://github.com/apache/camel/pull/4809] for 3.4.x. If everything is ok, I will create separate for master.
Liroyd:1608544786:2020-12-21T17:59:46.455+0000:1608544786:2020-12-21T17:59:46.455+0000:PR for master - https://github.com/apache/camel/pull/4810
davsclaus:1608683557:2020-12-23T08:32:37.251+0000:1608683557:2020-12-23T08:32:37.251+0000:Thanks for the detailed analysis and the PRs to fix this on our branches.
Liroyd:1608684448:2020-12-23T08:47:28.344+0000:1608684448:2020-12-23T08:47:28.344+0000:You are welcome. Is there any way, how I can get it in 3.4.5?
davsclaus:1608688073:2020-12-23T09:47:53.531+0000:1608688073:2020-12-23T09:47:53.531+0000:No 3.4.5 was built before and will be released today"
0,CAMEL-15927,Task,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Matthias Streidel,Claus Ibsen,0,2,2020-12-08 10:27:46+00:00,2021-03-06 16:27:37+00:00,"Lets make the examples names shorter so they have a nicer name and overview in github and other places etc


https://github.com/apache/camel-spring-boot-examples
https://github.com/apache/camel-examples


See for example quarkus which has already done that
https://github.com/apache/camel-quarkus-examples","metters:1614760217:2021-03-03T16:30:17.118+0000:1614760217:2021-03-03T16:30:17.118+0000:Same here, the subtasks are done. I am closing the ticket
metters:1614866836:2021-03-04T22:07:16.401+0000:1614866836:2021-03-04T22:07:16.401+0000:I am going to remove spring-boot as a prefix, too"
0,CAMEL-15926,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-12-07 14:44:08+00:00,2020-12-08 09:37:56+00:00,"Reported on chat
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Route.20Template.20and.20properties.20injection.20with.20spring.20boot/near/219059308","davsclaus:1607391471:2020-12-08T09:37:51.056+0000:1607391471:2020-12-08T09:37:51.056+0000:There is an example here
https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-routetemplate"
0,CAMEL-15925,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Claus Ibsen,0,1,2020-12-07 14:06:29+00:00,2020-12-07 14:22:35+00:00,This is using the old netflix oss stack that is EOL. Its also a pain to maintain as spring boot and their cloud releases dont always align nicely.,davsclaus:1607322155:2020-12-07T14:22:35.995+0000:1607322155:2020-12-07T14:22:35.995+0000:Okay took a 2nd look and deprecated the other camel-spring-cloud modules as its old not active maintained stuff that is not relevant for modern cloud
0,CAMEL-15924,Improvement,Major,3.7.0,3.9.0,"
None
",Closed,Fixed,3.9.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-12-07 13:10:23+00:00,2021-03-10 12:45:52+00:00,"The new camel-vertx-kafka does not yet support committing the offsets manually which allows at least once semantics. Similar to camel-kafka, by providing KafkaManualComit perhaps",
0,CAMEL-15923,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Claus Ibsen,0,2,2020-12-07 06:28:18+00:00,2020-12-08 07:10:17+00:00,No Desc,"Mahas_M:1607382617:2020-12-08T07:10:17.136+0000:1607382617:2020-12-08T07:10:17.136+0000:Hi,

I'm Mohammadu Milhar Mahas, a second year undergraduate in Computer Science at the University of Jaffna, Sri Lanka,

I would like to work with this project 

please help me to start up this project for Gsoc 2021"
0,CAMEL-15922,Improvement,Minor,3.7.0,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2020-12-04 09:30:34+00:00,2023-07-29 07:30:01+00:00,"The csimple language does not support the following feature in its first release



nested functions (${xxx} inside existing ${xxx} functions))
the null safe operator 



We need a smarter source code generator for this to support this, that supports building up multiple statements and assign to local variables, and branches for the null safe operator, and also to understand types of method calls for nested functions so its of the same type from the java compiler point of view.",davsclaus:1620021377:2021-05-03T13:56:17.571+0000:1620021377:2021-05-03T13:56:17.571+0000:Lets wait for dropping Java 8 as source generating as Java 11 codes make this easier
0,CAMEL-15921,Task,Minor,None,,"
None
",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2020-12-03 20:06:58+00:00,2020-12-03 22:08:21+00:00,Would be nice to offer a selection of related blog posts at the bottom of a blog post.,
0,CAMEL-15920,Bug,Major,3.5.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Dario Röthlisberger,0,1,2020-12-03 16:20:28+00:00,2020-12-07 13:35:50+00:00,"Parsing a CSV file fails if the following conditions are met:



tab separator
last field is empty
not all fields are required



 


Example 1




CSV: ""VOA\t12 abc street\tMelbourne\tVIC\t3000\tAustralia\t\t""




The last two fields are empty and the CSV cannot be parsed.


Example 2




CSV: ""VOA\t12 abc street\tMelbourne\tVIC\t3000\tAustralia\t\tNot Empty""




The last field is not empty and the CSV can be parsed.


 Example 3




CSV: ""VOA,12 abc street,Melbourne,VIC,3000,Australia,,""




If the comma separator is used and the last field is empty, the CSV can be parsed.


I've just created a test case on current master to demonstrate the bug:


Camel-Bindy: csv cannot be parsed if (not required) last field is empty and a tab separator is used by darioxz - Pull Request #1 - darioxz/camel (github.com)",
0,CAMEL-15919,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Michael Prankl,0,1,2020-12-03 15:34:28+00:00,2020-12-04 06:10:42+00:00,"Currently, specifying ""java.io.File"" class as response model (for example when the API returns a binary document, aka ""Download"") in RestOperationResponseMsgDefinition produces an incorrect Swagger / OAS2 / OAS3 definition:


 



""responses"" : {
  ""200"" : {
    ""description"" : ""Created PDF file"",
    ""schema"" : {
      ""type"" : ""string"",
      ""format"" : ""java.io.File""
    },
  },
  // ....
}






 The correct way to handle this according to Swagger docs v2 (https://swagger.io/docs/specification/2-0/describing-responses/) is:



""responses"" : {
  ""200"" : {
    ""description"" : ""Created PDF file"",
    ""schema"" : {
      ""type"" : ""file""
    },
  },
  // ....
}




 
camel-openapi-java with OAS2 / OAS3 is also affected.",
0,CAMEL-15918,Task,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Sebb,0,0,2020-12-03 15:09:22+00:00,2022-09-02 17:27:10+00:00,"The releases page is missing earlier releases for:
camel-k
camel-k runtime
Only a single release is currently listed for each, however there are many more:
https://archive.apache.org/dist/camel/camel-k/
https://archive.apache.org/dist/camel/camel-k-runtime/",
0,CAMEL-15917,Improvement,Minor,3.4.4,"3.4.5, 3.7.0","
None
",Resolved,Fixed,"3.4.5, 3.7.0",Unassigned,Alex Liroyd,0,2,2020-12-03 15:05:52+00:00,2020-12-04 15:04:58+00:00,"I'm using camel-resilien4j library:




<groupId>org.apache.camel.springboot</groupId>
<artifactId>camel-spring-boot-dependencies</artifactId>
<version>3.4.4</version>

<groupId>org.apache.camel</groupId>
<artifactId>camel-resilience4j</artifactId>




I want to use https://camel.apache.org/components/latest/properties-component.html


functionality for circuit breaker configuration in camel routes definitions.


It's needed to be able to add some specific route to some specific group. So I'm trying to do following.




  <circuitBreaker configurationRef=""{{myName}}"">
            <to uri=""direct:someUri""/>
        </circuitBreaker>




 But it doesn't work. myName is not resolved using property file. I can't hardcode names. 


As I can see - ResilienceReifier doesn't even try to resolve it using config.


ResilienceReifier#buildResilience4jConfiguration




        if (definition.getConfigurationRef() != null) {
            final String ref = definition.getConfigurationRef();

            loadProperties(properties, Suppliers.firstNotNull(
                () -> camelContext.getExtension(Model.class).getResilience4jConfiguration(ref),
                () -> mandatoryLookup(ref, Resilience4jConfigurationDefinition.class)),
                configurer);
        }
 



so definition (ref) is transferred as is. And it cause an issue, because there is no such config as myName.


What I would expect to see, is:




        if (definition.getConfigurationRef() != null) {

     /// here is modified code
            Optional<String> configuredValue = camelContext.getPropertiesComponent().resolveProperty(definition.getConfigurationRef();
            final String ref = configuredValue.isPresent() ? configuredValue.get() : definition.getConfigurationRef();
    /// end of modified code

            loadProperties(properties, Suppliers.firstNotNull(
                () -> camelContext.getExtension(Model.class).getResilience4jConfiguration(ref),
                () -> mandatoryLookup(ref, Resilience4jConfigurationDefinition.class)),
                configurer);
        }
 



 
It's simple lookup for configuration value, but it provides a huge flexibility for entire framework.


 


Also, is there anyway, how I can temporary hotfix this issue, in order to proceed with development?","davsclaus:1606979438:2020-12-03T15:10:38.445+0000:1606979438:2020-12-03T15:10:38.445+0000:All the reifiers for CBs can be improved to resolve that ref as text, there is some parseText method - other reifiers use, then {{ }} is resolved.

Take a look at that, and you are welcome to provide PR for this for 3.4.x branch and also the master branch.
Liroyd:1606979961:2020-12-03T15:19:21.311+0000:1606979961:2020-12-03T15:19:21.311+0000:Ok. Will see what can I do. Hopefully will send it in day or two
Liroyd:1607047939:2020-12-04T10:12:19.073+0000:1607047939:2020-12-04T10:12:19.073+0000:Provided PRs for both 3.4.x and master
Liroyd:1607048397:2020-12-04T10:19:57.921+0000:1607048397:2020-12-04T10:19:57.921+0000:Could you please assist, when can I expect to get these changes from maven repository for 3.4.x branch?
Liroyd:1607065498:2020-12-04T15:04:58.626+0000:1607065498:2020-12-04T15:04:58.626+0000:Nwm, found it - [https://issues.apache.org/jira/projects/CAMEL/versions/12348825]

it's end of 2020"
0,CAMEL-15916,Improvement,Minor,3.6.0,,"
None
",Resolved,Not A Problem,None,Unassigned,Andrii Melashchenko,0,2,2020-12-03 11:53:28+00:00,2022-09-02 17:26:18+00:00,"Docs https://camel.apache.org/components/latest/mongodb-component.html do not have step to add 
```


<repositories> <repository> <id>spring-milestone</id> <name>Spring Maven MILESTONE Repository</name> <url>https://repo.spring.io/libs-milestone</url> </repository></repositories>


```
to pm.file in order to create mongoDB client according to https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#reference 
It's better to add direct link to spring to avoid this issue.


Stack-overflow issue https://stackoverflow.com/questions/61313732/configuration-problem-unable-to-locate-spring-namespacehandler-for-xml-schema-n/65125398#65125398 


Later I'll add pull request to docs",davsclaus:1662110778:2022-09-02T17:26:18.432+0000:1662110778:2022-09-02T17:26:18.432+0000:camel mongodb does not use spring
0,CAMEL-15915,Task,Major,3.7.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Otavio Rodolfo Piske,Claus Ibsen,0,1,2020-12-03 10:01:09+00:00,2020-12-10 06:23:11+00:00,"There are 5 unit tests in camel-ftp that keeps failing for a long time. Not reproducable on mac osx. So it may be linux.


org.apache.camel.component.file.remote.FromFtpDirectoryToBinaryFilesNotStepwiseTest.testFtpRoute	1.1 sec	92
 org.apache.camel.component.file.remote.FromFtpDirectoryToBinaryFilesTest.testFtpRoute	1.1 sec	92
 org.apache.camel.component.file.remote.FromFtpSetNamesWithMultiDirectoriesTest.testFtpRoute	0.37 sec	92
 org.apache.camel.component.file.remote.FromFtpToBinaryFileTest.testFtpRoute	1.1 sec	92
 org.apache.camel.component.file.remote.FromFtpToBinaryFilesTest.testFtpRoute	1.2 sec	92","davsclaus:1606960884:2020-12-03T10:01:24.141+0000:1606960884:2020-12-03T10:01:24.141+0000:CI server report
https://ci-builds.apache.org/job/Camel/job/Camel%20JDK11/job/master/lastCompletedBuild/testReport/
davsclaus:1607481151:2020-12-09T10:32:31.500+0000:1607481151:2020-12-09T10:32:31.500+0000:Its not commons-net 3.7.2, 3.7.1, or 3.7 that is causing this.

We will do git bisect to track it down, but for 3.8 onwards.
davsclaus:1607495876:2020-12-09T14:37:56.213+0000:1607495876:2020-12-09T14:37:56.213+0000:bisect is reporting this one as the first bad commit where the test fails: 

https://github.com/apache/camel/commit/0bb139662a88c7876a9545c5b1bea16b040a2a99
davsclaus:1607505213:2020-12-09T17:13:33.361+0000:1607505213:2020-12-09T17:13:33.361+0000:Okay pushed a commit on master that fixes this, but lets give the CI server a full test to confirm
https://github.com/apache/camel/commit/7cae96f399712217eee278f9cba5568b456d5c28"
0,CAMEL-15914,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,2,2020-12-03 09:55:12+00:00,2020-12-04 11:51:55+00:00,We need to know if csimple is from predicate or expression when loaded on bootstrap,
0,CAMEL-15913,Task,Trivial,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Sebb,0,1,2020-12-02 20:27:37+00:00,2020-12-04 13:02:40+00:00,"The prior releases pages contain some spurious text:


'3.4.4 3.6.0 2.25.2'


This appears just after the 'camel-spring-boot-dependencies' section above the 'APACHE CAMEL' heading


See for example:
https://deploy-preview-500--camel.netlify.app/releases/release-2.22.0/
and
https://deploy-preview-500--camel.netlify.app/releases/release-3.6.0/",zregvart:1607058160:2020-12-04T13:02:40.907+0000:1607058160:2020-12-04T13:02:40.907+0000:Thanks for reporting!
0,CAMEL-15912,New Feature,Minor,None,Future,"

help-wanted

",Open,Unresolved,Future,Unassigned,Dmitry Volodin,0,2,2020-12-02 07:13:41+00:00,2023-11-14 12:50:35+00:00,"There are 14 standard fonts provided OOB and not able to load custom fonts from file in camel-pdf component
Custom fonts with Apache PDFBox component","davsclaus:1662110640:2022-09-02T17:24:00.893+0000:1662110640:2022-09-02T17:24:00.893+0000:Anyone has such a need, then welcome to help"
0,CAMEL-15911,Task,Major,None,,"
None
",Resolved,Fixed,None,Nicola Ferraro,Zoran Regvart,0,2,2020-12-01 12:39:52+00:00,2020-12-02 09:54:48+00:00,"There is no need to distribute the Camel K runtime POM, it is already included in the source zip package and folk will be downloading it from Maven central repository, it is of no use to anyone in the distribution.",nferraro:1606874088:2020-12-02T09:54:48.145+0000:1606874088:2020-12-02T09:54:48.145+0000:Updated released files and instructions for next releases
0,CAMEL-15910,Task,Major,"3.4.4, 3.6.0",,"
None
",Resolved,Abandoned,None,Gregor Zurowski,Zoran Regvart,0,1,2020-12-01 12:37:03+00:00,2022-09-02 17:23:21+00:00,We need to include source packages for Camel Karaf and Camel Spring Boot as they are released with Camel core release. Since we split out Camel Karaf and Camel Spring Boot sources of those also need to be present with hashes and signatures in ASF distribution.,
0,CAMEL-15909,New Feature,Major,None,,"

AWS

",Open,Unresolved,None,Andrea Cosentino,smaser,0,4,2020-11-30 16:04:52+00:00,2022-09-02 17:22:59+00:00,"Like SQS, Kinesis also supports KMS.  Would be great to add options KmsMasterKeyId and KmsDataKeyReusePeriodSeconds support.


https://aws.amazon.com/blogs/big-data/encrypt-and-decrypt-amazon-kinesis-records-using-aws-kms/","acosentino:1606723707:2020-11-30T16:08:27.628+0000:1606723707:2020-11-30T16:08:27.628+0000:Will do on aws2. Aws components will be deprecated soon
davsclaus:1662110579:2022-09-02T17:22:59.116+0000:1662110579:2022-09-02T17:22:59.116+0000:What is the status of this"
0,CAMEL-15908,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,James Netherton,James Netherton,0,1,2020-11-30 14:27:55+00:00,2020-12-01 09:41:44+00:00,"Similar to CAMEL-15255, there are some additional counter metrics we could add to the MicrometerRoutePolicy for:



Total exchanges processed
Number of failures handled
Number of external redeliveries",
0,CAMEL-15907,Task,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Sebb,0,1,2020-11-30 10:48:14+00:00,2020-12-03 15:01:51+00:00,"Release 2.25.2 is present under https://downloads.apache.org/camel/apache-camel/ however it is not listed on the main downloads page.


It should either be listed as a current release, or dropped from the mirrors.","sebb:1606895677:2020-12-02T15:54:37.393+0000:1606895677:2020-12-02T15:54:37.393+0000:Likewise for https://downloads.apache.org/camel/camel-k/1.2.0/ which does not appear to be listed anywhere.
davsclaus:1606897747:2020-12-02T16:29:07.315+0000:1606897747:2020-12-02T16:29:07.315+0000:Deleted
svn delete https://dist.apache.org/repos/dist/release/camel/camel-k/1.2.0/
davsclaus:1606898158:2020-12-02T16:35:58.345+0000:1606898158:2020-12-02T16:35:58.345+0000:The download page is being rewamped by Zoran so it includes all the relevant releases."
0,CAMEL-15906,Task,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Sebb,0,0,2020-11-30 10:39:20+00:00,2020-12-03 14:40:25+00:00,"Download pages such as https://camel.apache.org/releases/release-3.4.4/ must contain a sigs, hashes, a link to KEYS and info on the need to verify downloads and how to do so.


AFAICT they only contain the sigs.


Please add the missing items.


Also many of the links for older releases are broken.","sebb:1606704230:2020-11-30T10:43:50.598+0000:1606704230:2020-11-30T10:43:50.598+0000:Also the sig (asc) links are broken.
They must not point to the mirrors.
They must point to either 
https://downloads.apache.org/camel/...
or
https://archive.apache.org/dist/camel/..."
0,CAMEL-15905,Improvement,Major,3.7.0,,"
None
",Resolved,Information Provided,None,Unassigned,Bogdan Ilchyshyn,0,2,2020-11-29 23:26:49+00:00,2021-01-06 03:56:07+00:00,"Current master branch has downgraded Open Tracing API dependency to 0.31.0, which is 1) almost 3 years old; 2) blocks Camel upgrade for projects that are using current version of OT API. 


Please support upgrade to the latest Camel for projects that are using up-to-date Open Tracing.","acosentino:1606685933:2020-11-30T05:38:53.726+0000:1606685933:2020-11-30T05:38:53.726+0000:There is a reason for that, we are waiting for a MP release supporting latest version of OT, when it will be available, it will be updated.
orange-buffalo:1606689380:2020-11-30T06:36:20.672+0000:1606689380:2020-11-30T06:36:20.672+0000:[~acosentino], could you please provide us with a link to the issue where this is tracked? Now this activity is obscure for us and there is no way to know when this happens rather than regularly checking Camel source code. 
acosentino:1606689997:2020-11-30T06:46:37.385+0000:1606689997:2020-11-30T06:46:37.385+0000:https://issues.apache.org/jira/browse/CAMEL-15354

This was the original issue. The version to wait for is the 4.x
orange-buffalo:1606692256:2020-11-30T07:24:16.218+0000:1606692256:2020-11-30T07:24:16.218+0000:Thank you, we will then follow MP updates. 
orange-buffalo:1609876567:2021-01-06T03:56:07.762+0000:1609876567:2021-01-06T03:56:07.762+0000:[~acosentino], MP 4.0 [was released|https://microprofile.io/2020/12/23/microprofile-4-0-is-now-available/] on December 23rd. Could you help us with a trackabe artifact (like a Jira issue or PR) for the upgrade of MP dependency (and Open Tracing API) in Camel? "
0,CAMEL-15904,Improvement,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jeremy Ross,0,1,2020-11-28 17:39:10+00:00,2020-11-30 06:06:30+00:00,"A while back (v37?), the salesforce streaming API started requiring a replayId.



Error subscribing to CamelTestTopic: Replay Id not found for channel. Error (id=794472383-90 (-1822401099))




Prior to this, the behavior was equivalent to -1 (new events that are broadcast after the client subscribes). If we default `defaultReplayId` to -1, it provides a sensible default for new projects, and is backwards compatible with existing projects that are on old versions of the streaming API.


Related, as of v37, it appears that salesforce no longer supplies the Bayeux clientId in broadcast messages:





The protocol does not require clientId:


The clientId message field MAY be returned in message responses except for failed handshake requests and for publish message responses that were sent without clientId.


I'm guessing they made this change to reduce the surface area for clientId leakage. In any case, forthcoming PR removes non-null assertions for clientId since it's not there anymore.",
0,CAMEL-15903,Bug,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,EDGAR CHERNICK,0,3,2020-11-27 13:48:01+00:00,2023-08-09 09:29:44+00:00,"The cluster view implementations have a listener attribute where the master component hooks itself to receive leadership change events. 


When the app instance becomes leader the cluster view will mark that instance as leader then it will trigger the leadershipchangedevent, this will trigger the master component event handler and it will start the delegated consumer and endpoint.


The issue happens when the delegated consumer or endpoint fail to start. The exception throw by them will go up in the stack, however, this exception does not affect the leadership, i.e., once the app instance becomes leader it will stay so even if the delegated components fail to start.


Both KubernetesClusterView and FileLockClusterView have this issue.


KubernetesClusterView uses KubernetesLeadershipController to run the leadership check at an interval. When it acquires the leadership it updates the configmap with that info and call TimedLeaderNotifier refreshLeadership method to check if the leadership has changed. The issue here is that it will mark itself as leader before firing the leadership changed event. Another issue is that the event is fired in a separete thread, so, when the start of the delegated components fail the exception will ""die"" together with the thread. When the next scheduled leadership check runs the app instance is already the leader and it will not fire the leadership changed event and the delegated component will never start.


FileLockClusterView has a similar issue, it acquires the file lock prior to firing the event, even if the event processing fails it does not rollback the leader selection.


Other cluster view implementations might have the same issue.","edgarcher:1606456310:2020-11-27T13:51:50.769+0000:1606456681:2020-11-27T13:58:01.880+0000:[~davsclaus] I wanted to fix this issue myself but I'm afraid I might fix it for my scenario and keep others uncovered, since I think this issue might be related with all cluster view implementations.

Would you mind giving some direction on how this could fixed ? 

I may try to submit a PR based on this direction then.
davsclaus:1606456759:2020-11-27T13:59:19.579+0000:1606456759:2020-11-27T13:59:19.579+0000:Edgar, I wonder if you have or can get a stacktrace of that error that is silently ignored. Or can pin point to where it happens in the current code.
edgarcher:1606457555:2020-11-27T14:12:35.543+0000:1606457555:2020-11-27T14:12:35.543+0000:I'm using camel to consume from SF streaming api and I got this error when trying to creating a push topic with a name with more than 25 characters. This is the stack trace using FileLockClusterView:

org.apache.camel.CamelException: Error creating Topic proposalOpportunityInjectionSync: {errors:[{""errorCode"":""STRING_TOO_LONG"",""message"":""Topic Name: data value too large: proposalOpportunityInjectionSync (max length=25)"",""fields"":[""Name""]}],statusCode:400}
	at org.apache.camel.component.salesforce.internal.streaming.PushTopicHelper.createTopic(PushTopicHelper.java:169)
	at org.apache.camel.component.salesforce.internal.streaming.PushTopicHelper.createOrUpdateTopic(PushTopicHelper.java:112)
	at org.apache.camel.component.salesforce.SalesforceConsumer.doStart(SalesforceConsumer.java:312)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.component.master.MasterConsumer.onLeadershipTaken(MasterConsumer.java:133)
	at org.apache.camel.component.master.MasterConsumer.access$100(MasterConsumer.java:43)
	at org.apache.camel.component.master.MasterConsumer$LeadershipListener.leadershipChanged(MasterConsumer.java:160)
	at org.apache.camel.support.cluster.AbstractCamelClusterView.lambda$fireLeadershipChangedEvent$4(AbstractCamelClusterView.java:129)
	at org.apache.camel.support.cluster.AbstractCamelClusterView.lambda$doWithListener$3(AbstractCamelClusterView.java:119)
	at org.apache.camel.util.concurrent.LockHelper.doWithReadLock(LockHelper.java:34)
	at org.apache.camel.support.cluster.AbstractCamelClusterView.doWithListener(AbstractCamelClusterView.java:112)
	at org.apache.camel.support.cluster.AbstractCamelClusterView.fireLeadershipChangedEvent(AbstractCamelClusterView.java:127)
	at org.apache.camel.component.file.cluster.FileLockClusterView.tryLock(FileLockClusterView.java:146)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.camel.component.salesforce.api.SalesforceException: {errors:[{""errorCode"":""STRING_TOO_LONG"",""message"":""Topic Name: data value too large: proposalOpportunityInjectionSync (max length=25)"",""fields"":[""Name""]}],statusCode:400}
	at org.apache.camel.component.salesforce.internal.client.DefaultRestClient.createRestException(DefaultRestClient.java:113)
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:231)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:202)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:194)
	at org.eclipse.jetty.client.ResponseNotifier.forwardSuccessComplete(ResponseNotifier.java:228)
	at org.apache.camel.component.salesforce.internal.client.SalesforceSecurityHandler$SecurityListener.forwardSuccessComplete(SalesforceSecurityHandler.java:269)
	at org.apache.camel.component.salesforce.internal.client.SalesforceSecurityHandler$SecurityListener.onComplete(SalesforceSecurityHandler.java:182)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:202)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:194)
	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470)
	at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:416)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:316)
	at org.eclipse.jetty.http.HttpParser.parseFields(HttpParser.java:1165)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1525)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:172)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:135)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:73)
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:133)
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:155)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.onFillable(SslConnection.java:411)
	at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:305)
	at org.eclipse.jetty.io.ssl.SslConnection$2.succeeded(SslConnection.java:159)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683)
	... 1 more
lb:1607043820:2020-12-04T09:03:40.449+0000:1607043820:2020-12-04T09:03:40.449+0000:As far as I remember the idea was that there should be something on top of the master component to deal with routes failures and decide what to do as example, if there's a connectivity glitch and your route either don't even start or report failures, it should be up to the specific routes supervisor to decide to retry or to give up and release the leadership. 

But I think we should have some configuration option to configure the behaviour of the master component and i.e. auto release the leadership in case of failures.
edgarcher:1607076029:2020-12-04T18:00:29.265+0000:1607076029:2020-12-04T18:00:29.265+0000:I think I could have something monitoring the master component but I don't think it would help in this scenario actually. In all app instances the master component route is started (and the route it is in as well). The thing that is not started is the ""wrapped by master"" component/endpoint, that wrapped component starts when master component receives leadership changed events and trigger its start.

One thing that I was thinking is, what if the actual error surfaced to the exception handling mechanism (something similar to what bridgeErrorHandler does). This won't fix the issue of not retrying the startup of it on leadership changes but at least will give users visibility that something is going on (they might even be able to ""force"" the restart of the route on their own based on the exception that was thrown)
lb:1607473879:2020-12-09T08:31:19.234+0000:1607473879:2020-12-09T08:31:19.234+0000:Yes I know that the route is started but many things may fail so there should be something to supervise the routes so I guess the master policy should install a dedicate error handler or the reoute policy should provide an hook for error related to the route itself and the master component can hook there
edgarcher:1607519094:2020-12-09T21:04:54.662+0000:1607519175:2020-12-09T21:06:15.394+0000:The Master Consumer does not have a try catch block on leadership taken event handler (https://github.com/apache/camel/blob/master/components/camel-master/src/main/java/org/apache/camel/component/master/MasterConsumer.java#L118).

would it be okay If I just added that and then call super.handleException in the catch block ? If the route has bridgeErrorHandler=true this should at least surface the exception for handling, right ?

This won't solve the issue by itself but at least end users will have an exception indicating that something is going on.
davsclaus:1607562414:2020-12-10T09:06:54.735+0000:1607562414:2020-12-10T09:06:54.735+0000:Yes Edgar lets add some logging details if there is an exception with the leader taken/lost situation.


davsclaus:1607563350:2020-12-10T09:22:30.095+0000:1607563350:2020-12-10T09:22:30.095+0000:There is nothing today that can monitor and retry starting the consumer et all, as this is done internally in the master consumer itself (not via Camels route controller).

I think if starting the consumer fails, then we now do a logging of the exception. And I think we should then loose the leader - and it looks like for this to happen then we would need to restart, eg stop the view, and create the view again. Luca any thoughts?
lb:1607564216:2020-12-10T09:36:56.837+0000:1607564216:2020-12-10T09:36:56.837+0000:I think the clean solution would be to add a method to the CamelClusterView and/or CamelClusterMember interface to release the leadership, as workaround we may invoke clusterService.releaseView(view) directly or maybe using a custom exception handler ?
davsclaus:1607574431:2020-12-10T12:27:11.283+0000:1607574431:2020-12-10T12:27:11.283+0000:Yeah good idea with a release API (I was looking for that)"
0,CAMEL-15902,Bug,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-11-27 12:21:55+00:00,2020-12-01 06:53:22+00:00,"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-opentelemetry-starter: Compilation failure: Compilation failure: 
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-opentelemetry-starter/src/main/java/org/apache/camel/opentelemetry/starter/OpenTelemetryAutoConfiguration.java:[19,30] package io.opentelemetry.trace does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-opentelemetry-starter/src/main/java/org/apache/camel/opentelemetry/starter/OpenTelemetryAutoConfiguration.java:[35,13] cannot find symbol
[ERROR] symbol: class Tracer
[ERROR] location: class org.apache.camel.opentelemetry.starter.OpenTelemetryAutoConfiguration


 


rubensvp can you have a look at https://github.com/apache/camel-spring-boot",
0,CAMEL-15901,Bug,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Borodina Valery,0,1,2020-11-27 11:55:20+00:00,2020-11-30 06:08:33+00:00,"My app work on java 8, but don't work on java 11. I try increase version java -> 11. 


I loading my test-project when I get exception: https://github.com/Holly-12/cxfjava11


When bundle installed in karaf and have status Active I send soap message and get exception: 
 Message part 

{[http://lama.ru/]}

packet was not recognized. (Does it exist in service WSDL?)
 I get wsdl(http://localhost:8181/cxf/lama?wsdl) and see: 




<wsdl:definitions xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/""
                  xmlns:tns=""http://lama.ru/"" xmlns:soap=""http://schemas.xmlsoap.org/wsdl/soap/""
                  xmlns:ns1=""http://schemas.xmlsoap.org/soap/http"" name=""SoapProxyService""
                  targetNamespace=""http://lama.ru/"">
    <wsdl:types>
        <xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:tns=""http://www.lama.ru/test/""
                   elementFormDefault=""qualified"" targetNamespace=""http://www.lama.ru/test/"" version=""1.0"">
            <xs:element name=""packet"" type=""tns:packetType""/>
            <xs:element name=""response"" type=""xs:string""/>
            <xs:complexType name=""packetType"">
                <xs:sequence>
                    <xs:element name=""content"" type=""xs:anyType""/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
    </wsdl:types>
    <wsdl:portType name=""SoapProxy""></wsdl:portType>
    <wsdl:binding name=""SoapProxyServiceSoapBinding"" type=""tns:SoapProxy"">
        <soap:binding style=""document"" transport=""http://schemas.xmlsoap.org/soap/http""/>
    </wsdl:binding>
    <wsdl:service name=""SoapProxyService"">
        <wsdl:port binding=""tns:SoapProxyServiceSoapBinding"" name=""SoapProxyPort"">
            <soap:address location=""http://localhost:8181/cxf/lama""/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>




I see what wsdl don't have operation. But when I run app without karaf and camel only with cxf app work without exception.",
0,CAMEL-15900,Improvement,Minor,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,James Netherton,0,3,2020-11-27 11:48:40+00:00,2023-05-27 07:56:12+00:00,"GeoCoderNominatimProducer can invoke 3rd party location apis via the serverUrl option. To do this, it creates an Apache HttpClient. However, the client is created on every invocation of process(), which is not very efficient. It should be possible to set up the client once, and reuse it.


Also none of the endpoint options for configuring a proxy server are passed to the HttpClient. It would be good if they were.",davsclaus:1685145372:2023-05-27T07:56:12.029+0000:1685145372:2023-05-27T07:56:12.029+0000:using a google library now that creates a http client on start
0,CAMEL-15899,Bug,Major,"3.5.0, 3.4.4, 3.6.0",3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Florian Agsteiner,0,2,2020-11-27 10:20:37+00:00,2020-12-03 13:24:53+00:00,"The following exception occurs if the camelroute with a hazel cast topic is restarted  




WARNUNG: Error processing exchange for hazelcast consumer on object 'null' in cache 'server.trace.event'.. Exchange[ID-1605875260724-0-338]. Caused by: [java.util.concurrent.RejectedExecutionException - null]
java.util.concurrent.RejectedExecutionException
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:435)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
at org.apache.camel.component.hazelcast.listener.CamelListener.sendExchange(CamelListener.java:48)
at org.apache.camel.component.hazelcast.listener.CamelMessageListener.onMessage(CamelMessageListener.java:34)
at com.hazelcast.topic.impl.TopicService.dispatchEvent(TopicService.java:138)
at com.hazelcast.spi.impl.eventservice.impl.LocalEventDispatcher.run(LocalEventDispatcher.java:64)
at com.hazelcast.util.executor.StripedExecutor$Worker.process(StripedExecutor.java:244)
at com.hazelcast.util.executor.StripedExecutor$Worker.run(StripedExecutor.java:227)




Solution
Register listeners in doStart and remove them in doStop","acosentino:1606443798:2020-11-27T10:23:18.017+0000:1606443798:2020-11-27T10:23:18.017+0000:Please report the camel version.
Scriptease:1606443924:2020-11-27T10:25:24.703+0000:1606444019:2020-11-27T10:26:59.000+0000:I think all versions are affected including the latest in Github.


I added a pull request:
https://github.com/apache/camel/pull/4694
acosentino:1606444153:2020-11-27T10:29:13.745+0000:1606444153:2020-11-27T10:29:13.745+0000:We'll release 3.7.0 as second LTS, the other LTS is 3.4.x, so we'll need a PR on 3.4.x branch only
acosentino:1606453789:2020-11-27T13:09:49.502+0000:1606453789:2020-11-27T13:09:49.502+0000:Can you open a PR against camel-3.4.x? It shouldn't be a cherry-pick, I guess there will be conflicts. Thanks."
0,CAMEL-15898,Bug,Major,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Aashna Jena,0,2,2020-11-27 08:55:26+00:00,2020-12-07 08:33:39+00:00,"I can see NULLs in place of headings, although the content seems to be fine. Blogs, Articles, Books (all Hugo content) etc are rendering fine, but Components and sub project headings are not appearing. Has there been a change is the organization of Antora content? Else this may be a problem from the Algolia side.","zregvart:1606702139:2020-11-30T10:08:59.375+0000:1606702139:2020-11-30T10:08:59.375+0000:Yeah, I see the same. Really odd, doesn't look there were any changes recently (https://github.com/algolia/docsearch-configs/commits/master/configs/apache_camel.json), and the selectors ({{article hN}} are matched.

The only thing I can remember is that that I've tried to [fix the breadcrumbs data](https://github.com/apache/camel-website/commit/3e8d717038d2fa0f6d1dc37dd20cc4cdbb9a798a), though I don't think that would cause the issue.
zregvart:1606820641:2020-12-01T19:04:01.068+0000:1606820641:2020-12-01T19:04:01.068+0000:I've contacted Algolia support. We'll see what they respond.
zregvart:1606995328:2020-12-03T19:35:28.940+0000:1606995328:2020-12-03T19:35:28.940+0000:Aah, I think I found the issue, the breadcrumb element was changed from {{div}} to {{nav}} in [this commit|https://github.com/apache/camel-website/commit/f3273d71ce9b93bf58c45e5605ed519055010711#diff-dababcffe93fd7ac62feb772ceed02701e77631d72f52e23e79ae6a3d54b326e]. I'll make the change in the search configuration over at Algolia.
zregvart:1607301219:2020-12-07T08:33:39.851+0000:1607301219:2020-12-07T08:33:39.851+0000:Algolia folk merged the PR, the search index now contains lvl0-lvl3 data as can be seen on the live website. Thanks for reporting!"
0,CAMEL-15897,Improvement,Minor,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2020-11-26 14:37:00+00:00,2022-09-02 17:21:48+00:00,"Lets see if we can optimize camel-bean and the bean parameter binding, and method call resolution that happens at runtime.


There are situations where we have type information and can optimize for that, and also maybe have a source code generated way for optimal performance and overhead, something like we have with csimple language.",
0,CAMEL-15896,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,James Netherton,James Netherton,0,1,2020-11-26 10:15:46+00:00,2020-11-26 15:38:39+00:00,"It'd be good to do a similar change to CAMEL-15873 and import the Google Cloud libraries-bom in the pubsub component and upgrade to the latest pubsub version.


It would also be an opportunity to clean up some of the many redundant version properties for the google cloud components.",
0,CAMEL-15895,Bug,Minor,3.6.0,,"
None
",Resolved,Not A Bug,None,Jean-Baptiste Onofré,ncasaux,0,2,2020-11-26 09:06:37+00:00,2020-12-22 11:36:54+00:00,"Hello,


 I’m using some camel rest routes and found something unexpected with the examples provided in https://camel.apache.org/manual/latest/rest-dsl.html


 




rest(""/say"")
         .get(""/hello"").to(""direct:hello"")
         .get(""/bye"").consumes(""application/json"").to(""direct:bye"")
         .post(""/bye"").to(""mock:update"");
 
 from(""direct:hello"")
         .transform().constant(""Hello World"");



 


Those routes creates 3 netty consumers visible in JMX, consuming from following endpoints:



http://0.0.0.0:0/say/bye?httpMethodRestrict=POST
http://0.0.0.0:0/say/bye?httpMethodRestrict=GET
http://0.0.0.0:0/say/hello?httpMethodRestrict=GET



 However, in JMX, I can see only 2 of those endpoints: 



endpointBaseUri http://0.0.0.0:0/say/bye, with endpointUri http://0.0.0.0:0/say/bye?httpMethodRestrict=GET
endpointBaseUri http://0.0.0.0:0/say/hello, with endpointUri http://0.0.0.0:0/say/hello?httpMethodRestrict=GET



 


There is no endpoint for “POST” on “/bye”.


 


Maybe it’s because it would share the same endpointBaseUri than the endpoint for “GET” on “/bye” ?


 I attached a screenshot if this helps where we can see the 3 consumers and only 2 endpoints.


  


Regards,


Nicolas","davsclaus:1608608208:2020-12-22T11:36:48.015+0000:1608608208:2020-12-22T11:36:48.015+0000:The endpoints are registered under rest, there you have all of them."
0,CAMEL-15894,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.7.0,Unassigned,Ruben Vargas,0,1,2020-11-25 21:36:31+00:00,2020-11-27 05:42:36+00:00,No Desc,
0,CAMEL-15893,Improvement,Minor,None,"3.7.0, 2.25.3","
None
",Resolved,Fixed,"3.7.0, 2.25.3",Freeman Yue Fang,Freeman Yue Fang,0,2,2020-11-25 19:06:27+00:00,2020-11-26 14:54:42+00:00,"Other wise can't access this method from a proxy.
For example, if we expose the service in blueprint from one bundle like




<bean id=""myPolicy"" class=""org.apache.camel.routepolicy.quartz2.CronScheduledRoutePolicy"">
                <property name=""routeStartTime"" value="".....""/>
                <property name=""routeStopTime"" value=""....""/>
        </bean>

        

        <service ref=""myPolicy"" auto-export=""all-classes""/>




And refer it in another bundle like this




                 <reference id=""remote-policy""
                                interface=""org.apache.camel.routepolicy.quartz2.ScheduledRoutePolicy""
                                ext:proxy-method='classes'"" />
                 <route id=""route-remote"" routePolicyRef=""remote-policy"" autoStartup=""false"">
                        ....
                </route>




Since here the remote-policy reference from aries blueprint is actually a proxy, so we will run into error like




at org.apache.camel.routepolicy.quartz2.ScheduledJob.execute(ScheduledJob.java:62) ~[!/:2.21.0.fuse-770013-redhat-00001]
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202) [!/:2.3.2.redhat-00007]
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573) [!/:2.3.2.redhat-00007]
Caused by: java.lang.IllegalAccessException: Class org.apache.aries.proxy.impl.ProxyHandler$1 can not access a member of class org.apache.camel.routepolicy.quartz2.ScheduledRoutePolicy with modifiers ""protected""
	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102) ~[?:1.8.0_221]
	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:296) ~[?:1.8.0_221]
	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:288) ~[?:1.8.0_221]
	at java.lang.reflect.Method.invoke(Method.java:491) ~[?:1.8.0_221]
	at org.apache.aries.proxy.impl.ProxyHandler$1.invoke(ProxyHandler.java:54) ~[?:?]
	at org.apache.aries.proxy.impl.ProxyHandler.invoke(ProxyHandler.java:119) ~[?:?]
	at org.apache.camel.routepolicy.quartz2.$ScheduledRoutePolicy566505575.onJobExecute(Unknown Source) ~[!/:2.21.0.fuse-770013-redhat-00001]
	at org.apache.camel.routepolicy.quartz2.ScheduledJob.execute(ScheduledJob.java:53) ~[!/:2.21.0.fuse-770013-redhat-00001]




So to make this method available for the proxy, we should change its modifier as ""public""


If there's no objection, I will make this change","davsclaus:1606351759:2020-11-26T08:49:19.639+0000:1606351759:2020-11-26T08:49:19.639+0000:Its bad design to do these cross bundle services as you end up leaking the route policy between different camel contexts, that is not what its intended for.


davsclaus:1606351793:2020-11-26T08:49:53.858+0000:1606351793:2020-11-26T08:49:53.858+0000:But sure you are welcome to make that method public"
0,CAMEL-15892,Improvement,Minor,3.6.0,,"
None
",Resolved,Information Provided,None,Unassigned,Bernard Ligny,0,2,2020-11-25 09:14:17+00:00,2020-12-14 12:20:39+00:00,"I'm trying to setup a smart JMS DeadLetterChannel where the final uri of the DLQ is computed dynamically, depending on original queue name (eg adding a "".dead"" suffix).


I have seen in the doc that it's possible by setting the CamelJmsDestinationName header:
https://camel.apache.org/components/latest/jms-component.html#_reuse_endpoint_and_send_to_different_destinations_computed_at_runtime


Therefore, I tried this:




DefaultErrorHandlerBuilder dlc = deadLetterChannel(""jms:queue:dummy"")
            .useOriginalMessage()
            .maximumRedeliveries(2);                
dlc.onPrepareFailure( exchange -> {
     // Override destination                                
     exchange.getMessage().setHeader(""CamelJmsDestinationName"", ""jms:queue:test"");                   
});




I have tried many different values for CamelJmsDestinationName :



""jms:queue:test""
""queue:test""
""test""



But none of them is working; the header is ignored and the exchange always goes to original uri (""queue:dummy"").


I'm using Camel 3.6 and camel-sjms2 component bound to an Artemis ActiveMQ broker (the one bundled with Wildfly20):




@Resource(mappedName = ""java:/ConnectionFactory"")
private static ConnectionFactory connectionFactory; 

@Produces
@ApplicationScoped
@Named(""jms"")
public final Sjms2Component createJmsComponent() {
    Sjms2Component component = new Sjms2Component();
    ConnectionResource pool = new ConnectionFactoryResource(poolSize, connectionFactory);
    component.setConnectionResource(pool);
    return component;      
}","davsclaus:1606269880:2020-11-25T10:04:40.427+0000:1606269880:2020-11-25T10:04:40.427+0000:Just create a route as the DLC and call it via direct, and in that route you can compute the destination name and route to a jms queue."
0,CAMEL-15891,Bug,Major,2.24.2,"3.7.0, 2.25.3","
None
",Resolved,Fixed,"3.7.0, 2.25.3",Unassigned,SUYASH MANI SHARMA,0,1,2020-11-25 04:57:21+00:00,2020-11-25 05:43:34+00:00,"the issue is due to a mistake done by async-http-client team.


Commit : https://github.com/AsyncHttpClient/async-http-client/commit/d47c56e7ee80b76a4cffd4770237239cfea0ffd6#diff-5247ce5d437efdde629533d6239bf0c24358bdf0157fa204050e908c48a8c1f3


They made the ByteArrayBodyGenerator constructor package level.


 


Due to this change, camel had to adapt and for String type of body, they changed their implementation from ByteArrayBodyGenerator to InputStreamBodyGenerator.


In InputStreamBodyGenerator, the content length is by default set to -1.


 


Since, content length was less than 0, NettyRequestFactory in async-http-client was using Transfer-Encoding header instead of Content-Length header.


 


Solution :


Async-http-client team corrected their mistake in the following commit :


https://github.com/AsyncHttpClient/async-http-client/commit/4469c30f7d54352865ff321b0de0148f9698c9b5#diff-208f8952b67ba2a28d2cb2d6881485f8fc1b2b5df53a841d4a4a48b2ed8aded0


 


However, the change was not reverted in camel, and hence, this regression has happened.


The change needs to be reverted in camel as well. This is causing regression when we are migrating from lower camel versions to higher versions.


 


The change was introduced with the following commit.


https://github.com/apache/camel/commit/684ef5786838e051cece2f510d9dafabdc310d02#diff-4d41a9fe212a88af9bc5cddb7e348f8031f39ceaf2263d7275fc4b6dd09e0867",
0,CAMEL-15890,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jeremy Ross,0,1,2020-11-24 21:21:50+00:00,2020-11-25 05:10:21+00:00,"When using composite APIs, URLs are not encoded correctly. E.g., a URL for an upsert in which the Id value contains a space will result in a + for the space. As a result, the value in salesforce will have + instead of space. Since the Id value is in the path portion of the URL, the correct thing to use is ""%20"".",
0,CAMEL-15889,Bug,Major,3.6.0,None,"
None
",Resolved,Duplicate,None,Unassigned,Federico Trotto,0,2,2020-11-24 14:54:39+00:00,2020-11-24 14:59:52+00:00,"Hello everyone,


As the title suggests I have a problem with the use of contextPath in the configuration of the RestController.
 I have a Spring-boot project where I have implemented SwaggerUi and Apache Camel, I noticed that by entering:


restConfiguration().component(""servlet"").contextPath(""/"").apiContextPath(""/*"");


 


It doesn't add the path in the get calls, in fact the swaggerUi gives me this error:


_


{ ""timestamp"": ""2020-11-24T14:37:01.573+0000"", ""status"": 404, ""error"": ""Not Found"", ""message"": ""Not Found"", ""path"": ""/service-activator/ocs/homologation"" }


_


 


But putting the context path in application.yml gives the desired effect, making the get call work.


For more information on the code I opened this ticket on Stack Owerflow accessible at this link for the same doubt  : https://stackoverflow.com/questions/64961716/how-to-use-the-context-path-in-camel-routes


In your documentation regarding the contextPath ( https://camel.apache.org/manual/latest/rest-dsl.html ) 
 I understand that it is not simply used as some users have suggested as simple API-XML documentation, as that should be the job of the .apiContextPath ("""").


 I have already written in the various Camel forums and asked various Camel developers for clarification on the subject without receiving a reply.","acosentino:1606201192:2020-11-24T14:59:52.095+0000:1606201192:2020-11-24T14:59:52.095+0000:There is a thread on mailing list and you already open the same issue. Please don't duplicate issues. If you are in a hurry or you need a solution sooner than the usual time, there are commercial offerings. Thanks."
0,CAMEL-15888,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-11-24 10:35:31+00:00,2020-11-24 12:54:58+00:00,No Desc,
0,CAMEL-15887,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.7.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-11-24 10:30:58+00:00,2020-11-25 05:11:23+00:00,The PropertiesBindingSupport has code to deal with map/list/arrays but we should add support for properties,
0,CAMEL-15856,Bug,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jeremy Ross,0,1,2020-11-15 20:03:22+00:00,2020-11-30 10:08:25+00:00,"In some scenarios, the maven plugin generates the same enum values from different picklist values, e.g.


""A+"" -> A_
""A-"" -> A_",
0,CAMEL-15855,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jeremy Ross,0,2,2020-11-15 19:29:39+00:00,2020-11-16 21:26:37+00:00,"Salesforce field labels can contain characters that need to be escaped in the generated DTOs. Currently, DTOs can end up with strings like this:




"" Enable ""Delete From Field History Archive""""




As a result, DTOs will not compile.",davsclaus:1605533197:2020-11-16T21:26:37.577+0000:1605533197:2020-11-16T21:26:37.577+0000:Thanks for your great work on the salesforce component
0,CAMEL-15854,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-15 11:38:40+00:00,2020-12-06 11:37:26+00:00,"camel-allcomponent is only for endpoint/component dsl building order.
After that there are other components that need to be included.


So we need something that generate a pom for the assembly, or if you can tell maven to always do apache-camel last no matter what.","davsclaus:1607220554:2020-12-06T10:09:14.675+0000:1607220554:2020-12-06T10:09:14.675+0000:[WARNING] The following patterns were never triggered in this artifact inclusion filter:
o  'org.apache.camel:apt'
o  'org.apache.camel:camel-aws-xray'
o  'org.apache.camel:camel-elytron'
o  'org.apache.camel:camel-etcd3'
o  'org.apache.camel:camel-hystrix'
o  'org.apache.camel:camel-jasypt'
o  'org.apache.camel:camel-leveldb'
o  'org.apache.camel:camel-lra'
o  'org.apache.camel:camel-microprofile-config'
o  'org.apache.camel:camel-microprofile-fault-tolerance'
o  'org.apache.camel:camel-microprofile-health'
o  'org.apache.camel:camel-opentelemetry'
o  'org.apache.camel:camel-opentracing'
o  'org.apache.camel:camel-platform-http-vertx'
o  'org.apache.camel:camel-reactive-executor-vertx'
o  'org.apache.camel:camel-reactor'
o  'org.apache.camel:camel-redis'
o  'org.apache.camel:camel-resilience4j'
o  'org.apache.camel:camel-rxjava'
o  'org.apache.camel:camel-shiro'
o  'org.apache.camel:camel-spring-security'
o  'org.apache.camel:camel-test-cdi'
o  'org.apache.camel:camel-test-spring'
o  'org.apache.camel:camel-testcontainers-junit5'
o  'org.apache.camel:camel-testcontainers-spring'
o  'org.apache.camel:camel-testcontainers-spring-junit5'
o  'org.apache.camel:camel-threadpoolfactory-vertx'
o  'org.apache.camel:camel-tracing'
o  'org.apache.camel:camel-undertow-spring-security'
o  'org.apache.camel:camel-zipkin'"
0,CAMEL-15853,New Feature,Minor,None,,"

help-wanted

",Resolved,Information Provided,None,Unassigned,Oliver Wulff,0,2,2020-11-13 14:25:47+00:00,2023-12-25 19:00:33+00:00,"The ElasticsearchProducer doesn't support the SearchTemplateRequest of the high level REST client.


https://github.com/apache/camel/blob/master/components/camel-elasticsearch-rest/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java


 


The SearchTemplateRequest allows to execute a search by using an Elasticsearch Search Template as described here:


https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-search-template.html","davsclaus:1662110386:2022-09-02T17:19:46.612+0000:1662110386:2022-09-02T17:19:46.612+0000:Community users is welcome to help wit h this
davsclaus:1703501903:2023-12-25T18:58:23.153+0000:1703501903:2023-12-25T18:58:23.153+0000:We have the low-level component now that is more maintainable as the client library is ASL compatible.
We may deprecate the old component as we cant upgrade to newer version as they change the license of the JAR
https://github.com/elastic/elasticsearch/commit/a92a647b9f17d1bddf5c707490a19482c273eda3"
0,CAMEL-15852,Bug,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-11-13 12:23:45+00:00,2020-11-15 16:54:35+00:00,"I'm trying to bind some properties to an object that has a filed of type Map<String, Object> and it looks like that when the keys for the map contain a dot, the the mapping fails.


As example:




 Map<String, Object> properties = mapOf(
    ""resources[0].name"", ""knative3"",
    ""resources[0].type"", ""endpoint"",
    ""resources[0].metadata[knative.apiVersion]"", ""serving.knative.dev/v1"",
    ""resources[0].metadata[knative.kind]"", ""Service"",
);

CamelContext context = new DefaultCamelContext();
KnativeEnvironment env = KnativeEnvironment.mandatoryLoadFromProperties(context, properties);
List<KnativeResource> res = env.lookup(Knative.Type.endpoint, ""knative3"").collect(Collectors.toList());

assertThat(res).hasSize(1);
assertThat(res).first().satisfies(resource  -> {
    assertThat(resource.getName()).isEqualTo(""knative3"");
    assertThat(resource.getMetadata()).isNotEmpty();
});




This code fails as resource.getMetadata() return an empty map, if the properties are then changed to:




 Map<String, Object> properties = mapOf(
    ""resources[0].name"", ""knative3"",
    ""resources[0].type"", ""endpoint"",
    ""resources[0].metadata[knative_apiVersion]"", ""serving.knative.dev/v1"",
    ""resources[0].metadata[knative_kind]"", ""Service"",
);




Then the test succeeds.","davsclaus:1605249319:2020-11-13T14:35:19.993+0000:1605249319:2020-11-13T14:35:19.993+0000:Ah yeah dont use dots in keys - didnt you learn that in school ;)

Yeah lets add support for this, should be possible somewhere in the PBS class somewhere ;)
lb:1605249851:2020-11-13T14:44:11.278+0000:1605249851:2020-11-13T14:44:11.278+0000:Yeah they told me that but you never listen when  you are young :)
I'm in the process to remove almost everything from metadata and have proper types but still need to keep them around for backward compatibility for a while :("
0,CAMEL-15851,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-13 09:20:48+00:00,2020-11-13 09:36:27+00:00,No Desc,
0,CAMEL-15850,Task,Major,None,3.10.0,"
None
",Resolved,Fixed,3.10.0,Jean-Baptiste Onofré,Claus Ibsen,0,3,2020-11-13 06:14:20+00:00,2021-04-27 12:28:37+00:00,No Desc,"acosentino:1605219488:2020-11-13T06:18:08.389+0000:1605219488:2020-11-13T06:18:08.389+0000:We are using jetty feature in some of our karaf feature and it's not available in the new release of Karaf. I think we need to wait for an alias on 4.3.1
davsclaus:1605219530:2020-11-13T06:18:50.703+0000:1605219530:2020-11-13T06:18:50.703+0000:There are about 10 features that dont validate
davsclaus:1605533367:2020-11-16T21:29:27.670+0000:1605533367:2020-11-16T21:29:27.670+0000:Okay so the karaf team knows about this and works on a fix for 4.3.1 ?
davsclaus:1607054597:2020-12-04T12:03:17.183+0000:1607054597:2020-12-04T12:03:17.183+0000:Is there a new karaf release soon?
jbonofre:1610176404:2021-01-09T15:13:24.767+0000:1610176404:2021-01-09T15:13:24.767+0000:Yes, I'm preparing 4.3.1 that will work fine."
0,CAMEL-15849,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-12 20:23:58+00:00,2020-11-13 09:31:04+00:00,Spring Boot 2.4.0 has been released.,
0,CAMEL-15848,Improvement,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Vladimir,0,1,2020-11-12 14:39:17+00:00,2020-11-13 06:07:20+00:00,"Store document, copy document and update document (CheckIn) should accept VersioningState parameter.",Cherepnalkovski:1605163245:2020-11-12T14:40:45.540+0000:1605163245:2020-11-12T14:40:45.540+0000:I'm working on this.
0,CAMEL-15847,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,James Netherton,James Netherton,0,1,2020-11-12 10:12:18+00:00,2020-11-13 10:05:25+00:00,The Workday component declares a dependency on camel-core. It should be enough to only depend on camel-support like most other components.,
0,CAMEL-15846,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-12 09:38:46+00:00,2020-11-12 16:34:37+00:00,That was really no longer in use in 3.x.,
0,CAMEL-15845,New Feature,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,James Netherton,James Netherton,0,2,2020-11-12 08:46:02+00:00,2020-11-12 14:34:26+00:00,"It'd be nice if there was a way to consume GitHub events via the event APIs:


https://developer.github.com/v3/activity/events/#events


Then you can poll and get a handle on activity that occurs on any repo or for stuff that the user is interested in.","acosentino:1605142783:2020-11-12T08:59:43.610+0000:1605142783:2020-11-12T08:59:43.610+0000:Do you think we can switch from egit to kohsuke github api? I think it is better maintained. Maybe a different component?
jamesnetherton:1605143968:2020-11-12T09:19:28.058+0000:1605143968:2020-11-12T09:19:28.058+0000:I was wondering about that. We have CAMEL-14470. Should I hold on submitting a PR for this until it has been investigated?

I've already done all of the work to support the events API, it's been lingering on a local branch for some weeks, so wanted to get it contributed if possible.

acosentino:1605144340:2020-11-12T09:25:40.461+0000:1605144340:2020-11-12T09:25:40.461+0000:Totally fine to push on this. I think we should create a different component eventually, if egit is still fine and maintained. My overall experience was quite good with both, but the kohsuke seems a bit better maintained"
0,CAMEL-15844,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,2,2020-11-11 20:07:48+00:00,2021-01-23 13:33:35+00:00,"There are some model and reifier wiring that happens when creating a route via RouteReifier. But this is triggered when starting a route.


Lets see if we divide this into two phases



init
start



Then we can do more work in init phase and potentially be able to avoid some of the complexity with error handling and model later on and the clearModel on DefaultRoute that is triggered later.


This can aid the runtime route vs model+reifier modularization even more.","Mahas_M:1607382249:2020-12-08T07:04:09.663+0000:1607382249:2020-12-08T07:04:09.663+0000:Hi,

I'm Mohammadu Milhar Mahas, a second year undergraduate in Computer Science at the University of Jaffna, Sri Lanka,

I would like to work with this project 

please help me to start up this project

 
Mahas_M:1607382296:2020-12-08T07:04:56.369+0000:1607382296:2020-12-08T07:04:56.369+0000:can i start up this project for Gsoc 2021?
davsclaus:1611275190:2021-01-22T08:26:30.833+0000:1611275190:2021-01-22T08:26:30.833+0000:Mohammadu, sorry this is a ticket about some internal refactorings, that its not suitable for gsoc. You are welcome to look for other tickets in Camel JIRA. 
Mahas_M:1611275990:2021-01-22T08:39:50.148+0000:1611275990:2021-01-22T08:39:50.148+0000:ok

thank you claus ibsen

 
davsclaus:1611377054:2021-01-23T12:44:14.238+0000:1611377054:2021-01-23T12:44:14.238+0000:camel-bean - Initialize earlier for static bean *DONE*"
0,CAMEL-15843,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-11-11 12:37:01+00:00,2020-11-23 12:24:52+00:00,"This is something coming from camel-aws, but now we are using a different approach with default credential provider https://sdk.amazonaws.com/java/api/latest/index.html?software/amazon/awssdk/auth/credentials/DefaultCredentialsProvider.html


The name useIamCredentials is now a bit misleading.",
0,CAMEL-15842,Improvement,Major,None,3.x,"
None
",Resolved,Abandoned,3.x,Ramu,Claus Ibsen,0,1,2020-11-11 06:06:12+00:00,2022-01-10 08:23:49+00:00,"camel-cdi has dropped CDI 1.x support but there are some leftovers for 1.x and 2.0 workarounds from the past. We should cleanup this module.


See talks at
https://github.com/apache/camel/pull/4562",
0,CAMEL-15841,Bug,Major,3.5.0,,"
None
",Resolved,Invalid,None,Unassigned,Vyacheslav Boyko,0,2,2020-11-10 19:18:56+00:00,2020-11-10 19:21:35+00:00,"my build.gradle is




plugins {
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.bvn13'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	//implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.5.0'
	implementation 'org.apache.camel:camel-http:3.5.0'
	implementation 'org.apache.camel:camel-jetty:3.5.0'
	implementation 'org.apache.camel:camel-gson:3.5.0'
	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}




my route builder is:




import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.dataformat.JsonLibrary;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class EgaisExpirationDateSearcher extends RouteBuilder {

    private final String host;
    private final int port;
    
    private final String searchEndpoint;

    public EgaisExpirationDateSearcher(
            @Value(""${app.listen.host}"") String host,
            @Value(""${app.listen.port}"") int port) {
        this.host = host;
        this.port = port;
        searchEndpoint = ""jetty:http://""+host+"":""+port+""/expire"";
        
        log.info(""Listening at: {}"", searchEndpoint);
    }

    @Override
    public void configure() throws Exception {
        
        from(searchEndpoint+""?httpMethodRestrict=POST"")
            .log(""${body}"")  // <-----------------
            .unmarshal().json(JsonLibrary.Gson, SearchRequest.class)
            .log(""${body}"")
            .process((exchange) -> {
                exchange.getMessage().setBody(""HI!"");
            })
            ;
        
        
    }

}





my application properties are:




app:
  listen:
    host: localhost
    port: 9091




I have an object as request body:




import lombok.Value;

@Value
public class SearchRequest {
    String contraInn;
    String alcoGoodName;
}




I perform POST HTTP request like




curl -X POST -H ""Content-Type: application/json"" -d '{""contraInn"":123,""alcoGoodName"":""name""}' http://localhost:9091/expire




now take a look at pointed line in route builder: 




.log(""${body}"")  // <-----------------




if I comment this line (disable logging) the log has following lines:




2020-11-10 22:07:52.172  INFO 1344 --- [           main] c.b.b.e.EgaisConnectorApplication        : Started EgaisConnectorApplication in 2.003 seconds (JVM running for 2.982)
2020-11-10 22:11:05.575  INFO 1344 --- [tp1753113235-31] route2                                   : com.bvn13.beerspot.egaisconnector.SearchRequest@2d34001a




but when I uncomment pointed line the body seems become empty right after logging:




2020-11-10 22:12:40.284  INFO 10924 --- [           main] c.b.b.e.EgaisConnectorApplication        : Started EgaisConnectorApplication in 1.932 seconds (JVM running for 2.78)
2020-11-10 22:12:46.854  INFO 10924 --- [qtp216919586-31] route2                                   : {""contraInn"":123,""alcoGoodName"":""name""}
2020-11-10 22:12:46.857  INFO 10924 --- [qtp216919586-31] route2                                   : null




First log message is logged as arrived, then emptied , unmarshalled to null and logged out as null.


Is it normal?","acosentino:1605007222:2020-11-10T19:20:22.049+0000:1605007222:2020-11-10T19:20:22.049+0000:Please use the mailing list for questions.
acosentino:1605007295:2020-11-10T19:21:35.307+0000:1605007295:2020-11-10T19:21:35.307+0000:And have a look at streamcaching."
0,CAMEL-15840,Bug,Major,"3.4.4, 3.6.0","3.4.5, 3.7.0","
None
",Resolved,Fixed,"3.4.5, 3.7.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-11-10 12:55:50+00:00,2021-05-06 07:41:20+00:00,"Camel is keeping 2 different instances of the configuration object for the AWS 2 SNS component. Subsequently, changes to the object instances cause both of them to be out of sync leading to undefined behavior depending on each copy is read.


The problem flow is:



A copy of the configuration object if created when instantiating the endpoint: https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L57
The copy object is then set with additional configuration values, such as the topic and topicArn: https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L63-L66
Then, when trying to set the component properties, the configuration object will be overwritten and the changes on step 2 may be lost: https://github.com/apache/camel/blob/46945de816123cc894846a7e5cfe145f39e76f95/components/camel-aws2-sns/src/main/java/org/apache/camel/component/aws2/sns/Sns2Component.java#L69



 


Under some circumstances, such as when using a custom configuration object this causes the code to overwrite the object.


Here's a code snippet of the debug of the content of the parameters Map, used by setProperties to setup the endpoint. The introspection will eventually overwrite the configuration object.


 




2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: accessKey, Value: accesskey
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: configuration, Value: #class:org.apache.camel.kafkaconnector.aws.v2.sns.sink.TestSnsConfiguration
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: queueUrl, Value: http://localhost:35886/000000000000/ckcsns-608
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: region, Value: us-east-1
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: secretKey, Value: secretkey
2020-11-10 13:52:33,853 [nectorWithUrl-0] DEBUG org.apache.camel.component.aws2.sns.Sns2Component - Parameters -- Key: subscribeSNStoSQS, Value: true",
0,CAMEL-15839,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-10 10:33:41+00:00,2020-11-11 17:09:24+00:00,"To help optimize the core, then it would be good to not register error handlers in JMX as there is some tangle from model to the jmx mbean naming.


This is a ticket to remember to look into this, as either remove the error handler mbeans as they are not kpi metrics anyway.


But there may be another way to keep them with some alternative way of mbean naming we can try first.",davsclaus:1605085764:2020-11-11T17:09:24.960+0000:1605085764:2020-11-11T17:09:24.960+0000:JMX MBeans for error handlers removed
0,CAMEL-15838,New Feature,Major,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Romain Manni-Bucau,0,2,2020-11-10 09:13:39+00:00,2022-09-02 17:19:10+00:00,"Goal is to use microprofile openapi (therefore + jsonb) instead of 
io.apicurio.datamodels and jackson. This enables MP applications using camel to not rely on undesired 3rd party libraries.
MP OpenAPI provides a factory for its component (model) so this can be portable.
Code is likely more or less the same than the existing one but with a fully different stack.",
0,CAMEL-15837,New Feature,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Alex Dettinger,Alex Dettinger,0,1,2020-11-09 18:23:46+00:00,2020-11-10 10:17:32+00:00,No Desc,
0,CAMEL-15836,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-09 15:02:19+00:00,2020-11-12 16:37:18+00:00,"We could add to @Metadata so we can markup on components which options can be autowried automatic by its type, but looking up in registry for 1 instance of this type, and use it automatic.


Such as JMS connection factory, JDBC DataSources, AWS Clients, Infinispan Client, etc.


We had some code in camel-main in 3.6 or older, but this code was ""too magic"" and introspected all options and whatnot. And this causing longer startup and more memory. And each component generated metadata that took up memory space. That essentially was waste for 99% use cases.


But if we have this marked up for specific options only, then we can make this faster and light.","davsclaus:1605152785:2020-11-12T11:46:25.483+0000:1605170232:2020-11-12T16:37:12.263+0000:TODO: source code generator *DONE*
TODO: component level *DONE*
TODO: show in docs *DONE*
TODO: endpoint level *DONE*
TODO: language level *DONE*
TODO: data format level *DONE*
TODO: option to turn on|off *DONE*
TODO: regen camel karaf *DONE*
TODO: regen camel spring boot *DONE*"
0,CAMEL-15835,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-09 14:52:08+00:00,2020-11-12 10:12:31+00:00,Then it has the same option as spring jms component.,
0,CAMEL-15834,Bug,Major,"3.4.4, 3.6.0","3.4.5, 3.7.0","
None
",Resolved,Fixed,"3.4.5, 3.7.0",James Netherton,James Netherton,0,1,2020-11-09 09:52:15+00:00,2020-11-09 10:33:43+00:00,"Something I observed in camel-quarkus, when the NATS integration test occasionally fails with connection errors, there's also NullPointerException thrown from the consumer doStop().




[INFO] Caused by: java.lang.NullPointerException
[INFO] 	at org.apache.camel.component.nats.NatsConsumer.doStop(NatsConsumer.java:71)
[INFO] 	at org.apache.camel.support.service.BaseService.stop(BaseService.java:156)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopService(ServiceHelper.java:133)
[INFO] 	at org.apache.camel.support.service.ServiceHelper.stopAndShutdownService(ServiceHelper.java:198)
[INFO] 	at org.apache.camel.impl.engine.RouteService.stopChildService(RouteService.java:352)
[INFO] 	at org.apache.camel.impl.engine.RouteService.doStop(RouteService.java:240)
[INFO] 	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:86)",
0,CAMEL-15833,Bug,Major,"3.4.4, 3.6.0",3.7.0,"
None
",Resolved,Fixed,3.7.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-11-09 09:10:48+00:00,2020-11-10 10:47:26+00:00,"The AWS v2 SQS component has a time-of-check / time-of-use bug when creating queues. Currently, the code checks if the queue exists and, if not, creates it.


However, if another application or thread creates the queue in between the check and the creation, the component fails and the startup is aborted.


 


IMHO, a better approach would be to - in case of an exception - check if the queue hasn't been created before aborting.",orpiske:1604976446:2020-11-10T10:47:26.322+0000:1604976446:2020-11-10T10:47:26.322+0000:Just verified the issue and it is working as expected after applying the patch.
0,CAMEL-15832,Sub-task,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Aurélien Pupier,0,2,2020-11-06 15:40:41+00:00,2020-12-04 12:12:03+00:00,"/**
     * Represents the consumer class which is injected and created by consumers
     */
    @Deprecated
    Class<?> consumerClass() default Object.class;




no information by what it needs to be replaced



    /**
     * To associate this endpoint with label(s).
     * <p/>
     * Multiple labels can be defined as a comma separated value.
     * <p/>
     * The labels is intended for grouping the endpoints, such as <tt>core</tt>, <tt>file</tt>, <tt>messaging</tt>,
     * <tt>database</tt>, etc.
     * <p/>
     * Deprecated: Use the category field instead
     */
    @Deprecated
    String label() default """";




shoudl be easy to replace with category","davsclaus:1604960632:2020-11-10T06:23:52.162+0000:1604960632:2020-11-10T06:23:52.162+0000:Yeah remove the first, and change label to a category"
0,CAMEL-15831,Sub-task,Trivial,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Aurélien Pupier,0,1,2020-11-06 15:32:54+00:00,2020-11-09 08:26:44+00:00,"XXXComponent  contains unused import for CamelContext
XXXConsumer contains unused import RuntimeCamelException",apupier:1604880683:2020-11-09T08:11:23.392+0000:1604880683:2020-11-09T08:11:23.392+0000:start working on it
0,CAMEL-15830,Sub-task,Trivial,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Aurélien Pupier,0,1,2020-11-06 15:28:22+00:00,2020-11-09 08:26:27+00:00,final private Set<Consumer> subscribers = ConcurrentHashMap.newKeySet();,apupier:1604880903:2020-11-09T08:15:03.192+0000:1604880903:2020-11-09T08:15:03.192+0000:start working on it
0,CAMEL-15829,Sub-task,Trivial,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Aurélien Pupier,0,1,2020-11-06 15:27:05+00:00,2020-11-09 08:17:26+00:00,// TODO: Delete me when you implementy your custom component,apupier:1604880458:2020-11-09T08:07:38.349+0000:1604880458:2020-11-09T08:07:38.349+0000:starting to work on it
0,CAMEL-15828,Sub-task,Major,3.6.0,None,"
None
",Resolved,Won't Do,None,Unassigned,Aurélien Pupier,0,2,2020-11-06 15:25:52+00:00,2020-11-09 08:51:36+00:00,"for instance when using space in the name, several classes contains space in the name which is invalid.


Solution:



sanitize provided name
throw error","davsclaus:1604651539:2020-11-06T16:32:19.836+0000:1604651539:2020-11-06T16:32:19.836+0000:Are you talking about the maven archetypes?
apupier:1604879353:2020-11-09T07:49:13.910+0000:1604879353:2020-11-09T07:49:13.910+0000:yes, I'm talking of the maven archetype to generate a new component
davsclaus:1604882166:2020-11-09T08:36:06.895+0000:1604882166:2020-11-09T08:36:06.895+0000:We have no control of the input class name, its apache maven that generates the project from the archetype.
apupier:1604882485:2020-11-09T08:41:25.937+0000:1604882485:2020-11-09T08:41:25.937+0000:it seems that a regex can be provided https://issues.apache.org/jira/browse/ARCHETYPE-487
apupier:1604883055:2020-11-09T08:50:55.879+0000:1604883055:2020-11-09T08:50:55.879+0000:another possibility is to sanitize the provided name. it seems that this can be done only after project creation using a Post-generation script https://maven.apache.org/archetype/maven-archetype-plugin/advanced-usage.html#Post-generation_script"
0,CAMEL-15827,Improvement,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Aurélien Pupier,0,1,2020-11-06 15:23:28+00:00,2020-12-04 12:12:09+00:00,"after creation several warnings and potential errors are left in the code.
I will raise subtask for each o fthem.",
0,CAMEL-15826,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-06 11:49:23+00:00,2020-11-09 15:21:39+00:00,"There is some magic autowrie by type on components that discovers complex types on components and check if there is a single item in registry of this type and then auto configure it.


Its a bit too magic and requires to introspect each component during bootstrap. This takes up memory.


And this is special for camel-main only.",
0,CAMEL-15825,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,James Netherton,James Netherton,0,1,2020-11-06 11:09:18+00:00,2020-11-09 13:20:22+00:00,"Unless I'm missing something, I don't see a way of configuring any aspect of the ScheduledPollConsumer for the GitHub component consumers.


So they poll with the default 500 milliseconds, which is not so friendly and quickly results in rate limits being exceeded.",
0,CAMEL-15824,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-06 06:01:54+00:00,2020-11-07 10:25:46+00:00,We can optimize configurer to not rely on ALL_OPTIONS Map for getting a class type for an option name. This avoid having the big map in memory.,
0,CAMEL-15823,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-05 18:03:59+00:00,2020-11-09 15:22:14+00:00,"We can potentially optimize on each DefaultErrorHandler where it does a copy of redelivery policy and have a private instance. But it may be that the policy is only used as read-only, and state is stored on exchange / in its own task.",
0,CAMEL-15822,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Luigi De Masi,Luigi De Masi,0,1,2020-11-05 16:46:22+00:00,2020-11-10 17:21:42+00:00,"When both fileExist=Move and tempFile are set, GenericFileProducer.doMoveExistingFile is called, while when tempFile is not set FileMoveExistingStrategy.moveExistingFile.


 It seems a leftover from 2.X -> 3.x migration.


As a result, endpoints like that won't work because GenericFileProducer.doMoveExistingFile doesn't support dynamic subdirectory auto-creation:




file://data/file?tempFileName=${file:onlyname}.temp&fileExist=Move&moveExisting=${file:parent}/archive-${date:now:yyyyMMddHHmmssSSS}/${file:onlyname}""




 


it would be nice to have support for partial dynamic subdir name like this :


 




fileExist=Move&moveExisting=archive-${date:now:yyyyMMddHHmmssSSS}/",
0,CAMEL-15821,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-05 16:03:17+00:00,2020-12-11 12:31:34+00:00,"Consider how route templates and lightweight mode may not work together. So we should have a way of using route templates and from those create routes, and then signal to camel that we are done so it can do its optimizations as part of lightweight mode","davsclaus:1607149133:2020-12-05T14:18:53.971+0000:1607149133:2020-12-05T14:18:53.971+0000:[~lburgazzoli] was there something in camel-k-runtime that adds route templates (kamelets) at a later stage? 

The out of the box camel-main and route templates are added and initialized before lightweight mode kicks in and locks the camel context model."
0,CAMEL-15820,Improvement,Minor,None,None,"
None
",Closed,Won't Fix,None,Zineb Bendhiba,Zineb Bendhiba,0,2,2020-11-05 15:00:09+00:00,2023-03-29 09:53:04+00:00,"Improve some code in the component, to compile in native mode for camel-quarkus.



The 2 methods getOrCreateHzInstance and getOrCreateHzClientInstance in the class HazelcastDefaultComponent. vs parameters within the Endpoint.



Main point : Use parameters instead of reflection","davsclaus:1662110326:2022-09-02T17:18:46.131+0000:1662110326:2022-09-02T17:18:46.131+0000:Is this needed anymore?

zbendhiba:1662507939:2022-09-07T07:45:39.979+0000:1662507939:2022-09-07T07:45:39.979+0000:I guess yes, I just don't know how to improve without doing beraking changes"
0,CAMEL-15819,Bug,Major,3.7.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Jiri Ondrusek,Jiri Ondrusek,0,2,2020-11-05 14:55:16+00:00,2020-11-09 15:21:58+00:00,"I've created simple reproducer, using spring-boot starter: https://github.com/JiriOndrusek/camel-jsonb-reproducer


 


There is only 1 route, which marshals pojo and logs it. Reproducer is working.


 


If you remove dependency to 'johnzon-jsonb' (https://github.com/JiriOndrusek/camel-jsonb-reproducer/blob/main/pom.xml#L101), it start failing with:


 


Caused by: java.lang.ClassNotFoundException: org.apache.johnzon.jsonb.JohnzonProvider
 at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) ~[na:na]
 at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na]
 at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na]
 at javax.json.bind.spi.JsonbProvider.doLoadProvider(JsonbProvider.java:79) ~[geronimo-jsonb_1.0_spec-1.0.jar:1.0]
 ... 54 common frames omitted>


 


Problem is caused by the fact, that spi uses jonzon as default provider (see https://github.com/apache/geronimo-specs/blob/trunk/geronimo-jsonb_1.0_spec/src/main/java/javax/json/bind/spi/JsonbProvider.java#L30)


 


Solution could be for example adding jonzon into camel-jsonb or adding to documentation, that provider implementation has to be provided.","davsclaus:1604561077:2020-11-05T15:24:37.827+0000:1604561077:2020-11-05T15:24:37.827+0000:I dont see this as a bug. When you use a spec like jsonb, then you need to bring your own favorite implementation - like johnzon or whatelse is out there.

So instead the documentation of this should mention this. "
0,CAMEL-15818,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-11-05 11:24:19+00:00,2020-11-09 15:57:25+00:00,"Its not so easy today. The saxon component can do it, but on the language level its harder.",
0,CAMEL-15817,Improvement,Minor,None,3.7.0,"
None
",Closed,Fixed,3.7.0,Omar Al-Safi,Omar Al-Safi,0,2,2020-11-05 11:18:05+00:00,2020-11-05 11:40:26+00:00,"Currently we don't support comments on fields when we generate code only javadoc, hence it will also make sense to add comment support to fields, e.g:




// topic
@UriPath(label = ""common"")
@Metadata(required = true)
 private String topic;","davsclaus:1604547075:2020-11-05T11:31:15.094+0000:1604547075:2020-11-05T11:31:15.094+0000:What do you mean? @Metadata has a description. Or do you mean actual source code comments like // hello world
And if so what is the use-case.

I am just curious as I also want to avoid the generators to become to bloated and complex with too many moving parts. - camel-package-maven-plugin is a big set of code already.
davsclaus:1604547211:2020-11-05T11:33:31.847+0000:1604547211:2020-11-05T11:33:31.847+0000:Ah speaking to quick, just saw the PR. That is reasonable easy to maintain.
omarsmak:1604547437:2020-11-05T11:37:17.822+0000:1604547437:2020-11-05T11:37:17.822+0000:[~davsclaus] as you see in PR, just code comments like {{// hello}} which is noting complex here as you mentioned "
0,CAMEL-15816,Improvement,Major,None,,"
None
",Resolved,Auto Closed,None,Unassigned,Zoran Regvart,0,2,2020-11-05 09:42:30+00:00,2022-01-16 18:47:28+00:00,"When we build the website we pull in files from several git repositories and several branches within them. The result of the website build is pushed to the asf-site branch on the camel-website repository and it is now squashed to conserve storage space in git. The commit message in the asf-site branch points to the commit on main branch of the camel-website repository that was the source of the build.


It would be useful to have that commit message point to all of the repositories (branches?) that contributed to the website at that point.",davsclaus:1642330044:2022-01-16T18:47:24.097+0000:1642330044:2022-01-16T18:47:24.097+0000:Tracked by camel-website issue tracker now: https://github.com/apache/camel-website/issues/759
0,CAMEL-15815,Bug,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,ncasaux,0,2,2020-11-05 09:04:28+00:00,2020-12-04 12:33:21+00:00,"Hello,


 


I found something which seems unexpected with the enrich processor and Camel 3.6.0.


 If you consider those 2 routes:


  




from(timer(""foo""))
         .setBody(constant(""1""))
         .enrich(""seda://test-${body}"");
 
 from(timer(""bar""))
         .setBody(constant(""2""))
         .enrich(seda(""test-${body}""));



 


In the log, it says:




[mel-1) thread #6 - timer://bar] SedaEndpoint                   INFO  Endpoint seda://test-2 is using shared queue: seda://test-2 with size: 1000
[mel-1) thread #5 - timer://foo] SedaEndpoint                   INFO  Endpoint seda://test-$%7Bbody%7D is using shared queue: seda://test-$%7Bbody%7D with size: 1000 




 


So the route using the enrich with “EndpointRouteBuilder style” seems to consider the endpoint URI as a “simple” expression (and resolves it), and the other one like a “constant” expression (which is what I expected). In the first case, it means that the endpoint is resolved for every exchange processed.


 


It’s possible to “force” the constant expression using this though:




from(timer(""biz""))
         .setBody(constant(""3""))
         .enrich().constant(seda(""test-${body}""));



 


Regards,


Nicolas","davsclaus:1604538913:2020-11-05T09:15:13.643+0000:1604538913:2020-11-05T09:15:13.643+0000:We need to do something like we do in toD and wireTap where we have special support for this.

This would be for Enrich and pollEnrich EIP both of them

ncasaux:1604539597:2020-11-05T09:26:37.915+0000:1604539597:2020-11-05T09:26:37.915+0000:From my tests, the issue is not happening with pollEnrich:
{code:java}
from(timer(""foo""))
 .setBody(constant(""1""))
 .pollEnrich(""seda://test1-${body}"");

from(timer(""bar""))
 .setBody(constant(""2""))
 .pollEnrich(seda(""test2-${body}""));{code}
 
{code:java}
[ main] SedaEndpoint INFO Endpoint seda://test1-$%7Bbody%7D is using shared queue: seda://test1-$%7Bbody%7D with size: 1000
[ main] SedaEndpoint INFO Endpoint seda://test2-$%7Bbody%7D is using shared queue: seda://test2-$%7Bbody%7D with size: 1000{code}
 "
0,CAMEL-15814,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-11-05 08:30:43+00:00,2020-11-05 10:40:31+00:00,No Desc,
0,CAMEL-15813,Improvement,Minor,None,3.7.0,"

grpc

",Resolved,Fixed,3.7.0,Unassigned,Tim Sexton,0,1,2020-11-04 22:27:31+00:00,2020-11-23 18:04:03+00:00,"In order to implement different authentication, metrics and logging options there needs to be an ability to use client interceptors on the grpc channel.  Currently, there is no ability to setup these interceptors on the channel because it is setup as a part of a private method in the Component.",
0,CAMEL-15812,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-11-04 17:27:51+00:00,2021-01-04 15:42:08+00:00,We can specify something more through headers.,"acosentino:1604988821:2020-11-10T14:13:41.336+0000:1604988821:2020-11-10T14:13:41.336+0000:Commit consumer has been fixed.
acosentino:1604988833:2020-11-10T14:13:53.483+0000:1604988833:2020-11-10T14:13:53.483+0000:Working on branch and tag"
0,CAMEL-15811,Bug,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Marco Collovati,0,1,2020-11-04 16:54:10+00:00,2020-11-05 07:11:31+00:00,"Starting from camel 3.6, camel-report-maven-plugin validate goal  fails to validate simple expressions; on console log I see an error [null] for every expression, also simple ones like ${body.id}.


Debugging a bit I found that error is due to a NPE on the ExpressionAdapter created
 in SimpleExpressionBuilder.bodyOgnlExpression, and more specifically in the 
init method, that uses CamelContext to resolve bean language.


 When running from maven goal execution, at a certain point, init method is called with a null CamelContext reference and this causes the NPE.


Below an extract of the stacktrace


 



 java.lang.NullPointerException
 at org.apache.camel.language.simple.SimpleExpressionBuilder$28.init(SimpleExpressionBuilder.java:761)
 at org.apache.camel.language.simple.ast.SimpleFunctionExpression.createExpression(SimpleFunctionExpression.java:61)
 at org.apache.camel.language.simple.ast.SimpleFunctionStart.doCreateLiteralExpression(SimpleFunctionStart.java:70)
 at org.apache.camel.language.simple.ast.SimpleFunctionStart.createExpression(SimpleFunctionStart.java:60)
 at org.apache.camel.language.simple.SimpleExpressionParser.createExpressions(SimpleExpressionParser.java:165)
 at org.apache.camel.language.simple.SimpleExpressionParser.doParseExpression(SimpleExpressionParser.java:88)
 at org.apache.camel.language.simple.SimpleExpressionParser.parseExpression(SimpleExpressionParser.java:55)
 at org.apache.camel.language.simple.SimpleLanguage.createExpression(SimpleLanguage.java:132)




In 3.5 *init* method was nor overridden by the ExpressionAdapter nor invoked in SimpleFunctionExpression.createExpression.",
0,CAMEL-15810,Bug,Minor,3.4.4,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Josh Smith,0,2,2020-11-04 16:37:59+00:00,2020-11-05 11:29:00+00:00,"When calling an overloaded method, Camel has to evaluate the parameter types to determine which is the correct method to call. For a parameter that is a simple expression, Camel will evaluate the type, but doesn't recognize it can call a method with a subtype of the expected type.


I've included a patch with a test to demonstrate.",davsclaus:1604546940:2020-11-05T11:29:00.913+0000:1604546940:2020-11-05T11:29:00.913+0000:Thanks for reporting and for the test case
0,CAMEL-15809,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jens Kleine-Herzbruch,0,1,2020-11-04 14:38:47+00:00,2020-11-05 05:56:41+00:00,The compound predicates created by PredicateBuilder should initialize their contained predicates/expressions.,
0,CAMEL-15808,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Jens Kleine-Herzbruch,0,1,2020-11-04 14:12:44+00:00,2020-11-05 05:56:32+00:00,"For Predicates added via




mock.expectedMessagesMatches(Perdicates... predicates) 



you can end up with NPE because those predicates never get initialized:


 




2020-11-04 15:11:14,244 [main] ERROR org.apache.camel.component.mock.MockEndpoint  - Caught exception on mock://myMock due to: null
java.lang.NullPointerException: null
	at org.apache.camel.support.builder.ExpressionBuilder$55.evaluate(ExpressionBuilder.java:1587) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:35) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.BinaryPredicateSupport.matchesReturningFailureMessage(BinaryPredicateSupport.java:67) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.BinaryPredicateSupport.matches(BinaryPredicateSupport.java:56) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.builder.PredicateBuilder$2.matches(PredicateBuilder.java:69) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PredicateAssertHelper.doAssertMatches(PredicateAssertHelper.java:50) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:45) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:114) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint$9.assertOnIndex(MockEndpoint.java:813) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint.onExchange(MockEndpoint.java:1566) ~[camel-mock-3.6.0.jar:3.6.0]
	at org.apache.camel.component.mock.MockEndpoint$1.process(MockEndpoint.java:303) ~[camel-mock-3.6.0.jar:3.6.0]",
0,CAMEL-15807,Bug,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Antoine DESSAIGNE,0,1,2020-11-04 13:29:35+00:00,2020-11-04 17:53:03+00:00,"Hello,


We noticed a regression in simple expressions that was introduced in Camel 3.6.0.


Consider the following routes



from(""timer:foo?repeatCount=1"")
    .setBody(constant(""The answer is 42.""))
    .choice()
        .when(simple(""${body} contains '42'"")).log(""We have an answer"")
        .otherwise().log(""We don't have an answer"");




It prints the ""otherwise"" message in Camel 3.6.0 but shouldn't. It works if the contains operator is ' 42' (prefixed by a space) or is 'answer'


Can you have a look at it? Thank you very much.",antoine.dessaigne:1604483583:2020-11-04T17:53:03.682+0000:1604483583:2020-11-04T17:53:03.682+0000:Thank you very much [~davsclaus]
0,CAMEL-15776,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-30 07:44:19+00:00,2020-10-30 08:53:56+00:00,We can likely remove this as the converter is improved since this old code.,
0,CAMEL-15775,Task,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Claus Ibsen,0,1,2020-10-30 06:06:47+00:00,2020-11-02 06:22:00+00:00,There is a new release today,
0,CAMEL-15774,Bug,Major,None,,"
None
",Resolved,Fixed,None,David Jencks,David Jencks,0,3,2020-10-30 01:33:07+00:00,2020-10-30 09:18:44+00:00,"With Antora 3.0.0-alpha.1, include:: instructions can suppress ""asciidoctor: ERROR: atlasmap-component.adoc: line 11: include target not found: ..."" errors by including 


[opts=optional].  This modifies tooling to include this in the generated includes for cq bits, updates the generated files correspondingly, and upgrades the Antora version.","githubbot:1603993712:2020-10-30T01:48:32.932+0000:1603993712:2020-10-30T01:48:32.932+0000:djencks opened a new pull request #495:
URL: https://github.com/apache/camel-website/pull/495


   actual Antora version upgrade.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1604020717:2020-10-30T09:18:37.511+0000:1604020717:2020-10-30T09:18:37.511+0000:zregvart merged pull request #495:
URL: https://github.com/apache/camel-website/pull/495


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1604020720:2020-10-30T09:18:40.719+0000:1604020720:2020-10-30T09:18:40.719+0000:zregvart commented on pull request #495:
URL: https://github.com/apache/camel-website/pull/495#issuecomment-719439534


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1604020724:2020-10-30T09:18:44.667+0000:1604020724:2020-10-30T09:18:44.667+0000:Thanks [~djencks]!"
0,CAMEL-15773,Task,Major,None,,"
None
",Resolved,Fixed,None,David Jencks,David Jencks,0,1,2020-10-29 22:14:54+00:00,2020-10-30 05:55:49+00:00,"The recent change to the Antora xref-validator to validate nav files is useful but bogus as it reclassifies nav files as pages, breaking the index extension used to generate tables.


We can work around this by explicitly excluding nav files from the indexTable macro.",
0,CAMEL-15772,New Feature,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Ludovic Boutros,0,2,2020-10-29 17:19:38+00:00,2020-11-02 05:22:07+00:00,"In order to read compacted topics, the component (consumer) should support the readCompacted option.


readCompacted documentation","davsclaus:1603967042:2020-10-29T18:24:02.600+0000:1603967042:2020-10-29T18:24:02.600+0000:Thanks for reporting are you able to help contribute this?
lboutros:1603967788:2020-10-29T18:36:28.068+0000:1603967788:2020-10-29T18:36:28.068+0000:Yes :) PR available. "
0,CAMEL-15771,Improvement,Major,None,None,"
None
",Closed,Invalid,None,Jiri Ondrusek,Jiri Ondrusek,0,2,2020-10-29 15:18:27+00:00,2020-10-29 15:32:25+00:00,"Readme files from various fabric8 quickstart are almost the same.


e.g. spring-boot ones like:



https://github.com/fabric8-quickstarts/spring-boot-camel/blob/master/README.adoc
https://github.com/fabric8-quickstarts/spring-boot-cxf-jaxws-xml/blob/master/README.adoc
https://github.com/fabric8-quickstarts/spring-boot-camel-infinispan/blob/master/README.adoc
...



It would be nice to implement some kind of templating mechanism which will bring for example:



similar readme files for various quickstarts - makes it easier to use for users
possibility to fix some global problem in doc for various quickstarts in one place
probably more benefits



it should be possible to implement such feature using following maven plugin:


https://github.com/whelk-io/asciidoc-template-maven-plugin","acosentino:1603956738:2020-10-29T15:32:18.107+0000:1603956738:2020-10-29T15:32:18.107+0000:I don't think this is an Apache Camel related issue, fabric8 is a different organization."
0,CAMEL-15770,Improvement,Minor,3.6.0,3.7.0,"

breaking

",Resolved,Fixed,3.7.0,Andrea Cosentino,Franky Georg,0,2,2020-10-29 13:17:37+00:00,2020-11-17 10:52:31+00:00,"There are 3 pairs of serializer/deserialiser properties on the Kafka component.


The inconsistent parts of the names are highlighted


 





Consumer
Producer
Type


*kafka*HeaderDeserializer
*kafka*HeaderSerializer
Bean


keyDeserializer
keySerializer*Class*
String FQN


*value*Deserializer
serializer*Class*
String FQN





 


I think it would be worth making these names consistent.





Current
Proposed


kafkaHeaderDeserializer
headerDeserializer


kafkaHeaderSerializer
headerSerializer


keyDeserializer
keyDeserializer 


keySerializerClass
keySerializer


valueDeserializer
valueDeserializer


serializerClass
valueSerializer





It looks like there was an intent to denote the key- and value- properties as expecting a class FQN string by appending 'Class' to the name. I don't see any other properties that do this so I think the consistent approach is to leave it off.


I've made an assumption that valueDeserializer & serializerClass are a pair, as the descriptions don't match. It would be good to take the opportunity to make all six descriptions consistent.",acosentino:1603969041:2020-10-29T18:57:21.644+0000:1603969041:2020-10-29T18:57:21.644+0000:On the camel side this is done. I need to do more work on SB and examples around. Also add some migration and update documentation. The codebase in main camel is done.
0,CAMEL-15769,Improvement,Minor,3.4.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Scott Carrier,0,2,2020-10-28 19:23:11+00:00,2021-03-22 18:07:52+00:00,"Sample json message body:


{ ""text"": \{ ""div"": ""some, text"" }

 }


DSL


.split(jsonpath(""text.div""))


Result


The ""some, text"" string gets split into two pieces: ""some"" and "" text""; (it's split on the comma token).


I do not want the above string to be split on comma tokens, but this appears to happen by default when jsonpath returns a single element as a string value. A workaround is to override the default tokenization by providing some string I hope never appears in the json I process. For example:
.split(jsonpath(""text.div"").tokenize(""@@@""))


If I alter the json as follows, CamelSplitSize is 1 and the output is ""some, text"" (no split on comma):


{ ""text"": \{ ""div"": [ ""some, text"" ] }

 } 


I discussed this with Claus on Zulip and this was his response:
""Yeah its a bit of corner case, and as you say you can change the token to @@@ or something. To avoid introducing a new option for a case like this, then we can look at if you specify token=""false"" then its turned off. You are welcome to create a Jira""


Only concern with the following is if someone actually wanted to tokenize a string on ""false"" rather than disable tokenization. Possible I misinterpreted Claus' suggestion though.


.split(jsonpath(""text.div"").tokenize(""false""))


I'd be happy to work on contributing this capability to camel and/or unit test cases to help facilitate a contribution.


Thanks in advance","davsclaus:1603967194:2020-10-29T18:26:34.262+0000:1603967194:2020-10-29T18:26:34.262+0000:Yeah using ""false"" is a okay way to tell to not use it. We use also false in recipient list EIP for turning off the delimiter
org.apache.camel.processor.RecipientList#IGNORE_DELIMITER_MARKER
davsclaus:1603967219:2020-10-29T18:26:59.918+0000:1603967219:2020-10-29T18:26:59.918+0000:Scott you are very welcome to help work on this. And if you could add an unit test in the PR that would be great
davsclaus:1605175075:2020-11-12T17:57:55.042+0000:1605175075:2020-11-12T17:57:55.042+0000:Thanks for working on this and the PR
davsclaus:1605175299:2020-11-12T18:01:39.051+0000:1605175299:2020-11-12T18:01:39.051+0000:Oh btw wonder if you would mind adding an unit test to camel-jsonpath that uses this new ""false"" tokenizer.

And know you know how to do PRs then we love contributions
scarrier:1605175923:2020-11-12T18:12:03.070+0000:1605175923:2020-11-12T18:12:03.070+0000:Hey Claus - sure thing, I'll go ahead and add a camel-jsonpath unit test for the new ""false"" tokenizer.
I'll just reference this issue in the PR, unless you prefer I open another one.
Cheers
davsclaus:1605183134:2020-11-12T20:12:14.296+0000:1605183134:2020-11-12T20:12:14.296+0000:Yes this is fine"
0,CAMEL-15768,Bug,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Zheng Feng,Zheng Feng,0,1,2020-10-28 15:09:30+00:00,2020-10-29 06:07:03+00:00,"I just use the camel-example-main to reproducer this issue



add the camel-lra dependency in the pom.xml
add camel.lra.enabled=true in the application.properties
re-compile and run the example




INFO] Using custom org.apache.camel.example.MyApplication to initiate a CamelContext
[INFO] Starting Camel ...
23:02:19.058 [org.apache.camel.example.MyApplication.main()] INFO  o.a.camel.support.LRUCacheFactory - Detected and using LRUCacheFactory: camel-caffeine-lrucache
23:02:19.161 [org.apache.camel.example.MyApplication.main()] INFO  o.apache.camel.main.BaseMainSupport - Using properties from: classpath:application.properties;optional=true
23:02:19.175 [org.apache.camel.example.MyApplication.main()] INFO  o.apache.camel.main.BaseMainSupport - Loaded additional 1 properties from file: src/main/data/foo.properties
23:02:19.243 [org.apache.camel.example.MyApplication.main()] INFO  o.a.c.i.e.DefaultBeanIntrospection - Invoked: 1 times (overall) [Method: setProperty, Target: org.apache.camel.service.lra.LRASagaService@13db0de, Arguments: [enabled, true]]
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.example.MyApplication
[ERROR] 
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:438)
    at java.lang.Thread.run (Thread.java:748)
Caused by: org.apache.camel.PropertyBindingException: Error binding property (camel.lra.enabled=true) with name: enabled on bean: lra-saga-service with value: true
    at org.apache.camel.main.MainHelper.setPropertiesOnTarget (MainHelper.java:192)
    at org.apache.camel.main.BaseMainSupport.setLraCheckProperties (BaseMainSupport.java:1041)
    at org.apache.camel.main.BaseMainSupport.doConfigureCamelContextFromMainConfiguration (BaseMainSupport.java:795)
    at org.apache.camel.main.BaseMainSupport.autoconfigure (BaseMainSupport.java:435)
    at org.apache.camel.main.BaseMainSupport.postProcessCamelContext (BaseMainSupport.java:522)
    at org.apache.camel.main.MainSupport.initCamelContext (MainSupport.java:320)
    at org.apache.camel.main.Main.doInit (Main.java:106)
    at org.apache.camel.support.service.BaseService.init (BaseService.java:83)
    at org.apache.camel.main.MainSupport.run (MainSupport.java:58)
    at org.apache.camel.main.MainCommandLineSupport.run (MainCommandLineSupport.java:156)
    at org.apache.camel.example.MyApplication.main (MyApplication.java:38)
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:438)
    at java.lang.Thread.run (Thread.java:748)",
0,CAMEL-15767,Test,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Alex Dettinger,Alex Dettinger,0,1,2020-10-27 15:24:27+00:00,2020-10-28 08:18:47+00:00,No Desc,aldettinger:1603844327:2020-10-28T08:18:47.406+0000:1603844327:2020-10-28T08:18:47.406+0000:Fixed here: [https://github.com/apache/camel/commit/ede1347be948a3a955243010b8dc6c535d3a6f4b]
0,CAMEL-15766,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Marco Santarelli,0,3,2020-10-27 13:28:16+00:00,2020-11-16 15:05:42+00:00,"When trying to use a custom http-configurer, I believe I am experiencing a regression when upgrading to Camel 3.6.0


I am using spring-boot 2.3.4.RELEASE, and I am declaring my custom configurer bean using:




camel.component.http.http-client-configurer=#httpClientConfig




When updating to Camel 3.6.0, that configuration results in: 




***************************
APPLICATION FAILED TO START
***************************


Description:


Failed to bind properties under 'camel.component.http.http-client-configurer' to org.apache.camel.component.http.HttpClientConfigurer:


    Property: camel.component.http.http-client-configurer
    Value: httpClientConfig
    Origin: class path resource [application.properties]:1:45
    Reason: No converter found capable of converting from type [java.lang.String] to type [org.apache.camel.component.http.HttpClientConfigurer]


Action:


Update your application's configuration



 


See https://github.com/santam85/camel-3.6.0-http-configurer-bean for a reproduction example.","dmvolod:1604022365:2020-10-30T09:46:05.282+0000:1604022365:2020-10-30T09:46:05.282+0000:The debug of the problem

{code:java}
2020-10-30 10:17:15.122 WARN 528990 --- [ main] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apache.camel.component.http.springboot.HttpComponentAutoConfiguration': Unsatisfied dependency expressed through field 'configuration'; nested exception is org.springframework.boot.context.properties.ConfigurationPropertiesBindException: Error creating bean with name 'camel.component.http-org.apache.camel.component.http.springboot.HttpComponentConfiguration': Could not bind properties to 'HttpComponentConfiguration' : prefix=camel.component.http, ignoreInvalidFields=false, ignoreUnknownFields=true; nested exception is org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'camel.component.http.http-client-configurer' to org.apache.camel.component.http.HttpClientConfigurer
{code}


davsclaus:1605235280:2020-11-13T10:41:20.435+0000:1605235280:2020-11-13T10:41:20.435+0000:Argh spring boot you are a mystery black box. So its hard to get a hook into your binding system.

Writing custom converter from String -> each class is maybe required. And not sure how to get all those type converters automatic registered in spring boot - its annotation magic can be a hell.
dmvolod:1605235539:2020-11-13T10:45:39.131+0000:1605235555:2020-11-13T10:45:55.402+0000:[~davsclaus] not sure that's related to conversion. It's related to the modified Customizers logic as it's calling later than Spring requires custom httpClientConfig for binding.
davsclaus:1605436973:2020-11-15T18:42:53.322+0000:1605436973:2020-11-15T18:42:53.322+0000:Okay we need to source code generate a converter where we can do the lookup

A prototype
{code}
package org.apache.camel.component.http.springboot;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.camel.CamelContext;
import org.springframework.core.convert.TypeDescriptor;
import org.springframework.core.convert.converter.GenericConverter;

public class DeleteMe implements GenericConverter {

    private final CamelContext camelContext;

    public DeleteMe(CamelContext camelContext) {
        this.camelContext = camelContext;
    }

    @Override
    public Set<ConvertiblePair> getConvertibleTypes() {
        Set<ConvertiblePair> answer = new LinkedHashSet<>();
        answer.add(new ConvertiblePair(String.class, org.apache.camel.component.http.HttpClientConfigurer.class));
        answer.add(new ConvertiblePair(String.class, org.apache.http.conn.HttpClientConnectionManager.class));
        return answer;
    }

    @Override
    public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
        if (source == null) {
            return null;
        }
        String ref = source.toString().substring(1);
        switch (targetType.getName()) {
            case ""org.apache.camel.component.http.HttpClientConfigurer"": return camelContext.getRegistry().lookupByNameAndType(ref, org.apache.camel.component.http.HttpClientConfigurer.class);
            case ""org.apache.http.conn.HttpClientConnectionManager"": return camelContext.getRegistry().lookupByNameAndType(ref, org.apache.http.conn.HttpClientConnectionManager.class);
        }
        return null;
    }

}
{code}"
0,CAMEL-15765,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-27 11:12:31+00:00,2020-10-30 07:46:44+00:00,"Working on optimizing the type converters from camel-base to be source code generated as a single class with big if .. else for doing converters.


This makes Camel faster and smaller



reduces the classes loaded as there are no lambdas classes for each converter
does not register in the doublemap with from/to which reduces from 21kb to 3kb heap memory
likely faster than the map lookup and with the lambda call



Before this prototype then DefaultTypeConverterRegistry was the 2nd biggest dominator from Camel (context biggest). Now its down to less than 3kb","davsclaus:1603847139:2020-10-28T09:05:39.149+0000:1603975435:2020-10-29T20:43:55.091+0000:TODO: Optimize enum to let it converter sooner *DONE*
TODO: New way for type converter loaded to register as single class *DONE*
TODO: Regen type converter loader source with new way for core camel *DONE*
TODO: Report number of converters via loader in new way *DONE*
TODO: Report type converter combos in a new way *DONE*
TODO: camel-cxf test failures *DONE*
TODO: camel-flatpack test failures *DONE*
TODO: camel-netty-http test failures *DONE*
TODO: xml tests failures in core *DONE*
TODO: Potential optimize for == match before instanceof in generated source code *DONE*
TODO: camel-karaf to support bulk type converter loader *DONE*
TODO: camel-cxf converter test failure *DONE*
TODO: sort so methods with deepest class level is first so we match the most concrete from the beginning *DONE*"
0,CAMEL-15764,Improvement,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,James Netherton,0,2,2020-10-27 11:08:56+00:00,2020-12-05 14:10:48+00:00,"I noticed some inconsistency when adding native support for Twilio in Camel Quarkus. 


Consider the following URI:


twilio://incoming-phone-number/create?phoneNumber=RAW(+15005550006)


Turns out that this leads to the phoneNumber property binding being done reflectively instead of via the configurer.


This problem is that ignoreCase is always false here:


https://github.com/apache/camel/blob/master/components/camel-twilio/src/generated/java/org/apache/camel/component/twilio/IncomingPhoneNumberEndpointConfigurationConfigurer.java#L33


Hence the case logic attempts to match on the exact parameter name, and there is no case block for the camel cased 'phoneNumber'.


The obvious workaround is to name the URI param 'phonenumber' or 'PhoneNumber' but the camel-twilio docs all refer to camel cased parameter names.","chardahe@redhat.com:1603793140:2020-10-27T18:05:40.261+0000:1603793140:2020-10-27T18:05:40.261+0000:Thanks [~jamesnetherton] for reporting it, I'll work on this"
0,CAMEL-15763,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-26 20:06:20+00:00,2020-10-31 08:19:21+00:00,This can reduce object allocated in heap memory after Camel routes are started. The danger is that new routes cannot be added afterwards. But it may save up to 12-90kb (depending on number of different EIPs in use).,davsclaus:1604103561:2020-10-31T08:19:21.981+0000:1604103561:2020-10-31T08:19:21.981+0000:Will use the lightweight option we already have for this as other things are combined into this so that is a better name. And this can also kick start the experiment with the lightweight camel context again.
0,CAMEL-15762,Improvement,Major,None,4.0.0,"
None
",Resolved,Won't Fix,4.0.0,Unassigned,Claus Ibsen,0,1,2020-10-26 18:54:56+00:00,2023-07-17 11:45:07+00:00,"We have many constants on the Exchange interface. But its discouraged to have that on interfaces. 


If we have a constant class instead to keep those on that would be better. But the Exchange have had these for a long time, os its maybe a Camel 4 change.


This also helps reduce the object size of Exchange instances in memory as they dont have reference to those 100+ constants. Today they take up space, and an empty exchange is around 1000-1500 bytes. Its actuall the class instance that takes up extra memory. So not sure if the instances of DefaultExchange will reduce memory, but constant fields on interface is regarded as anti pattern by Java experts.",
0,CAMEL-15761,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-26 16:42:13+00:00,2020-10-30 11:51:02+00:00,"This class has a number of regexp for parsing time from human format to millis.


The profile says this class takes up 7kb due to all those regexp patterns. We can make this code use old fashioned code that checks for > 24 and all of that and build the output.


Then its a tiny class in size.",
0,CAMEL-15760,Bug,Minor,3.4.4,"3.4.5, 3.7.0","
None
",Resolved,Fixed,"3.4.5, 3.7.0",Claus Ibsen,Josh Smith,0,1,2020-10-26 16:36:58+00:00,2020-11-03 06:03:23+00:00,"Whenever refreshing a bundle that creates a camel context via blueprint, the warning below appears in the logs:




16:11:44.779 WARN [Blueprint Event Dispatcher: 1] Error occurred while stopping lifecycle strategies. This exception will be ignored.
org.osgi.service.blueprint.container.NoSuchComponentException: No component with id 'blueprintBundle' could be found
 at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:805) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.lookupByType(BlueprintContainerBeanRepository.java:104) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.lookupByType(BlueprintContainerBeanRepository.java:100) ~[?:?]
 at org.apache.camel.blueprint.BlueprintContainerBeanRepository.findByType(BlueprintContainerBeanRepository.java:94) ~[?:?]
 at org.apache.camel.support.DefaultRegistry.findByType(DefaultRegistry.java:203) ~[!/:3.4.4]
 at org.apache.camel.impl.engine.OnCamelContextLifecycleStrategy.onContextStop(OnCamelContextLifecycleStrategy.java:60) ~[!/:3.4.4]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStop(AbstractCamelContext.java:2910) [!/:3.4.4]
 at org.apache.camel.support.service.BaseService.stop(BaseService.java:155) [!/:3.4.4]
 at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:194) [!/:3.4.4]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) [!/:1.10.2]
 at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) [!/:1.10.2]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_242]
 at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_242]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_242]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_242]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_242]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_242]
 at java.lang.Thread.run(Thread.java:748) [?:1.8.0_242]



It appears that the Blueprint container is being destroyed before the camel context, but the camel context tries to access the bundle when stopping. And since the blueprint container is already destroyed, that fails.


Reverting this change fixes the warnings: https://issues.apache.org/jira/browse/CAMEL-14332


Note: Everything appears to work fine when the bundle is started. Still, the warnings are concerning


To reproduce:



Create a bundle with this blueprint.xml





<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">
  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""camelContext""/>
</blueprint>





Install in Karaf
Refresh the bundle",joshua.smith:1604322141:2020-11-02T21:02:21.091+0000:1604322141:2020-11-02T21:02:21.091+0000:Thanks [~davsclaus]! Could you backport this to 3.4.x as well?
0,CAMEL-15759,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-26 13:14:48+00:00,2021-01-22 06:25:48+00:00,"We no longer need the runtime camel-catalog which was in use for some special optimisation with toD - but we now use the endpoint uri factory for this.


So we can remove this and move its source code to camel-catalog.","davsclaus:1603691207:2020-10-26T13:46:47.441+0000:1603691207:2020-10-26T13:46:47.441+0000:Argh yeah the component extension uses the catalog. It could maybe use the source code generated code instead.
davsclaus:1611211223:2021-01-21T14:40:23.483+0000:1611217630:2021-01-21T16:27:10.976+0000:We can remove the runtime catalog from send dynamic aware as its not in use by any of our components as we can code generate what we need to known. *DONE*"
0,CAMEL-15758,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-26 11:12:25+00:00,2020-10-26 14:35:45+00:00,"We should splitup camel-base and have a camel-base-engine, where the engine is for using the routing engine with routes, the DSL, the model and all of that.


Then camel-base is vanilla camel and we should have a BasicCamelContext interface that is implemented here.


And then leave CamelContext and DefaultCamelContext for todays use with all batteries included.",
0,CAMEL-15757,New Feature,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2020-10-26 09:20:46+00:00,2021-03-23 13:30:03+00:00,No Desc,
0,CAMEL-15756,Task,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-26 07:33:43+00:00,2020-10-26 07:48:43+00:00,Both the projects are not osgi friendly and they will drop the OSGi support soon.,
0,CAMEL-15755,Improvement,Minor,3.6.0,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Alex Arana,0,2,2020-10-25 12:37:12+00:00,2022-09-02 17:17:19+00:00,"After upgrading to 3.6.0 existing Spring Boot tests in my codebase started to fail. After some investigation I discovered that this is due to my unit tests having a single instance per class as configured using JUnit's 


@TestInstance(TestInstance.Lifecycle.PER_CLASS)


Some changes were introduced in a recent commit that affected the existing behaviour in CamelSpringBootExecutionListener: https://github.com/apache/camel/commit/efc34ab2b98f3697ebb482cf1645fda6f0794797


I have remediated my tests by running the following code in a JUnit BeforeEach method within a base test class:




// Kotlin
@BeforeEach
fun init() {
    SpringCamelContext.setNoStart(false)
    camelContext.start()
}




I am currently looking for a more permanent solution to this issue that properly supports single instance JUnit5 Test classes.",davsclaus:1603601048:2020-10-25T12:44:08.861+0000:1603601048:2020-10-25T12:44:08.861+0000:You are welcome to dive into the code and see if you can help improve this.
0,CAMEL-15754,Improvement,Critical,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Dmitry Volodin,Rajasekhar Bhupasamudram,0,2,2020-10-25 07:30:46+00:00,2020-10-26 07:14:41+00:00,"In the GrpcRequestPropagationStreamObserver, the responseStream.onCompleted() is called every time an onNext method is invoked by the client via a grpc call. This does not leverage the Http 2.0 abilities to send the responses back to the client asynchronously.


Once the camel route is traversed, the server is sending some response to the client using the onNext method calls. But, sometimes, it may be a good idea to not to send any data immediately and call the onCompleted methods.


I propose to allow the camel route to control this behavior with some properties.","dmvolod:1603667604:2020-10-26T07:13:24.115+0000:1603667604:2020-10-26T07:13:24.115+0000:Thanks, [~rajasekharb] for PR."
0,CAMEL-15753,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-24 20:01:34+00:00,2020-10-26 11:12:32+00:00,"We have some parts in camel-base that may be better to move out as it may be used by end users as well, like some of the out of the box aggregation strategies.


We may consider having camel-base as for internal implementation for camel-core. And if we can get things out of this to camel-support that may be used by end users we have a bit better modularization.","davsclaus:1603596911:2020-10-25T11:35:11.622+0000:1603681828:2020-10-26T11:10:28.969+0000:- ProcessorFactory to use Object[] instead of Map for custom args (faster) *DONE*
- Other modules to depend on camel-core-processor instead of camel-base *DONE*
- camel-core-processor & camel-base-processor so we have base vs core (EIP) processors separated *DONE*
- internal processor factory *DONE*
- camel-core-processor should not use camel-base *DONE*"
0,CAMEL-15752,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Paolo Patierno,0,3,2020-10-24 17:46:32+00:00,2021-01-30 05:59:47+00:00,"Hi,


I have an application using camel-kafka 3.4.4 (which has kafka 2.5.0 as dependency).


When I switch to use camel-kafka 3.6.0 (which has kafka 2.6.0 as dependency), I get the following exception.


 {{020-10-24 19:23:45 ERROR KafkaThread:49 - Uncaught exception in thread 'kafka-producer-network-thread | raw-packets':



 java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonNode
 at org.apache.kafka.common.requests.ApiVersionsRequest$Builder.<clinit>(ApiVersionsRequest.java:36)
 at org.apache.kafka.clients.NetworkClient.handleConnections(NetworkClient.java:910)
 at org.apache.kafka.clients.NetworkClient.poll(NetworkClient.java:555)
 at org.apache.kafka.clients.producer.internals.Sender.runOnce(Sender.java:325)
 at org.apache.kafka.clients.producer.internals.Sender.run(Sender.java:240)
 at java.base/java.lang.Thread.run(Thread.java:834)
 Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.JsonNode
 at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
 at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
 at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
 ... 6 more}}



Adding the explicit dependency to jackson-databind as following solves the problem




<dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.11.3</version>
</dependency>




As reference, this is the parent pom.xml in my project where I set camel-kafka version (but even Kafka version, which is used in other modules).


https://github.com/ppatierno/formula1-telemetry-kafka/blob/master/pom.xml


and following the pom.xml of the specific application using camel-kafka (where I have to add the jackson-databind reference for fixing the exception).


https://github.com/ppatierno/formula1-telemetry-kafka/blob/master/f1-telemetry-udp-kafka/pom.xml","acosentino:1603605221:2020-10-25T13:53:41.256+0000:1603605221:2020-10-25T13:53:41.256+0000:It's a version problem. In Kafka 2.6.0 the Jackson version is still 2.10.2, but Camel switched to 2.11.3. So we need to declare them explicitly in the POM of camel-kafka and we need to exclude the version from kafka.
jbonofre:1611957587:2021-01-30T05:59:47.081+0000:1611957587:2021-01-30T05:59:47.081+0000:We also need fixed vers of Kafka SMX bundles for Camel Kafka feature. I'm doing it."
0,CAMEL-15751,New Feature,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Dmitry Volodin,Rajasekhar Bhupasamudram,0,2,2020-10-24 13:40:32+00:00,2020-10-27 06:42:13+00:00,"Current camel-grpc module provides both the consumer and producer abilities. But, does not allow the camel route to have control over when the responses are sent back to the client.


 




<route>
    <from uri=""grpc://remotehost:1101/org.apache.camel.component.grpc.PingPong?consumerStrategy=PROPAGATION""/>
    <process ref=""myCustomProcessor"" />
 </route>




 


Consider the above route as an example for grpc consumer (server streaming call).


In the above, myCustomProcessor can modify the Exchange and set a Message, but if it needs to respond to the client multiple times with a time gap - based on business requirement, using responseObserver.onNext() method calls, then it can't. There is a possibility to collect all the responses in a list and send the list items one after the other. But, if the processor needs to wait for certain amount of time to compute the next response, and then invoke the onNext, it is not possible.


I think it is a limitation of the camel-grpc component and propose to enhance it by setting the responseObserver as a property in the Exchange object.","rajasekharb:1603518916:2020-10-24T13:55:16.111+0000:1603518916:2020-10-24T13:55:16.111+0000:I am a newbie to both apache camel and grpc. Excuse me if there is any any limitation in my understanding.

I have completed the code changes for the above and want to give PR.

 
rajasekharb:1603526824:2020-10-24T16:07:04.976+0000:1603526824:2020-10-24T16:07:04.976+0000:[https://github.com/apache/camel/pull/4508/]

PR has been given
rajasekharb:1603561756:2020-10-25T01:49:16.261+0000:1603561756:2020-10-25T01:49:16.261+0000:Thanks Claus Ibsen for looking into this. Is this Jira being considered? Have actually written some code and gave PR. How to get his PR reviewed?

Thanks,
Raj
dmvolod:1603575336:2020-10-25T05:35:36.217+0000:1603577464:2020-10-25T06:11:04.950+0000:Hi [~rajasekharb] . Could you please separate issues from each other:
 # Base improvement to provide access to stream observer in the camel Exchange
 # Another improvement related to the _GrpcRequestPropagationStreamObserver_

_For the second, please open a new one with the case of improvement and leave in the current issue and PR just a new feature_

_Thank you._
dmvolod:1603578056:2020-10-25T06:20:56.492+0000:1603578056:2020-10-25T06:20:56.492+0000:Also there are two options for consumer strategy: {color:#871094}AGGREGATION and {color}{color:#871094}PROPAGATION{color}

{color:#871094}{color:#172b4d}Can you try to use PROPAGATION, process request and send it later after processing?{color}{color}{color:#871094}
{color}
rajasekharb:1603580649:2020-10-25T07:04:09.503+0000:1603580834:2020-10-25T07:07:14.418+0000:Hi [~dmvolod] Thanks I have checked the {color:#871094}PROPAGATION{color} and {color:#871094}AGGREGATION {color}consumer strategies.

In my findings, I see that the first one calls the resposneObserver.onCompleted() each time an onNext is called by the client. The later will not close the stream but will simply collect the request and does not send to the camel route - and hence no processing.

Sure will open a new Jira for the second improvement.

Thanks
rajasekharb:1603582378:2020-10-25T07:32:58.804+0000:1603582378:2020-10-25T07:32:58.804+0000:Hi [~dmvolod], have created a separate Jira for the improvement as an Improvement - CAMEL-15754

Thanks

Raj
rajasekharb:1603620893:2020-10-25T18:14:53.880+0000:1603653516:2020-10-26T03:18:36.055+0000:Hi [~dmvolod],

Have completed the changes for the Jiras 15751 and 15754. Could you please look into the PR?

Thanks to [~acosentino] for approving the changes.

 

 

 "
0,CAMEL-15750,Bug,Major,3.5.0,3.10.0,"
None
",Resolved,Fixed,3.10.0,Jiri Ondrusek,Dietrich Schulten,0,2,2020-10-24 13:35:42+00:00,2021-04-04 06:52:17+00:00,"Example: https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-undertow-spring-security


Make sure port 8081 is not in use.


All requests to http://localhost:8082/hi get a 403 response, no matter if I send an oauth Token or not. The oauth token itself seems correct, I have decoded it on jwt.io  and it shows that the role is present:




 {
  ""exp"": 1603546060,
  ""iat"": 1603546000,
  ""jti"": ""3392de8c-8309-4187-8b9a-9f8edaefe226"",
  ""iss"": ""http://localhost:8080/auth/realms/master"",
  ""aud"": ""account"",
  ""sub"": ""4612ff79-81a8-4209-a7f7-fd4b963c574e"",
  ""typ"": ""Bearer"",
  ""azp"": ""example-service"",
  ""session_state"": ""693f9c78-2e54-447e-9749-ce6a1288877d"",
  ""acr"": ""1"",
  ""allowed-origins"": [
    ""http://localhost:8082""
  ],
  ""realm_access"": {
    ""roles"": [
      ""role01"",
      ""offline_access"",
      ""uma_authorization""
    ]
  },
  ""resource_access"": {
    ""account"": {
      ""roles"": [
        ""manage-account"",
        ""manage-account-links"",
        ""view-profile""
      ]
    }
  },
  ""scope"": ""email profile"",
  ""email_verified"": false,
  ""preferred_username"": ""user01""
}



 


The reason seems to be that the camel-undertow-spring-security-starter tries to start two Undertow servlets: the Spring Undertow servlet runs on port 8081, and the Camel Undertow servlet on port 8082. Only the Spring servlet has token security, but not the Camel Undertow Servlet.


In the log below you see that the org.springframework.boot.web.embedded.undertow.UndertowWebServer starts on port 8081, and it receives the filter chain with the BearerTokenAuthenticationFilter.


Then the org.apache.camel.component.undertow.DefaultUndertowHost comes up on port 8082. The log message Illegal state caused by missing securitProvider but existing allowed roles! which is written for every request to /hi also seems to show that no securityProvider is configured on the DefaultUndertowHost which runs on port 8082.




   .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.3.RELEASE)2020-10-24 15:08:26.339  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : Starting Application on DZS20N436 with PID 27932 (C:\Users\Schulten\Documents\projekte\camel-spring-boot-examples-3.5.0\camel-example-spring-boot-undertow-spring-security\target\classes started by Schulten in C:\Users\Schulten\Documents\projekte\camel-spring-boot-examples-3.5.0\camel-example-spring-boot-undertow-spring-security)
2020-10-24 15:08:26.343  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : No active profile set, falling back to default profiles: default
2020-10-24 15:08:28.378  INFO 27932 --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext
2020-10-24 15:08:28.381  INFO 27932 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1954 ms
2020-10-24 15:08:28.770  INFO 27932 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5395ea39, org.springframework.security.web.context.SecurityContextPersistenceFilter@5c41d037, org.springframework.security.web.header.HeaderWriterFilter@6d64b553, org.springframework.security.web.csrf.CsrfFilter@12477988, org.springframework.security.web.authentication.logout.LogoutFilter@29a23c3d, org.springframework.security.oauth2.server.resource.web.BearerTokenAuthenticationFilter@43b0ade, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ec77191, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@796d3c9f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1517f633, org.springframework.security.web.session.SessionManagementFilter@757529a4, org.springframework.security.web.access.ExceptionTranslationFilter@203dd56b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@522b2631]
2020-10-24 15:08:28.876  INFO 27932 --- [           main] o.apache.camel.support.LRUCacheFactory   : Detected and using LRUCacheFactory: camel-caffeine-lrucache
2020-10-24 15:08:29.309  INFO 27932 --- [           main] io.undertow                              : starting server: Undertow - 2.1.3.Final
2020-10-24 15:08:29.316  INFO 27932 --- [           main] org.xnio                                 : XNIO version 3.8.0.Final
2020-10-24 15:08:29.324  INFO 27932 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.8.0.Final
2020-10-24 15:08:29.419  INFO 27932 --- [           main] org.jboss.threads                        : JBoss Threads version 3.1.0.Final
2020-10-24 15:08:29.472  INFO 27932 --- [           main] o.s.b.w.e.undertow.UndertowWebServer     : Undertow started on port(s) 8081 (http)
2020-10-24 15:08:29.490  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML routes from: classpath:camel/*.xml
2020-10-24 15:08:29.495  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
2020-10-24 15:08:29.497  INFO 27932 --- [           main] o.a.c.s.boot.SpringBootRoutesCollector   : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
2020-10-24 15:08:29.652  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.5.0 (camel-1) is starting
2020-10-24 15:08:29.655  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2020-10-24 15:08:29.656  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Using HealthCheck: camel-health
2020-10-24 15:08:29.669  INFO 27932 --- [           main] o.a.c.c.undertow.DefaultUndertowHost     : Starting Undertow server on http://localhost:8082
2020-10-24 15:08:29.669  INFO 27932 --- [           main] io.undertow                              : starting server: Undertow - 2.1.3.Final
2020-10-24 15:08:29.681  INFO 27932 --- [           main] o.a.c.i.e.InternalRouteStartupManager    : Route: route1 started and consuming from: http://localhost:8082/hi
2020-10-24 15:08:29.687  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Total 1 routes, of which 1 are started
2020-10-24 15:08:29.688  INFO 27932 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 3.5.0 (camel-1) started in 0.035 seconds
2020-10-24 15:08:29.696  INFO 27932 --- [           main] o.a.c.undertow.spring.boot.Application   : Started Application in 3.809 seconds (JVM running for 4.35)
2020-10-24 15:10:41.530  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:13:16.234  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:13:53.090  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:15:22.183  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!
2020-10-24 15:16:38.260  WARN 27932 --- [  XNIO-2 task-1] o.a.c.c.undertow.UndertowConsumer        : Illegal state caused by missing securitProvider but existing allowed roles!","davsclaus:1603522318:2020-10-24T14:51:58.006+0000:1603522318:2020-10-24T14:51:58.006+0000:I would assume you should use the same port number as spring boot, eg in your example 8081.
dschulten:1603669323:2020-10-26T07:42:03.580+0000:1603670077:2020-10-26T07:54:37.527+0000:Please note that I am not using my own example, I am using the *official* undertow spring security example.

Unfortunately using the same port does not help.

I changed the port 8082 in the route to 8081 as follows:
{code:java}
from(""undertow:http://localhost:8081/hi?allowedRoles=role02"")
        .transform(simple(""Hello ${in.header."" + SpringSecurityProvider.PRINCIPAL_NAME_HEADER + ""}!""))
        .log(""content: ${body}"");{code}
Both Undertow servlets try to start on the same port, and that fails:
{code:java}
2020-10-26 08:40:36.699 INFO 17448 — [ main] o.s.b.w.e.undertow.UndertowWebServer : Undertow started on port(s) 8081 (http)
 2020-10-26 08:40:36.711 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML routes from: classpath:camel/*.xml
 2020-10-26 08:40:36.712 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML route templates from: classpath:camel-template/*.xml
 2020-10-26 08:40:36.712 INFO 17448 — [ main] o.a.c.s.boot.SpringBootRoutesCollector : Loading additional Camel XML rests from: classpath:camel-rest/*.xml
 2020-10-26 08:40:37.029 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : Apache Camel 3.5.0 (camel-1) is starting
 2020-10-26 08:40:37.032 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at [http://camel.apache.org/stream-caching.html]
 2020-10-26 08:40:37.033 INFO 17448 — [ main] o.a.c.impl.engine.AbstractCamelContext : Using HealthCheck: camel-health
 2020-10-26 08:40:37.049 INFO 17448 — [ main] o.a.c.c.undertow.DefaultUndertowHost : Starting Undertow server on [http://localhost:8081|http://localhost:8081/]
 2020-10-26 08:40:37.049 INFO 17448 — [ main] io.undertow : starting server: Undertow - 2.1.3.Final
 2020-10-26 08:40:37.076 WARN 17448 — [ main] o.a.c.c.undertow.DefaultUndertowHost : Failed to start Undertow server on [http://localhost:8081|http://localhost:8081/], reason: java.net.BindException: Address already in use: bind
{code}
 Since the undertow camel spring security component does not seem to work at all, I am changing the severity back to Major.
dschulten:1603842939:2020-10-28T07:55:39.775+0000:1603842939:2020-10-28T07:55:39.775+0000:Apparently the problem arises because the undertow:http endpoint starts its own undertow instance, whereas Spring starts yet another instance. Is it possible to let the route use the Spring undertow instance somehow?
dschulten:1616648617:2021-03-25T13:03:37.559+0000:1616659835:2021-03-25T16:10:35.174+0000:The fix only partially solves the problem. If you run the application again and again, you will find that sometimes the following line is missing in the log output:

{{o.a.c.c.undertow.UndertowComponent : Security provider found java.util.ServiceLoader}}

If it is missing, security setup fails and you still get Forbidden with a log output of

{{o.a.c.c.undertow.UndertowConsumer : Illegal state caused by missing securitProvider but existing allowed roles}}

I could narrow it down to the following:

{{UndertowSpringSecurityCustomizer.configure}} must be called before {{UndertowComponent.doInit}} to make security work.

However, in {{CustomizersLifecycleStrategy.onComponentAdd}} we pull a list of {{ComponentCustomizer}} s out of the registry. It contains two Customizers: {{UndertowSpringSecurityCustomizer}} and {{UndertowComponentAutoConfiguration$1}} (= UndertowComponentAutoConfiguration#configureUndertowComponent )

Their order is random. They get sorted by their getOrder attribute, but that is 0 in both cases.

Only if the {{UndertowSpringSecurityCustomizer}} ends up being first in list, security works.

A possible fix appears to be returning a value from {{UndertowSpringSecurityCustomizer.getOrder}} which ensures that it will always be processed before {{UndertowComponentAutoConfiguration$1}}.
davsclaus:1616654163:2021-03-25T14:36:03.045+0000:1616654163:2021-03-25T14:36:03.045+0000:You are welcome to create a PR with such a change in the order
davsclaus:1617086262:2021-03-30T14:37:42.510+0000:1617086262:2021-03-30T14:37:42.510+0000:I changed the code so the security customizer is run before, by retuning -1 in its getOrder.

Thanks Dietrich for the suggest fix.
dschulten:1617490337:2021-04-04T06:52:17.274+0000:1617490337:2021-04-04T06:52:17.274+0000:Just when I was going to provide the PR ;-)"
0,CAMEL-15749,Bug,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Dmitry Volodin,Viacheslav Zhivaev,0,2,2020-10-24 11:28:52+00:00,2020-10-28 16:01:11+00:00,"Hi all,


I tried to run my camel configuration (after update to camel 3.6.0, previously running 3.0.6 without an issue) and got following error:


 



org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Unmarshal[org.apache.camel.model.dataformat.CsvDataFormat@192613f] <<< in route: Route(route1)[From[direct://test] -> [Unmarshal[org.apache.c... because of Error binding property (commentMarker=#) with name: commentMarker on bean: org.apache.camel.dataformat.csv.CsvDataFormat@42dc5a with value: #
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:384) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:111) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:431) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:393) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2606) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2378) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.6.0.jar:3.6.0]
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2395) ~[camel-base-3.6.0.jar:3.6.0]
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:130) ~[camel-spring-3.6.0.jar:3.6.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:167) ~[camel-spring-3.6.0.jar:3.6.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.9.RELEASE.jar:5.2.9.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.4.RELEASE.jar:2.3.4.RELEASE]
	at test.App.main(App.java:17) [classes/:na]
Caused by: org.apache.camel.PropertyBindingException: Error binding property (commentMarker=#) with name: commentMarker on bean: org.apache.camel.dataformat.csv.CsvDataFormat@42dc5a with value: #
	at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaConfigurer(PropertyBindingSupport.java:849) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:609) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doBuildPropertyOgnlPath(PropertyBindingSupport.java:481) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:376) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.access$100(PropertyBindingSupport.java:87) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:1859) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.configureDataFormat(DataFormatReifier.java:262) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.createDataFormat(DataFormatReifier.java:218) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.getDataFormat(DataFormatReifier.java:194) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.dataformat.DataFormatReifier.getDataFormat(DataFormatReifier.java:154) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.UnmarshalReifier.createProcessor(UnmarshalReifier.java:35) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:752) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:495) ~[camel-core-engine-3.6.0.jar:3.6.0]
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:382) ~[camel-core-engine-3.6.0.jar:3.6.0]
	... 24 common frames omitted
Caused by: org.apache.camel.NoSuchBeanException: No bean could be found in the registry for:  of type: java.lang.Character
	at org.apache.camel.support.CamelContextHelper.mandatoryLookupAndConvert(CamelContextHelper.java:253) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.EndpointHelper.resolveReferenceParameter(EndpointHelper.java:290) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.EndpointHelper.resolveReferenceParameter(EndpointHelper.java:250) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.support.component.PropertyConfigurerSupport.property(PropertyConfigurerSupport.java:53) ~[camel-support-3.6.0.jar:3.6.0]
	at org.apache.camel.dataformat.csv.CsvDataFormatConfigurer.configure(CsvDataFormatConfigurer.java:24) ~[camel-csv-3.6.0.jar:3.6.0]
	at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaConfigurer(PropertyBindingSupport.java:847) ~[camel-support-3.6.0.jar:3.6.0]
	... 37 common frames omitted




seems like it is impossible to specify '#' hash symbol as commentMarker or delimiter for csv data format. Reproducible with xml configuration only.


 


config files/sample application attached. I appreciate if you take a look at this


BR","dmvolod:1603703732:2020-10-26T17:15:32.565+0000:1603703732:2020-10-26T17:15:32.565+0000:The reason of the problem why it happens, hash symbol (#) is a property binding sign a tries to parse value.

For Character it doesn't make sense as it's only one symbol and looks like need to be fixed in core."
0,CAMEL-15748,Bug,Major,"3.5.0, 3.4.4, 3.6.0","3.4.5, 3.7.0","
None
",Resolved,Fixed,"3.4.5, 3.7.0",Unassigned,Marco Collovati,0,2,2020-10-24 08:46:05+00:00,2020-11-03 13:47:33+00:00,"Having a route with a paho consumer in a route, if the broker is not reachable at startup, camel context fail fast and shuts down.


 This can be avoided by setting the SupervisingRouteController, but this way, even if camel context does not fail, the consumer is never able to establish a connection.


The reason is that when PahoConsumer starts for the first time, it creates a MqttClient and stores it into client field; the call to client.connect throws an exception due to broker down;


 




 
    @Override
    protected void doStart() throws Exception {
        super.doStart();        connectOptions = PahoEndpoint.createMqttConnectOptions(getEndpoint().getConfiguration());        if (client == null) {
            clientId = getEndpoint().getConfiguration().getClientId();
            if (clientId == null) {
                clientId = ""camel-"" + MqttClient.generateClientId();
            }
            stopClient = true;
            client = new MqttClient(
                    getEndpoint().getConfiguration().getBrokerUrl(),
                    clientId,
                    PahoEndpoint.createMqttClientPersistence(getEndpoint().getConfiguration()));
            LOG.debug(""Connecting client: {} to broker: {}"", clientId, getEndpoint().getConfiguration().getBrokerUrl());
            client.connect(connectOptions);
        }
        
        // other code omitted for brevity
        
        client.subscribe(getEndpoint().getTopic(), getEndpoint().getConfiguration().getQos());



 


after that doStop is invoked but the client instance is not nullified, because it is not connected


 




    @Override
    protected void doStop() throws Exception {
        super.doStop();        if (stopClient && client != null && client.isConnected()) {
            String topic = getEndpoint().getTopic();
            // only unsubscribe if we are not durable
            if (getEndpoint().getConfiguration().isCleanSession()) {
                LOG.debug(""Unsubscribing client: {} from topic: {}"", clientId, topic);
                client.unsubscribe(topic);
            } else {
                LOG.debug(""Client: {} is durable so will not unsubscribe from topic: {}"", clientId, topic);
            }
            LOG.debug(""Disconnecting client: {} from broker: {}"", clientId, getEndpoint().getConfiguration().getBrokerUrl());
            client.disconnect();
            client = null;
        }
    }




 


when the supervisor tries to restart the route, client instance already exists, but the call to client.subscribe fails because the client is not connected.


Perhaps always nullify client in doStop should resolve the issue; however I have no idea it this solution will impact in other ways.


 A better solution may be to handle automatic reconnect in the consumer, like RabbitConsumer does, for example.","davsclaus:1603500792:2020-10-24T08:53:12.413+0000:1603500792:2020-10-24T08:53:12.413+0000:Can you try testing with setting the value to null.

Supervising route controller is the better way as otherwise having to build in auto reconnection logic in 100+ components each with all kind of their own way is not ideal, vs having camel route controller managing it which can also be consistently managed and monitored.

And btw on cloud systems you have readiness checks where the cloud system will restart / reschedule the app. 
mcollovati:1603503378:2020-10-24T09:36:18.965+0000:1603503378:2020-10-24T09:36:18.965+0000:Also noticed two different behaviours in 3.5 (paho 1.2.4)  and 3.6 (paho 1.2.5): in 3.5 *MqttClient.connect* immediately fails if broker is down, whereas in 3.6 it hangs forever.
mcollovati:1603503688:2020-10-24T09:41:28.700+0000:1603503688:2020-10-24T09:41:28.700+0000:Thank you for the explanation [~davsclaus].

Nullifying client works for me ; i tested it extending `PahoConsumer` and overriding `doStop` as in the attached test  [^PahoConsumerRestartTest.java]
davsclaus:1603535276:2020-10-24T18:27:56.692+0000:1603535276:2020-10-24T18:27:56.692+0000:Thanks Marco. I wonder if you want to contribute this as a github PR and include the unit test. You can do this on 3.4.x branch and we can forward patch it on master - although most of the time we prefer master first.
mcollovati:1603535907:2020-10-24T18:38:27.959+0000:1603535907:2020-10-24T18:38:27.959+0000:I'll be glad to contribute; I'll open a PR as soon as possible.

 
davsclaus:1603611942:2020-10-25T15:45:42.205+0000:1603611942:2020-10-25T15:45:42.205+0000:Merged to 3.4.x branch *DONE*

TODO: master branch
mcollovati:1603614656:2020-10-25T16:30:56.473+0000:1603615150:2020-10-25T16:39:10.985+0000:[~davsclaus] I'm working on a PR for master, but I have a problem with the test.

As mentioned above, with paho 1.2.5 the call to MqttClient.connect hangs indefinitely, regardless the connection timeout settings.

Can this be handled somehow in test code?

The only workaround I found is to set *timeToWait* on MqttClient and reset it to *-1* after connection is established, but I think this is not a good idea
{code:java}
client.setTimeToWait(1000 + getEndpoint().getConfiguration().getConnectionTimeout() * 1000);
client.connect(connectOptions);
client.setTimeToWait(-1);

{code}

Does it make sense to add a `connectTimeToWait` configuration on PahoConfiguration?
davsclaus:1603688834:2020-10-26T13:07:14.275+0000:1603688834:2020-10-26T13:07:14.275+0000:Maybe its a bug in paho 1.2.5 - not sure if you can research this / or get in touch with them so they are aware of this
mcollovati:1603717216:2020-10-26T21:00:16.953+0000:1603717216:2020-10-26T21:00:16.953+0000:I think the reason of the hang is this change in paho *CommsReceiver*, inside `run` main loop

{code:java}
// paho 1.2.4
if (message != null) {
	// A new message has arrived
	clientState.notifyReceivedMsg(message);
}  
else {
    // fix for bug 719
	if (!clientComms.isConnected()) {
		throw new IOException(""Connection is lost."");
	}
}


// paho 1.2.5
if (message != null) {
	// A new message has arrived
	clientState.notifyReceivedMsg(message);
}  
else {
	// fix for bug 719
	if (!clientComms.isConnected() && !clientComms.isConnecting()) {
        throw new IOException(""Connection is lost."");
	}
}
{code}

During connection attempt *clientComms* is in status connecting; when broker is down a null message is received and, in paho 1.2.4,an exception is immediately thrown because *clientComms* is not connected. In 1.2.5 however the exception is never throw because *clientComms* is in connecting state and this leads to an infinite loop.

The issue 719, mentioned in the comment, is also referred by other issues but none of this are about infinite loops.
I can try to do some additional research on paho issue tracker and to get in touch to understand if this is a bug or an expected behavior, but this may take some time because I can do it only on my spare time.

mcollovati:1604107803:2020-10-31T09:30:03.586+0000:1604107803:2020-10-31T09:30:03.586+0000:Opened an issue on paho java issue tracker: https://github.com/eclipse/paho.mqtt.java/issues/843
Waiting for feedback
mcollovati:1604232233:2020-11-01T20:03:53.313+0000:1604232233:2020-11-01T20:03:53.313+0000:Created the PR for master.

The problem was in the test, not in paho client.

When adding a connector to ActiveMQ **BrokerService** the server socket is immediately available,even if *BrokerService.start* is not invoked.
So paho client can establish a connection, but it receives *null* messages do to socket read time out, and this leads to an infinite loop.

Moving *addConnector* immediately before broker start in test does the trick."
0,CAMEL-15747,Improvement,Major,None,,"
None
",Closed,Not A Problem,None,Denis Istomin,Denis Istomin,0,2,2020-10-24 03:15:38+00:00,2020-12-05 10:45:32+00:00,"Currently `regex` property supported by Producer only.


Support of `regex` needs to be implemented on Consumer side.


There is also Disabled integration test that needs to be fixed.",bvahdat:1607136332:2020-12-05T10:45:32.248+0000:1607136332:2020-12-05T10:45:32.248+0000:Closing as per discussion in https://github.com/apache/camel/pull/4712
0,CAMEL-15746,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Matej Melko,Claus Ibsen,0,1,2020-10-23 16:04:39+00:00,2022-09-02 17:16:41+00:00,"It would be good to add support for
https://github.com/jsurfer/JsonSurfer


So we can plug that into camel-jsonpath (and others) and then you can use that in streaming mode, such as splitting big json files (GB sizes).",
0,CAMEL-15745,Improvement,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Ioannis Sarantidis,0,2,2020-10-23 10:28:33+00:00,2020-11-03 08:06:05+00:00,"Currently RestDefinition methods:



type(Class<?> classType)
outType(Class<?> classType)



use the methods setType, setOutType from VerbDefinition that accept a string instead of their variants that accept the class or should at least use both variants if they are really needed.


The reason for opening this that setting the class name only in verb definition, in my OSGI application, causes ClassNotFoundException  in RestBindingReifier#setupJson.


As a workaround at the moment, after configuring the RestDefinition object I retrieve the VerbDefinitions in it and set the typeClass and outTypeClass manually there.",davsclaus:1604361965:2020-11-03T08:06:05.143+0000:1604361965:2020-11-03T08:06:05.143+0000:Thanks for reporting
0,CAMEL-15744,Improvement,Minor,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Stefan Stus,0,3,2020-10-23 08:32:46+00:00,2022-09-02 17:16:25+00:00,"In Mirometer introduces an ability to get technical metrics from Kafka's consumers and producers.


It seems to be production-ready since 1.5.4 based on our production experience and available since 1.4.0.


See: Micrometer implementation  


I tried to add a custom implementation to my project to extract those metrics from Camel. I found out that I'm unable to do it for the Kafka Consumer since the actual Kafka Consumer hides deeply inside KafkaConsumer Camel class.


At the same time, I'm able to get KafkaProducer from Camel class here.  


Desired Solution:


Add additional CamelKafkaMicrometerRoutePolicy to extract Kafka technical metrics.


Add the ability to inject CamelKafkaMicrometerRoutePolicy into Consumer and Producer components.


 


Will this feature be welcomed in Camel?","zachariahyoung:1619509791:2021-04-27T15:49:51.350+0000:1619509791:2021-04-27T15:49:51.350+0000:Did you find a solution for this?
davsclaus:1662110180:2022-09-02T17:16:20.207+0000:1662110180:2022-09-02T17:16:20.207+0000:does opentelemetry have something for kafka as this component is what we prioritize"
0,CAMEL-15743,Bug,Minor,2.25.2,,"
None
",Resolved,Won't Fix,None,Unassigned,wupenghuai,0,2,2020-10-23 08:07:37+00:00,2020-12-17 15:03:56+00:00,"I used DeadLetterChannelBuilder as ErrorHandlerBuilder. I specify the bean named onExceptionProcessor as deadLetterChannel. I expect the bean to handle exceptions when route error.


But when I stop any route, the ErrorHandler for the other route will fail. The exception stack is as follows: 


 




java.lang.IllegalStateException: SendProcessor has not been started: sendTo(bean://onExceptionProcessor)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:121) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:82) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:1063) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:474) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:138) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) ~[camel-core-2.25.2.jar:2.25.2]
        at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:220) ~[camel-jetty-common-2.25.2.jar:2.25.2]
        at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:79) ~[camel-http-common-2.25.2.jar:2.25.2]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) ~[javax.servlet-api-3.1.0.jar:3.1.0]
        at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:873) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:51) ~[camel-jetty-common-2.25.2.jar:2.25.2]
        at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:44) ~[camel-jetty-common-2.25.2.jar:2.25.2]
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:51) ~[camel-jetty-common-2.25.2.jar:2.25.2]
        at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:44) ~[camel-jetty-common-2.25.2.jar:2.25.2]
        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1345) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480) ~[jetty-servlet-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1247) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.Server.handle(Server.java:505) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267) ~[jetty-server-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) ~[jetty-io-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) ~[jetty-io-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117) ~[jetty-io-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:698) ~[jetty-util-9.4.18.v20190429.jar:9.4.18.v20190429]
        at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:804) ~[jetty-util-9.4.18.v20190429.jar:9.4.18.v20190429]
        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_111]","davsclaus:1603411872:2020-10-23T08:11:12.456+0000:1603411872:2020-10-23T08:11:12.456+0000:Camel 2.x is not really active maintained. I suggest to move to Camel 3.x if you can, or find a workaround for your use case.

For any chance of us fixing this you should build a sample application as a reproducer or some unit test etc. The more you can help us the better.

"
0,CAMEL-15742,Bug,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Dennis,0,2,2020-10-22 18:23:37+00:00,2020-10-23 07:12:38+00:00,"The 3.6.0 version brakes our route tests.


In the code below we have two xpath expressions. Debugging shows, that the second one in split uses Long.class as return type for evaluation which is wrong and split silently fails (No split done).


if you remove 




 .setProperty(""BOOK_COUNT"", xpath( ""//Books/@count"", Long.class))




test will pass.


Verified by test based on Camel Quarkus :: Examples :: Rest Json


<camel-quarkus.version>1.3.0</camel-quarkus.version>
 <quarkus.version>1.9.0.Final</quarkus.version>




package org.acme.rest.json;
import org.apache.camel.builder.RouteBuilder;
import java.util.concurrent.atomic.AtomicInteger;

public class Routes extends RouteBuilder {

    private AtomicInteger splitCount = new AtomicInteger();

    @Override
    public void configure() throws Exception {
        from(""platform-http:/xpathtest?httpMethodRestrict=POST"")
                .process(exchange -> splitCount.set(0))
                .setProperty(""BOOK_COUNT"", xpath( ""//Books/@count"", Long.class))
                .split(xpath(""//Books/Book""))
                    .process(exchange -> splitCount.getAndIncrement())
                .end()
                .setBody(exchange -> splitCount.get())
                .marshal().json();

    }
}




*TEST: *




package org.acme.rest.json;import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Test;import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;@QuarkusTest
public class RestJsonTest {    @Test
    public void xpath() {
        given()
                .body(""<?xml version=\""1.0\"" encoding=\""iso-8859-1\""?>\n"" +
                        ""<Books count=\""2\""><Book Id=\""1\"" ISBN=\""1\""><Titel>First</Titel> </Book>"" +
                        ""<Book Id=\""2\"" ISBN=\""2\""><Titel>SECOND</Titel> </Book>"" +
                        ""</Books>"")
                .header(""Content-Type"", ""application/xml"")
                .when()
                .post(""/xpathtest"")
                .then()
                .statusCode(200)
                .body(is(""2""));
    }}","davsclaus:1603363484:2020-10-22T18:44:44.099+0000:1603363484:2020-10-22T18:44:44.099+0000:Try set Object.class as return type for the 2nd
Holu:1603368624:2020-10-22T20:10:24.518+0000:1603368624:2020-10-22T20:10:24.518+0000:[~davsclaus] I did it as a temp fix already, but it's still a bug, isn't it? 
davsclaus:1603408358:2020-10-23T07:12:38.174+0000:1603408358:2020-10-23T07:12:38.174+0000:Yes its a little bug which is now fixed. Thanks for reporting and with the sample code"
0,CAMEL-15741,Improvement,Minor,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Unassigned,Claus Ibsen,0,1,2020-10-22 17:11:24+00:00,2021-03-18 10:21:24+00:00,"I forgot to add the default value as a parameter in the headerAs and exchangePropertyAs. So add new functions for those.


https://camel.apache.org/components/latest/languages/joor-language.html",
0,CAMEL-15740,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-22 17:09:07+00:00,2020-10-24 19:52:36+00:00,"We can move the model and builder into its own module so we help keep a cleaner api and separate concerns.


Then we have


camel-base -> camel-core-builder -> camel-core-engine


The reifier is a mix that sits between builder and engine to build the actual processors, ideally we may move them into camel-core-builder if that becomes possible, as then we can get to a point where we can dead code eliminate this entire JAR when you have built routes from the builder/model and then at runtime its just the engine. But that is more to untangle to get there.","davsclaus:1603423461:2020-10-23T11:24:21.255+0000:1603423461:2020-10-23T11:24:21.255+0000:At first we are moving the reifiers out as they are now seperated. 

camel-base <- camel-core-reifier

camel-base<- camel-core-engine
camel-core-reifier <- camel-core-engine

davsclaus:1603540356:2020-10-24T19:52:36.337+0000:1603540356:2020-10-24T19:52:36.337+0000:There is now

camel-core-model
camel-core-reifier"
0,CAMEL-15739,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-22 16:10:32+00:00,2020-10-22 18:22:08+00:00,"Its a more natural placement as in the builder package we have RouteBuilder and others that the end user would be using.


Reifier should not be used directly by end users so lets hide it here too.",
0,CAMEL-15738,Task,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Freeman Yue Fang,0,2,2020-10-22 15:09:36+00:00,2020-12-07 09:29:27+00:00,"the default value for contentTypeHeader is true in src code, while it's false in the doc","ffang:1603353919:2020-10-22T16:05:19.310+0000:1603353919:2020-10-22T16:05:19.310+0000:I got to know that the doc is auto-generated from code.

We have a bunch of dataformats have this property,  but expected different default values, please see the list here
{code}
./camel-gson/src/main/java/org/apache/camel/component/gson/GsonDataFormat.java:    private boolean contentTypeHeader = true;
./camel-protobuf/src/main/java/org/apache/camel/dataformat/protobuf/ProtobufDataFormat.java:    private boolean contentTypeHeader;
./camel-xstream/src/main/java/org/apache/camel/dataformat/xstream/AbstractXStreamWrapper.java:    private boolean contentTypeHeader = true;
./camel-jacksonxml/src/main/java/org/apache/camel/component/jacksonxml/JacksonXMLDataFormat.java:    private boolean contentTypeHeader = true;
./camel-jackson/src/main/java/org/apache/camel/component/jackson/JacksonDataFormat.java:    private boolean contentTypeHeader = true;
./camel-castor/src/main/java/org/apache/camel/dataformat/castor/AbstractCastorDataFormat.java:    private boolean contentTypeHeader = true;
./camel-thrift/src/main/java/org/apache/camel/dataformat/thrift/ThriftDataFormat.java:    private boolean contentTypeHeader;
./camel-jaxb/src/main/java/org/apache/camel/converter/jaxb/JaxbDataFormat.java:    private boolean contentTypeHeader = true;
./camel-xmlbeans/src/main/java/org/apache/camel/converter/xmlbeans/XmlBeansDataFormat.java:    private boolean contentTypeHeader = true;
./camel-fhir/camel-fhir-component/src/main/java/org/apache/camel/component/fhir/FhirDataFormat.java:    private boolean contentTypeHeader = true;
./camel-jibx/src/main/java/org/apache/camel/dataformat/jibx/JibxDataFormat.java:    private boolean contentTypeHeader = true;
./camel-fastjson/src/main/java/org/apache/camel/component/fastjson/FastjsonDataFormat.java:    private boolean contentTypeHeader = true;
{code}
Seems this contentTypeHeader is from [here|https://github.com/apache/camel/blob/master/core/camel-core-engine/src/main/java/org/apache/camel/model/DataFormatDefinition.java#L42]

How to handle this case if different dataformats expect different default value? [~acosentino]?

Thanks!
Freeman
davsclaus:1603497329:2020-10-24T07:55:29.135+0000:1603497359:2020-10-24T07:55:59.272+0000:The doc says that the header is only included if the dataformat is capable of doing so. In the ist above its only thrift and protobuf that does not, maybe that boolean should be true and they can do it, or if they cannot do it, we can just add a note to their doc pages about this
davsclaus:1607301075:2020-12-07T08:31:15.409+0000:1607301075:2020-12-07T08:31:15.409+0000:Working on only having the option for the data formats that actually provide them"
0,CAMEL-15737,Improvement,Minor,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,James Netherton,0,2,2020-10-22 13:36:10+00:00,2020-12-07 08:23:04+00:00,"Small issue noticed over at the Camel Quarkus project. The AS2 component seems to do its parameter resolution via reflection instead of using the configurer classes.


Some more background here:


https://github.com/apache/camel-quarkus/issues/1874","davsclaus:1607148668:2020-12-05T14:11:08.838+0000:1607148668:2020-12-05T14:11:08.838+0000:I have a fixed a general problem for api components with reflection. Can you try again for as2 on camel-quarkus
jamesnetherton:1607297528:2020-12-07T07:32:08.237+0000:1607297528:2020-12-07T07:32:08.237+0000:I removed the reflection config, tested with the latest 3.7.0-SNAPSHOT and it seems to be working now. Thanks!
davsclaus:1607300584:2020-12-07T08:23:04.500+0000:1607300584:2020-12-07T08:23:04.500+0000:Ah good to hear"
0,CAMEL-15736,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-10-22 13:23:16+00:00,2020-10-29 06:45:20+00:00,Issue https://issues.apache.org/jira/browse/CAMEL-15679 brought changes to dependencies of camel-leveldb and camel-leveldb-legacy. Both changes have to be reflected in karaf features.,
0,CAMEL-15735,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-10-22 12:09:10+00:00,2020-11-02 05:22:39+00:00,"New component 'camel-leveldb-legacy' was created as a result of issue https://issues.apache.org/jira/browse/CAMEL-15679.


 


Starter has to be added.",
0,CAMEL-15734,Bug,Minor,"3.4.4, 3.6.0",,"
None
",Resolved,Information Provided,None,Unassigned,Tapio Piironen,0,3,2020-10-22 09:45:19+00:00,2020-10-23 07:16:05+00:00,"Karaf just released 4.2.10 version and seems like Jetty is again upgraded and causes incompability issues. Not sure if this is Camel or Karaf project issue, but reporting here. Stack trace below when installing camel-servlet component:


2020-10-22T12:29:23,689 | ERROR | Karaf ssh console user karaf | ShellUtil | 36 - org.apache.karaf.shell.core - 4.2.10 | Exception caught while executing command org.apache.karaf.features.internal.util.MultiException: Error restarting bundles: Activator start error in bundle org.ops4j.pax.web.pax-web-jetty [255]. at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1045) ~[?:?] at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) ~[?:?] at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) ~[?:?] at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?] at java.lang.Thread.run(Thread.java:834) [?:?] Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.ops4j.pax.web.pax-web-jetty [255]. at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290) ~[?:?] at org.apache.felix.framework.Felix.startBundle(Felix.java:2146) ~[?:?] at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) ~[?:?] at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) ~[?:?] at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165) ~[?:?]
 at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153) ~[?:?] at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1037) ~[?:?] at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) ~[?:?] at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) ~[?:?] at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?] at java.lang.Thread.run(Thread.java:834) [?:?] Caused by: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/HttpConfiguration$Customizer at org.ops4j.pax.web.service.jetty.internal.Activator.start(Activator.java:109) ~[?:?] at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697) ~[?:?] at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240) ~[?:?] ... 12 more Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.server.HttpConfiguration$Customizer not found by org.eclipse.jetty.aggregate.jetty-all-server [253]
 at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639) ~[?:?] at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80) ~[?:?] at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053) ~[?:?] at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?] at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414) ~[?:?] at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660) ~[?:?] at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590) ~[?:?]
 at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80) ~[?:?] at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053) ~[?:?]
 at java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[?:?]
 at org.ops4j.pax.web.service.jetty.internal.Activator.start(Activator.java:109) ~[?:?]
 at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697) ~[?:?]
 at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240) ~[?:?]","davsclaus:1603364038:2020-10-22T18:53:58.579+0000:1603364038:2020-10-22T18:53:58.579+0000:Its a jetty issue as they tend to break their apis in their patch releases

karaf 4.2.9
 <jetty.version>9.4.28.v20200408</jetty.version>

karaf 4.2.10
<jetty.version>9.4.31.v20200723</jetty.version>

You can use karaf 4.2.9 for Camel 3.4.x.

davsclaus:1603364177:2020-10-22T18:56:17.474+0000:1603364177:2020-10-22T18:56:17.474+0000:If you search via 

fc:org.eclipse.jetty.server.HttpConfiguration

on

https://search.maven.org/ 

you can see the last jetty version that has this class is 9.4.30

davsclaus:1603364277:2020-10-22T18:57:57.635+0000:1603364277:2020-10-22T18:57:57.635+0000:Can you try with a fresh 4.2.10 karaf server (not with restarting bundles) and then install camel-servlet from 3.4.4 on top of that.
davsclaus:1603364486:2020-10-22T19:01:26.670+0000:1603364486:2020-10-22T19:01:26.670+0000:Ah the error says ""org.eclipse.jetty.aggregate.jetty-all-server [253]"" but this class is not in this JAR - its in jetty-server 9.4.31 and 9.4.32 etc.
So its likely an Apache Karaf issue as they use the wrong JARs 
davsclaus:1603364858:2020-10-22T19:07:38.769+0000:1603364858:2020-10-22T19:07:38.769+0000:Karaf 4.2.10 works with 3.7-SNAPSHOT

And a fresh karaf 4.2.10 also works with camel 3.4.4

karaf@root()> feature:repo-add camel 3.4.4
Adding feature url mvn:org.apache.camel.karaf/apache-camel/3.4.4/xml/features
karaf@root()> feature:install camel
karaf@root()> feature:install camel-servlet
karaf@root()>

122 │ Active   │  50 │ 3.4.4              │ camel-servlet
123 │ Active   │  50 │ 3.4.4              │ camel-servlet-osgi
ffang:1603366318:2020-10-22T19:31:58.421+0000:1603366515:2020-10-22T19:35:15.437+0000:Hi [~tapiiron];

The problem comes from that bundle org.eclipse.jetty.aggregate.jetty-all-server is used, and this is from jetty feature version 8.x, not the expected jetty 9.4.x which contains class org.eclipse.jetty.server.HttpConfiguration$Customizer(Karaf still ships jetty 8.x for backward compatibility)

Also I tested, Camel 3.6.0 and 3.4.4 can work with karaf 4.2.10 both with JDK 8 and 11 when installing camel-servlet.
With a clean karaf
feature:repo-add camel 3.4.4// or 3.6.0
feature:install camel-servlet
works for me both with JDK 8 and 11

I believe you installed other features which introduced jetty 8.x before you install camel-servlet, you should avoid it, only one jetty version can be used in one karaf container.

Freeman
tapiiron:1603402668:2020-10-23T05:37:48.968+0000:1603402668:2020-10-23T05:37:48.968+0000:Hey,

Thanks for checking this out. I can install camel-servlet if not installing any other feature before that. This is my feature-install script:

feature:repo-add camel 3.4.4

feature:install camel
feature:install jndi
feature:install jms
feature:install jdbc
feature:install transaction
feature:install camel-ssh

feature:install camel-http
feature:install camel-ftp
feature:install camel-jdbc
feature:install camel-velocity
feature:install camel-jetty
feature:install camel-jsch
feature:install camel-quartz
feature:install camel-jms
feature:install camel-servlet

at this point it fails.

Will try if can work around this issue by changing the order. And of course if not getting it working will stick to 4.2.9
davsclaus:1603408565:2020-10-23T07:16:05.635+0000:1603408565:2020-10-23T07:16:05.635+0000:You can install the war feature from karaf itself first, then it installs jetty"
0,CAMEL-15733,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-22 07:20:49+00:00,2020-10-22 08:01:02+00:00,This feature is not really in use and was over the top. And it makes something hards to untangle.,
0,CAMEL-15732,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-21 19:22:27+00:00,2020-10-23 12:17:36+00:00,"We should untangle reifiers some more from using builder and impl directly, so we can get further ahead of being able to seperate reifier and model from camel-core-engine - eg eventually maybe so you can have those at built time, and then at runtime they can be removed / not needed.","davsclaus:1603327007:2020-10-22T08:36:47.737+0000:1603423378:2020-10-23T11:22:58.286+0000:error handlers *DONE* and 
route *DONE* 
are the remainder now.
davsclaus:1603348030:2020-10-22T14:27:10.712+0000:1603409596:2020-10-23T07:33:16.512+0000:It would be good to move adviceWith away from RouteReifier so we can have it another place as Reifier should not really be exposed to end users *DONE*
davsclaus:1603417783:2020-10-23T09:49:43.210+0000:1603426138:2020-10-23T12:08:58.709+0000:lookupErrorHandlerFactory in ErrorHandlerReifier to be moved out of reifier *DONE*"
0,CAMEL-15731,Improvement,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Rafal Jaworski,0,2,2020-10-21 19:11:00+00:00,2020-11-03 13:59:51+00:00,"Currently when reading HL7 messages using camel-mllp we always have to send back some acknowledgment. Even with autoAck=false there has to be some ack set though MLLP_ACKNOWLEDGEMENT property, or the MllpTcpServerConsumer throws MllpInvalidAcknowledgementException. This is a big limitation when migrating for example from Mirth to camel since Mirth supports that (see pages 330-331 in https://www.nextgen.com/-/media/files/nextgen-connect/nextgen-connect-39-user-guide.pdf).


 


The camel-mllp component should allow receiving messages without sending back any ack, the same way Mirth does it. I believe it should stop throwing exceptions if autoAck=false, synchronous=false and no ack is being set by any of the MLLP_ACKNOWLEDGEMENT properties. Or we could introduce new property to support this mode.","davsclaus:1603317203:2020-10-22T05:53:23.340+0000:1603317203:2020-10-22T05:53:23.340+0000:Are you able to work on improving this?
rafaljaw:1603369688:2020-10-22T20:28:08.804+0000:1603369688:2020-10-22T20:28:08.804+0000:Yes, I'll work on that."
0,CAMEL-15730,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-21 17:50:38+00:00,2020-10-21 19:10:20+00:00,"Due to how the java dsl was designed in the beginning then we have SimpleBuilder that are used for defining simple expressions/predicates which is a bit different than what else is done.


But we can untangle that and make it just a facade and transfer the configuration to Simple Language definition like the DSL works in general.


We should also untangle SimpleBuilder from the reifier so they are not direct dependent.","davsclaus:1603275141:2020-10-21T18:12:21.800+0000:1603275141:2020-10-21T18:12:21.800+0000:There are some places where this reveal where we could improve as some EIPs take in SimpleBuilder and dont transform it to SimpleExpression model as other EIPs does in general.

Its for EIPs with special expression options like wiretap, aggregator etc.
davsclaus:1603278620:2020-10-21T19:10:20.253+0000:1603278620:2020-10-21T19:10:20.253+0000:Okay we got a bit further - however its a bit tougher to make SimpleBuilder not as a predicate/expression but as a intermediate holder that gets replaced when the route model is built."
0,CAMEL-15729,New Feature,Minor,3.6.0,Future,"
None
",Open,Unresolved,Future,Unassigned,Tim Kaczynski,2,2,2020-10-21 14:29:45+00:00,2022-09-02 17:14:04+00:00,"This enhancement request was generated from a question on zulipchat:
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Adding.20a.20trustStore.20for.20graphql/near/213944005


We are writing an integration that needs to produce messages to a graphql server.  The graphql server is using TLS and its certificate was generated by an internal CA.  There does not appear to be a way to provide a trust store to the graphql producer, like there is for say the Kafka integrations.  Connections to graphql fail due to the inability to build a trusted certificate chain.


Possible non-trivial solutions include assuming the graphql integration is using the apache HTTP client, and setting up a new protocol that uses a custom trust store.  Also (using camel-k) using the JVM taint to alter the JSSE configuration / java properties, adding a trust store containing the CA.  However both of these solutions require assumptions about the implementation that may not always be true (and we have not tested them yet).  Could also use the HTTP[4] integration directly to talk to graphql but this requires coding the REST request manually.


If there were a parameter on the graphql integration where we could input a trust store, type, and password, that would be an ideal solution.  Or perhaps some other way of modifying the default trust store using camel-k (this would benefit all integrations).",
0,CAMEL-15728,Task,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Romain Manni-Bucau,0,1,2020-10-21 12:16:27+00:00,2020-10-22 05:52:48+00:00,Its mention should probably be dropped from org.apache.camel.cdi.CdiCamelContext javadoc,
0,CAMEL-15727,Task,Minor,None,3.15.0,"
None
",Resolved,Fixed,3.15.0,Unassigned,Romain Manni-Bucau,0,2,2020-10-21 12:12:21+00:00,2022-01-11 08:56:06+00:00,seems mock and main dependencies should be dropped in favor of camel-core-languages (and camel-core-engine but it is transitive from language one). Other ones can be added in a camel-cdi-main module or so but are undesired for main deployments IMHO.,"davsclaus:1641776915:2022-01-10T09:08:35.437+0000:1641776915:2022-01-10T09:08:35.437+0000:The camel-mock is hardcoded in
https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/components/camel-cdi/src/main/java/org/apache/camel/cdi/CdiCamelFactory.java#L148

And I tried making it generic with a Endpoint type instead, however that does not really work, if you want to inject

{code}
@Inject 
@Uri(""mock:foo"")
MockEndpoint foo;
{code}

Then it does not work as the type is MockEndpoint and the factory is creating Endpoint. 
davsclaus:1641778535:2022-01-10T09:35:35.226+0000:1641778535:2022-01-10T09:35:35.226+0000:Moved the Main class to a new camel-cdi-main module *DONE*
romain.manni-bucau:1641780464:2022-01-10T10:07:44.083+0000:1641780464:2022-01-10T10:07:44.083+0000:[~davsclaus] looks like this can be replaced by a CDI extension and using a bit of reflection we can keep the integration fully functional without requiring mock module to be there (will avoid to have as much modules as #components!), no? If you care about quarkus, same can be done in camel-quarkus at build time.
davsclaus:1641780985:2022-01-10T10:16:25.560+0000:1641780985:2022-01-10T10:16:25.560+0000:You are welcome to send a PR
romain.manni-bucau:1641794173:2022-01-10T13:56:13.362+0000:1641794173:2022-01-10T13:56:13.362+0000:here you are https://github.com/apache/camel/pull/6705
davsclaus:1641862566:2022-01-11T08:56:06.778+0000:1641862566:2022-01-11T08:56:06.778+0000:Thanks for the PRs"
0,CAMEL-15696,Test,Minor,3.5.0,3.12.0,"
None
",Resolved,Fixed,3.12.0,Unassigned,Peter Palaga,0,2,2020-10-15 19:58:48+00:00,2021-07-05 07:21:08+00:00,"Steps to reproduce:




git checkout camel-3.5.0
cd components/spark
export CAMEL_SPARK_HIVE_TESTS=true
mvn clean test
...
[ERROR] org.apache.camel.component.spark.SparkProducerTest.shouldExecuteConditionalFrameCount  Time elapsed: 0.012 s  <<< ERROR!
java.util.ServiceConfigurationError: org.apache.spark.sql.sources.DataSourceRegister: Provider org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat could not be instantiated
        at java.util.ServiceLoader.fail(ServiceLoader.java:232)
        at java.util.ServiceLoader.access$100(ServiceLoader.java:185)
        at java.util.ServiceLoader$LazyIterator.nextService(ServiceLoader.java:384)
        at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:404)
        at java.util.ServiceLoader$1.next(ServiceLoader.java:480)
        at scala.collection.convert.Wrappers$JIteratorWrapper.next(Wrappers.scala:43)
        at scala.collection.Iterator$class.foreach(Iterator.scala:742)
        at scala.collection.AbstractIterator.foreach(Iterator.scala:1194)
        at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
        at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
        at scala.collection.TraversableLike$class.filterImpl(TraversableLike.scala:258)
        at scala.collection.TraversableLike$class.filter(TraversableLike.scala:270)
        at scala.collection.AbstractTraversable.filter(Traversable.scala:104)
        at org.apache.spark.sql.execution.datasources.DataSource$.lookupDataSource(DataSource.scala:630)
        at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:194)
        at org.apache.spark.sql.DataFrameReader.json(DataFrameReader.scala:392)
        at org.apache.spark.sql.DataFrameReader.json(DataFrameReader.scala:326)
        at org.apache.camel.component.spark.SparkProducerTest.createCamelRegistry(SparkProducerTest.java:80)
        at org.apache.camel.test.junit5.CamelTestSupport.createCamelContext(CamelTestSupport.java:730)
        at org.apache.camel.test.junit5.CamelTestSupport.doSetUp(CamelTestSupport.java:412)
        at org.apache.camel.test.junit5.CamelTestSupport.setUp(CamelTestSupport.java:367)
        at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)
        at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
        at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
        at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
        at org.junit.jupiter.engine.extension.TimeoutExtension.interceptLifecycleMethod(TimeoutExtension.java:126)
        at org.junit.jupiter.engine.extension.TimeoutExtension.interceptBeforeEachMethod(TimeoutExtension.java:76)
        at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
        at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
        at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
        at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
        at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
        at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
        at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
        at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeMethodInExtensionContext(ClassBasedTestDescriptor.java:481)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$synthesizeBeforeEachMethodAdapter$18(ClassBasedTestDescriptor.java:466)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachMethods$2(TestMethodTestDescriptor.java:169)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$5(TestMethodTestDescriptor.java:197)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:197)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachMethods(TestMethodTestDescriptor.java:166)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
        at java.util.ArrayList.forEach(ArrayList.java:1259)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
        at java.util.ArrayList.forEach(ArrayList.java:1259)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
        at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
        at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
        at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
        at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)
        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:165)
        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:127)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
        at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
Caused by: java.lang.NoClassDefFoundError: org/slf4j/bridge/SLF4JBridgeHandler
        at org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat.<init>(ParquetFileFormat.scala:65)
        at sun.reflect.GeneratedConstructorAccessor28.newInstance(Unknown Source)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
        at java.lang.Class.newInstance(Class.java:442)
        at java.util.ServiceLoader$LazyIterator.nextService(ServiceLoader.java:380)
        ... 86 more
Caused by: java.lang.ClassNotFoundException: org.slf4j.bridge.SLF4JBridgeHandler
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
        ... 92 more","ppalaga:1602809535:2020-10-16T08:52:15.709+0000:1602809535:2020-10-16T08:52:15.709+0000:Oh, forgot to mention `export CAMEL_SPARK_HIVE_TESTS=true`. Added to the steps to reproduce now.
ppalaga:1603681827:2020-10-26T11:10:27.573+0000:1603681827:2020-10-26T11:10:27.573+0000:Blocks https://github.com/apache/camel-quarkus/issues/1956"
0,CAMEL-15695,Task,Major,3.6.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Claus Ibsen,0,1,2020-10-15 17:11:33+00:00,2020-10-20 07:06:35+00:00,"We should move camel-archetype-blueprint to camel-karaf and camel-archetype-spring-boot to camel-spring-boot so they are not in the main repo anymore. It causes pain for release as its a chicken and egg problem.


Also its better that the archetype is maintained in their own repo instead of core camel.",
0,CAMEL-15694,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-15 10:47:39+00:00,2020-10-15 11:54:17+00:00,"Just a thought. The event notifier is optimized if not in use. But some runtimes like camel-main / camel-quarkus / camel-spring-boot etc uses an event notifier for some listeners on startup / shutdown etc. Not really for exchange events.


So we can potentially optimized internally in camel go have 2 sets for events, so if you dont need exchange events then that is empty and we can optimize for that.","davsclaus:1602734048:2020-10-15T11:54:08.332+0000:1602734048:2020-10-15T11:54:08.332+0000:We were already prepared for this. So introduced a new SimpleEventNotifierSupport that can be used as base class for events that dont care about exchanges, then camel-core can optimize for that."
0,CAMEL-15693,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,3,2020-10-15 10:13:35+00:00,2020-10-16 06:33:55+00:00,"Actually we have an enum as header. To avoid breaking existing users, I'll add an header with just the plain event type. This would be nice for the ckc related connector.","davsclaus:1602730373:2020-10-15T10:52:53.493+0000:1602730373:2020-10-15T10:52:53.493+0000:Oh I think its fine to change the header to use the enum string name, instead of having two. Just add a little note in the upgrade guide.
bedla:1602730641:2020-10-15T10:57:21.121+0000:1602730641:2020-10-15T10:57:21.121+0000:Agree about changing that to String with very little note in migration guide. The impact on user should be minimal, as type conversion between String and Enum and vice versa should kick in most cases."
0,CAMEL-15692,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.7.0,Unassigned,Romain Manni-Bucau,0,2,2020-10-15 09:41:11+00:00,2020-10-16 04:52:00+00:00,No Desc,davsclaus:1602795120:2020-10-16T04:52:00.178+0000:1602795120:2020-10-16T04:52:00.178+0000:Thanks for the work on adding this.
0,CAMEL-15691,Task,Minor,3.5.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Romain Manni-Bucau,0,1,2020-10-15 08:57:19+00:00,2020-10-15 10:52:02+00:00,No Desc,
0,CAMEL-15690,Improvement,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-15 08:02:23+00:00,2020-10-19 14:30:18+00:00,"It does a lookup of the consumer to handover the exchange on each process. We can optimize this to do this once and reuse same consumer.


And then if the consumer is stopped/removed then we need a event listener to tell the producer that the consumer is gone and it needs to clear the state.


This avoids the synchronized lookup on each process","davsclaus:1602723842:2020-10-15T09:04:02.510+0000:1602723842:2020-10-15T09:04:02.510+0000:Ideally we could wire together the consumer and producers during init phase but the consumers are only created/init/started when the routes are started.

So this may require for us to move creating the route consumer to an earlier phase so it can be part of built time optimizations (in general).
And then we can still defer its init/start phase to when the route is actually starting up. As a route may be set to autostartup = false, and therefore it may not make sense to do init phase if the route is never started.
davsclaus:1602723862:2020-10-15T09:04:22.479+0000:1602723862:2020-10-15T09:04:22.479+0000:The consumer is created here
https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/core/camel-base/src/main/java/org/apache/camel/impl/engine/DefaultRoute.java#L562
davsclaus:1602735777:2020-10-15T12:22:57.745+0000:1602735777:2020-10-15T12:22:57.745+0000:Optimize to move state from endpoint to component which makes it easier to optimize wiring between producer and consumers. *DONE*"
0,CAMEL-15689,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.7.0,Tomohisa Igarashi,Tomohisa Igarashi,0,1,2020-10-14 19:37:46+00:00,2020-10-15 14:50:14+00:00,"AtlasMap is a data mapping solution with interactive web based user interface for design time. At runtime it has a camel-atlasmap component to process mappings created from GUI as a part of Camel route.
https://www.atlasmap.io/


camel-atlasmap component has been maintained in AtlasMap project until it is stabilized, and we think now is the time to migrate into Apache Camel repository.","igarashitm:1602744334:2020-10-15T14:45:34.972+0000:1602744334:2020-10-15T14:45:34.972+0000:Merged into master - https://github.com/apache/camel/commit/c09aedb78c5f34e80d0d0f4e2ff846e53516fc69
igarashitm:1602744614:2020-10-15T14:50:14.611+0000:1602744614:2020-10-15T14:50:14.611+0000:Note: scheme has been changed from *atlas* to *atlasmap* to avoid future conflict. Be aware when migrating from the one delivered from AtlasMap repo."
0,CAMEL-15688,Task,Major,3.6.0,None,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-14 17:14:13+00:00,2020-10-15 17:14:22+00:00,"Actually the configuration of the endpoint will fail if you don't specify the bucket into the URI, but you have the possibility of setting the bucket as endpoint parameter, so the endpoint instantation shouldn't fail. Probably it would make sense to avoid going in error in that harsh way",
0,CAMEL-15687,Improvement,Major,None,None,"

help-wanted

",Resolved,Fixed,3.7.0,Unassigned,Marat Gubaidullin,0,1,2020-10-14 15:22:27+00:00,2020-10-15 07:06:21+00:00,No Desc,
0,CAMEL-15686,Improvement,Minor,None,3.7.0,"
None
",Resolved,Cannot Reproduce,3.7.0,Claus Ibsen,Franky Georg,0,2,2020-10-13 23:28:10+00:00,2020-11-03 08:18:26+00:00,"Injecting an EndpointProducerBuilder bean that uses a simple expression causes an exception.




@Configuration
public class MyTestRoute extends EndpointRouteBuilder {
   private static final String MY_TOPIC = ""testTopic"";

   @Autowired
   private EndpointProducerBuilder myKafkaBean;

   @Override
   public void configure() {
      from(timer(""myTimer"").repeatCount(1))
            .setBody(constant(""THIS IS A TEST MESSAGE""))
            .setProperty(""destination2"", constant(MY_TOPIC))
            .to(""direct:publish-to-kafka2"")
      ;

      from(""direct:publish-to-kafka2"")
            .toD(myKafkaBean)
      ;

      from(kafka(MY_TOPIC))
            .log(""Received: ${body}"")
      ;
   }

   @Bean
   public EndpointProducerBuilder myKafkaBean() {
      return kafka(""${exchangeProperty.destination2}"");
   }
}



Exception from org.apache.kafka.clients.Metadata:




Metadata response reported invalid topics [${exchangeProperty.destination}]



I don't have to use the bean for the error to manifest, it's enough to @Autowire it.


 


It does work for static endpoints:




    return kafka(""myTopic""); // This works fine from an EndpointProducerBuilder bean



And it does work for dynamic endpoints in URI form:




    return ""kafka:${exchangeProperty.destination}""; // This works fine but you lose type safety



 


Creating beans like this is useful for unit testing as they can be overridden to return mock/direct/whatever-is-useful, without first creating the original endpoint, which can significantly reduce execution time.","davsclaus:1602634609:2020-10-14T08:16:49.592+0000:1602634609:2020-10-14T08:16:49.592+0000:Can you try with 3.5 or the 3.6 when its released. It works in an endpoint-dsl route builder. And although you are using bean inject then it may work there too.
davsclaus:1602634762:2020-10-14T08:19:22.937+0000:1602634762:2020-10-14T08:19:22.937+0000:btw can you post more code of how you use that builder as a client code. As 2nd thought the endpoint dsl is working due to using toD
FrankyG:1602650861:2020-10-14T12:47:41.150+0000:1602650861:2020-10-14T12:47:41.150+0000:I've added an usage example in the description.

I'm actually struggling to replicate this now - my example above is working perfectly at home with Camel 3.3, 3.4.4, and 3.5.

I'll take another look at my failing code when I'm back in the office, but that won't be for a couple days.
FrankyG:1603216229:2020-10-21T01:50:29.405+0000:1603292028:2020-10-21T22:53:48.987+0000:Updated description with a full test class. Using properties:
     camel.springboot.main-run-controller=true
     camel.component.kafka.brokers=localhost:9092

-I get no errors in a clean project on 1st PC.-
 -In an existing project on 2nd PC:-

I get no errors in a clean project.

The following occurs when adding the same code to my existing project:
 # The 3 expected routes are created
 # The message is sent to Kafka via 'testTopic'
 # The message is received from Kafka via 'testTopic'
 # _Camel creates an unexpected new route_ 
{{Route: route7 started and consuming from: kafka://${exchangeProperty.destination2}}}
 # Camel tries to create a new topic named '${exchangeProperty.destination}' and throws an error about it being an invalid topic name

Clearly it's something to do with my existing project/environment. I'll continue trying to narrow it down, but to me it's looking more like a bug than an enhancement request at this point.
FrankyG:1603297060:2020-10-22T00:17:40.479+0000:1603297060:2020-10-22T00:17:40.479+0000:So somehow Camel is starting the KafkaEndpointBuilder as its own route.
But only in my project, which I can't share.

In case there's some conflict, I've tried:
 * removing any use of CamelContext
 * removing any other toD"
0,CAMEL-15685,Improvement,Major,None,,"
None
",Closed,Invalid,None,Unassigned,Luca Ferrari,0,2,2020-10-13 23:22:18+00:00,2020-10-14 07:30:34+00:00,it is not clear from the component documentation how to use https4 when in fact that's the easieast way to connect to an HTTPS service without even needing to provide your own packaged version of HTTP4,"davsclaus:1602631834:2020-10-14T07:30:34.050+0000:1602631834:2020-10-14T07:30:34.050+0000:See here how to get help
https://camel.apache.org/community/support/

Dont reopen tickets when its closed by the Camel team"
0,CAMEL-15684,Task,Major,None,None,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-13 17:50:14+00:00,2020-10-14 09:08:47+00:00,HipChat was discontinued in February 2019.,
0,CAMEL-15683,New Feature,Major,None,None,"
None
",Resolved,Abandoned,3.x,Unassigned,Claus Ibsen,0,1,2020-10-13 15:06:25+00:00,2022-09-02 16:03:29+00:00,"It would be good to have a camel component for being able to send cellular text messages (SMS and MMS) via the mm7 protocol.


This protocol is SOAP based (yeah old world) send to mm7 server via HTTP.",
0,CAMEL-15682,Bug,Major,"3.4.2, 3.5.0","3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Claus Ibsen,David Borsos,0,3,2020-10-13 13:30:58+00:00,2020-10-13 14:40:43+00:00,"Hello,


We've recently had an outage in one of our applications built using Apache Camel and specifically using a JDBC-based aggregation on one route.


After an unclean exit, the application continued to fail to start up.


The only way for us to recover from this situation was to erase the contents of the aggregate repository and recover the lost data manually. Until we executed that, the application was completely offline (this error resulted in a failure that exited the whole JVM)


The error we observed during startup:




org.apache.camel.FailedToStartRouteException: Failed to start route event.aggregator because of null
	at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:125)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:263)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:156)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620)
	at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452)
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:157)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.winnowsolutions.vision.annotation.app.MainApplication.main(MainApplication.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:109)
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:88)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.Long (java.lang.Integer and java.lang.Long are in module java.base of loader 'bootstrap')
	at org.apache.camel.RuntimeCamelException.wrapRuntimeCamelException(RuntimeCamelException.java:52)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:67)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101)
	at org.apache.camel.processor.channel.DefaultChannel.doStart(DefaultChannel.java:143)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:87)
	at org.apache.camel.processor.Pipeline.doStart(Pipeline.java:154)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.impl.engine.RouteService.startChildService(RouteService.java:334)
	at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:184)
	at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123)
	... 34 common frames omitted
Caused by: java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.Long (java.lang.Integer and java.lang.Long are in module java.base of loader 'bootstrap')
	at org.apache.camel.processor.aggregate.AggregateProcessor.restoreTimeoutMapFromAggregationRepository(AggregateProcessor.java:894)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doStart(AggregateProcessor.java:1532)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:101)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1459)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:60)
	... 49 common frames omitted




After some investigation we have identified that the error is sourced from the way Camel is defaulting certain values when recovering the aggregate contents from the repository; specifically:


https://github.com/apache/camel/blob/camel-3.4.2/core/camel-base/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java#L894




long timeout = exchange.hasProperties() ? exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, 0, long.class) : 0;




This code is problematic if the branch that gets executed is the one where the default 0 (Integer) value is attempted to be cast to the target long variable.


Please correct the defaulting outlined in the code above so that it defaults with the correct (Long) type.",acosentino:1602567285:2020-10-13T13:34:45.216+0000:1602567285:2020-10-13T13:34:45.216+0000:You're welcome to open a PR against master
0,CAMEL-15681,Improvement,Minor,3.5.0,None,"
None
",Closed,Abandoned,None,Zineb Bendhiba,Zineb Bendhiba,0,1,2020-10-13 13:01:15+00:00,2020-10-14 09:39:29+00:00,"Improve handling the datasource in the pgevent endpoint, so that it can take a java.sql Datasource and connection type, so that we can use a datasource coming from a specific platform, like quarkus for instance.","zbendhiba:1602639529:2020-10-14T09:38:49.806+0000:1602639529:2020-10-14T09:38:49.806+0000:the first goal was to use a postresql datasource generated by postrgesql jdbc driver, and I've found that it wasn't compatible with pgjdbc-ng driver
I close this JIRA"
0,CAMEL-15680,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Luigi De Masi,Luigi De Masi,0,1,2020-10-13 12:34:30+00:00,2020-10-20 04:19:23+00:00,"Add the possibility to filter the blobs to download in the download batch operation, using a regexp",
0,CAMEL-15679,Improvement,Major,3.5.0,3.7.0,"
None
",Resolved,Fixed,3.7.0,Jiri Ondrusek,Jiri Ondrusek,0,2,2020-10-13 10:52:41+00:00,2021-02-24 01:52:25+00:00,"Current implementation of serialization is based on `org.fusesource.hawtbuf:hawtbuf` and  java object serialization. It would be better to use Jackson instead. Here are some reasons:



Serialization with Jackson is faster (see http://rick-hightower.blogspot.com/2014/04/which-is-faster-java-object.html)
Camel-quarkus can not use java object serialization in native (see https://github.com/oracle/graal/issues/460) Current workaround uses Jackson instead.","davsclaus:1602571655:2020-10-13T14:47:35.852+0000:1602571655:2020-10-13T14:47:35.852+0000:Yeah but binary data is harder to represent in json. So this would only work for payloads that are text based, or for binary then it would need to be represented as some kind of blob.

But a pluggable serializer would be nice. And yeah its also good to get rid of hawtbuf as that project is EOL.

jondruse:1602731271:2020-10-15T11:07:51.909+0000:1602731271:2020-10-15T11:07:51.909+0000:[~davsclaus] I'm investigating possibilities for the solution.

Would it be acceptable to change serialization mechanism completely? I see only one disadvantage, if user has already some data in db file, after upgrade, changed mechanism won't be able to deserialize data back. Is this scenario relevant? If so, current mechanism has to stay and only user can define to use another one.

There are several ways of fixing this:
 # it would be nice to use jackson to serialize all except payload. In case that payload is binary, it would be saved as is, in case of object, it would be serialized by Jackson with possible customization by allowing objectMapperCustomizer. (e.g. for the case that serialized object contains some binary parts)
 # Use different mechanism which is working with quarkus as well (I haven't try any to be 100% sure, but there are some serializers  like bson, msgpack, ...)

From my POV it would be nice to try option 1 - to serialize all except payload as json and content save as binary or serialize into json.

 

WDYT?
davsclaus:1602737470:2020-10-15T12:51:10.930+0000:1602737470:2020-10-15T12:51:10.930+0000:I think the old hawtbuf should be moved out to a camel-leveldb-legacy or something so users that may use that can keep using it as otherwise their binary data is gone. And then we deprecate it, so it gives time to migrate to the new serializer.

But on the cloud platforms then there is maybe also better key/value stores than leveldb so its all a bit of legacy.
davsclaus:1603275983:2020-10-21T18:26:23.507+0000:1603275983:2020-10-21T18:26:23.507+0000:We would need spring boot starter for the legacy component, and also karaf features to be updated
jondruse:1614102745:2021-02-24T01:52:25.010+0000:1614102745:2021-02-24T01:52:25.010+0000:yes. I'll start working on it probably at the beginning of the next week.


(I couldn't add a comment to the issue)

st 21. 10. 2020 v 20:27 odesílatel Claus Ibsen (Jira) <jira@apache.org>

"
0,CAMEL-15678,Bug,Minor,3.5.0,"3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Andrea Cosentino,Kiril Nugmanov,0,2,2020-10-13 10:45:47+00:00,2020-10-13 15:59:12+00:00,"Camel AWS2 S3 incorectly defines upload part content on multipart upload:
org.apache.camel.component.aws2.s3.AWS2S3Producer:193




for (int part = 1; filePosition < contentLength; part++) {
    ... 
    ...
    String etag = getEndpoint().getS3Client().uploadPart(uploadRequest, RequestBody.fromFile(filePayload)).eTag();
 ...

}



 


filePayload - is whole file to be uploaded. 


In case when file size is bigger than partSize (which by default is 25MB) - uploaded amount of content to S3 will be file.size * number_of_parts


 


Fix:



define RequsetBody from stream:





InputStream inputStream = FileUtils.openInputStream(file);
IOUtils.skip(inputStream, filePosition);

completedParts.add(
        CompletedPart.builder()
                .partNumber(part)
                .eTag(amazonS3Client.uploadPart(uploadRequest, RequestBody.fromInputStream(inputStream, partSize)).eTag())
                .build()
);","acosentino:1602557720:2020-10-13T10:55:20.813+0000:1602557720:2020-10-13T10:55:20.813+0000:Can you create a github pull request? Thanks
acosentino:1602557902:2020-10-13T10:58:22.740+0000:1602557902:2020-10-13T10:58:22.740+0000:Otherwise I'll work on this one soon.
cynicLT:1602560803:2020-10-13T11:46:43.274+0000:1602560803:2020-10-13T11:46:43.274+0000:Sure. Will provide in a couple of hours.
acosentino:1602560991:2020-10-13T11:49:51.520+0000:1602560991:2020-10-13T11:49:51.520+0000:Thanks, please have a look at the localstack and integration tests too :)

 
cynicLT:1602565186:2020-10-13T12:59:46.596+0000:1602565186:2020-10-13T12:59:46.596+0000:https://github.com/apache/camel/pull/4433"
0,CAMEL-15677,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-13 10:28:23+00:00,2020-10-13 17:01:51+00:00,"Since actually it makes sense to use an app for doing stuff in a workspace, some of options we provide are just misleading. Everything is now set in the app configuration and we need to use the bot oauth token to leverage the app. So username, icon_emoji etc. are not useful anymore. My proposal is to deprecate them in 3.6.0 and remove them in 3.7.0",
0,CAMEL-15676,Bug,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Michael Würsch,0,2,2020-10-13 07:11:09+00:00,2020-10-13 14:45:42+00:00,"openapi-restdsl-generator and accordingly the camel-restdsl-openapi-plugin for maven generate problematic code/xml if there are multiple responses with the same content-type defined for a given path and operation.


Example:




...
""responses"": {
                    ""200"": {
                        ""content"": {
                            ""application/json"": {
                                ...
                            }
                        },
                        ""description"": ""Updated pet.""
                    },
                    ""201"": {
                        ""content"": {
                            ""application/json"": {
                                ...
                            }
                        },
                        ""description"": ""Created pet.""
                    }
                }
...




will result in:




<rest>
        <put consumes=""application/json"" produces=""application/json,application/json"" uri=""/pet"">
            <param name=""body"" required=""true"" type=""body""/>
            <to uri=""direct:rest1""/>      
        </put> 
    </rest> 




The problematic part is the comma-separated list as the value of the produces-attribute, where application/json is listed twice. The Camel route will then, per default, return ""application/json,application/json"" as the content-type.


This invalid content-type causes some problems in third-party tools and frameworks, for example the Citrus testing framework. Although a simple work-around for the example above is to explicitly set the content-type header in the Camel route, I think the current behavior could be easily improved by modifying org.apache.camel.generator.openapi.OperationVisitor to use a set instead of a list for emitting the operationLevelProduces.


This would not fix cases, where there are multiple responses with different content-types, such as ""application/json,text/xml"". But I assume that they are a little bit less common nowadays (at least for us).


I will follow-up with a pull-request.",davsclaus:1602571542:2020-10-13T14:45:42.873+0000:1602571542:2020-10-13T14:45:42.873+0000:Thanks for reporting and the PR
0,CAMEL-15675,Bug,Minor,"3.5.0, 3.4.4",None,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,1,2020-10-12 14:38:13+00:00,2020-10-13 07:57:24+00:00,"Relates to an issue raised over at the Camel Quarkus project:


https://github.com/apache/camel-quarkus/issues/1894",
0,CAMEL-15674,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-10-12 14:12:45+00:00,2020-10-14 08:22:50+00:00,No Desc,
0,CAMEL-15673,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-12 11:45:46+00:00,2020-10-12 14:52:25+00:00,"It should be possible to refer to bean by the #type: prefix in all places of the endpoint-dsl. There are some components which does a bit of special handling (due to before property binding support was as powerful as today - it supports #type etc).


For example camel-sql, you should be able to do


                SqlEndpointBuilderFactory.SqlEndpointBuilder builder
                        = sql(""SELECT * FROM FOO"").dataSource(""#type:javax.sql.DataSource"");


To grab the data source via the type class instead of knowing the bean id etc.",
0,CAMEL-15672,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Andrea Cosentino,Andrea Cosentino,0,2,2020-10-12 09:53:04+00:00,2023-08-09 09:23:37+00:00,No Desc,davsclaus:1662105795:2022-09-02T16:03:15.452+0000:1662105795:2022-09-02T16:03:15.452+0000:Is this any relevant? Is there a high demand for a lot of translation so you need to batch the jobs ?
0,CAMEL-15671,Improvement,Major,2.25.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Taras Tielkes,0,2,2020-10-10 09:41:02+00:00,2020-10-16 19:49:02+00:00,"We are using the http://camel.apache.org/schema/spring namespace to configure a Camel context from spring.


It seems that CamelNamespaceHandler.CamelContextBeanDefinitionParser#doParse unconditionally registers a CamelBeanPostProcessor into the underlying Spring ApplicationContext: there is no guard or configuration option to prevent the execution of CamelNamespaceHandler#injectBeanPostProcessor.


This is unfortunate, since we are not using any of the Camel annotations in the beans present in the Spring application context of our application. At the same time, CamelBeanPostProcessor introduces dramatic runtime performance overhead.


Specifically, any bean initialized and configured by the Spring application context will be inspected by the camel bena post processor for presence of Camel annotations. In our use-case, Spring @Configurable annotated entities are used, which can have bean creation rates of tens of thousands per second. Without the CamelBeanPostProcessor present, the performance impact of this is negligible. With the CamelBeanPostProcessor present, this introduces significant bottlenecks.


See below for the relevant parts of the Camel annotation scanning code dominating this bottleneck (from a JFR recording).


The use of the Spring Camel namespace seems to be conflated with the unconditional injection of the CamelBeanPostProcessor, with no configuration or strategy specialization option to separate these.


For users using the namespace, but not using the Camel annotations, it would be very useful to have control over this aspect of Camel/Spring integration.","taras.tielkes:1602456233:2020-10-12T06:43:53.920+0000:1602456233:2020-10-12T06:43:53.920+0000:Claus, note that the performance overhead is not _on bootstrap_ in our case.

As the application context is creating and wiring new bean instances, the overhead is continuous.
davsclaus:1602487397:2020-10-12T15:23:17.833+0000:1602487397:2020-10-12T15:23:17.833+0000:You can try on 2.x to create an empty/dummy implementation of the came bean post processor and add it as a <bean> to the registry. Then Camel may pickup your bean and use that instead of the default.
davsclaus:1602495150:2020-10-12T17:32:30.097+0000:1602495150:2020-10-12T17:32:30.097+0000:There is an option on 3.6 now to turn the bean post processor off
taras.tielkes:1602848942:2020-10-16T19:49:02.515+0000:1602848942:2020-10-16T19:49:02.515+0000:Claus,

Thanks for the quick follow-up on the issue.

Just writing here to confirm that your suggested work-around for Camel 2.x behaves as expected. For others experiencing this performance bottleneck, the work-around amounts to overriding the Camel {{BeanPostProcessor}} like so:
{code:java}
<camelContext id=""myCamelContext"" xmlns=""http://camel.apache.org/schema/spring"">
   ...
</camelContext>

<bean id=""myCamelContext:beanPostProcessor"" class=""org.example.camel.NullBeanPostProcessor""/>{code}
Where {{NullBeanPostProcessor}} looks like this:
{code:java}
public class NullBeanPostProcessor implements BeanPostProcessor {

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }
} {code}"
0,CAMEL-15670,Bug,Minor,"3.0.0.M4, 3.0.0.RC1, 3.0.0.RC2, 3.0.0.RC3, 3.0.0, 3.0.1, 3.1.0, 3.2.0, 3.3.0, 3.4.0, 3.4.1, 3.4.2, 3.4.3, 3.5.0, 3.4.4",,"

xsd

",Resolved,Not A Bug,None,Unassigned,Kristof Neirynck,0,2,2020-10-10 09:32:39+00:00,2020-10-12 08:21:32+00:00,"Something got lost in the xsd file between version 3.0.0-M3 and 3.0.0-M4.
The ""throttleDefinition"" should allow a ""tns:to"" child element.


ok https://camel.apache.org/schema/spring/camel-spring-2.25.2.xsd
ok https://camel.apache.org/schema/spring/camel-spring-3.0.0-M1.xsd
ok https://camel.apache.org/schema/spring/camel-spring-3.0.0-M2.xsd
ok https://camel.apache.org/schema/spring/camel-spring-3.0.0-M3.xsd
ok https://camel.apache.org/schema/spring/camel-spring.xsd


nok https://camel.apache.org/schema/spring/camel-spring-3.0.0-M4.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.0.0-RC1.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.0.0-RC2.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.0.0-RC3.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.0.0.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.0.1.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.1.0.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.2.0.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.3.0.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.4.0.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.4.1.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.4.2.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.4.3.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.4.4.xsd
nok https://camel.apache.org/schema/spring/camel-spring-3.5.0.xsd","davsclaus:1602456542:2020-10-12T06:49:02.948+0000:1602456542:2020-10-12T06:49:02.948+0000:No its correct, Camel 3 is reworking some parts of the EIPs since 2.x
crydust:1602461673:2020-10-12T08:14:33.082+0000:1602461673:2020-10-12T08:14:33.082+0000:In that case the documentation of ""throttle"" isn't up to date.

 

Copying the example code from the documentation at

[https://camel.apache.org/components/latest/eips/throttle-eip.html]

Yields this invalid document.
{code:java}
<routes xmlns=""http://camel.apache.org/schema/spring""
        xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
        xsi:schemaLocation=""http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.5.0.xsd"">
    <route>
        <from uri=""seda:a""/>
        <!-- throttle 3 messages per 10 sec -->
        <throttle timePeriodMillis=""10000"">
            <constant>3</constant>
            <to uri=""log:result""/>
            <to uri=""mock:result""/>
        </throttle>
    </route>
</routes>
{code}
 
davsclaus:1602462092:2020-10-12T08:21:32.514+0000:1602462092:2020-10-12T08:21:32.514+0000:Ah thanks, I am fixing the docs"
0,CAMEL-15669,Bug,Major,3.5.0,"3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Claus Ibsen,chillming,0,2,2020-10-10 01:54:04+00:00,2020-10-12 07:03:03+00:00,"module：
camel-cloud 3.5.0


stack：
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)
org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:107)
org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:85)
org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41)
org.apache.camel.component.resilience4j.ResilienceProcessor$CircuitBreakerTask.call(ResilienceProcessor.java:418)
org.apache.camel.component.resilience4j.ResilienceProcessor$CircuitBreakerTask.call(ResilienceProcessor.java:399)
io.github.resilience4j.circuitbreaker.CircuitBreaker.lambda$decorateCallable$3(CircuitBreaker.java:700)
io.github.resilience4j.circuitbreaker.CircuitBreaker$$Lambda$1027/242448823.call(Unknown Source)


Related codes：
1、org.apache.camel.component.ribbon.cloud.RibbonServiceLoadBalancer#process
when server is null，throw RejectedExecutionException：
throw new RejectedExecutionException(""No active services with name "" + serviceName);


2、org.apache.camel.impl.cloud.DefaultServiceCallProcessor#process
when catch Exception，we need “callback.done(true);” for CountDownLatch
 


test code:
RouteDefinition definition = from(""..."");


CircuitBreakerDefinition circuitBreakerDefinition = definition
        .circuitBreaker()
        .resilience4jConfiguration(resilience4j)......


erviceCallDefinition serviceCallDefinition = processorDefinition
        .serviceCall().name(""test-app/api/test/hello"");
//registry 
ZooKeeperServiceCallServiceDiscoveryConfiguration conf =
        new ZooKeeperServiceCallDiscoveryConfiguration(serviceCallDefinition)
                .nodes(""..."").basePath(""..."").connectionTimeout(""7000"").sessionTimeout(""60000"");
serviceCallDefinition.setServiceDiscoveryConfiguration(conf);
//end
serviceCallDefinition.end();",davsclaus:1602279076:2020-10-10T05:31:16.762+0000:1602279076:2020-10-10T05:31:16.762+0000:Ah yeah it needs a callback.done(true) after that set exception. You are welcome to provide a patch or a PR to fix this.
0,CAMEL-15668,Bug,Major,2.23.2,,"
None
",Resolved,Invalid,None,Unassigned,Luca Ferrari,0,2,2020-10-10 00:45:13+00:00,2020-10-10 05:33:18+00:00,"I'm calling an external system and trying to catch the http exception but can't start the route as I receive the following error:


 




Caused by: java.lang.ClassNotFoundException: org.apache.camel.common.http.HttpOperationFailedException



this is the relevant part of the route I'm executing and I've attached the pom.xml


 



<route id=""A4-A5-flow""> <from id=""commit-orders"" uri=""direct:a3-to-a4"" /> <setHeader headerName=""CamelHttpMethod""> <constant>POST</constant> </setHeader> <to uri=""http://localhost:8090/api/commitOrder?bridgeEndpoint=true"" /> <!-- exception handling http calls --> <onException> <exception>org.apache.camel.common.http.HttpOperationFailedException</exception> <redeliveryPolicy maximumRedeliveries=""3"" redeliveryDelay=""2000"" /> <handled> <constant>true</constant> </handled> </onException> <unmarshal> <custom ref=""my-reply"" /> </unmarshal> <to uri=""direct:a5-to-a6"" /> </route>




pom.xml


as you can see I included all possible libraries containing that class","davsclaus:1602279198:2020-10-10T05:33:18.725+0000:1602279198:2020-10-10T05:33:18.725+0000:You are using Red Hat Fuse, so you should contract Red Hat about customer support."
0,CAMEL-15667,Task,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Matej Melko,Matej Melko,0,1,2020-10-09 20:06:49+00:00,2020-10-10 05:29:55+00:00,Atlassian jira-rest-java-client-core brings older versions of jettison and httpclient that causes problems in camel-k (after upgrade to java-11) and potentially in camel quarkus.,
0,CAMEL-15666,Bug,Minor,None,None,"
None
",Resolved,Fixed,3.6.0,Jan Bednar,Jan Bednar,0,1,2020-10-09 17:30:09+00:00,2020-10-09 18:46:58+00:00,"String `className` argument in `PackageDataFormatMojo#doParseJavaClassSource` contains full name including generic types and because of that:



Mojo fails on windows build


java.nio.file.InvalidPathException: Illegal char <<> at index 65: org/apache/camel/dataformat/univocity/AbstractUniVocityDataFormat<TsvFormat,TsvWriterSettings,TsvWriter,TsvParserSettings,TsvParser,UniVocityTsvDataFormat>.java






Options from classes with generics are excluded on linux build - `Files.isRegularFile` returns false for invalid names in Linux.



I will fix this today, so it can be part of 3.6 release.",bedla:1602240418:2020-10-09T18:46:58.387+0000:1602240418:2020-10-09T18:46:58.387+0000:[dab61fe7e45a4002e7f88ec178244b30d7f8445f|https://github.com/apache/camel/commit/dab61fe7e45a4002e7f88ec178244b30d7f8445f]
0,CAMEL-15665,Bug,Major,2.25.2,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Manuel Shenavai,0,3,2020-10-09 12:44:59+00:00,2020-10-27 15:18:17+00:00,"Hi everyone,


 


we are using the Camel-onException error handling and found that the exception-handling is sometimes not executed in case of error. When StreamCaching is enabled in the route and an error happens during TypeConversion, the exception handling is not executed but the process just fails. I attached a scenario to reproduce the problem to this mail (ExceptionHandling.java).


 


Best regards,
Manuel","davsclaus:1602222132:2020-10-09T13:42:12.218+0000:1602222132:2020-10-09T13:42:12.218+0000:I had a look, so before I forget, then we need to consider what the stream caching should behave when the onException path is being routed. As it would essentially attempt to convert again. So it may need to turn this off in case of first error. Or silently let subsequent failures be ignored. To allow the onException routing to continue.
mash-sap:1603779192:2020-10-27T14:13:12.451+0000:1603779192:2020-10-27T14:13:12.451+0000:Hi Claus,

thanks for providing a fix. We need to consume this fix in our 2.x codeline. However, the fix contains 3.x coding:
exchange.adapt(ExtendedExchange.class).setRedeliveryExhausted(true);

Is it planned to also fix the problem in the 2.x codeline?

Thanks in advance &
Best regards,
Manuel
acosentino:1603779289:2020-10-27T14:14:49.300+0000:1603779289:2020-10-27T14:14:49.300+0000:No, it's not planned for 2.x.
mash-sap:1603783097:2020-10-27T15:18:17.482+0000:1603783097:2020-10-27T15:18:17.482+0000:Hi [~acosentino],

thanks for your reply. Do you know if there is a equivalent of the 3.x code that we could use in our 2.x codeline?
(exchange.adapt(ExtendedExchange.class).setRedeliveryExhausted(true))

 

Best regards,
Manuel"
0,CAMEL-15664,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-10-09 11:51:13+00:00,2020-10-12 10:37:41+00:00,"When an URI is computed out of a set of parameter with either the new URI endpoint assembler or the catalog helper, secret properties should be wrapped by RAW() so encoded data don't break URI encoding",
0,CAMEL-15663,Improvement,Major,3.4.4,None,"
None
",Resolved,Fixed,3.12.0,Andrea Cosentino,Gerald Kallas,0,1,2020-10-09 10:55:35+00:00,2021-07-16 05:23:03+00:00,"When the camel-json-validator throws an error occurs it shows only in log
 
""JSON validation error with 1 errors. Exchange[ID-700bc59e90f0-1601310667823-12-4]""
 
${exception.message} shows no details as well. The following
 
${exception.getErrors()}
 
shows all details what is wrong in the JSON structure.
 
For convenience it would be helpfull when the error message itself contains these details.",
0,CAMEL-15662,Bug,Minor,3.4.4,,"
None
",Resolved,Information Provided,None,Unassigned,Gerald Kallas,0,3,2020-10-09 10:45:40+00:00,2021-01-09 03:02:23+00:00,"feature:install camel-json-validator
 
on Karaf 4.2.9. It causes an error
 




java.lang.ArrayIndexOutOfBoundsException: Index 19 out of bounds for length 19
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:576)
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:494)
at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:483)
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:473)
at aQute.bnd.osgi.Analyzer.analyzeJar(Analyzer.java:2177)
at aQute.bnd.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:2083)
at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:138)
at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:616)
at org.ops4j.pax.swissbox.bnd.BndUtils.createBundle(BndUtils.java:161)
at org.ops4j.pax.url.wrap.internal.Connection.getInputStream(Connection.java:83)
at java.base/java.net.URL.openStream(URL.java:1140)
at org.apache.karaf.features.internal.download.impl.SimpleDownloadTask.download(SimpleDownloadTask.java:78)
at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:60)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
java.lang.ArrayIndexOutOfBoundsException: Index 19 out of bounds for length 19
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:576)
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:494)
at aQute.bnd.osgi.Clazz.parseClassFileWithCollector(Clazz.java:483)
at aQute.bnd.osgi.Clazz.parseClassFile(Clazz.java:473)
at aQute.bnd.osgi.Analyzer.analyzeJar(Analyzer.java:2177)
at aQute.bnd.osgi.Analyzer.analyzeBundleClasspath(Analyzer.java:2083)
at aQute.bnd.osgi.Analyzer.analyze(Analyzer.java:138)
at aQute.bnd.osgi.Analyzer.calcManifest(Analyzer.java:616)
at org.ops4j.pax.swissbox.bnd.BndUtils.createBundle(BndUtils.java:161)
at org.ops4j.pax.url.wrap.internal.Connection.getInputStream(Connection.java:83)
at java.base/java.net.URL.openStream(URL.java:1140)
at org.apache.karaf.features.internal.download.impl.SimpleDownloadTask.download(SimpleDownloadTask.java:78)
at org.apache.karaf.features.internal.download.impl.AbstractRetryableDownloadTask.run(AbstractRetryableDownloadTask.java:60)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)","davsclaus:1604360742:2020-11-03T07:45:42.894+0000:1604360742:2020-11-03T07:45:42.894+0000:dding feature url mvn:org.apache.camel.karaf/apache-camel/3.7.0-SNAPSHOT/xml/features
karaf@root()> feature:install camel
karaf@root()> feature:install camel-json-validator
java.lang.ArrayIndexOutOfBoundsException: Index 19 out of bounds for length 19
davsclaus:1604360872:2020-11-03T07:47:52.016+0000:1604360872:2020-11-03T07:47:52.016+0000:If you install the bundles in the feature manually then it works - its not a Camel bug but something in Karaf.
davsclaus:1604360954:2020-11-03T07:49:14.075+0000:1604360954:2020-11-03T07:49:14.075+0000:Its also only a WARN the bundle is install and working.

bob:1610132543:2021-01-09T03:02:23.246+0000:1610132543:2021-01-09T03:02:23.246+0000:Seeing the same issue with the camel-etcd component on camel 3.7.0.  Bundle appears to work fine in this case as well but causes some noise in the console.  Appears that the ops4j wrap protocol component may not handle Java 11 class parsing in some cases since it uses an older version of bndtools.  Related issue:  https://issues.apache.org/jira/browse/KARAF-6988"
0,CAMEL-15661,Improvement,Major,Future,3.7.0,"
None
",Resolved,Fixed,3.7.0,Denis Istomin,Denis Istomin,0,2,2020-10-08 13:44:15+00:00,2020-10-25 02:55:29+00:00,"Currently there are:



unit-tests
integration tests, that runs manually using real cloud azure services (need to specify `accountName`, `accessKey`)



Proposal:



Use Testcontainers and Azurite for integration tesing
Reuse integration tests codebase
Enable testcontainers integration tests by default
Do not remove possibilty to run integration tests on cloud azure services using different maven profile","DenisIstomin:1602136056:2020-10-08T13:47:36.697+0000:1602136056:2020-10-08T13:47:36.697+0000:[~acosentino], is it OK to run integration tests with testcontainers by default?
acosentino:1602199184:2020-10-09T07:19:44.052+0000:1602199184:2020-10-09T07:19:44.052+0000:Yes, it is."
0,CAMEL-15660,Task,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,2,2020-10-08 13:20:03+00:00,2020-10-13 09:17:53+00:00,"Noticed that in seda.json we have some boolean type with default values as ""true"" and others as true


""type"": ""boolean"", ""javaType"": ""boolean"", ""deprecated"": false, ""secret"": false, ""defaultValue"": ""false""


vs


 ""type"": ""boolean"", ""javaType"": ""boolean"", ""deprecated"": false, ""secret"": false, ""defaultValue"": false,","chardahe@redhat.com:1602143499:2020-10-08T15:51:39.803+0000:1602143499:2020-10-08T15:51:39.803+0000:Hi [~davsclaus], I'll work on this, Thanks
davsclaus:1602548475:2020-10-13T08:21:15.472+0000:1602548475:2020-10-13T08:21:15.472+0000:I took a little look and there are some other problems, so I am working on a fix as we want this for 3.6 release.
davsclaus:1602551873:2020-10-13T09:17:53.228+0000:1602551873:2020-10-13T09:17:53.228+0000:We had the same problem for number types"
0,CAMEL-15659,Improvement,Major,3.6.0,None,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-08 11:33:12+00:00,2020-10-08 15:58:42+00:00,"I mistakenly removed those manually added configurers on the languages as this is used by camel-main to configure them without reflection.


That's the only used place we use that. We dont source code generate configurer for them, so they are hand manitained.",
0,CAMEL-15658,Improvement,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.6.0,Zineb Bendhiba,Zineb Bendhiba,0,1,2020-10-08 09:18:22+00:00,2020-10-09 13:54:39+00:00,using test-containers,
0,CAMEL-15657,Task,Major,None,3.x,"
None
",Resolved,Not A Problem,3.x,Unassigned,Claus Ibsen,0,1,2020-10-08 09:12:01+00:00,2022-09-02 16:02:39+00:00,"jdk15 initiated the process of removing biased locking from the JVM as
per JEP 374 (https://openjdk.java.net/jeps/374). That release switched
the default setting from enabled to disabled. The plan is to see if any
users squeal and, if not, proceed to remove it in jdk16 or jdk17.","davsclaus:1602119623:2020-10-08T09:13:43.942+0000:1602119623:2020-10-08T09:13:43.942+0000:Lets look at whether we use any synchronized (lock) { } or synchronized methods that may be affected. First priority is around runtime routing of messages via the routing engine.

The bootstrap with initializating Camel is not a problem as there is a single thread doing this work.

Old collection classes like Vector or Hashtable is not in use. 
davsclaus:1602119783:2020-10-08T09:16:23.375+0000:1602119783:2020-10-08T09:16:23.375+0000:For fast performance tests we only have a set of jmh tests that tests specific pieces of camel like its type converter, simple language etc.
We could add a little bit bigger test that does some more extensive routing and let it be concurrent with seda/aggregator and whatnot.
And then run the test with with biased locking on or off (there should be a JVM switch for that)."
0,CAMEL-15656,Improvement,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Omar Al-Safi,Omar Al-Safi,0,2,2020-10-08 08:30:08+00:00,2020-10-13 12:19:08+00:00,"Currently, in camel azure storage blob, in order to download a blob, you will need to specify the blob name, however it will make also make sense to download all blobs within the container as similar to Amazon S3 component.",
0,CAMEL-15655,New Feature,Minor,None,3.10.0,"
None
",Resolved,Fixed,3.10.0,Omar Al-Safi,Omar Al-Safi,1,1,2020-10-08 08:19:16+00:00,2021-05-04 08:25:32+00:00,"A placeholder for potential camel-azure-cosmodb component, here is important info:



https://docs.microsoft.com/en-us/azure/cosmos-db/introduction
https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-cosmos",
0,CAMEL-15654,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-08 06:56:52+00:00,2020-10-08 09:19:21+00:00,"Especially the bean language with its bean/method options can be used during runtime and also for dynamic expressions.


And we pass on data from camel-api to their implementations via HashMap. But we can optimize this to a basic object[] but then we need to have fixed parameter ordering.",
0,CAMEL-15653,Improvement,Major,3.4.3,3.7.0,"
None
",Resolved,Fixed,3.7.0,Viral Gohel,Brad Harvey,0,2,2020-10-08 00:45:34+00:00,2020-12-06 17:23:52+00:00,"When there are multiple SJMS-Batch consumers in a camel context it is currently very difficult to work out which one some of the log messages apply to because many don't include the URI or queue name and happen outside the context of a route (so route MDC logging doesn't help).


Suggested improvements:



Thread names should include the destination name.  The standard jms component consumers already do this.
Most log messages (especially error messages) should include the destination name.



It may be appropriate to use the consumer URI without query parameters instead of the destination name - I'm not sure if there is a standard approach used by other components.


 


Examples of current log messages from a spring boot app:




2020-10-08 10:38:31.313 WARN ||| 12468 --- [Camel (camel-1) thread #21 - AsyncStartStopListener] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Error starting consumer after 1 attempts. Will try again in 5000 millis.. Caused by: [org.apache.qpid.jms.exceptions.JMSSecuritySaslException - Client failed to authenticate using SASL: PLAIN]


2020-10-07 14:11:44.351 INFO ||| 27720 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Shutdown signal received - rolling back batch
 



 


Example of current thread name from SJMS-Batch consumer: ""Camel (camel-1) thread #13 - SjmsBatchConsumer""


 


Queue name in AsyncStartStopListener might be helpful too - currently: ""Camel (camel-1) thread #6 - AsyncStartStopListener""


 


In contrast, the standard JMS component includes the queue name in the thread name and in error messages:




2020-10-08 10:38:35.245 WARN ||| 12468 --- [Camel (camel-1) thread #12 - JmsConsumer[myQueueName]] c.c.j.DefaultJmsMessageListenerContainer : Setup of JMS message listener invoker failed for destination 'myQueueName' - trying to recover. Cause: The transport is not running.","bradhgbst:1602108029:2020-10-08T06:00:29.783+0000:1602108029:2020-10-08T06:00:29.783+0000:[^sjmsbatchloggingpatch.txt] contains proposed changes.

The AsyncStartStopListener was using a shared executor service at the component level, so it couldn't be used as-is to give the threads names including the destination name.  It was only ever used by the consumer to submit a single task, so I have replaced this with creating a thread directly via executor service manager.

The other changes are adding the destination name to various log messages.  I didn't change debug/trace - I figure anyone enabling that level of detail could/should include the thread name in the logs.
bradhgbst:1603217890:2020-10-21T02:18:10.172+0000:1603217890:2020-10-21T02:18:10.172+0000:Hi [~vrlgohel], is it possible for this to be included in the next 3.4.x release, e.g. 3.4.5?

Thanks, Brad.
davsclaus:1607246632:2020-12-06T17:23:52.823+0000:1607246632:2020-12-06T17:23:52.823+0000:Thanks for the patch Brad"
0,CAMEL-15652,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-07 19:26:21+00:00,2020-10-08 14:07:55+00:00,"So we can avoid the bean lookup in registry for each exchange, but do eager init. If we have scope, then you can set it as scope=singleton|request|prototype.


For example in


            <setProperty name=""user"">
                <simple>${bean:myBean?method=getRandomUser}</simple>
            </setProperty>


Then we lookup the bean by name myBean for each exchange. If we have scope=singleton, we can do this eager, and also see if we can do method selection if possible - eg getRandomUser if there is only 1 method - then use that.",
0,CAMEL-15651,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Djordje Bajic,Djordje Bajic,0,1,2020-10-07 14:12:33+00:00,2020-10-08 04:49:52+00:00,I found some code that can be improved and i would like to refactor it a little.,
0,CAMEL-15650,Dependency upgrade,Major,None,3.12.0,"
None
",Resolved,Fixed,3.12.0,Viral Gohel,Claus Ibsen,0,2,2020-10-07 13:57:18+00:00,2021-07-05 07:20:56+00:00,"The camel-spark is using older version of spark. We should upgrade to 3.x and this also uses hadoop 3.x so we can get rid of the last hadoop 2.x dependency.


There is no apache karaf problem as spark and hadoop are not there as features (dont work in osgi anyway)","ppalaga:1602749518:2020-10-15T16:11:58.778+0000:1602749518:2020-10-15T16:11:58.778+0000:+1 for upgrading. 

Spark 2.x does not seem to support Java 11. I am getting errors similar to https://stackoverflow.com/questions/53583199/spark-error-unsupported-class-file-major-version
ppalaga:1602763163:2020-10-15T19:59:23.375+0000:1602763163:2020-10-15T19:59:23.375+0000:See also CAMEL-15696
ppalaga:1603681856:2020-10-26T11:10:56.841+0000:1603681856:2020-10-26T11:10:56.841+0000:Blocks https://github.com/apache/camel-quarkus/issues/1955"
0,CAMEL-15649,Test,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Alex Park,0,1,2020-10-07 09:01:23+00:00,2020-10-07 10:59:30+00:00,"Build failed in Window machine and OpenJDK 1.8




Caused by: org.jasypt.exceptions.EncryptionInitializationException: java.security.NoSuchAlgorithmException: NativePRNG SecureRandom not availableCaused by: org.jasypt.exceptions.EncryptionInitializationException: java.security.NoSuchAlgorithmException: NativePRNG SecureRandom not available at org.jasypt.iv.RandomIvGenerator.<init>(RandomIvGenerator.java:74) at org.apache.camel.component.jasypt.springboot.EncryptedPropertiesCustomConfigurationBeansTest$TestConfiguration.environmentVariablesConfiguration(EncryptedPropertiesCustomConfigurationBeansTest.java:70) at org.apache.camel.component.jasypt.springboot.EncryptedPropertiesCustomConfigurationBeansTest$TestConfiguration$$EnhancerBySpringCGLIB$$20dd0596.CGLIB$environmentVariablesConfiguration$0(<generated>) at org.apache.camel.component.jasypt.springboot.EncryptedPropertiesCustomConfigurationBeansTest$TestConfiguration$$EnhancerBySpringCGLIB$$20dd0596$$FastClassBySpringCGLIB$$4c453f93.invoke(<generated>) at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331) at org.apache.camel.component.jasypt.springboot.EncryptedPropertiesCustomConfigurationBeansTest$TestConfiguration$$EnhancerBySpringCGLIB$$20dd0596.environmentVariablesConfiguration(<generated>) at jdk.internal.reflect.GeneratedMethodAccessor75.invoke(Unknown Source) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:564) at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ... 67 moreCaused by: java.security.NoSuchAlgorithmException: NativePRNG SecureRandom not available at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:159) at java.base/java.security.SecureRandom.getInstance(SecureRandom.java:381) at org.jasypt.iv.RandomIvGenerator.<init>(RandomIvGenerator.java:72) ... 77 more","axsprk:1602035106:2020-10-07T09:45:06.641+0000:1602035106:2020-10-07T09:45:06.641+0000:Test case successful with ""Windows-PRNG"" Algorithm in Windows.

So, code change made and sent PR."
0,CAMEL-15648,Improvement,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,1,2020-10-07 08:36:29+00:00,2020-10-07 12:34:31+00:00,"Small issue noticed when integrating camel-crypto with camel-quarkus:


https://github.com/apache/camel-quarkus/issues/1881",
0,CAMEL-15647,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-07 07:35:33+00:00,2020-10-12 16:19:01+00:00,We need to set the system property accordingly,
0,CAMEL-15616,Dependency upgrade,Minor,None,3.20.0,"
None
",Resolved,Fixed,3.20.0,Grzegorz Grzybek,Claus Ibsen,0,4,2020-10-01 19:17:54+00:00,2022-10-20 07:44:41+00:00,We are using 9.9.x but there is a 10.x release out,"acosentino:1601937730:2020-10-06T06:42:10.746+0000:1601937730:2020-10-06T06:42:10.746+0000:Please look at the Karaf feature too [~ramu11]
davsclaus:1602215115:2020-10-09T11:45:15.032+0000:1602215153:2020-10-09T11:45:53.850+0000:Had to revert this as this causes camel-xj to fail (it has a number of test failures). It seems now that it genearates wrong output when it does xml to json transformation.

https://github.com/apache/camel/commit/7738cc3e4541a8fd8dfd5a99b4f794bc5ffa1416
ggrzybek:1666158142:2022-10-19T13:42:22.931+0000:1666158142:2022-10-19T13:42:22.931+0000:PRs:
* https://github.com/apache/camel/pull/8580
* https://github.com/apache/camel-karaf/pull/201
* https://github.com/apache/camel-spring-boot/pull/649"
0,CAMEL-15615,Bug,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-01 18:39:31+00:00,2020-10-12 16:19:22+00:00,"If you try to run a simple route like this one:




from(""infinispan://mycache?hosts=localhost&sync=false&eventTypes=CACHE_ENTRY_CREATED"")     from(""infinispan://mycache?hosts=localhost&sync=false&eventTypes=CACHE_ENTRY_CREATED"")     .log(""Header ${header.CamelInfinispanEventType}"");




This will fail with the following WARN




2020-10-01 20:39:06,042 [-async-pool-1-2] WARN  HeaderDecoder                  - ISPN004039: Unable to complete reading event from server 127.0.0.1/127.0.0.1:112222020-10-01 20:39:06,042 [-async-pool-1-2] WARN  HeaderDecoder                  - ISPN004039: Unable to complete reading event from server 127.0.0.1/127.0.0.1:11222org.infinispan.client.hotrod.exceptions.HotRodClientException: ISPN004034: Unable to unmarshall bytes 636F6170 at org.infinispan.client.hotrod.marshall.MarshallerUtil.bytes2obj(MarshallerUtil.java:72) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.DataFormat.keyToObj(DataFormat.java:103) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.protocol.Codec21.readCacheEvent(Codec21.java:78) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.transport.netty.HeaderDecoder.decode(HeaderDecoder.java:156) [infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.impl.transport.netty.HintedReplayingDecoder.callDecode(HintedReplayingDecoder.java:94) [infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276) [netty-codec-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286) [netty-handler-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) [netty-transport-4.1.51.Final.jar:4.1.51.Final] at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:792) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378) [netty-transport-native-epoll-4.1.51.Final-linux-x86_64.jar:4.1.51.Final] at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) [netty-common-4.1.51.Final.jar:4.1.51.Final] at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-common-4.1.51.Final.jar:4.1.51.Final] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_252] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_252] at java.lang.Thread.run(Thread.java:748) [?:1.8.0_252]Caused by: java.lang.IllegalStateException: Unexpected tag : 99 (Field number : 12, Wire type : 3) at org.infinispan.protostream.WrappedMessage.readMessage(WrappedMessage.java:364) ~[protostream-4.3.3.Final.jar:?] at org.infinispan.protostream.ProtobufUtil.fromWrappedByteArray(ProtobufUtil.java:161) ~[protostream-4.3.3.Final.jar:?] at org.infinispan.commons.marshall.ProtoStreamMarshaller.objectFromByteBuffer(ProtoStreamMarshaller.java:45) ~[infinispan-commons-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.commons.marshall.AbstractMarshaller.objectFromByteBuffer(AbstractMarshaller.java:82) ~[infinispan-commons-11.0.3.Final.jar:11.0.3.Final] at org.infinispan.client.hotrod.marshall.MarshallerUtil.bytes2obj(MarshallerUtil.java:56) ~[infinispan-client-hotrod-11.0.3.Final.jar:11.0.3.Final] ... 24 more","acosentino:1602210485:2020-10-09T10:28:05.189+0000:1602210485:2020-10-09T10:28:05.189+0000:This turns out to be related to the encoding of the cache. It's important to define the encoding on the cache configuration, otherwise we'll need this Warning. We need to add some documentation about this. So I'll leave this open.
acosentino:1602490757:2020-10-12T16:19:17.067+0000:1602490757:2020-10-12T16:19:17.067+0000:Docs updated with a note."
0,CAMEL-15614,Test,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Alex Dettinger,Alex Dettinger,0,1,2020-10-01 16:40:22+00:00,2020-10-01 18:01:38+00:00,No Desc,
0,CAMEL-15613,Bug,Minor,3.5.0,,"
None
",Resolved,Not A Bug,None,Unassigned,Sreejesh,0,5,2020-10-01 16:03:31+00:00,2021-05-01 16:38:18+00:00,"Noticed a different behaviour of Camel timer with 3.5.0 when compared with Camel version 2.24.3. In 3.5.0. Camel timer fires events as if it is  fixedRate is true (even if I explicitly make it false in the Camel URL).


 


The same code behaves differently in Camel 2.24.3.


 


I am attaching sample code for 3.5.0 version.","chardahe@redhat.com:1601543461:2020-10-01T17:11:01.148+0000:1601543461:2020-10-01T17:11:01.148+0000:Thanks [~sreejeshraj] for reporting this, let me look at the reproducer
bedla:1601544277:2020-10-01T17:24:37.838+0000:1601544277:2020-10-01T17:24:37.838+0000:Timer component is working correctly. You have used delay EIP, which is non blocking by default since Camel 3.
https://camel.apache.org/components/latest/eips/delay-eip.html
https://github.com/apache/camel/commit/d17a41fb6182e2991c31cb256bc093bace6b5e26

Just replace
{code:java}
.delay(60000)
{code}
with
{code:java}
.delay(60000).syncDelayed()
{code}
and you will see the timer is actually correctly blocked.

sreejeshraj:1601586819:2020-10-02T05:13:39.821+0000:1601586819:2020-10-02T05:13:39.821+0000:Thank you so much! Working as expected. Didn't know that the behavior changed in 3.
jeremyross:1619781956:2021-04-30T19:25:56.559+0000:1619781956:2021-04-30T19:25:56.559+0000:I'm having a similar issue with Timer. Many things are asynchronous now, which appears to make it difficult to achieve a fixed rate timer. E.g., if a route makes a salesforce query, when the query result is returned, the remainder of the route will run in a different thread. The original timer thread frees up, and the timer fires again before the original route completes.
jeremyross:1619782577:2021-04-30T19:36:17.437+0000:1619782577:2021-04-30T19:36:17.437+0000:It looks like synchronous=true may work.
davsclaus:1619825875:2021-05-01T07:37:55.647+0000:1619825875:2021-05-01T07:37:55.647+0000:Thats how the timer works, what you are looking at is max 1 inflight exchange for that timer route - that is not the same as timer functionality and fixedRate true|false
jeremyross:1619856872:2021-05-01T16:14:32.214+0000:1619858298:2021-05-01T16:38:18.564+0000:[~davsclaus] 
bq. In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. [0]

I no longer get this behavior unless I use synchronous=true. In prior versions, the delay period began after the previous execution completed. 

Edit: This could be because I used to use the salesforce synchronous=true option. More evidence that any async operation on a route could cause the timer thread to return immediately, thus starting the delay period.

[0] [https://docs.oracle.com/javase/7/docs/api/java/util/Timer.html#schedule(java.util.TimerTask,%20java.util.Date,%20long)|https://docs.oracle.com/javase/7/docs/api/java/util/Timer.html#schedule(java.util.TimerTask,%20java.util.Date,%20long)]"
0,CAMEL-15612,Bug,Major,None,None,"
None
",Closed,Not A Bug,None,Unassigned,Shmakov Alexey,0,3,2020-10-01 14:40:43+00:00,2020-10-02 04:53:51+00:00,"Hello, we use shade-plugin for build and deploy services to k8s.


After starting the service builded by the maven-shade-plugin, it is impossible to find the standart converter from String to DOM Document. At the same time, when launched through maven-camel-plugin, everything works fine. Example project in attachment.


Example route:




from(""timer:foo?period=1000"")
           .setBody(constant(""<root>simple xml</root>""))
          .process(x->{  
               Document doc = x.getMessage().getBody(Document.class);                          
               if (doc == null) x.setProperty(""MSG"", ""impossible converted String to DOM"");  
               else x.setProperty(""MSG"", ""String to DOM converted"");          
          })
         .log(""${exchangeProperty.MSG}"");




 


Log out by camel-plugin: String to DOM converted


Log out by shade-plugin: impossible converted String to DOM","davsclaus:1601536010:2020-10-01T15:06:50.432+0000:1601536010:2020-10-01T15:06:50.432+0000:There is a FAQ about uber JAR and what to do with shading
davsclaus:1601536679:2020-10-01T15:17:59.287+0000:1601536679:2020-10-01T15:17:59.287+0000:FAQ is here
https://camel.apache.org/manual/latest/faq/how-do-i-use-a-big-uber-jar.html
bedla:1601540320:2020-10-01T16:18:40.609+0000:1601540320:2020-10-01T16:18:40.609+0000:And here https://camel.apache.org/manual/latest/faq/how-to-create-executable-jar-camel-main.html
shmakovaa:1601585598:2020-10-02T04:53:18.578+0000:1601585598:2020-10-02T04:53:18.578+0000:thanks"
0,CAMEL-15611,Improvement,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Aurélien Pupier,0,3,2020-10-01 14:29:43+00:00,2020-10-13 09:27:36+00:00,"with this kind of xml route:



<camel:camelContext id=""camel"" xmlns:camel=""http://camel.apache.org/schema/spring""> 
   <camel:route id=""a route""> 
     <camel:from uri=""direct:cafe""/>
       <camel:to uri=""direct:drink""/> 
    </camel:route>
</camel:camelContext>




the XmlRouteParser.parseXmlRouteTree is throwing an NPE due to the combination of CAMEL-15610 and that there is no support of prefix namespaces.


With CAMEL-15509 fixed, it will return an empty list.


It is expected to have 2 elements in the list, one for the from and one for from","chardahe@redhat.com:1601546767:2020-10-01T18:06:07.775+0000:1601546767:2020-10-01T18:06:07.775+0000:Thanks [~apupier] for reporting it, I'll work into this
apupier:1602548144:2020-10-13T08:15:44.543+0000:1602548144:2020-10-13T08:15:44.543+0000:[~chardahe@redhat.com] Any news on this improvement? There was a call for cutting the 3.6 release https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Last.20minute.20for.20Camel.203.2E6/near/212820278
davsclaus:1602552456:2020-10-13T09:27:36.614+0000:1602552456:2020-10-13T09:27:36.614+0000:Okay as we are cutting 3.6 then I fixed this"
0,CAMEL-15610,Bug,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Aurélien Pupier,0,1,2020-10-01 13:40:02+00:00,2020-10-02 05:09:41+00:00,"java.lang.NullPointerException
	at org.apache.camel.parser.helper.CamelXmlTreeParserHelper.parseCamelRouteTree(CamelXmlTreeParserHelper.java:47)
	at org.apache.camel.parser.XmlRouteParser.parseXmlRouteTree(XmlRouteParser.java:99)
	at com.github.cameltooling.lsp.internal.documentsymbol.DocumentSymbolXMLProcessor.getSymbolInformations(DocumentSymbolXMLProcessor.java:56)




minimal test to reproduce:



	@Test
	void minimalTestShowingNPE() throws IOException {
		String textTotest =
				""<camelContext id=\""camel\"" xmlns=\""http://camel.apache.org/schema/spring\"">\r\n"" + 
				""\r\n"" + 
				""    <route id=\""a route\"">\r\n"" + 
				""    </route>\r\n"" + 
				""\r\n""
				+ ""</camelContext>\n"";
		File camelFile = File.createTempFile(""camelFile"", "".xml"");
		Files.write(textTotest.getBytes(), camelFile);
		XmlRouteParser.parseXmlRouteTree(new ByteArrayInputStream(textTotest.getBytes()), """", camelFile.getAbsolutePath());
	}",apupier:1601530846:2020-10-01T13:40:46.084+0000:1601530846:2020-10-01T13:40:46.084+0000:looking to provide a PR
0,CAMEL-15609,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-10-01 09:54:14+00:00,2020-10-01 17:16:32+00:00,"It makes sense, instead of having only the header.",
0,CAMEL-15608,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,1,2020-10-01 08:17:36+00:00,2020-10-02 05:10:10+00:00,"Currently the platform-http-vertx component does not handle multipart uploads.


We should add attachment support like the other camel HTTP component consumers have.",
0,CAMEL-15607,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Claus Ibsen,0,1,2020-10-01 07:40:34+00:00,2020-10-02 15:12:02+00:00,No Desc,"davsclaus:1601509316:2020-10-01T07:41:56.869+0000:1601509316:2020-10-01T07:41:56.869+0000:This code should not only be done once during initial resolve

            // as first iteration, check if there is a language instance for the given name
            // bound to the registry
            answer = ResolverHelper.lookupLanguageInRegistryWithFallback(getCamelContextReference(), language);
            if (answer != null) {
                Language old = languages.put(language, answer);
                // if the language has already been loaded, thus it is already registered
                // in the local language cache, we can return it as it has already been
                // initialized and configured
                if (old == answer) {
                    return answer;
                }


We should not lookup in registry each time. A language is not a prototype scoped resource. Its some old cruft from spring xml <bean> for custom languages where you can define it as prototype. But we dont want this kind of weird feature."
0,CAMEL-15606,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-01 07:30:17+00:00,2020-10-02 17:08:33+00:00,We can optimize the simple language parser for the bean function to resolve the language once during parsing - but this requires to propagate the camel context so it can resolve the language during parsing,davsclaus:1601606494:2020-10-02T10:41:34.137+0000:1601629700:2020-10-02T17:08:20.426+0000:There are potential a few other parts in SimpleFunctionExpression we can now eager create expressions instead of when exchange is evaluated. *DONE*
0,CAMEL-15605,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-10-01 07:13:27+00:00,2020-10-02 08:50:35+00:00,"Some of the languages can be configured with various options like bean/xtokenizer/xpath etc, however this makes those languages non singleton, which hampers performance as the language is resolved for each message which then is a bottleneck.


Instead we should introduce a createExpression api that takes var args as parameters so they can be provided on-demand and the language can be singleton.",davsclaus:1601548749:2020-10-01T18:39:09.288+0000:1601555742:2020-10-01T20:35:42.898+0000:Last language to fix is xquery. *DONE*
0,CAMEL-15604,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Jan Bednar,Jan Bednar,0,1,2020-09-30 19:18:36+00:00,2020-10-04 17:17:49+00:00,"MongoDB 4.3.1 added support for allowDiskUse flag with find queries.
https://jira.mongodb.org/browse/SERVER-43683
We currently set that flag only for for aggregation operations.


Reported on mailing list
http://camel.465427.n5.nabble.com/Camel-Mongodb-sorting-with-allowDiskUse-not-working-tc5886534.html",bedla:1601803069:2020-10-04T17:17:49.281+0000:1601803069:2020-10-04T17:17:49.281+0000:[af7e383e9fc1d25ce9665f74d33672cc5b507952|https://github.com/apache/camel/commit/af7e383e9fc1d25ce9665f74d33672cc5b507952]
0,CAMEL-15603,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-09-30 17:18:17+00:00,2020-10-12 16:19:34+00:00,"Infinispan 11 is secured by default https://infinispan.org/blog/2020/06/15/infinispan-11/


As of today the only way we have to add security credentials is through using a Hot Rod Client placed in registry. 


We need to make these configurations explicit.",
0,CAMEL-15602,Bug,Major,"3.5.0, 3.4.4","3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Claus Ibsen,Claus Ibsen,0,2,2020-09-30 16:16:43+00:00,2020-09-30 17:04:02+00:00,"camel.beans.mongo: '#class:com.mongodb.client.MongoClients#create(""mongodb://mongoadmin:password@mongodb.mongodb:27017"")'


And if we want to use ENV variables for username and password then its currently not possible with


""mongodb://env:XXX:env:YYY@mongodb.mongodb:27017""","davsclaus:1601453852:2020-09-30T16:17:32.649+0000:1601453852:2020-09-30T16:17:32.649+0000:Or if you do

username=mongoadmin
password=mongoadmin
mongoServer=mongodb.mongodb
mongoServerPort=27017
connectionBeanDef=#class:com.mongodb.client.MongoClients#create(""mongodb://{{username}}:{{password}}@{{mongoServer}}:{{mongoServerport}}"")"
0,CAMEL-15601,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.6.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-09-30 14:48:05+00:00,2020-09-30 15:05:59+00:00,No Desc,
0,CAMEL-15600,Improvement,Major,None,"3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Luca Burgazzoli,Luca Burgazzoli,0,1,2020-09-30 13:32:57+00:00,2020-10-01 12:23:20+00:00,Reported against camel-k: https://github.com/apache/camel-k-runtime/issues/513,
0,CAMEL-15599,New Feature,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,4,2020-09-30 11:49:22+00:00,2021-12-15 11:54:13+00:00,"So you can integrate with external schema registry Apicurio
https://www.apicur.io/registry/","davsclaus:1601437801:2020-09-30T11:50:01.330+0000:1601437801:2020-09-30T11:50:01.330+0000:See this example
https://github.com/Apicurio/apicurio-registry-demo/blob/master/src/main/java/io/apicurio/registry/demo/simple/avro/SimpleAvroConsumerApp.java
davsclaus:1601440066:2020-09-30T12:27:46.489+0000:1601440066:2020-09-30T12:27:46.489+0000:The apicurio options will be put in a single class and documented
https://github.com/Apicurio/apicurio-registry/issues/886
davsclaus:1602110813:2020-10-08T06:46:53.434+0000:1602110813:2020-10-08T06:46:53.434+0000:https://github.com/Apicurio/apicurio-registry/blob/2.0.x/utils/serde/src/main/java/io/apicurio/registry/utils/serde/SerdeConfig.java
omarsmak:1620264168:2021-05-06T09:22:48.090+0000:1620264168:2021-05-06T09:22:48.090+0000:I don't know if this is needed, camel-kafka as if today, has `additionalProperties` option that serves these kind of purposes, to inject extra options that are not part of the Kafka Consumer/Producer configs and thus should work for Apicurio as well.
orpiske:1639540453:2021-12-15T11:54:13.680+0000:1639540453:2021-12-15T11:54:13.680+0000:I am cleaning up a bit of the camel-kafka tickets. This one seems to be resolved already, so I am marking it as such. If you believe this is incorrect, just reopen and let me know, please."
0,CAMEL-15598,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-30 11:22:43+00:00,2020-09-30 11:27:51+00:00,"There is some old cruft code at


                try {
                    // doesn't exist in old version of Kafka client so detect
                    // and only call the method if
                    // the field/config actually exists
                    Field f = ProducerConfig.class.getDeclaredField(""PARTITIONER_CLASS_CONFIG"");
                    if (f != null) 

{
                        loadParitionerClass(resolver, props);
                    }

                } catch (NoSuchFieldException e) 

{
                    // ignore
                } catch (SecurityException e) {
                    // ignore
                }",
0,CAMEL-15597,Improvement,Minor,None,,"
None
",Open,Unresolved,None,Unassigned,Luca Burgazzoli,0,1,2020-09-30 05:25:29+00:00,2020-09-30 15:07:55+00:00,As today we use CXF behind the scenes but we can explore a replacement with a modern reactive web client such as Vert.x HTTP,
0,CAMEL-15596,Bug,Minor,"2.24.2, 2.25.2",2.25.3,"
None
",Resolved,Fixed,2.25.3,Claus Ibsen,Xilai Dai,0,3,2020-09-30 02:03:05+00:00,2020-12-19 14:11:13+00:00,"Start karaf 4.2.9 OSGi container, execute:


karaf@root()> feature:repo-add camel 2.25.2
karaf@root()> feature:install camel-jacksonxml




Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-jacksonxml; type=karaf.feature; version=""[2.25.2,2.25.2]""; filter:=""(&(osgi.identity=camel-jacksonxml)(type=karaf.feature)(version>=2.25.2)(version<=2.25.2))"" [caused by: Unable to resolve camel-jacksonxml/2.25.2: missing requirement [camel-jacksonxml/2.25.2] osgi.identity; osgi.identity=org.apache.camel.camel-jacksonxml; type=osgi.bundle; version=""[2.25.2,2.25.2]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jacksonxml/2.25.2: missing requirement [org.apache.camel.camel-jacksonxml/2.25.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.dataformat.xml)(version>=2.3.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.dataformat.jackson-dataformat-xml/2.9.10: missing requirement [com.fasterxml.jackson.dataformat.jackson-dataformat-xml/2.9.10] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.codehaus.stax2)(version>=4.2.0)(!(version>=5.0.0)))""]]]","ramu11:1601753649:2020-10-04T03:34:09.429+0000:1601753649:2020-10-04T03:34:09.429+0000:[~xldai]  
2.24.2, 2.25.2 is very old.  Please try with camel 3.5
xldai:1602270083:2020-10-10T03:01:23.416+0000:1602270083:2020-10-10T03:01:23.416+0000:Yes, for sure the camel-jacksonxml feature works on camel 3.x as the stax2 api is switched to the 4.x there.
But some of the users/customers are still on the Camel 2.25.x or on the way to migrate to Camel 3, even though the EOL of Camel 2 is next year.
If there is a plan for 2.25.3 release, it would be good to be fixed it on the camel-2.25.x branch.
davsclaus:1602279255:2020-10-10T05:34:15.885+0000:1602279255:2020-10-10T05:34:15.885+0000:Can you try with karaf 4.2.1, as that is the version camel 2.25.x was tested against. Just to see if it works on older karaf version and its something in karaf change that is causing a problem like this.
xldai:1602285493:2020-10-10T07:18:13.510+0000:1602285493:2020-10-10T07:18:13.510+0000:[~davsclaus], the same Error on karaf 4.2.1.
After the jackson was switched to 2.9.10, it requires stax2 api 4.x, that's the problem.
davsclaus:1608188763:2020-12-17T15:06:03.862+0000:1608188763:2020-12-17T15:06:03.862+0000:You can manually try to install a newer stax2 version in the karaf shell, and then install that camel feature afterwards"
0,CAMEL-15595,New Feature,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Luca Ferrari,0,1,2020-09-29 18:19:25+00:00,2022-09-02 15:59:49+00:00,"at the moment simple calculations with maths operators like:



addition
multiplication
division
subtraction
modulus



are not supported in simple language. It is true that you could use groovy or javascript, but given simple syntax overall prevalence in camel it would make it easier to support this directly.",
0,CAMEL-15594,Task,Major,"3.5.0, 3.4.4","3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Freeman Yue Fang,Freeman Yue Fang,0,1,2020-09-29 16:12:18+00:00,2020-09-29 16:14:10+00:00,No Desc,
0,CAMEL-15593,Bug,Minor,3.5.0,,"
None
",Resolved,Invalid,None,Unassigned,Borodina Valery,0,2,2020-09-29 13:25:55+00:00,2020-09-29 13:43:44+00:00,"I am used camel-cxf(3.5.0) and hibernate in karaf.


camel-cxf 3.5.0 - > cxf 3.4.0 -> woodstox 6.2.1 -> stax2 API 4.2.1


hubernate -> woodstox 4.4.1 -> stax2 API 3.1.4


When I try get SessionFactory I get org/codehaus/stax2/ri/EmptyIterator.getInstance()Lorg/codehaus/stax2/ri/EmptyIterator; (loaded from jar:bundle://327.0:0/Unable to render embedded object: File (bundle://330.0:0/) not found./ by woodstox-core-asl [330]).","acosentino:1601357432:2020-09-29T13:30:32.232+0000:1601357432:2020-09-29T13:30:32.232+0000:Please use a descriptive title.

 
valery1811:1601358075:2020-09-29T13:41:15.556+0000:1601358075:2020-09-29T13:41:15.556+0000:Before version 3.4 all work, but cxf update to Woodstox 6.2.x

(https://issues.apache.org/jira/browse/CXF-8129)
acosentino:1601358224:2020-09-29T13:43:44.761+0000:1601358224:2020-09-29T13:43:44.761+0000:Use the 3.4.4 release which it's an LTS, for the moment. 3.5.0 is a development release and non LTS."
0,CAMEL-15592,Task,Minor,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Sebb,0,2,2020-09-29 10:48:31+00:00,2020-12-03 14:36:19+00:00,"The links for 3.3.0 are all broken; either remove from the download page or change the links to point to the archive server.


https://camel.apache.org/download/","zregvart:1604383228:2020-11-03T14:00:28.961+0000:1604383228:2020-11-03T14:00:28.961+0000:We were asked to remove older releases from distribution site. Currently there are only a [couple of release archives|https://dist.apache.org/repos/dist/release/camel/apache-camel/] present.

For sources we could point to GitHub releases, those won't be signed though. We can't point to any binary releases, as they are removed from distribution site.

Removal from distribution site happens manually, usually when we release newer versions, the website builds a list of releases from JIRA, so those two events are not connected.

We can't manually remove certain releases from the website as those pages are generated automatically from JIRA data.

We would need more metadata or more automation around this to have the distribution and the releases pages synced.
sebb:1604390135:2020-11-03T15:55:35.212+0000:1604390135:2020-11-03T15:55:35.212+0000:Download pages must not link to non-approved code.

However it looks like the broken links have been removed.
zregvart:1604391171:2020-11-03T16:12:51.390+0000:1604391171:2020-11-03T16:12:51.390+0000:[~sebb] not sure how to do that, as stated above, the two events are not linked. Data for the website comes from JIRA and the removal from distribution can happen independently of that. I'm more concerned that users can't access signed source/binaries for older versions that having a broken link on the downloads.
zregvart:1604391585:2020-11-03T16:19:45.877+0000:1604391585:2020-11-03T16:19:45.877+0000:I think this needs to be discussed on the dev mailing list. In JIRA, I have learned there is a way to [archive releases](https://confluence.atlassian.com/adminjiraserver071/managing-versions-802592484.html#Managingversions-archiveArchiveaversion), that might be a way to do this.
zregvart:1604392206:2020-11-03T16:30:06.808+0000:1604392206:2020-11-03T16:30:06.808+0000:Actually, I'm wrong on this, those pages are driven by [release notes|https://github.com/apache/camel-website/tree/master/content/releases]. We can delete ones that are no longer available for download.
zregvart:1606701605:2020-11-30T10:00:05.605+0000:1606701605:2020-11-30T10:00:05.605+0000:Not sure if this changed at ASF, I don't know what was served if a release wasn't available, right now it seems to offer a link to the release archives. I would not call that broken. Not sure if there is work to be done here. Offering the link and even if that link leads to the archive instead of the mirror allows folk to download the release.
zregvart:1606701641:2020-11-30T10:00:41.552+0000:1606701641:2020-11-30T10:00:41.552+0000:[~sebb] please reopen if you think we need to do anything here.
sebb:1606703512:2020-11-30T10:31:52.866+0000:1606703512:2020-11-30T10:31:52.866+0000:The links for 3.5.0 are broken now.
zregvart:1606706655:2020-11-30T11:24:15.922+0000:1606706655:2020-11-30T11:24:15.922+0000:[~sebb] to me this looks like an issue that needs to be filed at INFRA, we're using the {{dyn/closer.lua}} and it isn't offering archived release for 3.5.0. That is, this works:

{code}
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/3.5.0/apache-camel-3.5.0.zip
{code}

This doesn't:

{code}
http://www.apache.org/dyn/closer.lua?filename=camel/apache-camel/3.5.0/apache-camel-3.5.0.zip&action=download
{code}

We can change the URLs on the download page from:

{code}
http://www.apache.org/dyn/closer.lua?filename=camel/apache-camel/3.5.0/apache-camel-3.5.0.zip&action=download
{code}

to:

{code}
http://www.apache.org/dyn/closer.lua/camel/apache-camel/3.5.0/apache-camel-3.5.0.zip
{code}

Which seems to work, but that would not offer direct download. [~sebb] what option would you like to peruse?
sebb:1606708509:2020-11-30T11:55:09.345+0000:1606708509:2020-11-30T11:55:09.345+0000:The problem is that 3.5.0 is *not on the mirrors*, see:

https://downloads.apache.org/camel/apache-camel/

The following link only *seems* to work:

http://www.apache.org/dyn/closer.cgi/camel/apache-camel/3.5.0/apache-camel-3.5.0.zip

Read it carefully and you will see that it says:

""The requested file or directory is not on the mirrors.""

Instead, it offers a download from the archives.
sebb:1606708704:2020-11-30T11:58:24.002+0000:1606708704:2020-11-30T11:58:24.002+0000:Note that the links for the sigs and hashes for 3.5.0 are broken for the same reason - the files are missing.
zregvart:1606710875:2020-11-30T12:34:35.365+0000:1606710875:2020-11-30T12:34:35.365+0000:This is direct consequence of issues like CAMEL-15250, CAMEL-15799, CAMEL-15800, CAMEL-7013, CAMEL-8889 and CAMEL-9563. [~sebb] you created those issues, I'm having a really difficult time understanding what is required from us.

I offered one solution to point to the URLs like http://www.apache.org/dyn/closer.lua/camel/apache-camel/3.5.0/apache-camel-3.5.0.zip, and if it wasn't clear would include all download URLs, I've also noted the consequence that direct download links would not be possible then. Can you comment on that option?
sebb:1606724460:2020-11-30T16:21:00.314+0000:1606724504:2020-11-30T16:21:44.608+0000:I'll try again:

The download page links to 3.5.0

However *the release is not present on the mirrors*, which is why the URLs don't work.

c.f.
 http://www.apache.org/dyn/closer.lua/camel/apache-camel/3.5.0/apache-camel-3.5.0.zip
and
 http://www.apache.org/dyn/closer.lua/camel/apache-camel/3.6.0/apache-camel-3.6.0.zip

Since 3.5.0 was released fairly recently, I assume it is still current, and should therefore be on the download page.

It looks like someone may have incorrectly deleted the 3.5.0 release files:

---
$ svn log -v https://dist.apache.org/repos/dist/release/camel/apache-camel/ -l 1
r42292 | davsclaus | 2020-11-04 06:10:37 +0000 (Wed, 04 Nov 2020) | 3 lines
Changed paths:
   D /release/camel/apache-camel/3.5.0

Deleting old releases
---

If you restore the 3.5.0 directory, the problems should go away.

davsclaus:1606734104:2020-11-30T19:01:44.060+0000:1606734277:2020-11-30T19:04:37.923+0000:Only 2.2.5.x, 3.4.x LTS and the latest non LTS release (today that is 3.6.0) are current. Any other release is EOL 
sebb:1606751482:2020-11-30T23:51:22.705+0000:1606751482:2020-11-30T23:51:22.705+0000:In which case 3.5.0 should be dropped from the download page.
zregvart:1606820729:2020-12-01T19:05:29.311+0000:1606820729:2020-12-01T19:05:29.311+0000:I've reworked the download page, preview is [here|https://deploy-preview-500--camel.netlify.app/download/], comments [on the PR|https://github.com/apache/camel-website/pull/500] are welcome.
sebb:1606831760:2020-12-01T22:09:20.354+0000:1606831760:2020-12-01T22:09:20.354+0000:Download page hash and sig links are broken; these files must be linked from 

https://downloads.apache.org/camel/...
or (old style)
https://www.apache.org/dist/camel/...

The links for camel-k-runtime-1.5.0-source-release.zip are all wrong because the file is called
apache-camel-k-runtime-1.5.0-source-release.zip

Please double-check all the changes!
zregvart:1606876946:2020-12-02T10:42:26.563+0000:1606876946:2020-12-02T10:42:26.563+0000:I've found documentation on this on the [infra website|https://infra.apache.org/release-download-pages.html] and changed the URLs to comply. Preview is up to date with those changes.
sebb:1606882881:2020-12-02T12:21:21.310+0000:1606882881:2020-12-02T12:21:21.310+0000:Link for apache-camel-k-runtime-1.5.0-source-release.zip.sha512 is broken.

The uploaded hashes for the download are md5 and sha1 which are  no longer to be used.
They should be deleted and replaced with a sha512 hash.

The /releases/ pages don't have KEYS links, nor is there any info on download verifications.
zregvart:1606893186:2020-12-02T15:13:06.537+0000:1606893186:2020-12-02T15:13:06.537+0000:[~sebb] the issues from your last comment should be resolved.
sebb:1606895273:2020-12-02T15:47:53.672+0000:1606895273:2020-12-02T15:47:53.672+0000:Broken hashes in page
https://deploy-preview-500--camel.netlify.app/releases/release-2.18.0/

Same for 2.22.2 and probably all releases in between.

Looks like the generation process does not allow for older releases that used md5 or sha1 hashes.

zregvart:1606897238:2020-12-02T16:20:38.068+0000:1606897238:2020-12-02T16:20:38.068+0000:Yeah, I've added that all releases done prior and including 2018-11-10 have sha1 hashes and after that date sha512 hashes. Perhaps it would make sense to go through the archive and create sha512 hashes.
zregvart:1606977379:2020-12-03T14:36:19.322+0000:1606977379:2020-12-03T14:36:19.322+0000:Changes are now live on the website."
0,CAMEL-15591,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.6.0, 3.4.5",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2020-09-29 09:43:36+00:00,2020-10-02 13:23:10+00:00,"For camel-zipfile + camel-tarfile, there is no limit on the size of uncompressed data, potentially leading to an OOM Error. Instead we should have a configurable limit.",
0,CAMEL-15590,Improvement,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-09-29 07:05:08+00:00,2020-09-29 10:45:41+00:00,To have better control over the route template creation process we should add a consumer to the CamelContext::addRouteFromTemplate that is invoked with the result of RouteTemplateDefinition::asRouteDefinition to post process the route generated by the template before it is added to the Camel Context,
0,CAMEL-15589,Bug,Minor,2.24.3,,"
None
",Resolved,Information Provided,None,Unassigned,Sreejesh,0,2,2020-09-29 05:38:44+00:00,2020-09-29 09:30:43+00:00,"I was trying to use EhCache with Apache Camel using Sprin Boot. While it works as expected. there is an exception on startup. It does not cause any issues in the functionality I guess (according to my test, everything works as expected). But is there any way to avoid that exception?


{{}}


 


{{{{2020-09-28 23:46:38,397 [main][DEBUG] org.apache.camel.component.cache.CacheManagerFactory - Turning off EHCache update checker ...
 2020-09-28 23:46:38,400 [main][WARN ] org.apache.camel.component.cache.CacheManagerFactory - Error turning off EHCache update checker. Beware information sent over the internet!
 java.lang.NoSuchFieldException: updateCheck
 at java.base/java.lang.Class.getDeclaredField(Class.java:2411)
 at org.apache.camel.component.cache.CacheManagerFactory.getInstance(CacheManagerFactory.java:40)
 at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:120)
 at org.apache.camel.component.cache.CacheProducer.doStart(CacheProducer.java:45)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72}}}}


 


My EhCache Configuration XML:


 


 


{{<ehcache xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 xsi:noNamespaceSchemaLocation=""ehcache.xsd"" updateCheck=""false""
 monitoring=""autodetect"" dynamicConfig=""true"">


<cache name=""cache1""
 maxEntriesLocalHeap=""10000""
 maxEntriesLocalDisk=""1000""
 eternal=""false""
 diskSpoolBufferSizeMB=""20""
 timeToIdleSeconds=""300"" timeToLiveSeconds=""600""
 memoryStoreEvictionPolicy=""LFU""
 transactionalMode=""off"">
 <persistence strategy=""localTempSwap"" />
 </cache>


</ehcache> }}


 


I have tried to set the updateCheck as false, no luck. I even tried to remove the updateCheck field itself from the XML, even that did not help (though it started fine with the same exception).


Thanks for your time.


I have uploaded sample code to test.","davsclaus:1601343043:2020-09-29T09:30:43.430+0000:1601343043:2020-09-29T09:30:43.430+0000:Camel 2.x is EOL and this is just a WARN and not an error.
Camel 3 does not do the update check, and is using a newer version where they dont do this anymore."
0,CAMEL-15588,Improvement,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Marco Santarelli,0,1,2020-09-28 19:51:11+00:00,2020-09-30 06:09:19+00:00,"An updated version of swagger-core has been released to address incompatibilities with the newer versions of jackson.


Deprecated methods have been removed and swagger-core will throw exceptions similar to:



 java.lang.NoSuchMethodError: 'com.fasterxml.jackson.databind.JavaType com.fasterxml.jackson.databind.introspect.AnnotatedMember.getType(com.fasterxml.jackson.databind.type.TypeBindings)'




See https://github.com/swagger-api/swagger-core/issues/3554 for info",
0,CAMEL-15587,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,2,2020-09-28 19:01:03+00:00,2021-07-02 08:18:48+00:00,"Look into reported on user forum
http://camel.465427.n5.nabble.com/Performance-regression-with-bean-and-ognl-expressions-in-Simple-language-version-3-4-x-td5883836.html


And reproducer on github at
https://github.com/dchirov/camel-performance-sample","davsclaus:1601464776:2020-09-30T19:19:36.987+0000:1601464776:2020-09-30T19:19:36.987+0000:Thanks for the sample, so I can see the issue is that the bean langauge is no longe singleton in 3.x which causes a new instance to be created per use
davsclaus:1601465982:2020-09-30T19:39:42.223+0000:1601465982:2020-09-30T19:39:42.223+0000:Okay so will work on something, this is related to bean language moved out of core, and its configured in a different way than in 2.x"
0,CAMEL-15586,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-28 08:38:43+00:00,2020-09-28 08:48:28+00:00,Like the other http clients we can optimize for toD,
0,CAMEL-15585,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Djordje Bajic,0,1,2020-09-27 17:29:18+00:00,2020-09-29 09:33:18+00:00,"Hello!


I found some small things that can be refactored.",
0,CAMEL-15584,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-27 13:35:18+00:00,2020-10-07 13:54:52+00:00,"The default uuid generator was from old days based on ActiveMQ that as a broker had the need to generate UUID that are unique across a fleet of brokers (hosts) and therefore it included the hostname in the id. 


This has the drawback today as the hostname needs to be resolved once which does a DNS lookup (its not an ip adr) and therefore it can delay the startup.


Also on graalvm, quarkus etc then we use the new vanilla generator instead. Also we dont want to native compile and get the hostname of the os that compiled.


The vanilla generates is fast and generate unique ids, also across a fleet of nodes. So lets consider switching to it.


Also discussed on the chat forum
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/DefaultUUIDGenerator.20inet.20call.20timeout.20issue",
0,CAMEL-15583,Wish,Major,None,None,"
None
",Resolved,Information Provided,None,Unassigned,Sreejesh,0,2,2020-09-25 16:54:50+00:00,2023-11-09 12:46:37+00:00,Is it possible to create an EDI component (or a transformation EIP) to create EDI files? Camel Smooks seems to be not in active development.,"davsclaus:1601074567:2020-09-26T06:56:07.950+0000:1601074567:2020-09-26T06:56:07.950+0000:There is no active open source EDI project - its a business where you often would need to use some commercial software. For example trace financial has a EDI mapper that works with Apache Camel. There are other tools also.
https://www.tracefinancial.com/standards/edi-transformations
"
0,CAMEL-15582,Wish,Major,2.25.2,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Sreejesh,0,2,2020-09-25 16:15:02+00:00,2022-09-02 15:59:35+00:00,"Apache Camel has over 300+ type converters available for use out of the box. As a developer, I can add more type converters as well. But is there any way where I can find the full list of Camel Type converters available out of the box? I searched in Camel source in GitHub, however could not get a list. This would help me in taking a decision whether I should provide an implementation or I can use the one already available in Camel.


I know many components can add Type Converters when we add them to class path. I just wanted to know the ones already available with Camel core (or the most useful ones).


 


It would be helpful if you publish this information in your website.",
0,CAMEL-15581,Bug,Major,"3.4.3, 3.5.0","3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",James Netherton,James Netherton,0,1,2020-09-25 15:18:36+00:00,2020-09-28 08:32:20+00:00,"I noticed an issue when trying to use the camel-main configuration property camel.main.xml-rests in Camel Quarkus. It results in:


2020-09-25 15:33:25,811 ERROR [org.apa.cam.qua.mai.CamelMainRuntime] (main) Failed to start application: org.apache.camel.RuntimeCamelException: org.apache.camel.xml.io.XmlPullParserException: Expected starting tag '

{http://camel.apache.org/schema/spring}

routes', read starting tag '

{http://camel.apache.org/schema/spring}

rests' instead
	at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:66)
	at org.apache.camel.main.DefaultRoutesCollector.collectXmlRestsFromDirectory(DefaultRoutesCollector.java:219)",
0,CAMEL-15580,Bug,Major,3.4.3,"3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Viral Gohel,Brad Harvey,0,2,2020-09-25 15:10:51+00:00,2020-09-30 18:17:38+00:00,"There is a race condition between the SJMS Batch Consumer route start thread and the batch consumption loop thread.  When it triggers the batch consumption loop exits early and the SJMS Batch Consumer does not read any JMS messages.


In short:



The AtomicBoolean running is used as a flag to shut down the batch consumption loop
The batch consumption loop is submitted to another thread and only after that running is changed to true
This means sometimes the batch consumption loop sees running as false during startup



The easiest way to reproduce it is to add a sleep into SJMSBatchConsumer$StartConsumerTask#run


 




final List<AtomicBoolean> triggers = new ArrayList<>();
for (int i = 0; i < consumerCount; i++) {
    BatchConsumptionLoop loop = new BatchConsumptionLoop();
    loop.setKeepAliveDelay(keepAliveDelay);
    triggers.add(loop.getCompletionTimeoutTrigger());
    /*
     * Note: Batch consumption loop is submitted to another thread here
     */
    jmsConsumerExecutors.submit(loop);
}

if (completionInterval > 0) {
    // trigger completion based on interval
    timeoutCheckerExecutorService.scheduleAtFixedRate(new CompletionIntervalTask(triggers), completionInterval, completionInterval, TimeUnit.MILLISECONDS);
}

if (attempt > 1) {
    LOG.info(""Successfully refreshed connection after {} attempts."", attempt);
}
/*
 * Note: Add this sleep to reproduce the race condition, simulating
 * this thread being pre-empted by other work
 */
Thread.sleep(100);  
LOG.info(""Started {} consumer(s) for {}:{}"", consumerCount, destinationName, completionSize);
/*
 * Note: running is only changed to true here but the batch consumption loop
 * that reads this values was submitted to another thread earlier
 */
running.set(true);
return;
 



 


The batch consumption loop checks the running flag like this:




            private void consumeBatchesOnLoop(final Session session, final MessageConsumer consumer) throws JMSException {
                final boolean usingTimeout = completionTimeout > 0;

                LOG.trace(""BatchConsumptionTask +++ start +++"");

                while (running.get()) { 



 


Usually there's a second check that would cause everything to loop again - it may see running as false but see isStarting() as true.




                }while (running.get() || isStarting()); 



But with asyncStartListener enabled I think that isStarting() is likely to be false as well.


 


I believe this issue is causing fairly frequent intermittent test failures in our CI environment (jenkins slaves in kubernetes, linux).  But I've been unable to reproduce it on my laptop (windows) without adding the artificial delay on the main thread.  


I've been able to get thread dumps from the CI environment showing the executor waiting for a task instead of executing the batch consumption loop




""Camel (camel-8) thread #125 - SjmsBatchConsumer"" 
   java.lang.Thread.State: WAITING
        at sun.misc.Unsafe.park(Native Method)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)
        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
 



 


Usually they should look like this:




""Camel (camel-8) thread #123 - SjmsBatchConsumer"" 
   java.lang.Thread.State: TIMED_WAITING
        at java.lang.Object.wait(Native Method)
        at org.apache.activemq.FifoMessageDispatchChannel.dequeue(FifoMessageDispatchChannel.java:74)
        at org.apache.activemq.ActiveMQMessageConsumer.dequeue(ActiveMQMessageConsumer.java:486)
        at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:653)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:429)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:383)
        at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:326)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748) 



 


I also get tracing logs where the batch consumption tasks starts & ends very quickly.




	Line 4377: 2020-09-24 03:16:41.567 DEBUG||| 4604 --- [artStopListener] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Attempt #1. Starting 1 consumer(s) for myqueue:300
	Line 4415: 2020-09-24 03:16:41.576 TRACE||| 4604 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask +++ start +++
	Line 4416: 2020-09-24 03:16:41.576 TRACE||| 4604 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask +++ end +++
	Line 4435: 2020-09-24 03:16:41.568 INFO ||| 4604 --- [artStopListener] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Started 1 consumer(s) for myqueue:300 



 


Side note: Could the queue name be added to the thread name?  The JMS component consumers do that.","bradhgbst:1601017992:2020-09-25T15:13:12.293+0000:1601017992:2020-09-25T15:13:12.293+0000:I added this to SjmsBatchConsumerTest to try to reproduce.  I didn't have any luck reproducing on my laptop until I added the Thread.sleep mentioned in the description - a sleep of 10 ms causes it to fail about half the time, higher sleeps fail more often.
{code:java}
@Test
public void testStartupRaceCondition() throws Exception {
    final int routeCount = 10;
    final int consumerCount = 1;

    List<String> queues = new ArrayList<>();

    String queueNamePrefix = getQueueName();

    // setup routeCount routes, each reading from its own queue but all writing to the same mock endpoint
    for (int i = 0; i < routeCount; i++) {
        String queueName = queueNamePrefix + ""_"" + i;
        queues.add(queueName);
        String routeId = ""batchConsumer_"" + i;
        context.addRoutes(new RouteBuilder() {
            public void configure() throws Exception {

                int completionTimeout = 1000;
                int completionSize = 1;

                fromF(""sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy&keepAliveDelay=100&asyncStartListener=true"",
                        queueName, completionTimeout, completionSize, consumerCount)
                        .routeId(routeId).autoStartup(true)
                        .split(body())
                        .to(""mock:split"");
            }
        });
    }

    context.start();

    // expect to receive routeCount messages to the mock endpoint
    MockEndpoint mockSplit = getMockEndpoint(""mock:split"");
    mockSplit.setExpectedMessageCount(routeCount);

    // send one message to all the queues
    queues.forEach(queueName -> template.sendBody(""sjms:queue:"" + queueName, queueName));

    assertMockEndpointsSatisfied();

} {code}
bradhgbst:1601018541:2020-09-25T15:22:21.501+0000:1601018541:2020-09-25T15:22:21.501+0000:I suspect setting running to true prior to kicking off the batch consumption tasks will solve it.

[^potentialPatch.txt]
davsclaus:1601074632:2020-09-26T06:57:12.388+0000:1601074632:2020-09-26T06:57:12.388+0000:Yeah that sounds reasonable.
davsclaus:1601461058:2020-09-30T18:17:38.421+0000:1601461058:2020-09-30T18:17:38.421+0000:I have backported to 3.4.x branch"
0,CAMEL-15579,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-25 13:03:49+00:00,2020-09-28 06:18:16+00:00,"For example org.apache.camel.component.file.FileEndpointConfigurer#getAllOptions is returning a new map with static information.


We can turn that into a static block in the generated source and return a static instance, this optimizes the JVM.","davsclaus:1601080554:2020-09-26T08:35:54.762+0000:1601080554:2020-09-26T08:35:54.762+0000:One issue is if the configurer has super class, then we need to merge them together
davsclaus:1601191966:2020-09-27T15:32:46.691+0000:1601191966:2020-09-27T15:32:46.691+0000:Another way would be to make the generated configurer run after the json generation so it can read the json metadata and have a full list of all options (also from super) then we can create a single static map
davsclaus:1601192489:2020-09-27T15:41:29.227+0000:1601192489:2020-09-27T15:41:29.227+0000:Okay we have access to the full list of options (also from super) via the componetModel, so we should be able to do this
davsclaus:1601241630:2020-09-28T05:20:30.148+0000:1601241799:2020-09-28T05:23:19.891+0000:After all elements have been added to the map, we can recreate the map to refill from a known size and let the old be garbage collected, so it does not take up extra space when it grows during adding. Argh this is only for hash map we use sorted map for some of the others *NOT A PROBLEM*"
0,CAMEL-15578,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Unassigned,Claus Ibsen,0,2,2020-09-25 11:06:06+00:00,2020-12-22 05:17:49+00:00,"In case of Loop EIP and you shutdown Camel then we can make the loop break out earlier as today it continues until it has reached the end of the loop.


For this we need a new option that the user can turn on to allow this.","chardahe@redhat.com:1601007141:2020-09-25T12:12:21.438+0000:1601007141:2020-09-25T12:12:21.438+0000:I reproduced this issue and it really needs to be fixed, I want to work on this."
0,CAMEL-15577,Bug,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-09-25 08:28:48+00:00,2020-09-29 13:14:02+00:00,"There is a difference in implementation of parameter `allowTemplateFromHeader` in various templating components and missing implementation in stringtemplate component.


 Description from documentation (of ""allowTemplateFromHeader""):


Whether to allow to use resource template from header or not (default false). Enabling this allows to specify dynamic templates via message header. However this can be seen as a potential security vulnerability if the header is coming from a malicious user, so use this with care.


Common sense says that with this parameter I can send template via header.


Which is implemented for example in velocity component (see https://github.com/apache/camel/blob/master/components/camel-velocity/src/main/java/org/apache/camel/component/velocity/VelocityEndpoint.java#L185)


In stringtemplate component there is only functionality about providing own variable map (see https://github.com/apache/camel/blob/master/components/camel-stringtemplate/src/main/java/org/apache/camel/component/stringtemplate/StringTemplateEndpoint.java#L104) - the same functionality in velocity is called 'supplementalContext'


 In stringtemplate documentation is a described usage of this custom context map:


You can define the custom context map by setting the message header ""CamelStringTemplateVariableMap"" just like the below code. 


Errors:



parameter ""CamelStringTemplateVariableMap"" is applied only when ""allowTemplateFromHeader"" is set to true
there is no way of providing template via header.



 


Fix should



remove dependency between ""CamelStringTemplateVariableMap"" and ""allowTemplateFromHeader""
add a new parameter to allow definition of template via header  Fix problem with template via header based on other templating components (e.g. velocity)",
0,CAMEL-15576,Bug,Minor,3.5.0,None,"

help-wanted
tracing

",Resolved,Fixed,3.6.0,Claus Ibsen,ncasaux,0,2,2020-09-24 15:28:42+00:00,2020-10-09 05:23:22+00:00,"Hello,


The HTTP method is not correctly retrieved by component camel-tracing when, from the Camel route, the HTTP method is set using something else than a String (like HttpMethods.POST for example)


Info from Claus:


Ah I can see the little bug
https://github.com/apache/camel/blob/master/components/camel-tracing/src/main/java/org/apache/camel/tracing/decorators/AbstractHttpSpanDecorator.java#L33
This one checks only if its a string type, but you use a constant or enum etc.","avi5kdon@gmail.com:1600934757:2020-09-24T16:05:57.533+0000:1600934757:2020-09-24T16:05:57.533+0000:Hi [~ncasaux], Please let me know if you are going to work on this otherwise I'll try and have a look
ncasaux:1600993724:2020-09-25T08:28:44.934+0000:1600993724:2020-09-25T08:28:44.934+0000:Hi [~avi5kdon@gmail.com]

I never commited anything on Camel. For the moment I prefer to report issues ! :)"
0,CAMEL-15575,Task,Minor,3.6.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-09-24 11:38:28+00:00,2020-09-26 06:54:34+00:00,"I noticed a few places on the codebase where the exceptions are being printed directly to the standard output instead of being redirected to the logger. 


This may prevent users from seeing exception messages in some circumstances.","orpiske:1601006879:2020-09-25T12:07:59.129+0000:1601006879:2020-09-25T12:07:59.129+0000:Affected components: 
camel-chatscript, camel-activemq, camel-as2-api, camel-aws-s3, camel-corda, 
camel-aws2-s3, camel-cxf, camel-cxf-transport, camel-digitalocean, camel-docker, 
camel-dropbox, camel-cxf-transport, camel-elytron, camel-google-bigquery, 
camel-google-calendar camel-google-drive, camel-grpc, camel-jira, camel-hazelcast, 
camel-irc, camel-jira, camel-ldap, camel-ldif, camel-lucene, camel-mina, 
camel-minio, camel-mllp, camel-netty-http, camel-netty, camel-rabbitmq, 
camel-saxon, camel-soroush, camel-stomp, camel-test-junit5, camel-test, 
camel-undertow, camel-websocket, camel-xmlsecurity, camel-xmpp"
0,CAMEL-15574,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Otavio Rodolfo Piske,Claus Ibsen,0,2,2020-09-24 10:54:49+00:00,2020-10-07 04:56:59+00:00,"We should move core/camel-test-infra to its own root folder like camel-infra.
It does not really belong so much in core itself.


Discussed on Camel dev mailing list also","orpiske:1600930483:2020-09-24T14:54:43.985+0000:1600930483:2020-09-24T14:54:43.985+0000:Hey, as agreed, I am assigning this one to myself and will fix it. "
0,CAMEL-15573,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-09-24 09:16:46+00:00,2020-09-25 13:41:37+00:00,"In addition to suport RoutesBuilders, camel-main should support LambdaRouteBuilder out of the box, something like:




main.configure().addRoutesBuilder(b -> b.from(...));",
0,CAMEL-15572,Bug,Minor,3.5.0,3.6.0,"
None
",Resolved,Won't Fix,3.6.0,Unassigned,Luca Burgazzoli,0,2,2020-09-23 13:37:01+00:00,2020-09-28 18:27:14+00:00,"Assuming we have a route template defined as follow:




routeTemplate(""echo-fail"")
    .templateParameter(""prefix"")
    .from(""direct:#property:routeId"")
    .setBody().simple(""{{prefix}}-${body}"");




That we instantiate with something like:




TemplatedRouteBuilder.builder(context, ""echo-fail"")
    .parameter(""prefix"", ""terst"")
    .parameter(""routeId"", ""myROuteId"")
    .add();




The generated route does not have the #property:routeId resolved. 


Originally reported here: https://github.com/apache/camel-k-runtime/issues/500#issuecomment-697303190","lb:1600848428:2020-09-23T16:07:08.218+0000:1600849129:2020-09-23T16:18:49.352+0000:[~davsclaus] [~nferraro] 

It turns out that the #property: syntax is only supported by PropertyBindingSupport so to fix it we would need to support #property in the property component which is not easy. 

I think implementing https://github.com/apache/camel-k-runtime/issues/490 would be a much better solution.


davsclaus:1601078886:2020-09-26T08:08:06.811+0000:1601078886:2020-09-26T08:08:06.811+0000:You should use {{ }} syntax. But yeah its better to use knative or a new component for this part"
0,CAMEL-15571,Task,Major,None,"3.6.0, 3.4.5","
None
",Resolved,Fixed,"3.6.0, 3.4.5",Unassigned,Shmakov Alexey,0,3,2020-09-23 10:44:44+00:00,2021-03-22 18:07:53+00:00,"As a result of copying from OrderedProperties to Properties, the order of properties is changed  


https://github.com/apache/camel/blob/master/core/camel-base/src/main/java/org/apache/camel/component/properties/AbstractLocationPropertiesSource.java
     public Properties loadProperties(Predicate<String> filter) {       


        Properties answer = new Properties();
         for (String name : properties.stringPropertyNames())


{                            if (filter.test(name))   answer.put(name, properties.get(name));           }


        return answer;   


    }  


So when creating beans from the application.properties file, the order of their creation changes and beans that depend on other beans are created earlier and do not see the desired beans in the registry


 https://camel.apache.org/components/latest/others/main.html#_specifying_custom_beans  


 


For example, in this  application.properties


 


  #bus config
  camel.beans.busConFactory=#class:org.apache.activemq.ActiveMQConnectionFactory
  camel.beans.busConFactory.brokerURL=vm://amq-test-bus?broker.persistent=false


  camel.beans.busPoolFactory=#class:org.apache.activemq.pool.PooledConnectionFactory
  camel.beans.busPoolFactory.connectionFactory=#busConFactory
  camel.beans.busPoolFactory.maxConnections=3


  camel.beans.busJmsConfig=#class:org.apache.camel.component.activemq.ActiveMQConfiguration
  camel.beans.busJmsConfig.connectionFactory=#busPoolFactory
  camel.beans.busJmsConfig.concurrentConsumers=2
  camel.beans.busJmsConfig.preserveMessageQos=true
  camel.beans.busJmsConfig.transacted=true


  camel.beans.BUS=#class:org.apache.camel.component.activemq.ActiveMQComponent
  camel.beans.BUS.configuration=#busJmsConfig


 


Bean ""camel.beans.BUS"" created before ""camel.beans.busJmsConfig"" and it did not work","chardahe@redhat.com:1600836455:2020-09-23T12:47:35.403+0000:1600836455:2020-09-23T12:47:35.403+0000:Thanks [~shmakovaa] for reporting it, I'll work on this
davsclaus:1600919397:2020-09-24T11:49:57.927+0000:1600919397:2020-09-24T11:49:57.927+0000:Should be easy to fix as you just need to use ordered

Properties answer = new OrderedProperties();
chardahe@redhat.com:1600919528:2020-09-24T11:52:08.867+0000:1600919528:2020-09-24T11:52:08.867+0000:Yes [~davsclaus], PR is ready, will raise soon"
0,CAMEL-15570,New Feature,Minor,None,None,"

help-wanted

",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-23 08:15:07+00:00,2023-12-25 15:39:38+00:00,"Add template based component (like camel-velocity, freemarker etc) using this new library
https://github.com/casid/jte",davsclaus:1703471466:2023-12-25T10:31:06.496+0000:1703489975:2023-12-25T15:39:35.208+0000:TODO: spring boot starter *DONE*
0,CAMEL-15569,Bug,Major,3.5.0,,"
None
",Resolved,Information Provided,None,Jan Bednar,Gonzalo Mendoza,0,2,2020-09-22 19:43:19+00:00,2020-09-22 22:31:48+00:00,"I'm trying to implement a timer using Camel 3.5 at Gradle project with OpenJDK8 as next




from(""timer://watchexpiration?fixedRate=true&period=600000&delay=0"")...




But, after build the fat jar using 
1. Build with:  



./gradlew build



 
2. Run with:  



java -jar build/libs/app.jar



After that  I receive the next error at console




Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://watchexpiration?delay=0&fixedRate=true&period=600000 due to: Error binding property (delay=0) with name: delay on bean: timer://watchexpiration?delay=0&fixedRate=true&period=600000 with value: 0
    at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:888)
    at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:777)
    at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:58)
    at org.apache.camel.reifier.AbstractReifier.resolveEndpoint(AbstractReifier.java:177)
    at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:250)
    at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:112)




But If I run using 



./gradlew run



 then works fine as I expected. I don't want to use any frameworks for this project. I feel this is just a config issue or something is wrong with my configuration I guess.


How can I fix it?


build.gradle




 plugins {
    id 'java'
    id 'application'
    id 'com.github.sherter.google-java-format' version '0.8'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    // Camel
    compile group: 'org.apache.camel', name: 'camel-core', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-file', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-file-watch', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-xstream', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-gson', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-rest', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-servlet', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-http', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-jackson', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-quartz', version: '3.5.0'
    compile group: 'org.apache.camel', name: 'camel-timer', version: '3.5.0'

    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    // Dev Libs
    compileOnly(""org.projectlombok:lombok:1.18.12"")
    annotationProcessor(""org.projectlombok:lombok:1.18.12"")

    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.4'
}

application {
    mainClassName = 'com.eip.App'
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.beam.agent.App'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

googleJavaFormat {
    exclude '**/App.java'
}","bedla:1600784718:2020-09-22T22:25:18.619+0000:1600784718:2020-09-22T22:25:18.619+0000:Please dont create Jira issue for something, what is clearly your error and not a bug in Apache Camel. We are active on mailing list, zulip and StackOverflow and ready to help you. Jira is here for reporting bugs.

First read this - [https://camel.apache.org/manual/latest/support.html]
{quote}Please refrain from immediately opening a ticket in the issue tracker unless you are certain it’s a problem in the Camel software. If you are in doubt, we appreciate asking the [mailing list|https://camel.apache.org/manual/latest/mailing-lists.html], or [Chat room|https://camel.zulipchat.com/] first.
{quote}
And then look at my answer to your question on SO - [https://stackoverflow.com/a/64018354/8576169]
{quote}Shadowing jars is quite magic, because you need to handle duplicate entries somehow. In Apache Camel there are many {{META-INF}} service files, which are getting overwritten with your simple {{jar}} approach. Use {{com.github.johnrengelman.shadow}} which is allowing you to customize merging process.
{code:java}
shadowJar {
    mergeServiceFiles() // Tell plugin to merge duplicate service files
    manifest {
        attributes 'Main-Class': 'com.eip.App'
    }
}
apply plugin: 'com.github.johnrengelman.shadow'
{code}
{quote}"
0,CAMEL-15568,Bug,Minor,3.2.0,,"
None
",Resolved,Not A Problem,None,Unassigned,Minal Bhalodi,0,2,2020-09-22 17:23:31+00:00,2020-09-23 01:07:07+00:00,"We are using Apache Camel 3.2.0. We update camel routes at runtime using below code. 


// update routes in camel contexts. Definitions are in XML files


ModelCamelContext mcc = camelContext.adapt(ModelCamelContext.class);
 mcc.addRouteDefinitions(workflowDefinitionsList); // workflowDefinitionsList is the list of XML routes


 


Problem Statement: Dynamic routes updates causes few requests to fail at runtime. When these routes are being updated, we also call getRoute to serve live traffic.


Since addRouteDefinitions first delete routes given in workflowDefinitionsList from camel context and then add those routes back to camelcontext, These routes won't be available for few mili second and that causes request to fails.


Route route = exchange.getContext().getRoute(workflowRouteId);  // get route


Since there can be only one CamelContext per Application, I am not sure how can I resolve this issue. Is there any other method available where we can PATCH routes changes at runtime. Dynamic route updates shouldn't cause few requests to fails.


 


 


Here is camel 3 code for addRouteDefinitions method where routes are being removed and added:




public synchronized void addRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {
    if (routeDefinitions != null && !routeDefinitions.isEmpty()) {
        List<RouteDefinition> list = new ArrayList();
        routeDefinitions.forEach((r) -> {
            if (this.routeFilter == null || (Boolean)this.routeFilter.apply(r)) {
                list.add(r);
            }

        });
        this.removeRouteDefinitions(list);
        this.routeDefinitions.addAll(list);
        if (this.shouldStartRoutes()) {
            ((ModelCamelContext)this.getCamelContext().adapt(ModelCamelContext.class)).startRouteDefinitions(list);
        }

    }
}





 


 


We are not able to updates routes in camelcontext frequently because of this issue. Everytime we update routes in camelcontext that causes us some FCI since we have high traffic in our application.","bedla:1600773772:2020-09-22T19:22:52.284+0000:1600773772:2020-09-22T19:22:52.284+0000:Hot reload of routes is not supported usage of this API. There are projects in Camel ecosystem much more suitable for this, like camel-quarkus or camel-k. 
You can also deploy your app in some application server, which support hot deploy (like Karaf, Fuse).

If you need more help with this, please ask on mailing list, gitter, or StackOverflow. This is not a bug.
https://camel.apache.org/manual/latest/support.html
patelminalb@gmail.com:1600784240:2020-09-22T22:17:20.458+0000:1600784240:2020-09-22T22:17:20.458+0000:[~bedla] Thanks for the quick response.

 

I already posted on stack-overflow 5 days ago and also sent email in mailing list mentioned in the above link but didn't get any response so had to create this bug.

[https://stackoverflow.com/questions/63931881/dynamic-routes-updates-issue-in-apache-camel]

 

 
patelminalb@gmail.com:1600791524:2020-09-23T00:18:44.328+0000:1600791524:2020-09-23T00:18:44.328+0000:[~bedla] any reason that hot reload is not supported in camel-core-engine? can I expect this feature to come out in future?
bedla:1600794427:2020-09-23T01:07:07.209+0000:1600794427:2020-09-23T01:07:07.209+0000:This is not about core engine, but about all components, EIPs and services which would need custom logic to support that. Eg how to reload Jetty consumer? You cannot have app listening on the same port twice. Every component would need to be super smart in order to decide which change can be done on runtime on underlying library, what needs restart, it would need to compare old and new value to decide what kind of change this is. And every single component will have its own requirements to support runtime changes.

All this effort will make implementation of components unmaintanable for something, what container like OSGI already  does by design. And for something, what can be solved by your architectural decision (Eg NGINX reverse proxy, which will handle failover during that few millis of downtime). There are no plans to support that in near future ( eg comment in CAMEL-10138 ) . This is job for containers like OSGI which can do this natively.

This is my point of view. If you want broader discussion, or you think you have some idea how to do that without rewriting all components, please join camel.zulipchat.com"
0,CAMEL-15567,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-22 07:24:12+00:00,2020-09-26 08:26:04+00:00,"Today we have to use camel-catalog to build endpoint uris via a set of properties/map. As the catalog has all the components and its a json file then it requires to load the json and parse it and use the catalog api to generate the endpoint.


Maybe we could source code generate java code that can generate this for the component that we can embed inside each component JAR like we do for configurers.


This would also be faster.


We can then fallback to the catalog json based if no source code was generated (such as 3rd party components).","davsclaus:1600730664:2020-09-22T07:24:24.057+0000:1600730664:2020-09-22T07:24:24.057+0000:See comments on
https://github.com/apache/camel-k-runtime/pull/486
davsclaus:1600998813:2020-09-25T09:53:33.121+0000:1600998813:2020-09-25T09:53:33.121+0000:As we would generate this for all components then we dont need the catalog as fallback - as it would just make things a little bit more complex.
Custom assemblers can be added to registry which will be used first.
davsclaus:1601004324:2020-09-25T11:25:24.818+0000:1601074412:2020-09-26T06:53:32.487+0000:TODO: Generate source code for list of known endpoint options which is needed by send dynamic aware (we can use configurer as it already do that)


davsclaus:1601005672:2020-09-25T11:47:52.938+0000:1601005672:2020-09-25T11:47:52.938+0000:You can now do

{code}
        Map<String, Object> params = new HashMap<>();
        params.put(""loggerName"", ""foo"");
        params.put(""groupSize"", ""123"");
        params.put(""showExchangePattern"", false);
        params.put(""logMask"", true);

        // should find the source code generated assembler via classpath
        EndpointUriAssembler assembler = context.adapt(ExtendedCamelContext.class).getEndpointUriAssembler(""log"");

        String uri = assembler.buildUri(context, ""log"", params);
        Assertions.assertEquals(""log:foo?groupSize=123&logMask=true&showExchangePattern=false"", uri);
{code}

davsclaus:1601005829:2020-09-25T11:50:29.300+0000:1601024019:2020-09-25T16:53:39.269+0000:TODO: buildUri should not accept camel context but lets make the assembler camel context aware and inject it automatic *DONE*
davsclaus:1601009682:2020-09-25T12:54:42.660+0000:1601024010:2020-09-25T16:53:30.313+0000:TODO: Rename to EndpointUriFactory *DONE*
davsclaus:1601079964:2020-09-26T08:26:04.921+0000:1601079964:2020-09-26T08:26:04.921+0000:Removed the cache *DONE*"
0,CAMEL-15536,Task,Minor,None,,"
None
",Resolved,Implemented,None,Jan Bednar,Jan Bednar,0,1,2020-09-16 09:54:30+00:00,2020-09-16 13:33:40+00:00,"People are creating PRs with changes, which will be discarded after build (mainly generated adoc files) and Github action currently passes without errors. It would be nice to add one step to github action, which will check for uncommited changes after build and fail, if working tree is dirty.",
0,CAMEL-15535,Improvement,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Paddy Daly,0,2,2020-09-16 09:41:03+00:00,2020-09-21 11:36:53+00:00,"When processing a code 39 barcode it would be helpful to add additional headers to the exchange.


For example if you unmarshal a barcode that is rotated 180 degrees the orientation is included in the result object.




Result result = reader.decode(bitmap, this.readerHintMap);","chardahe@redhat.com:1600229035:2020-09-16T12:03:55.924+0000:1600229035:2020-09-16T12:03:55.924+0000:Hi [~watcher] Thanks for reporting it, I'll work on this.
chardahe@redhat.com:1600256903:2020-09-16T19:48:23.386+0000:1600257754:2020-09-16T20:02:34.594+0000:Hi [~watcher], I verified the use case for 180 degrees orientation.

It would be really nice if you can suggest what additional headers we can add to the exchange, i.e If we can add header Orientation with respective value

Should we add all the values to header which is in resultMetadata ?
watcher:1600257751:2020-09-16T20:02:31.988+0000:1600257751:2020-09-16T20:02:31.988+0000:Hi Chandrankant

Thanks for looking into this so quickly.

My immediate use case requires just the orientation but from having a quick look the following seems worth investigating.

 
{code:java}
public enum ResultMetadataType {
 OTHER,
 ORIENTATION,
 BYTE_SEGMENTS,
 ERROR_CORRECTION_LEVEL,
 ISSUE_NUMBER,
 SUGGESTED_PRICE,
 POSSIBLE_COUNTRY,
 UPC_EAN_EXTENSION,
 PDF417_EXTRA_METADATA,
 STRUCTURED_APPEND_SEQUENCE,
 STRUCTURED_APPEND_PARITY;

 private ResultMetadataType() {
 }
} {code}

In addition to that it seems like returning the position of the barcode could be of interest, this looks like it is stored in the ResultPoint object.
{code:java}
public final class Result {
    private final String text;
    private final byte[] rawBytes;
    private final int numBits;
    private ResultPoint[] resultPoints;
    private final BarcodeFormat format;
    private Map<ResultMetadataType, Object> resultMetadata;
    private final long timestamp; {code}
 

Sorry, I'll investigate tomorrow and attempt to give a more concrete response.

 

 

 

 

 "
0,CAMEL-15534,Bug,Major,3.5.0,"3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Andrea Cosentino,Jakub Stejskal,0,2,2020-09-15 13:41:55+00:00,2020-09-17 06:04:41+00:00,"There is an issue when I create KafkaStreams app which get messages sent from telegram, transform it and sent back to telegram, camel-telegram cannot parse chatId from header - https://gist.github.com/Frawless/564623a3fffb258a036f424e09402dc5


 


The problem is on this line I think - https://github.com/apache/camel/blob/camel-3.5.0/components/camel-telegram/src/main/java/org/apache/camel/component/telegram/TelegramProducer.java#L83  I have tried to remove the cast and instead of it use String.valueOf()and it's working fine for me. However, I am not sure if this suitable solution (maybe there is something better already implemented in camel).",orpiske:1600148680:2020-09-15T13:44:40.721+0000:1600148680:2020-09-15T13:44:40.721+0000:Cross-referencing the issue on CKC: https://github.com/apache/camel-kafka-connector/issues/463 
0,CAMEL-15533,Improvement,Minor,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-09-15 05:28:58+00:00,2020-12-07 17:28:52+00:00,"[3] Exception in thread ""main"" org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of null
[3]     at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:125)
[3]     at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:263)
[3]     at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:156)
[3]     at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114)
[3]     at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809)
[3]     at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657)
[3]     at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620)
[3]     at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
[3]     at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452)
[3]     at org.apache.camel.k.main.ApplicationRuntime$MainAdapter.doStart(ApplicationRuntime.java:208)
[3]     at org.apache.camel.support.service.BaseService.start(BaseService.java:115)
[3]     at org.apache.camel.main.MainSupport.run(MainSupport.java:60)
[3]     at org.apache.camel.k.main.ApplicationRuntime.run(ApplicationRuntime.java:72)
[3]     at org.apache.camel.k.main.Application.main(Application.java:42)
[3] Caused by: java.lang.NullPointerException
[3]     at org.apache.camel.component.slack.SlackConsumer.getChannelId(SlackConsumer.java:137)
[3]     at org.apache.camel.component.slack.SlackConsumer.<init>(SlackConsumer.java:54)
[3]     at org.apache.camel.component.slack.SlackEndpoint.createConsumer(SlackEndpoint.java:84)
[3]     at org.apache.camel.impl.engine.DefaultRoute.addServices(DefaultRoute.java:560)
[3]     at org.apache.camel.impl.engine.DefaultRoute.onStartingServices(DefaultRoute.java:166)
[3]     at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:153)
[3]     at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123)
[3]     ... 13 more",
0,CAMEL-15532,Bug,Major,"2.25.2, 3.4.3, 3.5.0","3.4.4, 3.6.0, 2.25.3","
None
",Resolved,Fixed,"3.4.4, 3.6.0, 2.25.3",Andrea Cosentino,Franz Forsthofer,0,1,2020-09-14 15:49:00+00:00,2020-09-15 05:36:05+00:00,If you have a route with a Multicast with parallel processing and a timeout and a sub-route in the multicast which is creating a StreamCache after the timeout then the created stream cache file is never deleted from the file system.,
0,CAMEL-15531,New Feature,Minor,3.6.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Zineb Bendhiba,Zineb Bendhiba,0,1,2020-09-14 13:30:51+00:00,2020-09-19 06:55:38+00:00,"This upgrade of code is needed to use optaplanner-quarkus extension, and also for users not using config file anymore. SolverManager can be used easily with spring boot and quarkus, using DI.",
0,CAMEL-15530,Bug,Major,3.5.0,"3.4.4, 3.6.0","

easyfix
pull-request-available

",Resolved,Fixed,"3.4.4, 3.6.0",Andrea Cosentino,Filipe Portes,0,1,2020-09-13 18:02:26+00:00,2020-09-14 05:58:25+00:00,"When using Camel aws2-s3 component and the `includeFolders` option as false, some `ResponseInputStream` objects are left unclosed and are causing the aws sdk connection pool to get full.  


example of Route: 




from(""aws2-s3://{{aws.s3.sftpBucket}}?amazonS3Client=#amazonS3&delay=1000""
    + ""&includeFolders=false"")
    .to(""file:/tmp/?fileName=${header.CamelAwsS3Key}"")



this results in the exception appearing in the logs after some seconds: 




Caused by: [software.amazon.awssdk.core.exception.SdkClientException - Unable to execute HTTP request: Timeout waiting for connection from pool]software.amazon.awssdk.core.exception.SdkClientException: Unable to execute HTTP request: Timeout waiting for connection from pool
	at software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)
	at software.amazon.awssdk.core.exception.SdkClientException.create(SdkClientException.java:43)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.utils.RetryableStageHelper.setLastException(RetryableStageHelper.java:199)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:66)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:34)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56)
	at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37)
	at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26)
	at software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:189)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:121)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:147)
	at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:101)
	at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)
	at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:55)
	at software.amazon.awssdk.services.s3.DefaultS3Client.listObjects(DefaultS3Client.java:4792)
	at org.apache.camel.component.aws2.s3.AWS2S3Consumer.poll(AWS2S3Consumer.java:138)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:190)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:107)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.apache.http.conn.ConnectionPoolTimeoutException: Timeout waiting for connection from pool
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.leaseConnection(PoolingHttpClientConnectionManager.java:316)
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1.get(PoolingHttpClientConnectionManager.java:282)
	at jdk.internal.reflect.GeneratedMethodAccessor305.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at software.amazon.awssdk.http.apache.internal.conn.ClientConnectionRequestFactory$Handler.invoke(ClientConnectionRequestFactory.java:83)
	at com.sun.proxy.$Proxy137.get(Unknown Source)
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:190)
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)
	at software.amazon.awssdk.http.apache.internal.impl.ApacheSdkHttpClient.execute(ApacheSdkHttpClient.java:72)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.execute(ApacheHttpClient.java:232)
	at software.amazon.awssdk.http.apache.ApacheHttpClient.access$500(ApacheHttpClient.java:98)
	at software.amazon.awssdk.http.apache.ApacheHttpClient$1.call(ApacheHttpClient.java:213)




 


The issue doesn't repeat when the `includeFolders` is kept as true.",filipe.portes:1599992585:2020-09-13T18:23:05.236+0000:1599992585:2020-09-13T18:23:05.236+0000:PR: [https://github.com/apache/camel/pull/4209]
0,CAMEL-15529,Improvement,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2020-09-13 05:40:07+00:00,2021-01-11 17:29:00+00:00,"Currently, Camel features uses internal features repo (cxf, karaf, etc) with ""specific"" version.


This forces users to be aligned with Camel defined versions.


Instead, Camel should use ranges allowing to ""match"" the user defined versions.",
0,CAMEL-15528,Bug,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Jan Bednar,Jan Bednar,0,1,2020-09-12 19:36:33+00:00,2020-09-15 12:02:13+00:00,It is broken by CAMEL-15210 and CAMEL-15478 ( 4df55c268b6f8755f6dafd81a4df825c902c61b5 ),
0,CAMEL-15527,Test,Major,None,3.6.0,"
None
",Resolved,Implemented,3.6.0,Jan Bednar,Jan Bednar,0,1,2020-09-12 16:02:42+00:00,2020-09-14 08:01:46+00:00,"We should make sure, the project generated with archetype can be actually built to avoid regressions like:



CAMEL-14234
CAMEL-15525
CAMEL-14142



This can be done with maven-archetype-plugin:integration-test goal.",bedla:1600041706:2020-09-14T08:01:46.688+0000:1600041706:2020-09-14T08:01:46.688+0000:Merged to master with [364a8ce88b24e7e21b2f11238c7defa4110da119|https://github.com/apache/camel/commit/364a8ce88b24e7e21b2f11238c7defa4110da119]. One failing test will be fixed with CAMEL-15528
0,CAMEL-15526,Bug,Minor,3.4.2,None,"
None
",Resolved,Fixed,"3.6.0, 3.4.5",Andrea Cosentino,Dinesh,0,1,2020-09-12 13:42:58+00:00,2020-09-25 18:09:12+00:00,"Hi,


When consuming Gzip file from S3 using AWS2-S3 component, file not downlaoding properly;


Same code working for AWS-S3, after upgrading to AWS2-S3, this code not working.


 


Task:
 1. Download ""myfile.csv.gzip"" file from S3.


2. GUnzip file and send to processor.
 3. Processor will send file to http end point using multipart upload.


Here is the code used.


 


{{}}


from(""aws2-s3://mybucket?amazonS3Client=#amazonS3Client&deleteAfterRead=false&delay=5000&synchronous=true&includeBody=true&autocloseBody=false&prefix=myfile.csv.gz"")


{{ .unmarshal().gzipDeflater()}}


{{ .process(@Override public void process(Exchange exchange) throws Exception {}}


{{ MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();
 String filename = exchange.getIn().getHeader(AWS2S3Constants.KEY, String.class);
 String body = exchange.getIn().getBody(String.class);
 ContentBody cd = new InputStreamBody(new ByteArrayInputStream(body.getBytes()), ContentType.MULTIPART_FORM_DATA, ""temp.csv"");
 multipartEntityBuilder.addPart(""file"", cd);
 System.out.println(cd);
 exchange.getOut().setBody(multipartEntityBuilder.build())
 .to(""direct:httproute"");}}


{{}}


Stack Trace:


Stack Trace
[main] WARN software.amazon.awssdk.profiles.internal.ProfileFileReader - Ignoring profile 'plugins' on line 6 because it did not start with 'profile ' and it was not 'default'.
[main] INFO org.apache.camel.support.LRUCacheFactory - Detected and using LRUCacheFactory: camel-caffeine-lrucache
[main] INFO org.apache.camel.component.http.HttpComponent - Created ClientConnectionManager org.apache.http.impl.conn.PoolingHttpClientConnectionManager@1b73be9f
[main] INFO org.apache.camel.component.http.HttpComponent - Created ClientConnectionManager org.apache.http.impl.conn.PoolingHttpClientConnectionManager@35a9782c
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.2 (camel-1) is starting
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Using HealthCheck: camel-health
[main] INFO org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route1 started and consuming from: aws2-s3://mybucket
[main] INFO org.apache.camel.impl.engine.InternalRouteStartupManager - Route: route2 started and consuming from: direct://httproute
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Total 3 routes, of which 3 are started
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.4.2 (camel-1) started in 1.496 seconds
[Camel (camel-1) thread #1 - aws2-s3://mybucket] INFO consuming - Consumer Fired!
[Camel (camel-1) thread #1 - aws2-s3://mybucket] INFO route1 - Replay Message Sent to file:s3out input_2020-07-01-07-20-31-796_0.csv.gz
[Camel (camel-1) thread #1 - aws2-s3://mybucket] ERROR org.apache.camel.processor.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: ID-DGHANTA-Mac-1599955541230-0-1 on ExchangeId: ID-DGHANTA-Mac-1599955541230-0-1). Exhausted after delivery attempt: 1 caught: java.util.zip.ZipException: Not in GZIP format
Message History (complete message history is disabled)
---------------------------------------------------------------------------------------------------------------------------------------
RouteId ProcessorId Processor Elapsed (ms)
[route1 ] [route1 ] [from[aws2-s3://mybucket?amazonS3Client=%23] [ 250]
 ...
[route1 ] [unmarshal1 ] [unmarshal[org.apache.camel.model.dataformat.GzipDataFormat@d41f816] ] [ 0]
Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.util.zip.ZipException: Not in GZIP format
 at java.util.zip.GZIPInputStream.readHeader(GZIPInputStream.java:165)
 at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:79)
 at java.util.zip.GZIPInputStream.<init>(GZIPInputStream.java:91)
 at org.apache.camel.dataformat.deflater.GzipDeflaterDataFormat.unmarshal(GzipDeflaterDataFormat.java:62)
 at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:64)
 at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)
 at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)
 at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
 at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
 at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
 at org.apache.camel.component.aws2.s3.AWS2S3Consumer.processBatch(AWS2S3Consumer.java:200)
 at org.apache.camel.component.aws2.s3.AWS2S3Consumer.poll(AWS2S3Consumer.java:113)
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106)
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 at java.lang.Thread.run(Thread.java:748)



Regards,


Dinesh


{{}}",edingha:1599927725:2020-09-13T00:22:05.530+0000:1599927725:2020-09-13T00:22:05.530+0000:Updated Stack trace.
0,CAMEL-15525,Bug,Minor,"3.4.3, 3.5.0","3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-09-12 07:13:25+00:00,2020-09-12 22:06:28+00:00,"When you generate a project using the command below, the main class on the pom file does not match the actual pom file generated. 




mvn archetype:generate -B -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-java -DarchetypeVersion=3.4.3 -DgroupId=camel-passo-a-passo -DartifactId=primeiro-app-camel -Dversion=1.0.0-SNAPSHOT -Dpackage=primeiro.app.camel




On the pom.xml: 




<configuration>
          <logClasspath>true</logClasspath>
          <mainClass>primeiro.app.camel.MainApp</mainClass>
</configuration>




On the project: 




find src -iname '*.java'
src/main/java/primeiro/app/camel/MainApp.java
src/main/java/primeiro/app/camel/MyRouteBuilder.java",orpiske:1599874460:2020-09-12T09:34:20.441+0000:1599874460:2020-09-12T09:34:20.441+0000:Fix verified locally. Should be available on the next releases.
0,CAMEL-15524,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-09-11 12:35:58+00:00,2020-09-12 22:05:17+00:00,"The camel-caffeine component uri now has a path param that is used to set the cache name:


    caffeine-cache://cacheName[?options]


but the param is never taken into account and if you want to use a pre-configured cache from the registry, you need to add an additional option, like:


     caffeine-cache://cacheName?cache=#myCache


I think we can reuse the cacheName path param to lookup a cache from the registry and if not found, fall-back to creating an embedded one.",
0,CAMEL-15523,Task,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Andrea Cosentino,0,1,2020-09-11 05:47:19+00:00,2023-08-09 09:23:43+00:00,No Desc,
0,CAMEL-15522,Bug,Minor,3.4.3,3.8.0,"
None
",Resolved,Abandoned,3.8.0,Unassigned,Andrii Melashchenko,0,3,2020-09-11 05:03:07+00:00,2020-12-17 15:07:57+00:00,"I'm trying to configure Camel AWS Xray tracing via this code 


Route:


 




<bean id=""xRayStrategy"" class=""org.apache.camel.component.aws.xray.TraceAnnotatedTracingStrategy"" />
<bean id=""aws-xray-tracer"" class=""org.apache.camel.component.aws.xray.XRayTracer"" >
    <property name=""tracingStrategy"" ref=""xRayStrategy""/>
</bean>

<camelContext id=""zedoc"" trace=""true"" errorHandlerRef=""zedocRetryErrorHandler""
              xmlns=""http://camel.apache.org/schema/spring"">
    <jmxAgent id=""agent""/>
    <errorHandler id=""zedocRetryErrorHandler"" type=""DeadLetterChannel""
                  deadLetterUri=""file://{{zedoc.dead.letter.folder}}/""
                  useOriginalMessage=""true""
                  onPrepareFailureRef=""failureProcessor"">
        <redeliveryPolicy maximumRedeliveries=""5""
                          retryAttemptedLogLevel=""WARN""
                          backOffMultiplier=""2""
                          useExponentialBackOff=""true""/>
    </errorHandler>

    <route autoStartup=""true"" id=""fileToMllpServer"">
        <from uri=""file://{{zedoc.hl7.folder}}?delete=true""/>
        <convertBodyTo type=""java.lang.String""/>
        <log message=""The Message body is: ${body}""/>
        <to uri=""netty:tcp://{{zedoc.tcp.host}}:{{zedoc.tcp.port}}?sync=false&amp;decoders=#hl7decoder&amp;encoders=#hl7encoder&amp;ssl=true&amp;sslContextParameters=#sslContextParameters""/>
    </route>
    <route autoStartup=""true"" id=""mllpServer"">
        <from uri=""netty:tcp://{{zedoc.tcp.host}}:{{zedoc.tcp.port}}?sync=false&amp;decoders=#hl7decoder&amp;encoders=#hl7encoder&amp;needClientAuth=true&amp;ssl=true&amp;sslContextParameters=#sslContextParameters""/>
        <log message=""The Message body is: ${body}""/>
        <bean ref=""textToJms"" method=""processADT""/>
        <log message=""The Message body is: ${body}""/>

        <to uri=""amqp:queue:{{zedoc.mq.org}}.{{zedoc.mq.queue}}""/>
        <!--<to id=""_kafka1"" uri=""kafka:{{producer.topic}}""/>-->
    </route>
</camelContext>




POM:




<!-- aws x-ray -->
 <dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-aws-xray</artifactId>
    <version>3.4.3</version>
</dependency>

<dependency>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-xray-recorder-sdk-core</artifactId>
    <version>2.7.1</version>
</dependency>
<dependency>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-xray-recorder-sdk-aws-sdk</artifactId>
    <version>2.7.1</version>
</dependency>




 


Processor:




public class ADT01Processor {
    final Logger logger = LoggerFactory.getLogger(ADT01Processor.class);
    @Handler
    public String processADT(Exchange exchange) throws Exception {
        ADT_A01 inMsg = exchange.getIn().getBody(ADT_A01.class);
        Terser t = new Terser(inMsg);

        // create JSON

        Patient p = new Patient();

        String recipientId = t.get(""/.PID-3-1"");
        if(recipientId == null || recipientId.isEmpty()){
            throw new Exception(""HL7 don't have PID-3-1 that used for mandatory recipientId field"");
        }
        Identifier id = new Identifier(recipientId, recipientId);
        p.addIdetifier(id);

        String name = t.get(""/.PID-5-2"");
        Name n = new Name(name);
        p.addName(n);

        EnrollPatientA01 a01 = new EnrollPatientA01(p);

        MQMessage outMsg = new MQMessage(""fakeGroup"");
        outMsg.setRawMessage(a01);

        // stringify
        Gson gson = new Gson();
        String stringifyied = gson.toJson(outMsg);
        logger.info(stringifyied);
        return stringifyied;
    }
}




 


And got an error


java.lang.IllegalStateException: Failed to load ApplicationContext
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:341) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:346) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:341) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) ~[na:na]
 at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) ~[na:na]
 at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655) ~[na:na]
 at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ~[na:na]
 at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[na:na]
 at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312) ~[na:na]
 at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735) ~[na:na]
 at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734) ~[na:na]
 at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658) ~[na:na]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:340) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:263) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:256) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at java.base/java.util.Optional.orElseGet(Optional.java:369) ~[na:na]
 at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:255) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:108) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:107) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:71) ~[junit-jupiter-engine-5.6.2.jar:5.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1541) ~[na:na]
 at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1541) ~[na:na]
 at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51) ~[junit-platform-engine-1.6.2.jar:1.6.2]
 at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220) ~[junit-platform-launcher-1.3.1.jar:1.3.1]
 at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188) ~[junit-platform-launcher-1.3.1.jar:1.3.1]
 at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202) ~[junit-platform-launcher-1.3.1.jar:1.3.1]
 at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181) ~[junit-platform-launcher-1.3.1.jar:1.3.1]
 at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.3.1.jar:1.3.1]
 at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150) ~[surefire-junit-platform-2.22.2.jar:2.22.2]
 at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124) ~[surefire-junit-platform-2.22.2.jar:2.22.2]
 at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384) ~[surefire-booter-2.22.2.jar:2.22.2]
 at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345) ~[surefire-booter-2.22.2.jar:2.22.2]
 at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126) ~[surefire-booter-2.22.2.jar:2.22.2]
 at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418) ~[surefire-booter-2.22.2.jar:2.22.2]
 Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route mllpServer at: >>> Bean[ref:textToJms method:processADT] <<< in route: Route(mllpServer)[From[netty:tcp://zedoc.tcp.host:{{zedo... because of class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app')
 at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:393) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:368) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:342) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2612) ~[camel-base-3.4.3.jar:3.4.3]
 at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.4.3.jar:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2435) ~[camel-base-3.4.3.jar:3.4.3]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.4.3.jar:3.4.3]
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.3.jar:3.4.3]
 at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.3.jar:3.4.3]
 at org.apache.camel.spring.CamelContextFactoryBean.start(CamelContextFactoryBean.java:381) ~[camel-spring-3.4.3.jar:3.4.3]
 at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:428) ~[camel-spring-3.4.3.jar:3.4.3]
 at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:96) ~[camel-spring-3.4.3.jar:3.4.3]
 at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE]
 at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE]
 at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE]
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE]
 at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) ~[spring-boot-test-2.3.3.RELEASE.jar:2.3.3.RELEASE]
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE]
 ... 65 common frames omitted
 Caused by: java.lang.ClassCastException: class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app')
 at org.apache.camel.component.aws.xray.TraceAnnotatedTracingStrategy.wrapProcessorInInterceptors(TraceAnnotatedTracingStrategy.java:54) ~[camel-aws-xray-3.5.0.jar:3.5.0]
 at org.apache.camel.processor.channel.DefaultChannel.initChannel(DefaultChannel.java:243) ~[camel-base-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.ProcessorReifier.wrapChannel(ProcessorReifier.java:585) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.ProcessorReifier.wrapChannel(ProcessorReifier.java:544) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.ProcessorReifier.wrapProcessor(ProcessorReifier.java:540) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:782) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:511) ~[camel-core-engine-3.4.3.jar:3.4.3]
 at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:391) ~[camel-core-engine-3.4.3.jar:3.4.3]
 ... 91 common frames omitted


[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 5.388 s <<< FAILURE! - in com.zedoc.integration.hl7.ZedocIntegartionTest
[ERROR] contextLoads Time elapsed: 0.001 s <<< ERROR!
 java.lang.IllegalStateException: Failed to load ApplicationContext
 Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route mllpServer at: >>> Bean[ref:textToJms method:processADT] <<< in route: Route(mllpServer)[From[netty:tcp://zedoc.tcp.host:{{zedo... because of class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app')
 Caused by: java.lang.ClassCastException: class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app')","acosentino:1599772155:2020-09-11T05:09:15.786+0000:1599772155:2020-09-11T05:09:15.786+0000:The version of aws xray used in camel is 2.6.1, can you please try with that version as first step?
IronAlan:1599773383:2020-09-11T05:29:43.947+0000:1599773383:2020-09-11T05:29:43.947+0000:{code:java}
<dependency>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-xray-recorder-sdk-core</artifactId>
    <version>2.6.1</version>
</dependency>
<dependency>
    <groupId>com.amazonaws</groupId>
    <artifactId>aws-xray-recorder-sdk-aws-sdk</artifactId>
    <version>2.6.1</version>
</dependency>
{code}

same error
acosentino:1599773884:2020-09-11T05:38:04.774+0000:1599773884:2020-09-11T05:38:04.774+0000:There is this line that makes me think you have a mixing in your classpath

at org.apache.camel.component.aws.xray.TraceAnnotatedTracingStrategy.wrapProcessorInInterceptors(TraceAnnotatedTracingStrategy.java:54) ~[camel-aws-xray-3.5.0.jar:3.5.0]

it should be 3.4.3
IronAlan:1599774656:2020-09-11T05:50:56.280+0000:1599774656:2020-09-11T05:50:56.280+0000:yep

java.lang.IllegalStateException: Failed to load ApplicationContext at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:98) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassBasedTestDescriptor.java:341) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:346) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassBasedTestDescriptor.java:341) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) ~[na:na] at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) ~[na:na] at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655) ~[na:na] at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ~[na:na] at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) ~[na:na] at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312) ~[na:na] at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735) ~[na:na] at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734) ~[na:na] at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658) ~[na:na] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:340) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:263) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:256) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at java.base/java.util.Optional.orElseGet(Optional.java:369) ~[na:na] at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:255) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:108) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:107) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:71) ~[junit-jupiter-engine-5.6.2.jar:5.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75) ~[junit-platform-engine-1.6.2.jar:1.6.2] at java.base/java.util.ArrayList.forEach(ArrayList.java:1541) ~[na:na] at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) ~[junit-platform-engine-1.6.2.jar:1.6.2] at java.base/java.util.ArrayList.forEach(ArrayList.java:1541) ~[na:na] at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51) ~[junit-platform-engine-1.6.2.jar:1.6.2] at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220) ~[junit-platform-launcher-1.3.1.jar:1.3.1] at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188) ~[junit-platform-launcher-1.3.1.jar:1.3.1] at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202) ~[junit-platform-launcher-1.3.1.jar:1.3.1] at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181) ~[junit-platform-launcher-1.3.1.jar:1.3.1] at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) ~[junit-platform-launcher-1.3.1.jar:1.3.1] at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150) ~[surefire-junit-platform-2.22.2.jar:2.22.2] at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124) ~[surefire-junit-platform-2.22.2.jar:2.22.2] at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384) ~[surefire-booter-2.22.2.jar:2.22.2] at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345) ~[surefire-booter-2.22.2.jar:2.22.2] at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126) ~[surefire-booter-2.22.2.jar:2.22.2] at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418) ~[surefire-booter-2.22.2.jar:2.22.2] Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route mllpServer at: >>> Bean[ref:textToJms method:processADT] <<< in route: Route(mllpServer)[From[netty:tcp://\{{zedoc.tcp.host}}:\{{zedo... because of class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app') at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:393) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:368) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:342) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2612) ~[camel-base-3.4.3.jar:3.4.3] at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[camel-api-3.4.3.jar:3.4.3] at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2435) ~[camel-base-3.4.3.jar:3.4.3] at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[camel-api-3.4.3.jar:3.4.3] at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.3.jar:3.4.3] at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.3.jar:3.4.3] at org.apache.camel.spring.CamelContextFactoryBean.start(CamelContextFactoryBean.java:381) ~[camel-spring-3.4.3.jar:3.4.3] at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:428) ~[camel-spring-3.4.3.jar:3.4.3] at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:96) ~[camel-spring-3.4.3.jar:3.4.3] at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:404) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:361) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:898) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:554) ~[spring-context-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.3.3.RELEASE.jar:2.3.3.RELEASE] at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120) ~[spring-boot-test-2.3.3.RELEASE.jar:2.3.3.RELEASE] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124) ~[spring-test-5.2.8.RELEASE.jar:5.2.8.RELEASE] ... 65 common frames omitted Caused by: java.lang.ClassCastException: class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app') at org.apache.camel.component.aws.xray.TraceAnnotatedTracingStrategy.wrapProcessorInInterceptors(TraceAnnotatedTracingStrategy.java:53) ~[camel-aws-xray-3.4.3.jar:3.4.3] at org.apache.camel.processor.channel.DefaultChannel.initChannel(DefaultChannel.java:243) ~[camel-base-3.4.3.jar:3.4.3] at org.apache.camel.reifier.ProcessorReifier.wrapChannel(ProcessorReifier.java:585) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.ProcessorReifier.wrapChannel(ProcessorReifier.java:544) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.ProcessorReifier.wrapProcessor(ProcessorReifier.java:540) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:782) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:511) ~[camel-core-engine-3.4.3.jar:3.4.3] at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:391) ~[camel-core-engine-3.4.3.jar:3.4.3] ... 91 common frames omitted[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.363 s <<< FAILURE! - in com.zedoc.integration.hl7.ZedocIntegartionTest [ERROR] contextLoads Time elapsed: 0.001 s <<< ERROR! java.lang.IllegalStateException: Failed to load ApplicationContext Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route mllpServer at: >>> Bean[ref:textToJms method:processADT] <<< in route: Route(mllpServer)[From[netty:tcp://{{zedoc.tcp.host}}:{{zedo... because of class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app') Caused by: java.lang.ClassCastException: class org.apache.camel.processor.WrapProcessor cannot be cast to class org.apache.camel.component.bean.BeanProcessor (org.apache.camel.processor.WrapProcessor and org.apache.camel.component.bean.BeanProcessor are in unnamed module of loader 'app')
davsclaus:1601264623:2020-09-28T11:43:43.947+0000:1601264679:2020-09-28T11:44:39.690+0000:How do you run this, as it smells about some classloading problems
davsclaus:1602545550:2020-10-13T07:32:30.062+0000:1602545550:2020-10-13T07:32:30.062+0000:Can you put a reproducer and attach as either .zip file to this ticket, or put the reproducer on github or someplace for us to use to reproduce this issue."
0,CAMEL-15521,Bug,Major,3.4.3,"3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Andrea Cosentino,Paolo Patierno,0,3,2020-09-10 20:15:59+00:00,2020-09-11 05:58:15+00:00,"Hi,


I am using Apache Camel 3.4.3 for creating a route involving InfluxDB.


While trying to create the connection bean with the following code:


InfluxDB influxDB = InfluxDBFactory.connect(""http://localhost:8086"");
influxDB.query(new Query(""CREATE DATABASE "" + ""drivers"", ""drivers""));


CamelContext camelContext = new DefaultCamelContext();
camelContext.getRegistry().bind(""connectionBean"", influxDB);


I get the following exception on the first line while trying to connect to the InfluxDB server:


WARNING: An illegal reflective access operation has occurredWARNING: An illegal reflective access operation has occurredWARNING: Illegal reflective access by retrofit2.Platform (file:/home/ppatiern/.m2/repository/com/squareup/retrofit2/retrofit/2.8.1/retrofit-2.8.1.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)WARNING: Please consider reporting this to the maintainers of retrofit2.PlatformWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operationsWARNING: All illegal access operations will be denied in a future releaseException in thread ""main"" java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt) at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt:40) at okhttp3.logging.HttpLoggingInterceptor.<init>(HttpLoggingInterceptor.kt) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:146) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:120) at org.influxdb.impl.InfluxDBImpl.<init>(InfluxDBImpl.java:187) at org.influxdb.InfluxDBFactory.connect(InfluxDBFactory.java:30) at io.ppatierno.formula1.F1KafkaInfluxDBApp.main(F1KafkaInfluxDBApp.java:17)Caused by: java.lang.ClassNotFoundException: kotlin.jvm.internal.Intrinsics at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581) at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522) ... 8 more","davsclaus:1599770667:2020-09-11T04:44:27.951+0000:1599770667:2020-09-11T04:44:27.951+0000:I think that is a WARNING from Java 11 itself. 

Do you see something more, that is an exception causing the app/camel to fail to start/run ?
And how do you run this
acosentino:1599774086:2020-09-11T05:41:26.968+0000:1599774086:2020-09-11T05:41:26.968+0000:The warning is related to this [https://github.com/square/retrofit/issues/3341]

But the error is related to logging-interceptor library, we may need to downgrade to 3.x and avoid using 4.x"
0,CAMEL-15520,Task,Minor,None,None,"
None
",Resolved,Fixed,3.x,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-09-10 11:11:27+00:00,2023-05-27 07:56:44+00:00,"Creating a task to map, discuss and clean the warnings about usage of deprecated methods, classes and types on the code.","orpiske:1599708677:2020-09-10T11:31:17.844+0000:1599708677:2020-09-10T11:31:17.844+0000:Changing from getOut to getMessage or getIn cause change of behavior: 

camel-reactor: ReactorStreamsServiceTest.java:[220,29]
camel-rxjava: RxJavaStreamsServiceTest.java:[195,13]


"
0,CAMEL-15519,Wish,Minor,3.4.2,,"
None
",Closed,Fixed,None,Andrea Cosentino,Emmerson,0,2,2020-09-10 10:56:21+00:00,2020-09-15 00:45:54+00:00,"Hello,


I am testing kubernetes-pods consumer and in the first test it works fine, then I run a kubernetes job (this create internally a Pod) and I get a ""No type converter available"" exception in the console.


 


The pod consumer source code is here: https://github.com/Emmerson-Miranda/camel/blob/master/camel3-cdi/cdi-k8s-pocs/src/main/java/edu/emmerson/camel/k8s/jobs/camel_k8s_jobs/KubernetesRouteConsumerPods.java


 


The pod creation source code is here https://github.com/Emmerson-Miranda/camel/blob/master/camel3-cdi/cdi-k8s-pocs/src/main/java/edu/emmerson/camel/k8s/jobs/camel_k8s_jobs/KubernetesCreateJob.java


 


 


Bellow the stacktrace 


[ https://192.168.64.3:8443/...] KubernetesRouteConsumerPods INFO KEEPING pod name: job-1599734811571-rls7l
[ XNIO-1 task-1] UndertowConsumer WARN Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: io.fabric8.kubernetes.api.model.batch.Job to the required type: java.nio.ByteBuffer with value Job(apiVersion=batch/v1, kind=Job, metadata=ObjectMeta(annotations=null, clusterName=null, creationTimestamp=2020-09-10T10:46:51Z, deletionGracePeriodSeconds=null, deletionTimestamp=null, finalizers=[], generateName=null, generation=null, labels={app=jobFromCamelApp, jobLabelKey1=value1, jobLabelKey2=value2}, managedFields=[ManagedFieldsEntry(apiVersion=batch/v1, fieldsType=FieldsV1, fieldsV1=FieldsV1(additionalProperties={f:metadata={f:labels={.={}, f:app={}, f:jobLabelKey1={}, f:jobLabelKey2={}}}, f:spec={f:activeDeadlineSeconds={}, f:backoffLimit={}, f:completions={}, f:parallelism={}, f:template={f:metadata={f:annotations={.={}, f:jobMetadataAnnotation1={}}, f:labels={.={}, f:app={}, f:orderId={}, f:podLabelKey1={}, f:podLabelKey2={}}}, f:spec={f:containers={k:

{""name"":""pi""}

={.={}, f:command={}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}}}, f:dnsPolicy={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:terminationGracePeriodSeconds={}}}, f:ttlSecondsAfterFinished={}}}), manager=okhttp, operation=Update, time=2020-09-10T10:46:51Z, additionalProperties={})], name=job-1599734811571, namespace=default, ownerReferences=[], resourceVersion=1688691, selfLink=/apis/batch/v1/namespaces/default/jobs/job-1599734811571, uid=df5c8ed7-1436-4c57-854a-5703fa3baed8, additionalProperties={}), spec=JobSpec(activeDeadlineSeconds=7200, backoffLimit=6, completions=1, manualSelector=null, parallelism=1, selector=LabelSelector(matchExpressions=[], matchLabels={controller-uid=df5c8ed7-1436-4c57-854a-5703fa3baed8}, additionalProperties={}), template=PodTemplateSpec(metadata=ObjectMeta(annotations={jobMetadataAnnotation1=random value}, clusterName=null, creationTimestamp=null, deletionGracePeriodSeconds=null, deletionTimestamp=null, finalizers=[], generateName=null, generation=null, labels={app=podFromCamelApp, controller-uid=df5c8ed7-1436-4c57-854a-5703fa3baed8, job-name=job-1599734811571, orderId=54702d2c-554b-4fa8-91ef-9e4e7abfe055, podLabelKey1=value1, podLabelKey2=value2}, managedFields=[], name=null, namespace=null, ownerReferences=[], resourceVersion=null, selfLink=null, uid=null, additionalProperties={}), spec=PodSpec(activeDeadlineSeconds=null, affinity=null, automountServiceAccountToken=null, containers=[Container(args=[], command=[echo, Job created from Apache Camel code at Thu Sep 10 11:46:51 BST 2020], env=[], envFrom=[], image=perl, imagePullPolicy=Always, lifecycle=null, livenessProbe=null, name=pi, ports=[], readinessProbe=null, resources=ResourceRequirements(limits=null, requests=null, additionalProperties={}), securityContext=null, startupProbe=null, stdin=null, stdinOnce=null, terminationMessagePath=/dev/termination-log, terminationMessagePolicy=File, tty=null, volumeDevices=[], volumeMounts=[], workingDir=null, additionalProperties={})], dnsConfig=null, dnsPolicy=ClusterFirst, enableServiceLinks=null, ephemeralContainers=[], hostAliases=[], hostIPC=null, hostNetwork=null, hostPID=null, hostname=null, imagePullSecrets=[], initContainers=[], nodeName=null, nodeSelector=null, overhead=null, preemptionPolicy=null, priority=null, priorityClassName=null, readinessGates=[], restartPolicy=OnFailure, runtimeClassName=null, schedulerName=default-scheduler, securityContext=PodSecurityContext(fsGroup=null, fsGroupChangePolicy=null, runAsGroup=null, runAsNonRoot=null, runAsUser=null, seLinuxOptions=null, supplementalGroups=[], sysctls=[], windowsOptions=null, additionalProperties={}), serviceAccount=null, serviceAccountName=null, shareProcessNamespace=null, subdomain=null, terminationGracePeriodSeconds=30, tolerations=[], topologySpreadConstraints=[], volumes=[], additionalProperties={}), additionalProperties={}), ttlSecondsAfterFinished=null, additionalProperties={}), status=JobStatus(active=null, completionTime=null, conditions=[], failed=null, startTime=null, succeeded=null, additionalProperties={}), additionalProperties={})]
org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: io.fabric8.kubernetes.api.model.batch.Job to the required type: java.nio.ByteBuffer with value Job(apiVersion=batch/v1, kind=Job, metadata=ObjectMeta(annotations=null, clusterName=null, creationTimestamp=2020-09-10T10:46:51Z, deletionGracePeriodSeconds=null, deletionTimestamp=null, finalizers=[], generateName=null, generation=null, labels={app=jobFromCamelApp, jobLabelKey1=value1, jobLabelKey2=value2}, managedFields=[ManagedFieldsEntry(apiVersion=batch/v1, fieldsType=FieldsV1, fieldsV1=FieldsV1(additionalProperties={f:metadata={f:labels={.={}, f:app={}, f:jobLabelKey1={}, f:jobLabelKey2={}}}, f:spec={f:activeDeadlineSeconds={}, f:backoffLimit={}, f:completions={}, f:parallelism={}, f:template={f:metadata={f:annotations={.={}, f:jobMetadataAnnotation1={}}, f:labels={.={}, f:app={}, f:orderId={}, f:podLabelKey1={}, f:podLabelKey2={}}}, f:spec={f:containers={k:

{""name"":""pi""}

={.={}, f:command={}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}}}, f:dnsPolicy={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:terminationGracePeriodSeconds={}}}, f:ttlSecondsAfterFinished={}}}), manager=okhttp, operation=Update, time=2020-09-10T10:46:51Z, additionalProperties={})], name=job-1599734811571, namespace=default, ownerReferences=[], resourceVersion=1688691, selfLink=/apis/batch/v1/namespaces/default/jobs/job-1599734811571, uid=df5c8ed7-1436-4c57-854a-5703fa3baed8, additionalProperties={}), spec=JobSpec(activeDeadlineSeconds=7200, backoffLimit=6, completions=1, manualSelector=null, parallelism=1, selector=LabelSelector(matchExpressions=[], matchLabels={controller-uid=df5c8ed7-1436-4c57-854a-5703fa3baed8}, additionalProperties={}), template=PodTemplateSpec(metadata=ObjectMeta(annotations={jobMetadataAnnotation1=random value}, clusterName=null, creationTimestamp=null, deletionGracePeriodSeconds=null, deletionTimestamp=null, finalizers=[], generateName=null, generation=null, labels={app=podFromCamelApp, controller-uid=df5c8ed7-1436-4c57-854a-5703fa3baed8, job-name=job-1599734811571, orderId=54702d2c-554b-4fa8-91ef-9e4e7abfe055, podLabelKey1=value1, podLabelKey2=value2}, managedFields=[], name=null, namespace=null, ownerReferences=[], resourceVersion=null, selfLink=null, uid=null, additionalProperties={}), spec=PodSpec(activeDeadlineSeconds=null, affinity=null, automountServiceAccountToken=null, containers=[Container(args=[], command=[echo, Job created from Apache Camel code at Thu Sep 10 11:46:51 BST 2020], env=[], envFrom=[], image=perl, imagePullPolicy=Always, lifecycle=null, livenessProbe=null, name=pi, ports=[], readinessProbe=null, resources=ResourceRequirements(limits=null, requests=null, additionalProperties={}), securityContext=null, startupProbe=null, stdin=null, stdinOnce=null, terminationMessagePath=/dev/termination-log, terminationMessagePolicy=File, tty=null, volumeDevices=[], volumeMounts=[], workingDir=null, additionalProperties={})], dnsConfig=null, dnsPolicy=ClusterFirst, enableServiceLinks=null, ephemeralContainers=[], hostAliases=[], hostIPC=null, hostNetwork=null, hostPID=null, hostname=null, imagePullSecrets=[], initContainers=[], nodeName=null, nodeSelector=null, overhead=null, preemptionPolicy=null, priority=null, priorityClassName=null, readinessGates=[], restartPolicy=OnFailure, runtimeClassName=null, schedulerName=default-scheduler, securityContext=PodSecurityContext(fsGroup=null, fsGroupChangePolicy=null, runAsGroup=null, runAsNonRoot=null, runAsUser=null, seLinuxOptions=null, supplementalGroups=[], sysctls=[], windowsOptions=null, additionalProperties={}), serviceAccount=null, serviceAccountName=null, shareProcessNamespace=null, subdomain=null, terminationGracePeriodSeconds=30, tolerations=[], topologySpreadConstraints=[], volumes=[], additionalProperties={}), additionalProperties={}), ttlSecondsAfterFinished=null, additionalProperties={}), status=JobStatus(active=null, completionTime=null, conditions=[], failed=null, startTime=null, succeeded=null, additionalProperties={}), additionalProperties={})
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:216) ~[camel-base-3.4.2.jar:3.4.2]
 at org.apache.camel.impl.converter.CoreTypeConverterRegistry.mandatoryConvertTo(CoreTypeConverterRegistry.java:168) ~[camel-base-3.4.2.jar:3.4.2]
 at org.apache.camel.component.undertow.UndertowConsumer.sendResponse(UndertowConsumer.java:259) ~[camel-undertow-3.4.2.jar:3.4.2]
 at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:231) [camel-undertow-3.4.2.jar:3.4.2]
 at io.undertow.server.Connectors.executeRootHandler(Connectors.java:370) [undertow-core-2.1.2.Final.jar:2.1.2.Final]
 at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830) [undertow-core-2.1.2.Final.jar:2.1.2.Final]
 at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35) [jboss-threads-3.1.0.Final.jar:3.1.0.Final]
 at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019) [jboss-threads-3.1.0.Final.jar:3.1.0.Final]
 at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558) [jboss-threads-3.1.0.Final.jar:3.1.0.Final]
 at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1423) [jboss-threads-3.1.0.Final.jar:3.1.0.Final]
 at java.lang.Thread.run(Thread.java:748) [?:1.8.0_252]
[ https://192.168.64.3:8443/...] KubernetesRouteConsumerPods INFO Got event from Pod: job-1599734811571-rls7l, action: MODIFIED Phase: Pending","emmerson:1599706704:2020-09-10T10:58:24.510+0000:1599706704:2020-09-10T10:58:24.510+0000:Is there a way to avoid this without wait for a new camel version ?

Thanks
acosentino:1599710379:2020-09-10T11:59:39.689+0000:1599710379:2020-09-10T11:59:39.689+0000:Need to investigate the problem 
emmerson:1600101954:2020-09-15T00:45:54.401+0000:1600101954:2020-09-15T00:45:54.401+0000:I fix that warning registering a custom converter.

https://github.com/Emmerson-Miranda/camel/blob/master/camel3-cdi/cdi-k8s-pocs/src/main/java/edu/emmerson/camel/k8s/jobs/camel_k8s_jobs/converters/JobToByteBufferConverter.java"
0,CAMEL-15518,Improvement,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Luca Burgazzoli,0,2,2020-09-09 13:07:13+00:00,2020-10-17 07:21:59+00:00,"The name of the configurer for the the ExtendedCamelContext is wrong as it uses the FQCN of the implementation class (org.apache.camel.impl.ExtendedCamelContext) instead of the interface one (org.apache.camel.ExtendedCamelContext).


Maybe the @Configurer annotation should allow to set the name of the factory file.","davsclaus:1599642100:2020-09-09T17:01:40.638+0000:1599642141:2020-09-09T17:02:21.194+0000:So in the pom.xml of the camel-core-engine you can do a mapping.

However to avoid OSGi split package problems then the generated configurer is moved into impl package

org.apache.camel.ExtendedCamelContext=org.apache.camel.impl.ExtendedCamelContext

However the service manifest file has in the wrong name.

lb:1599644607:2020-09-09T17:43:27.825+0000:1599644607:2020-09-09T17:43:27.825+0000:Yeah, wonder if we can add a parameter to the @Configurer to set the name of the configurer

{code:java}
@Configurer(""org.apache.camel.ExtendedCamelContext"")
org.apache.camel.impl.ExtendedCamelContext {
}
{code}

if not provided, the name of the class is used
davsclaus:1599646144:2020-09-09T18:09:04.261+0000:1599646144:2020-09-09T18:09:04.261+0000:Yeah well its even more special as that is not an annotation currently as it was a chicken-egg situation as you cant have camel-api generate configurer (you need camel-api built first).

So they are generated via pom.xml instructions in camel-core-engine. Where all the configurers are in core camel.

There is a fix in the maven plugin that generate the source as it already has a fqn=new fqn mapping where you can just say

<class>org.apache.camel.ExtendedCamelContext=org.apache.camel.impl.ExtendedCamelContext<class>

I fixed that and are rebuilding and testing before submitting a PR
davsclaus:1599647667:2020-09-09T18:34:27.457+0000:1599647667:2020-09-09T18:34:27.457+0000:There is a PR here
https://github.com/apache/camel/pull/4181

Unfortunately there are some regen files with it so there is a little bit of noise"
0,CAMEL-15517,New Feature,Minor,3.5.0,3.6.0,"
None
",Closed,Fixed,3.6.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-09-09 08:37:23+00:00,2020-09-09 11:51:14+00:00,"Currently, we only support producer on a single event. However, it will make sense to also add producing on events list as well",
0,CAMEL-15516,Test,Minor,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Alex Dettinger,Alex Dettinger,0,1,2020-09-08 14:11:44+00:00,2020-09-08 14:29:57+00:00,No Desc,
0,CAMEL-15515,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-08 12:38:13+00:00,2020-09-08 12:45:29+00:00,"We should deprecate basicPropertyBinding as it was a fail safe for 3.0 in the beginning to use old way of reflection based configuration.


But it has evolved and works fine now, so lets deprecate it, and remove it after the next LTS release.",
0,CAMEL-15514,Improvement,Minor,3.x,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Aljaž Plohl,0,2,2020-09-08 11:44:25+00:00,2020-09-09 12:18:29+00:00,"Upon using camel-rest-openapi component in a route, I have discovered that if an operationId is not defined in OpenApi specification the operation can not be called.


Since operationId is an optional parameter as defined by OpenApi 3 standard, I think that improving the component to be able to auto generate missing operationIds from operation path and http method would benefit users of this component.


As an example, you can find one published OpenApi specification that does not define operationIds: https://app.swaggerhub.com/apis/liferayinc/commerce-admin-catalog/v1.0#/info","Sonicsupremacy:1599536749:2020-09-08T11:45:49.387+0000:1599536749:2020-09-08T11:45:49.387+0000:I have created this issue to be able to submit a Github PR, as I have already implemented this improvement.
davsclaus:1599625109:2020-09-09T12:18:29.815+0000:1599625109:2020-09-09T12:18:29.815+0000:Thanks for reporting and the PR"
0,CAMEL-15513,Improvement,Trivial,None,,"
None
",Resolved,Information Provided,None,Unassigned,Terrien Jean-Yves,0,3,2020-09-08 08:50:18+00:00,2020-09-15 08:07:53+00:00,"in camel-any23 features the rdf4j-model and rdf4j-rio-api jars does not have symbolic name and version


<bundle dependency='true'>wrap:mvn:org.eclipse.rdf4j/rdf4j-model/${rdf4j-model-version}</bundle>
 <bundle dependency='true'>wrap:mvn:org.eclipse.rdf4j/rdf4j-rio-api/${rdf4j-rio-version}</bundle>


I propose to add them
 <bundle dependency='true'>wrap:mvn:org.eclipse.rdf4j/rdf4j-model/${rdf4j-model-version}$Bundle-SymbolicName=rdf4j-model&Bundle-Version=${rdf4j-model-version}</bundle>
 <bundle dependency='true'>wrap:mvn:org.eclipse.rdf4j/rdf4j-rio-api/${rdf4j-rio-version}$Bundle-SymbolicName=rdf4j-rio-api&Bundle-Version=${rdf4j-rio-version}</bundle>","acosentino:1599526946:2020-09-08T09:02:26.596+0000:1599526946:2020-09-08T09:02:26.596+0000:You're welcome to open a PR :)
davsclaus:1599531424:2020-09-08T10:17:04.552+0000:1599531424:2020-09-08T10:17:04.552+0000:Isnt this more of a karaf wrap ""problem"" that it can compute this information and show that as symbolic information. We use wrap in other places and dont do all that extra stuff. I suggest to take this up with Apache Karaf team to improve Karaf.
sekaijin:1600127843:2020-09-15T07:57:23.240+0000:1600127843:2020-09-15T07:57:23.240+0000:Thank
https://issues.apache.org/jira/browse/KARAF-6853?filter=-2
davsclaus:1600128473:2020-09-15T08:07:53.064+0000:1600128473:2020-09-15T08:07:53.064+0000:Thanks yeah lets make Karaf better in this regard."
0,CAMEL-15512,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2020-09-08 08:42:31+00:00,2020-09-08 10:46:05+00:00,"The RestConfigurationDefinition defines swagger as default API component to be used but since we have both swagger and openapi, we should remove the default and let Camel auto discover the component base on what it is on the classpath.",davsclaus:1599531880:2020-09-08T10:24:40.779+0000:1599531880:2020-09-08T10:24:40.779+0000:When regen spring boot then it will pickup this change
0,CAMEL-15511,Improvement,Major,"3.4.3, 3.5.0","3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Andrea Cosentino,Terrien Jean-Yves,0,1,2020-09-08 08:38:49+00:00,2020-09-08 09:12:28+00:00,"the camel-ahc feature add async-http-client and async-http-client-netty-utils with wrap protocol
 <bundle dependency='true'>wrap:mvn:org.asynchttpclient/async-http-client/${ahc-version}$Export-Package=org.asynchttpclient.*;version=${ahc-version}</bundle>
 <bundle dependency='true'>wrap:mvn:org.asynchttpclient/async-http-client-netty-utils/${ahc-version}$Export-Package=org.asynchttpclient.netty.util.*;version=${ahc-version}</bundle>


but sync-http-client.jar and async-http-client-netty-utils.jar are bundles with an osgi manifest


Bnd-LastModified: 1586331593189
Build-Jdk: 1.8.0_242
Built-By: slandelle
Bundle-Description: The Async Http Client (AHC) classes.
Bundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion: 2
Bundle-Name: Asynchronous Http Client
Bundle-SymbolicName: org.asynchttpclient.async-http-client
Bundle-Vendor: The AsyncHttpClient Project
Bundle-Version: 2.12.1
Created-By: Apache Maven Bundle Plugin
...
Manifest-Version: 1.0
Bnd-LastModified: 1586331569314
Build-Jdk: 1.8.0_242
Built-By: slandelle
Bundle-Description: The Async Http Client (AHC) library's purpose is to 
 allow Java applications to easily execute HTTP requests and async
 hronously process the response.
Bundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion: 2
Bundle-Name: Asynchronous Http Client Netty Utils
Bundle-SymbolicName: org.asynchttpclient.async-http-client-netty-utils
Bundle-Vendor: The AsyncHttpClient Project
Bundle-Version: 2.12.1
Created-By: Apache Maven Bundle Plugin
...


 


I propose to replace them with


<bundle dependency='true'>mvn:org.asynchttpclient/async-http-client/${ahc-version}/bundle>
 <bundle dependency='true'>mvn:org.asynchttpclient/async-http-client-netty-utils/${ahc-version}</bundle>


 


Bye","sekaijin:1599525786:2020-09-08T08:43:06.634+0000:1599525786:2020-09-08T08:43:06.634+0000:Sorry
The same goes with
wrap:mvn:com.typesafe.netty/netty-reactive-streams/$ \{netty-reactive-streams-version}"
0,CAMEL-15510,New Feature,Major,None,3.7.0,"
None
",Closed,Fixed,3.7.0,Omar Al-Safi,Omar Al-Safi,0,3,2020-09-08 07:48:15+00:00,2020-12-07 14:33:42+00:00,"It will be interesting to add a component that uses vertx kafka client as it supports async operations out of the box and most of the heavy lifting (e.g: implementation threads for consumer groups tasks) being done by the client, hence adding it as camel component shouldn't be a big task","omarsmak:1602117834:2020-10-08T08:43:54.082+0000:1602117834:2020-10-08T08:43:54.082+0000:by the way [~davsclaus] [~acosentino], do you think is worth to add this component to camel?
acosentino:1602117964:2020-10-08T08:46:04.857+0000:1602117964:2020-10-08T08:46:04.857+0000:I think it's a good alternative and it would be worth to have it, I don't know if we can have feature parity with the camel-kafka component, but it's just a matter of documentation in that case. I'm +1
davsclaus:1602118790:2020-10-08T08:59:50.857+0000:1602118790:2020-10-08T08:59:50.857+0000:Yeah sure and yeah its not a goal for them to have same feature set. Let this be the async vertx'ish component for camel.
omarsmak:1602119100:2020-10-08T09:05:00.659+0000:1602119100:2020-10-08T09:05:00.659+0000:Cool thanks for the input, then I will try to get out with version 3.7.0 
"
0,CAMEL-15509,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-09-08 07:00:43+00:00,2020-09-08 07:29:05+00:00,No Desc,
0,CAMEL-15508,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-09-07 15:01:25+00:00,2020-09-08 17:52:47+00:00,No Desc,
0,CAMEL-15507,Improvement,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,1,2020-09-07 14:52:25+00:00,2020-09-08 09:03:28+00:00,"Something I noticed with the vertx-http component, is that if the target endpoint returns an error response code, the way in which the error state is handled is slightly different to other Camel HTTP client components.


Usually the HTTP response code, response body etc are only set on the HttpOperationFailedException. camel-vertx-http does this, but it also sets them on the exchange just as if when the response is successful.


The behaviour should be consistent with the other components.",
0,CAMEL-15506,Bug,Minor,3.5.0,None,"
None
",Closed,Fixed,3.6.0,Alex Dettinger,Alex Dettinger,0,1,2020-09-07 13:55:59+00:00,2020-09-07 15:25:04+00:00,Do not use reflection on the annotation proxy in BeanAnnotationExpressionFactory. This is JVM implementation detail and some VMs (like SubstrateVM) may not implement it.,
0,CAMEL-15505,Improvement,Major,None,None,"

help-wanted

",Resolved,Fixed,3.6.0,Claus Ibsen,Peter Palaga,0,2,2020-09-07 13:38:46+00:00,2020-09-30 18:23:59+00:00,quickfixj-all depends on quickfixj-dictgenerator that does not seem to be required at runtime,"davsclaus:1599475585:2020-09-07T18:46:25.035+0000:1599475585:2020-09-07T18:46:25.035+0000:Contributions is welcome
https://camel.apache.org/manual/latest/contributing.html"
0,CAMEL-15504,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Jan Bednar,Jan Bednar,0,1,2020-09-07 01:23:35+00:00,2020-09-14 10:51:33+00:00,"Eg. Payara AS exports TransactionManager at JNDI.




java:appserver/TransactionManager




In Camel CDI is currently hardcoded JNDI




java:/TransactionManager




See https://stackoverflow.com/questions/55353883/apache-camel-in-payara-lookup-failed-for-java-transactionmanager


Current solution is to remap this with web.xml, it would be nice to find way to make this configurable directly in Apache Camel.


 





Alternate approach can be similar to Spring, which tries to resolve TransactionManager from following JNDI names - https://github.com/spring-projects/spring-framework/blob/master/spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java




public static final String DEFAULT_USER_TRANSACTION_NAME = ""java:comp/UserTransaction"";
public static final String[] FALLBACK_TRANSACTION_MANAGER_NAMES =			new String[] {""java:comp/TransactionManager"", ""java:appserver/TransactionManager"",					""java:pm/TransactionManager"", ""java:/TransactionManager""};",
0,CAMEL-15503,Improvement,Major,3.4.3,3.10.0,"
None
",Resolved,Fixed,3.10.0,Viral Gohel,Kate Hennessy,6,8,2020-09-05 15:42:25+00:00,2021-05-11 11:00:07+00:00,"Classes defined in RestDefinition type and outType are not generating correctly in openapi schema. This worked in the older older camel-swagger-java component, the schema was generating with all object definitions correctly. 


 


Please see this question on stack overflow for more details. 


https://stackoverflow.com/questions/63691670/apache-camel-camel-openapi-java-schema-definitions-not-generating-correctly


 


Sample project with the issue happening is attached.","vrlgohel:1599343358:2020-09-06T06:02:38.576+0000:1599343358:2020-09-06T06:02:38.576+0000:I will take a look into this.
Bassett:1600270895:2020-09-16T23:41:35.104+0000:1600270895:2020-09-16T23:41:35.104+0000:Is this the same as CAMEL-15158?
KateHennessy:1600333971:2020-09-17T17:12:51.857+0000:1600333971:2020-09-17T17:12:51.857+0000:Hi Stephen, this might be the same issue; the other Jira is a little vague so I'm not 100% sure they are talking about the component schema definitions here.
davsclaus:1602546244:2020-10-13T07:44:04.778+0000:1602546244:2020-10-13T07:44:04.778+0000:This can also be seen by comparing camel-swagger-java and camel-openapi-java in the unit test RestOpenApiReaderModelBookOrderTest


swagger outputs:
{code}
{
  ""swagger"" : ""2.0"",
  ""host"" : ""localhost:8080"",
  ""basePath"" : ""/api"",
  ""tags"" : [ {
    ""name"" : ""dude"",
    ""description"" : ""Book order service""
  } ],
  ""schemes"" : [ ""http"" ],
  ""paths"" : {
    ""/books/{id}"" : {
      ""get"" : {
        ""tags"" : [ ""dude"" ],
        ""summary"" : ""Find order by id"",
        ""operationId"" : ""verb1"",
        ""consumes"" : [ ""application/json"" ],
        ""produces"" : [ ""application/json"" ],
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""in"" : ""path"",
          ""description"" : ""The id of the order to get"",
          ""required"" : true,
          ""type"" : ""integer""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""The order returned"",
            ""responseSchema"" : {
              ""originalRef"" : ""BookOrder"",
              ""$ref"" : ""#/definitions/BookOrder""
            },
            ""schema"" : {
              ""originalRef"" : ""BookOrder"",
              ""$ref"" : ""#/definitions/BookOrder""
            }
          }
        },
        ""x-camelContextId"" : ""camel-1"",
        ""x-routeId"" : ""route1""
      }
    },
    ""/books/books/{id}/line/{lineNum}"" : {
      ""get"" : {
        ""tags"" : [ ""dude"" ],
        ""operationId"" : ""verb2"",
        ""consumes"" : [ ""application/json"" ],
        ""produces"" : [ ""application/json"" ],
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        }, {
          ""name"" : ""lineNum"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""Output type"",
            ""responseSchema"" : {
              ""originalRef"" : ""LineItem"",
              ""$ref"" : ""#/definitions/LineItem""
            },
            ""schema"" : {
              ""originalRef"" : ""LineItem"",
              ""$ref"" : ""#/definitions/LineItem""
            }
          }
        },
        ""x-camelContextId"" : ""camel-1"",
        ""x-routeId"" : ""route2""
      }
    }
  },
  ""definitions"" : {
    ""LineItem"" : {
      ""type"" : ""object"",
      ""required"" : [ ""isbn"", ""name"" ],
      ""properties"" : {
        ""isbn"" : {
          ""type"" : ""string"",
          ""description"" : ""ISBN of the book""
        },
        ""name"" : {
          ""type"" : ""string"",
          ""description"" : ""Name of the book""
        }
      },
      ""description"" : ""Order line"",
      ""x-className"" : {
        ""type"" : ""string"",
        ""format"" : ""org.apache.camel.swagger.LineItem""
      }
    },
    ""BookOrder"" : {
      ""type"" : ""object"",
      ""required"" : [ ""id"", ""items"" ],
      ""properties"" : {
        ""id"" : {
          ""type"" : ""string"",
          ""description"" : ""The id of the order""
        },
        ""items"" : {
          ""type"" : ""array"",
          ""description"" : ""The books ordered"",
          ""items"" : {
            ""originalRef"" : ""LineItem"",
            ""$ref"" : ""#/definitions/LineItem""
          }
        }
      },
      ""description"" : ""Represents a book order"",
      ""x-className"" : {
        ""type"" : ""string"",
        ""format"" : ""org.apache.camel.swagger.BookOrder""
      }
    }
  }
}
{code}

openapi outputs
{code}
{
  ""swagger"" : ""2.0"",
  ""host"" : ""localhost:8080"",
  ""basePath"" : ""/api"",
  ""schemes"" : [ ""http"" ],
  ""paths"" : {
    ""/books/{id}"" : {
      ""get"" : {
        ""consumes"" : [ ""application/json"" ],
        ""produces"" : [ ""application/json"" ],
        ""tags"" : [ ""dude"" ],
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""description"" : ""The id of the order to get"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""integer""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""The order returned"",
            ""schema"" : {
              ""$ref"" : ""#/definitions/BookOrder""
            }
          }
        },
        ""operationId"" : ""verb1"",
        ""summary"" : ""Find order by id"",
        ""x-camelContextId"" : ""camel-1"",
        ""x-routeId"" : ""route1""
      }
    },
    ""/books/books/{id}/line/{lineNum}"" : {
      ""get"" : {
        ""consumes"" : [ ""application/json"" ],
        ""produces"" : [ ""application/json"" ],
        ""tags"" : [ ""dude"" ],
        ""parameters"" : [ {
          ""name"" : ""id"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        }, {
          ""name"" : ""lineNum"",
          ""in"" : ""path"",
          ""required"" : true,
          ""type"" : ""string""
        } ],
        ""responses"" : {
          ""200"" : {
            ""description"" : ""Output type"",
            ""schema"" : {
              ""$ref"" : ""#/definitions/LineItem""
            }
          }
        },
        ""operationId"" : ""verb2"",
        ""x-camelContextId"" : ""camel-1"",
        ""x-routeId"" : ""route2""
      }
    }
  },
  ""definitions"" : {
    ""BookOrder"" : {
      ""type"" : ""BookOrder"",
      ""x-className"" : {
        ""format"" : ""org.apache.camel.openapi.BookOrder"",
        ""type"" : ""string""
      }
    },
    ""LineItem"" : {
      ""type"" : ""LineItem"",
      ""x-className"" : {
        ""format"" : ""org.apache.camel.openapi.LineItem"",
        ""type"" : ""string""
      }
    }
  },
  ""tags"" : [ {
    ""name"" : ""dude"",
    ""description"" : ""Book order service""
  } ]
}
{code}

davsclaus:1602546709:2020-10-13T07:51:49.475+0000:1602546709:2020-10-13T07:51:49.475+0000:This requires that openapi-java has something like annotations etc we can use to markup the model classes and that we can then use some api to parse to get that detailed information.
davsclaus:1602546737:2020-10-13T07:52:17.159+0000:1602546737:2020-10-13T07:52:17.159+0000:I suggest to get in touch with the apicurio team about what they offer
davsclaus:1602546767:2020-10-13T07:52:47.717+0000:1602546767:2020-10-13T07:52:47.717+0000:Its the readClass methods in RestModelConverters that needs to have such feature. Compare this with the camel-swagger etc.
maqroll:1618995829:2021-04-21T17:03:49.862+0000:1619110803:2021-04-23T01:00:03.351+0000:This is marked as an Improvement. Does that mean there is some way to produce correct openapi v3 schema?

Been looking through the code in camel-openapi-java. 

`org.apache.camel.openapi.RestModelConverters` has method `readClassOas30(Oas30Document, Class<?>)` but there is no code to actually convert a POJO into OAS schema definitions. That's why all classes end up in the generated schema like `POJO \{""type"": ""POJO""}.`.

Maybe I'm missing something.
acosentino:1619129433:2021-04-23T06:10:33.226+0000:1619129433:2021-04-23T06:10:33.226+0000:[~vrlgohel] if you working on this please answer.

Otherwise remove yoursel from assignee please.
acosentino:1619130228:2021-04-23T06:23:48.726+0000:1619130228:2021-04-23T06:23:48.726+0000:[~maqroll] this is not fixed and not completed.
maqroll:1619243276:2021-04-24T13:47:56.654+0000:1620166946:2021-05-05T06:22:26.237+0000:[~acosentino] [~vrlgohel] I'd like to work on this if possible as we need this for our own purposes. Have some working code that uses openapiv3 to generate OpenAPI schema for POJOs which can then be translated into ApiCurio models. Thish adds a new dependency to camel-openapi-java. Maybe there is a different way to do it that avoids that. Would like to discuss. Thanks.
maqroll:1620300705:2021-05-06T19:31:45.996+0000:1620300705:2021-05-06T19:31:45.996+0000:I've created a pull request on Github which is linked from this Jira. Would be great if it can be reviewed. If I'm going about this wrong, please let me know.

I've used `io.swagger.core.v3:swagger-core` to create OpenAPI schema elements for Java classes referenced by the request and response objects of the Camel rest endpoints. The translation from the OpenAPI scherma to APICurio models is straightforward. Existing code was generating the rest of the schema - rest endpoints, security schema, correctly. JSON Jackson annotations appear to be respected, though I've only checked that required fields can be specified using `@JsonProperty(required = true)`.

It's also possible to parse the referenced Java classes to JSON schema and then translate the JSON schema to APICurio models. Can be done using either jackson-module-jsonschema or victools json-schema-generator. I have an implentation using victools, but the swagger implementation is simpler.

To generate the APICurio models directly from Java classes without going through an intermediate format - whether OpenAPI or JSON schema - is a larger and more complicated undertaking.  "
0,CAMEL-15502,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-04 06:44:59+00:00,2020-09-04 07:46:15+00:00,"If using enums such as 


GET_USER


It would be great if the enum type converter also support a dash style, so you can say


action=get-user
action=GET_USER
action=GetUser
action=getUser


We do ignore case and also match as-is, eg if the enum was GETUSER and not GET_USER",
0,CAMEL-15501,Improvement,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,1,2020-09-03 10:30:00+00:00,2020-09-08 12:02:43+00:00,Right now custom router configuration is possible at the endpoint level and via the registry. It should be made possible to set the router directly on the VertxWebsocketComponent.,
0,CAMEL-15500,Bug,Major,"3.4.3, 3.5.0","3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Andrea Cosentino,Otavio Rodolfo Piske,0,1,2020-09-03 08:21:36+00:00,2020-09-03 17:16:13+00:00,"This is a related issue to CAMEL-15499, but this one applies to the camel-azure-storage-blob component. The syntax on the component json uses ""syntax"": ""azure-storage-blob:containerName""  but it looks like it should use something like ""syntax"": ""azure-storage-blob:/accountName/containerName"".",
0,CAMEL-15499,Bug,Major,"3.4.3, 3.5.0",3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Otavio Rodolfo Piske,0,2,2020-09-03 08:17:47+00:00,2020-09-04 07:18:46+00:00,"This is related to the Camel Kafka Connector issue 409. Which causes the connector to fail to properly create the URI for the azure-storage-queue connector.


 


It seems to me that this is the cause for the wrong URI:



azure-storage-queue.json from master (3.5)
azure-storage-queue.json from camel-3.4.x



Since this is fed into the AbstractCamelCatalog.doAsEndpointUri which is called - at one point - as part of the TaskHelper.buildUrl


 


I think the format of the syntax in that json file should be azure-storage-queue:/accountName/queueName.","acosentino:1599169687:2020-09-04T05:48:07.765+0000:1599169687:2020-09-04T05:48:07.765+0000:I still need to finish this one, the other CAMEL-15500 is done."
0,CAMEL-15498,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-09-03 07:34:53+00:00,2020-09-03 11:46:03+00:00,"Today we can parse javadoc, or .txt files with API signatures.
The javadoc is a bit brittle, so lets build one that uses java source parsing, which we can use Roaster to do (we do that in other camel tools).",
0,CAMEL-15497,Improvement,Minor,2.24.3,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,AjayPatil2611,0,4,2020-09-03 07:16:44+00:00,2020-09-10 19:17:09+00:00,"Hi Team,


@davsclaus @acosentino


Versions used (Karaf 4.2.8 , camel 2.24.3 ,FIX 4.4) (drop down not showing the Fix 4.4 so selected Future /Latest version available 


 i am trying to connect the quick-fix component but required config.cfg file (normally it will be there in classpath), we want to externalize the config.cfg because clients can change the quick-fix(raptor) component details such as (below details might very form environment to environment like DEV/QA/SDN etc.


SenderCompID/TargetCompID/SocketConnectPort etc.


But when try to load from external file  i.e config.cfg. getting error as unable to load .Even though file path, i am able to load it properly(karaf/etc/config.cfg)*[image attached*]


but when i add it to the path with quick-fix component its throwing the error that unable to load.


Example:
  normally we load it from classpath,which works perfectly below point 1 and 2.
 Route:


(client/config.cfg in the classpath src/main/resource/client/config.cfg)


1. 
   .to(""quickfix:client/config.cfg?sessionID=FIX.4.4:BANZAI->EXEC"")


2. from(""quickfix:client/config.cfg?sessionID=FIX.4.4:BANZAI->EXEC&lazyCreateEngine=false&exchangePattern=InOut"")


but if you see above client/config.cfg is in classpath of our project. but want to externalize it and place it inside the karaf/etc like other .cfg/.properties file but which is not working.Please do needful as its affecting our release also


(as usual ,we are externalizing this property for other keys to read by using <cm:property-placeholder)


fixprotocol.cfg


#topic or Queue configuration


Key=value


Key1=value1


#for fix 


cfg.name=config.cfg


cfg.path.name=karaf.etc


Source code Route:


public class FixClientRouter extends RouteBuilder {


@PropertyInject(value = ""cfg.name"")
 private String cfgFileName;


@PropertyInject(value = ""cfg.path.name"")
 private String cfgpathName; 


@Override public void configure() throws Exception {


String externalPath=System.getProperty(cfgpathName) + File.separator + cfgFileName;


*/output exernalPath=
C:\Ajay\MyDocs\IntegrationProject\DIS\karafsetup\apache-karaf-4.2.8\etc\config.cfg
 */


from(ENDPOINT_FIX_COMPONENT)  
 .routeId(ENDPOINT_FIX_COMPONENT_ROUTEID)
   .log(LoggingLevel.INFO, LOG_MSG, ""fix protocol:connecting to raptor "")   
 .doTry()    


/ Using the existing(created in second route /new session*
to explicitly send the on an EVENT (Based on Request) 
 */  


.to(""quickfix:""externalPath""?sessionID=FIX.4.4:BANZAI->EXEC"")//not working //.to(""quickfix:file:""str""?sessionID=FIX.4.4:BANZAI->EXEC"") //not working   


    .log(LoggingLevel.INFO,""fix converted data sent to raptor successfully!!!!!"")
 .endDoTry() 
 .doCatch(Exception.class)    
 //............logs 
 .end()  
 .end();


*/For reply from Raptor/IRIS and Session Creation,
 two way communication- Keep Establishing the communication on bundle start)
 */ 
from(""quickfix:""externalPath""?sessionID=FIX.4.4:BANZAI->EXEC&lazyCreateEngine=false&exchangePattern=InOut"")    
 .routeId(ENDPOINT_RAPTOR_CONNECTION_ROUTEID) 
  .filter(PredicateBuilder.or( header(QuickfixjEndpoint.EVENT_CATEGORY_KEY)          .isEqualTo(QuickfixjEventCategory.AdminMessageSent),        header(QuickfixjEndpoint.EVENT_CATEGORY_KEY) 
          .isEqualTo(QuickfixjEventCategory.AppMessageSent),
        header(QuickfixjEndpoint.EVENT_CATEGORY_KEY)          .isEqualTo(QuickfixjEventCategory.AdminMessageReceived),        header(QuickfixjEndpoint.EVENT_CATEGORY_KEY)          .isEqualTo(QuickfixjEventCategory.AppMessageReceived))) 
.log(LoggingLevel.INFO, LOG_MSG, ""heartBeat ...........=${body}"")
  .end();


Error:
 C*aused by: java.lang.IllegalArgumentException: Could not load file:C:\Ajay\MyDocs\IntegrationProject\DIS\karafsetup\apache-karaf-4.2.8\etc\config.cfgat org.apache.camel.component.quickfixj.QuickfixjEngine.loadSettings(QuickfixjEngine.java:255) ~[?:?]at org.apache.camel.component.quickfixj.QuickfixjComponent.createEndpoint(QuickfixjComponent.java:79) ~[?:?]at* org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:130) ~[!/:2.24.3]at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:705) ~[!/:2.24.3]at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80) ~[!/:2.24.3]at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:227) ~[!/:2.24.3]at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116) ~[!/:2.24.3]at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:122) ~[!/:2.24.3]at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62) ~[!/:2.24.3]at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:518) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.createOutputsProcessorImpl(ProcessorDefinition.java:481) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:448) ~[!/:2.24.3]at org.apache.camel.model.TryDefinition.createProcessor(TryDefinition.java:77) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:569) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:530) ~[!/:2.24.3]at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:240) ~[!/:2.24.3]at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1349) ~[!/:2.24.3]... 25 more





Thanks 


Ajay Patil","acosentino:1599089059:2020-09-03T07:24:19.250+0000:1599089059:2020-09-03T07:24:19.250+0000:as reported in the documentation: [https://camel.apache.org/components/2.x/quickfix-component.html#_uri_format]

The config file must be in classpath.
acosentino:1599089124:2020-09-03T07:25:24.626+0000:1599089124:2020-09-03T07:25:24.626+0000:This is an improvement for Camel 3.6.0, eventually.
acosentino:1599089675:2020-09-03T07:34:35.199+0000:1599089687:2020-09-03T07:34:47.549+0000:One attempt you could do is specify the configurationName as ""file://C:\Ajay\MyDocs\IntegrationProject\DIS\karafsetup\apache-karaf-4.2.8\etc\config.cfg""

Also the configuration file in karaf needs to be under KARAF_HOME/etc as reported in the guide too [https://karaf.apache.org/manual/latest/#_files]

So place your file there and try.
acosentino:1599094642:2020-09-03T08:57:22.647+0000:1599094642:2020-09-03T08:57:22.647+0000:Try to put the file under etc in karaf installation. There is a comment about this
acosentino:1599094759:2020-09-03T08:59:19.337+0000:1599094777:2020-09-03T08:59:37.972+0000:The fix version is the next version with this fixed if any fix will be done. We won't do any new feature or improvements on 2.24.x or 2.25.x, so the eventually fix version is 3.6.0. there won't be a 2.24.4 for sure
AjayPatil2611:1599094807:2020-09-03T09:00:07.150+0000:1599094807:2020-09-03T09:00:07.150+0000:No luck same error.

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quickfix://file://C:%5CAjay%5CMyDocs%5CIntegrationProject%5CDIS%5Ckarafsetup%5Capache-karaf-4.2.8%5Cetc%5Cconfig.cfg?sessionID=FIX.4.4%3ABANZAI-%3EEXEC due to: Could not load file://C:\Ajay\MyDocs\IntegrationProject\DIS\karafsetup\apache-karaf-4.2.8\etc\config.cfg
 at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:752) ~[!/:2.24.3]
 at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80) ~[!/:2.24.3]
 at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:227) ~[!/:2.24.3]
 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116) ~[!/:2.24.3]
 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:122) ~[!/:2.24.3]
 at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62) ~[!/:2.24.3]
 at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:518) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createOutputsProcessorImpl(ProcessorDefinition.java:481) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:448) ~[!/:2.24.3]
 at org.apache.camel.model.TryDefinition.createProcessor(TryDefinition.java:77) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:569) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:530) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:240) ~[!/:2.24.3]
 at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1349) ~[!/:2.24.3]
 ... 25 more
Caused by: java.lang.IllegalArgumentException: Could not load file://C:\Ajay\MyDocs\IntegrationProject\DIS\karafsetup\apache-karaf-4.2.8\etc\config.cfg
 at org.apache.camel.component.quickfixj.QuickfixjEngine.loadSettings(QuickfixjEngine.java:255) ~[?:?]
 at org.apache.camel.component.quickfixj.QuickfixjComponent.createEndpoint(QuickfixjComponent.java:79) ~[?:?]
 at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:130) ~[!/:2.24.3]
 at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:705) ~[!/:2.24.3]
 at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80) ~[!/:2.24.3]
 at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:227) ~[!/:2.24.3]
 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:116) ~[!/:2.24.3]
 at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:122) ~[!/:2.24.3]
 at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:62) ~[!/:2.24.3]
 at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:56) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:518) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createOutputsProcessorImpl(ProcessorDefinition.java:481) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:448) ~[!/:2.24.3]
 at org.apache.camel.model.TryDefinition.createProcessor(TryDefinition.java:77) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:569) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:530) ~[!/:2.24.3]
 at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:240) ~[!/:2.24.3]
 at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1349) ~[!/:2.24.3]
 ... 25 more
AjayPatil2611:1599094883:2020-09-03T09:01:23.895+0000:1599094883:2020-09-03T09:01:23.895+0000:any work around ,do you think as of now

and  FIX version is 4.4 ,not 3.6. 
AjayPatil2611:1599094943:2020-09-03T09:02:23.571+0000:1599094943:2020-09-03T09:02:23.571+0000:Try to put the file under etc in karaf installation. There is a comment about this :: i had tried also but no luck :(
AjayPatil2611:1599095050:2020-09-03T09:04:10.310+0000:1599095085:2020-09-03T09:04:45.813+0000:i think, when we combine quickfix +file or quickfix component with *string* its creating issue

!image-2020-09-03-14-34-43-573.png!

 
acosentino:1599095061:2020-09-03T09:04:21.574+0000:1599095061:2020-09-03T09:04:21.574+0000:What is 4.4? Camel 4 doesn't exist
AjayPatil2611:1599095153:2020-09-03T09:05:53.956+0000:1599096373:2020-09-03T09:26:13.606+0000:i am talking about fix protocol version ,not camel version, now i get it ,its my bad ,its  issue fix version ,not fix protocol version (FIX4.4 (raptor protocol)

here you go

!image-2020-09-03-14-35-51-225.png!
acosentino:1599095171:2020-09-03T09:06:11.835+0000:1599095171:2020-09-03T09:06:11.835+0000:Please create a reproducer and we can have a look. [~lb]  can you help on this?
acosentino:1599095260:2020-09-03T09:07:40.812+0000:1599095260:2020-09-03T09:07:40.812+0000:The fix version is referred to camel. Btw the fix version for this is 3.6.0 because it""s an improvement. I think I know the workflow a bit 
AjayPatil2611:1599095376:2020-09-03T09:09:36.468+0000:1599095376:2020-09-03T09:09:36.468+0000:sorry [~acosentino] you mean to add code snippet or sample project for reproducing the same. can you please clarify
acosentino:1599095593:2020-09-03T09:13:13.522+0000:1599095593:2020-09-03T09:13:13.522+0000:Sample project.
acosentino:1599096325:2020-09-03T09:25:25.862+0000:1599096325:2020-09-03T09:25:25.862+0000:What I'm saying is just that this is not a bug, you have to add this file to your classpath. 

So being able to load from an external file is a new feature, and new feature should be introduced in new releases. Camel 2.24.x won't be released anymore, camel 2.25.x is already at 2.25.2 and we can't change behavior there.

Camel 3.4.x is an LTS release, so we backport only bug fixes. The next major release of camel with new feature is 3.6.0. If a new feature is needed here, it will be included in 3.6.0.

I still believe you're doing something wrong with the way you're declaring the file stuff, but the way you reported the route and the explanation are a bit confusing, so maybe it's better to have a reproducer and start from there.

Did you read the Karaf configuration guide for files? https://karaf.apache.org/manual/latest/#_files
AjayPatil2611:1599096608:2020-09-03T09:30:08.024+0000:1599096608:2020-09-03T09:30:08.024+0000:i understood, actually when you mentioned the fix version ,i thought you are talking FIX-Protocol Version i.e. [https://www.onixs.biz/fix-dictionary/4.4/fields_by_tag.html]

later understood that, this improvement will be fixed in next camel 3.6.0. its my mad. as in my mind Fix means, FIX Protocol version running :(
AjayPatil2611:1599097067:2020-09-03T09:37:47.376+0000:1599097067:2020-09-03T09:37:47.376+0000:Yes i had read. and tried with environment variables also such  ${karaf.home}\config.cfg or 
{\{karaf.etc}}\config.cfg
[https://camel.apache.org/manual/latest/using-propertyplaceholder.html]

i am creating the sample project and ll update soon. and mean while, it would be great, at least some work around for this issue 
lb:1599097396:2020-09-03T09:43:16.763+0000:1599097396:2020-09-03T09:43:16.763+0000:Something like that could work:

{code:java}
Map<String, QuickfixjConfiguration> configurations = new HashMap<>();
configurations.put(
    ""qf"",
    new QuickfixjConfiguration() {
        @Override
        public SessionSettings createSessionSettings() throws ConfigError {
            return new SessionSettings(""data/qf.cfg"");
        }
    }
);

QuickfixjComponent component = new QuickfixjComponent();
component.setConfigurations(configurations);

getContext().addComponent(""quickfix"", component);

from(""direct:start"")
    .to(""quickfix:qf?sessionID=FIX.4.4:BANZAI->EXEC"");
{code}

*NOTE: is is an hack so use it as you own risk*
AjayPatil2611:1599105283:2020-09-03T11:54:43.199+0000:1599107556:2020-09-03T12:32:36.615+0000:[~lb]  no luck :(  same error as above only

 

 
lb:1599106796:2020-09-03T12:19:56.559+0000:1599106796:2020-09-03T12:19:56.559+0000:You need to debug it, I cannot help more without a proper reproducer 
davsclaus:1599107019:2020-09-03T12:23:39.690+0000:1599107019:2020-09-03T12:23:39.690+0000:This is not a chat room - this is JIRA.

This issue is reported about an improvement to be able to load quickfix configurations file via file system and not only classpath.
To build your own workaround in current released Camel then please talk about this elsewhere, where this does not add noise.

For prioritized and fast help then look at
https://camel.apache.org/manual/latest/commercial-camel-offerings.html
AjayPatil2611:1599109282:2020-09-03T13:01:22.632+0000:1599110308:2020-09-03T13:18:28.664+0000:Hi Claus sorry and thanks,

here you go the reproducible sample projects (Attached)

1. quickfix-fix4.4-sample.zip

2. quickfixj-server.zip

3. config.cfg & trading.fix44.protocol.cfg

Please make sure that before installing the bundle.

you place the ""config.cfg"" and ""trading.fix44.protocol.cfg"" file inside the
 apache-karaf-4.2.8\etc folder. and if you required,you  can please start  quickfixj-server maven project as spring boot application. 

 

karaf@root()> bundle:install mvn:com.ajay.sample.integration/quickfix-fix4.4-sample/0.0.1-SNAPSHOT

 

[~lb] please do let me know if you are able to reproduce or not.

i will try to find out solution. meanwhile if you find any solution please do let me know.

[~davsclaus] [~acosentino] [~lb]  thanks for the help 
AjayPatil2611:1599435922:2020-09-07T07:45:22.848+0000:1599435922:2020-09-07T07:45:22.848+0000:Sorry forgot update here (on September 3-4) work around solution has been addressed for this issue for camel 2.24.3  thank you once again all."
0,CAMEL-15496,Improvement,Major,3.4.3,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Ganesh,0,1,2020-09-02 15:44:31+00:00,2020-10-29 09:40:18+00:00,"See this question
https://github.com/apache/camel-kafka-connector/issues/323


 


The camel-rabbitmq-sink-connector needs to have support to add additional headers.
While doing so, the basic AMQP properties were also couldn't be added. 


The source kafka connector could be from any source. The headers and properties related to AMQP message cannot/should not be added at the source level. So, it should always be possible to add and manipulate the headers and properties via configuration. 


 


There should be a support to add these headers and properties in the camel sink connectors via configuration.","rgannu:1599098715:2020-09-03T10:05:15.148+0000:1599098715:2020-09-03T10:05:15.148+0000:{{The following method can invoke a bean when the value contains ""#bean:"" or ""#""}}

{{org.apache.camel.support.EndpointHelper#resolveReferenceParameter(org.apache.camel.CamelContext, java.lang.String, java.lang.Class<T>, boolean)}}

For my use-case I want to invoke a method in the bean.. Should this have also support for invoking the method ?

Let's say with the syntax ""#bean:<beanRef>?method=<methodName>""

The above is supported in the Camel Route.. Is there any specific reason why it is not supported in the value ?
rgannu:1599098936:2020-09-03T10:08:56.399+0000:1599174778:2020-09-04T07:12:58.908+0000:[~cibsen@e-ma.net], 

Could you please give the comment? 
Asking you because you had worked in similar configuration side.

I use the `camel-rabbitmq-sink-kafka-connector`  and in that I have the following configuration.

Here the bean is available for me but I couldn't invoke the method `generateUuid`.  
{code:java}
""camel.beans.uuidGenerator"": ""#class:org.apache.camel.impl.engine.DefaultUuidGenerator"",

""camel.sink.endpoint.additionalHeaders"": ""#bean:addHeaders"",
""camel.beans.addHeaders"": ""#class:org.apache.camel.support.beans.SimpleDataHolderBean"",
""camel.beans.addHeaders.mapData[UUID]"": ""#bean:uuidGenerator?method=generateUuid"",{code}"
0,CAMEL-15495,Bug,Major,3.5.0,None,"
None
",Resolved,Fixed,3.6.0,James Netherton,James Netherton,0,2,2020-09-02 14:22:43+00:00,2020-09-08 07:13:36+00:00,"I made a mistake in the DefaultVertxHttpBinding implementation in that if the content-type exchange header is set, it gets stripped by the HeaderFilterStrategy, and is never set on the Vert.x HttpRequest object.


The workaround until a fix is available would be to extend DefaultVertxHttpBinding and override populateRequestHeaders so that content-type can be set properly.",
0,CAMEL-15494,Improvement,Major,None,,"
None
",Resolved,Abandoned,None,Unassigned,Gerard Forde,0,1,2020-09-01 19:55:41+00:00,2022-09-02 15:55:53+00:00,Please document how to add Http/2 Protocol to the camel-undertow component.,
0,CAMEL-15493,Bug,Major,3.4.3,"3.4.4, 3.6.0","
None
",Resolved,Fixed,"3.4.4, 3.6.0",Unassigned,Kent Fung,0,2,2020-09-01 11:24:44+00:00,2020-09-04 04:25:19+00:00,"Microprofile Configuration supports CDI injection of properties as lists or arrays and can cause the Camel Cdi extension to throw a NPE during container startup:


 



Caused by: org.apache.webbeans.exception.WebBeansException: java.lang.NullPointerException
 at org.apache.webbeans.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:371)
 at org.apache.webbeans.event.NotificationManager.invokeObserverMethod(NotificationManager.java:819)
 at org.apache.webbeans.event.NotificationManager.fireEvent(NotificationManager.java:715)
 ... 53 more
 Caused by: java.lang.NullPointerException
 at org.apache.camel.cdi.CdiCamelExtension.lambda$shouldDeployDefaultCamelContext$9(CdiCamelExtension.java:320)
 at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)
 at java.util.HashMap$KeySpliterator.tryAdvance(HashMap.java:1569)
 at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126)
 at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498)
 at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
 at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
 at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)
 at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)
 at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
 at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:449)
 at org.apache.camel.cdi.CdiCamelExtension.shouldDeployDefaultCamelContext(CdiCamelExtension.java:325)
 at org.apache.camel.cdi.CdiCamelExtension.afterBeanDiscovery(CdiCamelExtension.java:276)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.apache.webbeans.event.ObserverMethodImpl.invoke(ObserverMethodImpl.java:404)
 at org.apache.webbeans.event.ContainerEventObserverMethodImpl.invoke(ContainerEventObserverMethodImpl.java:85)
 at org.apache.webbeans.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:365)
 ... 55 more



 


This occurs when CdiCamelExtension.shouldDeployDefaultCamelContext encounters a bean for an array type because the Class.getPackage method returns null for arrays:




private boolean shouldDeployDefaultCamelContext(Set<Bean<?>> beans) {

 return beans.stream()
 // Is there a Camel bean with the @Default qualifier?
 // Excluding internal components...
 .filter(bean -> !bean.getBeanClass().getPackage().equals(getClass().getPackage()))




 


Switching around the equals check should fix it.","acosentino:1598933896:2020-09-01T12:18:16.255+0000:1598933896:2020-09-01T12:18:16.255+0000:Contributions are welcome [~kentfung] :)
kentfung:1599116660:2020-09-03T15:04:20.337+0000:1599116660:2020-09-03T15:04:20.337+0000:Hello [~acosentino], I've submitted a PR.

 "
0,CAMEL-15492,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-09-01 07:15:37+00:00,2020-09-01 07:33:22+00:00,No Desc,
0,CAMEL-15491,Improvement,Minor,None,,"

Documentation

",Resolved,Invalid,None,Unassigned,Jussi Wallin,0,2,2020-09-01 05:24:30+00:00,2022-09-02 15:55:29+00:00,"I was working on a Camel Karaf to Quarkus integration migration and the way to use the built-in auto-configurations in those two is very different. I haven't worked much with either combination as I'm a subcontractor. 


In the documentation for this component there was no clear indication as to how the configuration worked in the Quarkus environment. After creating an issue about this on the quarkus-camel github repo, the eventual fix for this was to manually instantiate the component with the configuration I needed.


I was then asked to open an issue here. To me the biggest problem was that the information I needed wasn't available in the context it needed to be ie. the documentation on component configuration options. I'm not very familiar with either Camel or Quarkus. This information really needs to be clearer, since there are many new people like me coming in to these technologies.",davsclaus:1662105329:2022-09-02T15:55:29.641+0000:1662105329:2022-09-02T15:55:29.641+0000:Report in camel-quarkus in github
0,CAMEL-15490,Bug,Major,3.5.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Unassigned,Thomas Cunningham,0,1,2020-09-01 02:43:31+00:00,2020-09-03 04:40:16+00:00,"[WARNING] The requested profile ""enable-schemagen"" could not be activated because it does not exist.
[WARNING] The requested profile ""apt"" could not be activated because it does not exist.
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-format-plugin: MavenReportException: Error while generating Javadoc: 
[ERROR] Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.
[ERROR] 
[ERROR] Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages
[ERROR] 
[ERROR] Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.2.0:jar (attach-javadocs) on project camel-format-plugin: MavenReportException: Error while generating Javadoc: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.


Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages


Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.


    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.plugin.MojoExecutionException: MavenReportException: Error while generating Javadoc: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.


Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages


Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.


    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.failOnError (AbstractJavadocMojo.java:6814)
    at org.apache.maven.plugins.javadoc.JavadocJar.doExecute (JavadocJar.java:203)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.execute (AbstractJavadocMojo.java:1935)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.reporting.MavenReportException: 
Exit code: 1 - javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/ are in the unnamed module.


Command line was: /home/jenkins/tools/hudson.model.JDK/jdk11-8/jdk-11.0.8+10/bin/javadoc @options @packages


Refer to the generated Javadoc files in '/home/jenkins/workspace/fuse-8.0-base-jdk11@projects/camel/init/camel-format-plugin/target/apidocs' dir.


    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.doExecuteJavadocCommandLine (AbstractJavadocMojo.java:5861)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.executeJavadocCommandLine (AbstractJavadocMojo.java:5737)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.executeReport (AbstractJavadocMojo.java:2176)
    at org.apache.maven.plugins.javadoc.JavadocJar.doExecute (JavadocJar.java:199)
    at org.apache.maven.plugins.javadoc.AbstractJavadocMojo.execute (AbstractJavadocMojo.java:1935)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <args> -rf :camel-format-plugin[Pipeline] }",
0,CAMEL-15489,Bug,Major,3.4.3,"3.4.4, 3.6.0","

help-wanted

",Resolved,Fixed,"3.4.4, 3.6.0",Unassigned,Sahil Sachdeva,0,3,2020-09-01 02:31:52+00:00,2020-09-22 04:29:18+00:00,"Camel-sql : JdbcAggregationRepository uses the underlying jdbcTemplate and calls the queryForMap operation and on the VERSION column it type case it to the LONG by Default without checking if the Java Data Type is different or not. With Oracle and Java, it get bbvy default converted into the BIGDECIMAL and hence type case doesnt work with Object, can only work with Primitive data types. 


 


Exception Stacktrace: 


 


java.lang.ClassCastException: java.math.BigDecimal cannot be cast to java.lang.Longjava.lang.ClassCastException: java.math.BigDecimal cannot be cast to java.lang.Long at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$4.doInTransaction(JdbcAggregationRepository.java:334) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$4.doInTransaction(JdbcAggregationRepository.java:325) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.get(JdbcAggregationRepository.java:325) at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.get(JdbcAggregationRepository.java:319) at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:483) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:406) at org.apache.camel.processor.aggregate.AggregateProcessor.doInOptimisticLock(AggregateProcessor.java:372) at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:362) at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:320) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:702) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:616) at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60) at org.apache.camel.processor.Pipeline.process(Pipeline.java:147) at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286) at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:128) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:736) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:696) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:674) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:318) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1189) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1179) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1076) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)","davsclaus:1598920040:2020-09-01T08:27:20.132+0000:1598920040:2020-09-01T08:27:20.132+0000:Thanks for reporting, do you want to attempt to work on a PR with a fix?

You can get the value as an Object and then check if its big decimal or not and then handle it accordingly.
chardahe@redhat.com:1599023447:2020-09-02T13:10:47.728+0000:1599023458:2020-09-02T13:10:58.425+0000:I'm working on it, Thanks!!
davsclaus:1599078182:2020-09-03T04:23:02.037+0000:1599078182:2020-09-03T04:23:02.037+0000:Thanks for reporting and the PR"
0,CAMEL-15488,Task,Major,None,3.6.0,"

help-wanted

",Resolved,Fixed,3.6.0,Unassigned,Claus Ibsen,0,1,2020-08-31 14:47:43+00:00,2020-10-02 05:09:48+00:00,"We use 0.5.5, but 0.5.6 is released",
0,CAMEL-15487,New Feature,Major,None,3.6.0,"
None
",Resolved,Not A Problem,3.6.0,Unassigned,Claus Ibsen,0,1,2020-08-31 11:26:46+00:00,2020-08-31 15:34:08+00:00,"Like you can do with regular routes
https://camel.apache.org/manual/latest/lambda-route-builder.html


It should be possible to do for templates. As a RouteBuilder can also be a template then its possible, however its the work that registers this behind the scene that assume its a route and not a template.


So maybe its better to have a LambdaRouteBuilderTemplate functional interface","davsclaus:1598859240:2020-08-31T15:34:00.967+0000:1598859240:2020-08-31T15:34:00.967+0000:Okay we can get this to work as-is today, so all good

    @BindToRegistry
    public LambdaRouteBuilder myTemplate() {
        return rb -> rb.routeTemplate(""myTemplate"")
                .from(""quartz:foo?cron={{myCron}}"")
                .log(""${body}"");
    }
"
0,CAMEL-15456,Bug,Major,3.4.3,,"
None
",Resolved,Won't Fix,None,Unassigned,Aurélien Pupier,0,2,2020-08-24 08:48:36+00:00,2020-08-24 09:11:13+00:00,"https://github.com/apache/camel/blob/2f8f4c20675a4545fec5c8bcbdd1f0d88b15423f/core/camel-core-engine/src/generated/resources/org/apache/camel/model/dataformat/base64.json#L16


https://github.com/apache/camel/blob/2f8f4c20675a4545fec5c8bcbdd1f0d88b15423f/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/models/base64.json#L16


in description it is mentioned that ""CRLF"" is the default value but there is no default value provided.


nota: as it is special characters not sure how it should be written in the json catalog","davsclaus:1598230785:2020-08-24T08:59:45.773+0000:1598230785:2020-08-24T08:59:45.773+0000:This is actually okay as-is as we just mention it in the docs, we dont want to have that special character as json default value.
apupier:1598230998:2020-08-24T09:03:18.092+0000:1598230998:2020-08-24T09:03:18.092+0000:this doesn't sound ok as-is for current Eclipse Fuse Tooling state. it would require a specific handling without including it in the catalog. See [FUSETOOLS-3362|https://issues.redhat.com/browse/FUSETOOLS-3362]

are there other places where there is this misleading behavior in the catalog?
davsclaus:1598231253:2020-08-24T09:07:33.997+0000:1598231253:2020-08-24T09:07:33.997+0000:Just ""see it"" as an option that did not mention what it uses default in the description. Then its like any regular option.
apupier:1598231473:2020-08-24T09:11:13.265+0000:1598231473:2020-08-24T09:11:13.265+0000:for other options, the default value is displayed directly in the field.
The default options are also cleaned from the source xml. In this case, it is the empty string which is cleared which is causing the confusion to the user (and maybe forbidding him/her a very specific use case)"
0,CAMEL-15455,Bug,Minor,3.4.3,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Claus Ibsen,Vladimir Dobos,0,2,2020-08-24 08:22:52+00:00,2020-08-25 08:03:19+00:00,"Expressions in parameters are destroyed by url-encoding during url creation in AbstractEndpointBuilder (using little non-sensical example to make reproduction setup easier).


For example:




.toD(seda(""someName"").size(""${header.size}""))



will be translated by AbstractEndpointBuilder#computeUri (which uses URISupport#createQueryString) to


seda://someName?size=%24%7Bheader.size%7D


This will, of course, throw exception on endpoint creation.


For some reason, thrown exception is url-decoded, so parameter names will look OK, even when they are broken (this makes the error more difficult to spot)




...
java.lang.String to the required type: int with value ${header.size} due to org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Integer with value ${header.size} due to java.lang.NumberFormatException: For input string: ""${header.size}""
...






Enclosing expressions in RAW(..), fixes the issue, it is however quite suboptimal.


Following workaround will work:




.toD(seda(""someName"").size(""RAW(${header.size})""))","davsclaus:1598253438:2020-08-24T15:17:18.287+0000:1598253438:2020-08-24T15:17:18.287+0000:So this is more about toD being dynamic and you are using simple expressions for those parameters. A regular to would not accept ${header.xxx} in the size parameter. And therefore we may not have noticed this before.
vdobos:1598260163:2020-08-24T17:09:23.403+0000:1598260163:2020-08-24T17:09:23.403+0000:Yes, it is about using expression in parameters in toD (originally noticed this because I have requestTimeout in jms-component dependant on few runtime parameters)
From what I found in my limited debugging time, when getUrl() is called on AbstractEndpointBuilder, url query parameters are assembled url-encoded (default behaviour of URISupport#createQueryString), which then makes SendDynamicProcessor not evaluate the parameter values as expressions when creating/retrieving dynamic endpoint.
 When passing plain string in toD, it is not be url-encoded before expressions are evaluated.
davsclaus:1598262036:2020-08-24T17:40:36.978+0000:1598262036:2020-08-24T17:40:36.978+0000:Yeah that is a good observation, so we may want to allow the endpoint dsl to build with encoded and non encoding depending on the EIP pattern. As others would depend on current behaviour. And then check if those options are using simple expressions, eg ${ } or $simple{ } style which is what you used in your example."
0,CAMEL-15454,Bug,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-08-24 07:39:41+00:00,2020-08-24 07:58:11+00:00,No Desc,
0,CAMEL-15453,Task,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Otavio Rodolfo Piske,0,2,2020-08-24 06:11:33+00:00,2020-08-26 14:51:38+00:00,"In camel-jdbc modifying the code to replace calls to getOut with getMessage, as instructed by the javadoc, leads to a test failure in JdbcOptionsTest.testInsertCommit.


 


The code fails because this assertion fails. In other words, the call to mock.getExchanges().get(0).getIn().getBody(String.class);  does return a body when applying these changes.


 


I am attaching a patch that can be used to reproduce the issue. To apply the patch, from the camel-jdbc component directory, use patch -p3 < jdbc-deprecations.patch.


 


Note 1: Removing the assertion doesn't seem to affect the results of the test


Note 2: JdbcOptionsTest is not even modified by the patch.","orpiske:1598401018:2020-08-26T08:16:58.107+0000:1598403712:2020-08-26T09:01:52.676+0000:-The problem may be caused because of this: [https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/core/camel-support/src/main/java/org/apache/camel/support/DefaultExchange.java#L393]-

 -- 

-If an out message is not available, the in one is returned. So, to retain previous behavior, we can just test if the getMessage ""equals"" to the sent one and infer that the out one was null.-

 -- 

-I'll adjust this when I send the PR.-

 -- 

[~cibsen@e-ma.net]  -IMHO, this ticket is not really applicable and could be closed.-


The statement above is not correct.

 
davsclaus:1598424689:2020-08-26T14:51:29.687+0000:1598424689:2020-08-26T14:51:29.687+0000:Yeah the SQL insert would cause an empty body. I have fixed this to keep the body as that is what other SQL componnents would do.
davsclaus:1598424698:2020-08-26T14:51:38.771+0000:1598424698:2020-08-26T14:51:38.771+0000:Thanks for the patches"
0,CAMEL-15452,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-08-23 13:17:59+00:00,2020-08-23 13:56:35+00:00,"So you can turn off reflection and only use configurers. As by default then reflection is fallback if no configurer is available.


But you may want to forbid reflection totally (such as for native graalvm apps)",
0,CAMEL-15451,Test,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Claus Ibsen,0,2,2020-08-23 06:49:36+00:00,2020-08-25 05:37:43+00:00,"[INFO]
[INFO] Results:
[INFO]
[ERROR] Errors:
[ERROR] org.apache.camel.component.aws2.s3.S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistry
[ERROR]   Run 1: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistry:42 » SdkClient
[ERROR]   Run 2: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistry:42 » SdkClient
[ERROR]   Run 3: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistry:42 » SdkClient
[INFO]
[ERROR] org.apache.camel.component.aws2.s3.S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover
[ERROR]   Run 1: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover:54 » SdkClient
[ERROR]   Run 2: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover:54 » SdkClient
[ERROR]   Run 3: S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover:54 » SdkClient
[INFO]
[INFO]
[ERROR] Tests run: 9, Failures: 0, Errors: 2, Skipped: 0","acosentino:1598136708:2020-08-23T06:51:48.282+0000:1598136708:2020-08-23T06:51:48.282+0000:Jdk11?
davsclaus:1598136776:2020-08-23T06:52:56.755+0000:1598136776:2020-08-23T06:52:56.755+0000:Yes JDK 11 on osx. 

Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
Maven home: /opt/apache-maven-3.6.3
Java version: 11.0.7, vendor: AdoptOpenJDK, runtime: /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home
Default locale: en_DK, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.14.6"", arch: ""x86_64"", family: ""mac""
davsclaus:1598136848:2020-08-23T06:54:08.132+0000:1598136848:2020-08-23T06:54:08.132+0000:Can you reproduce that test failure? If not it may be that I have some changes in the works and its on my side. But just wanted to create a ticket to not forget about this test failure
davsclaus:1598136887:2020-08-23T06:54:47.029+0000:1598136887:2020-08-23T06:54:47.029+0000:[ERROR] org.apache.camel.component.aws2.s3.S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover  Time elapsed: 1.777 s  <<< ERROR!
software.amazon.awssdk.core.exception.SdkClientException: Unable to load region from any of the providers in the chain software.amazon.awssdk.regions.providers.DefaultAwsRegionProviderChain@316a598d: [software.amazon.awssdk.regions.providers.SystemSettingsRegionProvider@7d199c68: Unable to load region from system settings. Region must be specified either via environment variable (AWS_REGION) or  system property (aws.region)., software.amazon.awssdk.regions.providers.AwsProfileRegionProvider@63411512: No region provided in profile: default, software.amazon.awssdk.regions.providers.InstanceProfileRegionProvider@35cd68d4: Unable to contact EC2 metadata service.]
	at software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:98)
	at software.amazon.awssdk.regions.providers.AwsRegionProviderChain.getRegion(AwsRegionProviderChain.java:70)
	at software.amazon.awssdk.awscore.client.builder.AwsDefaultClientBuilder.regionFromDefaultProvider(AwsDefaultClientBuilder.java:202)
	at software.amazon.awssdk.awscore.client.builder.AwsDefaultClientBuilder.resolveRegion(AwsDefaultClientBuilder.java:184)
	at software.amazon.awssdk.awscore.client.builder.AwsDefaultClientBuilder.finalizeChildConfiguration(AwsDefaultClientBuilder.java:135)
	at software.amazon.awssdk.core.client.builder.SdkDefaultClientBuilder.syncClientConfiguration(SdkDefaultClientBuilder.java:154)
	at software.amazon.awssdk.services.s3.DefaultS3ClientBuilder.buildClient(DefaultS3ClientBuilder.java:27)
	at software.amazon.awssdk.services.s3.DefaultS3ClientBuilder.buildClient(DefaultS3ClientBuilder.java:22)
	at software.amazon.awssdk.core.client.builder.SdkDefaultClientBuilder.build(SdkDefaultClientBuilder.java:126)
	at org.apache.camel.component.aws2.s3.S3ComponentConfigurationTest.createEndpointWithCredentialsAndClientExistInRegistryWithAutodiscover(S3ComponentConfigurationTest.java:54)
davsclaus:1598159747:2020-08-23T13:15:47.657+0000:1598159747:2020-08-23T13:15:47.657+0000:Ah okay so its s3 client build that is causing this. Maybe we can use mockito to mock it for the testing as its only used for checking if the camel-aws3 is using this client from the registry or creating its own client etc.
acosentino:1598231114:2020-08-24T09:05:14.962+0000:1598231114:2020-08-24T09:05:14.962+0000:Locally I'm not able to reproduce this.
davsclaus:1598304340:2020-08-25T05:25:40.673+0000:1598304340:2020-08-25T05:25:40.673+0000:The CI server has the same error
https://ci-builds.apache.org/job/Camel/job/Camel%20JDK11/job/master/78/testReport/junit/org.apache.camel.component.aws2.s3/S3ComponentConfigurationTest/createEndpointWithCredentialsAndClientExistInRegistry/
acosentino:1598304815:2020-08-25T05:33:35.023+0000:1598304815:2020-08-25T05:33:35.023+0000:It should be fixed now, can you double check locally?
davsclaus:1598305057:2020-08-25T05:37:37.803+0000:1598305057:2020-08-25T05:37:37.803+0000:Yes it works, thanks"
0,CAMEL-15450,Bug,Major,2.25.2,3.5.0,"
None
",Closed,Fixed,3.5.0,Claus Ibsen,wupenghuai,0,1,2020-08-23 06:26:41+00:00,2020-08-24 07:39:55+00:00,"Hello,


I recently found that when using ClusteredRoutePolicyFactory , adding a route to a CamelContext that has been started gives an error.


 


follow is exceptionn stak




org.apache.camel.FailedToCreateRouteException: Failed to create route ns1/1: Route(ns1/1)[[From[timer:pocTimer?period=10s]] -> [SetHeader... because of java.lang.RuntimeException: java.lang.NullPointerExceptionorg.apache.camel.FailedToCreateRouteException: Failed to create route ns1/1: Route(ns1/1)[[From[timer:pocTimer?period=10s]] -> [SetHeader... because of java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:217) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1139) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3736) at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:1071) at com.netease.cloud.nsf.server.DefaultServer.onAdd(DefaultServer.java:65) at com.netease.cloud.nsf.resource.DefaultResourceManager.lambda$compareAndNotify$0(DefaultResourceManager.java:51) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.camel.RuntimeCamelException: java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicyFactory.createRoutePolicy(ClusteredRoutePolicyFactory.java:65) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1304) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:212) ... 8 moreCaused by: java.lang.RuntimeException: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicy.setCamelContext(ClusteredRoutePolicy.java:140) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.forNamespace(ClusteredRoutePolicy.java:350) at org.apache.camel.impl.cluster.ClusteredRoutePolicyFactory.createRoutePolicy(ClusteredRoutePolicyFactory.java:63) ... 10 moreCaused by: java.lang.NullPointerException at org.apache.camel.impl.cluster.ClusteredRoutePolicy.onCamelContextStarted(ClusteredRoutePolicy.java:285) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.access$800(ClusteredRoutePolicy.java:49) at org.apache.camel.impl.cluster.ClusteredRoutePolicy$CamelContextStartupListener.onCamelContextStarted(ClusteredRoutePolicy.java:338) at org.apache.camel.impl.cluster.ClusteredRoutePolicy$CamelContextStartupListener.onCamelContextStarted(ClusteredRoutePolicy.java:323) at org.apache.camel.impl.DefaultCamelContext.addStartupListener(DefaultCamelContext.java:1565) at org.apache.camel.impl.cluster.ClusteredRoutePolicy.setCamelContext(ClusteredRoutePolicy.java:136) ... 12 more




 


 


then i locate the cause:


ClusteredRoutePolicyFactory will call  ClusteredRoutePolicy.forNamespace


ClusteredRoutePolicy.forNamespace rely on ClusteredRoutePolicy.setCamelContext


SetCamelContext will determine if the CamelContext has been started, and if so, the following logic will be executed




private void onCamelContextStarted() {
    LOGGER.debug(""Apply cluster policy (stopped-routes='{}', started-routes='{}')"",
        stoppedRoutes.stream().map(Route::getId).collect(Collectors.joining("","")),
        startedRoutes.stream().map(Route::getId).collect(Collectors.joining("",""))
    );

    clusterView.addEventListener(leadershipEventListener);
}




But at this point the clusterView is still not initialized.It will be initialized when the ClusteredRoutePolicy.start() is called.",
0,CAMEL-15449,Bug,Minor,3.4.3,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Unassigned,Michael Genereux,0,2,2020-08-22 14:57:45+00:00,2020-08-29 12:50:50+00:00,"I'm not quite sure what exception handling looks like when it's getting passed around but this callback code is swallowing the exception:


https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/DefaultBulkApiClient.java#L318-L327


Exception coming into this callback was (paraphrasing) ""Salesforce didn't like one of the parameters to the REST API"" and then this code tries to unmarshal the response and throws an unmarshalling error.


Workaround for now is to fix the API error so this code can unmarshal successfully.","davsclaus:1598141021:2020-08-23T08:03:41.109+0000:1598141021:2020-08-23T08:03:41.109+0000:Yeah I think instead of catching only SalesforceException it should be Exception / Throwable to ensure the callback is invoked. Wonder if you would be able to work on a potential fix, and maybe test it on your system.

We love contributions
https://camel.apache.org/community/support/
mgenereu:1598258675:2020-08-24T16:44:35.457+0000:1598258675:2020-08-24T16:44:35.457+0000:Is the original developer available in case I have questions of intent?

 "
0,CAMEL-15448,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Unassigned,Ruben Vargas,0,1,2020-08-22 01:29:49+00:00,2020-08-22 07:13:53+00:00,"This task is about to add tag and correlation context (equivalent of opentracing baggage) support to opentelemetry implementation.


 


This should work in the same way as opentracing, but using opentelemetry API.",
0,CAMEL-15447,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Peter Palaga,Peter Palaga,0,1,2020-08-21 16:22:55+00:00,2020-08-22 07:13:38+00:00,"Original report https://github.com/apache/camel-quarkus/issues/1563


Reproducible with 




restConfiguration().component(""platform-http"").bindingMode(RestBindingMode.off)
    // and output using pretty print
    .dataFormatProperty(""prettyPrint"", ""true"")
    // setup context path and port number that api will use
    .contextPath(""api/v1"")
    .port(8080)
    .host(""0.0.0.0"")
    // add OpenApi api-doc out of the box
    .apiContextPath(""/api-doc"")
        .apiProperty(""api.title"", ""API Title"") 
        .apiProperty(""api.description"", ""API Description"")
        .apiProperty(""api.version"", ""1.0.0"")
        // and enable CORS
	.apiProperty(""cors"", ""true"")
;

rest()
    .get(""/alive"")
    .id(""api-alive"")
    .produces(""text/plain"")
    .responseMessage()
    .code(200).message(""Alive"")
    .endResponseMessage()
    .route().transform().constant(""alive"")
    .end()
;",
0,CAMEL-15446,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Guillaume Nodet,Luca Burgazzoli,0,2,2020-08-21 15:33:53+00:00,2020-09-15 12:53:45+00:00,"The AbstractCamelContext class provides two similar methods:




Endpoint doGetEndpoint(String uri, boolean normalized, boolean prototype) 
Endpoint doGetEndpoint(String uri, Map<String, Object> parameters, boolean normalized)




would be nice to have them merged to reduce the rissk of bugs like https://issues.apache.org/jira/browse/CAMEL-15445",davsclaus:1597995481:2020-08-21T15:38:01.032+0000:1597995481:2020-08-21T15:38:01.032+0000:I suspect that we have two because of endpoint-dsl and also internal optimizations with normalized vs non-normalized uris. 
0,CAMEL-15445,Bug,Major,None,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Luca Burgazzoli,Luca Burgazzoli,0,1,2020-08-21 13:41:58+00:00,2020-08-23 08:04:32+00:00,"While working on a camel-quarkus issue I've found that the order on which onInit and createEndpoint ar inveked is not the same when endpoint are defined using endpointds vs standard uri.


in case of endpoint dsl:
1. createEndpoint
2. onInit


in case of endpoint url:
1. onInit
2. createEndpoint",
0,CAMEL-15444,Task,Trivial,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Otavio Rodolfo Piske,0,1,2020-08-21 12:17:50+00:00,2020-08-22 07:15:12+00:00,"There are some tests with an incorrect order for test assertions. This is not, by any means, a major problem ... however, it makes the test reports a bit hard to read. It can also cause a bit of confusion when investigating issues.


Should be a trivial change, but there are lots of files, so I am logging this as an issue.",orpiske:1597983505:2020-08-21T12:18:25.503+0000:1597983505:2020-08-21T12:18:25.503+0000:I'll send a PR for these.
0,CAMEL-15443,Bug,Major,3.4.2,,"
None
",Resolved,Duplicate,None,Unassigned,Hack Kampbjørn,0,2,2020-08-21 11:39:25+00:00,2020-08-21 12:48:39+00:00,"The camel-spring-boot-dependencies lists all the different camel spring boot starters and a bunch of other dependencies. Include Spring Framework. But it does not include spring-jcl.


When using it together with the actual spring-framework-bom like





<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xmlns=""http://maven.apache.org/POM/4.0.0""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
  <modelVersion>4.0.0</modelVersion>
  <properties>
    <camel.version>3.4.2</camel.version>
    <spring-framework.version>5.2.8.RELEASE</spring-framework.version>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-spring-boot-dependencies</artifactId>
        <version>${camel.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-framework-bom</artifactId>
        <version>${spring-framework.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>



It results in different versions of Spring Framework:



[WARNING] Rule 1: org.apache.maven.plugins.enforcer.RequireSameVersions failed with message:
Found entries with different versions
Entries with version 5.2.7.RELEASE
 - org.springframework:spring-core:jar (dependency)
Entries with version 5.2.8.RELEASE
 - org.springframework:spring-jcl:jar (dependency)","davsclaus:1597984097:2020-08-21T12:28:17.959+0000:1597984097:2020-08-21T12:28:17.959+0000:See the spring boot examples where you import SB before Camel
https://github.com/apache/camel-spring-boot-examples/blob/master/camel-example-spring-boot-activemq/pom.xml
hackmann:1597984897:2020-08-21T12:41:37.712+0000:1597984897:2020-08-21T12:41:37.712+0000:This is a reduced example. The actual two bom includes many other dependencies too. It's not that easy to just swap the import order.

In our Spring Boot application we do that. Import first Spring Boot dependencies and then camel.

 
But in our legacy application we do it the other way around. First the legacy dependencies which includes camel. And this also forces some downgrades before importing Spring Boot dependencies.
 
If you want this {{camel-spring-boot-dependencies}} to be useful the order should not result in different versions.

I prefer a proper camel-spring-boot-bom (CAMEL-15428) without the extra dependencies.
davsclaus:1597985319:2020-08-21T12:48:39.798+0000:1597985319:2020-08-21T12:48:39.798+0000:Yeah lets regard this as a duplicate of CAMEL-15428 as then you can fiddle how you like it."
0,CAMEL-15442,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,Zineb Bendhiba,Zineb Bendhiba,0,1,2020-08-21 07:22:45+00:00,2020-08-23 08:04:58+00:00,Add attributes related to JIRA CAMEL-15409,
0,CAMEL-15441,Task,Major,None,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,2,2020-08-20 16:49:19+00:00,2020-08-29 12:35:09+00:00,spring-data 2.3.x bundles haven been updated containing fixes on the packages. Camel features repository should use this.,acosentino:1598244991:2020-08-24T12:56:31.453+0000:1598244991:2020-08-24T12:56:31.453+0000:This needs to be reverted on 3.5.x on camel and camel-karaf if we're going to release before the bundles release
0,CAMEL-15440,Task,Major,None,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,2,2020-08-20 16:47:27+00:00,2020-08-29 12:32:22+00:00,"Elasticsearch ServiceMix Bundle changed to provide all packages, and elasticsearch-client bundle has been removed.


Camel features repository has to be updated.","acosentino:1598244937:2020-08-24T12:55:37.201+0000:1598244937:2020-08-24T12:55:37.201+0000:This need to be reverted on 3.5.x if we'll release before the bundles release
jbonofre:1598256592:2020-08-24T16:09:52.425+0000:1598256592:2020-08-24T16:09:52.425+0000:[~acosentino] the purpose is to release the bundles in coming days (I started the preparation). So, it should be OK.

Side node: the camel elasticsearch and redis features just don't work at it is (the bundles are not accurate). I'm also fixing an issue on the jedis bundle."
0,CAMEL-15439,Improvement,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-08-20 14:58:48+00:00,2020-08-26 14:31:12+00:00,"Assuming we have a class like




package my.package;

@Configurer
class MyClass {
}




Then the camel maven plugin creates an entry in




META-INF/services/org/apache/camel/configurer/MyClass




Which is fine as long as the use of configure does not get traction but as there's no qualifier for the class, it may happen that we have some naming clash.


Maybe the configurer should generate




META-INF/services/org/apache/camel/configurer/my.package.MyClass




instead",davsclaus:1598421010:2020-08-26T13:50:10.998+0000:1598421010:2020-08-26T13:50:10.998+0000:Okay the long name is on the way. If you have the old way you can delete src/generated and re-generated to build with long name
0,CAMEL-15438,Improvement,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-08-20 14:51:50+00:00,2020-08-24 09:17:07+00:00,"It would be nice if the PropertiesBindingSupport would directly support dash style properties so the builder could have an additional option to control if converting from dash to camel case is required, like:




 PropertyBindingSupport.build()
            .withIgnoreCase(true)
            .withDash(true)
            .withCamelContext(context)
            .withTarget(target)
            .withProperties(properties)
            .bind();","davsclaus:1598141193:2020-08-23T08:06:33.447+0000:1598141193:2020-08-23T08:06:33.447+0000:I think you can use dash keys today. 
lb:1598222206:2020-08-24T06:36:46.172+0000:1598222206:2020-08-24T06:36:46.172+0000:Has this changed recently ?
davsclaus:1598226337:2020-08-24T07:45:37.543+0000:1598226337:2020-08-24T07:45:37.543+0000:Ah this is via camel-main, if you use that.

The PropertyBindingSupport does not have dash support
davsclaus:1598227937:2020-08-24T08:12:17.227+0000:1598227937:2020-08-24T08:12:17.227+0000:Okay so how far should we go with dashes? 

camel-main support dash style ala:

camel.component.seda.blocking-queue-factory

But you cannot do

camel-component-seda-blocking-queue-factory

The latter would be hard to support as we would then need to use ""trial and error"" to find out if the dash represents a nested level or just a name with mixed case.


davsclaus:1598228358:2020-08-24T08:19:18.776+0000:1598228358:2020-08-24T08:19:18.776+0000:So reflection already support dash to camel case (out of the box) (hardcoded to true). So lets make it for configurer so its the same, and then let it be default out of the box.
lb:1598230999:2020-08-24T09:03:19.000+0000:1598230999:2020-08-24T09:03:19.000+0000:I think we should support dashes only in keys, not for OGNL separators. (camel.component is a little special as it is a virtual path but, that's fine IMHO)"
0,CAMEL-15437,Improvement,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-08-20 14:45:41+00:00,2020-08-26 08:12:44+00:00,"The properties binding component now support flat properties onlyso if oyu need to bind nesting object, you need to use an OGNL like syntax but it would be nice to support also ""map of maps"" as example to do the binding from as example JSON.


Assuming we have a class like:




class Bar {
    String name;
}

class Foo {
    Bar bar;
}




The it would be nice if we can bind from map like:




Map<Object, Object> properties = Map.of(
    Map.of(
        ""bar"",
        Map.of(""name"", ""test"")
    )
);




Then one could use PropertyBindingSupport as usual:




Foo target = new Foo();

PropertyBindingSupport.build()
    .withCamelContext(context)
    .withTarget(target)
    .withProperties(properties)
    .withRemoveParameters(false)
    .bind();




The same copde using flat properties would look like:




Foo target = new Foo();

PropertyBindingSupport.build()
    .withCamelContext(context)
    .withTarget(target)
    .withProperties(""bar.name"", ""test"")
    .withRemoveParameters(false)
    .bind();","davsclaus:1598312501:2020-08-25T07:41:41.581+0000:1598312501:2020-08-25T07:41:41.581+0000:I think at first we should add a new option to indicate that the properties is a map of maps (instead of some magic convention to try to guess).
But what can a good name for such option be.

So maybe just use

.map( ... here goes map of map )

Instead of .properties
lb:1598313684:2020-08-25T08:01:24.361+0000:1598313684:2020-08-25T08:01:24.361+0000:would it make sense to do it case by case using instanceOf on the value of a key ?
davsclaus:1598314007:2020-08-25T08:06:47.186+0000:1598314007:2020-08-25T08:06:47.186+0000:Yeah I thought also about

.flatternProperties(true | false)

Hmm the instanceof seems also but lets make an option first to make it explicit, then we can look at if we can auto detect and if that is better
lb:1598314203:2020-08-25T08:10:03.353+0000:1598314203:2020-08-25T08:10:03.353+0000:or I guess we can have some overloaded withProperties method, like:

withProperties(Properties) -> flat
withProperties(Map) -> it may be a map of map
davsclaus:1598315557:2020-08-25T08:32:37.534+0000:1598315557:2020-08-25T08:32:37.534+0000:Using java.util.Properties is not something people really do as end users, so I think this make its a bit more cumbersome
davsclaus:1598399895:2020-08-26T07:58:15.843+0000:1598399895:2020-08-26T07:58:15.843+0000:PBS is also used by Camel internally to bind stuff, and via spring boot etc. I am not so keen on changing to use Properties for flat, and Map for map of maps style.

There is the flattern option you can turn on and use in camel-k, and then it works safely for all.
lb:1598400764:2020-08-26T08:12:44.074+0000:1598400764:2020-08-26T08:12:44.074+0000:fine with me"
0,CAMEL-15436,Bug,Major,3.4.3,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Omar Al-Safi,Omar Al-Safi,0,1,2020-08-20 13:41:40+00:00,2020-08-21 09:32:31+00:00,"Currently, if you have createAppendBlob=true, the component will create the file every-time and won't ignore it if the file exists, hence it should ignore the file creation if it exists in the storgage blob account. Same goes for createPageBlob=true",
0,CAMEL-15435,Bug,Major,3.4.2,,"
None
",Resolved,Duplicate,None,Jean-Baptiste Onofré,Alex Soto,0,2,2020-08-20 13:28:25+00:00,2020-11-03 07:42:57+00:00,"I have a Camel application using Blueprint XML running on Karaf  4.2.9.  Some routes call methods on beans that are OSGi services.
 
When I try to upgrade to version 3.4.2  (from 3.4.0) Camel is no longer finding method in bean.
 
Error at startup reads:
 
""Failed to create route XXX at…”
 
Caused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: XXXX not found on bean: XXXX@XXXX of type: Proxy3d58f1a3_9d5b_4a54_aa71_e8a0574b6da9
 at org.apache.camel.component.bean.DefaultBeanProcessorFactory.createBeanProcessor(DefaultBeanProcessorFactory.java:146) ~[?:?]
 at org.apache.camel.reifier.BeanReifier.createProcessor(BeanReifier.java:47) ~[?:?]
 at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:766) ~[?:?]
 at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:511) ~[?:?]
 at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:391) ~[?:?]
 ... 22 more",
0,CAMEL-15434,Improvement,Minor,3.5.0,3.7.0,"
None
",Closed,Won't Fix,3.7.0,Omar Al-Safi,Omar Al-Safi,0,2,2020-08-20 13:18:25+00:00,2020-12-07 17:18:25+00:00,"Similar to Azure EventHubs component which accepts connectionString as alternative to connect to the service, we can do the same for Azure Blob and Azure Queue components","davsclaus:1607332479:2020-12-07T17:14:39.603+0000:1607332479:2020-12-07T17:14:39.603+0000:Omar, do you have time this week to work on this, if not, then can you move to ticket to 3.8
omarsmak:1607332697:2020-12-07T17:18:17.082+0000:1607332697:2020-12-07T17:18:17.082+0000:Ah this one, I looked at it before and I don't think it provides any advantages comparing to the event hub component. I will just close it for now"
0,CAMEL-15433,Improvement,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-08-20 09:31:23+00:00,2020-09-18 12:13:17+00:00,"The catalog generates a bunch of files.  The problem is that those files are re-generated when the catalog/camel-catalog module is built, so that when a developper modifies a component without rebuilding the whole project, those modifications may be missed, and thus leads to an incomplete commit.


The idea is to move the generators that depends on a given component inside the build of that component, so that the changes would be effective immediately.",
0,CAMEL-15432,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Omar Al-Safi,Omar Al-Safi,0,3,2020-08-20 08:25:26+00:00,2020-08-20 09:51:01+00:00,"While I was looking at our components reference documentation, I have noticed Azure Event Hubs is not grouped under Azure category


FYI Aemie","Aemie:1597883461:2020-08-20T08:31:01.620+0000:1597883461:2020-08-20T08:31:01.620+0000:I can group it under Azure, it requires the addition of small components within its documentation.
omarsmak:1597883761:2020-08-20T08:36:01.486+0000:1597883761:2020-08-20T08:36:01.486+0000:oh so is just missing this metadata {{:group: Azure}}? I will add it shortly now :)
acosentino:1597883820:2020-08-20T08:37:00.243+0000:1597883820:2020-08-20T08:37:00.243+0000:Yes, exactly
omarsmak:1597884024:2020-08-20T08:40:24.202+0000:1597884024:2020-08-20T08:40:24.202+0000:I have added the group metadata in here: https://raw.githubusercontent.com/apache/camel/master/components/camel-azure-eventhubs/src/main/docs/azure-eventhubs-component.adoc 

Thank you for the tip
Aemie:1597888261:2020-08-20T09:51:01.989+0000:1597888261:2020-08-20T09:51:01.989+0000:[~omarsmak] yea, that's the only thing required to do!"
0,CAMEL-15431,Improvement,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.5.0,Unassigned,Otavio Rodolfo Piske,0,1,2020-08-20 06:55:59+00:00,2020-08-23 08:05:41+00:00,"Some of the log messages are creating redundant arrays. This is not necessarily a problem, but can be a bit confusing when trying to identify the log placeholders and diagnose issues.


 


Here's one example: https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/core/camel-xml-jaxp/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java#L934


 


Also happens on 3.4.3.",orpiske:1597877772:2020-08-20T06:56:12.002+0000:1597877772:2020-08-20T06:56:12.002+0000:I'll send a PR for this.
0,CAMEL-15430,Task,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.6.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2020-08-20 06:43:25+00:00,2020-09-30 18:25:11+00:00,"While investigating an issue I found some circumstances where invalid log placeholders are present. They would cause the log messages to be printed like this:




Error message: {}



It's a minor issue, but could be confusing for debugging.


 


Here's one example: https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/core/camel-xml-jaxp/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java#L1005 


 


The last item, the exception object, will not be displayed. Instead, the stackTrace will be printed and the {} will be shown on the message.


 


This also happens on 3.4.3.","orpiske:1597877017:2020-08-20T06:43:37.321+0000:1597877017:2020-08-20T06:43:37.321+0000:I'll send a PR for this.
gnodet:1597882328:2020-08-20T08:12:08.269+0000:1597882328:2020-08-20T08:12:08.269+0000:I think we may want to add a parameter with the value:  {{e.getMessage()}} to the call in this case."
0,CAMEL-15429,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Juan Segarra,0,1,2020-08-20 03:13:41+00:00,2020-08-21 13:36:26+00:00,Add Spring Boot Starter for camel-oaipmh,
0,CAMEL-15428,New Feature,Major,None,"3.5.0, 3.4.4, 3.7.1, 3.4.6, 3.8.0","
None
",Resolved,Fixed,"3.5.0, 3.4.4, 3.7.1, 3.4.6, 3.8.0",Claus Ibsen,Marcin Grzejszczak,0,6,2020-08-19 14:58:28+00:00,2021-09-16 08:43:27+00:00,"Hi!


 


In Spring Cloud Contract I wanted to reference camel project versions without providing versions for each of them. So I referenced the `camel-dependencies` project in the dependencies management section.


The problem is that also includes all the non project related library versions (e.g. had a conflict with jackson-databind, Camel downgraded my library).


It would be great to have a `camel-bom` module that would include only camel related projects without any other dependencies. Then `camel-dependencies` would import `camel-bom` and all the necessary dependencies.","davsclaus:1597821258:2020-08-19T15:14:18.067+0000:1597821258:2020-08-19T15:14:18.067+0000:For spring boot see the examples how there is a camel SB BOM

For example at
https://github.com/apache/camel-spring-boot-examples/tree/master/camel-example-spring-boot-activemq
marcingrzejszczak:1597821784:2020-08-19T15:23:04.427+0000:1597821784:2020-08-19T15:23:04.427+0000:Maybe I wasn't too clear. I am the maintainer of Spring Cloud Contract and I know how BOMs work :) The problem is that when I add the camel `dependencies` pom, it's breaking my dependencies. What I would like to have is just a definition of camel based projects. [https://mvnrepository.com/artifact/org.apache.camel.springboot/camel-spring-boot-dependencies/3.4.3] - you're enforcing versions of projects (e.g. com.fasterxml.jackson.dataformat » jackson-dataformat-yaml 2.10.4)

or

{{<dependency>}}
{{<groupId>httpunit</groupId>}}
{{<artifactId>httpunit</artifactId>}}
{{<version>1.7</version>}}
{{</dependency>}}
{{<dependency>}}
{{<groupId>io.apicurio</groupId>}}
{{<artifactId>apicurio-data-models</artifactId>}}
{{<version>1.0.16.Final</version>}}
{{</dependency>}}
{{<dependency>}}
{{<groupId>io.krakens</groupId>}}
{{<artifactId>java-grok</artifactId>}}
{{<version>0.1.9</version>}}
{{</dependency>}}
{{<dependency>}}
{{<groupId>io.methvin</groupId>}}
{{<artifactId>directory-watcher</artifactId>}}
{{<version>0.9.10</version>}}
{{</dependency>}}

From my perspective I don't care about these versions nor do I want to override my versions. What I want to have is the whole management section of Camel specific projects. That's why I'd prefer to have a BOM and `-dependencies` that reference the BOM.

 
snicoll:1597821889:2020-08-19T15:24:49.678+0000:1597821995:2020-08-19T15:26:35.004+0000:{{camel-spring-boot-dependencies}} is the problem. It not only provides dependency management for Camel but also for a bunch of 3rd party libraries. 

If two boms provide dependency management for the same thing, you get a warning in Maven. Spring Boot does this because it relates to ""platform dependency management"" rather than providing a bom for Spring Boot artitacts. I don't have an opinion if Camel is considered as a development platform but I think it would be worthwhile to have bom in the strict sense of the term.

I would welcome a {{camel-spring-boot-bom}} on start.spring.io that only defines Camel artifacts actually.
davsclaus:1597822360:2020-08-19T15:32:40.782+0000:1597822360:2020-08-19T15:32:40.782+0000:Ah okay so a BOM with only camel-xxx.

Yeah we have one in Camel at
https://github.com/apache/camel/blob/master/bom/camel-bom/pom.xml

But you are looking for something similar that has only the Camel -starter JARs in its BOM. Yeah that is a good idea.
snicoll:1597822556:2020-08-19T15:35:56.226+0000:1597822556:2020-08-19T15:35:56.226+0000:Yeah {{camel-spring-boot-bom}} that would import the bom you've just referenced (thank you!) + all the Spring Boot integration for camel.
davsclaus:1597825803:2020-08-19T16:30:03.370+0000:1597825803:2020-08-19T16:30:03.370+0000:It would also be good to backport this for 3.4.x branch as its our active LTS branch currently, and it will help the user experience for camel on spring boot
davsclaus:1598242099:2020-08-24T12:08:19.617+0000:1598242099:2020-08-24T12:08:19.617+0000:There is a BOM now for 3.5 onwards
https://github.com/apache/camel-spring-boot-examples/blob/master/camel-example-spring-boot/pom.xml#L55

Working on 3.4.4 support too (but backporting takes time)
marcingrzejszczak:1598246588:2020-08-24T13:23:08.583+0000:1598246588:2020-08-24T13:23:08.583+0000:Great! When are you planning to release 3.4.4 ?
davsclaus:1598248466:2020-08-24T13:54:26.499+0000:1598248466:2020-08-24T13:54:26.499+0000:Oh it may be a little while as 3.4.3 was released 9 days ago
hackmann:1604286941:2020-11-02T11:15:41.249+0000:1604286941:2020-11-02T11:15:41.249+0000:The {{camel-spring-boot-bom}} in 3.4.4 still imports external libraries like {{scala-library}} via parent.

{code}
  <parent>
    <groupId>org.apache.camel.springboot</groupId>
    <artifactId>tooling</artifactId>
    <version>3.4.4</version>
  </parent>
{code}
And {{org.apache.camel.springboot:tooling}} has another parent
{code}
    <parent>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>spring-boot</artifactId>
        <version>3.4.4</version>
    </parent>
{code}
And {{org.apache.camel.springboot:spring-boot}} has dependency management including
{code}
            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-parent</artifactId>
                <version>${camel-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
{code}
And this {{org.apache.camel:camel-parent}} has many external dependencies like
{code}
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${scala-version}</version>
      </dependency>
{code}

davsclaus:1604293828:2020-11-02T13:10:28.438+0000:1604293828:2020-11-02T13:10:28.438+0000:Hack thanks for reporting, can you create a new ticket
davsclaus:1604301641:2020-11-02T15:20:41.539+0000:1604301641:2020-11-02T15:20:41.539+0000:Okay fixed this for 3.4.5 and 3.7.0
hackmann:1609823734:2021-01-05T13:15:34.698+0000:1609823734:2021-01-05T13:15:34.698+0000:Hmmm, in 3.4.5 is still includes scala-library, mostly same dependency tree as in 3.4.4. Now it's:

* {{org.apache.camel.springboot:camel-spring-boot-bom:3.4.5}} has parent {{org.apache.camel.springboot:spring-boot:3.4.5}}
* and {{org.apache.camel.springboot:spring-boot:3.4.5}} imports {{org.apache.camel:camel-parent:3.4.5}} under dependency management
* and {{org.apache.camel:camel-parent:3.4.5}} has dependency management for {{org.scala-lang:scala-library:2.11.7}}

https://mvnrepository.com/artifact/org.apache.camel.springboot/camel-spring-boot-bom/3.4.5


davsclaus:1609824690:2021-01-05T13:31:30.360+0000:1609824690:2021-01-05T13:31:30.360+0000:Try look at 3.7.0 and see how its there
hackmann:1609825265:2021-01-05T13:41:05.369+0000:1609825265:2021-01-05T13:41:05.369+0000:3.7.0 has similar problem just with different version numbers.

https://mvnrepository.com/artifact/org.apache.camel.springboot/camel-spring-boot-bom/3.7.0
acosentino:1609825566:2021-01-05T13:46:06.987+0000:1609825566:2021-01-05T13:46:06.987+0000:Till scala-library is in the Camel parent pom, this is completely normal.
davsclaus:1609828094:2021-01-05T14:28:14.797+0000:1609828094:2021-01-05T14:28:14.797+0000:Yes but its the dependencyManagement section that only has camel JARs, which you then import. The parent ought not to cause problems,
davsclaus:1609908303:2021-01-06T12:45:03.191+0000:1609908303:2021-01-06T12:45:03.191+0000:Yeah lets remove the parent from camel-spring-boot-bom so its standalone.
davsclaus:1609912049:2021-01-06T13:47:29.789+0000:1609912049:2021-01-06T13:47:29.789+0000:Okay parent removed
Mahas_M:1610148115:2021-01-09T07:21:55.959+0000:1610148115:2021-01-09T07:21:55.959+0000:Hi Andrea Cosentino,
i want to work GSOC 2021 with your organization. please help me to work with Gsoc problem  
hackmann:1631753007:2021-09-16T08:43:27.913+0000:1631753007:2021-09-16T08:43:27.913+0000:This is fixed in:
* 3.4.6
* 3.11.2
* but not in 3.7.5"
0,CAMEL-15427,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-08-19 13:47:46+00:00,2020-08-20 14:20:36+00:00,Per title,
0,CAMEL-15426,Bug,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,James Netherton,0,3,2020-08-19 09:58:12+00:00,2020-08-22 07:13:46+00:00,"camel main has two test resources:


src/test/resources/META-INF/services/org/apache/camel/configurer/MySecondBar
src/test/resources/META-INF/services/org/apache/camel/configurer/MySecondFoo


These seem to end up being packaged in the camel-main JAR:




jar tvf camel-main-3.5.0-SNAPSHOT.jar | grep MySecond  
   108 Wed Jan 22 15:10:16 GMT 2020 META-INF/services/org/apache/camel/configurer/MySecondBar
   108 Wed Jan 22 15:10:16 GMT 2020 META-INF/services/org/apache/camel/configurer/MySecondFoo","davsclaus:1597815405:2020-08-19T13:36:45.681+0000:1597815405:2020-08-19T13:36:45.681+0000:Yeah I have a fix for this on something I work on , but its part of other stuff that is not ready for merging so stay tuned for a few days.
lb:1597994693:2020-08-21T15:24:53.077+0000:1597994693:2020-08-21T15:24:53.077+0000:Patch applied: https://github.com/apache/camel/pull/4115"
0,CAMEL-15425,Bug,Major,"3.4.3, 3.5.0","3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Unassigned,Otavio Rodolfo Piske,0,1,2020-08-19 09:12:57+00:00,2020-08-19 16:33:59+00:00,"It seems that the toString method of SalesforceLoginConfig leaks the user password. I am not sure if there is some masking that happens behind the scenes, but out of precaution I am reporting this one. Also happens on master.",orpiske:1597799587:2020-08-19T09:13:07.978+0000:1597799587:2020-08-19T09:13:07.978+0000:I'll send a PR for this one as well.
0,CAMEL-15424,Bug,Major,"3.4.3, 3.5.0","3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Unassigned,Otavio Rodolfo Piske,0,1,2020-08-19 08:25:47+00:00,2020-08-19 16:34:07+00:00,"The code is de-referencing the collaborator before checking whether it is null, which can cause an NPE.


 


It can also happen on 3.4.3.


 


 




Caused by: java.lang.NullPointerException
 at org.apache.camel.component.box.api.BoxCollaborationsManager.addFolderCollaboration(BoxCollaborationsManager.java:90)
 at org.apache.camel.component.box.BoxCollaborationsManagerTest.lambda$testAddFolderCollaborationNullFolderId$1(BoxCollaborationsManagerTest.java:37)
 at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:55)
 ... 66 more",orpiske:1597796768:2020-08-19T08:26:08.434+0000:1597796768:2020-08-19T08:26:08.434+0000:I have the patch and reproducer ready. I'll send a PR soon.
0,CAMEL-15423,Bug,Major,3.4.3,,"
None
",Closed,Incomplete,None,Unassigned,Amin Mohammed-Coleman,0,2,2020-08-19 06:42:24+00:00,2022-09-06 09:03:19+00:00,"Hi there


I have integrated camel and consult to perform leader election when it come to polling. So far everything is working as expected. If I kill on of my pods then another pod becomes the leader. One thing I have noticed is that when I invalidate the session via Consul UI the camel service throws the following exception:


 




com.orbitz.consul.ConsulException: Consul request failed with status [404]: Session id 'da77a3a5-dbf8-49ab-9a46-f759b325895b' not foundcom.orbitz.consul.ConsulException: Consul request failed with status [404]: Session id 'da77a3a5-dbf8-49ab-9a46-f759b325895b' not found at com.orbitz.consul.util.Http.ensureResponseSuccessful(Http.java:61) at com.orbitz.consul.util.Http.extract(Http.java:33) at com.orbitz.consul.SessionClient.renewSession(SessionClient.java:80) at com.orbitz.consul.SessionClient.renewSession(SessionClient.java:69) at org.apache.camel.component.consul.cluster.ConsulClusterView$Watcher.watch(ConsulClusterView.java:279) at org.apache.camel.component.consul.cluster.ConsulClusterView$Watcher.onComplete(ConsulClusterView.java:252) at com.orbitz.consul.KeyValueClient$1.onComplete(KeyValueClient.java:167) at com.orbitz.consul.util.Http$1.onResponse(Http.java:80) at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:129) at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174) at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:834)




Which I would expect it to happen. But this continues until I have to manually kill the pod and restart the camel service. 


Is there anyway to perform a retry X times and then acquire a new session? I couldn't see any configuration that would enable this, unless this is the expected behaviour.


 


Any help would be appreciated.",aanpilov:1662426199:2022-09-06T09:03:19.706+0000:1662426199:2022-09-06T09:03:19.706+0000:[~Amz]  Hi! How are you fixed this errrors? I have the same situation.
0,CAMEL-15422,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-08-18 15:34:33+00:00,2020-08-23 13:14:02+00:00,"As the endpoint parameter can be used to set a custom scheduler using # lookup style, and then it would be better to let it be Object type as neutral, as you can also use spring, or quartz to refer to built-in schedulers.",
0,CAMEL-15421,Improvement,Major,None,,"
None
",Resolved,Implemented,None,Unassigned,Peter Palaga,0,4,2020-08-17 11:18:45+00:00,2020-08-20 21:33:49+00:00,"There is no symbol rendered with AsciiDoc admonitions on pages generated by Antora.


E.g. on this page https://camel.apache.org/camel-quarkus/latest/list-of-camel-quarkus-extensions.html there is a Tip that is missing the usual bulb icon or similar. We are probably missing some css for fa icon-tip.","Aemie:1597709139:2020-08-18T08:05:39.450+0000:1597709139:2020-08-18T08:05:39.450+0000:[~ppalaga] after tweaking the CSS to make the icon appear, I could observe the following in the picture, and based on what Antora Docs have information regarding admonition, it appears as such with the text itself. Do you need modification in the picture or it is sufficient enough within the picture?

 

!admonitions.png!
githubbot:1597728976:2020-08-18T13:36:16.376+0000:1597728976:2020-08-18T13:36:16.376+0000:AemieJ opened a new pull request #466:
URL: https://github.com/apache/camel-website/pull/466


   The AsciiDoc admonitions weren't being rendered on the antora pages. Hence, I made a few tweaks to the CSS for the admonitions to be rendered. 
   
   ![admonition-block-antora](https://user-images.githubusercontent.com/44139348/90519558-d2196100-e185-11ea-808f-b6b0e7c96be3.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

ppalaga:1597736342:2020-08-18T15:39:02.059+0000:1597736342:2020-08-18T15:39:02.059+0000:I am fine with the shown rendering as long as you like it. 

BTW, in Antora default UI the admonitions look like this: https://docs.antora.org/antora-ui-default/templates/
Aemie:1597737600:2020-08-18T16:00:00.560+0000:1597737600:2020-08-18T16:00:00.560+0000:Yes, I observed their default UI at [https://docs.antora.org/antora/2.3/asciidoc/admonitions/] as well but based on the CSS that was present, I tweaked only a few values to the original. For now, the admonition is rendering on the page. (y)
githubbot:1597754706:2020-08-18T20:45:06.105+0000:1597754706:2020-08-18T20:45:06.105+0000:zregvart commented on pull request #466:
URL: https://github.com/apache/camel-website/pull/466#issuecomment-675710999


   Awesome, thanks! Perhaps we could tweak the background coluor a bit, that green is a bit off brand for Camel. It can be changed here:
   
   https://github.com/apache/camel-website/blob/c86e67a1b072cd004325a1b7ff80a4d537a97345/antora-ui-camel/src/css/vars.css#L87
   
   Perhaps a lighter version of the ASF blue would suit us better?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597754842:2020-08-18T20:47:22.632+0000:1597754842:2020-08-18T20:47:22.632+0000:zregvart commented on pull request #466:
URL: https://github.com/apache/camel-website/pull/466#issuecomment-675712075


   I've fiddled with this a bit, I think it looks a bit nicer without the rounded corners:
   
   ![Screenshot_2020-08-18 Camel Quarkus extensions reference Apache Camel(1)](https://user-images.githubusercontent.com/1306050/90563869-b70a1980-e1a4-11ea-9285-26f87cd2bcc8.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597930369:2020-08-20T21:32:49.779+0000:1597930369:2020-08-20T21:32:49.779+0000:zregvart commented on pull request #466:
URL: https://github.com/apache/camel-website/pull/466#issuecomment-677917189


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597930373:2020-08-20T21:32:53.285+0000:1597930373:2020-08-20T21:32:53.285+0000:zregvart merged pull request #466:
URL: https://github.com/apache/camel-website/pull/466


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1597930429:2020-08-20T21:33:49.084+0000:1597930429:2020-08-20T21:33:49.084+0000:Thanks [~Aemie]!"
0,CAMEL-15420,Bug,Minor,"2.24.3, 3.4.3","3.5.0, 3.4.4, 2.25.3","
None
",Resolved,Fixed,"3.5.0, 3.4.4, 2.25.3",Unassigned,Artem St,0,4,2020-08-17 10:37:19+00:00,2020-08-26 06:50:59+00:00,"If http path specified in endpoint uri instead of Exchange.HTTP_PATH header than dynamic aware ignores Exchange.HTTP_QUERY and set it as null.


Sending message to route




from(""direct:dynamicAware"")
 .setHeader(Exchange.HTTP_PATH, constant(""dynamicAware""))
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort());



will return exchange with getIn().getHeader(Exchange.HTTP_QUERY) equal to ""par1=val1&par2=val2"".


But, sending message to route 




from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");



removes header Exchange.HTTP_QUERY from result.


 


Here is full code of test: (also attached as a .java file)




public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {

 private HttpServer localServer;

 @BeforeEach
 @Override
 public void setUp() throws Exception {
 localServer = ServerBootstrap.bootstrap().
 setHttpProcessor(getBasicHttpProcessor()).
 setConnectionReuseStrategy(getConnectionReuseStrategy()).
 setResponseFactory(getHttpResponseFactory()).
 setExpectationVerifier(getHttpExpectationVerifier()).
 setSslContext(getSSLContext()).
 registerHandler(""/dynamicAware"", new BasicValidationHandler(GET.name(), null, null, null)).
 create();
 localServer.start();

 super.setUp();
 }

 @AfterEach
 @Override
 public void tearDown() throws Exception {
 super.tearDown();

 if (localServer != null) {
 localServer.stop();
 }
 }

 @Override
 protected RoutesBuilder createRouteBuilder() throws Exception {
 return new RouteBuilder() {
 @Override
 public void configure() throws Exception {
 from(""direct:dynamicAware"")
 .setHeader(Exchange.HTTP_PATH, constant(""dynamicAware""))
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort());
 from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");
 }
 };
 }
 @Test
 public void testDynamicAwareHeaders() throws Exception {
 Exchange e = fluentTemplate.to(""direct:dynamicAware"").send();
 assertNotNull(e.getIn().getHeader(Exchange.HTTP_QUERY));

 e = fluentTemplate.to(""direct:dynamicAwareWithoutPathHeader"").send();
 assertNotNull(e.getIn().getHeader(Exchange.HTTP_QUERY));

 }
}","chardahe@redhat.com:1597736292:2020-08-18T15:38:12.528+0000:1597736292:2020-08-18T15:38:12.528+0000:[~ArtemSt], Thanks for reporting it and providing the test case,

I'm working on it
chardahe@redhat.com:1597750213:2020-08-18T19:30:13.295+0000:1597750213:2020-08-18T19:30:13.295+0000:[~ArtemSt], Did you refer the doc [https://camel.apache.org/components/latest/http-component.html] ? 

It says,""URI parameters. Will override existing URI parameters set directly on the endpoint.""

I hope it answers the query.

 
ArtemSt:1597751637:2020-08-18T19:53:57.859+0000:1597751637:2020-08-18T19:53:57.859+0000:[~chardahe@redhat.com], thanks for your replay. Yes, I saw the docs, but I do not have a query parameters in my URI's, only path. I did not realize if I had a path specified in my URI I cant use a HTTP_QUERY header. Is it a correct behavior?
ArtemSt:1597753439:2020-08-18T20:23:59.645+0000:1597753747:2020-08-18T20:29:07.739+0000:[~chardahe@redhat.com], also, if you change attached test to use .to() and not .toD() the test works fine. Should not it be a same behavior for .to and .toD?

To be clear, in this route Exchange.HTTP_QUERY header will be removed:
{code:java}
from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .toD(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");{code}
But in this route Exchange.HTTP_QUERY header will contain ""par1=val1&par2=val2"" value:
{code:java}
from(""direct:dynamicAwareWithoutPathHeader"")
 .setHeader(Exchange.HTTP_QUERY, constant(""par1=val1&par2=val2""))
 .to(""http://localhost:"" + localServer.getLocalPort() + ""/dynamicAware"");{code}
 
chardahe@redhat.com:1597826154:2020-08-19T16:35:54.912+0000:1597828702:2020-08-19T17:18:22.922+0000:Thanks [~ArtemSt], I verified the same, I agree it should be the same behavior.

I'll raise PR for it.
davsclaus:1598171708:2020-08-23T16:35:08.471+0000:1598171708:2020-08-23T16:35:08.471+0000:Thanks for reporting and the PR
ArtemSt:1598172672:2020-08-23T16:51:12.356+0000:1598172672:2020-08-23T16:51:12.356+0000:[~davsclaus], is it possible to have this fix in 2.24.xx version? Should it be a new push request in 2.24 branch?

 
bedla:1598184927:2020-08-23T20:15:27.469+0000:1598184927:2020-08-23T20:15:27.469+0000:2.24.x is EOL and there is no planned release for this branch. You can open backport PR against branch camel-2.25.x if it helps you."
0,CAMEL-15419,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Unassigned,Ahmed M,0,3,2020-08-16 05:57:39+00:00,2020-12-09 17:44:01+00:00,"In camel-website README.md (under Build the website content) we are told to use yarn format command to format the code, but this command is not defined :


 $ yarn format
yarn run v1.22.0
error Command ""format"" not found.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.","githubbot:1597579077:2020-08-16T19:57:57.272+0000:1597579077:2020-08-16T19:57:57.272+0000:ARUNMANNURU opened a new pull request #463:
URL: https://github.com/apache/camel-website/pull/463


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597579352:2020-08-16T20:02:32.665+0000:1597579352:2020-08-16T20:02:32.665+0000:ARUNMANNURU closed pull request #463:
URL: https://github.com/apache/camel-website/pull/463


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1597675207:2020-08-17T22:40:07.176+0000:1597675207:2020-08-17T22:40:07.176+0000:I see, thanks for raising this issue. yarn {{format}} script is supported only on the Antora UI theme, to invoke it one must be in the {{antora-ui-camel}} directory.
githubbot:1598005935:2020-08-21T18:32:15.261+0000:1598005935:2020-08-21T18:32:15.261+0000:amdmdi opened a new pull request #470:
URL: https://github.com/apache/camel-website/pull/470


   ""yarn format"" is supported only in antora-ui-camel dir
   
   As per Zoran's suggestion in JIRA: ""yarn format script is supported only on the Antora UI theme, to invoke it one must be in the antora-ui-camel directory.""


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1598090373:2020-08-22T17:59:33.673+0000:1598090373:2020-08-22T17:59:33.673+0000:zregvart commented on pull request #470:
URL: https://github.com/apache/camel-website/pull/470#issuecomment-678672117


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1598090376:2020-08-22T17:59:36.980+0000:1598090376:2020-08-22T17:59:36.980+0000:zregvart merged pull request #470:
URL: https://github.com/apache/camel-website/pull/470


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1607507041:2020-12-09T17:44:01.691+0000:1607507041:2020-12-09T17:44:01.691+0000:We improved the build process and the documentation in the README."
0,CAMEL-15418,Improvement,Major,None,"3.5.0, 3.4.4","
None
",Resolved,Fixed,"3.5.0, 3.4.4",Claus Ibsen,karthic pv,0,3,2020-08-15 10:33:04+00:00,2020-08-24 14:00:42+00:00,"In Swagger Java Library, custom converter can be provided to enrich the Swagger Definition. It can be achieved by extending io.swagger.converter.ModelConverter in the custom converter then, the custom converter will be loaded by the io.swagger.converter.ModelConverters using the Service Loading Mechanism. 
Note: The loaded custom converters are available only in ModelConverters.getInstance().


In camel-swagger-java, the above customisation is not possible because org.apache.camel.swagger.RestModelConverters is derived from io.swagger.converter.ModelConverters and invokes the base class methods. So, the org.apache.camel.swagger.RestModelConverters is unaware of the custom converter and the enrichment is not possible.",davsclaus:1598248842:2020-08-24T14:00:42.364+0000:1598248842:2020-08-24T14:00:42.364+0000:Thanks for reporting and the patch.
0,CAMEL-15417,Improvement,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Vladimir,0,1,2020-08-14 11:18:52+00:00,2020-08-21 12:29:24+00:00,"Add optional fileName property, that so user can assign different name on every new copy of the document. 


For example:
original name picture.jpg


new name Copy of picture.jpg.


 


Some repositories (for example alfresco) allows only documents with unique name to be copied in one directory.",
0,CAMEL-15416,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,2,2020-08-14 08:32:41+00:00,2021-09-02 10:33:26+00:00,"Spring Boot, Quarkus and Karaf etc may need a bit time to be ready for Kafka 2.6.x","orpiske:1630550006:2021-09-02T10:33:26.890+0000:1630550006:2021-09-02T10:33:26.890+0000:This has been resolved in previous versions of Camel 3.x. Therefore, marking as resolved."
0,CAMEL-15415,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.5.0, 3.4.4",Claus Ibsen,Claus Ibsen,0,1,2020-08-14 06:28:38+00:00,2020-08-14 08:52:46+00:00,Also upgrade the LTS branch,
0,CAMEL-15414,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-08-14 06:27:02+00:00,2020-08-29 12:31:08+00:00,Are there any new options we need to add to camel-kafka also?,"davsclaus:1598674654:2020-08-29T12:17:34.591+0000:1598674654:2020-08-29T12:17:34.591+0000:There is a new for a SMX bundle 2.5.1 release, there is only 2.5.0"
0,CAMEL-15413,Improvement,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-08-14 06:23:38+00:00,2020-08-26 11:06:50+00:00,"Lets consider renaming this new class. Also rename the documentation, and in camel-quarkus, and camel-spring-boot as well.","davsclaus:1598401966:2020-08-26T08:32:46.912+0000:1598401966:2020-08-26T08:32:46.912+0000:Need to rename example and in camel-quarkus
davsclaus:1598402845:2020-08-26T08:47:25.510+0000:1598411205:2020-08-26T11:06:45.801+0000:examples *DONE*
quarkus (https://github.com/apache/camel-quarkus/pull/1610) *DONE*
remove deprecate API (when quarkus PR merged) *DONE*"
0,CAMEL-15412,Improvement,Major,3.4.2,,"
None
",Resolved,Not A Bug,None,Unassigned,Michael Genereux,0,2,2020-08-14 04:21:05+00:00,2022-09-03 06:30:05+00:00,"I want to download a file from Box and the setHeader doesn't accept objects when setting the header.  The required output parameter is a OutputStream. The integration tests use the component directly as opposed to the URLs or setHeader methods. I would have expected the outputstream payload to be in the Message coming out of the endpoint.  The REST component documentation looks more like what I was expecting.


My variation of the example from the docs that doesn't work:




from(""timer:test?period=3600"")
    .setHeader(""CamelBox.fileId"", constant(""12345678"")
    .setHeader(""CamelBox.output"", new ByteArrayOutputStream())
    .to(""box://files/download"")
    .to(""file://out"");




Using Camel thinking, I tried this code first but I understand if this component wants to be special with its headers and stuff.




from(""timer:test?period=3600"")
   .to(""box://files/download?fileId=123456789"") 
   .to(""file://out"");  




Again, please let me know what I can do to help.","mgenereu:1597406450:2020-08-14T20:00:50.114+0000:1597406450:2020-08-14T20:00:50.114+0000:Here's the workaround. I hope it's right.
{code:scala}
object BoxRouteBuilder extends RouteBuilder() {

  override def configure(): Unit = {
    from(timer(""box_start"")
    .process(new Processor {
      override def process(exchange: Exchange): Unit = {
        val message = exchange.getMessage()
        message
          .setHeader(""CamelBox.fileId"", ""12345678"")
        exchange.getMessage()
          .setHeader(""CamelBox.output"", stream)
      }
    })
    .to(""box:files/download"")
    .to(kafka(""box_file_list"")
  }

}
{code}
 
mgenereu:1662106984:2022-09-02T16:23:04.059+0000:1662106984:2022-09-02T16:23:04.059+0000:[~davsclaus], is it not a bug because the workaround using a processor solves it?
davsclaus:1662157805:2022-09-03T06:30:05.867+0000:1662157805:2022-09-03T06:30:05.867+0000: .setHeader(""CamelBox.output"", new ByteArrayOutputStream())

Is only invoke once when the route DSL is ""parsed"". So you need an inlined processor or something that sets a new instance every time, i.e. a processor."
0,CAMEL-15411,New Feature,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Juan Segarra,0,1,2020-08-14 03:44:54+00:00,2020-08-14 04:49:26+00:00,Add a small example for the new camel-oaipmh component,
0,CAMEL-15410,Bug,Major,3.4.2,3.10.0,"
None
",Resolved,Fixed,3.10.0,Claus Ibsen,Kris Boutilier,0,3,2020-08-13 16:07:28+00:00,2021-03-30 11:14:30+00:00,"When passing query parameters to a REST producer the encoding behavior is inconsistent. Consider the following:




.to(""rest:get:bw-web-api/v1/objects/employees?host=agresso&companyId=RD&select=personId,personName&disconnect=true"")




The resulting request payload, as observed with Wireshark, is:




GET /bw-web-api/v1/objects/employees?companyId=RD&disconnect=true&select=personId%252CpersonName HTTP/1.1\r\n



Note that the comma has been double-encoded resulting in transmission of %252C instead of the expected %2C.


If instead the problem string is passed as a parameter via a header, the comma is correctly encoded:




.setHeader(""select"", simple(""personId,personName""))
.to(""rest:get:bw-web-api/v1/objects/employees?host=agresso&companyId=RD&select={select}&disconnect=true"")","kris.boutilier@gmail.com:1597307136:2020-08-13T16:25:36.944+0000:1597307232:2020-08-13T16:27:12.548+0000:It's not immediately clear if it's related to the above, but I'm also having issues with + vs %20 encoding of spaces when passed in via headers and, because the target server is pedantic, requests that use application/x-www-form-urlencoded style encoding are failing.

For example, this:
{code:java}
.setHeader(""filter"", simple(""date(time/date) ge 2020-06-01 and personId eq 'R10019'""))
.to(""rest:get:bw-web-api/v1/objects/timesheets?host=agresso&companyId=RD&select={select}&filter={filter}&onWorkFlow=true&noWorkflow=true"") 
{code}
results in a payload of:
{code:java}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29+ge+2020-06-01+and+personId+eq+%27R10019%27&noWorkflow=true&onWorkFlow=true&select=personId%2Cperiod%2Ctime%28*%29 HTTP/1.1\r\n{code}
however the server is expecting to see this encoding:
{code:java}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29%20ge%202020-06-01%20and%20personId%20eq%20%27R10019%27&onWorkflow=true&noWorkflow=true&select=personId%2Cperiod%2Ctime%28*%29 HTTP/1.1\r\n{code}
 
davsclaus:1616646390:2021-03-25T12:26:30.705+0000:1616646390:2021-03-25T12:26:30.705+0000:Yeah its a PITA that spaces was encoded into + sign in Camel's creation. 

And I recall we had issues with some HTTP servers that expected + for spaces instead of %20.
However for correctness it would be better to use %20 (maybe have a global configuration in Camel to turn old style back on)
davsclaus:1616647153:2021-03-25T12:39:13.247+0000:1616647153:2021-03-25T12:39:13.247+0000:What camel component do you use as the http client, is that camel-http, camel-netty-http, or something else?
davsclaus:1616647982:2021-03-25T12:53:02.953+0000:1616647982:2021-03-25T12:53:02.953+0000:Here is a beginning of an unit test
https://github.com/apache/camel/commit/d7f3ad44922d638b4b3fb5b370bee7103d5dbb65

Would be good to add wireshark capture or similar and check the actual HTTP content being sent.
davsclaus:1616655455:2021-03-25T14:57:35.164+0000:1616655455:2021-03-25T14:57:35.164+0000:With a HTTP echo server I get

{code}
GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29+ge+2020-06-01+and+personId+eq+%27R10019%27&select=personId%2CpersonName HTTP/1.1""
{code}

So the plus sign is still there
davsclaus:1616667316:2021-03-25T18:15:16.632+0000:1616667316:2021-03-25T18:15:16.632+0000:The plus sign is now fixed to be %20

{code}
""GET /bw-web-api/v1/objects/timesheets?companyId=RD&filter=date%28time%2Fdate%29%20ge%202020-06-01%20and%20personId%20eq%20%27R10019%27&select=personId%2CpersonName HTTP/1.1""
{code}
jeremyross:1616740048:2021-03-26T14:27:28.459+0000:1616740048:2021-03-26T14:27:28.459+0000:Spaces should be encoded to ""%20"" in the path, and ""+"" in the query and fragment. So,

Before ""?"": %20
After ""?"": +

First two answers [here|https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20] are pretty good.
davsclaus:1617070650:2021-03-30T10:17:30.648+0000:1617070650:2021-03-30T10:17:30.648+0000:Hi Jeremy

I didnt spot your comment. There is a post on dev mailing list.

Yes URL encoding is sadly yet another thing in IT that is ambiguous and can cause problems.

The rule about + is for HTML forms, with content-type: application/x-www-form-urlencoded
https://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#h-17.13.4.1

The percent encoding with %20 as space is something all HTTP servers is capable of doing, so using %20 in URLs is safe.

The special + rule is only for HTTP and something that potentially servers may struggle with. It may be that they only decode + as space, if there is a HTTP header with:

Content-Type: application/x-www-form-urlencoded

And Camel would not send that by default. Also if you use HTTP POST with content in the message body, and query parameters also in the URI that has spaces, then what Content-Type should you use? ie. if the HTTP POST body is json data.


For non HTTP components then decimal encoding space as %20 makes it consistent

sql:my-database?select%20from%20myorders

vs

sql:my-database?select+from+myorders

And especially if the query ends up with + to be used as plus, eg
For example if you could so something ala (yes its not correct SQL)

sql:my-database?update ages set age = age + 2

Then it would be encoded as

sql:my-database?update+ages+set+age+%3D+age+%2B+2

And in pure decimal it would be

sql:my-database?update%20ages%20set%20age%20%3D%20age%20%2B%202

When you see % decimail encoding then you know its encoded, but if you do not and see a plus sign you may think its the math operator

to(""foo:bar?beer=2+3"")





davsclaus:1617071817:2021-03-30T10:36:57.014+0000:1617071817:2021-03-30T10:36:57.014+0000:I do think it may be better to make this configurable and keep the old behavior as default (so Camel stays the same).
And then allow to turn on to use %20 as spaces for the HTTP components so this can be used for HTTP servers that has problems.
davsclaus:1617073937:2021-03-30T11:12:17.315+0000:1617073937:2021-03-30T11:12:17.315+0000:Okay we are as before with using plus signs for spaces.
davsclaus:1617074070:2021-03-30T11:14:30.217+0000:1617074070:2021-03-30T11:14:30.217+0000:Lets leave it as this.

Adding support for plus as space for all the http components is tedious work. We can look at this later if more Camel end users hit this problem with HTTP servers."
0,CAMEL-15409,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,Zineb Bendhiba,Zineb Bendhiba,0,1,2020-08-13 15:04:11+00:00,2020-08-23 08:05:11+00:00,Add the possibility to have operations on graphs in the camel-arangodb component,
0,CAMEL-15408,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-08-13 12:48:18+00:00,2020-08-26 12:20:53+00:00,No Desc,
0,CAMEL-15407,Bug,Major,3.x,3.5.0,"
None
",Resolved,Fixed,3.5.0,Christoph Deppisch,Christoph Deppisch,0,2,2020-08-13 12:33:15+00:00,2020-08-19 07:35:41+00:00,"The merge operation in OData V2 can be used to update individual fields on an entity. The operation should perform an incremental update without replacing all the contents of an entry. In particular the request updates only the properties indicated in the request body, and leaves untouched any other property not mentioned in its current state.


When the camel-olingo2 component performs the merge operation all fields are updated - also the not mentioned properties. Those fields not mentioned in the request body are set to null by default.


This behavior is controlled by the EntityProvider write property called ""isDataBasedPropertySerialization"". By default this setting is set to false resulting in non present fields to be set to null by default. For merge operations this setting should be enabled by default in order to just update the mentioned fields in the request body.","davsclaus:1597294158:2020-08-13T12:49:18.093+0000:1597294158:2020-08-13T12:49:18.093+0000:Are you working on a PR
christophd:1597720952:2020-08-18T11:22:32.035+0000:1597720952:2020-08-18T11:22:32.035+0000:[~davsclaus] yes you can assign to me if you want"
0,CAMEL-15376,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-08-05 10:33:12+00:00,2020-08-07 04:59:47+00:00,"The examples such as camel-spring-boot-examples, camel-examples etc are using -SNAPSHOT dependencies. 


What we should do is to do a ""release"" where we use a fixed version such as 3.4.2, and then a tag at github. Then other users can download the tag to try.","davsclaus:1596594867:2020-08-05T10:34:27.453+0000:1596594867:2020-08-05T10:34:27.453+0000:We do this for some like camel-examples, but not for spring boot etc."
0,CAMEL-15375,New Feature,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-08-05 09:15:57+00:00,2020-09-21 17:03:58+00:00,No Desc,
0,CAMEL-15374,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-08-05 07:28:26+00:00,2020-08-27 06:55:54+00:00,No Desc,
0,CAMEL-15373,Task,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-08-05 06:05:41+00:00,2020-08-05 07:28:01+00:00,No Desc,
0,CAMEL-15372,Bug,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Ruben Vargas,0,1,2020-08-05 05:00:55+00:00,2020-08-05 05:33:04+00:00,"It seems like after a regeneration (1), opentracing clases were deleted.


If I try to compile the Camel sprint boot opentracing example from:apache/camel-spring-boot-examples repository the following errors arise:


 camel-spring-boot-examples/camel-example-spring-boot-opentracing/service1/src/main/java/sample/camel/Service1Application.java:[30,2] cannot find symbol
[ERROR] symbol: class CamelOpenTracing


 


1) https://github.com/apache/camel-spring-boot/commit/acbdd17f997b7b70a9877ca7de2ce09153866168",
0,CAMEL-15371,Improvement,Minor,None,,"
None
",Resolved,Implemented,None,Unassigned,Zoran Regvart,0,3,2020-08-04 22:21:20+00:00,2020-08-14 08:26:46+00:00,"I think links should be underlined by default, this is recommended by W3 accessibility guidelines. Links that resemble buttons should not be underlined.","Aemie:1596768990:2020-08-07T10:56:30.306+0000:1596768990:2020-08-07T10:56:30.306+0000:For the documentation links that are listed in form of unordered list, I think a better option would be to make it bold as it will catch the focus and change the presentation of the lists within the documentation (list-style.png)
zregvart:1596771421:2020-08-07T11:37:01.826+0000:1596771421:2020-08-07T11:37:01.826+0000:Sorry should have made this clearer. I meant links that appear in text, not in menus.
githubbot:1596846648:2020-08-08T08:30:48.416+0000:1596846648:2020-08-08T08:30:48.416+0000:AemieJ opened a new pull request #452:
URL: https://github.com/apache/camel-website/pull/452


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597065348:2020-08-10T21:15:48.026+0000:1597065348:2020-08-10T21:15:48.026+0000:zregvart commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r468190215



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       This bit looks a bit weird to me.
   
   ```suggestion
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597090139:2020-08-11T04:08:59.563+0000:1597090139:2020-08-11T04:08:59.563+0000:AemieJ commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r468314821



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       You require this particular line so that there is a minimum distance between the underline and the text.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597150872:2020-08-11T21:01:12.545+0000:1597150872:2020-08-11T21:01:12.545+0000:zregvart commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r468862318



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       Right, so this is with `text-underline-position: under`:
   
   ![Screenshot_2020-08-11 Home - Apache Camel](https://user-images.githubusercontent.com/1306050/89947841-5e2b0600-dc25-11ea-87eb-0ee28caca42a.png)
   
   and without:
   
   ![Screenshot_2020-08-11 Home - Apache Camel(1)](https://user-images.githubusercontent.com/1306050/89947917-7d299800-dc25-11ea-805b-4bacfc13cc4b.png)
   
   I think what you're reacting to is that the underline is quite noticeable, perhaps adding to make it lighter:
   
   ```suggestion
     text-decoration-thickness: 1px;
     text-decoration-style: dotted;
   ```
   
   Would help, this is how it renders in Firefox:
   
   ![Screenshot_2020-08-11 Home - Apache Camel(3)](https://user-images.githubusercontent.com/1306050/89948444-70f20a80-dc26-11ea-9a57-b84bd5659c42.png)
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597181876:2020-08-12T05:37:56.524+0000:1597181876:2020-08-12T05:37:56.524+0000:AemieJ commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r469015728



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       I am not sure about to dotted style. It would look quite odd. I will look into the thickness.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597189616:2020-08-12T07:46:56.843+0000:1597189616:2020-08-12T07:46:56.843+0000:AemieJ commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r469069517



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       Thickness feature isn't present for chrome browser and the dotted style looks inconsistent. Either we just not include under or we include it. It's best to keep it simple. Or I could use the `border-bottom` property.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597189745:2020-08-12T07:49:05.031+0000:1597189745:2020-08-12T07:49:05.031+0000:AemieJ commented on a change in pull request #452:
URL: https://github.com/apache/camel-website/pull/452#discussion_r469015728



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -149,6 +149,16 @@
 .doc a {
   color: var(--link-font-color);
   word-break: break-word;
+  text-decoration: underline;
+  text-underline-position: under;

Review comment:
       I am not sure about to dotted style. It would look quite odd. I will look into the thickness.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597194862:2020-08-12T09:14:22.766+0000:1597194862:2020-08-12T09:14:22.766+0000:zregvart commented on pull request #452:
URL: https://github.com/apache/camel-website/pull/452#issuecomment-672756511


   Not sure about the underline being below the descenders. My personal preference would be
   
   ```css
   text-decoration: underline;
   text-decoration-style: dotted;
   ```
   
   There are some methods on different underline styles at [css tricks](https://css-tricks.com/styling-underlines-web/) and I remember reading about the underline journey at [medium](https://medium.design/crafting-link-underlines-on-medium-7c03a9274f9) (for inspiration).
   
   @aashnajena and @delawen any thoughts on this?
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597195722:2020-08-12T09:28:42.395+0000:1597195722:2020-08-12T09:28:42.395+0000:AemieJ commented on pull request #452:
URL: https://github.com/apache/camel-website/pull/452#issuecomment-672763684


   @zregvart alright I got your concern about it but with those changes, it looks messy in chrome browser, I found a method using background-image and linear-gradient on the CSS tricks site. 
   
   ```
   background-image: linear-gradient(to right, #583ac2 50%, transparent 50%);
   background-position: 0 1.1em;
   background-repeat: repeat-x;
   background-size: 7px 1px;
   ```
   
   If it's okay with you, I will implement it in this manner, it will create a neater effect of underline on each browser. 
   ![underline-link](https://user-images.githubusercontent.com/44139348/89999311-3e8af080-dcac-11ea-9709-038102702239.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597326954:2020-08-13T21:55:54.712+0000:1597326954:2020-08-13T21:55:54.712+0000:zregvart commented on pull request #452:
URL: https://github.com/apache/camel-website/pull/452#issuecomment-673729800


   > ```
   > background-image: linear-gradient(to right, #583ac2 50%, transparent 50%);
   > background-position: 0 1.1em;
   > background-repeat: repeat-x;
   > background-size: 7px 1px;
   > ```
   
   Does the `background-position` track different font sizes correctly? Might be a bit of a headache to have this properly positioned for all font sizes.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597344127:2020-08-14T02:42:07.451+0000:1597344127:2020-08-14T02:42:07.451+0000:AemieJ commented on pull request #452:
URL: https://github.com/apache/camel-website/pull/452#issuecomment-673852064


   @zregvart I have checked it, the `background-position` tracks all the font-size of the text and that of browsers correctly.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597364705:2020-08-14T08:25:05.646+0000:1597364705:2020-08-14T08:25:05.646+0000:zregvart merged pull request #452:
URL: https://github.com/apache/camel-website/pull/452


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597364719:2020-08-14T08:25:19.535+0000:1597364719:2020-08-14T08:25:19.535+0000:zregvart commented on pull request #452:
URL: https://github.com/apache/camel-website/pull/452#issuecomment-673955668


   Thanks @AemieJ


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1597364806:2020-08-14T08:26:46.347+0000:1597364806:2020-08-14T08:26:46.347+0000:Thanks @AemieJ"
0,CAMEL-15370,Bug,Major,3.3.0,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Freeman Yue Fang,Frank Denninger,1,5,2020-08-04 20:04:35+00:00,2020-08-07 13:13:29+00:00,"If using a query parameter name multiple times, only the last value is actually used.


 


e.g.  .to(""cxfrs:http://example.com/"") with Exchange value Exchange.HTTP_QUERY id=1&id=2 will call to example.com with id=2


 


As far as i can tell the problem is caused by CxfRsProducer::getQueryParametersFromQueryString. In the method all query paramters are inserted in a map, and only the last use of a parameter name is preserved.


 


One solution would be to insert the values directy into the client field, skipping the Map.","davsclaus:1596577626:2020-08-05T05:47:06.551+0000:1596577626:2020-08-05T05:47:06.551+0000:Okay sounds good, would you be able to provide a fix as a PR
k5:1596626868:2020-08-05T19:27:48.016+0000:1596626868:2020-08-05T19:27:48.016+0000:Hi [~davsclaus],

i added a patch with a testcase and the changes to CxfRSProducer. I could write a version that has less changes to the class, but i think the version in the patch is more consistent.

It is my first patch here, so it might not hold up to your standards.

Regards, Frank
chardahe@redhat.com:1596631474:2020-08-05T20:44:34.404+0000:1596631474:2020-08-05T20:44:34.404+0000:Hi Frank, 

 

I have modified existing method where I'm checking if that query param is already present at map if yes then I'm adding all the values by & and while calling client I'm splitting it and calling for all the values. Refer CAMEL-15370_Chandra.patch
k5:1596632730:2020-08-05T21:05:30.890+0000:1596633444:2020-08-05T21:17:24.126+0000:Hi Chandrakant, this implementation will cause problems if the value contains an & (or %26 escaped)

See this failing testcase: 
{code:java}
   @Test
    public void testProducerWithQueryParametersWithMultipleValues2() {
        Exchange exchange = template.send(""cxfrs://http://localhost:"" + getPort2() + ""/"" + getClass().getSimpleName() + ""/testQuery?httpClientAPI=true&synchronous=true"", new Processor() {
                public void process(Exchange exchange) throws Exception {
                    exchange.setPattern(ExchangePattern.InOut);
                    Message inMessage = exchange.getIn();
                    // set the Http method
                    inMessage.setHeader(Exchange.HTTP_METHOD, ""GET"");
                    inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class);
                    inMessage.setHeader(Exchange.HTTP_QUERY, ""id=1%262"");
                    inMessage.setBody(null);                
                }
            
            });
     
        // get the response message 
        String response = exchange.getOut().getBody(String.class);
        assertNotNull(response, ""The response should not be null"");
        assertEquals(""id=1%262"", response, ""The response value is wrong"");
    }
{code}
 

You also cause an npe if the value is null in the map.

 

I dont't really see a valid implemenation that leverages a csv syntax in the values of the Map, that doesn't cause incompatiblity issues for users that provide the Map with CxfConstatns.CAMEL_CXF_RS_QUERY_MAP.

 
chardahe@redhat.com:1596679027:2020-08-06T09:57:07.508+0000:1596679027:2020-08-06T09:57:07.508+0000:Hi Frank, 

Thanks for pointing it, I forgot to check for NPE

Can we introduce any other identifier to join the values instead of $ or any such special character, for which there is no possibility to be as a value?
mail@bernhardunger.de:1596681467:2020-08-06T10:37:47.937+0000:1596681855:2020-08-06T10:44:15.784+0000:Hi Chandrakant,

Spring MVC ist using a ""MultiValueMap"" to solve this problem. See [https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/MultiValueMap.html]

Also available from google commons is com.google.common.collect.HashMultimap

These maps simply allowing multiple identical keys.

I think this could be a possibility for fixing the problem.

We implemented a workarround so far:
{code:java}
private HashMultimap<String, String> createParamsMultimap(String queryString, String charset)
			throws UnsupportedEncodingException {
		HashMultimap<String, String> queryMap = HashMultimap.create();


		for (String param : queryString.split(""&"")) {
			String[] pair = param.split(""="", 2);
			if (pair.length == 2) {
				String name = URLDecoder.decode(pair[0], charset);
				String value = URLDecoder.decode(pair[1], charset);
				queryMap.put(name, value);
			}
			else {
				throw new IllegalArgumentException(""Invalid parameter, expected to be a pair but was "" + param);
			}
		}

		return queryMap;
	}
{code}
Disadvantage indeed is, that we must implement a new Map Interface, otherwise we would break Camels API.

{code:java}
// New implementation
static class MyMultiMap implements Map<String, String> {
...
//All other Methods throwing an UnsupportedOperationException
@Override
		public Set<Entry<String, String>> entrySet() {
			return mulitmap.entries();
		}
{code}
In process Method:

{code:java}
@Override
	public void process(Exchange exchange) throws Exception {
		String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);

		// create multimap of parameters, preserving multiple params of the same name
		HashMultimap<String, String> queryMap =
				createParamsMultimap(queryString, ExchangeHelper.getCharsetName(exchange));

		// wrap it to hide the multimap als a conventional map
		MyMultiMap myMultiMap = new MyMultiMap(queryMap);

		// set override parameter for cxf query map
		exchange.getMessage().setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, myMultiMap);
//further implementations....
{code}


Maybe you find a cleaner backward compatible way for the fix?

Kind regards

Bernhard
k5:1596683354:2020-08-06T11:09:14.852+0000:1596683951:2020-08-06T11:19:11.876+0000:Hi [~chardahe@redhat.com]

 

as i already tried to state, i don't see a version working that leverages some kind of ""csv"" syntax in the values that doesn't have a significant risk to break for some consumer.

 

I appended a different version that uses a Map<String,List<String>> internally. WebClient seems to supports List<String> directly as parameter, and expands it as expected.

I dont see incompatiblities if the map contained only String. But will introduce some further sideeffects/improvements like map with Map<String,Integer> will also work (it causes classcast error in the current version).

But i still prefer my original patch that removes the usage of map for the querystring.

 

Regards Frank

 

 
ffang:1596700410:2020-08-06T15:53:30.162+0000:1596700430:2020-08-06T15:53:50.049+0000:Hi Guys,

Thanks all for the discussion and patches!

I prefer [~k5]'s original fix since it's straightforward with testcase.

[~k5], could you please send a git PR(pull request), so that your name can be available in the git commit history. Also please revise your testcase a little bit to include the case that value could have escaped %26.

Thanks all again!
Freeman
k5:1596722549:2020-08-06T22:02:29.233+0000:1596722549:2020-08-06T22:02:29.233+0000:Hi Freeman,

 

i created a PR

 

Regards Frank
ffang:1596777209:2020-08-07T13:13:29.981+0000:1596777209:2020-08-07T13:13:29.981+0000:patch applied on behalf of [~k5] with thanks!

Thanks all again for the discussion here!

Freeman"
0,CAMEL-15369,Bug,Major,3.4.2,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2020-08-04 13:44:42+00:00,2020-08-05 13:03:19+00:00,"This is the similar to the issue I reported on CAMEL-15358 but this one is for the Camel AWS 2 component:


 




2020-08-04 15:40:15,298 [c-kin-stream-54] WARN org.apache.camel.component.aws2.kinesis.Kinesis2Consumer - Consumer Consumer[aws2-kinesis://ckc-kin-stream-54] failed polling endpoint: aws2-kinesis://ckc-kin-stream-54. Will try again at next poll. Caused by: [java.lang.IndexOutOfBoundsException - Index 0 out of bounds for length 0]
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
 at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64) ~[?:?]
 at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70) ~[?:?]
 at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248) ~[?:?]
 at java.util.Objects.checkIndex(Objects.java:372) ~[?:?]
 at java.util.ArrayList.get(ArrayList.java:459) ~[?:?]
 at java.util.Collections$UnmodifiableList.get(Collections.java:1310) ~[?:?]
 at org.apache.camel.component.aws2.kinesis.Kinesis2Consumer.getShardItertor(Kinesis2Consumer.java:132) ~[camel-aws2-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.component.aws2.kinesis.Kinesis2Consumer.poll(Kinesis2Consumer.java:55) ~[camel-aws2-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-support-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106) [camel-support-3.4.2.jar:3.4.2]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
 at java.lang.Thread.run(Thread.java:834) [?:?]",orpiske:1596519954:2020-08-04T13:45:54.985+0000:1596519954:2020-08-04T13:45:54.985+0000:I will send a PR with a proposed fix for this one. We need to do the same as in CAMEL-15358.
0,CAMEL-15368,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Andrea Cosentino,0,2,2020-08-04 13:03:30+00:00,2020-08-09 14:49:00+00:00,"This comes from ckc


https://github.com/apache/camel-kafka-connector/issues/319


Basically we could something like
 
password=#mypass
camel.beans.mypass = class:java.lang.String(""secret password here"")
 
But it would be much better to detect secret attribute from catalog and doing something like
 
camel.xxxx.password = secret:myPass+w0r!d*)here123
 
and then apply RAW to this
 
davsclaus",davsclaus:1596955740:2020-08-09T14:49:00.274+0000:1596955740:2020-08-09T14:49:00.274+0000:Implemented in camel kafka connector
0,CAMEL-15367,Bug,Major,2.23.0,,"
None
",Resolved,Duplicate,None,Unassigned,Borodina Valery,0,2,2020-08-03 19:31:02+00:00,2020-08-04 12:26:35+00:00,"I used TimeoutAwareAggregationStrategy. I did load testing in AggregateProcessor. When timer working and karaf stopped, I lose messages.","acosentino:1596455618:2020-08-03T19:53:38.017+0000:1596455618:2020-08-03T19:53:38.017+0000:Please try with a newer version. Also please share how you test and provide a reproducer. The description is too vague. It's hard to say something.
valery1811:1596500400:2020-08-04T08:20:00.982+0000:1596500400:2020-08-04T08:20:00.982+0000:Sorry, it's my mistake. I work with cluster and I try fix this problem https://issues.apache.org/jira/browse/CAMEL-15289. I did this mistake."
0,CAMEL-15366,Bug,Major,3.3.0,,"
None
",Resolved,Information Provided,None,Unassigned,Alessio Villa,0,2,2020-08-03 15:45:52+00:00,2020-08-05 05:48:29+00:00,"The following route receives a message containing a collection of objects representing files (path/name); it then splits the body and, for each element, reads the corresponding file (through a pollEnrich) and writes it to a different directory: 


from(""direct:copy"")
   .split(body()).streaming().parallelProcessing()
     .pollEnrich().simple(format(""file://${body.path}?fileName=RAW(${body.name})&noop=true&idempotent=false"").timeout(0).end()
     .to(""file:target"")
   .end();


 


The source directory contains 2000 test files (txt, 1KB each) and, after around 1350-1550 files, the test fails by throwing the following exception(s):


 


Message History (complete message history is disabled)Message History (complete message history is disabled)---------------------------------------------------------------------------------------------------------------------------------------


RouteId              ProcessorId          Processor                                                                        Elapsed (ms)


[ingestionPipelineR] [ingestionPipelineR] [                                                                              ] [    160482]


...


[ingestionCopyRoute] [pollEnrich2       ] [pollEnrich[simple\\{file://${exchangeProperty.SourceDirectory}?fileName=RAW($\{bo] [         0]
 Stacktrace


---------------------------------------------------------------------------------------------------------------------------------------


org.apache.camel.CamelExchangeException: Error during poll. Exchange[]. Caused by: [java.util.concurrent.RejectedExecutionException - PollingConsumer on file://target/test-junk/source/?fileName=RAW(simple_file_515.txt)&noop=true&idempotent=false is not started, but in state: Stopped]


    at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:300) at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:702)


    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:616)


    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148) at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55)


    at org.apache.camel.processor.MulticastProcessor.lambda$schedule$1(MulticastProcessor.java:281) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)


    at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)


    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)


    at java.lang.Thread.run(Thread.java:748)


Caused by: java.util.concurrent.RejectedExecutionException: PollingConsumer on file://target/test-junk/source/?fileName=RAW(simple_file_515.txt)&noop=true&idempotent=false is not started, but in state: Stopped


    at org.apache.camel.support.EventDrivenPollingConsumer.receive(EventDrivenPollingConsumer.java:144)


    at org.apache.camel.component.file.GenericFilePollingConsumer.receiveNoWait(GenericFilePollingConsumer.java:84)


    at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:288)


    ... 10 common frames omitted


 


 


I've also tried to use the seda component (and with the custom executor service) instead of the processingParallel EIP, without success.


 


Am I mistaking something? The route seems quite straightforward and I was expecting it to copy files without problems.","davsclaus:1596447359:2020-08-03T17:35:59.166+0000:1596447359:2020-08-03T17:35:59.166+0000:Its not ideal to create endless dynamic endpoints via poll enrich / enrich.

Since you read a file you can do set the body to a java.io.File instance

Something like:

setBody(simple(""${body.path}/${body.name}"", java.io.File);



ale_amx:1596503730:2020-08-04T09:15:30.047+0000:1596503784:2020-08-04T09:16:24.060+0000:Thanks Claus, your suggestion was enlightening! I've migrated a few more routes as well and it significantly sped the overall process up.

Is there any chance that something similar can be used to copy remote files too? So far, in fact, I perform this task by applying the very same approach: split a list of path/name objects and, for each corresponding file, poll enrich the message through the sftp component to download it.
davsclaus:1596514845:2020-08-04T12:20:45.081+0000:1596514845:2020-08-04T12:20:45.081+0000:See the cacheSize option of pollEnricher
https://camel.apache.org/components/latest/eips/pollEnrich-eip.html
ale_amx:1596516497:2020-08-04T12:48:17.692+0000:1596516497:2020-08-04T12:48:17.692+0000:Thanks for your help, appreciate it."
0,CAMEL-15365,Improvement,Minor,None,3.5.0,"
None
",Closed,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-08-03 08:58:47+00:00,2020-08-04 07:56:45+00:00,"We will need to add a configuration option to enable autoDiscovery of the client in the azure components. Also, we will need to tweak the error messages by having one for no instances and other one for none.",
0,CAMEL-15364,Task,Minor,None,,"
None
",Resolved,Fixed,None,Unassigned,Aemie,0,2,2020-08-02 18:36:39+00:00,2020-12-09 17:52:52+00:00,"Within the Components section version 2.x, there are 2 pages pertaining to MongoDB. The links are - 


* https://camel.apache.org/components/2.x/mongodb3-component.html


* https://camel.apache.org/components/2.x/mongodb-component.html


These 2 differentiate in a sub-top however having the same title doesn't seem appropriate.


Other thing I have noticed is that bundling of similar components has taken place with the latest and 3.4.x version but not with the 2.x version.","zregvart:1596554097:2020-08-04T23:14:57.455+0000:1596554097:2020-08-04T23:14:57.455+0000:I don't think this is an issue, we have two versions of the MongoDB component, I guess one targeting v3 and one targeting older versions of the API. You're welcome to change the title of the v3 component to something like MongoDB v3, but I would not make this a priority as we're winding down work on Camel 2.x."
0,CAMEL-15363,Bug,Minor,"2.24.0, 2.25.1, 3.4.1",,"
None
",Resolved,Won't Fix,None,Unassigned,Fyodor Kravchenko,0,2,2020-08-01 20:29:23+00:00,2020-12-17 15:12:02+00:00,"Presence of a ""rest:"" route that uses URL templates breaks a regular ""jetty:"" route that has ""?matchOnUriPrefix=true&httpMethodRestrict=GET"" attributes.


Looks like CAMEL-11951 wasn't fixed.


How to check:




// this magic route doesn't work if all of the subsequent routes are present
// interestingly, it catches anything starting with ""res"" ignoring the ""/"" after it
from(""jetty:http://0.0.0.0:8686/res/?matchOnUriPrefix=true&httpMethodRestrict=GET"")
        .setBody().mvel(""'RESOURCE GET path: ' + exchange.in.request.requestURI"");

// a catch all route that needs to be here always
from(""jetty:http://0.0.0.0:8686?matchOnUriPrefix=true&httpMethodRestrict=GET"")
        .setBody().mvel(""'ROOT GET path: ' + exchange.in.request.requestURI"");

// a catch all POST route
// if you comment out this, you will get 404 for the ""magic"" route instead of 405
from(""jetty:http://0.0.0.0:8686?matchOnUriPrefix=true&httpMethodRestrict=POST"")
        .setBody(constant(""ROOT POST""));

// if this route is commented out, the magic route starts woking, otherwise the magic route produces 405
from(""rest:get:/test/{test}"")
      .setBody(simple(""SOPHISTICATED REST. Header: ${header.test}""));

// this rest service doesn't break the magic route.
from(""rest:get:/dumb"")
        .setBody(simple(""DUMB REST""));


Tested with Camel 2.25.1 and 3.4.1, but more interested in fixing ver. 2.x 



Run this and see the 405 error for any request starting from ""/res"".


Comment out ""rest:get:/test/{test}"" and see the ""/res/ route starting working.


(As per requirements, the first three routes in this example have to stay first as in the big application other routes are added dynamically.)


Attached is a java file with the main method to test.","fedd:1596604573:2020-08-05T13:16:13.862+0000:1596604573:2020-08-05T13:16:13.862+0000:Hello, I've noticed that the bug priority was changed to 'minor', which is determined that an easy workaround is possible. What would be the workaround?
acosentino:1596610843:2020-08-05T15:00:43.642+0000:1596610843:2020-08-05T15:00:43.642+0000:Usually major is related to a bit more complex issue, this is not something completely invalidating the feature, so it's a minor. But there is no workaround.
fedd:1596686176:2020-08-06T11:56:16.889+0000:1596686176:2020-08-06T11:56:16.889+0000:Okay, I have bypassed the issue by invoking a homegrown dispatcher Processor in a single catch-all route that is unrestricted by method. This processor checks the method and the url start and then invokes another processor accordingly. The subsequent rest url-template consumers (those with curly brackets) can't break it."
0,CAMEL-15362,Improvement,Major,3.4.2,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Chris,0,1,2020-07-31 13:29:25+00:00,2021-03-22 18:07:53+00:00,"I am using Camel 3.4.2 in a SpringBoot application using the Camel SpringBoot starter. In the CamelAutoConfiguration class it create a FluentProducerTemplate that I am injecting into my service classes. In order to use this with different endpoints, producer side processors, etc, it looks like I need to call the clearAll() method on the FluentProducerTemplate before each usage to make its re-use threadsafe. I don't see this documented anywhere, and also this seems a little wonky. Additionally, this only clears the body and headers that are set as ThreadLocals. It looks like to me, if I set an exchange, processor, or even an endpoint these threadlocals will be re-used the next time I used this same thread even if I call clearAll() before using it. Is that the way this is supposed to work?


Unless I'm missing something here, it seems like it would be better to have the FluentProducerTemplate return a new object instance with each new request. Something like below - missing lots of details).




/**
 The top-level class would manage the service lifecyle, context, ...
 Nested FluentProducerTemplateContext class would be the ""state"" for each request
 started by a call to one of the ""to"" methods or others that make sense.
 Additionally, it would implement the send/request methods using the producer
 template.
**/
public class DefaultFluentProducerTemplate extends ServiceSupport {
 private final CamelContext context;
 private Endpoint defaultEndpoint;
 private volatile ProducerTemplate template;
 
 public FluentProducerTemplate to(Endpoint endpoint) {
   return new FluentProducerTemplateContext(endpoint);
 }

 public FluentProducerTemplate toDefaultEndpoint() {
   return new FluentProducerTemplateContext(defaultEndpoint);
 }

 public static class FluentProducerTemplateContext implements FluentProducerTemplate {
 private final Endpoint endpoint;
 private final Map<String, Object> headers = new HashMap<>();
 
 private Object body;
 private Supplier<Exchange> exchangeSupplier;
 private Supplier<Processor> processorSupplier;

 public FluentProducerTemplateNested withBody(Object body) {
   this.body = body;
   return this;
 }

 //
 // Remainder of with methods, send, request, etc.
 // 
 }
}",
0,CAMEL-15361,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Peter Palaga,Peter Palaga,0,1,2020-07-31 10:00:24+00:00,2020-07-31 14:33:02+00:00,The adoc document name in https://github.com/apache/camel/tree/master/components/camel-threadpoolfactory-vertx/src/main/docs is not derivable from the artifactId. I assume there is no real reason for that and we can rename it from reactive-threadpoolfactory-vertx.adoc to just threadpoolfactory-vertx.adoc so that it is easier for camel-quarkus to generate the link (see https://github.com/apache/camel-quarkus/issues/1506 ),
0,CAMEL-15360,Bug,Major,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,2,2020-07-30 19:57:49+00:00,2020-08-02 15:18:03+00:00,"Seems that changes in CAMEL-15185 caused HTML validation issues:




  1:5444  error  Element <figure> is not permitted as content in <dl>  element-permitted-content
  1:5628  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:5671  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:5698  error  <img> is missing required alt attribute               WCAG/H37
  1:5766  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:5793  error  <img> is missing required alt attribute               WCAG/H37
  1:6107  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:6146  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6169  error  <img> is missing required alt attribute               WCAG/H37
  1:6237  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6260  error  <img> is missing required alt attribute               WCAG/H37
  1:6887  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:6931  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:6959  error  <img> is missing required alt attribute               WCAG/H37
  1:7027  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7055  error  <img> is missing required alt attribute               WCAG/H37
  1:7593  error  Element <input> is not permitted as content in <dl>   element-permitted-content
  1:7633  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7657  error  <img> is missing required alt attribute               WCAG/H37
  1:7725  error  Element <label> is not permitted as content in <dl>   element-permitted-content
  1:7749  error  <img> is missing required alt attribute               WCAG/H37
  1:9296  error  Duplicate ID ""social-media""                           no-dup-id","githubbot:1596129799:2020-07-31T01:23:19.664+0000:1596129799:2020-07-31T01:23:19.664+0000:zregvart opened a new pull request #443:
URL: https://github.com/apache/camel-website/pull/443


   This greatly simplifies the footer design and fixes HTML issues
   identified by `check:html` script.
   
   We're now using Unicode full width plus symbol so we don't need the SVG
   icons for show/hide menu.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596137014:2020-07-31T03:23:34.469+0000:1596137014:2020-07-31T03:23:34.469+0000:AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463385398



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Is this meant to be changed as `footer .footer input[type=""checkbox""]:checked` as it's the same as the stated class as above and thus the preview is failing for the same?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596137048:2020-07-31T03:24:08.781+0000:1596137048:2020-07-31T03:24:08.781+0000:AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463385398



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Is this meant to be changed as `footer .footer input[type=""checkbox""]:checked` as it's defined as the same as class as above and thus the preview is failing for the same?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596154690:2020-07-31T08:18:10.786+0000:1596154690:2020-07-31T08:18:10.786+0000:zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463471405



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""] {

Review comment:
       Yeah I noticed a quirk artefact in Chrome so I fixed it last minute without running the builds/checks, should be okay now.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596160176:2020-07-31T09:49:36.435+0000:1596160176:2020-07-31T09:49:36.435+0000:AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463515027



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       This line of code isn't required with the above suggestions I made.

##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);
+    content: '\FF0B';
+    position: absolute;
     display: block;
+    height: 1.75rem;
+    width: 1.75rem;
+    line-height: 1.75rem;
+    font-size: 1.75rem;
+    transition: 0.2s;
   }
 
-  input[type=""checkbox""] ~ label img.hide-menu,
-  input[type=""checkbox""] ~ div.footer-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked + label img.show-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked ~ label img.hide-menu,
-  input[type=""checkbox""]:checked ~ div.footer-menu {
-    display: block;
+  footer .footer input[type=""checkbox""]:checked::before {
+    transform: rotate(45deg);

Review comment:
       `transform: rotate(90deg);` 
   This is 'cause even on clicking it rotates to a plus sign instead of a cross. To make it cross, the following code achieves it.

##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;

Review comment:
       In addition to this, there is an outline around the box, to prevent this following code achieves it: 
   ````
   -webkit-appearance: none;
   -moz-appearance: none;
   -o-appearance: none;
   appearance: none;
   outline: 0;




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596160210:2020-07-31T09:50:10.045+0000:1596160210:2020-07-31T09:50:10.045+0000:AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463515027



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       Background color required with the above suggestions I made.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596160304:2020-07-31T09:51:44.723+0000:1596160304:2020-07-31T09:51:44.723+0000:AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667038339


   ![outline-checkbox](https://user-images.githubusercontent.com/44139348/89023549-60e24d00-d341-11ea-98b5-d5a3215504b1.png)
   @zregvart I found something odd about the checkbox outline so, with the following changes I suggested, the outline is removed.
   
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596199837:2020-07-31T20:50:37.801+0000:1596199837:2020-07-31T20:50:37.801+0000:zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463830149



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);
+    content: '\FF0B';
+    position: absolute;
     display: block;
+    height: 1.75rem;
+    width: 1.75rem;
+    line-height: 1.75rem;
+    font-size: 1.75rem;
+    transition: 0.2s;
   }
 
-  input[type=""checkbox""] ~ label img.hide-menu,
-  input[type=""checkbox""] ~ div.footer-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked + label img.show-menu {
-    display: none;
-  }
-
-  input[type=""checkbox""]:checked ~ label img.hide-menu,
-  input[type=""checkbox""]:checked ~ div.footer-menu {
-    display: block;
+  footer .footer input[type=""checkbox""]:checked::before {
+    transform: rotate(45deg);

Review comment:
       This is caused by both `input` and `::before` being rotated by 45deg. I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596199943:2020-07-31T20:52:23.502+0000:1596199943:2020-07-31T20:52:23.502+0000:zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463831461



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;

Review comment:
       `appearance` is a [experimental](https://developer.mozilla.org/en-US/docs/Web/CSS/appearance) [feature](https://caniuse.com/#feat=css-appearance)we can't rely on it for website to render on most devices. I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596199978:2020-07-31T20:52:58.566+0000:1596199978:2020-07-31T20:52:58.566+0000:zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463831967



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -182,59 +181,45 @@ input[type=""checkbox""] {
     width: auto;
   }
 
-  footer .footer .context a {
-    font-size: 13.5px;
-  }
-
-  footer .footer .context a::after {
-    width: 5px;
-    height: 5px;
-  }
-
   footer .footer .footer-icons .brand-icon {
     height: 1.5rem;
   }
 
-  footer .footer .show-menu {
-    float: right;
-    height: 40px;
-    margin-top: -2.5rem;
-  }
-
-  footer .footer .hide-menu {
-    float: right;
-    height: 35px;
-    margin-top: -2.5rem;
+  footer .footer input[type=""checkbox""] {
+    display: inline;
+    position: relative;
+    top: 2rem;
+    left: 45vw;
+    width: 1.75rem;
+    height: 1.75rem;
+    transition: 0.2s;
   }
 
-  footer .footer .footer-menu {
-    margin-top: 1rem;
+  footer .footer input[type=""checkbox""]:checked {
+    transform: rotate(45deg);
   }
 
-  input[type=""checkbox""] + label img.show-menu {
+  footer .footer input[type=""checkbox""]::before {
+    background-color: var(--footer-background);

Review comment:
       I've gone with a different implementation in the latest changes.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596200109:2020-07-31T20:55:09.615+0000:1596200109:2020-07-31T20:55:09.615+0000:zregvart commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667352436


   > @zregvart I found something odd about the checkbox outline so, with the following changes I suggested, the outline is removed.
   
   This is the input showing beneath the content made with `:before`. I've implemented a different solution in the latest changes. We should not remove outline, it helps folk what navigate using the keyboard. That being said I found no way to have the checkbox focused, in the right place with keyboard navigation and not visible at the same time in the latest changes; so we don't have keyboard focus indication (outline) in the latest changes for the plus sign or for the section headings (`dt`).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596249568:2020-08-01T10:39:28.699+0000:1596249568:2020-08-01T10:39:28.699+0000:AemieJ commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463949285



##########
File path: layouts/partials/footer.html
##########
@@ -6,66 +6,50 @@
     </div>
     <footer>
         <div class=""footer"">
+            <figure class=""logo"">
+                <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
+                    aria-label=""white silhouette of a camel in front of a sand dune"">
+            </figure>
+            <input id=""footer-toggle-overview"" type=""checkbox"" title=""Show/Hide Overview section"" />
             <dl>
-                <figure class=""logo"">
-                    <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
-                        aria-label=""white silhouette of a camel in front of a sand dune"">
-                </figure>
-                <dt>Overview</dt>
-                <input type=""checkbox"" id=""show-overview""/>
-                <label for=""show-overview""><img class=""show-menu"" src=""/_/img/show-footer-menu.svg""></label>
-                <label for=""show-overview""><img class=""hide-menu"" src=""/_/img/hide-footer-menu.svg""></label>
-                <div class=""footer-menu"">
-                    <dd><a href=""/blog/"">Blog</a></dd>
-                    <dd><a href=""/docs/"">Documentation</a></dd>
-                    <dd><a href=""/community/support/"">Community</a></dd>
-                    <dd><a href=""/blog/"">Download</a></dd>
-                </div>
+                <dt><label for=""footer-toggle-overview"">Overview</label><label for=""footer-toggle-overview"">&#65291;</label></dt>

Review comment:
       `<label for=""footer-toggle-overview"">&#65291;</label>`* is better included with a separate unique **id** to distinguish as it appears for desktop screen as well and the same case for each label with `&#65291;` in content.
   - `<label for=""footer-toggle-overview"" id=""expand"">&#65291;</label>`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596249702:2020-08-01T10:41:42.412+0000:1596249702:2020-08-01T10:41:42.412+0000:AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667511491


   @zregvart yes, I observed that it's better just the **+** is included now within the desktop version (> 1024px) as well so best we include separate id for those labels and change **display** property as per that.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596276440:2020-08-01T18:07:20.619+0000:1596276440:2020-08-01T18:07:20.619+0000:zregvart commented on a change in pull request #443:
URL: https://github.com/apache/camel-website/pull/443#discussion_r463985824



##########
File path: layouts/partials/footer.html
##########
@@ -6,66 +6,50 @@
     </div>
     <footer>
         <div class=""footer"">
+            <figure class=""logo"">
+                <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
+                    aria-label=""white silhouette of a camel in front of a sand dune"">
+            </figure>
+            <input id=""footer-toggle-overview"" type=""checkbox"" title=""Show/Hide Overview section"" />
             <dl>
-                <figure class=""logo"">
-                    <img class=""logo"" src=""/_/img/logo-d.svg"" alt=""Apache Camel Logo""
-                        aria-label=""white silhouette of a camel in front of a sand dune"">
-                </figure>
-                <dt>Overview</dt>
-                <input type=""checkbox"" id=""show-overview""/>
-                <label for=""show-overview""><img class=""show-menu"" src=""/_/img/show-footer-menu.svg""></label>
-                <label for=""show-overview""><img class=""hide-menu"" src=""/_/img/hide-footer-menu.svg""></label>
-                <div class=""footer-menu"">
-                    <dd><a href=""/blog/"">Blog</a></dd>
-                    <dd><a href=""/docs/"">Documentation</a></dd>
-                    <dd><a href=""/community/support/"">Community</a></dd>
-                    <dd><a href=""/blog/"">Download</a></dd>
-                </div>
+                <dt><label for=""footer-toggle-overview"">Overview</label><label for=""footer-toggle-overview"">&#65291;</label></dt>

Review comment:
       Yeah I was preoccupied with mobile version that I forgot to check the desktop one. Not sure if assigning `id`s here would be the correct approach. Assigning same `id` to more than one element is not valid HTML. I've set the `display: none` via CSS selector: `footer .footer dl dt label:nth-child(2)`.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596276474:2020-08-01T18:07:54.484+0000:1596276474:2020-08-01T18:07:54.484+0000:zregvart commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667567919


   @AemieJ I think this is now okay to get merged, thanks for reviewing, can you check the latest version when the preview is built?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596334289:2020-08-02T10:11:29.529+0000:1596334289:2020-08-02T10:11:29.529+0000:AemieJ commented on pull request #443:
URL: https://github.com/apache/camel-website/pull/443#issuecomment-667654630


   LGTM. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596340870:2020-08-02T12:01:10.735+0000:1596340870:2020-08-02T12:01:10.735+0000:oscerd merged pull request #443:
URL: https://github.com/apache/camel-website/pull/443


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1596352683:2020-08-02T15:18:03.176+0000:1596352683:2020-08-02T15:18:03.176+0000:Thanks [~Aemie], the footer redesign changes are live now!"
0,CAMEL-15359,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-07-30 15:53:03+00:00,2020-08-05 09:12:28+00:00,No Desc,"acosentino:1596098014:2020-07-30T16:33:34.315+0000:1596098014:2020-07-30T16:33:34.315+0000:I added the docs under src/main/docs but it's not complete. Just to avoid the website failing the the build.

[~rubensvp] can you please add more docs there? Like camel-opentracing maybe? Thank you. I'm closing this, but please open a PR."
0,CAMEL-15358,Bug,Major,3.4.2,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2020-07-30 14:29:16+00:00,2020-08-02 08:05:53+00:00,"I noticed that sometimes Camel Kafka Connector prints this exception on the logs during AWS Kinesis tests. It seems to be related to trying to poll a stream when it is already removed.


 




2020-07-30 10:13:38,222 [/ckc-kin-stream] WARN org.apache.camel.component.aws.kinesis.KinesisConsumer - Consumer Consumer[aws-kinesis://ckc-kin-stream] failed polling endpoint: aws-kinesis://ckc-kin-stream. Will try again at next poll. Caused by: [java.lang.IndexOutOfBoundsException - Index 0 out of bounds for length 0]
java.lang.IndexOutOfBoundsException: Index 0 out of bounds for length 0
 at jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64) ~[?:?]
 at jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70) ~[?:?]
 at jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248) ~[?:?]
 at java.util.Objects.checkIndex(Objects.java:372) ~[?:?]
 at java.util.ArrayList.get(ArrayList.java:458) ~[?:?]
 at org.apache.camel.component.aws.kinesis.KinesisConsumer.getShardItertor(KinesisConsumer.java:132) ~[camel-aws-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.component.aws.kinesis.KinesisConsumer.poll(KinesisConsumer.java:55) ~[camel-aws-kinesis-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-support-3.4.2.jar:3.4.2]
 at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:106) [camel-support-3.4.2.jar:3.4.2]
 at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]
 at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]
 at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
 at java.lang.Thread.run(Thread.java:834) [?:?]","orpiske:1596090579:2020-07-30T14:29:39.926+0000:1596090579:2020-07-30T14:29:39.926+0000:I'll send a PR fixing this issue.
acosentino:1596092774:2020-07-30T15:06:14.804+0000:1596092774:2020-07-30T15:06:14.804+0000:Can you check on aws2-kinesis too? :-)
orpiske:1596092948:2020-07-30T15:09:08.258+0000:1596092948:2020-07-30T15:09:08.258+0000:[~acosentino] yes I can :)

 If that's OK with you, I will do it in 2 steps: I will fix this one, send a PR, then I will implement the same test on the connector for AWS2-kinesis and will try to reproduce and fix it.
acosentino:1596093211:2020-07-30T15:13:31.510+0000:1596093211:2020-07-30T15:13:31.510+0000:Sounds good :-) thanks!"
0,CAMEL-15357,Improvement,Major,None,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2020-07-30 14:15:53+00:00,2020-07-30 14:24:02+00:00,"This example shows how to use Servlet REST to define REST endpoints in Camel routes using the Rest DSL with Servlet transport in Karaf. REST endpoint is secured by Basic Auth, delegate user/password authentication to Karaf Jaas Service",acosentino:1596090242:2020-07-30T14:24:02.494+0000:1596090242:2020-07-30T14:24:02.494+0000:We are in the process of extracting the examples of karaf in their own repo
0,CAMEL-15356,New Feature,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-07-30 13:08:01+00:00,2020-08-17 13:32:37+00:00,"Azure Event hub  service an event ingestion service, similar to Kinesis and Kafka, hence would be nice to have it as component. 



Azure EventHub Java Sdk v5.x: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs",
0,CAMEL-15355,Bug,Minor,3.4.0,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Claus Ibsen,Devansh Arora,0,3,2020-07-30 11:35:06+00:00,2020-07-30 13:39:38+00:00,"We are using camel-rabbitmq to create a single-active-consumer.
 to create a single active consumer we need to give a queue arg in endpoint uri as
 &arg.queue.x-single-active-consumer=true


We get error below error if we set this argument


Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - invalid arg 'x-single-active-consumer' for queue 'testQ4' in vhost 'vh1': {unacceptable_type,longstr}, class-id=50, method-id=10)","acosentino:1596080810:2020-07-30T11:46:50.724+0000:1596080810:2020-07-30T11:46:50.724+0000:Please read the documentation correctly. You need to pass the args through the args parameter.

Like this example: [https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/test/java/org/apache/camel/component/rabbitmq/integration/RabbitMQInOutIntTest.java#L82]
devansharora68@gmail.com:1596081213:2020-07-30T11:53:33.475+0000:1596081213:2020-07-30T11:53:33.475+0000:[~acosentino] 
i tried using it like 
&args=arg.queue.x-single-active-consumer=true



getting NPE
Caused by: java.lang.NullPointerException: nullaused by: java.lang.NullPointerException: null at org.apache.camel.util.PropertiesHelper.extractProperties(PropertiesHelper.java:33) ~[camel-util-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.getExchangeArgs(RabbitMQEndpoint.java:825) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.resolvedExchangeArguments(RabbitMQDeclareSupport.java:101) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangeWithQueue(RabbitMQDeclareSupport.java:49) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangesAndQueuesUsing(RabbitMQDeclareSupport.java:36) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.declareExchangeAndQueue(RabbitMQEndpoint.java:244) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitConsumer.openChannel(RabbitConsumer.java:353) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitConsumer.<init>(RabbitConsumer.java:59) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.createConsumer(RabbitMQConsumer.java:127) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.createConsumers(RabbitMQConsumer.java:99) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.component.rabbitmq.RabbitMQConsumer.doStart(RabbitMQConsumer.java:179) ~[camel-rabbitmq-3.4.0.jar:3.4.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3025) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:348) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:275) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:180) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43) ~[camel-spring-boot-3.4.0.jar:3.4.0] at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0] at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.0.jar:3.4.0] at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.0.jar:3.4.0]
devansharora68@gmail.com:1596081457:2020-07-30T11:57:37.326+0000:1596081574:2020-07-30T11:59:34.854+0000:Also as mentioned in camel-rabbitmq document
 [https://camel.apache.org/components/latest/rabbitmq-component.html#_query_parameters_64_parameters]

using queueargs parameter gives below error

*Unknown parameters=[\\{queueargs=arg.queue.x-single-active-consumer=true}]*

 
davsclaus:1596081700:2020-07-30T12:01:40.011+0000:1596081700:2020-07-30T12:01:40.011+0000:Whats the endpoint uri for your camel rabbitmq endpoint you use, can you paste it here
devansharora68@gmail.com:1596082074:2020-07-30T12:07:54.292+0000:1596082074:2020-07-30T12:07:54.292+0000:[~davsclaus] 
my endpoint uri is like

rabbitmq://localhost:5672/mydirectdelayed?queue=testQ4&routingKey=testKey&username=me&password=mypwd&threadPoolSize=1&concurrentConsumers=1&autoDelete=false&vhost=myvhost&arg.queue.x-single-active-consumer=true&arg.exchange.x-delayed-type=direct&exchangeType=x-delayed-message
devansharora68@gmail.com:1596084839:2020-07-30T12:53:59.811+0000:1596084839:2020-07-30T12:53:59.811+0000:[~davsclaus] [~acosentino] 
do we need a change in 

org.apache.camel.component.rabbitmq.*RabbitMQDeclareSupport.formatSpecialQueueArguments*

to parse this argument to Boolean for rabbitmq api to take this as boolean and not as longstr
davsclaus:1596085554:2020-07-30T13:05:54.258+0000:1596085554:2020-07-30T13:05:54.258+0000:Yeah sadly it seems rabbitmq have put that burden on end-users. We can't frankly not always know if its supposed to be number, text or boolean etc for any arbitrary argument.
devansharora68@gmail.com:1596086034:2020-07-30T13:13:54.148+0000:1596086101:2020-07-30T13:15:01.042+0000:previously we were using camel-rabbitmq 2.24.x, then we could configure arguments like

*public class QueueArgsSACConfigurer implements ArgsConfigurer {*
 *@Override*

*public void configurArgs(Map<String, Object> map) \{ map.put(""x-max-priority"", 3); map.put(""x-single-active-consumer"", true); }*
 *}*
 and in endpoint url we could add this bean definition 
 it used to work fine then.
 but in camel-rabbitmq 3.x ArgsConfigurer was deprecated.
and we then we switched to endpoint url based args and found this prblm
davsclaus:1596086439:2020-07-30T13:20:39.075+0000:1596086439:2020-07-30T13:20:39.075+0000:If you use java code, you can do something as workaround

RabbitMQEndpoint e = context.getEndpoint(""xxx"", RabbitMQEndpoint.class);
e.getArgs().put(""x-single ..."", true"");

And then

from(e).to(""foo"")


eg you get the endpoint, and then put on the args with the boolean value, and then use the endpoint instance in the route dsl
devansharora68@gmail.com:1596087124:2020-07-30T13:32:04.068+0000:1596087124:2020-07-30T13:32:04.068+0000:[~davsclaus] 
yes we are using java code. i tried this workaround like

RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class);RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class); e.getArgs().put(""arg.queue.x-single-active-consumer"", true); e.getArgs().put(""arg.exchange.x-delayed-type"", ""direct""); from(e).startupOrder(4).log(""${body}"").routeId(""fourthorderROute"");

and

RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class);RabbitMQEndpoint e = context.getEndpoint(epUri, RabbitMQEndpoint.class); e.getArgs().put(""x-single-active-consumer"", true); e.getArgs().put(""x-delayed-type"", ""direct""); from(e).startupOrder(4).log(""${body}"").routeId(""fourthorderROute"");


the consumer is getting started, but without single active consumer feature.
seems it is not taking up the arguments
davsclaus:1596087438:2020-07-30T13:37:18.233+0000:1596087438:2020-07-30T13:37:18.233+0000:I think it should be ""queue.x-single-active-consumer"" as key
davsclaus:1596087468:2020-07-30T13:37:48.768+0000:1596087468:2020-07-30T13:37:48.768+0000:And exchange. as prefix for the exchange args, see the source in the endpoint code
devansharora68@gmail.com:1596087578:2020-07-30T13:39:38.691+0000:1596087578:2020-07-30T13:39:38.691+0000:thanks [~davsclaus] it works with queue. and exchange."
0,CAMEL-15354,Task,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,3,2020-07-30 10:55:11+00:00,2020-07-31 07:13:27+00:00,"0.31.0 is part of latest microprofile spec release.
0.33+ is for MP 4 which is not released for the foresable future.


So we need to go back to 0.31.0 version.","acosentino:1596083890:2020-07-30T12:38:10.447+0000:1596083890:2020-07-30T12:38:10.447+0000:This seems a bit hard to do [https://github.com/apache/camel/commit/73343ed3d73c70defeb0b560e3baf7df54ced47a]

The update was big.
davsclaus:1596086956:2020-07-30T13:29:16.748+0000:1596086956:2020-07-30T13:29:16.748+0000:Yeah I hope that we can use  the older API still - the library is < 1.0 so they may change/break apis in the future as well.
acosentino:1596088617:2020-07-30T13:56:57.275+0000:1596088617:2020-07-30T13:56:57.275+0000:We can try to revert. But I don't know what will happen with the camel-tracing thingy
davsclaus:1596150807:2020-07-31T07:13:27.241+0000:1596150807:2020-07-31T07:13:27.241+0000:Okay we can revert 0acab042a7fc48983f45695b35462d4d72511e95 when we upgrade back again"
0,CAMEL-15353,Improvement,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-07-30 09:19:58+00:00,2020-07-30 10:14:43+00:00,No Desc,
0,CAMEL-15352,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-07-30 09:00:27+00:00,2020-07-30 09:32:59+00:00,No Desc,
0,CAMEL-15351,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-07-30 07:11:55+00:00,2020-07-30 08:32:58+00:00,"Those events were reusing the event types from starting, but they should have their own as part of the work is done in doInit for initializing camel context.",
0,CAMEL-15350,Bug,Major,3.4.1,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Claus Ibsen,Brad Harvey,0,2,2020-07-29 11:53:01+00:00,2020-08-06 04:39:58+00:00,"If the SJMS-Batch consumption loop encounters anything other than a javax.jms.IllegalStateException (https://github.com/apache/camel/blob/master/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java#L330) then it logs a warning and stops consuming messages (https://github.com/apache/camel/blob/master/components/camel-sjms/src/main/java/org/apache/camel/component/sjms/batch/SjmsBatchConsumer.java#L348).


Example log after message broker is shut down:




 2020-07-29 10:33:32.060 WARN ||| 34468 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Connection refused: no further information: localhost/127.0.0.1:5672]

javax.jms.JMSException: Connection refused: no further information: localhost/127.0.0.1:5672
    at org.apache.qpid.jms.provider.ProviderException.toJMSException(ProviderException.java:34)
    at org.apache.qpid.jms.exceptions.JmsExceptionSupport.create(JmsExceptionSupport.java:80)
    at org.apache.qpid.jms.exceptions.JmsExceptionSupport.create(JmsExceptionSupport.java:112)
    at org.apache.qpid.jms.JmsConnection.pull(JmsConnection.java:915)
    at org.apache.qpid.jms.JmsConnection.pull(JmsConnection.java:899)
    at org.apache.qpid.jms.JmsMessageConsumer.performPullIfRequired(JmsMessageConsumer.java:732)
    at org.apache.qpid.jms.JmsMessageConsumer.dequeue(JmsMessageConsumer.java:332)
    at org.apache.qpid.jms.JmsMessageConsumer.receive(JmsMessageConsumer.java:213)
    at org.springframework.jms.connection.CachedMessageConsumer.receive(CachedMessageConsumer.java:86)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:427)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:381)
    at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:326)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.qpid.jms.provider.exceptions.ProviderIOException: Connection refused: no further information: localhost/127.0.0.1:5672



{{}}


It is not obvious from this log message that the route is now broken and will not receive any more messages. The route state is still ""Started"".


 


 


Expected Behaviour: The batch consumer can recover after errors (including a broker restart or failover) and continue to consume messages once the broker is available again.


 


A simple change is to catch any exception instead of only javax.jms.IllegalStateException.","davsclaus:1596409637:2020-08-03T07:07:17.323+0000:1596409637:2020-08-03T07:07:17.323+0000:Are you able to work an a fix and submit a PR?
bradhgbst:1596410169:2020-08-03T07:16:09.251+0000:1596410169:2020-08-03T07:16:09.251+0000:Yes hopefully this week.  Is there a planned release date for 3.4.3?
bradhgbst:1596517169:2020-08-04T12:59:29.073+0000:1596517169:2020-08-04T12:59:29.073+0000:Hi [~davsclaus] ,

You were too fast for me.  I have tested out the simple fix but unfortunately it is too simple.

First, I saw no change in behaviour.  I had to set ""keepAliveDelay"" on the endpoint otherwise it just rethrows the exception anyway - a bit of a trap for new players.  After setting keepAliveDelay to a positive value it did retry, but only once.  The reason is that it fails on the createSession call which is outside the try/catch block that was changed, so again it just logs a warning and stops doing anything else.  

My test case is to restart the message broker.

It does work OK if the message broker is restarted and ready in time for the first retry (before keepAliveDelay is exceeded).  It is possible Spring's SingleConnectionFactory is helping out here, allowing createSession to recover the connection under the covers.

Regards, Brad

 

Interesting bits of the log below:

First error 
{code:java}
WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.IllegalStateException - The Consumer is closed]"" 

org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:426) at {code}
Second error (first and only retry).  After this there is nothing.
{code:java}
WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect] javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect at  

org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:318) at {code}
 

This is the full log from just prior to stopping activemq.
{code:java}
2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:50.857 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask running2020-08-04 22:36:51.364 INFO ||| 62704 --- [0.1:61616@64353] o.s.j.c.CachingConnectionFactory         : Encountered a JMSException - resetting the underlying JMS Connection
javax.jms.JMSException: java.io.EOFException at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:54) at org.apache.activemq.ActiveMQConnection.onAsyncException(ActiveMQConnection.java:1960) at org.apache.activemq.ActiveMQConnection.onException(ActiveMQConnection.java:1979) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.ResponseCorrelator.onException(ResponseCorrelator.java:126) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:173) at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:345) at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:219) at java.lang.Thread.run(Thread.java:748)Caused by: java.io.EOFException: null at java.io.DataInputStream.readInt(DataInputStream.java:392) at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240)Caused by: java.io.EOFException: null
 at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ... 1 common frames omitted
2020-08-04 22:36:51.366 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : No message received2020-08-04 22:36:51.366 TRACE||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : BatchConsumptionTask running2020-08-04 22:36:51.368 WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.IllegalStateException - The Consumer is closed]
javax.jms.IllegalStateException: The Consumer is closed at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:879) at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:640) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.consumeBatchesOnLoop(SjmsBatchConsumer.java:426) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop$BatchConsumptionTask.access$1300(SjmsBatchConsumer.java:380) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:325) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)
2020-08-04 22:36:51.369 WARN ||| 62704 --- [0.1:61616@64353] o.s.j.c.CachingConnectionFactory         : Could not close shared JMS Connection
javax.jms.JMSException: Disposed due to prior exception at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:72) at org.apache.activemq.ActiveMQConnection.syncSendPacket(ActiveMQConnection.java:1421) at org.apache.activemq.ActiveMQConnection.close(ActiveMQConnection.java:688) at org.springframework.jms.connection.SingleConnectionFactory.closeConnection(SingleConnectionFactory.java:501) at org.springframework.jms.connection.SingleConnectionFactory.resetConnection(SingleConnectionFactory.java:389) at org.springframework.jms.connection.CachingConnectionFactory.resetConnection(CachingConnectionFactory.java:205) at org.springframework.jms.connection.SingleConnectionFactory.onException(SingleConnectionFactory.java:367) at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:721) at org.apache.activemq.ActiveMQConnection$5.run(ActiveMQConnection.java:1967) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.activemq.transport.TransportDisposedIOException: Disposed due to prior exception at org.apache.activemq.transport.ResponseCorrelator.onException(ResponseCorrelator.java:125) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114) at org.apache.activemq.transport.TransportFilter.onException(TransportFilter.java:114)Caused by: org.apache.activemq.transport.TransportDisposedIOException: Disposed due to prior exception
 at org.apache.activemq.transport.WireFormatNegotiator.onException(WireFormatNegotiator.java:173) at org.apache.activemq.transport.AbstractInactivityMonitor.onException(AbstractInactivityMonitor.java:345) at org.apache.activemq.transport.TransportSupport.onException(TransportSupport.java:96) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:219) ... 1 common frames omittedCaused by: java.io.EOFException: null at java.io.DataInputStream.readInt(DataInputStream.java:392)Caused by: java.io.EOFException: null
 at org.apache.activemq.openwire.OpenWireFormat.unmarshal(OpenWireFormat.java:268) at org.apache.activemq.transport.tcp.TcpTransport.readCommand(TcpTransport.java:240) at org.apache.activemq.transport.tcp.TcpTransport.doRun(TcpTransport.java:232) at org.apache.activemq.transport.tcp.TcpTransport.run(TcpTransport.java:215) ... 1 common frames omitted
2020-08-04 22:36:53.944 WARN ||| 62704 --- [msBatchConsumer] o.a.c.c.sjms.batch.SjmsBatchConsumer     : Exception caught consuming from myQueue. Caused by: [javax.jms.JMSException - Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect]
javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61616. Reason: java.net.ConnectException: Connection refused: connect at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:374) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:304) at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:244) at org.springframework.jms.connection.SingleConnectionFactory.doCreateConnection(SingleConnectionFactory.java:409) at org.springframework.jms.connection.SingleConnectionFactory.initConnection(SingleConnectionFactory.java:349) at org.springframework.jms.connection.SingleConnectionFactory.getConnection(SingleConnectionFactory.java:327) at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:649) at com.sun.proxy.$Proxy131.createSession(Unknown Source) at org.apache.camel.component.sjms.batch.SjmsBatchConsumer$BatchConsumptionLoop.run(SjmsBatchConsumer.java:318) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748)Caused by: java.net.ConnectException: Connection refused: connect at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)Caused by: java.net.ConnectException: Connection refused: connect
 at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) at java.net.Socket.connect(Socket.java:607) at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:525) at org.apache.activemq.transport.tcp.TcpTransport.doStart(TcpTransport.java:488) at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55) at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:169) at org.apache.activemq.transport.InactivityMonitor.start(InactivityMonitor.java:52) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:72) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64) at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:354) ... 13 common frames omitted {code}
 

 

 
bradhgbst:1596519369:2020-08-04T13:36:09.235+0000:1596519369:2020-08-04T13:36:09.235+0000:This patch on 3.4.x is what I am thinking - just move where the session is created.  I can create a PR and maybe add a test case, hopefully tomorrow.

[^CAMEL-15350-patch.txt]

 
bradhgbst:1596519675:2020-08-04T13:41:15.787+0000:1596519675:2020-08-04T13:41:15.787+0000:Also would you consider a change to the default keepAliveDelay of -1, which effectively disables the retry?  The comments imply that it is like that for backwards compatibility so that it can shut down / exit on failure, but I don't quite follow how anything would notice the shutdown.
davsclaus:1596541004:2020-08-04T19:36:44.021+0000:1596541004:2020-08-04T19:36:44.021+0000:Thanks Brad, yeah that is a better patch. I have applied it to master and 3.4 branches.
davsclaus:1596541728:2020-08-04T19:48:48.414+0000:1596541728:2020-08-04T19:48:48.414+0000:Yeah it seems that there are 2 options for controlling this

- recoveryInterval
- keepAliveDelay

The first is during startup only, and the latter is during consuming. Ideally there would just have been one option that has automatic refresh (like camel-jms has).

So yeah we can make the keepAlive have same value as the recovery, eg 5000 in Camel 3.5 onwards. We can't change a default value in a patch release like 3.4.3


bradhgbst:1596554286:2020-08-04T23:18:06.988+0000:1596554286:2020-08-04T23:18:06.988+0000:Thanks. Yes that makes sense.
davsclaus:1596577598:2020-08-05T05:46:38.339+0000:1596577598:2020-08-05T05:46:38.339+0000:changed the default in camel 3.5
bradhgbst:1596659998:2020-08-06T04:39:58.520+0000:1596659998:2020-08-06T04:39:58.520+0000:For whatever it is worth, here's a reproducer unit test.  It currently fails even with the fix because the consumer never gets a new connection from the connection factory. 

[^CAMEL-15350-reproducer-patch.txt]

The fix does work with Spring's CachingConnectionFactory as it is able to recover a broken connection.  

 "
0,CAMEL-15349,Bug,Minor,3.4.2,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Andrea Cosentino,Austin,0,2,2020-07-29 11:44:41+00:00,2020-07-31 05:32:26+00:00,"camel-xmpp routes consuming private chats from participants with a domain throws  org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':'


from(""xmpp://herp@localhost:5222/derp@localhost?password=herp"").to(""stream:out"");


SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp@localhost:herp': org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:130) at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:2898) at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3225) at org.apache.camel.impl.engine.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3159) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3069) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3095) at org.apache.camel.impl.engine.AbstractCamelContext.startRouteService(AbstractCamelContext.java:2942) at org.apache.camel.impl.DefaultModel.start(DefaultModel.java:358) at org.apache.camel.impl.DefaultModel.startRoute(DefaultModel.java:330) at org.apache.camel.impl.DefaultModel.startRouteDefinitions(DefaultModel.java:323) at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:88) at org.apache.camel.impl.AbstractModelCamelContext.addRouteDefinitions(AbstractModelCamelContext.java:111) at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:486) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:426) at org.apache.camel.impl.engine.AbstractCamelContext.lambda$addRoutes$0(AbstractCamelContext.java:1119) at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2460) at org.apache.camel.impl.engine.AbstractCamelContext.addRoutes(AbstractCamelContext.java:1119) at a.test.main(test.java:32)Caused by: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp@localhost:herp': org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:675) at org.apache.camel.component.xmpp.XmppConsumer.doStart(XmppConsumer.java:94) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ... 17 moreCaused by: org.jxmpp.stringprep.XmppStringprepException: Localpart must not contain ':' at org.jxmpp.stringprep.simple.SimpleXmppStringprep.localprep(SimpleXmppStringprep.java:74) at org.jxmpp.stringprep.XmppStringPrepUtil.localprep(XmppStringPrepUtil.java:62) at org.jxmpp.jid.parts.Localpart.from(Localpart.java:165) at org.jxmpp.jid.impl.LocalAndDomainpartJid.<init>(LocalAndDomainpartJid.java:46) at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:673) ... 19 more


camel-xmpp routes consuming private chats from participant without a domain throws org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string


 


from(""xmpp://herp@localhost:5222/derp?password=herp"").to(""stream:out"");


SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.Exception in thread ""main"" org.apache.camel.RuntimeCamelException: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp:herp': org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:130) at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:2898) at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3225) at org.apache.camel.impl.engine.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3159) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3069) at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3095) at org.apache.camel.impl.engine.AbstractCamelContext.startRouteService(AbstractCamelContext.java:2942) at org.apache.camel.impl.DefaultModel.start(DefaultModel.java:358) at org.apache.camel.impl.DefaultModel.startRoute(DefaultModel.java:330) at org.apache.camel.impl.DefaultModel.startRouteDefinitions(DefaultModel.java:323) at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:88) at org.apache.camel.impl.AbstractModelCamelContext.addRouteDefinitions(AbstractModelCamelContext.java:111) at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:486) at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:426) at org.apache.camel.impl.engine.AbstractCamelContext.lambda$addRoutes$0(AbstractCamelContext.java:1119) at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2460) at org.apache.camel.impl.engine.AbstractCamelContext.addRoutes(AbstractCamelContext.java:1119) at a.test.main(test.java:32)Caused by: org.jxmpp.stringprep.XmppStringprepException: XmppStringprepException caused by 'Chat:derp:herp': org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:675) at org.apache.camel.component.xmpp.XmppConsumer.doStart(XmppConsumer.java:94) at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ... 17 moreCaused by: org.jxmpp.stringprep.XmppStringprepException: Argument can't be the empty string at org.jxmpp.stringprep.XmppStringPrepUtil.throwIfEmptyString(XmppStringPrepUtil.java:131) at org.jxmpp.stringprep.XmppStringPrepUtil.localprep(XmppStringPrepUtil.java:57) at org.jxmpp.jid.parts.Localpart.from(Localpart.java:165) at org.jxmpp.jid.impl.LocalAndDomainpartJid.<init>(LocalAndDomainpartJid.java:46) at org.jxmpp.jid.impl.JidCreate.entityBareFrom(JidCreate.java:673) ... 19 more","davsclaus:1595995017:2020-07-29T11:56:57.332+0000:1595995017:2020-07-29T11:56:57.332+0000:You are welcome to see if you can fix this and provide a PR
vindiagram:1596090965:2020-07-30T14:36:05.298+0000:1596090965:2020-07-30T14:36:05.298+0000:Created a pull request with the fix located at [https://github.com/apache/camel/pull/4058]"
0,CAMEL-15348,Bug,Major,3.4.1,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Unassigned,Rastislav Papp,0,2,2020-07-29 08:42:25+00:00,2020-07-29 17:51:37+00:00,"When trying to create a cxfEndpoint in blueprint xml, using cxfEndpoint element from namespace http://camel.apache.org/schema/blueprint/cxf there is a problem with endpointName and serviceName parameters. This:




<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:cxf=""http://camel.apache.org/schema/blueprint/cxf"">

    <cxf:cxfEndpoint id=""fooEndpoint""
                     address=""${endpoint.url}""
                     serviceClass=""com.foo.MyService""
                     endpointName=""foo:MyService""
                     continuationTimeout=""0""
                     xmlns:foo=""http://abc.def"">
        ...
    </cxf:cxfEndpoint>

</blueprint>




throws an exception:




Caused by: org.osgi.service.blueprint.container.ComponentDefinitionException: Error setting property: PropertyDescriptor <name: endpointName, getter: null, setter: [class org.apache.camel.component.cxf.CxfEndpoint.setEndpointName(class java.lang.String)]
	at org.apache.aries.blueprint.container.BeanRecipe.setProperty(BeanRecipe.java:818) ~[?:?]
...
Caused by: java.lang.Exception: Unable to convert value {http://abc.def}MyService to type java.lang.String
	at org.apache.aries.blueprint.container.AggregateConverter.convert(AggregateConverter.java:187) ~[?:?]




I suspect the problem is with a org.apache.camel.component.cxf.CxfEndpoint#setEndpointName and org.apache.camel.component.cxf.CxfEndpoint#setServiceName methods - which previously accepted QName, but now accept String, and this change was not reflected in org.apache.camel.component.cxf.blueprint.EndpointDefinitionParser


I'm attaching a project to reproduce the behavior -  camel-reproducer-blueprint-cxf.zip","acosentino:1595988751:2020-07-29T10:12:31.947+0000:1595988751:2020-07-29T10:12:31.947+0000:Yes, I think so.

Can you open a PR fixing this on that side? [https://github.com/apache/camel-karaf/blob/master/components/camel-cxf-blueprint/src/main/java/org/apache/camel/component/cxf/blueprint/EndpointDefinitionParser.java]
rastislav.papp:1595990865:2020-07-29T10:47:45.432+0000:1595990865:2020-07-29T10:47:45.432+0000:I've done so - https://github.com/apache/camel-karaf/pull/13"
0,CAMEL-15347,Bug,Minor,3.3.0,None,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Robert Baumgartner,0,1,2020-07-29 08:21:46+00:00,2020-07-30 06:21:32+00:00,"If I set moveAfterRead=true and camel.source.endpoint.destinationBucket=camel-backup and camel-backup does not exist -> error!
 even camel.source.endpoint.autoCreateBucket=true (default)!


We need to do check for creation and existence in the consumer doStart",
0,CAMEL-15346,Improvement,Major,3.4.2,None,"
None
",Resolved,Fixed,"3.4.3, 3.5.0",Peter Palaga,Peter Palaga,0,1,2020-07-28 13:39:47+00:00,2020-07-29 07:53:41+00:00,"Originally reported in Camel Quarkus https://github.com/apache/camel-quarkus/issues/1497


The ModelParser produced by org.apache.camel.xml.in.ModelParserXMLRoutesDefinitionLoader should pass the XML namespace info to NamespaceAware elements, such as org.apache.camel.model.language.XPathExpression so that they work the same way as they do with JaxbXMLRoutesDefinitionLoader",
0,CAMEL-15345,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-07-28 13:11:55+00:00,2020-07-28 13:15:13+00:00,"Lets validate this during creating endpoints, as otherwise you get a failure later when twitter4j requires accessToken and other login information, if they have not been configured.",davsclaus:1595913313:2020-07-28T13:15:13.195+0000:1595913313:2020-07-28T13:15:13.195+0000:This allows to fail fast and report mis configuration during startup or via health checks
0,CAMEL-15344,Bug,Minor,None,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Claus Ibsen,Claus Ibsen,0,1,2020-07-28 10:04:57+00:00,2020-07-29 06:52:48+00:00,"During graceful shutdown then the inflight counter can report 4 when there is only 2


12:03:48.593 Camel (camel-1) thread #5 - ShutdownTask INFO  o.a.c.i.e.DefaultShutdownStrategy - Waiting as there are still 4 inflight and pending exchanges to complete, timeout in 42 seconds. Inflights per route: [route1 = 4]",davsclaus:1595973578:2020-07-29T05:59:38.479+0000:1595973578:2020-07-29T05:59:38.479+0000:Ah okay so its a bug in the Delay EIP as part of the routing engine refactorings for 3.x
0,CAMEL-15343,Bug,Major,3.4.2,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Claus Ibsen,Claus Ibsen,0,1,2020-07-28 08:29:35+00:00,2022-05-02 13:03:54+00:00,"Its a more general problem where the shutdown of Camel is not done graceful.


See also CAMEL-15307",
0,CAMEL-15342,Improvement,Minor,None,3.5.0,"
None
",Closed,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-07-28 08:26:36+00:00,2020-07-29 07:49:46+00:00,"Similar to work has been done in CAMEL-15198, the same can be done in the queue component",
0,CAMEL-15341,New Feature,Major,None,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Omar Al-Safi,0,3,2020-07-28 08:18:33+00:00,2021-01-27 07:55:57+00:00,"Would be nice if we have a camel component for Azure Data Lake Gen2. This will be pretty much similar to the current camel-azure-storage-blob. Here is important links to learn more:



DataLake Gen2 Docs: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction
DataLake Gen2 Java Client: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction
Samples: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake
camel-azure-storage-blob: https://github.com/apache/camel/tree/master/components/camel-azure-storage-blob","aryankoul:1595902304:2020-07-28T10:11:44.464+0000:1595902304:2020-07-28T10:11:44.464+0000:I would like to work on this issue.
acosentino:1595903237:2020-07-28T10:27:17.197+0000:1595903237:2020-07-28T10:27:17.197+0000:Weren't you already working on something else? Etcd and kafka streams?
aryankoul:1595903603:2020-07-28T10:33:23.076+0000:1595903603:2020-07-28T10:33:23.076+0000:[~acosentino] I had a conversation with omar regarding the kafka streams, and we could not come up with a solid use case for kafka streams. And for etcd v3, someone is already working on that issue.
omarsmak:1602116550:2020-10-08T08:22:30.166+0000:1602116550:2020-10-08T08:22:30.166+0000:hey [~aryankoul], any updates on this one?
aryankoul:1606553822:2020-11-28T16:57:02.425+0000:1606553822:2020-11-28T16:57:02.425+0000:[~omarsmak]  [~acosentino] Please review the PR."
0,CAMEL-15340,Wish,Minor,3.4.2,3.5.0,"
None
",Closed,Fixed,3.5.0,Andrea Cosentino,Emmerson,0,2,2020-07-28 00:04:57+00:00,2020-07-30 13:11:53+00:00,"Hi,


 


In the kubernetes job component documentation you provide a good example to list jobs, I test it and works fine.


https://camel.apache.org/components/latest/kubernetes-job-component.html


 


I wonder if you kindly can provide an example for createJob operation, I am really interested to explore this feature.


 


Thanks","emmerson:1595900764:2020-07-28T09:46:04.477+0000:1595900764:2020-07-28T09:46:04.477+0000:I manage to create a job after see the source code of KubernetesJobProducer class.

 

Thanks
acosentino:1596085913:2020-07-30T13:11:53.940+0000:1596085913:2020-07-30T13:11:53.940+0000:I referenced your repo and account on Github and reported the example in our codebase. It should goes online in about 10 minutes."
0,CAMEL-15339,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Ruben Vargas,0,1,2020-07-27 16:10:46+00:00,2020-07-30 06:08:41+00:00,"Apache Camel currently has an OpenTracing component that enables a request to be traced across multiple camel components.


This task is to implement an equivalent capability, but using the OpenTelemetry Java tracer.


 


This might involve a refactoring of the current opentracing implementation in order to reuse span decorators.",
0,CAMEL-15338,Bug,Major,3.4.2,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Andrea Cosentino,Yulia Buzlukova,0,1,2020-07-24 23:23:52+00:00,2020-07-29 07:32:20+00:00,"For channels starting with ""/event/"" ""__e"" suffix is always added to the channel name in SubscriptionHelper.


 


However, according to salesforce documentation API names of standard platform events, such as AssetTokenEvent, don't include a suffix.


 


As a result, camel salesforce component cannot subscribe to Standard Event channels. 


Suggestion: not to add ""__e"" suffix to all events, but leave it to endpoint configuration.


 





 
EndPoint
Channel Name returned by SubscriptionHelper
Result


Current Approach
salesforce:/event/LoginEventStream?replayId=-1
/event/LoginEventStream__e
""subscription"":""/event/LoginEventStream__e""
 ""error"":""403:denied_by_security_policy:create_denied""
 ""successful"":false


 
salesforce:/event/CustomEvent?replayId=-1
/event/CustomEvent__e
""subscription"":""/event/CustomEvent__e"",
 ""successful"":true


 
salesforce:/event/CustomEvent__e?replayId=-1
/event/CustomEvent__e
""subscription"":""/event/CustomEvent__e"",
 ""successful"":true


Suggested Approach
salesforce:/event/LoginEventStream?replayId=-1
/event/LoginEventStream
""subscription"":""/event/LoginEventStream""
 ""successful"":true


 
salesforce:/event/CustomEvent__e?replayId=-1
/event/CustomEvent__e
""subscription"":""/event/CustomEvent__e"",
 ""successful"":true





 


To receive the result described in the suggested approach, I removed channel suffix hardcoding from SubscriptionHelper.getChannelName



static String getChannelName(final String topicName) {
    final StringBuilder channelName = new StringBuilder();
    if (topicName.charAt(0) != '/') {
        channelName.append('/');
    }

    if (topicName.indexOf('/', 1) > 0) {
        channelName.append(topicName);
    } else {
        channelName.append(""topic/"");
        channelName.append(topicName);
    }
    
    /*
     * suffix hardcoding for event channels is removed
     */

    return channelName.toString();
}



 


Pull request",
0,CAMEL-15337,Task,Major,None,,"

suggestions

",Resolved,Implemented,None,Unassigned,Aemie,0,3,2020-07-24 16:59:22+00:00,2020-08-14 09:12:26+00:00,"The antora UI makes use of the table of content so when a webpage has a large amount of content, it makes it easier for the user to navigate. 


I have observed this in Hugo pages such as articles that have a large amount of content as well. So to improve user experience over the Hugo content as well, I suggest adding the toc for the Hugo pages excluding the blog posts.


I have added an image of how it looks. It uses the same CSS as that of antora UI.","Aemie:1595581223:2020-07-24T17:00:23.273+0000:1595581223:2020-07-24T17:00:23.273+0000:[~zregvart] [~delawen] Do you agree on including toc for the hugo content?
zregvart:1595645833:2020-07-25T10:57:13.121+0000:1595645833:2020-07-25T10:57:13.121+0000:Might make sense, though I think we only have a couple of pages generated by Hugo that can be considered long.
Aemie:1595651195:2020-07-25T12:26:35.196+0000:1595651195:2020-07-25T12:26:35.196+0000:Well be it long or short, we have included the toc for each antora page and it makes it easy to navigate through the docs certainly. That's why I think we should keep it consistent with the toc for antora and Hugo as even Hugo provides toc feature.
githubbot:1596361050:2020-08-02T17:37:30.315+0000:1596361050:2020-08-02T17:37:30.315+0000:AemieJ opened a new pull request #446:
URL: https://github.com/apache/camel-website/pull/446


   ### Motive for building Hugo toc
   For the apache camel website, the antora pages have a toc generated which will help in easing the user navigation. Thus, for the Hugo pages, toc should be implemented. 
   
   ### DIfference between toc of Antora and Hugo 
   The manner in which the toc of Antora and Hugo is structured is completed different. To trigger the toc for Hugo, one code of line needs to be inserted i.e `{{ TableOfContents }}` however I wanted the UI implementation of both Antora and Hugo to be the same.
   In Hugo, the manner in which toc is created is just a nested loop of `ul` and `li` but in the case of Antora, it's a proper structure with defined levels where `##`  would signify `data-level: 2` and `###` would signify `data-level:3`. This wasn't the case of Hugo. 
   
   Thus, my first implementation within the **js** file was to create the data levels.
   
   ### Problems faced while implementing fragment jumping of links and also based on scrolling. 
   The `scroll` event function that is implemented for antora in the `on-this-page.js` can't be used for the Hugo as their structures are completely different as stated before. Hence, I have implemented my own logic similar to that of antora for the scroll and fragment jumping and it works. 
   
   #### Drawbacks to my implementation currently
   
   In my implementation, the fragment jumping works smoothly when done through the keyboard however when using a scrollbar, it shows odd behavior on scrolling down in some cases. 
   
   ![toc-content-hugo](https://user-images.githubusercontent.com/44139348/89124527-66809400-d4f5-11ea-99f9-77806e1984f4.gif)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596553511:2020-08-04T23:05:11.308+0000:1596553511:2020-08-04T23:05:11.308+0000:zregvart commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r465373346



##########
File path: antora-ui-camel/src/css/main.css
##########
@@ -28,7 +30,8 @@
     scrollbar-width: thin; /* Firefox */
   }
 
-  .toc.sidebar .toc-menu ul::-webkit-scrollbar {
+  .toc.sidebar .toc-menu ul::-webkit-scrollbar,
+  .toc-sidebar .toc-hugo ul::-webkit-scrollbar {

Review comment:
       We also control this element's class so we can have `.toc-menu` here, right? There should be a `.static` class that we can narrow only to Hugo rendered content in the JavaScript below.

##########
File path: antora-ui-camel/src/css/main.css
##########
@@ -1,5 +1,6 @@
 @media screen and (max-width: 1023px) {
-  aside.toc.sidebar {
+  aside.toc.sidebar,
+  aside.toc-sidebar {

Review comment:
       We control this element's class, so we can have `aside.toc.sidebar` as selector for both Antora and Hugo pages, am I missing something?

##########
File path: antora-ui-camel/src/js/98-hugo-on-this-page.js
##########
@@ -0,0 +1,91 @@
+;(function () {
+  'use strict'
+
+  var parent
+  var child = []
+  var lastActiveLink = null
+  var selector = document.querySelector('.toolbar')
+  var headings = Array.from(document.querySelectorAll('article.doc h1, article.doc h2, article.doc h3'))
+  var links = Array.from(document.querySelectorAll('aside.toc-sidebar .toc-hugo a'))
+  var width = document.querySelector('.navbar').offsetWidth
+  var parentSelector = document.querySelectorAll('.toc-hugo li ul:first-child')
+
+  var topValMin = selector.getBoundingClientRect().top + selector.getBoundingClientRect().height - 5
+  var topValMax = topValMin + 20

Review comment:
       These are pixels, so not sure if this will calculate correctly if font size is changed in the browser settings.

##########
File path: antora-ui-camel/src/css/toolbar.css
##########
@@ -12,6 +12,10 @@
   z-index: var(--z-index-toolbar);
 }
 
+.toolbar.hugo {
+  box-shadow: none;
+}

Review comment:
       Not sure this is related to TOC.

##########
File path: antora-ui-camel/src/css/toc.css
##########
@@ -17,49 +20,57 @@
   padding-bottom: 0.25rem;
 }
 
-.toc.sidebar .toc-menu h3 {
+.toc.sidebar .toc-menu h3,
+.toc-sidebar .toc-hugo h3 {
   display: flex;
   flex-direction: column;
   height: 2.5rem;
   justify-content: flex-end;
 }
 
-.toc .toc-menu ul {
+.toc .toc-menu ul,
+.toc .toc-hugo ul {
   font-size: calc(15 / var(--rem-base) * 1rem);
   line-height: var(--toc-line-height);
   list-style: none;
   margin: 0;
   padding: 0;
 }
 
-.toc.sidebar .toc-menu ul {
+.toc.sidebar .toc-menu ul,
+.toc-sidebar .toc-hugo ul {
   max-height: var(--toc-height);
   overflow-y: auto;
 }
 
 @media screen and (min-width: 1024px) {
-  .toc .toc-menu h3 {
+  .toc .toc-menu h3,
+  .toc .toc-hugo h3 {
     font-size: calc(15 / var(--rem-base) * 1rem);
   }
 
-  .toc .toc-menu ul {
+  .toc .toc-menu ul,
+  .toc .toc-hugo ul {
     font-size: calc(13.5 / var(--rem-base) * 1rem);
   }
 }
 
-.toc .toc-menu li {
+.toc .toc-menu li,
+.toc .toc-hugo li {
   margin: 0;
 }
 
-.toc .toc-menu li[data-level=""2""] a {
+.toc .toc-menu li[data-level=""2""] a,
+.toc .toc-hugo li[data-level=""2""] a {

Review comment:
       Do we need the `data-level` attribute for Hugo generated content? This selector could be something like `.static .toc.sidebar nav ul li ul li ul li`. So instead of generating the `data-level` in the JavaScript below, we could use CSS selectors that would depict the depth i.e. level of the heading.

##########
File path: antora-ui-camel/src/css/static.css
##########
@@ -1,6 +1,11 @@
 .static {
   margin: var(--static-margin);
-  max-width: var(--static-max-width--desktop);
+}
+
+@media screen and (min-width: 1024px) {
+  .static {
+    max-width: var(--static-max-width--desktop);
+  }

Review comment:
       Not sure this change is related to TOC?

##########
File path: content/community/articles.md
##########
@@ -2,7 +2,7 @@
 title: ""Articles""
 ---
 
-### Camel Videos
+## Camel Videos

Review comment:
       These changes could be on another PR, they don't seem to be related to this.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596748921:2020-08-07T05:22:01.369+0000:1596748921:2020-08-07T05:22:01.369+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466826788



##########
File path: antora-ui-camel/src/css/main.css
##########
@@ -1,5 +1,6 @@
 @media screen and (max-width: 1023px) {
-  aside.toc.sidebar {
+  aside.toc.sidebar,
+  aside.toc-sidebar {

Review comment:
       I need to currently find the issue 'cause whenever I use `<aside class=""toc sidebar"">` in case of Hugo content, this element doesn't render on the page. That's why I temporarily made use of `<aside class=""toc toc-sidebar"">`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596748998:2020-08-07T05:23:18.398+0000:1596748998:2020-08-07T05:23:18.398+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466827136



##########
File path: antora-ui-camel/src/css/static.css
##########
@@ -1,6 +1,11 @@
 .static {
   margin: var(--static-margin);
-  max-width: var(--static-max-width--desktop);
+}
+
+@media screen and (min-width: 1024px) {
+  .static {
+    max-width: var(--static-max-width--desktop);
+  }

Review comment:
       Each change in this file is related to the toc. The thing is within the antora pages fragment jumping occurs accurately with respect to the toolbar. As I didn't want to include additional code for fragment jumping and positioning, I included a blank toolbar in the case of Hugo pages as well.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596749021:2020-08-07T05:23:41.843+0000:1596749021:2020-08-07T05:23:41.843+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466827288



##########
File path: antora-ui-camel/src/css/main.css
##########
@@ -28,7 +30,8 @@
     scrollbar-width: thin; /* Firefox */
   }
 
-  .toc.sidebar .toc-menu ul::-webkit-scrollbar {
+  .toc.sidebar .toc-menu ul::-webkit-scrollbar,
+  .toc-sidebar .toc-hugo ul::-webkit-scrollbar {

Review comment:
       I didn't exactly get what do you mean by this?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596749056:2020-08-07T05:24:16.502+0000:1596749056:2020-08-07T05:24:16.502+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466827484



##########
File path: antora-ui-camel/src/js/98-hugo-on-this-page.js
##########
@@ -0,0 +1,91 @@
+;(function () {
+  'use strict'
+
+  var parent
+  var child = []
+  var lastActiveLink = null
+  var selector = document.querySelector('.toolbar')
+  var headings = Array.from(document.querySelectorAll('article.doc h1, article.doc h2, article.doc h3'))
+  var links = Array.from(document.querySelectorAll('aside.toc-sidebar .toc-hugo a'))
+  var width = document.querySelector('.navbar').offsetWidth
+  var parentSelector = document.querySelectorAll('.toc-hugo li ul:first-child')
+
+  var topValMin = selector.getBoundingClientRect().top + selector.getBoundingClientRect().height - 5
+  var topValMax = topValMin + 20

Review comment:
       I have worked with changing the font size in the browser settings, it works as this just sets the range based on the position and height of the toolbar.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596749083:2020-08-07T05:24:43.552+0000:1596749083:2020-08-07T05:24:43.552+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466827626



##########
File path: antora-ui-camel/src/css/toolbar.css
##########
@@ -12,6 +12,10 @@
   z-index: var(--z-index-toolbar);
 }
 
+.toolbar.hugo {
+  box-shadow: none;
+}

Review comment:
       The thing is within the antora pages fragment jumping occurs accurately with respect to the toolbar. As I didn't want to include additional code for fragment jumping and positioning, I included a blank toolbar in the case of Hugo pages as well.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596749138:2020-08-07T05:25:38.068+0000:1596749138:2020-08-07T05:25:38.068+0000:AemieJ commented on a change in pull request #446:
URL: https://github.com/apache/camel-website/pull/446#discussion_r466827843



##########
File path: content/community/articles.md
##########
@@ -2,7 +2,7 @@
 title: ""Articles""
 ---
 
-### Camel Videos
+## Camel Videos

Review comment:
       Well, a few of the contents within the Hugo pages weren't perfectly aligned due to which the toc content wasn't being generated accurately. Hence, I had to make changes to these particular files.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596824498:2020-08-08T02:21:38.340+0000:1596824498:2020-08-08T02:21:38.340+0000:AemieJ commented on pull request #446:
URL: https://github.com/apache/camel-website/pull/446#issuecomment-670809878


   @zregvart I did research on **Intersection Observer** and tried its implementation but on observing, it is only possible with a parent and child element. Here, `article.doc` is the parent ( root ) element however it doesn't cover a certain height thus the visibility of the target ( all the headings ) can't be compared based on it. Also, it has a loophole, the threshold triggers for any of its headings on the page.
   
   Other than that, I modified the implementation of logic, currently, it works pretty efficiently ( even when the font-size within browser settings is modified )


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597331122:2020-08-13T23:05:22.123+0000:1597331122:2020-08-13T23:05:22.123+0000:zregvart opened a new pull request #459:
URL: https://github.com/apache/camel-website/pull/459


   Based on work by @AemieJ in #446 this simplifies the implementation by
   relying on the implementation already provided by Antora.
   
   The main issue with reusing the Antora implementation was that the
   markup of rendered Asciidoc contains `<div class=""sect?"">` elements
   around the chapters. Hugo rendered, static, content does not have this,
   so the logic for the _on this page_ functionality needed to be adjusted
   slightly because of this.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597331135:2020-08-13T23:05:35.832+0000:1597331135:2020-08-13T23:05:35.832+0000:zregvart commented on pull request #459:
URL: https://github.com/apache/camel-website/pull/459#issuecomment-673752172


   @AemieJ can you have a look at this?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597343588:2020-08-14T02:33:08.383+0000:1597343588:2020-08-14T02:33:08.383+0000:AemieJ commented on pull request #459:
URL: https://github.com/apache/camel-website/pull/459#issuecomment-673849932


   @zregvart I didn't see that the Hugo missed that section. This is a much easier implementation and it works perfectly.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597359103:2020-08-14T06:51:43.336+0000:1597359103:2020-08-14T06:51:43.336+0000:zregvart merged pull request #459:
URL: https://github.com/apache/camel-website/pull/459


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597359138:2020-08-14T06:52:18.633+0000:1597359138:2020-08-14T06:52:18.633+0000:zregvart commented on pull request #446:
URL: https://github.com/apache/camel-website/pull/446#issuecomment-673919192


   With #459 merged I think we can close this now. @AemieJ is there anything I've missed?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1597364563:2020-08-14T08:22:43.471+0000:1597364563:2020-08-14T08:22:43.471+0000:Thanks @aemiej
githubbot:1597367545:2020-08-14T09:12:25.051+0000:1597367545:2020-08-14T09:12:25.051+0000:AemieJ closed pull request #446:
URL: https://github.com/apache/camel-website/pull/446


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15336,Bug,Minor,None,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Andrea Cosentino,Aurélien Pupier,0,2,2020-07-24 11:20:42+00:00,2020-07-24 12:57:01+00:00,"on https://camel.apache.org/manual/latest/faq/what-platforms-are-supported.html , it is indicated that ""any platform supporting JDK6"" are supported. This not true for latest Camel versions.


proposal:



provide a table with ranges of Camel with JDK
point to CI jobs to let users check what is tested exactly",acosentino:1595566605:2020-07-24T12:56:45.761+0000:1595566605:2020-07-24T12:56:45.761+0000:[https://camel.apache.org/manual/latest/faq/what-platforms-are-supported.html]
0,CAMEL-15335,Improvement,Major,None,,"
None
",Resolved,Implemented,None,Unassigned,Aemie,0,3,2020-07-23 17:12:21+00:00,2020-08-14 08:28:16+00:00,"The current search result design doesn't fit entirely with the website design. Thus, I wanted to introduce a few changes to how we present it. Also, in addition to I would like to suggest that we include only the top 5 or top 6 results and not 10 as the pages are ranked by weight based on the search query and presented so a good practice would show fewer results which are precise.","zregvart:1595505084:2020-07-23T19:51:24.571+0000:1595505084:2020-07-23T19:51:24.571+0000:We can take a look at the [Algolia UI|https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/js/]. Since we're using the crawler provided by Algolia we need to put attribution to Algolia in the search results.
Aemie:1595539765:2020-07-24T05:29:25.371+0000:1595671047:2020-07-25T17:57:27.224+0000:[~zregvart] I took ideas of search layout from both Algolia UI and Bootstrap docs. I added the attribute of Search By Algolia on the bottom of the search results in search-result-design#2.png and search-result#3.png. I personally prefer the search-result#3.png. Also, in this design when the user hovers over a particular link within the section the whole section is highlighted with the background of #f5f5f5 shade.

What do you think about it?
Aemie:1596071464:2020-07-30T09:11:04.891+0000:1596071464:2020-07-30T09:11:04.891+0000:[~zregvart] for the past day while designing on the search result layout, I wanted to not involve the use of scrollbar and as well not limit the number of searches queries. In normal algolia, the number of hits is a lot and we are minimizing to 10 itself and so I was thinking to take inspiration from the Algolia UI on how they presented the results with pagination. I had this in mind - 
 * We get max 10 results for a search query and all its details are present within the data variable. 
 * We take the data variable and distribute the whole data in terms of 3 query results per page.
 * For each page, we make use of the same layout. 

For distributing the data, I have come with the following logic implementation as stated in the *distributeData.js*. This will remove the use of scrollbar and allow about 10 result queries sorted in a sophisticated fashion. 

I have created the basic layout and will create a PR for it soon but I wanted to implement pagination as same as in Algolia UI as well as I think it will be really useful. What do you think?
zregvart:1596087620:2020-07-30T13:40:20.273+0000:1596087620:2020-07-30T13:40:20.273+0000:I don’t think we can have data within JavaScript that comes from outside of Algolia search data, this will make it very difficult to maintain. I’m blanking on this right now, didn’t we put categories in the search configuration and have them in the resulting search data?
Aemie:1596090017:2020-07-30T14:20:17.597+0000:1596090017:2020-07-30T14:20:17.597+0000:[~zregvart] I am strictly making use of the results that come from algolia only. In the JS file shown, it was only to showcase the snippet of the code to achieve pagination. Yes, we have categorized however the point is we have 10 results and it takes up 80% of the height ( I wanted to prevent that 'cause I find it untidy to have a huge height to search results ).

If we observe in the Bootstrap website, the size of the search result is minimal and I wanted to achieve that but the difference between bootstrap and camel website, the camel website is highly documented and I find it necessary to show the top 10 results at least. So in the Algolia UI (the link which you first sent me of), they make use of pagination within the search results and to me, I wanted to combine less vertical space of search result (no scrollbar) and pagination for the search result layout.

Thus, I came up with a logic to segregate the data from Algolia into pages with 3 search results in each.
Aemie:1596091915:2020-07-30T14:51:55.469+0000:1596093452:2020-07-30T15:17:32.391+0000:[~zregvart] I have added a picture of *algolia-result.png* where the pagination helps in providing sufficient results to users (in our case 10) however if we combine it by also providing minimal height as in *bootstrap-result.png*, I think the structure will look really good and neat while providing ample info. For now, I will focus on the basic implementation of the whole search result layout but I think this is worth implementing in the coming week(s).
zregvart:1596101795:2020-07-30T17:36:35.881+0000:1596101795:2020-07-30T17:36:35.881+0000:I like the bootstrap search UI, I think it might have been done with the Algolia UI, perhaps it’s worth investing some time in using that instead of implementing our own. The only reason we have our own is because the previous versions of Algolia JavaScript implementations were quite big (300-400kb IIRC). I think they have a light version now.
Aemie:1596102364:2020-07-30T17:46:04.060+0000:1596102364:2020-07-30T17:46:04.060+0000:[~zregvart] I don't know if it is done with the UI or not 'cause I have checked the websites using Algolia Search, they have quite different implementations for the UI. I tried to make ours similar to that of Bootstrap + Algolia (the basic layout) and to fit with the website theme. I just wanted to find a neater solution to handling search results with less height and no scrollbars in future implementation.
githubbot:1596142467:2020-07-31T04:54:27.865+0000:1596142467:2020-07-31T04:54:27.865+0000:AemieJ opened a new pull request #444:
URL: https://github.com/apache/camel-website/pull/444


   ### Search Layout Design 
   * Version is separated from the title of the section to keep a neater look and easier to understand the search result.
   * The borders have been removed as they don't fit in with the theme of the website. 
   * On hovering a particular link, the whole section will give a shade of #f5f5f5 providing a highlighting effect.
   * Algolia attribute has been at the bottom of the search result. 
   
   ![search-result](https://user-images.githubusercontent.com/44139348/88996674-7b013880-d30b-11ea-9507-ae401508bfbb.png)
   
   * Changed the look for **Nothing found** for no results found on a search query.
   
   ![no-result](https://user-images.githubusercontent.com/44139348/88996679-7d639280-d30b-11ea-8468-dd8dda2b469c.png)
    


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596277614:2020-08-01T18:26:54.781+0000:1596277614:2020-08-01T18:26:54.781+0000:zregvart commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r463986800



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -375,13 +375,33 @@ body {
 
 #search_results {
   top: 3.38rem;
-  background: #fffe;
+  background: #fff;

Review comment:
       ```suggestion
     background: var(--navbar-background);
   ```

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -390,15 +410,45 @@ body {
   padding-right: 0.5rem;
 }
 
+#search_results div.result {
+  padding: 0.25rem;
+  pointer-events: none;
+}
+
+#search_results div.result:hover {
+  background: var(--color-smoke-50);
+}
+
+#search_results div.section {
+  display: flex;
+}
+

Review comment:
       This was causing scrollbars to show
   
   ```suggestion
   
     #search_results dl {
       margin: 0;
     }
   ```

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -412,9 +462,22 @@ body {
   padding-top: 0.3rem;
 }
 
+#search_results div.footer-search {
+  display: inline-flex;
+  float: right;
+  margin-right: 0.75rem;

Review comment:
       `float` doesn't make sense in flex layout, better to use padding vs margin so not to introduce scrollbars
   
   ```suggestion
     padding: .75rem;
     width: 100%;
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596292686:2020-08-01T22:38:06.971+0000:1596292686:2020-08-01T22:38:06.971+0000:aashnajena commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667595711


   This implementation looks very neat and I like how the versions are displayed.
   
   I have one doubt - is it common to highlight the entire section when hovering over one search result? It's a little confusing as to what I'm clicking - one search result or the entire section (even with the underline detail). I think it would be much clearer if we just highlight the search result user is hovering on, or at least provide some clear indication of what the user is clicking on (the background grey and underline grey are very similar, and on Chrome, only the heading gets underlined). 
   
   Another observation is that when you move from one search result to its next within the same section, the grey background flickers because there's some space between two results which does not have the same hover property.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596336319:2020-08-02T10:45:19.772+0000:1596336319:2020-08-02T10:45:19.772+0000:aashnajena commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667657881


   This PR needs to wait. I'm observing that [this additional commit](https://github.com/algolia/docsearch-configs/commit/77634d58dab0f46f7dfc020a7b7fae1e9b390fe2#diff-a63c497e1db6a7dcc07ef35536d19967) made by an Algolia maintainer on our config file is causing some problems. @zregvart I have opened a [PR on the Algolia repository](https://github.com/algolia/docsearch-configs/pull/2133) to fix these issues. 
   
   ![image](https://user-images.githubusercontent.com/32356795/89121123-b8b3bc00-d4d9-11ea-9199-1335c86bc8a9.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596337139:2020-08-02T10:58:59.239+0000:1596337139:2020-08-02T10:58:59.239+0000:AemieJ commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667659120


   @aashnajena yes, I already observed it. I am currently focusing on dealing with it without making change to the config file.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596337366:2020-08-02T11:02:46.548+0000:1596337366:2020-08-02T11:02:46.548+0000:AemieJ commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667659479


   @zregvart this is why I suggested pagination for search results within the JIRA issue 'cause even if I show 5 of the results for some cases, it's going to overflow and the only time the scrollbar doesn't appear is when 3 results are presented on the search result but in my opinion, 3 results are not a convenient or suitable number to show to the user for a search query.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596337932:2020-08-02T11:12:12.341+0000:1596337932:2020-08-02T11:12:12.341+0000:aashnajena commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667660367


   @AemieJ notice that blogs are not appearing as they should. They are getting grouped by categories. I don't think we should update the design layout without first fixing the flaws on the config side, it would be a little hacky. PR #445 along with PR #2133 on the Algolia repo will fix the underlying issue, and then we can work on top of that to improve the layout.
   
   Also, since different versions of the same page appear as multiple search results, shouldn't we be showing more search results to make sure we are including all relevant entries? Sorry if I'm missing out on something that's already been discussed. I don't understand what's the issue with the current format.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596338317:2020-08-02T11:18:37.167+0000:1596338317:2020-08-02T11:18:37.167+0000:AemieJ commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667661044


   @aashnajena I am only talking about the default value being Documentation problem. What do you exactly mean by blog not being display as it is? Do the blogs need to be represented as -
   ```
   Blog 
   Category
   Title
   ```
   If it's the case as above then the hierarchy needs to be reordered in the case of blogs.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596338632:2020-08-02T11:23:52.637+0000:1596338632:2020-08-02T11:23:52.637+0000:aashnajena commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667661586


   The difference between current and expected behaviour is visible on the snapshot on PR #445 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596345054:2020-08-02T13:10:54.235+0000:1596345054:2020-08-02T13:10:54.235+0000:AemieJ commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r464077068



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -390,15 +410,45 @@ body {
   padding-right: 0.5rem;
 }
 
+#search_results div.result {
+  padding: 0.25rem;
+  pointer-events: none;
+}
+
+#search_results div.result:hover {
+  background: var(--color-smoke-50);
+}
+
+#search_results div.section {
+  display: flex;
+}
+

Review comment:
       This doesn't remove scrollbars necessarily. Scrollbars only appear when the text covered by dl has height > 80vh which occurs in a few cases. Hence, I suggested using pagination to avoid scrollbars usage. However, for this PR, I wanted to just have a basic implementation for the search design layout.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596350421:2020-08-02T14:40:21.731+0000:1596350421:2020-08-02T14:40:21.731+0000:zregvart commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667682388


   Do I understand correctly we need #445 merged and base this effort on that?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596351949:2020-08-02T15:05:49.523+0000:1596351949:2020-08-02T15:05:49.523+0000:AemieJ commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667685425


   @zregvart in the algolia doc-search, Aashna created a PR, if that is merged and PR #445 is merged as well, then I can continue working on this PR.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596361610:2020-08-02T17:46:50.894+0000:1596361610:2020-08-02T17:46:50.894+0000:AemieJ removed a comment on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-667661044


   @aashnajena I am only talking about the default value being Documentation problem. What do you exactly mean by blog not being display as it is? Do the blogs need to be represented as -
   ```
   Blog 
   Category
   Title
   ```
   If it's the case as above then the hierarchy needs to be reordered in the case of blogs.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596549899:2020-08-04T22:04:59.071+0000:1596549899:2020-08-04T22:04:59.071+0000:zregvart commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r465355877



##########
File path: package.json
##########
@@ -8,7 +8,6 @@
     ""build:sitemap"": ""gulp sitemap"",
     ""build"": ""run-s build:*"",
     ""preview"": ""run-s preview:*"",
-    ""preview:antora"": ""antora --clean --fetch antora-playbook.yml"",

Review comment:
       I don't think this was meant to be included here.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597066035:2020-08-10T21:27:15.745+0000:1597066035:2020-08-10T21:27:15.745+0000:zregvart commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r468195526



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -46,22 +46,22 @@
         cancel.style.display = 'block'
         index
           .search(search.value, {
-            hitsPerPage: 10,
+            hitsPerPage: 5,
           })
           .then((results) => {
             const hits = results.hits
             const data = hits.reduce((data, hit) => {
               const d = {}
               d.url = hit.url
               var section = hit.hierarchy.lvl0
-              if (hit.hierarchy.lvl6 !== null) section = section + ' [' + hit.hierarchy.lvl6 + ']'
+              if (hit.hierarchy.lvl6 !== null) section = section + '/' + hit.hierarchy.lvl6
               var breadcrumbs = Object.values(hit.hierarchy)
                 .slice(1)
                 .filter((lvl) => lvl !== null)
-                .join(' &raquo; ')
+                .join(' / ')
 
               d.breadcrumbs = ((breadcrumbs !== '') ? breadcrumbs : section)
-              d.snippet = hit._snippetResult.content.value + '...'
+              d.snippet = hit._snippetResult.content.value.split('&quot;').join('') + '...'

Review comment:
       Seems that `hit._snippetResult` can be undefined, are we using `d.snippet`?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597103928:2020-08-11T07:58:48.524+0000:1597103928:2020-08-11T07:58:48.524+0000:AemieJ commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r468396127



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -46,22 +46,22 @@
         cancel.style.display = 'block'
         index
           .search(search.value, {
-            hitsPerPage: 10,
+            hitsPerPage: 5,
           })
           .then((results) => {
             const hits = results.hits
             const data = hits.reduce((data, hit) => {
               const d = {}
               d.url = hit.url
               var section = hit.hierarchy.lvl0
-              if (hit.hierarchy.lvl6 !== null) section = section + ' [' + hit.hierarchy.lvl6 + ']'
+              if (hit.hierarchy.lvl6 !== null) section = section + '/' + hit.hierarchy.lvl6
               var breadcrumbs = Object.values(hit.hierarchy)
                 .slice(1)
                 .filter((lvl) => lvl !== null)
-                .join(' &raquo; ')
+                .join(' / ')
 
               d.breadcrumbs = ((breadcrumbs !== '') ? breadcrumbs : section)
-              d.snippet = hit._snippetResult.content.value + '...'
+              d.snippet = hit._snippetResult.content.value.split('&quot;').join('') + '...'

Review comment:
       Yes, that makes sense, I altered the code to take care of it so it doesn't split for undefined values. Yes, we use `d.snippet` within the `summary` tag.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597104428:2020-08-11T08:07:08.728+0000:1597104428:2020-08-11T08:07:08.728+0000:aashnajena commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-671796447


   I think the cancel icon's position needs to be fixed for smaller screens.
   
   ![Uploading Screenshot_20200811-133410__01.jpg…]()
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597104493:2020-08-11T08:08:13.659+0000:1597104493:2020-08-11T08:08:13.659+0000:aashnajena edited a comment on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-671796447


   I think the cancel icon's position needs to be fixed for smaller screens.
   
   ![Screenshot_20200811-133410__01](https://user-images.githubusercontent.com/32356795/89873289-d4a11700-dbd7-11ea-95e0-966ee298b1a5.jpg)
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597104802:2020-08-11T08:13:22.941+0000:1597104802:2020-08-11T08:13:22.941+0000:AemieJ commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-671799449


   @aashnajena I will look into that and fix it.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597151233:2020-08-11T21:07:13.671+0000:1597151233:2020-08-11T21:07:13.671+0000:zregvart commented on a change in pull request #444:
URL: https://github.com/apache/camel-website/pull/444#discussion_r468865056



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -356,7 +418,7 @@ body {
   }
 
   #search-cancel {
-    bottom: calc(50% - 0.45rem);
+    margin-top: 0.75rem;
   }
 
   #search_results {

Review comment:
       I think it looks a bit better if we take up full width on smaller screens
   ```suggestion
     #search_results {
       left: 0;
       width: 100vw;
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597195206:2020-08-12T09:20:06.118+0000:1597195206:2020-08-12T09:20:06.118+0000:zregvart merged pull request #444:
URL: https://github.com/apache/camel-website/pull/444


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597195210:2020-08-12T09:20:10.513+0000:1597195210:2020-08-12T09:20:10.513+0000:zregvart commented on pull request #444:
URL: https://github.com/apache/camel-website/pull/444#issuecomment-672759452


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15334,Task,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Unassigned,Andrea Cosentino,0,2,2020-07-23 16:19:10+00:00,2020-08-29 12:55:43+00:00,jondruse can you have a look?  Thanks.,jondruse:1595802369:2020-07-27T06:26:09.277+0000:1595802369:2020-07-27T06:26:09.277+0000:I'll look into it.
0,CAMEL-15333,Bug,Major,3.4.1,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Brad Harvey,0,2,2020-07-23 12:20:11+00:00,2021-01-05 13:50:51+00:00,"Pre-reqs:  SJMS producer with transacted=true, and not linked to a shared session (ReturnProducerCallback chosen in SjmsProducer#process)


Sequence of events in method InOnlyProducer.sendMessage:



message is sent successfully by  producer.getMessageProducer().send(message);
producer is returned to pool by releaseProducerCallback.release(producer);



 




@Override
public void sendMessage(final Exchange exchange, final AsyncCallback callback, final MessageProducerResources producer, final ReleaseProducerCallback releaseProducerCallback) throws Exception {
    try {
        Message message = getEndpoint().getBinding().makeJmsMessage(exchange, producer.getSession());
        producer.getMessageProducer().send(message);
    } catch (Exception e) {
        exchange.setException(new CamelExchangeException(""Unable to complete sending the JMS message"", exchange, e));
    } finally {
        releaseProducerCallback.release(producer);
        callback.done(isSynchronous());
    }
}
 



 


When the producer is returned to the pool, the pool may decide that it should be disposed.  See GenericObjectPool#addToObjectPool.  The variable shouldDestroy can be set to true for a few reasons, but in my case it was because there were too many idle producers in the pool (_pool.size() >= _maxIdle). 


When it is destroyed, SjmsProducer$MessageProducerResourcesFactory#destroyObject is called.  If the session is transacted, then this method will roll it back.




@Override
public void destroyObject(MessageProducerResources model) throws Exception {
    if (model.getMessageProducer() != null) {
        model.getMessageProducer().close();
    }

    if (model.getSession() != null) {
        try {
            if (model.getSession().getTransacted()) {
                try {
                    model.getSession().rollback();
                } catch (Exception e) {
                    // Do nothing. Just make sure we are cleaned up
                }
            }
            model.getSession().close();
        } catch (Exception e) {
            // TODO why is the session closed already?
        }
    }
} 



 


There was only a subtle indication that this happened in the log, with some logging from the JMS client library (qpid in this case) at debug level.





2020-07-22 11:34:48.259 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.camel.component.sjms.SjmsProducer    : Processing Exchange.id:ID-EXCHANGE-1595392487340-0-3
2020-07-22 11:34:48.260 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.camel.component.sjms2.Sjms2Endpoint  : Creating ConnectionResource with connectionCount: 1 using ConnectionFactory: org.springframework.jms.connection.CachingConnectionFactory@2db98e22
2020-07-22 11:34:49.158 DEBUG||| 27108 --- [AmqpProvider :(1):[amqps://localhost:5672]] o.a.q.j.p.a.AmqpTransactionCoordinator   : New TX started: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:2
2020-07-22 11:34:49.158 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.qpid.jms.JmsLocalTransactionContext  : Begin: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:2
2020-07-22 11:34:49.158 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.s.j.c.CachingConnectionFactory         : Registering cached JMS Session for mode 0: org.apache.qpid.jms.JmsSession@322f173f
2020-07-22 11:34:49.173 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.s.j.c.CachingConnectionFactory         : Registering cached JMS MessageProducer for destination [queuename]: org.apache.qpid.jms.JmsMessageProducer@24ff95c9
2020-07-22 11:34:49.175 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.camel.component.sjms.SjmsProducer    :   Sending message synchronously: <?xml version=""1.0"" encoding=""UTF-8""?>  (snip)
2020-07-22 11:34:49.201 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.qpid.jms.JmsLocalTransactionContext  : Rollback: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:2
2020-07-22 11:34:49.207 DEBUG||| 27108 --- [AmqpProvider :(1):[amqps://localhost:5672]] o.a.q.j.p.a.AmqpTransactionCoordinator   : New TX started: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:4
2020-07-22 11:34:49.367 DEBUG||| 27108 --- [AmqpProvider :(1):[amqps://localhost:5672]] o.a.q.j.p.a.AmqpTransactionCoordinator   : Last TX request succeeded: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:2
2020-07-22 11:34:49.367 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.camel.component.sjms.SjmsProducer    : Processing Exchange.id:ID-EXCHANGE-1595392487340-0-3 - SUCCESS
2020-07-22 11:34:49.371 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] .c.s.t.SessionTransactionSynchronization : Processing completion of ExchangeId: ID-EXCHANGE-1595392487340-0-3
2020-07-22 11:34:49.371 DEBUG|mdc.routename|ID-EXCHANGE-1595392487340-0-3| 27108 --- [Camel (camel-1) thread #15 - SjmsBatchConsumer] o.a.qpid.jms.JmsLocalTransactionContext  : Commit: TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:4






Even the subsequent session.commit() in SessionTransactionSynchronization#onComplete did not fail - I think a new transaction (TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:4) was started on the session when the first transaction was rolled back (TX:ID:3ab193ce-faeb-42a2-ab39-1e7a92d1cc58:1:2).


 


The end result of this is that InOnlyProducer.sendMessage completes successfully without setting any exception on the exchange, but the message has been rolled back and not sent.  It is lost.","bradhgbst:1595478545:2020-07-23T12:29:05.452+0000:1595478545:2020-07-23T12:29:05.452+0000:The condition that caused too many idle producers in the pool and triggers this bug may be unusual, but we can get it fairly reliably:
 * asyncStartListener=true on the sjms-batch consumer and also the sjms producer, though not sure if it does anything on the producer.
 * SSL is enabled - less reliable to reproduce when it is not (maybe makes it take longer to create connections)
 * There are messages ready for the route as soon as the application is started

I've only seen it occur upon application startup.  I think this combination might be causing 2 threads to create producers, which then gets dropped back to a single producer in the pool due to the default producer cache size of 1.
davsclaus:1596409923:2020-08-03T07:12:03.059+0000:1596409923:2020-08-03T07:12:03.059+0000:Ah thanks for the detailed report. So I guess we should somehow know if the resource is releases back in the pool due to operation was success, and that if the pool decides to destroy the resource, then we should not rollback any TX sessions. However if for some other ""odd"" situations then the TX may need to rollback (however if a inflight TX is not comitted, then the TX manager may regard it as failed and rollback it anyway; so we can potentially remove that rollback code in the destroy).
davsclaus:1596446469:2020-08-03T17:21:09.723+0000:1596446469:2020-08-03T17:21:09.723+0000:I wonder if you can build a reproducer using mockito like you did for that other ticket?
bradhgbst:1596475230:2020-08-04T01:20:30.857+0000:1596475230:2020-08-04T01:20:30.857+0000:Hi Claus,

I'm not really sure what the solution would look like.  The caching model seems to have the producer owning/controlling the session lifecycle which is a bit backwards to how it would normally work and I'm finding a bit hard to reconcile with transacted sessions, which obviously work at the session level.  I'm not even sure if the model.session.close() in destroyObject makes sense for a transacted session.

The standard JMS component fits our use case so we have switched to that.  Spring boot app (so can use caching connection factory), consumer side is sjms-batch.  In camel 2 we had used the ability of SJMS to loop over collections but with that gone in 3 we have switched to split in the route + transacted JMS.

I won't be able to work on a reproducer for this one since we're no longer using the component.  I haven't provided any mockito reproducers for anything, maybe that was someone else :)  Perhaps setting maxIdle to 0 would trigger it. 

Regards

Brad
davsclaus:1596513247:2020-08-04T11:54:07.883+0000:1596513247:2020-08-04T11:54:07.883+0000:Yeah it seems a bit backwards with session and producer pooling tied together. 
davsclaus:1609825851:2021-01-05T13:50:51.377+0000:1609825851:2021-01-05T13:50:51.377+0000:We are reworking camel-sjms for 3.8 onwards, so its more like spring jms and does not use its own pooling"
0,CAMEL-15332,Bug,Minor,None,,"
None
",Resolved,Information Provided,None,Unassigned,Erik De Meyer,0,2,2020-07-23 09:29:25+00:00,2020-07-23 11:34:28+00:00,"Hi,


I try to do an Http request API call for for a banking application in SAP Cloud platform integration.


Therefore I need a mandatory header for security reasons: Date


My issue is that the camel framework headerfilterstrategy filters out this header, so the request gives me an error:


{""errors"":[\{""code"":""missingHeader"",""detail"":""There is a missing mandatory header in the request: Date."",""meta"":{""header"":""Date""}}]}


 


Is there any possibility to override his behavior with an javascript or groovyscript?","acosentino:1595475256:2020-07-23T11:34:16.446+0000:1595475256:2020-07-23T11:34:16.446+0000:You can pass a custom httpFilterStrategy as uri option in camel-http. This is not a bug.

[https://github.com/apache/camel/blob/master/components/camel-http-common/src/main/java/org/apache/camel/http/common/HttpHeaderFilterStrategy.java]

You can create a filterStrategy like this and removing date. Then add that to the camel registry and reference it, but again it's not a bug.

https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5"
0,CAMEL-15331,Improvement,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-07-23 08:23:43+00:00,2020-07-29 07:49:27+00:00,Change tests to use testcontainers instead of cassandra unit,
0,CAMEL-15330,Task,Minor,3.5.0,None,"
None
",Resolved,Fixed,3.5.0,James Netherton,James Netherton,0,1,2020-07-23 07:53:04+00:00,2020-08-19 09:50:37+00:00,No Desc,
0,CAMEL-15329,Task,Major,None,,"

outreachy2020

",Resolved,Implemented,None,Unassigned,Aemie,0,4,2020-07-23 04:46:30+00:00,2020-08-01 18:33:11+00:00,"For the navbar menu to exclude the presence of sub-menus, there is a need to create a page for the community pages. The layout presentation for the community page will be similar to that of docs pages.  The presentation of the same is shown within community-section(#1 #2 #3).png","Aemie:1595450939:2020-07-23T04:48:59.383+0000:1595450939:2020-07-23T04:48:59.383+0000:[~zregvart] [~delawen] do you prefer this layout or any additional information or detail is required?

 
delawen:1595460864:2020-07-23T07:34:24.693+0000:1595460910:2020-07-23T07:35:10.081+0000:Are the titles links? To me the dots below the title seems weird and I would make it a link with some hover and no dots below. We have the ""Continue Reading"" as a link too, in case someone doesn't realize the title is a link.

But I am a bad ux designer, so :)

(Now it is when you point to me some other places with titles with dots because they are links)
delawen:1595460984:2020-07-23T07:36:24.367+0000:1595460984:2020-07-23T07:36:24.367+0000:Besides that, I like it. Visually quick to find whatever you need and the texts are quite explicative.
Aemie:1595468985:2020-07-23T09:49:45.625+0000:1595469018:2020-07-23T09:50:18.628+0000:[~delawen] no the titles aren't the link. Only the images and the continue reading is the link. Below the title, we have included a border-bottom which seems to create a more impact on the title, in my opinion. This layout was similarly used for the docs page- [https://camel.apache.org/docs/]
githubbot:1595487022:2020-07-23T14:50:22.951+0000:1595487022:2020-07-23T14:50:22.951+0000:AemieJ opened a new pull request #438:
URL: https://github.com/apache/camel-website/pull/438


   It is preferred to have the removal of sub-menus from the navbar of the website. This PR deals with the removal of the dropdown items within the community section. 
   - Created a community page with minimalist layout.
   - Includes the required information and easier for the user to navigate.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595807964:2020-07-27T07:59:24.477+0000:1595807964:2020-07-27T07:59:24.477+0000:aashnajena commented on pull request #438:
URL: https://github.com/apache/camel-website/pull/438#issuecomment-664184743


   I think we can reuse the CSS from the docs page. We could rename the .project class to something more general like .container (to make it semantically appropriate). It will save us from repeating the CSS code. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595979239:2020-07-29T07:33:59.763+0000:1595979239:2020-07-29T07:33:59.763+0000:AemieJ commented on pull request #438:
URL: https://github.com/apache/camel-website/pull/438#issuecomment-664785314






----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596016381:2020-07-29T17:53:01.316+0000:1596016381:2020-07-29T17:53:01.316+0000:AemieJ removed a comment on pull request #438:
URL: https://github.com/apache/camel-website/pull/438#issuecomment-664791423


   @zregvart the deployment fails 'cause Hugo can't be fetched. I can't find any possible errors in my code as it works perfectly on my local machine.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596137082:2020-07-31T03:24:42.498+0000:1596137082:2020-07-31T03:24:42.498+0000:AemieJ edited a comment on pull request #438:
URL: https://github.com/apache/camel-website/pull/438#issuecomment-664785314


   @zregvart there is not a requirement to mention the authors of the SVG icons.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596277708:2020-08-01T18:28:28.386+0000:1596277708:2020-08-01T18:28:28.386+0000:zregvart merged pull request #438:
URL: https://github.com/apache/camel-website/pull/438


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596277721:2020-08-01T18:28:41.924+0000:1596277721:2020-08-01T18:28:41.924+0000:zregvart commented on pull request #438:
URL: https://github.com/apache/camel-website/pull/438#issuecomment-667570336


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1596277991:2020-08-01T18:33:11.405+0000:1596277991:2020-08-01T18:33:11.405+0000:Thanks [~Aemie]!"
0,CAMEL-15328,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.4.3, 3.5.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2020-07-22 16:20:06+00:00,2020-07-22 16:38:01+00:00,No Desc,
0,CAMEL-15327,Bug,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-07-22 13:05:37+00:00,2020-07-22 14:59:06+00:00,"Due to the introduction of stream rest on the flux operations on Azure SDK v12.7.0 as shows here: https://github.com/Azure/azure-sdk-for-java/pull/11677/files/4f66bb4e972fefde9f5fd860bf63289d87604725#diff-74786ac8dc9aacd16c785f1fa02dc2a7R254, hence we need to wrap any inputStream that does not support mark/reset with BufferedInputStream",
0,CAMEL-15296,New Feature,Minor,None,,"

outreachy2020

",Resolved,Fixed,None,Unassigned,Aashna Jena,0,4,2020-07-11 22:36:29+00:00,2020-09-25 13:27:44+00:00,Create a page with links to all documentation pages on the website. Automate this process and organise the links category wise.,"aashnajena:1594990088:2020-07-17T20:48:08.772+0000:1594990088:2020-07-17T20:48:08.772+0000:[~zregvart] what would be the best way to approach this? Can we possibly convert our existing sitemap into a page or use sitemap.xml to generate a HTML page? Apparently we can [override the Hugo Sitemap template|https://gohugo.io/templates/sitemap-template/]. This could be useful for us.
Aemie:1595065354:2020-07-18T17:42:34.963+0000:1595065354:2020-07-18T17:42:34.963+0000:[~aashnajena], [~zregvart] we could use that or as stated in one call we can make use of the sitemap present within the documentation folder. We could make use of gulp to automate the task and use regex as well. I will just run through the regex as I tried working with a piece of string and with regex, it works out.

Let's say we have a string *s='<url><loc>hey-camel.html</loc></url><url><loc>hey-spring.html</loc></url>'* and *matchesOfLoc=/<loc>(.*?)<\/loc>/g.* When we run *listOfLoc=s.match(matchesOfLoc),* you get a list of all the loc tag.

With this list, we can run a loop and extract the filename for each. Here, we have our list as *[""<loc>hey-camel.html</loc>"", ""<loc>hey-spring.html</loc>""]*. I will walk you through to extract the name for a particular element of the list. 

*fileName = matchesOfLoc.exec(listOfLoc[1])*

*title = fileName[1].replace(/^.*[\\\/]/, '')*

*name = title.replace('.html', '')*

Here, your output would be *hey-spring.* With this manner, we could extract the names of each file through the sitemap itself. 
aashnajena:1595120718:2020-07-19T09:05:18.419+0000:1595120718:2020-07-19T09:05:18.419+0000:It would also be tough to get the actual titles or to organize links in a hierarchy if we extract titles from links. I was thinking of something cleaner, perhaps leveraging the site structure that Hugo provides. I'm able to build this simple sitemap for Hugo content by introducing a new HTML layout file in /layouts (see attached image)
Aemie:1595128879:2020-07-19T11:21:19.513+0000:1595128879:2020-07-19T11:21:19.513+0000:[~aashnajena] Hugo's content was achievable from the camel-website repo itself. The major question was to build for the Antora pages 'cause documentation is the main reason the user comes on the website and no I don't think it's tough 'cause with regex, it is possible and easy according to me. It has been used for automating files in camel repo as well. 
aashnajena:1595130236:2020-07-19T11:43:56.995+0000:1595130236:2020-07-19T11:43:56.995+0000:How exactly are sitemaps built for Antora pages? Does Antora provide any easy to use features for extracting pages and links like Hugo does? Or perhaps, I was thinking we could use use the menus that we generate for User Manual, components etc. They contain the actual title and URLs of pages, along with the intermediate hierarchy levels. 

I'm not denying that this can't be achieved through applying regex over sitemap files, I'm just trying to explore if there's a neater way of doing this. For example, the url for a page under faq will have ""/faq/"" in it, but a page under architecture does not have ""/architecture/"" in it. We would want to arrange our links under these sub-headings which we cannot get from current sitemaps. Another point to note is that the name of the page is not always equal to its title, which is why I want to look at alternate ways. https://camel.apache.org/manual/latest/backlogdebugger.html should have title ""Backlog Debugger"", it's not very readable as one continuous word for the user. Hence, if there are alternates to using regex on URLs, I want to explore them before deciding.
Aemie:1595140411:2020-07-19T14:33:31.975+0000:1595140411:2020-07-19T14:33:31.975+0000:[~aashnajena] using sitemaps was one of the options. All the antora pages are within the documentation folder itself. We could make use of the title tag for each HTML file within it. That's an easy option for me as well and the hierarchy will be well-defined itself.
aashnajena:1595174939:2020-07-20T00:08:59.691+0000:1595174939:2020-07-20T00:08:59.691+0000:I used the navigation menus to generate sitemaps for user manual and components. We can easily change the layout. Here, we get the actual page titles, URLs and the links are organised in a hierarchical manner. We can make similar sitemaps for other sub-projects and include that. 
zregvart:1595259747:2020-07-20T23:42:27.409+0000:1595259747:2020-07-20T23:42:27.409+0000:I don't think we want all links to be present in the sitemap. The crux of the issue is to generate a single sitemap page from two content generation systems (Hugo and Antora). I'm not 100% sure that we can auto generate 100% of the sitemap. To me it looks like we need to have information design of the website, i.e. top categories and within those few select links to the content. I think within Hugo this can be done using [taxonomies|https://gohugo.io/content-management/taxonomies]. And we also need to also mix in the content from Antora. That is, we want to have a ""Documentation"" group with links to each component with version, so User manual (latest), Camel Components with (latest, 3.4.x, and 2.x).

 
Aemie:1595315629:2020-07-21T15:13:49.911+0000:1595315629:2020-07-21T15:13:49.911+0000:As the Hugo template could be created using taxonomies and as stated on Github, I feel it's better to include the necessary links for the documentation within antora pages. 

Listing below is the structure and the important links I believe are required to be shown on the sitemap for Antora Docs. This would take approximately 1.5 pages. 

 

[[ User-Manual ]]
 * Getting Started
 * Resources & Guides
 * Architecture

[[ Components ]]

[[ Data Formats ]]

[[ EIP ]] 

[[ Miscellaneous Components ]]

[[ Camel-k ]] 
 * Operator
 * Traits

[[ Camel Kafka Connector ]] 
 * Getting Started 
 * Connector List

[[ Camel Quarkus ]] 
 * List of Camel Quarkus Extensions 

[[ Camel Spring Boot ]] 
 * Camel Context Starter 
 * List of Starters 

[[ Camel Karaf ]] 
 * Supported Components 

 
zregvart:1595329908:2020-07-21T19:11:48.839+0000:1595329908:2020-07-21T19:11:48.839+0000:Hugo taxonomies can be applied only to Hugo generated pages. [This|https://issues.apache.org/jira/browse/CAMEL-15296?focusedCommentId=17162106&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17162106] includes only the documentation from Antora, we would be missing the blog, downloads, releases...
Aemie:1595331391:2020-07-21T19:36:31.744+0000:1595331391:2020-07-21T19:36:31.744+0000:[~zregvart] I stated that the Hugo pages can be generated so as aashna already presented we can include the blogs, downloads, and apache camel releases from the Hugo side.  As the Antora documentation is huge I just wanted to include specific links that's why I mentioned it separately to see if those links were sufficient enough or more had to be included.
aashnajena:1595331421:2020-07-21T19:37:01.885+0000:1595331421:2020-07-21T19:37:01.885+0000:I'm not sure if taxonomies will give us what we need. I think Hugo ""Sections"" is what we need. Sections will give us blog, releases, documentation, community, download, news, and security.
For Antora, we can access content hierarchy wise by controlling the ""level"" attribute but I could only figure out a way to do that using the original repositories. For example, in the PR I put, I am declaring a sitemap page in Camel repo and providing it a layout(.hbs file) that uses content from the Camel repo. Is there a way I can access this content directly from Hugo so that I can build a combined page?  
We are already presenting a small list of links on the footer, which the user can use for upper-level navigation. I feel that if someone is clicking on sitemaps, they're just expecting to do a CTRL+F and search for what they want, not look through the entire page. I can definitely be wrong, but maybe we can ask some users about what they would like to see as part of sitemap? If we want to include just the 1st level of navigation, maybe we can include that in the footer itself.
aashnajena:1596962575:2020-08-09T16:42:55.062+0000:1596962575:2020-08-09T16:42:55.062+0000:[~zregvart] for the hugo pages, we can list all the sections i.e.
 - blog (list all categories)
 - releases
 - community
 ** books
 ** articles
 ** mailing list
 ** support
 ** team
 ** contributing
 - download
 - news
 - security
 - about (we can remove this if not required)
 - documentation 
 ** user manual
 ** getting started
 ** components
 ** eip
 ** data formats
 ** links to all subproject documentation

Do we want to include more links under each subproject documentation? If yes, what should they be? Also, are there any more things we want to list on the sitemap?
aashnajena:1597412525:2020-08-14T21:42:05.555+0000:1597412525:2020-08-14T21:42:05.555+0000:[~zregvart] does this look fine? Should we be including more links?

!Screenshot from 2020-08-15 03-10-53.png!
githubbot:1597466774:2020-08-15T12:46:14.997+0000:1597466774:2020-08-15T12:46:14.997+0000:aashnajena opened a new pull request #462:
URL: https://github.com/apache/camel-website/pull/462


   This PR adds the first version of sitemap for camel-website. Sitemap can be accessed from the footer. The problem with fetching links programmatically is that links like ""misc"" and ""news"" show up, even though they don't have any landing pages. We could choose to hard code all our links instead so avoid such behaviour.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597655967:2020-08-17T17:19:27.689+0000:1597655967:2020-08-17T17:19:27.689+0000:AemieJ commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-675006219


   I like the basic design layout but I just want to clarify that we are going to include more links right? 'cause almost all the links present on the sitemap are there on the footer as well.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1597665938:2020-08-17T20:05:38.357+0000:1597665938:2020-08-17T20:05:38.357+0000:aashnajena commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-675085493


   Please suggest which other pages we should put on the sitemap, and I can add those.. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1598538807:2020-08-27T22:33:27.267+0000:1598538807:2020-08-27T22:33:27.267+0000:aashnajena commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-682224209


   I think we can merge this and improve on it later. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1598551101:2020-08-28T01:58:21.576+0000:1598551101:2020-08-28T01:58:21.576+0000:AemieJ commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-682281465


   I believe that we need certain elobaration in site map upto level 1 for the sub projects as well. 'cause if I had to comparatively look at the site map of Apple, it is quite useful as it provides me the direct information neither the navbar nor footer provides. So we could incoperare a more elobrated site map upto max two pages.
   
   However I don't mind this being merged, I can work on it as I have a few additional ideas which I would like to improve on later. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1600946631:2020-09-24T19:23:51.539+0000:1600946631:2020-09-24T19:23:51.539+0000:zregvart commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-698540521


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1600946635:2020-09-24T19:23:55.653+0000:1600946635:2020-09-24T19:23:55.653+0000:zregvart merged pull request #462:
URL: https://github.com/apache/camel-website/pull/462


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1600946649:2020-09-24T19:24:09.924+0000:1600946649:2020-09-24T19:24:09.924+0000:Thanks [~aashnajena] and [~Aemie]!
githubbot:1601010916:2020-09-25T13:15:16.217+0000:1601010916:2020-09-25T13:15:16.217+0000:zregvart commented on pull request #462:
URL: https://github.com/apache/camel-website/pull/462#issuecomment-698540521


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1601011662:2020-09-25T13:27:42.595+0000:1601011662:2020-09-25T13:27:42.595+0000:zregvart merged pull request #462:
URL: https://github.com/apache/camel-website/pull/462


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15295,Improvement,Minor,3.4.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Ahmed M,0,3,2020-07-11 13:25:22+00:00,2020-07-30 10:21:47+00:00,"The suggested command in SNAPSHOT ARCHTYPES
 in does not work (tried with 3.4.0-SNAPSHOT and 3.5.0-SNAPSHOT) :


 mvn archetype:generate
 -DarchetypeGroupId=org.apache.camel.archetypes
 -DarchetypeArtifactId=camel-archetype-java
 -DarchetypeVersion=3.4.0-SNAPSHOT
 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-group


 


[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.016 s
[INFO] Finished at: 2020-07-11T13:19:43Z
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.1.2:generate (default-cli) on project standalone-pom: The desired archetype does not exist (org.apache.camel.archetypes:camel-archetype-java:3.4.0-SNAPSHOT) -> [Help 1]
  


  The property archetypeRepository is no longer supported by Maven 3.6.3","davsclaus:1596075514:2020-07-30T10:18:34.604+0000:1596075514:2020-07-30T10:18:34.604+0000:[~acosentino] didnt you work on this today?
acosentino:1596075696:2020-07-30T10:21:36.531+0000:1596075696:2020-07-30T10:21:36.531+0000:yeah a bit"
0,CAMEL-15294,Bug,Major,None,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Luca Burgazzoli,0,2,2020-07-10 15:30:52+00:00,2020-12-17 15:17:02+00:00,"gnodet I noticed that there are some failures running tests on camel-reactive-streams:




Failure in JUnit mode for class org.apache.camel.component.reactive.streams.RequestRefillTest: could not create/run JUnit test suite: 
Cannot find JUnit method class junit.framework.TestSuite$1.warning
	at org.testng.junit.JUnitTestRunner.runFailed(JUnitTestRunner.java:237)
	at org.testng.junit.JUnitTestRunner.start(JUnitTestRunner.java:230)
	at org.testng.junit.JUnitTestRunner.run(JUnitTestRunner.java:211)
	at org.testng.TestRunner$1.run(TestRunner.java:659)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1147)
	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:690)
	at org.testng.TestRunner.run(TestRunner.java:597)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:317)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:312)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:274)
	at org.testng.SuiteRunner.run(SuiteRunner.java:223)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1039)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:964)
	at org.testng.TestNG.run(TestNG.java:900)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:198)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)
[WARNING] Tests run: 128, Failures: 0, Errors: 0, Skipped: 70, Time elapsed: 60.345 s - in TestSuite
[INFO] 
[INFO] Results:
[INFO] 
[WARNING] Tests run: 128, Failures: 0, Errors: 0, Skipped: 70




Don't know it is related to the migration to jeunit5",davsclaus:1608189422:2020-12-17T15:17:02.218+0000:1608189422:2020-12-17T15:17:02.218+0000:Seems to work now
0,CAMEL-15293,Improvement,Major,3.5.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-07-10 10:32:21+00:00,2020-07-23 12:16:31+00:00,"There is a new version of datastax driver available (currently 4.7.2) - https://docs.datastax.com/en/developer/java-driver/4.7/


Upgrade of driver will among others allow use of cassandra quarkus extension for camel-quarkus (#1355)",jondruse:1595466735:2020-07-23T09:12:15.389+0000:1595466735:2020-07-23T09:12:15.389+0000:Needs also change in camel-karaf: https://github.com/apache/camel-karaf/pull/12
0,CAMEL-15292,New Feature,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Dimitris Orfanoudakis,0,1,2020-07-10 09:27:41+00:00,2020-07-20 05:34:39+00:00,"We want to use Camel's AWS 2 S3 component on the consumer's side, in order to download files that were previously uploaded on S3 using server-side encryption with customer-provided keys (SSE-C). At the moment this is not possible and there is no URI OPTION available for passing the customerKeyId on the consumer's side.


Thanks in advance,


Dimitris Orfanoudakis",
0,CAMEL-15291,Task,Major,None,,"

outreachy2020

",Resolved,Implemented,None,Unassigned,Aemie,0,3,2020-07-10 09:11:25+00:00,2020-07-15 10:45:50+00:00,"As discussed in the design of the footer in CAMEL-15185, it is a good practice to include the privacy policy of the website along with the sitemaps. This issue will deal with the creation of a privacy page based on the ASF one.","githubbot:1594426011:2020-07-11T08:06:51.683+0000:1594426011:2020-07-11T08:06:51.683+0000:AemieJ opened a new pull request #427:
URL: https://github.com/apache/camel-website/pull/427


   * Creation of the privacy policy page based on the [ASF](https://www.apache.org/foundation/policies/privacy.html) one (excluding the content of Google Analytics). 
   * This page is not directly accessible from any link right now but can be accessed under `/privacy-policy`. 
   * The privacy policy after the merge will be included within the footer links as discussed in [CAMEL-15185](https://issues.apache.org/jira/browse/CAMEL-15185?focusedCommentId=17137897&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17137897) on Jira based on the new footer design.
   
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594463829:2020-07-11T18:37:09.127+0000:1594463829:2020-07-11T18:37:09.127+0000:aashnajena commented on pull request #427:
URL: https://github.com/apache/camel-website/pull/427#issuecomment-657109096


   I think it would be better to have the content in the markdown file (would be easy to edit in future). The contents are simple enough to be rendered using the default layout.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594613029:2020-07-13T12:03:49.789+0000:1594613029:2020-07-13T12:03:49.789+0000:aashnajena commented on pull request #427:
URL: https://github.com/apache/camel-website/pull/427#issuecomment-657520248


   Privacy policy layout file is same as _default/single.html. If you delete your layout file, Hugo should automatically pick up the layout from _default/single.html


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594639031:2020-07-13T19:17:11.561+0000:1594639031:2020-07-13T19:17:11.561+0000:AemieJ commented on pull request #427:
URL: https://github.com/apache/camel-website/pull/427#issuecomment-657742648


   @aashnajena  Thanks for that! 
   @zregvart  made the required changes and works as expected. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594779960:2020-07-15T10:26:00.088+0000:1594779960:2020-07-15T10:26:00.088+0000:zregvart merged pull request #427:
URL: https://github.com/apache/camel-website/pull/427


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594779975:2020-07-15T10:26:15.831+0000:1594779975:2020-07-15T10:26:15.831+0000:zregvart commented on pull request #427:
URL: https://github.com/apache/camel-website/pull/427#issuecomment-658687177


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1594781150:2020-07-15T10:45:50.048+0000:1594781150:2020-07-15T10:45:50.048+0000:Thanks [~Aemie]!"
0,CAMEL-15290,Bug,Minor,3.4.0,"3.7.1, 3.8.0","
None
",Resolved,Fixed,"3.7.1, 3.8.0",Claus Ibsen,Jens Kleine-Herzbruch,0,2,2020-07-10 08:58:46+00:00,2021-01-29 09:42:48+00:00,"If you send a message to a CxfRsProducer that has the header Exchange.HTTP_METHOD set, the HTTP message sent will contain the header



org.apache.cxf.request.method=GET



for example.


This header should not be present in the message since it is internal to the endpoint.","davsclaus:1608207474:2020-12-17T20:17:54.850+0000:1608207474:2020-12-17T20:17:54.850+0000:This is standard as part of cxf and camel header mappings
davsclaus:1608246860:2020-12-18T07:14:20.068+0000:1608246860:2020-12-18T07:14:20.068+0000:Ah yeah if you send to some external REST server then we should not have camel cxfrs to leak headers with org.apache.cxf as prefix"
0,CAMEL-15289,Bug,Major,2.23.0,,"
None
",Resolved,Information Provided,None,Unassigned,Borodina Valery,0,3,2020-07-10 08:52:42+00:00,2020-12-17 15:17:44+00:00,I used TimeoutAwareAggregationStrategy and JdbcAggregationRepository. I have aggregator in camel-route in cluster. When one node failed  all timeout also lost. And I didn't lose message but I lost functional on timeout.,"smokemaker:1594859244:2020-07-16T08:27:24.309+0000:1594859244:2020-07-16T08:27:24.309+0000:The behavior is reproducible, but to be more precise - not all aggregation timeouts lost but only those that were set on the node that stopped. Timeouts set on other nodes still work. When the failed|stopped node is on again all timeouts are also on,
davsclaus:1608189464:2020-12-17T15:17:44.851+0000:1608189464:2020-12-17T15:17:44.851+0000:Timeout information is not persisted"
0,CAMEL-15288,Improvement,Major,2.24.3,,"
None
",Resolved,Invalid,None,Jean-Baptiste Onofré,Martin Lichtin,0,2,2020-07-09 20:40:59+00:00,2022-05-24 05:54:32+00:00,"Currently OsgiDefaultCamelContext updates the registry and inserts OsgiServiceRegistry as the first registry into the list.


This can lead to undesirable behaviour, so an option to define the resolution order will be helpful.


For example, it can be more appropriate to lookup local beans first, only go to lookup an OSGi service if no local bean is found. Or it could be desired to not lookup OSGi services at all.","lichtin:1650857946:2022-04-25T11:39:06.900+0000:1650857946:2022-04-25T11:39:06.900+0000:Can this one be considered at some point? It is a performance hit to constantly lookup OSGi services.
jbonofre:1650860177:2022-04-25T12:16:17.671+0000:1650860177:2022-04-25T12:16:17.671+0000:[~lichtin] yes, definitely. My bad, I have to switch back to Camel work. I will move forward asap. I will keep you posted.
lichtin:1653342242:2022-05-24T05:44:02.692+0000:1653342242:2022-05-24T05:44:02.692+0000:The behavior in 3.14 has changed and this may no longer be relevant..
jbonofre:1653342863:2022-05-24T05:54:23.913+0000:1653342863:2022-05-24T05:54:23.913+0000:Yes, I think it's OK now. I close this Jira for now, let's reopen it if we need some updates."
0,CAMEL-15287,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,3.x,Unassigned,Nicola Ferraro,0,1,2020-07-09 12:49:04+00:00,2022-09-02 15:50:27+00:00,"Suppose you have an external Quarkus service that replies always with null.


 


When calling it from a camel route via:




.to(""http://quarkus-service/null-api"") 



Then the body of the exchange is null.
 
But if we use:
 




 .to(""netty-http:http://quarkus-service/null-api"")



 
Then the body becomes an empty InputStream, which is not null.
 
I don't know what's the correct way to handle such cases, but we should try to uniform them.",
0,CAMEL-15286,Improvement,Major,None,3.x,"
None
",Resolved,Information Provided,3.x,Dhiraj Sureshkumar Bokde,Luca Burgazzoli,0,4,2020-07-09 12:00:29+00:00,2021-06-14 14:25:44+00:00,"Configuring the Salesforce is quite complex compared to other complex as it requires to write some java beans:




SalesforceComponent component = new SalesforceComponent();
SalesforceEndpointConfig config = new SalesforceEndpointConfig();
SalesforceLoginConfig loginConfig = new SalesforceLoginConfig();

loginConfig.setType(AuthenticationType.REFRESH_TOKEN);
loginConfig.setClientId(properties.getProperty(""clientId""));
loginConfig.setClientSecret(properties.getProperty(""clientSecret""));
loginConfig.setRefreshToken(properties.getProperty(""refreshToken""));

component.setPackages(""org.apache.camel.example.salesforce"");
component.setConfig(config);
component.setLoginConfig(loginConfig);




It would be nice if most of the configuration could be done with uri params only and to require to write beans only for really advanced options.","jeremyross:1606295631:2020-11-25T17:13:51.595+0000:1606295631:2020-11-25T17:13:51.595+0000:[~dhirajsb] What runtime are you using? In my typical spring boot projects I don't have to create any beans. The application.properties file will contain this:

{code}
camel.component.salesforce.clientId=
camel.component.salesforce.clientSecret=
camel.component.salesforce.userName=
camel.component.salesforce.password=
camel.component.salesforce.loginUrl=
camel.component.salesforce.packages=
{code}
davsclaus:1623643637:2021-06-14T12:07:17.821+0000:1623643637:2021-06-14T12:07:17.821+0000:To use salesforce in a Kamelet then we have full control of this with local bean in route templates, which allows us to setup authentication / login config et all
https://gist.github.com/davsclaus/db545d550207364e30515c13649d9f5b

And we cannot have per endpoint login config as it belongs on the component level, so closing this ticket.
jeremyross:1623650949:2021-06-14T14:09:09.966+0000:1623650949:2021-06-14T14:09:09.966+0000:[~davsclaus] There remains the issue of needing to integration two different salesforce organizations. Providing login config via URI param is one approach, however there may be deeper changes needed in the component to support this.
davsclaus:1623651944:2021-06-14T14:25:44.192+0000:1623651944:2021-06-14T14:25:44.192+0000:You create 2 different components for example with component-dsl"
0,CAMEL-15285,Bug,Minor,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Alexander Schwartz,0,1,2020-07-09 11:20:56+00:00,2020-07-09 14:15:12+00:00,"There are some places with broken images and rendered anchors that this issue will fix. 


Examples: 


https://camel.apache.org/components/latest/eips/durable-subscriber.html





https://camel.apache.org/components/latest/apns-component.html",ahus1:1594265678:2020-07-09T11:34:38.361+0000:1594265678:2020-07-09T11:34:38.361+0000:pull request available on GitHub
0,CAMEL-15284,Task,Major,"3.4.0, 3.5.0",None,"
None
",Resolved,Done,3.5.0,Jan Bednar,Jan Bednar,0,1,2020-07-08 17:34:50+00:00,2020-07-09 08:55:25+00:00,Currently camel-kudu and docs build from master fails on Windows.,
0,CAMEL-15283,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,James Netherton,Luca Burgazzoli,0,1,2020-07-08 15:24:27+00:00,2020-07-22 09:39:43+00:00,https://vertx.io/docs/vertx-web-client/java/,
0,CAMEL-15282,Bug,Major,3.4.0,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Claus Ibsen,Aurélien Pupier,0,4,2020-07-08 15:17:38+00:00,2020-07-19 09:13:26+00:00,"netty-http:http://quarkus-ml.{{env:NAMESPACE}}.svc.cluster.local/samples




the error reported is:



port    Invalid integer value: NAMESPACE}}.svc.cluster.local","apupier:1594192821:2020-07-08T15:20:21.444+0000:1594192821:2020-07-08T15:20:21.444+0000:provided a test to emphasize it: https://github.com/apupier/camel/commit/7766189c28078cbdc965533c397f9b246e0c55bc
amdmdi:1594980166:2020-07-17T18:02:46.168+0000:1594980166:2020-07-17T18:02:46.168+0000:I think this method {{AbstractCamelCatalog#validateEndpointProperties}} checks if the URI matches *{{netty-http:protocol:host:port/path}}* ;  it does not resolve property placeholders before parsing the URI 

is this really a bug ? since the following test is passing :
{code:java}
    @Test
    public void testEndpointUriWithEnv() throws Exception {
        String uri = ""netty-http:http://quarkus-ml.{{env:HOSTNAME}}.svc.cluster.local:42/samples"";
        NettyHttpEndpoint endpoint = context.getEndpoint(uri, NettyHttpEndpoint.class);
        String host = endpoint.getConfiguration().getHost();
        int port = endpoint.getConfiguration().getPort();
        
        assertEquals(""quarkus-ml.""+System.getenv(""HOSTNAME"")+"".svc.cluster.local"", host);
        assertEquals(42, port);
    }
{code}
apupier:1594984018:2020-07-17T19:06:58.964+0000:1594984018:2020-07-17T19:06:58.964+0000:it is a bug, especially because the mentioned test is passing.
At runtime it works but the validation is reporting an error. Then it is a false-positive.
davsclaus:1595118432:2020-07-19T08:27:12.296+0000:1595118432:2020-07-19T08:27:12.296+0000:The parser cannot validate this reliable as the ENV variable can be any kind of test.


acosentino:1595121206:2020-07-19T09:13:26.367+0000:1595121206:2020-07-19T09:13:26.367+0000:3.4.2 has been cut before this fix, so it will be available in 3.4.3"
0,CAMEL-15281,Bug,Minor,None,3.x,"
None
",Resolved,Information Provided,3.x,Unassigned,Thomas Diesler,0,2,2020-07-08 14:02:29+00:00,2021-03-30 07:07:19+00:00,"The recent update to quickfix-2.2.0 may lead to ...




Caused by: quickfix.ConfigError: FIX42.xml: Property 'http://javax.xml.XMLConstants/property/accessExternalDTD' is not recognized.
	at quickfix.DataDictionary.read(DataDictionary.java:871)
	at quickfix.DataDictionary.<init>(DataDictionary.java:104)
	at quickfix.DefaultSessionFactory.lambda$static$0(DefaultSessionFactory.java:42)
	at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
	at org.quickfixj.SimpleCache.computeIfAbsent(SimpleCache.java:41)
	at quickfix.DefaultSessionFactory.getDataDictionary(DefaultSessionFactory.java:366)
	at quickfix.DefaultSessionFactory.createDataDictionary(DefaultSessionFactory.java:269)
	at quickfix.DefaultSessionFactory.processPreFixtDataDictionary(DefaultSessionFactory.java:259)
	at quickfix.DefaultSessionFactory.create(DefaultSessionFactory.java:154)
	at quickfix.mina.acceptor.AbstractSocketAcceptor.createSessions(AbstractSocketAcceptor.java:235)
	at quickfix.mina.acceptor.AbstractSocketAcceptor.startAcceptingConnections(AbstractSocketAcceptor.java:96)
	... 163 more
Caused by: java.lang.IllegalArgumentException: Property 'http://javax.xml.XMLConstants/property/accessExternalDTD' is not recognized.
	at org.apache.xerces.jaxp.DocumentBuilderFactoryImpl.setAttribute(DocumentBuilderFactoryImpl.java:144)
	at __redirected.__DocumentBuilderFactory.setAttribute(__DocumentBuilderFactory.java:125)
	at quickfix.DataDictionary.load(DataDictionary.java:883)
	at quickfix.DataDictionary.read(DataDictionary.java:869)
	... 173 more




This happens when we run on WildFly-20.0.0 with xerces-2.12.0.SP02","davsclaus:1596004445:2020-07-29T14:34:05.036+0000:1596004445:2020-07-29T14:34:05.036+0000:Can you try to report this at quickfix
https://github.com/quickfix-j/quickfixj


davsclaus:1608608910:2020-12-22T11:48:30.933+0000:1608608910:2020-12-22T11:48:30.933+0000:Reported at quickfix at
https://github.com/quickfix-j/quickfixj/issues/346
davsclaus:1616547556:2021-03-24T08:59:16.406+0000:1616547556:2021-03-24T08:59:16.406+0000:Fixed at quickfix but they have not done a new release with the fix
davsclaus:1616547600:2021-03-24T09:00:00.492+0000:1616547600:2021-03-24T09:00:00.492+0000:Thomas is this a problem with newer WildFly versions?
davsclaus:1617059239:2021-03-30T07:07:19.532+0000:1617059239:2021-03-30T07:07:19.532+0000:Tracking this issue in the wildfly-camel project."
0,CAMEL-15280,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-07-08 07:33:04+00:00,2020-07-09 14:09:46+00:00,No Desc,
0,CAMEL-15279,Improvement,Minor,3.4.0,,"

help-wanted

",Open,Unresolved,None,Unassigned,Benson Chan,0,2,2020-07-08 04:38:17+00:00,2023-11-14 12:49:29+00:00,"add an option to allow as2 producer to set the ""Receipt-Delivery-Option"" header
	
both in routing and also when using AS2ClientManager.send methods


when receiving a MDN message, the HttpMessageUtils.extractEdiPayload will throw an exception saying invalid content type 'multipart/report'",davsclaus:1662105018:2022-09-02T15:50:18.656+0000:1662105018:2022-09-02T15:50:18.656+0000:Community users is welcome to help with this
0,CAMEL-15278,Improvement,Major,None,"3.4.2, 3.5.0","
None
",Resolved,Fixed,"3.4.2, 3.5.0",Guillaume Nodet,Luca Burgazzoli,0,2,2020-07-07 15:23:10+00:00,2020-07-08 22:22:43+00:00,"On some containers such as ArC, beans retrieved from the container are proxy for the actual bean and as the proxy does not preserve the annotations on methods, methods annotated with @Handler are not automatically selected.


We should probably walk the class hierarchy to see if there is a method annotated with @Handler


https://github.com/apache/camel-quarkus/issues/1459","gnodet:1594183807:2020-07-08T12:50:07.067+0000:1594183807:2020-07-08T12:50:07.067+0000:I've raised a PR with a fix, but I'm not 100% sure that quarkus actually sets the synthetic flag on the proxy class.  It has to be verified."
0,CAMEL-15277,Improvement,Minor,3.4.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",James Netherton,James Netherton,0,1,2020-07-07 15:20:59+00:00,2020-07-08 06:38:41+00:00,"This is related to something I observed testing the Camel Quarkus OpenAPI Java extension: 


https://github.com/apache/camel-quarkus/issues/1309


In some scenarios, the openapi-java component unnecessarily applies logic related to the contextIdListing. This screws up the resolution of the rest configuration and leads to no content being returned from the api doc endpoint.",
0,CAMEL-15276,Bug,Major,3.4.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Thomas Diesler,0,1,2020-07-07 14:08:25+00:00,2020-07-16 17:07:53+00:00,"WeatherConfiguration is constructed like this




    public WeatherConfiguration(WeatherComponent component) {
        this.component = notNull(component, ""component"");
        weatherQuery = new WeatherQuery(this);
        FreeGeoIpGeoLocationProvider geoLocationProvider = new FreeGeoIpGeoLocationProvider(component, geolocationAccessKey);
        weatherQuery.setGeoLocationProvider(geoLocationProvider);
    }




at which point the geolocationAccessKey may be unknown.


There is perhaps also some confusion here ...




    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        WeatherConfiguration configuration = new WeatherConfiguration(this);
        configuration.setGeolocationAccessKey(geolocationAccessKey);
        configuration.setGeolocationRequestHostIP(geolocationRequestHostIP);

        WeatherEndpoint endpoint = new WeatherEndpoint(uri, this, configuration);
        setProperties(endpoint, parameters);

        if (httpClient == null) {
            httpClient = HttpClients.createDefault();
        }

        return endpoint;
    }




which seems to set the geolocationAccessKey on the configuration from what is explicitly defined on the component.


A geolocationAccessKey defined on the endpoint Uri does not find its way to the GeoLocationProvider which is then used by WeatherQuery, which then leads to ...




            camelctx.addRoutes(new RouteBuilder() {
                @Override
                public void configure() throws Exception {
                    from(""weather:foo?geolocationRequestHostIP=redhat.com&geolocationAccessKey="" + GEOLOCATION_ACCESS_KEY + ""&appid="" + OPENWEATHER_APP_ID)
                    .to(""mock:result"");
                }
            });






Caused by: java.lang.IllegalStateException: The geolocation service requires a mandatory geolocationAccessKey
	at org.apache.camel.component.weather.geolocation.FreeGeoIpGeoLocationProvider.getCurrentGeoLocation(FreeGeoIpGeoLocationProvider.java:43)
	at org.apache.camel.component.weather.WeatherQuery.getCurrentGeoLocation(WeatherQuery.java:150)
	at org.apache.camel.component.weather.WeatherQuery.getQuery(WeatherQuery.java:58)
	at org.apache.camel.component.weather.WeatherQuery.getQuery(WeatherQuery.java:38)
	at org.apache.camel.component.weather.WeatherConfiguration.getQuery(WeatherConfiguration.java:212)
	at org.apache.camel.component.weather.WeatherEndpoint.createConsumer(WeatherEndpoint.java:43)",
0,CAMEL-15275,New Feature,Major,3.4.0,None,"
None
",Resolved,Fixed,3.15.0,Claus Ibsen,Omar Al-Safi,1,5,2020-07-07 13:05:22+00:00,2022-01-14 12:35:28+00:00,"Currently we have camel-knative component in camel-k that enables camel routes deployed in with camel-k to interact with knative components like eventing. However, currently it is only exclusive to camel-k, hence it will make sense to bring/create this component as part of the main Camel components in order in order to enable non-camel-k routes that deployed with knative (e.g: camel-quarkus, camel-spring-boot) to utilize and interact in kantive. 


FYI davsclaus lb] thoughts on this? I recall there was some discussion on brining this component to main Camel components.","lburgazzoli:1594160544:2020-07-08T06:22:24.993+0000:1594160544:2020-07-08T06:22:24.993+0000:[~omarsmak] it is planned but may take a while as we need to consolidate some bits before moving in the main camel repo
omarsmak:1594265944:2020-07-09T11:39:04.792+0000:1594265944:2020-07-09T11:39:04.792+0000:[~lburgazzoli] sure, no problems. But in case, I can ship in to help as well here as I think this is very valuable :) 
davsclaus:1632875879:2021-09-29T08:37:59.177+0000:1632875879:2021-09-29T08:37:59.177+0000:Move over the knative component from camel-k to the core camel project
https://github.com/apache/camel-k-runtime/tree/main/camel-k-knative"
0,CAMEL-15274,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Ramu,Claus Ibsen,0,4,2020-07-04 07:12:50+00:00,2021-04-13 11:31:01+00:00,"In Camel 2.x we had spring boot actuator that could output route details, eg a list of the routes and their state, and some metrics.


It was also possible to stop/start routes etc.


However the latter was a concern for security.


But having a basic http endpoint service to dump route details would be good. It should be disabled by default and only be a read-only service if enabled.


The old code in 2.x can be of inspiration.


And the old code is not compatible with newer spring boot so it needs to be migrated.","ramu11:1594960605:2020-07-17T12:36:45.457+0000:1594960605:2020-07-17T12:36:45.457+0000:looking into it
cgiera:1618281722:2021-04-13T10:42:02.059+0000:1618281722:2021-04-13T10:42:02.059+0000:I think this is needed in the 3.4 version(LTS) too. 3.4 is the last version with java 8 support. So 3.5 forces all to use java 11(which is not possible for all) and going back to 3.3 means that you don't use a LTS version.
davsclaus:1618283373:2021-04-13T11:09:33.820+0000:1618283373:2021-04-13T11:09:33.820+0000:No 3.7 is also Java 8
cgiera:1618284661:2021-04-13T11:31:01.054+0000:1618284661:2021-04-13T11:31:01.054+0000:OK that's fine :) , did i misread that camel 3.4 is the last version with java 8 support or was this changed some time ago?"
0,CAMEL-15273,Wish,Minor,3.4.0,,"
None
",Resolved,Invalid,None,Unassigned,Corneliu C,0,2,2020-07-03 18:12:10+00:00,2020-07-03 19:36:55+00:00,"Hi,


I have a hard-time understanding how and why to use the new 3.4.x starters vs individual components, but this is what the documentation suggests.


I have a hard time because they bring unnecessary JAR's which I have now to manage in pom.xml via exclusions.


For example:




<!-- Camel -->
 <dependency>
 <groupId>org.apache.camel</groupId>
 <artifactId>camel-support</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-jsonpath-starter</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-jackson-starter</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-jaxb-starter</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-metrics-starter</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-soap-starter</artifactId>
 </dependency>
 <dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-disruptor-starter</artifactId>
 </dependency>



 


Each of these starters now bring me the spring-boot-starter-logging which I don't need as I'm using Log4J2 for this. As a result I have now both log4J2 and logback in my classpath. Obviously I can add exclusions but then what's the point of the starters?


Unless there's something subtle which I don't understand yet, I find the starters to be really targeting the lazy; I fail to see why is not enough to add camel-spring-boot-starter for the purpose of having Spring Boot and next just add the regular Apache Camel's components?


Ok, if starters are a nice to have thing, is it ok then to ignore them and simply add the regular Camel components to avoid this extra work? Can this be documented?


 


Thank you","davsclaus:1593776215:2020-07-03T19:36:55.720+0000:1593776215:2020-07-03T19:36:55.720+0000:Use the mailing list for asking questions.

The starters are for spring boot and are best to be used, they have auto configuration and some have special spring boot integration.

But you can for most of them not use the starter if you dont use auto configuration.

And for maven you can use maven exclude to remove dependencies."
0,CAMEL-15272,Bug,Major,3.4.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Matej Melko,Matej Melko,0,1,2020-07-03 14:23:15+00:00,2020-10-02 07:45:30+00:00,"Camel-Jira connector doesn't work with latest jira/jira-cloud due to old client version:





Caused by: com.atlassian.jira.rest.client.api.RestClientException: org.codehaus.jettison.json.JSONException: JSONObject[""name""] not found.
 at com.atlassian.jira.rest.client.internal.async.DelegatingPromise.claim(DelegatingPromise.java:45) ~[jira-rest-java-client-core-5.1.6.jar:na]
 at org.apache.camel.component.jira.consumer.AbstractJiraConsumer.getIssues(AbstractJiraConsumer.java:55) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.AbstractJiraConsumer.getIssues(AbstractJiraConsumer.java:45) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.NewCommentsConsumer.getComments(NewCommentsConsumer.java:74) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.component.jira.consumer.NewCommentsConsumer.doStart(NewCommentsConsumer.java:66) ~[camel-jira-3.4.0.jar:3.4.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3025) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:348) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:275) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:180) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:114) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2809) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2657) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2620) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:43) ~[camel-spring-boot-3.4.0.jar:3.4.0]
 at org.apache.camel.support.service.BaseService.start(BaseService.java:115) ~[camel-api-3.4.0.jar:3.4.0]
 at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2452) ~[camel-base-3.4.0.jar:3.4.0]
 at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.4.0.jar:3.4.0]
 ... 16 common frames omitted





 


Upgrade to 5.2.1 fixes this. PR on the way.",
0,CAMEL-15271,Task,Major,None,3.5.0,"

help-wanted

",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,2,2020-07-03 12:58:07+00:00,2020-07-30 10:47:25+00:00,"This page
https://camel.apache.org/manual/latest/faq/how-can-i-stop-a-route-from-a-route.html


No longer has the source code example, we should add it back","mattwatson:1593827742:2020-07-04T09:55:42.873+0000:1593827742:2020-07-04T09:55:42.873+0000:I'm looking for an easy issue to take a look at. Planning on submitting a PR today/tomorrow.
davsclaus:1596075550:2020-07-30T10:19:10.251+0000:1596075550:2020-07-30T10:19:10.251+0000:Matt, did you work on this?
mattwatson:1596076661:2020-07-30T10:37:41.978+0000:1596076661:2020-07-30T10:37:41.978+0000:Yeah, I added the example back in this PR [https://github.com/apache/camel/pull/3978]

 

I think this can be closed now?
davsclaus:1596077245:2020-07-30T10:47:25.335+0000:1596077245:2020-07-30T10:47:25.335+0000:Thanks for the PR"
0,CAMEL-15270,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-07-03 12:48:08+00:00,2020-07-17 12:32:53+00:00,"After CAMEL-14963


We should be able to also specify in spring-main configuration parameters for route templates so you can create routes without coding




camel.route-template[foo].template-id = myTemplate
camel.route-template[foo].greeting = Hello
camel.route-template[foo].delay = 5s

camel.route-template[bar].template-id = myTemplate
camel.route-template[bar].greeting = Davs




Here 2 routes will be created based on the same template, route foo and bar.",
0,CAMEL-15269,Task,Major,None,,"
None
",Closed,Invalid,None,Unassigned,Daniel Caloto Suárez,0,4,2020-07-03 09:40:36+00:00,2020-07-07 06:33:01+00:00,"Hello
I'm new to kafka. I would like to know how to install the CAMEL-JIRA-KAFKA-CONNECTOR and how to configure it.
Where do I have to put the unit 
<dependency>
 <groupId>org.apache.camel.kafkaconnector</groupId>
 <artifactId>camel-jira-kafka-connector</artifactId>
 <version>x.x.x</version>
 <!-- use the same version as your Camel Kafka connector version -->
</dependency>


Where to extract the file 
camel-jira-kafka-connector-0.3.0-package.tar.gz


Where and how to set options such as
camel.source.endpoint.jql


Thank you very much for everything
Dani","davsclaus:1593754512:2020-07-03T13:35:12.890+0000:1593754512:2020-07-03T13:35:12.890+0000:There is some bits in the docs
https://camel.apache.org/camel-kafka-connector/latest/try-it-out-locally.html

Can you try follow that and tell where it may lack some details.

Also towards the end of this video Andrea demo a kafka example where he shows how to download and extract the camel kafka packages
https://camel.apache.org/blog/2020/06/whatsnew-camel-3-webinar/
Stuber:1594074504:2020-07-07T06:28:24.431+0000:1594074530:2020-07-07T06:28:50.961+0000:Hi guys

I am also struggling with the same issue. I followed the provided documentation and took the configuration base from the projects example.

I always run into the following error:
{code:java}
[2020-07-07 00:12:11,684] ERROR WorkerSourceTask{id=CamelJiraSourceConnector-0} Task threw an uncaught and unrecoverable exception (org.apache.kafka.connect.runtime.WorkerTask:186)
org.apache.kafka.connect.errors.ConnectException: Failed to create and start Camel context
        at org.apache.camel.kafkaconnector.CamelSourceTask.start(CamelSourceTask.java:103)
        at org.apache.kafka.connect.runtime.WorkerSourceTask.execute(WorkerSourceTask.java:213)
        at org.apache.kafka.connect.runtime.WorkerTask.doRun(WorkerTask.java:184)
        at org.apache.kafka.connect.runtime.WorkerTask.run(WorkerTask.java:234)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Cannot find endpoint with scheme jira
        at org.apache.camel.catalog.impl.AbstractCamelCatalog.doAsEndpointUri(AbstractCamelCatalog.java:684)
        at org.apache.camel.catalog.impl.AbstractCamelCatalog.asEndpointUri(AbstractCamelCatalog.java:673)
        at org.apache.camel.kafkaconnector.utils.TaskHelper.buildUrl(TaskHelper.java:44)
        at org.apache.camel.kafkaconnector.CamelSourceTask.start(CamelSourceTask.java:89)
        ... 8 more
{code}
 

I used the following configuration:
{code:java}
name=CamelJiraSourceConnector
connector.class=org.apache.camel.kafkaconnector.jira.CamelJiraSourceConnector
tasks.max=1

key.converter=org.apache.kafka.connect.storage.StringConverter
value.converter=org.apache.kafka.connect.storage.StringConverter

camel.component.jira.jiraUrl=http://localhost:8080
camel.component.jira.password=xxx
camel.component.jira.username=user
camel.source.endpoint.jiraUrl=http://localhost:8080
camel.source.endpoint.username=user
camel.source.endpoint.password=xxx

camel.source.path.type=newComments
topics=mytopic

{code}
I also tried with OAuth, but run into the same issue. Furthermore I tested it with Jira Online, but faced the same issue. 

Using DEBUG/TRACE log did not really help me. I do not really understand the underlying issue.

It is also not clear to me why there are configurations for components and source.endpoints. What is the difference? 

 
acosentino:1594074756:2020-07-07T06:32:36.939+0000:1594074756:2020-07-07T06:32:36.939+0000:Please, open the issue in the camel-kafka-connector issue tracker.

[https://github.com/apache/camel-kafka-connector]

This is the issue tracker for pure camel."
0,CAMEL-15268,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-07-02 16:17:05+00:00,2020-07-03 10:48:00+00:00,"The configure method currently dont have parameter binding. We should add support for CamelContext, Main etc.",
0,CAMEL-15267,New Feature,Minor,None,None,"
None
",Resolved,Fixed,"3.4.1, 3.5.0",Alex Dettinger,Alex Dettinger,0,1,2020-07-02 12:59:50+00:00,2020-07-02 14:26:31+00:00,No Desc,
0,CAMEL-15266,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,2,2020-07-01 15:06:12+00:00,2020-07-17 12:35:58+00:00,"On gitter chat.


1. Remove that last ""more resources"" section
2. On the github contribution.md file, just link to the same guide on the website (one place to maintain)","Aemie:1594088902:2020-07-07T10:28:22.836+0000:1594088902:2020-07-07T10:28:22.836+0000:[~davsclaus] Within the contribution I was reading there is a section *APACHE CAMEL COMMITTERS SHOULD WORK ON THE ASF GIT REPO* where we could provide the links within the *More Resources* section. Is that what you are asking for?
amdmdi:1594606007:2020-07-13T10:06:47.541+0000:1594606081:2020-07-13T10:08:01.189+0000:Hi [~Aemie], 
I reported this on gitter. 
1. There is a section [More ressources|https://camel.apache.org/manual/latest/contributing.html#more-resources] at the end of the *Contributing* page on the website, it contains a dead link to an Apache Wiki about ASF Git : *_http://wiki.apache.org/general/GitAtApache: Some basic notes about git@asf_* (Claus said on gitter that all contributions are now done via Github, hence his proposal to remove that entire section about ASF Git)

2. In the contributing.md on Github there is a references to Subversion (i checked today it was still there)
It also seems  that the two contributing guides on github and the website are not the same, maybe it would be better to have only one guide to maintain as suggested by Claus
"
0,CAMEL-15265,Bug,Major,3.4.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Claus Ibsen,Claus Ibsen,0,1,2020-07-01 12:45:22+00:00,2020-07-04 09:05:55+00:00,"I was hoping to use the new StaticEndpointBuilders to configure and possibly share for my routes and producer templates in Camel 3.4.0. However, I noticed all of the static methods are package private. Is that by design?",
0,CAMEL-15264,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-07-01 06:03:55+00:00,2020-07-01 12:42:25+00:00,Like delete the delivery stream or changing the destination dynamically.,
0,CAMEL-15263,Improvement,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2020-07-01 05:49:43+00:00,2023-07-24 17:29:55+00:00,"EIPs with outputs have route as a possible choice due to how JAXB generates the schema.
We can amend the file afterwards and remove it. And also now routeTemplate.",
0,CAMEL-15262,Bug,Minor,3.4.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Andrea Cosentino,Ahmed M,0,1,2020-06-30 20:49:05+00:00,2020-07-03 13:46:48+00:00,"The constructor args maxRetries  (reconnectMaxRetries) and maxSleepMs (reconnectMaxSleepTime) are reversed when creating a new ExponentialBackoffRetry in ZooKeeperCuratorHelper.createCurator :




if (retryPolicy == null) {
    retryPolicy = new ExponentialBackoffRetry(
        (int)configuration.getReconnectBaseSleepTimeUnit().toMillis(configuration.getReconnectBaseSleepTime()),
        (int)configuration.getReconnectMaxSleepTimeUnit().toMillis(configuration.getReconnectMaxSleepTime()),
        configuration.getReconnectMaxRetries());
}




CuratorFramework API javadoc:




ExponentialBackoffRetry(int baseSleepTimeMs, int maxRetries, int maxSleepMs)",
0,CAMEL-15261,Improvement,Major,3.4.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-06-30 13:44:00+00:00,2020-07-01 10:26:09+00:00,"With the release of Debezium version 1.2.0.Final, new configurations baed on regex being introduced, for example this one here. 
The easiest way is to ignore such fields from the maven plugin and instruct the user to use `.additionalProperties` configuration property to set these fields as pretty complicated to generate such fields.",
0,CAMEL-15260,Bug,Major,3.4.1,"3.4.2, 3.5.0","
None
",Resolved,Fixed,"3.4.2, 3.5.0",Andrea Cosentino,Matt Robbins,0,2,2020-06-30 11:48:40+00:00,2020-07-29 17:44:05+00:00,"When using Camel's opentracing implementation alongside other tracers e.g. anything from https://github.com/opentracing-contrib traces do not link up nicely.


It appears that although Camel has the ActiveSpanManager which correctly tracks the span stack locally the implementation doesn't activate spans in the global tracer.


This means that when viewing spans you get broken traces for events in the same distributed transaction e.g.




        from(""direct:personInJsonToDb"")
                .unmarshal(jsonDataFormat)
                .bean(DatabaseClient.class, ""insert"");




You can see 2 root traces in the attached image.


It's possible to workaround this by intercepting and activating 'manually' but that doesn't seem correct.


I think we should be activating in the global tracer when we activate locally.","acosentino:1593490004:2020-06-30T12:06:44.397+0000:1593490004:2020-06-30T12:06:44.397+0000:Can you create a PR for camel-3.4.x too? Thanks.
mcrmfc:1593490299:2020-06-30T12:11:39.985+0000:1593490299:2020-06-30T12:11:39.985+0000:Yep sure - will do, thanks [~acosentino]"
0,CAMEL-15259,Task,Major,3.4.0,None,"
None
",Resolved,Fixed,3.5.0,Thomas Diesler,Thomas Diesler,0,2,2020-06-30 11:06:27+00:00,2020-07-03 14:02:25+00:00,"The couchbase component seem outdated or broken


So far we used docker image couchbase:community-3.1.3 which is quite outdated and does not run on Docker Desktop for MacOS. A recent version of the community server (e.g. couchbase:community-6.5.1) runs fine and I can do a setup like this ...


Run the community couchbase server image




docker run --detach \
	--name couchbase \
	-p 8091:8091 \
	-p 8092:8092 \
	-p 8093:8093 \
	-p 8094:8094 \
	-p 11210:11210 \
	couchbase:community-6.5.1




Setup a new cluster
https://docs.couchbase.com/server/current/cli/cbcli/couchbase-cli-cluster-init.html




docker exec couchbase \
	couchbase-cli cluster-init -c 127.0.0.1 --cluster-username Administrator --cluster-password password \
	--cluster-name default --cluster-ramsize 1024 \
	--services data,index,query




Load the beer sample data
https://docs.couchbase.com/server/current/cli/cbdocloader-tool.html




docker exec couchbase \
	cbdocloader -c couchbase://127.0.0.1 -u Administrator -p password \
	-v -m 1024 -b beer-sample -d /opt/couchbase/samples/beer-sample.zip




The camel component also uses an outdated client (1.4.13), which I cannot get to work with any of the later community servers that I tried. Simple code like this (which is used by the couchbase endpoint) fails with 401




List<URI> hosts = Arrays.asList(new URI(""http://127.0.0.1:8091/pools""));
String username = ""Administrator"";
String password = ""password"";
String bucket = ""beer-sample"";

CouchbaseConnectionFactoryBuilder cfb = new CouchbaseConnectionFactoryBuilder();
CouchbaseClient client = new CouchbaseClient(cfb.buildCouchbaseConnection(hosts, bucket, username, password));




There seems to be a change of how username is handled by recent couchbase server versions. I didn't try a more recent java client because this would likely imply changes to the couchbase component.","acosentino:1593487209:2020-06-30T11:20:09.479+0000:1593487209:2020-06-30T11:20:09.479+0000:[https://github.com/apache/camel/commit/025549c010e467d59ff52fde8f87e3daa0ae9cf1#diff-b6d9962b7455f199045c2d64cd30ac9d]

 

It has been updated to 3.0.5 client.
tdiesler:1593487324:2020-06-30T11:22:04.575+0000:1593487324:2020-06-30T11:22:04.575+0000:LOL, perfect timing ;-) I'll try the latest then."
0,CAMEL-15258,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-06-30 03:59:07+00:00,2020-06-30 04:29:45+00:00,"This does not make sense on spring boot, as it requires a vertx based runtime.",
0,CAMEL-15257,New Feature,Major,3.4.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,shatk,0,2,2020-06-29 14:26:09+00:00,2020-07-15 17:14:48+00:00,"Hello Team, 


Similar to camel-jolt, looking for an integration of apache camel with jsonata [https://jsonata.org/]  query and transformation framework.  We need to expose Rest API's using apache camel and do json transformation using json query language [jsonata for eg] without doing binding to java objects, as the json structure is quite dynamic. 


> jsonata java implementation : 


 https://github.com/IBM/JSONata4Java",acosentino:1593577726:2020-07-01T12:28:46.346+0000:1593577726:2020-07-01T12:28:46.346+0000:You're welcome to work on it.
0,CAMEL-15256,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2020-06-29 11:52:53+00:00,2022-09-02 15:49:30+00:00,"Some EIPs have scheduled background tasks that periodically check for stuff, like timeouts in aggregator, and whatnot.


We could look at having a way for a 3rd party SPI to plugin via ThreadPoolFactory a way for using a custom scheduler instead of a ScheduledThreadPoolExecutor.",davsclaus:1600414274:2020-09-18T15:31:14.455+0000:1600414274:2020-09-18T15:31:14.455+0000:Currently its only non scheduled thread pool we have a SPI and pluggable system for.
0,CAMEL-15255,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Espen Andreassen,0,2,2020-06-29 09:35:14+00:00,2020-08-24 10:01:36+00:00,"The camel-micrometer component includes a RoutePolicy, EventNotifiers and a MessageHistory, which provides a set of metrics. I think it would be a great improvement to expand this set, more particularly with metrics on:



Total count of exchanges completed, per route
Total count of exchanges failed, per route
Current count of exchanges inflight, per route



I find these metrics to be highly useful in the context of monitoring camel apps and would assume others do as well.","eandre:1593394538:2020-06-29T09:35:38.754+0000:1593394538:2020-06-29T09:35:38.754+0000:I've already implemented these metrics like this:
 
 A RoutePolicy which provides counters on exchanges completed and failed. These are incremented according to the response on "" isFailed()"" on the exchange in the ""onDone"" hook of the RoutePolicy.
 
 An EventNotifier on ExchangeEvents which provides a gauge on inflight exchanges per route. When the notifier is notified, the ""fromRouteId"" is extracted from the event and then used to find the current inflight exchanges for the route of the exchange using the inflight repository.
 
 If there is any interest in this, I can prepare a pull request?
davsclaus:1593401860:2020-06-29T11:37:40.778+0000:1593401860:2020-06-29T11:37:40.778+0000:Yeah sure contributions is welcome
"
0,CAMEL-15254,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2020-06-29 07:35:58+00:00,2022-09-02 15:49:23+00:00,"In AbstractCamelContext we log if custom features has been detected and are in use, such as when they can be installed via classpath.


We could maybe use the extension mechanism and make them as custom extensions. And then which extensions are in use


Camel extensions: xxx, yyy, zzz


Similar to what Quarkus does by logging which extensions that are enabled.",
0,CAMEL-15253,New Feature,Major,3.4.0,3.5.0,"

gsoc2020

",Resolved,Fixed,3.5.0,Unassigned,Juan Segarra,0,2,2020-06-28 21:48:03+00:00,2020-08-21 07:19:10+00:00,"Implement a component for the OAI-PMH protocol.


Spec: https://www.openarchives.org/pmh/


Proposal: Proposal","davsclaus:1597294136:2020-08-13T12:48:56.389+0000:1597294136:2020-08-13T12:48:56.389+0000:Juan thanks, we need a spring boot starter for this CAMEL-15408"
0,CAMEL-15252,New Feature,Minor,3.4.0,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Ramesh Venkitaswaran,0,2,2020-06-28 12:15:17+00:00,2023-08-09 09:23:51+00:00,"The camel documentation states that there are two ways to acknowledge a Google pubsub message. They are ""ackMode=AUTO"" and ""ackMode=NONE"". If the mode is set to NONE, the document states that the ""downstream process has to acknowledge explicitly"". However there are no examples, or pointers on how to do that.


The unit tests also do not reflect this scenario. The AckModeNoneTest.java sets the ackMode to NONE, and checks if the message is redelivered, but it doesn't test how to acknowledge the message. This file AcknowledgeSync.java has the steps to acknowledge, but it's not clear how to do that within a Camel route. It seems to need an class called com.google.cloud.pubsub.v1.stub.SubscriberStub that is passed into it.","davsclaus:1662104953:2022-09-02T15:49:13.855+0000:1662104953:2022-09-02T15:49:13.855+0000:What use-cases do you have for manual ack
rvenk:1662105409:2022-09-02T15:56:49.855+0000:1662105409:2022-09-02T15:56:49.855+0000:The use-case at that time was this - A message is read from PubSub that takes a long time to process. If that time exceeds the acknowledgement deadline, Google will attempt redelivery which causes issues. In this particular case, the app was attempting to invoke Google apis to provision several pieces of infrastructure which takes anywhere between 1-5 minutes.

The workaround was to use Spring integration which supported manual acknowledgement. An example is found here [https://spring.io/guides/gs/messaging-gcp-pubsub/] where the ack mode is set to AckMode.MANUAL.

 

 
davsclaus:1662157725:2022-09-03T06:28:45.760+0000:1662157725:2022-09-03T06:28:45.760+0000:Thanks for explaining, yeah lets see if we can add manual ACK - some of the other messaging components have that concept.
davsclaus:1662360066:2022-09-05T14:41:06.115+0000:1662360066:2022-09-05T14:41:06.115+0000:Paco C
@claetenarurus
·
6h
@davsclaus
 CAMEL-15252
receiveMessage method doesn't set ACK_ID header. AckMode=NONE  must need this header to do manual ack"
0,CAMEL-15251,Bug,Major,"2.25.1, 3.3.0, 3.4.0","3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Zheng Feng,Zheng Feng,0,1,2020-06-28 06:14:40+00:00,2020-06-28 09:19:58+00:00,"The MandatoryJtaTransactionPolicy missed to call




runWithTransaction(runnable, false);




The NeverJtaTransactionPolicy missed to call




runnable.run();",
0,CAMEL-15250,Task,Minor,None,None,"
None
",Closed,Fixed,None,Unassigned,Sebb,0,1,2020-06-27 21:56:51+00:00,2020-07-30 12:13:34+00:00,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]


Please can you remove all non-current releases?


i.e. all but the 3 latest releases: 3.4.0, 3.3.0, 3.2.0


It's unfair to expect the 3rd party mirrors to carry old releases.


However you can still link to the archives for historic releases.


Please also update your release procedures (if relevant)


Thanks!


[1] http://www.apache.org/dev/release.html#when-to-archive","davsclaus:1596075724:2020-07-30T10:22:04.288+0000:1596075724:2020-07-30T10:22:04.288+0000:[~acosentino] or [~zregvart] wonder if you known how to delete those old releases
https://dist.apache.org/repos/dist/release/camel/apache-camel/

So we should just keep 2.25.2 and 3.4.2
sebb:1596076764:2020-07-30T10:39:24.602+0000:1596076764:2020-07-30T10:39:24.602+0000:svn rm -m""Dropping old release"" https://dist.apache.org/repos/dist/release/camel/apache-camel/3.0.1/
davsclaus:1596077384:2020-07-30T10:49:44.268+0000:1596077384:2020-07-30T10:49:44.268+0000:Thanks Sebb. I have now deleted the old releases so we only have the latest active.
sebb:1596082414:2020-07-30T12:13:34.207+0000:1596082414:2020-07-30T12:13:34.207+0000:Thanks"
0,CAMEL-15249,Improvement,Major,None,,"
None
",Resolved,Implemented,None,Unassigned,Zoran Regvart,0,3,2020-06-27 20:21:52+00:00,2020-12-01 19:08:56+00:00,"To make the build simpler, i.e. that we just need to run yarn followed by yarn build we can utilize Yarn workspaces. By using workspaces we would not need to change into antora-ui-camel and build there, but the Antora UI would be built as a dependency/module of the workspace.


Perhaps we can even make it so that we only need to run yarn (not so sure this is a good idea) or we only need to run yarn build.","djencks:1593262229:2020-06-27T20:50:29.617+0000:1593262229:2020-06-27T20:50:29.617+0000:yarn workspaces seem like using a bulldozer where a teaspoon would do.

I suggest adding some more scripts to package.json.  I can't get this to work with yarn, but with npm the following works:

-- add the gulp dependencies from antora-ui-camel/package.json to package.json

-- add these scripts to package.json:

 

```

""build:install"": ""npm i --cache=.cache/npm"",
""build:antora-ui"": ""gulp --cwd antora-ui-camel"",

```

 

npm run build:install and npm run build:antora-ui both do what one expects.

 
zregvart:1593262972:2020-06-27T21:02:52.418+0000:1593262972:2020-06-27T21:02:52.418+0000:I respectfully disagree with the analogy, I think Yarn workspaces are very well suited for this use case. There are also [further benefits|https://classic.yarnpkg.com/en/docs/workspaces/#toc-why-would-you-want-to-do-this] in using workspaces with regards to using a single lock file and optimizing downloads, potentially making the build faster. Also I would not introduce a dependency on npm, we're using yarn exclusively.
djencks:1593263474:2020-06-27T21:11:14.471+0000:1593263474:2020-06-27T21:11:14.471+0000:I wasn't intending to suggest that we use npm, just that I could get this working with npm and not with yarn.  I assume someone more familiar with yarn could get it working with yarn.

 

However, I'm coming to the conclusion that perhaps a yarn workspace is a good idea, since it's possible to depend on a UI bundle and access it through require.  This would make the antora build explicitly depend on the UI bundle in package.json. 
Aemie:1593322313:2020-06-28T13:31:53.067+0000:1593322968:2020-06-28T13:42:48.344+0000:[~zregvart] I tried working with workspaces by adding workspaces of antora-ui-camel and installing all the dependencies, so when I run `yarn workspaces run build` where `workspaces: ['antora-ui-camel']`, it ran into some errors which I could resolve but it keeps being stuck at the error `Unknown module: algoliasearch not found` when it's clearly installed.

I had to create a workaround which doesn't seem optimal : 

```
""build:ui"": ""yarn --cwd antora-ui-camel add --dev algoliasearch && yarn workspaces run build"",
""build:antora"": ""yarn add --dev npm-run-all -W && antora --clean --fetch antora-playbook.yml"",
```"
0,CAMEL-15248,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Omar Al-Safi,1,3,2020-06-27 12:49:48+00:00,2020-07-17 07:09:59+00:00,"ArangoDB is a graph database that is gaining a good momentum in the area of graph database, and thus would be valuable to have a component for it in Camel. 
ArangoDB Java Driver has Apache 2.0 license and hence shouldn't be an issue to include the driver in the dependencies","zbendhiba:1593754113:2020-07-03T13:28:33.628+0000:1593754113:2020-07-03T13:28:33.628+0000:I'd like to work on this!!
omarsmak:1593776954:2020-07-03T19:49:14.961+0000:1593776954:2020-07-03T19:49:14.961+0000:You are welcome to work on it :). 
zbendhiba:1593999648:2020-07-06T09:40:48.619+0000:1593999648:2020-07-06T09:40:48.619+0000:(y) 

I'm working on it !!
zbendhiba:1594778634:2020-07-15T10:03:54.671+0000:1594778634:2020-07-15T10:03:54.671+0000:Hello This is the PR link : [https://github.com/apache/camel/pull/4002]

I did a producer only, for operations on collections only for a fist commit. I would love to have feedback.

And I have a question: is it better tu use Async ? If yes, I could switch the ArangoDB async interfaces instead.
acosentino:1594884297:2020-07-16T15:24:57.922+0000:1594884297:2020-07-16T15:24:57.922+0000:Thanks [~zbendhiba]"
0,CAMEL-15247,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-27 07:02:33+00:00,2020-06-27 07:53:12+00:00,In case rest configuration is configured via properties via camelcontext api then we need a source code generated configurer to avoid reflection,
0,CAMEL-15216,Task,Minor,None,3.5.0,"

help-wanted

",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,2,2020-06-18 13:47:39+00:00,2020-08-06 08:29:33+00:00,No Desc,"Aemie:1592945799:2020-06-24T04:56:39.946+0000:1592945799:2020-06-24T04:56:39.946+0000:[~davsclaus], I am unable to track down this warning - *asciidoctor: WARNING: skipping reference to missing attribute: key*. I know there might be an undefined attribute key within the repo however currently, I am unable to find it and resolve it.

 
davsclaus:1592954793:2020-06-24T07:26:33.338+0000:1592954793:2020-06-24T07:26:33.338+0000:Yeah we have not been able to track that last WARN down. "
0,CAMEL-15215,Task,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Guillaume Nodet,Guillaume Nodet,0,2,2020-06-18 13:10:25+00:00,2020-07-28 11:25:35+00:00,No Desc,"davsclaus:1593818415:2020-07-04T07:20:15.920+0000:1593818415:2020-07-04T07:20:15.920+0000:Is there more work for this? And was there some changes that is worth mentioning in the upgrade guide, and the existing testing docs?
gnodet:1595906735:2020-07-28T11:25:35.948+0000:1595906735:2020-07-28T11:25:35.948+0000:https://issues.apache.org/jira/browse/CAMEL-15215"
0,CAMEL-15214,Bug,Minor,3.4.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Claus Ibsen,Aurélien Pupier,0,2,2020-06-18 12:21:39+00:00,2020-06-19 05:30:12+00:00,"in Camel Catlog, there is a new type ""duration"" (for timer delay parameters for instance).


it was previously using type ""integer"".
The validation has not been adjusted fo rthis new type. Consequently, the delay value is no more validated.


For instance, ""timer:timerName?delay=p"" is no more reporting a validation error.


technical:
the ""time pattern"" was validated for the integer type: https://github.com/apache/camel/blob/b665e5cf4b47f9b074bea40c86a5133f0db00454/core/camel-core-catalog/src/main/java/org/apache/camel/catalog/impl/AbstractCamelCatalog.java#L1276-L1284",davsclaus:1592515812:2020-06-19T05:30:12.862+0000:1592515812:2020-06-19T05:30:12.862+0000:Thanks for reporting
0,CAMEL-15213,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-18 11:15:44+00:00,2020-06-19 06:22:09+00:00,We should include the default values in the camel-main configuration properties classes so we can get that in the tooling metadata and also in the generated documentation (see camel-main adoc file),
0,CAMEL-15212,Task,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-18 08:36:08+00:00,2020-06-26 05:46:04+00:00,A reminder to update the 3.4 upgrade guide about the need for setting loadTypeConverters=true if using custom converter (without loader generated),
0,CAMEL-15211,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Jono Morris,Claus Ibsen,0,3,2020-06-18 08:22:21+00:00,2023-11-09 11:31:41+00:00,Would be great if we can make configuring Camels SSL security parameters via camel.main.ssl. parameters.,"davsclaus:1698378304:2023-10-27T11:45:04.400+0000:1698378304:2023-10-27T11:45:04.400+0000:We also need some work for camel-spring-boot, to make camel.ssl configuration possible via its auto configuration.

Its something like threadpool but not exactly the same, but you can take a look
https://github.com/apache/camel-spring-boot/tree/main/core/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/threadpool
davsclaus:1699008590:2023-11-03T18:49:50.117+0000:1699008590:2023-11-03T18:49:50.117+0000:I think we still need camel-spring-boot auto configuration
davsclaus:1699057200:2023-11-04T08:20:00.722+0000:1699057200:2023-11-04T08:20:00.722+0000:It would be someting like this for SB
https://github.com/apache/camel-spring-boot/commit/6de672a1bd3aec1e2ec8c588d120fff2ea8f2797
jono:1699499634:2023-11-09T11:13:54.865+0000:1699499634:2023-11-09T11:13:54.865+0000:Changes merged that create and configure {{SSLContextParameters}} bean using camel.ssl.config and camel.ssl properties with camel.ssl properties taking precedence. [https://github.com/apache/camel-spring-boot/pull/1003,]  

Regards Jono"
0,CAMEL-15210,Improvement,Major,3.4.0,None,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-18 08:06:36+00:00,2020-08-29 13:06:20+00:00,"I had to add manually the jupiter plugin to make it compile
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.6.2</version>
      <scope>test</scope>
    </dependency>


See Cia@ chapter8/hi-world",
0,CAMEL-15209,Improvement,Major,3.4.0,None,"
None
",Resolved,Fixed,"3.4.1, 3.5.0",Unassigned,Claus Ibsen,0,1,2020-06-18 07:46:25+00:00,2020-06-19 04:19:51+00:00,"<dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-jaxb</artifactId>
      <version>${camel-version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xml-jaxb</artifactId>
      <version>${camel-version}</version>
    </dependency>",
0,CAMEL-15208,Improvement,Major,3.4.0,3.5.0,"
None
",Resolved,Not A Problem,3.5.0,Unassigned,Claus Ibsen,0,1,2020-06-18 07:41:23+00:00,2020-06-18 09:10:13+00:00,"We need the jandex plugin to run first as its dependent. 


chapter8/custom in the CiA2 source code presents this problem.","davsclaus:1592442613:2020-06-18T09:10:13.196+0000:1592442613:2020-06-18T09:10:13.196+0000:Okay so it was wrong phase, in the pom.xml. That should just be removed then it all runs in right order."
0,CAMEL-15207,Improvement,Minor,3.3.0,,"
None
",Resolved,Abandoned,None,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-06-18 07:38:06+00:00,2022-09-02 15:47:46+00:00,"Issue https://issues.apache.org/jira/browse/CAMEL-14833 brought a possibility to define different parser (instead of autodetect one). This solution should be refactored to more suitable (usable) way, by introducing the TikaParserProducer. (it should eliminate the need of of the extension of the TikaComponent)",
0,CAMEL-15206,Bug,Minor,2.23.2,,"
None
",Resolved,Invalid,None,Unassigned,Naveenkumar Palanisamy,0,2,2020-06-18 04:55:14+00:00,2020-12-17 15:18:21+00:00,"Actually I create rest api using apache camel. Its a Get Call.


Request Path like this -> users/names/{username}?client={clientId}


we will try to given username is Spanish text like this -> users/names/plánia?client=100 


and try this also -> users/names/pl%C3%nia?client=100


Its throw error like bad request


 




{
   ""timestamp"": ""2020-06-17T16:06:25.609+0000"",
   ""status"": 400,
   ""error"": ""Bad Request"",
   ""message"": ""Illegal Argument Specified in the Request Headers or Path"",
   ""path"": ""/users/names/plánia""
 }","davsclaus:1592450246:2020-06-18T11:17:26.618+0000:1592450246:2020-06-18T11:17:26.618+0000:You should generally ask first on the user mailing list to get help.

That error is likely from the HTTP server that regard it as a bad request. So what HTTP component are you using jetty, undertow or what? 
Also try with latest 2.25.x release as that is the only active supported 2.x version"
0,CAMEL-15205,Task,Minor,3.3.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,kaleem ahmed,0,2,2020-06-17 23:38:21+00:00,2020-06-26 07:49:32+00:00,"The current documentation says for cron job the spaces needs to replaced by +. However that does not seem to be the case as of the latest release. If you specify + instead of blank it throws a runtime error 


 


Caused by: java.lang.RuntimeException: CronExpression '#  0 1 6-18 ? * *' is invalid.Caused by: java.lang.RuntimeException: CronExpression '#  0 1 6-18 ? * *' is invalid. at org.quartz.CronScheduleBuilder.cronSchedule(CronScheduleBuilder.java:111) at org.apache.camel.component.quartz.QuartzEndpoint.createTrigger(QuartzEndpoint.java:485) at org.apache.camel.component.quartz.QuartzEndpoint.addJobInScheduler(QuartzEndpoint.java:372) at org.apache.camel.component.quartz.QuartzEndpoint.doStart(QuartzEndpoint.java:328) at org.apache.camel.support.service.BaseService.start(BaseService.java:115) at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:84) at org.apache.camel.impl.engine.RouteService.doWarmUp(RouteService.java:141) at org.apache.camel.impl.engine.RouteService.warmUp(RouteService.java:123) ... 13 moreCaused by: java.text.ParseException: Unexpected character: # at org.quartz.CronExpression.storeExpressionVals(CronExpression.java:697) at org.quartz.CronExpression.buildExpression(CronExpression.java:487) at org.quartz.CronExpression.<init>(CronExpression.java:276) at org.quartz.CronScheduleBuilder.cronSchedule(CronScheduleBuilder.java:107) ... 20 more


The documentation is wrong  and it should be regular cron format all works well. 


 


The Bad:
from(quartz(""myQuartz"").cron(""0+1+6-18+?"")).to(mock(""direct""))
The Good
from(quartz(""myQuartz"").cron(""0 0 6,18 ? * *"")).to(mock(""direct""))","davsclaus:1593127947:2020-06-26T07:32:27.138+0000:1593127947:2020-06-26T07:32:27.138+0000:Its because you use endpoint-dsl that has this ""problem"". It will be fixed in 3.5 onwards so you can use + there as well."
0,CAMEL-15204,Task,Trivial,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Jesse Gorzinski,0,1,2020-06-17 18:03:22+00:00,2020-06-22 04:11:30+00:00,"The JT400 component references ""AS/400"" in several places. 


IBM hasn't marketed AS/400 in 20 years. It has since been completely replaced by IBM i on Power Systems (a completely different hardware set) in 2008. IBM i supports AS/400 methodologies (such as program calls, data queues, etc), so that commonly causes confusion with branding and terminology. It doesn't help that IBM's connector module for Java still has ""400"" in the name (for compatibility purposes). 


 


Anyway, we should change the doc of the JT400 component to properly reflect what it can be used for. I intend to PR these changes on GitHub, so you can assign me.",ThePrez:1592558264:2020-06-19T17:17:44.100+0000:1592558264:2020-06-19T17:17:44.100+0000:PR at https://github.com/apache/camel/pull/3936
0,CAMEL-15203,Improvement,Major,"3.3.0, 3.4.0",3.14.0,"
None
",Resolved,Fixed,3.14.0,Unassigned,Martijn Cremer,0,3,2020-06-17 12:31:15+00:00,2021-11-15 04:26:53+00:00,"SFDC has several errors documetned: https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/streaming_error_codes.htm


 


There are several problems: How the `SubscriptionHelper` is handling connection errors. At the moment it has a hardcoded 401 and 403 handling. But there are several valid  errors as in the specication above disibed.


 


Atm if we hit these errors, in example the 400 with the message body message {{The replayId {replay_id} you provided was invalid. Please provide a valid ID, -2 to replay all events, or -1 to replay only new events.. }}You would expect that when we get this error, appache camel tries to retrieve it with a replay_id with -2 or -1. At the moment if you get this error you loose subscription total to the channel.


I sugest a generic error handler:


Psudo code:




public class SalesForceStreamingErrorHandler {
    APIversionMandatory(""400"", ""API version in the URI is mandatory""),
    UnsupportedAPIversion(""400"", ""Unsupported API version""),
    InvalidConnectionType(""400"", "" Invalid connection type""),
    ChannelNotExists(""400"", ""The channel you requested to subscribe to does not exis""),
    ChannelNameMissing(""400"", ""Channel name not specified""),
    IncorrectChannelName(""400"", ""Channel subscriptions must start with a leading '/'""),
    QueryFieldsDoNotExist(""400"", ""Query fields {query_fields} do not exist on the topic entity""),
    CookieMissing(""400"", ""Client client_name has established a session, but no cookie_name cookie present""),
    InvalidReplayID(""400"", ""The replayId {replay_id} you provided was invalid. Please provide a valid ID, -2 to replay all events, or -1 to replay only new events.""),
    AuthenticationInvalid(""401"", ""Authentication invalid"",true,false),
    RequestRequiresAuthentication(""401"", ""Request requires authentication"", true,false),
    CannotCreateChannel(""403"", ""Cannot create channel""),
    AccessToTopic(""403"", ""Subscriber does not have access to the entity in this topic""),
    AccessToField(""403"", ""Subscriber does not have access to all fields referenced in the where clause of the PushTopic""),
    HandshakeDenied(""403"", ""Handshake denied""),
    IncompleteHandshake(""403"", ""Client has not completed handshake""),
    OrganisationConcurendUser(""403"", ""Organization concurrent user limit exceeded""),
    OrganisationDailyLimit(""403"", ""Organization total events daily limit exceeded""),
    RestrictedChannel(""403"", ""Restricted channel""),
    UserNotEnabled(""403"", ""User not enabled for streaming""),
    UserNotAllowed(""403"", ""User not allowed to subscribe CDC without View All Data permissions""),
    SubscriptionLimit(""403"", ""Subscription limit exceeded for this topic""),
    UnknownClient(""403"", ""Unknown client""),
    DDOS_PROTECTION(""403"",
            ""To protect all customers from excessive use and Denial of Service attacks, we limit the number of simultaneous connections per server. Your request has been denied because this limit has been exceeded. Please try your request again later.""),
    MaxRequstSize(""413"", ""Maximum Request Size Exceeded""),
    ServerBusY(""503"", ""Server is too busy. Please try your request again later."");




With a new configuration option:




// Streaming API properties
@UriParam
private Optional<Long> fallbackReplayId;




With new logic in the SubscriptionHelper to reconnect with the fallback replayID when set. This way we can also improve the eventually the robustness of how error msges are handled in this component. At the moment we have a lot of problems with the replayID bc they can expire afhter 72 hours on the buss and if you had downtime with the bayeux buss, having this missed is a problem.","davsclaus:1592369391:2020-06-17T12:49:51.579+0000:1592369391:2020-06-17T12:49:51.579+0000:Try Camel 3.4 as there has been some salesforce fixes and improvements
Thadir:1592380894:2020-06-17T16:01:34.142+0000:1592380894:2020-06-17T16:01:34.142+0000:This does not fix this problem let me explain it better sorry.
jeremyross:1636797678:2021-11-13T18:01:18.397+0000:1636797678:2021-11-13T18:01:18.397+0000:[~Thadir] Just pushed a commit for this. Please test with 3.14.0-SNAPSHOT and let me know if this helps."
0,CAMEL-15202,Task,Major,None,,"
None
",Resolved,Done,None,Unassigned,Aemie,0,3,2020-06-17 12:30:26+00:00,2020-06-27 18:33:48+00:00,"I believe after the PR related to rebase the site to the default antora UI, there occurred two changes that weren't meant to change. One includes the change of custom scrollbar for the nav panel menu under the documentation section. The other includes the change in custom pagination with Hugo under the blog section. 


 


I will make changes to it so that it includes the custom scrollbar to improve the aesthetics and improve the change in pagination.","zregvart:1592394162:2020-06-17T19:42:42.065+0000:1592394162:2020-06-17T19:42:42.065+0000:Thanks for noticing/reporting this!
githubbot:1592481344:2020-06-18T19:55:44.052+0000:1592481344:2020-06-18T19:55:44.052+0000:zregvart opened a new pull request #400:
URL: https://github.com/apache/camel-website/pull/400


   This reintroduces the design we had before rebasing on the latest Antora
   Default UI (#383). Now the changes are affecting only the blog section
   and further rebases should not interfere with the pagination design.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1592481397:2020-06-18T19:56:37.385+0000:1592481397:2020-06-18T19:56:37.385+0000:[~Aemie] I've created a [pull request|https://github.com/apache/camel-website/pull/400] to restore the design of the pagination on the blog section of the site.
githubbot:1592482755:2020-06-18T20:19:15.570+0000:1592482755:2020-06-18T20:19:15.570+0000:zregvart merged pull request #400:
URL: https://github.com/apache/camel-website/pull/400


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592482768:2020-06-18T20:19:28.837+0000:1592482768:2020-06-18T20:19:28.837+0000:zregvart commented on pull request #400:
URL: https://github.com/apache/camel-website/pull/400#issuecomment-646284900


   Preview looks good, so I merged.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

Aemie:1592538533:2020-06-19T11:48:53.618+0000:1592538533:2020-06-19T11:48:53.618+0000:Yes, I have seen the PR for the same, thanks a lot! I made a PR for custom scrollbar for the nav menu panel under documentation section. 
Aemie:1592725430:2020-06-21T15:43:50.702+0000:1592725430:2020-06-21T15:43:50.702+0000:[~zregvart] I think I found another change, for the scrollbar within the search results.

I think this was an undesirable change after the rebasing, right? Or does it need to be this manner?

!search-result-design.png!

 
zregvart:1592780821:2020-06-22T07:07:01.840+0000:1592780821:2020-06-22T07:07:01.840+0000:[~aashnajena] I’ve removed all scrollbar customization, as noted on the pull request and in discussions we had due to concerns about usability. I’m not sure if we need to display as many results and if we do need to if they need to be displayed with the scroll bar.
Aemie:1592790933:2020-06-22T09:55:33.668+0000:1592790933:2020-06-22T09:55:33.668+0000:Aashna? Anyways, I don't think the removal of scrollbar customization is a good idea for the components nav panel. The normal scrollbar within chrome doesn't go with the design of the website. And about usability, I have read the rules about it, and hence, I applied proper width and contrast ratio along with it so it's usable, accessible, and even blend with the design. 

Currently, for search results, there are only 10 hits per page so only the top 10 results will always be shown. So personally, I don't think it's necessary to show scrollbar in this case rather than just provide a max-height. 
githubbot:1593253859:2020-06-27T18:30:59.551+0000:1593253859:2020-06-27T18:30:59.551+0000:zregvart merged pull request #401:
URL: https://github.com/apache/camel-website/pull/401


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1593254028:2020-06-27T18:33:48.162+0000:1593254028:2020-06-27T18:33:48.162+0000:Thanks to [~Aemie] for the followup PR."
0,CAMEL-15201,Bug,Major,2.24.2,,"
None
",Resolved,Invalid,None,Unassigned,Julien Greffe,0,3,2020-06-17 12:07:31+00:00,2020-06-24 05:17:07+00:00,"Hello,


when trying to use an OSGi feature in Karaf, using camel-script and camel-script-javascript,


we have this error with Karaf started with Java 11:




 karaf@trun()> diag
bugTest (330)
-------------
Status: Failure
Declarative Services
Blueprint
17/06/2020 11:56
Exception:
null
java.util.concurrent.TimeoutException
        at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:393)
        at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:45)
        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at java.base/java.lang.Thread.run(Thread.java:834)Missing dependencies:
(&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))



 


When using the same OSGi with Karaf started with Java 8, the bundle starts correctly.


 


Do you have an idea?","davsclaus:1592367079:2020-06-17T12:11:19.590+0000:1592367079:2020-06-17T12:11:19.590+0000:Please get help first on the user mailing list. Also its only 2.25.x that is active supported for 2.x. So give that a try first. And Camel 2.x does NOT support Java 11.
jbonofre:1592947027:2020-06-24T05:17:07.253+0000:1592947027:2020-06-24T05:17:07.253+0000:From a Karaf perspective, I just tried and it works fine with JDK 11.0.6."
0,CAMEL-15200,Bug,Minor,3.3.0,3.x,"
None
",Resolved,Not A Bug,3.x,Unassigned,Yasser Zamani,0,2,2020-06-17 06:24:39+00:00,2020-06-20 05:37:56+00:00,"Issue


NOTE: I will try to come back with a fixing PR ASAP.
  
 The processor




package com.company.processors;

import com.company.api.model.Error;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;

public class ToError implements Processor {
    @Override
    public void process(Exchange exchange) {
        Throwable responseException = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);

        Error response = new Error() {{
            setMessage(responseException.getMessage());
            setDetails(responseException.getCause().getMessage());
        }};

        exchange.getIn().setBody(response);
    }
}




with the route




.doCatch(Exception.class)
	.process(new ToError())
	.to(""log:error"")




ends up in



2020-06-17 10:39:03.299  INFO 2928 --- [ult-workqueue-2] error                                    : Exchange[ExchangePattern: InOut, BodyType: null, Body: class Error {
    message: Connection reset
    details: null
}]



where BodyType: null causes consequent problems e.g. the route




.end()
.transform().body().marshal().json(JsonLibrary.Gson).endRest();




returns a ResponseEntity with no body.


Reason


It took one day to find the villain  The reason was that Java instance initialization via setters inside `{{}}`s 


Workaround


Replacing




Error response = new Error() {{
    setMessage(responseException.getMessage());
    setDetails(responseException.getCause().getMessage());
}};




with




Error response = new Error();
response.setMessage(responseException.getMessage());
response.setDetails(responseException.getCause().getMessage());




fixes issue.","davsclaus:1592540619:2020-06-19T12:23:39.234+0000:1592540619:2020-06-19T12:23:39.234+0000:What kind of class is Error?
yasserzamani:1592549082:2020-06-19T14:44:42.996+0000:1592549082:2020-06-19T14:44:42.996+0000:[~davsclaus] sorry forgot to mention earlier. It's a simple POJO with setter getters and not more inside my own package {{com.company.api.model}}.
yasserzamani:1592549674:2020-06-19T14:54:34.267+0000:1592549674:2020-06-19T14:54:34.267+0000:Actually replacing

{code:java}
Error response = new Error() {{
    setMessage(responseException.getMessage());
    setDetails(responseException.getCause().getMessage());
}};
{code}

with

{code:java}
Error response = new Error();
response.setMessage(responseException.getMessage());
response.setDetails(responseException.getCause().getMessage());
{code}

fixes issue.
davsclaus:1592551456:2020-06-19T15:24:16.460+0000:1592551456:2020-06-19T15:24:16.460+0000:Yes what you do with is to create a new anonymous class when you do like that - its standard Java. And so therefore the class type is null
yasserzamani:1592602676:2020-06-20T05:37:56.083+0000:1592602676:2020-06-20T05:37:56.083+0000:Yes I knew the root cause. I meant Camel might be improved like [How to get the original class from anonymous class? Java|https://stackoverflow.com/a/45222537] using following code:

{code:java}
    public static Class<?> getOriginalClass(Object obj) {
        Class<?> cls = obj.getClass();
        if (cls.isAnonymousClass()) {
            return cls.getInterfaces().length == 0 ? cls.getSuperclass() : cls.getInterfaces()[0];
        } else {
            return cls;
        }
    }
{code}

and set {{bodyType}} to it to be more resilient . It works at my side tests."
0,CAMEL-15199,Bug,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2020-06-16 20:06:11+00:00,2020-11-03 07:55:13+00:00,"RestDefinition relies on Class.getCanonicalName instead of Class.getName for in/out types.


This work as long as the type is not an inner class getCanonicalName does not return a name that can be used to load a class.


As example




package my.example;

public class MyRoutes extends org.apache.camel.builder.RouteBuilder {
    @Override
    public void configure() throws Exception {
        rest()
            .post(""/order"")
                .type(MyOrder.class)
                .consumes(""application/json"")
                .produces(""application/json"")
                .bindingMode(RestBindingMode.json)
                .route()
                    .log(""${body}"");
    }

    public static class MyOrder {
        public String id;
    }
}




Then camel would set my.example.MyRoutes.MyOrder as in type but that's wrong and the subsequent attemp to load the class by name, will fail as it should be my.example.MyRoutes$MyOrder (which is what Class.getName would return).","lb:1592310713:2020-06-16T20:31:53.792+0000:1592310713:2020-06-16T20:31:53.792+0000:[~davsclaus] beside the issue why do we use a Class a parameter for type/outType, then we set it as a string and finally we dynamic load it ? I guess it has to do with XML 
davsclaus:1592351347:2020-06-17T07:49:07.447+0000:1592351347:2020-06-17T07:49:07.447+0000:Yes its for XML DSL. Where the information is stored as the string.

And in Java DSL then by using Class we can make it type safe and shorter/nicer, instead of having to type the FQN classname.
We could in the definition allow to store the type as Class as well as @XmlTransient (we do this in some other places). Then we dont need to load it if using Java DSL.
davsclaus:1592351383:2020-06-17T07:49:43.939+0000:1592351383:2020-06-17T07:49:43.939+0000:And btw its not nice to have your model as inlined classes but I guess its the Camel K, put everything into a single file ;)
lb:1592353404:2020-06-17T08:23:24.697+0000:1592353404:2020-06-17T08:23:24.697+0000:Yeah, this example is for demonstration purpose and of course from a camel-k issue :) but it is not too uncommon (at least to me) to have nested classes as part of other models"
0,CAMEL-15198,Improvement,Minor,3.4.0,3.5.0,"
None
",Closed,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-06-16 16:59:50+00:00,2020-07-24 13:56:30+00:00,"Currently Camel Azure Storage Blob has a comprehensive configurations options dynamically through Camel Headers. However, some of these headers configurations, would also make sense to have as well in the component/endpoint configurations in order to reduce the overhead. For example CamelAzureStorageBlobCreatePageBlob and CamelAzureStorageBlobCreateAppendBlob headers, it would also make sense to have them as component/endpoint configs,","omarsmak:1595478206:2020-07-23T12:23:26.192+0000:1595478206:2020-07-23T12:23:26.192+0000:Configs that can be set from endpoint URI as well headers:
* timeout
* prefix
* access tier
* commit block list later: boolean
* create append blob: boolean
* create page blob: boolean
* page blob size
* blob sequence number"
0,CAMEL-15197,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-16 08:38:43+00:00,2020-06-29 11:53:05+00:00,"When using thread pools for EIPs like splitter, aggregator etc. We can make it possible to use external thread pool from vertx and its set of worker pools. For example with quarkurs or vertx this makes Camel work more naturally there using its existing threading model.","davsclaus:1593145508:2020-06-26T12:25:08.727+0000:1593145521:2020-06-26T12:25:21.318+0000:We may want to introduce a simpler ThreadPoolFactory that can use a more basic ExecutorService SPI that only has the API we need for EIPs in Camel to use. We essentially only use submit(runnable) today.

And then we have some threads that should run in its own thread, such as when shutting down, we setup a background thread etc. So some API abstract for this.

"
0,CAMEL-15196,New Feature,Minor,3.3.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Jose Montoya,0,2,2020-06-16 02:08:30+00:00,2020-07-16 12:55:47+00:00,"OpenTracing supports adding tags to a given Span. See https://opentracing.io/docs/overview/tags-logs-baggage/#tags


Submitting a PR shortly...


 


 


PS. OpenTracing has been merged with OpenCensus into OpenTelemetry. Here's a ticket for adding support I found https://issues.apache.org/jira/browse/CAMEL-14531?jql=text%20~%20%22opentelemetry%22


However while opentracing should eventually be deprecated, there's a good amount of functionality that's not yet available in the new project (eg. the javaagent support). So there's value is continuing to support opentracing until the new project reaches parity.","jam01:1592836122:2020-06-22T22:28:42.907+0000:1592836122:2020-06-22T22:28:42.907+0000:Hey all, after going through some of the existing components and how different operations are exposed, I ventured into making a component/endpoint for Span operations. So at this point I have two different implementations:
 * Independent processors
 Here I just completed adding the missing processors to the existing PR you already looked at over [here|https://github.com/apache/camel/pull/3919]. It's just three independent processors: TagProcessor, SetBaggageProcessor, and GetBaggageProcessor. Using the processors would look something like this:
{code:java}
process(new TagProcessor(""tagKey"", simple(""tag value""));
process(new SetBaggageProcessor(""bagKey"", simple(""baggage value""));
process(new GetBaggageProcessor(""bagKey"", ""toHeaderName"");
{code}

 * ""opentracing-span:operation?options"" component
 This is what I ended up with after looking at other components/endpoints. This implementation is available [here|https://github.com/jam01/camel/commits/span-component]. Basically the three different operations would like something like:
{code:java}
to(""opentracing-span:tag?spanKey=tagKey&headerValue=fromHeaderName"")
to(""opentracing-span:setBaggage?spanKey=bagKey&headerValue=fromHeaderName"")
to(""opentracing-span:getBaggage?spanKey=bagKey&headerValue=toHeaderName"")
{code}

I feel there may be different value to either approach, allowing expressions with the first one maybe gives more flexibility. Whereas with the second it may be easier to use without having to import and instantiate new processors with the disadvantage of assuming that tags and baggage items usually go in headers (which is how I'd use them).

Long story short... I figured I'd defer to you to weigh in for one approach you consider to be the better camel-like citizen.

[~davsclaus] 
 [~acosentino]
acosentino:1594627895:2020-07-13T16:11:35.797+0000:1594627895:2020-07-13T16:11:35.797+0000:I would personally go with the second approach [~jam01]"
0,CAMEL-15195,Bug,Major,"3.3.0, 3.4.0","3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Zheng Feng,Claus Ibsen,0,1,2020-06-15 11:31:48+00:00,2020-06-18 11:17:46+00:00,"Reported on user forum
https://camel.465427.n5.nabble.com/Camel-netty-requestTimeout-doesn-t-work-properly-td5870725.html",
0,CAMEL-15194,Bug,Major,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Thomas Diesler,Thomas Diesler,0,2,2020-06-15 11:13:15+00:00,2020-06-15 15:23:59+00:00,"In Camel-3.3.0 there seems to have been a change with Salesforce such that the component's httpClient is no longer initialized before the endpoint is created. This is perhaps a fundamental lifecycle issue that leads to NPE in my Salesforce tests.


In 3.1.0 the httpClient is available when the endpoint is created here




Caused by: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected Error processing createJob: ""null""
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.process(BulkApiProcessor.java:111)
	at org.apache.camel.component.salesforce.SalesforceProducer.process(SalesforceProducer.java:129)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:60)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:286)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:66)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:212)
	at org.apache.camel.processor.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:110)
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:107)
	at org.apache.camel.impl.engine.DefaultProducerCache.send(DefaultProducerCache.java:185)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
	at org.apache.camel.impl.engine.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:390)
	... 150 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase.getRequest(AbstractClientBase.java:158)
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase.getRequest(AbstractClientBase.java:154)
	at org.apache.camel.component.salesforce.internal.client.DefaultBulkApiClient.createJob(DefaultBulkApiClient.java:87)
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.processCreateJob(BulkApiProcessor.java:122)
	at org.apache.camel.component.salesforce.internal.processor.BulkApiProcessor.process(BulkApiProcessor.java:64)
	... 166 more","davsclaus:1592191284:2020-06-15T11:21:24.821+0000:1592191284:2020-06-15T11:21:24.821+0000:Where are your salesforce tests?
tdiesler:1592205839:2020-06-15T15:23:59.953+0000:1592205839:2020-06-15T15:23:59.953+0000:Fixed in 3.4.0"
0,CAMEL-15193,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,3,2020-06-15 10:57:57+00:00,2020-06-19 04:14:19+00:00,"We had this in Camel 2.x
https://github.com/apache/camel/blob/camel-2.x/platforms/spring-boot/components-starter/camel-core-starter/src/main/java/org/apache/camel/component/file/springboot/cluster/FileLockClusterServiceAutoConfiguration.java


We should add it back into camel-file-starter (it was in core in 2.x). So its a matter of copying that over to camel-file-starter and add what else is needed.


The camel spring boot source is here
https://github.com/apache/camel-spring-boot","zbendhiba:1592376146:2020-06-17T14:42:26.009+0000:1592376146:2020-06-17T14:42:26.009+0000:Hello, can I work on this issue? 
acosentino:1592376453:2020-06-17T14:47:33.188+0000:1592376453:2020-06-17T14:47:33.188+0000:you're welcome to open a PR
zbendhiba:1592396867:2020-06-17T20:27:47.662+0000:1592396867:2020-06-17T20:27:47.662+0000:this is the link of the PR [https://github.com/apache/camel-spring-boot/pull/91]"
0,CAMEL-15192,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-06-15 10:02:07+00:00,2020-06-30 17:08:44+00:00,No Desc,"acosentino:1593492499:2020-06-30T12:48:19.878+0000:1593492499:2020-06-30T12:48:19.878+0000:This can be done, but only through the creation of the deliveryStream."
0,CAMEL-15191,Task,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-06-15 10:01:31+00:00,2020-06-30 12:41:27+00:00,No Desc,
0,CAMEL-15190,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-15 09:12:27+00:00,2020-06-15 12:58:19+00:00,"We should have a doc page for camel-main (standalone mode) and include a table with all its options you can configure.


There is the generated .json file that lists them all, so the tool will grab that and generate the table (like we do for spring boot etc).",davsclaus:1592194633:2020-06-15T12:17:13.523+0000:1592194633:2020-06-15T12:17:13.523+0000:There is now a doc in src/main/doc/main.adoc we can use for docs which is now also in the website docs
0,CAMEL-15189,Bug,Major,3.0.1,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Gianandrea Rigoni,0,2,2020-06-15 00:12:28+00:00,2020-06-16 04:58:25+00:00,"When AggregationStrategy with canPreComplete is enabled and aggregate route is configured with .completionOnNewCorrelationGroup() StackOverflowError is thrown when a certain load is created (usually around 1000 items)


I have found this using Camel 3.0.1, a unit test can be found here
https://github.com/grigoni/camel/tree/camel-3.0.x-aggrStackOverflowError


test class: org.apache.camel.processor.aggregator.AggregateCompletionOnNewCorrelationGroupWithCanPreCompleteTest","davsclaus:1592178079:2020-06-15T07:41:19.974+0000:1592178079:2020-06-15T07:41:19.974+0000:This has already been fixed, the test passes.
davsclaus:1592178575:2020-06-15T07:49:35.659+0000:1592178575:2020-06-15T07:49:35.659+0000:Thanks for reporting and the unit test, which has been added
https://github.com/apache/camel/commit/769a3018c640ae074f4e772e8ebb696c3e044834
grigoni:1592254705:2020-06-16T04:58:25.259+0000:1592254705:2020-06-16T04:58:25.259+0000:great, thanks a lot for the support!"
0,CAMEL-15188,Improvement,Major,None,"2.25.2, 3.5.0","
None
",Resolved,Fixed,"2.25.2, 3.5.0",Unassigned,Iliya Grushevskiy,0,3,2020-06-14 21:11:41+00:00,2020-06-15 08:07:36+00:00,It's very common scenario to connect to telegram over SOCKS proxy in Russia. It would be great if one could specify proxy type in query parameters.,"acosentino:1592140818:2020-06-14T21:20:18.737+0000:1592140818:2020-06-14T21:20:18.737+0000:This could be for 3.5.0 on master branch. 2.25.x is already released and we don't add new feature. Eventually it could go on camel-2.x branch for an eventual 2.26.0 release (not in roadmap for the moment)
iliya.gr:1592141240:2020-06-14T21:27:20.569+0000:1592141240:2020-06-14T21:27:20.569+0000:May I provide pull requests for both versions camel-2.x and 3.5.0 in scope of this issue? As I already have implementation for camel-2.x.
acosentino:1592141366:2020-06-14T21:29:26.170+0000:1592141366:2020-06-14T21:29:26.170+0000:You're more than welcome to open PRs! Thanks!
davsclaus:1592178408:2020-06-15T07:46:48.018+0000:1592178408:2020-06-15T07:46:48.018+0000:Thanks for reporting and the PR"
0,CAMEL-15187,Bug,Minor,3.3.0,"3.4.1, 3.5.0","
None
",Resolved,Fixed,"3.4.1, 3.5.0",Unassigned,Jose Montoya,0,2,2020-06-14 20:47:43+00:00,2020-06-17 05:18:35+00:00,"When using jsonpath as a predicate in a CBR the StreamCache is not reset and therefore the content is lost. I found a Jira comment which suggests it shouldn't be the case, but alas the cache breaks.


I'm adding a test and fix PR shortly...",davsclaus:1592175735:2020-06-15T07:02:15.641+0000:1592175735:2020-06-15T07:02:15.641+0000:TODO: Backport to 3.4.x branch
0,CAMEL-15186,New Feature,Minor,3.3.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Fernando Avalos,0,1,2020-06-13 22:01:40+00:00,2020-06-17 04:42:42+00:00,"Workday has several REST API to extract data, the current in component only extract data using a Custom report as a service. We are planning to add support use the Common REST API out of the box.",
0,CAMEL-15185,Improvement,Major,None,,"

outreachy2020
suggestions

",Resolved,Implemented,None,Unassigned,Aashna Jena,0,4,2020-06-13 15:50:04+00:00,2020-08-02 17:39:50+00:00,"I have some reservations about the website footer. On the mobile view, the footer takes up almost the entire height of my device because the Overview, Community and About columns do not fit into one row. Secondly, on the desktop view, the header navigation is fixed at the top, so I can view the header menu while I'm at the footer of the page. Having same links visible on the header menu and footer doesn't make sense to me (Download, Community, Blog etc). I do see a lot of websites having menu links on the footer, but they don't have a fixed navbar.


Suggestions : I looked up best practices for footers. I think we can reduce the number of links we display on the footer, especially the ones overlapping with header menu. We can also add some things (from what I read up on best practices) - form for subscribing to the mailing list, sitemap link, contact information, link to report a bug on the website, privacy policy/ terms of use (if we have) and maybe a subscription for the blog, since we have quite informative and regular blog posts. I also really like the idea of having a row of social media icons in the footer, which a lot of websites do. This will give us the freedom of adding many more icons than on the header menu.","aashnajena:1592045039:2020-06-13T18:43:59.627+0000:1592045039:2020-06-13T18:43:59.627+0000:Really like [Hook Agency website's footer design|https://hookagency.com/]. It's got contact info, logo, subscription form, social media icons etc. The mobile design skips the sitemap and places the logo on top with the rest of the information below it. I also really like the slanting top border for the footer (Not sure if that fits for our site) and the contrast between background colours of the page & footer (this is something we can do with our website). [Sephora's website|https://www.sephora.com/] has topic wise links in the footer but in the mobile view, it's displayed as dropdowns, which looks like a good option to me if we want to keep topic-wise links. 
zregvart:1592308922:2020-06-16T20:02:02.885+0000:1592308922:2020-06-16T20:02:02.885+0000:I think we can remove some of the links we have, e.g. the ones present on the top menu. We can also collapse the sections (example https://apple.com) as an alternative idea.

The links we need to have as an ASF project are mentioned [here|https://www.apache.org/foundation/marks/pmcs#navigation] and [here|https://www.apache.org/events/README.txt].

We have pages for the [mailing lists|https://camel.apache.org/community/mailing-list/] and for the [chat|https://camel.apache.org/community/irc-room/] (needs update).

We could create a privacy policy based on the [ASF one|https://www.apache.org/foundation/policies/privacy.html] (in a separate issue), we don't use Google Analytics so that paragraph is not needed.
Aemie:1592367825:2020-06-17T12:23:45.168+0000:1592367825:2020-06-17T12:23:45.168+0000:[~aashnajena] [~zregvart] I read through websites regarding the footer design implementation, for the alternate links what I was thinking is to include the ones under documentation 'cause well it takes more time for the user to navigate through it and if they find it in the footer itself, it is easier for them. Other than that, we can include the basic navbar with links to blogs and projects and community pages. Apart from that, I agree to keep social media icons in the footer 'cause the user won't be diverted to another social network from our website when landing itself. If we want to keep icons in the footer, we could just include the GitHub and Jira issue icons. 

Also, agree with Zoran to include a privacy policy and sitemap and we could place it right below the copyright note. I like the design of Hook Agency as its spacious and neat however I don't think the site should include the slant in the footer.
Aemie:1593680079:2020-07-02T16:54:39.383+0000:1593680142:2020-07-02T16:55:42.045+0000:By statistics, there are a high number of users that scroll down through footers and it is a good practice to include as much as detailing as possible yet keeping a minimal design. I have added a footer design(footer-design.png) based on what I read and additional features that need to be included. I have tried to keep it as minimalistic as possible. What're your thoughts? [~aashnajena] [~zregvart] [~delawen]

 

 
zregvart:1593686097:2020-07-02T18:34:57.581+0000:1593686097:2020-07-02T18:34:57.581+0000:Few comments:
* the arrow next to the logo makes me think there is a menu behind it
* I think Code of conduct should be under community, or on the bottom with the privacy policy?
* we can put github/twitter/gitter (stackoverflow?) links in the footer as well
* not sure about sitemaps link (what does it lead to?)
* should the mailing list be under ""Community""?
Aemie:1593853961:2020-07-04T17:12:41.409+0000:1593917675:2020-07-05T10:54:35.906+0000:[~zregvart]  I took your comments into account and came up with the design (footer-design-2)
 * Code of conduct is better along with privacy policy
 * Yes, I have included the social links in the footer, check footer-design-2
 * [https://www.apple.com/sitemap/] An easy manner to navigate through each link it's not present through the navbar or any of the menu items through footer only. 
 * Yes, I have put the mailing list under community

 

Also for the mobile view, I particularly liked the idea of [https://apple.com|https://apple.com/] for making use of the collapsible section. I have added snapshots for it as well.
zregvart:1593929997:2020-07-05T14:19:57.938+0000:1593929997:2020-07-05T14:19:57.938+0000:Looks good, I'd put the work for sitemap on a separate issue, let's not have the scope of this too big.
Aemie:1593937862:2020-07-05T16:31:02.539+0000:1594093171:2020-07-07T11:39:31.876+0000:[~zregvart] Yes, of course, it was a suggestion as I found it pretty good feature on the apple website.

 

If you have any further suggestions on the footer, do let me know. I have begun implementing the desktop mode for the footer as of now. [~aashnajena] [~delawen] [~zregvart]
aashnajena:1594093669:2020-07-07T11:47:49.678+0000:1594093669:2020-07-07T11:47:49.678+0000:One thing I've noticed is that footers are mostly inverse colored compared to the rest of the website, I was wondering if we could try that. The Apache website also does this. Secondly, I had suggested the addition of a couple of things - form for subscribing to mailing list, which I feel would be very helpful, and links for reporting a bug on the website, contact info etc. Can we include these things? I can make some designs which I had in mind initially, but couldn't implement because I was busy with schoolwork the last couple of weeks.
Aemie:1594095633:2020-07-07T12:20:33.674+0000:1594189840:2020-07-08T14:30:40.046+0000:[~aashnajena] about the bug report is through Jira, which can go along with the icons I believe with the footer design I provided, and yes that will be helpful. We could make the list of icons that are required in the footer. I am not sure about subscribing to the mailing list but can be included in the design if required. Apart from that, I began implementation on it, so I hope we are not clashing. 

I explored with the inversion look, didn't really suit the design for the website. We could keep a more subtle and light shade bg such as #f5f5f5 for the footer. It seems to be consistent and smooth along with the website design.

Also about subscription to the mailing lists are we taking in the assumption that we will allow the user to collectively subscribe to the whole mailing lists as mailing list consists of 4 sub-lists. Or are we approaching in the manner where we ask to subscribe and provide a paragraph below stating the link to the mailing lists page?
Aemie:1594189771:2020-07-08T14:29:31.621+0000:1594190880:2020-07-08T14:48:00.078+0000:[~zregvart] [~delawen] [~aashnajena] I believe this footer design presented is quite minimal, we can also include the additional info Aashna suggested such as Jira icon for the bug report, and contact info ( not sure about subscription tho ). 

I wanted to list out the things on implementation of footer - 
 # Implement the footer desktop design for width >= 875px 
 # Implement the footer mobile design for width < 875px 
 # As the social icons are used in the footer, we don't need it in the navbar anymore. I can do the required changes for it after the two designs are created,
 # Going to create a separate issue to create a page for Privacy Policy Zoran suggested. 

So let me know if you do like the design I have attached to the issue so I can be sure to continue on implementation and if any additional things other than the listed are required as of now.

Thanks.
zregvart:1594200746:2020-07-08T17:32:26.578+0000:1594200746:2020-07-08T17:32:26.578+0000:I think adding a link to the issue tracker makes sense. It is a bit fuzzy, as some sub-projects opted on enabling GitHub issues, so it's primarily used instead of JIRA. I'd try to use the same breakpoints we already have (max-width: 1023px, max-width: 626px, max-width: 480px), if at all possible I would not introduce a new breakpoint. I'm not sure about removing the icons from the navbar, it might end up with mostly empty navbar so we'd have to rethink it. Implementation-wise I'd try to implement this with CSS only and without much animation to keep it as simple as possible.
Aemie:1594203239:2020-07-08T18:13:59.268+0000:1594203239:2020-07-08T18:13:59.268+0000:[~zregvart] I still think we could allow a Jira icon as well tho. About removing the navbar icon, I will think about it as removing icons does make it completely plain. I think the changes could be achieved most of it through HTML and CSS itself. Also, about the breaking point, I can bring down the breakpoint to 750px where both designs look good 'cause if I do get down the breakpoint to 626px then for some screen the footer-design would look a bit clustered, I don't personally prefer it being clustered. 
aashnajena:1594434370:2020-07-11T10:26:10.092+0000:1594434370:2020-07-11T10:26:10.092+0000:What is the Sitemap link for? Are we planning on making a site map page similar to Apple? If yes, I'd like to work on it! [~zregvart] [~Aemie] Can you please confirm if that's the idea? I'll make a separate issue on it then
Aemie:1594439423:2020-07-11T11:50:23.803+0000:1594443816:2020-07-11T13:03:36.937+0000:[~aashnajena], I really liked their idea of sitemap on the apple site and as ours is heavily documented, sitemap would make it really easy. I dealt with the privacy policy and created a PR for that so it will be great if you can work on a sitemap. However, the one thing we discussed on the call was to generate the whole sitemap. So it will be nice if you can create the issue and then we can have the discussion for it there.

I thought about it, so just sharing the idea here. What we could do is we want the sitemap as one of the Hugo pages. So within the content folder, we could create an automated version of each part like Blog, User Manual, Components, EIP, and so on and then just use the Hugo attributes to list within the HTML file in the layouts folder. The only thing is to create the automated version 'cause it keeps updating and we could fetch it through ./documentation folder in the repo and make use of the title tag of each HTML file (we could use gulp for this).

 

[~zregvart] about the breakpoint if I reduce it to 626px so as to include any further new breakpoints, the preview for it is at footer-arrangement-626.png. Are you fine with that? !footer-arrangement-626.png!

 
githubbot:1594723088:2020-07-14T18:38:08.306+0000:1594723088:2020-07-14T18:38:08.306+0000:AemieJ opened a new pull request #428:
URL: https://github.com/apache/camel-website/pull/428


   This PR deals with the new design for the footer of the website layout. It covers the following : 
   
   * Use a light soothing background with `#f5f5f5` shade. 
   * Include the required and sufficient navigation links to ease the navigation for the users to different pages. 
   * Create a systematic layout for presentation
   * Privacy policy link to be included after the PR is merged related to it. 
   * Basic Social Icons added to the bottom of the footer. 
   
   An additional feature for mobile footer menu : 
   * An option to toggle so the footer is easy to scroll through and takes in less amount of vertical space.
   
   > This footer is created in account with the best practices for a footer.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594779873:2020-07-15T10:24:33.862+0000:1594779873:2020-07-15T10:24:33.862+0000:zregvart commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r454947695



##########
File path: antora-ui-camel/src/css/footer.css
##########
@@ -90,3 +125,92 @@ footer .footer dl dd {
   border-radius: 0.4rem 0.4rem 0 0;
   height: 2rem;
 }
+
+footer .footer .break-row-footer {
+  display: block;
+  flex-basis: 100%;
+  height: 0;
+}
+
+footer .footer .footer-icons {
+  display: flex;
+  align-items: flex-end;
+  justify-content: flex-end;
+  line-height: 1.6;
+  padding: 0.5rem;
+  font-weight: bold;
+}
+
+footer .footer .footer-icons .brand-icon {
+  height: 2em;
+  width: 1.75em;
+  margin: 0.35rem;
+  fill: var(--navbar-font-color);
+}
+
+footer .footer .show-menu,
+footer .footer .hide-menu {
+  display: none;
+}
+
+@media screen and (max-width: 626px) {

Review comment:
       I'd put this breakpoint at 1023px, we do that for the majority of responsive design and if we wish to prevent wrapping About to the second row, it wraps on 667px as well:
   ![Screenshot_2020-07-15 Apache Camel user manual Apache Camel](https://user-images.githubusercontent.com/1306050/87533914-a2ae9a80-c695-11ea-974f-bf3bbd689e81.png)
   

##########
File path: antora-ui-camel/src/js/06-mobile-footer.js
##########
@@ -0,0 +1,15 @@
+document.addEventListener('DOMContentLoaded', function () {

Review comment:
       Perhaps we can do a version without JavaScript? Using `<label>` for `<input type=checkbox>` and based on [`:checked` selector](https://css-tricks.com/almanac/selectors/c/checked/).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594806611:2020-07-15T17:50:11.180+0000:1594806611:2020-07-15T17:50:11.180+0000:AemieJ commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r455232658



##########
File path: antora-ui-camel/src/js/06-mobile-footer.js
##########
@@ -0,0 +1,15 @@
+document.addEventListener('DOMContentLoaded', function () {

Review comment:
       * Well that's a creative checkbox hack and I am aware of it but I prevented using it 'cause it is a CSS hack. 
   * Another point I would like to raise is even if I were to use a CSS hack with a checkbox for toggling for the footer scenario then we shouldn't use javascript for the navbar burger and dropdown arrow toggling as well, I believe.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594806705:2020-07-15T17:51:45.275+0000:1594806705:2020-07-15T17:51:45.275+0000:AemieJ commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r455232658



##########
File path: antora-ui-camel/src/js/06-mobile-footer.js
##########
@@ -0,0 +1,15 @@
+document.addEventListener('DOMContentLoaded', function () {

Review comment:
       * Well that's a creative checkbox hack and I am aware of it but I prevented using it 'cause it is a CSS hack. 
   * Another point I would like to raise is even if I were to use a CSS hack with a checkbox for toggling for the footer scenario then we shouldn't use javascript for the navbar burger and dropdown arrow toggling as well, I believe.
   * I prefer javascript for toggling personally, it's not a hack and is certain to work in any case.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594892852:2020-07-16T17:47:32.197+0000:1594892852:2020-07-16T17:47:32.197+0000:zregvart commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r455963444



##########
File path: antora-ui-camel/src/js/06-mobile-footer.js
##########
@@ -0,0 +1,15 @@
+document.addEventListener('DOMContentLoaded', function () {

Review comment:
       I think it's debatable if the using `:checked` selector and checkboxes should or should not be used. I think it's fairly common practice that got labeled a hack in the beginning and can't shake this image. For me it's about the simplicity of the solution rather than the technique, and I think in this case we do not need to use JavaScript.
   
   Perhaps more appropriate no-JavaScript solution could be using the [`:target` CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/:target) selector.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595029694:2020-07-18T07:48:14.008+0000:1595029694:2020-07-18T07:48:14.008+0000:AemieJ commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r456762637



##########
File path: antora-ui-camel/src/js/06-mobile-footer.js
##########
@@ -0,0 +1,15 @@
+document.addEventListener('DOMContentLoaded', function () {

Review comment:
       While the `:target` selector works with toggling, it causes unnecessary scrolling in pages. I will try with the use of a `:checked` selector as well but if it works toggling with the checked selector in this scenario, I think in that way we could minimize the use of javascript for navbar burger toggling and the dropdown menu toggling for the mobile version.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595045703:2020-07-18T12:15:03.869+0000:1595045703:2020-07-18T12:15:03.869+0000:AemieJ commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660474374


   @zregvart  I have made use of checkbox for the toggling effect instead of using javascript for the same now! Also as the toggling works with CSS itself, can we adapt this for the dropdown menu item toggling within the navbar as well and the navbar burger as this will minimize the use of javascript as a whole? 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595134855:2020-07-19T13:00:55.496+0000:1595134855:2020-07-19T13:00:55.496+0000:aashnajena commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660640371


   I think we can reduce the vertical space between headings on smaller screens. This way all the headings can fit into the display at once.
   
   ![image](https://user-images.githubusercontent.com/32356795/87875286-e551d900-c9ed-11ea-8a4b-1d85347879ac.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595138042:2020-07-19T13:54:02.668+0000:1595138042:2020-07-19T13:54:02.668+0000:AemieJ edited a comment on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660474374


   @zregvart  I have made use of checkbox for the toggling effect instead of using javascript for the same now. Also as the toggling works with CSS itself, can we adapt this for the dropdown menu item toggling within the navbar as well and the navbar burger as this will minimize the use of javascript as a whole? 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595151271:2020-07-19T17:34:31.868+0000:1595151271:2020-07-19T17:34:31.868+0000:AemieJ commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660680724


   @aashnajena  I am not completely sure 'cause reducing vertical space here creates a clustering effect for me than the current changes. I would like opinions on it from @zregvart as well before I think about bringing in this change.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595151326:2020-07-19T17:35:26.247+0000:1595151326:2020-07-19T17:35:26.247+0000:AemieJ edited a comment on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660680724


   @aashnajena  I am not completely sure 'cause reducing vertical space here creates a clustering effect for me than the current changes. I would like opinions on it from @zregvart and @Delawen as well before I think about bringing in this change.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595257683:2020-07-20T23:08:03.290+0000:1595257683:2020-07-20T23:08:03.290+0000:zregvart commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-661419548


   @AemieJ I think @aashnajena is talking about the vertical padding between two items on the version of the footer for smaller screens. I think that padding can be a bit smaller, the one on @aashnajena version looks okay to me. @aashnajena perhaps you can add a [suggestion](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/reviewing-proposed-changes-in-a-pull-request#starting-a-review) with the change you made on your end.
   
   ![Screenshot_2020-07-21 Home - Apache Camel](https://user-images.githubusercontent.com/1306050/87994826-32b56f80-caee-11ea-93af-8ac4df89242f.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595268412:2020-07-21T02:06:52.393+0000:1595268412:2020-07-21T02:06:52.393+0000:AemieJ removed a comment on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-660474374


   @zregvart  I have made use of checkbox for the toggling effect instead of using javascript for the same now. Also as the toggling works with CSS itself, can we adapt this for the dropdown menu item toggling within the navbar as well and the navbar burger as this will minimize the use of javascript as a whole? 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595276627:2020-07-21T04:23:47.462+0000:1595276627:2020-07-21T04:23:47.462+0000:AemieJ commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-661624880


   @zregvart this is achievable I was just unsure whether we require it or not. I will make the required changes based on @aashnajena version soon and update the PR.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595544863:2020-07-24T06:54:23.428+0000:1595544863:2020-07-24T06:54:23.428+0000:AemieJ commented on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-663374570


   @zregvart does this PR require any further changes or it's fine now?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595544986:2020-07-24T06:56:26.388+0000:1595544986:2020-07-24T06:56:26.388+0000:AemieJ edited a comment on pull request #428:
URL: https://github.com/apache/camel-website/pull/428#issuecomment-663374570


   @zregvart does this PR require any further changes or it's fine with the current changes?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595682257:2020-07-25T21:04:17.825+0000:1595682257:2020-07-25T21:04:17.825+0000:zregvart merged pull request #428:
URL: https://github.com/apache/camel-website/pull/428


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595801816:2020-07-27T06:16:56.367+0000:1595801816:2020-07-27T06:16:56.367+0000:oscerd opened a new pull request #440:
URL: https://github.com/apache/camel-website/pull/440


   Reverts apache/camel-website#428


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595801820:2020-07-27T06:17:00.873+0000:1595801820:2020-07-27T06:17:00.873+0000:oscerd merged pull request #440:
URL: https://github.com/apache/camel-website/pull/440


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595801856:2020-07-27T06:17:36.731+0000:1595801856:2020-07-27T06:17:36.731+0000:oscerd commented on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664142728


   Reverting it, because the website build seems to be broken.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595812447:2020-07-27T09:14:07.255+0000:1595812447:2020-07-27T09:14:07.255+0000:AemieJ commented on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664227864


   @oscerd when I do `yarn checks` for the footer-design I receive `page not found from components/3.4.x/eips/request-reply.html to community/support` however request-reply.html isn't present anymore within the website and the PR #428 preview works perfectly.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595813772:2020-07-27T09:36:12.959+0000:1595813772:2020-07-27T09:36:12.959+0000:oscerd commented on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664240883


   preview build doesn't do what the CI build does there is no checks for link there. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595814916:2020-07-27T09:55:16.772+0000:1595814916:2020-07-27T09:55:16.772+0000:zregvart commented on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664250308


   Yes, we don’t run checks on Netlify because running them would use up the free build minutes we have there.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595814997:2020-07-27T09:56:37.869+0000:1595814997:2020-07-27T09:56:37.869+0000:zregvart commented on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664251068


   @aemiej remove everything from the public directory and rebuild, we don’t have a way to remove just the deleted pages.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595978296:2020-07-29T07:18:16.844+0000:1595978296:2020-07-29T07:18:16.844+0000:AemieJ removed a comment on pull request #440:
URL: https://github.com/apache/camel-website/pull/440#issuecomment-664531838


   @zregvart I did that still `yarn checks` failed for `integration.html` under **camel-k** and I observed that it is present in the other PR that has been merged and built as well.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595978725:2020-07-29T07:25:25.032+0000:1595978725:2020-07-29T07:25:25.032+0000:zregvart commented on a change in pull request #428:
URL: https://github.com/apache/camel-website/pull/428#discussion_r461120721



##########
File path: antora-ui-camel/src/partials/footer-content.hbs
##########
@@ -3,41 +3,86 @@
     </div>
     <footer>
         <div class=""footer"">
-            <figure class=""logo"">
-                <img src=""{{siteRootPath}}/_/img/logo-d.svg"" class=""logo-small mt-60"" alt=""Apache Camel Logo"" aria-label=""white silhouette of a camel in front of a sand dune"">
-            </figure>
             <dl>
+                <figure class=""logo"">
+                    <img src=""{{siteRootPath}}/_/img/logo-d.svg"" class=""logo-small mt-60"" alt=""Apache Camel Logo""
+                        aria-label=""white silhouette of a camel in front of a sand dune"">
+                </figure>
                 <dt>Overview</dt>
-                <dd><a href=""{{siteRootPath}}/blog/"">Blog</a></dd>
-                <dd><a href=""{{siteRootPath}}/components/latest/"">Components</a></dd>
-                <dd><a href=""{{siteRootPath}}/download/"">Download</a></dd>
-                <dd><a href=""{{siteRootPath}}/manual/latest/getting-started.html"">Getting started</a></dd>
-                <dd><a href=""{{siteRootPath}}/manual/latest/faq/index.html"">FAQ</a></dd>
+                <input type=""checkbox"" id=""show-overview""/>
+                <label for=""show-overview""><img class=""show-menu"" src=""{{siteRootPath}}/_/img/show-footer-menu.svg""></label>
+                <label for=""show-overview""><img class=""hide-menu"" src=""{{siteRootPath}}/_/img/hide-footer-menu.svg""></label>
+                <div class=""footer-menu"">
+                    <dd><a href=""{{siteRootPath}}/blog/"">Blog</a></dd>
+                    <dd><a href=""{{siteRootPath}}/docs/"">Documentation</a></dd>
+                    <dd><a href=""{{siteRootPath}}/community/support"">COmmunity</a></dd>

Review comment:
       @AemieJ this needs to be:
   ```suggestion
                       <dd><a href=""{{siteRootPath}}/community/support/"">Community</a></dd>
   ```
   
   Note the `/` at the end of `support/`, without it the URL would point to a file, with it it points to `index.html` in the `support` directory.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595980915:2020-07-29T08:01:55.371+0000:1595980915:2020-07-29T08:01:55.371+0000:AemieJ opened a new pull request #441:
URL: https://github.com/apache/camel-website/pull/441


   In PR #428, the PR wasn't being built due to an issue within the `footer-content.hbs`. Thus, creating a new PR fixing it as the previous one has been merged and I can't push any further commits to it.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596015539:2020-07-29T17:38:59.471+0000:1596015539:2020-07-29T17:38:59.471+0000:zregvart merged pull request #441:
URL: https://github.com/apache/camel-website/pull/441


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596016354:2020-07-29T17:52:34.730+0000:1596016354:2020-07-29T17:52:34.730+0000:zregvart commented on pull request #441:
URL: https://github.com/apache/camel-website/pull/441#issuecomment-665524905


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1596113529:2020-07-30T20:52:09.602+0000:1596113529:2020-07-30T20:52:09.602+0000:zregvart commented on pull request #441:
URL: https://github.com/apache/camel-website/pull/441#issuecomment-666688422


   This is causing [HTML validation issues](https://issues.apache.org/jira/browse/CAMEL-15360), I'll try to fix those now.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1596278046:2020-08-01T18:34:06.311+0000:1596278046:2020-08-01T18:34:06.311+0000:Thanks [~Aemie]!
Aemie:1596361190:2020-08-02T17:39:50.789+0000:1596361190:2020-08-02T17:39:50.789+0000:Thanks [~zregvart] for removing all the HTML validation issues, it was a great help!"
0,CAMEL-15184,Improvement,Major,3.4.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,2,2020-06-13 07:19:27+00:00,2020-08-06 08:57:36+00:00,"See CAMEL-15813 and the Pr
https://github.com/apache/camel/pull/3911","dixonwh:1592245171:2020-06-16T02:19:31.254+0000:1592245227:2020-06-16T02:20:27.048+0000:The [findImplementation|https://github.com/apache/camel/blob/master/core/camel-base/src/main/java/org/apache/camel/impl/engine/DefaultPackageScanClassResolver.java#L117] method uses a predicate/filter, [AssignableToPackageScanFilter|https://github.com/apache/camel/blob/master/core/camel-base/src/main/java/org/apache/camel/impl/scan/AssignableToPackageScanFilter.java#L46],  to find matching classes. It seems that it would be ideal to add an additional filter, isConcreteClass, and update findImplementation to utilize both filters, AssignableToPackageScanFilter and isConcreteClass, using [getCompositeFilter|https://github.com/apache/camel/blob/master/core/camel-base/src/main/java/org/apache/camel/impl/engine/DefaultPackageScanClassResolver.java#L271].

From what I can tell, this approach leaves the AssignableToPackageScanFilter intact so that it may be utilized within Spring/Spring Boot without issue.
davsclaus:1592263657:2020-06-16T07:27:37.309+0000:1592263657:2020-06-16T07:27:37.309+0000:Okay sounds good"
0,CAMEL-15183,Improvement,Major,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Dixon Whitmire,0,1,2020-06-13 02:28:19+00:00,2020-06-13 12:57:01+00:00,"My team is developing a ""stand-alone"" Camel Main application which utilizes route builder discovery using the package scanning feature. The current implementation instantiates any class within the package which extend RouteBuilder. If an abstract class which extends RouteBuilder is in the package, the Camel Context fails to load since the abstract class cannot be instantiated.


Our application currently utilizes an abstract class within a ""scanned"" package, so we wanted to see if the scanning algorithm could be updated to exclude abstract classes.


This PR updates the package scanning algorithm and the corresponding test case.",
0,CAMEL-15182,Improvement,Major,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,David Jencks,David Jencks,0,2,2020-06-12 19:53:07+00:00,2020-06-15 12:06:19+00:00,"We can generate the lists of components on component summary pages and standardize the layout a bit.


 


e.g aws-summary.


 


This needs some .adoc updates and a version bump in the website package.json.","githubbot:1591963040:2020-06-12T19:57:20.723+0000:1591963040:2020-06-12T19:57:20.723+0000:djencks opened a new pull request #395:
URL: https://github.com/apache/camel-website/pull/395


   This is the camel-website change for the issue.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

djencks:1591963305:2020-06-12T20:01:45.378+0000:1591963305:2020-06-12T20:01:45.378+0000:camel-website pr: [https://github.com/apache/camel-website/pull/395 (apply first!)|https://github.com/apache/camel-website/pull/395]

camel master pr: https://github.com/apache/camel/pull/3910
githubbot:1591985248:2020-06-13T02:07:28.746+0000:1591985248:2020-06-13T02:07:28.746+0000:djencks commented on pull request #395:
URL: https://github.com/apache/camel-website/pull/395#issuecomment-643553385


   I don't see any information about what the problem at netlify is, and it looks like almost all our builds there fail with identical minimal information.
   Is this PR safe to apply?  It works fine locally.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592114452:2020-06-14T14:00:52.135+0000:1592114452:2020-06-14T14:00:52.135+0000:djencks merged pull request #395:
URL: https://github.com/apache/camel-website/pull/395


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

djencks:1592114729:2020-06-14T14:05:29.932+0000:1592114729:2020-06-14T14:05:29.932+0000:PRs applied
githubbot:1592193977:2020-06-15T12:06:17.931+0000:1592193977:2020-06-15T12:06:17.931+0000:zregvart commented on pull request #395:
URL: https://github.com/apache/camel-website/pull/395#issuecomment-644088631


   @djencks see the [discussion](https://lists.apache.org/thread.html/rce07ea051ffe43b0cbd0aedea68c7e6f836e286a88507286efb22687%40%3Cdev.camel.apache.org%3E) on the mailing list for the Netlify issue.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15181,Bug,Major,3.3.0,None,"
None
",Closed,Fixed,3.4.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-06-12 17:15:31+00:00,2020-06-12 17:25:46+00:00,"Currently we have these headers:




CamelAzureStorageBlobAppendBlobCreated 
CamelAzureStorageBlobPageBlockCreated  




being set to `false` by default. However this is bit confusing to the user, hence these new headers would make sense instead of the above ones being set to false




CamelAzureStorageBlobCreateAppendBlob
CamelAzureStorageBlobCreatePageBlob",
0,CAMEL-15180,Bug,Minor,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Jose Montoya,0,2,2020-06-12 02:49:07+00:00,2020-06-12 05:00:42+00:00,"Hey all, wanted to give the plugin a spin as we look to migrate some services from mule to camel and couldn't get the plugin to work for a simple project. Checked out plugin code and the tests are failing. I'll try to dig in and see what I can figure out but though I'd create an ticket for this.


Here's the report from maven:
[INFO] — maven-invoker-plugin:3.2.1:verify (integration-test) @ camel-restdsl-openapi-plugin —
 -[INFO] --------------------------------------------------
[INFO] Build Summary:
[INFO] Passed: 5, Failed: 6, Errors: 0, Skipped: 0
 -[INFO] --------------------------------------------------
[ERROR] The following builds failed:
[ERROR] * customized-v3/pom.xml
[ERROR] * simple-dto-v3/pom.xml
[ERROR] * simple-xml-dto-v3/pom.xml
[ERROR] * customized/pom.xml
[ERROR] * simple-dto/pom.xml
[ERROR] * simple-xml-dto/pom.xml





Edit:


The failing integration tests were an error on my part when running the tests locally. However I found the cause for the original issue I was having where the plugin was not generating routes. I used the OpenAPI available here https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v3.0/petstore-expanded.yaml The generator failed to parse it correctly because one of its parameters is of type `form` but does not explicitly set `explode` to anything so it results in a NPE. The spec states that `form` defaults to `true`","davsclaus:1591908264:2020-06-12T04:44:24.053+0000:1591908264:2020-06-12T04:44:24.053+0000:Are you able to work on a fix as a PR?
jam01:1591908596:2020-06-12T04:49:56.346+0000:1591908622:2020-06-12T04:50:22.510+0000:Already done :)

https://github.com/apache/camel/pull/3906
davsclaus:1591909242:2020-06-12T05:00:42.517+0000:1591909242:2020-06-12T05:00:42.517+0000:Awesome thanks for reporting and the PR"
0,CAMEL-15179,Improvement,Minor,None,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Claus Ibsen,0,3,2020-06-11 13:01:55+00:00,2022-09-02 15:47:17+00:00,"If you see the traits navigation on the left side
https://camel.apache.org/camel-k/latest/traits/gc.html


Then the items are displayed as first letter upper cased and rest lower.
 This makes some of the items ""ugly""


Gc -> GC
 Jvm -> JVM
 3scale -> 3Scale


In the camel 3 repo we have tooling that allows us to specify a title and override the generate named, so we can say title = ""JVM"".


I wonder if we could get something for the camel-k tooling that generates this navigation.","Aemie:1591938977:2020-06-12T13:16:17.870+0000:1591938977:2020-06-12T13:16:17.870+0000:[~davsclaus] you want the autogeneration of traits navigation similar to that of component nav autogeneration in camel, right? 
davsclaus:1592004041:2020-06-13T07:20:41.199+0000:1592004041:2020-06-13T07:20:41.199+0000:Yeah (if its auto generated, which I assume)
Aemie:1592638679:2020-06-20T15:37:59.983+0000:1592638679:2020-06-20T15:37:59.983+0000:[~davsclaus] in the nav.adoc the traits are autogenerated, where is the code written to generate the traits index within *nav.adoc* [[https://github.com/apache/camel-k/blob/master/docs/modules/ROOT/nav.adoc]] . Also, I thought if I were to create an adoc file with all the traits, it's best to create a separate adoc within *ROOT* as *nav-traits.adoc* and then include that within the a*ntora.yml*
zregvart:1593255466:2020-06-27T18:57:46.726+0000:1593255466:2020-06-27T18:57:46.726+0000:I think the issue is caused by calling {{strings.Title}} on this line [https://github.com/apache/camel-k/blob/cdbb25cca61e9df62e8442c310afe4f4f029561c/cmd/util/doc-gen/generators/traitdocgen.go#L156]. Perhaps [~nferraro] can help us understand the need for that. [~nferraro] can {{strings.Title}} be removed?"
0,CAMEL-15178,Improvement,Major,3.4.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-11 11:45:30+00:00,2020-06-11 18:41:38+00:00,"Lets make this like the others with its own properites class, and have it exposed in tooling metdata. Then we can also make this configurable for spring boot, and the same across all runtimes.",
0,CAMEL-15177,Task,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Andrea Cosentino,0,2,2020-06-11 10:47:41+00:00,2020-11-30 09:28:26+00:00,No Desc,"sshikov:1606696381:2020-11-30T08:33:01.159+0000:1606696509:2020-11-30T08:35:09.715+0000:Can't understand the idea behind this task. Reason is camel-hdfs does not work on Camel Kafka Connector? And so what? If it doesn't work in some cases, why remove it? This is just karaf feature xml file, if for somebody it doesn't work for some reason - why somebody installed it?
acosentino:1606698414:2020-11-30T09:06:54.265+0000:1606698414:2020-11-30T09:06:54.265+0000:The reason is that camel-hdfs won't even install in camel-karaf. The other issue is just related. After upgrading to a newer version the Karaf feature wasn't working anymore, it wasn't installing at all. So there was no reason to maintain the feature in the camel-karaf repository. This is the reason. I don't get your point. If something doesn't even install, why do we have to maintain it in the feature list?
sshikov:1606698960:2020-11-30T09:16:00.860+0000:1606698960:2020-11-30T09:16:00.860+0000:Ok, get it. So, its unrelated to CAMEL-15169, and this is generic issue with Hadoop and Karaf? And this is not possible to install Hadoop feature into Karaf for some reasons, right?
acosentino:1606699102:2020-11-30T09:18:22.433+0000:1606699102:2020-11-30T09:18:22.433+0000:Yes
sshikov:1606699373:2020-11-30T09:22:53.547+0000:1606699373:2020-11-30T09:22:53.547+0000:>After upgrading to a newer version the Karaf

Is it possible to use it in older versions? 
acosentino:1606699706:2020-11-30T09:28:26.302+0000:1606699706:2020-11-30T09:28:26.302+0000:You can't use the camel hdfs of 3.4.0 with older versions. But you can use an older version of camel and use the old camel-hdfs"
0,CAMEL-15176,Improvement,Major,None,None,"
None
",Resolved,Fixed,4.0.0,Unassigned,Claus Ibsen,0,2,2020-06-11 08:56:37+00:00,2023-07-17 11:48:40+00:00,No Desc,"davsclaus:1597826081:2020-08-19T16:34:41.332+0000:1597826081:2020-08-19T16:34:41.332+0000:There is a file that tracks the status at
https://github.com/apache/camel/blob/master/components/components-init-work-in-progress.md
omarsmak:1604642270:2020-11-06T13:57:50.233+0000:1604642270:2020-11-06T13:57:50.233+0000:Hey [~davsclaus], 

I have a question in regards to this, as far as I understood any client creation operations should be moved to {{doInit}} instead of {{doStart}} only for static stuff as long that it does not create threads, runtime depending operating ... etc, isn't? What if for example the client would create its own threads to interact with the service, for example [EventHub client|https://github.com/apache/camel/blob/4ea9e6c357371682b855d2d79655b41120331b7a/components/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsConsumer.java#L47], I'd assume in this case we just leave it under {{doStart}}? Or at least create the client in the {{doInit}} and start it under {{doStart}} ?
davsclaus:1604646694:2020-11-06T15:11:34.348+0000:1604646694:2020-11-06T15:11:34.348+0000:Yes exactly. 

init is most useable for dependecy injection, loading resources from classpath, creating basic objects etc.

And yes if a client as you talk about have a start method that creates threads, then that should be in doStart.
But creating the client via new XXX may sometimes be possible in init, unless it starts threads etc in its constrcutor. So a good thing is to look inside the source of the client what it does to be sure.

omarsmak:1604647552:2020-11-06T15:25:52.120+0000:1604647552:2020-11-06T15:25:52.120+0000:Thanks for the tip, will keep it in mind (y)"
0,CAMEL-15175,Wish,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Thomas Cunningham,0,2,2020-06-10 15:29:42+00:00,2020-06-15 16:18:30+00:00,It would be great to support larger camel version numbers.,"acosentino:1591776823:2020-06-10T16:13:43.444+0000:1591776823:2020-06-10T16:13:43.444+0000:Can you explain a bit more about this?
tcunning:1592209110:2020-06-15T16:18:30.977+0000:1592209110:2020-06-15T16:18:30.977+0000:I was running into an issue building camel locally with specialized version numbers with the handling of the third version part in CamelVersionHelper.java.    The int handling wasn't large enough to handle the versions I was trying to use.     Submitted #3905 to change the int handling to long.

 

[https://github.com/apache/camel/pull/3905]

 

I think this can be closed out."
0,CAMEL-15174,Bug,Major,2.25.1,2.25.2,"
None
",Resolved,Fixed,2.25.2,Freeman Yue Fang,Freeman Yue Fang,0,1,2020-06-10 14:51:13+00:00,2020-06-10 15:21:42+00:00,so configuration in spring file could be picked up by camel-cxfrs endpoint,
0,CAMEL-15173,Task,Minor,"3.2.0, 3.3.0",3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Dietrich Schulten,0,3,2020-06-10 08:45:33+00:00,2020-06-23 08:08:35+00:00,"Example where the example code section is missing


Spring-Security



  


Correct text can be seen on Talend website


I have stumbled upon other examples where I resorted to the Talend site, but I can't find them just now. They are not easy to spot.","davsclaus:1591750093:2020-06-10T08:48:13.149+0000:1591750093:2020-06-10T08:48:13.149+0000:Thanks for spotting those. You are welcome to provide a PR with the example, eg just find the example code in the source where it was and copy it in the adoc file
zregvart:1591788667:2020-06-10T19:31:07.198+0000:1591788667:2020-06-10T19:31:07.198+0000:We have a warning printed at the build of the website for one of the missing examples:
{code}
asciidoctor: WARNING: content-enricher.adoc: line 48: tag 'example' not found in include file: modules/eips/examples/core/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java
asciidoctor: WARNING: content-enricher.adoc: line 56: tag 'example' not found in include file: modules/eips/examples/core/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java
{code}

I would assume that other cases of this issue were caused by omiting the examples when we migrated the documentation to git from wiki, could be that the tooling we used did not successfuly detect the examples. For example in this case: https://github.com/apache/camel/blob/909f6c0bb52dcc2076c13b3741ecba9003493e38/components/camel-spring-security/src/main/docs/spring-security.adoc#L75-L81"
0,CAMEL-15172,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-06-10 08:07:54+00:00,2020-06-10 10:05:38+00:00,We should make this possible for non JMX too (and as default).,
0,CAMEL-15171,Wish,Major,3.3.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Jh. To.,0,2,2020-06-09 20:40:41+00:00,2020-06-10 05:11:38+00:00,"While migrating an application from camel 2.24.3 to 3.3.0 it was noticed that fetching a web application was failing with:




2020-06-09 19:13:21,142 DEBUG http-nio-127.0.0.1-9080-exec-4 [] [] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost] - Processing ErrorPage[errorCode=0, location=/error]
2020-06-09 19:13:21,142 ERROR http-nio-127.0.0.1-9080-exec-4 [] [] org.apache.catalina.core.ContainerBase.[Tomcat].[localhost] - Exception Processing ErrorPage[errorCode=0, location=/error]
java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.getHttpServletMapping()Ljavax/servlet/http/HttpServletMapping; 



With camel 2.24.3 the camel-http dependency tree in the application contains:




[INFO] +- org.apache.camel:camel-http:jar:2.24.3:compile
[INFO] |  +- org.apache.camel:camel-http-common:jar:2.24.3:compile
[INFO] |  +- javax.servlet:javax.servlet-api:jar:4.0.1:compile
[INFO] |  \- commons-httpclient:commons-httpclient:jar:3.1:compile




With camel 3.3.0 the camel-http dependency tree in the application contains:




[INFO] |  +- org.apache.camel:camel-http:jar:3.3.0:compile
[INFO] |  |  +- org.apache.camel:camel-cloud:jar:3.3.0:compile
[INFO] |  |  +- org.apache.camel:camel-http-common:jar:3.3.0:compile
[INFO] |  |  |  +- org.apache.camel:camel-http-base:jar:3.3.0:compile
[INFO] |  |  |  \- org.apache.camel:camel-attachments:jar:3.3.0:compile
[INFO] |  |  |     \- com.sun.activation:javax.activation:jar:1.2.0:compile
[INFO] |  |  \- javax.servlet:javax.servlet-api:jar:3.1.0:compile




For camel-http 3.3.0 it was noticed that in maven central the javax.servlet:javax.servlet-api dependency version is hard-coded to 3.1.0, see: https://repo1.maven.org/maven2/org/apache/camel/camel-http/3.3.0/camel-http-3.3.0.pom.


For camel-http 2.24.3 the javax.servlet:javax.servlet-api dependency version is not hard-coded, and can be overriden by setting defining the javax.servlet-api-version property, see:
https://repo1.maven.org/maven2/org/apache/camel/camel-http/2.24.3/camel-http-2.24.3.pom


Can you please verify whether this is an issue with the Camel release 3.3.0 deployment?


Thanks for your time!","acosentino:1591706731:2020-06-09T20:45:31.064+0000:1591706731:2020-06-09T20:45:31.064+0000:You're able to override it anyway. You can exclude the 3.1.0 javax.servlet from camel-http dependency in your POM and then declare your own version
jhartotr:1591707134:2020-06-09T20:52:14.188+0000:1591707134:2020-06-09T20:52:14.188+0000:Yes, the exclusion/override might work, however it would be good for the camel-http component to work without exclusions but by just overriding the javax.servlet-api-version when needed."
0,CAMEL-15170,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Jesse Gorzinski,0,3,2020-06-09 18:45:34+00:00,2020-06-19 07:48:32+00:00,"It would be quite useful for the JT400 component to have support for message queues. For instance, I'd like to take some action when a message shows up in the *SYSOPR message queue. Or, I'd like to send a message when something happens.","acosentino:1591706876:2020-06-09T20:47:56.504+0000:1591706876:2020-06-09T20:47:56.504+0000:You're welcome to work on this.
ThePrez:1592230777:2020-06-15T22:19:37.225+0000:1592230777:2020-06-15T22:19:37.225+0000:This issue may be assigned to me
ThePrez:1592234081:2020-06-15T23:14:41.346+0000:1592234081:2020-06-15T23:14:41.346+0000:Draft PR started
https://github.com/apache/camel/pull/3917
davsclaus:1592524112:2020-06-19T07:48:32.816+0000:1592524112:2020-06-19T07:48:32.816+0000:Thanks for the work"
0,CAMEL-15169,Improvement,Major,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Otavio Rodolfo Piske,1,3,2020-06-09 14:41:52+00:00,2020-06-11 12:58:55+00:00,"This is a problem that was originally referenced on the Camel Kafka Connector issue #263 on Github and describes a problem trying to load the HDFS connector on the Kafka Connect runtime. 


 ---


It seems that the HDFS Connector cannot be loaded due to conflicts between the dependencies used by the component and the ones available on the connect runtime.


Without manipulating the classpath, loading the dependencies fail because a dependency carried by either one of them does not seem to contain the getProperties on the Application class (which comes from javax.ws.rs:javax.ws.rs-api). Manipulating the classpath to include this library and/or exclude specific dependencies cause the connector to fail to load due to other classpath related issues (ie.: ClassNotFoundException).


—


According to the discussion on the ticket, it may be more suitable to perform the fix on the Camel HDFS component. Therefore, raising this issue.",acosentino:1591851501:2020-06-11T12:58:21.479+0000:1591851501:2020-06-11T12:58:21.479+0000:Updated to 3.2.1
0,CAMEL-15168,Bug,Major,3.3.0,3.4.0,"
None
",Resolved,Won't Fix,3.4.0,Unassigned,Thomas Diesler,0,2,2020-06-09 12:23:50+00:00,2020-06-10 05:30:33+00:00,"A route like this




        <!-- consumer route (providing the actual web service) -->
        <route>
            <from uri=""spring-ws:soapaction:http://www.stockquotes.edu/GetQuote?endpointMapping=#endpointMapping""/>
            <to uri=""responseProcessor""/>
        </route>





fails to start in camel-3.3.0 with ...




Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route8 at: >>> To[responseProcessor] <<< in route: Route(route8)[From[spring-ws:soapaction:http://www.stockquot... because of No endpoint could be found for: #responseProcessor, please check your classpath contains the needed Camel component jar.
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:393)
	at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:374)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:348)
	at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2617)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
	at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2450)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2467)
	at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121)
	at org.wildfly.extension.camel.service.CamelContextActivationService$1.run(CamelContextActivationService.java:63)
	at org.wildfly.camel.proxy.ProxyUtils$1.invoke(ProxyUtils.java:51)
	at com.sun.proxy.$Proxy59.run(Unknown Source)
	at org.wildfly.camel.proxy.ProxyUtils.invokeProxied(ProxyUtils.java:55)
	at org.wildfly.extension.camel.service.CamelContextActivationService.start(CamelContextActivationService.java:60)
	... 8 more
Caused by: org.apache.camel.NoSuchEndpointException: No endpoint could be found for: responseProcessor, please check your classpath contains the needed Camel component jar.
	at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:829)
	at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:766)
	at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:122)
	at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:43)
	at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:36)
	at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:766)
	at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:511)
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:391)
	... 22 more




The migration guide doesn't mention required changes in this area AFAICS.","davsclaus:1591677944:2020-06-09T12:45:44.760+0000:1591677944:2020-06-09T12:45:44.760+0000:Use ref:xxx in the uri if its an endpoint, or if its a processor, then use <process ref=""xxx"">
davsclaus:1591738186:2020-06-10T05:29:46.156+0000:1591738186:2020-06-10T05:29:46.156+0000:Or use bean, eg bean:xxx"
0,CAMEL-15167,Task,Major,3.3.0,3.4.0,"
None
",Resolved,Information Provided,3.4.0,Unassigned,Thomas Diesler,0,3,2020-06-09 10:31:03+00:00,2020-06-11 08:55:44+00:00,"According to this commit it is necessary to set some system properties to get the HazelcastCachingProvider to work.




                    <systemProperties>
                        <property>
                            <name>hazelcast.named.jcache.instance</name>
                            <value>false</value>
                        </property>
                        <property>
                            <name>hazelcast.jcache.provider.type</name>
                            <value>server</value>
                        </property>
                    </systemProperties>




Is this really the propper way to configure this cache provider (i.e. global sysprops instead of component/endpoint props)?
A required migration is not documented here


A camel route like this does not start any more ...




        try (CamelContext camelctx = new DefaultCamelContext()) {
        	
            camelctx.addRoutes(new RouteBuilder() {
                public void configure() {
                    from(""jcache://test-cacheA?cachingProvider=com.hazelcast.cache.HazelcastCachingProvider"")
                    .to(""mock:resultA"");
                }
            });
            
            // Just ensure we can start up without any class loading issues
            camelctx.start();
        }","tdiesler:1591675579:2020-06-09T12:06:19.438+0000:1591675579:2020-06-09T12:06:19.438+0000:If additional hazelcast properties are needed, it would perhaps be sensible that the component provided the necessary defaults and a way to explicitly override those defaults. If additional steps need to be done by the user (i.e. spin up an hazelcast server) that would need to be documented.
davsclaus:1591738591:2020-06-10T05:36:31.166+0000:1591738591:2020-06-10T05:36:31.166+0000:You can configure the configurationUri option to point to a hazelcast.xml configuration file etc that it will use for its configuration.
davsclaus:1591738631:2020-06-10T05:37:11.514+0000:1591738631:2020-06-10T05:37:11.514+0000:Hazelcast have some examples at
https://github.com/hazelcast/hazelcast-code-samples/tree/master/hazelcast-integration
davsclaus:1591740564:2020-06-10T06:09:24.689+0000:1591740564:2020-06-10T06:09:24.689+0000:You can configure the provider on the component like this

        JCacheComponent jcache = context.getComponent(""jcache"", JCacheComponent.class);
        jcache.setCachingProvider(""com.hazelcast.cache.impl.HazelcastServerCachingProvider"");

Otherwise it uses service-loaded and then it may finder either a client or server provided on the classpath (depending on ordering) and chose the wrong one. And in hazelcast you can only control this using those JVM system properties.

They dont have a hazelcast-server or hazelcast-client JAR anyone in 4.x where you can use to separate them :("
