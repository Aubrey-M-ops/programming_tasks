,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-2622,Bug,Minor,"2.2.0, 2.3.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Sergey Zolotaryov,0,1,2010-04-07 09:45:06+00:00,2011-04-24 10:01:16+00:00,"public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return ++idx == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
                        return s;
                    }




This is incorrect. Should be:



                    public boolean hasNext() {
                        // empty string should not be regarded as having next
                        return idx+1 == 0 && ObjectHelper.isNotEmpty(s);
                    }

                    public String next() {
						idx++;
                        return s;
                    }","anydoby:1270604748:2010-04-07T09:45:48.059+0000:1270604748:2010-04-07T09:45:48.059+0000:patch
davsclaus:1270608057:2010-04-07T10:40:57.872+0000:1270608057:2010-04-07T10:40:57.872+0000:trunk: 931494.

Thanks for the patch.
davsclaus:1303610476:2011-04-24T10:01:16.250+0000:1303610476:2011-04-24T10:01:16.250+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2621,Bug,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-07 08:45:06+00:00,2011-04-24 10:01:43+00:00,"file.isFile()




May return false on Windows if consuming from a network share etc. So we should just regard anything that is not a directory as a file.","davsclaus:1270601241:2010-04-07T08:47:21.777+0000:1270601241:2010-04-07T08:47:21.777+0000:trunk: 931466
davsclaus:1303610503:2011-04-24T10:01:43.873+0000:1303610503:2011-04-24T10:01:43.873+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2620,Improvement,Major,None,2.8.2,"
None
",Resolved,Fixed,2.8.2,Unassigned,William Tam,0,1,2010-04-06 19:16:15+00:00,2013-05-26 09:15:38+00:00,"Dan Kulp pointed out in https://issues.apache.org/jira/browse/CXF-2753 that Camel should preserve the streaming behavior by setting message part  type class to Source.class (so the payload object becomes a SAXSource that wraps around a XMLStreamReader).   The camel-cxf component currently exposes to the user a List of DOM Elements as payload.  Basically, streaming behavior stops there anyway.  We probably should provide a parameter to configure the camel-cxf endpoint to opt out of DOM and get a SAXSource as payload and add a converter if the user needs to go from SAXSource to DOM.","njiang:1277858989:2010-06-30T08:49:49.056+0000:1277859019:2010-06-30T08:50:19.915+0000:@William,
If the user want to keep the pay load stream as possible as he want , he could use the Message DataFormat.
It's not a good idea to store the payload message as a SAXSource, as it's not easy to convert it back to DOM unless we know about the message part info. 

Maybe we can move this feature into future, to see if there are some real request about it.
  
davsclaus:1369530897:2013-05-26T09:14:57.595+0000:1369530897:2013-05-26T09:14:57.595+0000:I think this is implemented now with the streaming mode support
http://camel.apache.org/cxf#CXF-StreamingSupportinPAYLOADmode"
0,CAMEL-2619,Improvement,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-06 13:04:30+00:00,2011-04-24 10:01:31+00:00,"In fact this is what you do currently, its however not started but you can still use it. 


What we should do is to start it by default, so its ready to use asap.","davsclaus:1270593130:2010-04-07T06:32:10.772+0000:1270593130:2010-04-07T06:32:10.772+0000:trunk: 931444.
davsclaus:1303610491:2011-04-24T10:01:31.638+0000:1303610491:2011-04-24T10:01:31.638+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2618,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Claus Ibsen,0,0,2010-04-06 12:53:16+00:00,2011-04-24 10:01:01+00:00,"CamelConduit and other classes (search for usage of ProducerTemplate) in camel-cxf should not be used.


You are sending to the same endpoint uri, and therefore just create a Producer from the endpoint uri and use it.
Using ProducerTemplate will have a cache pool under the covers which is not used/needed at all. 


This is plain overkill.",davsclaus:1303610461:2011-04-24T10:01:01.168+0000:1303610461:2011-04-24T10:01:01.168+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2617,New Feature,Minor,None,2.4.0,"
None
",Closed,Not A Problem,2.4.0,Willem Jiang,Claus Ibsen,0,0,2010-04-06 12:02:47+00:00,2011-04-24 10:01:07+00:00,"Currently CamelContext have a Properties for misc options.


We should introduce a CamelContextPropertiesDefinition so we have type safe options in Java DSL and Spring XML.
Then we also have one place to advert and document the options we currently support.","njiang:1276468924:2010-06-14T06:42:04.008+0000:1276468924:2010-06-14T06:42:04.008+0000:@Claus,

We should not let use to change the CamelContextProperties within the Camel route, as the CamelContext properties can be see across the exchanges,
if there are more than one thread which call the route processors, and they are changing the CamelContext properties at the same time, it will cause some trouble.

Current Camel provides a more safe way to configure the CamelContextProperties

Java DSL 
{code}
 new RouteBuilder() {
            public void configure() {
                   getContext().getProperties().put(""MyKey"", ""myValue"");
            }
}
{code}

XML DSL
{code}
  <camelContext id=""camel1"" xmlns=""http://camel.apache.org/schema/spring"">
    <properties>
       <property key=""org.apache.camel.test"" value=""this is a test first""/>
    </properties>
    <template id=""producer1""/>
  </camelContext>
{code}
davsclaus:1303610467:2011-04-24T10:01:07.897+0000:1303610467:2011-04-24T10:01:07.897+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2616,New Feature,Major,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Claus Ibsen,2,2,2010-04-06 04:49:17+00:00,2011-04-24 09:57:41+00:00,"See nabble
http://old.nabble.com/Message-blocks-route-until-all-redelivery-attempts-are-exhausted-ts28123035.html","dragisak:1270545646:2010-04-06T17:20:46.250+0000:1270545646:2010-04-06T17:20:46.250+0000:Is this going to support transactions ?
davsclaus:1270608089:2010-04-07T10:41:29.675+0000:1270608089:2010-04-07T10:41:29.675+0000:No Spring Transaction requires to use same thread
davsclaus:1278020405:2010-07-02T05:40:05.061+0000:1278020405:2010-07-02T05:40:05.061+0000:There is a new option on the error handler / on exception / redelivery policy you can configure - {{syncDelayedRedelivery}}
If this option is enabled then it behaves like now, by blocking in current thread while sleeping.

However the new default is now that it will *not block* while waiting, but schedule a future task to perform the redelivery and continue routing. This is possible due the async routing engine.

In terms of transactions, then Camel detects this and *always* fallback to block. So if you are using transactions the thread *will block*.

BTW: you may want to enable {{syncDelayedRedelivery}} (= *blocked*) in case you want to ensure the ordering the messages is processed. Because if this options is not used, then in case of a delayed redelivery, then the caller thread will break out and in the mean time it can process the next message. Which means the 2nd message can be completed before the 1st message while its pending for redelivery. 
davsclaus:1278028084:2010-07-02T07:48:04.349+0000:1278028084:2010-07-02T07:48:04.349+0000:Updated wiki page
https://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause
davsclaus:1278060597:2010-07-02T16:49:57.647+0000:1278060597:2010-07-02T16:49:57.647+0000:Actually we decided to keep the old behavior as the default.

You need to explicit configure the {{asyncDelayedRedelivery()}} option on the error handler, onException or redeliveryPolicy to instruct Camel that it can use async delayed redelivery.
davsclaus:1303610261:2011-04-24T09:57:41.998+0000:1303610261:2011-04-24T09:57:41.998+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2615,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-06 04:00:49+00:00,2011-04-24 10:01:20+00:00,"As servicemix install the Pax-web jsp support, which exports the javax.el package with the version 2.1.0, and camel-juel imports the javax.el with version [1.0,2), so the camel-juel feature can't be installed in ServiceMix 4.2.0.
Because javax.el is introduced with the jsp 2.1, so we need to update the camel-juel jaxax.el imports version at the same time.",davsclaus:1303610480:2011-04-24T10:01:20.698+0000:1303610480:2011-04-24T10:01:20.698+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2614,Bug,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,William Tam,William Tam,0,0,2010-04-05 21:16:36+00:00,2011-04-24 10:01:36+00:00,"If I have a multi part (bare) message defined in WSDL (such as follow), camel-cxf component cannot parse the incoming message in PAYLOAD mode.



	<wsdl:message name=""MultiPartStringIntRequest"">
		<wsdl:part name=""StringDefaultInput"" element=""MultiPartStringInt:StringDefaultInputElem"" />
		<wsdl:part name=""IntParamIn"" element=""MultiPartStringInt:IntParamInElem"" />
	</wsdl:message>




I get a stack trace similar to this.


Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor createDOMMessage
INFO: AbstractMessageInInterceptor Converting Stax Stream to DOM
Mar 12, 2010 7:15:48 PM org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor handleMessage
INFO: AbstractRoutingMessageInInterceptor Infer BindingOperationInfo.
Mar 12, 2010 7:15:48 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not read request. Operation 

{urn:MultiPart/resources/wsdl/MultiPartStringInt/MultiPartStringInt/types}

StringDefaultInputElem is unknown.
                at org.apache.camel.component.cxf.interceptors.AbstractMessageInInterceptor.handleMessage(AbstractMessageInInterceptor.java:103)
                at org.apache.camel.component.cxf.interceptors.DOMInInterceptor.handleMessage(DOMInInterceptor.java:43)
                at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
                at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:109)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:312)
                at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:276)
                at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
                at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
                at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
                at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
                at org.mortbay.jetty.Server.handle(Server.java:326)
                at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:536)
                at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:930)
                at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
                at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
                at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:405)
                at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
                at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)","wtam:1270475759:2010-04-05T21:55:59.795+0000:1270475759:2010-04-05T21:55:59.795+0000:Fix depends on: 
https://issues.apache.org/jira/browse/CXF-2732
https://issues.apache.org/jira/browse/CXF-2753

davsclaus:1270532605:2010-04-06T13:43:25.267+0000:1270532605:2010-04-06T13:43:25.267+0000:Great work.

I wonder why you have commented out the last line in the patch
{code}
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
{code}

Maybe if not needed, then delete all together.
wtam:1270533741:2010-04-06T14:02:21.760+0000:1270533741:2010-04-06T14:02:21.760+0000:@clause

The commented line should have been removed.   I'll clean it up.  (Thanks for pointing it out).   The retrieving of ""boi"" have been performed in the previous lines.   The idea is to make sure the ""boi"" is remained as wrapped in PAYLOAD mode, so that CXF will not put a wrapper element again when it marshals the request.  I'll add some comment in the code, too.


{code}
                 // create a Camel exchange
                 org.apache.camel.Exchange camelExchange = endpoint.createExchange();
+                DataFormat dataFormat = endpoint.getDataFormat();
+
+                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
+                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
+                    boi = boi.getWrappedOperation();
+                    cxfExchange.put(BindingOperationInfo.class, boi);
+                }
                 
-                BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
+                //BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class);
                 if (boi != null) {
                     camelExchange.setProperty(BindingOperationInfo.class.getName(), boi);
                     if (LOG.isTraceEnabled()) {
{code}

njiang:1273110663:2010-05-06T09:51:03.367+0000:1273110663:2010-05-06T09:51:03.367+0000:Committed the patch into Camel trunk  in reversion 941623.
davsclaus:1303610496:2011-04-24T10:01:36.642+0000:1303610496:2011-04-24T10:01:36.642+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2613,Improvement,Minor,None,2.3.0,"
None
",Closed,Won't Fix,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-05 10:06:56+00:00,2011-04-24 10:01:10+00:00,"By default Camel Proxy is always InOut unless you set some specific @Pattern annotation such as @InOnly.


We should add an option to <camelProxy> so you can let void methods be InOnly and the others InOut.","davsclaus:1270448745:2010-04-05T14:25:45.794+0000:1270448745:2010-04-05T14:25:45.794+0000:trunk: 930866.
jstrachan:1270540326:2010-04-06T15:52:06.568+0000:1270540326:2010-04-06T15:52:06.568+0000:my worry is really folks losing exceptions without really knowing about it.

Certainly we should only support this for void methods with no checked exceptions. Though if the method is invoking lots of spring stuff, which tends to use runtime exceptions (or scala code which does the same) - its very easy to lose exceptions.

We need to make a massive error message if a runtime exception is thrown and the method is invoked async so folks are really aware.

So long as the default is to only do async when @InOnly is there, I'm happy. Having an option to override this (for example when using legacy code) is fine, so long as users understand the big risk they are taking 
davsclaus:1270540543:2010-04-06T15:55:43.622+0000:1270540543:2010-04-06T15:55:43.622+0000:Yeah the hidden of runtime exception might take people by surprise. Well its not hidden but the method invoked does not throw any exception.

So lets -1 and have people force to use @InOnly to force the fire and forget mode.
davsclaus:1270624131:2010-04-07T15:08:51.234+0000:1270624131:2010-04-07T15:08:51.234+0000:{code}
davsclaus:(svn)camel[trunk:931578]/$ svn merge -c -930866 .
--- Reverse-merging r930866 into '.':
D    components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyVoidAsInOnlyTest.java
D    components/camel-spring/src/test/java/org/apache/camel/spring/config/CamelProxyVoidAsInOutTest.java
D    components/camel-spring/src/test/java/org/apache/camel/spring/config/MyOtherProxySender.java
D    components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelProxyVoidAsInOnlyTest.xml
D    components/camel-spring/src/test/resources/org/apache/camel/spring/config/CamelProxyVoidAsInOutTest.xml
U    components/camel-spring/src/main/java/org/apache/camel/spring/remoting/CamelProxyFactoryBean.java
U    components/camel-spring/src/main/java/org/apache/camel/spring/CamelProxyFactoryDefinition.java
U    camel-core/src/test/java/org/apache/camel/component/bean/BeanProxyTest.java
D    camel-core/src/main/java/org/apache/camel/builder/ProxyBuilder.java
U    camel-core/src/main/java/org/apache/camel/component/bean/MethodInfoCache.java
U    camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java
U    camel-core/src/main/java/org/apache/camel/component/bean/ProxyHelper.java
U    camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java
{code}

I will keep the {{ProxyBuilder}} as it makes creating proxy's from Java DSL a bit easier.
davsclaus:1270628842:2010-04-07T16:27:22.663+0000:1270628842:2010-04-07T16:27:22.663+0000:trunk: 931612.
davsclaus:1303610470:2011-04-24T10:01:10.216+0000:1303610470:2011-04-24T10:01:10.216+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2612,New Feature,Major,None,2.6.0,"
None
",Closed,Duplicate,2.6.0,Claus Ibsen,Claus Ibsen,0,1,2010-04-04 09:08:33+00:00,2011-04-24 09:58:23+00:00,"So you can get those JMX stats out in a plain Map structure in an Camel Exchange so you can easily get those details.


There should be options so you can filter/select which kind of details to get out.



per route
all routes
basic information etc","davsclaus:1293775120:2010-12-31T13:58:40.978+0000:1293775120:2010-12-31T13:58:40.978+0000:We have the new camel-jmx component which has all sort of JMX features.
davsclaus:1303610303:2011-04-24T09:58:23.614+0000:1303610303:2011-04-24T09:58:23.614+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2611,New Feature,Minor,None,Future,"
None
",Resolved,Not A Problem,Future,Claus Ibsen,Claus Ibsen,0,1,2010-04-04 08:14:44+00:00,2013-05-26 09:06:21+00:00,"This allows you to configure the exception handler they use, for example the Aggregator.


The exception handler is used when processing an aggregated exchange failed. By default it will log at ERROR level.
Sometimes you want to be able to configure the logging level or use another error handler, or none at all.


Consider having them also auto lookup in Registry if there is exactly one instance of org.apache.camel.spi.ExceptionHandler and use it as fallback.","davsclaus:1369530381:2013-05-26T09:06:21.278+0000:1369530381:2013-05-26T09:06:21.278+0000:The EIPs leverage the Camel error handler during routing, so it takes care of this."
0,CAMEL-2610,New Feature,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Jeremy Norris,0,0,2010-04-02 16:46:59+00:00,2011-04-24 10:01:14+00:00,Mailling list thread reference: http://old.nabble.com/Camel%2C-Spring-and-Initialization-ts28113566.html,"davsclaus:1270255650:2010-04-03T08:47:30.239+0000:1270255650:2010-04-03T08:47:30.239+0000:trunk: 930493.
jnorris:1275482625:2010-06-02T20:43:45.248+0000:1275482625:2010-06-02T20:43:45.248+0000:Beans specified using this ""depends-on"" mechanism do not have their @PostConstruct invoked.  I need to do some more research as to why. Is there anything different about the lifecycle of these beans as opposed to a regular spring bean?
jnorris:1275521888:2010-06-03T07:38:08.190+0000:1275521888:2010-06-03T07:38:08.190+0000:Sorry for the false alarm.  @PostConstruct is being called correctly.  This was verified using a simple isolated unit test.
davsclaus:1303610474:2011-04-24T10:01:14.858+0000:1303610474:2011-04-24T10:01:14.858+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2609,Task,Major,2.3.0,2.10.0,"
None
",Resolved,Fixed,2.10.0,Claus Ibsen,Barry Kaplan,0,2,2010-04-02 15:43:32+00:00,2012-07-06 08:07:52+00:00,"Having to download the source and manually build a *-sources.jar, manually put in the local .m2 cache, only then to have to do it again the next day when the snapshot is updated, makes is way harder to work the snapshots.","janstey:1270277247:2010-04-03T14:47:27.478+0000:1270277247:2010-04-03T14:47:27.478+0000:Details of this issue are here BTW https://issues.apache.org/jira/browse/INFRA-2352

Need to try the last suggestion of switching over from using Hudson's Maven deploy feature to a pure Maven deploy (i.e. just use mvn deploy). I just haven't had the time to get this working lately... if anyone has an hour to spare updating the build config & checking the results, it may be a really easy fix :)
davsclaus:1285489237:2010-09-26T16:20:37.376+0000:1285489237:2010-09-26T16:20:37.376+0000:What do other Apache projects do?
I can see AMQ do deploy sources
https://repository.apache.org/content/repositories/snapshots/org/apache/activemq/activemq-core/5.5-SNAPSHOT/

So we can ask the AMQ people what they do


davsclaus:1285489296:2010-09-26T16:21:36.781+0000:1285489296:2010-09-26T16:21:36.781+0000:This is the goal AMQ does
{code}
-fae -B -e -U clean install source:jar
{code}

So I wonder if adding source:jar is sufficient for Camel?
davsclaus:1285489350:2010-09-26T16:22:30.221+0000:1285489350:2010-09-26T16:22:30.221+0000:This is the goal for Camel currently
{code}
-fae -B -e -U clean install -Dmaven.test.skip.exec=true -Psource-jar
{code}

I wonder why the source jar is a profile?
davsclaus:1285489591:2010-09-26T16:26:31.353+0000:1285489591:2010-09-26T16:26:31.353+0000:I have changed the Camel goal to be on Hudson
{code}
-fae -B -e -U clean install source:jar -Dmaven.test.skip.exec=true -Psource-jar
{code}

So let's see if the sources .jar is being generated and deployed now
davsclaus:1285570640:2010-09-27T14:57:20.730+0000:1285570640:2010-09-27T14:57:20.730+0000:Doesn't look like that change causes hudson to upload source jars as well. They are still missing from
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.5-SNAPSHOT/
davsclaus:1285570839:2010-09-27T15:00:39.700+0000:1285570839:2010-09-27T15:00:39.700+0000:It does say it install the sources jar

[INFO] Installing /home/hudson/hudson-slave/workspace/Camel/camel-trunk/camel-core/target/camel-core-2.5-SNAPSHOT-sources.jar to /home/hudson/hudson-slave/workspace/Camel/.repository/org/apache/camel/camel-core/2.5-SNAPSHOT/camel-core-2.5-SNAPSHOT-sources.jar
davsclaus:1285570971:2010-09-27T15:02:51.325+0000:1285570971:2010-09-27T15:02:51.325+0000:Ah looks like we had a profile for source jar in Camel
{code:xml}

    <profile>
      <id>source-jar</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <executions>
              <execution>
                <id>attach-sources</id>
                <goals>
                  <goal>jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
{code}

So I will change that hudson goal back to before.
davsclaus:1285571194:2010-09-27T15:06:34.052+0000:1285571194:2010-09-27T15:06:34.052+0000:Trying with {{mvn clean deploy}} as suggested on INFRA
davsclaus:1285571445:2010-09-27T15:10:45.836+0000:1285571445:2010-09-27T15:10:45.836+0000:And I change the max memory from 512 to 800mb
davsclaus:1285576314:2010-09-27T16:31:54.755+0000:1285576314:2010-09-27T16:31:54.755+0000:With the change to {{clean deploy}} I can now see the -sources.jar during the build (Hudson is running right now)


For example for camel-core this .jar is in the repo
camel-core-2.5-20100927.153441-3-sources.jar

https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.5-SNAPSHOT/

njiang:1285605068:2010-09-28T00:31:08.333+0000:1285605068:2010-09-28T00:31:08.333+0000:
{code}
It does say it install the sources jar
[INFO] Installing /home/hudson/hudson-slave/workspace/Camel/camel-trunk/camel-core/target/camel-core-2.5-SNAPSHOT-sources.jar to /home/hudson/hudson-slave/workspace/Camel/.repository/org/apache/camel/camel-core/2.5-SNAPSHOT/camel-core-2.5-SNAPSHOT-sources.jar
{code}

maven just installs the sources jar , but it doesn't mean maven deploys the source jar.
davsclaus:1285614434:2010-09-28T03:07:14.089+0000:1285614434:2010-09-28T03:07:14.089+0000:{quote}
maven just installs the sources jar , but it doesn't mean maven deploys the source jar.
{quote}

Yeah I know but I was pointing out that the sources.jar is being generated. Then hudson should normally be able to detect this and automatic publish that to the snapshot repo.
But this is where Hudson fails.
davsclaus:1285614529:2010-09-28T03:08:49.187+0000:1285614529:2010-09-28T03:08:49.187+0000:AMQ also generates javadoc .jars. Maybe we can try doing that for camel as well and see if hudson now detect the sources.jar as well?
hadrian:1285617366:2010-09-28T03:56:06.447+0000:1285617366:2010-09-28T03:56:06.447+0000:I am building on my system now, looking into a couple of options. Our build system is a bit different than AMQ. Now that I released AMQ twice it wouldn't hurt to align the two build system.
davsclaus:1286071827:2010-10-03T10:10:27.477+0000:1286071827:2010-10-03T10:10:27.477+0000:I changed hudson back to {{install}} instead of {{deploy}} because it just spams the snapshot repo with .jars with timestamps and don't cleanup. So we will end up with a lot of old .jars there.
davsclaus:1286074966:2010-10-03T11:02:46.233+0000:1286074966:2010-10-03T11:02:46.233+0000:Maybe we should upgrade the install plugin?

 maven-install-plugin ................................... 2.2 -> 2.3.1

Maybe that helps hudson?
davsclaus:1341533272:2012-07-06T08:07:52.984+0000:1341533272:2012-07-06T08:07:52.984+0000:There is now -sources JAR files"
0,CAMEL-2608,Task,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-04-02 12:45:26+00:00,2011-04-24 10:01:29+00:00,"For example some options to setup auth and proxies are missing in 4.0.1 which was avail in 3.1. They seems to be added in 4.1. But 4.1 is on a long release as its alpha2 currently.
And to also allow a slowly migration path for existing Camel users we should let camel-http be using http client 3.1.



camel-http -> camel-http4 (component should be named http4)
restore old camel-http
camel-jetty should use http4 for testing and it should extend camel-http4 as its code base have been adjusted as well","davsclaus:1270865720:2010-04-10T10:15:20.274+0000:1270865720:2010-04-10T10:15:20.274+0000:The plan is as follows

- camel-http4 component which uses {{http4}} and {{https4}} as scheme for Apache HTTP Client 4.x component
- camel-http restoring the old component using Apache HTTP Client 3.1
- camel-jetty restoring it to build on top of camel-http

This way we only introduce the new camel-http4 component and people can try it out for early adapters.

Then the http and jetty components is as they where in Apache Camel 2.2.
We may backport Jetty to 6.1.22 if Jetty 7.x has a problem running on http client 3.1 (i doubt that but that is a lower priority).
davsclaus:1270866009:2010-04-10T10:20:09.827+0000:1270866009:2010-04-10T10:20:09.827+0000:trunk: 932686.

Renamed package from org.apache.camel.component.http to org.apache.camel.component.http4 in what will be camel-http4 component
davsclaus:1270867259:2010-04-10T10:40:59.172+0000:1270867259:2010-04-10T10:40:59.172+0000:trunk: 932689

Moving camel-http to camel-http4 directory (to make room so we can restore the old camel-http component)
davsclaus:1270867443:2010-04-10T10:44:03.169+0000:1270867443:2010-04-10T10:44:03.169+0000:trunk: 932690.

Restored the old camel-http component
davsclaus:1270870826:2010-04-10T11:40:26.876+0000:1270870826:2010-04-10T11:40:26.876+0000:trunk: 932699.

camel-jetty, camel-gae, camel-servlet is changed to use camel-http which is based on Http Client 3.1
davsclaus:1270873066:2010-04-10T12:17:46.992+0000:1270873066:2010-04-10T12:17:46.992+0000:trunk: 932707, 932709.

Fixed tests in camel-itest and restored some http client 3.1 tests in camel-itest
davsclaus:1270873123:2010-04-10T12:18:43.123+0000:1270873123:2010-04-10T12:18:43.123+0000:trunk: 932710.

Adjusted features.xml
davsclaus:1270873163:2010-04-10T12:19:23.668+0000:1270873163:2010-04-10T12:19:23.668+0000:TODO: Update release notes page
TODO: Add http4 components page
TODO: Adjust http components page
davsclaus:1303610489:2011-04-24T10:01:29.723+0000:1303610489:2011-04-24T10:01:29.723+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2607,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-04-02 07:28:42+00:00,2011-04-24 10:01:28+00:00,No Desc,"njiang:1270164954:2010-04-02T07:35:54.736+0000:1270164954:2010-04-02T07:35:54.736+0000:Fixed this issue by removing the ApplicationListener interface from SpringCamelContext.
davsclaus:1270166329:2010-04-02T07:58:49.685+0000:1270166329:2010-04-02T07:58:49.685+0000:I do *not* think this is the right solution.

Now {{SpringCamelContext}} is not an {{ApplicationListener}} and how will you guarantee that Spring will invoke it?
CamelContextFactoryBean is (I assume) only active during creation of the CamelContext. Later at runtime this factory is *disposed*.
Then how can the camel-event component listen for Spring events?

What this change fixes is only during creation of SpringCamelContext to avoid the duplicate events. But I think we can remedy this in another way.
davsclaus:1270167297:2010-04-02T08:14:57.287+0000:1270167297:2010-04-02T08:14:57.287+0000:Ah CamelContextFactoryBean implements Disposable and then I assume Spring keep it around so it can *destroy* what the factory bean have created, which is SpringCamelContext.
So it should stick around. 

But from a design point of view its not nice that its the factory bean which is the listener, when in realty it should be the SpringCamelContext. So I still do not think this solutions is the right.

njiang:1270167828:2010-04-02T08:23:48.765+0000:1270167828:2010-04-02T08:23:48.765+0000:@Claus,
This solution supports Spring 2.x and Spring 3.x at the same time.
I'm surprised even SprintCamelContext implements the ApplicationListener, the Spring2.x doesn't call its OnApplicationEvent method.



njiang:1270167952:2010-04-02T08:25:52.003+0000:1270167952:2010-04-02T08:25:52.003+0000:Maybe the CamelContextFactoryBean's solution is a workaround of the upper issue in the Spring 2.x time ;)
davsclaus:1270168263:2010-04-02T08:31:03.404+0000:1270168263:2010-04-02T08:31:03.404+0000:Yeah its a bit odd if Spring does not call the onApplicationEvent on SpringCamelContext when it implements the ApplicationListener.

The listener is defined as
{code}
package org.springframework.context;

import java.util.EventListener;

/**
 * Interface to be implemented by application event listeners.
 * Based on the standard <code>java.util.EventListener</code> interface
 * for the Observer design pattern.
 *
 * @author Rod Johnson
 * @see org.springframework.context.event.ApplicationEventMulticaster
 */
public interface ApplicationListener extends EventListener {

	/**
	 * Handle an application event.
	 * @param event the event to respond to
	 */
	void onApplicationEvent(ApplicationEvent event);

}
{code}

There is nothing in the javadoc that states how Spring detects this interface.
davsclaus:1270168472:2010-04-02T08:34:32.691+0000:1270168472:2010-04-02T08:34:32.691+0000:Ah we can register SpringCamelContext as listener using the 
{code}
void addApplicationListener(ApplicationListener listener);
{code}
From ConfigurableApplicationContext. Which we can do in SpringCamelContext itself. Then I think we do not need the listener at all on SpringCamelContextFactoryBean
davsclaus:1270169699:2010-04-02T08:54:59.323+0000:1270169699:2010-04-02T08:54:59.323+0000:After working a bit with this and registering the listener with the code above, Spring *still* does not invoke the onApplicationEvent method.

I recon we stick with the *workaround* by Willem.
davsclaus:1303610488:2011-04-24T10:01:28.638+0000:1303610488:2011-04-24T10:01:28.638+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2606,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Martin Krasser,Martin Krasser,0,0,2010-04-01 13:20:34+00:00,2011-04-24 10:01:25+00:00,Replace existing GAE service mocks with those coming with the GAE SDK.,davsclaus:1303610485:2011-04-24T10:01:25.661+0000:1303610485:2011-04-24T10:01:25.661+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2605,Bug,Major,1.6.2,1.6.3,"
None
",Closed,Fixed,1.6.3,Gert Vanthienen,Gert Vanthienen,0,0,2010-03-31 12:59:25+00:00,2011-01-17 16:50:42+00:00,"When using an asynchronous processor to handle the message in a deadletterchannel, the async message handling is broken (not all AsyncCallbacks get invoked correctly), causing the exchange never to be terminated correctly - e.g. the call to sendBody will never return.","gertvanthienen:1270014370:2010-03-31T13:46:10.468+0000:1270014370:2010-03-31T13:46:10.468+0000:Fixed in http://svn.apache.org/viewvc?view=revision&revision=929537
davsclaus:1295254242:2011-01-17T16:50:42.645+0000:1295254242:2011-01-17T16:50:42.645+0000:Closing all 1.x tickets"
0,CAMEL-2604,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-31 10:12:34+00:00,2011-04-24 10:00:37+00:00,"""Content-Length"" header is useless for the camel-cxf component and it will cause some trouble on the other component,  we'd better remove it.",davsclaus:1303610437:2011-04-24T10:00:37.916+0000:1303610437:2011-04-24T10:00:37.916+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2603,Improvement,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Anand,0,0,2010-03-30 13:35:23+00:00,2011-04-24 10:00:36+00:00,"Please support get operation on cache component.
here is the discussion.
http://old.nabble.com/read-from-cache-component-ts28071593.html","vbuell:1272343559:2010-04-27T12:45:59.367+0000:1272343559:2010-04-27T12:45:59.367+0000:+ GET operation added.
+ CHECK operation added.
+ Code refactored. Hardcored constants moved to CacheConstants interface.
* Fix for unit tests which were inefficient due to using unregistered endpoints (""direct:b"", ""direct:c"") in their routes.
davsclaus:1272415550:2010-04-28T08:45:50.540+0000:1272415550:2010-04-28T08:45:50.540+0000:Thanks Volodymyr for the patch. I have applied it to trunk.
I also did a bit of refactor to better handle lifecycle of the shared CacheManager and have it shutdown when Camel is shutting down.

trunk: 938819.
davsclaus:1272415847:2010-04-28T08:50:47.290+0000:1272415847:2010-04-28T08:50:47.290+0000:Updated wiki a bit as well. Feel free to help with examples for GET and CHECK
vbuell:1273627534:2010-05-12T09:25:34.861+0000:1273627534:2010-05-12T09:25:34.861+0000:Example of GET command usage:

                   from(""direct:start"")
                   // Prepare headers
                   .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_GET))
                   .setHeader(CacheConstants.CACHE_KEY, constant(""Ralph_Waldo_Emerson"")).
                   .to(""cache://TestCache1"").
                   // Check if entry was not found
                   .choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNull()).
                   // If not found, get the payload and put it to cache
                   .to(""cxf:bean:someHeavyweightOperation"").
                   .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD))
                   .setHeader(CacheConstants.CACHE_KEY, constant(""Ralph_Waldo_Emerson""))
                   .to(""cache://TestCache1"")
                   .end()
                   .to(""direct:nextPhase"");

Example of CHECK command usage:

                   from(""direct:start"")
                   // Prepare headers
                   .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_CHECK))
                   .setHeader(CacheConstants.CACHE_KEY, constant(""Ralph_Waldo_Emerson"")).
                   .to(""cache://TestCache1"").
                   // Check if entry was not found
                   .choice().when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNull()).
                   // If not found, get the payload and put it to cache
                   .to(""cxf:bean:someHeavyweightOperation"").
                   .setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_ADD))
                   .setHeader(CacheConstants.CACHE_KEY, constant(""Ralph_Waldo_Emerson""))
                   .to(""cache://TestCache1"")
                   .end();


Note: CHECK command tests existence of the entry in the cache but doesn't place message to the body.
davsclaus:1273630510:2010-05-12T10:15:10.269+0000:1273630510:2010-05-12T10:15:10.269+0000:Thanks for the examples I have added them to the wiki page
davsclaus:1303610436:2011-04-24T10:00:36.782+0000:1303610436:2011-04-24T10:00:36.782+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2602,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-30 05:39:29+00:00,2011-04-24 10:01:21+00:00,We should support user to get the parameter object from the message body directly.,davsclaus:1303610481:2011-04-24T10:01:21.157+0000:1303610481:2011-04-24T10:01:21.157+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2601,Bug,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Graham Rivers-Brown,0,0,2010-03-30 04:58:42+00:00,2011-04-24 10:01:15+00:00,"On the following page: http://camel.apache.org/stream.html


In last example relating to monitoring an open file (like tail) the line is incorrect...
from(""stream:file?fileName=/server/logs/server.log?scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");


should be
from(""stream:file?fileName=/server/logs/server.log&scanStream=true&scanStreamDelay=1000"").to(""bean:logService?method=parseLogLine"");


There is a question mark after the filename field whereas this should actually be an ampersand. Unfortunately I don't have edit rights on the page to update it myself.","njiang:1269902964:2010-03-30T06:49:24.527+0000:1269902964:2010-03-30T06:49:24.527+0000:Hi Graham, 
Thanks for reporting this, I updated the wiki doc.
Please feel free to send a kara request to dev at camel.apache.org, I'm sure Claus will grant you the right shortly.
davsclaus:1303610475:2011-04-24T10:01:15.778+0000:1303610475:2011-04-24T10:01:15.778+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2600,Improvement,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-30 03:41:46+00:00,2011-04-24 10:01:15+00:00,"As CXF 2.2.7 is released, we need to upgrade camel-cxf to use it.",davsclaus:1303610475:2011-04-24T10:01:15.649+0000:1303610475:2011-04-24T10:01:15.649+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2599,Task,Major,2.3.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-29 13:54:42+00:00,2011-04-24 10:01:34+00:00,"When using Spring 3.0 its build in EL seems to auto parse XML attributes out of the box. We need to identify how to disable this behavior for the Camel namespace.
Or look into Spring how to control this behavior.","davsclaus:1270101668:2010-04-01T14:01:08.973+0000:1270101668:2010-04-01T14:01:08.973+0000:Spring 3.0.1 emits {{ContextRefreshedEvent}} 2 times instead of only 1 time as in 2.x.
davsclaus:1270107580:2010-04-01T15:39:40.682+0000:1270107580:2010-04-01T15:39:40.682+0000:There is a Spring EL clash with the prefix and suffix tokens as its the same as with Camel
- #{
- }

Either we gotta change the tokens to be something different in Camel to avoid the clash with Spring 3.0.x.
Or look into how to provide a custom Spring {{BeanExpressionResolver}} which can check in Camel first and fallback on the default one.
davsclaus:1270108122:2010-04-01T15:48:42.630+0000:1270108122:2010-04-01T15:48:42.630+0000:I recon using #${foo.bar} as the syntax is maybe what we can do as best.
davsclaus:1270114175:2010-04-01T17:29:35.686+0000:1270114175:2010-04-01T17:29:35.686+0000:trunk: 930051

Fixed by adding a workaround for the Spring 3.0 twice ContextRefreshedEvent.
davsclaus:1270183091:2010-04-02T12:38:11.006+0000:1270183091:2010-04-02T12:38:11.006+0000:Using {{\{\{key\}\}}} as the tokens.

trunk: 930255.

davsclaus:1303610494:2011-04-24T10:01:34.827+0000:1303610494:2011-04-24T10:01:34.827+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2598,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-29 11:06:16+00:00,2011-04-24 10:01:39+00:00,We need camel-crypto in the features XML for Karaf/SMX so you can easily install it in these OSGi containers.,"davsclaus:1270882252:2010-04-10T14:50:52.056+0000:1270882252:2010-04-10T14:50:52.056+0000:trunk: 932739.
davsclaus:1303610499:2011-04-24T10:01:39.983+0000:1303610499:2011-04-24T10:01:39.983+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2597,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Stephen Gargan,Claus Ibsen,0,0,2010-03-29 11:05:29+00:00,2011-04-24 10:00:37+00:00,"We need documentation to both



components
data format","davsclaus:1271285644:2010-04-15T06:54:04.410+0000:1271285644:2010-04-15T06:54:04.410+0000:Stephen we are closing in on a 2.3 release.

Do you hav time to write the wiki documentation for your new camel-crypto component?
sgargan:1271349946:2010-04-16T00:45:46.202+0000:1271349946:2010-04-16T00:45:46.202+0000:I've put together some a couple of pages one for the DataFormat and another for the Signature Component.

They are provisionally named
* Crypto
* Crypto (Digital Signatures)   

The Spring documentation for the DataFormat leaves a little to be desired, I'll need ot upload a patch with better snippets, but it will do for now.

I have put together a project for the examples that shows how to use both. As soon as I've the documentation done for this I'll upload a patch. 



davsclaus:1271368933:2010-04-16T06:02:13.123+0000:1271368933:2010-04-16T06:02:13.123+0000:Thanks a lot Stephen, this looks really good. I have made minor edits and added it to the manual as well. (you have to add it to a special wiki page to add a component to the manual)
davsclaus:1271369284:2010-04-16T06:08:04.508+0000:1271369284:2010-04-16T06:08:04.508+0000:It would be nice if the crypto data format had a table which listed the options the data format supports.
sgargan:1271609448:2010-04-19T00:50:48.312+0000:1271609448:2010-04-19T00:50:48.312+0000:I've added the table for the Data format options. 
sgargan:1271660112:2010-04-19T14:55:12.304+0000:1271660112:2010-04-19T14:55:12.304+0000:
   [[ Old comment, sent by email on Thu, 15 Apr 2010 16:40:38 +0100 ]]

Claus,

Sorry for taking so long with this I've been dealing with a serious
family illness. I have most of the documentation finished and will try
and get it up in the next day or so. When is the release?



davsclaus:1303610437:2011-04-24T10:00:37.309+0000:1303610437:2011-04-24T10:00:37.309+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2596,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-03-29 10:55:26+00:00,2011-04-24 10:00:56+00:00,Add camel-netty to the karaf features.xml file so people can easily install it in SMX/Karaf,"akarpe:1269974934:2010-03-31T02:48:54.129+0000:1269974934:2010-03-31T02:48:54.129+0000:Hi Claus,

Please find attached, a feature patch I have created to install camel-netty in Servicemix 4/Karaf.

I used the wrap:http URI to add additional JBoss and Google jars needed as constraints by JBoss Netty. All the necessary jars are under APL 2.0. 

Following your review, I will be happy to commit it to the camel source. Please let me know.

Cheers,

Ashwin...

P.S: I am creating a patch with the Servicemix project to add netty as a bundle in the Servicemix 4/Karaf code stream. I will add the link shortly.



akarpe:1269976635:2010-03-31T03:17:15.956+0000:1269976635:2010-03-31T03:17:15.956+0000:Hi Claus,

Please find the link to the Servicemix project requesting the netty bundle patches to be applied.

https://issues.apache.org/activemq/browse/SMX4-514

Cheers,

Ashwin... 
njiang:1269977145:2010-03-31T03:25:45.690+0000:1269977145:2010-03-31T03:25:45.690+0000:Hi Ashwin,

Netty is already a OSGi bundle, why do you want to  create a wrap bundle in ServiceMix.
As Netty's dependency of guicy , protocol buff, xnio is optional, I don't think we need to put them into the camel-netty feature.
BTW, Netty support lots of logging framework,  It's not necessary to include jboss log API into the camel-netty feature.

akarpe:1270007439:2010-03-31T11:50:39.329+0000:1270007439:2010-03-31T11:50:39.329+0000:Hi Willem,

Oops. Good catch.. :)

I missed the fact that it is an OSGi bundle as I started down this road. I will put up a different patch and reverse the Servicemix issue... (SMX4-514).

Cheers,

Ashwin...
akarpe:1270008019:2010-03-31T12:00:19.603+0000:1270008019:2010-03-31T12:00:19.603+0000:Willem,

Looks like the Servicemix patch has already been applied.  I will change the camel patch right away.

Cheers,

Ashwin...
akarpe:1270019211:2010-03-31T15:06:51.660+0000:1270019211:2010-03-31T15:06:51.660+0000:Hi Willem,

Please see the corrected patch that does not look to a Servicemix wrapped bundle or with links to other extraneous dependencies.

I will commit this fix since it is very straightforward and works as intended.

Cheers,

Ashwin...
akarpe:1270020103:2010-03-31T15:21:43.817+0000:1270020103:2010-03-31T15:21:43.817+0000:Patch applied as revision r929586 
davsclaus:1303610456:2011-04-24T10:00:56.416+0000:1303610456:2011-04-24T10:00:56.416+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2595,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-03-29 10:54:37+00:00,2011-04-24 10:00:50+00:00,"Add wiki documentation and add netty to the components overview.
And add netty to the see also section of mina, and vise verse.","akarpe:1269839009:2010-03-29T13:03:29.972+0000:1269839009:2010-03-29T13:03:29.972+0000:Sure thing, Claus. I will get on it right away
akarpe:1270062353:2010-04-01T03:05:53.753+0000:1270062353:2010-04-01T03:05:53.753+0000:Hi Claus,

I have added the required documentation, see also sections in Mina and Netty and updated the component list.

Cheers,

Ashwin...
akarpe:1270062394:2010-04-01T03:06:34.783+0000:1270062394:2010-04-01T03:06:34.783+0000:Documentation task completed...
davsclaus:1303610450:2011-04-24T10:00:50.623+0000:1303610450:2011-04-24T10:00:50.623+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2594,Improvement,Major,1.6.2,"1.6.4, 2.4.0","
None
",Closed,Fixed,"1.6.4, 2.4.0",Claus Ibsen,Fernando Ribeiro,0,0,2010-03-28 23:47:35+00:00,2011-01-17 16:50:42+00:00,"In the ""Configuring URI Parameters"" section, it doesn't say the HttpProducer.QUERY constant must be used, and in the ""How to set the http method (GET/POST/PUT/DELETE/HEAD/OPTIONS/TRACE) to the HTTP producer"" section it doesn't say the HttpMethods.HTTP_METHOD constant must be used, in 1.6.2.","davsclaus:1269831075:2010-03-29T10:51:15.164+0000:1269831075:2010-03-29T10:51:15.164+0000:Fernando

See this page
http://camel.apache.org/contributing.html

How to contribute and get edit rights to wiki pages.

Generally the documentation is based on trunk. And you have reported this ticket as affects 2.2.0 but write 1.6.2 in the description.
Which Camel version do you mean?

And you could for example paste a comment in here what you would like to added in the documentation so we can do that. Or follow the procedure to get your own edit rights to the wiki page to help improve the documentation.
fribeiro:1269833435:2010-03-29T11:30:35.271+0000:1269833435:2010-03-29T11:30:35.271+0000:Claus,

I've fixed the ""Affected Version"" setting accordingly and will follow the instructions to get edit rights.

Thanks,

Fernando

davsclaus:1273188545:2010-05-07T07:29:05.606+0000:1273188545:2010-05-07T07:29:05.606+0000:Fernando any update about edit rights?
fribeiro:1273336012:2010-05-09T00:26:52.095+0000:1273336012:2010-05-09T00:26:52.095+0000:The ASF is going to get the document signed this week, will keep you posted.
fribeiro:1276516691:2010-06-14T19:58:11.563+0000:1276516691:2010-06-14T19:58:11.563+0000:Just sent the document to Apache, cc'ed Claus for reference.
fribeiro:1276625613:2010-06-16T02:13:33.448+0000:1276625613:2010-06-16T02:13:33.448+0000:Just got listed at http://people.apache.org/committer-index.html#unlistedclas, what is the next step here?
davsclaus:1276632351:2010-06-16T04:05:51.881+0000:1276632351:2010-06-16T04:05:51.881+0000:The steps is listed here
http://camel.apache.org/how-do-i-edit-the-website.html

What is your username on the Camel wiki ?
fribeiro:1276665965:2010-06-16T13:26:05.793+0000:1276669005:2010-06-16T14:16:45.232+0000:It is webmaster@fernandoribeiro.eti.br.
davsclaus:1276668783:2010-06-16T14:13:03.376+0000:1276668783:2010-06-16T14:13:03.376+0000:You need to create an account on the confluence wiki.

See this link
http://camel.apache.org/how-do-i-edit-the-website.html

Then let me know the username then I can assign you rights to edit the wiki pages of Camel.
davsclaus:1276674526:2010-06-16T15:48:46.663+0000:1276674526:2010-06-16T15:48:46.663+0000:Okay you should now be able to edit the wiki pages. You may need to re login to have the new rights.

Just be a little careful the first times you edit the pages. There is a preview function etc you can use to see the changes before saving.
davsclaus:1295254242:2011-01-17T16:50:42.099+0000:1295254242:2011-01-17T16:50:42.099+0000:Closing all 1.x tickets"
0,CAMEL-2593,Bug,Major,1.6.2,,"
None
",Closed,Cannot Reproduce,None,Willem Jiang,Fernando Ribeiro,0,0,2010-03-28 23:12:24+00:00,2011-04-24 10:00:58+00:00,"The org.apache.camel.component.http.helper package is not exported.


*pom.xml*


<properties>
  <camel.osgi.export.pkg>org.apache.camel.component.http.*</camel.osgi.export.pkg>
</properties>


*servicemix.log*


Could not find class 'org/apache/camel/component/http/helper/LoadingByteArrayOutputStream.class' in any classloaders
Could not find class 'org/apache/camel/component/http/helper/GZIPHelper.class' in any classloaders


Note that I didn't verify in 2.2.0.","njiang:1269791227:2010-03-28T23:47:07.838+0000:1269791227:2010-03-28T23:47:07.838+0000:
I checked camel 1.6.2 and camel 2.3.0-SNAPSHOT, the package of ""org.apache.camel.component.http.helper"" is exported in these two version.
Which version of ServiceMix are you using?
Did your application bundle import the package of ""org.apache.camel.component.http.helper"" ?

fribeiro:1269831808:2010-03-29T11:03:28.796+0000:1269832984:2010-03-29T11:23:04.788+0000:I've verified that it is really in the Camel bundle, but not in my application bundle, to which it needs to be added manually. Thanks!
davsclaus:1303610458:2011-04-24T10:00:58.475+0000:1303610458:2011-04-24T10:00:58.475+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2592,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Fernando Ribeiro,0,0,2010-03-28 20:43:50+00:00,2011-04-24 10:01:31+00:00,"Like the page for the XQuery component (camel-saxon), the page for the HTTP component (camel-http) should note that camel-http needs to be added as a dependency.","njiang:1269809216:2010-03-29T04:46:56.208+0000:1269809216:2010-03-29T04:46:56.208+0000:Updated the wiki page for it.
davsclaus:1269819438:2010-03-29T07:37:18.999+0000:1269819438:2010-03-29T07:37:18.999+0000:Fernando please look at the components overview page
http://camel.apache.org/components.html

The artifact id of the maven .jar is listed there

For example:
IMap / camel-mail

which means you need camel-mail for the *imap* scheme.
fribeiro:1269829475:2010-03-29T10:24:35.374+0000:1269829475:2010-03-29T10:24:35.374+0000:Willem,

Thanks for the update.

Claus,

I know it is, but asked for the update after finding that developers in my team refer to the component page first, probably because of the rank in Google.
davsclaus:1303610491:2011-04-24T10:01:31.034+0000:1303610491:2011-04-24T10:01:31.034+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2591,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Fernando Ribeiro,0,0,2010-03-28 20:38:10+00:00,2011-04-24 10:01:34+00:00,"Like the page for the XQuery component (camel-saxon), the page for the Quartz component (camel-quartz) should note that camel-quartz needs to be added as a dependency.","njiang:1269809170:2010-03-29T04:46:10.135+0000:1269809170:2010-03-29T04:46:10.135+0000:Updated the wiki page for it.
davsclaus:1303610494:2011-04-24T10:01:34.997+0000:1303610494:2011-04-24T10:01:34.997+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2590,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-28 10:51:54+00:00,2011-04-24 10:01:28+00:00,"Defer direct endpoints so we ensure graceful shutdown will complete messages from routes started with a direct endpoint.
Otherwise we risk to loose the message since the direct consumer will WARN log and swallow the message.","davsclaus:1269759676:2010-03-28T15:01:16.962+0000:1269759676:2010-03-28T15:01:16.962+0000:trunk: 928423.
davsclaus:1303610488:2011-04-24T10:01:28.053+0000:1303610488:2011-04-24T10:01:28.053+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2589,New Feature,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-28 08:25:43+00:00,2011-04-24 10:01:10+00:00,"So people with large files can transforms using streams and have it stored directly into files instead of in memory.


It should be possible to set a header or some other way to specify what the file name should be.","davsclaus:1269854963:2010-03-29T17:29:23.610+0000:1269854963:2010-03-29T17:29:23.610+0000:trunk: 928841.
davsclaus:1303610470:2011-04-24T10:01:10.697+0000:1303610470:2011-04-24T10:01:10.697+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2588,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-28 08:23:44+00:00,2011-04-24 10:01:09+00:00,"Those options is not exposed in the xslt component, which allows end users with special uses cases to use their custom handlers.","davsclaus:1269736438:2010-03-28T08:33:58.177+0000:1269736438:2010-03-28T08:33:58.177+0000:trunk: 928359.
davsclaus:1303610469:2011-04-24T10:01:09.871+0000:1303610469:2011-04-24T10:01:09.871+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2587,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-28 08:10:29+00:00,2011-04-24 10:01:07+00:00,"As its more intuitive this way.


And it should be the new default in 2.3 onwards. The old behavior can be enabled by turning off the shutdownRoutesInReverseOrder option.","davsclaus:1269735448:2010-03-28T08:17:28.940+0000:1269735448:2010-03-28T08:17:28.940+0000:trunk: 928357.
davsclaus:1303610467:2011-04-24T10:01:07.742+0000:1303610467:2011-04-24T10:01:07.742+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2586,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Carl Johan Erik Edstrom,0,0,2010-03-28 04:43:47+00:00,2011-04-24 10:00:57+00:00,"Simple patch to allow the camel-blueprint namespacehandler resolve components outside the core language.
This makes it possible to use blueprint and routes such as from:myOwnComponent or from:jms
in a blueprint like manner along the lines of a spring context.","joed:1269722712:2010-03-28T04:45:12.545+0000:1269722712:2010-03-28T04:45:12.545+0000:Osgi-resolv patch for camel blueprint context.
davsclaus:1269760102:2010-03-28T15:08:22.113+0000:1269760102:2010-03-28T15:08:22.113+0000:trunk: 928427.

Thanks Johan for the patch.
joed:1269785095:2010-03-28T22:04:55.596+0000:1269785095:2010-03-28T22:04:55.596+0000:An additional patch file that takes care of loading in the full TypeConverter registry
from the classpath, this enables routes like 

mina:udp://0.0.0.0:10514 to work as the body otherwise would come in as null without any real error message.

During loading it'll override the existing registry and provide additional converters as follows:

[2010-03-28 15:56:12.629] DEBUG pool-9-thread-2              org.eclipse.osgi.framework.internal.core.BundleHost              edu.ucar.ral.wcsri.logging.internal.OsgiLogAdapter - Using only osgi bundle classloader 
[2010-03-28 15:56:12.629] DEBUG pool-9-thread-2              org.eclipse.osgi.framework.internal.core.BundleHost              edu.ucar.ral.wcsri.logging.internal.OsgiLogAdapter - Loading from osgi bundle using classloader: BundleDelegatingClassLoader for [camel-mina (org.apache.camel.camel-mina)] 
[2010-03-28 15:56:12.705] DEBUG pool-9-thread-2              org.eclipse.osgi.framework.internal.core.BundleHost              edu.ucar.ral.wcsri.logging.internal.OsgiLogAdapter - Found: [class org.apache.camel.component.mina.MinaConverter] 
[2010-03-28 15:56:12.705] DEBUG pool-9-thread-2              org.eclipse.osgi.framework.internal.core.BundleHost              edu.ucar.ral.wcsri.logging.internal.OsgiLogAdapter - Loading converter class: org.apache.camel.component.mina.MinaConverter

joed:1269785176:2010-03-28T22:06:16.281+0000:1269785176:2010-03-28T22:06:16.281+0000:Sorry about the second patch and re-opening, but this I think
nails the behavior to pretty much work exactly as a spring camel context.
davsclaus:1269830669:2010-03-29T10:44:29.555+0000:1269830669:2010-03-29T10:44:29.555+0000:Thanks for your efforts on this one, but its really G Nodet who works on the blueprint stuff.

I am actually not keen that he just copied CamelContextFactoryBean source code, as we do change this class quite often so I do not think his approach is feasible in the future.
I think you should get in touch with Nodet and ask if you can help on his camel-blueprint and work together with him to get it into a quality where we can accept it into the official kit.
davsclaus:1269830911:2010-03-29T10:48:31.350+0000:1269830911:2010-03-29T10:48:31.350+0000:trunk: 928707.
davsclaus:1303610457:2011-04-24T10:00:57.679+0000:1303610457:2011-04-24T10:00:57.679+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2585,Improvement,Major,None,None,"
None
",Closed,Duplicate,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-27 05:00:33+00:00,2011-04-24 10:00:50+00:00,No Desc,"njiang:1269641549:2010-03-27T06:12:29.917+0000:1269641549:2010-03-27T06:12:29.917+0000:CAMEL-2506 already resolved this issue.
davsclaus:1303610450:2011-04-24T10:00:50.469+0000:1303610450:2011-04-24T10:00:50.469+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2584,Task,Major,None,2.6.0,"
None
",Closed,Won't Fix,2.6.0,Hadrian Zbarcea,Sebb,0,0,2010-03-26 15:38:22+00:00,2011-10-25 11:35:44+00:00,"Two of the files in dist/camel/apache-camel/2.0.0/ don't have hashes or sig files. 


These are required for Apache releases.


However the directory does contain hashes for some sig files (.asc.md5) ; these can be deleted as they are useless.","davsclaus:1285490413:2010-09-26T16:40:13.787+0000:1285490413:2010-09-26T16:40:13.787+0000:Hadrian I wonder if we can add a _warning_ to the 2.0 release notes about the missing hash and sign files.

Nobody would download and use 2.0.0 release where there is 2.4.0 or better.
sebb:1285492304:2010-09-26T17:11:44.485+0000:1285492304:2010-09-26T17:11:44.485+0000:If the release 2.0.0 is not current, then please delete it from the normal download area.

Only current releases should be contained in the public download area.
E.g. you might need to maintain the 1.x line as well as the 2.x line.
davsclaus:1285534236:2010-09-27T04:50:36.514+0000:1285534236:2010-09-27T04:50:36.514+0000:I have updated the web site with a new download archives for the past releases. Then the download only contains the latest 2.x and 1.x.

Will close ticket when the static website is updated.
sebb:1285550848:2010-09-27T09:27:28.888+0000:1285550848:2010-09-27T09:27:28.888+0000:The web-site download page looks much better now.
davsclaus:1290842966:2010-11-27T15:29:26.220+0000:1290842966:2010-11-27T15:29:26.220+0000:Camel 2.0 is an old release, about 1.5 years old.

Closing this ticket."
0,CAMEL-2583,Task,Minor,"1.6.0, 2.0.0, 2.1.0",2.6.0,"
None
",Closed,Later,2.6.0,Hadrian Zbarcea,Sebb,0,0,2010-03-26 15:35:11+00:00,2011-10-25 11:35:38+00:00,"Several of the Camel download directories have index.html files in them.


This means that the server will not list the contents of the directory.


It's not a good idea, as changes to the set of files are not reflected in the web view.


The directories are:


./camel/apache-camel/2.0.0/index.html
./camel/apache-camel/2.1.0/index.html
./camel/apache-camel/1.6.2/index.html


I've only checked 


http://www.apache.org/dist/camel/apache-camel/2.0.0/index.html


but that has two files in the directory which are not in the index file.


I suggest deleting the 3 index files. If you want to add header and foooter content, use the files HEADER.html and README.html as is done elsewhere.","davsclaus:1269659141:2010-03-27T11:05:41.537+0000:1269659141:2010-03-27T11:05:41.537+0000:If I click on the link you posted then I get the directory listing.
If I remove index.html from the url and hit refresh I still get the directory listing.

{code}
Index of /content/repositories/releases/org/apache/camel/apache-camel/2.0.0/

Name	Last Modified	Size	Description
Parent Directory
apache-camel-2.0.0.pom	 Tue Aug 18 18:24:08 GMT+00:00 2009	 19309	  
apache-camel-2.0.0.pom.asc	 Tue Aug 18 18:29:46 GMT+00:00 2009	 832	  
apache-camel-2.0.0.pom.asc.md5	 Tue Aug 18 18:29:46 GMT+00:00 2009	 32	  
apache-camel-2.0.0.pom.asc.sha1	 Tue Aug 18 18:29:46 GMT+00:00 2009
{code}

I am using Mac with Safari

What OS and browser are you using?
sebb:1269667010:2010-03-27T13:16:50.384+0000:1269667010:2010-03-27T13:16:50.384+0000:I'm using Firefox on Win/XP, but that is irrelevant, because it's a server configuration issue.

Please look at the following listing carefully:
{code}
ls -l /www/www.apache.org/dist/camel/apache-camel/2.0.0/
total 64066
-rw-rw-r--  1 hadrian   camel   5715689 Oct 19 15:57 apache-camel-2.0.0-src.tar.gz
-rw-rw-r--  1 hadrian   camel  11658558 Oct 19 15:57 apache-camel-2.0.0-src.zip
-rw-rw-r--  1 apbackup  camel     19309 Aug 18  2009 apache-camel-2.0.0.pom
-rw-rw-r--  1 apbackup  camel       832 Aug 18  2009 apache-camel-2.0.0.pom.asc
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.pom.asc.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.pom.asc.sha1
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.pom.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.pom.sha1
-rw-rw-r--  1 apbackup  camel   7391978 Aug 18  2009 apache-camel-2.0.0.tar.gz
-rw-rw-r--  1 apbackup  camel       832 Aug 18  2009 apache-camel-2.0.0.tar.gz.asc
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.tar.gz.asc.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.tar.gz.asc.sha1
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.tar.gz.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.tar.gz.sha1
-rw-rw-r--  1 apbackup  camel   7814675 Aug 18  2009 apache-camel-2.0.0.zip
-rw-rw-r--  1 apbackup  camel       832 Aug 18  2009 apache-camel-2.0.0.zip.asc
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.zip.asc.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.zip.asc.sha1
-rw-rw-r--  1 apbackup  camel        32 Aug 18  2009 apache-camel-2.0.0.zip.md5
-rw-rw-r--  1 apbackup  camel        40 Aug 18  2009 apache-camel-2.0.0.zip.sha1
-rw-rw-r--  1 apbackup  camel      8717 Aug 24  2009 index.html
{code}
Note that the first two files are *not* shown in the index.html
davsclaus:1269675481:2010-03-27T15:38:01.223+0000:1269675481:2010-03-27T15:38:01.223+0000:Thanks for clarifying this. I am sure Hadrian can use this information and have those index.html files deleted.
davsclaus:1285490082:2010-09-26T16:34:42.440+0000:1285490082:2010-09-26T16:34:42.440+0000:Hadrian could you take a look and this and delete any index.html files we have in the dist?
davsclaus:1294701996:2011-01-11T07:26:36.784+0000:1294701996:2011-01-11T07:26:36.784+0000:Sebb can you delete the index.html files yourself?
Hadrian doesn't seem to take action on this issue.
sebb:1295246322:2011-01-17T14:38:42.326+0000:1295246322:2011-01-17T14:38:42.326+0000:No, I cannot delete the files.

The index.html files are no longer present in the mirrored distribution site, however they have been archived, which means that some of the archive files are not accessible.

The following files need to be deleted:

./camel/apache-camel/2.0.0/index.html
./camel/apache-camel/2.1.0/index.html
./camel/apache-camel/1.6.2/index.html
./camel/apache-camel/2.0-M2/index.html

from 

/www/archive.apache.org/dist

This can be done by anyone with the ""camel"" group id, which should be all Camel PMC members at least.
hadrian:1295247207:2011-01-17T14:53:27.353+0000:1295247207:2011-01-17T14:53:27.353+0000:I removed the index files in the archives as well.

@Claus, funny..."
0,CAMEL-2582,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-26 11:53:37+00:00,2011-04-24 10:00:59+00:00,No Desc,"njiang:1271292063:2010-04-15T08:41:03.244+0000:1271292063:2010-04-15T08:41:03.244+0000:Add document for [camel-spring-security|https://cwiki.apache.org/confluence/display/CAMEL/Spring+Security] and [camel-example-spring-security|https://cwiki.apache.org/confluence/display/CAMEL/Spring+Security+Example]
davsclaus:1303610459:2011-04-24T10:00:59.703+0000:1303610459:2011-04-24T10:00:59.703+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2581,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-26 11:53:21+00:00,2011-04-24 10:01:34+00:00,"This example is leverage the spring security to authenticate the request with basic http authentication, then do the access control by checking the authentication with different role.",davsclaus:1303610494:2011-04-24T10:01:34.053+0000:1303610494:2011-04-24T10:01:34.053+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2580,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-26 11:51:57+00:00,2011-04-24 10:00:55+00:00,"We can leverage Camel Policy to plugin the AuthorizationPolicy without touch the camel-core.
And it is easy to people to implement his customer AuthorizationPolicy which is based on other Security framework.","njiang:1270781259:2010-04-09T10:47:39.561+0000:1270781259:2010-04-09T10:47:39.561+0000:committed the main code to camel trunk.
http://svn.apache.org/viewvc?rev=932339&view=rev
davsclaus:1303610455:2011-04-24T10:00:55.228+0000:1303610455:2011-04-24T10:00:55.228+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2579,New Feature,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,1,1,2010-03-26 11:51:21+00:00,2011-04-24 10:00:57+00:00,"We could store the SecurityContext into Message Exchange after authentication,  and implement AuthorizationHandler (just like the errorHandler) to secure the endpoint.","davsclaus:1269831152:2010-03-29T10:52:32.935+0000:1269831152:2010-03-29T10:52:32.935+0000:Willem I have moved this to 2.4 as its not in the timeframe to incorporate such a major work as adding a security concept into camel.
njiang:1273726651:2010-05-13T12:57:31.592+0000:1273726651:2010-05-13T12:57:31.592+0000:As the most work are done, we can close this issue and leave the schema sub issue open.
davsclaus:1303610457:2011-04-24T10:00:57.849+0000:1303610457:2011-04-24T10:00:57.849+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2578,Task,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Yaytay,0,0,2010-03-26 07:41:53+00:00,2011-04-24 10:01:28+00:00,"The FileConsumerAbsoluteRootPathDefaultMoveTest test contains:
    @Override
    protected void setUp() throws Exception 

{
        base = ""/temp"";
        deleteDirectory(base);
        super.setUp();
    }


This deletes C:\Temp, and its entire contents, without any warning.
This risks:



Losing things that the user does not want to lose (at a potential cost of both time and money).
Breaking other programs storing files there.
Falling foul of sensible permissions that prevent normal users from creating/deleting files in the root.
It also leaves the /temp file there after execution, which it has no right to do.",davsclaus:1303610488:2011-04-24T10:01:28.908+0000:1303610488:2011-04-24T10:01:28.908+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2577,Bug,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-26 07:10:52+00:00,2011-04-24 10:01:31+00:00,"Follow route use a default-error-handler for the route, and also defined  a
custom exception handle logic using try-catch-pattern.


But if the ""myProcessRaiseError"" raised exception the catch-clause cannot be
invoked; Why? Is it camel's bug?




<route>
     <from uri=""ws:... ""/>
        <bean ...>
       <doTry>
        <filter>
               <simple>${body} == 'firstChoice'</simple>
                     <bean ref=""myProcess"" />
                     <bean ref=""myProcessRaiseError""/>
             </filter>
               <doCatch>
                       ..some error handler...
               </doCatch>
       </doTry>
    <process ...>
</route>","davsclaus:1269830317:2010-03-29T10:38:37.058+0000:1269830317:2010-03-29T10:38:37.058+0000:trunk: 928696.
davsclaus:1303610491:2011-04-24T10:01:31.501+0000:1303610491:2011-04-24T10:01:31.501+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2576,Improvement,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-26 03:23:36+00:00,2011-04-24 10:01:35+00:00,"These two methods will be replaced by 

{get|set}

RedeliveryDelay.","davsclaus:1269561868:2010-03-26T08:04:28.206+0000:1269561868:2010-03-26T08:04:28.206+0000:additional renames in commit: 927722.
davsclaus:1303610495:2011-04-24T10:01:35.576+0000:1303610495:2011-04-24T10:01:35.576+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2575,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Jejomar Dimayuga,0,0,2010-03-26 03:00:20+00:00,2011-04-24 10:01:36+00:00,"CXFRS Routing in Camel 2.0.0 works  well with these endPoints:


<cxf:rsServer id=""restRouter"" address=""/restRouter/""	
      serviceClass=""com.project.service.impl.ServiceManagerImpl""   />


     <cxf:rsClient id=""restEndpoint"" address=""http://localhost:8080/services/rest""
      serviceClass=""com.project.service.impl.ServiceManagerImpl"" />


In Camel 2.2.0, Routing fails with error causing the CXF Client to invoke a 404 not found Rest Service which is 'http://localhost:8080/services/rest/restRouter/Path'.


The address of cxf:rsClient is being appended by the cxf:rsServer's address","jejmaster:1269545760:2010-03-26T03:36:00.023+0000:1269545760:2010-03-26T03:36:00.023+0000:Follow up. It uses CXF 2.2.6
njiang:1269802746:2010-03-29T02:59:06.694+0000:1269802746:2010-03-29T02:59:06.694+0000:Here is [the mail thread|http://old.nabble.com/CXFRS-Routing-in-2.2.0-does-not-behave-like-in-2.0.0-ts28038017.html] which is discussing about this issue. 
njiang:1269802804:2010-03-29T03:00:04.235+0000:1269802804:2010-03-29T03:00:04.235+0000:I just committed a quick fix for this issue,  it relates to the message header of Exchange.HTTP_PATH.
davsclaus:1303610496:2011-04-24T10:01:36.498+0000:1303610496:2011-04-24T10:01:36.498+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2574,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-24 15:55:46+00:00,2011-04-24 10:01:22+00:00,Its good to have the MEP by default logged when using the log component.,"davsclaus:1269417441:2010-03-24T15:57:21.113+0000:1269417441:2010-03-24T15:57:21.113+0000:trunk: 927094.
davsclaus:1303610482:2011-04-24T10:01:22.327+0000:1303610482:2011-04-24T10:01:22.327+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2573,Bug,Major,2.2.0,,"
None
",Closed,Incomplete,None,Unassigned,Tarjei Huse,0,0,2010-03-24 12:07:50+00:00,2011-04-24 10:01:33+00:00,"I am a bit unsure if this is an Activemq or Camel bug. What happens is the following:


I got a route:
@Override
	public void configure() throws Exception 

{
		/* expects byte message of contentitem + header with index : ArrayList<Index> list */
		from(incomming)
			.routeId(routeName)
			.onException(Exception.class)
				
				.log(""Stopping route due to exception"")
				.process(new RouteStoppingProccesor(routeName))
				//.to(incomming)
				.end()
			.unmarshal(new ActiveMqProtobufDataformat())
			.bean(new ContentItemTranslator(), ""translate"")
			.processRef(""SolrPoster"") // todo add aggregator here
				;
	}


The RouteStoppingProccessor looks like this:
public class RouteStoppingProccesor implements Processor {


	private static Logger log = Logger.getLogger(""RouteStopper"");


	private final String routeName;


	public RouteStoppingProccesor(String routeName) 

{
		this.routeName = routeName;
		
	}


	@Override
	public void process(Exchange exchange) throws Exception 

{
		log.error(""\nXXXX: STOP ROUTE: "" + routeName + ""\n\n"");
		exchange.getContext().stopRoute(this.routeName);
	}


}
When the RouteStoppingProcessor is called, the processor hangs:


""DefaultMessageListenerContainer-1"" prio=10 tid=0x09607400 nid=0x1bbe in Object.wait() [0x6dbba000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)



waiting on <0xb1449530> (a java.lang.Object)
	at java.lang.Object.wait(Object.java:485)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.doShutdown(DefaultMessageListenerContainer.java:489)
locked <0xb1449530> (a java.lang.Object)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:211)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:149)
	at org.apache.camel.component.jms.JmsConsumer.doStop(JmsConsumer.java:64)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:81)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:93)
	at org.apache.camel.impl.RouteService.stopChildService(RouteService.java:212)
	at org.apache.camel.impl.RouteService.doStop(RouteService.java:180)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:81)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:100)
	at org.apache.camel.impl.DefaultCamelContext.stopRoute(DefaultCamelContext.java:632)
locked <0xb1449570> (a org.apache.camel.spring.SpringCamelContext)
	at com.scanmine.router.RouteStoppingProccesor.process(RouteStoppingProccesor.java:26)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:333)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:66)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:83)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:974)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:876)
	at java.lang.Thread.run(Thread.java:619)



This also causes the whole CamelContext to lock up. The complete output of kill - 3 + a bit of the log is attached.","tarjei@scanmine.com:1269403739:2010-03-24T12:08:59.226+0000:1269403739:2010-03-24T12:08:59.226+0000:Complete log showing threadstate when a JMS route is shut down. 
davsclaus:1269404314:2010-03-24T12:18:34.620+0000:1269404314:2010-03-24T12:18:34.620+0000:[13:14]  <cibsen> and you cannot just stop a JMS listener while its ""running""
[13:14]  <tarjei> so I cannot stop a route using JMS then.
[13:15]  <cibsen> you can ""suspend"" it instead which could work while its running
[13:15]  <cibsen> http://camel.apache.org/route-throttling-example.html
[[13:15]  <cibsen> its not that easy since you are ""sawing"" the branch you are sitting on
[13:15]  <cibsen> look at that example and use suspend instead of stop to see if that works
davsclaus:1303610493:2011-04-24T10:01:33.449+0000:1303610493:2011-04-24T10:01:33.449+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2541,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-12 11:14:17+00:00,2011-04-24 09:57:47+00:00,"With these features.xml , the example could be deployed into OSGi container more easily.","njiang:1268940111:2010-03-19T03:21:51.679+0000:1268940111:2010-03-19T03:21:51.679+0000:Added features file for camel-example-aggregate, camel-example-cafe, camel-example-cxf
njiang:1269377645:2010-03-24T04:54:05.287+0000:1269377645:2010-03-24T04:54:05.287+0000:Added most feature into example  except camel-example-gae (can't run with OSGi),  camel-example-reportincident (war file). camel-example-bam.
davsclaus:1286414556:2010-10-07T09:22:36.073+0000:1286414556:2010-10-07T09:22:36.073+0000:Had to remove the filtering in the pom.xml in the etl example as it causes mvn eclipse:eclipse to break.


davsclaus:1303610267:2011-04-24T09:57:47.911+0000:1303610267:2011-04-24T09:57:47.911+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2540,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Anand,0,0,2010-03-11 15:33:58+00:00,2011-04-24 10:01:30+00:00,"here is my route:


		from(""mina:tcp://localhost:6202?textline=true&sync=true"").process(new Processor() {
		    public void process(Exchange exchange) throws Exception 

{
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(5000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		    }

		});


		from(""file:///test/test/response"")
		.convertBodyTo(String.class)//.threads(1)
		.toAsync(""mina:tcp://localhost:6202?sync=true&textline=true"",10)
		.to(""log:+++ reply++++""); 


here is the output, you can see all reply logs have a same message body and async process is releasing all threads at the first response, this is probably Mina component bug in the context of aync route.


2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG Total 3 files to consume
2010-03-11 10:21:16,405 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt]]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=MinaProducer(0x2e6c66)
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] MinaProducer                   DEBUG Starting producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] ProducerCache                  DEBUG Adding to producer service pool with key: Endpoint[mina://tcp://localhost:6202?sync=true&textline=true] for producer: Producer[mina://tcp://localhost:6202?sync=true&textline=true]
2010-03-11 10:21:16,452 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,452 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt]]
2010-03-11 10:21:16,467 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,467 [Camel thread 11: FileComponent] FileConsumer                   DEBUG About to process file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[GenericFileMessage with file: GenericFile[C:\test\test\response\New Text Document (3).txt]]
2010-03-11 10:21:16,467 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Creating connector to address: localhost/127.0.0.1:6202 using connector: org.apache.mina.transport.socket.nio.SocketConnector@16cefa8 timeout: 30000 millis.
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3362
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.1] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3363
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.0] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,499 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,499 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 22: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3363
2010-03-11 10:21:16,514 [amel thread 24: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3362
2010-03-11 10:21:16,514 [amel thread 23: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello2
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello3
2010-03-11 10:21:16,514 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:16,514 [amel thread 25: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Writing body : hello1
2010-03-11 10:21:16,514 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:16,514 [3: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [2: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [4: SendAsyncProcessor-Producer] MinaProducer                   DEBUG Waiting for response
2010-03-11 10:21:16,530 [ SocketAcceptorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for /127.0.0.1:3374
2010-03-11 10:21:16,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:16,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello2
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello2
2010-03-11 10:21:21,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello2
2010-03-11 10:21:21,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:21,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello3
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,530 [:6202?sync=true&textline=true]] SendProcessor                  DEBUG Async reply received now routing the Exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] DefaultManagementAgent         DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0spj1/cameltest,type=producers,name=Producer(0x16321e6)
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProcessorEndpoint$1            DEBUG Starting producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] ProducerCache                  DEBUG Adding to producer cache with key: Endpoint[log://+++ reply++++] for producer: Producer[log://+++ reply++++]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,546 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy (2) of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] +++ reply++++                  INFO  Exchange[BodyType:String, Body:Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] GenericFileOnCompletion        DEBUG Done processing file: GenericFile[C:\test\test\response\New Text Document (3).txt] using exchange: Exchange[Message: Bye 1hello2]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\Copy of New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy (2) of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to delete file: C:\test\test\response\New Text Document (3).txt.camelLock with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\Copy of New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\Copy of New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] nericFileRenameProcessStrategy DEBUG Renaming file: GenericFile[C:\test\test\response\New Text Document (3).txt] to: GenericFile[C:\test\test\response\.camel\New Text Document (3).txt]
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy (2) of New Text Document (3).txt to: C:\test\test\response\.camel\Copy (2) of New Text Document (3).txt with result: true
2010-03-11 10:21:21,561 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\Copy of New Text Document (3).txt to: C:\test\test\response\.camel\Copy of New Text Document (3).txt with result: true
2010-03-11 10:21:21,577 [:6202?sync=true&textline=true]] FileUtil                       DEBUG Tried 1 to rename file: C:\test\test\response\New Text Document (3).txt to: C:\test\test\response\.camel\New Text Document (3).txt with result: true
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Received body: hello1
2010-03-11 10:21:26,530 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello3
2010-03-11 10:21:26,530 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] MinaConsumer                   DEBUG Writing body: Bye 1hello1
2010-03-11 10:21:31,531 [SocketConnectorIoProcessor-0.2] ExecutorFilter                 DEBUG Launching thread for localhost/127.0.0.1:6202
2010-03-11 10:21:31,531 [amel thread 26: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for /127.0.0.1:3374
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] MinaProducer                   DEBUG Message received: Bye 1hello1
2010-03-11 10:21:31,531 [amel thread 27: MinaThreadPool] ExecutorFilter                 DEBUG Exiting since queue is empty for localhost/127.0.0.1:6202","davsclaus:1269221285:2010-03-22T09:28:05.477+0000:1269221285:2010-03-22T09:28:05.477+0000:trunk: 926008.

Thanks for reporting. You are welcome to try this fix on your system.
davsclaus:1303610490:2011-04-24T10:01:30.156+0000:1303610490:2011-04-24T10:01:30.156+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2539,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-11 11:57:57+00:00,2011-04-24 10:01:37+00:00,"This allows you to build route policies which for example can be controlled by a scheduler or the likes to start/stop routes according to a time schedule.


Having onInit(Route route) allows you to get hold of the route before CamelContext and the routes has been started. Which allows your scheduler having access to the routes it may have to start / stop.","davsclaus:1268280351:2010-03-11T12:05:51.797+0000:1268280351:2010-03-11T12:05:51.797+0000:trunk: 921816.
davsclaus:1303610497:2011-04-24T10:01:37.689+0000:1303610497:2011-04-24T10:01:37.689+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2538,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-11 09:54:57+00:00,2011-04-24 10:00:50+00:00,"This allows to consume files and use the move option(s) from the file component so it will move the file after the route is done.


See nabble
http://old.nabble.com/Quartz-confusion-ts27819970.html","davsclaus:1268275147:2010-03-11T10:39:07.846+0000:1268275147:2010-03-11T10:39:07.846+0000:trunk: 921790.
davsclaus:1303610450:2011-04-24T10:00:50.295+0000:1303610450:2011-04-24T10:00:50.295+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2537,Improvement,Major,2.0.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Jeff Sprankle,0,0,2010-03-10 21:06:57+00:00,2011-04-24 10:00:45+00:00,"My project uses ActiveMQ and we have a requirement to support priority queues for one or more of our configured queues.  One of the suggestions under the ActiveMQ FAQ is to use a Resequencer, so I followed the link and applied the <resequence> element to my XML-based route.  While testing this functionality we uncovered a couple issues that seem like they should be addressed in a future release of camel-core.



The JMSPriority header is not a unique field and internally the Resequencer class uses java.util.Set to collect messages into a batch.  This means that a given batch cannot contain multiple messages with the same JMSPriority.  For example, if I use the default batch config and submit five messages with JMSPriority=6 to the queue within a second, only one of those message is delivered to the configured endpoint.
According to the JMS API, priority has ten values where 0 is the lowest and 9 is the highest.  This means that messages with higher priorities should be processed before messages with lower priorities.  When I configure my resequencer with <header>JMSPriority</header>, however, it by default orders the messages within the batch in ascending order which means that messages with lower priorities are processed first.



If there are any known workarounds to these issues please document them, because the current Resequencer documentation that uses JMSPriority as an example is misleading.","njiang:1268246063:2010-03-11T02:34:23.825+0000:1268246063:2010-03-11T02:34:23.825+0000:Do you use camel resequencer to do this job? If so can you show us with your test case.
In this way, we can dig the issue more easily.
davsclaus:1268258082:2010-03-11T05:54:42.182+0000:1268258082:2010-03-11T05:54:42.182+0000:Jeff, we love contributions
http://camel.apache.org/contributing.html

So you may consider help with the wiki documentation etc.
davsclaus:1268258207:2010-03-11T05:56:47.771+0000:1268258207:2010-03-11T05:56:47.771+0000:I have fixed the wiki documentation
http://cwiki.apache.org/confluence/display/CAMEL/Resequencer
davsclaus:1268258301:2010-03-11T05:58:21.249+0000:1268258301:2010-03-11T05:58:21.249+0000:No you cannot resequence based on JMSPriority as its not an unique number as you also say.
markyou:1274040364:2010-05-17T04:06:04.435+0000:1274040489:2010-05-17T04:08:09.018+0000:I don't see any change in batch mode description about unique number, but in stream mode,  the wiki says the message should have unique sequence number. I think original problem is resequencer batch mode should support duplicate priority number, otherwise we can't use this pattern to do priority queue.

For example:
     In common sense, we usually define a limit number of priorities: 1, 2, 3, 4, 5 for example. And we just want to sort them based on priority. So there is always duplication in priority in this case. 

I think the resequencer batch mode should support this case, otherwise it will be uselesss.

My solution in this case will have to order condition, one is priority above, other is a unique number generated by UUID.randonUUID().

resequencer(header(ResourceManagerConstant.PRIORITY), header(ResourceManagerConstant.UUID)

But I don't think it's a good solution.
markyou:1274233373:2010-05-19T09:42:53.359+0000:1274233373:2010-05-19T09:42:53.359+0000:Hi Claus:
     About priority control implementation, the ActiveMq web site suggest two solution, one is resequencer patter, another is concurrent consumer number setting.

     I think resequencer support in camel with batch mode should support non unique priority order condition, because we often define several priority level.

For example, we define 1~5 priority, 1 is the highest priority and 5 is lowest priority. And we send 100 message into job queue. So there will be some messages with 1 priority and some messages with 2...

And we can use resequencer to do an order, and dispatch to a process queue, which can solve priority control problem.

I think the batch mode in resequecer support should support non unique property, and it will be a good feature to use.
davsclaus:1275635862:2010-06-04T15:17:42.913+0000:1275635862:2010-06-04T15:17:42.913+0000:Added option {{allowDuplicates}} to batch mode of resequencer.

trunk: 951440.

This at least allows us to resequence by JMSPriority where messages will have the same priority.
Next challenge is to allow to invert the expression so you can have the most important first outgoing.
davsclaus:1275637176:2010-06-04T15:39:36.807+0000:1275637176:2010-06-04T15:39:36.807+0000:Added {{reverse}} option so you can have JMSPriority ordered by 9..0 so the 9's is send out first.

So by using {{reverse + allowDuplicates}} you should be able to resequence jms messages
davsclaus:1275856791:2010-06-07T04:39:51.220+0000:1275856791:2010-06-07T04:39:51.220+0000:Updated wiki pages with details about how to use the resequencer for re-ordering jmspriority messages

See also this unit test
http://svn.apache.org/viewvc?rev=952085&view=rev
markyou:1276022450:2010-06-09T02:40:50.381+0000:1276022450:2010-06-09T02:40:50.381+0000:Great job. Thanks for help about this improvement. 
davsclaus:1303610445:2011-04-24T10:00:45.237+0000:1303610445:2011-04-24T10:00:45.237+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2536,Improvement,Major,None,None,"
None
",Closed,Duplicate,2.5.0,Hadrian Zbarcea,Beat Glattfelder,0,0,2010-03-10 17:12:14+00:00,2011-04-24 09:58:18+00:00,"Looking into rewriting our Java based order routing system using camel, I ran into several issues with the camel-quickfix component that comes with 2.1.0.  I therefore wrote a new component based on the quickfix driver code from our old app, and successfully ported our system. I would be very glad to contribute the improved component to the project, so please have a look whether you think it's usable.


The main features are:


The quickfix endpoint URL identifies a FIX session through its quickfix seesion id which is based on the sessions CompIds, thus allowing the setup of multiple sessions in one file and a concise identification of the endpoint
All Endpoints are producers as well a consumers, thus matching the asynchronous, bidirectional nature of a FIX session. Whether a session initiates a connetions or waits for one is configured in the quickfix config file.
All quickfix features (message store persistence, logging, threading model, JMX support, config file) can be configured through dependency injection, see the class QuickfixConfig.java and the quickfix config quide.


The example PassiveFixGateway demonstrates a simple FIX relay, routing messages between two FIX sessions in both directions. To run it, build the component, cd into traget/test-classes and run it. FIX Messages sent to one endpoint will appear on the other.","davsclaus:1268258408:2010-03-11T06:00:08.178+0000:1268258408:2010-03-11T06:00:08.178+0000:Thanks a lot Beat for working on this component.

Yeah we know it needs a bit of love. Charles who did some work on it in the first place to migrate it from Camel 1.x to 2.x, does not have the time to continue improving it.

davsclaus:1268258465:2010-03-11T06:01:05.347+0000:1268258465:2010-03-11T06:01:05.347+0000:Do you mind helping with the wiki documentation as well?

http://camel.apache.org/contributing.html

You may want to sign an ICLA to Apache, which allows you to edit wiki pages. And its also one step closer to become a committer etc.
http://camel.apache.org/how-do-i-edit-the-website.html
hadrian:1285681266:2010-09-28T21:41:06.501+0000:1285681266:2010-09-28T21:41:06.501+0000:Beat, 

Steve Bate submitted a complete rewrite of the camel-quickfix component and attached it to CAMEL-1350. His contribution is already committed to trunk @r1002364.

I see that you were not watching that issue. It would be great if you could take a look at the new improved camel-quickfix and let us know how it fits your needs.
beat@glattfelder.info:1285766887:2010-09-29T21:28:07.219+0000:1285766887:2010-09-29T21:28:07.219+0000:  Hadrian,
thanks for the information, I indeed was not following this thread cause 
I was not aware of it.
I will take a look at Steve's work once I get a chance to, but stick to 
the rewrite I had submitted here for the time being.



hadrian:1285778846:2010-09-30T00:47:26.328+0000:1285778846:2010-09-30T00:47:26.328+0000:Beat, it would be great if you could spend a bit of time and let us know if the new version works for you (i.e. satisfies your use case) and if not what improvements you'd like to see. We would highly appreciate your feedback.
davsclaus:1303610298:2011-04-24T09:58:18.297+0000:1303610298:2011-04-24T09:58:18.297+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2535,Task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-10 10:06:54+00:00,2011-04-24 10:01:27+00:00,"As we don't use the CxfSoap component any more, it's time to clean it up.","njiang:1268269994:2010-03-11T09:13:14.919+0000:1268269994:2010-03-11T09:13:14.919+0000:As the SoapBinding's methods are used across the camel-cxf component, so I renamed the class to CxfMessageHelper.
Other camel soap components relates file are removed in revision 921743.
davsclaus:1303610487:2011-04-24T10:01:27.908+0000:1303610487:2011-04-24T10:01:27.908+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2534,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-10 08:15:19+00:00,2011-04-24 10:01:15+00:00,No Desc,"davsclaus:1268187304:2010-03-10T10:15:04.378+0000:1268187304:2010-03-10T10:15:04.378+0000:trunk: 921281.
davsclaus:1268192542:2010-03-10T11:42:22.078+0000:1268192542:2010-03-10T11:42:22.078+0000:trunk: 921314.
davsclaus:1303610475:2011-04-24T10:01:15.461+0000:1303610475:2011-04-24T10:01:15.461+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2533,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-09 18:28:07+00:00,2011-04-24 10:00:54+00:00,This will be needed by load balancers where you may want to not use configured error handler but use custom error handling such as in failover or round robin (to ;et round robin work as it did in 1.x),"davsclaus:1268178156:2010-03-10T07:42:36.440+0000:1268178156:2010-03-10T07:42:36.440+0000:trunk: 921238.
davsclaus:1303610454:2011-04-24T10:00:54.935+0000:1303610454:2011-04-24T10:00:54.935+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2532,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-09 12:10:50+00:00,2011-04-24 10:00:42+00:00,"As we are using camel-spring-osgi bundle instead of camel-spring and camel-osgi to avoid the Class.forName issue of CamelNameSpaceHandler, we need to remove the camel-osgi and camel-spring feature entries which could introduce some side effect when the OSGi container loader the camel-spring-osgi and camel-osgi bundle at same time.","njiang:1268108092:2010-03-09T12:14:52.083+0000:1268108092:2010-03-09T12:14:52.083+0000:Removed these two entry from apache camel feautres.xml.
davsclaus:1303610442:2011-04-24T10:00:42.936+0000:1303610442:2011-04-24T10:00:42.936+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2531,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-09 01:32:18+00:00,2011-04-24 10:00:48+00:00,"The first problem I've found with using PAYLOAD is that the Tracer 
(which I was using with JPA) is no longer logging the full message contents. 
This is because it calls toString on the inbound message, but that is 
now a CxfPayload, which contains a List<Element> and Element.toString() 
does not walk the DOM. 


Here is the mail thread which discusses about it.","njiang:1268086909:2010-03-09T06:21:49.826+0000:1268086909:2010-03-09T06:21:49.826+0000:I just committed a patch which change the PayLoad toString() method, to print out the element detail message.
davsclaus:1303610448:2011-04-24T10:00:48.978+0000:1303610448:2011-04-24T10:00:48.978+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2530,New Feature,Major,"2.1.0, 2.2.0",None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Anand,0,0,2010-03-08 16:26:41+00:00,2011-04-24 10:00:49+00:00,"I get an error on deployment of application with this route.



		from(""mina:tcp://localhost:6202?textline=true&sync=true"").process(new Processor() {
		    public void process(Exchange exchange) throws Exception {
		        String body = exchange.getIn().getBody(String.class);
				Thread.sleep(10000);
		        exchange.getOut().setBody(""Bye 1"" + body);
		    }
		});
		//WaitForTaskToComplete wait = new WaitForTaskToComplete();
		from(""file:///test/test/response"")
		.convertBodyTo(String.class).threads(1)
		.toAsync(""mina:tcp://localhost:6202?sync=true&textline=true&filters=#listFilters"",1)
		.to(""log:+++ reply++++""); 




camel-context.xml



  <camelContext id=""cameltest"" xmlns=""http://camel.apache.org/schema/spring"">
	<package>test</package></camelContext>




Errror:



2010-03-08 11:05:07,021 [.kernel.Default (self-tuning)'] efaultPackageScanClassR
esolver DEBUG Cannot read entries in url: zip:C:/bea923/user_projects/domains/ia
rdomain/servers/AdminServer/tmp/_WL_user/_appsdir_CamelIAR_war/hapurq/war/WEB-IN
F/lib/_wl_cls_gen.jar!/test/
java.net.MalformedURLException: unknown protocol: c
        at java.net.URL.<init>(URL.java:574)
        at java.net.URL.<init>(URL.java:464)
        at java.net.URL.<init>(URL.java:413)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPac
kageScanClassResolver.java:264)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPac
kageScanClassResolver.java:180)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.findImplementat
ions(DefaultPackageScanClassResolver.java:146)
        at org.apache.camel.spring.RouteBuilderFinder.appendBuilders(RouteBuilde
rFinder.java:57)
        at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuilders(Cam
elContextFactoryBean.java:873)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(Ca
melContextFactoryBean.java:319)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory$1.run(AbstractAutowireCapableBeanFactory.java:409)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.createBean(AbstractAutowireCapableBeanFactory.java:380)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb
ject(AbstractBeanFactory.java:264)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr
y.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe
an(AbstractBeanFactory.java:261)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean
(AbstractBeanFactory.java:185)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean
(AbstractBeanFactory.java:164)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.
getBeansOfType(DefaultListableBeanFactory.java:308)
        at org.springframework.context.support.AbstractApplicationContext.getBea
nsOfType(AbstractApplicationContext.java:947)
        at org.springframework.context.support.AbstractApplicationContext.regist
erListeners(AbstractApplicationContext.java:701)
        at org.springframework.context.support.AbstractApplicationContext.refres
h(AbstractApplicationContext.java:377)
        at org.springframework.web.context.ContextLoader.createWebApplicationCon
text(ContextLoader.java:255)
        at org.springframework.web.context.ContextLoader.initWebApplicationConte
xt(ContextLoader.java:199)
        at org.springframework.web.context.ContextLoaderListener.contextInitiali
zed(ContextLoaderListener.java:45)
        at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run
(EventsManager.java:376)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(Authenticate
dSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:
121)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(Eve
ntsManager.java:82)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAp
pServletContext.java:1616)
        at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletCon
text.java:2761)
        at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.jav
a:889)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:333)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta
teDriver.java:204)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat
eDriver.java:60)
        at weblogic.application.internal.flow.ScopedModuleDriver.start(ScopedMod
uleDriver.java:200)
        at weblogic.application.internal.flow.ModuleListenerInvoker.start(Module
ListenerInvoker.java:117)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta
teDriver.java:204)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat
eDriver.java:60)
        at weblogic.application.internal.flow.StartModulesFlow.activate(StartMod
ulesFlow.java:26)
        at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.ja
va:635)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.
java:212)
        at weblogic.application.internal.DeploymentStateChecker.activate(Deploym
entStateChecker.java:154)
        at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(Ap
pContainerInvoker.java:80)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.ac
tivate(AbstractOperation.java:566)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.ac
tivateDeployment(ActivateOperation.java:136)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.do
Commit(ActivateOperation.java:104)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.co
mmit(AbstractOperation.java:320)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploym
entCommit(DeploymentManager.java:815)
        at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeplo
ymentList(DeploymentManager.java:1222)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(
DeploymentManager.java:433)
        at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.com
mit(DeploymentServiceDispatcher.java:161)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:181)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:12)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:67)
        at weblogic.work.ServerWorkManagerImpl$WorkAdapterImpl.run(ServerWorkMan
agerImpl.java:518)
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:209)
        at weblogic.work.ExecuteThread.run(ExecuteThread.java:181)
2010-03-08 11:05:07,099 [.kernel.Default (self-tuning)'] efaultPackageScanClassR
esolver DEBUG Cannot read entries in url: zip:C:/bea923/user_projects/domains/ia
rdomain/servers/AdminServer/tmp/_WL_user/_appsdir_CamelIAR_war/hapurq/war/WEB-IN
F/lib/_wl_cls_gen.jar!/test/
java.net.MalformedURLException: unknown protocol: c
        at java.net.URL.<init>(URL.java:574)
        at java.net.URL.<init>(URL.java:464)
        at java.net.URL.<init>(URL.java:413)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPac
kageScanClassResolver.java:264)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPac
kageScanClassResolver.java:180)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.findImplementat
ions(DefaultPackageScanClassResolver.java:146)
        at org.apache.camel.spring.RouteBuilderFinder.appendBuilders(RouteBuilde
rFinder.java:57)
        at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuilders(Cam
elContextFactoryBean.java:873)
        at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(Ca
melContextFactoryBean.java:319)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory$1.run(AbstractAutowireCapableBeanFactory.java:409)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBean
Factory.createBean(AbstractAutowireCapableBeanFactory.java:380)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getOb
ject(AbstractBeanFactory.java:264)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistr
y.getSingleton(DefaultSingletonBeanRegistry.java:222)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBe
an(AbstractBeanFactory.java:261)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean
(AbstractBeanFactory.java:185)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean
(AbstractBeanFactory.java:164)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.
getBeansOfType(DefaultListableBeanFactory.java:308)
        at org.springframework.context.support.AbstractApplicationContext.getBea
nsOfType(AbstractApplicationContext.java:947)
        at org.springframework.context.support.AbstractApplicationContext.regist
erListeners(AbstractApplicationContext.java:701)
        at org.springframework.context.support.AbstractApplicationContext.refres
h(AbstractApplicationContext.java:377)
        at org.springframework.web.context.ContextLoader.createWebApplicationCon
text(ContextLoader.java:255)
        at org.springframework.web.context.ContextLoader.initWebApplicationConte
xt(ContextLoader.java:199)
        at org.springframework.web.context.ContextLoaderListener.contextInitiali
zed(ContextLoaderListener.java:45)
        at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run
(EventsManager.java:376)
        at weblogic.security.acl.internal.AuthenticatedSubject.doAs(Authenticate
dSubject.java:321)
        at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:
121)
        at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(Eve
ntsManager.java:82)
        at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAp
pServletContext.java:1616)
        at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletCon
text.java:2761)
        at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.jav
a:889)
        at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:333)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta
teDriver.java:204)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat
eDriver.java:60)
        at weblogic.application.internal.flow.ScopedModuleDriver.start(ScopedMod
uleDriver.java:200)
        at weblogic.application.internal.flow.ModuleListenerInvoker.start(Module
ListenerInvoker.java:117)
        at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleSta
teDriver.java:204)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStat
eDriver.java:60)
        at weblogic.application.internal.flow.StartModulesFlow.activate(StartMod
ulesFlow.java:26)
        at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.ja
va:635)
        at weblogic.application.utils.StateMachineDriver.nextState(StateMachineD
river.java:26)
        at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.
java:212)
        at weblogic.application.internal.DeploymentStateChecker.activate(Deploym
entStateChecker.java:154)
        at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(Ap
pContainerInvoker.java:80)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.ac
tivate(AbstractOperation.java:566)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.ac
tivateDeployment(ActivateOperation.java:136)
        at weblogic.deploy.internal.targetserver.operations.ActivateOperation.do
Commit(ActivateOperation.java:104)
        at weblogic.deploy.internal.targetserver.operations.AbstractOperation.co
mmit(AbstractOperation.java:320)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploym
entCommit(DeploymentManager.java:815)
        at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeplo
ymentList(DeploymentManager.java:1222)
        at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(
DeploymentManager.java:433)
        at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.com
mit(DeploymentServiceDispatcher.java:161)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:181)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:12)
        at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallb
ackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:67)
        at weblogic.work.ServerWorkManagerImpl$WorkAdapterImpl.run(ServerWorkMan
agerImpl.java:518)
        at weblogic.work.ExecuteThread.execute(ExecuteThread.java:209)
        at weblogic.work.ExecuteThread.run(ExecuteThread.java:181)
2010-03-08 11:05:07,146 [.kernel.Default (self-tuning)'] efaultPackageScanClassR
esolver DEBUG Found: []
2010-03-08 11:05:07,225 [.kernel.Default (self-tuning)'] DefaultComponentResolve
r       DEBUG Found component: vm via type: org.apache.camel.component.vm.VmComp
onent via: META-INF/services/org/apache/camel/component/vm
2010-03-08 11:05:07,240 [.kernel.Default (self-tuning)'] DefaultComponent
        DEBUG Creating endpoint uri=[vm://response], path=[response], parameters
=[{}]
2010-03-08 11:05:07,334 [.kernel.Default (self-tuning)'] DefaultCamelContext
        DEBUG vm://response converted to endpoint: Endpoint[vm://response] by co
mponent: org.apache.camel.component.vm.VmComponent@1366d83
2010-03-08 11:05:07,428 [.kernel.Default (self-tuning)'] SpringCamelContext
        DEBUG onApplicationEvent: org.springframework.context.event.ContextRefre
shedEvent[source=org.springframework.web.context.support.XmlWebApplicationContex
t@1618ba7: display name [Root WebApplicationContext]; startup date [Mon Mar 08 1
1:05:03 EST 2010]; root of context hierarchy]
2010-03-08 11:05:07,428 [.kernel.Default (self-tuning)'] DefaultCamelContext
        INFO  Apache Camel 2.1.0 (CamelContext:cameltest) is starting
2010-03-08 11:05:07,428 [.kernel.Default (self-tuning)'] DefaultCamelContext
        INFO  JMX enabled. Using DefaultManagedLifecycleStrategy.
2010-03-08 11:05:07,475 [.kernel.Default (self-tuning)'] DefaultProducerServiceP
ool     DEBUG Starting service pool: org.apache.camel.impl.DefaultProducerServic
ePool@101da89
2010-03-08 11:05:07,506 [.kernel.Default (self-tuning)'] DefaultManagementAgent
        DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServ
er@19cfc31
2010-03-08 11:05:07,647 [.kernel.Default (self-tuning)'] DefaultManagementAgent
        DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0
spj1/cameltest,type=context,name=""cameltest""
2010-03-08 11:05:07,818 [.kernel.Default (self-tuning)'] DefaultManagementAgent
        DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0
spj1/cameltest,type=services,name=DefaultInflightRepository(0x1b59ef7)
2010-03-08 11:05:07,818 [.kernel.Default (self-tuning)'] DefaultComponent
        DEBUG Creating endpoint uri=[spring-event://default], path=[default], pa
rameters=[{}]
2010-03-08 11:05:07,818 [.kernel.Default (self-tuning)'] DefaultCamelContext
        DEBUG spring-event://default converted to endpoint: Endpoint[spring-even
t://default] by component: org.apache.camel.component.event.EventComponent@12b9e
3f
2010-03-08 11:05:07,834 [.kernel.Default (self-tuning)'] DefaultManagementAgent
        DEBUG Registered MBean with objectname: org.apache.camel:context=tamlft0
spj1/cameltest,type=endpoints,name=""spring-event://default""
2010-03-08 11:05:07,834 [.kernel.Default (self-tuning)'] DefaultCamelContext
        DEBUG Starting routes...
2010-03-08 11:05:07,834 [.kernel.Default (self-tuning)'] DefaultCamelContext
        DEBUG ... Routes started
2010-03-08 11:05:07,850 [.kernel.Default (self-tuning)'] DefaultCamelContext
        INFO  Apache Camel 2.1.0 (CamelContext:cameltest) started
<Mar 8, 2010 11:05:11 AM EST> <Notice> <Server> <BEA-002613> <Channel ""Default""
is now listening on 192.168.113.66:7001 for protocols iiop, t3, ldap, http.>
<Mar 8, 2010 11:05:11 AM EST> <Warning> <Server> <BEA-002611> <Hostname ""localho
st"", maps to multiple IP addresses: 192.168.113.66, 127.0.0.1>
<Mar 8, 2010 11:05:11 AM EST> <Notice> <Server> <BEA-002613> <Channel ""Default[1
]"" is now listening on 127.0.0.1:7001 for protocols iiop, t3, ldap, http.>
<Mar 8, 2010 11:05:11 AM EST> <Warning> <Server> <BEA-002611> <Hostname ""tamlft0
spj1.arcds.com"", maps to multiple IP addresses: 192.168.113.66, 127.0.0.1>
<Mar 8, 2010 11:05:11 AM EST> <Notice> <WebLogicServer> <BEA-000331> <Started We
bLogic Admin Server ""AdminServer"" for domain ""iardomain"" running in Development
Mode>
<Mar 8, 2010 11:05:11 AM EST> <Notice> <WebLogicServer> <BEA-000365> <Server sta
te changed to RUNNING>
<Mar 8, 2010 11:05:11 AM EST> <Notice> <WebLogicServer> <BEA-000360> <Server sta
rted in RUNNING mode>","davsclaus:1268084314:2010-03-09T05:38:34.167+0000:1268084314:2010-03-09T05:38:34.167+0000:Weblogic as many other J2EE servers has its special syntax for classloading and hence why it does not support Apache Camel out of the box.


skusma@arccorp.com:1268116107:2010-03-09T14:28:27.541+0000:1268116107:2010-03-09T14:28:27.541+0000:Hi Claus,

but camel 2.0.0 works fine in weblogic as a war, only 2.1.0 and 2.2.0 has this problem.

Thanks,
Anand
davsclaus:1268202532:2010-03-10T14:28:52.383+0000:1268202532:2010-03-10T14:28:52.383+0000:Hi can you test if you got this directory on your computer?
{code}
C:/bea923/user_projects/domains/iardomain/servers/AdminServer/tmp/_WL_user/_appsdir_CamelIAR_war/hapurq/war/WEB-INF/lib/_wl_cls_gen.jar!/test/
{code}

And is {{test}} a package name you are using?
skusma@arccorp.com:1268202948:2010-03-10T14:35:48.537+0000:1268202948:2010-03-10T14:35:48.537+0000:test is the package name. I can upload war file if you would like.  that weblogic tmp folder is deleted, but I can try deployment again check whether that folder exists or not.
davsclaus:1268203698:2010-03-10T14:48:18.804+0000:1268203698:2010-03-10T14:48:18.804+0000:CAMEL-1917 broke BEA WebLogic support
davsclaus:1268203830:2010-03-10T14:50:30.415+0000:1268203830:2010-03-10T14:50:30.415+0000:Okay I found the source of this problem in that linked ticket.

We should be able to restore BEA WebLogic in Camel 2.3.
skusma@arccorp.com:1268205076:2010-03-10T15:11:16.478+0000:1268205076:2010-03-10T15:11:16.478+0000:may be you want to remove 2.0.0 as affected version. is there any patch or workaround for this issue in camel 2.2.0?.
davsclaus:1268205744:2010-03-10T15:22:24.230+0000:1268205744:2010-03-10T15:22:24.230+0000:I have attached a patch to CAMEL-1917 which IMHO should fix it only WebLogic.

You can try building a release from the source code and test it asap and your system.

Wiliiam Tam is looking into his CAMEL-1917 to make his changes work with WebLogic as well.
davsclaus:1268206187:2010-03-10T15:29:47.263+0000:1268206187:2010-03-10T15:29:47.263+0000:Yeah in 2.2 you can plugin your own custom class resolver

http://camel.apache.org/pluggable-class-resolvers.html
eg a PackageScanClassResolver instance which you can copy the code from the default one and then include that patch from CAMEL-1917.

davsclaus:1268207232:2010-03-10T15:47:12.864+0000:1268207232:2010-03-10T15:47:12.864+0000:trunk: 921409.
skusma@arccorp.com:1268213646:2010-03-10T17:34:06.377+0000:1268213646:2010-03-10T17:34:06.377+0000:Thanks for the 2.2 plugin solution, weblogic deployment happens without any exceptions.
davsclaus:1268257898:2010-03-11T05:51:38.617+0000:1268257898:2010-03-11T05:51:38.617+0000:Cool

Anand do you mind trying with 2.3-SNAPSHOT to be sure that the upcoming Apache Camel 2.3 release works on WebLogic?


See details here how to get it
http://camel.apache.org/download.html
davsclaus:1303610449:2011-04-24T10:00:49.283+0000:1303610449:2011-04-24T10:00:49.283+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2529,Bug,Major,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,1,2010-03-08 10:18:12+00:00,2011-04-24 10:00:46+00:00,"This unit test can shows the issue that selector option don't work for ConsumerTemplate



@Test
    public void testConsumerTemplate() throws Exception {
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message1"", ""SIZE_NUMBER"", 1505);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message3"", ""SIZE_NUMBER"", 1300);
        template.sendBodyAndHeader(""activemq:queue:consumer"", ""Message2"", ""SIZE_NUMBER"", 1600);

        // process every exchange which is ready. If no exchange is left break
        // the loop
        while (true) {
            Exchange ex = consumer.receiveNoWait(""activemq:queue:consumer?selector=SIZE_NUMBER<1500"");
            if (ex != null) {
                Message message = ex.getIn();
                int size = message.getHeader(""SIZE_NUMBER"", int.class);
                assertTrue(""The message header SIZE_NUMBER should be less than 1500"", size < 1500);
                assertEquals(""The message body is wrong"", ""Message3"", message.getBody());
            } else {
                break;
            }
        }

    }





And here is mail thread which discusses about it.","njiang:1268026525:2010-03-08T13:35:25.766+0000:1268026525:2010-03-08T13:35:25.766+0000:committed patch for it.
davsclaus:1303610446:2011-04-24T10:00:46.673+0000:1303610446:2011-04-24T10:00:46.673+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2528,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Freeman Yue Fang,0,1,2010-03-08 03:36:23+00:00,2011-04-24 10:01:26+00:00,"otherwise will see the exception like 
javax.xml.ws.spi.FactoryFinder$ConfigurationError: Provider org.apache.axis2.jaxws.spi.Provider not found
at javax.xml.ws.spi.FactoryFinder$2.run(FactoryFinder.java:135)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.newInstance(FactoryFinder.java:122)
at javax.xml.ws.spi.FactoryFinder.access$200(FactoryFinder.java:42)
at javax.xml.ws.spi.FactoryFinder$3.run(FactoryFinder.java:255)
at javax.xml.ws.spi.FactoryFinder.doPrivileged(FactoryFinder.java:264)
at javax.xml.ws.spi.FactoryFinder.find(FactoryFinder.java:165)
at javax.xml.ws.spi.Provider.provider(Provider.java:39)
at javax.xml.ws.Service.<init>(Service.java:36)","ffang:1267990649:2010-03-08T03:37:29.192+0000:1267990649:2010-03-08T03:37:29.192+0000:patch provided
njiang:1268014356:2010-03-08T10:12:36.878+0000:1268014356:2010-03-08T10:12:36.878+0000:Applied the patch with thank to Freeman, and I also updated the jaxws API bundle which camel-soap is using.

davsclaus:1303610486:2011-04-24T10:01:26.314+0000:1303610486:2011-04-24T10:01:26.314+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2527,New Feature,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Unassigned,Stephen Gargan,0,0,2010-03-07 02:45:45+00:00,2010-03-12 02:52:20+00:00,"I've put together and extension to the DSL that will enrich exchanges with a Digital Signature cacluated using the payload. The signature is stored in a property of the exchange and can be used to verify it at a later stage. It uses the JCE under the covers and It adds the constructs 'sign' and 'verify' to the dsl. Basically it will allows you to do the following


from(""direct:sign"").sign(somePrivateKey).to(""direct:signaturetest"");


and later 


from(""direct:signaturetest"").verify(somePublicKey).to(...);


Keys can be supplied from keystores or in message headers for dynamic signing, the attached wiki page explains the feature set in more detail. 


The patch contains a binary keystore so to apply it you should run 


patch -p0 --binary -i signature-core.patch


Give it a try and see what you think. I'm also in the processor finishing up a CryptoDataFormat that uses the JCE to encrypt and decrypt exchange payloads, its about 90% done and I should get it out soon.","davsclaus:1268084546:2010-03-09T05:42:26.153+0000:1268084546:2010-03-09T05:42:26.153+0000:Stephen well done.

I got a few initial comments

We *must* not rely on any SUN code as Camel also supports IBM platforms etc.

eg this is not allowed
+import sun.misc.BASE64Encoder;


davsclaus:1268084896:2010-03-09T05:48:16.024+0000:1268084896:2010-03-09T05:48:16.024+0000:And the getShortName is for a short name :)

+    public String getShortName() {
+        return format(""verify with algorithm '%s' from provider '%s' from header '%s'"", algorithm, provider, signatureHeaderName);
+    }

i.e. that above is more like a toString()

Also can you run the code with checkstyle to ensure it comply? More details here:
http://camel.apache.org/building.html
sgargan:1268090862:2010-03-09T07:27:42.148+0000:1268090862:2010-03-09T07:27:42.148+0000:I'd a feeling that wasn't going to fly but I didn't want to add a dependency (e.g. commons-codec) particularly as this is in core. Its annoying that the JDK doesn't include standard Base64 utilities but Camel might benefit from its own. The question remains though should I Roll my own or fork one.

I'd much rather not re invent the wheel, as It would be difficult to make it any rounder than either of these :)

- http://iharder.sourceforge.net/current/java/base64/ (Public Domain)
- http://svn.apache.org/repos/asf/commons/proper/codec/trunk/src/java/org/apache/commons/codec/binary/ (Apache2)

This is not my call though. What do you prefer?

I'll make the other changes and resubmit a patch. 

davsclaus:1268100653:2010-03-09T10:10:53.900+0000:1268100653:2010-03-09T10:10:53.900+0000:I wonder if we should add this in the core and have DSL for it.

If it was a component you can use it from recipient list, routing slip and whatnot as its just an endpoint.
You can also more easily configure it as its just endpoint uris.

But of course DSL is also nice but we should also be a bit careful to not add to much in the DSL as there is many many methods already.

And if its a separate component you can leverage commons-codec to get hold of a BASE64.

Yeah I totally agree SUN has been lame not to provide such a feature out of the box.
Just as I wish they have added a cron like scheduler. 
davsclaus:1268100723:2010-03-09T10:12:03.490+0000:1268100723:2010-03-09T10:12:03.490+0000:BTW There is also a ticket about a camel-bouncycastle component. Feel free to attack this one as well, now that you are on top of JCE, certificates and the likes :)
sgargan:1268134792:2010-03-09T19:39:52.764+0000:1268134792:2010-03-09T19:39:52.764+0000:I've got a good bit of the crypto component put together. Its pretty much just a fancy DataFormat that does Symmetric encryption of the exchange payload. I need to put together the model object in core to support it and it should be good to go. An example or two wouldn't hurt either.

I agree that a signing component would also be nice and it should be very easy to put together on top of what is there. Do you feel the DSL is getting too overloaded? This really only adds Sign and verify methods to the ProcessorBuilder. You don't see any of their configuration DSL unless you use one of these so its not really that intrusive. A good ide with code completion takes all the pain out of using the DSL no matter how rich it is.

 I really like how rich Camel's DSL is and am all for the richer the better, but will defer to your judgement. Whats your call?
davsclaus:1268258031:2010-03-11T05:53:51.547+0000:1268258031:2010-03-11T05:53:51.547+0000:I only think we can add to the DSL if its part of camel-core.

Also I would like if it was possible to use a common prefix for the 2 DSL methods so they are grouped together?

Something like:
- signatureSign
- signatureVerify


sgargan:1268333540:2010-03-12T02:52:20.273+0000:1268333540:2010-03-12T02:52:20.273+0000:I've backed out the DSL changed from core and have made endpoints for them as suggested. The new code will reside in camel-crypto (aka bouncycastle) component. I'm closing this one and will add the patches for the component to the bouncycastle feature ticket.
"
0,CAMEL-2526,Improvement,Trivial,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-03-05 09:09:56+00:00,2011-04-24 10:01:31+00:00,"If you enter concurrentConsumers=99999999 then Camel creates a lot of threads for concurrent consumers on the SEDA queue.
We should validate the size is a reasonable value, at least < 1000. Maybe limit to < 500","akarpe:1270196114:2010-04-02T16:15:14.234+0000:1270196114:2010-04-02T16:15:14.234+0000:Hi Claus,

Please find attached a patch for this issue. I have tested it and it works fine.

BTW, I also added a flag, just in case there was someone out there who wanted to explicitly bypass this setting. I have set the max concurrent consumers to 500 and added an info log message on the component to record the change in case there is a component that runs into this ceiling.

I will commit it to the trunk since it is a rather trivial fix.

Cheers,

Ashwin...
akarpe:1270196836:2010-04-02T16:27:16.897+0000:1270196836:2010-04-02T16:27:16.897+0000:Patch committed as revision r930313
davsclaus:1270197169:2010-04-02T16:32:49.392+0000:1270197169:2010-04-02T16:32:49.392+0000:Ashwin I think it should thrown an IllegalArgumentException if concurrentConsumers > max.

Logging at INFO level just get unnoticed. At least it should log at WARN level instead.
But I would prefer to IllegalArgumentException instead.

Then that option limitConcurrentConsumers can be used to bypass and then you can have 9999 if you really want.


akarpe:1270199477:2010-04-02T17:11:17.090+0000:1270199477:2010-04-02T17:11:17.090+0000:Hi Claus,

No problem. I will make the changes you recommend and create another patch...

Cheers,

Ashwin...
akarpe:1270207893:2010-04-02T19:31:33.509+0000:1270207893:2010-04-02T19:31:33.509+0000:Claus,

Please see the attached patch. I have changed it per your recommendation and tested it.

Cheers,

Ashwin...
akarpe:1270208631:2010-04-02T19:43:51.864+0000:1270208631:2010-04-02T19:43:51.864+0000:Patch applied as revision r930358
davsclaus:1303610491:2011-04-24T10:01:31.804+0000:1303610491:2011-04-24T10:01:31.804+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2525,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-05 05:49:54+00:00,2011-06-04 09:13:59+00:00,"There is a new light weight and easy to use HTTP Client API
http://code.ning.com/2010/03/introducing-nings-asynchronous-http-client-library/


As I said on their discussion
http://groups.google.com/group/asynchttpclient/browse_thread/thread/95fe5f5ab4d2dc09#","davsclaus:1307076448:2011-06-03T12:47:28.884+0000:1307076448:2011-06-03T12:47:28.884+0000:Added first spike on new camel-ahc component.
Wiki page is also created.
davsclaus:1307150039:2011-06-04T09:13:59.305+0000:1307150039:2011-06-04T09:13:59.305+0000:Got the last piece fixed so it works in osgi as well"
0,CAMEL-2524,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-05 03:33:39+00:00,2011-04-24 09:58:15+00:00,"As we add some new component in camel, we need to add the feature entry for it.
It includes camel-soap, camel-nagios, camel-hawtdb.","njiang:1267732039:2010-03-05T03:47:19.017+0000:1267732039:2010-03-05T03:47:19.017+0000:Committed the patch for camel-soap.
http://svn.apache.org/viewvc?rev=919279&view=rev

We need to create osgi bundle for nagios, and hawtdb.
davsclaus:1267737914:2010-03-05T05:25:14.093+0000:1267737914:2010-03-05T05:25:14.093+0000:Isn't hawtDB not already an OSGi bundle? If not then get in touch with Hiram as its his project at the FUSE Forge.

Nagios 1.3.x is only using stuff from the JDK so I doubt you need to wrap that in a bundle.
And Nagios 2.0 onwards is an OSGi bundle already, its currently in development.
njiang:1267742426:2010-03-05T06:40:26.113+0000:1267742426:2010-03-05T06:40:26.113+0000:@Claus
HawtDB isn't an OSGI bundle. I'm trying to create a patch for it.
For Nagios 1.3.x, we could use just wrap url in the feature, but I think it should be better to create OSGi bundle wrap for it in Service.

davsclaus:1303610295:2011-04-24T09:58:15.512+0000:1303610295:2011-04-24T09:58:15.512+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2523,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-04 13:44:50+00:00,2011-04-24 10:00:36+00:00,"Then you can remove multiple headers in one go, eg to remove all Camel headers you just do removeHeaders(""Camel*""). in the Java DSL.


It should support the same notation as the interceptors with * for wildcard, and regexp as well.","davsclaus:1267688184:2010-03-04T15:36:24.307+0000:1267688184:2010-03-04T15:36:24.307+0000:trunk: 919025.
davsclaus:1303610436:2011-04-24T10:00:36.916+0000:1303610436:2011-04-24T10:00:36.916+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2522,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-04 13:28:12+00:00,2011-04-24 10:00:54+00:00,"For example to convert to String



<simple>Hello ${bodyAs(String)} how are you?</simple>




To ensure the body is converted to a String, for example if its a byte[] or stream, then you want the data to be converted to String in the expression.","davsclaus:1267681094:2010-03-04T13:38:14.977+0000:1267681094:2010-03-04T13:38:14.977+0000:trunk: 918985.
davsclaus:1303610454:2011-04-24T10:00:54.409+0000:1303610454:2011-04-24T10:00:54.409+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2521,Improvement,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-04 09:10:08+00:00,2011-04-24 10:00:48+00:00,"To ensure evicted entries is ordered so first expired is first, and last is last.


This ensures eg the aggregator output expired aggregated messages in a consistent order.","davsclaus:1267669373:2010-03-04T10:22:53.383+0000:1267669373:2010-03-04T10:22:53.383+0000:trunk: 918924.
davsclaus:1303610448:2011-04-24T10:00:48.818+0000:1303610448:2011-04-24T10:00:48.818+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2520,Bug,Major,2.3.0,,"
None
",Closed,Won't Fix,None,Willem Jiang,Dragisa Krsmanovic,0,0,2010-03-03 21:26:07+00:00,2011-04-24 10:01:24+00:00,"Getting NPE when trying to do assertion like this result.allMessages().xpath(""/foo"", String.class).isEqualTo(""bar"");","dragisak:1267622831:2010-03-03T21:27:11.462+0000:1267622831:2010-03-03T21:27:11.462+0000:Unit test that demonstrates the problem.
njiang:1267668000:2010-03-04T10:00:00.225+0000:1267668000:2010-03-04T10:00:00.225+0000:@Drapisa,

The .xpath() DSL can't work after the  result.allMessages().
I just changed the code to be 
{code}
        XPathExpression xpath = new XPathExpression(""/foo = 'bar'"");
        xpath.setResultType(Boolean.class);
        result.allMessages().body().matches(xpath);
{code}


davsclaus:1303610484:2011-04-24T10:01:24.469+0000:1303610484:2011-04-24T10:01:24.469+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2519,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Won't Fix,2.3.0,Willem Jiang,Claus Ibsen,0,0,2010-03-03 08:28:11+00:00,2011-04-24 10:01:40+00:00,"By default camel-jetty will use http error code 500. But end user may override and set a specific error code to use instead


See nabble:
http://old.nabble.com/Return-exception-message-in-HTTP-body-ts27757151.html


For example in DSL directly



onException(ValidationException).setHeader(Exchange.HTTP_RESPONSE_CODE, constant(HttpServletResponse.SC_BAD_REQUEST));","njiang:1267592103:2010-03-03T12:55:03.184+0000:1267592103:2010-03-03T12:55:03.184+0000:trunk 
http://svn.apache.org/viewvc?rev=918453&view=rev
davsclaus:1267592448:2010-03-03T13:00:48.590+0000:1267592448:2010-03-03T13:00:48.590+0000:The only issue I can think of is that if you have a route like this
{code}
from jetty -> to http -> bean process (which throw an exception)
{code}

eg we go a {{to(""http://somewhere"")}} in the middle. Now that one will populate the headers with the response code from calling the {{somewhere}} server.
And that will most likely be 200, which then fools later when an exception is thrown.

Willem can you add such an unit test, and think how we can fix this?

eg. we are bitten by the problem that Roman also pointed out in a couple of days ago. eg information vs. user set headers.



njiang:1267597262:2010-03-03T14:21:02.811+0000:1267597262:2010-03-03T14:21:02.811+0000:@ Claus,

I just added a test case as you said, and found a way to fix the issue by setting the message header after the onException(Exception.class).
davsclaus:1267660007:2010-03-04T07:46:47.435+0000:1267660007:2010-03-04T07:46:47.435+0000:We need to use a special key, something like {{Exchange.HTTP_CUSTOM_RESPONSE_CODE}} which is the header the end user *must* use to set a custom error code.

Otherwise it will clash with {{Exchange.HTTP_RESPONSE_CODE}} which has been set as an information header if you invoked an external http service using eg http, restlet, cxf etc.
davsclaus:1267662255:2010-03-04T08:24:15.696+0000:1267662255:2010-03-04T08:24:15.696+0000:I have just committed an unit test which demonstrates the issue - JettyCallHttpThenExceptionTest.
Its set to be @Ignored. But if you run it, it will fail.

Another issue may be the Content-Length which may have an impact as well.
Also i had to convert to String to ensure I could read the reply properly, I wonder if the Jetty stream will cut it short or something.
njiang:1267662322:2010-03-04T08:25:22.831+0000:1267662322:2010-03-04T08:25:22.831+0000:Current walk around solution (without breaking the back ward compatible)  is we need to overrule the Exchange.HTTP_RESPONSE_CODE when the exception is thrown.
davsclaus:1267662480:2010-03-04T08:28:00.381+0000:1267662480:2010-03-04T08:28:00.381+0000:Willem take a look at the new unit test and it should make it clear why the code does not work as its now.

You end up with a status code 200 returned to the original client, even if there was an exception thrown and it failed.
davsclaus:1267662528:2010-03-04T08:28:48.284+0000:1267662528:2010-03-04T08:28:48.284+0000:And since this is a new feature I would rather -1 it to avoid that big problem above ^^^.

The end user can just use a custom {{HttpBinding}} to implement his own logic as he also did.
njiang:1267663035:2010-03-04T08:37:15.331+0000:1267663035:2010-03-04T08:37:15.331+0000:@Claus,
That is the side effect which we let the user to override the response code when the exception is thrown.
The solution that I have is to remove the ""Exchange.HTTP_RESPONSE_CODE"" header after the http endpoint or adding the below code in the route
{code}
  onException(IllegalArgumentException.class).setOutHeader(Exchange.HTTP_RESPONSE_CODE, constant(HttpServletResponse.SC_INTERNAL_SERVER_ERROR));
{code}
njiang:1267663348:2010-03-04T08:42:28.384+0000:1267663348:2010-03-04T08:42:28.384+0000:I agree we can't fix this side effect unless we introduce an HTTP header overrule  mechanism and it will break the back ward compatibility.
I will revert my patch of this issue.
njiang:1267664903:2010-03-04T09:08:23.855+0000:1267664951:2010-03-04T09:09:11.380+0000:Revert my patch ,  http://svn.apache.org/viewvc?rev=918901&view=rev
As the fix caused some side effect, as we can't resolve the Exchange.HTTP conflict without breaking the back compatible.
davsclaus:1303610500:2011-04-24T10:01:40.456+0000:1303610500:2011-04-24T10:01:40.456+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2518,Test,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Christian Schneider,0,0,2010-03-03 07:36:30+00:00,2010-03-18 19:12:53+00:00,"The test results are added as an attachment


Running org.apache.camel.component.jetty.SpringHttpsRouteTest
2010-03-03 08:30:48.092:INFO::jetty-6.1.22
2010-03-03 08:30:48.100:INFO::Started SslSocketConnector@localhost:9080
2010-03-03 08:30:48.183:WARN::EXCEPTION 
javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
	at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
	at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1682)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1112)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1139)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
	at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:675)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
2010-03-03 08:30:49.404:INFO::jetty-6.1.22
2010-03-03 08:30:49.411:INFO::Started SslSocketConnector@localhost:9080
2010-03-03 08:30:49.438:WARN::EXCEPTION 
javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?
	at com.sun.net.ssl.internal.ssl.InputRecord.handleUnknownRecord(InputRecord.java:523)
	at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:355)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:789)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1112)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1139)
	at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123)
	at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:675)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 3.556 sec <<< FAILURE!


Running org.apache.camel.component.jetty.HttpRouteUsingUrlPostTest
2010-03-03 08:31:27.291:INFO::jetty-6.1.22
2010-03-03 08:31:27.294:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:28.029:INFO::jetty-6.1.22
2010-03-03 08:31:28.032:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:28.637:INFO::jetty-6.1.22
2010-03-03 08:31:28.639:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:29.210:INFO::jetty-6.1.22
2010-03-03 08:31:29.213:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:29.773:INFO::jetty-6.1.22
2010-03-03 08:31:29.777:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:30.465:INFO::jetty-6.1.22
2010-03-03 08:31:30.467:INFO::Started SelectChannelConnector@localhost:9080
2010-03-03 08:31:31.154:INFO::jetty-6.1.22
2010-03-03 08:31:31.156:INFO::Started SelectChannelConnector@localhost:9080
Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.648 sec <<< FAILURE!","davsclaus:1267573948:2010-03-03T07:52:28.863+0000:1267573948:2010-03-03T07:52:28.863+0000:Christian please do not spam JIRA with local test failures on your system.

Run the tests multiple times and ensure you got a fast system to run the tests. Only use JIRA to submit patches for improvements etc.

Many of the HTTP based tests can fail on windows because it may not be able to grant a free port to be used for the unit testing.
So dig into those unit tests and see the real cause instead of just attaching a html report.

Sorry for being _grumpy_ but we gotta keep JIRA without noise
cschneider:1267613735:2010-03-03T18:55:35.861+0000:1267613735:2010-03-03T18:55:35.861+0000:Of course I will try to help find the real cause. I just thought you might be interested in failing tests. If this is not the case I will of course stop posting test results. 

Is there a system where I can see that the tests run? If I have a failing test it could be just my system or the test could fail anywhere. It would of course help if there is an openly available system where I can see that the tests run in the environment they were designed for.

The problem for me is that the build does not run for me. That makes contributing extremly difficult as I can not start from a base where all tests are green. But again if you don´t want to know of failing tests I can stop posting them.
davsclaus:1267613969:2010-03-03T18:59:29.945+0000:1267613969:2010-03-03T18:59:29.945+0000:Use the camel-dev / camel-user to post your issues at first. That is the best place to discuss this, then when we have digged some more a JIRA ticket can be created if there is a real problem.

You can check Apache infra as it got Hudson as CI server.
davsclaus:1267681180:2010-03-04T13:39:40.623+0000:1267681180:2010-03-04T13:39:40.623+0000:Christian can you run there tests one more time? To ensure they keep failing on your system?

And if possible check out why they fail, eg grab the stacktrace etc. Often jetty/http tests fails due to port number already in use etc.
cschneider:1267801737:2010-03-05T23:08:57.288+0000:1267801737:2010-03-05T23:08:57.288+0000:Currently only the SpringHttpsRouteTest is failing. Interestingly it only fails when run from maven together with the other tests.
When I run the tests from Eclipse all is well. When I run maven with the command to run only this single test is also does not fail.

At least I now managed to attach a the eclipse debugger and am able to see the error in eclipse by using:
mvnDebug -DforkMode=never test

The problem is though that I don´t have the sources for the code where the error happens (inside some sun  ssl class).
I have pasted the full stack trace below. The message is:
sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

I also checked the system property:
System.getProperty(""javax.net.ssl.trustStore"")
	 (java.lang.String) /C:/java/camel/components/camel-jetty/target/test-classes/jsse/localhost.ks

Stacktrace:
Thread [main] (Suspended (exception SSLHandshakeException))	
	SSLSocketImpl.fatal(byte, String, Throwable) line: 1627	
	ClientHandshaker(Handshaker).fatalSE(byte, String, Throwable) line: 187	
	ClientHandshaker(Handshaker).fatalSE(byte, Throwable) line: 181	
	ClientHandshaker.serverCertificate(HandshakeMessage$CertificateMsg) line: 1035	
	ClientHandshaker.processMessage(byte, int) line: 124	
	ClientHandshaker(Handshaker).processLoop() line: 516	
	ClientHandshaker(Handshaker).process_record(InputRecord, boolean) line: 454	
	SSLSocketImpl.readRecord(InputRecord, boolean) line: 884	
	SSLSocketImpl.performInitialHandshake() line: 1112	
	SSLSocketImpl.startHandshake(boolean) line: 1139	
	SSLSocketImpl.getSession() line: 1878	
	BrowserCompatHostnameVerifier(AbstractVerifier).verify(String, SSLSocket) line: 91	
	SSLSocketFactory.connectSocket(Socket, String, int, InetAddress, int, HttpParams) line: 339	
	DefaultClientConnectionOperator.openConnection(OperatedClientConnection, HttpHost, InetAddress, HttpContext, HttpParams) line: 123	
	BasicPoolEntry(AbstractPoolEntry).open(HttpRoute, HttpContext, HttpParams) line: 147	
	BasicPooledConnAdapter(AbstractPooledConnAdapter).open(HttpRoute, HttpContext, HttpParams) line: 108	
	DefaultRequestDirector.execute(HttpHost, HttpRequest, HttpContext) line: 415	
	DefaultHttpClient(AbstractHttpClient).execute(HttpHost, HttpRequest, HttpContext) line: 641	
	DefaultHttpClient(AbstractHttpClient).execute(HttpUriRequest, HttpContext) line: 576	
	DefaultHttpClient(AbstractHttpClient).execute(HttpUriRequest) line: 554	
	HttpProducer.executeMethod(HttpUriRequest) line: 161	
	HttpProducer.process(Exchange) line: 83	
	ProducerCache$1.doInProducer(Producer, Exchange, ExchangePattern) line: 214	
	ProducerCache$1.doInProducer(Producer, Exchange, ExchangePattern) line: 193	
	ProducerCache.doInProducer(Endpoint, Exchange, ExchangePattern, ProducerCallback<T>) line: 173	
	ProducerCache.sendExchange(Endpoint, ExchangePattern, Processor, Exchange) line: 192	
	ProducerCache.send(Endpoint, Processor) line: 118	
	DefaultProducerTemplate.send(Endpoint, Processor) line: 97	
	DefaultProducerTemplate.sendBodyAndHeader(Endpoint, Object, String, Object) line: 136	
	DefaultProducerTemplate.sendBodyAndHeader(String, Object, String, Object) line: 132	
	SpringHttpsRouteTest.testEndpoint() line: 90	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	SpringTestMethod.invoke(Object) line: 160	
	SpringMethodRoadie.runTestMethod() line: 233	
	SpringMethodRoadie$RunBeforesThenTestThenAfters.run() line: 333	
	SpringMethodRoadie.runWithRepetitions(Runnable) line: 217	
	SpringMethodRoadie.runTest() line: 197	
	SpringMethodRoadie.run() line: 143	
	SpringJUnit4ClassRunner.invokeTestMethod(Method, RunNotifier) line: 160	
	SpringJUnit4ClassRunner(JUnit4ClassRunner).runMethods(RunNotifier) line: 51	
	JUnit4ClassRunner$1.run() line: 44	
	ClassRoadie.runUnprotected() line: 27	
	ClassRoadie.runProtected() line: 37	
	SpringJUnit4ClassRunner(JUnit4ClassRunner).run(RunNotifier) line: 42	
	SpringJUnit4ClassRunner.run(RunNotifier) line: 97	
	JUnit4TestSet.execute(ReporterManager, ClassLoader) line: 62	
	JUnit4DirectoryTestSuite(AbstractDirectoryTestSuite).executeTestSet(SurefireTestSet, ReporterManager, ClassLoader) line: 140	
	JUnit4DirectoryTestSuite(AbstractDirectoryTestSuite).execute(ReporterManager, ClassLoader) line: 127	
	Surefire.run(List, List, ClassLoader, ClassLoader, Boolean) line: 177	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	SurefireBooter.runSuitesInProcess() line: 345	
	SurefireBooter.run() line: 241	
	SurefirePlugin.execute() line: 537	
	DefaultPluginManager.executeMojo(MavenProject, MojoExecution, MavenSession) line: 490	
	DefaultLifecycleExecutor.executeGoals(List, Stack, MavenSession, MavenProject) line: 694	
	DefaultLifecycleExecutor.executeGoalWithLifecycle(String, Stack, MavenSession, Map, MavenProject, Lifecycle) line: 556	
	DefaultLifecycleExecutor.executeGoal(String, MavenSession, MavenProject) line: 535	
	DefaultLifecycleExecutor.executeGoalAndHandleFailures(String, MavenSession, MavenProject, EventDispatcher, String, ReactorManager, long, String) line: 387	
	DefaultLifecycleExecutor.executeTaskSegments(List, ReactorManager, MavenSession, MavenProject, EventDispatcher) line: 348	
	DefaultLifecycleExecutor.execute(MavenSession, ReactorManager, EventDispatcher) line: 180	
	DefaultMaven.doExecute(MavenExecutionRequest, EventDispatcher) line: 328	
	DefaultMaven.execute(MavenExecutionRequest) line: 138	
	MavenCli.main(String[], ClassWorld) line: 362	
	CompatibleMain.main(String[], ClassWorld) line: 60	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 39	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 25	
	Method.invoke(Object, Object...) line: 597	
	Launcher.launchEnhanced(String[]) line: 315	
	Launcher.launch(String[]) line: 255	
	Launcher.mainWithExitCode(String[]) line: 430	
	Launcher.main(String[]) line: 375	



davsclaus:1267838850:2010-03-06T09:27:30.911+0000:1267838850:2010-03-06T09:27:30.911+0000:Really an odd error, which is hard to track down?

I wonder if the test need a little delay on startup somewhere so it can initialize/read that keystore on every test attempt?
cschneider:1267971974:2010-03-07T22:26:14.642+0000:1267971974:2010-03-07T22:26:14.642+0000:I got nearer to the core of the problem. By disabling the other tests in camel-jetty I found out the only one test really affects if the SpringHttpsRouteTest works.

When I only run HTTPRouteTest and then SpringHttpsRouteTest the build fails. If I leave out HTTPRouteTest and run all other tests the build works. So the problem is caused by HTTPRouteTest.  Then I checked which method caused the problem and found that any method containing DefaultHTTPClient will make the build fail.

Exactly the build failed when the method execute was called on DefaultHTTPClient. So I guess the problem is that something that DefaultHTTPClient does is not cleaned up after the test. 

I was even able to make my build work again by adding the following to the routebuilder in HTTPRouteTest:
                URL trustStoreUrl = Thread.currentThread().getContextClassLoader().getResource(""jsse/localhost.ks"");
                System.setProperty(""javax.net.ssl.trustStore"", trustStoreUrl.getPath());

This causes the DefaultHTTPClient to initialize with correct SSL settings. So when later the SpringHttpsRouteTest runs the settings are still in effect. Without these lines it seems the non ssl settings are initialized and not reinitialized in the later test.

So far my tests till now. The real core of the problem is not yet found but I think we are really near.

njiang:1267991356:2010-03-08T03:49:16.174+0000:1267991356:2010-03-08T03:49:16.174+0000:Hi Christian,

I just checked the pom.xml in camel trunk, the unit test JVM is not fork per test, so you may have this kind of HTTPS setting side effort.
Can you try to update the pom.xml in camel-jetty module by adding these lines and run the test again?

{code} 
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <forkMode>pertest</forkMode>
          <childDelegation>false</childDelegation>
          <useFile>true</useFile>
          <failIfNoTests>false</failIfNoTests>
          <includes>
             <include>**/*Test.java</include>
          </includes>
        </configuration>
    </plugin>
{code}
cschneider:1268006938:2010-03-08T08:08:58.690+0000:1268006938:2010-03-08T08:08:58.690+0000:Hi Willem,

your suggestion works very well. This seems like a good solution. I have added another small patch for JettyHttpComponent. I propose to stop the connectors in doClose(). In case the routes did not close all connectors this will clean up. I had to do this when I converted the SpringHttpsRouteTest to a plain spring integration test. So I think it is a good idea to do so.

Btw. Are you interested in the patch for SpringHttpsRouteTest too? It is not necessary to solve the problem but I think it is more spring standard like than the current test. 

Greetings

Christian

njiang:1268013406:2010-03-08T09:56:46.469+0000:1268013406:2010-03-08T09:56:46.469+0000:Hi Christian,

I don't think we need to set the SSL configure in the HttpRouteTest to fix the issue of SpringHttpsRouteTest, as we fork a new JVM per test now[1].
So I just applied you patch which attached to this JIRA.

[1] http://svn.apache.org/viewvc?rev=920252&view=rev

cschneider:1268015628:2010-03-08T10:33:48.028+0000:1268015628:2010-03-08T10:33:48.028+0000:Hi Willem,

thanks for applying the patch. It is of course good to not configure SSL in HttpRouteTest. My question was if you want the patch for SpringHttpsRouteTest that converts it into a plain spring integration test. I think I will simply attach the patch and you can use it if you want.

Greetings

Christian

cschneider:1268016091:2010-03-08T10:41:31.476+0000:1268016091:2010-03-08T10:41:31.476+0000:Patch for SpringHttpsRouteTest to convert it to a spring junit 4 integration test.
davsclaus:1268258529:2010-03-11T06:02:09.780+0000:1268258529:2010-03-11T06:02:09.780+0000:Willem hasn't this been committed?
njiang:1268260183:2010-03-11T06:29:43.617+0000:1268260183:2010-03-11T06:29:43.617+0000:The patch for SpringHttpsRouteTest has been committed. 
Revision:920631
cschneider:1268260802:2010-03-11T06:40:02.263+0000:1268260802:2010-03-11T06:40:02.263+0000:Hi Claus and Willem,

I also had to add the fork per test to make the tests work on windows. This change in the pom is not yet committed. Is this not necessary anymore?

Greetings

Christian

njiang:1268261634:2010-03-11T06:53:54.871+0000:1268261634:2010-03-11T06:53:54.871+0000:Hi Christian,

I already changed that in camel trunk pom.xml. 
So I didn't commit this part of change.
cschneider:1268263789:2010-03-11T07:29:49.151+0000:1268263789:2010-03-11T07:29:49.151+0000:Hi Willem,

thanks for the info. I think this issue is solved then.

Greetings

Christian"
0,CAMEL-2517,Test,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Christian Schneider,0,0,2010-03-02 21:35:46+00:00,2010-03-18 19:12:34+00:00,"On my system the test AggregateGroupedExchangeMultipleCorrelationTest fails. It seems the Thread.sleep(100) is too short.
When I increase to at least 900ms it works. To add some safety I propose to increase to 1000ms.","cschneider:1267536974:2010-03-02T21:36:14.550+0000:1267536974:2010-03-02T21:36:14.550+0000:Increased sleep to 1000ms
davsclaus:1267574173:2010-03-03T07:56:13.380+0000:1267574173:2010-03-03T07:56:13.380+0000:The idea with this test is that the aggregator timeout after 1 second of inactivity, and we want both groups A and B to aggregate all their messages within that timeout period, e.g. within that 1 second of inactivity. And hence the sleep should be < 1 sec.
cschneider:1267609387:2010-03-03T17:43:07.493+0000:1267609387:2010-03-03T17:43:07.493+0000:I understand, that my fix is perhaps not correct. The problem remains though. The test is failing on my system. Do you have another idea how to fix it?

davsclaus:1267613457:2010-03-03T18:50:57.933+0000:1267613457:2010-03-03T18:50:57.933+0000:You  could at least show the failure message you get on your system.
And you could enable TRACE logging on {{org.apache.camel.processor.aggregate.AggregateProcessor}} and attach the log.

And have you tested it on other Windows computers as well?
cschneider:1267613841:2010-03-03T18:57:21.760+0000:1267613841:2010-03-03T18:57:21.760+0000:After reading your comment that you do not want reports about test failures without fixes feel free to close it again. Sorry if I cause any inconvenience here I am just trying to help.
davsclaus:1267614578:2010-03-03T19:09:38.303+0000:1267614578:2010-03-03T19:09:38.303+0000:The help is appreciated really, but if anyone creates a new JIRA anytime one of the 5500 Camel unit tests fails on their own laptop, then the JIRA will be filled with reports.

And if there is a test failure, then please dig into why it failed before opening a JIRA ticket.

I am asking for logs on this JIRA since your laptop should be able to complete 6 messages within 1 second. So I wonder what the precise error is on your system. You are supposed to have 2 outgoing messages. And then later these messages is checked its content is correct as well.

So your failure can happen in several places, and hence why I ask for the full error reported.

And the TRACE log will tell me how your system aggregates the incoming messages. Which can be used to compare with a green system and see why it dont work on your system.
cschneider:1267621741:2010-03-03T21:09:01.432+0000:1267621741:2010-03-03T21:09:01.432+0000:Hi  Claus,

I have tested only on one machine. I can try on my linux machine but I don´t have another windows machine.  Below you find the trace of the failure with 100ms. I will attach the trace logs for 1000ms and for 100ms.

Greetings

Christian


junit.framework.ComparisonFailure: expected:<1[3]0> but was:<1[0]0>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.processor.aggregator.AggregateGroupedExchangeMultipleCorrelationTest.testGrouped(AggregateGroupedExchangeMultipleCorrelationTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


cschneider:1267624437:2010-03-03T21:53:57.182+0000:1267624437:2010-03-03T21:53:57.182+0000:Hi Claus,

I am currently trying to understand the code in Aggregator. Though I can´t  say I fully understand everything I stumbled over something interesting.
In line 488 there is the following command:
timeoutMap = new AggregationTimeoutMap(scheduler, 1000L);

Could this be the reason why my timeout of 1000ms caused the success? If I understand this correctly the map only checks every 1000ms. So as the test by default only delays the last exchange for 100ms it is not sure which group times out first. When I lower the delay in line 488 to below 100ms the test works again. So I guess a valid fix could be to set the sleep to 1500ms and the completionTimeout to 2000ms. 

What do you think?

Greetings

Christian

cschneider:1267624897:2010-03-03T22:01:37.251+0000:1267624897:2010-03-03T22:01:37.251+0000:Added new patch with proposed timeouts
davsclaus:1267664925:2010-03-04T09:08:45.409+0000:1267664925:2010-03-04T09:08:45.409+0000:This is much better.

I can see the timeout map is evicting the 2 messages as expected but in your case they are send in reverse order.
Which means its backing ConcurrentHasMap is operating differently on Windows than eg. Mac.

I digged into the timeout map and have enhanced it to resort the evicted entries, which means it should send out the messages in correct order, eg the first expired first, and the last last.

So when I have run the test to completion you can try again with latest code from trunk.

cschneider:1267684233:2010-03-04T14:30:33.123+0000:1267684233:2010-03-04T14:30:33.123+0000:The test now works for me. Many thanks
davsclaus:1267685224:2010-03-04T14:47:04.956+0000:1267685224:2010-03-04T14:47:04.956+0000:Thanks for being patience and sticking up to my bigger ego.

Glad we got to the bottom of this and actually discovered it as an issue with the TimeoutMap.
"
0,CAMEL-2516,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Moulliard Charles,Moulliard Charles,0,0,2010-03-02 16:04:15+00:00,2011-04-24 10:01:18+00:00,"The existing camel-cometd component loads the web resources using a FileResource handler. That means that a bundle project where the webapp resources are part of a jar file can be loaded. I propose to add a protocol type in front of the baseResource parameter to allow to pass a file: or a classpath resource


ex : baseResource=file:./data/cache/bundle195/webapp


or 


ex : baseResource=classpath:webapp","cmoulliard:1267517289:2010-03-02T16:08:09.163+0000:1267517289:2010-03-02T16:08:09.163+0000:Code committed. Wiki page update ongoing
davsclaus:1303610478:2011-04-24T10:01:18.250+0000:1303610478:2011-04-24T10:01:18.250+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2515,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-02 14:36:45+00:00,2011-04-24 10:00:58+00:00,For example a NPE can be hard to detect as all you get is null in the console.,"davsclaus:1267511859:2010-03-02T14:37:39.515+0000:1267511859:2010-03-02T14:37:39.515+0000:trunk: 918055.
davsclaus:1303610458:2011-04-24T10:00:58.776+0000:1303610458:2011-04-24T10:00:58.776+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2514,Bug,Major,"1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0, 2.2.0","1.6.3, 2.3.0","
None
",Closed,Fixed,"1.6.3, 2.3.0",Willem Jiang,Freeman Yue Fang,0,0,2010-03-02 07:37:10+00:00,2011-01-17 16:50:40+00:00,"as commons-pool/commons-pool/1.5.4 osgi manifest header isn't correct, which shouldn't import org.apache.commons.pool package.
SMX4-491[1] create servicemix wrapper bundle to fix this issue, so the karaf features.xml should use servicemix wrapper bundle
[1]https://issues.apache.org/activemq/browse/SMX4-491","ffang:1267486730:2010-03-02T07:38:50.509+0000:1267486730:2010-03-02T07:38:50.509+0000:append patch to address this issue
njiang:1267490677:2010-03-02T08:44:37.998+0000:1267490677:2010-03-02T08:44:37.998+0000:Applied patch with thank to Freeman.  I didn't change the parent/pom.xml part, as we just need to update the feature.xml part.
davsclaus:1295254240:2011-01-17T16:50:40.240+0000:1295254240:2011-01-17T16:50:40.240+0000:Closing all 1.x tickets"
0,CAMEL-2513,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-02 04:39:31+00:00,2011-04-24 09:57:34+00:00,Here is the mail thread which discusses about it.,"njiang:1267476526:2010-03-02T04:48:46.465+0000:1267476526:2010-03-02T04:48:46.465+0000:committed the patch into camel trunk. 
 http://svn.apache.org/viewvc?rev=917874&view=rev

As the cometd-api and cometd-server is not OSGi bundle, we also need to update servicemix bundle for it.
njiang:1267480746:2010-03-02T05:59:06.940+0000:1267480746:2010-03-02T05:59:06.940+0000:Added the dependency of the SMX4 bundle, will committed the patch of camel feature when this issue is resolved.
davsclaus:1303610254:2011-04-24T09:57:34.516+0000:1303610254:2011-04-24T09:57:34.516+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2512,Bug,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Christian Schneider,0,0,2010-03-01 23:03:06+00:00,2010-03-18 19:12:20+00:00,Seems I forgot to add the generated soap package to the exported packages. So these classes are not packed into the jar.,"cschneider:1267455857:2010-03-01T23:04:17.551+0000:1267455857:2010-03-01T23:04:17.551+0000:Added patch for this issue. It also contains some improvement to the tests I found when doing the wiki documentation.
njiang:1267555085:2010-03-03T02:38:05.876+0000:1267555085:2010-03-03T02:38:05.876+0000:Applied patch with thanks to Christian.
http://svn.apache.org/viewvc?rev=917889&view=rev"
0,CAMEL-2511,Task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Jonathan Anstey,Martin Gilday,0,0,2010-03-01 22:40:58+00:00,2011-04-24 10:00:39+00:00,"camel-jackson currently uses 1.0.0.  
The attached patches upgrades this to the latest version available in maven central.
Confirmed existing tests pass.","pledge:1267454558:2010-03-01T22:42:38.496+0000:1267454558:2010-03-01T22:42:38.496+0000:Only the pom requires changing.
janstey:1267470026:2010-03-02T03:00:26.715+0000:1267470026:2010-03-02T03:00:26.715+0000:Committed in http://svn.apache.org/viewvc?rev=917850&view=rev

Thanks Martin for trying this upgrade out!
njiang:1267486861:2010-03-02T07:41:01.682+0000:1267486861:2010-03-02T07:41:01.682+0000:I just update camel feature for this upgrade.
http://svn.apache.org/viewvc?rev=917901&view=rev
davsclaus:1303610439:2011-04-24T10:00:39.684+0000:1303610439:2011-04-24T10:00:39.684+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2510,Bug,Major,"2.1.0, 2.2.0",None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-03-01 13:45:23+00:00,2011-04-24 10:00:40+00:00,"Below test shows the Http producer can't build up right HttpRequest URI as a bridgeEndpoint.



   public class JettyHttpTest extends CamelTestSupport {

    private String targetProducerUri = ""http://localhost:8542/someservice?bridgeEndpoint=true&throwExceptionOnFailure=false"";
    private String targetConsumerUri = ""jetty:http://localhost:8542/someservice?matchOnUriPrefix=true"";
    private String sourceUri = ""jetty:http://localhost:6323/myservice?matchOnUriPrefix=true"";
    private String sourceProducerUri = ""http://localhost:6323/myservice"";

    @Test
    public void testGetRootPath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice"");

        template.sendBody(""direct:root"", """");

        assertMockEndpointsSatisfied();
    }
    
    @Test
    public void testGetWithRelativePath() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedBodiesReceived(""Hi! /someservice/relative"");
        
        template.sendBody(""direct:relative"", """");
        assertMockEndpointsSatisfied();
        
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                from(targetConsumerUri)
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
                            exchange.getOut().setBody(""Hi! "" + path);
                        }   
                    });

                from(sourceUri)
                    .to(targetProducerUri);

                from(""direct:root"")
                    .to(sourceProducerUri)
                    .to(""mock:result"");
                
                from(""direct:relative"")
                    .to(sourceProducerUri + ""/relative"")
                    .to(""mock:result"");

            }
        };
    }
}","romkal:1267502796:2010-03-02T12:06:36.418+0000:1267502796:2010-03-02T12:06:36.418+0000:Should we really have such assertion in {{testGetWithRelativePath()}} test?

I believe we should have {{""Hi! /someservice""}} returned, not {{""Hi! /someservice/relative""}} and no {{matchOnUriPrefix}} should be required on {{targetConsumerUri}}.

In other words I believe, that by default we shouldn't propagate HTTP_PATH or HTTP_URI at all from one endpoint to the other, because by default it is not what people would expect. I would propose having two different header names for overriding path for producer, and informative headers for requests received.from consumers.
njiang:1267551774:2010-03-03T01:42:54.028+0000:1267551774:2010-03-03T01:42:54.028+0000:Hi Roma,

The change that I made is trying to support the http bridge out of box.

If you want to route the all the request which URI is start with ""http://localhost:1234/route"" to ""http://localhost:4567/service"",  camel need to lookup the request's HTTP_PATH to figure out the relative path and apply it to http producer to send the request.
The original code supports  this kind of route ""http://localhost:1234"" to ""http://host:4567/service"" , but doesn't supports the upper route.

For the header of HTTP_PATH and HTTP_URI, cxfbean is using it to support the JAXRS resource location.
  
romkal:1267596492:2010-03-03T14:08:12.392+0000:1267596492:2010-03-03T14:08:12.392+0000:I believe I was misunderstood :)

I'm not saying that we shouldn't send HTTP_PATH or HTTP_URI headers at all. I believe they are needed definitely (as you wrote earlier). I just believe that by default some other headers should be used to override the URI used at HttpProducer.

Assuming we have a route like
{code:java}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:/output"");
{code}

When someone sends a POST to {{http://localhost/input/some/path}} the payload should be sent to {{http://localhost/output}} not to {{http://localhost/output/some/path}}
davsclaus:1267659881:2010-03-04T07:44:41.015+0000:1267659881:2010-03-04T07:44:41.015+0000:I to think there is something wrong with this commit.

The changed code in HttpProducerHelper makes other situations fail now. 
And why do you have this relative check?

The 2 urls should IMHO always be considered absolute when bridging.

I do think we need to find a new solution for this and revert the current change.
davsclaus:1267661223:2010-03-04T08:07:03.930+0000:1267661223:2010-03-04T08:07:03.930+0000:After digging a bit more I think we have an issue in Camel when you combine Jetty with Http, since Jetty will populate the Exchange with HTTP_* headers. And these headers influence when you invoke other http endpoints later in the route, as if you should *overrule* the endpoint uri.

We got a catch-22 situation since those HTTP_* headers should have been _informative_ and should not impact the routing.

Currently I cannot se an easy solution without breaking backwards comparability, but I also recon that not many Camel end users will use those HTTP_* headers in their routes.
So maybe we can change camel-jetty, to use other header keys, that dont clash.

Or the opposite that you must use HTTP_CUSTOM_* header to overrule. However this is a bigger change as Camel end users then must change their code.

njiang:1267661443:2010-03-04T08:10:43.872+0000:1267664277:2010-03-04T08:57:57.533+0000:@Claus,

I need to make my change more clear, lets take the REST service as an example, the relative path could be used for URI template.
If we use the jetty and http component to build a bridge, my change will support it out of box.
{code}
from(""jetty:http://localhost/input?matchOnUriPrefix=true"").to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code}

For the HttpProducer, our police is the message header of HTTP_PATH and HTTP_URI can override the http endpoint configuration, and we introduce the bridgeEndpoint option to ignore the message header of HTTP_URI.    
If you want to this route implement Roman's requirement, current solution could be 
{code}
rom(""jetty:http://localhost/input?matchOnUriPrefix=true"").removeHeader(Exchange.HTTP_PATH).to(""http://localhost:8080/outservice?bridgeEndpoint=true"");
{code}
davsclaus:1303610440:2011-04-24T10:00:40.476+0000:1303610440:2011-04-24T10:00:40.476+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2509,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Griboval Philippe,0,0,2010-03-01 12:35:13+00:00,2011-04-24 10:01:40+00:00,"Using jboss-extra class JBossPackageScanClassResolver, i could not get the converter loaded.


I was using camel 2.2.0 and JBoss 5.1


The error was :
Cannot find class 'WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class' in any classloaders: [BaseClassLoader@107e733

{vfszip:/D:/JBoss/jboss-5.1.0.GA/server/testWS/deploy/router-component-02-0.0.2-SNAPSHOT.war/}

, org.jboss.web.tomcat.service.WebCtxLoader$ENCLoader@1ea6b44]


Looking at the JBossPackageScanClassResolver source class, i changed :


public void visit(VirtualFile file) {


  if (file.getName().endsWith("".class"")) 

{
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(""/"") + 1), classes);
  }

}
with :


public void visit(VirtualFile file) {


  if (file.getName().endsWith("".class"")) 

{
    String fqn = file.getPathName();
    addIfMatching(filter, fqn.substring(fqn.indexOf(""jar/"") + 4), classes);
  }

}


as the fqn was /WEB-INF/lib/camel-core-2.2.0.jar/org/apache/camel/component/bean/ParameterMappingStrategy.class instead of /org/apache/camel/component/bean/ParameterMappingStrategy.class
It's probably different from different version of JBoss ?
Hope this help sombody...","davsclaus:1267419832:2010-03-01T13:03:52.688+0000:1267419832:2010-03-01T13:03:52.688+0000:Thanks for reporting.

Yeah classloading in JBoss is a bit tricky :)
davsclaus:1267430503:2010-03-01T16:01:43.255+0000:1267430503:2010-03-01T16:01:43.255+0000:Thanks a lot.

I have committed a fix to camel-extra.
Fell free to try the fix on your system.

trunk: 292.
davsclaus:1303610500:2011-04-24T10:01:40.919+0000:1303610500:2011-04-24T10:01:40.919+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2508,Improvement,Trivial,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-03-01 10:42:31+00:00,2011-04-24 10:00:57+00:00,So end users who extend Main can override those methods and do custom logic.,"davsclaus:1267411490:2010-03-01T10:44:50.460+0000:1267411490:2010-03-01T10:44:50.460+0000:trunk: 917460.
davsclaus:1303610457:2011-04-24T10:00:57.370+0000:1303610457:2011-04-24T10:00:57.370+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2507,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Not A Problem,2.3.0,Claus Ibsen,Norman Maurer,0,0,2010-02-28 13:44:14+00:00,2011-04-24 10:00:37+00:00,"When using @RecipientList for routing messages to an Endpoint, the messages get routed without a problem. But after a few seconds I see the following Exception:


ERROR 13:15:17,596 | org.apache.camel.processor.DefaultErrorHandler | Failed delivery for exchangeId: 51ba5471-fac6-458c-b280-066041368f69. Exhausted after delivery attempt: 1 caught: org.apache.camel.N
oSuchEndpointException: No endpoint could be found for: org.apache.james.transport.camel.InMemoryMail@5422fe09, please check your classpath contains the needed camel component jar.
org.apache.camel.NoSuchEndpointException: No endpoint could be found for: org.apache.james.transport.camel.InMemoryMail@5422fe09, please check your classpath contains the needed camel component jar.
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:48)
        at org.apache.camel.util.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:82)
        at org.apache.camel.processor.RecipientList.resolveEndpoint(RecipientList.java:119)
        at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:93)
        at org.apache.camel.processor.RecipientList.process(RecipientList.java:81)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:161)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:161)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.MulticastProcessor.doProcess(MulticastProcessor.java:266)
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:218)
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:137)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:161)
        at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:51)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:161)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:177)
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:143)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:228)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:66)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:84)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:559)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:977)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:969)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:871)
        at java.lang.Thread.run(Thread.java:637)


When switching to use routingSlip the error is gone. Here is a simple DSL to reproduce it:


from(""activemq:queue:test"").recipientList().method(MessageRouter.class);


MessageRouter.java:
public class MessageRouter {


    @RecipientList
    public String to(l) 

{
        String queueName = ""activemq:queue:test2"";
        return queueName;
    }

}","davsclaus:1267337218:2010-02-28T14:06:58.826+0000:1267337218:2010-02-28T14:06:58.826+0000:Can you remove   @RecipientList in your MessageRoute as you are essentially doing 2 recipient lists now. 
norman:1267404999:2010-03-01T08:56:39.566+0000:1267404999:2010-03-01T08:56:39.566+0000:will give it a try... That was not clear for me from the docs..
norman:1267417595:2010-03-01T12:26:35.351+0000:1267417595:2010-03-01T12:26:35.351+0000:@Claus

this resolved the issue.. Maybe it worth to add some note to the docs about this..


Thx again!
davsclaus:1267420574:2010-03-01T13:16:14.829+0000:1267420574:2010-03-01T13:16:14.829+0000:I have improved the wiki documentation for the future
davsclaus:1303610437:2011-04-24T10:00:37.780+0000:1303610437:2011-04-24T10:00:37.780+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2506,Task,Trivial,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-28 07:31:54+00:00,2011-04-24 10:01:03+00:00,"Camel will still by default use 2.5.6.
But the Spring 3.x profile should be upgraded to Spring 3.0.1.RELEASE.","davsclaus:1267316783:2010-02-28T08:26:23.197+0000:1267316783:2010-02-28T08:26:23.197+0000:trunk: 917142
davsclaus:1303610463:2011-04-24T10:01:03.077+0000:1303610463:2011-04-24T10:01:03.077+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2505,Task,Trivial,None,None,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-02-27 13:03:36+00:00,2011-04-24 10:01:09+00:00,No Desc,"davsclaus:1267247124:2010-02-27T13:05:24.626+0000:1267247226:2010-02-27T13:07:06.686+0000:The usual problem with a missing OSGi bundle.

Ashwin do you mind getting a SMX bundle for 3.0.1

There is a 3.0.0_1-SNAPSHOT out there. 
davsclaus:1267247191:2010-02-27T13:06:31.942+0000:1267247191:2010-02-27T13:06:31.942+0000:trunk: 916950.

The non osgi has been updated to 3.0.1
akarpe:1267261692:2010-02-27T17:08:12.896+0000:1267261692:2010-02-27T17:08:12.896+0000:Sure Claus. I will get on it right away...
akarpe:1267279335:2010-02-27T22:02:15.467+0000:1267279335:2010-02-27T22:02:15.467+0000:Just created a patch to be applied to Servicemix 4 so that Lucene 3.0.1 can be installed as a servicemix osgi bundle. This issue is being tracked as https://issues.apache.org/activemq/browse/SMX4-494.

The camel feature patch to upgrade the lucene 3.0.0 component to 3.0.1 is attached to this issue as lucene-3.0.1-features.diff
akarpe:1267298402:2010-02-28T03:20:02.737+0000:1267298402:2010-02-28T03:20:02.737+0000:Committed revision 917073. The feature fix updates the camel karaf feature version of camel-lucene to 3.0.1 from 3.0.0. Patch attached above (lucene-3.0.1-features.diff). 

The servicemix bundle jar patch is currently being tracked...
davsclaus:1267313632:2010-02-28T07:33:52.497+0000:1267313632:2010-02-28T07:33:52.497+0000:Good

Ashwin mind that the SMX OSGi bundles often have versions that use _1 or _2 suffix. Eg 3.0.1_1 in the features. So when the SMX has been patched and the bundle has been released to the SMX repo you should remember to adjust the version in the Camel features to match.
akarpe:1267336861:2010-02-28T14:01:01.397+0000:1267336861:2010-02-28T14:01:01.397+0000:Oh, ok. I was not aware of that. I will make the change when the patch goes through. Will talk to Chris Custine to get SMX4-494 through.

Thanks and Regards,

Ashwin...
akarpe:1267719710:2010-03-05T00:21:50.723+0000:1267719710:2010-03-05T00:21:50.723+0000:I have made the requisite change and committed the change yesterday. The lucene-bundle-version has been suitably modified to 3.0.1_1. SMX4-494 has also been fixed and resolved.
davsclaus:1303610469:2011-04-24T10:01:09.547+0000:1303610469:2011-04-24T10:01:09.547+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2504,Improvement,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-27 09:02:36+00:00,2011-04-24 10:00:45+00:00,"If you handle exceptions using



onException(Exception.class).handled(true) ...




Then by default the exception should not be logged.


Also add additional switches to easy customize behavior without having to change logging levels



    protected boolean logHandled;
    protected boolean logExhausted = true;
    protected boolean logRetryAttempted = true;","davsclaus:1267238898:2010-02-27T10:48:18.536+0000:1267238898:2010-02-27T10:48:18.536+0000:trunk: 916940.
davsclaus:1303610445:2011-04-24T10:00:45.870+0000:1303610445:2011-04-24T10:00:45.870+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2503,New Feature,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-26 13:06:49+00:00,2011-04-24 10:00:50+00:00,"See nabble
http://old.nabble.com/Environment-Variables-using-Simple-language-ts27714257.html","davsclaus:1267161353:2010-02-26T13:15:53.852+0000:1267161353:2010-02-26T13:15:53.852+0000:trunk: 916669
davsclaus:1303610450:2011-04-24T10:00:50.801+0000:1303610450:2011-04-24T10:00:50.801+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2502,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-26 05:56:21+00:00,2011-04-24 10:01:42+00:00,To be able to set a reference to XXX to be looked up in the registry. Like you would do when using Spring XML.,"davsclaus:1267137080:2010-02-26T06:31:20.740+0000:1267137080:2010-02-26T06:31:20.740+0000:trunk: 916584.
davsclaus:1303610502:2011-04-24T10:01:42.649+0000:1303610502:2011-04-24T10:01:42.649+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2501,Task,Major,2.3.0,None,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-25 22:05:06+00:00,2011-04-24 10:01:22+00:00,"commons-dbcp 1.3 fixes over 30 bugs in comparison to 1.2.2: changelog.
commons-dbcp 1.3 is now an OSGI bundle","muellerc:1267109049:2010-02-25T22:44:09.665+0000:1267109049:2010-02-25T22:44:09.665+0000:provide the patch
njiang:1267138338:2010-02-26T06:52:18.052+0000:1267138338:2010-02-26T06:52:18.052+0000:Applied the patch with thanks to Christian.
I also fixed the features validation error by adding the javax transaction API bundle into camel-quartz. 


njiang:1267138423:2010-02-26T06:53:43.696+0000:1267138423:2010-02-26T06:53:43.696+0000:@ Christian, if you change something in the features.xml please use ""mvn clean install -Pvalidate"" from the trunk/platforms  to verify the bundles of the features file.
muellerc:1267145566:2010-02-26T08:52:46.402+0000:1267145566:2010-02-26T08:52:46.402+0000:Hello Willem, 
ok, I will try to remember this the next time. :-)
Another question. If we use commons-dbcp 1.3, should SMX4 also use commons-dbcp 1.3 or is it a MUST?
I will also provide a patch for SMX4 to upgrade to commons-dbcp 1.3...
njiang:1267147197:2010-02-26T09:19:57.820+0000:1267147197:2010-02-26T09:19:57.820+0000:
it should be better to let the servicemix and camel which is deployed into the servicemix use the same version of bundle.

davsclaus:1267149888:2010-02-26T10:04:48.178+0000:1267149888:2010-02-26T10:04:48.178+0000:Which means you should most likely also upgrade Java Mail to 1.4.3 at SMX 3.x and 4.x as well.
muellerc:1267156390:2010-02-26T11:53:10.178+0000:1267156390:2010-02-26T11:53:10.178+0000:Ok , the next tree patches I will provide... :-)
muellerc:1267256080:2010-02-27T15:34:40.048+0000:1267256080:2010-02-27T15:34:40.048+0000:Opened the issue for SMX4 [SMX4-493|https://issues.apache.org/activemq/browse/SMX4-493].
davsclaus:1303610482:2011-04-24T10:01:22.474+0000:1303610482:2011-04-24T10:01:22.474+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2500,New Feature,Minor,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-25 19:39:15+00:00,2011-04-24 10:00:48+00:00,"Add property on the AggreagedExchange so we know how it completed, eg by timeout, size, or predicate etc.","davsclaus:1267168381:2010-02-26T15:13:01.101+0000:1267168381:2010-02-26T15:13:01.101+0000:trunk: 916707.
davsclaus:1303610448:2011-04-24T10:00:48.650+0000:1303610448:2011-04-24T10:00:48.650+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2499,Test,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-02-25 14:35:29+00:00,2011-04-24 10:01:41+00:00,"There are some https tests failed in camel-http module.
The error stack is here



org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLException: hostname in certificate didn't match: <127.0.0.1> != <localhost>
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:138)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:102)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:89)
	at org.apache.camel.impl.DefaultProducerTemplate.request(DefaultProducerTemplate.java:267)
	at org.apache.camel.component.http.HttpsAuthenticationTest.httpsGetWithAuthentication(HttpsAuthenticationTest.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: javax.net.ssl.SSLException: hostname in certificate didn't match: <127.0.0.1> != <localhost>
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:220)
	at org.apache.http.conn.ssl.BrowserCompatHostnameVerifier.verify(BrowserCompatHostnameVerifier.java:54)
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:149)
	at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:130)
	at org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:339)
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:123)
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:147)
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:108)
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:415)
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:641)
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:576)
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:554)
	at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:161)
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:83)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:214)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:193)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:173)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:192)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:136)
	... 26 more","njiang:1267080240:2010-02-25T14:44:00.087+0000:1267080240:2010-02-25T14:44:00.087+0000:Fixed this issue by adding the name 127.0.0.1 cert into the keystore.
 
davsclaus:1303610501:2011-04-24T10:01:41.556+0000:1303610501:2011-04-24T10:01:41.556+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2498,Bug,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Martin Krasser,Martin Krasser,0,0,2010-02-25 05:48:42+00:00,2011-04-24 10:00:49+00:00,One of the ProcessorDefinition methods is still has the old resequencer name from Camel 1.x. Should be renamed to resequence.,davsclaus:1303610449:2011-04-24T10:00:49.115+0000:1303610449:2011-04-24T10:00:49.115+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2497,New Feature,Major,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,"Michael ""Seth"" Call",0,1,2010-02-24 16:05:04+00:00,2011-04-24 10:01:06+00:00,"Individual routes, when stopped manually by the user application, should be able to also shutdown gracefully, just as they would if shutdown in a full camel context shutdown.","davsclaus:1267313826:2010-02-28T07:37:06.208+0000:1267313826:2010-02-28T07:37:06.208+0000:See nabble
http://old.nabble.com/Graceful-shutdown-and-individual-routes-ts27709462.html

We should offer API to shutdown a route graceful in regular Java and from JMX as well.
davsclaus:1267319980:2010-02-28T09:19:40.212+0000:1267319980:2010-02-28T09:19:40.212+0000:trunk: 917147.

You can now use {{shutdownRoute}} methods from {{CamelContext}} to graceful shutdown an individual route.
davsclaus:1303610466:2011-04-24T10:01:06.395+0000:1303610466:2011-04-24T10:01:06.395+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2496,Bug,Major,"2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0, 2.2.0, 2.3.0",None,"
None
",Closed,Fixed,2.4.0,Willem Jiang,Stanley J. Lewis,0,0,2010-02-24 15:38:16+00:00,2011-04-24 10:00:53+00:00,"Attached patch introduces a test that shows the following symptom:


org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/Tmp/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: /var/folders/vC/vCA487MkHEeSaIu9LmlkrU+++TI/Tmp/camel-tmp-627613/cos3755307044377901165.tmp (No such file or directory)
	at org.apache.camel.converter.stream.FileInputStreamCache.reset(FileInputStreamCache.java:52)
	at org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache.reset(StreamCacheConverter.java:126)
	at org.apache.camel.util.MessageHelper.resetStreamCache(MessageHelper.java:105)
	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:548)
	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:428)
	at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:118)
	at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:155)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:189)
	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:133)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:87)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:72)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)


I believe it must be a race condition when several threads are passing through the splitter, in the above case I'm using a seda queue with 5 threads.  Am logging this now as I'm not sure what time I'll have to investigate further this week.","slewis:1266997162:2010-02-24T15:39:22.455+0000:1266997180:2010-02-24T15:39:40.649+0000:unit test for 1.x branch, still need to check if 2.x trunk shows a similar problem.
davsclaus:1267430625:2010-03-01T16:03:45.590+0000:1267430625:2010-03-01T16:03:45.590+0000:I think we should use the new HawtDB as file based stream cache in the future. 

It got all the bells and whistles to be fast and leverages NIO and memory mapped IO and whatnot.
But that can be done when we overhaul stream caching in 2.x, once we get the time for that :)
njiang:1271806717:2010-04-21T07:38:37.308+0000:1271812179:2010-04-21T09:09:39.845+0000:After digging the code, I found the FileInputStreamCache is closed when the XPathBuilder.getDocument() is called, and the temp file is deleted, so you get the FileNotFoundException when the XPathBuilder wants to reset the InputStream.
I can also reproduce this issue in Camel 2.x.

To work around this issue, we should not use the FileInputStreamCache as it can't be reset after it is closed, set the camel property CachedOutputStream.THRESHOLD to be ""-1"" can disable the FileInputStreamCache.
{code}
getContext().getProperties().put(CachedOutputStream.THRESHOLD, ""-1"") ;
{code}

njiang:1271809101:2010-04-21T08:18:21.565+0000:1271809101:2010-04-21T08:18:21.565+0000:Committed the test case into camel trunk, will revisit it when we have time to rewrite the StreamCache.
scrutinizer:1275394868:2010-06-01T20:21:08.894+0000:1275394868:2010-06-01T20:21:08.894+0000:This looks like the issue I just reported in CAMEL-2776. It may not be a race condition but a side effect of the cached stream file removal upon close().
njiang:1275846124:2010-06-07T01:42:04.630+0000:1275846124:2010-06-07T01:42:04.630+0000:Now the cached file will not be deleted before the exchange's routing is finished, so you will not got this kind of error anymore.
The file will be deleted when the CachedFileInputStream which is built on this file is close and routing is finished.

You can find more information in CAMEL-2776.
davsclaus:1303610453:2011-04-24T10:00:53.700+0000:1303610453:2011-04-24T10:00:53.700+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2495,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,William Tam,William Tam,0,0,2010-02-23 18:54:04+00:00,2011-04-24 10:01:14+00:00,Camel-cxf component does not seem to support application SOAP fault in PAYLOAD mode.,"wtam:1266933551:2010-02-23T21:59:11.795+0000:1266933551:2010-02-23T21:59:11.795+0000:It seems to be a problem only when no servcieClass (i.e. WSDL only) is specified in the endpoint.  I added the test in CXFWsdlOnlyTest and showed the issue (see stacktrace).

{code}
 @Test
    public void testSoapFaultRoutes() {
        URL wsdlURL = getClass().getClassLoader().getResource(""person.wsdl"");
        PersonService ss = new PersonService(wsdlURL, new QName(""http://camel.apache.org/wsdl-first"",
                                                                ""PersonService""));
        
        // test POJO mode
        Person client = ss.getSoap();
        Holder<String> personId = new Holder<String>();
        personId.value = """";
        Holder<String> ssn = new Holder<String>();
        Holder<String> name = new Holder<String>();
        Throwable t = null;
        try {
            client.getPerson(personId, ssn, name);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
        
        // test PAYLOAD mode
        Person client2 = ss.getSoap2();
        Holder<String> personId2 = new Holder<String>();
        personId2.value = """";
        Holder<String> ssn2 = new Holder<String>();
        Holder<String> name2 = new Holder<String>();
        try {
            client2.getPerson(personId2, ssn2, name2);
            fail(""Expect exception"");
        } catch (UnknownPersonFault e) {
            t = e;
        }
        assertTrue(t instanceof UnknownPersonFault);
    }
{code}

javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader.
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy70.getPerson(Unknown Source)
	at org.apache.camel.component.cxf.CXFWsdlOnlyTest.testSoapFaultRoutes(CXFWsdlOnlyTest.java:118)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col {unknown-source}]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:686)
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134)
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040)
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)
	at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:122)
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:60)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:672)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2210)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2087)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1985)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:640)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:243)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:484)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:310)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:262)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 24 more


wtam:1267425077:2010-03-01T14:31:17.956+0000:1267425077:2010-03-01T14:31:17.956+0000:Committed revision 917539.

davsclaus:1303610474:2011-04-24T10:01:14.403+0000:1303610474:2011-04-24T10:01:14.403+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2494,Task,Major,None,None,"
None
",Closed,Won't Fix,None,Unassigned,Claus Ibsen,0,0,2010-02-22 15:24:36+00:00,2011-04-24 10:01:32+00:00,"Apache abdera is still last release an incubator jar and there are no real activity in this project
http://abdera.apache.org/","davsclaus:1266903624:2010-02-23T13:40:24.993+0000:1266903624:2010-02-23T13:40:24.993+0000:Lets keep it although its not really maintained.

I had an issue with the HTTP Client 4.0.1 upgraded and wanted to get rid of atom as it caused problem. But I got that resolved.
davsclaus:1303610492:2011-04-24T10:01:32.108+0000:1303610492:2011-04-24T10:01:32.108+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2493,Sub-task,Minor,None,None,"
None
",Closed,Not A Problem,2.3.0,Unassigned,Claus Ibsen,0,0,2010-02-22 14:38:41+00:00,2011-04-24 10:01:34+00:00,"We need the SMX people to create a OSGi wrapped bundle for httpclient and httpcore and upload it to their maven bundle repo
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/","davsclaus:1266822288:2010-02-22T15:04:48.887+0000:1266822288:2010-02-22T15:04:48.887+0000:Looks like there is OSGi parepared jars with?
http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/
davsclaus:1266822428:2010-02-22T15:07:08.437+0000:1266822428:2010-02-22T15:07:08.437+0000:Okay they got OSGi jars of httpclient and httpcore

http://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.0.1/
davsclaus:1303610494:2011-04-24T10:01:34.194+0000:1303610494:2011-04-24T10:01:34.194+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2492,Improvement,Minor,"2.0.0, 2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,1,0,2010-02-22 12:10:14+00:00,2011-04-24 10:00:52+00:00,"See nabble
http://old.nabble.com/File-Consumer-with-dynamic-list-of-files-to-poll-ts27683938.html


And wiki page
http://camel.apache.org/polling-consumer.html","davsclaus:1266815295:2010-02-22T13:08:15.009+0000:1266815295:2010-02-22T13:08:15.009+0000:trunk: 912554.
davsclaus:1303610452:2011-04-24T10:00:52.434+0000:1303610452:2011-04-24T10:00:52.434+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2460,Task,Minor,2.2.0,2.3.0,"
None
",Closed,Not A Problem,2.3.0,Willem Jiang,Claus Ibsen,0,0,2010-02-11 07:28:55+00:00,2011-04-24 10:00:42+00:00,"http://camel.apache.org/cafe-example.html


The wiki page states that the client will output drinks prepared and whatnot. But this is what I get when running it.
Wait for 30 sec before shutting down with ctrl + c



[pache.camel.spring.Main.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel) is starting
[pache.camel.spring.Main.main()] DefaultCamelContext            INFO  JMX enabled. Using DefaultManagedLifecycleStrategy.
[pache.camel.spring.Main.main()] DefaultCamelContext            INFO  Started 5 routes
[pache.camel.spring.Main.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel) started
^C[                      Thread-2] Main$HangupInterceptor         INFO  Received hang up - stopping the main instance.
[                      Thread-2] MainSupport                    INFO  Apache Camel 2.2.0-fuse-01-00 stopping
[                      Thread-2] ClassPathXmlApplicationContext INFO  Closing org.springframework.context.support.ClassPathXmlApplicationContext@bfc7be: display name [org.springframework.context.support.ClassPathXmlApplicationContext@bfc7be]; startup date [Thu Feb 11 08:27:03 CET 2010]; root of context hierarchy
[                      Thread-2] DefaultListableBeanFactory     INFO  Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@342fd2: defining beans [aggregatorStrategy,orderSplitter,drinkRouter,waiter,barista,template,consumerTemplate,camel:beanPostProcessor,camel]; root of factory hierarchy
[                      Thread-2] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel) is stopping
[                      Thread-2] DefaultShutdownStrategy        INFO  Starting to graceful shutdown routes (timeout 300 seconds)
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route2 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route3 shutdown deferred.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route4 shutdown deferred.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route5 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route3 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route4 shutdown complete.
[                      Thread-2] DefaultShutdownStrategy        INFO  Graceful shutdown of routes completed in 0 seconds
[                      Thread-2] DefaultInflightRepository      INFO  Shutting down with no inflight exchanges.
[                      Thread-2] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel) stopped","njiang:1265846341:2010-02-11T07:59:01.528+0000:1265846341:2010-02-11T07:59:01.528+0000:Hi Clause,
I just ran the unit tests and mvn exec:java in the cafe example directory on the apache camel trunk, fuse trunk and 2.2.0-fuse-01-00 kit
Everything looks good.
Here is my system environment:
{code}
Apache Maven 2.2.0 (r788681; 2009-06-26 21:04:01+0800)
Java version: 1.5.0_22
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.2"" arch: ""i386"" Family: ""unix""
{code}

Can you just run mvn clean install in the cafe example directory to see if the unit tests are working?


davsclaus:1265847976:2010-02-11T08:26:16.382+0000:1265847976:2010-02-11T08:26:16.382+0000:Yeah unit test outputs activity.

But when running the example, using mvn exec:java, nothing happens. 

On the wiki page: http://camel.apache.org/cafe-example.html
you get the impression that something is logged on the console about orders of drinks.


davsclaus:1265848051:2010-02-11T08:27:31.000+0000:1265848051:2010-02-11T08:27:31.000+0000:Strange, after having run the unit test the example also outputs.

I wonder if this was a one time incident or something strange happened?

{code}
davsclaus:~/Downloads/apache-camel-2.2.0-fuse-01-00/examples/camel-example-cafe$ mvn exec:java
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'exec'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Cafe
[INFO]    task-segment: [exec:java]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing exec:java
[INFO] No goals needed for project - skipping
[INFO] [exec:java]
[e.cafe.CafeRouteBuilder.main()] ObjectHelper                   WARN  Cannot find class: org.apache.camel.util.jndi.ExampleBean
[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel-1) is starting
[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  JMX enabled. Using DefaultManagedLifecycleStrategy.
[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  Started 5 routes
[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel-1) started
Camel thread 1: seda://coldDrinks?concurrentConsumers=2 prepared cold drink #1 for order #2: iced 2 shot ESPRESSO
Camel thread 3: seda://hotDrinks?concurrentConsumers=3 prepared hot drink #1 for order #2: hot 4 shot CAPPUCCINO
Camel thread 5: seda://hotDrinks?concurrentConsumers=3 prepared hot drink #2 for order #2: hot 2 shot MOCHA
Camel thread 4: seda://hotDrinks?concurrentConsumers=3 prepared hot drink #3 for order #2: hot 4 shot LATTE
-----------------------
Order #2
Iced ESPRESSO, 2 shots.
Hot CAPPUCCINO, 4 shots.
Hot MOCHA, 2 shots.
Hot LATTE, 4 shots.
-----------------------

[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel-1) is stopping
[e.cafe.CafeRouteBuilder.main()] DefaultShutdownStrategy        INFO  Starting to graceful shutdown routes (timeout 300 seconds)
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route2 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route3 shutdown deferred.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route4 shutdown deferred.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route5 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route3 shutdown complete.
[  Camel thread 6: ShutdownTask] DefaultShutdownStrategy        INFO  Route: route4 shutdown complete.
[e.cafe.CafeRouteBuilder.main()] DefaultShutdownStrategy        INFO  Graceful shutdown of routes completed in 0 seconds
[e.cafe.CafeRouteBuilder.main()] DefaultInflightRepository      INFO  Shutting down with no inflight exchanges.
[e.cafe.CafeRouteBuilder.main()] DefaultCamelContext            INFO  Apache Camel 2.2.0-fuse-01-00 (CamelContext:camel-1) stopped
[INFO] ------------------------------------------------------------------------
{code}
davsclaus:1303610442:2011-04-24T10:00:42.790+0000:1303610442:2011-04-24T10:00:42.790+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2459,Bug,Major,2.3.0,2.3.0,"
None
",Closed,Won't Fix,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-10 22:00:29+00:00,2010-03-07 17:10:26+00:00,"A mvn jetty:run in camel-web fails on Mac OS:


$ mvn jetty:run
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Web
[INFO]    task-segment: [jetty:run]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing jetty:run
[INFO] [antrun:run 

{execution: create-prop}

]
[INFO] Executing tasks
[echo] Maven version: 2.3-SNAPSHOT
[echo] OSGi version: 2.3.0.SNAPSHOT
[INFO] Executed tasks
[INFO] [properties:read-project-properties 

{execution: default}

]
[INFO] [jaxb-schemagen:generate 

{execution: default}

]
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/apache/camel/camel-core/2.3-SNAPSHOT/camel-core-2.3-SNAPSHOT.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/fusesource/commonman/commons-management/1.0/commons-management-1.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/apache/camel/camel-spring/2.3-SNAPSHOT/camel-spring-2.3-SNAPSHOT.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-context/2.5.6/spring-context-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-beans/2.5.6/spring-beans-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-core/2.5.6/spring-core-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-aop/2.5.6/spring-aop-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-tx/2.5.6/spring-tx-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/apache/camel/camel-groovy/2.3-SNAPSHOT/camel-groovy-2.3-SNAPSHOT.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/codehaus/groovy/groovy-all/1.7.0/groovy-all-1.7.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/apache/camel/camel-ruby/2.3-SNAPSHOT/camel-ruby-2.3-SNAPSHOT.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/jruby/jruby/1.4.0/jruby-1.4.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/jersey/contribs/jersey-spring/1.1.5/jersey-spring-1.1.5.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/jersey/jersey-server/1.1.5/jersey-server-1.1.5.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/jersey/jersey-core/1.1.5/jersey-core-1.1.5.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/asm/asm/3.1/asm-3.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring/2.5.6/spring-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/springframework/spring-web/2.5.6/spring-web-2.5.6.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/jersey/jersey-json/1.1.5/jersey-json-1.1.5.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/codehaus/jettison/jettison/1.2/jettison-1.2.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.12/jaxb-impl-2.1.12.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.1.1/jackson-core-asl-1.1.1.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/com/sun/jersey/jersey-atom/1.1.5/jersey-atom-1.1.5.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/rome/rome/0.9/rome-0.9.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/opensymphony/sitemesh/2.3/sitemesh-2.3.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar
[INFO] jaxb-schemagen classpath addition: /Users/muellerc/.m2/repository/org/slf4j/slf4j-log4j12/1.5.10/slf4j-log4j12-1.5.10.jar
[INFO] Camel.java added as Camel.class doesn't exist.
[INFO] EndpointLink.java added as EndpointLink.class doesn't exist.
[INFO] Endpoints.java added as Endpoints.class doesn't exist.
[INFO] jaxb.index skipped - don't know how to handle it
[INFO] package-info.java added as package-info.class doesn't exist.
[INFO] Generating schema from 4 source files
[INFO] Compilation arguments:
'-d'
'/Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/schema'
'-classpath'
'/Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/schema:/Users/muellerc/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar:/Users/muellerc/.m2/repository/org/apache/camel/camel-core/2.3-SNAPSHOT/camel-core-2.3-SNAPSHOT.jar:/Users/muellerc/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar:/Users/muellerc/.m2/repository/org/fusesource/commonman/commons-management/1.0/commons-management-1.0.jar:/Users/muellerc/.m2/repository/org/apache/camel/camel-spring/2.3-SNAPSHOT/camel-spring-2.3-SNAPSHOT.jar:/Users/muellerc/.m2/repository/org/springframework/spring-context/2.5.6/spring-context-2.5.6.jar:/Users/muellerc/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/muellerc/.m2/repository/org/springframework/spring-beans/2.5.6/spring-beans-2.5.6.jar:/Users/muellerc/.m2/repository/org/springframework/spring-core/2.5.6/spring-core-2.5.6.jar:/Users/muellerc/.m2/repository/org/springframework/spring-aop/2.5.6/spring-aop-2.5.6.jar:/Users/muellerc/.m2/repository/org/springframework/spring-tx/2.5.6/spring-tx-2.5.6.jar:/Users/muellerc/.m2/repository/org/apache/camel/camel-groovy/2.3-SNAPSHOT/camel-groovy-2.3-SNAPSHOT.jar:/Users/muellerc/.m2/repository/org/codehaus/groovy/groovy-all/1.7.0/groovy-all-1.7.0.jar:/Users/muellerc/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/muellerc/.m2/repository/org/apache/camel/camel-ruby/2.3-SNAPSHOT/camel-ruby-2.3-SNAPSHOT.jar:/Users/muellerc/.m2/repository/org/jruby/jruby/1.4.0/jruby-1.4.0.jar:/Users/muellerc/.m2/repository/com/sun/jersey/contribs/jersey-spring/1.1.5/jersey-spring-1.1.5.jar:/Users/muellerc/.m2/repository/com/sun/jersey/jersey-server/1.1.5/jersey-server-1.1.5.jar:/Users/muellerc/.m2/repository/com/sun/jersey/jersey-core/1.1.5/jersey-core-1.1.5.jar:/Users/muellerc/.m2/repository/javax/ws/rs/jsr311-api/1.1.1/jsr311-api-1.1.1.jar:/Users/muellerc/.m2/repository/asm/asm/3.1/asm-3.1.jar:/Users/muellerc/.m2/repository/org/springframework/spring/2.5.6/spring-2.5.6.jar:/Users/muellerc/.m2/repository/org/springframework/spring-web/2.5.6/spring-web-2.5.6.jar:/Users/muellerc/.m2/repository/com/sun/jersey/jersey-json/1.1.5/jersey-json-1.1.5.jar:/Users/muellerc/.m2/repository/org/codehaus/jettison/jettison/1.2/jettison-1.2.jar:/Users/muellerc/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/Users/muellerc/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.12/jaxb-impl-2.1.12.jar:/Users/muellerc/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/Users/muellerc/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/Users/muellerc/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.1.1/jackson-core-asl-1.1.1.jar:/Users/muellerc/.m2/repository/com/sun/jersey/jersey-atom/1.1.5/jersey-atom-1.1.5.jar:/Users/muellerc/.m2/repository/rome/rome/0.9/rome-0.9.jar:/Users/muellerc/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar:/Users/muellerc/.m2/repository/opensymphony/sitemesh/2.3/sitemesh-2.3.jar:/Users/muellerc/.m2/repository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar:/Users/muellerc/.m2/repository/javax/servlet/jstl/1.1.2/jstl-1.1.2.jar:/Users/muellerc/.m2/repository/taglibs/standard/1.1.2/standard-1.1.2.jar:/Users/muellerc/.m2/repository/org/slf4j/slf4j-api/1.5.10/slf4j-api-1.5.10.jar:/Users/muellerc/.m2/repository/org/slf4j/slf4j-log4j12/1.5.10/slf4j-log4j12-1.5.10.jar:/opt/local/share/java/maven2/boot/classworlds-1.1.jar'
'-sourcepath'
'/Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/java/org/apache/camel/web/model'
'-g:none'
'-nocompile'


The ' characters around the executable and arguments are
not part of the command.


[INFO] Files to be compiled:
    /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/java/org/apache/camel/web/model/Camel.java
    /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/java/org/apache/camel/web/model/EndpointLink.java
    /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/java/org/apache/camel/web/model/Endpoints.java
    /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/java/org/apache/camel/web/model/package-info.java


Note: Writing /Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/schema/camel-web.xsd
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [remote-resources:process 

{execution: default}

]
[INFO] [resources:resources 

{execution: default-resources}

]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] [compiler:compile 

{execution: default-compile}

]
[INFO] Nothing to compile - all classes are up to date
[INFO] Preparing javadoc:javadoc
[WARNING] Removing: javadoc from forked lifecycle, to prevent recursive invocation.
[INFO] [antrun:run 

{execution: create-prop}

]
[INFO] Executing tasks
[echo] Maven version: 2.3-SNAPSHOT
[echo] OSGi version: 2.3.0.SNAPSHOT
[INFO] Executed tasks
[INFO] [properties:read-project-properties 

{execution: default}

]
[INFO] [javadoc:javadoc 

{execution: default}

]
Loading source files for package org.apache.camel.web.resources...
Constructing Javadoc information...
[WARNING] Javadoc Warnings
[WARNING] Feb 10, 2010 10:55:19 PM com.sun.jersey.wadl.resourcedoc.ResourceDoclet start
[WARNING] INFO: Wrote /Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/classes/resourcedoc.xml
[INFO] [wadl:generate 

{execution: generate}

]
[INFO] Loading wadlGenerator com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc
[INFO] Loading wadlGenerator com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport
[INFO] Loading wadlGenerator com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport
Feb 10, 2010 10:55:20 PM com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Scanning for root resource and provider classes in the packages:
  org.apache.camel.web.resources
Feb 10, 2010 10:55:20 PM com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Root resource classes found:
  class org.apache.camel.web.resources.CamelContextResource
Feb 10, 2010 10:55:20 PM com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Provider classes found:
[INFO] Wrote /Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/classes/application.wadl
[INFO] [resources:testResources 

{execution: default-testResources}

]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] [compiler:testCompile 

{execution: default-testCompile}

]
[INFO] Nothing to compile - all classes are up to date
[INFO] [jetty:run 

{execution: default-cli}

]
[INFO] Configuring Jetty for project: Camel :: Web
[INFO] Webapp source directory = /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/webapp
[INFO] Reload Mechanic: automatic
[INFO] Classes = /Users/muellerc/workspaceApacheGit/camel/components/camel-web/target/classes
2010-02-10 22:55:21.113:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] web.xml file = /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/webapp/WEB-INF/web.xml
[INFO] Webapp directory = /Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/webapp
[INFO] Starting jetty 6.1.22 ...
2010-02-10 22:55:21.118:INFO::jetty-6.1.22
2010-02-10 22:55:21.207:WARN::Could not instantiate listener org.springframework.web.context.ContextLoaderListener
java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:315)
        at org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)
        at org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:250)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:401)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:363)
        at org.mortbay.jetty.handler.ContextHandler.loadClass(ContextHandler.java:1101)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initListener(WebXmlConfiguration.java:630)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initWebXmlElement(WebXmlConfiguration.java:368)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.initWebXmlElement(AbstractConfiguration.java:190)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initialize(WebXmlConfiguration.java:289)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.initialize(AbstractConfiguration.java:133)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.configure(WebXmlConfiguration.java:222)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.configure(AbstractConfiguration.java:113)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.configureWebApp(WebXmlConfiguration.java:180)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.configureWebApp(AbstractConfiguration.java:96)
        at org.mortbay.jetty.plus.webapp.Configuration.configureWebApp(Configuration.java:149)
        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1247)
        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
        at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
        at org.mortbay.jetty.Server.doStart(Server.java:224)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
2010-02-10 22:55:21.210:INFO::No Transaction manager found - if your webapp requires one, please configure one.
2010-02-10 22:55:21.390:WARN::EXCEPTION 
java.lang.ClassNotFoundException: com.opensymphony.module.sitemesh.filter.PageFilter
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:315)
        at org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)
        at org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:250)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:401)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:363)
        at org.mortbay.util.Loader.loadClass(Loader.java:91)
        at org.mortbay.util.Loader.loadClass(Loader.java:71)
        at org.mortbay.jetty.servlet.Holder.doStart(Holder.java:73)
        at org.mortbay.jetty.servlet.FilterHolder.doStart(FilterHolder.java:81)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:662)
        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)
        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
        at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
        at org.mortbay.jetty.Server.doStart(Server.java:224)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
2010-02-10 22:55:21.392:WARN::failed sitemesh: javax.servlet.UnavailableException: com.opensymphony.module.sitemesh.filter.PageFilter
2010-02-10 22:55:21.393:WARN::Failed startup of context org.mortbay.jetty.plugin.Jetty6PluginWebAppContext@4977e3d4

{/,/Users/muellerc/workspaceApacheGit/camel/components/camel-web/src/main/webapp}

javax.servlet.UnavailableException: com.opensymphony.module.sitemesh.filter.PageFilter
        at org.mortbay.jetty.servlet.Holder.doStart(Holder.java:79)
        at org.mortbay.jetty.servlet.FilterHolder.doStart(FilterHolder.java:81)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:662)
        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)
        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
        at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
        at org.mortbay.jetty.Server.doStart(Server.java:224)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
2010-02-10 22:55:21.425:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
[INFO] Starting scanner at interval of 10 seconds.
^C2010-02-10 22:55:23.875:INFO::Shutdown hook executing
[INFO] Jetty server exiting.
2010-02-10 22:55:24.498:INFO::Shutdown hook complete
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14 seconds
[INFO] Finished at: Wed Feb 10 22:55:24 CET 2010
[INFO] Final Memory: 74M/254M
[INFO] ------------------------------------------------------------------------","muellerc:1265810665:2010-02-10T22:04:25.272+0000:1265810665:2010-02-10T22:04:25.272+0000:This issue is related to [CAMEL-2421|https://issues.apache.org/activemq/browse/CAMEL-2421].
davsclaus:1265854556:2010-02-11T10:15:56.739+0000:1265854556:2010-02-11T10:15:56.739+0000:Works fine on JDK 1.5.

davsclaus:(svn)camel[trunk:908851]/components/camel-web$ mvn -version
Maven version: 2.0.9
Java version: 1.5.0_22
OS name: ""mac os x"" version: ""10.6.2"" arch: ""i386"" Family: ""unix""


It looks like a Jetty issue and not a Camel issue.
davsclaus:1265854606:2010-02-11T10:16:46.895+0000:1265854606:2010-02-11T10:16:46.895+0000:Maybe you can try with a newer version of Jetty on your system to see if it works, eg a 7.x version.
muellerc:1265855714:2010-02-11T10:35:14.967+0000:1265855714:2010-02-11T10:35:14.967+0000:I will try it with jetty 7.0.1.v20091125.
muellerc:1266295105:2010-02-16T12:38:25.038+0000:1266295105:2010-02-16T12:38:25.038+0000:Fails also with JDK 1.5 for me :-(

muellerc$ mvn -version
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.5.0_19
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.2"" arch: ""i386"" Family: ""unix""

muellerc$ java -version
java version ""1.5.0_19""
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_19-b02-304)
Java HotSpot(TM) Client VM (build 1.5.0_19-137, mixed mode, sharing)

Trying jetty 7...
muellerc:1266735143:2010-02-21T14:52:23.058+0000:1266735143:2010-02-21T14:52:23.058+0000:Hey Claus,

works for me with Java 1.6 if I uses Maven 2.0.9 as required in http://camel.apache.org/building.html. I think we could close this issue (works as designed).
If we upgrade sometime to Maven 2.2.x, we should have this in mind. I will try to provide a unit test which verifies this in [CAMEL-2421|https://issues.apache.org/activemq/browse/CAMEL-2421]...

{code}
muellerc$ mvn -version
Maven version: 2.0.9
Java version: 1.6.0_17
OS name: ""mac os x"" version: ""10.6.2"" arch: ""x86_64"" Family: ""mac""
{code}

Regards,
Christian
muellerc:1266760935:2010-02-21T22:02:15.783+0000:1266760935:2010-02-21T22:02:15.783+0000:I opened a issue for Maven [MNG-4567|http://jira.codehaus.org/browse/MNG-4567].
muellerc:1267953026:2010-03-07T17:10:26.749+0000:1267953026:2010-03-07T17:10:26.749+0000:This is a maven issue and will be fixed there. [MNG-4567|http://jira.codehaus.org/browse/MNG-4567]"
0,CAMEL-2458,Bug,Minor,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-10 17:39:09+00:00,2011-04-24 10:01:24+00:00,See rfc2616.,"muellerc:1265809771:2010-02-10T21:49:31.522+0000:1265809771:2010-02-10T21:49:31.522+0000:Provided the patch
njiang:1265837960:2010-02-11T05:39:20.861+0000:1265837960:2010-02-11T05:39:20.861+0000:Applied patch with thank to Christian.
http://svn.apache.org/viewvc?rev=908736&view=rev
davsclaus:1303610484:2011-04-24T10:01:24.019+0000:1303610484:2011-04-24T10:01:24.019+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2457,Improvement,Major,None,None,"
None
",Closed,Fixed,1.6.3,Willem Jiang,Willem Jiang,0,0,2010-02-10 10:09:37+00:00,2011-01-17 16:50:38+00:00,"As the camel 2.x support this feature and it is important for user who still use camel 1.x, we need to back port this feature.","njiang:1265944756:2010-02-12T11:19:16.898+0000:1265944756:2010-02-12T11:19:16.898+0000:camel 1.x branch
http://svn.apache.org/viewvc?rev=908979&view=rev
davsclaus:1295254238:2011-01-17T16:50:38.986+0000:1295254238:2011-01-17T16:50:38.986+0000:Closing all 1.x tickets"
0,CAMEL-2456,Bug,Minor,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-02-10 02:13:00+00:00,2011-04-24 10:01:11+00:00,"Here is the mail thread which discusses about this issue.
http://old.nabble.com/Attemp-to-send-message-to-activemq-temporary-queue-using-producerTemplate%3A-InvalidMetadataException-tp27520096p27520096.html","davsclaus:1265754070:2010-02-10T06:21:10.177+0000:1265754070:2010-02-10T06:21:10.177+0000:I do NOT think we should enlist temporary JMS queues in JMX
management, the overhead is way to high for that.
Since those queues are temporary they live for a short time and
management is more about long lived resources to manage.

Can we do a -1 on this and implement logic to skip trying to register
those kind of endpoints for management.
njiang:1265755349:2010-02-10T06:42:29.080+0000:1265755349:2010-02-10T06:42:29.080+0000:Hi Claus

I think we should provide the management for the temporary Queue, as these endpoints are exiting in the camel context.
Client may want to ask managed information about these endpoint.
If we shutdown the camel context , all the camel managed resources are gone, and it will not introduce any further burden. 
davsclaus:1265756024:2010-02-10T06:53:44.333+0000:1265756024:2010-02-10T06:53:44.333+0000:Willem *yes* it will

JMX puts *considerable* overhead on endpoint registration. And temporary endpoints should *newer* be registered in JMX.
The temporary endpoint uses unique uri's and therefore you will keep adding managed endpoints to JMX which end the end will downgrade your system.
All together it impacts performance unnecessary.

We have had such issues in the past where people over days will accumulate millions of endpoints in JMX and cause high memory usage.
In the end causing people to have to shutdown and restart their system.

So please do a -1.
njiang:1265758099:2010-02-10T07:28:19.636+0000:1265758099:2010-02-10T07:28:19.636+0000:Hi Claus,

I checked the code of  JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint and they are singleton endpoint,
and we hit the JMX exception as current Camel only register the singleton endpoint into JMX agent to avoid the situation that you described.

It could be easy to let camel skip these endpoint by checking the ManagedResource annotation, but I still want to know if the singleton endpoint still have the potential JMX issue that you mentioned.

davsclaus:1265777081:2010-02-10T12:44:41.143+0000:1265777081:2010-02-10T12:44:41.143+0000:This issue is when the end user is sending using ProducerTemplate the reply manually.

If using Camel request/reply out of the box, Camel will not enlist temporary queues as endpoints. This is good as the overhead is thus only when end user does it manually.
davsclaus:1265782709:2010-02-10T14:18:29.902+0000:1265782709:2010-02-10T14:18:29.902+0000:The only problem I see is if the end user uses a lot of different temporary JMS queues with different names as they will then be enlisted in JMX to no avail.
njiang:1265929694:2010-02-12T07:08:14.317+0000:1265929694:2010-02-12T07:08:14.317+0000:Hi Claus,

I agree if the user use the ExchangeID as the temporary queue and use that to implement request/reply message exchange pattern, register these kind of temporary queues to JMX agent will be a big issue.

So I reverted my last commit of this issue and find better new way to fix this WARNING log issue.
And now these JmsTemporaryTopicEndpoint , JmsTemporaryQueueEndpoint will not be registered to JMX agent.


davsclaus:1265930599:2010-02-12T07:23:19.911+0000:1265930599:2010-02-12T07:23:19.911+0000:Willem

You current solutions is great. Good work.
davsclaus:1303610471:2011-04-24T10:01:11.528+0000:1303610471:2011-04-24T10:01:11.528+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2455,Improvement,Major,"2.1.0, 2.2.0",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Johan Haleby,0,0,2010-02-09 09:47:15+00:00,2011-04-24 10:01:05+00:00,"To close a Mina session today you can set the HEADER_CLOSE_SESSION_WHEN_COMPLETE header to true in when specifying the route. How ever in cases where you'd like the route to be as decoupled from a specific camel component as possible this is not the best option. It would be better to support setting this as an option on the endpoint URI, e.g. mina:tcp://localhost:6200?autoCloseSession=true.","davsclaus:1265683385:2010-02-09T10:43:05.741+0000:1265683385:2010-02-09T10:43:05.741+0000:trunk: 907996.

There is a {{disconnect}} option now. Its the same option name as we have on the FTP component as well. Trying to keep same names across components.
davsclaus:1303610465:2011-04-24T10:01:05.052+0000:1303610465:2011-04-24T10:01:05.052+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2454,Task,Minor,2.2.0,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-09 08:34:36+00:00,2011-04-24 10:01:19+00:00,woodstox 4.0.7 is released and its an osgi bundle. camel-jaxb and camel-xstream should use that version by default.,"davsclaus:1265676692:2010-02-09T08:51:32.661+0000:1265676692:2010-02-09T08:51:32.661+0000:trunk: 907972.

camel-soap is also upgraded
davsclaus:1303610479:2011-04-24T10:01:19.178+0000:1303610479:2011-04-24T10:01:19.178+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2453,Improvement,Major,None,None,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Willem Jiang,0,0,2010-02-09 04:04:55+00:00,2011-04-24 10:01:45+00:00,"We store the Http Request and Response object into HttpMessage as member objects, it makes us impossible to get the request and response object from the other endpoint , as current camel just copies message header and message body when it copies the message.","njiang:1265677508:2010-02-09T09:05:08.980+0000:1265677508:2010-02-09T09:05:08.980+0000:When we move the Camel 3.0, we can consider to get ride of HttpMessage.

njiang:1265677765:2010-02-09T09:09:25.245+0000:1265677765:2010-02-09T09:09:25.245+0000:
Also updated the HttpConvert, in this way we can get the HttpServletRequest from any Message implementation.
trunk
http://svn.apache.org/viewvc?rev=907978&view=rev
davsclaus:1303610505:2011-04-24T10:01:45.708+0000:1303610505:2011-04-24T10:01:45.708+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2452,Bug,Major,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-06 13:56:38+00:00,2010-11-03 22:04:04+00:00,HttpHeaderFilterStrategy uses the HTTP headers with upper case characters on the beginning (e. g. 'Transfer-Encoding' instead of 'transfer-encoding').,"davsclaus:1265439811:2010-02-06T15:03:31.722+0000:1265439811:2010-02-06T15:03:31.722+0000:http headers are case *insensitive* so you can spell them how you like
davsclaus:1265444588:2010-02-06T16:23:08.276+0000:1265444588:2010-02-06T16:23:08.276+0000:I have moved this to 2.3 as I do not want Hadrian to hold up building the 2.2 release if he things this ticket must be fixed first.

Christian can you describe a bit more what you think is the problem?
Doesn't the filter ignore case when filtering? If not you can add that into the reg exp to tell it to ignore case.
muellerc:1265445431:2010-02-06T16:37:11.278+0000:1265445431:2010-02-06T16:37:11.278+0000:Hey Claus,
you are too fast for me... :-)

I attached a unit test to show what the problem is (in my opinion).
You are right, the http header are case intensive, but the HttpHeaderFilterStrategy (extends DefaultHeaderFilterStrategy) expect the filter keys in lower case, if the 'lowerCase' attribute is set to true (which is the case for HttpHeaderFilterStrategy). If the filter keys are defined in upper case or camel case, the filter will never applied.

{code}
        if (filter != null) {
            if (isLowerCase()) {
                if (filter.contains(headerName.toLowerCase())) {
                    return true;
                }
            } else {
                if (filter.contains(headerName)) {
                    return true;
                }
            }
        }
{code}

Regards,
Christian
muellerc:1265764913:2010-02-10T09:21:53.995+0000:1265764913:2010-02-10T09:21:53.995+0000:Claus,
could you please have a look on this issue and patch. [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] depends on this and I planed to deliver the patch for [CAMEL-1530|https://issues.apache.org/activemq/browse/CAMEL-1530] in the next tree days.

The ""problem"" is, that HttpClient 4.0.1 checks the request header of the presents of some header which must not in, e.g. Transfer-Encoding. This header (and the other headers list in the issue name) should be filtered by the HttpHeaderFilterStrategy:

{code:title=HttpHeaderFilterStrategy.java}
public class HttpHeaderFilterStrategy extends DefaultHeaderFilterStrategy {

    public HttpHeaderFilterStrategy() {
        initialize();
    }

    protected void initialize() {
        getOutFilter().add(""content-length"");
        getOutFilter().add(""content-type"");
        // Add the filter for the Generic Message header
        // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5
        getOutFilter().add(""Cache-Control"");
        getOutFilter().add(""Connection"");
        getOutFilter().add(""Pragma"");
        getOutFilter().add(""Trailer"");
        getOutFilter().add(""Transfer-Encoding"");
        getOutFilter().add(""Upgrade"");
        getOutFilter().add(""Via"");
        getOutFilter().add(""Warning"");

    setLowerCase(true);

        // filter headers begin with ""Camel"" or ""org.apache.camel""
        // must ignore case for Http based transports
        setOutFilterPattern(""(?i)(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*"");
        }
}
{code}

But DefaultHeaderFilterStrategy compares the lower case strings, if lowerCase is set to true (which is the case for HttpHeaderFilterStrategy)

{code:title=DefaultHeaderFilterStrategy .java}
if (filter != null) {
    if (isLowerCase()) {
        if (filter.contains(headerName.toLowerCase())) {
            return true;
        }
    } else {
        if (filter.contains(headerName)) {
            return true;
        }
    }
}
{code}

This imply, that 'Transfer-Encoding' is comparing with 'transfer-encoding' what never match and this header will be never filtered out.

Tanks,
Christian
davsclaus:1265782779:2010-02-10T14:19:39.815+0000:1265782779:2010-02-10T14:19:39.815+0000:Okay let me look at the patches
davsclaus:1265783114:2010-02-10T14:25:14.781+0000:1265783114:2010-02-10T14:25:14.781+0000:What about {{Date}} header?
http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5
davsclaus:1265783388:2010-02-10T14:29:48.265+0000:1265783388:2010-02-10T14:29:48.265+0000:trunk: 908517.

Thanks for the patch Christian.
unmarshall:1288702489:2010-11-02T20:54:49.234+0000:1288702489:2010-11-02T20:54:49.234+0000:Hi,

In Camel 2.5 HttpHeaderFilterStrategy still contains:
getOutFilter().add(""transfer-encoding"");
As per the issue the case should be camel case and not all lower case.

Can we expect a patch for 2.5 version?

Regards,
Madhav
muellerc:1288707785:2010-11-02T22:23:05.518+0000:1288707785:2010-11-02T22:23:05.518+0000:I don't see any problems with this code. The patch changed the camel case headers to lower case headers because HttpHeaderFilterStrategy set lower case to true and compares the lower case String of ""Transfer-Encoding"" which is ""transfer-encoding"" with the filter entry which is also ""transfer-encoding"". What is your problem in concrete?

Cheers,
Christian
unmarshall:1288738099:2010-11-03T06:48:19.126+0000:1288738099:2010-11-03T06:48:19.126+0000:Hi Christian,

Please refer to the issue posted @ http://camel.465427.n5.nabble.com/CXF-http-conduit-AllowChunking-does-not-work-td3247495.html#a3247495
I initially felt that this was causing the problem but then after seeing your comment it seems that this is not the problem.

Unless you feel otherwise, please close the issue.

regards,
madhav
muellerc:1288793044:2010-11-03T22:04:04.748+0000:1288793044:2010-11-03T22:04:04.748+0000:Madhav opened [CAMEL-3306|https://issues.apache.org/activemq/browse/CAMEL-3306] to track his issue."
0,CAMEL-2451,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Martin Krasser,Martin Krasser,0,0,2010-02-05 08:56:13+00:00,2010-11-03 05:13:30+00:00,When an HL7 message length is exactly 1022 then the two end control charcters are not read from the same packet/buffer. This causes HL7MLLPDecoder.scan() method to fail.,"mrt1nz:1265331764:2010-02-05T09:02:44.674+0000:1265331764:2010-02-05T09:02:44.674+0000:Although a bit late, I'd like to checkin a fix for the upcoming 2.2 release. If there are any objections please let me know.
davsclaus:1265332142:2010-02-05T09:09:02.109+0000:1265332142:2010-02-05T09:09:02.109+0000:Go ahead. You got until Hadrian wakes up :)
mrt1nz:1265332238:2010-02-05T09:10:38.375+0000:1265332238:2010-02-05T09:10:38.375+0000:I love time zones :)"
0,CAMEL-2450,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-02-04 12:42:50+00:00,2010-11-03 05:13:30+00:00,"The shade plugin doesn't include the files in META-INF/services from camel-spring bundle, we should fix it.","njiang:1265260451:2010-02-04T13:14:11.200+0000:1265260451:2010-02-04T13:14:11.200+0000:trunk 
http://svn.apache.org/viewvc?rev=906473&view=rev"
0,CAMEL-2449,Bug,Major,2.1.0,,"
None
",Closed,Cannot Reproduce,None,Unassigned,Vincent Girard-Reydet,0,1,2010-02-04 09:04:02+00:00,2010-02-04 13:29:50+00:00,"I have a WSDL (see files attached) that imports a schema file. I create a Camel-CXF route from a SOAP endpoint to a logger :


<c:camelContext>
    <c:route>
        <c:from uri=""cxf:bean:alarmServiceEndpoint2""/>
        <c:to uri=""log:test""/>
     </c:route>
</c:camelContext>


 There are 2 problems:


1. If the XSD is imported like this (without ""./"" in schemaLocation):
   <xs:schema xmlns=""http://www.w3.org/2001/XMLSchema"">
      <import namespace=""http://diva.thales/xsd"" schemaLocation=""AlarmServices.xsd""/>
    </xs:schema>


then it is possible to create a CXF Endpoint using an implementation class (see files attached, the Test class is an implementation os the AlarmServices SEI):
	<cxf:cxfEndpoint id=""alarmServiceEndpoint2""
		address=""/AlarmServices2"" 
		serviceClass=""eu.diva.tis.alert.internal.Test""
		endpointName=""alarm:AlarmServicesSOAP12port_http"" 
		serviceName=""alarm:AlarmServices""
		xmlns:alarm=""http://diva.thales""/>
but if I use the Service Provider API it will fail:
    <cxf:cxfEndpoint id=""alarmServiceEndpoint""
		address=""/AlarmServices"" 
		serviceClass=""com.thales.diva.AlarmServicesProvider""
		endpointName=""alarm:AlarmServicesSOAP12port_http"" 
		serviceName=""alarm:AlarmServices""
		wsdlURL=""classpath:/diva/schemas/AlarmServices.wsdl""
		xmlns:alarm=""http://diva.thales"" />
with the following exception:
Exception in thread ""SpringOsgiExtenderThread-56"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToStartRouteException: org.apache.cxf.service.factory.ServiceConstructionException: Failed to create service.
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1039)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        ...
Caused by: javax.wsdl.WSDLException: WSDLException (at /wsdl:definitions/wsdl:types/xs:schema): faultCode=PARSER_ERROR: Problem parsing 'AlarmServices.xsd'.: java.io.FileNotFoundException: D:\smx4\build2\AlarmServices.xsd (The specified file cannot be found)
        at com.ibm.wsdl.xml.WSDLReaderImpl.getDocument(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.parseSchema(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.parseTypes(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.parseDefinitions(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
        at com.ibm.wsdl.xml.WSDLReaderImpl.readWSDL(Unknown Source)
        at org.apache.cxf.wsdl11.WSDLManagerImpl.loadDefinition(WSDLManagerImpl.java:229)
        at org.apache.cxf.wsdl11.WSDLManagerImpl.getDefinition(WSDLManagerImpl.java:179)
        at org.apache.cxf.wsdl11.WSDLServiceFactory.<init>(WSDLServiceFactory.java:91)
        ... 28 more


2. Now if I change my WSDL to use a relative location for the XSD import:
    <xs:schema xmlns=""http://www.w3.org/2001/XMLSchema"">
      <import namespace=""http://diva.thales/xsd"" schemaLocation=""./AlarmServices.xsd""/>
    </xs:schema>


In both cases, I get the following, very strange error:


Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route10: Route[[From[cxf:bean:alarmServiceEndpoint2]] -> [To[log:test... because of Failed to resolve endpoint: cxf://bean:alarmServiceEndpoint2 due to: org.apache.camel.spring.SpringCamelContext cannot be cast to org.apache.camel.spring.SpringCamelContext
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:141)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:601)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1156)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1073)
        ... 
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf://bean:alarmServiceEndpoint2 due to: org.apache.camel.spring.SpringCamelContext cannot be cast to org.apache.camel.spring.SpringCamelContext
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
       ...
Caused by: java.lang.ClassCastException: org.apache.camel.spring.SpringCamelContext cannot be cast t
o org.apache.camel.spring.SpringCamelContext
        at org.apache.camel.component.cxf.CxfSpringEndpoint.init(CxfSpringEndpoint.java:68)
        at org.apache.camel.component.cxf.CxfSpringEndpoint.<init>(CxfSpringEndpoint.java:61)
        at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:63)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
       ...


Using a debugger I checked in the CxfSpringEndpoint init() method that the  CamelContext instance retrieved is really a SpringCamelContext. In the Manifest.MF of my bundle I have imported nearly all Camel packages (including org.apache.camel.spring) but it does not change anything.","njiang:1265247371:2010-02-04T09:36:11.437+0000:1265247371:2010-02-04T09:36:11.437+0000:Do you wrap the camel-context as the ServiceUnit?
Or just deploy the camel-context as osgi bundle?

There may have more than one version of camel in the servicemix, please uninstall the useless one.

thewinch:1265247652:2010-02-04T09:40:52.257+0000:1265247652:2010-02-04T09:40:52.257+0000:I deploy the camel-context inside an OSGi bundle (files to come, I'm cleaning up things). As for Camel and cxf bundles, here is the list:

[  43] [Active     ] [            ] [       ] [   60] camel-core (2.1.0)
[  44] [Active     ] [            ] [       ] [   60] camel-stream (2.1.0)
[  67] [Active     ] [            ] [       ] [   60] Apache CXF Bundle Jar (2.2.5)
[  88] [Active     ] [            ] [       ] [   60] camel-jms (2.1.0)
[  89] [Active     ] [            ] [       ] [   60] camel-jaxb (2.1.0)
[ 108] [Active     ] [            ] [       ] [   60] camel-spring (2.1.0)
[ 109] [Active     ] [            ] [       ] [   60] camel-osgi (2.1.0)
[ 110] [Active     ] [            ] [       ] [   60] camel-spring-osgi (2.1.0)
[ 125] [Active     ] [            ] [       ] [   60] camel-cxf (2.1.0)
[ 128] [Active     ] [            ] [       ] [   60] activemq-camel (5.3.0)

Note: I removed all the servicemix components because of the integration bug with Camel.
thewinch:1265248408:2010-02-04T09:53:28.351+0000:1265248408:2010-02-04T09:53:28.351+0000:A minimum test case to reproduce the problem
thewinch:1265249327:2010-02-04T10:08:47.609+0000:1265249327:2010-02-04T10:08:47.609+0000:I must add that this it seems to be a regression. In another environment with the environment below it works perfectly. This was done with the Servicemix 4.1.0-SNAPSTHOT from 2009/12/03 (before Camel 2.1.0 was released). The Servicemix was patched to circumvene the deployment problems with teh web deployers.

karaf@root> osgi:list | grep camel
[  82] [Active     ] [            ] [       ] [   60] camel-core (2.1.0.SNAPSHOT)
[  85] [Active     ] [            ] [       ] [   60] camel-spring (2.1.0.SNAPSHOT)
[  86] [Active     ] [            ] [       ] [   60] camel-osgi (2.1.0.SNAPSHOT)
[ 170] [Active     ] [            ] [       ] [   60] camel-spring-osgi (2.1.0.SNAPSHOT)
[ 187] [Active     ] [            ] [       ] [   60] camel-cxf (2.1.0.SNAPSHOT)
[ 188] [Active     ] [            ] [       ] [   60] activemq-camel (5.3.0)
[ 189] [Active     ] [            ] [       ] [   60] camel-jms (2.1.0.SNAPSHOT)
[ 190] [Active     ] [            ] [       ] [   60] camel-jaxb (2.1.0.SNAPSHOT)
[ 191] [Active     ] [            ] [       ] [   60] camel-stream (2.1.0.SNAPSHOT)
karaf@root> osgi:list | grep CXF
[ 137] [Active     ] [            ] [       ] [   60] Apache CXF Bundle Jar (2.2.5)
[ 138] [Active     ] [            ] [       ] [   60] ServiceMix :: CXF Binding Component (2009.02.0.SNAPSHOT)
[ 166] [Active     ] [            ] [       ] [   60] Apache CXF Runtime JBI Binding (2.2.5)
[ 167] [Active     ] [            ] [       ] [   60] Apache CXF Runtime JBI Transport (2.2.5)
[ 168] [Active     ] [            ] [       ] [   60] ServiceMix :: CXF Service Engine (2009.02.0.SNAPSHOT)
[ 169] [Active     ] [            ] [       ] [   60] Apache ServiceMix Example :: CXF OSGi (4.1.0.SNAPSHOT)

njiang:1265253014:2010-02-04T11:10:14.256+0000:1265253014:2010-02-04T11:10:14.256+0000:Hi Vincent,
I tried to build the test case on my box by fixing the jmx-ri issue, and jaxb, jaxws issue ( I'm using JDK 1.5).
Now I'm blocked with this error
{code}

upload/src/main/java/com/thales/diva/Test2.java:[3,26] cannot find symbol
symbol  : class CmdApisServicesPortType
location: package eu.diva.tis.api.ws

upload/src/main/java/com/thales/diva/Test2.java:[9,30] cannot find symbol
symbol: class CmdApisServicesPortType
public class Test2 implements CmdApisServicesPortType {

{code}

Can you submit a newer test case?

njiang:1265253399:2010-02-04T11:16:39.378+0000:1265253399:2010-02-04T11:16:39.378+0000:Did you try to use the Fuse ESB, which should be will tested and there is no version conflict between servicemix , camel, cxf.
You can find the latest 4.1.0-psc-01-RC1 [here|http://fusesource.com/products/enterprise-servicemix4/] 
thewinch:1265261355:2010-02-04T13:29:15.991+0000:1265261355:2010-02-04T13:29:15.991+0000:OK, it seems to fix the problem. By the way I was not able to reproduce my problem in a genuine SMX4 build, so it seems my environment has become somewhat corrupted. Closing the bug for now.

Willem, did you have a chance to discuss with JB Onofré about the version conflict problem ? Seems that you have fixed it in the Fuse version and I think it would be great having it in the genuine SMX4 distro.
thewinch:1265261390:2010-02-04T13:29:50.884+0000:1265261390:2010-02-04T13:29:50.884+0000:Closing the bug unless I find how the environment became corrupted."
0,CAMEL-2448,Improvement,Major,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-04 06:06:36+00:00,2010-11-03 05:13:30+00:00,"Let the Camel ErrorHandler catch all exceptions so they will be dealt with such as logged and whatnot. We have a case with CAMEL-2445 where the JDK itself did not even log an Error which was thrown out of bounds on a Thread. Then that issue was hard to identify as it was no trace of it in the logs. Bad bad JDK 


So we let the Camel error handler catch all kinds and let it deal with it, it will by default log it at ERROR level so you got a trace of it it the logs now.",davsclaus:1265247450:2010-02-04T09:37:30.131+0000:1265247450:2010-02-04T09:37:30.131+0000:trunk: 906417.
0,CAMEL-2447,Bug,Major,"2.0-M3, 2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-02-04 02:45:52+00:00,2010-11-03 05:13:30+00:00,"There is no ""content-type"" header return from the below route



 <route>

      <from uri=""jetty:http://localhost:9006/employeesBase?matchOnUriPrefix=true""/>

      <to uri=""cxfbean:EmployeesPOJO""/>

  </route>","njiang:1265225896:2010-02-04T03:38:16.534+0000:1265225896:2010-02-04T03:38:16.534+0000:trunk
http://svn.apache.org/viewvc?rev=906331&view=rev"
0,CAMEL-2446,Improvement,Minor,Future,2.5.0,"
None
",Closed,Incomplete,2.5.0,Claus Ibsen,Chris Love,0,0,2010-02-04 02:20:01+00:00,2011-04-24 09:57:31+00:00,"I have attached patches of various changes that I have made to context files.  The changes fall into following categories:



using p: for properties rather than full xml
using u:list for lists rather than full xml
using default-autowire=""byName"" in order to reduce amount of xml required
updating files to use camel:camelContext schema rather than <camelContext xmlns=""http://camel.apache.org/schema/spring"">



Please let me know if I need to tweek any of the changes.  I have smoke tested the examples, but is there a general unit test that will validate that the context file?","davsclaus:1266493949:2010-02-18T19:52:29.870+0000:1266493949:2010-02-18T19:52:29.870+0000:Good work Chris.

Is it possible to remove the {{default-autowire}} as its not commonly use and the XML files should help new users to understand what happens. So its best to be a bit more verbose than playing tricks with auto wiring.
davsclaus:1266493972:2010-02-18T19:52:52.494+0000:1266493972:2010-02-18T19:52:52.494+0000:And maybe you can create one big patch files so its easier to apply
chrislovecnm:1268928179:2010-03-19T00:02:59.215+0000:1268928179:2010-03-19T00:02:59.215+0000:Will do. I use autowire all the time, but I understand that non-spring weanies may be a bit confused
davsclaus:1282776980:2010-08-26T06:56:20.151+0000:1282776980:2010-08-26T06:56:20.151+0000:Closing old ticket
davsclaus:1303610251:2011-04-24T09:57:31.952+0000:1303610251:2011-04-24T09:57:31.952+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2445,Bug,Major,"1.6.2, 2.1.0","1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Stanley J. Lewis,Stanley J. Lewis,0,0,2010-02-03 21:57:34+00:00,2010-11-03 05:13:29+00:00,"If an aggregator sends an exchange to a processor that throws an Error this causes the thread started by BatchProcessor to exit, exchanges will then accumulate in the aggregator until an OutOfMemoryError occurs.


This patch sorts that out and adds a unit test, however there's another problem that I'm still looking into, namely that BatchProcessor just uses an instance of LoggingErrorHandler as it's exception handler, so any exceptions/errors caught by this processor will just get logged and not follow the normal Camel error handling.","jgenender:1265212915:2010-02-04T00:01:55.838+0000:1265212915:2010-02-04T00:01:55.838+0000:This is caused by the the trapping of Exception in the BatchSender but wont fire for Throwable (i.e. NoSuchMethodError/LingageError, etc).  Thus when the exceptions fire, it continues on about its way, filling the LinkedList and thus a memory leak ensues.  The patch really should be at where it is already looking for errors.  Patches for 1.x and 2.x. are attached.
davsclaus:1265235403:2010-02-04T06:16:43.397+0000:1265235403:2010-02-04T06:16:43.397+0000:I will change Camel 2.x to catch all kind of exceptions in CAMEL-2448. Then the regular camel error handler will also handle this NoSuchMethodException which will at minimum be logged, so there is a trace in the log now.

In 1.x we will patch it with your patches so BatchProcessor will log the exceptions.

I have adjusted your patch a bit as you need to catch the exception in the loop so Camel will process the next exchange to drain the aggregated exceptions. Otherwise they will be kept in the memory and it will only process 1 exchange at every trigger. And thus it can lead to consume more memory if your fill in more messages than it can drain.
davsclaus:1265235910:2010-02-04T06:25:10.838+0000:1265235910:2010-02-04T06:25:10.838+0000:Merged to 1.x: 906376.
davsclaus:1265238566:2010-02-04T07:09:26.657+0000:1265238566:2010-02-04T07:09:26.657+0000:Willem applied patch to trunk: 906342

And I refined the patch a bit: 906381"
0,CAMEL-2444,Bug,Trivial,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Michael Mathers,0,0,2010-02-03 20:27:16+00:00,2010-11-03 05:13:29+00:00,"Log Component documentation for ""showAll"" option is misleading or the option does not work as expected.


""showAll 	 false 	 Quick option for turning all options on.""


There appear to be several options that are not turned as expected such as ""multiline"" and ""showStackTrace"", etc..","davsclaus:1265235231:2010-02-04T06:13:51.601+0000:1265235231:2010-02-04T06:13:51.601+0000:Thanks for reporting. I have updated the wiki and fixed an issue in the code in terms of showStrackTrace with showAll

trunk: 906375"
0,CAMEL-2443,Improvement,Major,"1.6.2, 2.1.0","1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Claus Ibsen,Claus Ibsen,0,0,2010-02-03 14:14:52+00:00,2010-11-03 05:13:29+00:00,"protected void processExchange(Exchange exchange) throws Exception {
        processor.process(exchange);
    }




This method should log at ERROR level in case of exceptions","davsclaus:1265179391:2010-02-03T14:43:11.541+0000:1265179391:2010-02-03T14:43:11.541+0000:trunk: 906068
1.x: 906070."
0,CAMEL-2442,Bug,Major,2.1.0,"1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Eoghan Glynn,0,0,2010-02-03 10:50:35+00:00,2010-11-03 05:13:29+00:00,"There's a mismatch between the explicit version constraints on the javax.activation, javax.annotation, javax.jws, javax.xml.ws etc. packages in the camel-cxf manifest and the actual version assigned to these packages by Equinox when pulled in via the system packages from the Java6 rt.jar.


This causes bundle resolution failures such as the following:



org.osgi.framework.BundleException: The bundle could not be resolved. Reason: Package uses conflict: Import-Package: org.apache.camel; version=""2.2.something""




Normally this issue could be suppressed by configuring the Equinox system packages to exclude the problematic javax.* packages. However, we don't have enough control over this in pax-runner 1.3 (which unilaterally adds these packages in the generated config.ini).


The solution is to loosen the version constraints on these imports in the camel-cxf bundle manifest.","eglynn:1265165590:2010-02-03T10:53:10.883+0000:1265165590:2010-02-03T10:53:10.883+0000:Please review and apply attached patch is considered OK.
davsclaus:1265166610:2010-02-03T11:10:10.145+0000:1265166610:2010-02-03T11:10:10.145+0000:Willem will you take care of this ASAP
njiang:1265166886:2010-02-03T11:14:46.719+0000:1265166886:2010-02-03T11:14:46.719+0000:Claus: yeah, I'm working on it now.

njiang:1265170984:2010-02-03T12:23:04.727+0000:1265170984:2010-02-03T12:23:04.727+0000:Hi Eoghan,

I just changed you patch a little bit and used * to avoid specify to reduce the package number of import section.
I also merged the patch into camel 1.x branch.

BTW, I checked other camel module such as camel-jaxb, camel-jms, etc, they don't have the issue that you meet. 


njiang:1265171036:2010-02-03T12:23:56.466+0000:1265171036:2010-02-03T12:23:56.466+0000:camel trunk
http://svn.apache.org/viewvc?rev=906013&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=906019&view=rev"
0,CAMEL-2441,Task,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-03 10:30:35+00:00,2010-11-03 05:13:28+00:00,To make it convenient for users running in a environment without internet access to test Camel without getting failures to not being able to connect to google.,
0,CAMEL-2440,Improvement,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-03 10:02:05+00:00,2010-11-03 05:13:28+00:00,"See nabble
http://old.nabble.com/groovy-and-builderRefs-ts27430139.html",davsclaus:1265166584:2010-02-03T11:09:44.347+0000:1265166584:2010-02-03T11:09:44.347+0000:trunk: 905995.
0,CAMEL-2439,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-02 16:59:49+00:00,2010-11-03 05:13:28+00:00,"When using a file consumer with an absolute path, eg from(""file:/data"") then when the process is done and it wants to move the file to .camel sub dir of /data it may not do that correctly on Windows.


The issue is the logic in Camel is based upon that a path starting with \ is considered absolute, as it is on Unix OS and other platforms. Where as on Windows java.io.File returns false for such files. The other return true. So we need to cater for this and make Windows return true as well so the logic is consistent across OS.",davsclaus:1265102803:2010-02-02T17:26:43.851+0000:1265102803:2010-02-02T17:26:43.851+0000:trunk: 905715.
0,CAMEL-2438,Task,Minor,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-02 11:34:26+00:00,2011-04-24 10:01:21+00:00,No Desc,"muellerc:1265081735:2010-02-02T11:35:35.557+0000:1265081735:2010-02-02T11:35:35.557+0000:This issue is related to [CAMEL-1530|http://issues.apache.org/activemq/browse/CAMEL-1530]
muellerc:1265903645:2010-02-11T23:54:05.373+0000:1265903645:2010-02-11T23:54:05.373+0000:Provide the patch.
This patch also introduce a new class org.apache.camel.component.restlet.RestletTestSupport which simplifies the Restlet tests and some refactorings because of this new test class. 
davsclaus:1266891050:2010-02-23T10:10:50.632+0000:1266891050:2010-02-23T10:10:50.632+0000:Applied patch with thanks to Christian

trunk: 915267.

Also I removed the dep on camel-http as it was not needed. I changed the features as well.
davsclaus:1303610481:2011-04-24T10:01:21.016+0000:1303610481:2011-04-24T10:01:21.016+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2437,Task,Minor,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Christian Müller,0,0,2010-02-02 11:28:17+00:00,2011-04-24 10:00:38+00:00,No Desc,"muellerc:1265081571:2010-02-02T11:32:51.595+0000:1265081571:2010-02-02T11:32:51.595+0000:This issue is related to [CAMEL-1530|http://issues.apache.org/activemq/browse/CAMEL-1530]
muellerc:1265990747:2010-02-13T00:05:47.190+0000:1265990747:2010-02-13T00:05:47.190+0000:Provide the patch
davsclaus:1266890132:2010-02-23T09:55:32.554+0000:1266890132:2010-02-23T09:55:32.554+0000:trunk: 915262.

Thanks for the patch Christian
davsclaus:1303610438:2011-04-24T10:00:38.806+0000:1303610438:2011-04-24T10:00:38.806+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2436,Bug,Major,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-02 09:14:31+00:00,2011-08-26 06:41:26+00:00,"When invoking a bean method it should better detect whether the bean is a void or has a return type.
And if it returns null it should be regarded as a valid response and set as body.


See nabble
http://old.nabble.com/filtering-messages-ts27403559.html",davsclaus:1265083150:2010-02-02T11:59:10.883+0000:1265083150:2010-02-02T11:59:10.883+0000:trunk: 905594.
0,CAMEL-2435,Improvement,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-01 14:37:25+00:00,2010-11-03 05:13:28+00:00,"Add a new redelivery policy option logRetryStrackTrace to set whether or not stracktraces is logged when a redelivery attempt failed.
The other logStrackTrace will be for when the message is exhausted and it will be default turned on, which helps you see the exception in the log, in case any caller swallows it.","davsclaus:1265006663:2010-02-01T14:44:23.090+0000:1265006854:2010-02-01T14:47:34.893+0000:trunk: 905291, 905292."
0,CAMEL-2434,Improvement,Trivial,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-02-01 12:17:24+00:00,2010-11-03 05:13:27+00:00,So you know the name of the header which failed. Currently it just say: Header of message bla bla,davsclaus:1264998105:2010-02-01T12:21:45.990+0000:1264998105:2010-02-01T12:21:45.990+0000:trunk: 905269.
0,CAMEL-2433,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 1.6.1, 1.6.2",None,"
None
",Closed,Won't Fix,1.6.3,Willem Jiang,Willem Jiang,0,0,2010-02-01 11:24:49+00:00,2010-02-01 13:52:45+00:00,Current cxfEndpoint doesn't support to set the cxf bus instance from URI in camel 1.x,"njiang:1265000250:2010-02-01T12:57:30.492+0000:1265000250:2010-02-01T12:57:30.492+0000:camel 1.x branch
http://svn.apache.org/viewvc?rev=905273&view=rev
njiang:1265003565:2010-02-01T13:52:45.923+0000:1265003565:2010-02-01T13:52:45.923+0000:As this fix need to back port the #lookup from camel trunk,  and we don't want introduce new feature into camel 1.x branch.
So I committed the patch to revert my last commit, and don't support this feature in camel cxf."
0,CAMEL-2432,Improvement,Major,None,"1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Willem Jiang,0,0,2010-02-01 08:57:27+00:00,2010-11-03 05:13:27+00:00,"As we can set the cxfEndpoint from camel-cxf URI, we should make sure cxfEndpoint can get the right configuration information from the application context.",njiang:1265000148:2010-02-01T12:55:48.609+0000:1265000148:2010-02-01T12:55:48.609+0000:Applied patch into trunk and camel 1.x branch.
0,CAMEL-2431,Improvement,Minor,None,"1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Willem Jiang,0,0,2010-02-01 02:31:49+00:00,2010-11-03 05:13:27+00:00,It's needed for loading the class of JAXB package-info.,"njiang:1264965266:2010-02-01T03:14:26.054+0000:1264965266:2010-02-01T03:14:26.054+0000:trunk
http://svn.apache.org/viewvc?rev=905171&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=905172&view=rev"
0,CAMEL-2430,Bug,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Chris Love,0,0,2010-01-31 22:11:26+00:00,2010-11-03 05:13:27+00:00,"When I execute mvn jetty:run the following exception is thrown:



WARNING: Could not find endpoint/port for {http://reportincident.example.camel.apache.org}ReportIncidentEndpointPort in wsdl. Using {http://reportincident.example.camel.apache.org}ReportIncidentService.
2010-01-31 15:07:35,342 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593)
        at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)

2010-01-31 15:07:35.347::WARN:  Failed startup of context org.mortbay.jetty.plugin.Jetty6PluginWebAppContext@5952e9a8{/camel-example-reportincident,/data/workspace/examples_orig/camel-example-reportincident/src/main/webapp}
org.apache.camel.RuntimeCamelException: org.apache.cxf.service.factory.ServiceConstructionException
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1055)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
        at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:593

Caused by: java.net.MalformedURLException: no protocol: /incident
        at java.net.URL.<init>(URL.java:567)
        at java.net.URL.<init>(URL.java:464)
        at java.net.URL.<init>(URL.java:413)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.<init>(JettyHTTPDestination.java:96)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.createDestination(JettyHTTPTransportFactory.java:116)
        at org.apache.cxf.transport.http_jetty.JettyHTTPTransportFactory.getDestination(JettyHTTPTransportFactory.java:103)
        at org.apache.cxf.endpoint.ServerImpl.initDestination(ServerImpl.java:90)
        at org.apache.cxf.endpoint.ServerImpl.<init>(ServerImpl.java:69)
        at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:106)



I have edited the exception to make it shorter.","njiang:1264961868:2010-02-01T02:17:48.497+0000:1264961868:2010-02-01T02:17:48.497+0000:camel trunk
http://svn.apache.org/viewvc?rev=905170&view=rev"
0,CAMEL-2429,Improvement,Minor,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,1,2010-01-29 13:27:30+00:00,2011-04-24 10:01:44+00:00,"To emit events for messages being sent to endpoints.


Can be used as a cheap way of logging activity with communication with external systems etc.","davsclaus:1264757728:2010-01-29T17:35:28.622+0000:1264757728:2010-01-29T17:35:28.622+0000:Patch with implementation to go in 2.3
davsclaus:1265673217:2010-02-09T07:53:37.829+0000:1265673217:2010-02-09T07:53:37.829+0000:trunk: 907949.
davsclaus:1303610504:2011-04-24T10:01:44.223+0000:1303610504:2011-04-24T10:01:44.223+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2428,Bug,Minor,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,skydjol,0,0,2010-01-29 11:39:46+00:00,2010-11-03 05:13:26+00:00,"If you want to change path to persisent cache with ""diskStorePath"", it has no effect  because cacheManager erase this value.


In ""addCacheNoCheck"" method, ""setDiskStorePath"" call with ""diskStorePath"" CacheManager property value.


CacheManager.java

    public void addCache(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        checkStatus();
        if (cache == null) {
            return;
        }
        addCacheNoCheck(cache);
    }

    private void addCacheNoCheck(Ehcache cache) throws IllegalStateException,
            ObjectExistsException, CacheException {
        if (ehcaches.get(cache.getName()) != null) {
            throw new ObjectExistsException(""Cache "" + cache.getName() + "" already exists"");
        }
        cache.setCacheManager(this);
        cache.setDiskStorePath(diskStorePath);
        cache.initialise();
        try {
            cache.bootstrap();
        } catch (CacheException e) {
            LOG.log(Level.WARNING, ""Cache "" + cache.getName() + ""requested bootstrap but a CacheException occured. "" + e.getMessage(), e);
        }
        ehcaches.put(cache.getName(), cache);
        if (cache instanceof Cache) {
            caches.put(cache.getName(), cache);
        }

        //Don't notify initial config. The init method of each listener should take care of this.
        if (status.equals(Status.STATUS_ALIVE)) {
            cacheManagerEventListenerRegistry.notifyCacheAdded(cache.getName());
        }
    }","davsclaus:1264737010:2010-01-29T11:50:10.613+0000:1264737010:2010-01-29T11:50:10.613+0000:That code is in EHCache and *not* in Camel.

You need to enable disk overflow by {{overflowToDisk=true}} before Camel will use the diskStorePath option.
davsclaus:1264737146:2010-01-29T11:52:26.575+0000:1264737146:2010-01-29T11:52:26.575+0000:I have made it possible to set the option regardless or not overflowToDisk was set or not

trunk: 904473."
0,CAMEL-2427,Sub-task,Minor,"1.6.3, 2.1.0",None,"
None
",Closed,Not A Problem,2.2.0,Unassigned,Claus Ibsen,0,0,2010-01-29 06:09:55+00:00,2010-11-03 05:13:26+00:00,See CAMEL-2423,"davsclaus:1264716613:2010-01-29T06:10:13.426+0000:1264716613:2010-01-29T06:10:13.426+0000:And camel-stringtemplate has the same issue as well
davsclaus:1265082192:2010-02-02T11:43:12.369+0000:1265082192:2010-02-02T11:43:12.369+0000:Not needed"
0,CAMEL-2426,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,William Tam,William Tam,0,0,2010-01-29 02:41:42+00:00,2010-11-03 05:13:26+00:00,No Desc,"wtam:1264772288:2010-01-29T21:38:08.577+0000:1264772288:2010-01-29T21:38:08.577+0000:Committed revision 904624.
"
0,CAMEL-2425,Bug,Major,None,None,"
None
",Closed,Fixed,2.2.0,William Tam,Willem Jiang,0,0,2010-01-29 02:39:54+00:00,2010-11-03 05:13:25+00:00,"After upgraded the CXF version to 2.2.6, we got a random test error of CxfMtomRouterPayloadModeTest,testInvokingServiceFromCXFClient() on TeamCity
Here is the stack trace:



javax.xml.ws.soap.SOAPFaultException: Unmarshalling Error: null
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
at $Proxy72.detail(Unknown Source)
at org.apache.camel.component.cxf.mtom.CxfMtomRouterPayloadModeTest.testInvokingServiceFromCXFClient(CxfMtomRouterPayloadModeTest.java:89)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.springframework.test.context.junit4.SpringTestMethod.invoke(SpringTestMethod.java:160)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:233)
at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:339)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:749)
at org.apache.cxf.jaxb.JAXBEncoderDecoder.unmarshall(JAXBEncoderDecoder.java:623)
at org.apache.cxf.jaxb.io.DataReaderImpl.read(DataReaderImpl.java:128)
at org.apache.cxf.interceptor.DocLiteralInInterceptor.handleMessage(DocLiteralInInterceptor.java:106)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:671)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2205)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:2084)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1982)
at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:637)
at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:239)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:483)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:309)
at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:261)
at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
... 29 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:671)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleError(UnmarshallingContext.java:667)
at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.handleParseConversionException(Loader.java:267)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:65)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.text(UnmarshallingContext.java:494)
at com.sun.xml.bind.v2.runtime.unmarshaller.MTOMDecorator.startElement(MTOMDecorator.java:103)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)
at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)
at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)
... 48 more
Caused by: javax.xml.bind.UnmarshalException
- with linked exception:
[java.lang.NullPointerException]
... 58 more
Caused by: java.lang.NullPointerException
at org.apache.cxf.attachment.LazyDataSource.getInputStream(LazyDataSource.java:67)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.get(Base64Data.java:188)
at com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data.getExact(Base64Data.java:154)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.decodeBase64(RuntimeBuiltinLeafInfoImpl.java:827)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl.access$100(RuntimeBuiltinLeafInfoImpl.java:111)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:652)
at com.sun.xml.bind.v2.model.impl.RuntimeBuiltinLeafInfoImpl$15.parse(RuntimeBuiltinLeafInfoImpl.java:655)
at com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor$CompositeTransducedAccessorImpl.parse(TransducedAccessor.java:241)
at com.sun.xml.bind.v2.runtime.unmarshaller.LeafPropertyLoader.text(LeafPropertyLoader.java:61)
... 53 more","wtam:1264883763:2010-01-31T04:36:03.433+0000:1264883763:2010-01-31T04:36:03.433+0000:New Revision: 904978
alitokmen:1265377994:2010-02-05T21:53:14.707+0000:1265377994:2010-02-05T21:53:14.707+0000:I have the impression this also sometimes happens with CAMEL 2.0.0, CXF 2.2.2. We use Tomcat 6.0.20 as HTTP server via OSGi (it therefore isn't even a problem that's Jetty-specific as mentioned in the revision's comment)
alitokmen:1265378288:2010-02-05T21:58:08.754+0000:1265378288:2010-02-05T21:58:08.754+0000:PS: I only managed to replicate this issue on CAMEL 2.0.0 and CXF 2.2.2 on a Mac. Doesn't happen on Linux or Windows.
njiang:1265395093:2010-02-06T02:38:13.977+0000:1265395093:2010-02-06T02:38:13.977+0000:Hi Savas, 
Can you try out the latest Camel 2.2-SNAPSHOT ?
I think William already fixed that issue.
 "
0,CAMEL-2424,Task,Minor,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Christian Müller,Christian Müller,0,0,2010-01-28 22:09:54+00:00,2010-11-03 05:13:25+00:00,Upgrade to Jersey 1.1.5,"muellerc:1264687840:2010-01-28T22:10:40.774+0000:1264687840:2010-01-28T22:10:40.774+0000:provide the patch
davsclaus:1264723925:2010-01-29T08:12:05.391+0000:1264723925:2010-01-29T08:12:05.391+0000:trunk: 904409.

"
0,CAMEL-2423,Improvement,Major,"1.5.0, 1.6.0, 2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0",None,"
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Frank Schwarz,0,0,2010-01-28 21:58:44+00:00,2010-11-03 05:13:25+00:00,"Freemarker templates are loaded with org.springframework.core.io.Resource-class's classloader. This does not work when Spring is part of the classloader realm of the application's parent classloader.


Proposed patch attached.","fs5:1264687157:2010-01-28T21:59:17.702+0000:1264687157:2010-01-28T21:59:17.702+0000:proposed patch
njiang:1264711817:2010-01-29T04:50:17.429+0000:1264711817:2010-01-29T04:50:17.429+0000:Applied patch with thanks to Frank
trunk
http://svn.apache.org/viewvc?rev=904365&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=904383&view=rev

davsclaus:1264716660:2010-01-29T06:11:00.319+0000:1264716660:2010-01-29T06:11:00.319+0000:Frank do you mind creating the same fix for the other 2 camel components? camel-velocity and camel-stringtemplate as all those 3 are kind similar?
njiang:1264718091:2010-01-29T06:34:51.148+0000:1264718091:2010-01-29T06:34:51.148+0000:Supporting to set the BeanClassLoader from the component is a good way to let the user get the power of control.
I checked the code of camel-velocity and camel-stringtemplate, they are littler different from Freemarker, so I doesn't applied the change on to these two component.  
It could be great that Frank submit a new patch for upper two component.
fs5:1264755052:2010-01-29T16:50:52.057+0000:1264755052:2010-01-29T16:50:52.057+0000:Both components work fine in my environment. So no action is needed here. (Both velocity and string-template make use of ResourceBasedEndpoint#getResource() which eventually delegates to some spring magic.)
fs5:1264759062:2010-01-29T17:57:42.175+0000:1264759062:2010-01-29T17:57:42.175+0000:Based on my investigations about velocity and string-template I created a different patch for the freemarker component. It is now based on ResourceBasedComponent and makes use of the inherited getResourceLoader() method. This patch is now more ""Camel-like"".
davsclaus:1265082171:2010-02-02T11:42:51.462+0000:1265082171:2010-02-02T11:42:51.462+0000:Applied 2nd patch

trunk: 905585.
1.x: 905588."
0,CAMEL-2422,Task,Minor,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Christian Müller,Christian Müller,0,0,2010-01-28 21:51:40+00:00,2010-11-03 05:13:25+00:00,Upgrade to Webdriver 0.6.1039,"muellerc:1264686858:2010-01-28T21:54:18.977+0000:1264686858:2010-01-28T21:54:18.977+0000:provide the patch
davsclaus:1264724505:2010-01-29T08:21:45.580+0000:1264724505:2010-01-29T08:21:45.580+0000:trunk: 904412."
0,CAMEL-2421,Task,Minor,None,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Christian Müller,Christian Müller,0,0,2010-01-28 21:33:47+00:00,2011-04-24 09:57:50+00:00,Upgrade to Sitemash 2.4.2,"muellerc:1264685713:2010-01-28T21:35:13.196+0000:1264685713:2010-01-28T21:35:13.196+0000:provide the patch
davsclaus:1264724257:2010-01-29T08:17:37.099+0000:1264724257:2010-01-29T08:17:37.099+0000:trunk: 904411.
janstey:1264744225:2010-01-29T13:50:25.838+0000:1264744225:2010-01-29T13:50:25.838+0000:FYI the webconsole didn't boot up after this version change so I reverted back to 2.3 for now. I didn't have a chance to look into the error because th3 release is very close! :) It may be an easy one to fix for Camel 2.3. This is the error btw

{code}
javax.servlet.UnavailableException: com.opensymphony.module.sitemesh.filter.PageFilter
	at org.mortbay.jetty.servlet.Holder.doStart(Holder.java:79)
	at org.mortbay.jetty.servlet.FilterHolder.doStart(FilterHolder.java:81)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:662)
	at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)
	at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
	at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
	at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
	at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
	at org.mortbay.jetty.Server.doStart(Server.java:224)
	at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
	at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
	at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
	at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:569)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:539)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
{code}
muellerc:1264930538:2010-01-31T17:35:38.096+0000:1264930538:2010-01-31T17:35:38.096+0000:Hello Jonathan, hello Claus,

sorry for the faulty patch.
I trying to figure out what the problem is, but all camel-web and camel-web-standalone unit tests succeed. For me it's also possible to deploy camel-web-2.2-SNAPSHOT.war to my tomcat 6.0.20 and work with the web app.

@Jonathan: How I can reproduce this exception (and write some tests for that)?

Regards,
Christian
janstey:1264931043:2010-01-31T17:44:03.240+0000:1264931043:2010-01-31T17:44:03.240+0000:Christian,

No worries about the patch... camel-web doesn't have the greatest coverage for actual usability of the web app. A quicker way to see if it boots up (rather than tomcat) is to run ""mvn jetty:run"" and browse to localhost:8080. Not sure how we can reproduce this is a nice unit test off hand... should be possible SOME how :)
muellerc:1264990621:2010-02-01T10:17:01.827+0000:1264990621:2010-02-01T10:17:01.827+0000:Jonathan,

I still get this exception on Windows XP and Mac OS 10.6 with the current TRUNK. I use Java 6 and Maven 2.2. I known, I should use Java 5 and Maven 2.0.9, but could this the problem?

{code}
2010-02-01 10:56:37.384:INFO::jetty-6.1.22
2010-02-01 10:56:37.524:WARN::Could not instantiate listener org.springframework.web.context.ContextLoaderListener
java.lang.ClassNotFoundException: org.springframework.web.context.ContextLoaderListener
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
        at org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)
        at org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:401)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:363)
        at org.mortbay.jetty.handler.ContextHandler.loadClass(ContextHandler.java:1101)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initListener(WebXmlConfiguration.java:630)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initWebXmlElement(WebXmlConfiguration.java:368)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.initWebXmlElement(AbstractConfiguration.java:190)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.initialize(WebXmlConfiguration.java:289)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.initialize(AbstractConfiguration.java:133)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.configure(WebXmlConfiguration.java:222)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.configure(AbstractConfiguration.java:113)
        at org.mortbay.jetty.webapp.WebXmlConfiguration.configureWebApp(WebXmlConfiguration.java:180)
        at org.mortbay.jetty.plus.webapp.AbstractConfiguration.configureWebApp(AbstractConfiguration.java:96)
        at org.mortbay.jetty.plus.webapp.Configuration.configureWebApp(Configuration.java:149)
        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1247)
        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
        at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
        at org.mortbay.jetty.Server.doStart(Server.java:224)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:553)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:523)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:41)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
2010-02-01 10:56:37.524:INFO::No Transaction manager found - if your webapp requires one, please configure one.
2010-02-01 10:56:37.759:WARN::EXCEPTION
java.lang.ClassNotFoundException: com.opensymphony.module.sitemesh.filter.PageFilter
        at java.net.URLClassLoader$1.run(URLClassLoader.java:200)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:188)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
        at org.codehaus.classworlds.RealmClassLoader.loadClassDirect(RealmClassLoader.java:195)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:255)
        at org.codehaus.classworlds.DefaultClassRealm.loadClass(DefaultClassRealm.java:274)
        at org.codehaus.classworlds.RealmClassLoader.loadClass(RealmClassLoader.java:214)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:401)
        at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:363)
        at org.mortbay.util.Loader.loadClass(Loader.java:91)
        at org.mortbay.util.Loader.loadClass(Loader.java:71)
        at org.mortbay.jetty.servlet.Holder.doStart(Holder.java:73)
        at org.mortbay.jetty.servlet.FilterHolder.doStart(FilterHolder.java:81)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:662)
        at org.mortbay.jetty.servlet.Context.startContext(Context.java:140)
        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1250)
        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:517)
        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:467)
        at org.mortbay.jetty.plugin.Jetty6PluginWebAppContext.doStart(Jetty6PluginWebAppContext.java:115)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:156)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:152)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:130)
        at org.mortbay.jetty.Server.doStart(Server.java:224)
        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:50)
        at org.mortbay.jetty.plugin.Jetty6PluginServer.start(Jetty6PluginServer.java:132)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:441)
        at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:383)
        at org.mortbay.jetty.plugin.AbstractJettyRunMojo.execute(AbstractJettyRunMojo.java:210)
        at org.mortbay.jetty.plugin.Jetty6RunMojo.execute(Jetty6RunMojo.java:184)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:483)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:678)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeStandaloneGoal(DefaultLifecycleExecutor.java:553)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:523)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:371)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:332)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:181)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:356)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:137)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
        at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:41)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
2010-02-01 10:56:37.759:WARN::failed sitemesh: javax.servlet.UnavailableException: com.opensymphony.module.sitemesh.filter.PageFilter
{code}

Regards,
Christian
janstey:1265003173:2010-02-01T13:46:13.579+0000:1265003173:2010-02-01T13:46:13.579+0000:Hmmm... don't think its a Java 6 issue... just tried it myself and it worked fine. My setup is
{code}
Apache Maven 2.2.1 (r801777; 2009-08-06 16:46:01-0230)
Java version: 1.6.0_07
Java home: /opt/jdk1.6.0_07/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"" version: ""2.6.24-24-generic"" arch: ""i386"" Family: ""unix""
{code}
muellerc:1265068758:2010-02-02T07:59:18.875+0000:1265068758:2010-02-02T07:59:18.875+0000:Jonathan, on my Mac, I have still the same exception:

{code}
Apache Maven 2.2.1 (r801777; 2009-08-06 21:16:01+0200)
Java version: 1.6.0_17
Java home: /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"" version: ""10.6.2"" arch: ""x86_64"" Family: ""mac""
{code}

the source revision:

{code}
commit 847b99f9d1d45a1a8bf61e85c9b38ff9eca340ad
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Mon Feb 1 16:19:15 2010 +0000
    Fixing test on other boxes    
    git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@905324 13f79535-47bb-0310-9956-ffa450edef68
{code}

I run a 

{code}
mvn -DskipTests clean install
{code}

in Camel ROOT. After that I change the directory

{code}
cd components/camel-web
{code}

and run a 

{code}
mvn jetty:run
{code}

but got the same exception. Was it the right workflow?

Regards,
Christian
janstey:1265089291:2010-02-02T13:41:31.872+0000:1265089291:2010-02-02T13:41:31.872+0000:Yeah,

That is the right workflow... I even tried updating my JDK version to the latest version of 6 and it still worked. Too bad I can't test this out on Mac :)

Just curious now... what is the output of mvn dependency:tree in the camel-web dir?
muellerc:1265096260:2010-02-02T15:37:40.202+0000:1265096260:2010-02-02T15:37:40.202+0000:My dependency tree is the following

{code}
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Web
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree {execution: default-cli}]
[INFO] org.apache.camel:camel-web:war:2.2-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.2-SNAPSHOT:compile
[INFO] |  +- commons-logging:commons-logging-api:jar:1.1:compile
[INFO] |  \- org.fusesource.commonman:commons-management:jar:1.0:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.2-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-context:jar:2.5.6:compile
[INFO] |  |  \- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  +- org.springframework:spring-aop:jar:2.5.6:compile
[INFO] |  \- org.springframework:spring-tx:jar:2.5.6:compile
[INFO] +- org.apache.camel:camel-groovy:jar:2.2-SNAPSHOT:compile
[INFO] |  \- org.codehaus.groovy:groovy-all:jar:1.7.0:compile
[INFO] |     \- jline:jline:jar:0.9.94:compile
[INFO] +- org.apache.camel:camel-ruby:jar:2.2-SNAPSHOT:compile
[INFO] |  \- org.jruby:jruby:jar:1.4.0:compile
[INFO] +- com.sun.jersey.contribs:jersey-spring:jar:1.1.5:compile
[INFO] |  +- com.sun.jersey:jersey-server:jar:1.1.5:compile
[INFO] |  |  \- asm:asm:jar:3.1:compile
[INFO] |  +- org.springframework:spring-core:jar:2.5.6:compile
[INFO] |  +- org.springframework:spring:jar:2.5.6:compile
[INFO] |  +- org.springframework:spring-beans:jar:2.5.6:compile
[INFO] |  \- org.springframework:spring-web:jar:2.5.6:compile
[INFO] +- com.sun.jersey:jersey-json:jar:1.1.5:compile
[INFO] |  +- com.sun.jersey:jersey-core:jar:1.1.5:compile
[INFO] |  |  \- javax.ws.rs:jsr311-api:jar:1.1.1:compile
[INFO] |  +- org.codehaus.jettison:jettison:jar:1.2:compile (version managed from 1.1)
[INFO] |  |  \- stax:stax-api:jar:1.0.1:compile
[INFO] |  +- com.sun.xml.bind:jaxb-impl:jar:2.1.12:compile
[INFO] |  |  \- javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO] |  |     +- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] |  |     \- javax.activation:activation:jar:1.1:compile
[INFO] |  \- org.codehaus.jackson:jackson-core-asl:jar:1.1.1:compile
[INFO] +- com.sun.jersey:jersey-atom:jar:1.1.5:compile
[INFO] |  +- rome:rome:jar:0.9:compile
[INFO] |  \- jdom:jdom:jar:1.0:compile
[INFO] +- opensymphony:sitemesh:jar:2.3:compile
[INFO] +- javax.annotation:jsr250-api:jar:1.0:compile
[INFO] +- org.openqa.selenium.webdriver:webdriver-htmlunit:jar:0.6.1039:test
[INFO] |  +- org.openqa.selenium.webdriver:webdriver-common:jar:0.6.1039:test
[INFO] |  \- net.sourceforge.htmlunit:htmlunit:jar:2.5:test
[INFO] |     +- xalan:xalan:jar:2.7.1:test
[INFO] |     |  \- xalan:serializer:jar:2.7.1:test
[INFO] |     |     \- xml-apis:xml-apis:jar:1.3.04:test
[INFO] |     +- commons-collections:commons-collections:jar:3.2.1:test
[INFO] |     +- commons-lang:commons-lang:jar:2.4:test
[INFO] |     +- commons-httpclient:commons-httpclient:jar:3.1:test
[INFO] |     +- commons-codec:commons-codec:jar:1.3:test
[INFO] |     +- net.sourceforge.htmlunit:htmlunit-core-js:jar:2.5:test
[INFO] |     +- net.sourceforge.nekohtml:nekohtml:jar:1.9.12:test
[INFO] |     |  \- xerces:xercesImpl:jar:2.8.1:test
[INFO] |     +- net.sourceforge.cssparser:cssparser:jar:0.9.5:test
[INFO] |     |  \- org.w3c.css:sac:jar:1.3:test
[INFO] |     \- commons-io:commons-io:jar:1.4:test
[INFO] +- org.openqa.selenium.webdriver:webdriver-support:jar:0.6.1039:test
[INFO] |  \- org.hamcrest:hamcrest-all:jar:1.2-dev1:test (version managed from 1.1)
[INFO] +- org.mortbay.jetty:jetty:jar:6.1.22:test
[INFO] |  \- org.mortbay.jetty:servlet-api:jar:2.5-20081211:test
[INFO] +- org.mortbay.jetty:jetty-util:jar:6.1.22:test
[INFO] +- org.mortbay.jetty:jsp-2.1:jar:6.1.14:test
[INFO] |  +- org.eclipse.jdt:core:jar:3.1.1:test
[INFO] |  +- org.mortbay.jetty:jsp-api-2.1:jar:6.1.14:test
[INFO] |  |  \- org.mortbay.jetty:servlet-api-2.5:jar:6.1.14:test
[INFO] |  \- ant:ant:jar:1.6.5:test
[INFO] +- javax.servlet:jstl:jar:1.1.2:compile
[INFO] +- taglibs:standard:jar:1.1.2:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.5.10:compile
[INFO] +- org.slf4j:slf4j-log4j12:jar:1.5.10:compile
[INFO] +- com.sun.jersey:jersey-client:jar:1.1.5:test
[INFO] +- org.springframework:spring-test:jar:2.5.6:test
[INFO] +- junit:junit:jar:4.4:test
[INFO] +- commons-logging:commons-logging:jar:1.1.1:test (scope not updated to compile)
[INFO] \- log4j:log4j:jar:1.2.14:test (scope not updated to compile)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Tue Feb 02 16:33:05 CET 2010
[INFO] Final Memory: 43M/89M
[INFO] ------------------------------------------------------------------------
{code}
muellerc:1265810774:2010-02-10T22:06:14.951+0000:1265810774:2010-02-10T22:06:14.951+0000:This issue is related to [CAMEL-2459|https://issues.apache.org/activemq/browse/CAMEL-2459].
muellerc:1266748701:2010-02-21T18:38:21.616+0000:1266748701:2010-02-21T18:38:21.616+0000:Jonathan,

I switched back to Maven 2.0.9 and it works.

{code}
muellerc$ mvn -version
Maven version: 2.0.9
Java version: 1.6.0_17
OS name: ""mac os x"" version: ""10.6.2"" arch: ""x86_64"" Family: ""mac""
{code}

After that, I upgraded to Sitemesh 2.4.2 and it works also (all unit tests and mvn jetty:run). Could you please try it with Maven 2.0.9?
It was not possible for me to write a unit test which demonstrate this problem in an automated way... :-(

Regards,
Christian
muellerc:1266760987:2010-02-21T22:03:07.269+0000:1266760987:2010-02-21T22:03:07.269+0000:I opened a issue for Maven [MNG-4567|http://jira.codehaus.org/browse/MNG-4567].
janstey:1266816930:2010-02-22T13:35:30.306+0000:1266816930:2010-02-22T13:35:30.306+0000:Yeah, it works for me on Maven 2.0.9 too. Thanks for looking into this Christian. I'm sure the Maven guys will be able to help us fix this.
muellerc:1266823070:2010-02-22T15:17:50.417+0000:1266823070:2010-02-22T15:17:50.417+0000:Jonathan, you are welcome. Should we wait for the Maven fix before we upgrade to Sitemesh 2.4.2? If not, could you do this?

Thanks,
Christian
davsclaus:1266892289:2010-02-23T10:31:29.752+0000:1266892289:2010-02-23T10:31:29.752+0000:Okay I need to dig a bit more on camel-http to ensure we close the connection managers property according to the http client 4.0 documentation.
janstey:1266902625:2010-02-23T13:23:45.553+0000:1266902625:2010-02-23T13:23:45.553+0000:I'd like a fix for this Maven issue before upgrading to Sitemesh 2.4.2. I use Maven 2.2.1 right now so I'd like to keep it working for me ;)

Just curious, was there a particular reason you needed the newer version of Sitemesh? I'm not really up on the latest features or if we take advantage of them, etc.
muellerc:1266921485:2010-02-23T18:38:05.530+0000:1266921485:2010-02-23T18:38:05.530+0000:It's fine for me Jonathan, to wait until this maven issue is fixed. The upgrade was proposed, because between 2.3 and 2.4.2 12 bugs are fixed [changelog|http://jira.opensymphony.com/browse/SIM?report=com.atlassian.jira.plugin.system.project:changelog-panel].
IMO it's a good idea to be up to date and not run into issues from third party libraries, which are already fixed.

Waiting for for the maven fix...

Regards,
Christian
davsclaus:1284860317:2010-09-19T09:38:37.156+0000:1284860317:2010-09-19T09:38:37.156+0000:camel-web is now using scalate which removes the need for the jsp/sitemesh stuff.
davsclaus:1303610270:2011-04-24T09:57:50.648+0000:1303610270:2011-04-24T09:57:50.648+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2420,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,skydjol,0,0,2010-01-28 16:42:53+00:00,2010-11-03 05:13:24+00:00,"See CacheConfiguration.java


CacheConfiguration.java

 if (cacheSettings.containsKey(""diskExpiryThreadIntervalSeconds"")) {
	setTimeToLiveSeconds(Long.valueOf((String) cacheSettings.get(""diskExpiryThreadIntervalSeconds"")).longValue());
}","davsclaus:1264724573:2010-01-29T08:22:53.694+0000:1264724573:2010-01-29T08:22:53.694+0000:What do you mean? I cannot see a problem. Can you point out what you see as a problem
skydjol:1264726277:2010-01-29T08:51:17.961+0000:1264726277:2010-01-29T08:51:17.961+0000:You have made a call to ""setTimeToLiveSeconds"" method instead of ""setDiskExpiryThreadIntervalSeconds"" method.


davsclaus:1264727979:2010-01-29T09:19:39.935+0000:1264727979:2010-01-29T09:19:39.935+0000:Thanks now I can see the problem :)

trunk: 904430."
0,CAMEL-2419,New Feature,Major,Future,None,"
None
",Resolved,Later,Future,Unassigned,Andy bentley,1,2,2010-01-28 12:51:22+00:00,2014-07-09 23:05:18+00:00,"SCTP supports near-real-time uses and is not as hamstrung as tcp based protocols that require ACK between each send.
Java will support SCTP in java 1.7","njiang:1264655059:2010-01-28T13:04:19.939+0000:1264655059:2010-01-28T13:04:19.939+0000:Hi Andy,
Current Camel is based on JDK 1.5, it will be long time for us to support it in Camel.
albiii:1264657524:2010-01-28T13:45:24.605+0000:1264657524:2010-01-28T13:45:24.605+0000:Sun/Oracle ""End Of Lifed""  the 1.5 JDK in October 2009 .

http://java.sun.com/javase/downloads/index_jdk5.jsp
http://java.sun.com/products/archive/eol.policy.html

You will be forced to move to 1.6 soon.

There is /allot/ to like in 1.7   http://www.javapassion.com/javase/JDK7_SangShin.pdf
davsclaus:1309318093:2011-06-29T11:28:13.042+0000:1309318093:2011-06-29T11:28:13.042+0000:We will look at this later when JDK7 is out and we use that as minimum required JRE
mdnghtblue:1404918318:2014-07-09T23:05:18.577+0000:1404918318:2014-07-09T23:05:18.577+0000:Are there any plans to look into adding an SCTP component now that it is supported in the JDK?"
0,CAMEL-2418,Task,Major,None,None,"
None
",Closed,Fixed,1.6.3,Willem Jiang,Willem Jiang,0,0,2010-01-28 09:43:26+00:00,2011-01-17 16:50:38+00:00,No Desc,"njiang:1264643180:2010-01-28T09:46:20.936+0000:1264643180:2010-01-28T09:46:20.936+0000:http://svn.apache.org/viewvc?rev=904018&view=rev
davsclaus:1295254238:2011-01-17T16:50:38.425+0000:1295254238:2011-01-17T16:50:38.425+0000:Closing all 1.x tickets"
0,CAMEL-2417,Sub-task,Minor,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Unassigned,Claus Ibsen,0,0,2010-01-28 03:24:37+00:00,2010-11-03 05:13:24+00:00,Add documentation for the new component,"sgargan:1264626110:2010-01-28T05:01:50.377+0000:1264626110:2010-01-28T05:01:50.377+0000:I've put together some basic documentation here...

http://cwiki.apache.org/confluence/display/CAMEL/Dozer+Type+Conversion
davsclaus:1264735724:2010-01-29T11:28:44.878+0000:1264735724:2010-01-29T11:28:44.878+0000:Good documentation. I think you should add a section about you need camel-dozer as a dependency.


davsclaus:1264735821:2010-01-29T11:30:21.593+0000:1264735821:2010-01-29T11:30:21.593+0000:I added a link to this dozer docu from the data format as its related to those"
0,CAMEL-2416,Sub-task,Minor,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Claus Ibsen,0,0,2010-01-28 03:21:55+00:00,2010-11-03 05:13:24+00:00,No Desc,"njiang:1264623340:2010-01-28T04:15:40.938+0000:1264623340:2010-01-28T04:15:40.938+0000:Created a wiki page for it.
http://cwiki.apache.org/confluence/display/CAMEL/Cafe+Example"
0,CAMEL-2415,Task,Minor,None,None,"
None
",Closed,Fixed,2.2.0,Christian Müller,Christian Müller,0,0,2010-01-28 00:06:17+00:00,2010-11-03 05:13:23+00:00,Upgrade to castor 1.3.1,"muellerc:1264608438:2010-01-28T00:07:18.805+0000:1264608438:2010-01-28T00:07:18.805+0000:provide the patch
janstey:1264614696:2010-01-28T01:51:36.463+0000:1264614696:2010-01-28T01:51:36.463+0000:http://svn.apache.org/viewvc?rev=903936&view=rev

Thanks for the patch!"
0,CAMEL-2414,Task,Minor,None,None,"
None
",Closed,Fixed,2.2.0,Christian Müller,Christian Müller,0,0,2010-01-27 23:00:15+00:00,2010-11-03 05:13:23+00:00,upgrade to commons-pool 1.5.4 and move the dependency definition to parent pom,"muellerc:1264604515:2010-01-27T23:01:55.996+0000:1264604515:2010-01-27T23:01:55.996+0000:provide the patch
davsclaus:1264619755:2010-01-28T03:15:55.311+0000:1264619755:2010-01-28T03:15:55.311+0000:trunk: 903947.

Thanks again Christian for the patch."
0,CAMEL-2413,Task,Minor,None,None,"
None
",Closed,Fixed,2.2.0,Christian Müller,Christian Müller,0,0,2010-01-27 22:08:33+00:00,2010-11-03 05:13:23+00:00,"upgrade to ftpserver 1.0.3 and moved the dependecy to parent pom dependencyManagement, because 'components/camel-ftp/pom.xml' anf 'tests/camel-itest/pom.xml' uses different versions","muellerc:1264601673:2010-01-27T22:14:33.684+0000:1264601673:2010-01-27T22:14:33.684+0000:provide the patch
davsclaus:1264602506:2010-01-27T22:28:26.992+0000:1264602506:2010-01-27T22:28:26.992+0000:trunk: 903876.

Thanks for the patch"
0,CAMEL-2412,Improvement,Minor,None,None,"
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Willem Jiang,0,0,2010-01-27 13:38:25+00:00,2010-11-03 05:13:23+00:00,"Here is the discussion in the mail list[1]
[1] http://old.nabble.com/Re%3A-HTTP-parameter-bug-%28was-passing-the-HTTPServletRequest-from-Jetty--to-a-SEDA-consumer-in-Spring-DSL%29-ts27248105.html","njiang:1264573369:2010-01-27T14:22:49.987+0000:1264573369:2010-01-27T14:22:49.987+0000:trunk
http://svn.apache.org/viewvc?rev=903638&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=903643&view=rev"
0,CAMEL-2411,Task,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-01-27 13:14:57+00:00,2010-11-03 05:13:22+00:00,We need to use latest Jaxb impl version for the schema generation.,"njiang:1264570470:2010-01-27T13:34:30.638+0000:1264570470:2010-01-27T13:34:30.638+0000:trunk
http://svn.apache.org/viewvc?rev=903630&view=rev
"
0,CAMEL-2380,Task,Minor,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-19 10:44:23+00:00,2010-11-03 05:13:16+00:00,"Jettison 1.2 has been released.


Its already OSGi packaged",davsclaus:1263869256:2010-01-19T10:47:36.752+0000:1263869256:2010-01-19T10:47:36.752+0000:trunk: 900722.
0,CAMEL-2379,Sub-task,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Martin Krasser,Martin Krasser,0,0,2010-01-19 07:18:24+00:00,2010-11-03 05:13:16+00:00,No Desc,
0,CAMEL-2378,Bug,Major,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Jonathan Anstey,Chris Love,0,0,2010-01-18 18:59:57+00:00,2010-11-03 05:13:16+00:00,"I am running mvn install -Dmaven.test.skip=true and I am getting the following error


Missing:
----------
1) org.apache.camel:camel-spring:test-jar:tests:2.2-SNAPSHOT


The pom for camel-spring has a plug-in section for creating the test jar, but it is not getting installed.


I am getting the following output running mvn -e


Interesting part:
[INFO] Skipping packaging of the test-jar


Full output
--------------------------------
+ Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-impl/2.1.5-dev/jaxb-impl-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-impl:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://repo.open.iona.com/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository open.iona.m2 (http://repo.open.iona.com/maven2)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
Downloading: http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository java.net (http://download.java.net/maven/1)
Downloading: http://repo1.maven.org/maven2/com/sun/xml/bind/jaxb-xjc/2.1.5-dev/jaxb-xjc-2.1.5-dev.pom
[INFO] Unable to find resource 'com.sun.xml.bind:jaxb-xjc:pom:2.1.5-dev' in repository central (http://repo1.maven.org/maven2)
[INFO] [antrun:run 

{execution: create-prop}

]
[INFO] Executing tasks
[echo] Maven version: 2.2-SNAPSHOT
[echo] OSGi version: 2.2.0.SNAPSHOT
[INFO] Executed tasks
[INFO] [properties:read-project-properties 

{execution: default}

]
[INFO] [antrun:run 

{execution: process-sources}

]
[INFO] Executing tasks
[echo] Copying to code together for the XSD generation
[echo] Generating XSD schema
[schemagen] Generating schema from 142 source files
[copy] Copying 1 file to /data/workspace/camel/components/camel-spring/target/schema
[INFO] Executed tasks
[INFO] Setting property: classpath.resource.loader.class => 'org.codehaus.plexus.velocity.ContextClassLoaderResourceLoader'.
[INFO] Setting property: velocimacro.messages.on => 'false'.
[INFO] Setting property: resource.loader => 'classpath'.
[INFO] Setting property: resource.manager.logwhenfound => 'false'.
[INFO] [remote-resources:process 

{execution: default}

]
[INFO] [resources:resources 

{execution: default-resources}

]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 10 resources
[INFO] Copying 3 resources
[INFO] [compiler:compile 

{execution: default-compile}

]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources 

{execution: default-testResources}

]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 290 resources
[INFO] Copying 3 resources
[INFO] [compiler:testCompile 

{execution: default-testCompile}

]
[INFO] Not compiling test sources
[INFO] [surefire:test 

{execution: default-test}

]
[INFO] Tests are skipped.
[INFO] [bundle:bundle 

{execution: default-bundle}

]
[INFO] [antrun:run 

{execution: package}

]
[INFO] Executing tasks
[echo] Deleting unwanted resources from the test-jar
[delete] Deleting: /data/workspace/camel/components/camel-spring/target/test-classes/log4j.properties
[INFO] Executed tasks
[INFO] [jar:test-jar 

{execution: default}

]
[INFO] Skipping packaging of the test-jar
[INFO] [build-helper:attach-artifact 

{execution: attach-artifacts}

]
[INFO] [ianal:verify-legal-files 

{execution: default}

]
[INFO] Checking legal files in: camel-spring-2.2-SNAPSHOT.jar
[INFO] [install:install 

{execution: default-install}

]
[INFO] Installing /data/workspace/camel/components/camel-spring/target/camel-spring-2.2-SNAPSHOT.jar to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Installing /data/workspace/camel/components/camel-spring/target/schema/camel-spring.xsd to /home/clove/.m2/repository/org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.xsd
[INFO] [bundle:install 

{execution: default-install}

]
[INFO] Parsing file:/home/clove/.m2/repository/repository.xml
[INFO] Installing org/apache/camel/camel-spring/2.2-SNAPSHOT/camel-spring-2.2-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 57 seconds
[INFO] Finished at: Mon Jan 18 11:57:54 MST 2010
[INFO] Final Memory: 57M/186M
[INFO] ------------------------------------------------------------------------","chrislovecnm:1263813307:2010-01-18T19:15:07.878+0000:1263813307:2010-01-18T19:15:07.878+0000:Another note.  I tried to run mvn install w/o skipping tests, and I am getting multiple compilation missing symbol errors:


[INFO] Compilation failure

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[20,33] cannot find symbol
symbol  : class LogProcessorTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[24,44] cannot find symbol
symbol: class LogProcessorTest
public class SpringLogProcessorTest extends LogProcessorTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class PublishEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[27,52] cannot find symbol
symbol: class PublishEventNotifierTest
public class SpringPublishEventNotifierTest extends PublishEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[27,56] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringDualLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[20,38] cannot find symbol
symbol  : class FileConsumerPreMoveIssueTest
location: package org.apache.camel.component.file

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[27,56] cannot find symbol
symbol: class FileConsumerPreMoveIssueTest
public class SpringFileConsumerPreMoveIssueTest extends FileConsumerPreMoveIssueTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[20,34] cannot find symbol
symbol  : class LoggingEventNotifierTest
location: package org.apache.camel.management

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[27,52] cannot find symbol
symbol: class LoggingEventNotifierTest
public class SpringLoggingEventNotifierTest extends LoggingEventNotifierTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteAllTasksTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[27,56] cannot find symbol
symbol: class ShutdownCompleteAllTasksTest
public class SpringShutdownCompleteAllTasksTest extends ShutdownCompleteAllTasksTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownNotDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[27,48] cannot find symbol
symbol: class ShutdownNotDeferTest
public class SpringShutdownNotDeferTest extends ShutdownNotDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[20,33] cannot find symbol
symbol  : class ShutdownCompleteCurrentTaskOnlyTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[27,63] cannot find symbol
symbol: class ShutdownCompleteCurrentTaskOnlyTest
public class SpringShutdownCompleteCurrentTaskOnlyTest extends ShutdownCompleteCurrentTaskOnlyTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[20,33] cannot find symbol
symbol  : class ShutdownDeferTest
location: package org.apache.camel.processor

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[27,45] cannot find symbol
symbol: class ShutdownDeferTest
public class SpringShutdownDeferTest extends ShutdownDeferTest {

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringLogProcessorTest.java:[27,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LogProcessorTest cannot be applied to (org.apache.camel.spring.processor.SpringLogProcessorTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringPublishEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in PublishEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringPublishEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringDualLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringDualLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/file/SpringFileConsumerPreMoveIssueTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in FileConsumerPreMoveIssueTest cannot be applied to (org.apache.camel.spring.file.SpringFileConsumerPreMoveIssueTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/management/SpringLoggingEventNotifierTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in LoggingEventNotifierTest cannot be applied to (org.apache.camel.spring.management.SpringLoggingEventNotifierTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteAllTasksTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteAllTasksTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteAllTasksTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownNotDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownNotDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownNotDeferTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownCompleteCurrentTaskOnlyTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownCompleteCurrentTaskOnlyTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownCompleteCurrentTaskOnlyTest,java.lang.String)

/data/workspace/camel/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringShutdownDeferTest.java:[30,15] createSpringCamelContext(org.apache.camel.ContextTestSupport,java.lang.String) in ShutdownDeferTest cannot be applied to (org.apache.camel.spring.processor.SpringShutdownDeferTest,java.lang.String)




janstey:1263813490:2010-01-18T19:18:10.477+0000:1263813490:2010-01-18T19:18:10.477+0000:The compile error should be fixed by recompiling camel-core maybe?

To skip tests use the following command (this will create the -test jar that the rest of the build needs):
{code}
 mvn clean install -DskipTests
{code}
chrislovecnm:1263814180:2010-01-18T19:29:40.671+0000:1263814180:2010-01-18T19:29:40.671+0000:Still getting the same compilation errors w/ the latest camel-core installed. Running -DskipTests did not work because it still tried to compile the test classes.
janstey:1263814725:2010-01-18T19:38:45.644+0000:1263814725:2010-01-18T19:38:45.644+0000:Weird... I just built it fine on trunk rev 900515. Env is similar to yours too

Apache Maven 2.2.1 (r801777; 2009-08-06 16:46:01-0230)
Java version: 1.6.0_07
Java home: /opt/jdk1.6.0_07/jre
Default locale: en_CA, platform encoding: UTF-8
OS name: ""linux"" version: ""2.6.24-24-generic"" arch: ""i386"" Family: ""unix""
chrislovecnm:1263826270:2010-01-18T22:51:10.609+0000:1263826270:2010-01-18T22:51:10.609+0000:So running mvn clean install -DskipTests from the top level worked.

Someone might want to add this nugget to Readme.txt and   http://camel.apache.org/building.html

janstey:1263835877:2010-01-19T01:31:17.848+0000:1263835877:2010-01-19T01:31:17.848+0000:Great! Glad it works now for you. I'll update the wiki page with that command."
0,CAMEL-2377,Bug,Minor,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Chris Love,0,0,2010-01-18 18:19:52+00:00,2010-11-03 05:13:15+00:00,"Unit test failing on mvn install on latest head from trunk.


mvn -e output
------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.impl.DefaultProducerTemplateAsyncTest
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.012 sec <<< FAILURE!


Results :


Failed tests: 
  testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)
  testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)


Tests run: 22, Failures: 3, Errors: 0, Skipped: 0


[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire Output


-------------------------------------------------------------------------------
Test set: org.apache.camel.impl.DefaultProducerTemplateAsyncTest
-------------------------------------------------------------------------------
Tests run: 22, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 17.013 sec <<< FAILURE!
testAsyncCallbackExchangeInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.431 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackExchangeInOut(DefaultProducerTemplateAsyncTest.java:357)


testAsyncCallbackBodyInOut(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.206 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOut(DefaultProducerTemplateAsyncTest.java:451)


testAsyncCallbackBodyInOutGetResult(org.apache.camel.impl.DefaultProducerTemplateAsyncTest)  Time elapsed: 0.176 sec  <<< FAILURE!
junit.framework.ComparisonFailure: expected:<[AB]C> but was:<[BA]C>
	at junit.framework.Assert.assertEquals(Assert.java:81)
	at junit.framework.Assert.assertEquals(Assert.java:87)
	at org.apache.camel.impl.DefaultProducerTemplateAsyncTest.testAsyncCallbackBodyInOutGetResult(DefaultProducerTemplateAsyncTest.java:492)","davsclaus:1263854020:2010-01-19T06:33:40.447+0000:1263854020:2010-01-19T06:33:40.447+0000:Only fails on some boxes.

davsclaus:1263854033:2010-01-19T06:33:53.330+0000:1263854033:2010-01-19T06:33:53.330+0000:trunk: 900669.
chrislovecnm:1263916243:2010-01-19T23:50:43.711+0000:1263916243:2010-01-19T23:50:43.711+0000:verified fixed!"
0,CAMEL-2376,Bug,Major,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Chris Love,0,0,2010-01-18 18:07:40+00:00,2010-11-03 05:13:15+00:00,"Unit test failing on mvn install on latest head from trunk.


mvn -e output
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.866 sec <<< FAILURE!


Results :


Failed tests: 
  testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)


Tests run: 7, Failures: 1, Errors: 0, Skipped: 0


[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
[INFO] ------------------------------------------------------------------------
[INFO] Trace
org.apache.maven.BuildFailureException: There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:715)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: org.apache.maven.plugin.MojoFailureException: There are test failures.


Please refer to /data/workspace/camel/camel-core/target/surefire-reports for the individual test results.
	at org.apache.maven.plugin.surefire.SurefirePlugin.execute(SurefirePlugin.java:575)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	... 17 more


Surefire output
-------------------------------
-------------------------------------------------------------------------------
Test set: org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest
-------------------------------------------------------------------------------
Tests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.217 sec <<< FAILURE!
testRetryUntilRecipientListOkAndFail(org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest)  Time elapsed: 3.729 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<3> but was:<0>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:198)
	at junit.framework.Assert.assertEquals(Assert.java:204)
	at org.apache.camel.issues.RetryRouteScopedUntilRecipientListParallelIssueTest.testRetryUntilRecipientListOkAndFail(RetryRouteScopedUntilRecipientListParallelIssueTest.java:38)","davsclaus:1263852326:2010-01-19T06:05:26.388+0000:1263852326:2010-01-19T06:05:26.388+0000:trunk: 900663.
chrislovecnm:1263916095:2010-01-19T23:48:15.500+0000:1263916095:2010-01-19T23:48:15.500+0000:verified fixed.  Thanks"
0,CAMEL-2375,Improvement,Major,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-18 15:39:09+00:00,2010-11-03 05:13:15+00:00,"Allows you to use all the expressions from ExpressionClause which has many, on other builders which are not tied to the route models.


For example at mock, notify builder and elsewhere",davsclaus:1263806158:2010-01-18T17:15:58.082+0000:1263806158:2010-01-18T17:15:58.082+0000:trunk: 900466.
0,CAMEL-2373,Test,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-18 08:14:49+00:00,2010-11-03 05:13:15+00:00,"Should load expected data from a file instead and then compare against that instead of generating model again.


Then you wont catch bugs in the model generator as its also what camel-bindy is doing",davsclaus:1263774638:2010-01-18T08:30:38.106+0000:1263774638:2010-01-18T08:30:38.106+0000:trunk: 900301.
0,CAMEL-2372,New Feature,Major,"2.0.0, 2.1.0",None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-17 09:07:37+00:00,2010-11-03 05:13:14+00:00,"JBoss used to and appears still to have classloader challenges.


Camel cannot load its type converters out of the box on JBoss. You need to use a specialized class resolver for that.
A Camel community member created the code and donated it.


We should host it as a new project at Camel Extra so people can use it as well.


See more here
http://old.nabble.com/Timer-fails-to-resolve-parameters-ts27161260.html","davsclaus:1263694735:2010-01-17T10:18:55.882+0000:1263694735:2010-01-17T10:18:55.882+0000:svn rev: 289.
davsclaus:1263695728:2010-01-17T10:35:28.903+0000:1263695728:2010-01-17T10:35:28.903+0000:Updated wiki page as well
http://cwiki.apache.org/confluence/display/CAMEL/camel-jboss"
0,CAMEL-2371,New Feature,Major,None,None,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,1,0,2010-01-16 12:14:00+00:00,2011-04-24 10:01:13+00:00,"Consider creating a new JBoss Netty component as a supplement to the MINA component.


It starts to become a joke with the Mina 2.0 release which has take 2+ years and still not released. 


And one of the primary drivers behind MINA joined JBoss and created Netty instead. It appears as a good alternative.
Netty is also Apache licensed.","akarpe:1267652022:2010-03-04T05:33:42.054+0000:1267652022:2010-03-04T05:33:42.054+0000:Hi Hadrian Claus and Jon,

I have developed the camel netty component and I am making it available for your thoughts and comment.

The component supports TCP, UDP and SSL in both sync/async modes. The only difference camel-netty has with regard to Mina is that it does not send Exchanges themselves over the wire. It does support byte arrays for non-serializable payloads and serializable payloads/objects (including strings).

I have added about 7 tests with different scenarios and performed checkstyle verification.

I will commit the component and add documentation as soon as I incorporate any thoughts, comments or ideas you may have. 

Cheers,

Ashwin...
njiang:1267675771:2010-03-04T12:09:31.409+0000:1267675771:2010-03-04T12:09:31.409+0000:@Ashwin
I just have quick look of you patch, it looks good, you ready implemented the tcp and udp transport by leverage netty.
Do you have any plan to add other transport (such as local, xnio) etc implementation ?
njiang:1267675916:2010-03-04T12:11:56.659+0000:1267675916:2010-03-04T12:11:56.659+0000:Just another quick note of the camel-netty  pom.xml,
You need to add the netty maven repo, and the declaration of netty-version property.
In this way, we can build the camel-netty without any complain.

akarpe:1267676871:2010-03-04T12:27:51.033+0000:1267676871:2010-03-04T12:27:51.033+0000:Hi Willem,

Thanks for rightly identifying the netty maven repo site in the repository. I do need to do it. As for the netty version I uses 3.1.5-GA which is fully APL 2.0 licensed. APL license is effective as of 3.1.3-GA.

I will look into local and xnio support in Netty. I have not looked at this closely. I will add it via a separate enhancement and link it to this issue.

Thanks for the feedback.

Cheers,

Ashwin...
davsclaus:1267691933:2010-03-04T16:38:53.070+0000:1267691933:2010-03-04T16:38:53.070+0000:Cool work, just a few comments

You pass in a thread pool to Netty in NettyConsumer
{code}
 new NioServerSocketChannelFactory(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());
{code}

You can use the org.apache.camel.util.ExecutorServices which offer a newCachedThreadPool where you can pass in a thread name.
This is good to use as then the threads will be prefixed with Camel and a counter which ensures that end users can know its from Camel.
You can etc. use the endpointUri as the thread name

Btw in your unit tests you can avoid ugly type casting and pass in the type as 2nd parameter.
{code}
String reply requestBody(""direct:foo"", ""hello"", String.class);
{code}

Maybe you can add a little DEBUG or INFO logging when the consumer starts so it logs which host:port it starts to listen.

What does this annotation do?
{code}
+@ChannelPipelineCoverage(""all"")
{code}

And in the exceptionCaught method its debugged that the channel is closed, but there is no code that does this, is this correct?

In ServerChannelHandler you convert the payload from byte[] -> String if DEBUG logging is enable. If DEBUG is not enable you do NOT convert. This is wrong.

davsclaus:1267692070:2010-03-04T16:41:10.294+0000:1267692150:2010-03-04T16:42:30.570+0000:In this code
{code}
+        try {
+            consumer.getProcessor().process(exchange);
+        } catch (Exception exception) {
+            throw new Exception(""Error in consumer while dispatching exchange for further processing"", exception);
+        }
{code}

Its best to throw a CamelExchangeException since the exception occurred while processing that exchange.
davsclaus:1267692138:2010-03-04T16:42:18.185+0000:1267692138:2010-03-04T16:42:18.185+0000:When you add custom headers use the Camel case syntax

eg
{code}
        exchange.getIn().setHeader(""CHANNEL_HANDLER_CONTEXT"", ctx);
+        exchange.getIn().setHeader(""MESSAGE_EVENT"", messageEvent);
{code}

Should be
{code}
        exchange.getIn().setHeader(""CamelNettyChannelHandlerContext"", ctx);
+        exchange.getIn().setHeader(""CamelNettyMessageEvent"", messageEvent);
{code}
davsclaus:1267692320:2010-03-04T16:45:20.793+0000:1267692320:2010-03-04T16:45:20.793+0000:The NettyProducer cannot be shared between multiple threads as you got a shared countdown latch. Maybe its possible to avoid this and have a local latch.

So it must like Mina be a pooled resource, so ensure its also ServicePoolAware or whatever that interface was named. Eg take a look at Mina or FTP as they are as well.
akarpe:1267719569:2010-03-05T00:19:29.750+0000:1267719569:2010-03-05T00:19:29.750+0000:Hi Claus,

Thanks for the feedback. I will work on the changes you suggested and submit the next iteration for your review and comment.

I will try to get it done by this weekend. I am on a customer gig all day tomorrow and proceed on vacation all of next week and may not be able to get a chance to work on it. In the event I cannot get it done this weekend, please bear with me. I will try and submit it early the week following.

As for the annotation ***@ChannelPipelineCoverage(""all"")*** it simply means that the same handler may be applied against multiple channel pipeline instances. The only options available are ""one"" and ""all"". The choice of ""one"" will force creation of individual handler instances per pipeline. 

The exceptionCaught()  debug statement stating that the channel is closed but the fact that it is not is a glitch. I need to rework the debug statement (possibly even remove the method and fall back on default handling). Channel closure is not essential since there are some cases where exceptions caught are not fatal in nature. 
 
I will make the countdownLatch local and check out ServicePoolAware. That is a good catch. I did not pick up on this implication during development. Thanks.

Cheers,

Ashwin...
davsclaus:1267738050:2010-03-05T05:27:30.957+0000:1267738050:2010-03-05T05:27:30.957+0000:Hi Ashwin

No rush, Camel 2.3 is still in 2-3 months development.

Thanks for the explanation of the Netty ChannelPipelineCoverage annotation.

I suggest you copy the MinaConcurrentTests which tests how it works with concurrent requests/responses. That should help you to ensure that it all works okay in those situations as well.
Especially with request/reply and that latch thingy.

davsclaus:1267838754:2010-03-06T09:25:54.813+0000:1267838754:2010-03-06T09:25:54.813+0000:Just a quick note, on trunk, there is a now a {{org.apache.camel.spil.ExecutorServiceStrategy}} which you get from {{CamelContext}}. It has methods to create thread pools you need to pass to Netty.


akarpe:1268682321:2010-03-16T03:45:21.413+0000:1268682321:2010-03-16T03:45:21.413+0000:Hi Claus, 

I have started making the necessary changes to the Netty component based on your feedback. 

Cheers, 

Ashwin...
akarpe:1268682954:2010-03-16T03:55:54.185+0000:1268682954:2010-03-16T03:55:54.185+0000:Claus,

I checked org.apache.camel.spi.ExecutorServiceStrategy. It is an interface. If I have to use it, I will need to implement a separate class to implement the methods to create the pool etc.

I found org.apache.camel.util.concurrent.ExecutorServiceHelper api to create a newThread pool more convenient and am currently using it. It is more in in line with your prior recommendation a few comments above... Please let me know if this is not appropriate.
 
Cheers,

Ashwin...

askarpe@progress.com:1268683544:2010-03-16T04:05:44.472+0000:1268683544:2010-03-16T04:05:44.472+0000:I am currently on vacation from 03/08/10 thru 03/12/10. I should be back online on 03/15/10. In the meantime, in case of urgent support requests please connect with my manager Wolfgang Schulze for him to identify and allocate a suitable backup. Thanks and Regards, Ashwin...

davsclaus:1268686897:2010-03-16T05:01:37.962+0000:1268686897:2010-03-16T05:01:37.962+0000:Ashwin

Its recommended to use {{CamelContext.getExecutorService().newCachedExecutorService()}} or the appropriate create method.
Then its ensured that proper shutdown of the pool will be handled as CamelContext will shutdown created pools when its shutdown.

akarpe:1268726078:2010-03-16T15:54:38.982+0000:1268726078:2010-03-16T15:54:38.982+0000:Sure thing... I will change the threadpool to be created using CamelContext.getExecutorService().newCachedExecutorService() 

Cheers,

Ashwin...

P.S: Looks like my email sent the out of office message as a reply to your comment. I have disabled it now :). Not sure how to delete my comment though.. 
davsclaus:1268777743:2010-03-17T06:15:43.333+0000:1268777743:2010-03-17T06:15:43.333+0000:Ashwin.

I actually think we need to consult Netty documentation what they recommend to provide as {{ExeuctorService}} (= thread pool).
The cached executor service provided from the JDK is too aggressive IMHO, eg. you can end up with 1000s created threads in no time, if the server is not busy.

So I would assume they had a pool setting with like a min / max value. For example Jetty is using 20 / 200 AFAIR.

akarpe:1268858977:2010-03-18T04:49:37.914+0000:1268858977:2010-03-18T04:49:37.914+0000:Hi Claus & Willem,

I have incorporated all your recommendations. Can you please take a look and let me know what you think.

I have also added a concurrency test that will exercise concurrent producers against a netty consumer. 

Cheers,

Ashwin...
akarpe:1268859450:2010-03-18T04:57:30.190+0000:1268859450:2010-03-18T04:57:30.190+0000:Claus,

I have made the threadPoolSize (core/max) a config setting so that it can be influenced as needed. I have set them to 10/100 for the producer and same for the consumer, by default.

I did not find any guidance on the Netty site for the optimal combination....

Also, I added a JBoss repository to the camel-netty component pom.xml (based on WIllem's recommedation) so that the Netty version could be downloaded. I am not sure if this is the best place or whether I should add the repository to parent/pom.xml.

Ideally, the netty jars could be stored in the apache repository. Not sure of policies here but netty has a Apache 2.0 license. Do you have any guidance in this regard?

Cheers,

Ashwin...

  
hadrian:1268893601:2010-03-18T14:26:41.757+0000:1268893601:2010-03-18T14:26:41.757+0000:Ashwin, yes, it's all right to put it there. I prefer not putting it in the parent pom, as it will be hit for all the other components as well.
davsclaus:1269058980:2010-03-20T12:23:00.735+0000:1269058980:2010-03-20T12:23:00.735+0000:*NettyConsumer*
- The INFO logging has a bit of space and colon cosmetic issue
- The source parameter for creating thread pool from Camel should be {{this}} and not {{null}}
- Why is the UDP mode using a CachedThreadPool and not using size/maxSize from configuration as with TCP?
- The thread pool name is too long, as it should just be like: {{NettyTCPBoss}} or {{NettyTCPWorker}} etc. Camel will add more details to the thread name as well.

*ClientChannelHandler*
- I wonder if just logging the Exception is enough? And when logging you should add the exception as 2nd parameter so we got the stacktrace also

*ServerChannelHandler*
- The WARN logging may have some English wording issue.

*Producer/Consumer*
- In the doStart you init either UDP or TCP. I think the if should be an if else to make this more strong. Having a {{return}} is not nice.
- Doesn't the await method on {{countdownLatch.await}} return a boolean if the timeout triggered, if so please use that instead of checking for == 1 as you currently do.
- I think the bufferSizes should be configurable as well, currently they are hardcoded


*General*
- Please check methods as some have empty lines in it, and there are like double lines between methods. Just to keep the code nice and clean




akarpe:1269454137:2010-03-25T02:08:57.428+0000:1269454280:2010-03-25T02:11:20.965+0000:Hi Claus,

I have made the fixes you suggested and have uploaded a patch file and the camel netty zip file containing the source code for the component.

Can you let me know if I can go ahead and commit this version of the component. I will go ahead and write up the documentation for the component following your go-ahead.

Cheers,

Ashwin...

 
davsclaus:1269469359:2010-03-25T06:22:39.642+0000:1269469359:2010-03-25T06:22:39.642+0000:Cool.

I could on find a missing space in these INFO logs, which there are in multiple source files
{code}
  LOG.info(""Netty TCP Consumer started and now listening on Host: "" + configuration.getHost() + ""Port: "" + configuration.getPort());
{code}

Notice there is no space before {{Port:}}


And in this code
{code}
  if (!future.isSuccess()) {
+            throw new CamelExchangeException(""Could not send response via Channel"", exchange);
+        }
{code}

Maybe you can dig more info from Netty's {{MessageEvent}} so you can add more details to the exception. For example the host:port where you was trying to write etc.


And is the {{clean}} plugin needed in the {{pom.xml}} file? Maybe you copied it from camel-ftp which uses it?
davsclaus:1269469387:2010-03-25T06:23:07.174+0000:1269469387:2010-03-25T06:23:07.174+0000:I think if you get those last remarks fixed then +1 to commit it to Apache
akarpe:1269486290:2010-03-25T11:04:50.514+0000:1269486290:2010-03-25T11:04:50.514+0000:Sure, no problem. I will fix these and then commit to Apache.

akarpe:1269549334:2010-03-26T04:35:34.706+0000:1269549456:2010-03-26T04:37:36.765+0000:Hi Claus,

Please find the attached patch and zip files containing the changes you recommended. I will check-in this version...

Cheers,

Ashwin...
davsclaus:1269554720:2010-03-26T06:05:20.202+0000:1269554720:2010-03-26T06:05:20.202+0000:Ashwin can you add the JBoss Repo where the Netty JAR is located to the pom.xml of camel-netty.

It's now downloaded right now
{code}
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Failed to resolve artifact.

Missing:
----------
1) org.jboss.netty:netty:jar:3.1.5.GA

  Try downloading the file manually from the project website.

  Then, install it using the command: 
      mvn install:install-file -DgroupId=org.jboss.netty -DartifactId=netty -Dversion=3.1.5.GA -Dpackaging=jar -Dfile=/path/to/file

  Alternatively, if you host your own repository you can deploy the file there: 
      mvn deploy:deploy-file -DgroupId=org.jboss.netty -DartifactId=netty -Dversion=3.1.5.GA -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]

  Path to dependency: 
        1) org.apache.camel:camel-netty:bundle:2.3-SNAPSHOT
        2) org.jboss.netty:netty:jar:3.1.5.GA

----------
1 required artifact is missing.

for artifact: 
  org.apache.camel:camel-netty:bundle:2.3-SNAPSHOT

from the specified remote repositories:
  apache.snapshots (http://repository.apache.org/snapshots),
  Nexus (http://localhost:8081/nexus/content/groups/public),
{code}

PS: My nexus is just a cache for the usual central Maven repo
akarpe:1269609555:2010-03-26T21:19:15.408+0000:1269609555:2010-03-26T21:19:15.408+0000:Hi Claus,

Looks like Willem got to this before I did. I believe this should be fixed now. 

Cheers,

Ashwin...
davsclaus:1269659281:2010-03-27T11:08:01.435+0000:1269659281:2010-03-27T11:08:01.435+0000:We need a feature for this new component so its easy to install in OSGi
davsclaus:1269831219:2010-03-29T10:53:39.845+0000:1269831219:2010-03-29T10:53:39.845+0000:Ashwin do you mind get started on wiki documentation for this new component?
akarpe:1270020214:2010-03-31T15:23:34.519+0000:1270020214:2010-03-31T15:23:34.519+0000:Committed initial version as revision r927700
davsclaus:1303610473:2011-04-24T10:01:13.724+0000:1303610473:2011-04-24T10:01:13.724+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2370,Sub-task,Major,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Martin Krasser,Martin Krasser,0,0,2010-01-16 09:47:15+00:00,2011-04-24 10:01:03+00:00,No Desc,"mrt1nz:1264556125:2010-01-27T09:35:25.195+0000:1264556125:2010-01-27T09:35:25.195+0000:Goal is to obtain an application-specific authorization cookie using a single Camel endpoint. The supporting Camel component implements the multi-step login process by interacting with Google Accounts and the GAE login service. This component is relevant to Java clients that run outside GAE.
davsclaus:1303610463:2011-04-24T10:01:03.570+0000:1303610463:2011-04-24T10:01:03.570+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2369,Sub-task,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Martin Krasser,Martin Krasser,0,0,2010-01-16 09:44:15+00:00,2010-11-03 05:13:14+00:00,No Desc,"mrt1nz:1263698281:2010-01-17T11:18:01.965+0000:1263698281:2010-01-17T11:18:01.965+0000:* Extend GAE example to require users to login. 
* Reports are will be sent on behalf of the logged in user

mrt1nz:1263952811:2010-01-20T10:00:11.199+0000:1263952811:2010-01-20T10:00:11.199+0000:See 
* http://cwiki.apache.org/confluence/display/CAMEL/gsec and 
* http://cwiki.apache.org/confluence/display/CAMEL/Tutorial+for+Camel+on+Google+App+Engine
"
0,CAMEL-2368,Improvement,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Michael Mathers,0,0,2010-01-16 00:08:06+00:00,2010-11-03 05:13:14+00:00,"The documentation at the bottom of this page:  http://camel.apache.org/bean-language.html says that I can use the bean expression DSL to work with beans that are not in the registry in two different ways (2.0-M2+).



Specify Class/method and Camel will create a new instance of the bean and call the method.
Specify instance/method and Camel will use the the specified instance and call the method.



In fact, the doc shows examples of both:


Method 1)



        from(""activemq:topic:OrdersTopic"").
                filter().expression(bean(MyBean.class, ""isGoldCustomer"")).
                to(""activemq:BigSpendersQueue"");




Method 2)



   private MyBean my;

        from(""activemq:topic:OrdersTopic"").
                filter().expression(bean(my, ""isGoldCustomer"")).
                to(""activemq:BigSpendersQueue"");




I am unable to do the latter (#2) as the methods are not defined.  I'm using Camel 2.1.0 but I've tried 2.0.0 as well. So either the doc is wrong or the methods are missing/not visible. My code specifically is:



private Object list;
...
from (getErrorEndpoint())
        .recipientList(list, ""getRecipients"");




Yes, there are easy ways to avoid this.  But I prefer not to have to create more XML and/or specify a Class name here.


Finally, is there a good reason "".recipientList()"" isn't overloaded to take an Endpoint[] instead of only an Expression?   The @RecipientList annotation seems to anticipate this form but there doesn't seem to be a good way to plug the @RecipientList annotated bean into the route definition.  Even if the bean is in the registry it looks as if you still have to supply the method name anyway despite that its already annotated (unless you also annotate with @Handler which might be undesirable). 


Ideally, I could have...



Object list = new Object() {
   @RecipientList public Collection<Endpoint> getRecipents(Object body) {... }
}
...
from (endpoint).recipientList(<any instance annotated with @RecipientList>)




or even



// Look for method ""errors"" then look for annotation @RecipientList(""errors"")
from (endpoint).recipientList( bean, ""errors"" )




Is this making any sense?  (I'm still very wet behind the ears)","davsclaus:1263605208:2010-01-16T09:26:48.439+0000:1263605208:2010-01-16T09:26:48.439+0000:The issue is the documentation was wrong. I have updated that.

You need to do something like this
{code}
                from(""direct:start"")
                    .filter().expression(BeanLanguage.bean(myBean, ""isGoldCustomer""))
                    .to(""mock:result"");
{code}
davsclaus:1263606439:2010-01-16T09:47:19.807+0000:1263606439:2010-01-16T09:47:19.807+0000:The issue is that {{bean}} would have a clash if we overloaded it with a new {{bean(Object instance)}} method, clashing the existing {{bean(String ref)}} method.

So I will relax this and let the latter method use a Object type which is dual parameter. If you pass in a String then it will lookup the bean. Otherwise it will assume its a bean instance and use it out of the box.
davsclaus:1263617595:2010-01-16T12:53:15.053+0000:1263617595:2010-01-16T12:53:15.053+0000:trunk: 899932

Using an existing bean instance is now a first class citizen and there are methods on the builders and method call expressions for that. See updated wiki page:
http://cwiki.apache.org/confluence/display/CAMEL/Bean+Language
davsclaus:1263617682:2010-01-16T12:54:42.344+0000:1263617734:2010-01-16T12:55:34.403+0000:In terms of your request for a {{Endpoint[]}} then just use a {{.constant}} expression

{code}
private Object list;
...
from (getErrorEndpoint())
        .recipientList(constant(list));
{code}
davsclaus:1263618009:2010-01-16T13:00:09.187+0000:1263618009:2010-01-16T13:00:09.187+0000:If you want to use a @RecipientList bean in the route then just route to it using bean

{code}
from(""direct:foo"").bean(MyBean.class);
{code}

And have MyBean having a method which is annotated with @RecipientList

See this test
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListTest.java

Which also works without the method name
https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/BeanRecipientListNoMethodNameTest
davsclaus:1263618048:2010-01-16T13:00:48.405+0000:1263618048:2010-01-16T13:00:48.405+0000:Its not a bug but a request for an improvement
mbmather:1263897019:2010-01-19T18:30:19.030+0000:1263897174:2010-01-19T18:32:54.934+0000:Thanks Claus for the tips and refinements.

In regards to the Endpoint[] question and using ""constant""...  Would this be evaluated just once? or dynamically on each message?  My intent is to create a dynamic recipient list (which you've already shown me ways to do) which is why I rejected using ""constant"" initially.
mbmather:1263899496:2010-01-19T19:11:36.833+0000:1263899496:2010-01-19T19:11:36.833+0000:As for the @RecipientList annotation.  The examples you site indicate (to me) that I cannot use it with a _non Registry_ bean.  ie, the examples show two methods

# Specifying the registry name
# Specifying the bean class (for which Camel will instantiate a new bean)

What I was hoping for was 

{code}from(""direct:foo"").recipientList(mybean);{code}

where mybean is an existing instance such as 

{code}
Object mybean = new Object() {
    @RecipientList
    public Collection<Endpoint> getRecipents(Object body) {... }
}
{code}

However, it seems like this should work, yes (it does require I specify method name though)?

{code}from(""direct:foo"").recipientList(
    BeanLanguage.bean(myBean, ""getRecipients"")
);{code}"
0,CAMEL-2367,New Feature,Major,None,None,"
None
",Closed,Incomplete,None,Unassigned,Christian Müller,0,2,2010-01-15 16:28:16+00:00,2011-04-24 10:01:06+00:00,"It would be nice, if we have an integration for Spring-Batch in Camel.


See also http://old.nabble.com/Spring-batch-integration-with-camel-ts25285268.html#a27179465


Any already existing code which you could share with us?
Any requirements / ideas / proposals for the integration?
What should be the name? Only batch or spring-batch or something else?


I'm looking forward for your posts...","tmcgee:1265190628:2010-02-03T17:50:28.296+0000:1265190628:2010-02-03T17:50:28.296+0000:Here is a POC for camel spring-batch integration I made a few months back. I'm sorry it is not well commented code and the test coverage is so weak. This code is not being actively used right now so I have to been attending to it. You are free to use this code in any way that is helpful to you and if there is anything I can do I would be vary happy to.
muellerc:1265194373:2010-02-03T18:52:53.948+0000:1265194373:2010-02-03T18:52:53.948+0000:Tom,
thanks for sharing your code with us. I will have a look on it after I finished my fight with another issue and come back to you.

Thanks,
Christian
muellerc:1268827622:2010-03-17T20:07:02.588+0000:1268827622:2010-03-17T20:07:02.588+0000:Starting yesterday, I'm thinking how camel and spring-batch could comes together and build some good integration. I have the following possibilities in my mind:

Camel could be used to schedule a job execution like in this way:
{code}
from(""quartz://myGroup/myTimerName?cron=0+0/5+12-18+?+*+MON-FRI"")
.to(spring-batch://myScheduledJob?jobParameter1=value1);
{code}

Camel could be used to execute a job if an event occurs:
{code}
from(""http://myCompany.com/someApp"")
  .choice()
    .when(header(""foo"").isEqualTo(""bar""))
      .to(spring-batch://myFirstJob?jobParameter1=value1)
    .otherwise()
      .to(spring-batch://mySecondJob?jobParameter1=value1);
{code}

Another useful integration could be an ItemReader / ItemWriter integration which allows easily to use Camel routes to delegate the execution:
{code}
public class CamelItemReader implements ItemReader<Object> {
    
    private ConsumerTemplate template;

    public Object read() throws Exception, UnexpectedInputException, ParseException {
        Exchange exchange = template.receive("""");

        Object answer = extractItem(exchange);
        
        return answer;
    }
}

public class CamelItemWriter implements ItemWriter<Object> {
    
    private ProducerTemplate template;

    public void write(List<? extends Object> objects) throws Exception {
        for (Object object : objects) {
            Exchange exchange = createExchange(object);
            
            template.send(exchange);
        }
    }
}
{code}

With the contribution from Tom, I think I have a good starting point for this new Camel component.

What do you think? Any remarks or other ideas? Or is this component/integration useless?

Regards,
Christian
muellerc:1271633482:2010-04-19T07:31:22.676+0000:1271633482:2010-04-19T07:31:22.676+0000:Because there is no feedback for this issue, I assume there is no need for a component like this.
Should we close this issue with 'won't fix'?
davsclaus:1271634895:2010-04-19T07:54:55.707+0000:1271634895:2010-04-19T07:54:55.707+0000:Have set it as incomplete to indicate that its not something we will *not* do, as opposed to close it with wont fix.
davsclaus:1303610466:2011-04-24T10:01:06.823+0000:1303610466:2011-04-24T10:01:06.823+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2366,New Feature,Major,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Unassigned,Moulliard Charles,0,0,2010-01-15 10:27:54+00:00,2010-12-27 05:42:00+00:00,No Desc,"cmoulliard:1263523113:2010-01-15T10:38:33.451+0000:1263534802:2010-01-15T13:53:22.681+0000:1) Build 

To build the WAR OSGI file, the following maven command including profiles -Posgi and -Penable-schemagen must be use :

mvn clean package -Dtest=false -Posgi -Penable-schemagen

2) Before to deploy it on SMX4/Karaf, verify that the following bundles/features are installed :

Features
- Spring
- Spring-DM,
- Camel 2.x 
features are required

Bundles
a) WEB environment
osgi:install -s mvn:org.ops4j.pax.web/pax-web-api/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-spi/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-runtime/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-jetty/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-jsp/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-extender-war/0.7.1
osgi:install -s mvn:org.ops4j.pax.web/pax-web-extender-whiteboard/0.7.1

b) Spring OSGI Web
osgi:install -s mvn:org.springframework/spring-web/2.5.6.SEC01
osgi:install -s mvn:org.springframework.osgi/spring-osgi-web/1.2.0

c)  Jetty Web server
osgi:install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jetty-bundle/6.1.19_2

d) Camel-web console (including in its WEB-INF/lib jersey jars, jstl, rome, sitemesh, ...)
osgi:install -s mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.0/1.3.0
osgi:install -s war:mvn:org.apache.camel/camel-web/2.2-SNAPSHOT/war

e) Access web site 
http://localhost:8181/camelweb/
cmoulliard:1263526933:2010-01-15T11:42:13.307+0000:1263526933:2010-01-15T11:42:13.307+0000:TODO :

- Some unrequired jars are still added in WEB-INF/lib like jaxb, stax, activation, jdom, ... during WAR file generattion
- When jstl, standards bundles will be ready, we can remove them from lib folder and install their corresponding bundles
- Idem but for jersey when improved about classloading for osgi
davsclaus:1288746652:2010-11-03T09:10:52.499+0000:1288746652:2010-11-03T09:10:52.499+0000:Apache Karaf can install a WAR file out of the box and it should be the preferred way to install camel-web.
http://fusesource.com/docs/esb/4.3/esb_deploy_osgi/UrlHandlers-War.html
davsclaus:1288748520:2010-11-03T09:42:00.338+0000:1288748520:2010-11-03T09:42:00.338+0000:For example
{code}
karaf@root> osgi:install war:mvn:org.apache.camel/camel-web/2.5.0/war?Webapp-Context=camel-web
Bundle ID: 180
{code}

But unfortunately OSGi plays another tricks on us
{code}
2010-11-03 10:19:17,288 [ Console Thread] ERROR ContextLoader                  - Context initialization failed
org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from ServletContext resource [/WEB-INF/applicationContext.xml]; nested exception is java.lang.LinkageError: loader constraint violation: when resolving field ""DATETIME"" the class loader (instance of org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader) of the referring class, javax/xml/datatype/DatatypeConstants, and the class loader (instance of <bootloader>) for the field's resolved type, javax/xml/namespace/QName, have different Class objects for that type
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412)[spring-beans-3.0.4.RELEASE.jar:3.0.4.RELEASE]
...
{code}
boday:1293399720:2010-12-27T05:42:00.101+0000:1293399720:2010-12-27T05:42:00.101+0000:Has this camel-web/OSGi deployment issue been resolved?  I tried both approaches referenced above, but get the same exception Claus referenced (using 2.6-SNAPSHOT as of today) with Fuse ESB 4.2-01...thanks

"
0,CAMEL-2365,Improvement,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-01-15 06:18:45+00:00,2010-11-03 05:13:13+00:00,"With this SpringBusFactoryBean, we don't need to let the user bundle imports bunch of cxf packages or use the Dynamical-PackageImport any more.",
0,CAMEL-2364,New Feature,Minor,None,None,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Ashwin J. Karpe,0,0,2010-01-14 19:03:43+00:00,2011-04-24 09:57:45+00:00,No Desc,"hadrian:1265897066:2010-02-11T22:04:26.224+0000:1265897066:2010-02-11T22:04:26.224+0000:Ashwin, could you please add some details, like what statistics and how a user would see it?
akarpe:1265902453:2010-02-11T23:34:13.545+0000:1265902517:2010-02-11T23:35:17.743+0000:Hi Hadrian,

I got this request from a nabble request where this one-liner need was expressed. Please see below

http://old.nabble.com/camel-cache%3A-Using-Objects-for-cache-ts27026756.html

I fixed the serializable object support issue in CAMEL-2343 and created a Jira entry to capture this request.

My understanding based on what I saw in this request was that statistics from within ehCache (objects stored, deleted, expired, added, updated etc) be made available by camel-cache in addition to the camel component, endpoint & producer/consumer based JMX stats that are typically gathered by Camel.

The challenge with this request is how to make it more generic and express endpoint specific stats that can be leveraged by different endpoints.Ideally, something that can be extended/implemented by different types of endpoints and not just for camel-cache.

Hope this helps.

Cheers,

Ashwin...

 
 
davsclaus:1266023891:2010-02-13T09:18:11.587+0000:1266023891:2010-02-13T09:18:11.587+0000:See section _registering your own managed endponts_
http://camel.apache.org/camel-jmx.html

Or chapter 12 in the Camel book :)

for how its possible to expose JMX attributes/operations in a Camel endpoint.

I wonder though if ehCache has its own JMX stats, people can use instead?
deckerego:1282676840:2010-08-25T03:07:20.322+0000:1282676840:2010-08-25T03:07:20.322+0000:EhCache does have its own statistics. Here's a snippet on how to expose them via JMX in a Spring application context:
    <bean id=""ehCacheManagementService"" class=""net.sf.ehcache.management.ManagementService"" init-method=""init"" lazy-init=""false"">
        <constructor-arg>
            <bean class=""net.sf.ehcache.CacheManager"" factory-method=""getInstance""/>
        </constructor-arg>
        <constructor-arg>
            <bean class=""org.springframework.jmx.support.JmxUtils"" factory-method=""locateMBeanServer""/>
        </constructor-arg>
        <constructor-arg value=""true""/>
        <constructor-arg value=""true""/>
        <constructor-arg value=""true""/>
        <constructor-arg value=""true""/>
    </bean>

Of course you can do the same thing in straight Java:
  ManagementService.registerMBeans(CacheManager.getInstance(), mbeanServer, true, true, true, true);

You can get cache hits, misses, in-memory hits, disk hits, size stats this way. You can also change CacheConfiguration parameters on the fly.
davsclaus:1282708576:2010-08-25T11:56:16.012+0000:1282708576:2010-08-25T11:56:16.012+0000:Thanks John for showing how to do this with pure EHCache. I have updated the camel cache wiki page with your instructions.
davsclaus:1303610265:2011-04-24T09:57:45.930+0000:1303610265:2011-04-24T09:57:45.930+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2363,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Ashwin J. Karpe,Ashwin J. Karpe,0,0,2010-01-14 18:42:51+00:00,2010-11-03 05:13:13+00:00,"Camel Cache has sample caches created by the component via its ehCache settings.


These should not be created in order to avoid unnecessary taking up of ports by the sample caches.","akarpe:1263465832:2010-01-14T18:43:52.807+0000:1263465832:2010-01-14T18:43:52.807+0000:Please find attached fix that prevents the sample caches from being created.
davsclaus:1263503212:2010-01-15T05:06:52.892+0000:1263503212:2010-01-15T05:06:52.892+0000:Applied patch with thanks.

trunk: 899527."
0,CAMEL-2362,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Simon,0,0,2010-01-14 11:54:18+00:00,2010-11-03 05:13:13+00:00,"See http://old.nabble.com/FTP-assume-directory-do-not-have-dot-td27153817.html#a27160086
(COpy paste)
>
> I have the following error:
>
> Caused by: java.lang.IllegalArgumentException: Only directory is supported.
> Endpoint must be configured with a valid directory: ftp.test
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:68)
>        at
> org.apache.camel.component.file.remote.RemoteFileEndpoint.createConsumer(RemoteFileEndpoint.java:31)
>        at
> org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:60)
>        at
> org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
>        at org.apache.camel.impl.RouteService.doStart(RouteService.java:123)
>        at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:55)
>        at
> org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:906)
>        ... 1 more
>
> By looking at the source code I saw the following :
>        // we assume its a file if the name has a dot in it (eg foo.txt)
>        if (configuration.getDirectory().contains(""."")) 

{
>            throw new IllegalArgumentException(""Only directory is supported.
> Endpoint must be configured with a valid directory: ""
>                    + configuration.getDirectory());
>        }

>
> I remove that code and my code is working!! 
>
> I think the above code should not assume that.....
> What do you think ?
>
... [show rest of quote]


Its really a bad habit having a dot in a directory name.
On windows will that not often be considered a file?.


And since its a remote path we cannot on startup determine if its a
path or file.


The check was made in the transition from 1.x to 2.x where in 1.x you
could define a starting file or directory.
In 2.x you must specify a directory only.


We could relax the check but then people may still enter a filename
and think Camel will pickup that file.


[SIMON]
Windows directory can contains a dot... a good example is in your eclipse installation... example:
Directory name=org.eclipse.emf.teneo.jpox_1.0.1.v200902271808


Also I think that check is useless because you can still enter something without a dot and it is in fact a file... so the endpoint should verify that after the connection.


Simon 


Yeah good call


Do you mind creating a ticket in JIRA about this?
http://issues.apache.org/activemq/browse/CAMEL",davsclaus:1263515118:2010-01-15T08:25:18.596+0000:1263515118:2010-01-15T08:25:18.596+0000:trunk: 899559.
0,CAMEL-2361,Improvement,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Simon,0,0,2010-01-14 11:46:40+00:00,2010-11-03 05:13:13+00:00,">
> I do the following:
>
>
> ""ftp://tata@.../ftp.input?&recursive=true&binary=true&consumer.delay=1000"")
>            .to(""file://M:/FTP.INPUT/"");
>
> I would like to have my file in transfered and keeping their
> lastModifiedTime. I wonder if a flag is available for that ? Another
> solution would be to get it from the Message and do it programmatically.
>
... [show rest of quote]


Hi


Good idea. Notice that the timestamp from the FTP library is often not
100% accurate down to the seconds.


Could you create a ticket in JIRA for this feature request?
http://issues.apache.org/activemq/browse/CAMEL","davsclaus:1263517451:2010-01-15T09:04:11.929+0000:1263517451:2010-01-15T09:04:11.929+0000:trunk: 899568.

Added option {{keepLastModified}} on the file producer."
0,CAMEL-2360,Bug,Major,2.2.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Marco Crivellaro,0,0,2010-01-14 10:14:29+00:00,2011-04-24 10:01:24+00:00,"summary:
the bean gets intialized but it looks like the method retryUntil is never called, could it be an error of implementation? am I doing something wrong?


using following route:



from(""jms-test:queue:queue.delivery.notification.test"") 
.process(processor) 
.onException(Exception.class).retryUntil(bean(""myRetryBean"")).end() 
.recipientList(header(""recipientListHeader"").tokenize("","")) 
.parallelProcessing().executorService(customThreadPoolExecutor) 
.aggregationStrategy(new RecipientAggregationStrategy()) 
.to(""direct:chunk.completed""); 




bean is registered in such way: 



JndiRegistry jndi = new JndiRegistry(new JndiContext()); 
jndi.bind(""myRetryBean"", new RetryBean()); 




bean class is: 



public class RetryBean { 

        private int _invoked; 
        private Logger _logger; 
        
    public RetryBean() { 
    this._logger = Logger.getLogger(RetryBean.class); 
    this._invoked = 0; 
    _logger.debug(""BEAN INITIALIZED "" + _invoked); 
    } 
        
    // using bean binding we can bind the information from the exchange to the types we have in our method signature 
    public boolean retryUntil(@Header(Exchange.REDELIVERY_COUNTER) Integer counter, @Body String body, @ExchangeException Exception causedBy) { 
        // NOTE: counter is the redelivery attempt, will start from 1 
    _invoked++; 
    
    
    _logger.debug(""invoked"" + _invoked); 
    _logger.debug(""counter"" + counter); 
    _logger.debug(""result"" + (counter < 2)); 
    
        // we can of course do what ever we want to determine the result but this is a unit test so we end after 3 attempts 
        return counter < 7; 
    }","davsclaus:1263522536:2010-01-15T10:28:56.371+0000:1263522536:2010-01-15T10:28:56.371+0000:Context scoped error handling works
{code}
                onException(Exception.class).retryUntil(bean(""myRetryBean"")).end();
                
                from(""seda:start"")
                    .recipientList(header(""recipientListHeader""))
                    .to(""mock:result"");

                from(""direct:foo"").to(""log:foo"").to(""mock:foo"");
{code}
davsclaus:1263523169:2010-01-15T10:39:29.602+0000:1263523169:2010-01-15T10:39:29.602+0000:Can you post which endpoints you use in the recipientListHeader and if its to another Camel route can you post these also.
crive:1263523349:2010-01-15T10:42:29.284+0000:1263523349:2010-01-15T10:42:29.284+0000:I am using FTP endpoints
davsclaus:1263528988:2010-01-15T12:16:28.925+0000:1263528988:2010-01-15T12:16:28.925+0000:Okay found an issue but that is related to when using more routes.

Do you also have Camel routes for those FTP endpoints? eg do you have also {{from(""ftp:..."")}} in a Camel route somewhere?
davsclaus:1263534201:2010-01-15T13:43:21.208+0000:1263534201:2010-01-15T13:43:21.208+0000:Marco can you try with latest code from trunk?
I have committed a fix.

trunk: 899628.
crive:1263538804:2010-01-15T15:00:04.463+0000:1263538804:2010-01-15T15:00:04.463+0000:I am not able to compile latest trunk my systems runs out of memory...
davsclaus:1263539292:2010-01-15T15:08:12.970+0000:1263539292:2010-01-15T15:08:12.970+0000:See this link how to increase memory to maven
http://camel.apache.org/building.html
crive:1263545464:2010-01-15T16:51:04.806+0000:1263545464:2010-01-15T16:51:04.806+0000:I don't see it working even by using a Context scoped error handler
davsclaus:1263545830:2010-01-15T16:57:10.675+0000:1263545830:2010-01-15T16:57:10.675+0000:Create a small project which does not work at your end and attach it as a zip file.
crive:1263876578:2010-01-19T12:49:38.585+0000:1263876578:2010-01-19T12:49:38.585+0000:Attached a sample file which shows retryUntil method of RetryBean is never called.
davsclaus:1265675067:2010-02-09T08:24:27.308+0000:1265675067:2010-02-09T08:24:27.308+0000:Should work in 2.2 release
davsclaus:1265694208:2010-02-09T13:43:28.296+0000:1265694208:2010-02-09T13:43:28.296+0000:Okay for a timing issue when using {{parallel}} recipient list.

I will commit a fix for that in 2.3 later today
davsclaus:1265700835:2010-02-09T15:33:55.049+0000:1265700835:2010-02-09T15:33:55.049+0000:trunk: 908073.
davsclaus:1265700858:2010-02-09T15:34:18.972+0000:1265700858:2010-02-09T15:34:18.972+0000:Marco you are welcome to try with latest code from trunk on your system.
davsclaus:1303610484:2011-04-24T10:01:24.787+0000:1303610484:2011-04-24T10:01:24.787+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2359,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-01-14 09:27:44+00:00,2010-11-03 05:13:13+00:00,"You can find the discuss about this issue here 
http://old.nabble.com/pojo-example-fails-to-build-with-ant-ts27137019.html#a27151041",njiang:1263433200:2010-01-14T09:40:00.039+0000:1263433200:2010-01-14T09:40:00.039+0000:http://svn.apache.org/viewvc?rev=899132&view=rev
0,CAMEL-2358,Improvement,Major,2.1.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Johan Haleby,0,0,2010-01-13 18:45:03+00:00,2011-04-24 10:01:19+00:00,"Right now you cannot use Spring property placeholders to define a packageScan inside the Camel XML. I.e. this won't work:



<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
    "">

  <bean class=""org.springframework.beans.factory.config.PropertyPlaceholderConfigurer""/>

  <camelContext xmlns=""http://activemq.apache.org/camel/schema/spring"">
          <packageScan>
                  <package>${some.scan.path}</package>
          </packageScan>
  </camelContext>
</beans>




However a workaround exists for uri's as seen in the FAQ. I'd like to propose something similar for packageScan. For example something like this:



<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
    "">

  <bean class=""org.springframework.beans.factory.config.PropertyPlaceholderConfigurer""/>

  <camelContext xmlns=""http://activemq.apache.org/camel/schema/spring"">
     <package id=""scanPath1"" name=""${some.scan.path}""/>
     <packageScan>
         <package ref=""scanPath1"" />
      </packageScan>
  </camelContext>

</beans>","davsclaus:1266494024:2010-02-18T19:53:44.508+0000:1266494024:2010-02-18T19:53:44.508+0000:We can get this supported with the new Camel properties component
davsclaus:1266543060:2010-02-19T09:31:00.947+0000:1266543060:2010-02-19T09:31:00.947+0000:The same applies for the regular <package> tag as well. Both should support the property lookup
davsclaus:1266559818:2010-02-19T14:10:18.823+0000:1266559818:2010-02-19T14:10:18.823+0000:trunk: 911816.
davsclaus:1303610479:2011-04-24T10:01:19.536+0000:1303610479:2011-04-24T10:01:19.536+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2357,New Feature,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-13 16:23:40+00:00,2010-11-03 05:13:12+00:00,"When doing unit testing and you do not use mocks or the likes to test when X number of message have completed etc.
Then we need some other form to do that and a fairly lightweight and simple builder can offer this in a intuitive way.



        ExchangeNotifierBuilder builder = new ExchangeNotifierBuilder(context)
                .from(""direct:foo"").whenExchangeDone(5)
                .create();




And you can stack with operations such as and, or, not etc:



        ExchangeNotifierBuilder builder = new ExchangeNotifierBuilder(context)
                .from(""direct:foo"").whenExchangeDone(5)
                .or().from(""direct:bar"").whenExchangeDone(7)
                .create();




Then you just assert whether it matched and there should be methods to wait as well



        assertEquals(true, builder.matches());




As well as a method to invoke a callback when its matching.


On top we can add to the builder so you can do fine grained expressions to indicate when this message is complete, or when 5 messages with header amount > 100 is complete etc.
Basically if we can tap in the other builders then you would be able to archive that","davsclaus:1263371091:2010-01-13T16:24:51.851+0000:1263371091:2010-01-13T16:24:51.851+0000:Btw the from is optional you can do
{code}
        ExchangeNotifierBuilder builder = new ExchangeNotifierBuilder(context)
                .whenExchangeDone(5)
                .not().whenExchangeFailed(1)
                .create();
{code}

Just to indicate any 5 done but none should be failed.

And the from is using wildcard matching just like the interceptors so you can do {{from(""jms*"")}} to indicate any JMS. 
davsclaus:1263374417:2010-01-13T17:20:17.547+0000:1263374417:2010-01-13T17:20:17.547+0000:First work of progress in trunk: 898847.
davsclaus:1263443335:2010-01-14T12:28:55.765+0000:1263443335:2010-01-14T12:28:55.765+0000:Added a wiki page as well
http://cwiki.apache.org/confluence/display/CAMEL/NotifierBuilder"
0,CAMEL-2356,Bug,Major,"2.0-M1, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0",None,"
None
",Closed,Cannot Reproduce,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-01-13 15:35:37+00:00,2010-11-03 05:13:12+00:00,"CxfEndpoint's createClientFactoryBean method didn't set the ClientFactoryBean's bus with CxfEndpoint's bus.
It will cause some trouble when using the camel-cxf endpoint's producer within a ServiceMix or other container.","njiang:1263428528:2010-01-14T08:22:08.733+0000:1263428528:2010-01-14T08:22:08.733+0000:Added a unit test to verify it's a false alarm, the original solution is right."
0,CAMEL-2355,New Feature,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-13 12:26:45+00:00,2010-11-03 05:13:12+00:00,"This will also aid for unit testing as you can add you own custom notifier and get notifications during testing.


And you may want to use 2 notifiers, one for storing to a local lock and another for publishing to a central server of some sort.",davsclaus:1263360571:2010-01-13T13:29:31.216+0000:1263360571:2010-01-13T13:29:31.216+0000:trunk: 898746.
0,CAMEL-2354,Bug,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-13 05:53:54+00:00,2010-11-03 05:13:12+00:00,"See nabble
http://old.nabble.com/pojo-example-fails-to-build-with-ant-ts27137019.html",davsclaus:1263333307:2010-01-13T05:55:07.835+0000:1263333307:2010-01-13T05:55:07.835+0000:trunk: 898654
0,CAMEL-2353,Bug,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-13 05:38:03+00:00,2010-11-03 05:13:11+00:00,"See nabble
http://old.nabble.com/Camel-%3A-Date-Pattern-ts27131137.html",davsclaus:1263334561:2010-01-13T06:16:01.638+0000:1263334561:2010-01-13T06:16:01.638+0000:trunk: 898656.
0,CAMEL-2352,Improvement,Minor,"1.6.2, 2.1.0","1.6.3, 2.2.0","
None
",Closed,Fixed,"1.6.3, 2.2.0",Claus Ibsen,Claus Ibsen,0,0,2010-01-12 07:15:07+00:00,2010-11-03 05:13:11+00:00,"JDBC drivers is often a pain when it comes to compliance.


If you use SQL SELECT with aliases then you may have issues with camel-jdbc as it retrieves the column name use ResultSetMetaData which behaves different according to the JDBC spec.


See more at:
http://fusesource.com/forums/thread.jspa?messageID=5623&#5623


Introduce a new option useJDBC4ColumnNameAndLabelSemantics where you can configure which option to use. Will by default use JDBC 4","davsclaus:1263252412:2010-01-12T07:26:52.673+0000:1263252412:2010-01-12T07:26:52.673+0000:trunk: 898201.
1.x: 898203."
0,CAMEL-2351,Improvement,Major,1.6.2,1.6.3,"
None
",Closed,Fixed,1.6.3,Claus Ibsen,Claus Ibsen,0,0,2010-01-12 06:41:15+00:00,2011-01-17 16:50:38+00:00,"You cannot set a per message JMSPriority or JMSExpiration currently in 1.x as they are just ignored.
We should backport the code from trunk that allows to use them to use priority and TTL when sending using the Spring JmsProducer","davsclaus:1263249806:2010-01-12T06:43:26.053+0000:1263249806:2010-01-12T06:43:26.053+0000:trunk: 898191.
davsclaus:1295254238:2011-01-17T16:50:38.054+0000:1295254238:2011-01-17T16:50:38.054+0000:Closing all 1.x tickets"
0,CAMEL-2350,New Feature,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-11 15:53:33+00:00,2010-11-03 05:13:11+00:00,"Currently we only ship with a logging event notifier out of the box.


We should also ship one that can send the Event to any Camel endpoint, so end user use it for routing or sending to some other kind of transport.",davsclaus:1263196702:2010-01-11T15:58:22.079+0000:1263196702:2010-01-11T15:58:22.079+0000:trunk: 897919.
0,CAMEL-2349,Improvement,Trivial,2.1.0,2.2.0,"
None
",Closed,Not A Problem,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-11 15:13:02+00:00,2010-11-03 05:13:11+00:00,We already got ${exception.message} for the Exception on the Exchange. So one for caught exception would be nice as well.,davsclaus:1263194079:2010-01-11T15:14:39.046+0000:1263194079:2010-01-11T15:14:39.046+0000:Argh it does this already as it will fallback and grab the caught
0,CAMEL-2348,Improvement,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-11 13:32:41+00:00,2010-11-03 05:13:11+00:00,"The current EventNotifier is a bit sparse. It should have a bunch of ignoreXXX events to filter by category. In case you do not want certain types etc.
Also it can be used to configure it to only report failures which is interesting if you want to alert that to a monitoring system.",davsclaus:1263192764:2010-01-11T14:52:44.867+0000:1263192764:2010-01-11T14:52:44.867+0000:trunk: 897885.
0,CAMEL-2347,New Feature,Major,None,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,James Strachan,0,1,2010-01-11 10:32:33+00:00,2010-11-03 05:13:10+00:00,"here's more information on the jsendnsca library that lets you send alerts to Nagios...


http://code.google.com/p/jsendnsca/


An endpoint could then create one of these...



        NagiosSettings nagiosSettings = NagiosSettingsBuilder
            .withNagiosHost(""localhost"")
            .withPort(5667)
            .withConnectionTimeout(5000)
            .withResponseTimeout(15000)
            .withPassword(""password"")
            .create();




then a Producer would just wrap the Nagios sender...



        NagiosPassiveCheckSender sender = new NagiosPassiveCheckSender(
                nagiosSettings);




Then the MessagePayload could be passed as a payload; or could be created using the text of the payload using optional headers...



        MessagePayload payload = MessagePayloadBuilder
            .withHostname(""localhost"")
            .withLevel(Level.CRITICAL)
            .withServiceName(""Test Service Name"")
            .withMessage(""Test Message"")
            .create();","davsclaus:1263178224:2010-01-11T10:50:24.380+0000:1263178224:2010-01-11T10:50:24.380+0000:Fantastic this is something I would have loved to have 2 years ago. 

End users can even integrate it with the Camel EventNotifier to let it send alerts when an Exchange has failed.
akarpe:1263275766:2010-01-12T13:56:06.399+0000:1263275766:2010-01-12T13:56:06.399+0000:Hi James and Claus,

I was doing some due diligence on Nagios and was unclear about their license and compatibility with the Apache License. I could not find much detail on this.

I am interested in taking this forward. Can you please let me know if the license is compatible and whether I can proceed on this.

Cheers,

Ashwin...
akarpe:1263276066:2010-01-12T14:01:06.085+0000:1263276066:2010-01-12T14:01:06.085+0000:Hi James & Claus,

Never mind. Looks like the jsendnsca library has an Apache 2.0 license. 

Ok. I will check this out further.

Cheers,

Ashwin...
davsclaus:1263285680:2010-01-12T16:41:20.264+0000:1263285680:2010-01-12T16:41:20.264+0000:I got a basic NagiosEventNotifier up and running locally.

There is a couple of issues with jsendnsca which I have reported. The MessagePayloadBuilder is buggy and should be avoided to use.
davsclaus:1263346083:2010-01-13T09:28:03.546+0000:1263346083:2010-01-13T09:28:03.546+0000:Will continue to submit some patches to fix some issues around concurrency.

Looks like v2.0 is the version with the patches. So we should wait until that release is out of the door before we can add the camel-nagios component.
davsclaus:1263347839:2010-01-13T09:57:19.377+0000:1263347839:2010-01-13T09:57:19.377+0000:This requires a new release of the Nagios library which may not make it in the timeframe for Camel 2.2 so I have pushed this to 2.3
raj420:1263386407:2010-01-13T20:40:07.762+0000:1263386407:2010-01-13T20:40:07.762+0000:Claus,

If it helps you guys out with the camel-nagios component, I can apply your patches and get a version 1.2.1 of JSend NSCA out the door



raj420:1263397847:2010-01-13T23:50:47.555+0000:1263397847:2010-01-13T23:50:47.555+0000:Ok, 

Release 1.3 out which includes Claus's fixes






davsclaus:1263416473:2010-01-14T05:01:13.412+0000:1263416473:2010-01-14T05:01:13.412+0000:Raj thanks a lot for the 1.3 release and applying those patches so quickly.
Lets push this for Camel 2.2 then.

Do you mind creating a release with the -test .jar also? We need this test jar to unit test camel-nagios.

Note: However I can create the test jar as well but I do fell it would be best if it was part of the official release.
raj420:1263447073:2010-01-14T13:31:13.452+0000:1263447073:2010-01-14T13:31:13.452+0000:Will get the test jar created and upload some time late tonight.

Also, if you want, i can add you as a committer to the JSend NSCA project in case you find further issues while coding camel-nagios
davsclaus:1263447360:2010-01-14T13:36:00.078+0000:1263447360:2010-01-14T13:36:00.078+0000:Raj thanks a lot.

I will be honored to be a committer on the JSend NSCA project.
raj420:1263482973:2010-01-14T23:29:33.826+0000:1263482973:2010-01-14T23:29:33.826+0000:Hi Claus

Test jar now available in downloads for you

Seems I cant add you as a committer with your apache.org email address, suspect google code needs a google email address

If you have one, let me know and will add you with that

Best of luck with camel-nagios and if you need any further help, let me know


raj420:1263486032:2010-01-15T00:20:32.712+0000:1263486032:2010-01-15T00:20:32.712+0000:Claus

Now added as committer to JSend NSCA with address claus.ibsen@gmail.com
davsclaus:1263504172:2010-01-15T05:22:52.179+0000:1263504172:2010-01-15T05:22:52.179+0000:Raj

Thanks a lot for redoing the release and inviting me in. I am sure there may pop up an issue or two later when I get camel-nagios more ready. And the Camel community may as well find issues or ideas for features which they report here first.
davsclaus:1263766283:2010-01-18T06:11:23.786+0000:1263766283:2010-01-18T06:11:23.786+0000:trunk: 900283.

Initial project added with contains a NagiosEventNotifier.
davsclaus:1264034423:2010-01-21T08:40:23.566+0000:1264034423:2010-01-21T08:40:23.566+0000:trunk: 901596.

added nagios component
davsclaus:1264057791:2010-01-21T15:09:51.276+0000:1264057791:2010-01-21T15:09:51.276+0000:wiki documentation and a feature file is left to do
davsclaus:1264619419:2010-01-28T03:10:19.776+0000:1264619419:2010-01-28T03:10:19.776+0000:Added wiki docu:
http://cwiki.apache.org/confluence/display/CAMEL/Nagios"
0,CAMEL-2345,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Hadrian Zbarcea,0,0,2010-01-08 15:23:28+00:00,2010-11-03 05:13:10+00:00,"This is due to the following code in Client createClient() in CxfEnpoint



        } else {
            ObjectHelper.notNull(portName, ""Please provide endpoint/port name"");
            ObjectHelper.notNull(serviceName, ""Please provide service name"");
            ClientFactoryBean factoryBean = createClientFactoryBean();




When there's only one service/port, we should just use it.","alitokmen:1262936478:2010-01-08T15:41:18.992+0000:1262936478:2010-01-08T15:41:18.992+0000:Hello

Can you please post a route sample? Is this only for the WS caller?

Cheers
hadrian:1262937431:2010-01-08T15:57:11.807+0000:1262937431:2010-01-08T15:57:11.807+0000:I think this causes a problem only for the client now, but in general, the cxf endpoint url should not have to specify the service/port if there's only one in the wsdl. I suspect it already works like that for the server side.
davsclaus:1263343617:2010-01-13T08:46:57.185+0000:1263343617:2010-01-13T08:46:57.185+0000:Hadrian do you get in touch with Willem about this one?
njiang:1263344949:2010-01-13T09:09:09.432+0000:1263344949:2010-01-13T09:09:09.432+0000:Hi Hadrain,

Yes, CXF client and server side share the same code (ReflectionServiceFactoryBean) to create the ServiceModel.

If we don't specify the server name and port name, CXF will try to find a one for using, but if there are more than one service or one port, it will make us get into trouble of connecting a wrong endpoint. I think that is why William Tam added these checking.

How about we warning the user that don't set the service or the port name instead of using a NP checker?

Willem
wtam:1263365490:2010-01-13T14:51:30.013+0000:1263365490:2010-01-13T14:51:30.013+0000:Yea, it looks like we can relax this requirement for client but NOT for the server as ServerFactoryBean fails to initialize without serviceName and portName (if serviceClass is not specified. i.e. wsdl only).   I think it is a best practice to provide serviceName and portName for wsdl only use case but I agree that they are not required on the client (producer).  We probably should update CXFWsdlOnlyPayloadModeNoSpringTest and CXFWsdlOnlyMessageModeNoSpringTest if we do change it.  And update the notes in the serviceClass option about this requirement in the http://cwiki.apache.org/confluence/display/CAMEL/CXF.  Let me know if you want me to handle it.  thx.



njiang:1263435859:2010-01-14T10:24:19.151+0000:1263435859:2010-01-14T10:24:19.151+0000:i changed the NullPoint check to log warning message.
"
0,CAMEL-2344,Improvement,Trivial,2.0.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Jörn Kottmann,0,0,2010-01-07 20:15:35+00:00,2010-11-03 05:13:09+00:00,"The MailConsumer logs in the rollback case the exchange (line 162 in revision 893983) but the exchange contains (usually ?) an exception which is not logged.
In my case the exception is thrown from a custom Expression which splits a mail message.


Only a rollback warning which contains the headers of the mail message is logged which makes finding the actual cause difficult.","davsclaus:1262901277:2010-01-08T05:54:37.653+0000:1262901277:2010-01-08T05:54:37.653+0000:trunk: 897106

BTW: Camel 2.2 will also log an ERROR line if an Exception was thrown somewhere, so you get an early indication something was wrong.

I have also fixed the mail consumer to log the cause exception including the stacktrace.
"
0,CAMEL-2343,Improvement,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Ashwin J. Karpe,Claus Ibsen,0,0,2010-01-07 13:51:38+00:00,2010-11-03 05:13:09+00:00,"The camel-cache forces the body to be stored in the cache as a byte[].


It should honor existing bodies which is already Serializable and thus already ready to be cached out of the box.


And it should use the Camel type converters to detect this. Also for converting to byte[].","davsclaus:1262843522:2010-01-07T13:52:02.949+0000:1262843522:2010-01-07T13:52:02.949+0000:See nabble
http://old.nabble.com/camel-cache%3A-Using-Objects-for-cache-ts27026756.html
akarpe:1262872103:2010-01-07T21:48:23.501+0000:1262872103:2010-01-07T21:48:23.501+0000:Sure Claus,

I will work on this right away

Cheers,

Ashwin...
akarpe:1263237026:2010-01-12T03:10:26.869+0000:1263237026:2010-01-12T03:10:26.869+0000:Hi Claus,

Please find attached a patch and zip file that adds support for directly storing and retrieving serialized objects while continuing to use byte[] to support non-serializable data.

I have also added tests to the CacheProducer and CacheConsumer to prove that the functionality works without side-effects to the earlier functionality.

Cheers,

Ashwin...
davsclaus:1263262992:2010-01-12T10:23:12.782+0000:1263262992:2010-01-12T10:23:12.782+0000:Thanks Ashwin for the patch.

I polished the logger a bit as well.

trunk: 898273."
0,CAMEL-2342,Task,Minor,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Claus Ibsen,0,0,2010-01-07 12:46:04+00:00,2010-11-03 05:13:09+00:00,"[INFO] Compilation failure

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[21,27] package org.apache.activemq does not exist

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[33,46] cannot find symbol
symbol  : class Bean
location: package org.springframework.context.annotation

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[34,46] cannot find symbol
symbol  : class Configuration
location: package org.springframework.context.annotation

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[43,1] cannot find symbol
symbol: class Configuration
@Configuration

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[95,5] cannot find symbol
symbol  : class Bean
location: class org.apache.camel.example.spring.javaconfig.MyRouteConfig

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[82,8] cannot find symbol
symbol  : class ActiveMQConnectionFactory
location: class org.apache.camel.example.spring.javaconfig.MyRouteConfig

/Users/davsclaus/workspace/camel/examples/camel-example-spring-javaconfig/src/main/java/org/apache/camel/example/spring/javaconfig/MyRouteConfig.java:[82,58] cannot find symbol
symbol  : class ActiveMQConnectionFactory
location: class org.apache.camel.example.spring.javaconfig.MyRouteConfig




It pulls down spring version 2.5.x instead of 3.0 which then cannot compile the example.



davsclaus:(svn)camel[trunk:896832]/examples/camel-example-spring-javaconfig$ mvn dependency:tree
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'dependency'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring :: JavaConfig
[INFO]    task-segment: [dependency:tree]
[INFO] ------------------------------------------------------------------------
[INFO] [dependency:tree]
[INFO] org.apache.camel:camel-example-spring-javaconfig:bundle:2.2-SNAPSHOT
[INFO] +- org.apache.camel:camel-spring:jar:2.2-SNAPSHOT:compile
[INFO] |  \- org.apache.camel:camel-core:jar:2.2-SNAPSHOT:compile
[INFO] |     +- commons-logging:commons-logging-api:jar:1.1:compile
[INFO] |     \- org.fusesource.commonman:commons-management:jar:1.0:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.2-SNAPSHOT:compile
[INFO] |  +- org.springframework:spring-aop:jar:2.5.6:compile (version managed from 3.0.0.RELEASE)
[INFO] |  |  +- aopalliance:aopalliance:jar:1.0:compile
[INFO] |  |  \- commons-logging:commons-logging:jar:1.1.1:compile
[INFO] |  +- org.springframework:spring-beans:jar:2.5.6:compile
[INFO] |  +- org.springframework:spring-context:jar:2.5.6:compile (version managed from 3.0.0.RELEASE)
[INFO] |  +- org.springframework:spring-core:jar:2.5.6:compile
[INFO] |  +- net.sourceforge.cglib:com.springsource.net.sf.cglib:jar:2.1.3:compile
[INFO] |  \- org.springframework:spring-test:jar:2.5.6:compile (version managed from 3.0.0.RELEASE)
[INFO] +- org.apache.camel:camel-osgi:jar:2.2-SNAPSHOT:compile
[INFO] |  +- org.springframework.osgi:spring-osgi-core:jar:1.2.0:compile
[INFO] |  |  \- org.springframework.osgi:spring-osgi-io:jar:1.2.0:compile
[INFO] |  +- javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO] |  |  +- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] |  |  \- javax.activation:activation:jar:1.1:compile
[INFO] |  \- com.sun.xml.bind:jaxb-impl:jar:2.1.12:compile
[INFO] +- org.apache.camel:camel-jms:jar:2.2-SNAPSHOT:compile
[INFO] |  \- org.apache.geronimo.specs:geronimo-jms_1.1_spec:jar:1.1.1:compile
[INFO] +- org.apache.activemq:activemq-core:jar:5.3.0:test
[INFO] |  +- org.apache.activemq:activeio-core:jar:3.1.2:test
[INFO] |  |  \- org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec:jar:1.0.1:test
[INFO] |  +- org.apache.activemq:kahadb:jar:5.3.0:test
[INFO] |  +- org.apache.activemq.protobuf:activemq-protobuf:jar:1.0:test
[INFO] |  +- org.apache.geronimo.specs:geronimo-j2ee-management_1.0_spec:jar:1.1:test (version managed from 1.0)
[INFO] |  \- commons-net:commons-net:jar:2.0:test
[INFO] +- org.apache.felix:org.osgi.core:jar:1.2.0:compile
[INFO] +- log4j:log4j:jar:1.2.14:compile
[INFO] \- junit:junit:jar:4.4:test (scope not updated to compile)
[INFO] ------------------------------------------------------------------------",njiang:1262843814:2010-01-07T13:56:54.408+0000:1262843814:2010-01-07T13:56:54.408+0000:http://svn.apache.org/viewvc?rev=896877&view=rev
0,CAMEL-2341,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-07 08:35:30+00:00,2010-11-03 05:13:09+00:00,"For example on RH 5.2 64bit JDK 1.6



Compilation failure 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[25,34] package com.sun.xml.bind.marshaller does not exist 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,12] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 
/x1/TeamCity/buildAgent/work/1ad9cee4e4314563/camel-fuse-trunk/components/camel-web/src/main/java/org/apache/camel/web/util/JAXBMarshallerResolver.java:[42,56] cannot find symbol 
symbol : class NamespacePrefixMapper 
location: class org.apache.camel.web.util.JAXBMarshallerResolver 




I assume AIX, HP-UX and others do have this issue as well.


James maybe we need to revert that change you made?","davsclaus:1262828925:2010-01-07T09:48:45.486+0000:1262828925:2010-01-07T09:48:45.486+0000:Author: jstrachan
Date: Thu Dec 17 14:50:48 2009
New Revision: 891737

URL: http://svn.apache.org/viewvc?rev=891737&view=rev
Log:
fix for CAMEL-2301 to switch to jackson for JSON marshalling

Added:
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyReader
   camel/trunk/components/camel-web/src/main/resources/META-INF/services/javax.ws.rs.ext.MessageBodyWriter
Modified:
   camel/trunk/components/camel-web/pom.xml
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/CamelContextResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/Constants.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/EndpointsResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RouteResource.java
   camel/trunk/components/camel-web/src/main/java/org/apache/camel/web/resources/RoutesResource.java
davsclaus:1262908844:2010-01-08T08:00:44.941+0000:1262908844:2010-01-08T08:00:44.941+0000:Reverting fix
{code}
davsclaus:(svn)camel[trunk:897121]/components/camel-web$ svn merge -c -891737 .
--- Reverse-merging r891737 into '.':
U    src/main/java/org/apache/camel/web/resources/RouteResource.java
U    src/main/java/org/apache/camel/web/resources/RoutesResource.java
U    src/main/java/org/apache/camel/web/resources/EndpointsResource.java
U    src/main/java/org/apache/camel/web/resources/Constants.java
U    src/main/java/org/apache/camel/web/resources/CamelContextResource.java
D    src/main/resources/META-INF/services
U    pom.xml
{code}

trunk: 897126."
0,CAMEL-2340,Improvement,Major,2.1.0,,"
None
",Closed,Not A Problem,None,Unassigned,Fernando Ribeiro,0,0,2010-01-06 18:40:32+00:00,2010-02-07 09:58:28+00:00,"Although both are based on Saxon, the XSLT and XQuery components should have different lifecycles, like their specs.


No change to the XSLT component should impact the users of the XQuery component.","hadrian:1262774841:2010-01-06T18:47:21.947+0000:1262774841:2010-01-06T18:47:21.947+0000:Agree in principle.  Care to submit a patch?
Thanks for making the point.
davsclaus:1262835134:2010-01-07T11:32:14.474+0000:1262835134:2010-01-07T11:32:14.474+0000:Can you elaborate a bit more what you think is a problem?
fribeiro:1263053243:2010-01-10T00:07:23.533+0000:1263053312:2010-01-10T00:08:32.288+0000:I think XSLT and XQuery, being different technologies, should be separate components, even if both *currently* depend on Saxon.

It came to me when a consultant tried to install ""camel-xquery"" instead of ""camel-saxon"" when I asked him to install ""the XQuery component"".

I don't care submitting the patch, will get to it ASAP.

Can I move forward here?
davsclaus:1263170118:2010-01-11T08:35:18.862+0000:1263170118:2010-01-11T08:35:18.862+0000:Renaming a component is not nice as people then need to upgrade their projects to include camel-xquery instead of camel-saxon.

The artifcatId is listed on the components overview so you can see its camel-saxon
http://camel.apache.org/components.html
davsclaus:1263170231:2010-01-11T08:37:11.134+0000:1263170231:2010-01-11T08:37:11.134+0000:The XSLT component is included in camel-spring and not using Saxon anyhow. Its using the XML stuff from the JDK itself.
So they are already splitted.

Its only that XQuery is in the camel-saxon component which could have had the name camel-xquery as a more friendly name.
But renaming a component is not something that is nice to do.
fribeiro:1263178416:2010-01-11T10:53:36.082+0000:1263178416:2010-01-11T10:53:36.082+0000:Again, I think XSLT should be a component of its own, and camel-saxon is not a name as good as camel-xquery, but can agree with your point at this time."
0,CAMEL-2339,Improvement,Minor,2.0.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Jörn Kottmann,0,0,2010-01-06 13:09:23+00:00,2010-11-03 05:13:08+00:00,"We have a camel route which uses the mail component
and polls from an IMAP mail server.


Through a deployment mistake the javax.activation.DataSource
class was not available and resulted in an
java.lang.NoClassDefFoundError Error which was swallowed
and not logged.
This resulted in a silent failure of the mail component.","joern:1262834065:2010-01-07T11:14:25.431+0000:1262834065:2010-01-07T11:14:25.431+0000:In the current trunk version 893138 the Runnable ScheduledPollConsumer is executed by a ScheduledExecutorService. In the case that an Error is thrown from the run method the ScheduledExecutorService stops executing the run method and the ScheduledPollConsumer silently stops polling without any notification.

Errors can usually not be handled, but they should be at least be printed to the console and logged.
davsclaus:1262834439:2010-01-07T11:20:39.896+0000:1262834439:2010-01-07T11:20:39.896+0000:There {{DefaultPollingConsumerPollStrategy}} will log at WARN with the ERROR in the {{rollback}} method.

{code}
    public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {
        log.warn(""Consumer "" + consumer +  "" could not poll endpoint: "" + endpoint.getEndpointUri() + "" caused by: "" + e.getMessage(), e);
        // we do not want to retry
        return false;
    }
{code}

So you should be able to see this WARN log somewhere
davsclaus:1262834811:2010-01-07T11:26:51.274+0000:1262834811:2010-01-07T11:26:51.274+0000:Ah its a java.lang.Error being thrown. Hmm those kind you should generally not try to handle and leave it to the JDK.

Its just the JDK that has a poor habit of not logging or somehow better report those FATAL errors.
joern:1262835519:2010-01-07T11:38:39.598+0000:1262835519:2010-01-07T11:38:39.598+0000:Don't you think it would make sense to log and re-throw it ? Otherwise its difficult to find out whats going wrong.
davsclaus:1262836220:2010-01-07T11:50:20.423+0000:1262836220:2010-01-07T11:50:20.423+0000:Yes I am fixing it now, running tests to ensure all is still okay.
davsclaus:1262837678:2010-01-07T12:14:38.220+0000:1262837678:2010-01-07T12:14:38.220+0000:trunk: 896858."
0,CAMEL-2338,Improvement,Trivial,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-06 11:26:59+00:00,2010-11-03 05:13:08+00:00,[2010-01-06 11:32:35.494] server-dm-7                       org.apache.camel.spring.CamelContextFactoryBean.unknown W Using a packages element to specify packages to search has been deprecated. Please use a packageScan element instead.,davsclaus:1262748924:2010-01-06T11:35:24.156+0000:1262748924:2010-01-06T11:35:24.156+0000:trunk: 896400.
0,CAMEL-2337,Task,Major,2.2.0,None,"
None
",Closed,Fixed,2.5.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2010-01-05 18:14:22+00:00,2011-04-24 09:57:40+00:00,The apache 7 pom is out with a few new goodies.  We need to upgrade our poms to use apache 7.,"davsclaus:1264619929:2010-01-28T03:18:49.858+0000:1264619929:2010-01-28T03:18:49.858+0000:Messing with maven poms just before a release is to risky. Moving this to the future when you got good time to work on this.
davsclaus:1303610260:2011-04-24T09:57:40.041+0000:1303610260:2011-04-24T09:57:40.041+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2336,Bug,Critical,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-05 16:07:11+00:00,2010-11-03 05:13:08+00:00,"The JAXB creates the Spring DSL model in a bit wacky way so we need to work on it a bit before Camel can create the runtime routes.


In some cases some of the cross functions such as onCompletion, onException could potentially vanish. 
The problem is really that we should have divided the route into a upper / lower section where upper is the cross functions and the lower the actual route.","davsclaus:1262690561:2010-01-05T19:22:41.868+0000:1262690561:2010-01-05T19:22:41.868+0000:trunk: 896185.

This bug was only when using <transacted/> that you could potentially loose route scoped <onException> or <onCompletion>. The Java DSL does not have this bug.
davsclaus:1262739422:2010-01-06T08:57:02.402+0000:1262739422:2010-01-06T08:57:02.402+0000:trunk: 896355."
0,CAMEL-2335,Improvement,Minor,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-05 14:18:38+00:00,2010-11-03 05:13:07+00:00,"Even though people can use the ref component, but that is hardly technique.


So you can do using serviceRef to refer to the endpoint



        <!-- create a proxy that will route to the direct:start endpoint when invoked -->
        <proxy id=""myProxySender""
               serviceInterface=""org.apache.camel.spring.config.MyProxySender""
               serviceRef=""cool""/>

        <!-- define the endpoint we want to proxy -->
        <endpoint id=""cool"" uri=""direct:start""/>",davsclaus:1262674250:2010-01-05T14:50:50.721+0000:1262674250:2010-01-05T14:50:50.721+0000:trunk: 896071.
0,CAMEL-2334,Improvement,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2010-01-05 10:33:49+00:00,2010-11-03 05:13:07+00:00,"See nabble
http://old.nabble.com/ResolveEndpointFailedException-with-a-file-endpoint-ts27024218.html


Generally we should thrown ResolveEndpointFailedException if the endpoint uri ends with a & marker",davsclaus:1262663951:2010-01-05T11:59:11.243+0000:1262663951:2010-01-05T11:59:11.243+0000:trunk: 896014.
0,CAMEL-2333,Sub-task,Minor,None,None,"
None
",Closed,Fixed,2.3.0,Ashwin J. Karpe,Claus Ibsen,0,1,2010-01-05 07:08:28+00:00,2011-04-24 10:00:58+00:00,"lucene-core.jar is not a bundle packaging so we may need to wrap or whatever and add it to the SMX repo
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/","akarpe:1265693516:2010-02-09T13:31:56.129+0000:1265693516:2010-02-09T13:31:56.129+0000:Hi Claus, Hadrian and Jon,

I have created a patch that resolves this issue and have created a the bundle packaging for the Lucene 3.0.0 jar. Please find the same attached as lucene-bundle-jar.patch. I have also created a patch for the karaf features file under camel/packaging and am attaching it as lucene-feature-file.patch.

I have verified that the camel-lucene feature installs without issues in Servicemix 4.1.0.2

Cheers,

Ashwin...
akarpe:1265693668:2010-02-09T13:34:28.084+0000:1265693668:2010-02-09T13:34:28.084+0000:The features zip file is the zip of the features directory under packaging/karaf
akarpe:1265693779:2010-02-09T13:36:19.739+0000:1265693779:2010-02-09T13:36:19.739+0000:The bundle zip file is the directory added to the servicemix bundles repository 
akarpe:1265698164:2010-02-09T14:49:24.381+0000:1265698164:2010-02-09T14:49:24.381+0000:This patch requires a fix to be applied in Servicemix for the lucene-bundle-jar.patch. I have created a separate JIRA issue for the same

https://issues.apache.org/activemq/browse/SMX4-475 
akarpe:1265830594:2010-02-11T03:36:34.558+0000:1265830594:2010-02-11T03:36:34.558+0000:Fixes applied to patform/karaf/features as commit version 908822

https://svn.apache.org/viewvc?view=revision&revision=908822
davsclaus:1303610458:2011-04-24T10:00:58.151+0000:1303610458:2011-04-24T10:00:58.151+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2332,Task,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Christian Müller,Claus Ibsen,0,0,2010-01-04 18:54:39+00:00,2011-04-24 09:58:14+00:00,"Jetty 7.0 is out and we should upgrade to use that as well.


We should do this in the same release we upgrade to HTTP Client 4.0 as well so we upgrade both kinds in the same release. CAMEL-1530.","cmoulliard:1262654291:2010-01-05T09:18:11.782+0000:1262654291:2010-01-05T09:18:11.782+0000:Questions : 

1) Package names : As package names have changed between Jetty 6 (org.mortbay) and Jetty 7 (org.eclipse), what do you plan to do with camel-jetty component ? Having a component supporting both or migrating to 7 ?

2) MANIFEST file & PAX Web : PAX Web bundle supports only Jetty 6 and imports org.mortbay classes with version 6. Are you synchronised camel-jetty release with next PAX-web bundle supporting jetty 6 and jetty 7 ?
muellerc:1267365515:2010-02-28T21:58:35.959+0000:1267365515:2010-02-28T21:58:35.959+0000:The last version of jetty-cometd is still 6.1.11. It's ok to upgrade jetty to 7.0.1 and leave jetty-cometd on 6.1.11?
davsclaus:1267412182:2010-03-01T10:56:22.614+0000:1267412182:2010-03-01T10:56:22.614+0000:Maybe they are no longer working on cometd? Maybe google a bit to see if there is any info from the Jetty people why?
muellerc:1267521206:2010-03-02T17:13:26.262+0000:1267521206:2010-03-02T17:13:26.262+0000:The new home for cometd is http://cometd.org. There are two related issues: [CAMEL-2513|https://issues.apache.org/activemq/browse/CAMEL-2513] and [SMX4-495|https://issues.apache.org/activemq/browse/SMX4-495].

The last version of [cometd-server|http://mvnrepository.com/artifact/org.mortbay.jetty/cometd-server] is 6.1.22. There is no 7.x version (nether [org.mortbay.jetty|http://mvnrepository.com/artifact/org.mortbay.jetty] nor [org.eclipse.jetty|http://mvnrepository.com/artifact/org.eclipse.jetty]).
muellerc:1267534913:2010-03-02T21:01:53.102+0000:1267534913:2010-03-02T21:01:53.102+0000:[Porting_to_Jetty_7|http://wiki.eclipse.org/Jetty/Starting/Porting_to_Jetty_7/Packages_and_Classes] is a good help
muellerc:1267537021:2010-03-02T21:37:01.433+0000:1267537021:2010-03-02T21:37:01.433+0000:cometd 1.0.1 is build with jetty 7.0.1.v20091125 [pom.xml|http://svn.cometd.org/tags/1.0.1/pom.xml]. We need a jetty cometd bundle for 7.0.1.v20091125. I opened a issue for the new bundle at SMX4 [SMX4-498|https://issues.apache.org/activemq/browse/SMX4-498].
muellerc:1267930805:2010-03-07T11:00:05.465+0000:1267930805:2010-03-07T11:00:05.465+0000:I made some progress on this issue. I upgraded camel-jetty and all camel-jetty tests. Now, I work on camel-cometd, which also use jetty.
I think I can provide the patch next week...
muellerc:1268140578:2010-03-09T21:16:18.589+0000:1268140578:2010-03-09T21:16:18.589+0000:Provide the patch to upgrade to jetty 7. I made the following changes:

camel-jetty:
   - upgraded to jetty 7
   - customized a few lines of code 
   - HttpRouteUsingUrlPostTest.javaremoved HttpRouteUsingUrlPostTest.java because it provides no tests

camel-cometd:
   - upgrade to jetty 7
   - switched from cometd-server to cometd-java-server
   - customized a few lines of code 

camel-web:
   - upgrade to jetty 7
   - switched dependency from jsp-2.1 to jsp-2.1-glassfish
   - customized a few lines of code 

camel-web-standalone:
   - upgrade to jetty 7

camel-cxf:
   - removed the dependency to jetty

camel-example:
   - upgrade to jetty 7

karaf feature.xml:
   - switched from org.apache.servicemix.bundles.jetty-bundle to some jetty 7 bundles
   - switched from org.apache.servicemix.bundles.jetty-cometd to org.apache.servicemix.bundles.cometd-java-server [SMX4-498|https://issues.apache.org/activemq/browse/SMX4-498]

I run a ""mvn -Psourcecheck clean install"" to ensure, that the code follows the rules. I also run a ""mvn clean install -Pvalidate"" in platform/karaf to ensure, that the feature file is correct.

I somebody applies the patch, I will go through the wiki page and update it (system properties for ssl support, ...).

Thanks,
Christian
hadrian:1268143519:2010-03-09T22:05:19.505+0000:1268143519:2010-03-09T22:05:19.505+0000:@Christian, excellent work. I am testing your patch and will apply when done, probably a couple of hours.

The only thing I am not sure about is the HttpRouteUsingUrlPostTest. I would rather fix it. Since its parent HttpRouteTest works it's kinda obvious that the conflicts are with the ports used by own test battery. One idea is to make the port configurable and have different descendants use different ports.


njiang:1268152618:2010-03-10T00:36:58.040+0000:1268152618:2010-03-10T00:36:58.040+0000:@Christian,
I just have a quick question for the Jetty 7, is it a OSGi bundle?
BTW, if we applied this patch in camel, we also need to upgrade the Jetty version in the SMX . AFIK, it will affect the PAX-Web which is also using Jetty.
Can you do some home work to check if the PAX-Web upgrading  can move smoothly ?

hadrian:1268159027:2010-03-10T02:23:47.145+0000:1268159027:2010-03-10T02:23:47.145+0000:trunk: r921210
njiang:1268160203:2010-03-10T02:43:23.762+0000:1268160203:2010-03-10T02:43:23.762+0000:@Hadrain,
I checked the PAX-Web doesn't use the Jetty7 now, so we may have trouble to deploy the camel components into  apache SMX with Jetty7.
I'm afraid you have to revert this change.
muellerc:1268177689:2010-03-10T07:34:49.227+0000:1268177689:2010-03-10T07:34:49.227+0000:Hello Willem,
yes, jetty 7 comes as several osgi bundles.
I will upgrade jetty in SXM4 to jetty 7 and check, if it works. What do you recommend, how I should test this? Only running the unit tests?
I also opened a issue to upgrade PAX-Web to Jetty 7 [PAXWEB-198|http://issues.ops4j.org/browse/PAXWEB-198].
hadrian:1268199406:2010-03-10T13:36:46.599+0000:1268199406:2010-03-10T13:36:46.599+0000:@Willem, let's see if we can upgrade smx to jetty7 and if not I will revert the change.

@Christian, yes, unit tests passing is a good start.
njiang:1268246537:2010-03-11T02:42:17.983+0000:1268246537:2010-03-11T02:42:17.983+0000:@Christian, @Hadrian.
Thanks for the updates, as the Jetty7 already changed its namespace, it's unlikely we will hit the issue of common pool CAMEL-2514 ( this two version of bundle mass up with each other with the wrong OSGi imports package) .
So I'm OK for this patch, as the Jetty7 and Jetty6 can live peacefully in SMX. 
muellerc:1268318187:2010-03-11T22:36:27.053+0000:1268318187:2010-03-11T22:36:27.053+0000:I update the wiki page
davsclaus:1268355313:2010-03-12T08:55:13.300+0000:1268355313:2010-03-12T08:55:13.300+0000:Is there more work to be done? Is the upgrade complete?
muellerc:1268355885:2010-03-12T09:04:45.615+0000:1268355885:2010-03-12T09:04:45.615+0000:I think the upgrade is complete and should not be in conflict with Jetty 6 in SMX4 as Willem wrote.

But anyway, I will also provide a patch to upgrade SMX4 to jetty 7. I don't know, how this upgrade will be related to PAX-Web (MUST also be updated, SHOULD be updated or it is totally independent). I think it will be independent, but I'm not sure...
njiang:1268360329:2010-03-12T10:18:49.592+0000:1268360329:2010-03-12T10:18:49.592+0000:@Claus, Christian,
I think we can close this issue now, as this issue doesn't dependent on the SMX4 one.
njiang:1268407093:2010-03-12T23:18:13.058+0000:1268407093:2010-03-12T23:18:13.058+0000:Just a quick note for Jetty7 upgrading, as CXF bundle didn't upgrade to Jetty7, we still need to import the Jetty 6.x bundle in camel-cxf feature.
I will take care of it and running some test on the last camel features with ServiceMix.

davsclaus:1268777631:2010-03-17T06:13:51.775+0000:1268777631:2010-03-17T06:13:51.775+0000:Willem have you tested CXF on SMX? Are there more work on this upgrade? 
cmoulliard:1268784967:2010-03-17T08:16:07.453+0000:1268784967:2010-03-17T08:16:07.453+0000:Hi,

I have tested successfully Jetty 7 on SMX4 using the following osgi bundles in a small project using camel-cometd (2.3-SNAPSHOT).

karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-server/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-http/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-io/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-util/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-continuation/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-servlet/7.0.1.v20091125
karaf@root> osgi:install -s mvn:org.eclipse.jetty/jetty-security/7.0.1.v20091125

+ following bundles for camel-cometd

osgi:install -s wrap:mvn:org.cometd.java/cometd-api/1.0.1
osgi:install -s wrap:mvn:org.cometd.java/cometd-java-server/1.0.1

Remark : As stated previously, PAX Web is not impacted to use Jetty 7 instead of Jetty 6 while we are not using by example a fragment bundle containing jetty.xml config file. The reason concerns package renaming (org.mortbay --> org.eclipse). More tests should be done to verify that we don't have problem with servlet registration, ... 
njiang:1268785088:2010-03-17T08:18:08.190+0000:1268785088:2010-03-17T08:18:08.190+0000:I just tried the apache camel-feature with camel-cxf-example on servicemix, everything looks good. 
muellerc:1268786492:2010-03-17T08:41:32.611+0000:1268786492:2010-03-17T08:41:32.611+0000:@Willem: You wrote ""Just a quick note for Jetty7 upgrading, as CXF bundle didn't upgrade to Jetty7, we still need to import the Jetty 6.x bundle in camel-cxf feature"". This means I forgot something to upgrade or camel-cxf MUST be used with Jetty 6? If I forgot something, I will do the necessary work that all camel components using Jetty 7.
njiang:1268788257:2010-03-17T09:10:57.579+0000:1268788257:2010-03-17T09:10:57.579+0000:@Christian,
Your test case may not use the camel-cxf component.
Can you check out the latest apache camel feature.xml ? 
It has enough information to tell the OSGI container to load the bundle for camel running :)
muellerc:1268922499:2010-03-18T22:28:19.202+0000:1268922499:2010-03-18T22:28:19.202+0000:I realized, that you changed the dependency from Jetty 7 back to Jetty 6 for camel-cxf.

{code}
commit b0a8ddc008ab3b48544c21094fd9de38ba0d3700
Author: Willem Ning Jiang <ningjiang@apache.org>
Date:   Sat Mar 13 03:50:55 2010 +0000

    CAMEL-2332 camel-cxf still need to use Jetty6 bundle
    
    git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@922478 13f79535-47bb-0310-9956-ffa450edef68
{code}

Is there a unit test with which I could test this? How do you find out this dependency? I would like to improve my knowledge to provide better patches in the feature... :-)
Thanks for your help.
njiang:1268934797:2010-03-19T01:53:17.316+0000:1268934797:2010-03-19T01:53:17.316+0000:And It's not easy to run the unit test of OSGi without helping of PAX-Exame.
There are some internal system tests in Fuse build farm can catch these error, but I'm afraid it can run for you.
I will adding the OSGi unit tests in tests/camel-itest-osgi , so you can run the tests to check if the things works for you.
BTW camel-itest-osgi is disable by default as the CI can't run it smoothly,  if you want to run it , you just need to cd into that directory, and type ""mvn clean install"". 



njiang:1269391517:2010-03-24T08:45:17.190+0000:1269391517:2010-03-24T08:45:17.190+0000:I think we can resolved this issue now.
davsclaus:1303610294:2011-04-24T09:58:14.805+0000:1303610294:2011-04-24T09:58:14.805+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2331,New Feature,Major,None,None,"
None
",Resolved,Abandoned,Future,Unassigned,S. Ali Tokmen,3,9,2010-01-04 15:57:39+00:00,2017-02-21 20:45:57+00:00,"In the past, there had been plans for the camel-ftp to support WebDAV. This is not the case now.


It would be great for Camel to have a WebDAV component, that could be as easy to use as a File or FTP component, as a consumer or a producer.","davsclaus:1262646153:2010-01-05T07:02:33.166+0000:1262646153:2010-01-05T07:02:33.166+0000:Maybe this project is what we could use? A lightweight one for file transfering


http://code.google.com/p/sardine/
alitokmen:1262651507:2010-01-05T08:31:47.504+0000:1262651507:2010-01-05T08:31:47.504+0000:Sardine, created the 22nd of December 2009, is an extremely simple client.

I've opened the first issue, http://code.google.com/p/sardine/issues/detail?id=1 that asks Mavenization.
davsclaus:1262652529:2010-01-05T08:48:49.282+0000:1262652529:2010-01-05T08:48:49.282+0000:Jon Stevens, the Sardine author posted a blot post about it.
http://lookfirst.com/2010/01/sardine-very-partial-webdav-client-for.html

I have commented whether he will be interested to help out somehow.
latchkey:1262685825:2010-01-05T18:03:45.833+0000:1262685825:2010-01-05T18:03:45.833+0000:Hi guys, as I said on the homepage for sardine, if there are features you would like to see, contribute some patches or feel free to open issues. I'm an ASF member and sardine is under an ASF license, so you are more than welcome to include it in Camel. I just want to be clear that sardine is not intended to be a full blow webdav client. The protocol is too complicated and I really just want a tool that provides an api to specific use cases.

@Savas: Sorry, I'm pretty hardfast in my absolute hatred towards that piece of dog crap called maven, so don't expect to see that one anytime soon. Oh yea, right before my sardine blog post, I just made another blog posting about it: http://lookfirst.com/2010/01/which-build-tool-to-use.html

jon

hadrian:1262687822:2010-01-05T18:37:02.761+0000:1262687822:2010-01-05T18:37:02.761+0000:Jon, I beg do differ, but you are entitled to your opinion like I am entitled to mine. I really don't see how we could manage the build system with ant for camel. But I do see how ant would work very well, easier than camel for a small project. I also agree with most your other points, however you don't need more network connectivity with maven then you need with ant. While maven has its more or less potential problems (like the nasty one revealed by sun moving its mave1 repos) it works quite well in practice.

That said, sardine does not have to use maven for us to be able to use it, but it must use an ASF approved license, which it does. A camel-dav would have to be built with maven to integrate with camel, but we can take care of that part if somebody could contribute working code and tests using sardine. I personally won't have the bandwidth to tackle this challenge in the foreseeable future, but contributions are welcome. There are other specs based on WebDAV, such as CalDAV, and I would love to see camel access shared calendars for instance.
alitokmen:1262736608:2010-01-06T08:10:08.240+0000:1262736608:2010-01-06T08:10:08.240+0000:@Jon: No problems. I'm don't have any tool preference, ANT projects are just fine. On the other hand, do you mind if your binaries are (manually) deployed on a Maven2 repository?

--

Apart from that, r25 of the project fixes many issues. Thanks Jon for accepting my patches; currently Sardine can LIST, PUT and GET

I think for the creation of a Camel endpoint, that looks like the FTP endpoint, we'd also need to implement MOVE and MKDIR (MKCOL in WebDAV language)

--

In our build environment, we have a whole stack that test WebDAV with Sardine. It uses the OW2 JOnAS application server, a WAR application for deploying a WebDAV resource and finally Maven for connecting to it and PUT, GET and DELETE files.

--

I might have time this week to port these on the OW2 forge (open source).
latchkey:1262817500:2010-01-07T06:38:20.455+0000:1262817500:2010-01-07T06:38:20.455+0000:I just added COPY as well.
davsclaus:1262823641:2010-01-07T08:20:41.870+0000:1262823641:2010-01-07T08:20:41.870+0000:Cool great that this is now in motion.

At the Camel site I suggest to take a look at how we did the FTP component on top of the Generic File component from camel-core.
Basically most work is in creating a WebDavOperations class.
davsclaus:1286752310:2010-10-11T07:11:50.467+0000:1286752310:2010-10-11T07:11:50.467+0000:Async http client has WebDAV support
http://github.com/ning/async-http-client
davsclaus:1309318157:2011-06-29T11:29:17.475+0000:1309318157:2011-06-29T11:29:17.475+0000:There is a camel-ahc component now in 2.8. We could maybe look into what it takes to add webdav on top of that using the file component from camel-core (if possible)
giwi:1353466322:2012-11-21T10:52:02.228+0000:1353466424:2012-11-21T10:53:44.855+0000:Hi all, I just begin to work on that component based on Sardine and inspired by camel-ftp. You can follow my code here : https://github.com/BreizhBeans/camel-dav . All advice and help are welcome.
moxximus:1363262179:2013-03-14T19:56:19.890+0000:1363262179:2013-03-14T19:56:19.890+0000:Xavier, it looks like you've been busy! How close would you say you are to completion?

I need this component for a project at work. I was going to implement it if it didn't exist but since you have made such progress, I'd like to team up if you are amenable.
giwi:1363263102:2013-03-14T20:11:42.098+0000:1363263102:2013-03-14T20:11:42.098+0000:Hi Matt, I reached about 70% of the way. I'm happy to see that someone cares about my job :)
Any help is welcome. Of course you can contribute on my Github. Tomorrow I'll try to pass more junit tests. I haven't tried anything on Windows yet.
Best regards.
moxximus:1363325445:2013-03-15T13:30:45.931+0000:1363325652:2013-03-15T13:34:12.863+0000:Could I get you to open up issues for anything you know isn't working on GitHub? This way I can dive right in.

EDIT: By the way, I read French well enough to understand your closed tickets, so feel free to keep writing them that way.
giwi:1363325915:2013-03-15T13:38:35.273+0000:1363325915:2013-03-15T13:38:35.273+0000:Ok Matt, you can open issues on github :)
giwi:1365139184:2013-04-05T13:19:44.989+0000:1365139184:2013-04-05T13:19:44.989+0000:Hi all, here is the very first release : http://giwi.free.fr/docs/camel-dav/
Enjoy!
davsclaus:1369530248:2013-05-26T09:04:08.415+0000:1369530248:2013-05-26T09:04:08.415+0000:Xavier, sounds cool. Keep coding. And when you think your code is ready, then let us know. Would be great with camel-dav out of the box.
giwi:1369645716:2013-05-27T17:08:36.716+0000:1369645716:2013-05-27T17:08:36.716+0000:Hi Claus, according to me, the code of the camel-dav is ready. Best rgds.
splazit:1386598420:2013-12-09T22:13:40.305+0000:1386598558:2013-12-09T22:15:58.416+0000:[~giwi]: Thanks for your hard work
[~cibsen@e-ma.net]: will this be integrated with camel main stream?
borutb:1386626402:2013-12-10T06:00:02.306+0000:1386626402:2013-12-10T06:00:02.306+0000:Hi, thanks for your hard work also from me. I am also interested to know if this web dav component will make it into the main release?
davsclaus:1386635243:2013-12-10T08:27:23.361+0000:1386635243:2013-12-10T08:27:23.361+0000:For any code contributions to ASF, the author of the code must submit it to ASF such as attaching a .zip to this JIRA ticket. Or from github do a pull request.


giwi:1386639198:2013-12-10T09:33:18.291+0000:1386639198:2013-12-10T09:33:18.291+0000:Thanks for your support. I've started to work on a GitHub pull request, but, due to lack of time, I gave up. I'll try again next year. Feel free to do it with my code :).
davsclaus:1436625322:2015-07-11T22:35:22.231+0000:1436625322:2015-07-11T22:35:22.231+0000:Is anyone interrested in webdav and if so willing to work on this? I dont see the need as much anynore, and consider to close this ticket
onders:1487676234:2017-02-21T19:23:54.567+0000:1487676234:2017-02-21T19:23:54.567+0000:webdav seems to be very inactive. and somehow the component expected to be release did not come out. i propose closing the ticket
davsclaus:1487676623:2017-02-21T19:30:23.815+0000:1487676623:2017-02-21T19:30:23.815+0000:Yeah lets close this
onders:1487676626:2017-02-21T19:30:26.879+0000:1487676626:2017-02-21T19:30:26.879+0000:at least i can see the inactivity on http://www.webdav.org/ as last edited ''Last modified: Apr 21 2010""
and there seems to an experimental project on https://github.com/Giwi/camel-dav which is inactive as well and if anyone interested may try to make the component mature and do PR again maybe in future. at least for now, i believe we can close the ticket
giwi:1487681157:2017-02-21T20:45:57.963+0000:1487681157:2017-02-21T20:45:57.963+0000:Hi all, I'm really sad and sorry. I've a huge lack of time for years :/ You can close the ticket, I'll try a PR some day. 
Thanks you all. 
Best regards."
0,CAMEL-2330,Improvement,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,1,2010-01-04 09:28:45+00:00,2010-11-03 05:13:07+00:00,"Here is the mail thread[1] which discusses about it.
[1] http://old.nabble.com/JAXB-marshaller---control-characters-td26978215.html","njiang:1262824981:2010-01-07T08:43:01.434+0000:1262824981:2010-01-07T08:43:01.434+0000:trunk
http://svn.apache.org/viewvc?rev=895993&view=rev
pagrus:1262913473:2010-01-08T09:17:53.129+0000:1262913473:2010-01-08T09:17:53.129+0000:Patch with test that indicates a few issues with JaxbFilterReader. No need to merge, as it does not provide solution, only highlights problem.
njiang:1263018803:2010-01-09T14:33:23.637+0000:1263018803:2010-01-09T14:33:23.637+0000:@ Pavel,
I just committed your patch for this issue,
The highlight of Pavel's patch
* Marshalling uses custom XmlStreamWriter, while unmarshalling relies on the same, non-xml reader. I realized that wrapping XmlStreamReader does not solve the problem, as wrapper has no power to prevent underlying reader from reading bad chars and failing therefore.

* Filtering has changed slightly - it replaces bad chars with space chars. This a) allows to get rid of intemediate buffer and simplify the code and b) is consistent with the way e.g. Woodstox performs similar filtering.

* It is exchange property or data format property that turns filtering on/off.

* NonXmlCharFilterer performs logging of the replacement fact in case of char[]; and more readable message in case of String.
  
Here are the highlight of my changes
* Fixed the issue of patch that can't build with JDK 1.5.0, comment out the NonXmlCharFiltererTest.testFilter1ArgFiltered(), also add the stax implementation dependency in the camel-jaxb

* You just check the Exchange property in JaxbDataFormat marshal(), and   check the filterNonXmlChars in JaxbDataFormat unmarshal method.
   My change is let the exchange property override the configure of JaxbDataFormat that is same with other Camel components do.

* When unmarshaling the InputStream, you need to get the CharsetEncoding from Exchange like this
   {code}
    answer = unmarshaller.unmarshal(new NonXmlFilterReader(new InputStreamReader(stream, IOConvertor(getCharsetName(exchange)))); 
   {code}

* Finish the filtering option for JAXB data format via spring DSL . 
pagrus:1263819110:2010-01-18T20:51:50.019+0000:1263819110:2010-01-18T20:51:50.019+0000:Attaching another patch with 3 changes

* Mock tests converted to mockito.

* Recovered NonXmlCharFiltererTest.testFilter1ArgFiltered() and verified under JDK 1.5

* Added missing test for JaxbDataFormat.unmarshal()

======================
I also suggest to document required StAX dependencies at http://camel.apache.org/jaxb.html, ""Ignoring the NonXML Character"" section.

| || JDK 1.5 || JDK 1.6+ ||
|| Filtering in use | StAX API and implementation | No |
|| Filtering not in use | StAX API only | No |

This feature has been tested with Woodstox 3.2.9 and Sun JDK 1.6 StAX implementation.

======================
njiang:1263839220:2010-01-19T02:27:00.999+0000:1263839220:2010-01-19T02:27:00.999+0000:
Applied patch with thanks to Pavel, also update the wiki page.

After reviewed the patch, I found mockito is much easy to use :)"
0,CAMEL-2329,Improvement,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2010-01-04 07:25:57+00:00,2010-11-03 05:13:07+00:00,"Currently even with a simple route like this:



from(""jetty:http://localhost:8080/blah"")
            .setBody(simple(""<html><head><title>Hello World!</title></head><body>Hello World!</body></html>""))
            .setHeader(""Content-Type"").constant(""text/html"");




we'll return a response with chunked transfer encoding. This is fine, however there doesn't appear to be an easy way to disable chunked encoding which can be necessary to support legacy clients that do not support HTTP 1.1 properly. Ideally we should add an option for camel-jetty to support turning off chunked encoding, in which case we would revert to using the Content-Length header, this would also effectively disable HTTP streaming.","njiang:1262561910:2010-01-04T07:38:30.033+0000:1262561910:2010-01-04T07:38:30.033+0000:trunk
http://svn.apache.org/viewvc?rev=895572&view=rev
Also updated wiki page of camel-jetty."
0,CAMEL-2298,Task,Major,None,None,"
None
",Resolved,Later,Future,Unassigned,James Strachan,0,1,2009-12-16 17:08:34+00:00,2013-05-26 09:02:08+00:00,"This site has lots of useful patterns on it...


http://www.soapatterns.org/


it would be nice to start documenting them on the wiki somewhere to show which ones are already implemented & how to do them in Camel - as well as highlighting areas where Camel can be improved","jstrachan:1260955083:2009-12-16T17:18:03.772+0000:1260955083:2009-12-16T17:18:03.772+0000:I've started a wiki page here...

http://cwiki.apache.org/confluence/display/CAMEL/SOA+Patterns
davsclaus:1261087651:2009-12-18T06:07:31.745+0000:1261087651:2009-12-18T06:07:31.745+0000:Damn even more patterns :) I guess its a newer ending story :)

davsclaus:1369530128:2013-05-26T09:02:08.892+0000:1369530128:2013-05-26T09:02:08.892+0000:Closing old tickets which has no activity"
0,CAMEL-2297,Improvement,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-16 14:09:55+00:00,2010-11-03 05:13:00+00:00,"It took me about half an hour to trace the mvn camel:run issue of CAMEL-2286, so it's better to add a checking point in MainSupport to make sure the camel:run plugin loads a right spring context which has the camel context.","njiang:1260944649:2009-12-16T14:24:09.391+0000:1260944649:2009-12-16T14:24:09.391+0000:trunk
http://svn.apache.org/viewvc?rev=891243&view=rev"
0,CAMEL-2296,Improvement,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-16 12:36:52+00:00,2010-11-03 05:13:00+00:00,"Currently only the DeadLetterChannel logs an ERROR line when it moves a message to it.


The DefaultErrorHandler should do the same, its only logging a single line, and its not noisy as stracktrace is disabled to be logged by default.
End users can just set logging level to OFF for exhausted if they want this turned off.",davsclaus:1260945866:2009-12-16T14:44:26.085+0000:1260945866:2009-12-16T14:44:26.085+0000:trunk: 891253.
0,CAMEL-2295,Improvement,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-16 12:34:30+00:00,2010-11-03 05:12:59+00:00,"This will output better exceptions in the logs when using the default exception handler which just logs it.


The ExceptionHandler is used in consumers (polling, event driven) which cant send the exception back to a client and thus must handle it somehow
and best shot is to log it, but you can plugin your own handler if you like",davsclaus:1260945849:2009-12-16T14:44:09.314+0000:1260945849:2009-12-16T14:44:09.314+0000:trunk: 891253.
0,CAMEL-2294,Bug,Major,2.1.0,,"
None
",Closed,Fixed,None,Unassigned,Moulliard Charles,0,0,2009-12-16 10:22:34+00:00,2010-02-07 09:58:28+00:00,"When deploying a camel route containing camel-jetty endpoints, then the web management console of karaf cannot be accessed anymore through its url --> http://localhost:8080/webconsole/admin


All the traffic is redirect to the camel-jetty endpoints created  :


ex :


	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"" >


		<camel:route>
			<camel:from uri=""jetty:http://localhost:8080?matchOnUriPrefix=true""/>
            <camel:loadBalance>
			    <camel:roundRobin/>
			    <camel:to uri=""http://localhost:8181?throwExceptionOnFailure=false&bridgeEndpoint=true""/> 
				<camel:to uri=""http://localhost:8282?throwExceptionOnFailure=false&bridgeEndpoint=true""/>
			</camel:loadBalance> 
		</camel:route>


		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>


		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>


		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>


	</camel:camelContext>","davsclaus:1260930609:2009-12-16T10:30:09.586+0000:1260930609:2009-12-16T10:30:09.586+0000:Then use other port numbers which do *not* clash with the admin console.
njiang:1260930676:2009-12-16T10:31:16.493+0000:1260930676:2009-12-16T10:31:16.493+0000:Hi Charles,
If you want to share the port between PaxWeb and camel route, you need to consider to use camel-servlet component.
If you want camel router to listen to the other port, you may consider to user camel-jetty component.

cmoulliard:1260933216:2009-12-16T11:13:36.489+0000:1260933216:2009-12-16T11:13:36.489+0000:workaround = use another port number"
0,CAMEL-2293,Improvement,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-16 08:42:23+00:00,2010-11-03 05:12:59+00:00,"As CAMEL-2286 issue shows , we need to avoid the side effects of using the SystemProperties.
For use who want to configure proxy from out side can consider to set the CamelContext properties like this
Java DSL :



 context.getProperties().put(""http.proxyHost"", ""172.168.18.9"");
 context.getProperties().put(""http.proxyPort"" ""8080"");




Spring XML



   <camelContext>
       <properties>
           <property key=""http.proxyHost"" value=""172.168.18.9""/>
           <property key=""http.proxyPort"" value=""8080""/>
      </properties>
   </camelContext>","davsclaus:1260926783:2009-12-16T09:26:23.414+0000:1260926783:2009-12-16T09:26:23.414+0000:Remember to write about this in the 2.2 release notes in Important changes to consider when upgrading
njiang:1260926793:2009-12-16T09:26:33.200+0000:1260926793:2009-12-16T09:26:33.200+0000:trunk
http://svn.apache.org/viewvc?rev=891163&view=rev

Also updated the wiki page for it."
0,CAMEL-2292,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Hadrian Zbarcea,1,0,2009-12-15 15:18:02+00:00,2010-11-03 05:12:58+00:00,"User reported over the #camel channel the following exception trying to send a message after the context was stopped and restarted


 ""Failed to create Producer for endpoint:"". Thats the exception I'm getting
Reason: java.util.concurrent.RejectedExecutionException



Exception in thread ""core"" org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[activemq://queue:request.lavaOrderProducer.powerTraderServer]. Reason: java.util.concurrent.RejectedExecutionException
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:179)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:161)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:160)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:98)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:97)
	at com.wjb.producer.lavaData.dispatcher.ServerRequestDispatcher.requestSymbolSectorArray(ServerRequestDispatcher.java:122)
	at com.wjb.producer.core.LavaDataManager.initialize(LavaDataManager.java:64)
	at com.wjb.producer.core.ProducerCore.run(ProducerCore.java:98)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.util.concurrent.RejectedExecutionException
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:1760)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:767)
	at java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:216)
	at java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:366)
	at org.apache.camel.util.DefaultTimeoutMap.schedulePoll(DefaultTimeoutMap.java:156)
	at org.apache.camel.util.DefaultTimeoutMap.<init>(DefaultTimeoutMap.java:52)
	at org.apache.camel.component.jms.requestor.Requestor.<init>(Requestor.java:68)
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:107)




The following unit tests seems to reproduce the problem:



ublic final class StartStopTest 
{
	private final GenericApplicationContext applicationContext = new GenericApplicationContext();
	private final int testCount = 3;
	
	@Test
	public void test() throws Exception 
	{		
		//Initialize
		final File propertiesFile = new File(Constants.RESOURCE_DIRECTORY_NAME, Constants.PROPERTIES_FILE_NAME);
		PropertyConfigurator.configure(propertiesFile.getPath());
		
		final File applicationContextFile = new File(Constants.RESOURCE_DIRECTORY_NAME, Constants.CONTEXT_FILE_NAME);	
		final Resource applicationContextResource = new FileSystemResource(applicationContextFile);
				
		final AbstractBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(this.applicationContext);
		
		beanDefinitionReader.loadBeanDefinitions(applicationContextResource);
		this.applicationContext.refresh();	
		
		//Begin Testing
		for (int i = 0; i < this.testCount; i++)
		{			
			this.startSendStop();
		    Thread.sleep(3000);
		}		
	}
	
	private void startSendStop() throws Exception
	{
		final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME);
		final ProducerTemplate producerTemplate;
		final Endpoint serverRequestQueue;
		
		springCamelContext.start();
		
		producerTemplate = springCamelContext.createProducerTemplate();
		serverRequestQueue = springCamelContext.getEndpoint(""serverRequestQueue"");
		
		final Exchange exchange = producerTemplate.send(serverRequestQueue, new Processor()
		{
			public void process(final Exchange exchange) throws Exception 
			{				
				exchange.setPattern(ExchangePattern.InOut);	
				exchange.getIn().setHeader(ServerJmsServices.REQUEST, ServerJmsServices.GET_SYMBOL_INFO);
				exchange.getIn().setBody("""");
			}			
		});
		final String responseString = (String)exchange.getOut().getBody();
		
		Assert.assertTrue(responseString.length() > 0);
		
		springCamelContext.stop();
	}
}


<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans"" 
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
        
    <!-- ActiveMQ component for Camel to use -->   
    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"" > 
        <property name=""connectionFactory""> 
            <bean class=""org.apache.activemq.ActiveMQConnectionFactory""> 
                <property name=""brokerURL"" value=""tcp://192.168.5.10:61616?daemon=true"" />
            </bean> 
        </property> 
    </bean> 
           
    <!-- Camel Context -->
    <camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"" autoStartup=""false"">   	
    	<camel:endpoint id=""serverRequestQueue""	uri=""activemq:queue:request.lavaOrderProducer.powerTraderServer"" />   	
    </camelContext>
</beans>","davsclaus:1260924849:2009-12-16T08:54:09.366+0000:1260924849:2009-12-16T08:54:09.366+0000:You need to stop the producer template as well as you are in charge of its lifecycle
{code}
producerTemplate.stop();
{code}
davsclaus:1260932092:2009-12-16T10:54:52.390+0000:1260932092:2009-12-16T10:54:52.390+0000:trunk: 891183.
eubinas:1261376420:2009-12-21T14:20:20.501+0000:1261376420:2009-12-21T14:20:20.501+0000:So I changed the startSendStop function to the following and I still get the same exception. Is the producerTemplate stopping correctly?

private void startSendStop() throws Exception
{		
	final SpringCamelContext springCamelContext = (SpringCamelContext)this.applicationContext.getBean(Constants.CAMEL_CONTEXT_NAME);
	final ProducerTemplate producerTemplate;
	final Endpoint serverRequestQueue;
		
	springCamelContext.start();
	
	producerTemplate = springCamelContext.createProducerTemplate();
	serverRequestQueue = springCamelContext.getEndpoint(""serverRequestQueue"");
		
	final Exchange exchange = producerTemplate.send(serverRequestQueue, new Processor()
	{
		public void process(final Exchange exchange) throws Exception 
		{				
			exchange.setPattern(ExchangePattern.InOut);	
			exchange.getIn().setHeader(ServerJmsServices.REQUEST, ServerJmsServices.GET_SYMBOL_INFO);
			exchange.getIn().setBody("""");
		}			
	});
	final String responseString = (String)exchange.getOut().getBody();
	
	Assert.assertTrue(responseString.length() > 0);
	
	producerTemplate.stop();
	springCamelContext.stop();
}
davsclaus:1261378655:2009-12-21T14:57:35.956+0000:1261378655:2009-12-21T14:57:35.956+0000:Try with latest code from trunk as there was a fix in shutting down ProducerTemplate which could affect your use-case
eubinas:1262023260:2009-12-29T02:01:00.126+0000:1262023260:2009-12-29T02:01:00.126+0000:Successfully passed the unit test. Thanks guys."
0,CAMEL-2291,Improvement,Minor,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Tracy J. Snell,0,0,2009-12-15 02:17:29+00:00,2010-11-03 05:12:58+00:00,"The IRC component needs to support channels with keys.


I have it working and as soon as I figure out how to write a test for it I'll submit the patch.","tjsnell:1260880608:2009-12-15T20:36:48.727+0000:1260880608:2009-12-15T20:36:48.727+0000:Changes to IrcConsumer, IrcProducer and IrcConfiguration as well as some rudimentary tests. Let me know if this is enough.
tjsnell:1260880651:2009-12-15T20:37:31.779+0000:1260880770:2009-12-15T20:39:30.749+0000:Should be good to go. Assuming my code meets the standards if not just tell me what to fix and I will.

If it's good to go I can update the wiki if someone gives me an account.

Check with Jeff Genender is you need a reference on me.
davsclaus:1260918936:2009-12-16T07:15:36.902+0000:1260918936:2009-12-16T07:15:36.902+0000:Tracy thanks for the patch.

To be able to edit wiki pages you need to sign a ICLA. See more here
http://camel.apache.org/how-do-i-edit-the-website.html

In the mean time you can e.g. write some documentation in a text file and attach to this JIRA with the ""grant ASF license"" ticket. Then we can use your documentation.
davsclaus:1260920176:2009-12-16T07:36:16.283+0000:1260920176:2009-12-16T07:36:16.283+0000:trunk: 891143.

Applied patch with thanks. I did polish the code a bit.

Tracy do you mind working on the documentation as well?
tjsnell:1260945274:2009-12-16T14:34:34.913+0000:1260945274:2009-12-16T14:34:34.913+0000:Here's some documentation. The first line should add fine in edit mode (but still needs formatting markup, wasn't sure which confluence tag you guys use).

ICLA on the way later today.
davsclaus:1260946385:2009-12-16T14:53:05.227+0000:1260946385:2009-12-16T14:53:05.227+0000:Thanks a lot Tracy

I have updated the wiki page
http://cwiki.apache.org/confluence/display/CAMEL/IRC

Does it look alright?"
0,CAMEL-2290,Improvement,Major,None,None,"
None
",Closed,Duplicate,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-12-15 02:03:59+00:00,2010-06-03 07:25:50+00:00,"Here is the mail thread which discusses about it.
http://old.nabble.com/start-stop-routes-programmatically-ts26781725.html#a26781725","njiang:1260816560:2009-12-15T02:49:20.891+0000:1260816560:2009-12-15T02:49:20.891+0000:This issue is resolved in [CAMEL-2109|https://issues.apache.org/activemq/browse/CAMEL-2109]
davsclaus:1275521150:2010-06-03T07:25:50.693+0000:1275521150:2010-06-03T07:25:50.693+0000:Closing old resolved issues"
0,CAMEL-2289,Bug,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-14 16:29:11+00:00,2010-11-03 05:12:58+00:00,"Its to ugly that you must use List<Map<String, Object>> to wrap you POJO to let Bindy be able to marhal my POJO to a CSV record.


It should be able to detect that its not a List but a plain POJO and construct the List itself and based on defaults.","davsclaus:1260779434:2009-12-14T16:30:34.660+0000:1260779434:2009-12-14T16:30:34.660+0000:trunk: 890397.
davsclaus:1260779581:2009-12-14T16:33:01.096+0000:1260779581:2009-12-14T16:33:01.096+0000:Before
{code}
        PurchaseOrderBindy order = new PurchaseOrderBindy();
        order.setAmount(1);
        order.setPrice(new BigDecimal(""39.95""));
        order.setName(""Camel in Action"");

        List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
        Map<String, Object> row = new HashMap<String, Object>();
        row.put(order.getClass().getName(), order);
        data.add(row);

        template.sendBody(""direct:start"", data);
{code}

After
{code}
        PurchaseOrder order = new PurchaseOrder();
        order.setAmount(1);
        order.setPrice(new BigDecimal(""39.95""));
        order.setName(""Camel in Action"");

        template.sendBody(""direct:start"", order);
{code}"
0,CAMEL-2288,Improvement,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-14 12:51:43+00:00,2010-11-03 05:12:58+00:00,"Its a bit confusing as its a special feature which shouldnt have been added.


The filter DSL should be independent from the splitter. If people want to filter then they should do that in the AggregationStrategy, or if we add a onWhen to the splitter so you can use that to signal when it should invoke the aggregator.","davsclaus:1260771817:2009-12-14T14:23:37.256+0000:1260771817:2009-12-14T14:23:37.256+0000:trunk: 890339.
davsclaus:1276913789:2010-06-19T10:16:29.942+0000:1276913789:2010-06-19T10:16:29.942+0000:trunk: 956211"
0,CAMEL-2287,Bug,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-14 12:29:21+00:00,2010-11-03 05:12:57+00:00,"Splitter supports filtering exchanges when a filter is used inside it.


However it should clear the filtered flag for exchanges arriving in, before the splitting so Camel has no memory in case filter has been used before the splitter



                Predicate goodWord = body().contains(""World"");

                from(""direct:start"")
                    .to(""mock:before"")
                    .filter(goodWord)
                        .to(""mock:good"")
                    .end()
                    .split(body().tokenize("" ""), new MyAggregationStrategy())
                        .to(""mock:split"")
                    .end()
                    .to(""mock:result"");","davsclaus:1260765153:2009-12-14T12:32:33.290+0000:1260765153:2009-12-14T12:32:33.290+0000:The workaround is to use .removeHeader(Exchange.FILTERED) in the DSL before you hit the .split() DSL
romkal:1260767052:2009-12-14T13:04:12.366+0000:1260767052:2009-12-14T13:04:12.366+0000:There is also a test that could be discussed called {{SplitShouldSkipFilteredExchanges}}.

It has flow like:

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .filter(goodWord)
                            .to(""mock:filtered"");
{code}

But it should be equivalent to

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .filter(goodWord)
                            .to(""mock:filtered"")
                        .end() ;
{code}

but then {{filter()}} reads like *if* statement that is simply not matched. Does it mean we shouldn't aggregate it back? And definitely following code should be aggregated back even if it contains unmatched filter:

{code}
                from(""direct:split"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .to(""direct:otherprocessing"")
                        .filter(goodWord)
                            .to(""mock:filtered"")
                        .end();
{code}
davsclaus:1260768129:2009-12-14T13:22:09.150+0000:1260768129:2009-12-14T13:22:09.150+0000:Yeah the missing end() can be omitted when you are lazy. But I would state that it would be best practice to use end() to be consistent.

davsclaus:1260771396:2009-12-14T14:16:36.735+0000:1260771396:2009-12-14T14:16:36.735+0000:Will be resolved by CAMEL-2288
davsclaus:1260771804:2009-12-14T14:23:24.693+0000:1260771804:2009-12-14T14:23:24.693+0000:trunk: 890339."
0,CAMEL-2286,Bug,Major,None,None,"
None
",Closed,Fixed,None,Unassigned,Moulliard Charles,0,0,2009-12-14 11:35:24+00:00,2010-02-07 09:58:28+00:00,"Camel route deployed on karaf server 1



	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"">
		
		<camel:route>
			<camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:loadBalance>
			    <camel:roundRobin/>
				<camel:to uri=""http://localhost:8282?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/>
			</camel:loadBalance>
		</camel:route>
		
	</camel:camelContext>




Camel route deployed on karaf server 2



	<camel:camelContext trace=""true""
		xmlns=""http://camel.apache.org/schema/osgi"">
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>
		
	</camel:camelContext>




Error generated using the following REST request : http://127.0.0.1:8181/reportservice/incidents/123/



org.apache.commons.httpclient.NoHttpResponseException: The server localhost failed to respond
	at org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1976)
	at org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1735)
	at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1098)
	at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
	at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
	at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:164)
	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:78)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:97)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:95)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:146)
	at org.apache.camel.processor.SendProcessor.doProcess(SendProcessor.java:94)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:82)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:41)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:162)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
	at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:53)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:363)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:534)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:864)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:533)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:207)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:403)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)





This request works fine : http://127.0.0.1:8282/reportservice/incidents/123/



<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<Incident>
<details>
<entry><key>100</key>
<value><id>100</id>
<reportedBy>James</reportedBy>
<assignedTo>Hiram</assignedTo>
</value>
</entry>
</details>
<incidentId>123</incidentId>
<givenName>Ibsen</givenName>
<familyName>Claus</familyName>
</Incident>","cmoulliard:1260761922:2009-12-14T11:38:42.246+0000:1260761922:2009-12-14T11:38:42.246+0000:List of features installed :

featuresRepositories=mvn:org.apache.felix.karaf/apache-felix-karaf/1.2.0/xml/features,mvn:org.apache.camel.karaf/features/2.1.0/xml/features,jar:mvn:org.apache.camel.example/reportincident.restful.features/1.0-SNAPSHOT!/reportincident.features-1.0-SNAPSHOT-features.xml

#
# Comma separated list of features to install at startup
#
featuresBoot=ssh,management,spring,spring-dm,spring-web,http-reportingincident,camel,camel-jms,camel-jetty,connector,activemq,camel-cxf,reportincident
njiang:1260767992:2009-12-14T13:19:52.063+0000:1260767992:2009-12-14T13:19:52.063+0000:Hi Charles,

I saw you are using the cxf osgi transport in your camel-context.xml, and the cxf-osgi-transport's default port are 8181,
Can you change the url of the jetty endpoint which use the 8181 port  to avoid the port conflict?

Willem
cmoulliard:1260768842:2009-12-14T13:34:02.571+0000:1260768842:2009-12-14T13:34:02.571+0000:Willem,

The port 8181 is only used by jetty on the osgi server where CXF does not run. The CXF server is deployed on the second karaf instance and port to be used is 8282 by PAX Web
njiang:1260769821:2009-12-14T13:50:21.289+0000:1260769821:2009-12-14T13:50:21.289+0000:Charles,

For you case you don't need to get PAX Web involved,  as the camel-jetty will call jetty API directly.
I just want you to make sure there is no port conflict in your Karaf instance.


cmoulliard:1260848069:2009-12-15T11:34:29.017+0000:1260848069:2009-12-15T11:34:29.017+0000:This issue is the same as http://issues.apache.org/activemq/browse/CAMEL-1925

I thought that the problem was solved.

Remark: When the following config is used locally (camel:run), then it works

{code}
		<camel:route>
			<camel:from uri=""jetty:http://localhost:8080?matchOnUriPrefix=true""/>
			<camel:to uri=""http://localhost:8181?throwExceptionOnFailure=false&amp;bridgeEndpoint=true""/>
		</camel:route>
		
		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8181?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>
		
		<camel:route>
			<camel:from uri=""jms:queue:inout""/>
			<camel:bean ref=""reportIncidentDAOService"" method=""getReports""/>
		</camel:route>
{code}

So something goes wrong when deployed in karaf  where we use PAX WEB + Jetty instead of only Jetty as this is the case when launched locally
cmoulliard:1260854545:2009-12-15T13:22:25.015+0000:1260854545:2009-12-15T13:22:25.015+0000:I understand now why the behavior is different. 

On karaf, a connection is established by the HttpProducer with the proxy (if defined in system property or browser)

14:13:58,196 | DEBUG | e/incidents/123/ | HttpConnection                   | ommons.httpclient.HttpConnection  692 | Open connection to 172.17.5.6:80

This is not the case when the example is run locally through camel:run

The httpEndpoint is able to detect system property where http.proxyHost / port are defined. 

{code}
        HttpClient answer = new HttpClient(getClientParams());

        // configure http proxy if defined as system property
        // http://java.sun.com/javase/6/docs/technotes/guides/net/proxies.html
        if (System.getProperty(""http.proxyHost"") != null && System.getProperty(""http.proxyPort"") != null) {
            String host = System.getProperty(""http.proxyHost"");
            int port = Integer.parseInt(System.getProperty(""http.proxyPort""));
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Java System Property http.proxyHost and http.proxyPort detected. Using http proxy host: ""
                        + host + "" port: "" + port);
            }
            answer.getHostConfiguration().setProxy(host, port);
        }

        answer.setHttpConnectionManager(httpConnectionManager);
{code}

I propose to add a new property to the endpoint to disable this feature --> proxy=true or false


cmoulliard:1260860329:2009-12-15T14:58:49.611+0000:1260860329:2009-12-15T14:58:49.611+0000:I have found the guilty, it is the mvn url handler of pax which is used by Karaf which instantiate these variables.

{code}
Class org.ops4j.pax.url.maven.commons.MavenConfigurationImpl.java

   /**
     * Enables the proxy server for a given URL.
     */
    public void enableProxy( URL url )
    {
        final String proxySupport = m_propertyResolver.get( m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT );
        if( ""false"".equalsIgnoreCase( proxySupport ) )
        {
            return; // automatic proxy support disabled
        }

        final String protocol = url.getProtocol();
        if( protocol == null || protocol.equals( get( m_pid + MavenConstants.PROPERTY_PROXY_SUPPORT ) ) )
        {
            return; // already have this proxy enabled
        }

        Map<String, String> proxyDetails = m_settings.getProxySettings().get( protocol );
        if( proxyDetails != null )
        {
            LOGGER.trace( ""Enabling proxy ["" + proxyDetails + ""]"" );

            final String user = proxyDetails.get( ""user"" );
            final String pass = proxyDetails.get( ""pass"" );

            Authenticator.setDefault( new Authenticator()
            {
                @Override
                protected PasswordAuthentication getPasswordAuthentication()
                {
                    return new PasswordAuthentication( user, pass.toCharArray() );
                }
            }
            );

            System.setProperty( protocol + "".proxyHost"", proxyDetails.get( ""host"" ) );
            System.setProperty( protocol + "".proxyPort"", proxyDetails.get( ""port"" ) );

{code}
davsclaus:1261088045:2009-12-18T06:14:05.875+0000:1261088045:2009-12-18T06:14:05.875+0000:I think Willem added a new feature to Camel trunk which allows lets camel-http read the proxy settings from Camel properties and *not* system properties. And by this it should fix this issue as well. Can you try again with latest code from trunk?"
0,CAMEL-2285,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,None,Unassigned,Moulliard Charles,0,0,2009-12-14 11:30:02+00:00,2010-02-07 09:58:28+00:00,"The following config does not work :



		<camel:route>
		    <camel:from uri=""jetty:http://0.0.0.0:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>





but well this one :



		<camel:route>
		    <camel:from uri=""jetty:http://localhost:8282?matchOnUriPrefix=true""/>
			<camel:to uri=""cxfbean:reportIncidentServiceBean""/>
		</camel:route>",cmoulliard:1260861599:2009-12-15T15:19:59.030+0000:1260861599:2009-12-15T15:19:59.030+0000:Same issue as identified in camel 2286
0,CAMEL-2284,Bug,Major,2.1.0,,"
None
",Closed,Fixed,None,Unassigned,Moulliard Charles,0,0,2009-12-14 11:22:40+00:00,2010-02-07 09:58:28+00:00,"org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[cxfbean:reportIncidentServiceBean] <<< in route: Route[[From[http://0.0.0.0:8282]] -> [To[cxfbean:reportIncid... because of Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1039)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:562)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[cxfbean:reportIncidentServiceBean] <<< in route: Route[[From[http://0.0.0.0:8282]] -> [To[cxfbean:reportIncid... because of Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:643)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:136)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:601)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1156)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1073)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1009)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:158)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:55)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:884)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:197)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)
	... 12 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://reportIncidentServiceBean due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:437)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:154)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:109)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:115)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:63)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:57)
	at org.apache.camel.model.ToDefinition.createProcessor(ToDefinition.java:87)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:286)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:114)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:640)
	... 22 more
Caused by: org.apache.cxf.service.factory.ServiceConstructionException
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:122)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.createServer(CxfBeanEndpoint.java:112)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanEndpoint.init(CxfBeanEndpoint.java:86)
	at org.apache.camel.component.cxf.cxfbean.CxfBeanComponent.createEndpoint(CxfBeanComponent.java:48)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:78)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:416)","njiang:1260762864:2009-12-14T11:54:24.359+0000:1260762864:2009-12-14T11:54:24.359+0000:Can I have a look at your cxfbean:// URI ?
From the stack trace , it looks like a configuration error which causes the ServiceConstructionException.
cmoulliard:1260763426:2009-12-14T12:03:46.345+0000:1260763426:2009-12-14T12:03:46.345+0000:The code has been put in attachement of the camel-2286

Remark : After osgi:shutdown and start the endpoint can be resolved and route created.
cmoulliard:1260867088:2009-12-15T16:51:28.675+0000:1260867088:2009-12-15T16:51:28.675+0000:comes form the fact that context of camel uses namespace spring and not osgi"
0,CAMEL-2283,Task,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-14 09:57:36+00:00,2010-11-03 05:12:57+00:00,No Desc,"njiang:1260817207:2009-12-15T03:00:07.277+0000:1260817207:2009-12-15T03:00:07.277+0000:trunk
http://svn.apache.org/viewvc?rev=890255&view=rev
njiang:1260817534:2009-12-15T03:05:34.551+0000:1260837602:2009-12-15T08:40:02.666+0000:To run the example in ServiceMix 4.1.0 or Karaf 1.2.0 with equinox  you need to make sure these features and bundles are installed.
We have trouble to install the hibernate bundles into Felix, [FELIX-1919|https://issues.apache.org/jira/browse/FELIX-1919]
features:
{code} 
camel-spirng-osgi, camel-jaxb, camel-jpa, camel-bam
{code}
bundles:
{code}
osgi:install -s wrap:mvn:hsqldb/hsqldb/1.8.0.7 
osgi:install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.dom4j/1.6.1_2
osgi:install -s mvn:org.antlr/com.springsource.antlr/2.7.7
osgi:install -s mvn:org.jgroups/com.springsource.org.jgroups/2.5.1
osgi:install -s mvn:org.objectweb.asm/com.springsource.org.objectweb.asm/1.5.3
osgi:install -s mvn:net.sourceforge.cglib/com.springsource.net.sf.cglib/2.2.0
osgi:install -s mvn:org.jboss.javassist/com.springsource.javassist/3.9.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.annotations/3.4.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.ejb/3.4.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate/3.3.2.GA
{code}
"
0,CAMEL-2282,Bug,Trivial,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Jörn Kottmann,0,0,2009-12-11 08:59:15+00:00,2010-11-03 05:12:57+00:00,"http://camel.apache.org/mail.html


""Consuming mails with attachment sample""


...


""Map<String, DataHandler> attachments = exchange.getIn().getAttachments();
        if (attacments.size() > 0) {
""


but should be ""attachments.size()"".",davsclaus:1260493775:2009-12-11T09:09:35.012+0000:1260493775:2009-12-11T09:09:35.012+0000:Thanks for reporting I have fixed the typo.
0,CAMEL-2281,Task,Major,"1.6.0, 2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0",2.8.0,"
None
",Resolved,Fixed,2.8.0,Hadrian Zbarcea,Sebb,0,0,2009-12-10 15:32:13+00:00,2011-03-30 14:04:54+00:00,"The following directories in http://www.apache.org/dist/camel/apache-camel/ are all old releases:


1.6.0/                  17-Feb-2009 19:14    -   
1.6.1/                  19-May-2009 13:42    -   
1.6.2/                  23-Nov-2009 14:52    -   
2.0-M1/                 16-Mar-2009 20:08    -   
2.0-M2/                 16-Jun-2009 02:30    -   
2.0-M3/                 26-Jul-2009 03:27    -   
2.0.0/                  24-Aug-2009 00:27    -   


These should be deleted; only the current release should be present.
Older releases are always available via the archive server, http://archive.apache.org/dist/camel/apache-camel/
(Note that it already has 2.1.0 there)","davsclaus:1285489890:2010-09-26T16:31:30.794+0000:1285489890:2010-09-26T16:31:30.794+0000:There are plenty of other Apache projects which don't maintain and keep this with the latest release only.
davsclaus:1285489935:2010-09-26T16:32:15.778+0000:1285489935:2010-09-26T16:32:15.778+0000:Hadrian if you have the credentials then could you keep 1.6.3 and the 2.4.0 release only. Then delete the older ones and close this ticket.
hadrian:1301463839:2011-03-30T13:43:59.178+0000:1301463839:2011-03-30T13:43:59.178+0000:Actually this was done long ago.
sebb:1301464426:2011-03-30T13:53:46.352+0000:1301464426:2011-03-30T13:53:46.352+0000:However, 2.5.0 and 2.6.0 can now be deleted
hadrian:1301465094:2011-03-30T14:04:54.506+0000:1301465094:2011-03-30T14:04:54.506+0000:Argh :). Done. Thanks Sebb."
0,CAMEL-2280,Improvement,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Unassigned,James Strachan,0,0,2009-12-10 14:40:13+00:00,2010-11-03 05:12:57+00:00,"we need to tweak the JAXBContext a little in the default jaxrs config for camel-web to avoid using a namespace prefix to make the XML a little easier to read. 


e.g. in FireFox if you view this


http://localhost:8080/endpoints.xml


it tends to look like this



<ns2:endpoints>
<ns2:endpoint href=""/endpoints/activemq:%2F%2Fexample.A"" uri=""activemq://example.A""/>
<ns2:endpoint href=""/endpoints/activemq:%2F%2Fexample.B"" uri=""activemq://example.B""/>
<ns2:endpoint href=""/endpoints/activemq:%2F%2Fexample.C"" uri=""activemq://example.C""/>
<ns2:endpoint href=""/endpoints/mock:%2F%2FsomeName"" uri=""mock://someName""/>
<ns2:endpoint href=""/endpoints/spring-event:%2F%2Fdefault"" uri=""spring-event://default""/>
</ns2:endpoints>




with the ns2 prefix making things less easy to read","davsclaus:1261016885:2009-12-17T10:28:05.434+0000:1261016885:2009-12-17T10:28:05.434+0000:Would be cool to get tweaked as others have requested this as well.

I think in CXF there is some manual code that kinda fixes this but not in a nice way. Willem Jiang knows a bit about that.
sergey_beryozkin:1261017502:2009-12-17T10:38:22.329+0000:1261017502:2009-12-17T10:38:22.329+0000:In CXF you can do in a number of ways. The easiest is to configure a jaxrs jaxb provider to drop the namespaces from a given element(s).
Camel-web does not depend on CXF though AFAIK. 

jstrachan:1261017934:2009-12-17T10:45:34.173+0000:1261017934:2009-12-17T10:45:34.173+0000:I've a fix i'm about to apply shortly. One of the complications is the various XML rest URIs in Camel web return a mixture of the regular spring namespace and the web namespace (such as for endpoints as shown above) and sometimes a mixture of the 2. 

For now I've gone with better default namespace prefixes - and using no namespace prefix for the default spring namespace (so when looking at a route, there's no namespaces at all). Its mostly just the endpoints which will have a small, single character namespace prefix now.

I guess we could try figure out how to extend the web xsd/namespace from the spring one, so there's a single universal namespace but thats maybe going a step too far - or hand crafting a JAXB configuration for a few special resources maybe
jstrachan:1261017956:2009-12-17T10:45:56.203+0000:1261017956:2009-12-17T10:45:56.203+0000:FWIW my main aim was to ditch the ugly ""ns2"" stuff :)
jstrachan:1261027191:2009-12-17T13:19:51.505+0000:1261027191:2009-12-17T13:19:51.505+0000:patch applied; now using no namespace prefix for routes as XML; though we use a simple ""w"" prefix for endpoints as XML"
0,CAMEL-2279,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,James Strachan,0,1,2009-12-10 14:08:39+00:00,2012-07-06 08:05:26+00:00,"its really easy to create a new war using maven by depending on camel-web then adding some new dependencies & custom routes.


There's an example here: http://svn.apache.org/repos/asf/camel/sandbox/components/camel-activemq-web/


we should maybe convert this to a standard example for folks to use?


Adding ActiveMQ makes lots of sense to the demo ( I can imagine folks using AMQ and Camel quite a bit together) - though given that this could introduce a recursive dependency between Camel -> ActiveMQ -> Camel, maybe this demo should be hosted inside ActiveMQ and we just link to it from the Camel website/docs?","davsclaus:1284860507:2010-09-19T09:41:47.086+0000:1284860507:2010-09-19T09:41:47.086+0000:Jonathan Anstey did this for the camel deployment webinar, so we should just add a link to this webinar and the source code he provided
davsclaus:1341533126:2012-07-06T08:05:26.645+0000:1341533126:2012-07-06T08:05:26.645+0000:Lets close old ticket that are not in demand."
0,CAMEL-2278,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Marco Crivellaro,0,1,2009-12-10 14:08:26+00:00,2010-11-03 05:12:56+00:00,"using a recipientList containing a csv list of ftp endpoints.
I would like to retry the delivery to a given ftp enpoint fails. 


I've set up an onException with maximumRedeliveries set to 2. 


In case an error occurs sending the message to 1 ftp endpoint the redelivery is performed on all endpoints specified on the csv list; the redelivery should be performed only on the failed endpoint is there a way to achieve this?


route sample 


from(""direct:delivery.notification.test"")
.onException(Exception.class).maximumRedeliveries(2).redeliverDelay(60L).handled(true).end()
.recipientList(header(""recipientListHeader"").tokenize("",""))
.parallelProcessing().executorService(customThreadPoolExecutor)
						//.aggregationStrategy(new recipientAggregationStrategy())
						.to(""direct:chunk.completed"");","davsclaus:1260430502:2009-12-10T15:35:02.563+0000:1260430502:2009-12-10T15:35:02.563+0000:trunk: 889295.

Marco if you build from source you can try with that commit which should help fix you issue.
I need to add some more unit testing but wanted to give you a chance to test it on your end as well ASAP.
davsclaus:1260433600:2009-12-10T16:26:40.703+0000:1260433600:2009-12-10T16:26:40.703+0000:Marco, sorry I just realized it was only the multicast part that was fixed, I need to revisit it for the recipient list as well.

crive:1260498727:2009-12-11T10:32:07.663+0000:1260498727:2009-12-11T10:32:07.663+0000:Ok thanks.
Do you have an idea on how log it could take?

Thanks again,
Marco
davsclaus:1260500449:2009-12-11T11:00:49.055+0000:1260500449:2009-12-11T11:00:49.055+0000:I had to implement a 2nd fix as the @RecipientList is more dynamic than what you else create using the route builders (which is more static).

But I do have that covered now, need to run some additional tests before committing.
davsclaus:1260754036:2009-12-14T09:27:16.536+0000:1260754036:2009-12-14T09:27:16.536+0000:trunk: 890241.

This one was a bit tougher to support @RecipientList as well."
0,CAMEL-2277,Bug,Minor,"1.6.2, 2.0.0, 2.1.0",2.6.0,"
None
",Closed,Later,2.6.0,Claus Ibsen,Moulliard Charles,0,0,2009-12-10 12:59:46+00:00,2011-10-25 11:35:49+00:00,"When the component camel-bam / BamRoutesTest is tested using the profile -P openjpa or the new one -P eclipselink, than errors like this one are generated



2009-12-10 11:52:10,916 [ead 0: seda://a] DEBUG DefaultListableBeanFactory     - Creating instance of bean 'org.apache.camel.bam.model.ProcessInstance'
2009-12-10 11:52:10,916 [ead 0: seda://a] DEBUG DefaultListableBeanFactory     - Finished creating instance of bean 'org.apache.camel.bam.model.ProcessInstance'
2009-12-10 11:52:10,916 [ead 0: seda://a] DEBUG JpaBamProcessorSupport         - About to flush on entity: ProcessInstance[123] with key: 123
2009-12-10 11:52:10,931 [ead 0: seda://a] DEBUG BamProcessorSupport            - Correlation key: 123 with entity: ProcessInstance[123]
2009-12-10 11:52:10,931 [ead 0: seda://a] DEBUG JpaBamProcessor                - Processing process instance: ProcessInstance[123]
2009-12-10 11:52:10,931 [ead 0: seda://a] DEBUG ActivityState                  - Activity first message: ActivityState[4 on ProcessInstance[123] Activity[5 name: a]]
2009-12-10 11:52:10,931 [ead 0: seda://a] DEBUG ActivityState                  - Activity complete: ActivityState[4 on ProcessInstance[123] Activity[5 name: a]]
2009-12-10 11:52:10,947 [ead 0: seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.0.0.v20091127-r5931): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: Violation of unique constraint $$: duplicate value(s) for column(s) $$: SYS_PK_47 in statement [INSERT INTO CAMEL_ACTIVITYSTATE (ID, RECEIVEDMESSAGECOUNT, TIMEOVERDUE, ESCALATIONLEVEL, TIMEEXPECTED, PROCESSINSTANCE_CORRELATIONKEY, ACTIVITYDEFINITION_ID) VALUES (?, ?, ?, ?, ?, ?, ?)]
Error Code: -104
Call: INSERT INTO CAMEL_ACTIVITYSTATE (ID, RECEIVEDMESSAGECOUNT, TIMEOVERDUE, ESCALATIONLEVEL, TIMEEXPECTED, PROCESSINSTANCE_CORRELATIONKEY, ACTIVITYDEFINITION_ID) VALUES (?, ?, ?, ?, ?, ?, ?)
	bind => [4, 0, null, 0, null, 123, null]
Query: InsertObjectQuery(ActivityState[4 on ProcessInstance[123] null]); nested exception is javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.0.0.v20091127-r5931): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: Violation of unique constraint $$: duplicate value(s) for column(s) $$: SYS_PK_47 in statement [INSERT INTO CAMEL_ACTIVITYSTATE (ID, RECEIVEDMESSAGECOUNT, TIMEOVERDUE, ESCALATIONLEVEL, TIMEEXPECTED, PROCESSINSTANCE_CORRELATIONKEY, ACTIVITYDEFINITION_ID) VALUES (?, ?, ?, ?, ?, ?, ?)]
Error Code: -104





More information is required about datamodel and relations in order to solve this issue.
Everything works fine with Hibernate profile","davsclaus:1283151219:2010-08-30T14:53:39.252+0000:1283151219:2010-08-30T14:53:39.252+0000:We should migrate to openjpa 2.0.0 in camel-jpa and camel-bam components.
davsclaus:1295163149:2011-01-16T15:32:29.789+0000:1295163149:2011-01-16T15:32:29.789+0000:We will look into this later when we upgrade to using JPA 2.0 providers for testing."
0,CAMEL-2276,Improvement,Trivial,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-10 11:24:19+00:00,2010-11-03 05:12:56+00:00,"See nabble
http://old.nabble.com/SEDA-Timeout-ts26724664.html",davsclaus:1260415948:2009-12-10T11:32:28.098+0000:1260415948:2009-12-10T11:32:28.098+0000:trunk: 889199.
0,CAMEL-2275,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 1.6.2, 2.0-M2, 2.0-M3, 2.0.0, 2.1.0",None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-10 09:56:59+00:00,2010-11-03 05:12:56+00:00,"Here is the mail thread discuss this issue.
http://old.nabble.com/TypeConverter-%3A-Should-it-be-blocking-for-camel-route-or-not-in-case--of-error---td26723837.html","njiang:1260420261:2009-12-10T12:44:21.471+0000:1260420261:2009-12-10T12:44:21.471+0000:trunk 
 http://svn.apache.org/viewvc?rev=889234&view=rev"
0,CAMEL-2274,Bug,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-10 08:28:38+00:00,2010-11-03 05:12:56+00:00,"See nabble
http://old.nabble.com/Can%27t-return-null-with-Camel-remoting-ts26682177.html",davsclaus:1260409405:2009-12-10T09:43:25.457+0000:1260409405:2009-12-10T09:43:25.457+0000:trunk: 889160.
0,CAMEL-2273,Improvement,Major,2.2.0,,"
None
",Closed,Fixed,None,Moulliard Charles,Moulliard Charles,0,0,2009-12-09 14:09:07+00:00,2010-02-07 09:58:28+00:00,"The following components :



camel-bam,
camel-jpa,
camel-example-etl,
...



have been designed with JPA specification 1.0 but our implementation uses Hibernate JPA. Unfortunately, Hibernate has added some extensions.


A good example is the fully qualified name which is used by camel jpa consumer/producer or in our select statement  (ex : select c from Customer.getClass.getName).


The JPA specification does not support this














4.3.1 Naming













Entities are designated in query strings by their entity names. The entity name is defined by the name
element of the Entity annotation (or the entity-name XML descriptor element), and defaults to


the unqualified name of the entity class. Entity names are scoped within the persistence unit and must be
unique within the persistence unit.
*****


and in consequence, switching from Hibernate to EclipseLink JPA, OpenJPA, ... is not possible today.


Suggestion : uses the unqualified class name or name of the @entity provided in the select statement","cmoulliard:1260420977:2009-12-10T12:56:17.851+0000:1260420977:2009-12-10T12:56:17.851+0000:modifications done on camel-bam, camel-jpa and camel-example-etl"
0,CAMEL-2272,New Feature,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Hendy Irawan,0,1,2009-12-09 12:17:55+00:00,2010-11-03 05:12:56+00:00,"When there are two or more consumers annotated with @Consume(uri=""seda:channel""), seda endpoint is not delivering the message to all channels (Publish-Subscribe mechanism).


To implement the said Publish-Subscribe mechanism we must use explicit routing with <multicast> element:


<from uri=""seda:channel"" />
<multicast>
  <to uri=""...."" />
  <to uri=""...."" />
</multicast>


I propose to improve the seda component so that multicasting (copying the exchange) is automatically done when multiple consumers are encountered.


Original thread: http://old.nabble.com/Implementing-Publish-Subscribe-Channel-to26654086.html","davsclaus:1260845636:2009-12-15T10:53:56.305+0000:1260845636:2009-12-15T10:53:56.305+0000:trunk: 890752.

See the new *multipleConsumers* option on SEDA and this wiki page
http://cwiki.apache.org/confluence/display/CAMEL/SEDA
ceefour:1260941041:2009-12-16T13:24:01.161+0000:1260941041:2009-12-16T13:24:01.161+0000:Thank you very much Claus! :)
ceefour:1262153665:2009-12-30T14:14:25.914+0000:1262153665:2009-12-30T14:14:25.914+0000:A demonstration/rationale of this particular use case:

http://spring-java-ee.blogspot.com/2009/12/event-notification-with-apache-camel.html"
0,CAMEL-2271,Bug,Trivial,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Karl Palsson,0,0,2009-12-09 10:41:40+00:00,2010-06-03 07:25:50+00:00,"[org.apache.camel.processor.MulticastProcessor:Camel thread 1: seda://errorQueue] - <Done sequientel processing 2 exchanges>


Should probably say ""sequential"" ?","davsclaus:1260402374:2009-12-10T07:46:14.583+0000:1260402374:2009-12-10T07:46:14.583+0000:Was already fixed in 2.1 as I fixed that 9/8/2009
davsclaus:1275521150:2010-06-03T07:25:50.061+0000:1275521150:2010-06-03T07:25:50.061+0000:Closing old resolved issues"
0,CAMEL-2270,Task,Major,None,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-09 08:18:34+00:00,2010-11-03 05:12:55+00:00,No Desc,"njiang:1260421695:2009-12-10T13:08:15.487+0000:1260421695:2009-12-10T13:08:15.487+0000:trunk
http://svn.apache.org/viewvc?rev=888729&view=rev"
0,CAMEL-2269,Bug,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-09 05:47:29+00:00,2010-11-03 05:12:55+00:00,"Code like this



                    .doTry()
                        .to(""mock:b"")
                        .throwException(new IllegalArgumentException(""Damn""))
                    .doCatch()
                        .to(""mock:catch"")
                    .end();




Should report a failure in the route as doCatch must have at least 1 exception as parameter.


It should correctly be
                    .doCatch(Exception.class)


We could also consider using Excpetion.class as default but in Java you must also provide the exception to catch and thus its more intuitive if its 100% like Java",davsclaus:1260315613:2009-12-09T07:40:13.374+0000:1260315613:2009-12-09T07:40:13.374+0000:trunk: 888719.
0,CAMEL-2268,Task,Major,2.1.0,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Hadrian Zbarcea,Sebb,0,0,2009-12-08 20:12:27+00:00,2011-10-25 11:35:49+00:00,"The page http://camel.apache.org/camel-210-release.html refers to release 2.1.0, but as far as I can make out, there are no files in the distribution directory for this release.


The latest release found is 2.0.0.


The web-site should not be advertising releases that have not been uploaded - indeed the release should only be advertised once the archives have been added to most of the mirrors.


Furthermore, the download section MUST carry a link to the KEYS file on the main Apache server, i.e.  http://www.apache.org/dist/camel/apache-camel/KEYS


Also, the download page should not carry a link to SVN; SVN should only be advertised to developers.","davsclaus:1260402467:2009-12-10T07:47:47.551+0000:1260402467:2009-12-10T07:47:47.551+0000:The 2.1 release is already in the Apache dist
http://www.apache.org/dist/camel/apache-camel/

Its the mirrors that hasnt propagated the release. Hadrian is checking out why but its surely an Apache infra issue and not Camel specific
davsclaus:1260402701:2009-12-10T07:51:41.843+0000:1260402701:2009-12-10T07:51:41.843+0000:I have added a link to the KEYS from the download page
{code}
h3. Keys
The {{KEYS}} used to sign the release can be found [here|http://www.apache.org/dist/camel/apache-camel/KEYS].
{code}

Will take some hours before its synced to the static html pages
davsclaus:1260402871:2009-12-10T07:54:31.711+0000:1260402871:2009-12-10T07:54:31.711+0000:The mirrors seems to be propagated now.

I can find 2.1.0 in Sweden, Czech, Hong Kong, Holland etc.
http://websiterra.com/friends/apache/camel/apache-camel/2.1.0/
http://mirror.pearsys.com/camel/apache-camel/2.1.0/
http://apache.hippo.nl/camel/apache-camel/
sebb:1260430030:2009-12-10T15:27:10.614+0000:1260430030:2009-12-10T15:27:10.614+0000:OK, I can see the 2.1.0 files now - not sure why they did not appear earlier, perhaps a caching problem.

However, there are still some major problems with the download pages.
Only releases that have been formally voted on and approved by the PMC should be listed on public pages.

- they should not advertise the SVN links; 
- should not contain Releases In Progress or SNAPSHOTS
- ALL the pages which have download links must have links to the KEYS file; and all downloads need a hash file, either MD5 or SHA1.

davsclaus:1260431351:2009-12-10T15:49:11.174+0000:1260431351:2009-12-10T15:49:11.174+0000:Sebb Apache is community over code and users like that they can find the latest releases and in progress releases on that page.
And instructions how to get hold of them if using maven etc.

Other Apache projects do the same, for example OpenJPA
http://openjpa.apache.org/downloads.html

You have never been involved with the Camel community before and now you step in and creates a bit of disturbance. 
We are glad that you point out some issues with a link to KEYS etc. but due respect you could have expressed this in a nicer and more collaborate and understanding way.

Dont you think you should appreciate how well the Camel community is going than trying to tell how the download page should look like?

Also when you community you do not use a signature in mail etc. or you JIRA account is just an anonym email which makes it a bit suspect to be in dialog with you.
davsclaus:1260431529:2009-12-10T15:52:09.283+0000:1260431529:2009-12-10T15:52:09.283+0000:Not a blocker
sebb:1260432565:2009-12-10T16:09:25.682+0000:1260432565:2009-12-10T16:09:25.682+0000:I'm sorry if you think my wording was impolite. I was just trying to state the ASF policy as I understand it.  I was obviously too terse.

Only software releases that have been approved by the PMC are allowed to be published to the general public.
AIUI this is vital for legal reasons.

SVN and Snapshots can only be published to the developer community.

BTW I think OpenJPA is wrong too. For a better example, see HTTPD - http://httpd.apache.org/ - the SVN link is only provided on developer pages.
hadrian:1260433778:2009-12-10T16:29:38.518+0000:1260433778:2009-12-10T16:29:38.518+0000:@Sebastian,

We appreciate your passion and your desire to improve things and as long as communication stays within the limits of decency and respect, we're all good. I don't think any boundaries were crossed :).

I am rereading the official [Apache release guide|http://www.apache.org/dev/release.html] which mostly states what should be done, not what shouldn't.

In the Camel wiki space we do have an in progress folder that helps us capture the things that will be in the next release and way before the release itself. It helps us a lot and words very well for us. That is public information actually, as the wiki is viewable by everybody. I see no reason to change that, but from what I understand you don't have a problem with that, but with the fact that the whole in progress section is published to the public site, correct?

You point out to a few things that you consider violations of the apache policy, but it's not clear what exactly you suggest. I would appreciate if you could rephrase you comment as ""please to this"" instead of (or in addition to) ""don't do that"". Also part of the apache way is the ""doer"" attitude, so feel free to make some of the corrections yourself and know that you have our gratitude. In any event, I will work with you on this and make sure the Camel community is a good (nay, an exemplary) citizen of the Apache community.


davsclaus:1260433851:2009-12-10T16:30:51.900+0000:1260433851:2009-12-10T16:30:51.900+0000:What if we create a sub page on download named - Developer download - or something like that.

And then post a link from the download page to that page? Then the download page will only have releases.

And I do believe if this was such a major problem, directions would have been given from the board etc. and not by an individual who we do not know who is and have newer been in touch with this community before. 

Lets start over and try to fix that download page.
sebb:1260436188:2009-12-10T17:09:48.090+0000:1260436188:2009-12-10T17:09:48.090+0000:Thanks for posting the URL. This contains the text:

bq. Test Packages are not Apache releases. All releases require due process and official approval. Test packages are for testing ongoing development and should only be discussed on the project development lists.

AFAICT this means that the details of such releases should be kept off public download pages.

I think it's important to make a distinction between developer information and user information which is aimed at the public.
So I think it would be better to keep the download page for official downloads only.

The Camel home page already has a ""Developers"" section which includes SVN links already. You could add a page for Snapshots, but please ensure that you add suitable disclaimers, for example as done by JMeter:  http://people.apache.org/builds/jakarta-jmeter/nightly/

Re: ""Releases in Progress"" - IMO this is not really applicable to the general public, and belongs in the ""Developers"" section.
However, so long as there are no links to software downloads, the descriptions of new features etc could be left where they are.
I still think it would be better in the Developers section though.

As to direction from the board - I agree.
hadrian:1260437103:2009-12-10T17:25:03.018+0000:1260437103:2009-12-10T17:25:03.018+0000:Fair enough. I will make the changes you recommend. I will also look into archiving old releases."
0,CAMEL-2267,Improvement,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-08 12:52:31+00:00,2010-11-03 05:12:55+00:00,"Support the generate different bundles with different profile ( using hibernate,  openjpa).","njiang:1260250433:2009-12-08T13:33:53.204+0000:1260983822:2009-12-17T01:17:02.610+0000:I and Charles tested the camel-example-etl bundle on Karaf 1.1.0-SNAPSHOT and Karaf 1.2.0.

Current the camel-example-etl openjpa bundle can work perfectly within Kara-felix.
As Felix has [an issue|https://issues.apache.org/jira/browse/FELIX-1919] to load the fragment bundle  of hibernate, so we doesn't test it.

When we switch the Karaf to use equinox as the OSGi kernel,  
I Got this error on Mac with JDK 1.5.0
{code}
Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory not found from bundle [org.apache.camel.camel-example-etl]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:254)
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:399)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:247)
	at org.apache.openjpa.kernel.Bootstrap.getFactoryClass(Bootstrap.java:157)
	... 41 more
Caused by: java.lang.ClassNotFoundException: org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:494)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:398)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:254)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:326)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:231)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1193)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)
	... 47 more
{code}

This error can be resolved by modify the spring-orm bundle's manifest file, you need to add Dynamic-Import: * to spring-orm manifest as a walk around of this [Spring orm issue|https://issuetracker.springsource.com/browse/DMS-1114] 


njiang:1260250699:2009-12-08T13:38:19.881+0000:1260250699:2009-12-08T13:38:19.881+0000:To create the bundle which using hibernate,  using  mvn clean install or mvn clean install -Phibernate.
To create the bundle which using openjpa,  using mvn clean install -Popenjpa.
njiang:1260422114:2009-12-10T13:15:14.319+0000:1260423246:2009-12-10T13:34:06.756+0000:With the help of Charles, we finally can deploy the camel-example-etl in to Karaf with eclipse link.
You need to install the below bundles after you uninstall the servicemix.jpa bundle.
{code}
osgi:install -s wrap:mvn:hsqldb/hsqldb/1.8.0.7 
osgi:install -s mvn:org.eclipse.persistence/javax.persistence/1.2.0
osgi:install -s mvn:org.eclipse.persistence/org.eclipse.persistence.antlr/1.2.0
osgi:install -s mvn:org.eclipse.persistence/org.eclipse.persistence.asm/1.2.0
osgi:install -s mvn:org.eclipse.persistence/org.eclipse.persistence.core/1.2.0
osgi:install -s mvn:org.eclipse.persistence/org.eclipse.persistence.jpa/1.2.0
{code}
njiang:1260423218:2009-12-10T13:33:38.247+0000:1260423218:2009-12-10T13:33:38.247+0000:To deploy the camel-example-etl hibernation version into karaf you need to install below bundle, 
after you install camel-spirng-osgi, camel-jaxb, camel-jpa, camel-juel features
{code}
osgi:install -s wrap:mvn:hsqldb/hsqldb/1.8.0.7 
osgi:install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.dom4j/1.6.1_2
osgi:install -s mvn:org.antlr/com.springsource.antlr/2.7.7
osgi:install -s mvn:org.jgroups/com.springsource.org.jgroups/2.5.1
osgi:install -s mvn:org.objectweb.asm/com.springsource.org.objectweb.asm/1.5.3
osgi:install -s mvn:net.sourceforge.cglib/com.springsource.net.sf.cglib/2.2.0
osgi:install -s mvn:org.jboss.javassist/com.springsource.javassist/3.9.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.annotations.common/3.3.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.annotations/3.4.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate.ejb/3.4.0.GA
osgi:install -s mvn:org.hibernate/com.springsource.org.hibernate/3.3.2.GA
{code}


ffang:1264478248:2010-01-26T11:57:28.403+0000:1264478248:2010-01-26T11:57:28.403+0000:Hi Willem,

For the spring orm optional import org.hibernate.ejb problem, we needn't hack spring orm jar to add Dynamic-Import: * 
Just use
osgi:refresh spring orm bunde id 
after you install hibernate bundle jar, so that the optional import could be resolved now as the needed package is already there.

Best Regards
Freeman"
0,CAMEL-2266,Bug,Major,2.2.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Moulliard Charles,0,0,2009-12-08 12:35:43+00:00,2010-11-03 05:12:55+00:00,"The example camel-example-etl cannot run on Apache Felix Karaf 1.2 - Equinox. the following error is generated



12:48:24,184 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@10bbf6d
12:48:24,246 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 59 | Using only osgi bundle classloader
12:48:24,246 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]
12:48:24,309 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 59 | Using only osgi bundle classloader
12:48:24,309 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | sgi.OsgiPackageScanClassResolver 79 | Loading from osgi bundle using classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]
12:48:24,371 | DEBUG | ExtenderThread-6 | OsgiPackageScanClassResolver | .DefaultPackageScanClassResolver 418 | Cannot find class 'org/apache/camel/converter/jaxb/JaxbDataFormat.class' in classloader: BundleDelegatingClassLoader for [camel-core (org.apache.camel.camel-core)]. Reason: java.lang.ClassNotFoundException: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxb.JaxbConverter not found from bundle [org.apache.camel.camel-core]
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.addIfMatching(DefaultPackageScanClassResolver.java:405)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.loadImplementationsInBundle(OsgiPackageScanClassResolver.java:121)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.findInOsgiClassLoader(OsgiPackageScanClassResolver.java:81)
	at org.apache.camel.osgi.OsgiPackageScanClassResolver.find(OsgiPackageScanClassResolver.java:60)
	at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
	at org.apache.camel.osgi.OsgiAnnotationTypeConverterLoader.load(OsgiAnnotationTypeConverterLoader.java:42)
	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:379)
	at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:160)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:120)
	at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:113)
...
Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxb.JaxbConverter
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:494)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:410)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:398)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:105)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:252)
	at org.eclipse.osgi.internal.loader.BundleLoader.loadClass(BundleLoader.java:326)
	at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:231)
	at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1193)
	at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99)





REMARKs : 



The project works fine with FELIX
Packages to be imported is defined in MANIFEST : org.apache.camel.converter.jaxb;version=""[2.2.0,3.0.0)"";resolution:=optional,
Resolution when bundle is deployed is ok




[  77] [Resolved   ] [            ] [       ] [   60] camel-example-etl (2.2.0.SNAPSHOT)
[  78] [Resolved   ] [            ] [       ] [   60] JBoss Hibernate Annotations (3.4.0.GA)
                                       Hosts: 72
[  80] [Active     ] [            ] [       ] [   60] JBoss Hibernate Common Annotations (3.3.0.ga)
[  81] [Active     ] [            ] [       ] [   60] Apache ServiceMix Bundles: commons-dbcp-1.2.2 (1.2.2.3)
[  82] [Active     ] [            ] [       ] [   60] camel-jaxb (2.2.0.SNAPSHOT)
karaf@root> packages:

packages:exports    packages:imports
karaf@root> packages:imports  77
OSGi System Bundle (0): javax.xml.bind.annotation; version=""0.0.0""
OPS4J Pax Logging - API (27): org.apache.commons.logging; version=""1.1.1""
camel-core (43): org.apache.camel.model; version=""2.2.0.SNAPSHOT""
camel-core (43): org.apache.camel.util; version=""2.2.0.SNAPSHOT""
camel-core (43): org.apache.camel; version=""2.2.0.SNAPSHOT""
Spring Transaction (50): org.springframework.transaction.support; version=""2.5.6.SEC01""
camel-spring-osgi (51): org.apache.camel.spring; version=""2.2.0.SNAPSHOT""
Apache ServiceMix Specs :: JAVA PERSISTENCE API 1.4 (52): javax.persistence; version=""1.1.1""
Apache ServiceMix Bundles: openjpa-1.2.1 (62): org.apache.openjpa.enhance; version=""1.2.1""
Apache ServiceMix Bundles: openjpa-1.2.1 (62): org.apache.openjpa.util; version=""1.2.1""
Spring ORM (63): org.springframework.orm.jpa; version=""2.5.6.SEC01""
Spring ORM (63): org.springframework.orm.jpa.vendor; version=""2.5.6.SEC01""
camel-jpa (64): org.apache.camel.component.jpa; version=""2.2.0.SNAPSHOT""
wrap_mvn_hsqldb_hsqldb_1.8.0.7 (65): org.hsqldb; version=""0.0.0""
camel-juel (76): org.apache.camel.language.juel; version=""2.2.0.SNAPSHOT""
camel-jaxb (82): org.apache.camel.converter.jaxb; version=""2.2.0.SNAPSHOT""","davsclaus:1264138467:2010-01-22T13:34:27.730+0000:1264138467:2010-01-22T13:34:27.730+0000:Its just some DEBUG info, not a bug etc.

Maybe we should lower it to TRACE so it wont be listed, unless people really enable TRACE logging.
njiang:1264711940:2010-01-29T04:52:20.491+0000:1264711940:2010-01-29T04:52:20.491+0000:Changed the DefaultPackageScanClassResolver log of java.lang.ClassNotFoundException to be trace.
trunk
http://svn.apache.org/viewvc?rev=904022&view=rev"
0,CAMEL-2265,Task,Minor,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-07 12:53:29+00:00,2010-11-03 05:12:54+00:00,"We only use spring-context.jar as optional dep. as we use the Spring JMX annotations.
We don't need to drag in spring-core and spring-beans.


Wonder why Spring haven't created a single independent jar with the annotations.","davsclaus:1260161876:2009-12-07T12:57:56.833+0000:1260162038:2009-12-07T13:00:38.241+0000:{code}
[INFO] [dependency:tree]
[INFO] org.apache.camel:camel-core:bundle:2.2-SNAPSHOT
[INFO] +- commons-logging:commons-logging-api:jar:1.1:compile
[INFO] +- org.fusesource.commonman:commons-management:jar:1.0:compile
[INFO] +- org.springframework:spring-context:jar:2.5.6:compile
[INFO] +- junit:junit:jar:3.8.2:test
[INFO] +- commons-logging:commons-logging:jar:1.1.1:test (scope not updated to compile)
[INFO] +- log4j:log4j:jar:1.2.14:test
[INFO] +- org.springframework:spring-aop:jar:2.5.6:test
[INFO] |  +- aopalliance:aopalliance:jar:1.0:test
[INFO] |  +- org.springframework:spring-beans:jar:2.5.6:test
[INFO] |  \- org.springframework:spring-core:jar:2.5.6:test
[INFO] +- javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO] |  +- javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO] |  \- javax.activation:activation:jar:1.1:compile
[INFO] \- com.sun.xml.bind:jaxb-impl:jar:2.1.12:compile
{code}
davsclaus:1260163810:2009-12-07T13:30:10.033+0000:1260163810:2009-12-07T13:30:10.033+0000:trunk: 887921.
davsclaus:1260163828:2009-12-07T13:30:28.292+0000:1260163828:2009-12-07T13:30:28.292+0000:Also came-spring could be reduced a little as well"
0,CAMEL-2264,New Feature,Major,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-07 12:34:24+00:00,2010-11-03 05:12:54+00:00,No Desc,"njiang:1260427873:2009-12-10T14:51:13.685+0000:1260427873:2009-12-10T14:51:13.685+0000:trunk
http://svn.apache.org/viewvc?rev=887914&view=rev
also update the wiki page."
0,CAMEL-2263,Sub-task,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Martin Krasser,Martin Krasser,0,0,2009-12-07 09:31:21+00:00,2010-11-03 05:12:50+00:00,No Desc,
0,CAMEL-2262,Improvement,Minor,"2.0.0, 2.1.0",2.4.0,"
None
",Closed,Won't Fix,2.4.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-05 17:04:16+00:00,2011-04-24 10:00:47+00:00,"Currently onCompletion always runs in a async manner as a separate task.


We should add option to offer end user to configure this behavior and either run it
a) sync in current thread
b) async in a new thread from a thread pool


Where b will copy the Exchange and run its own life. And a will use existing Exchange and run in current thread, which potentially affects the outcome if it throws an Exception etc.","davsclaus:1262841929:2010-01-07T13:25:29.096+0000:1262841929:2010-01-07T13:25:29.096+0000:onCompletion is meant for additional work after the original Exchange has completed
davsclaus:1274836722:2010-05-26T09:18:42.776+0000:1274836722:2010-05-26T09:18:42.776+0000:A 2nd thought this may bring a value to have that easy Camel routing doing special stuff when an Exchange failed. And it does that sync
davsclaus:1274912886:2010-05-27T06:28:06.506+0000:1274912886:2010-05-27T06:28:06.506+0000:I have played with this a bit more and it do get a bit to complex in terms of error handling if the original Exchange failed with an exception. And then another exception occurs during onCompletion etc.

And whether or not the Exchange should be able to be changed in the onCompletion, where as in the {{async}} case it should not.
davsclaus:1303610447:2011-04-24T10:00:47.279+0000:1303610447:2011-04-24T10:00:47.279+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2261,Improvement,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Won't Fix,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-05 13:32:06+00:00,2010-11-03 05:12:50+00:00,"Currently exceptions is logged at WARN level when synchronization hooks is executed one by one.


We should also gather those exceptions in a exchange and throw that so the entire Exchange fails.",davsclaus:1260152080:2009-12-07T10:14:40.337+0000:1260152080:2009-12-07T10:14:40.337+0000:Lets keep current behavior
0,CAMEL-2260,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.2.0,Jonathan Anstey,Jonathan Anstey,0,0,2009-12-04 17:44:08+00:00,2010-11-03 05:12:50+00:00,"Getting the following error when i run camel-example-spring-javaconfig 


[.spring.javaconfig.Main.main()] MainSupport                    INFO  Apache Camel 2.2-SNAPSHOT stopping
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] 


Class file [org/osgi/framework/BundleContext.class] not found","janstey:1259919904:2009-12-04T17:45:04.100+0000:1259919904:2009-12-04T17:45:04.100+0000:janstey@mojo:/x1/apache/camel-trunk/examples/camel-example-spring-javaconfig$ svn ci -m ""CAMEL-2260 - put felix lib back on javaconfig example's classpath""
Sending        camel-example-spring-javaconfig/pom.xml
Transmitting file data .
Committed revision 887294.
"
0,CAMEL-2259,Bug,Minor,1.6.2,1.6.3,"
None
",Closed,Fixed,1.6.3,Claus Ibsen,Claus Ibsen,0,0,2009-12-04 17:40:49+00:00,2011-01-17 16:50:37+00:00,"Only affects 1.x versions and only applies in very rare cases such as from this user forum
http://old.nabble.com/NullPointerException-in-FileComponent-td26594231.html","davsclaus:1259919748:2009-12-04T17:42:28.947+0000:1259919748:2009-12-04T17:42:28.947+0000:1.x: 887291.
davsclaus:1295254237:2011-01-17T16:50:37.744+0000:1295254237:2011-01-17T16:50:37.744+0000:Closing all 1.x tickets"
0,CAMEL-2258,New Feature,Minor,2.1.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2009-12-04 16:16:20+00:00,2015-03-25 08:21:15+00:00,"Camel creates the processor at runtime based on the route definitions.


What if you want to adjust a processor at runtime, such as a Throttler, Delayer etc.


What needs is something like



from(myEndpoint).throttle(200).id(""myThrottler"").to(myOtherEndpoint);




And the lookup



Throttler throttler = context.lookupProcessor(""myThrottler"", Throttler.class);
throttler.setMaximumRequestsPerPeriod(500);","davsclaus:1259914715:2009-12-04T16:18:35.594+0000:1259914715:2009-12-04T16:18:35.594+0000:Its a little tricky to lookup as Processor dont have ids assigned at runtime, so you gotta find its definition and then traverse the routes to find this definition in the channel to be able to find the processor. Phev
davsclaus:1282777402:2010-08-26T07:03:22.633+0000:1282777402:2010-08-26T07:03:22.633+0000:We should consider some API changes in 3.0 which makes Processors having id's using the {{HasId}} marker interface.
davsclaus:1427242875:2015-03-25T08:21:15.210+0000:1427242875:2015-03-25T08:21:15.210+0000:There is a getProcessor api on context to do this"
0,CAMEL-2257,Bug,Major,"1.6.3, 2.1.0",None,"
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Willem Jiang,0,0,2009-12-04 13:46:31+00:00,2010-11-03 05:12:50+00:00,"Only the last package specify the version number.



camel-jpa (64): org.apache.camel.component.jpa; version=0.0.0
camel-jpa (64): org.apache.camel.processor.idempotent.jpa; version=0.0.0
camel-jpa (64): org.apache.camel.processor.interceptor.jpa; version=2.2.0.SNAPSHOT

camel-atom (124): org.apache.camel.component.atom; version=""0.0.0""
camel-atom (124): org.apache.camel.component.feed; version=""2.2.0.SNAPSHOT""","njiang:1259912645:2009-12-04T15:44:05.147+0000:1259912645:2009-12-04T15:44:05.147+0000:trunk
http://svn.apache.org/viewvc?rev=887196&view=rev
camel-1.x 
http://svn.apache.org/viewvc?rev=887221&view=rev
"
0,CAMEL-2256,Task,Major,None,None,"
None
",Closed,Fixed,"1.6.3, 2.2.0",Willem Jiang,Willem Jiang,0,0,2009-12-04 13:41:45+00:00,2010-11-03 05:12:50+00:00,There are some components pom still block the import package of javax.xml.bind.annotation.adapters,"njiang:1259912471:2009-12-04T15:41:11.015+0000:1259912471:2009-12-04T15:41:11.015+0000:trunk
 http://svn.apache.org/viewvc?rev=887196&view=rev
camel-1.x 
 http://svn.apache.org/viewvc?rev=887221&view=rev"
0,CAMEL-2255,Bug,Major,2.2.0,None,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-04 08:20:59+00:00,2010-11-03 05:12:49+00:00,"Here is the stack trace.



[  Camel thread 0: JpaComponent] JuelExpression                 DEBUG No
impl class for juel ExpressionFactory defined in
'META-INF/services/org/apach
e/camel/component/el'
org.apache.camel.NoFactoryAvailableException: Could not find factory class
for resource: META-INF/services/org/apache/camel/component/juel
        at
org.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:135)
        at
org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:77)
        at
org.apache.camel.language.juel.JuelExpression.getExpressionFactory(JuelExpression.java:81)
        at
org.apache.camel.language.juel.JuelExpression.evaluate(JuelExpression.java:70)
        at
org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:94)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
        at
org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
        at
org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:93)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:223)
        at
org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:153)
        at
org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:91)
        at
org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
        at
org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:206)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:74)
        at
org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
        at
org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at
org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:67)
        at
org.apache.camel.component.jpa.JpaConsumer.processBatch(JpaConsumer.java:133)
        at
org.apache.camel.component.jpa.JpaConsumer$1.doInJpa(JpaConsumer.java:86)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1$1.doInJpa(JpaTemplateTransactionStrategy.java:81)
        at
org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:184)
        at
org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:147)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy$1.doInTransaction(JpaTemplateTransactionStrategy.java:79)
        at
org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
        at
org.apache.camel.component.jpa.JpaTemplateTransactionStrategy.execute(JpaTemplateTransactionStrategy.java:77)
        at
org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:70)
        at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
        at
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at
java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)",njiang:1259887018:2009-12-04T08:36:58.649+0000:1259887018:2009-12-04T08:36:58.649+0000:http://svn.apache.org/viewvc?rev=887107&view=rev
0,CAMEL-2254,Improvement,Major,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-03 12:32:17+00:00,2010-11-03 05:12:49+00:00,"So you can have multiple routes with different transaction propagations


route a - required
route b - requires new


Then let a message route a -> b.
And in case b should rollback then a can still be comitted
But also the entire route should be able to rollback


And hence why we need to introduce a new keyword markRollbackLocalOnly() in the DSL which can be used to say that in case route B fails then just rollback this route but the outer transaction should still be comitted.","davsclaus:1259820575:2009-12-03T14:09:35.331+0000:1259820575:2009-12-03T14:09:35.331+0000:trunk: 886781.

And at DEBUG level you can see the transaction begin/commit/rollback events. For example here we got an outer and inner TX where its the inner that rollback while the outer commits.
{code}
2009-12-03 15:08:28,793 [main           ] DEBUG TransactionErrorHandler        - Transaction begin (0x2bed82) for ExchangeId: 8e034445-a6ad-4504-8a1a-1cebe129cee4
2009-12-03 15:08:29,884 [main           ] DEBUG TransactionErrorHandler        - Transaction begin (0x967db7) for ExchangeId: 8e034445-a6ad-4504-8a1a-1cebe129cee4
2009-12-03 15:08:29,886 [main           ] DEBUG TransactionErrorHandler        - Transaction rollback (0x967db7) for ExchangeId: 8e034445-a6ad-4504-8a1a-1cebe129cee4
2009-12-03 15:08:29,887 [main           ] DEBUG TransactionErrorHandler        - Transaction commit (0x2bed82) for ExchangeId: 8e034445-a6ad-4504-8a1a-1cebe129cee4
{code}
davsclaus:1259820614:2009-12-03T14:10:14.650+0000:1259820614:2009-12-03T14:10:14.650+0000:Updated wiki page with an example 
http://cwiki.apache.org/confluence/display/CAMEL/Transactional+Client

See section - Using multiple routes with different propagation behaviors"
0,CAMEL-2253,New Feature,Major,None,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-03 10:09:23+00:00,2011-04-24 10:00:58+00:00,"See nabble
http://old.nabble.com/handled-exception-in-sub-route-td26623326.html","davsclaus:1273645156:2010-05-12T14:19:16.174+0000:1273645156:2010-05-12T14:19:16.174+0000:Will add a {{continued}} option you can use instead of {{handled}} which works as handled by then it will continue routing as if the exception did not occur.
davsclaus:1273651070:2010-05-12T15:57:50.277+0000:1273651070:2010-05-12T15:57:50.277+0000:trunk: 943561.

Need documentation at wiki pages
davsclaus:1273657828:2010-05-12T17:50:28.465+0000:1273657828:2010-05-12T17:50:28.465+0000:Added wiki documentation
https://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause
davsclaus:1303610458:2011-04-24T10:00:58.018+0000:1303610458:2011-04-24T10:00:58.018+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2252,Improvement,Major,2.1.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-03 09:48:45+00:00,2010-11-03 05:12:49+00:00,"The TransactionErrorHandler can be simplified since its now based on the default error handlers from camel-core.


It does not have to wrap every single process in a Spring TX but can rely on the outer most transaction to handle that and let the inner ones be non wrapped (= default).
And we should DEBUG/TRACE log that the starting and endpoint point of the TX with an end status of commit / rollback",davsclaus:1259820508:2009-12-03T14:08:28.940+0000:1259820508:2009-12-03T14:08:28.940+0000:trunk: 886781.
0,CAMEL-2251,Bug,Major,"2.0-M2, 2.0-M3, 2.0.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Willem Jiang,0,0,2009-12-03 09:36:37+00:00,2010-11-03 05:12:49+00:00,The defaultBus could be polluted in the container like ServceMix.,njiang:1259805623:2009-12-03T10:00:23.544+0000:1259805623:2009-12-03T10:00:23.544+0000:http://svn.apache.org/viewvc?rev=886726&view=rev
0,CAMEL-2250,Bug,Minor,"2.0.0, 2.1.0",2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-12-03 07:12:16+00:00,2010-11-03 05:12:49+00:00,We had a similar issue recently with the routing slip. The same goes for intercept send to endpoint.,davsclaus:1259797491:2009-12-03T07:44:51.583+0000:1259797491:2009-12-03T07:44:51.583+0000:trunk: 886693.
0,CAMEL-2249,Bug,Major,2.0.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Christian Schneider,0,1,2009-12-02 22:54:20+00:00,2010-01-08 15:24:09+00:00,"Camel jms seems to contain two bugs in correlation id handling.


The first shows when you have a sender that has UseMessageIDAsCorrelationID=""false"" and a server that has UseMessageIDAsCorrelationID=""true"". If you send a message with correlationId=""a"" then the response message will contain correlationId=""<request message id>"". Even if this could be a valid behaviour as you wanted UseMessageIDAsCorrelationID=""true"" I don´t think it makes sense as the sender will not be able to correlate the message. So for this case I propose to only set the correlation id to the request message id on the server if the correlation id of the request was not set.


The second bug seems to hide the first bug. Perhaps someone found a quick (and wrong way to make the tests work). It shows when you set UseMessageIDAsCorrelationID=""true"" on both client and server. If you send a message with correlation id = ""a"" the client sends it out with this correlation id. The server then sets the correlation id to the request message id (first bug). Then on the client the reply is received. After that the correlation id is set back to ""a"" on the client. So the tests think all is well. This part of the code should be removed.


I have marked both problems in the code with FIXME markers in my patch. I can also provide a patch with the solution but first I wanted to only show the problem and provide a failing test. 


Hope my explanations were not to confused","cschneider:1259765720:2009-12-02T22:55:20.248+0000:1259765720:2009-12-02T22:55:20.248+0000:Patch that shows where the problems are and that contains a currently failing unit test. 
maratb:1259774697:2009-12-03T01:24:57.167+0000:1259774775:2009-12-03T01:26:15.760+0000:Hi Christian,

I generally agree that JMS Message correlationID value should supersede the messageID value. Realize though that both configuration assertions and the statement I just made in the previous sentence are all out of band agreements. So one can argue either way.

However, let me give you an example when this will break down. Certain brokers, namely IBM MQ will modify your correlationID value using their proprietary encoding. So what you're going to get back in the reply message will be very different from what you set on the request message on the producer side.

So here the scenario: 

produce  ->       1     -> consume  - > produce ->      2       -> consume
---------------   ActiveMQ ------------------------------    IBM MQ
consume <-      4    <-  produce    <- consume <-     3     <- produce

1. correlationID = C,  messageID = M
2. correlationID = C!,   messageID = M1
3. correlationID = M1,   messageID = M2
4. correlationID = C

C! - is IBM mangled C value

I'd check with Suemas and ask him to review your changes and run against the tests suites as I suspect if your changes were to be applied certain tests that depend on Camel will fail.

Cheers,
Marat
cschneider:1259796475:2009-12-03T07:27:55.622+0000:1259796475:2009-12-03T07:27:55.622+0000:I was just browsing the net for some more info. One page is from oracle:
http://download.oracle.com/docs/cd/E13171_01/alsb/docs25/interopjms/MsgIDPatternforJMS.html

There they describe how IBM MQ uses the correlation id. So if the useMessageIdAsCorrelationId was meant in this way it could be correct. Still I would rather expect the client to not set a correaltion id if it wants this pattern. 

The following thread is also interesting: http://www.theserverside.com/discussions/thread.tss?thread_id=44779
It says that the message id of a message can change over it´s lifetime. So if I understand this correctly it could mean that setting the correlation id to the message id could fail as this id could be different to the client´s message id.

  
cschneider:1262708304:2010-01-06T00:18:24.868+0000:1262708304:2010-01-06T00:18:24.868+0000:Are there any news about this issue? We still have the incompatibility between CXF / Camel and pure CXF. I can help some more by providing a complete patch with a solution. It would help me though if we could discuss how the ""useMessageIdAsCorrelationId"" feature should behave before I do the coding.

Especially I need to know if the correlation id of the incoming message should be used as correlation id in the reply instead of the messageId if it is set.

david@davidkarlsen.com:1262709096:2010-01-06T00:31:36.749+0000:1262709096:2010-01-06T00:31:36.749+0000:How about making it configurable, but with Collection by MessageID as default.
(And act according to the ""spec"" in oracle link).
This is the pattern I've seen most widespread and how I used it for JMS/MQ/zOS integration.

""Correlation by MessageID is commonly used by many IBM MQ applications as well as JMS applications and is the standard method to correlate request and response.""
cschneider:1262742159:2010-01-06T09:42:39.671+0000:1262742159:2010-01-06T09:42:39.671+0000:I also like using the messageId for correaltion. The question is what to do when the sender already has set a correlation id. Currently camel will discard the correlation id and still set the message id as correaltion id of the response. I think this is wrong as the sender expresses that he expects to get the correlation id back that he set on the request message.  

So I think we can do one of two things to correct this:
The first way is to always use the correlation id of the request if it was set.
The second way could be to add a config option that controls if the above behaviour should be actived.

Which solution should be done? Are there other possible solutions?

davsclaus:1262749355:2010-01-06T11:42:35.142+0000:1262749355:2010-01-06T11:42:35.142+0000:SI is also discussing a similar issue at their forum
http://forum.springsource.org/showthread.php?t=82368
david@davidkarlsen.com:1262750632:2010-01-06T12:03:52.923+0000:1262750632:2010-01-06T12:03:52.923+0000:I'd say make it configurable - it shouldn't be a lot of work to support both ""protocols"".
Log warnings if correlationId is set when not expected etc.
davsclaus:1262835199:2010-01-07T11:33:19.003+0000:1262835199:2010-01-07T11:33:19.003+0000:Yeah add an option to control the desired behavior.

And remember we need unit tests to cover this as JMS is always tricky
cschneider:1262909199:2010-01-08T08:06:39.006+0000:1262909199:2010-01-08T08:06:39.006+0000:Added a fix and test. If useMessageId as correlationId is true then the correlationId is still forced to be the messageId. The difference now is that when useMessageIdasCorrelationId is false and the incoming correlationid is not set then the correlationId is set to the messageId (as a fallback).

davsclaus:1262918023:2010-01-08T10:33:43.605+0000:1262918023:2010-01-08T10:33:43.605+0000:trunk: 897159.

Thanks for the patch Christian.
cschneider:1262935203:2010-01-08T15:20:03.402+0000:1262935203:2010-01-08T15:20:03.402+0000:Did you have the chance to look into the code block I removed from the JmsProducer

// FIXME remove: I think this does not make sense
+//                if (correlationId != null) {
+//                    message.setJMSCorrelationID(correlationId);
+//                    exchange.getOut().setHeader(""JMSCorrelationID"", correlationId);
+//                }

It looked wrong to me to set the incoming correlation id to something different but perhaps it has some reason I did not understand.
cschneider:1262935429:2010-01-08T15:23:49.116+0000:1262935429:2010-01-08T15:23:49.116+0000:I just looked into the code you committed and the comment explained what the code block was good for. So I guess my question is answered."
0,CAMEL-2218,Improvement,Major,None,None,"
None
",Closed,Fixed,2.2.0,Moulliard Charles,Moulliard Charles,0,0,2009-11-24 08:54:25+00:00,2010-11-03 05:12:46+00:00,"Rename feature file of camel to be in line with naming convention followed for servicemix, karaf and nmr feature file


apache-servicemix-nmr-1.1.0-SNAPSHOT-features.xml
apache-servicemix-4.1.0-20091116.072453-30-features.xml
apache-felix-karaf-1.1.0-SNAPSHOT-features.xml


Proposition :


 features-2.1-SNAPSHOT-features.xml --> apache-camel-2.1-SNAPSHOT-features.xml",cmoulliard:1260767960:2009-12-14T13:19:20.179+0000:1260767960:2009-12-14T13:19:20.179+0000:change committed : 890304
0,CAMEL-2217,Improvement,Major,"2.0.0, 2.1.0",None,"
None
",Closed,Won't Fix,None,Willem Jiang,Moulliard Charles,0,0,2009-11-24 08:49:40+00:00,2010-02-07 09:58:28+00:00,Feature file of camel does not include cxf-rs for RESTful services,"cmoulliard:1259026005:2009-11-24T09:26:45.474+0000:1259026005:2009-11-24T09:26:45.474+0000:I'm not sure that we need additional bundles. Here is what servicemix feature file has defined :

<feature name=""cxf-jaxrs"" version=""4.1.0-SNAPSHOT"">
<feature version=""4.1.0-SNAPSHOT"">cxf-osgi</feature>
<bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.abdera/0.4.0-incubating_1</bundle>
<bundle>mvn:org.codehaus.jettison/jettison/1.1</bundle>
<bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlbeans/2.4.0_2</bundle>
<bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jsr311-api-1.0/1.4-SNAPSHOT</bundle>
</feature>

Camel cxf feature file already includes :
- org.apache.servicemix.specs.jsr311-api (1.3.0)
- xmlbeans (2.4)
- jettison (1.1)
- abdera
njiang:1259628550:2009-12-01T08:49:10.351+0000:1259628550:2009-12-01T08:49:10.351+0000:cxf bundle is an all in one bundle, it includes cxf-rs and cxf-soap implementation.
camel-cxf features has all the required jars."
0,CAMEL-2216,Bug,Major,"1.3.0, 1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0",None,"
None
",Closed,Fixed,"1.6.3, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-11-24 08:33:01+00:00,2010-11-27 06:14:08+00:00,"Sergey reported some bug  recently ,  after digging the code I found current camel-cxf's get defaultBus code is not safe to use when we deploy the camel route into the JBI container or OSGi container.


So we need to create the new bus if there is no bus set into the camel-cxf endpoint.","njiang:1259022847:2009-11-24T08:34:07.273+0000:1259022847:2009-11-24T08:34:07.273+0000:SMX4-422 issue should be resolved from camel-cxf side.
sergey_beryozkin:1259026955:2009-11-24T09:42:35.485+0000:1259026955:2009-11-24T09:42:35.485+0000:Willem, I have tested the updated camel-cxf component and it actually works really well now on the producer side in a pure JBI SU.

Thanks for your help :-)

Sergey 
njiang:1259041932:2009-11-24T13:52:12.817+0000:1259041932:2009-11-24T13:52:12.817+0000:trunk
http://svn.apache.org/viewvc?rev=883667&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=883695&view=rev
davsclaus:1275521142:2010-06-03T07:25:42.269+0000:1275521142:2010-06-03T07:25:42.269+0000:Closing old resolved issues"
0,CAMEL-2215,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-24 05:37:35+00:00,2010-06-03 07:25:42+00:00,"CaseInsensitiveMap should be fully serializable


See nabble
http://old.nabble.com/DataSet-header-%7BCamelDataSetIndex%3D0%7D-causes-failure-to26487985.html","davsclaus:1259013915:2009-11-24T06:05:15.243+0000:1259013915:2009-11-24T06:05:15.243+0000:trunk: 883598.
davsclaus:1275521142:2010-06-03T07:25:42.048+0000:1275521142:2010-06-03T07:25:42.048+0000:Closing old resolved issues"
0,CAMEL-2214,Bug,Major,2.0.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Stanley J. Lewis,Stanley J. Lewis,0,0,2009-11-23 19:43:29+00:00,2011-04-24 10:01:42+00:00,"If a feed contains entries that don't have an updatedDate or publishDate and you're using splitEntries=true + sortEntries=true you can run into this NPE:



2009-11-23 14:31:50,152 [0: RssComponent] WARN  ultPollingConsumerPollStrategy -
 Consumer Consumer[rss://http://www.iafrica.com/pls/cms/grapevine.xml?consumer.initialDelay=9000&p_city=cape+town&p_section=weather&sortEntries=true&splitEntries=true] 
could not poll endpoint: rss://http://www.iafrica.com/pls/cms/grapevine.xml?consumer.initialDelay=9000&p_city=cape+town&p_section=weather&sortEntries=true&splitEntries=true 
caused by: null
java.lang.NullPointerException
	at org.apache.camel.component.rss.RssDateComparator.compare(RssDateComparator.java:27)
	at org.apache.camel.component.rss.RssDateComparator.compare(RssDateComparator.java:24)
	at java.util.Arrays.mergeSort(Arrays.java:1270)
	at java.util.Arrays.mergeSort(Arrays.java:1281)
	at java.util.Arrays.sort(Arrays.java:1210)
	at java.util.Collections.sort(Collections.java:159)
	at org.apache.camel.component.rss.RssEntryPollingConsumer.sortEntries(RssEntryPollingConsumer.java:49)
	at org.apache.camel.component.rss.RssEntryPollingConsumer.populateList(RssEntryPollingConsumer.java:42)
	at org.apache.camel.component.feed.FeedEntryPollingConsumer.poll(FeedEntryPollingConsumer.java:43)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:108)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:637)","slewis:1258978429:2009-11-23T20:13:49.115+0000:1258978429:2009-11-23T20:13:49.115+0000:Patch that avoids the NPE
slewis:1266323975:2010-02-16T20:39:35.832+0000:1266323975:2010-02-16T20:39:35.832+0000:Sending        src/main/java/org/apache/camel/component/rss/RssDateComparator.java
Transmitting file data .
Committed revision 910680.

davsclaus:1303610502:2011-04-24T10:01:42.187+0000:1303610502:2011-04-24T10:01:42.187+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2213,Sub-task,Major,None,None,"
None
",Closed,Incomplete,None,Unassigned,Moulliard Charles,0,0,2009-11-23 08:33:27+00:00,2011-04-24 10:00:36+00:00,No Desc,"davsclaus:1273188473:2010-05-07T07:27:53.753+0000:1273188473:2010-05-07T07:27:53.753+0000:Could you elaborate what you mean?
davsclaus:1273917580:2010-05-15T17:59:40.561+0000:1273917580:2010-05-15T17:59:40.561+0000:Please report tickets with more details, so we know what the issue is.
davsclaus:1303610436:2011-04-24T10:00:36.461+0000:1303610436:2011-04-24T10:00:36.461+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2212,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-22 14:11:51+00:00,2010-06-03 07:25:41+00:00,This makes simulating errors easier as we can just throw an exception and then Camel wont send to the intended endpoint.,"davsclaus:1258933410:2009-11-23T07:43:30.817+0000:1258933410:2009-11-23T07:43:30.817+0000:trunk: 883262.
davsclaus:1275521141:2010-06-03T07:25:41.886+0000:1275521141:2010-06-03T07:25:41.886+0000:Closing old resolved issues"
0,CAMEL-2211,Task,Major,2.0.0,2.1.0,"
None
",Closed,Won't Fix,2.1.0,Unassigned,Claus Ibsen,0,0,2009-11-22 10:23:42+00:00,2010-06-03 07:25:41+00:00,"See nabble where there is also a sample application to demonstrate the issue
http://old.nabble.com/Jms-remoting-failover-problem-to26412022.html","davsclaus:1259014197:2009-11-24T06:09:57.349+0000:1259014197:2009-11-24T06:09:57.349+0000:Use network of brokers
davsclaus:1275521141:2010-06-03T07:25:41.560+0000:1275521141:2010-06-03T07:25:41.560+0000:Closing old resolved issues"
0,CAMEL-2210,Sub-task,Minor,1.6.2,None,"
None
",Closed,Fixed,1.6.3,Willem Jiang,Claus Ibsen,0,0,2009-11-21 11:54:14+00:00,2011-01-17 16:50:37+00:00,No Desc,"njiang:1259801047:2009-12-03T08:44:07.221+0000:1259801047:2009-12-03T08:44:07.221+0000:camel 1.x branch
http://svn.apache.org/viewvc?rev=886092&view=rev
http://svn.apache.org/viewvc?rev=886093&view=rev
davsclaus:1295254237:2011-01-17T16:50:37.135+0000:1295254237:2011-01-17T16:50:37.135+0000:Closing all 1.x tickets"
0,CAMEL-2209,Bug,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-21 09:27:48+00:00,2010-06-03 07:25:41+00:00,"Also an issue from
http://old.nabble.com/Original-message-body-lost-in-transacted-route-to26451809.html


This issue is because the JmsMessage is still set as the IN message object and it contain the backing javax.jms.Message object. So when you for example use the setBody DSL to set a {{null} body or empty body then it may fallback and look into the specialized JmsMessage object.


Set SetBodyProcessor should set a new DefaultMessage with the headers propagated and the new body evaluated.","davsclaus:1258775566:2009-11-21T11:52:46.656+0000:1258775566:2009-11-21T11:52:46.656+0000:trunk: 882887.
davsclaus:1275521141:2010-06-03T07:25:41.385+0000:1275521141:2010-06-03T07:25:41.385+0000:Closing old resolved issues"
0,CAMEL-2208,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-21 09:10:56+00:00,2010-06-03 07:25:41+00:00,"When using transacted routes and you also use Camel error handling then it gets complicated.


However when Camel is instructed to do redelivery such as using



            onException(Exception.class)
                    .handled(true)
                    .useOriginalBody()
                    .maximumRedeliveries(2)
                    .to(""mock:error"");




Then when a redelivery is attempted it happens from the start of the route, where as its supposed to happen on that failing part of the route directly.
As it does for non transacted routes.


See nabble
http://old.nabble.com/Original-message-body-lost-in-transacted-route-to26451809.html","davsclaus:1258769228:2009-11-21T10:07:08.647+0000:1258769228:2009-11-21T10:07:08.647+0000:trunk: 882870.
davsclaus:1275521141:2010-06-03T07:25:41.203+0000:1275521141:2010-06-03T07:25:41.203+0000:Closing old resolved issues"
0,CAMEL-2207,Improvement,Minor,2.0.0,2.6.0,"
None
",Closed,Later,2.6.0,James Strachan,Barry Kaplan,0,0,2009-11-20 22:17:31+00:00,2011-04-24 09:57:54+00:00,"RichExchange declares most of its methods using Any. But the underlying java methods declare the corresponding arguments with Object. 


For most use cases this won't matter, but statements like the following do not compile:


   if (m.erasure.isAssignableFrom(exchange.in.getClass)) { ...","davsclaus:1258772816:2009-11-21T11:06:56.889+0000:1258772816:2009-11-21T11:06:56.889+0000:Barry feel free to contribute patches on the camel-scala
memelet:1258989993:2009-11-23T23:26:33.129+0000:1258989993:2009-11-23T23:26:33.129+0000:This patch is against the 2.0, but after the 2.8 patch I submitted and was applied to trunk. Right now I can't get trunk to compile. But the changes are trivial.
memelet:1258990146:2009-11-23T23:29:06.687+0000:1258990166:2009-11-23T23:29:26.915+0000:patch update
memelet:1258996737:2009-11-24T01:18:57.235+0000:1258996737:2009-11-24T01:18:57.235+0000:This patch is bogus. I broke lots of tests. (I thought the tests passed but they did not run.)
davsclaus:1293765870:2010-12-31T11:24:30.727+0000:1293765870:2010-12-31T11:24:30.727+0000:We'll revisit camel-scala later.

And if someone in the Scala community step up and help work on camel-scala.
davsclaus:1303610274:2011-04-24T09:57:54.554+0000:1303610274:2011-04-24T09:57:54.554+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2206,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Stephen Gargan,0,0,2009-11-20 02:57:51+00:00,2010-06-03 07:25:40+00:00,"I've been using a different kind of sampling based throttling pattern recently and figured others might find it useful. The basic premise is the same as the current throttler, there is a consumer downstream that has specific requirements as to how fast it can process incoming exchanges and a mechanism is required to 'throttle' the exchanges inbound to it. The difference between the current throttler implementation and the sampling throttler is that where the current  throttler queues up all the exchanges it receives, the sampling throttler will allow only a single exchange through for a period and 'drop' all others; dropped exchanges being passed to a stop processor to complete them.


Its been  useful for situations where a route receives many semantically equivalent exchanges in a time period, any single one of which could be used to represent them all. For example, say an upstream component generates a stream of warning alarms and sends these to an email processor to inform the operator. An email for each alarm would be overkill instead one every x minutes or so would be preferred. Also it would be undesirable for the throttler to queue up these warning alarms as when the upstream component ceases sending them the emails should cease. Sampling the warnings would pick one for each x minute period, and stop the rest. 


This would be defined via the java dsl as follows



from(""direct:alarm-notifier"").sample(60, TimeUnit.SECONDS).to(""direct:alarm-emailer"")



or



from(""direct:alarm-notifier"").sample().samplePeriod(1).timeUnits(TimeUnit.SECONDS).to(""direct:alarm-emailer"")



or with a default of one per second 



from(""direct:alarm-notifier"").sample().to(""direct:alarm-emailer"")



In spring xml it looks like 



<route>
  <from uri=""direct:sample"" />
  <sample>
    <to uri=""mock:result"" />
  </sample>
</route>




or



<route>
  <from uri=""direct:sample"" />
  <sample samplePeriod=""1"" units=""seconds"">
    <to uri=""mock:result"" />
  </sample>
</route>




If this patch is accepted, I'd be happy to update the wiki with the required documentation. As per ususal I've split the patches, one for core and one for spring","davsclaus:1258686265:2009-11-20T11:04:25.827+0000:1258686265:2009-11-20T11:04:25.827+0000:Stephen looks really great.

I cannot find the class 
   import org.apache.camel.builder.xml.TimeUnitAdapter;

in the patch. Can you attach that file also?

We would definitely like to add this to the Camel. Thanks for contributing.
davsclaus:1258686419:2009-11-20T11:06:59.411+0000:1258686419:2009-11-20T11:06:59.411+0000:Lets see if we can get it into 2.1
sgargan:1258713416:2009-11-20T18:36:56.829+0000:1258713416:2009-11-20T18:36:56.829+0000:Complete core patch this time.
sgargan:1258714282:2009-11-20T18:51:22.596+0000:1258714282:2009-11-20T18:51:22.596+0000:Whoops sorry about that. I've added the Adapter and updated the javadoc. If you give me write access for the path http://camel.apache.org/sampling.html write up the doc for it.

Nice one,

Stephen.
davsclaus:1258754947:2009-11-21T06:09:07.081+0000:1258754947:2009-11-21T06:09:07.081+0000:Stephen to edit the wiki pages you need to sign a ICLA

Read more here
http://camel.apache.org/how-do-i-edit-the-website.html

If you dont want to go that route you can create some form of documentation of the sampler and attach it to this JIRA and then I can create and edit the wiki page.

However by having the ICLA signed you are one step closer to contribute more and becoming a committer.
http://camel.apache.org/contributing.html
http://camel.apache.org/how-do-i-become-a-committer.html
davsclaus:1258772768:2009-11-21T11:06:08.577+0000:1258772768:2009-11-21T11:06:08.577+0000:I wonder if the DEBUG logging for skipped Exchange should be TRACE level.

Then it wont spam logs for high throughputs and you run with DEBUG logging.
And the Exchange that is picked up as sample you could log how many was skipped in that period

For example the log could be a DEBUG level something like:
Sampling exchange out of XXX in the last XXX units
sgargan:1258982317:2009-11-23T21:18:37.093+0000:1258982317:2009-11-23T21:18:37.093+0000:Claus,

I've made the changed you suggested. It may be marginally more efficient to calculate the stats by maintaining only the total number of samples and the total no of exchanges as the number dropped will always be the total - the no. sampled. I guess if you're running in TRACE mode though the question of efficiency is moot so for clarity I've used accumulators for each.

If you feel the need to change this or any other changes you see fit, then by all means make them, I do not mind ;)

I'll get back to you with the ICLA

Thanks,

ste
davsclaus:1259019960:2009-11-24T07:46:00.614+0000:1259019960:2009-11-24T07:46:00.614+0000:trunk: 883614.

Thanks a lot for the contribution Stephen.

I have committed it and create a wiki page
http://cwiki.apache.org/confluence/display/CAMEL/Sampling

When you have the ICLA in place you will be able to edit the documentations as well.

In the mean time feel free to comment/feedback the current wiki page.
davsclaus:1275521140:2010-06-03T07:25:40.460+0000:1275521140:2010-06-03T07:25:40.460+0000:Closing old resolved issues"
0,CAMEL-2205,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Karl Palsson,0,0,2009-11-19 17:29:03+00:00,2010-06-03 07:25:39+00:00,"I have static routes configured using the java DSL, but use bean properties on my route builder to provide custom endpoints for different environments, like so...



        from(sourceUriProperty)
                .to(""bean:fileParser"")
                .beanRef(""conanCore"", ""updateOperationFailure"")
                ;




If you forget to set the from URI property, the exception you get at application startup just says:  ""java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1""  (Full stack trace below..... but probably not really important... note that it never once mentions any of my own classes)


It would be nice if throw could be somewhere like in: 


RouteDefinition.java
 
    public List<RouteContext> addRoutes(CamelContext context, Collection<Route> routes) throws Exception {
       // other parts snipped...
        for (FromDefinition fromType : inputs) {
            // Throwing here would be nice,  fromType.description already has ""no uri or ref!"" so it already knows it's broken.
            RouteContext routeContext = addRoutes(routes, fromType);
            answer.add(routeContext);
        }
}




The RouteDefinition at that stage already contains things like: 
{{this = 

{org.apache.camel.model.RouteDefinition@5751}

""Route[[From[no uri or ref supplied!]] -> [To[bean:fileParser], Bean[ref:conanCore method: updateOperationFailure]]]""}}


So if we can explode there, you can clearly see what route you've screwed up.


Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1011)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:121)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469)
	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84)
	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:42)
	at org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:173)
	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:197)
	... 18 more
Caused by: java.lang.IllegalArgumentException: Either 'uri' or 'ref' must be specified on: org.apache.camel.impl.DefaultRouteContext@d6a3d1
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:117)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119)
	... 29 more","davsclaus:1258675535:2009-11-20T08:05:35.995+0000:1258675535:2009-11-20T08:05:35.995+0000:Good idea Karl.

Yeah lets have better error reporting.
davsclaus:1258677228:2009-11-20T08:33:48.107+0000:1258677228:2009-11-20T08:33:48.107+0000:Here is a sample the the error message now

{code}
Failed to create route route2 at: To[mock:result?foo=bar] in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of ....
{code}

I wonder if we should highlight the *at* by doing
{code}
Failed to create route route2 at >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of ....
{code}
davsclaus:1258685373:2009-11-20T10:49:33.248+0000:1258685373:2009-11-20T10:49:33.248+0000:trunk: 882492.
davsclaus:1275521139:2010-06-03T07:25:39.082+0000:1275521139:2010-06-03T07:25:39.082+0000:Closing old resolved issues"
0,CAMEL-2204,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Markus Wolf,0,0,2009-11-19 11:47:52+00:00,2010-06-03 07:25:38+00:00,"Since the package 'javax.xml.bind.annotation.adapters' is missing from the imports on camel-core we could not deploy our bundles on karaf.
On Java 6 this is no problem, since the package is bootdelegated anyway since its included in the JVM.","davsclaus:1258602900:2009-11-19T11:55:00.592+0000:1258602900:2009-11-19T11:55:00.592+0000:And you have tried with latest code from trunk?

And have the server totally restarted, eg. stop it completely and then use the 2.1-SNAPSHOT jars instead of 2.0
njiang:1258603800:2009-11-19T12:10:00.811+0000:1258603800:2009-11-19T12:10:00.811+0000:We exclude the importation of javax.xml.bind.annotation.adapters long time ago, I can't recall why we do this.
It's time to clean it up.


davsclaus:1258690138:2009-11-20T12:08:58.505+0000:1258690138:2009-11-20T12:08:58.505+0000:Willem whats the status of this?
njiang:1258695368:2009-11-20T13:36:08.280+0000:1258695368:2009-11-20T13:36:08.280+0000:It's easy to move the !javax.xml.bind.annotation.adapters, but I don't know if there are any side effect on current camel bundles.
I went through the came-core code , there are reference of the javax.xml.bind.annotation.adapters, but I don't know why we don't hit that kind of issue before.
Markus,  can I have a look at your camel context?
BTW,  did you try to load the jaxb which shipped by Servicemix.
{code}
    <bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.4-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/1.4-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.12_1</bundle>
{code}



knisterpeter:1258695746:2009-11-20T13:42:26.416+0000:1258695746:2009-11-20T13:42:26.416+0000:We have several bundles using camel. I'm not sure which one exactly does run into this problem. 
This is one of the contexts we have:
{noformat}<camel:camelContext id=""camel"">
	<camel:jmxAgent id=""camelJmxAgent""
		usePlatformMBeanServer=""true"" />
	<camel:routeBuilder ref=""bounceRoute"" />
</camel:camelContext>{noformat}
And this is the route builder relevant code:
{noformat}from(""quartz://bounces/pop3Timer?cron="" + this.cronExpression).beanRef(""pop3Job"");
from(""jms:topic:de.llynch.endion.reponse.rule-reset"").beanRef(""resetRuleProcessor"");{noformat}

Yes I tried with the servicemix bundles as well as with the spring bundles.
After adding the package import it does work well for us.
njiang:1258698748:2009-11-20T14:32:28.629+0000:1258698748:2009-11-20T14:32:28.629+0000:@ Markus,
Your camel context is normal for us, I don't think it hit the trigger of issue.
As I can't see any side effect so far, I will committed the fix shortly

njiang:1258699287:2009-11-20T14:41:27.987+0000:1258699287:2009-11-20T14:41:27.987+0000:trunk http://svn.apache.org/viewvc?rev=882575&view=rev

Will merge this fix back to camel 1.x if it don't break anything next week :)
davsclaus:1258775691:2009-11-21T11:54:51.453+0000:1258775691:2009-11-21T11:54:51.453+0000:Resolving this so there are no tickets blocking for 2.1.

Created sub ticket for backporting this to 1.x
davsclaus:1275521138:2010-06-03T07:25:38.482+0000:1275521138:2010-06-03T07:25:38.482+0000:Closing old resolved issues"
0,CAMEL-2203,New Feature,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-19 11:29:22+00:00,2010-06-03 07:25:38+00:00,"testConnectionOnStartup
	false	
Camel 2.1: Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensure that Camel is not started with failed connections.","davsclaus:1258601652:2009-11-19T11:34:12.354+0000:1258601652:2009-11-19T11:34:12.354+0000:trunk: 882112.
davsclaus:1275521138:2010-06-03T07:25:38.152+0000:1275521138:2010-06-03T07:25:38.152+0000:Closing old resolved issues"
0,CAMEL-2202,Task,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Claus Ibsen,0,0,2009-11-19 07:57:51+00:00,2010-06-03 07:25:37+00:00,"Looks like you cannot do 2.2.4 -> 2.2.5 upgrade out of the box 


We hit some compilations failures



[INFO] Compilation failure

/Users/davsclaus/workspace/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[157,31] createClient(org.apache.cxf.endpoint.Endpoint) in  cannot override createClient(org.apache.cxf.endpoint.Endpoint) in org.apache.cxf.frontend.ClientFactoryBean; attempting to use incompatible return type
found   : void
required: org.apache.cxf.endpoint.Client

...




Hmm dont like that CXF is not binary compatible!","njiang:1258589793:2009-11-19T08:16:33.642+0000:1258589793:2009-11-19T08:16:33.642+0000:This is caused by an improvement of CXF to let the ClientFactoryBean create a new client when its createClient called.
I already hit this issue when we did the Fuse Camel release.

davsclaus:1258619489:2009-11-19T16:31:29.788+0000:1258619489:2009-11-19T16:31:29.788+0000:Willem have done this
davsclaus:1275521137:2010-06-03T07:25:37.614+0000:1275521137:2010-06-03T07:25:37.614+0000:Closing old resolved issues"
0,CAMEL-2201,Bug,Trivial,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-19 04:58:52+00:00,2010-06-03 07:25:37+00:00,"See nabble
http://old.nabble.com/maximumRedeliveryDelay-applies-even-if-you-are-not-using-exponential-back-off-to26415728.html","davsclaus:1258580906:2009-11-19T05:48:26.734+0000:1258580906:2009-11-19T05:48:26.734+0000:trunk: 882050
davsclaus:1275521137:2010-06-03T07:25:37.338+0000:1275521137:2010-06-03T07:25:37.338+0000:Closing old resolved issues"
0,CAMEL-2200,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Moulliard Charles,0,1,2009-11-18 16:01:18+00:00,2009-11-20 08:25:58+00:00,"The following error is generated :


karaf@root> Exception in thread ""SpringOsgiExtenderThread-4"" org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file://d:/te
mp/data/reportincident/?move=d%3A%2Ftemp%2Fbackup%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.bak due to: No component found with sc
heme: file
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:442)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:46)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:144)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:81)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:575)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:132)


with a simple route :


<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:context=""http://www.springframework.org/schema/context""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:osgix=""http://www.springframework.org/schema/osgi-compendium""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/osgi
http://www.springframework.org/schema/osgi/spring-osgi.xsd
http://camel.apache.org/schema/osgi
http://camel.apache.org/schema/osgi/camel-osgi.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd
http://www.springframework.org/schema/osgi-compendium
http://www.springframework.org/schema/osgi-compendium/spring-osgi-compendium.xsd"">


	<camel:camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">


		<camel:route>
			<camel:from	uri=""file://d:/temp/data/reportincident/?move=d:/temp/backup/${date:now:yyyyMMdd}/${file:name.noext}.bak""/>
			<camel:setHeader headerName=""origin"">
				<camel:constant>file</camel:constant>
			</camel:setHeader>
			<camel:to uri=""log:org.apache.camel.reportincident?level=DEBUG"" />
		</camel:route>


    </camel:camelContext>
</beans>","cmoulliard:1258531497:2009-11-18T16:04:57.707+0000:1258531497:2009-11-18T16:04:57.707+0000:Here is a maven project used to generated the reportincident routing bundle using the command :

mvn clean install

Here is the list of features deployed on ServiceMix4.1-SNAPSHOT

#
# Comma separated list of features repositories to register by default
#
featuresRepositories=mvn:org.apache.felix.karaf/apache-felix-karaf/1.1.0-SNAPSHOT/xml/features,mvn:org.apache.servicemix.nmr/apache-servicemix-nmr/1.1.0-SNAPSHOT/xml/features,mvn:org.apache.servicemix/apache-servicemix/4.1.0-SNAPSHOT/xml/features,mvn:org.apache.camel.karaf/features/2.0.0/xml/features,jar:mvn:org.apache.camel.example/reportincident.features/1.0-SNAPSHOT!/reportincident.features-1.0-SNAPSHOT-features.xml

#
# Comma separated list of features to install at startup
#
featuresBoot=spring,spring-dm,camel-core,camel-spring-osgi

and 

 osgi:install -s mvn:org.springframework/spring-tx/2.5.6.SEC01
osgi:install -s mvn:org.apache.camel.example/reportincident.routing2/1.0-SNAPSHOT
cmoulliard:1258531868:2009-11-18T16:11:08.808+0000:1258531868:2009-11-18T16:11:08.808+0000:Same problem using Apache Felix Karaf 1.1.0-SNAPSHOT
njiang:1258572106:2009-11-19T03:21:46.230+0000:1258572106:2009-11-19T03:21:46.230+0000:Hi Charles,
My bad, I didn't specify the activator in the camel-spring-osgi bundle.
The OSGi component resolver is not be injected into the camel context, so you get the error of not finding the components.

I will did a quick fix for it.



cmoulliard:1258590810:2009-11-19T08:33:30.765+0000:1258590810:2009-11-19T08:33:30.765+0000:For your information we have the same issue using bundles camel-spring and camel-osgi.

davsclaus:1258673892:2009-11-20T07:38:12.941+0000:1258673892:2009-11-20T07:38:12.941+0000:Charles are you sure. Have you completely stopped the SMX server. Cleared the cache folder and whatnot. So when you start up its all fresh and 2.1-SNAPSHOT bundles.

We would not like to chase a bug that is not there!
cmoulliard:1258676758:2009-11-20T08:25:58.589+0000:1258676758:2009-11-20T08:25:58.589+0000:With the fix of Willem, everything is in order now. So, I propose to close this ticket"
0,CAMEL-2199,New Feature,Minor,None,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Eric Bouer,0,0,2009-11-18 13:14:10+00:00,2010-11-03 05:12:46+00:00,"It's a common task to preform logging of human message with  dynamic content like headers/properties or anything else that can be produced with one of the dynamic languages.
Right now the way to do it is .wireTap(""log:mylog"", new SimpleExpression(""Processing ${header.ID}"")
It would be nice to have something more simple like :
from(""somewhere"").to(""humanlog:Processing ${header.ID}"")


or even:
from(""somewhere"").hlog(""Processing ${header.ID}"") that allows the same functionality.","davsclaus:1258602061:2009-11-19T11:41:01.410+0000:1258602061:2009-11-19T11:41:01.410+0000:Eric Bouer is working on this. Maybe if he shape it well it can be contributed back to Apache?
ericbouer:1258944692:2009-11-23T10:51:32.393+0000:1258944692:2009-11-23T10:51:32.393+0000:ׁHere is a basic implementation of this component.
Basic usage  goes like:
from(""direct:a"").to(""elog:Hello ${header.FOO}"")

This component uses the logcomponent formatter so it can accept the same format options, However since exchange logging is optional. it must be on for the formatter options to have any effect. e.g:
from(""seda:b"")
         .to(""elog:Whassup  ${header.FOO}?showExchange=true&showBody=true"");

This component lacks groupSize option for throughput logging control.

P.S
WireTap can't really do the same as I said on the description. 
The only way to achieve the same functionality without this component is using .recipientList(new SimleExpression(""log:hello ${header}"")) , this has the downside of creating a new endpoint for each message with a different header value.which this component solves.
davsclaus:1259102419:2009-11-25T06:40:19.001+0000:1259102419:2009-11-25T06:40:19.001+0000:Thanks Eric

Lets get it into Camel 2.2.

I wonder if we should introduce a DSL for it?   eventLog

Which also allows you to use any Expression so you can use JUEL, OGNL, Groovy etc. to compute the log message.
davsclaus:1261298507:2009-12-20T16:41:47.036+0000:1261298507:2009-12-20T16:41:47.036+0000:trunk: 892606.

See wiki details here
http://cwiki.apache.org/confluence/display/CAMEL/LogEIP"
0,CAMEL-2198,Improvement,Trivial,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-18 12:54:33+00:00,2010-06-03 07:25:36+00:00,This helps people track down exceptions which clients failed to report.,"davsclaus:1258520263:2009-11-18T12:57:43.814+0000:1258520263:2009-11-18T12:57:43.814+0000:trunk: 881754
davsclaus:1275521136:2010-06-03T07:25:36.990+0000:1275521136:2010-06-03T07:25:36.990+0000:Closing old resolved issues"
0,CAMEL-2197,New Feature,Major,None,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,David Greco,0,1,2009-11-18 11:34:33+00:00,2011-05-28 11:01:51+00:00,"This component (in attachment) provides support for writing data into an Hadoop filesystem. 
You can give a look to the following blog post showing some info about its usage:


http://www.davidgreco.it/MySite/Blog/Entries/2009/11/17_When_a_Camel_encounters_an_Elephant.html","hadrian:1258528251:2009-11-18T15:10:51.876+0000:1258528251:2009-11-18T15:10:51.876+0000:David, awesome patch!

We generally don't put other jars in our svn repo and prefer to take them from maven repo.  According to this [Hadoop issue|http://issues.apache.org/jira/browse/HADOOP-6331], the hadoop-core-21 will be pushed in a public repo. Would it be ok to wait until then? 
dgreco:1258529249:2009-11-18T15:27:29.472+0000:1258529249:2009-11-18T15:27:29.472+0000:Hi Hadrian,
I'm glad you like it, and yes, sure, I can wait till then. I could also have time for adding new features ;)
hadrian:1258530103:2009-11-18T15:41:43.737+0000:1258530103:2009-11-18T15:41:43.737+0000:Let's see how long it takes for Hadoop to release the next version.  If it takes to long maybe we'll publish ver 20 somewhere.

Btw, hadoop is getting a lot of attention as of late, good timing.
dgreco:1258530249:2009-11-18T15:44:09.241+0000:1258530249:2009-11-18T15:44:09.241+0000:Hadoop is awesome and Camel as well, I think that they can complete each other. Let me try ...
dgreco:1260778593:2009-12-14T16:16:33.206+0000:1260778593:2009-12-14T16:16:33.206+0000:This new patch contains the latest version of the camel-hdfs component, it contains also the consumer part, I'm going to put some documentation on my blog www.davidgreco.it. As soon, if ever, the component will be put into the camel distribution I'll add a manual page to the official camel wiki.
This patch has been produced with camel 2.2-SNAPSHOT

davsclaus:1261087747:2009-12-18T06:09:07.266+0000:1261087747:2009-12-18T06:09:07.266+0000:David is this feature complete or do you plan adding more stuff to it?
dgreco:1261100098:2009-12-18T09:34:58.707+0000:1261100098:2009-12-18T09:34:58.707+0000:Claus,
yes, I'm still working on it, I have a new version with the capability to poll the hdfs file system and better handling of erroneous situation plus addition tests.
What do you suggest ? Do I need to post regular updates ? Off course having commit right it would be easier for me to keep up to date the development of this component. Maybe I could consider to put it under another repository, fusesource ?

davsclaus:1261109606:2009-12-18T12:13:26.654+0000:1261109606:2009-12-18T12:13:26.654+0000:David I think the ball is on your turf. We would like to keep 2.2 as a short release and e.g. release it in Jan/Feb next year. So I am just scoping if you need like 1-2 months to get this done to a ready for Camel end users to use, then we should scope it for 2.3.

Its also a good idea to host it elsewhere where you can work on it as much you like and be committer.

We can only include it in the core dist at Apache if there are no license issues and that the component has a broad appeal and the quality is good :)
Which I am sure as you have done Camel components in the past.
dgreco:1261114062:2009-12-18T13:27:42.779+0000:1261114062:2009-12-18T13:27:42.779+0000:Claus, 
this component is almost done, so as soon as you are ready to release the 2.2 I could add the latest patch for this component, now I'm just adding minor stuff and some additional test. It's already pretty stable and I think the code quality should be fine, I'm using sonar for code quality check and I have 100% rule compliancy :) 
Do I have to put a documentation  page on the Camel wiki or is it to early ? Let me know
njiang:1262063508:2009-12-29T13:11:48.793+0000:1262063508:2009-12-29T13:11:48.793+0000:Hi David, 
I just check the big patch file , I found you put the hadoop core jar into your patch file.
Can you use the maven instead of putting the jar into the component lib ?

dgreco:1262063829:2009-12-29T13:17:09.919+0000:1262063829:2009-12-29T13:17:09.919+0000:Hi Willem,
I couldn't find any maven public repository with that jar file. It seems that the Hadoop people don't like maven ;) 
I have a new version ready, just tell me if you want me t attach the patch.
How can we solve this maven problem ?
njiang:1262109393:2009-12-30T01:56:33.508+0000:1262109440:2009-12-30T01:57:20.394+0000:Hi David,
Although Hadoop doesn't use maven to build, but it publish the snapshot jars into the maven repository [HADOOP-5107|http://issues.apache.org/jira/browse/HADOOP-5107].
And you can find the hadoop-core module with this dependency.
{code}
<dependency>
  <groupId>org.apache.mahout.hadoop</groupId>
  <artifactId>hadoop-core</artifactId>
  <version>0.20.1</version>
</dependency>
{code}
dgreco:1262137786:2009-12-30T09:49:46.105+0000:1262137952:2009-12-30T09:52:32.668+0000:Hello Willem,
thanks a lot for your suggestion, I integrated that dependency into the component's pom file and I attached the patch.
I deleted also the previous ones for wasting useless space. 
Thanks,
David
njiang:1262215460:2009-12-31T07:24:20.292+0000:1262215460:2009-12-31T07:24:20.292+0000:Hi David,

I just took a quick look at this camel-hadoop component, the code is shaped well,  I will commit your patch shortly , so you can keep on working it within camel trunk :)

njiang:1262216625:2009-12-31T07:43:45.219+0000:1262216625:2009-12-31T07:43:45.219+0000:Hi David, 
I just tried to applied your patch, and found some issues here.

1.  Checkstyle error,  there are some CS complains about the ASF header and some package import errors. 
     It's not a big deal.
2.  It looks like the hadoop core is require JDK 1.6, so you had to tell maven compile plugin to compile the source with 1.6.
     I try to remove the that configure and got this error.
    {code}
        /Users/jiangning/Work/camel/trunk/components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsWritableFactories.java:[23,20] package javax.xml.ws does not exist

       /Users/jiangning/Work/camel/trunk/components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/HdfsConsumer.java:[25,-1] cannot access org.apache.hadoop.fs.FileStatus
bad class file: /Users/jiangning/.m2/repository/org/apache/mahout/hadoop/hadoop-core/0.20.1/hadoop-core-0.20.1.jar(org/apache/hadoop/fs/FileStatus.class)
class file has wrong version 50.0, should be 49.0

    {code}
     It will cause some trouble if we put it into Camel trunk, as we still use JDK 1.5.x for our daily build.

Before we figure out how do resolve issue 2, I can't submit your patch into Camel trunk :(
dgreco:1262220853:2009-12-31T08:54:13.810+0000:1262220853:2009-12-31T08:54:13.810+0000:Hi Willem,
I checked the Hadoop prerequisites and it seems that jdk1.6 is mandatory. So, I doubt it's possible to solve that issue, it would mean trying to recompile hadoop core itself trying to sort out the 
any problem it could arise :( 
It's really a pity. Anyway, do you have any plan to deprecate 1.5 given the fact that it had been already deprecated by SUN putting it in EOL ?
In the meanwhile, the only thing I could do is to make available the work I'm doing on the integration of Camel and Hadoop on another repository, I'm working also on the integration of the map/reduce part. The idea is to allow Camel to drive an entire M/R job from the input production till reading the output produced by the job itself.
Anyway, thanks for your work.
Regards,
David
davsclaus:1262230804:2009-12-31T11:40:04.168+0000:1262230804:2009-12-31T11:40:04.168+0000:No no plan to drop JDK1.5 there are just too many users still on it. 

Its actually a problem that Hadoop is so dependent on JDK1.6 at it offers little extra over JDK1.5.

dgreco:1262233242:2009-12-31T12:20:42.479+0000:1262233242:2009-12-31T12:20:42.479+0000:Thanks Claus,
if I ever find a solution for solving this problem I'll let you know
njiang:1262233663:2009-12-31T12:27:43.537+0000:1262233663:2009-12-31T12:27:43.537+0000:Maybe we can add a profile to include camel-hdfs module when we use JDK1.6, and make sure we deploy the kit with a JDK 1.6 box.
Then we can still host the camel-hdfs in the camel trunk :)  
Any thought?

dgreco:1262237669:2009-12-31T13:34:29.413+0000:1262237669:2009-12-31T13:34:29.413+0000:Willem,
yes, I like your idea. Off course I'm biased here, but I think that the integration of Camel with Hadoop/HDFS is interesting and useful.
So, I would be glad if I could work directly on the main trunk.
Regards,
David 
hadrian:1262242207:2009-12-31T14:50:07.209+0000:1262242207:2009-12-31T14:50:07.209+0000:I have mixed feelings about this. The kits are built with jdk 1.5 so this will result in camel-hdfs not being included in the kit, unless we jump through serious hoops.

Is there any other dependency we can add for package {{javax.xml.ws}} so it at least compile with 1.5? Another (interim) solution is to host camel-hdfs at the forge.
dgreco:1262254427:2009-12-31T18:13:47.376+0000:1262254427:2009-12-31T18:13:47.376+0000:Hi Hadrian,
the point is that Hadoop is compiled and published to the public maven rep using jdk1.6 that seems mandatory. So, at the end the forge interim solution could be fine.
Maybe it would be easier for me to get the commit Karma for the forge repository, since I'm improving and adding new features this would be the best solution for me.
Let me know.
Regards and Happy New Year to you all !
njiang:1262380050:2010-01-02T05:07:30.049+0000:1262380050:2010-01-02T05:07:30.049+0000:@Hadrian,
If we can make sure the deploy box is running with JDK 1.6,  the camel-hdfs can be deployed without an issue.
If we can't do that, hosting the component in the forge could be a better solution.

@David
We can host the camel-hdfs component wiki page in camel.apache.org wherever the camel-hdfs module is :)
dgreco:1262395956:2010-01-02T09:32:36.261+0000:1262395956:2010-01-02T09:32:36.261+0000:Adrian, Willem,
so, what I'm going to do is to start the process for adding a new project under forge, then at any time when you think it's safe you could put that stuff into the main trunk.
As soon I have this project set up under forge I will put a new page under the wiki.
Does it work for you ? 
davsclaus:1262488179:2010-01-03T11:09:39.353+0000:1262488179:2010-01-03T11:09:39.353+0000:David I think that is a good plan
dgreco:1262837819:2010-01-07T12:16:59.063+0000:1262837819:2010-01-07T12:16:59.063+0000:Hi Claus,
last update:
1) I created a project camel-hadoop under github: http://github.com/dgreco/camel-hadoop
2) I created a new page under the Camel wiki (work in progress): http://cwiki.apache.org/confluence/display/CAMEL/HDFS with the proper link to the github project
I'm gonna fill up that page with proper documentation

Hoping it's fine
regards,
David
davsclaus:1262901681:2010-01-08T06:01:21.034+0000:1262901681:2010-01-08T06:01:21.034+0000:David you should document on the wiki page where this project is hosted. And a reason why its there, eg. it requires Java 1.6 etc.
dgreco:1262908747:2010-01-08T07:59:07.797+0000:1262908747:2010-01-08T07:59:07.797+0000:Claus, done. Let me know it=f what I wrote is enough.
davsclaus:1262912719:2010-01-08T09:05:19.566+0000:1262912719:2010-01-08T09:05:19.566+0000:The documentation is better. I think you should emphasize the problem is that Hadoop requires JDK1.6+ which cannot work together with 1.5 that Camel uses.
davsclaus:1262913019:2010-01-08T09:10:19.731+0000:1262913019:2010-01-08T09:10:19.731+0000:David I have not looked at the actual source code, but I picked up the HdsfConsumer just to glaze it.

I think you should consider extending {{ScheduledPollConsumer}} if you want the consumer to be schedule based. Then you got all that for free from the camel-core to setup the intervals etc.
And the camel version is more robust as it use ExecutorService and have reliable start/shutdown etc. 

All you need to do is to implement the {{poll}} method.

Also camel-core have DEBUG/TRACE logging for starting/stopping a consumer so that is often not needed either.

And I wonder when you read the file you may need a try .. finally block to ensure calling the unlock method.

davsclaus:1263170411:2010-01-11T08:40:11.384+0000:1263170411:2010-01-11T08:40:11.384+0000:David lets close this ticket. Then when JDK 1.6 is minim then we can migrate the project to Apache.
dgreco:1298534638:2011-02-24T16:03:58.761+0000:1298534638:2011-02-24T16:03:58.761+0000:I reopened this issue and added the latest version if the component since the latest Camel trunk is using only jdk 1.6
hadrian:1298536290:2011-02-24T16:31:30.717+0000:1298536290:2011-02-24T16:31:30.717+0000:Thanks David. I am reviewing and testing it now.
davsclaus:1301714915:2011-04-02T11:28:35.030+0000:1301714915:2011-04-02T11:28:35.030+0000:Hadrian any update on this?
davsclaus:1306551676:2011-05-28T11:01:16.261+0000:1306551711:2011-05-28T11:01:51.498+0000:Thanks Greco for the contribution."
0,CAMEL-2196,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-18 10:32:55+00:00,2010-06-03 07:25:36+00:00,"See camel-example-cxf-async


In the client code that sends to the server using CxfProducer. I have to wrap my POJO in a List object.
CxfProducer should be smarter and be able to do this itself.


It can do this by converting the payload to an iterator and use that to construct the list.
Then it works for POJO objects directly.","davsclaus:1258513593:2009-11-18T11:06:33.175+0000:1258513593:2009-11-18T11:06:33.175+0000:trunk: 881719.
davsclaus:1275521136:2010-06-03T07:25:36.769+0000:1275521136:2010-06-03T07:25:36.769+0000:Closing old resolved issues"
0,CAMEL-2195,Improvement,Major,2.0.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Willem Jiang,Claus Ibsen,0,0,2009-11-18 10:30:58+00:00,2010-11-03 05:12:45+00:00,The method getParams in CxfProducer does not check for correct number of parameters and that we have data when its mandatory.,"njiang:1260922400:2009-12-16T08:13:20.620+0000:1260922400:2009-12-16T08:13:20.620+0000:trunk:
http://svn.apache.org/viewvc?rev=891148&view=rev"
0,CAMEL-2194,Improvement,Major,2.0.0,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Ron Gavlin,0,0,2009-11-18 09:10:22+00:00,2011-04-14 22:05:46+00:00,RestletProducer should support native async request/response semantics like the recent changes made to the camel-jetty producer.,davsclaus:1282777325:2010-08-26T07:02:05.637+0000:1282777325:2010-08-26T07:02:05.637+0000:We take a look at this after restlet 2.0 has been released and published to maven repos.
0,CAMEL-2193,Improvement,Major,2.0.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Ron Gavlin,0,0,2009-11-18 09:08:47+00:00,2011-04-24 09:57:20+00:00,NmrProducer should support native async request/response semantics like the recent changes made to the camel-jetty producer.,"davsclaus:1278377428:2010-07-06T08:50:28.921+0000:1278377428:2010-07-06T08:50:28.921+0000:Solved as part of the async routing engine overhaul in Camel 2.4 and ServiceMix 4.3
davsclaus:1303610240:2011-04-24T09:57:20.749+0000:1303610240:2011-04-24T09:57:20.749+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2192,Improvement,Major,2.0.0,2.4.0,"
None
",Closed,Fixed,2.4.0,Claus Ibsen,Ron Gavlin,0,0,2009-11-18 09:07:54+00:00,2011-04-24 09:57:28+00:00,JbiProducer should support native async request/response semantics like the recent changes made to the camel-jetty producer.,"davsclaus:1278377407:2010-07-06T08:50:07.903+0000:1278377407:2010-07-06T08:50:07.903+0000:Solved as part of the async routing engine overhaul in Camel 2.4 and ServiceMix 4.3
davsclaus:1303610248:2011-04-24T09:57:28.990+0000:1303610248:2011-04-24T09:57:28.990+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2191,Improvement,Major,2.0.0,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Ron Gavlin,0,0,2009-11-18 09:04:05+00:00,2011-04-24 09:57:24+00:00,JmsProducer should support native async request/response semantics,"davsclaus:1282776729:2010-08-26T06:52:09.919+0000:1282776729:2010-08-26T06:52:09.919+0000:This has been implemented in Camel 2.5
davsclaus:1303610244:2011-04-24T09:57:24.103+0000:1303610244:2011-04-24T09:57:24.103+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2190,Improvement,Major,2.0.0,2.5.0,"
None
",Closed,Duplicate,2.5.0,Willem Jiang,Ron Gavlin,0,0,2009-11-18 09:01:47+00:00,2011-04-24 09:58:24+00:00,CxfProducer should leverage CXF Client API features to support native async request/response semantics. This should be similar to changes recent applied to camel-jetty producer.,"davsclaus:1278583557:2010-07-08T18:05:57.530+0000:1278583557:2010-07-08T18:05:57.530+0000:Willem have implement async support for the CxfProducer which will be part of Camel 2.5 as it requires a new release of CXF.
davsclaus:1303610304:2011-04-24T09:58:24.191+0000:1303610304:2011-04-24T09:58:24.191+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2189,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Hadrian Zbarcea,Chris Love,0,0,2009-11-18 01:06:02+00:00,2010-06-03 07:25:36+00:00,Made changes to improve application context xml to improve schema usage.  Also replaced log4j.properties fles with log4j.xml files.,"chrislovecnm:1258477613:2009-11-18T01:06:53.617+0000:1258477613:2009-11-18T01:06:53.617+0000:Patch for archtype changes
hadrian:1258499866:2009-11-18T07:17:46.148+0000:1258499866:2009-11-18T07:17:46.148+0000:Chris, thanks for the patch. What was the reason for replacing the .properties with .xml files? I also see that you use tabs for indentation, and we prefer spaces.
chrislovecnm:1258501656:2009-11-18T07:47:36.981+0000:1258501656:2009-11-18T07:47:36.981+0000:XML can be validated, but hey to each there own :) yah I need to fix that in my vim profile to do spaces ;)
davsclaus:1258501742:2009-11-18T07:49:02.435+0000:1258501742:2009-11-18T07:49:02.435+0000:Yeah we prefer to use properties files for log4j. Its much easier to use, understand and maintain.
hadrian:1258527549:2009-11-18T14:59:09.784+0000:1258527568:2009-11-18T14:59:28.772+0000:Chris, now I understand.  The mere fact though that you can validate xml doesn't necessarily mean that it contains what you want. In this sense the validation is of little value for me. As Claus said, we prefer the simplicity of the .properties files.

That said, Camel is built by the community for the community. If you really feel strongly about this issue, and think you can make a solid case feel, free to bring it in the open and start a [DISCUSS] thread on the dev@ mailing list. If the majority will share your views we will make such a change. Personally I am a -0.5 on this, so I will not start such a thread myself :).

I will have to take a closer look at the other part of the patch. Many thanks for your contribution and keep them coming.
chrislovecnm:1258544301:2009-11-18T19:38:21.053+0000:1258544301:2009-11-18T19:38:21.053+0000:only app context files. Using spaces.
chrislovecnm:1258544402:2009-11-18T19:40:02.324+0000:1258544402:2009-11-18T19:40:02.324+0000:No worries on the log4j file.  I am here to help.  I have uploaded a new patch that only has the application context changes using spaces instead of tabs.  BTW does camel have a style guide??
hadrian:1258575167:2009-11-19T04:12:47.895+0000:1258575167:2009-11-19T04:12:47.895+0000:Patch applied with thanks to Chris.
davsclaus:1275521136:2010-06-03T07:25:36.142+0000:1275521136:2010-06-03T07:25:36.142+0000:Closing old resolved issues"
0,CAMEL-2188,Bug,Major,1.6.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Hadrian Zbarcea,Paul Mietz Egli,0,0,2009-11-17 23:24:31+00:00,2010-06-03 07:25:35+00:00,"To reproduce, use the camel-jcr component without specifying a node name in the message properties.  JcrProducer will attempt to use the exchange ID as the node name, but in ServiceMix 4, this ID contains path separator characters, which results in a PathNotFound exception when the producer attempts to create the node.  IMHO, the producer should attempt to create parent nodes as needed when the value of either the exchange ID or the property named JcrConstants.JCR_NODE_NAME contain path separators.","pegli:1258471536:2009-11-17T23:25:36.407+0000:1258471536:2009-11-17T23:25:36.407+0000:Patch to fix problem with intermediate node creation in camel-jcr.  Also adds a try/catch around the code that sets node properties in case the TypeConverter can't handle one or more exchange property types.
pegli:1258561938:2009-11-19T00:32:18.238+0000:1258561938:2009-11-19T00:32:18.238+0000:We probably want a Text.escapeIllegalJcrChars() call in the node creation loop as well...
davsclaus:1258673799:2009-11-20T07:36:39.702+0000:1258673799:2009-11-20T07:36:39.702+0000:Paul can you work on the patches and provide a complete patch with you suggestions. Then we can get it in Camel 2.2
pegli:1258996610:2009-11-24T01:16:50.510+0000:1258996610:2009-11-24T01:16:50.510+0000:Patch file that fixes CAMEL-2188 and CAMEL-2187.  Includes unit tests for proper authentication against the repository and for node path creation when value of the exchange header JcrConstants.JCR_NODE_NAME contains one or more path separator characters.  Apply from SVNROOT/components/camel-jcr.
pegli:1258996758:2009-11-24T01:19:18.628+0000:1258996758:2009-11-24T01:19:18.628+0000:I forgot to mention that the patch was generated against trunk rev 883433 (2009-11-11 17:21:11).
hadrian:1259012787:2009-11-24T05:46:27.844+0000:1259012787:2009-11-24T05:46:27.844+0000:Patch applied with many thanks!  I need to update the wiki as well.

Excellent contribution, keep them coming.
njiang:1260993166:2009-12-17T03:52:46.853+0000:1260993166:2009-12-17T03:52:46.853+0000:Hi hadrain

Can we resolve this issue now?
davsclaus:1261087966:2009-12-18T06:12:46.983+0000:1261087966:2009-12-18T06:12:46.983+0000:Hmm was this committed before 2.1 was released? And what wiki do you need to update?
davsclaus:1264504332:2010-01-26T19:12:12.443+0000:1264504332:2010-01-26T19:12:12.443+0000:Committed in the 2.1 release.
davsclaus:1275521135:2010-06-03T07:25:35.408+0000:1275521135:2010-06-03T07:25:35.408+0000:Closing old resolved issues"
0,CAMEL-2187,Bug,Minor,1.6.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Hadrian Zbarcea,Paul Mietz Egli,0,0,2009-11-17 21:59:43+00:00,2010-06-03 07:25:34+00:00,"Documentation for the camel-jcr component indicates that the repository username and password can be provided on the endpoint URI as jcr://user:pass@repository/path.  The JcrEndpoint class does not parse these correctly, however – URI.getUserInfo() returns ""user:pass"", and URI.getAuthority() returns ""user:pass@repository"" as per the javadocs for java.net.URI and RFC-2396.","pegli:1258466440:2009-11-17T22:00:40.478+0000:1258466440:2009-11-17T22:00:40.478+0000:patch for src/main/java/org/apache/camel/component/jcr/JcrEndpoint.java to fix parsing of JCR username/password off URI (apply in camel-jcr dir).
pegli:1258996677:2009-11-24T01:17:57.919+0000:1258996677:2009-11-24T01:17:57.919+0000:see CAMEL-2188 for a patch file that also addresses this issue.
davsclaus:1261088637:2009-12-18T06:23:57.549+0000:1261088637:2009-12-18T06:23:57.549+0000:Hadrian was this fixed with that other JCR patch? 

Can you follow up on this and ensure we got all these JCR patches in 2.2?
davsclaus:1264504256:2010-01-26T19:10:56.929+0000:1264504256:2010-01-26T19:10:56.929+0000:Committed in the 2.1 release.
davsclaus:1275521134:2010-06-03T07:25:34.791+0000:1275521134:2010-06-03T07:25:34.791+0000:Closing old resolved issues"
0,CAMEL-2186,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Karl Palsson,0,0,2009-11-17 16:29:26+00:00,2010-06-03 07:25:34+00:00,"Using the same project attached to CAMEL-2165, you can delete the ""ftp_home"" directory, or simply edit user.properties to make the ftp account readonly.


While every single write to the camel ftp endpoint will then fail, the only notification of this is at DEBUG level.  In my opinion this should be at least WARN","karlp:1258447878:2009-11-17T16:51:18.166+0000:1258447878:2009-11-17T16:51:18.166+0000:tested with 2.1-SNAPSHOT as well, dated: 20091117163007
davsclaus:1258450261:2009-11-17T17:31:01.153+0000:1258450261:2009-11-17T17:31:01.153+0000:The failed to write exception should be set on the Exchange so if you have any error handling configured you can take core of it there.

The producers etc should not double log the problem.
karlp:1258451004:2009-11-17T17:43:24.270+0000:1258451004:2009-11-17T17:43:24.270+0000:ok, I'll agree that the producers shouldn't.

Perhaps we can relabel this ticket.

I believe that the DefaultErrorHandler should log at INFO at least. I agree it shouldn't do anything like retries or redeliveries, and I agree that when you've got things setup, you'll have more specific error handling, but currently, without debug level logging, there's simply no notification at all that anything even went wrong. 
davsclaus:1258502973:2009-11-18T08:09:33.570+0000:1258502973:2009-11-18T08:09:33.570+0000:The issue is you route uses a consumer which just ignores any exceptions since you start a route with a timer.
When the Exchange is done and it has an exception the timer will just ignore it as it cannot handle exceptions.

It aught to log the exception at ERROR level in this name
org.apache.camel.component.timer
davsclaus:1258504601:2009-11-18T08:36:41.920+0000:1258504601:2009-11-18T08:36:41.920+0000:I will improve the TimerConsumer so it will log exchanges that have failed by default at ERROR level. Then you can see this in the log
davsclaus:1258505248:2009-11-18T08:47:28.452+0000:1258505248:2009-11-18T08:47:28.452+0000:trunk: 881699
karlp:1258509741:2009-11-18T10:02:21.845+0000:1258509741:2009-11-18T10:02:21.845+0000:Same affects seda and direct.... :) And probably other places too.

I really think this belongs in the default error handler :)
davsclaus:1275521134:2010-06-03T07:25:34.101+0000:1275521134:2010-06-03T07:25:34.101+0000:Closing old resolved issues"
0,CAMEL-2185,Improvement,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-11-17 14:46:16+00:00,2010-06-03 07:25:33+00:00,"If the CXF user want to use the camel-transport component in OSGi platform, he may need to import META-INF.cxf package.
But current camel-cxf bundle doesn't export this package.","njiang:1258501182:2009-11-18T07:39:42.685+0000:1258501182:2009-11-18T07:39:42.685+0000:Here is a way if you want to use camel transport without import the cxf-extension-camel.xml, you can inject the camel context like this
{code}

    <bean class=""org.apache.camel.component.cxf.transport.CamelTransportFactory"" lazy-init=""false"">
		<property name=""bus"" ref=""cxf"" />
		<property name=""camelContext"" ref=""camelContext"" />
		<property name=""transportIds"">
			<list>
				<value>http://cxf.apache.org/transports/camel</value>
			</list>
		</property>
	</bean>

	<camelContext id=""camelContext"" xmlns=""http://camel.apache.org/schema/spring"">
		<route>
			<from uri=""jetty:http://localhost:9091/GreeterContext/GreeterPort"" />
			<loadBalance ref=""roundRobinRef"">
				<to uri=""direct:EndpointA"" />
				<to uri=""direct:EndpointB"" />
			</loadBalance>
		</route>
	</camelContext>

{code}
njiang:1258501218:2009-11-18T07:40:18.373+0000:1258501218:2009-11-18T07:40:18.373+0000:http://svn.apache.org/viewvc?rev=881692&view=rev
davsclaus:1275521133:2010-06-03T07:25:33.761+0000:1275521133:2010-06-03T07:25:33.761+0000:Closing old resolved issues"
0,CAMEL-2184,New Feature,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-17 13:05:51+00:00,2010-06-03 07:25:33+00:00,"This will allow us to do unit testing on existing routes and then advice by a route builder where we can configure interceptors and onCompletions etc. so we can intercept sending to endpoints etc. And send it to mocks etc.



    public void testAdvised() throws Exception {
        context.getRouteDefinitions().get(0).adviceWith(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                interceptSendToEndpoint(""mock:foo"")
                        .skipSendToOriginalEndpoint()
                        .to(""log:foo"")
                        .to(""mock:advised"");
            }
        });

        getMockEndpoint(""mock:foo"").expectedMessageCount(0);
        getMockEndpoint(""mock:advised"").expectedMessageCount(1);
        getMockEndpoint(""mock:result"").expectedMessageCount(1);

        template.sendBody(""direct:start"", ""Hello World"");

        assertMockEndpointsSatisfied();
    }","davsclaus:1258435993:2009-11-17T13:33:13.912+0000:1258435993:2009-11-17T13:33:13.912+0000:trunk: 881279.
davsclaus:1275521133:2010-06-03T07:25:33.566+0000:1275521133:2010-06-03T07:25:33.566+0000:Closing old resolved issues"
0,CAMEL-2183,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,William Tam,Claus Ibsen,0,0,2009-11-17 10:03:36+00:00,2010-06-03 07:25:32+00:00,"CxfSoapBinding has a bug that it mandates a body to exist. But when you send a GET then there is of course no body.


The code below fixed this in the method getCxfInMessage



        // body can be empty in case of GET etc.
        InputStream body = message.getBody(InputStream.class);
        if (body != null) {
            answer.setContent(InputStream.class, body);
        } else if (message.getBody() != null) {
            // fallback and set the body as what it is
            answer.setContent(Object.class, body);
        }




Willem Tam can you review if that is okay? Maybe the code can be more finer to check the HTTP method and in cases of GET etc. it allows no body.


I will commit my fix to get the unit tests passing.","davsclaus:1258424748:2009-11-17T10:25:48.373+0000:1258424748:2009-11-17T10:25:48.373+0000:William I have committed at rev: 881227.
wtam:1258447014:2009-11-17T16:36:54.004+0000:1258447014:2009-11-17T16:36:54.004+0000:The fix looks fine to me (although I wasn't the original author of this code).
davsclaus:1258450509:2009-11-17T17:35:09.110+0000:1258450509:2009-11-17T17:35:09.110+0000:Thanks William
davsclaus:1275521132:2010-06-03T07:25:32.949+0000:1275521132:2010-06-03T07:25:32.949+0000:Closing old resolved issues"
0,CAMEL-2182,Bug,Minor,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Sailaja,0,0,2009-11-17 07:24:35+00:00,2010-06-03 07:25:32+00:00,"1. Installed apache-camel 2.0.0-psc-01-00M2.
2. Applied the attached patch on the samples.
3. Compile the sample (camel-example-guice-jms) using ""mvn compile"" command
4. Install the camel sample into repository using ""mvn install"" command
5. Started the servicemix server
6. Installed below bundles into servicemix
	osgi:install wrap:org.apache.activemq/activemq-camel/5.3.1.0M1-fuse
	features:install camel-guice
 	osgi:install wrap:mvn:org.apache.camel/camel-example-guice-jms/2.0.0-psc-01-00M2
7. Start the bundles and observed that below exception is shown in the karaf console.


Exception in org.apache.camel.example.guice.jms.MyActivator.start() of bundle org.apache.camel.camel-example-guice-jms.","njiang:1258519654:2009-11-18T12:47:34.197+0000:1258519654:2009-11-18T12:47:34.197+0000:I managed to deploy and start camel context successfully in Servicemix,
but I got the NPE when I drop the file into data directory.

After digging the code for a while I found current camel-guice component doesn't support the OSGi, we need to add a new OSGi version Module for it to use. 
davsclaus:1258609031:2009-11-19T13:37:11.049+0000:1258609031:2009-11-19T13:37:11.049+0000:This is not within the timeframe of 2.1 so I will move it to future.

camel-guice is not super needed in SMX at this point in time. Will be later.
njiang:1259105331:2009-11-25T07:28:51.721+0000:1259105331:2009-11-25T07:28:51.721+0000:http://svn.apache.org/viewvc?rev=884000&view=rev
davsclaus:1275521132:2010-06-03T07:25:32.160+0000:1275521132:2010-06-03T07:25:32.160+0000:Closing old resolved issues"
0,CAMEL-2181,Test,Minor,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-17 07:05:16+00:00,2010-06-03 07:25:31+00:00,"Running org.apache.camel.component.cxf.cxfbean.CxfBeanTest
org.apache.maven.surefire.booter.SurefireExecutionException: org/junit/Assume$AssumptionViolatedException; nested exception is java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException
java.lang.NoClassDefFoundError: org/junit/Assume$AssumptionViolatedException
        at org.springframework.test.context.junit4.SpringMethodRoadie.runTestMethod(SpringMethodRoadie.java:240)
        at org.springframework.test.context.junit4.SpringMethodRoadie$RunBeforesThenTestThenAfters.run(SpringMethodRoadie.java:333)
        at org.springframework.test.context.junit4.SpringMethodRoadie.runWithRepetitions(SpringMethodRoadie.java:217)
        at org.springframework.test.context.junit4.SpringMethodRoadie.runTest(SpringMethodRoadie.java:197)
        at org.springframework.test.context.junit4.SpringMethodRoadie.run(SpringMethodRoadie.java:143)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.invokeTestMethod(SpringJUnit4ClassRunner.java:160)
        at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:61)
        at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:54)
        at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)
        at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)
        at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:52)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:97)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:592)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] There are test failures.","davsclaus:1258412819:2009-11-17T07:06:59.473+0000:1258412819:2009-11-17T07:06:59.473+0000:Uses junit 4.6

[INFO]    junit:junit:jar:4.6:test
davsclaus:1258412875:2009-11-17T07:07:55.359+0000:1258412875:2009-11-17T07:07:55.359+0000:Ah its a spring bug
http://jira.springframework.org/browse/SPR-5145

Spring 2.5.x only works with Junit 4.4 or lower
davsclaus:1258418806:2009-11-17T08:46:46.901+0000:1258418806:2009-11-17T08:46:46.901+0000:I have changed back to junit 4.4 in parent/pom.xml lets see if that works in all components
davsclaus:1258423247:2009-11-17T10:00:47.455+0000:1258423247:2009-11-17T10:00:47.455+0000:Using junit 4.4 resolved this
davsclaus:1275521131:2010-06-03T07:25:31.969+0000:1275521131:2010-06-03T07:25:31.969+0000:Closing old resolved issues"
0,CAMEL-2180,Improvement,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-17 07:01:22+00:00,2010-06-03 07:25:31+00:00,"There is no need to use a local copy when processing in doCatch.


See nabble
http://old.nabble.com/To-Roman---About-TryProcessor-to26377903s22882.html","davsclaus:1258412532:2009-11-17T07:02:12.208+0000:1258412532:2009-11-17T07:02:12.208+0000:trunk: 881175.
davsclaus:1275521131:2010-06-03T07:25:31.694+0000:1275521131:2010-06-03T07:25:31.694+0000:Closing old resolved issues"
0,CAMEL-2179,Task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Jonathan Anstey,Jonathan Anstey,0,0,2009-11-16 16:45:29+00:00,2010-06-03 07:25:30+00:00,No Desc,davsclaus:1275521130:2010-06-03T07:25:30.615+0000:1275521130:2010-06-03T07:25:30.615+0000:Closing old resolved issues
0,CAMEL-2178,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-16 14:11:38+00:00,2010-06-03 07:25:30+00:00,No Desc,"davsclaus:1258352737:2009-11-16T14:25:37.390+0000:1258352737:2009-11-16T14:25:37.390+0000:trunk: 880767.
davsclaus:1275521130:2010-06-03T07:25:30.424+0000:1275521130:2010-06-03T07:25:30.424+0000:Closing old resolved issues"
0,CAMEL-2177,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-16 13:41:26+00:00,2010-06-03 07:25:30+00:00,"In cases multiple requests hit Camel really fast after startup, a race condition can lead to multiple threads doing concurrent classpath scanning for @Converter","davsclaus:1258350172:2009-11-16T13:42:52.460+0000:1258350172:2009-11-16T13:42:52.460+0000:An example
{code}
[    Camel thread 2: ToAsync[cxf:bean:reportIncidentEndpoint]] DefaultTypeConverter WARN  Overriding type converter from: StaticMethodFallbackTypeConverter: public static java.lang.Object org.apache.camel.component.cxf.converter.CxfConverter.convertTo(java.lang.Class,org.apache.camel.Exchange,java.lang.Object,org.apache.camel.spi.TypeConverterRegistry) to: StaticMethodFallbackTypeConverter: public static java.lang.Object org.apache.camel.component.cxf.converter.CxfConverter.convertTo(java.lang.Class,org.apache.camel.Exchange,java.lang.Object,org.apache.camel.spi.TypeConverterRegistry)
[    Camel thread 1: ToAsync[cxf:bean:reportIncidentEndpoint]] DefaultTypeConverter WARN  Overriding type converter from: StaticMethodFallbackTypeConverter: public static java.lang.Object org.apache.camel.component.cxf.converter.CxfConverter.convertTo(java.lang.Class,org.apache.camel.Exchange,java.lang.Object,org.apache.camel.spi.TypeConverterRegistry) to: StaticMethodFallbackTypeConverter: public static java.lang.Object org.apache.camel.component.cxf.converter.CxfConverter.convertTo(java.lang.Class,org.apache.camel.Exchange,java.lang.Object,org.apache.camel.spi.TypeConverterRegistry)
{code}
davsclaus:1258361645:2009-11-16T16:54:05.671+0000:1258361645:2009-11-16T16:54:05.671+0000:trunk: 880843.

Loading improved but it was likely newer multiple threads loading anyway. But the code is improved.

Fixed the WARN logging when race conditions occur with multiple threads promoting a fallback converter.
davsclaus:1275521130:2010-06-03T07:25:30.176+0000:1275521130:2010-06-03T07:25:30.176+0000:Closing old resolved issues"
0,CAMEL-2176,Bug,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-11-16 13:37:34+00:00,2010-06-03 07:25:29+00:00,"After Camel 2.0, we move the JpaTraceEventMessage from camel-core to camel-jpa, and changed the package name.
It break the camel-example-trace, so we had to update the persistence.xml to use right version of JpaTraceEventMessage.","njiang:1258350250:2009-11-16T13:44:10.810+0000:1258350250:2009-11-16T13:44:10.810+0000:http://svn.apache.org/viewvc?rev=880747&view=rev
davsclaus:1275521129:2010-06-03T07:25:29.815+0000:1275521129:2010-06-03T07:25:29.815+0000:Closing old resolved issues"
0,CAMEL-2175,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-16 13:32:10+00:00,2010-06-03 07:25:29+00:00,"getCxfBinding is not thread safe in case multiple threads hit a CXF webserive at once and it hasnt been initialized before.


Code like this



    public CxfBinding getCxfBinding() {
        if (cxfBinding == null) {
            cxfBinding = new DefaultCxfBinding();   
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Create default CXF Binding "" + cxfBinding);
            }
        }
        
        if (!cxfBindingInitialized.getAndSet(true) 
                && cxfBinding instanceof HeaderFilterStrategyAware) {
            ((HeaderFilterStrategyAware)cxfBinding)
                .setHeaderFilterStrategy(getHeaderFilterStrategy());
        }
        return cxfBinding;
    }




Is a false sense as the getAndSet will let other threads pass it with a cxfBinding that still may not have been initialized.","davsclaus:1258349795:2009-11-16T13:36:35.893+0000:1258349795:2009-11-16T13:36:35.893+0000:If you hit it concurrently you get NPEs

{code}
Nov 16, 2009 2:40:03 PM org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNING: Interceptor has thrown exception, unwinding now
java.lang.NullPointerException
        at org.apache.camel.component.cxf.DefaultCxfBinding.propagateHeadersFromCxfToCamel(DefaultCxfBinding.java:406)
        at org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest(DefaultCxfBinding.java:209)
        at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:84)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
        at java.util.concurrent.FutureTask.run(FutureTask.java:123)
        at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
        at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:98)
        at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
        at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:104)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:302)
        at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:266)
        at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:70)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:324)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)
        at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:880)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:747)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)
{code}
davsclaus:1258352425:2009-11-16T14:20:25.756+0000:1258352425:2009-11-16T14:20:25.756+0000:trunk: 880761.

Now using Camels Service which provides a {{start}} method where initialization logic should be placed.
wtam:1258383533:2009-11-16T22:58:53.748+0000:1258383533:2009-11-16T22:58:53.748+0000:Hi Claus, FYI the ""getAndSet"" there was to make sure that the CxfBinding was injected with HeaderFilterStrategy since HeaderFilterStrategy could be initialized after CxfBinding.  (We weren't guaranteed that setBinding() is called after setHeaderFilterStrategy().)  With your fix, the Camel's Service start() method will get called to perform the initializations which is good.  We shouldn't need that ""getAndSet"" anymore.  That is great.  Please also fix the same issue in RestletBinding.  thx.
davsclaus:1258405542:2009-11-17T05:05:42.833+0000:1258405542:2009-11-17T05:05:42.833+0000:I have fixed the same issue in camel-restlet

trunk: 881156.
davsclaus:1275521129:2010-06-03T07:25:29.249+0000:1275521129:2010-06-03T07:25:29.249+0000:Closing old resolved issues"
0,CAMEL-2174,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-16 07:44:12+00:00,2010-06-03 07:25:29+00:00,"The dependency scan is using Springs ANT path matcher but the java code is in camel-core.
We should moved that code to camel-spring so camel does not have any dep on spring code at all. (except for JMX annotations, which you is optional to use at runtime)","davsclaus:1258331098:2009-11-16T08:24:58.834+0000:1258331098:2009-11-16T08:24:58.834+0000:trunk: 880657.
davsclaus:1275521128:2010-06-03T07:25:28.997+0000:1275521128:2010-06-03T07:25:28.997+0000:Closing old resolved issues"
0,CAMEL-2173,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-14 17:16:11+00:00,2010-06-03 07:25:28+00:00,Need a little special handling code in TraceInterceptor to have the aggregator listed as the fromNode when an Exchange is being emitted from the Aggregator,"davsclaus:1258251293:2009-11-15T10:14:53.885+0000:1258251293:2009-11-15T10:14:53.885+0000:trunk: 836346.
davsclaus:1275521128:2010-06-03T07:25:28.689+0000:1275521128:2010-06-03T07:25:28.689+0000:Closing old resolved issues"
0,CAMEL-2172,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-14 17:14:46+00:00,2010-06-03 07:25:28+00:00,"Currently several of the abstract noop events is not outputted in the tracelog


Later we can add those, but it does require a bit of mucking in the TraceInterceptor which may require a little bit of ugly code to insert the events at the right time in the tracelog","davsclaus:1258245750:2009-11-15T08:42:30.229+0000:1258245750:2009-11-15T08:42:30.229+0000:I got the doTry .. doCatch and doFinally done now

{code}
2009-11-15 09:39:01,915 [main           ] INFO  Tracer                         - cedd6f72-450b-4566-9e6c-d37bbc8adef5 >>> from(direct://start) --> split[tokenize(body, @)], Pattern:InOnly, BodyType:String, Body:James
2009-11-15 09:39:01,921 [main           ] INFO  Tracer                         - 856e5e38-e6c6-44bf-b5d6-93ae3d445a86 >>> split[tokenize(body, @)] --> doTry, Pattern:InOnly, BodyType:String, Body:James
2009-11-15 09:39:01,922 [main           ] INFO  Tracer                         - 856e5e38-e6c6-44bf-b5d6-93ae3d445a86 >>> doTry --> bean://error, Pattern:InOnly, BodyType:String, Body:James
2009-11-15 09:39:01,938 [main           ] INFO  Tracer                         - ff5c75a6-f11a-43ed-a6bb-7655cb9897a0 >>> bean://error --> doCatch[IllegalArgumentException], Pattern:InOnly, Headers:{CamelBeanMultiParameterArray=false}, BodyType:String, Body:James
2009-11-15 09:39:01,941 [main           ] INFO  Tracer                         - ff5c75a6-f11a-43ed-a6bb-7655cb9897a0 >>> doCatch[IllegalArgumentException] --> mock://error, Pattern:InOnly, Headers:{CamelBeanMultiParameterArray=false}, BodyType:String, Body:James
2009-11-15 09:39:01,961 [main           ] INFO  Tracer                         - 856e5e38-e6c6-44bf-b5d6-93ae3d445a86 >>> mock://error --> doFinally, Pattern:InOnly, Headers:{CamelBeanMultiParameterArray=false}, BodyType:String, Body:James
2009-11-15 09:39:01,962 [main           ] INFO  Tracer                         - 856e5e38-e6c6-44bf-b5d6-93ae3d445a86 >>> doFinally --> mock://foo, Pattern:InOnly, Headers:{CamelBeanMultiParameterArray=false}, BodyType:String, Body:James
2009-11-15 09:39:01,968 [main           ] INFO  Tracer                         - 856e5e38-e6c6-44bf-b5d6-93ae3d445a86 >>> mock://foo --> mock://bar, Pattern:InOnly, Headers:{CamelBeanMultiParameterArray=false}, BodyType:String, Body:James
{code}
davsclaus:1258251310:2009-11-15T10:15:10.204+0000:1258251310:2009-11-15T10:15:10.204+0000:trunk: 836346.
davsclaus:1275521128:2010-06-03T07:25:28.494+0000:1275521128:2010-06-03T07:25:28.494+0000:Closing old resolved issues"
0,CAMEL-2171,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-14 16:47:07+00:00,2010-06-03 07:25:28+00:00,This causes a difference between Java DSL vs Spring XML routes as the former have set parent.,"davsclaus:1258188607:2009-11-14T16:50:07.398+0000:1258188607:2009-11-14T16:50:07.398+0000:trunk: 836212.
davsclaus:1275521128:2010-06-03T07:25:28.262+0000:1275521128:2010-06-03T07:25:28.262+0000:Closing old resolved issues"
0,CAMEL-2170,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-14 16:45:25+00:00,2010-06-03 07:25:27+00:00,"This ensures these exchanges have an UoW when they are routed, which allows for synchronization tasks to run on completion","davsclaus:1258189855:2009-11-14T17:10:55.907+0000:1258189855:2009-11-14T17:10:55.907+0000:trunk: 836215
davsclaus:1275521127:2010-06-03T07:25:27.913+0000:1275521127:2010-06-03T07:25:27.913+0000:Closing old resolved issues"
0,CAMEL-2169,Improvement,Major,2.2.0,,"
None
",Closed,Incomplete,None,Unassigned,Sergey Beryozkin,0,0,2009-11-13 11:14:53+00:00,2009-11-13 16:09:24+00:00,"Camel routes embedded in camel contexts have no identifiers thus for a route to kick in it has to start (in some cases at least) from a ""from:"" rule. Example from a route working in SMX/JBI :


<camel:camelContext>
	  <camel:route>
	     <camel:from uri=""jbi:endpoint:http://servicemix.apache.org/samples/wsdl-first/receiver/endpoint"" />
             <camel:to uri=""jbi:endpoint:http://servicemix.apache.org/samples/wsdl-first/staticlistener/staticendpoint"" />
          </camel:route>
</camel:camelContext>


The problem is that it makes a given route definition 'unportable' and requires a Camel developer to know some cryptic details like the fully qualified name of the internal JBI endpoint.


If I could do something like


<camel:camelContext>
	  <camel:route id=""

{http://servicemix.apache.org/samples/wsdl-first/receiver}

endpoint"">
             <camel:to uri=""jbi:endpoint:http://servicemix.apache.org/samples/wsdl-first/staticlistener/staticendpoint"" />
          </camel:route>
</camel:camelContext>


then I'd be able to delegate to it easily from some other JBI endpoint, using targetService=""person:endpoint""


Likewise, camel routes could delegate to other routes :


<camel:route id=""

{http://servicemix.apache.org/samples/wsdl-first/receiver}

endpoint"">
             <camel:to uri=""route:http://servicemix.apache.org/samples/wsdl-first/staticlistener/staticendpoint"" />
</camel:route>","davsclaus:1258082432:2009-11-13T11:20:32.125+0000:1258082432:2009-11-13T11:20:32.125+0000:That is what the direct endpoint is for, it allows you to link routes together. 

And a route do have an id its just a marker id that you can use in JMX for example to start/stop the route etc. Also from the Camel API you can use that id.
sergey_beryozkin:1258082903:2009-11-13T11:28:23.757+0000:1258082903:2009-11-13T11:28:23.757+0000:So given this JBI consumer

<beans xmlns:http=""http://servicemix.apache.org/http/1.0""
       xmlns:person=""http://servicemix.apache.org/samples/wsdl-first"">

  <http:consumer   service=""person:PersonService""
                   endpoint=""soap""
                   targetService=""person:receiver""
                   locationURI=""http://0.0.0.0:8192/PersonService/""/>
</beans>


How the above context can be updated for it to avoid using a from rule ?
davsclaus:1258083502:2009-11-13T11:38:22.012+0000:1258083502:2009-11-13T11:38:22.012+0000:Please use the support forum for usage questions.

ServiceMix and Camel are two different projects.

In Camel you define routes using from and to syntax based on URIs
ServiceMix use JBI.

They can be used together and if so you need to use the {{jbi}} endpoint in Camel in the {{from}} and {{to}} tags.

In ServiceMix you do not have to use Camel it has its own light EIP concept as well.

In Camel all inputs to a route must use the {{from}}, so you have to use that with Camel.
sergey_beryozkin:1258083819:2009-11-13T11:43:39.188+0000:1258083819:2009-11-13T11:43:39.188+0000:This is not a support question. Feel free to close this issue if you wish
sergey_beryozkin:1258084142:2009-11-13T11:49:02.858+0000:1258084142:2009-11-13T11:49:02.858+0000:One more comment : it does not matter that Camel and JBI are diff components. This issue is about letting Camel developers write routes without knowing the nitty-gritty details of container environments, ex

in order to get a message from 

targetService=""person:receiver"" (see http:consumer)

a camel user should write

<camel:route id=""{http://servicemix.apache.org/samples/wsdl-first/receiver}endpoint"">

it just does not make sense
sergey_beryozkin:1258084209:2009-11-13T11:50:09.309+0000:1258084209:2009-11-13T11:50:09.309+0000:sorry, meant

<camel:from uri=""jbi:endpoint:http://servicemix.apache.org/samples/wsdl-first/receiver/endpoint"" />

davsclaus:1258084598:2009-11-13T11:56:38.743+0000:1258084598:2009-11-13T11:56:38.743+0000:Take a look at
http://camel.apache.org/jbi

It offers different url formats
{code}
jbi:service:serviceNamespace[sep]serviceName[?options]
jbi:endpoint:serviceNamespace[sep]serviceName[sep]endpointName[?options]
jbi:name:endpointName[?options]
{code}

So I assume you can use the {{jbi:service}} url syntax


sergey_beryozkin:1258084659:2009-11-13T11:57:39.344+0000:1258084659:2009-11-13T11:57:39.344+0000:sorry for the noise. note it would not be a camel core responsibility to ensure SMX JBI camel routes look simpler in the end. It would be the job for servicemix-camel SMX component (see https://issues.apache.org/activemq/browse/SMX4-428). This JIRa is simply about updating a routeDefinition complex type with an extra attribute
davsclaus:1258084883:2009-11-13T12:01:23.602+0000:1258084883:2009-11-13T12:01:23.602+0000:Yeah its all in the hands on the SMX side, how the URL syntax should be for interaction with SMX.

I am closing this one now.
sergey_beryozkin:1258085642:2009-11-13T12:14:02.968+0000:1258085642:2009-11-13T12:14:02.968+0000:I'm afraid you've missed my point. It is indeed in the hands on the SMX side and if this issue has been fixed then it would simply let Camel users write the same route which will work in SMX/standalone
davsclaus:1258086777:2009-11-13T12:32:57.695+0000:1258086777:2009-11-13T12:32:57.695+0000:You write

in order to get a message from

targetService=""person:receiver"" (see http:consumer)

a camel user should write

<camel:route id=""{http://servicemix.apache.org/samples/wsdl-first/receiver}endpoint"">


======================
First of all the above is wrong - you HAVE to use from in Camel to specify the route INPUTs. 

<route>
  <from url=""jbi:XXX:{http://servicemix.apache.org/samples/wsdl-first/receiver}endpoint"">
 ...
</route>

And you may not be aware a Camel route can have *multiple* inputs
<route>
  <from xxx>
  <from yyyy>
</route>

It is *all* in the hands on the SMX side how they want their URL syntax to be.

If SMX decided if you could use short hand URLs then maybe you could write
<route>
  <from url=""jbi:person:receiver"">
  ...
</route>

But JBI is rather complex and has long syntax (maybe because of its WSDL and XML inspirations + namespace).
And I guess it must be able to decide what the namespace for {{person}} is. And how should it lookup that?


And have you actually tried any of the other supported URL syntax it offers, according to the link I posted?

sergey_beryozkin:1258088959:2009-11-13T13:09:19.555+0000:1258088959:2009-11-13T13:09:19.555+0000:Hi Claus

> <camel:route id=""{http://servicemix.apache.org/samples/wsdl-first/receiver}endpoint"">

it was a typo which I pointed out to in the follow-up comment.

Basically, here is the thing. I've tried to write a Camel route as part of the internal project. I found it unnatural that I had to start a camel route in SMX from a ""from:"" route. None of the other SMX components requires that an endpoint which might be targeted by some higher-level endpoint needs to know about that higher-level endpoint.

Also I know that some composite routes like a static-recipients one, certainly does not have to start ""from:"" 

It's not that is blocking me and happy to forget this issue for good. This issue is about making it easy to write a Camel route so that it can be easily included in other higher-level routing environments.

Consider a super complex route (using log: just for brewity.)

<camel:camelContext>
<camel:to uri=""log:test"" />
</camel:route>
</camel:camelContext>

I have a requirement now : reuse in SMX and Mule. So rather than have a camel component added to Camel for integrating with every other container environment out there I'd probably just implement a Mule adapter which would delegate from Mule routes to my camel route

But as I said - I'm ok with putting this issue to bed

thanks


davsclaus:1258091529:2009-11-13T13:52:09.869+0000:1258091529:2009-11-13T13:52:09.869+0000:Yeah if you need to integrate Camel and Mule you can create a camel-mule component.

For example we have a camel-spring-integration component already for integration with SI.
sergey_beryozkin:1258097215:2009-11-13T15:26:55.990+0000:1258097215:2009-11-13T15:26:55.990+0000:And this is what this JIRA proposes to eliminate.

Example. 

At the service mix side we have a servicemix-camel component. So we have already written a component number one.
Now, it's not enough actually, so we've also written a camel-jbi component.

So if if were to reuse the above route in Camel then I'd have to :
- write a Mule mule-camel (similarly to servicemix-camel)
- write a Camel-Mule component and then

For ServiceMix :

<camel:camelContext>
<camel:from uri=""jbi:bar"" />
<camel:to uri=""log:test"" />
</camel:route>
</camel:camelContext>

For Mule  :

<camel:camelContext>
<camel:from uri=""mule:bar"" />
<camel:to uri=""log:test"" />
</camel:route>
</camel:camelContext>

/etc

This is what I said in the very first comments : routes are unportable. I could've had a repository of Camel routes and reuse them from SMX/Mule/Whatever - but I won't be able to do it.

If this JIRA were implemented then ServiceMix Camel would just be enhanced a bit to create internal J BI endpoints from route ids. And for Mule and I'd do a mule-camel at the Mule side.

I appreciate that some routes may need to be specific and use from:. But many don't have to know about the upstream endpoints which may delegate to it. You could've made a camel-jbi eventually redundant.

And guess what, it's only an attribute like id that has to be added to routeDefinition for the above reusability and portability to become a reality at some later stage.  


davsclaus:1258097427:2009-11-13T15:30:27.498+0000:1258097444:2009-11-13T15:30:44.319+0000:You can use endpoint references to make your routes portable

<from ref=""foo""/>

And then have foo either as something that works with MULE or SMX

<bean id=""foo"" class=""org...MuleAdapter""/>
<bean id=""foo"" class=""org...SerivceMixAdapter""/>

sergey_beryozkin:1258099764:2009-11-13T16:09:24.594+0000:1258099764:2009-11-13T16:09:24.594+0000:OK... This looks like an option. Though it is not clear how servicemix-camel or whatever-camel can figure that it is  

<from ref=""foo""/>

which needs to be introspected for the neutral ref like foo.

Checking the route id seems like a much simpler option.  

Either way, lets park it. Many thanks for replying to all my comments :-)"
0,CAMEL-2138,Improvement,Minor,2.0.0,"1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Stanley J. Lewis,0,0,2009-11-05 20:43:06+00:00,2010-06-03 07:25:15+00:00,"To use NTLM with HttpClient you've got to supply NTCredentials instead of UsernamePasswordCredentials.  Luckily they're interchangeable, this patch changes that and adds a ""domain"" and a ""proxyDomain"" option so users can supply their NT domain to either the proxy or the server.","davsclaus:1257455596:2009-11-06T05:13:16.672+0000:1257455596:2009-11-06T05:13:16.672+0000:Ah Stan to be 100% sure if I still want to use Basic I just only supply username and password.
But for NT I *have* to supply domain as well?

Stan do you mind updating the wiki page for camel-http?
http://camel.apache.org/http


njiang:1257468947:2009-11-06T08:55:47.334+0000:1257468947:2009-11-06T08:55:47.334+0000:I just found the NTCredential and UsernamePasswordCredentials aren't interchangeable.
As NTCredential can't accept null of the Domain and Host in it's construction
{code}
      public NTCredentials(String userName, String password, String host,
            String domain) {
        super(userName, password);
        if (domain == null) {
            throw new IllegalArgumentException(""Domain may not be null"");
        }
        this.domain = domain;
        if (host == null) {
            throw new IllegalArgumentException(""Host may not be null"");
        }
        this.host = host;
    }
{code}

davsclaus:1257475523:2009-11-06T10:45:23.485+0000:1257475523:2009-11-06T10:45:23.485+0000:Wiilem are you fixing this?

I am bitten by this now working on another ticket 
njiang:1257476757:2009-11-06T11:05:57.648+0000:1257476757:2009-11-06T11:05:57.648+0000:Yes, I'm working on this now.

slewis:1257477368:2009-11-06T11:16:08.708+0000:1257477368:2009-11-06T11:16:08.708+0000:Interesting, the HttpClient docs stated that NTCredentials could just be used in place of UsernamePasswordCredentials.  But there's no tests in place for any of this.  I'll try and add some tests for this today.
njiang:1257478002:2009-11-06T11:26:42.986+0000:1257478002:2009-11-06T11:26:42.986+0000:@Stan,
I just commit a quick fix[1] for your patch, please feel free to do some enhancement on the Host part and tests :)

[1] http://svn.apache.org/viewvc?rev=833350&view=rev
davsclaus:1257763414:2009-11-09T18:43:34.428+0000:1257763414:2009-11-09T18:43:34.428+0000:I added wiki documentation about the new domain option.
davsclaus:1275521115:2010-06-03T07:25:15.414+0000:1275521115:2010-06-03T07:25:15.414+0000:Closing old resolved issues"
0,CAMEL-2137,Bug,Major,None,2.2.0,"
None
",Closed,Cannot Reproduce,2.2.0,Willem Jiang,Sergey Beryozkin,0,0,2009-11-05 17:21:17+00:00,2010-11-03 05:12:45+00:00,"Create a JBI SU containing a quartz timer.
Create a JBI SU cointaining a Camel route which, for ex, includes, a custom transformation part executed by MyTransform bean class (similarly to that shipped with a number of camel examples). Start from a from: rule which gets the events from a quartz endpoint and delegates to MyTransfrom and let the output from MyTransfrom go to log:test.
This bean won't be invoked and after deploying the assembly and doing


log:display | grep test


you'll see that quartz events are indeed picked up but they're transmitted directly to log:test","davsclaus:1258776143:2009-11-21T12:02:23.679+0000:1258776143:2009-11-21T12:02:23.679+0000:Could you provide a sample project that demonstrates this.

And what version of Camel did you use?
I assume you run it in ServiceMix 4.x but you need to provide details of those versions etc.

If not its *way* to time consuming for us to try guessing and creating something that matches your issue.
njiang:1262133529:2009-12-30T08:38:49.728+0000:1262133529:2009-12-30T08:38:49.728+0000:@ Sergey,
Can you make sure the jbi endpoint that camel from used can be access from the JBI's quartz timer ?
And an example can help us the find the issue :) , can you submit the camel route for this ?

sergey_beryozkin:1262754809:2010-01-06T13:13:29.824+0000:1262756046:2010-01-06T13:34:06.838+0000:Hi Willem

It is ServiceMix 4.1, Camel 2.x (not entirely sure what specific Camel version I was using at a time) 

The pseudo camel route will look like this:

<route>
<!-- quartz is defined in a separate JBI SU, see SMC quartz demo -->
<from:jbi:the-quartz-endpoint-output/>

<!-- see my transform bean in SMX camel demos -->
<to ""MyTransformBean""/>

<to: log>
</route>

It all works really well when a Camel route is deployed as OSGI bundle. But the bean part is missed if it is deployed as JBI SU. 

This is something I spotted awhile back so I do not have a complete SA at hand. I'm not sure how critical this issue is given that camel routes are better be directly deployed as OSGI bundles. 
Feel free to close this issue if you find out that it is not possible to fix it at the JBI level. Perhaps it can be closed as wont-fix and docs can be updated advising users (like me :-)) not to use JBI SU to deploy routes containing beans but rather pure OSGI bundles 
njiang:1262820653:2010-01-07T07:30:53.090+0000:1262820962:2010-01-07T07:36:02.665+0000:Hi Sergey

I just did a quick test on latest apache-servicemix-4.1.0, ever thing looks good.
Please feel free to try out the test case that I used."
0,CAMEL-2136,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Guillaume Nodet,Guillaume Nodet,0,0,2009-11-05 16:59:01+00:00,2010-06-03 07:25:14+00:00,No Desc,"gnodet:1257413309:2009-11-05T17:28:29.221+0000:1257413309:2009-11-05T17:28:29.221+0000:Committed revision 833084.

davsclaus:1257415406:2009-11-05T18:03:26.606+0000:1257415406:2009-11-05T18:03:26.606+0000:Fantastic work. Nice that its consistent now :)
davsclaus:1275521114:2010-06-03T07:25:14.799+0000:1275521114:2010-06-03T07:25:14.799+0000:Closing old resolved issues"
0,CAMEL-2135,New Feature,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-05 15:07:00+00:00,2010-06-03 07:25:14+00:00,"See background here
http://wiki.eclipse.org/Jetty/Tutorial/HttpClient


Basically allowing to use jetty://http://someserver"" in the to as well which instead of using HTTP client will use Jetty that supports async request/reply.","davsclaus:1257404927:2009-11-05T15:08:47.390+0000:1257404927:2009-11-05T15:08:47.390+0000:When we have upgraded to Apache HTTP client 4.0 it can also support async request/reply as well.
davsclaus:1257491326:2009-11-06T15:08:46.060+0000:1257491326:2009-11-06T15:08:46.060+0000:trunk: 833429.

First batch of commit. This is work in progress.
davsclaus:1257746839:2009-11-09T14:07:19.944+0000:1257746839:2009-11-09T14:07:19.944+0000:This is a *non blocking* variation where the original thread will terminate and when a reply is read a new thread is spawned that processed the reply. Well there is a thread pool for processing replies.
davsclaus:1257746890:2009-11-09T14:08:10.688+0000:1257746890:2009-11-09T14:08:10.688+0000:trunk: 834008

More work. What is left is a CAMEL-2151
davsclaus:1257828071:2009-11-10T12:41:11.798+0000:1257828071:2009-11-10T12:41:11.798+0000:trunk: 834452.

Aligned the http response handling code with the camel-http component.
davsclaus:1257906588:2009-11-11T10:29:48.501+0000:1257906588:2009-11-11T10:29:48.501+0000:trunk: 834834.

Now response parsing is implemented and shared between sync and async mode. Its also pluggable as the camel-http component
davsclaus:1257912818:2009-11-11T12:13:38.313+0000:1257912818:2009-11-11T12:13:38.313+0000:trunk: 834846.

Now handles timeout as camel-http does. Also added for other Jetty kind of failures.
davsclaus:1257995407:2009-11-12T11:10:07.031+0000:1257995407:2009-11-12T11:10:07.031+0000:trunk: 835332.
davsclaus:1258347077:2009-11-16T12:51:17.682+0000:1258347077:2009-11-16T12:51:17.682+0000:trunk: 880731.

Added CXF based example
davsclaus:1275521114:2010-06-03T07:25:14.437+0000:1275521114:2010-06-03T07:25:14.437+0000:Closing old resolved issues"
0,CAMEL-2134,Improvement,Major,1.6.1,1.6.2,"
None
",Closed,Fixed,1.6.2,Claus Ibsen,David Valeri,0,0,2009-11-04 16:10:53+00:00,2010-11-03 05:10:52+00:00,"The queue and thread pool are only as large as the number of endpoints that the multicast sends to.  I have been working with multicasts recently and found that you can very quickly overwhelm the default executor configured for a MulticastProcessor if you have a high message volume and/or concurrent consumers.  With the default redelivery policy in place, the exchanges may get redelivered to the multicast endpoints an arbitrary number of times which could be considered counter intuitive for novice users.","davaleri:1257322420:2009-11-04T16:13:40.616+0000:1257322819:2009-11-04T16:20:19.379+0000:Attached patch which mimics default executor configuration that was adopted in Camel 2.0.  The patch provides for safer defaults at the expense of the risk of unbounded queue growth.

Perhaps a nod to this risk and the configuration defaults in the 1.6.x and 2.x documentation is also warranted.
davsclaus:1257326299:2009-11-04T17:18:19.718+0000:1257326299:2009-11-04T17:18:19.718+0000:1.x: 832801.

Applied patch. Thanks a lot David. Keep 'em coming."
0,CAMEL-2133,Bug,Major,"2.0-M1, 2.0-M2, 2.0-M3, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-11-04 12:23:55+00:00,2010-06-03 07:25:12+00:00,No Desc,"njiang:1257309102:2009-11-04T12:31:42.257+0000:1257309102:2009-11-04T12:31:42.257+0000:trunk
http://svn.apache.org/viewvc?rev=832723&view=rev

davsclaus:1257314527:2009-11-04T14:02:07.435+0000:1257314527:2009-11-04T14:02:07.435+0000:Had to fix an issue with the bean component because if this change

trunk: 832745
davsclaus:1275521112:2010-06-03T07:25:12.850+0000:1275521112:2010-06-03T07:25:12.850+0000:Closing old resolved issues"
0,CAMEL-2132,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-04 10:12:18+00:00,2010-06-03 07:25:12+00:00,"If not a null message is created and send.


See nabble:
http://old.nabble.com/JPA%3A-Could-not-pass-Object-from-jpa-to-jms-to26160124.html","davsclaus:1257302765:2009-11-04T10:46:05.006+0000:1257302765:2009-11-04T10:46:05.006+0000:trunk: 832702.
davsclaus:1275521112:2010-06-03T07:25:12.621+0000:1275521112:2010-06-03T07:25:12.621+0000:Closing old resolved issues"
0,CAMEL-2131,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Guillaume Nodet,0,0,2009-11-03 16:38:08+00:00,2010-06-03 07:25:11+00:00,No Desc,"davsclaus:1257314495:2009-11-04T14:01:35.910+0000:1257314495:2009-11-04T14:01:35.910+0000:trunk: 832743
davsclaus:1257324858:2009-11-04T16:54:18.098+0000:1257324858:2009-11-04T16:54:18.098+0000:Had to fix an issue with this to make it work properly

trunk: 832794.
davsclaus:1275521111:2010-06-03T07:25:11.885+0000:1275521111:2010-06-03T07:25:11.885+0000:Closing old resolved issues"
0,CAMEL-2130,Improvement,Minor,None,Future,"
None
",Resolved,Later,Future,Claus Ibsen,James Strachan,0,1,2009-11-03 14:27:17+00:00,2017-03-09 14:26:37+00:00,"we should add a ModelVisitor interface to the model classes so that you can visit the model to see what endpoints, languages, dataformats are used - for example for reporting, OSGi dependency tracking or UI reasons.



definition = ...; // a route definition, a node in the route or a set or routes

SimpleVisitor visitor = new SimpleVisitor();
definition.visit(visitor);

System.out.println(""The dataformats are: "" + visitor.getDataFormats());
System.out.println(""The endpoints are: "" + visitor.getEndpoints());
System.out.println(""The expressions are: "" + visitor.getExpressions());","davsclaus:1427242769:2015-03-25T08:19:29.904+0000:1427242769:2015-03-25T08:19:29.904+0000:Now that we can link from model <-> processor it makes more sense to have a nicer visitor api abstraction for this. We do have the foundation in a helper class in the model to visit the model.

"
0,CAMEL-2129,Bug,Major,2.0.0,"1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Christian Schneider,0,0,2009-11-03 13:01:35+00:00,2009-11-15 08:31:38+00:00,"We use camel-cxf and camel-jms to offer CXF services over SOAP/JMS.


When the client calls the service by using the generated stub code and a timeout occurs I get an exception ""Null InputStream is not a valid argument"". I would rather expect something like ""Timeout calling service"". Full stack trace is attached below.


The routing config is attached below.
<client id=""customerService"" xmlns=""http://cxf.apache.org/jaxws""
xmlns:service=""http://examples.etg.services.enbw.net/""
  serviceName=""service:CustomerService""
  endpointName=""service:CustomerServiceEndpoint""
  serviceClass=""net.enbw.services.etg.examples.customerservice.CustomerServiceV1""
  address=""camel://direct:client"">
</client>


<camelContext id=""camelContext"" trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""direct:client""/>
    <to uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
  </route>
</camelContext>


------
03.11.2009 13:20:58 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNUNG: Interceptor has thrown exception, unwinding now
java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:34)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
Exception in thread ""main"" javax.xml.ws.soap.SOAPFaultException: Null InputStream is not a valid argument
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:146)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:34)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
Caused by: java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	... 3 more","cschneider:1257224731:2009-11-03T13:05:31.653+0000:1257224801:2009-11-03T13:06:41.971+0000:The same exception appears if the jms server is not started. In this case I would expect an exception like ""JMS Component could not connect to jms server"". At least shortly after this exception an info message is logged that says ""Could not refresh JMS Connection"".

Stack trace:
-- 
03.11.2009 14:03:42 org.apache.cxf.phase.PhaseInterceptorChain doIntercept
WARNUNG: Interceptor has thrown exception, unwinding now
java.lang.IllegalArgumentException: Null InputStream is not a valid argument
	at com.ctc.wstx.stax.WstxInputFactory.createSR(WstxInputFactory.java:614)
	at com.ctc.wstx.stax.WstxInputFactory.createXMLStreamReader(WstxInputFactory.java:324)
	at org.apache.cxf.staxutils.StaxUtils.createXMLStreamReader(StaxUtils.java:879)
	at org.apache.cxf.interceptor.StaxInInterceptor.handleMessage(StaxInInterceptor.java:83)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:664)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.handleResponse(CamelConduit.java:191)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:183)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:153)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:185)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:478)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:308)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:260)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
	at $Proxy63.readCustomersByName(Unknown Source)
	at net.enbw.endur.AppModule.doBusiness(AppModule.java:25)
	at net.enbw.endur.AppMain.main(AppMain.java:23)
14:05:09,213 INFO  org.springframework.jms.listener.DefaultMessageListenerContainer refreshConnectionUntilSuccessful - Could not refresh JMS Connection - retrying in 100000 ms: javax.jms.JMSException: Failed to connect to the server at tcp://localhost:7222

njiang:1257362066:2009-11-05T03:14:26.466+0000:1257362066:2009-11-05T03:14:26.466+0000:@Christian
I rechecked to code of CamelConduit and found we should check the template's exception before we continue to process the message.
I will commit a quick patch for this. You should get a IOException with the cause message now.
njiang:1257362760:2009-11-05T03:26:00.351+0000:1257362760:2009-11-05T03:26:00.351+0000:trunk
http://svn.apache.org/viewvc?rev=832981&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=832983&view=rev
cschneider:1257380882:2009-11-05T08:28:02.310+0000:1257380917:2009-11-05T08:28:37.572+0000:Hi Willem,

could you change the two places where you throw the exception into:
  throw new IOException(""Can't get the response message"", ex);
instead of:
  throw new IOException(""Can't get the response message. Caused by: "" + ex);

and 

   throw new IOException(""Can't get the response message"", exchange.getException());
instead of 
   throw new IOException(""Can't get the response message. Caused by "" + exchange.getException());

This will forward the stack trace.

After this additional change when I simply start a cxf client that forwards its message to camel jms I get the exception below. This still does not look correct. The root cause is a nullpointer exception in SimpleMessageListenerContainer.doShutdown. The attributes consumers and sessions are null. The implementation does not check this though. This results in the throw ex not being executed:

if (ex != null) {

  stop(childrenStarted); <----- inside here we get the nullpointer ex

  throw ex; <---- So this exception is lost

}

As we can not directly fix this I think the way to fix the problem is catching this exception in camel.impl.ServiceSupport.stop. A try catch that ignores all errors should do the trick. 

org.apache.cxf.interceptor.Fault: Could not send Message.
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:236)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:471)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:301)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:253)
	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)
	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:121)
	at $Proxy61.getCustomersByName(Unknown Source)
	at com.example.customerservice.impl.CustomerServiceClient.main(CustomerServiceClient.java:45)
Caused by: java.io.IOException: Can't get the response message
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:186)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:155)
	at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:177)
	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)
	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)
	... 8 more
Caused by: org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[jms://queue:CustomerService]. Reason: java.lang.NullPointerException
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:116)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:175)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:147)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:81)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:79)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:78)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:170)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:156)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:141)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:155)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:101)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:88)
	at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:172)
	... 12 more
Caused by: java.lang.NullPointerException
	at org.springframework.jms.listener.SimpleMessageListenerContainer.doShutdown(SimpleMessageListenerContainer.java:304)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.shutdown(AbstractJmsListeningContainer.java:211)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.destroy(AbstractJmsListeningContainer.java:149)
	at org.apache.camel.component.jms.requestor.Requestor.doStop(Requestor.java:212)
	at org.apache.camel.impl.ServiceSupport.stop(ServiceSupport.java:74)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:57)
	at org.apache.camel.component.jms.JmsProducer.testAndSetRequestor(JmsProducer.java:108)
	... 36 more

njiang:1257381523:2009-11-05T08:38:43.416+0000:1257381523:2009-11-05T08:38:43.416+0000:@Christian
JDK 1.5 doesn't provide the construction method of IOException like this
IOException(String message, Throwable t);

So I took the advise of Claus to use the utils method of camel to create IOException like this
{code}
IOException cause = new IOException(""xxxx""):
cause.initCause(e);
{code}

Can you try out the last trunk code which contains my change to verify it ?

cschneider:1257435901:2009-11-05T23:45:01.099+0000:1257435901:2009-11-05T23:45:01.099+0000:I have tested your new patch. Looks good to me but we should still fix the bug that causes the ""Could not connect to broker"" to be swallowed. I will add a patch for this.
cschneider:1257436227:2009-11-05T23:50:27.530+0000:1257436227:2009-11-05T23:50:27.530+0000:This is a patch for camel core done on basis of camel 2.0.0. The bug is in ServiceSupport.start().
After an exception happens it tries to stop the service without catch possible exceptions the could happen inside the stop method. I just added a try catch and ignored any exceptions. A comment explains why the catch is empty.
njiang:1257875524:2009-11-11T01:52:04.943+0000:1257875524:2009-11-11T01:52:04.943+0000:Applied the patch with thanks to Christian
trunk
http://svn.apache.org/viewvc?rev=833285&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=833288&view=rev"
0,CAMEL-2128,Bug,Major,2.0.0,"1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Christian Schneider,0,0,2009-11-03 12:30:30+00:00,2009-11-06 11:28:56+00:00,"I have a request reply service that should be able to do three different
things:


1)  no exception occurs in the implementation: The jms Message should be
committed and the normal reply should be sent
2) The implementation throws an exception defined in the service contract:
The jms message should be committed and a fault should be sent
3) The implemementation throws another kind of exception: The message delivery should
be rolled back so it can be received again


Case 1 and 2 currently work as expected.


For Case 3 a fault is returned to the caller and the transaction is committed which is wrong.","cschneider:1257222834:2009-11-03T12:33:54.481+0000:1257222834:2009-11-03T12:33:54.481+0000:Sample Applicationcontext that contains a transactional route that forwards from jms to a cxf service
cschneider:1257222883:2009-11-03T12:34:43.173+0000:1257222883:2009-11-03T12:34:43.173+0000:Also see the thread Problem with SOAP/JMS and transactions in the user list:
http://mail-archives.apache.org/mod_mbox/camel-users/200911.mbox/thread

cschneider:1257222972:2009-11-03T12:36:12.181+0000:1257222997:2009-11-03T12:36:37.746+0000:Willem Jiang has created a patch that partly resolves this issue:

cschneider:1257223020:2009-11-03T12:37:00.645+0000:1257223020:2009-11-03T12:37:00.645+0000:Patch from Willem
cschneider:1257223079:2009-11-03T12:37:59.845+0000:1257223079:2009-11-03T12:37:59.845+0000:I have built a camel-cxf module that includes the patch. Now the rollback
basically works.
The problem is that it happens for all exceptions. I think a good default
would be to return a fault for all exceptions that the service explicitly
defines and roll back for all other exceptions. The problem is I have no
idea how this could be done.

In the meantime I will try to use an onException() clause to do this
differentiation.

cschneider:1257226153:2009-11-03T13:29:13.727+0000:1257226153:2009-11-03T13:29:13.727+0000:I have managed to route my special NoSuchCustomerException so that it will commit and return a fault by using the following camel context.
While I still think the defined exceptions should be handled as a Soap Fault by default this at least means that my transactional CXF Service works. So I think the patch from Willem should go into trunk.

<camelContext id=""camelContext"" trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
  <onException>
    <exception>net.enbw.services.etg.examples.customerservice.NoSuchCustomerException</exception>
      <handled><constant>true</constant></handled>
    </onException>
    <route>
      <from uri=""direct:client""/>
      <to uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
  </route>
  <route>
    <from uri=""jms://queue.net.enbw.services.etg.examples.customerservice.CustomerService"" />
    <transacted/>
    <to uri=""direct:server""/>
  </route>
</camelContext>

njiang:1257270942:2009-11-04T01:55:42.040+0000:1257270942:2009-11-04T01:55:42.040+0000:@Christian
It is hard to let CamelTransport to know which kind of exception is defined by User, and the CamelTransport should now nothing about the application level thing. Let's put the ignoring the customer exception on the camel's error handler framework.
I will commit my patch in a min :)

njiang:1257272871:2009-11-04T02:27:51.406+0000:1257272871:2009-11-04T02:27:51.406+0000:trunk
http://svn.apache.org/viewvc?rev=832647&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=832648&view=rev
njiang:1257477363:2009-11-06T11:16:03.630+0000:1257478136:2009-11-06T11:28:56.724+0000:@Christian,
I just found this fix broken the old camel transport example , which don't want to camel error handle to be involved.  
I will create a new JIRA CAMEL-2142 to add a flag on the CamelTransportFactory to enable this feature. "
0,CAMEL-2127,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Martin Krasser,Martin Krasser,0,0,2009-11-03 08:36:10+00:00,2010-06-03 07:25:11+00:00,No Desc,"mrt1nz:1257212691:2009-11-03T09:44:51.076+0000:1257212691:2009-11-03T09:44:51.076+0000:The existing getAndRemoveParameter() method will not be changed because existing clients/code (Camel-intern and likely Camel-extern) rely on returning the reference instead of the de-referenced object. 
mrt1nz:1257215208:2009-11-03T10:26:48.775+0000:1257215208:2009-11-03T10:26:48.775+0000:At revision: 832376
davsclaus:1275521111:2010-06-03T07:25:11.697+0000:1275521111:2010-06-03T07:25:11.697+0000:Closing old resolved issues"
0,CAMEL-2126,New Feature,Minor,2.0.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2009-11-03 08:14:57+00:00,2011-04-24 10:00:41+00:00,"Would be great with a little goodie for Camel users so they can easily extract using xpath without all the hazzle with the JDK API for that.


So they can do that in one liners with the help of the Camel XPathBuilder.","davsclaus:1265763094:2010-02-10T08:51:34.050+0000:1265763094:2010-02-10T08:51:34.050+0000:This requires that CamelContext is provided as a parameter since the xpath logic uses type conversion and for that the camel context is used to get the converter.
davsclaus:1265763619:2010-02-10T09:00:19.827+0000:1265763619:2010-02-10T09:00:19.827+0000:trunk: 908395.

Updated wiki page at XPath with examples how to use
davsclaus:1303610441:2011-04-24T10:00:41.123+0000:1303610441:2011-04-24T10:00:41.123+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2125,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-11-02 09:42:52+00:00,2010-06-03 07:25:11+00:00,No Desc,"njiang:1257133294:2009-11-02T11:41:34.515+0000:1257133294:2009-11-02T11:41:34.515+0000:http://svn.apache.org/viewvc?rev=831843&view=rev
davsclaus:1275521111:2010-06-03T07:25:11.461+0000:1275521111:2010-06-03T07:25:11.461+0000:Closing old resolved issues"
0,CAMEL-2124,Sub-task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Martin Krasser,Martin Krasser,0,0,2009-11-01 08:16:06+00:00,2010-06-03 07:25:11+00:00,"Allows for sending mails via the GAE mail service. For example,



...
.to(""gmail:xy@gmail.com?to=test@somewhere.com"")




sends an email to test@somewhere.com. The sender is xy@gmail.com, the mail body and subject are provided by the exchange. A more detailed description will follow.","mrt1nz:1258338821:2009-11-16T10:33:41.615+0000:1258338821:2009-11-16T10:33:41.615+0000:Initial work committed. Improvements will be tracked separately.
davsclaus:1275521111:2010-06-03T07:25:11.137+0000:1275521111:2010-06-03T07:25:11.137+0000:Closing old resolved issues"
0,CAMEL-2123,New Feature,Minor,2.1.0,None,"
None
",Closed,Incomplete,2.1.0,Claus Ibsen,Chris Wojdak,0,0,2009-10-30 20:13:40+00:00,2010-06-03 07:25:10+00:00,I'm new to camel and i can't get PDF's to print using the print component in 2.1. Can someone please help me out??,"davsclaus:1256955742:2009-10-31T10:22:22.401+0000:1256955742:2009-10-31T10:22:22.401+0000:Hi

Please use the Camel mailinglist for help with usages.
http://camel.apache.org/mailing-lists.html

This is a issue tracker where bugs and improvements are reported.

And when you want help you have to write more specific what your issue is. What you wrote is much to general.
davsclaus:1275521110:2010-06-03T07:25:10.603+0000:1275521110:2010-06-03T07:25:10.603+0000:Closing old resolved issues"
0,CAMEL-2122,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Maciej Prochniak,0,0,2009-10-30 09:54:07+00:00,2010-06-03 07:25:09+00:00,"trying to inject following:
public void insert(@XPath(""concat('48','//node/msisdn/text())"") String msisdn) { }
results in  
Can not convert #STRING to a NodeList! exception.


The reason is that XPathAnnotationExpressionFactory uses 
XPathBuilder.xpath(xpath); 
and by default xpath is evaluated as nodeSet.


I think it would be nice to be able to define result type in annotation e.g.
@XPath(value = ""concat('48','//node/msisdn/text())"", resultType = String.class)
The default would be NodeSet to be backward compatible","mproch:1256871436:2009-10-30T10:57:16.473+0000:1256871436:2009-10-30T10:57:16.473+0000:Test case + patch
davsclaus:1257053318:2009-11-01T13:28:38.912+0000:1257053318:2009-11-01T13:28:38.912+0000:Applied patch with thanks.

trunk: 831674
davsclaus:1275521109:2010-06-03T07:25:09.952+0000:1275521109:2010-06-03T07:25:09.952+0000:Closing old resolved issues"
0,CAMEL-2121,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-29 15:58:30+00:00,2010-06-03 07:25:09+00:00,No Desc,"karlp:1256804825:2009-10-29T16:27:05.758+0000:1256804825:2009-10-29T16:27:05.758+0000:If one is open, and one is denied won't fix?
karlp:1256804886:2009-10-29T16:28:06.412+0000:1256804886:2009-10-29T16:28:06.412+0000:Actually, never mind sorry, I didn't notice that I'm finding this only _hours_ after you filed it :) What timing :)
davsclaus:1256812992:2009-10-29T18:43:12.850+0000:1256812992:2009-10-29T18:43:12.850+0000:Yeah Karl lets get it into 2.1 now that *you* need it :)

The original tempPrefix was string based and implemented before the file component was so flexible as its now.
davsclaus:1256860931:2009-10-30T08:02:11.696+0000:1256860931:2009-10-30T08:02:11.696+0000:trunk: 831222.

Karl can you test it on your system.

For example using
{code}
tempFileName=${file:name.noext}.tmp
{code}

To write using .tmp as filename

And you can of course have a prefix as well such as
{code}
tempFileName=inprogress-${file:name.noext}.tmp
{code}

And you can also use
{code}
tempFileName=inprogress-${file:name}.tmp
{code}

To append .tmp to the exiting filename included its extension, such as: myfile.xml.tmp


davsclaus:1275521109:2010-06-03T07:25:09.097+0000:1275521109:2010-06-03T07:25:09.097+0000:Closing old resolved issues"
0,CAMEL-2120,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-29 11:13:12+00:00,2010-06-03 07:25:08+00:00,"There are 4 runnable camel routes in this example. and we should provide spring configure file to start these service in ServiceMix.


1. CamelTransportExample, we need to publish the CXF service use the CamelTransport for load balancing.
2. CamelCXFExample, which shows how to use camel route to bridge different transport service.
3. CamelRSExample,  shows how to provide a REST and SOAP service at same time in Camel.
4. CamelProviderExample, shows us how to use the JAXWS Provider API to handle the request in Camel.","njiang:1256867090:2009-10-30T09:44:50.196+0000:1256867090:2009-10-30T09:44:50.196+0000:http://svn.apache.org/viewvc?rev=831236&view=rev
davsclaus:1275521108:2010-06-03T07:25:08.904+0000:1275521108:2010-06-03T07:25:08.904+0000:Closing old resolved issues"
0,CAMEL-2119,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-29 11:11:22+00:00,2010-06-03 07:25:08+00:00,No Desc,"njiang:1256857556:2009-10-30T07:05:56.593+0000:1256857556:2009-10-30T07:05:56.593+0000: http://svn.apache.org/viewvc?rev=831193&view=rev
 http://svn.apache.org/viewvc?rev=831202&view=rev

davsclaus:1275521108:2010-06-03T07:25:08.657+0000:1275521108:2010-06-03T07:25:08.657+0000:Closing old resolved issues"
0,CAMEL-2118,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-29 11:06:29+00:00,2010-06-03 07:25:07+00:00,"There are two RouteBuilder, on from the queue version , the other for the webservice version.","njiang:1257133249:2009-11-02T11:40:49.961+0000:1257133249:2009-11-02T11:40:49.961+0000:http://svn.apache.org/viewvc?rev=831852&view=rev
davsclaus:1275521107:2010-06-03T07:25:07.660+0000:1275521107:2010-06-03T07:25:07.660+0000:Closing old resolved issues"
0,CAMEL-2117,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-29 10:59:16+00:00,2010-06-03 07:25:07+00:00,"Current camel-example-guice-jms only using the mail class to start the camel context.
If we want to deploy the camel-example-guice-jms into ServiceMix, we need to create spring configuration file for holding the camel-context.xml in the META-INF/spring/ directory , as the tutorial shows.","njiang:1257106096:2009-11-02T04:08:16.813+0000:1257106096:2009-11-02T04:08:16.813+0000:As this demo use the Guice for the Dependency Injection, we can use OSGi's Activator to start the whole process instead of using Spring to load the camel route.
njiang:1257133330:2009-11-02T11:42:10.311+0000:1257133330:2009-11-02T11:42:10.311+0000: http://svn.apache.org/viewvc?rev=831845&view=rev
davsclaus:1275521107:2010-06-03T07:25:07.438+0000:1275521107:2010-06-03T07:25:07.438+0000:Closing old resolved issues"
0,CAMEL-2116,Improvement,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-29 09:51:15+00:00,2010-06-03 07:25:06+00:00,"First we should create bundle for examples, and use spring configuration to create the camel context to start up the back end services
Then use the example's client to call for the service.","cmoulliard:1256783293:2009-10-29T10:28:13.174+0000:1256783293:2009-10-29T10:28:13.174+0000:Hi Willem,

 I'm in the process to update my camel tutorial osgi part 1 and 2 to be able to run on Apache Felix Karaf 1.0.0 (or ServiceMix 4.0.0).

Why don't you use the material that I create for tutorial 1 (http://cwiki.apache.org/confluence/display/CAMEL/tutorial-osgi-camel-part1) to avoid to reinvent the wheel ?

njiang:1256784417:2009-10-29T10:46:57.480+0000:1256784417:2009-10-29T10:46:57.480+0000:Yeah, your tutorial shows a good example which can run in servicemix. 
My goal in camel-2116 is to make current camel examples work better in Servicemix.
davsclaus:1275521106:2010-06-03T07:25:06.872+0000:1275521106:2010-06-03T07:25:06.872+0000:Closing old resolved issues"
0,CAMEL-2115,Task,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-27 13:58:37+00:00,2010-06-03 07:25:06+00:00,"It belongs in the spi package like the others.


Hardly used by anyone but they can migrate the code when upgrading to Camel 2.1 from 2.0.","davsclaus:1256624547:2009-10-27T14:22:27.884+0000:1256624547:2009-10-27T14:22:27.884+0000:trunk: 830197
davsclaus:1275521106:2010-06-03T07:25:06.543+0000:1275521106:2010-06-03T07:25:06.543+0000:Closing old resolved issues"
0,CAMEL-2114,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,William Tam,William Tam,0,0,2009-10-27 13:15:50+00:00,2010-06-03 07:25:06+00:00,Support MTOM attachment in camel-cxf PAYLOAD mode.,"wtam:1256723594:2009-10-28T17:53:14.209+0000:1256725221:2009-10-28T18:20:21.637+0000:Committed revision 830701.
Committed revision 830708.

davsclaus:1275521106:2010-06-03T07:25:06.344+0000:1275521106:2010-06-03T07:25:06.344+0000:Closing old resolved issues"
0,CAMEL-2113,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-27 09:22:03+00:00,2010-06-03 07:25:06+00:00,"Its a bit more trivial for end users to know how to set bean name and method if having two attributes.


Otherwise they have to know about you can use dot to separate the ben name for the method name.","davsclaus:1256607067:2009-10-27T09:31:07.987+0000:1256607067:2009-10-27T09:31:07.987+0000:Will introduce {{ref}} and {{method}} as attributes on the @Bean annotation.
This will need an upgrade in code to go from value to these two instead.
davsclaus:1256607102:2009-10-27T09:31:42.657+0000:1256607102:2009-10-27T09:31:42.657+0000:It should also filter out certain methods to avoid ambiguity.

{code}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: null on guid due to: org.apache.camel.component.bean.AmbiguousMethodCallException:
{code}


davsclaus:1256613056:2009-10-27T11:10:56.340+0000:1256613056:2009-10-27T11:10:56.340+0000:trunk: 830131.
davsclaus:1275521106:2010-06-03T07:25:06.021+0000:1275521106:2010-06-03T07:25:06.021+0000:Closing old resolved issues"
0,CAMEL-2112,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Christian Schneider,0,0,2009-10-27 07:35:36+00:00,2009-10-28 02:32:46+00:00,"I recently tried to convert my unit tests to junit 4 using the new Spring test framework.


Since then I get the following exception when calling the test.
Error creating bean with name 'org.apache.camel.component.cxf.transport.CamelTransportFactory#0': Injection of resource methods failed; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [java.lang.String] found for dependency [collection of java.lang.String]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}


The same happens when I activate /<context:annotation-config/>/


I think it has to do with autowiring. Do you have any idea what goes wrong here and how I can fix it?","cschneider:1256600289:2009-10-27T07:38:09.902+0000:1256600289:2009-10-27T07:38:09.902+0000:I have attached a sample project that shows the problem when using <context:annotation-config/>  
cschneider:1256600431:2009-10-27T07:40:31.686+0000:1256600431:2009-10-27T07:40:31.686+0000:I have attached the full stack trace
njiang:1256601940:2009-10-27T08:05:40.386+0000:1256601940:2009-10-27T08:05:40.386+0000:Hi Christian,

CXF implements it's own JSR250 processor to handle the bus injection. 
Spring will start  it's own JSR250 implementation, when you activate <context:annotation-config/>.

Do you have any specify reason to use the <context:annotation-config/> ? 
If so , we may need to fix it from CXF.

Willem


cschneider:1256602287:2009-10-27T08:11:27.897+0000:1256602287:2009-10-27T08:11:27.897+0000:Hi Willem,

I use the <context:annotation-config/> to check for example for @Required properties. For the short term I could switch to the implementation of CXF. How do I do it? In the long run though I think it would be better if CXF would work with the processor from spring.

The case where the problem arises is when using the new spring test framework. This also seems to activate the spring processor. As the older testing style is deprecated I think CXF should support the new style.

Greetings

Christian

njiang:1256612607:2009-10-27T11:03:27.811+0000:1256612607:2009-10-27T11:03:27.811+0000:@ Christian,

I just got time to check your test-case and stack trace. From the stack trace , it looks like CamelTransportFactory has a wrong annotated field, and the spring JSR250 can't find a right value to inject. Removed the @Resource annotation from  public void setActivationNamespaces(Collection<String> ans) resolved this issue.

BTW,  there are some explanation of the CXF JSR250 PostProcessor in [CXF-2210|https://issues.apache.org/jira/browse/CXF-2210] which shows CXF JSR250PostProcessor can work with Spring JSR250 PostProcessor.
njiang:1256615068:2009-10-27T11:44:28.860+0000:1256615068:2009-10-27T11:44:28.860+0000:trunk
http://svn.apache.org/viewvc?rev=830137&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=830140&view=rev
cschneider:1256618456:2009-10-27T12:40:56.207+0000:1256618456:2009-10-27T12:40:56.207+0000:Thanks for the quick fix. I already thought that @Resource could perhaps be wrong. 
Is there a way for us to work around this issue till Camel 2.1.0 is realeased?

njiang:1256668366:2009-10-28T02:32:46.898+0000:1256668366:2009-10-28T02:32:46.898+0000:I'm afraid you need to remove the <context:annotation-config/> to get it work in Camel 2.0.
"
0,CAMEL-2111,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Christian Schneider,0,0,2009-10-27 07:30:40+00:00,2009-10-27 12:31:00+00:00,"I am using camel 2.0.0 together with CXF 2.2.4. My problem is that camel-cxf pulls in many CXF poms that I do not need.
So I either have to exclude them or include them in my own project with version 2.2.4. I would rather prefer that camel-cxf only includes what it really needs.


This is the list camel-cxf includes:


      <artifactId>cxf-rt-frontend-jaxrs</artifactId>
      <artifactId>cxf-rt-core</artifactId>
      <artifactId>cxf-rt-transports-http</artifactId>
      <artifactId>cxf-rt-transports-http-jetty</artifactId>
      <artifactId>cxf-rt-transports-local</artifactId>
      <artifactId>cxf-rt-frontend-simple</artifactId>
      <artifactId>cxf-rt-frontend-jaxws</artifactId>
      <artifactId>cxf-rt-management</artifactId>
      <artifactId>cxf-tools-common</artifactId>","njiang:1256607032:2009-10-27T09:30:32.879+0000:1256607032:2009-10-27T09:30:32.879+0000:I just rechecked the camel-cxf pom.xml , we could clean up lots of  dependencies as the remains dependencies will introduce other cxf artifacts dependency.
There are what we just need.
{code}
<artifactId>cxf-rt-frontend-jaxrs</artifactId>
<artifactId>cxf-rt-transports-http-jetty</artifactId>
<artifactId>cxf-rt-frontend-jaxws</artifactId>
{code}
njiang:1256608050:2009-10-27T09:47:30.231+0000:1256608050:2009-10-27T09:47:30.231+0000:trunk
http://svn.apache.org/viewvc?rev=830103&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=830105&view=rev
cschneider:1256617860:2009-10-27T12:31:00.547+0000:1256617860:2009-10-27T12:31:00.547+0000:That looks much better already. Thanks for the quick help."
0,CAMEL-2110,Improvement,Minor,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-27 06:17:14+00:00,2010-06-03 07:25:05+00:00,"Add this method



    /**
     * Current size of inflight exchanges which are from the given endpoint.
     * <p/>
     * Will return 0 if there are no inflight exchanges.
     *
     * @param endpoint the endpoint where the {@link Exchange} are from.
     * @return number of exchanges currently in flight.
     */
    int size(Endpoint endpoint);




To the InflightRepository.


This allows fine grained tracking of in flight exchanges. Then a given route and consumer can report the number of exchanges it has in flight.
And we can also use that to help throtteling a consumer to avoid having too many in flight exchanges.","davsclaus:1256598357:2009-10-27T07:05:57.457+0000:1256598357:2009-10-27T07:05:57.457+0000:trunk: 830073.
davsclaus:1275521105:2010-06-03T07:25:05.739+0000:1275521105:2010-06-03T07:25:05.739+0000:Closing old resolved issues"
0,CAMEL-2109,Bug,Major,2.1.0,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Patrick Klippel,0,1,2009-10-26 10:21:25+00:00,2014-09-05 18:30:59+00:00,"When building a route like this:



....
public void configure() {

from(""jms:fileIn?transacted=true"")
  .onException(UnmarshalException.class)
   .handled(true)
    .bean(FileProcessExceptionBean.class,""handleException"")
.end()
.id(""fileMapping"")
.transacted()
.process(new FileProcessor())
.to(""jms:fileOut"");

}




the id is not set. When the onException-section is removed, the id is set correctly","davsclaus:1256526040:2009-10-26T11:00:40.682+0000:1256526040:2009-10-26T11:00:40.682+0000:And you want the id {{fileMapping}} to be the route id?
davsclaus:1256526123:2009-10-26T11:02:03.953+0000:1256526123:2009-10-26T11:02:03.953+0000:Moving the id after the from makes the route have that id

{code}
from(""jms:fileIn?transacted=true"")
.id(""fileMapping"")
...
{code}
davsclaus:1256526293:2009-10-26T11:04:53.474+0000:1256526293:2009-10-26T11:04:53.474+0000:See nabble:
http://www.nabble.com/RouteBuilder%3A-Problems-with-onException-and-id-td26024958.html
dulmerlucsly:1256530443:2009-10-26T12:14:03.385+0000:1256530443:2009-10-26T12:14:03.385+0000:But putting .id() before onException makes onException not working correctly
( see the same nabble-Thread )
davsclaus:1256531834:2009-10-26T12:37:14.775+0000:1256531834:2009-10-26T12:37:14.775+0000:Works fine on my end. Can you check this unit test.
http://svn.apache.org/viewvc?rev=829770&view=rev


dulmerlucsly:1256779913:2009-10-29T09:31:53.335+0000:1256787725:2009-10-29T11:42:05.639+0000:The testcase did work fine at my system, but when i change the RouteBuilder to:
{code}

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
            	
            	onException(IllegalArgumentException.class).handled(true).to(""log:bar"").to(""mock:error"").end();
            	 
                from(""activemq:queue:foo?transacted=true"").id(""myCoolRoute"")
                    .transacted()
                    .choice()
                        .when(body().contains(""Kabom"")).throwException(new IllegalArgumentException(""Damn""))
                    .otherwise()
                        .to(""mock:result"")
                    .end();

            }
        };
    }
{code}

then the test fails ....

-- added code snippets
davsclaus:1256788445:2009-10-29T11:54:05.894+0000:1256788445:2009-10-29T11:54:05.894+0000:Ah okay yeah I can see the issue.

Will introduce a {{routeId}} in the DSL to use specific for setting the id of the route.
davsclaus:1256788754:2009-10-29T11:59:14.584+0000:1256788754:2009-10-29T11:59:14.584+0000:Hi with the latest code use the new {{routeId}} in the DSL to set the id of the route.

trunk: 830906.
davsclaus:1275521105:2010-06-03T07:25:05.177+0000:1275521105:2010-06-03T07:25:05.177+0000:Closing old resolved issues
nfx:1409913059:2014-09-05T18:30:59.693+0000:1409913059:2014-09-05T18:30:59.693+0000:Found out related things in CAMEL-7786"
0,CAMEL-2108,Improvement,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-26 08:13:39+00:00,2010-06-03 07:25:04+00:00,"Just using the ObjectHelper.isNotEmpty() to check if the encoding option is not null or  not """".","njiang:1256517629:2009-10-26T08:40:29.993+0000:1256517629:2009-10-26T08:40:29.993+0000:http://svn.apache.org/viewvc?rev=829724&view=rev
http://svn.apache.org/viewvc?rev=829726&view=rev
davsclaus:1275521104:2010-06-03T07:25:04.961+0000:1275521104:2010-06-03T07:25:04.961+0000:Closing old resolved issues"
0,CAMEL-2107,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-26 07:47:49+00:00,2010-06-03 07:25:04+00:00,"This allows to mark an exchange for rollback but without setting any custom exception message. This allows end users to use onException etc. to set their custom error message.


See CAMEL-2102","davsclaus:1256524657:2009-10-26T10:37:37.216+0000:1256524657:2009-10-26T10:37:37.216+0000:trunk: 829746.
davsclaus:1275521104:2010-06-03T07:25:04.665+0000:1275521104:2010-06-03T07:25:04.665+0000:Closing old resolved issues"
0,CAMEL-2106,Bug,Major,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-25 11:20:18+00:00,2010-06-03 07:25:04+00:00,"If you route a message to a bean which has for example a org.w3c.Document as parameter type for the body, then Camel should thrown an conversion exception in case the payload cannot be converted to that type. And on the same time if the payload is really null then Camel should of course pass in null.","davsclaus:1256454208:2009-10-25T15:03:28.958+0000:1256454208:2009-10-25T15:03:28.958+0000:The same applies for headers etc.
In fact its all parameter types that Camel *now must* be able to convert to.
davsclaus:1256454218:2009-10-25T15:03:38.261+0000:1256454218:2009-10-25T15:03:38.261+0000:trunk: 829598.
davsclaus:1275521104:2010-06-03T07:25:04.475+0000:1275521104:2010-06-03T07:25:04.475+0000:Closing old resolved issues"
0,CAMEL-2105,Improvement,Trivial,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-24 11:05:52+00:00,2010-06-03 07:25:04+00:00,So you can get the URI that failed from the exception.,"davsclaus:1256353724:2009-10-24T11:08:44.284+0000:1256353724:2009-10-24T11:08:44.284+0000:trunk: 829342.

There is now a {{getUri}} method
davsclaus:1275521104:2010-06-03T07:25:04.250+0000:1275521104:2010-06-03T07:25:04.250+0000:Closing old resolved issues"
0,CAMEL-2104,Improvement,Minor,"1.6.1, 2.0.0",None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-24 10:20:00+00:00,2010-06-03 07:25:03+00:00,So you can easier wrote to system out or etc. even if the payload is not String or byte[] but can be converted to this instead. For example a DOM object.,"davsclaus:1256350872:2009-10-24T10:21:12.206+0000:1256350872:2009-10-24T10:21:12.206+0000:trunk: 829339.
davsclaus:1275521103:2010-06-03T07:25:03.953+0000:1275521103:2010-06-03T07:25:03.953+0000:Closing old resolved issues"
0,CAMEL-2103,Sub-task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Martin Krasser,Martin Krasser,0,0,2009-10-23 15:30:35+00:00,2010-06-03 07:25:03+00:00,"This component makes asynchronous processing on GAE possible using the task queueing API. Assuming the component will be named gtask, routes like the following can be defined.



from(""servlet:/input"")
...
.to(""gtask:default"") // write to default task queue

from(""gtask:default"") // install a web hook (worker) that is executed in the background
...
.to(""..."")","mrt1nz:1258338805:2009-11-16T10:33:25.849+0000:1258338805:2009-11-16T10:33:25.849+0000:Initial work committed. Improvements will be tracked separately.
davsclaus:1275521103:2010-06-03T07:25:03.727+0000:1275521103:2010-06-03T07:25:03.727+0000:Closing old resolved issues"
0,CAMEL-2102,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Dhiraj Sureshkumar Bokde,0,0,2009-10-22 21:14:57+00:00,2010-06-03 07:25:03+00:00,"If a route is transacted using transacted(), and a custom error handler is registered using onException() which handles the exception using handled(), creates a custom error response, and marks the transaction to be rolled back using rollback(), Camel wraps a non-existent 'null' exception with a TransactedRuntimeCamelException in TransactionErrorHandler.wrapTransactedRuntimeException() and throws the TRCE, causing the custom error response to be ignored. 


Route looks like:


		// configure error handler for all routes
		onException(Exception.class).handled(true).to(""bean:transformerBean?method=exceptionToResponse"").rollback();


		from(""cxfrs://bean:categoriesEndpoint"").transacted()
			.choice()...


Basically the application wants to handle exceptions by sending a custom error message back to the route client, and also mark transactions for rollback. 


Attached patch checks for the presence of an exception, and only raises a TRCE if its not null.","dhirajsb:1256217372:2009-10-22T21:16:12.212+0000:1256217372:2009-10-22T21:16:12.212+0000:Patch for not throwing a TransactedRuntimeCamelException when it has been handled in an error handler. 
davsclaus:1256255001:2009-10-23T07:43:21.859+0000:1256255001:2009-10-23T07:43:21.859+0000:Cool

It would be great if you could also create an unit test that tests this patch.
davsclaus:1256524637:2009-10-26T10:37:17.494+0000:1256524637:2009-10-26T10:37:17.494+0000:trunk: 829746.

You can now use {{.markRollbackOnly()}} to mark a route to rollback and at the same time provide you custom response as you did in your onException
dhirajsb:1256553521:2009-10-26T18:38:41.154+0000:1256553521:2009-10-26T18:38:41.154+0000:Claus, do you still need a testcase or are you going to build one for the new {{markRollbackOnly()}}?
davsclaus:1256559016:2009-10-26T20:10:16.737+0000:1256559016:2009-10-26T20:10:16.737+0000:Its fine I used the new markRollbackOnly.

Can you test the new code on your system?

And if you have an unit test that you think is good to add then you can attach it.
You can check the unit tests I added by the commit log and the new added tests from the source. 
davsclaus:1275521103:2010-06-03T07:25:03.137+0000:1275521103:2010-06-03T07:25:03.137+0000:Closing old resolved issues"
0,CAMEL-2101,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-22 12:25:54+00:00,2010-06-03 07:25:02+00:00,"CamelInvocationHandler should detect which return type the method has (if it has any, as it can be void).
And convert the payload to that type.","davsclaus:1256186679:2009-10-22T12:44:39.006+0000:1256186679:2009-10-22T12:44:39.006+0000:This avoid class cast exceptions such as
{code}
java.lang.ClassCastException: java.lang.String
	at $Proxy6.submitOrderAsDocument(Unknown Source)
	at org.apache.camel.component.bean.BeanProxyTest.testBeanProxyAsDocument(BeanProxyTest.java:42)
{code}
davsclaus:1256188266:2009-10-22T13:11:06.219+0000:1256188266:2009-10-22T13:11:06.219+0000:trunk: 828677.
davsclaus:1275521102:2010-06-03T07:25:02.847+0000:1275521102:2010-06-03T07:25:02.847+0000:Closing old resolved issues"
0,CAMEL-2100,New Feature,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-22 12:01:22+00:00,2010-06-03 07:25:02+00:00,"What does it mean?


Well using a Camel proxy and have Camel detect when its a single argument method we can let the value passed in as argument be threated as if it was the message body itself.



public interface MyProxySender {

    String hello(String name);

}




Is a single parameter method.


So if someone passes in a XML document to that method and we want to proxy it in front of a CBR router we could do this



 <route>
        <from uri=""direct:start""/>
        <choice>
            <when>
                <xpath>/order/type = 'bar'</xpath>
                <to uri=""jms:queue:bar""/>
            </when>
            <otherwise>
                <to uri=""jms:queue:other""/>
            </otherwise>
        </choice>
    </route>




And then define the proxy as



        <proxy id=""myProxySender""
               serviceInterface=""org.apache.camel.MyProxySender""
               serviceUrl=""direct:start""/>","davsclaus:1256185756:2009-10-22T12:29:16.893+0000:1256185756:2009-10-22T12:29:16.893+0000:trunk: 828670.

Need to add some wiki documentation about this
davsclaus:1256191605:2009-10-22T14:06:45.361+0000:1256191605:2009-10-22T14:06:45.361+0000:Updated wiki
http://cwiki.apache.org/confluence/display/CAMEL/Using+CamelProxy
davsclaus:1275521102:2010-06-03T07:25:02.576+0000:1275521102:2010-06-03T07:25:02.576+0000:Closing old resolved issues"
0,CAMEL-2099,Sub-task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Martin Krasser,Martin Krasser,0,0,2009-10-22 11:44:28+00:00,2010-06-03 07:25:02+00:00,No Desc,"mrt1nz:1258338789:2009-11-16T10:33:09.254+0000:1258338789:2009-11-16T10:33:09.254+0000:Initial work committed. Improvements will be tracked separately.
davsclaus:1275521102:2010-06-03T07:25:02.326+0000:1275521102:2010-06-03T07:25:02.326+0000:Closing old resolved issues"
0,CAMEL-2098,Task,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-22 08:18:40+00:00,2010-06-03 07:25:02+00:00,We should mark it as @deprecated so we can easier upgrade and/or support spring 3.0 out of the box.,"davsclaus:1256171215:2009-10-22T08:26:55.575+0000:1256171215:2009-10-22T08:26:55.575+0000:trunk: 828359

Updated wiki page as well
davsclaus:1275521102:2010-06-03T07:25:02.026+0000:1275521102:2010-06-03T07:25:02.026+0000:Closing old resolved issues"
0,CAMEL-2097,Improvement,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-22 08:16:38+00:00,2010-06-03 07:25:01+00:00,"Currently 0 is interpreted as 0 millis which of course always would trigger an timeout exception.


Instead using 0 or -1 etc should work as no timeout at all.","davsclaus:1256172131:2009-10-22T08:42:11.247+0000:1256172131:2009-10-22T08:42:11.247+0000:trunk: 828399.
davsclaus:1275521101:2010-06-03T07:25:01.821+0000:1275521101:2010-06-03T07:25:01.821+0000:Closing old resolved issues"
0,CAMEL-2096,Task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-22 07:27:20+00:00,2010-06-03 07:25:01+00:00,"Since CXF 2.2.4 is released for a while , we should consider to use this version in camel-cxf.","njiang:1256186160:2009-10-22T12:36:00.430+0000:1256186160:2009-10-22T12:36:00.430+0000:http://svn.apache.org/viewvc?rev=828348&view=rev
davsclaus:1275521101:2010-06-03T07:25:01.628+0000:1275521101:2010-06-03T07:25:01.628+0000:Closing old resolved issues"
0,CAMEL-2095,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Laurent Bovet,0,0,2009-10-22 07:04:20+00:00,2010-06-03 07:25:00+00:00,"I did not find any example or documentation for using the <camel:proxy> with a simple send(String textMessage) method and a route sending the textMessage String as body to a JMS queue (for example).


The thing is that <camel:proxy> creates a messages with body of type BeanInvocation. I would expect that Camel provides some builtin transformer/converter to change the body to the String argument, so that the message on the queue is of type TextMessage.


Did I miss something?","laurent.bovet:1256166469:2009-10-22T07:07:49.079+0000:1256166469:2009-10-22T07:07:49.079+0000:Added test case.

The test fails because the body is not of type String:

java.lang.AssertionError: mock://result Body of message: 0. Expected: <Hello> but was: <BeanInvocation public abstract void proxy.test.Sender.send(java.lang.String) with [Hello]]>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:899)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:881)
	at org.apache.camel.component.mock.MockEndpoint$4.run(MockEndpoint.java:371)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:241)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)
	at proxy.test.ProxyToStringTest.testProxyToString(ProxyToStringTest.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)
	at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:220)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:45)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)


davsclaus:1256180430:2009-10-22T11:00:30.433+0000:1256180592:2009-10-22T11:03:12.869+0000:Works in Camel 1.x

Added unit test in 1.x: 828653.
davsclaus:1256185726:2009-10-22T12:28:46.215+0000:1256185726:2009-10-22T12:28:46.215+0000:trunk: 828670.

Laurent you are welcome to test with latest code.
laurent.bovet:1256188217:2009-10-22T13:10:17.866+0000:1256188217:2009-10-22T13:10:17.866+0000:Wow. Many thanks for you reactivity, Claus and congrat to all for this good work.
davsclaus:1256188489:2009-10-22T13:14:49.218+0000:1256188489:2009-10-22T13:14:49.218+0000:Remember that if you want to route the proxy to a JMS queue and want the ""value you passed in the first method"" to be sent as text message on the jms queue then you have to convert the payload to text or force the jms producer to use text type.

Either
.convertBodyTo(String.class)
before you send it to the JMS queue.

Or configure the JMS endpoint with ?jmsMessageType=Text


Otherwise you send an object BeanInvocation to the JMS queue and then if you have Camel on the other side it can read this BeanInvocation and *actually* invoke a bean on this side.
So what it allows is to create a proxy for the client and send it over JMS to the server and invoke the real bean. And return the reply back to the client :)
davsclaus:1256188522:2009-10-22T13:15:22.009+0000:1256188522:2009-10-22T13:15:22.009+0000:Which this tutorial btw shows
http://camel.apache.org/tutorial-jmsremoting.html
davsclaus:1275521100:2010-06-03T07:25:00.106+0000:1275521100:2010-06-03T07:25:00.106+0000:Closing old resolved issues"
0,CAMEL-2094,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-22 06:01:59+00:00,2010-06-03 07:24:59+00:00,"We now have option autoStartup on routes. Lets also have this on the camel context itself so it replaces the shouldStartContext option that is a bit confusing.



    <camelContext id=""myCamel"" xmlns=""http://camel.apache.org/schema/spring"" autoStartup=""false"">
        <route>
            <from uri=""direct:start""/>
            <to uri=""mock:result""/>
        </route>
    </camelContext>




For example the code above will not start Camel on startup. You can then later start camel manually by



        SpringCamelContext camel = (SpringCamelContext) ac.getBean(""myCamel"");
        camel.start();




And then all runs.


This also means that we will remove the option shouldStartContext! so if you use this option you must migrate to the autoStartup instead.","davsclaus:1256166138:2009-10-22T07:02:18.016+0000:1256166138:2009-10-22T07:02:18.016+0000:trunk: 828332.
davsclaus:1275521099:2010-06-03T07:24:59.915+0000:1275521099:2010-06-03T07:24:59.915+0000:Closing old resolved issues"
0,CAMEL-2093,Sub-task,Minor,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Claus Ibsen,0,0,2009-10-22 04:22:51+00:00,2010-06-03 07:24:59+00:00,"See the parent ticket. This also applies for camel-velocity.


And willem also update the wiki documentation for Velocity / Freemarker and remove the text about resource uri being in headers.","njiang:1256186078:2009-10-22T12:34:38.257+0000:1256186078:2009-10-22T12:34:38.257+0000:trunk
http://svn.apache.org/viewvc?rev=828333&view=rev
add the unit test into camel 1.x branch
http://svn.apache.org/viewvc?rev=828337&view=rev
davsclaus:1275521099:2010-06-03T07:24:59.041+0000:1275521099:2010-06-03T07:24:59.041+0000:Closing old resolved issues"
0,CAMEL-2092,Bug,Major,"2.0-M1, 2.0-M2, 2.0-M3, 2.0.0",None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-22 02:46:52+00:00,2010-06-03 07:24:58+00:00,"If there are two velocity endpoint linked with the pipeline, you will find the last velocity will not effect anymore.","njiang:1256155689:2009-10-22T04:08:09.173+0000:1256155689:2009-10-22T04:08:09.173+0000:trunk
http://svn.apache.org/viewvc?rev=828288&view=rev

Also added test to  camel-1.x branch
http://svn.apache.org/viewvc?rev=828294&view=rev
davsclaus:1275521098:2010-06-03T07:24:58.668+0000:1275521098:2010-06-03T07:24:58.668+0000:Closing old resolved issues"
0,CAMEL-2091,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-10-22 02:39:24+00:00,2010-06-03 07:24:58+00:00,"Here is the mail thread[1] which discusses about it.
[1]http://www.nabble.com/camel-velocity-and--parse%28%29-question-tp26000423p26000423.html","njiang:1256517528:2009-10-26T08:38:48.680+0000:1256517528:2009-10-26T08:38:48.680+0000:Added propertiesFile option for the velocity endpoint, also update the wiki page.
 http://svn.apache.org/viewvc?rev=829724&view=rev
davsclaus:1275521098:2010-06-03T07:24:58.479+0000:1275521098:2010-06-03T07:24:58.479+0000:Closing old resolved issues"
0,CAMEL-2090,Bug,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-21 12:27:41+00:00,2010-06-03 07:24:58+00:00,It does in fact auto startup it anyway.,"davsclaus:1256100414:2009-10-21T12:46:54.280+0000:1256100414:2009-10-21T12:46:54.280+0000:trunk: 827992.

Also introduced a public method on JmsConsumer to manually start the listener later.
davsclaus:1275521098:2010-06-03T07:24:58.309+0000:1275521098:2010-06-03T07:24:58.309+0000:Closing old resolved issues"
0,CAMEL-2089,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-21 08:23:09+00:00,2010-06-03 07:24:57+00:00,Endpoint option: ReplyTo is currently only applicable for producers. It should also work for consumers.,"davsclaus:1256090859:2009-10-21T10:07:39.899+0000:1256090859:2009-10-21T10:07:39.899+0000:trunk: 827950.
davsclaus:1275521097:2010-06-03T07:24:57.915+0000:1275521097:2010-06-03T07:24:57.915+0000:Closing old resolved issues"
0,CAMEL-2058,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Michael Mathers,0,1,2009-10-10 00:26:23+00:00,2011-03-21 13:17:44+00:00,"On Windows (don't know if there are other platforms that suffer from this problem), the file component fails to successfully rename files with the File.renameTo operation.  It fails when the rename is performed immediately after closing a file.  On Windows this usually indicates that some other process has the file open.  This occurs due to things like Virus scanners which keep the file open for very short periods of time.  Given a slight pause the rename would succeed.


This is a serious problem which effectively makes useless options like ""tempPrefix"" in the File Producer and ""localWorkDirectory"" with the FTP Consumer.  Workarounds like ""disable your virus scanner"" don't cut it for everyone (me specifically) as I'm system privilege restricted from doing so, and even then, there's no guarantee that other windows processes might not do similar things (file indexers, etc).


The Java spec doesn't define the behavior of the rename operation and specifically says that this can vary from implementation to implementation / filesystem to filesystem.  Second, rename doesn't say why it fails, it merely returns false which is very unhelpful.


A couple ways to fix:


1).  Provide an option to disable this optimization.  ie, a ""alwaysCopyInsteadOfRename"" or something (clean, simple, easy).
This would be a simple fix.  More or less just a few clauses/tests in GenericFileProducer around any ""is local"" checks....


2).  Attempt a copy instead if the rename fails



maybe after a brief pause
maybe even after a number of rename attempts
maybe watch to see the file is closed prior to a rename attempt.



Rename operation failures may affect other things as well like certain locking schemes.


http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4167147","davsclaus:1255316809:2009-10-12T11:06:49.107+0000:1255316855:2009-10-12T11:07:35.634+0000:Michael can you try 2.1-SNAPSHOT as we have fixed improved this.

Fixed already by CAMEL-1965.
mbmather:1255340708:2009-10-12T17:45:08.499+0000:1255341563:2009-10-12T17:59:23.945+0000:For the record, I did try my route in 2.1-SNAPSHOT before filing the report.  But apparently I tried it just for {{localWorkDirectory}} and not for {{tempPrefix}}.
2.1-SNAPSHOT does seem to be fixed for {{tempPrefix}} (although I think I still found an issue there), but +NOT+ fixed for {{localWorkDirectory}}, an option of the FTP component.

\\

h3. Issue #1:  {{localWorkDirectory}}

In both 2.0 and 2.1snap, this has the following behavior.
# After creating the ""inprogress"" file, it fails renaming (only makes a single attempt) to the final name in the working directory.
# After failing rename, it proceeds to consider the message ""delivered"" and does  not attempt to reconsume the file on the next poll (this seems wrong to me, but I'm a newbie).

\\

h3.  Issue #2:  {{tempPrefix}}

You are right this is fixed with CAMEL-1965 as you indicated.  _However_, when using {{tempPrefix}} with the {{fileExist}} option does not behave as expected.  Instead, the {{fileExist}} options are applied to the ""temp"" file and not to the target file.

|| Option Value || Expected Behavior || Actual Behavior when using {{tempPrefix}} ||
| {{Override}} (Default) | If the target file exists, overwrite it | Will overwrite the temp file if it exists but will fail if the target file exists because the rename operation fails |
| {{Fail}} | Fail the exchange immediately if the target file exists | Will fail the exchange immediately if the temp file exists.  Will not fail immediately if the target file exists.  The exchange still fails ultimately though due to the failing of the rename operation. |

I did not test {{Append}} or {{Ignore}} values but they probably have similar problems.  Also, I did not test other File component options that could involve rename operations such as {{readLock:rename}}, {{preMove}}, or {{moveFailed}}.

Let me know if you want me to file a separate issue for #2.  Given the number of potential issues with rename and the Java implementation of it (other filesystems?), I'm still thinking that an eventual ""ForceCopyInsteadOfRename"" option might be a good idea.
davsclaus:1255930198:2009-10-19T13:29:58.593+0000:1255933874:2009-10-19T14:31:14.936+0000:*Issue #1*
1. I am fixing the rename to be aligned with other code by doing retries to cater for Windows platforms. *DONE*
Commited: 826686.

davsclaus:1255938597:2009-10-19T15:49:57.527+0000:1255938597:2009-10-19T15:49:57.527+0000:Can you post a snippet of the route that you are using to test this?


davsclaus:1256258381:2009-10-23T08:39:41.143+0000:1256258381:2009-10-23T08:39:41.143+0000:*Issue #2*

I guess it depends on the OS. On my Mac the rename operation will succeed even if the target file exists. So that could be an Windows OS issue, that wont allow renaming a file when the target filename already exists.

But Camel should of course use the {{fileExist}} option in any case
davsclaus:1256259837:2009-10-23T09:03:57.868+0000:1256259837:2009-10-23T09:03:57.868+0000:Okay looks like I got the hang of this and have fixes being tested now
davsclaus:1256265754:2009-10-23T10:42:34.832+0000:1256265754:2009-10-23T10:42:34.832+0000:trunk: 828994.

Michael can you test again?
mbmather:1256286712:2009-10-23T16:31:52.688+0000:1256286712:2009-10-23T16:31:52.688+0000:Sorry, I haven't got back  to help you out with this as you requested.  I just haven't been able to.  I'll try to hit the new changes this weekend.
mbmather:1256313875:2009-10-24T00:04:35.640+0000:1256313875:2009-10-24T00:04:35.640+0000:I produced a test to test the issue with the {{tempPrefix}} use on Windows when the temporary file pre-exists and {{fileExist}} behavior is set to 'Fail'.  This test fails in 2.0.0 and now passes in 2.1-SNAPSHOT.  I also tested that when the _actual_ target file pre-exists that it fails correctly (and not failing due to a ""rename"" failure).

I'd produce the test code here but it is currently intermixed with proprietary stuff.  This looks totally resolved to me!
davsclaus:1256352583:2009-10-24T10:49:43.451+0000:1256352583:2009-10-24T10:49:43.451+0000:Thanks Michael for reporting and testing it.

We can add your test code to Camel when you have the proprietary removed.
davsclaus:1275521085:2010-06-03T07:24:45.962+0000:1275521085:2010-06-03T07:24:45.962+0000:Closing old resolved issues"
0,CAMEL-2057,Bug,Minor,2.0.0,2.0.0,"
None
",Closed,Not A Problem,2.0.0,Unassigned,Vladimir Okhotnikov,0,0,2009-10-09 18:30:30+00:00,2009-10-12 10:42:46+00:00,"In my app, I have several routes which all start by reading files in the same directory, deleting them after processing. Obviously, each rule uses its own include pattern to process separate subset of files.


Now, the problem is that if the camel context is started when there are some existing files in the directory, the matching routes do not seem to work. I cannot see any related activity in the log file (except for the first ""1 file to consume"" message), and the newly added files are being piled up in the directory. The other routes, which had no matching files on camel start do work. 


More details at http://www.nabble.com/File-component-blocked-by-existing-files-td25803233.html","vokhotnikov:1255315366:2009-10-12T10:42:46.814+0000:1255315366:2009-10-12T10:42:46.814+0000:The behavior was caused by insufficient permissions on the ""poison"" files. Can be addressed by specifying a read lock timeout instead of default infinite one. Better yet, change the default timeout to something other than ""wait forever"", which is addressed by https://issues.apache.org/activemq/browse/CAMEL-2062"
0,CAMEL-2056,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Martin Krasser,0,0,2009-10-09 07:06:10+00:00,2010-06-03 07:24:45+00:00,"Most of the converters in IOConverter that do a char <-> byte conversion ignore the charset given as second argument to convertBodyTo. The attached patch fixes this.



For relevant converter methods, it introduces an additional second Exchange parameter from which the desired charset is obtained.
For backwards compatibility to code that uses the IOConverter directly, a one-parameter version of these methods was kept but the @Converter annotation was removed (Camel doesn't allow overloaded static type converter methods to be registered i.e. they overwrite in other in the registry).
The patch furthermore removes existing redundancies in code like getting the charset from the exchange, check if the exchange is null etc.
The String->byte[] converter from ObjectConverter was moved to IOConverter because its implementation is more closely related to other methods in this converter class.","mrt1nz:1255043205:2009-10-09T07:06:45.553+0000:1255043205:2009-10-09T07:06:45.553+0000:Attached patch.
njiang:1255054015:2009-10-09T10:06:55.613+0000:1255054015:2009-10-09T10:06:55.613+0000:Applied patch with thanks to Martin, also updated the camel-spring unit test with this patch.

Trunk
http://svn.apache.org/viewvc?rev=823495&view=rev
davsclaus:1255491635:2009-10-14T11:40:35.981+0000:1255491635:2009-10-14T11:40:35.981+0000:Reworked patch to avoid ignoring charset issue. Also people should not use the converters directly but use the Camel TypeConverterRegistry.

trunk: 825090.
davsclaus:1275521085:2010-06-03T07:24:45.217+0000:1275521085:2010-06-03T07:24:45.217+0000:Closing old resolved issues"
0,CAMEL-2055,Bug,Major,None,2.1.0,"
None
",Closed,Won't Fix,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-08 08:21:17+00:00,2010-06-03 07:24:45+00:00,"See more here:
http://www.nabble.com/JMX-in-Camel-2.1---Processor-MBeans-td25799266.html","davsclaus:1254964445:2009-10-08T09:14:05.870+0000:1254964445:2009-10-08T09:14:05.870+0000:After looking into this a bit more. It requires too much work to get micro processors such as {{setHeader}} to be manage as well.

It is only worthwhile to manage processors which are bigger and this must implement Service to be considered. 
davsclaus:1275521085:2010-06-03T07:24:45.019+0000:1275521085:2010-06-03T07:24:45.019+0000:Closing old resolved issues"
0,CAMEL-2054,Bug,Major,"1.6.1, 1.6.2, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Claus Ibsen,slad,0,0,2009-10-08 00:20:39+00:00,2010-06-03 07:24:43+00:00,"It looks like Camel Mail Component does not set Content-ID mime header correctly or probably assumption is that BodyPart will take care of it. As a result embedded images in html body do not work ( img src=""cid:somename.img"").


Currently Content-ID is set as -


//MailBinding.java
// add a Content-ID header to the attachment
messageBodyPart.addHeader(""Content-ID"", attachmentFilename.substring(4));


But according to RFC standards http://www.ietf.org/rfc/rfc2392.txt, Content-ID value should be enclosed with in angle brackets, so it should be modified to -


//MailBinding.java
// add a Content-ID header to the attachment
messageBodyPart.addHeader(""Content-ID"", ""<"" + attachmentFilename.substring(4) + "">"");


Also, below should be modified which incorrectly sets fileName inclusive of ""cid:"", but expectation would be strip off ""cid"" off it, similar to Content-ID


// Set the filename
messageBodyPart.setFileName(attachmentFilename);


Should be -


// Set the filename
messageBodyPart.setFileName(attachmentFilename.substring(4));


Also, RFC standard mentions that Content-ID should be globally unique but Camel Mail just sets it to filename instead. I understand this can be problematic as camel will have to replace references to each of such cid's  in any of the mail parts. 


As I understand from RFC document, is that this is required in case you send emails itself attachments, and attachments can same name can trample each other(I may be wrong here). I guess we can live with this for a while","davsclaus:1254947908:2009-10-08T04:38:28.363+0000:1254947908:2009-10-08T04:38:28.363+0000:See more details here:
http://www.nabble.com/Camel-Mail-Component%3A-Content-ID-incorrect--td25760500.html
davsclaus:1254965577:2009-10-08T09:32:57.085+0000:1254965577:2009-10-08T09:32:57.085+0000:Yeah I wonder why/who decided to use the first 4 characters from the filename?

We can use the ExchangeID + iterate number which then will be global unique.
davsclaus:1254966691:2009-10-08T09:51:31.387+0000:1254966691:2009-10-08T09:51:31.387+0000:I am not sure about the filename thing must be trunked to 4 as well.
I cannot see this in the RFC.

I have however fixed the angle bracket thing.

trunk: 823102.
1.x: 823105.
davsclaus:1254973121:2009-10-08T11:38:41.041+0000:1254973121:2009-10-08T11:38:41.041+0000:Just a test
tide08:1255030610:2009-10-09T03:36:50.287+0000:1255030610:2009-10-09T03:36:50.287+0000:Thanks Claus for the fix. Yes, truncating 4 char in filename is not RFC standard but the problem is filename shows up as ""cid:filename"" in email, which is not nice as users do not see readable filename in the email. I hope this gets fixed.

I mentioned wrong fix above, it should be conditional i.e.

+                    if (attachmentFilename.toLowerCase().startsWith(""cid:"")) {
+                        messageBodyPart.setFileName(attachmentFilename.substring(4));
+                    } else {
+                        messageBodyPart.setFileName(attachmentFilename);
+                    }

Regarding, unique name for content-id, it can be tough one to resolve as camel generated content-id has to be than replace in any of the mail parts which are referencing it.

For ex: If I have logo.gif as attachment, I may have referenced it in email body like <img src=""cid:logo.gif"" /> 

So if camel generates unique content-id for this part as lets say - 123ABC than part will have Content-ID: <123ABC> than we have to change the reference for all logo.gif in body part 

i.e. above image reference should now get changed to <img src=""123ABC"" />

Thanks!

davsclaus:1255047326:2009-10-09T08:15:26.283+0000:1255047326:2009-10-09T08:15:26.283+0000:@slad

Yeah if we can get the attachment file name to appear as nice readable instead of cid:0001 then that would be great.

In terms of unique global it may or may not be a bit overkill. I think we should leave it as is, as you can refer to them more easily when its cid:xxxx.
But the substring to 4 is something we should remove as well.
davsclaus:1255640087:2009-10-16T04:54:47.251+0000:1255640087:2009-10-16T04:54:47.251+0000:trunk: 825765
1.x: 825767

Thanks I have fixed the filename.

Would be great if you could test it on your system.
tide08:1257863238:2009-11-10T22:27:18.852+0000:1257863238:2009-11-10T22:27:18.852+0000:@Claus

Sorry, it took so long but we were in release cycle. Updated camel to 2.1-SNAPSHOT and it works like charm!

Thanks
davsclaus:1275521083:2010-06-03T07:24:43.642+0000:1275521083:2010-06-03T07:24:43.642+0000:Closing old resolved issues"
0,CAMEL-2053,Bug,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Not A Problem,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-05 07:25:03+00:00,2010-06-03 07:24:43+00:00,No Desc,"davsclaus:1254700013:2009-10-05T07:46:53.194+0000:1254700013:2009-10-05T07:46:53.194+0000:My mistake
davsclaus:1275521083:2010-06-03T07:24:43.060+0000:1275521083:2010-06-03T07:24:43.060+0000:Closing old resolved issues"
0,CAMEL-2052,Improvement,Minor,2.0.0,"2.1.0, Future","
None
",Closed,Won't Fix,"2.1.0, Future",Claus Ibsen,Claus Ibsen,0,0,2009-10-05 05:00:48+00:00,2010-06-03 07:24:42+00:00,"When using the file producer you can use the tempPrefix to write files using a prefix and then afterwards rename the file to correct name.
We should improve this option to use Expressiion as well so you can use the file languages etc.


And maybe a better name for the option: tempFile ?","davsclaus:1256270933:2009-10-23T12:08:53.676+0000:1256270933:2009-10-23T12:08:53.676+0000:We stickt with what we got, its after all just a temporary name
davsclaus:1275521082:2010-06-03T07:24:42.845+0000:1275521082:2010-06-03T07:24:42.845+0000:Closing old resolved issues"
0,CAMEL-2051,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-10-05 04:54:41+00:00,2010-06-03 07:24:42+00:00,"When Camel builds the runtime route path it interleave the route with a Channel which have a reference to the route model entity it represents.


However the reference points to a too coarse grained model. It should drill down the model and match more precisely the processor.
This happens for models that creates child processors.


On top of that it should also help the tracer to diagnose where it is without having custom logic implemented to determine this based on the previously coarse grained model it could denote from the Channel.","davsclaus:1258192151:2009-11-14T17:49:11.593+0000:1258192151:2009-11-14T17:49:11.593+0000:trunk: 836224.

Channel now has a {{getChildDefinition}} for the fine grained if a child exists.
davsclaus:1275521082:2010-06-03T07:24:42.630+0000:1275521082:2010-06-03T07:24:42.630+0000:Closing old resolved issues"
0,CAMEL-2050,Improvement,Major,"1.6.0, 1.6.1, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Claus Ibsen,Claus Ibsen,0,0,2009-10-03 09:42:09+00:00,2010-06-03 07:24:42+00:00,"The big might blue uses JMS_IBM_* as prefix for their custom headers. God knows why they haven't used JMSX as the prefix which is for custom headers.


For example to set a encoding such as iso-8859-1 you have to set a special IBM header for that.



JMS_IBM_Character_Set=ISO8859_1




See more details here: http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.pmc.express.iseries.doc/ref/rjc0005_.html


Camel should allow IBM headers and not filter them out.","davsclaus:1254540347:2009-10-03T11:25:47.974+0000:1254540347:2009-10-03T11:25:47.974+0000:trunk: 821290.
1.x: 821293.
davsclaus:1275521082:2010-06-03T07:24:42.300+0000:1275521082:2010-06-03T07:24:42.300+0000:Closing old resolved issues"
0,CAMEL-2049,Bug,Major,1.6.0,"1.6.2, 2.0.0, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.0.0, 2.1.0",Claus Ibsen,Dmytro Rud,0,0,2009-10-01 09:00:11+00:00,2010-02-07 09:56:23+00:00,"A sample scenario where both MINA producer(s) and consumer(s) are used in the same route (e.g. some kind of dispatching or proxying):


from(""mina:tcp://localhost:8888?lazySessionCreation=true&sync=true"")
    .to(""mina:tcp://localhost:7777?lazySessionCreation=true&sync=true"");


from(""mina:tcp://localhost:7777?lazySessionCreation=true&sync=true"")
    .process(/prepare answer/);


Due to improper configuration of MINA acceptor and connector instances in MinaComponent#createSocketEndpoint(), no more than 15 incoming threads can be served at port 8888 – the producer becomes unable to open an outgoing session.  This is actually an issue of MINA, not of Camel – a test application written using ""raw"" MINA shows the same behaviour.


A solution is to apply configuration rules described, e.g., at http://mina.apache.org/configuring-thread-model.html, as done in the attached patch.


Moreover, the standard Camel-MINA producer is not thread-safe – actually a well-known point.  A second attached file contains a thread pool-based reentrant version, which can be efficiently used for TCP endpoints with both parameters 'lazySessionCreation' and 'sync' set to true.","rnd:1254359022:2009-10-01T09:03:42.175+0000:1254359022:2009-10-01T09:03:42.175+0000:MINA component patch and thread-save producer
davsclaus:1254528479:2009-10-03T08:07:59.311+0000:1254528479:2009-10-03T08:07:59.311+0000:Thanks for these patches.

I was hoping that the Mina project much sooner have been able to release Apache Mina 2.0, which they unfortunately haven't.
So we are still using the older Mina 1.1.x.

Anyway I think you patches looks according to the recommended documentation at Mina itself so I will get them into the codebase.
davsclaus:1254530759:2009-10-03T08:45:59.224+0000:1254953577:2009-10-08T06:12:57.810+0000:trunk: 821272, 823031.

1.x: 821276, 823056.
davsclaus:1254531412:2009-10-03T08:56:52.723+0000:1254531412:2009-10-03T08:56:52.723+0000:In Camel 2.0 the MinaProducer is now pooled which resolves the thread safe issue there as only one instance is using it at any given time.
davsclaus:1254531596:2009-10-03T08:59:56.670+0000:1254531596:2009-10-03T08:59:56.670+0000:I am a bit inclined to patch Camel 1.x with your socket producer as then we got different solution in 1.x vs. 2.0 (pooled)

Any thoughts?
davsclaus:1254531660:2009-10-03T09:01:00.970+0000:1254531660:2009-10-03T09:01:00.970+0000:And for the future it would be great if you also provide unit tests that surfaces the bug and which we can use to ensure the patch fixes ""something"".
rnd:1254571893:2009-10-03T20:11:33.500+0000:1254571938:2009-10-03T20:12:18.354+0000:> I am a bit inclined to patch Camel 1.x with your socket producer
> as then we got different solution in 1.x vs. 2.0 (pooled)
> Any thoughts?

If there is no way to make the 1.x producer pooled as well, it would be IMHO better to have different solutions in 1.x vs. 2.0 than to have an uniform solution which works in 2.0 only...


davsclaus:1254617579:2009-10-04T08:52:59.787+0000:1254617579:2009-10-04T08:52:59.787+0000:Dmytro

Do you mind creating a new patch with the updated code from the 1.x branch which uses your thread safe producer.
Then it would be much easier for me to commit it to the 1.x codebase.

Then we have a solution with concurrent mina producers for both 1.x and 2.0

Backporting the pooling is *way* to much work.
rnd:1254639620:2009-10-04T15:00:20.606+0000:1254658321:2009-10-04T20:12:01.065+0000:Claus,

I would like to introduce a new URL parameter for MINA TCP endpoints to specify the count of producer threads (parameter ""threadsCount"" of MinaSocketProducer's constructor).  For example,
...
.to(""mina:tcp://somehost:8888?sync=true&lazySessionCreation=true&poolSize=16"")

Do you agree?  Or would you rather prefer this parameter to be hard-coded?  What default value should it have?

And the second question: How should I handle the lazySessionCreation parameter?  Currently I tend to assume that session creation is always lazy.

davsclaus:1254688910:2009-10-05T04:41:50.988+0000:1254688910:2009-10-05T04:41:50.988+0000:Q1:
As it is going to be a custom solution for camel 1.x I would prefer it to be a hardcoded value. But I also think it make sense to configure it as well different users have different needs. So okay to add such an option but name it *producerPoolSize* to indicate its producer *only*.

Q2:
Yeah I think its fine in this case to let this new producer always being lazy. So the {{lazySessionCreation}} no longer apply to this new producer. 

rnd:1254807916:2009-10-06T13:45:16.106+0000:1254807916:2009-10-06T13:45:16.106+0000:The new patch is attached.
rnd:1254815547:2009-10-06T15:52:27.709+0000:1254815547:2009-10-06T15:52:27.709+0000:BTW, the statement {{acceptorConfig.setThreadModel(ThreadModel.MANUAL);}} from _MinaComponent.patch_ seems to be absent in both 1.x and 2.0 branches. Today's _2009-10-06.patch_ introduces it again, but this patch is intended for 1.x only. Claus, could you please add the aforementioned line in 2.0 too? 
davsclaus:1254954038:2009-10-08T06:20:38.294+0000:1254954038:2009-10-08T06:20:38.294+0000:I have fixed the missing setThreadModel in 2.0

I have also applied your patch to 1.x. Thanks a lot.
1.x: 823060.

"
0,CAMEL-2048,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Ron Gavlin,0,0,2009-09-30 05:44:02+00:00,2010-06-03 07:24:42+00:00,The async smx-file poller has already implemented this feature (see http://issues.apache.org/activemq/browse/SMXCOMP-52). The async camel file poller should provide a similar feature.,davsclaus:1275521082:2010-06-03T07:24:42.080+0000:1275521082:2010-06-03T07:24:42.080+0000:Closing old resolved issues
0,CAMEL-2047,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Ron Gavlin,0,0,2009-09-30 05:40:36+00:00,2010-06-03 07:24:41+00:00,"camel-jms should provide an async consumer that can throttle consumption of incoming messages. This is necessary in scenarios where a large backlog of messages exists on the input queue. In this case, it is likely that an async consumer will overload camel with message exchanges resulting in problems. A dynamic throttling mechanism on the async camel-jms consumer is required to avoid this problem.


One possible implementation might be as follows:


First, add a property ""maxPendingAsyncExchanges"" on the async camel-jms consumer endpoint. Then add support in the endpoint to track the total number of pending/in-progress exchanges, i.e., the number of exchanges for which no SUCCESS/ERROR acknowledgement has been returned. When this value reaches ""maxPendingAsyncExchanges"", then the endpoint would stop its Spring JMS DefaultMessageListenerContainer. Once the number of ""pending"" exchanges drops below a percentage of the ""maxPendingAsyncExchanges"" threshold, say ""reconnectPercentOfMax"", the Spring DMLC would be restarted. 


The CXF implementation of this capability is described in CXF-2002, CXF-2342, and CXF-2391. CXF has properties maxSuspendedContinuations and reconnectPercentOfMax to control the throttling behavior.


This is the type of dynamic throttling I envisioned in Camel. Thoughts?","davsclaus:1254262396:2009-09-30T06:13:16.412+0000:1254262396:2009-09-30T06:13:16.412+0000:If everyone goes inventing their own solutions to this, why haven't Spring provided this directly in their DMLC (spring-jms)?

Ron a good idea, however this does impact the consumer endpoint more than at first sight as it needs to be able to dynamic start/stop the DMLC. And this it needs a background thread running for that. Which of course is doable.

We also have a ticket for adding some sort of logic to a route consumer whether it should be running or not, so you can enable/disable routes dynamic at runtime.
There is a JIRA already for this.

But your idea goes one step further as its more tight integrated with the JMS as you need the dynamic throttler perspective.
davsclaus:1275521081:2010-06-03T07:24:41.518+0000:1275521081:2010-06-03T07:24:41.518+0000:Closing old resolved issues"
0,CAMEL-2046,Sub-task,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-29 14:22:03+00:00,2010-06-03 07:24:41+00:00,"Current camel-features uses restlet and scacle bundle don't work, we need to replace them with a workable bundle.","njiang:1255054695:2009-10-09T10:18:15.069+0000:1255054695:2009-10-09T10:18:15.069+0000:trunk restlet
 http://svn.apache.org/viewvc?rev=820152&view=rev
trunk scala
 http://svn.apache.org/viewvc?rev=820168&view=rev
camel 1.x branch restlet
 http://svn.apache.org/viewvc?rev=820171&view=rev
camel 1.x branch scala
 http://svn.apache.org/viewvc?rev=820176&view=rev
davsclaus:1275521081:2010-06-03T07:24:41.140+0000:1275521081:2010-06-03T07:24:41.140+0000:Closing old resolved issues"
0,CAMEL-2045,Bug,Critical,None,,"
None
",Closed,Fixed,None,Unassigned,Kevin McKee,0,0,2009-09-29 01:29:15+00:00,2009-09-29 01:33:30+00:00,"The artifact coming from the maven central repo doesn't contain the @org.apache.camel.MessageDriven annotation.


This annotation is still in the javadoc, so I assume it hasn't been removed?


<dependency>
	<groupId>org.apache.camel</groupId>
	<artifactId>camel-core</artifactId>
	<version>2.0.0</version>
	<scope>provided</scope>
</dependency>","kevinmmckee:1254159210:2009-09-29T01:33:30.096+0000:1254159210:2009-09-29T01:33:30.096+0000:By searching around on google, I just found that @Consume should be used in it's place."
0,CAMEL-2044,Bug,Major,1.6.1,None,"
None
",Closed,Not A Problem,None,Claus Ibsen,Torsten Mielke,0,0,2009-09-28 16:12:14+00:00,2010-02-07 09:58:28+00:00,"The following Java DSL route works perfectly in Camel 1.6:



public void configure() throws Exception {  		
            	from(""direct:In"")
            	  .choice()
            	    .when().method(""cbrBean"", ""checkHeader"")
            	  .to(""mock:foo"")
            	  .otherwise()
            	    .to(""mock:bar"")
            	  .end();
            }




The bean code reads:



public static class MyCBRBean {

        public boolean checkHeader(Exchange exchange) {
        		logger.debug(""checkHeader invoked."");
            Message inMsg = exchange.getIn();
            String foo = (String) inMsg.getHeader(""foo"");
            if (foo.equals(""bar"")) {
            	logger.debug(""checkHeader returning true"");
            	return true;
            } else {
            	logger.debug(""checkHeader returning false"");
              return false;
            }
        }
    }




But using the corresponding XML config fails:



<?xml version=""1.0"" encoding=""UTF-8""?>
<!--
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:amq=""http://activemq.org/config/1.0""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
       http://activemq.org/config/1.0 http://activemq.apache.org/snapshot-schema/activemq-core-5.0-SNAPSHOT.xsd"">
-->
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:amq=""http://activemq.org/config/1.0""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd
       http://activemq.org/config/1.0 http://activemq.apache.org/schame/core/activemq-core-5.0-SNAPSHOT.xsd"">

  <bean id=""CBRBean"" class=""com.progress.cs.CBRBean""/>
  <camelContext id=""camel"" xmlns=""http://activemq.apache.org/camel/schema/spring"">
        <route>
          <from uri=""direct:In""/>
            <choice>
            <when>
                <method ref=""CBRBean"" method=""checkHeader""/>
                <to uri=""mock:foo""/>
            </when>
            <otherwise>
                <to uri=""mock:bar""/>
            </otherwise>
          </choice>
        </route>
  </camelContext>
</beans>




with this error:



Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'method'. One of '{""http://activemq.
apache.org/camel/schema/spring"":description, ""http://activemq.apache.org/camel/schema/spring"":expressionType, ""http://activemq.apache.org/camel/schema
/spring"":beanshell, ""http://activemq.apache.org/camel/schema/spring"":constant, ""http://activemq.apache.org/camel/schema/spring"":el, ""http://activemq.a
pache.org/camel/schema/spring"":groovy, ""http://activemq.apache.org/camel/schema/spring"":header, ""http://activemq.apache.org/camel/schema/spring"":jxpat
h, ""http://activemq.apache.org/camel/schema/spring"":javaScript, ""http://activemq.apache.org/camel/schema/spring"":expression, ""http://activemq.apache.o
rg/camel/schema/spring"":methodCall, ""http://activemq.apache.org/camel/schema/spring"":ognl, ""http://activemq.apache.org/camel/schema/spring"":php, ""http
://activemq.apache.org/camel/schema/spring"":python, ""http://activemq.apache.org/camel/schema/spring"":ruby, ""http://activemq.apache.org/camel/schema/sp
ring"":simple, ""http://activemq.apache.org/camel/schema/spring"":sql, ""http://activemq.apache.org/camel/schema/spring"":xpath, ""http://activemq.apache.or
g/camel/schema/spring"":xquery}' is expected.
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:236)
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:172)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:382)
        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:316)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:429)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3185)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1831)
        at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:725)
        at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:322)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(XMLDocumentFragmentScannerImpl.ja
va:1693)
        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:368)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:834)
        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)
        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:148)
        at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:250)
        at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:292)
        at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)
        ... 31 more","tmielke:1254125836:2009-09-28T16:17:16.139+0000:1254125836:2009-09-28T16:17:16.139+0000:Attaching JUnit test that with two test classes. CBRHeaderBeanTest sets up the Java based DSL and works perfectly, CBRHeaderBeanContextTest defines the same route using XML but fails to startup. 
davsclaus:1254178448:2009-09-29T06:54:08.545+0000:1254178448:2009-09-29T06:54:08.545+0000:In Camel 1.6 the {{method}} is named {{methodCall}} instead.

So try with
{code}
 <methodCall ref=""CBRBean"" method=""checkHeader""/>
{code}
tmielke:1254371494:2009-10-01T12:31:34.259+0000:1254371494:2009-10-01T12:31:34.259+0000:Thanks Claus, I wasn't aware of that change.
Just for reference, the correct syntax is 

{code:xml}
<methodCall bean=""CBRBean"" method=""checkHeader""/>
{code}

it does not like the ""ref"" attribute in Camel 1.6 either."
0,CAMEL-2043,Task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Guillaume Nodet,Guillaume Nodet,0,0,2009-09-28 09:20:27+00:00,2010-06-03 07:24:40+00:00,No Desc,"gnodet:1254100930:2009-09-28T09:22:10.685+0000:1254100930:2009-09-28T09:22:10.685+0000:Committed revision 819482.

Those tests are currently disabled as some of them sometimes hang and other still fails
davsclaus:1275521080:2010-06-03T07:24:40.914+0000:1275521080:2010-06-03T07:24:40.914+0000:Closing old resolved issues"
0,CAMEL-2042,Task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-09-28 08:39:30+00:00,2010-06-03 07:24:40+00:00,No Desc,"njiang:1255054392:2009-10-09T10:13:12.751+0000:1255054392:2009-10-09T10:13:12.751+0000:trunk
http://svn.apache.org/viewvc?rev=819475&view=rev
davsclaus:1275521080:2010-06-03T07:24:40.681+0000:1275521080:2010-06-03T07:24:40.681+0000:Closing old resolved issues"
0,CAMEL-2041,Bug,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-28 08:22:54+00:00,2010-11-27 06:14:08+00:00,"As we did some work for better camel version, some third party bundle that camel-xxx dependents on also need to be updated.
Otherwise, OSGi platform will complain about it can't find right version of bundle , even the old working bundle is installed.",davsclaus:1275521080:2010-06-03T07:24:40.316+0000:1275521080:2010-06-03T07:24:40.316+0000:Closing old resolved issues
0,CAMEL-2040,Sub-task,Minor,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-25 11:14:20+00:00,2010-06-03 07:24:40+00:00,No Desc,"davsclaus:1254096197:2009-09-28T08:03:17.763+0000:1254096197:2009-09-28T08:03:17.763+0000:Added wiki page
http://cwiki.apache.org/confluence/display/CAMEL/Castor
davsclaus:1275521080:2010-06-03T07:24:40.085+0000:1275521080:2010-06-03T07:24:40.085+0000:Closing old resolved issues"
0,CAMEL-2039,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,Stanley J. Lewis,0,0,2009-09-23 13:50:06+00:00,2010-06-03 07:24:39+00:00,"Planning on doing some refactoring of the camel-xmpp component to implement some requested functionality in CAMEL-1698, currently there's no multi-user chat test, so here's one (I've left it disabled though as with the rest of the XMPP tests)","janstey:1253686751:2009-09-23T14:19:11.591+0000:1253686751:2009-09-23T14:19:11.591+0000:Thanks Stan for all these patches - much appreciated!

I've committed this test in
http://svn.apache.org/viewvc?rev=818115&view=rev
davsclaus:1275521079:2010-06-03T07:24:39.179+0000:1275521079:2010-06-03T07:24:39.179+0000:Closing old resolved issues"
0,CAMEL-2038,Task,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-23 11:25:54+00:00,2010-06-03 07:24:38+00:00,"Since the geronimo jpa bundle's version is wrong , we need to specify the javax.persistence version on the parent pom.","njiang:1253678474:2009-09-23T12:01:14.155+0000:1253678474:2009-09-23T12:01:14.155+0000:trunk
http://svn.apache.org/viewvc?rev=818063&view=rev
njiang:1253682009:2009-09-23T13:00:09.801+0000:1253682009:2009-09-23T13:00:09.801+0000:camel 1.x branch

http://svn.apache.org/viewvc?rev=818087&view=rev
davsclaus:1275521078:2010-06-03T07:24:38.763+0000:1275521078:2010-06-03T07:24:38.763+0000:Closing old resolved issues"
0,CAMEL-2037,Task,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-23 11:22:37+00:00,2010-11-27 06:14:08+00:00,"Since there are some bundles conflicts within the camel karaf features file and Servicemix, we need to clean them up.","njiang:1253678433:2009-09-23T12:00:33.177+0000:1253678433:2009-09-23T12:00:33.177+0000:trunk
http://svn.apache.org/viewvc?rev=818063&view=rev
njiang:1253682065:2009-09-23T13:01:05.708+0000:1253682065:2009-09-23T13:01:05.708+0000:camel 1.x branch

http://svn.apache.org/viewvc?rev=818087&view=rev
davsclaus:1275521078:2010-06-03T07:24:38.534+0000:1275521078:2010-06-03T07:24:38.534+0000:Closing old resolved issues"
0,CAMEL-2036,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-23 06:25:55+00:00,2010-06-03 07:24:38+00:00,It should use the ClassResolver from CamelContext to load its class so its OSGi friendly.,"davsclaus:1253660843:2009-09-23T07:07:23.703+0000:1253660843:2009-09-23T07:07:23.703+0000:trunk: 817984.
davsclaus:1275521078:2010-06-03T07:24:38.317+0000:1275521078:2010-06-03T07:24:38.317+0000:Closing old resolved issues"
0,CAMEL-2035,New Feature,Minor,2.1.0,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Lars Heinemann,0,0,2009-09-23 06:20:43+00:00,2010-06-03 07:24:36+00:00,I have ported servicemix-snmp as a camel-component. Please review and integrate if needed.,"lhein:1253658065:2009-09-23T06:21:05.146+0000:1253658065:2009-09-23T06:21:05.146+0000:added patch
lhein:1253661322:2009-09-23T07:15:22.650+0000:1253661322:2009-09-23T07:15:22.650+0000:added another patch
lhein:1253666532:2009-09-23T08:42:12.860+0000:1253666532:2009-09-23T08:42:12.860+0000:added missing delay for the OIDPoller Consumer
davsclaus:1253670253:2009-09-23T09:44:13.312+0000:1253670253:2009-09-23T09:44:13.312+0000:Committed to trunk: 818024.

Thanks a lot Lars for the contribution.
davsclaus:1253670647:2009-09-23T09:50:47.183+0000:1253670647:2009-09-23T09:50:47.183+0000:Lars contributed wiki documentation as well.

Thanks a lot Lars. Good work.
davsclaus:1275521076:2010-06-03T07:24:36.489+0000:1275521076:2010-06-03T07:24:36.489+0000:Closing old resolved issues"
0,CAMEL-2034,New Feature,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Sagara Gunathunga,0,0,2009-09-23 04:54:15+00:00,2010-06-03 07:24:35+00:00,"Castor is one of the popular OXM framework , this component facilitate to use Castor  marshal/unmarshal features within the Camel framework.","sagara:1253689801:2009-09-23T15:10:01.363+0000:1253689801:2009-09-23T15:10:01.363+0000:camel-castor component added.
davsclaus:1253690999:2009-09-23T15:29:59.698+0000:1253690999:2009-09-23T15:29:59.698+0000:Thanks will look into 
davsclaus:1253848256:2009-09-25T11:10:56.229+0000:1253848256:2009-09-25T11:10:56.229+0000:trunk: 818818.

Thanks a lot Sagara for contribution of this new component to the Camel family.
davsclaus:1253848482:2009-09-25T11:14:42.119+0000:1253848482:2009-09-25T11:14:42.119+0000:Created new ticket for wiki documentation
davsclaus:1275521075:2010-06-03T07:24:35.848+0000:1275521075:2010-06-03T07:24:35.848+0000:Closing old resolved issues"
0,CAMEL-2033,Bug,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Moulliard Charles,0,0,2009-09-22 07:27:38+00:00,2010-06-03 07:24:35+00:00,"The following error is generated when a POJO defined as a polling consumer try to consume messages from an activemq queue


CaughtExceptionType:java.io.NotSerializableException,
CaughtExceptionMessage:org.apache.camel.component.jms.JmsQueueEndpoint,
StackTrace:java.io.NotSerializableException:
org.apache.camel.component.jms.JmsQueueEndpoint
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)
       at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1251)
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1075)
       at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)
       at org.apache.camel.component.bean.BeanInvocation.writeExternal(BeanInvocation.java:104)
       at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1310)
       at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1288)
       at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079)
       at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)
       at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98)


Here is the code of the POJO



public class ReportingConsumer {
	
	@EndpointInject(name = ""queueReportingEndpoint"")
	private ConsumerTemplate consumer;
	
       @EndpointInject(name = ""queueReportingEndpoint"")
	private Endpoint endpoint;
	
	public List<Map<String, Object>> collectMessages() {

    	List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
    	List<Map<String, Object>> received = new ArrayList<Map<String, Object>>();
    	
	received = consumer.receiveBody(endpoint, List.class);
...




Everything works fine when the POJO is designed like this :



@Consume(ref=""queueToBeRead"")
public List<> method(List<>) {

...

}




but in this case it is not a polling consumer","davsclaus:1253584352:2009-09-22T09:52:32.206+0000:1253584352:2009-09-22T09:52:32.206+0000:trunk: 817576.
cmoulliard:1253587092:2009-09-22T10:38:12.882+0000:1253587092:2009-09-22T10:38:12.882+0000:Thx for the correction.

Top of Karaf (osgi server), we have a strange error generated when I update my camel bundle containing this route and the code of the consumer. Here is the error :

{code}
12:34:36,633 | INFO  | heduler_Worker-2 | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.quartz.JobDetail
, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F2+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
, CaughtExceptionType:java.lang.IllegalStateException, CaughtExceptionMessage:Invalid BundleContext., StackTrace:java.lang.IllegalStateException: Invalid BundleContext.
	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:393)
	at org.apache.felix.framework.BundleContextImpl.getServiceReference(BundleContextImpl.java:257)
	at org.apache.camel.osgi.OsgiServiceRegistry.lookup(OsgiServiceRegistry.java:47)
	at org.apache.camel.osgi.CompositeRegistry.lookup(CompositeRegistry.java:59)
	at org.apache.camel.impl.DefaultCamelContext.createEndpoint(DefaultCamelContext.java:1101)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:408)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)
	at org.apache.camel.impl.DefaultConsumerTemplate.resolveMandatoryEndpoint(DefaultConsumerTemplate.java:134)
	at org.apache.camel.impl.DefaultConsumerTemplate.receive(DefaultConsumerTemplate.java:53)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:80)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:107)
	at org.apache.camel.impl.DefaultConsumerTemplate.receiveBody(DefaultConsumerTemplate.java:112)
	at com.xpectis.x3s.core.util.ReportingConsumer.collectMessages(ReportingConsumer.java:29)
{code}
davsclaus:1275521075:2010-06-03T07:24:35.248+0000:1275521075:2010-06-03T07:24:35.248+0000:Closing old resolved issues"
0,CAMEL-2032,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,Stanley J. Lewis,0,0,2009-09-21 16:24:19+00:00,2010-06-03 07:24:34+00:00,"This has been bugging me for awhile, when you have a route using XMPP you get instances of XmppMessage in your route rather than just a string containing the body of the XmppMessage.  Tracked that down and took out the work arounds I had previously put in my contributed xmpp tests.","janstey:1253525252:2009-09-21T17:27:32.893+0000:1253525252:2009-09-21T17:27:32.893+0000:Nice catch Stan!

I've committed your fix here http://svn.apache.org/viewvc?rev=817330&view=rev
davsclaus:1275521074:2010-06-03T07:24:34.535+0000:1275521074:2010-06-03T07:24:34.535+0000:Closing old resolved issues"
0,CAMEL-2031,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-21 08:20:28+00:00,2010-06-03 07:24:34+00:00,To avoid data set consumers starting spitting out messages before other routes have properly started.,"davsclaus:1253492682:2009-09-21T08:24:42.944+0000:1253492682:2009-09-21T08:24:42.944+0000:trunk: 817190
davsclaus:1275521074:2010-06-03T07:24:34.346+0000:1275521074:2010-06-03T07:24:34.346+0000:Closing old resolved issues"
0,CAMEL-2030,Improvement,Trivial,2.0.0,2.3.0,"
None
",Closed,Incomplete,2.3.0,Hadrian Zbarcea,Claus Ibsen,0,0,2009-09-20 08:15:45+00:00,2011-04-24 09:57:27+00:00,"Hadrian can you add documentation to the wiki page for the new minRate option you added


It should be added to the Options table here:
http://camel.apache.org/dataset",davsclaus:1303610247:2011-04-24T09:57:27.108+0000:1303610247:2011-04-24T09:57:27.108+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-2029,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-20 07:44:57+00:00,2010-06-03 07:24:33+00:00,The wiki documentation states it has a default delay of 3 in which it didnt,"davsclaus:1253410329:2009-09-20T09:32:09.313+0000:1253410329:2009-09-20T09:32:09.313+0000:trunk: 816996.
davsclaus:1275521073:2010-06-03T07:24:33.945+0000:1275521073:2010-06-03T07:24:33.945+0000:Closing old resolved issues"
0,CAMEL-2028,New Feature,Minor,None,None,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,Claus Ibsen,0,0,2009-09-19 07:01:35+00:00,2010-06-03 07:24:33+00:00,No Desc,"davsclaus:1253314922:2009-09-19T07:02:02.020+0000:1253314922:2009-09-19T07:02:02.020+0000:We need same feature as this for freemarker
davsclaus:1253314942:2009-09-19T07:02:22.927+0000:1253314942:2009-09-19T07:02:22.927+0000:Stan can you take a look at this? 
slewis:1253517926:2009-09-21T15:25:26.187+0000:1253517926:2009-09-21T15:25:26.187+0000:Here you go Claus.  Had to do it a little differently as Freemarker appears to require a whole different TemplateLoader if you want to use a template from a String.
davsclaus:1253571474:2009-09-22T06:17:54.745+0000:1253571474:2009-09-22T06:17:54.745+0000:trunk: 817510.

Thanks again Stan.

Applied patch with thanks to Stan Lewis.
davsclaus:1275521073:2010-06-03T07:24:33.143+0000:1275521073:2010-06-03T07:24:33.143+0000:Closing old resolved issues"
0,CAMEL-2027,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Dragisa Krsmanovic,0,1,2009-09-18 22:50:48+00:00,2010-06-03 07:24:32+00:00,"Following unit test fails. 


Similar test, but using Spring XML with <routeBuilder ref=""...""/> instead of Spring JavaConfig,  would succeed.



@ContextConfiguration(
    locations = ""org.plos.camel.BeanJavaConfigTest$ContextConfig"",
    loader = JavaConfigContextLoader.class
)
public class BeanJavaConfigTest extends AbstractTestNGSpringContextTests {

  @EndpointInject(uri = ""mock:end"")
  protected MockEndpoint endpoint;

  @EndpointInject(uri = ""mock:error"")
  protected MockEndpoint errorEndpoint;

  @Produce(uri = ""direct:start"")
  protected ProducerTemplate producer;

  @Test
  @DirtiesContext
  public void testSomething() throws Exception {
    endpoint.expectedMessageCount(1);
    endpoint.message(0).body().isEqualTo(""Message Body"");
    producer.sendBody(""Message Body"");
    endpoint.assertIsSatisfied();
  }

  public static class SomeBean {

    @Handler
    public String someMethod(String body) {
      System.out.println(""Received: "" + body);
      return body;
    }
  }

  @Configuration
  public static class ContextConfig extends SingleRouteCamelConfiguration {

    @Bean
    @Override
    public RouteBuilder route() {
      return new RouteBuilder() {
        @Override
        public void configure() throws Exception {
          from(""direct:start"")
              .bean(new SomeBean())
              .to(""mock:end"")
              .errorHandler(deadLetterChannel(""mock:end""));
        }
      };
    }
  }
}




Error stack:



java.lang.IllegalStateException: Failed to load ApplicationContext

...

Caused by: java.lang.NullPointerException
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:41)
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:115)
	at org.apache.camel.component.bean.BeanProcessor.<init>(BeanProcessor.java:55)
	at org.apache.camel.model.BeanDefinition.createProcessor(BeanDefinition.java:156)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:276)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:116)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:439)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901)
	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99)
	at org.apache.camel.spring.SpringCamelContext.afterPropertiesSet(SpringCamelContext.java:87)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
	... 74 more","davsclaus:1253405577:2009-09-20T08:12:57.019+0000:1253405577:2009-09-20T08:12:57.019+0000:trunk: 816992.
davsclaus:1275521072:2010-06-03T07:24:32.515+0000:1275521072:2010-06-03T07:24:32.515+0000:Closing old resolved issues"
0,CAMEL-2026,Improvement,Major,2.0.0,2.8.0,"
None
",Resolved,Won't Fix,2.8.0,Claus Ibsen,Scott Clasen,0,1,2009-09-18 17:57:44+00:00,2011-07-10 08:44:02+00:00,"With minor alteration, the CamelInvocationHandler could be made serializable, and then camel-spring bean proxies could be passed as callback objects in method calls on other camel-spring proxies...enabling async request-reply via spring remoting.


I have achieved this by Wrapping the CamelInvocationHandler, subclassing the CamelProxyFactoryBean, and by attaching a processor to routes that can recieve BeanInvocations that have a callback object.  Integrated into the codebase, this could be much more straightforward, and not require a processor be attached. 


=================CamelInvocationHandlerWrapper



/**
 * Serializable wrapper for Camel/Spring remoting proxies.
 */
public class CamelInvocationHandlerWrapper implements InvocationHandler, Serializable {


    /*
   Findbugs will complain that inner dosent get set at deserialization time. This is ok.
   You need to have a CamelRemotingProcessor in your inbound camel route that will reset the handler.
    */
    private transient CamelInvocationHandler inner;
    private String serviceUrl;
    private static final long serialVersionUID = 7635312279175935612L;

    /**
     * Create a CamelInvocationHandlerWrapper.
     *
     * @param handler    the handler to use in this VM.
     * @param serviceUrl the serviceUrl to use to rebuild the CamelInvocationHandler if we are serialized and used in a different VM.
     */
    public CamelInvocationHandlerWrapper(CamelInvocationHandler handler, String serviceUrl) {
        this.inner = handler;
        this.serviceUrl = serviceUrl;
    }

    /**
     * {@inheritDoc}
     */
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        if (method.getDeclaringClass().equals(Object.class)) {
            return method.invoke(this, args);
        } else {
            if (inner == null) {
                throw new IllegalStateException(""The inner CamelInvocationHandler is null, perhaps there was no CamelRemotingProcessor on your inbound route???"");
            } else {
                return inner.invoke(proxy, method, args);
            }
        }

    }

    /**
     * Package Private so the CamelRemotingProcessor can rewire when we are passed remotely.
     *
     * @param context the current camel context.
     * @throws Exception if we cant build an endpoint for the service url or create a producer.
     */
    void rebuildInvocationHandler(CamelContext context) throws Exception {
        Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(context, serviceUrl);
        Producer producer = endpoint.createProducer();
        producer.start();
        inner = new CamelInvocationHandler(endpoint, producer, new MethodInfoCache(endpoint.getCamelContext()));
    }

    void setServiceUrl(String serviceUrl) {
        this.serviceUrl = serviceUrl;
    }
}




================Proxy Factory



/**
 * ProxyFactory that wraps a camel proxy in a serializable form.
 */
public class CamelProxyWrapperFactoryBean extends CamelProxyFactoryBean {


    /**
     * Override the CamelProxyFactoryBean to return a different proxy that uses a CamelInvocationHandlerWrapper.
     *
     * @return a Proxy backed by a CamelInvocationHandlerWrapper for the specified interface.
     * @throws Exception if we cant create the proxy.
     */
    @Override
    public Object getObject() throws Exception {
        Object proxy = super.getObject();
        CamelInvocationHandler handler = (CamelInvocationHandler) Proxy.getInvocationHandler(proxy);
        return Proxy.newProxyInstance(getObjectType().getClassLoader(), new Class[]{getObjectType()}, new CamelInvocationHandlerWrapper(handler, getServiceUrl()));
    }


}




========processor that ""rewires"" the transient CamelInvocationHandler by using the service url



public class CamelRemotingProcessor implements Processor {

    /**
     * Rebuild the CamelInvocationHandler if we were passed a Proxy that has a CamelInvocationHandlerWrapper as its handler.
     *
     * @param invocation the BeanInvocation whose args we check for the Proxy.
     * @param context    the current Camel Context.
     * @throws Exception if something blows up.
     */
    public void rewireProxy(BeanInvocation invocation, CamelContext context) throws Exception {
        Object[] args = invocation.getArgs();
        if (args != null) {
            for (Object arg : args) {
                if (Proxy.isProxyClass(arg.getClass())) {
                    InvocationHandler handler = Proxy.getInvocationHandler(arg);
                    if (handler instanceof CamelInvocationHandlerWrapper) {
                        CamelInvocationHandlerWrapper wrapper = (CamelInvocationHandlerWrapper) handler;
                        wrapper.rebuildInvocationHandler(context);
                    }
                }
            }
        }

    }

    /**
     * {@inheritDoc}
     */
    public void process(Exchange exchange) throws Exception {
        CamelContext context = exchange.getContext();
        BeanInvocation invocation = exchange.getIn().getBody(BeanInvocation.class);
        rewireProxy(invocation, context);
    }
}","davsclaus:1253321385:2009-09-19T08:49:45.977+0000:1253321385:2009-09-19T08:49:45.977+0000:added code snippets
davsclaus:1253321532:2009-09-19T08:52:12.046+0000:1253321532:2009-09-19T08:52:12.046+0000:Scott can you attach an unit test that demonstrates this.

Is helpful to implement this smarter in the core.
scott.clasen:1253515992:2009-09-21T14:53:12.059+0000:1253515992:2009-09-21T14:53:12.059+0000:Zipped maven project that demonstrates this approach.

unzip camel-2026.zip
cd camel-2026
(Start up the ""service side""  vm, camel context, activemq broker)
mvn camel:run &
(run a ""client side"" test)
mvn test


scott.clasen:1253516029:2009-09-21T14:53:49.245+0000:1253516029:2009-09-21T14:53:49.245+0000:example of the approach attached as a maven project
scott.clasen:1259746013:2009-12-02T17:26:53.021+0000:1259746013:2009-12-02T17:26:53.021+0000:If it isn't obvious in the example, a rel-life application of this approach would not use locks and conditions to wait for the async reply. This is just to prevent the unit test from exiting before the async reply is recieved
davsclaus:1262676087:2010-01-05T15:21:27.652+0000:1262676087:2010-01-05T15:21:27.652+0000:Scott I wonder when you are going to use this for real use cases?

Having async behavior flying around at will makes it hard to track down what happens.
scott.clasen:1262677615:2010-01-05T15:46:55.163+0000:1262677615:2010-01-05T15:46:55.163+0000:In all of our cases there is a correlation UUID being passed in each service request and callback invocation so that we know what is going on for each request...generally these are very long running operations, like moving a 500GB file across the network.

so usually like

public class Request{

   public UUID getCorrelationUUID(){
        ...
   }

}

public interface Callback {
         @InOnly void serviceExecuted(Request request);
}

public interface Service {
         @InOnly void doService(Request request, Callback callback);
}

I didnt want to force any specific interfaces into this but we do have a set of base interaces that enforce the UUID stuff.

Off the top of my head, I could see blowing this out a bit and adding a new exchange pattern annotation like @InOnlyAsyncReply that has parameter annotations for @Correlation and @Callback, and maybe @Terminating annotations on the callback interface to indicate that calling a method terminates conversation and its associated state...

So something like 


public class Request{
   
   @CorrelationID
   public UUID getCorrelationUUID(){
        ...
   }

}

public interface ICallback {
         @InOnly void serviceStarting(Request request);
         @InOnly @Terminating void serviceExecuted(Request request);
}

public interface Service {
         @InOnlyAsyncReply void doService(@Correlation Request request, @Callback ICallback callback);
}

But this would get camel into the business of holding converstaion state which Im not sure you want to do....


hadrian:1262678579:2010-01-05T16:02:59.093+0000:1262678579:2010-01-05T16:02:59.093+0000:Scott, did you try using camel-bam for this? Unfortunately camel-bam is under used and under documented.
scott.clasen:1262681162:2010-01-05T16:46:02.377+0000:1262681162:2010-01-05T16:46:02.377+0000:Very nice, looks like camel bam is already in the business of tracking state, and the expression based extraction of the correlation identifier is already there. Seems like it could be leveraged. 

We arent using this service/callback stuff as bam, but as steps in business workflows, there will be BAM done on the invocations but through other means, such as wiretaps sending to monitoring topics.

How much interest is there in taking this further...I think the serializable proxy stuff is pretty useful on its own, but there is a whole bunch more that might be useful.

Our services are generally in standalone vms,  running in java service wrapper, that boot up a camel context, in cases where losing requests is unacceptable we will do XA consumption of the JMS request along with logging it in a berkeley DB, and then XA removal of the request and sending the callback when a @Terminating method is called.

There is also thread management, and administrative functions built in to the base classes we use, cancelation/reprioritization/status on in -light work, but Im not sure this is something that belongs in camel.




hadrian:1262684576:2010-01-05T17:42:56.489+0000:1262684576:2010-01-05T17:42:56.489+0000:Exactly. Plus bam has it's own dsl, which could be extended.

I think your use case makes sense, and we are always interested in improving camel and support useful scenarios. The question is where in camel is best to plug in new functionality. The part I, personally, am not very fond of is the XA transactions. I think they are very brittle and too resource intensive with long running transactions, but that's just my opinion. Thread management/admin stuff does belong in camel.

We also highly appreciate contributions. Kudos for taking the time and send some code.
scott.clasen:1262862133:2010-01-07T19:02:13.676+0000:1262862133:2010-01-07T19:02:13.676+0000:Agreed on XA, perhaps I should generalize it a bit more and and just say the service will log the request when it arrives, in the consumer thread. It would then hand off to a work queue/worker pool which performs the actual work.  The worker thread would call methods on the callback proxy, and when one of the methods has @Terminating, the service would mark work as complete/failed/etc..

This would provide some crash tolerance, without necessarily going XA.

 In the case of a graceful shutdown, work is ""requeued"" to its originating destination (jms, etc), using another camel proxy.

And in the case of XA its 2 short running TX, 1 to log the request, and 1 to log its disposition.

I will do some more digging into the bam stuff...

The code I am thinking of that we could contribute is centered around an AbstractAsyncService class that has a defined lifecycle, and generically manages the execution of  tasks with an Executor, provides adminstrative methods to get status on,  reprioritize work, cancel in-flight work,  and like I mentioned above track in-flight work in case of a crash, and ""requeue"" existing work to the originating endpoint on graceful shutdown. It has a getRouteBuilder() method which builds up the camel routes to make all this happen at startup.

Not sure if you think that belongs in camel or just closely integrated with it.

davsclaus:1310258642:2011-07-10T08:44:02.073+0000:1310258642:2011-07-10T08:44:02.073+0000:Lets keep it as is"
0,CAMEL-2025,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,William Tam,Stanley J. Lewis,0,0,2009-09-18 13:35:03+00:00,2010-06-03 07:24:31+00:00,"According to http://camel.apache.org/cxf.html if you specify PAYLOAD or MESSAGE mode you don't need to specify the serviceClass parameter if wsdlUrl is provided. However this isn't the case, with a route like:


cxf://localhost:8080/blah?wsdlURL=classpath:hello/HelloWorld-DOC.wsdl&dataFormat=PAYLOAD


The following exception is thrown:



java.lang.IllegalArgumentException: serviceClass must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:271)
	at org.apache.camel.component.cxf.CxfEndpoint.createServerFactoryBean(CxfEndpoint.java:303)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:47)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:97)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:59)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:83)
	at org.apache.camel.impl.RouteService.doStart(RouteService.java:94)
	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:843)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:147)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:100)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)




as the code doesn't check what mode is being used before testing if serviceClass is set or not.


Attached patch adds a test that reproduces this and also fixes the issue.","wtam:1253280482:2009-09-18T21:28:02.013+0000:1253280482:2009-09-18T21:28:02.013+0000:Hi Stan, thanks for the report and the patch.   The problem is specifically for non-spring created endpoint.   I applied your patch and also fixed the same issue on the producer side.   We actually have a test/wsdl (for this feature but for spring created endpoint) we can reuse.  So, I reused it instead.
wtam:1253280504:2009-09-18T21:28:24.461+0000:1253280504:2009-09-18T21:28:24.461+0000:Committed revision 816789.

davsclaus:1275521071:2010-06-03T07:24:31.926+0000:1275521071:2010-06-03T07:24:31.926+0000:Closing old resolved issues"
0,CAMEL-2024,Improvement,Major,2.0.0,None,"
None
",Closed,Won't Fix,2.1.0,Willem Jiang,Claus Ibsen,0,0,2009-09-18 12:12:21+00:00,2010-06-03 07:24:31+00:00,"A web.xml like this



    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>CamelServlet</servlet-name>
        <display-name>Camel Http Transport Servlet</display-name>
        <servlet-class>org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class>
        <init-param>
            <param-name>matchOnUriPrefix</param-name>
            <param-value>true</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>CamelServlet</servlet-name>
        <url-pattern>/services/*</url-pattern>
    </servlet-mapping>




Should be able to work as spring is initialized as its always is using the context listener. The CamelServlet should not try to load or create a spring application context itself.


Separation of concerns
Non invasive","davsclaus:1253247191:2009-09-18T12:13:11.980+0000:1253247191:2009-09-18T12:13:11.980+0000:What is required now is to add a init parameter to the servlet
{code}
    <!-- set the camel context application file location here -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
	  <param-value>/org/apache/camel/component/servlet/camelContext.xml</param-value>
    </init-param>
{code}

Which is not cool. For example you cannot have it in WEB-INF/applicationContext.xml as many people will have.
njiang:1256749384:2009-10-29T01:03:04.946+0000:1256749395:2009-10-29T01:03:15.893+0000:@ Claus
If we use the SpringContextLoaderListener, the camel context will start before the servlet register it to the ServletComponent. and the ServletComponent will compliant about it can't servlet when starting the endpoint. That is why I let the servlet load the application context itself.

I did some hack to let the camel context start after the  servlet started, but it will not work all the time, and it is not clean as the init parameter solution.
It also need user to set the autoStart flag in the camel context, and we need check the camel context status in the servlet.

So I just attached the patch in this JIRA, and marked it as won't fix.

davsclaus:1275521071:2010-06-03T07:24:31.209+0000:1275521071:2010-06-03T07:24:31.209+0000:Closing old resolved issues"
0,CAMEL-2023,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Christian Müller,0,1,2009-09-17 21:16:58+00:00,2010-06-03 07:24:30+00:00,"It would be nice, if the camel-velocity component also read templates from the exchange In message header or attachment. We could define this with following uri's (like in the camel-mina component):



velocity://header:templateHeaderName respectively velocity:header:templateHeaderName




and



velocity://attachment:templateAttachmentName respectively velocity:attachment:templateAttachmentName




I need this flexibility in a project, because the template, which we have to use, must be calculated at runtime and depends on some attributes of the message In body like:



Which event has triggered this exchange?
Which customer will receive this message?
Which protocol is used (smtp, smpp, xmpp, ...)?



I add a more technical description of my requirements in form of four unit tests (see camel-velocity-tests.patch). 


The second attachment (camel-velocity.patch) contains the patch, which I have developed to fulfill my requirements. I hope with this contribution, I can make camel a little bit better, than this great framework is already.


Regards,
Christian","muellerc:1253194124:2009-09-17T21:28:44.142+0000:1253194124:2009-09-17T21:28:44.142+0000:If you agree with this contribution, I would also update the camel-velocity component site to describe the new features (if anybody can tell me the svn url of this componets site)... :-)

Regards,
Christian
davsclaus:1253227524:2009-09-18T06:45:24.962+0000:1253227524:2009-09-18T06:45:24.962+0000:Christian, see CAMEL-1850 which implements this.
muellerc:1253247028:2009-09-18T12:10:28.392+0000:1253247028:2009-09-18T12:10:28.392+0000:Hello Claus!

Thank you for your quick reply. I think my explanation was too short...

In my project, the templates are stored in a database (because our customers have the possibility to change the templates with a custom build application at runtime) and we don't want to have to redeploy our service, whenever a template is modified. For this reason, we call a service which resolves the template to use, read the template from the database and adds it to the exchange in-message header. That's the reason, we need the functionality to read the ""real"" template (not the path to the template) from the exchange in-message header (or attachment).

Regards,
Christian
davsclaus:1253314836:2009-09-19T07:00:36.156+0000:1253314836:2009-09-19T07:00:36.156+0000:Hi Christian

Thanks for the explanation. I did implement this a bit differently to be aligned with the recent implementation of the dynamic header.

You can now use the header name {{CamelVelocityTemplate}} to set a header with a template to use.

Wiki page updated.


trunk: 816861.
muellerc:1253491672:2009-09-21T08:07:52.651+0000:1253491672:2009-09-21T08:07:52.651+0000:Hello Claus!

Your code looks nicer and more consistent than my code... :-)
Thank you for the quick reply and fix.

Regards,
Christian
davsclaus:1253492655:2009-09-21T08:24:15.675+0000:1253492655:2009-09-21T08:24:15.675+0000:Christian, thanks for the patch and reporting the issue.

Glad you liked it and its useable for you.
davsclaus:1275521070:2010-06-03T07:24:30.626+0000:1275521070:2010-06-03T07:24:30.626+0000:Closing old resolved issues"
0,CAMEL-2022,New Feature,Major,None,None,"
None
",Closed,Fixed,2.4.0,Guillaume Nodet,Guillaume Nodet,0,0,2009-09-17 15:27:48+00:00,2011-04-24 10:00:44+00:00,No Desc,"gnodet:1253172598:2009-09-17T15:29:58.122+0000:1253172598:2009-09-17T15:29:58.122+0000:Attach work in progress.  Does not even compile ...
gnodet:1254884109:2009-10-07T10:55:09.862+0000:1254884109:2009-10-07T10:55:09.862+0000:Committed revision 822657. (for trunk)
Committed revision 822658. (for 1.6.x branch)

gnodet:1254970364:2009-10-08T10:52:44.812+0000:1254970364:2009-10-08T10:52:44.812+0000:Build is broken, will work on fixing the jaxb schema generation on non sun jdk.
gnodet:1254981080:2009-10-08T13:51:20.559+0000:1254981080:2009-10-08T13:51:20.559+0000:Sending        camel-blueprint/pom.xml
Sending        pom.xml
Transmitting file data ..
Committed revision 823177.

Trying to fix the build on non sun jdk.
davsclaus:1255046742:2009-10-09T08:05:42.489+0000:1255046742:2009-10-09T08:05:42.489+0000:We get this error when we build the snapshots using: mvn clean install -Dtest=false from the camel root

{code}
java.lang.reflect.InvocationTargetException
        at sun.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:592)
        at aQute.lib.osgi.Macro.doCommand(Macro.java:183)
        at aQute.lib.osgi.Macro.doCommands(Macro.java:171)
        at aQute.lib.osgi.Macro.replace(Macro.java:118)
        at aQute.lib.osgi.Macro.process(Macro.java:62)
        at aQute.lib.osgi.Macro.process(Macro.java:78)
        at aQute.lib.osgi.Macro.process(Macro.java:48)
        at aQute.lib.osgi.Macro.process(Macro.java:43)
        at aQute.lib.osgi.Analyzer.augmentVersion(Analyzer.java:1026)
        at aQute.lib.osgi.Analyzer.augmentImports(Analyzer.java:937)
        at aQute.lib.osgi.Analyzer.analyze(Analyzer.java:218)
        at aQute.lib.osgi.Builder.analyze(Builder.java:198)
        at aQute.lib.osgi.Analyzer.calcManifest(Analyzer.java:283)
        at aQute.lib.osgi.Builder.build(Builder.java:78)
        at org.apache.felix.bundleplugin.BundlePlugin.buildOSGiBundle(BundlePlugin.java:395)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:286)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:240)
        at org.apache.felix.bundleplugin.BundlePlugin.execute(BundlePlugin.java:231)
        at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:558)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:499)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:478)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:330)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:291)
        at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:142)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:336)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:129)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:287)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:592)
        at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
        at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
        at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
        at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Caused by: java.lang.IllegalArgumentException: Invalid syntax for version: 2.1.0.SNAPSHOT camel.schema.version = 2.1
        at aQute.libg.version.Version.<init>(Version.java:45)
        at aQute.lib.osgi.Macro._version(Macro.java:627)
        ... 38 more
{code}

It would be good to get that fixed as well as it causes me to think there is something wrong with the build as well.
gnodet:1255047955:2009-10-09T08:25:55.308+0000:1255047955:2009-10-09T08:25:55.308+0000:This problem has been fixed already in parent/pom.xml
The problem was caused by the antrun plugin which creates some properties that were indeed invalid due to a missing crlf in the generated properties file.
njiang:1255069539:2009-10-09T14:25:39.725+0000:1255069539:2009-10-09T14:25:39.725+0000:Hi Guillaume,

I can reproduce the issue on latest camel trunk and camel 1.x branch,
and the bundles manifest package version is wrong.

> cat camel.osgi.version.txt 
camel.osgi.version.clean = 1.6.2.SNAPSHOT camel.schema.version = 1.6

And camel.schema.version variable does't be set when the schema is generated.

Can you have a look at this issue ?

Willem
gnodet:1255069777:2009-10-09T14:29:37.563+0000:1255069777:2009-10-09T14:29:37.563+0000:It seems to work for me, so it may be a plaftorm issue.
Could you try replacing ""${line.separator}"" in parent/pom.xml with ""\r\n"" and see if it works better ?
gnodet:1255072707:2009-10-09T15:18:27.805+0000:1255072707:2009-10-09T15:18:27.805+0000:I've updated the parent/pom.xml
Hopefully it will work better.
njiang:1255072898:2009-10-09T15:21:38.641+0000:1255072898:2009-10-09T15:21:38.641+0000:""\r\n"" did not work for mvn 2.0.9.
I changed to use mvn 2.2.0 to build the kit , and every thing work fine.

Maybe it is the maven-antrun-plugin's issue which can not work well on mvn 2.0.x.


gnodet:1273097266:2010-05-06T06:07:46.106+0000:1273097266:2010-05-06T06:07:46.106+0000:I think we should consider it done with the patches that have been applied since.
davsclaus:1303610444:2011-04-24T10:00:44.973+0000:1303610444:2011-04-24T10:00:44.973+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2021,New Feature,Major,"1.6.1, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Guillaume Nodet,Guillaume Nodet,0,0,2009-09-17 15:21:03+00:00,2010-06-03 07:24:30+00:00,"Given the camel-spring schema is not versioned, we have no way in OSGi to install two different versions of camel and for a given bundle, choose the version of camel for the routes.","njiang:1253988237:2009-09-27T02:03:57.028+0000:1253988237:2009-09-27T02:03:57.028+0000:We have the same issue on the camel-cxf,camel-osgi,camel-spring-integration, which have the schemas in its bundle.

njiang:1254023108:2009-09-27T11:45:08.889+0000:1254023108:2009-09-27T11:45:08.889+0000:Hi Guillaume,

If I just change the camel-spring's schema's target namespace to ""http://camel.apache.org/schema/spring/2.1"" , I will introduce a backward compatibility issue. If the user use the ""http://camel.apache.org/schema/spring"" as the target namespace, he will get the schema validation error. 

Maybe we need to ship two version of camel-spring schema, ones schema has the target namespace ""http://camel.apache.org/schema/spring""; the others schema choses ""http://camel.apache.org/schema/spring/2.1"" as the target namespace.

any thoughts?

Willem

gnodet:1254471687:2009-10-02T16:21:27.362+0000:1254471687:2009-10-02T16:21:27.362+0000:Yeah, we need to ship two different schemas.
The unversioned one (which is currently provided) would allow full backward compatibility and also allow users to not care about the camel's version they use.
The versioned one would tie to route definition to a given camel version, but would allow deploying different camel versions in the same osgi container.
gnodet:1254884073:2009-10-07T10:54:33.020+0000:1254884073:2009-10-07T10:54:33.020+0000:There is a problem related to jaxb2 that i've investigated for blueprint, so I'll handle this one.
gnodet:1254986151:2009-10-08T15:15:51.766+0000:1254986151:2009-10-08T15:15:51.766+0000:Sending        components/camel-spring/pom.xml
Sending        components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java
Sending        components/camel-spring/src/main/resources/META-INF/spring.handlers
Sending        components/camel-spring/src/main/resources/META-INF/spring.schemas
Sending        parent/pom.xml
Transmitting file data .....
Committed revision 823198.

I need to backport that in the 1.x branch and do some more testing, and maybe handle the other schemas (cxf + osgi + spring-integration).
gnodet:1254997412:2009-10-08T18:23:32.456+0000:1254997412:2009-10-08T18:23:32.456+0000:Backport to branch:

Sending        components/camel-spring/pom.xml
Sending        components/camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java
Sending        components/camel-spring/src/main/resources/META-INF/spring.handlers
Sending        components/camel-spring/src/main/resources/META-INF/spring.schemas
Sending        parent/pom.xml
Transmitting file data .....
Committed revision 823255.

davsclaus:1257831441:2009-11-10T13:37:21.037+0000:1257831441:2009-11-10T13:37:21.037+0000:Its a new feature to be more OSGi friendly, not a bug
njiang:1260993043:2009-12-17T03:50:43.349+0000:1260993043:2009-12-17T03:50:43.349+0000:I think we already resolved this issue.
davsclaus:1275521069:2010-06-03T07:24:29.989+0000:1275521069:2010-06-03T07:24:29.989+0000:Closing old resolved issues"
0,CAMEL-2020,Bug,Major,"1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0",None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-17 09:21:34+00:00,2010-06-03 07:24:28+00:00,"The stack trace.



   java.lang.NullPointerException
	at
org.apache.camel.osgi.OsgiFactoryFinder.getResource(OsgiFactoryFinder.java:85)
	at
org.apache.camel.osgi.OsgiFactoryFinder.findClass(OsgiFactoryFinder.java:51)
	at
org.apache.camel.component.file.GenericFileEndpoint.createGenericFileStrategy(GenericFileEndpoint.java:130)
	at
org.apache.camel.component.file.GenericFileEndpoint.getGenericFileProcessStrategy(GenericFileEndpoint.java:114)
	at
org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:162)
	at
org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
	at
org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
	at
org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at
java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)




Here is the mail thread[1]  which discusses about this issue.
[1]http://www.nabble.com/Error-using-camel-file-with-windows-tt25475829.html#a25486384","njiang:1253154766:2009-09-17T10:32:46.753+0000:1253154766:2009-09-17T10:32:46.753+0000:trunk
 http://svn.apache.org/viewvc?rev=816105&view=rev
camel 1.x branch 
 http://svn.apache.org/viewvc?rev=816113&view=rev
davsclaus:1275521068:2010-06-03T07:24:28.621+0000:1275521068:2010-06-03T07:24:28.621+0000:Closing old resolved issues"
0,CAMEL-2019,New Feature,Major,2.0.0,2.8.0,"
None
",Resolved,Duplicate,2.8.0,Claus Ibsen,Dragisa Krsmanovic,2,4,2009-09-16 16:28:55+00:00,2011-06-29 11:34:16+00:00,"I want something like:



.setHeader(Exchange.FILE_NAME).xpath(""..."")
.pollEnrich(""file:/test/data"", 10000)




But PollingConsumer API does not allow passing FILE_NAME from outside.


See http://www.nabble.com/pollEnrich-doesn%27t-look-for-FILE_NAME-ts25458854.html",davsclaus:1309318456:2011-06-29T11:34:16.242+0000:1309318456:2011-06-29T11:34:16.242+0000:JIRA is borked on this issue. I cannot edit it. So i have created a new ticket
0,CAMEL-2018,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Yuri Schimke,0,0,2009-09-16 16:15:45+00:00,2010-06-03 07:24:28+00:00,"The Timer endpoint does not appear to allow configuration using Spring XML.  When debugging, the Timer is created (with default configuration) and then the configuration magic happens


TimerComponent.createEndpoint calls
new TimerEndpoint() which calls
component.getTimer(this)


Which creates the timer before the properties are set","davsclaus:1253230948:2009-09-18T07:42:28.154+0000:1253230948:2009-09-18T07:42:28.154+0000:trunk: 816501
davsclaus:1253230988:2009-09-18T07:43:08.628+0000:1253230988:2009-09-18T07:43:08.628+0000:However its only a few options you can configure on the Timer itself. The other parameters are configured later which are the period etc. So its only a very minor issue.
yuri:1253236288:2009-09-18T09:11:28.842+0000:1253236288:2009-09-18T09:11:28.842+0000:Thanks for fixing it.  Without Non Daemon threads you need to create an extra thread to stop the JVM from exiting.
davsclaus:1253236730:2009-09-18T09:18:50.191+0000:1253236730:2009-09-18T09:18:50.191+0000:You can use the Main support to start Camel.

Or use camel-spring that has a Main class to start Camel.

davsclaus:1275521068:2010-06-03T07:24:28.019+0000:1275521068:2010-06-03T07:24:28.019+0000:Closing old resolved issues"
0,CAMEL-2017,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Dragisa Krsmanovic,0,1,2009-09-15 18:30:01+00:00,2010-06-03 07:24:27+00:00,"This simple example will fail in http component with I/O Exception. 


Worked in 2.0-M3 but fails in 2.0.0



Namespaces ns = new Namespaces(""atom"", ""http://www.w3.org/2005/Atom"");
from(""rss:http://www.plosone.org/article/feed"")
  .marshal().rss()
  .setHeader(Exchange.HTTP_URI).xpath(""//atom:entry/atom:link[@type=\""application/pdf\""]/@href"", ns)
  .to(""http://foo"")
  .to(""mock:end"");




Here is debug output:



 
Camel thread 0: RssComponent] HttpProducer                   DEBUG No
Content-Type provided for URI:
http://www.plosone.org/article/fetchObjectAttachment.action?uri=info:doi/10.1371/journal.pone.0006932&representation=PDF with exchange: Exchange[Message: [B@150ecc7]
[       Camel thread 0: RssComponent] HttpProducer
DEBUG Executing http POST method:
http://www.plosone.org/article/fetchObjectAttachment.action?uri=info:doi/10.1371/journal.pone.0006932&representation=PDF
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  I/O exception (java.net.SocketException) caught when processing
request: Connection reset
[       Camel thread 0: RssComponent] HttpMethodDirector
INFO  Retrying request
[       Camel thread 0: RssComponent] DefaultErrorHandler
DEBUG Failed delivery for exchangeId:
ID-dkrsmanovic-usws-55084-1252968147202-0-1. On delivery attempt: 0
caught: java.net.SocketException: Connection reset","davsclaus:1253410989:2009-09-20T09:43:09.416+0000:1253410989:2009-09-20T09:43:09.416+0000:Works fine on trunk
{code}
public class RssToHttpIssueTest extends CamelTestSupport {

    @Test
    public void testRssToHttpIssueTest() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:end"");
        mock.expectedMinimumMessageCount(1);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                Namespaces ns = new Namespaces(""atom"", ""http://www.w3.org/2005/Atom"");
                from(""rss:http://www.plosone.org/article/feed"")
                        .marshal().rss()
                        .setHeader(Exchange.HTTP_URI).xpath(""//atom:entry/atom:link[@type=\""application/pdf\""]/@href"", ns)
                        .to(""http://dummy"")
                        .to(""mock:end"");
            }
        };
    }
}
{code}
davsclaus:1253411825:2009-09-20T09:57:05.395+0000:1253411825:2009-09-20T09:57:05.395+0000:Can you try with Camel trunk?

And the error you see with 2.0 could be some remote server issue at plosone. Can you try again.
davsclaus:1253411909:2009-09-20T09:58:29.447+0000:1253411909:2009-09-20T09:58:29.447+0000:Added unit test, trunk: 817002.
dragisak:1253538518:2009-09-21T21:08:38.738+0000:1253538518:2009-09-21T21:08:38.738+0000:Test is working in latest 2.1-SNAPSHOT (Rev 817336)
davsclaus:1253570734:2009-09-22T06:05:34.768+0000:1253570734:2009-09-22T06:05:34.768+0000:Thanks for testing on trunk
davsclaus:1275521067:2010-06-03T07:24:27.418+0000:1275521067:2010-06-03T07:24:27.418+0000:Closing old resolved issues"
0,CAMEL-2016,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Guillaume Nodet,0,0,2009-09-15 12:12:11+00:00,2010-06-03 07:24:26+00:00,"The package is already exported by camel-core, so the class in this package needs to be moved to another package.","davsclaus:1252991042:2009-09-15T13:04:02.438+0000:1252991042:2009-09-15T13:04:02.438+0000:trunk: 815306.
davsclaus:1253064766:2009-09-16T09:32:46.266+0000:1253064766:2009-09-16T09:32:46.266+0000:Only affects 2.x
davsclaus:1275521066:2010-06-03T07:24:26.643+0000:1275521066:2010-06-03T07:24:26.643+0000:Closing old resolved issues"
0,CAMEL-2015,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-09-15 03:50:57+00:00,2010-06-03 07:24:26+00:00,TODO update the wiki page for it.,"njiang:1252958326:2009-09-15T03:58:46.369+0000:1252958326:2009-09-15T03:58:46.369+0000:http://svn.apache.org/viewvc?rev=814987&view=rev
davsclaus:1275521066:2010-06-03T07:24:26.408+0000:1275521066:2010-06-03T07:24:26.408+0000:Closing old resolved issues"
0,CAMEL-2014,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-09-15 03:47:55+00:00,2010-06-03 07:24:26+00:00,"Here is an user requirement to set the webclient's parameter from cxfrs URI



 
 cxfrs://http://localhost:9010/templatetest/TID/ranges/start=0;end=1?q1=11&q2=12 




There's one matrix parameter (end1) and two query parameters (q1 and q2). 
rather  than setting the query parameters on the endpoint you should set them
on the WebClient.



  WebClient client =
      WebClient.create(""http://localhost:9010/templatetest/TID/ranges/start=0;end=1"");

 for every query parameter {
     client.query(name, value);
 }","njiang:1252958316:2009-09-15T03:58:36.526+0000:1252958316:2009-09-15T03:58:36.526+0000:http://svn.apache.org/viewvc?rev=814987&view=rev
davsclaus:1275521066:2010-06-03T07:24:26.134+0000:1275521066:2010-06-03T07:24:26.134+0000:Closing old resolved issues"
0,CAMEL-2013,Improvement,Minor,1.6.1,,"
None
",Closed,Incomplete,None,Scott Parkerson,Scott Parkerson,0,0,2009-09-14 19:53:26+00:00,2011-04-24 10:01:13+00:00,"Basically, any OSGi bundle implementing the @Consume method must mark their bundle's manifest as requiring import org.apache.camel.component.bean. Otherwise, the broker will fail to unmarshal the BeanInvocation-wrapped object.","smerp:1252929245:2009-09-14T19:54:05.938+0000:1252929245:2009-09-14T19:54:05.938+0000:See related issue (AMQ-2392) for context.
davsclaus:1252991151:2009-09-15T13:05:51.051+0000:1252991151:2009-09-15T13:05:51.051+0000:You can get edit rights to the documentation, and fix it yourself.

Camel itself cannot depend on a few people doing everything. People from the community must step up once in a while.

See improving documentation
http://camel.apache.org/contributing.html
smerp:1252992116:2009-09-15T13:21:56.882+0000:1252992116:2009-09-15T13:21:56.882+0000:Claus,

I've requested a wiki account. I'd be happy to help with docs, among other things.

--sgp
davsclaus:1254531785:2009-10-03T09:03:05.752+0000:1254531785:2009-10-03T09:03:05.752+0000:Scott did you get the ICLA send to Apache?
smerp:1254544201:2009-10-03T12:30:01.230+0000:1254544201:2009-10-03T12:30:01.230+0000:


Yes, and I sent it by post on Friday morning (yesterday). It should be  
on its way to the ASF in LA, probably arriving on Tuesday.




davsclaus:1256644740:2009-10-27T19:59:00.142+0000:1256644740:2009-10-27T19:59:00.142+0000:Scott is you name on the ICA list?
http://people.apache.org/~jim/committers.html#unlistedclas
smerp:1256701307:2009-10-28T11:41:47.860+0000:1256701307:2009-10-28T11:41:47.860+0000:Claus,

No, my name is not on the list yet.
davsclaus:1258674183:2009-11-20T07:43:03.389+0000:1258674183:2009-11-20T07:43:03.389+0000:Scott what happened? Are you name still not listed?
smerp:1258694316:2009-11-20T13:18:36.041+0000:1258694316:2009-11-20T13:18:36.041+0000:Yikes! It's there now. Either that, or I didn't search for my full name before (""Scott Graham Parkerson""). 

So, I guess add me to the wiki with Edit Powers. :D I'll see what I can do.
davsclaus:1258694648:2009-11-20T13:24:08.011+0000:1258694648:2009-11-20T13:24:08.011+0000:Scott you know have the karma to assign tickets to yourself in JIRA and edit the wiki pages.


davsclaus:1270881345:2010-04-10T14:35:45.493+0000:1270881345:2010-04-10T14:35:45.493+0000:Closing old tickets with no activity
davsclaus:1303610473:2011-04-24T10:01:13.517+0000:1303610473:2011-04-24T10:01:13.517+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-2012,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-14 11:40:22+00:00,2010-06-03 07:24:25+00:00,No Desc,"davsclaus:1252899684:2009-09-14T11:41:24.638+0000:1252899684:2009-09-14T11:41:24.638+0000:Non singleton endpoints could potentially be created many many times, eg. based on a recipient list or from a loop with a producer template etc.

We should *not* register these endpoints in management as the overhead will be substantial
davsclaus:1252902212:2009-09-14T12:23:32.081+0000:1252902212:2009-09-14T12:23:32.081+0000:trunk: 814607.
davsclaus:1275521065:2010-06-03T07:24:25.824+0000:1275521065:2010-06-03T07:24:25.824+0000:Closing old resolved issues"
0,CAMEL-2011,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-14 11:10:14+00:00,2010-06-03 07:24:25+00:00,"Letting JmsEndpoint be singleton avoids



overhead of creating new instances when for example a producer template sends to same endpoints
management is not having overhead of registering 100s of same virtually the same endpoints that binds to the same JMS queue
potential a little performance gain without the overhead of creating a new JmsEndpoint when needed by getEndpoint","davsclaus:1252898822:2009-09-14T11:27:02.462+0000:1252898822:2009-09-14T11:27:02.462+0000:trunk: 814584.
davsclaus:1275521065:2010-06-03T07:24:25.592+0000:1275521065:2010-06-03T07:24:25.592+0000:Closing old resolved issues"
0,CAMEL-2010,New Feature,Minor,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Moulliard Charles,Claus Ibsen,0,0,2009-09-14 08:09:15+00:00,2010-06-03 07:24:25+00:00,"Charles I have assigned you to add wiki documentation about the quickfix component. You use this component on a daily basis and will be the best candidate to add documentation for it.


What needs to be done is:



add a new child page with name: QuickFix under components
then add the documentation how to use it, see some of the other components for inspiration
add it to the components overview page (can be a bit tricky to find the right wiki page to edit)","cmoulliard:1259128781:2009-11-25T13:59:41.878+0000:1259128781:2009-11-25T13:59:41.878+0000:Page http://cwiki.apache.org/confluence/display/CAMEL/Component+List updated
and http://cwiki.apache.org/confluence/display/CAMEL/Quickfix created
davsclaus:1275521064:2010-06-03T07:24:24.990+0000:1275521064:2010-06-03T07:24:24.990+0000:Closing old resolved issues"
0,CAMEL-2009,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Claus Ibsen,0,0,2009-09-13 09:38:04+00:00,2010-06-03 07:24:24+00:00,No Desc,"davsclaus:1252805918:2009-09-13T09:38:38.728+0000:1252805918:2009-09-13T09:38:38.728+0000:Double check the the dependencies in pom.xml is as minimal as possible. Looks a bit odd that commons net and JSCH is needed.
njiang:1252808878:2009-09-13T10:27:58.202+0000:1252808878:2009-09-13T10:27:58.202+0000:@Claus

I just checked the jars which camel-cache dependents on , they are not the OSGi bundle.
So we need to turn them into be OSGi bundle first.
njiang:1252814599:2009-09-13T12:03:19.406+0000:1252814599:2009-09-13T12:03:19.406+0000:I just check the ehcache pom, there is no dependency of JSCH and commons net ,
so I removed these two dependencies and ran the test successfully. 
njiang:1252822300:2009-09-13T14:11:40.884+0000:1252822300:2009-09-13T14:11:40.884+0000:http://svn.apache.org/viewvc?rev=814314&view=rev
http://svn.apache.org/viewvc?rev=814315&view=rev
davsclaus:1275521064:2010-06-03T07:24:24.232+0000:1275521064:2010-06-03T07:24:24.232+0000:Closing old resolved issues"
0,CAMEL-1978,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Ivan Dubrov,0,0,2009-09-02 07:48:35+00:00,2010-06-03 07:24:11+00:00,"Currently ""user-agent"", ""accept"" and ""accept-encoding"" headers are copied to the response. I think, they should not be put into the response.","wfrag:1251848976:2009-09-02T07:49:36.804+0000:1251848976:2009-09-02T07:49:36.804+0000:The patch with fixes.
davsclaus:1252839790:2009-09-13T19:03:10.405+0000:1252839790:2009-09-13T19:03:10.405+0000:Willem fixed this lately I believe.
njiang:1252866470:2009-09-14T02:27:50.205+0000:1252866470:2009-09-14T02:27:50.205+0000:Added the linked issue.
davsclaus:1275521051:2010-06-03T07:24:11.801+0000:1275521051:2010-06-03T07:24:11.801+0000:Closing old resolved issues"
0,CAMEL-1977,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Ivan Dubrov,0,0,2009-09-02 07:43:24+00:00,2010-06-03 07:24:11+00:00,"Camel does not filter out internal headers when creating HTTP response. The internal headers like ""CamelBeanMultiParameterArray"" occur in HTTP response.


The reason is that in the following piece of code (from DefaultHttpBinding.java, around line 157):



        for (String key : message.getHeaders().keySet()) {
            String value = message.getHeader(key, String.class);
            if (headerFilterStrategy != null
                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {
                response.setHeader(key, value);
            }
        }




the ""key"" returned is lowercase, even in case the real header is ""CamelBeanMultiParameterArray"" (because CaseInsensitiveMap is used, which turns all keys to lowercase). Since pattern match in DefaultHeaderFilterStrategy is case-sensitive, the header is not filter out when filling the response headers.


The suggested solution is to make pattern case-insensitive.","wfrag:1251848651:2009-09-02T07:44:11.052+0000:1251848651:2009-09-02T07:44:11.052+0000:The patch demonstrating the fix.
davsclaus:1252895849:2009-09-14T10:37:29.440+0000:1252895849:2009-09-14T10:37:29.440+0000:Thanks for reporting.

trunk: 814567.
davsclaus:1275521051:2010-06-03T07:24:11.164+0000:1275521051:2010-06-03T07:24:11.164+0000:Closing old resolved issues"
0,CAMEL-1976,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-02 07:17:54+00:00,2010-06-03 07:24:10+00:00,"You should be able to using JMX to manage JMS endpoints and change configuration such as number of concurrent consumers.


Then when restarting the jms consumers they should pickup any configuration changes done on the jms endpoint.","davsclaus:1251849186:2009-09-02T07:53:06.122+0000:1251849186:2009-09-02T07:53:06.122+0000:trunk: 810399.
davsclaus:1275521050:2010-06-03T07:24:10.979+0000:1275521050:2010-06-03T07:24:10.979+0000:Closing old resolved issues"
0,CAMEL-1975,Task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-09-02 06:19:51+00:00,2010-06-03 07:24:10+00:00,"Here is the mailing thread which discusses about it.
http://www.nabble.com/http-header-strategy%3A-transfer-encoding-td25184843.html","streek@avisi.nl:1251937125:2009-09-03T08:18:45.502+0000:1251937125:2009-09-03T08:18:45.502+0000:Might be worth to check the complete list first, instead of just adding the one header to the filter. 

See for example the list at http://www.cs.tut.fi/~jkorpela/http.html, special attention goes out to the headers that are applicable for both server and client (Marked with 'General' in the referred list). These headers cause the kind of trouble I had with the Transfer-encoding header.

I am tempted to create the list, but I feel I don't have the specific in-depth knowledge to evaluate the headers one by one.
njiang:1252004113:2009-09-04T02:55:13.320+0000:1252004113:2009-09-04T02:55:13.320+0000:Thanks for looking into this, I will recheck the headers when I get time this week end.

njiang:1252544015:2009-09-10T08:53:35.541+0000:1252544015:2009-09-10T08:53:35.541+0000:trunk
http://svn.apache.org/viewvc?rev=813310&view=rev
davsclaus:1275521050:2010-06-03T07:24:10.340+0000:1275521050:2010-06-03T07:24:10.340+0000:Closing old resolved issues"
0,CAMEL-1974,Bug,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Fabio Marinelli,0,0,2009-09-01 09:24:25+00:00,2010-06-03 07:24:09+00:00,"I found out this problem developing a test case with cargo on my macbook. Temporary directory on leopard is something like (/private/var/folders/is/ispMf0ylEtCIOP8skg0va++++TI/Tmp) and cargo deploys the embedded container there.
Problem happens when camel tries to find converters by using DefaultPackageScanClassResolver class; it converts the temporary path, using URLDecoder, in the invalid path ""/private/var/folders/is/ispMf0ylEtCIOP8skg0va    TI/Tmp""


You can reproduce this bug by patching the DefaultPackageScanClassResolverTest and adding the following resource file, that I'm going to attach to this issue.","fmarinelli:1251768362:2009-09-01T09:26:02.935+0000:1251768362:2009-09-01T09:26:02.935+0000:Files needed to reproduce this bug
fmarinelli:1251781646:2009-09-01T13:07:26.123+0000:1251781646:2009-09-01T13:07:26.123+0000:I found this interesting issue ( https://issues.apache.org/jira/browse/LAUNCHER-10 ) on another apache project. 
They had the same problem and it seems that the solution comes with:

new URI(resource).getPath()

instead of 

URLDecoder.decode(resource, ""UTF-8"")

at least for file protocol.

Bye
davsclaus:1252882680:2009-09-14T06:58:00.685+0000:1252882680:2009-09-14T06:58:00.685+0000:Thanks Fabio for reporting and showing how to fix it.

trunk: 814499.
taylorjohn:1253077082:2009-09-16T12:58:02.506+0000:1253077082:2009-09-16T12:58:02.506+0000:Discussion at http://www.nabble.com/Fix-for-CAMEL-1974-seems-to-cause-problem-on-Windows-td25458041s22882.html

This fix causes a problem on windows with spaces in the path.

Trace:
{noformat}
 classloader: java.net.URLClassLoader@189acb5
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver TRACE URL from classloader: jar:file:/C:/Documents and Settings/TaylorJohn.
GS/.m2/repository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver TRACE Decoded urlPath: file:/C:/Documents and Settings/TaylorJohn.SGS/.m2/r
pository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
[pache.camel.spring.Main.main()] efaultPackageScanClassResolver WARN  Could not read entries in url: jar:file:/C:/Documents and Settings/Ta
lorJohn.SGS/.m2/repository/org/apache/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
java.net.URISyntaxException: Illegal character in path at index 18: file:/C:/Documents and Settings/TaylorJohn.SGS/.m2/repository/org/apach
/camel/camel-core/2.1-SNAPSHOT/camel-core-2.1-SNAPSHOT.jar!/org/apache/camel/component/file/
        at java.net.URI$Parser.fail(URI.java:2809)
        at java.net.URI$Parser.checkChars(URI.java:2982)
        at java.net.URI$Parser.parseHierarchical(URI.java:3066)
        at java.net.URI$Parser.parse(URI.java:3014)
        at java.net.URI.<init>(URI.java:578)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:222)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:180)
        at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:100)
        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:62)
        at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:359)
        at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:153)
{noformat}



davsclaus:1253083316:2009-09-16T14:41:56.703+0000:1253083316:2009-09-16T14:41:56.703+0000:trunk: 815810.

John can you test from your windows environment again with the latest commit I did?
davsclaus:1275521049:2010-06-03T07:24:09.420+0000:1275521049:2010-06-03T07:24:09.420+0000:Closing old resolved issues"
0,CAMEL-1973,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:34:09+00:00,2010-06-03 07:24:09+00:00,No Desc,"davsclaus:1251762055:2009-09-01T07:40:55.226+0000:1251762055:2009-09-01T07:40:55.226+0000:This allows existing Camel components to just implement the {{org.apache.camel.spi.ManagementAware}} interface and provide the managed object of choice.

This can for example be used by camel-jms to expose management of the JmsEndpoint and/or JmsConsumer.
That should allows you to change concurrent consumers on-the-fly (might require to restart all consumers) in case Spring JmsTemplate does not support changing this value dynamic.
davsclaus:1251762712:2009-09-01T07:51:52.707+0000:1251762712:2009-09-01T07:51:52.707+0000:First part trunk: 809872.
davsclaus:1251765401:2009-09-01T08:36:41.501+0000:1251765401:2009-09-01T08:36:41.501+0000:trunk: 809887.
davsclaus:1275521049:2010-06-03T07:24:09.215+0000:1275521049:2010-06-03T07:24:09.215+0000:Closing old resolved issues"
0,CAMEL-1972,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:33:20+00:00,2010-06-03 07:24:08+00:00,No Desc,"davsclaus:1251761935:2009-09-01T07:38:55.897+0000:1251761935:2009-09-01T07:38:55.897+0000:The route did not have correct stats for execution times. It was not the *real total* but just a part of the total.
Fixed by add a real route specific performance counter.
davsclaus:1275521048:2010-06-03T07:24:08.945+0000:1275521048:2010-06-03T07:24:08.945+0000:Closing old resolved issues"
0,CAMEL-1971,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:32:47+00:00,2010-06-03 07:24:08+00:00,No Desc,"davsclaus:1251761864:2009-09-01T07:37:44.896+0000:1251761864:2009-09-01T07:37:44.896+0000:Tracer is now always managementable and you can just log into jconsole and see it under /tracer. Here you can configure it as you like at runtime.
To eg change log level, what to output etc.

And Camel itself can even per context, or per individual route enable/disable tracing on demand.
For example if one particular route is having an issue you just find the route in jconsole and enable tracing for it.
davsclaus:1275521048:2010-06-03T07:24:08.645+0000:1275521048:2010-06-03T07:24:08.645+0000:Closing old resolved issues"
0,CAMEL-1970,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:32:16+00:00,2010-06-03 07:24:08+00:00,No Desc,"davsclaus:1251761771:2009-09-01T07:36:11.665+0000:1251761771:2009-09-01T07:36:11.665+0000:Add more details to existing beans
Add better naming to existing beans
Add new beans to be managed
davsclaus:1275521048:2010-06-03T07:24:08.467+0000:1275521048:2010-06-03T07:24:08.467+0000:Closing old resolved issues"
0,CAMEL-1969,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:31:51+00:00,2010-06-03 07:24:08+00:00,No Desc,"davsclaus:1251761722:2009-09-01T07:35:22.050+0000:1251761722:2009-09-01T07:35:22.050+0000:Camel should emits events of various interests for management.

The API {{org.apache.came.spi.EventNotifier}} resolves this.

It can be obtained form CamelContext to allows us to fire events at any point in Camel.
There is also an EventFactory to create event objects.
davsclaus:1275521048:2010-06-03T07:24:08.179+0000:1275521048:2010-06-03T07:24:08.179+0000:Closing old resolved issues"
0,CAMEL-1968,Sub-task,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 07:31:07+00:00,2010-06-03 07:24:07+00:00,"A pluggable management to allow 3rd party to be fully managing Camel in other environments than just JMX.


The SPI API org.apache.camel.spi.ManagementStrategy ensures this.",davsclaus:1275521047:2010-06-03T07:24:07.909+0000:1275521047:2010-06-03T07:24:07.909+0000:Closing old resolved issues
0,CAMEL-1967,New Feature,Minor,2.0.0,2.2.0,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Claus Ibsen,0,0,2009-09-01 05:07:54+00:00,2010-11-03 05:12:44+00:00,"The recepientList will under the covers use the multicast processor to send to multiple destinations and use the last response as reply.


By adding support for aggregation strategy end users can merge their own response as they want",davsclaus:1266386818:2010-02-17T14:06:58.884+0000:1266386818:2010-02-17T14:06:58.884+0000:This was already implemented in Camel 2.2
0,CAMEL-1966,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0",None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-09-01 04:55:28+00:00,2010-06-03 07:24:06+00:00,"Here is the mail thread[1] which discusses about it.
[1] http://www.nabble.com/Occasional-CamelNamespaceHandler-exception-when-running-with-Spring-DM-1.2-td25195171.html","cmoulliard:1252021789:2009-09-04T07:49:49.016+0000:1252021789:2009-09-04T07:49:49.016+0000:Just to inform you that this error appears also when Camel 2.1-SNAPSHOT is used within Apache Karaf Felix. I have this error since around 3-4 days (when switching from Camel 2.0 to camel 2.1-SNAPSHOT. That was not the case before. I must stop/start my camel bundle to be able to work with it.

1) At the karaf launch, the following error is generated :

{code}
karaf@root:/> Exception in thread ""SpringOsgiExtenderThread-8"" java.lang.IllegalStateException: BeanFactory not initialized or already closed - call '
refresh' before accessing beans via the ApplicationContext
os      at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicatio
nContextExecutor.java:345)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.fail(DependencyWaiterApplication
ContextExecutor.java:401)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplica
tionContextExecutor.java:287)
        at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicat
ionContextExecutor.java:175)
        at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.
java:175)
        at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:718)
        at java.lang.Thread.run(Thread.java:595)
{code}

2) My camel context is not started
3) To start it, I must stop my camel bundle. During the stop, here is the error generated :

{code}
09:46:43,499 | ERROR | Timer-3          | DelegatingTimerTask              | duling.timer.DelegatingTimerTask   69 | Unexpected exception thrown from Runnable: org.springframework.osgi.extender.internal.util.concurrent.RunnableTimedExecution$MonitoredRunnable@15b4804
java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext
	at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:153)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicationContextExecutor.java:345)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.doClose(AbstractDelegatedExecutionApplicationContext.java:236)
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:794)
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$3.run(ContextLoaderListener.java:807)
	at org.springframework.osgi.extender.internal.util.concurrent.RunnableTimedExecution$MonitoredRunnable.run(RunnableTimedExecution.java:60)
	at org.springframework.scheduling.timer.DelegatingTimerTask.run(DelegatingTimerTask.java:66)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)
{code}

I see also sometimes this warning in the log

{code}
08:59:51,718 | WARN  | ExtenderThread-8 | XmlBeanDefinitionReader          | k.util.xml.SimpleSaxErrorHandler   47 | Ignored XML validation warning
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://camel.apache.org/schema/spring/camel-spring.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
...
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camel:camelContext'.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:231)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:167)
{code}
njiang:1252031696:2009-09-04T10:34:56.234+0000:1252031696:2009-09-04T10:34:56.234+0000:trunk
http://svn.apache.org/viewvc?rev=809874&view=rev
camel 1.x
http://svn.apache.org/viewvc?rev=809931&view=rev

njiang:1252031910:2009-09-04T10:38:30.152+0000:1252031910:2009-09-04T10:38:30.152+0000:Talked with Charles,
 The exceptions which he said are related to the bundle loading sequences.
 If his application bundle is loaded before the camel-core and camel-spring, the exceptions will be thrown.
  
 

roman.ivanov:1261637913:2009-12-24T14:58:33.002+0000:1261638445:2009-12-24T15:07:25.163+0000:Hi, currently I'm upgrading to Camel version 2.1.0 from 2.0.0. And this issue reproduces again. The bundle order is explicitly defined with startup properties, though application bundles are started later then camel. We're having ServiceMix 4 with Karaf 1.0.4.

Here are logs:
{code}
org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://camel.apache.org/schema/spring/camel-spring.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelContext'.
{code}


davsclaus:1261981841:2009-12-28T14:30:41.439+0000:1261981841:2009-12-28T14:30:41.439+0000:Roman, ServiceMix is undergoing many changes recently and I guess it should be better at OSGi stuff on startup.

So what version do you exactly use for SMX and Karaf?
And if possible try with a newer version.
njiang:1262024921:2009-12-29T02:28:41.605+0000:1262028075:2009-12-29T03:21:15.548+0000:Hi Roman

There are something changed in Camel 2.1.0, we merged the camel-osgi and camel-spring to avoid the some issue of
Please update the org.apache.felix.karaf.features.cfg
 by replacing the camel-osgi and camel-spring with camel-spring-osgi and try again.



roman.ivanov:1262068513:2009-12-29T14:35:13.329+0000:1262068666:2009-12-29T14:37:46.530+0000:Hi Claus, Willem

Upgrade for newer SMX version is good idea for sure, but it might be a separate issue.
Although, I tried to use camel-spring-osgi instead of 2 separate libs. It didn't made real effect.
But, I followed the idea of [this issue |http://issues.apache.org/activemq/browse/CAMEL-1730].
And made camel-spring bundle start up order earlier than camel-osgi. And it solved the issue.
njiang:1262110974:2009-12-30T02:22:54.840+0000:1262110974:2009-12-30T02:22:54.840+0000:Hi Roman,

Which version of Servicemix are you using ?
There is an camel feature (which includes camel-core, camel-spring and camel-osgi) in the org.apache.felix.karaf.features.cfg, you need to replace it with camel-core and camel-spring-osgi.
Please make sure there is no camel-spring, camel-spring-osgi, camel-osgi installed at the same time.


njiang:1262111073:2009-12-30T02:24:33.377+0000:1262111073:2009-12-30T02:24:33.377+0000:The reopened reason is not related to the JIRA.
davsclaus:1275521046:2010-06-03T07:24:06.856+0000:1275521046:2010-06-03T07:24:06.856+0000:Closing old resolved issues"
0,CAMEL-1965,Bug,Major,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Unassigned,Moulliard Charles,0,1,2009-08-31 15:05:48+00:00,2009-10-12 06:16:51+00:00,"Hi,


When onException is used within a transacted route, it does not work. With the following route, the onException process does not propagate information to the from endpoint (in my case : file component). So, when X3Sexception occurs, the bean component is called where record is created in an Audit table, error message is put in a reporting queue BUT the file could not be renamed and move to temp directory. In consequence, the file is reprocessed continuously !!!!!



Route
<camel:route errorHandlerRef=""txErrorHandlerReqNew"">
	<camel:from ref=""fileClientEndpoint"" />
	<camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
		
         <camel:onException>
	       	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
		<camel:bean ref=""serviceHelper"" method=""processException"" />
		<camel:to ref=""queueReportingEndpoint"" />
           </camel:onException>
	
	<camel:onException>
		<camel:exception>java.lang.Exception</camel:exception>
		<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
		<camel:rollback/>
    </camel:onException>





Log

16:51:12,896 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> from(file://d:/temp/data/oinp/?delay=15000&move=d%3A%2Ftemp%2Fdata%2Foinp%2Fbackup%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.bak&moveFailed=d%3A%2Ftemp%2Fdata%2Foinp%2Ferror%2F%2F%24%7Bdate%3Anow%3AyyyyMMdd%7D%2F%24%7Bfile%3Aname.noext%7D.error) --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID, ...

16:51:12,912 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,912 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> OnException, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,928 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> OnException -->, Pattern:InOnly, Headers:{CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892, CamelFileName=OINP_Example.csv, CamelFileParent=d:\temp\data\oinp, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1033 | ###### processException ######
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1046 | #### Exception received was null so create a dummy exception !
16:51:12,928 | INFO  | 9: FileComponent | ServiceHelper                    | ctis.x3s.core.util.ServiceHelper 1054 | >>>processException AUDIT:E9998:Error:ERR
16:51:12,975 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>>  --> queuingservice://x3s:reporting, Pattern:InOnly, Headers:{CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileLength=892, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelBeanMethodName=null, CamelFileNameOnly=OINP_Example.csv, CamelFileAbsolute=true, CamelBeanMultiParameterArray=false, CamelFileName=OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,
16:51:13,068 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> queuingservice://x3s:reporting --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,068 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> ref:PROPAGATION_REQUIRED_NEW --> OnException, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> OnException --> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileLength=892, CamelBeanMethodName=null, CamelFileName=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileNameOnly=OINP_Example.csv, CamelBeanMultiParameterArray=false, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileParent=d:\temp\data\oinp}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.apache.camel.component.file.GenericFile
, Body:ORD_REF_ID,...
16:51:13,084 | INFO  | 9: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-85 >>> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true --> Rollback, Pattern:InOnly, Headers:{CamelFileName=OINP_Example.csv, CamelBeanMethodName=null, CamelBeanMultiParameterArray=false, CamelFileParent=d:\temp\data\oinp, CamelFileNameOnly=OINP_Example.csv, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileAbsolute=true, CamelFileLength=892}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,...
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  202 | org.apache.camel.RollbackExchangeException: Intended rollback on the exchange: Exchange[GenericFileMessage with file: GenericFile[d:\temp\data\oinp\OINP_Example.csv]]
16:51:13,100 | WARN  | 9: FileComponent | GenericFileOnCompletion          | ent.file.GenericFileOnCompletion  142 | Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@29e26 for file: GenericFile[d:\temp\data\oinp\OINP_Example.csv]
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  248 | Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:96)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.rollback(GenericFileRenameProcessStrategy.java:61)
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyRollback(GenericFileOnCompletion.java:145)
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:95)
	at org.apache.camel.component.file.GenericFileOnCompletion.onFailure(GenericFileOnCompletion.java:58)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:126)





REMARK : 



Exception object is not received by the bean component



but everything works fine if the route is defined like this 



		<camel:route>
			<camel:from ref=""fileClientEndpoint"" />

		    <camel:onException>
	        	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
				<camel:bean ref=""serviceHelper"" method=""processException"" />
				<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
			
			<camel:onException>
				<camel:exception>java.lang.Exception</camel:exception>
				<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
		    </camel:onException>","davsclaus:1251705320:2009-08-31T15:55:20.632+0000:1251705320:2009-08-31T15:55:20.632+0000:Please format your reports so they are readable. When you post logs that are 2000 lines long its annoying and hard to read.

And report Camel version number
And post your endpoint uris so we can see them
And as well with your error handling configuration.
And post your full route.

All these are important details.


cmoulliard:1251760715:2009-09-01T07:18:35.078+0000:1251762284:2009-09-01T07:44:44.065+0000:Is there a better command than ""code"" to format info in the wiki ?

Camel Version used : 2.0 and now 2.1-SNAPSHOT

Endpoints definition :

{code}
queueReportingEndpoint = uriQueueReporting=queuingservice:x3s:reporting (remark : queuingservice --> corresponds to activemq service packaged as separate osgi bundle)
queueRequestEndpoint= uriQueueRequest=queuingservice:x3s:request
fileClientEndpoint = uriFileClient=file://d:/temp/data/oinp/?delay=15000&move=d:/temp/data/oinp/backup/${date:now:yyyyMMdd}/${file:name.noext}.bak&moveFailed=d:/temp/data/oinp/error//${date:now:yyyyMMdd}/${file:name.noext}.error

<!-- Defintion of the Camel - ActiveMq Spring config file -->
<beans xmlns=""http://www.springframework.org/schema/beans""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xmlns:osgi=""http://www.springframework.org/schema/osgi""
  xsi:schemaLocation=""http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/osgi
                      http://www.springframework.org/schema/osgi/spring-osgi.xsd
                      http://camel.apache.org/schema/spring
                      http://camel.apache.org/schema/spring/camel-spring.xsd"">
      
    <bean id=""active-mq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    	<property name=""transacted"" value=""true""/>
    	<property name=""connectionFactory"">
    		<osgi:reference interface=""javax.jms.ConnectionFactory""/>
    	</property>
        <property name=""transactionManager"">
			<osgi:reference interface=""org.springframework.transaction.PlatformTransactionManager""/>
		</property>
		<!-- <property name=""transferExchange"" value=""true""/> -->
    </bean>

    <osgi:service id=""osgiqueuingservice"" ref=""active-mq"" interface=""org.apache.camel.Component""/>
		       
</beans>

-----------------------------------
For Camel configuration

<!-- OSGI reference of the service used  -->
<!-- Queuing service -->
<osgi:reference id=""queuingservice"" interface=""org.apache.camel.Component"" />

<!-- TransactionErrorHandler -->
	<bean id=""txErrorHandlerReqNew"" class=""org.apache.camel.spring.spi.TransactionErrorHandlerBuilder"">
        <property name=""springTransactionPolicy"" ref=""PROPAGATION_REQUIRED_NEW""/>
</bean>

<!-- Transaction Policy -->
<bean id=""PROPAGATION_REQUIRED_NEW"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
        <property name=""transactionManager"">
			<osgi:reference>
				<osgi:interfaces>
					<value>org.springframework.orm.hibernate3.HibernateTransactionManager</value>
				</osgi:interfaces>
			</osgi:reference>
  		</property>
  		<property name=""propagationBehaviorName"" value=""PROPAGATION_REQUIRES_NEW""/>
</bean> 

<!-- Full route -->
	<camel:camelContext id=""InToOut"" trace=""true""	xmlns=""http://camel.apache.org/schema/osgi"">
		<camel:route errorHandlerRef=""txErrorHandlerReqNew"">
			<camel:from ref=""fileClientEndpoint"" />
			<camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
			
		    <camel:onException>
	        	<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
				<camel:bean ref=""serviceHelper"" method=""processException"" />
				<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
			
			<camel:onException>
				<camel:exception>java.lang.Exception</camel:exception>
				<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
				<camel:rollback/>
		    </camel:onException>

				<camel:setHeader headerName=""origin"">
					<camel:constant>file</camel:constant>
				</camel:setHeader>

				<!-- Set Message type header with the name of the parent folder -->
				<camel:bean ref=""serviceHelper"" method=""getParentFolderName"" />

				<camel:convertBodyTo type=""java.lang.String"" />
			
				<!-- Call the requestService to save the request -->
				<camel:bean ref=""serviceHelper"" method=""createRequest"" />
				
                                <!-- ERROR GENERATED FOR TESTING PURPOSE -->
				<camel:bean ref=""serviceHelper"" method=""generateX3SClientException"" />  
				<!-- <camel:bean ref=""serviceHelper"" method=""generateException"" /> -->	
				
				<camel:to ref=""queueRequestEndpoint"" />
		</camel:route>
{code}



cmoulliard:1251775618:2009-09-01T11:26:58.350+0000:1251775618:2009-09-01T11:26:58.350+0000:I have added code about a unit test that we could use to understand where is the issue. Unfortunately, it is very difficult to reproduce my local environment but nevertheless, what I observe running this unit test (which succeeds) is that the file is not moved from its original location to the error folder.
davsclaus:1252013664:2009-09-04T05:34:24.246+0000:1252013664:2009-09-04T05:34:24.246+0000:Are you using Windows?
davsclaus:1252013810:2009-09-04T05:36:50.296+0000:1252013810:2009-09-04T05:36:50.296+0000:Try with something else that a file to start with as Windows is a bit clunky with file IO.

And does it fail *every* time with transacted + file?

Try adding a <delay><constant>3000</constant></delay> before the rollback to give Windows a bit time before the rollback is performed.
davsclaus:1252013914:2009-09-04T05:38:34.368+0000:1252013914:2009-09-04T05:38:34.368+0000:The issue is likely Windows being bad at doing file IO operations.

{code}
16:51:13,100 | ERROR | 9: FileComponent | GenericFileOnCompletion          | rg.apache.camel.processor.Logger  248 | Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file: GenericFile[d:\temp\data\oinp\OINP_Example.csv] to: GenericFile[d:\temp\data\oinp\error\\20090831\OINP_Example.error]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.renameFile(GenericFileRenameProcessStrategy.java:96)
{code}

And SUN have a terrible Java IO API that just returns boolean false when a rename could not be performed!!! Talk about bad API design (yet again from SUN).

We may need to add a workaround in Windows to do some wait and retry when renaming files.
davsclaus:1252014572:2009-09-04T05:49:32.549+0000:1252014572:2009-09-04T05:49:32.549+0000:Try with this patch
cmoulliard:1252019252:2009-09-04T07:07:32.913+0000:1252019252:2009-09-04T07:07:32.913+0000:Yes. I'm using Windows
davsclaus:1252021811:2009-09-04T07:50:11.764+0000:1252021811:2009-09-04T07:50:11.764+0000:A working file patch that I have actually run and tested :)
davsclaus:1252023466:2009-09-04T08:17:46.603+0000:1252023466:2009-09-04T08:17:46.603+0000:I committed the file patch to trunk as it can help work around Windows issues in general with files.
cmoulliard:1252028744:2009-09-04T09:45:44.621+0000:1252028744:2009-09-04T09:45:44.621+0000:Thx for the patch Claus ;-)

The issue is no more there and the file has been moved correctly. And now the ExchangeException has been well received by the bean in this route section :

{code}
<camel:onException>
<camel:exception>com.xpectis.x3s.exception.X3SClientException</camel:exception>
<camel:bean ref=""serviceHelper"" method=""processException"" />
<camel:to ref=""queueReportingEndpoint"" />
            </camel:onException>
{code}
davsclaus:1252215774:2009-09-06T13:42:54.614+0000:1252215774:2009-09-06T13:42:54.614+0000:Charles is this issue fixed?

Eg the onException and transacted works for you now?

cmoulliard:1252277021:2009-09-07T06:43:41.626+0000:1252277021:2009-09-07T06:43:41.626+0000:Issue is solved with last fix."
0,CAMEL-1964,Bug,Minor,None,None,"
None
",Closed,Not A Problem,2.1.0,Claus Ibsen,Moulliard Charles,0,0,2009-08-31 12:45:55+00:00,2010-06-03 07:24:06+00:00,"Hi,


I have discovered that when I use the following route, the stacktrace error is not displayed in the log of the application :



Route

		<camel:route errorHandlerRef=""txErrorHandlerReqNew"">
			<camel:from ref=""fileClientEndpoint"" />
			<camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
			
			<camel:onException>
				<camel:exception>java.lang.Exception</camel:exception>
				<camel:to uri=""log:com.xpectis.x3s?level=INFO&amp;multiline=true&amp;showException=true&amp;showCaughtException=true&amp;showStackTrace=true"" />
				<camel:rollback/>
		    </camel:onException>
...





What we have in the log
14:23:47,584 | INFO  | 2: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2415-1251709696459-0-33 >>> OnException --> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true, Pattern:InOnly, Headers:{CamelFileAbsolute=true, CamelFileAbsolutePath=d:\temp\data\oinp\OINP_Example.csv, CamelFilePath=d:\temp\data\oinp\OINP_Example.csv, CamelFileName=OINP_Example.csv, CamelFileLength=892, CamelFileNameOnly=OINP_Example.csv, CamelFileLastModified=Mon Jul 27 16:33:12 CEST 2009, CamelFileParent=d:\temp\data\oinp, CamelFileRelativePath=d:\temp\data\oinp\OINP_Example.csv}, BodyType:org.apache.camel.component.file.GenericFile, Body:ORD_REF_ID,TNA_EMX_ID,CLI_REF_ID,ACC_REF_ID,CLI_SHT_NM,ORI_EMX_ID,AGT_ID,MUL_ORD_CD,DEA_CUR_CD,CAN_RGH_FL,ORD_DEA_SEQ_NB,TNA_PRD_TP,SEC_IDF_TP,SEC_ID,ACC_NM,INC_REI_CD,PRI_BAS_CD,GRP_IDC_CD,ORD_DRN_CD,ISA_TYP_CD,ORD_UNT_NB,ORD_CSH_AM,ORD_QTY_PT,RND_MTD_CD,FOX_RQM_FL,COM_CUR_CD,COM_PT,COM_TP,SPE_COM_PT,RNW_COM_FL,ORD_DEA_TOT_NB,RGS_NB,RGS_FIR_NM,RGS_SND_NM,RGS_THD_NM,RGS_FTH_NM,RGS_FIR_AD,RGS_SND_AD,RGS_THD_AD,RGS_FTH_AD,MIL_AD,MLS_CD,MIL_RQM_TX,RGS_FIR_BTH_DT,NIN_ID,UKR_FL,PYM_TP,CDA_HLD_NM,CDA_IDF_NB,CDA_STR_DT,CDA_EXP_DT,CDA_ISS_NB,STL_BNK_NM,STL_BNK_SRT_CD,STL_BNK_ACC_ID,STL_BNK_ACC_NM,STL_PYM_REF_ID,STL_CUR_CD,SKP_ACC_ID,SKP_SUB_ACC_ID,DIB_BNK_NM,DIB_BNK_SRT_CD,DIB_BNK_ACC_ID,DIB_BNK_ACC_NM,DIB_PYM_REF_ID,DIB_CUR_CD,SWT_CD,TUP_WDR_CD,MES_FRE_TX
TFA92426,PRVID,,10000,,INTID,20000,1,GBP,,1,Product001,4,GBPROD001UO1,,,,,1,,,1287,,,,,,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,




REMARK : If onException is defined at the level of the camelContext, then the stacktrace is well displayed","davsclaus:1251694819:2009-08-31T13:00:19.885+0000:1251694819:2009-08-31T13:00:19.885+0000:This does *not* look like a bug to me.

The log you have pasted is from the *Tracer* (e.g. TraceInterceptor)
But its your own logger that is to output it with stacktrace

Look for this logger in the log file:
log:com.xpectis.x3s?level=INF
davsclaus:1251694889:2009-08-31T13:01:29.555+0000:1251694889:2009-08-31T13:01:29.555+0000:And please do not set all at *major* level as something that is related to a log can only be minor / trivial.
davsclaus:1251694913:2009-08-31T13:01:53.331+0000:1251694913:2009-08-31T13:01:53.331+0000:Not a bug, end user issue.
davsclaus:1275521046:2010-06-03T07:24:06.200+0000:1275521046:2010-06-03T07:24:06.200+0000:Closing old resolved issues"
0,CAMEL-1963,Bug,Major,2.0-M3,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Dado Comm,1,1,2009-08-31 07:03:23+00:00,2010-06-03 07:24:05+00:00,"While running camel-example-spring-jms in 2.0M3, I've noticed that GracefulShutdownService can't stop Camel. It calls


    Main.getInstance().stop();


but this call blocks and never returns. With enabled debug logging for org.springframework.jms, console outputs


[aultMessageListenerContainer-1] efaultMessageListenerContainer DEBUG Waiting for shutdown of message listener invokers
[aultMessageListenerContainer-1] efaultMessageListenerContainer DEBUG Still waiting for shutdown of 1 message listener invokers


Related forum thread:
http://www.nabble.com/Garceful-shutdown-bug-in-2.0M3--td25113519.html


Dado","davsclaus:1252542458:2009-09-10T08:27:38.989+0000:1252542458:2009-09-10T08:27:38.989+0000:trunk: 813303.
davsclaus:1275521045:2010-06-03T07:24:05.547+0000:1275521045:2010-06-03T07:24:05.547+0000:Closing old resolved issues"
0,CAMEL-1962,Bug,Major,"1.6.1, 2.0.0",,"
None
",Closed,Won't Fix,None,Unassigned,Adam Brewster,0,3,2009-08-30 01:19:33+00:00,2018-06-15 19:02:21+00:00,"The LinkedBlockingQueue used by the SedaComponent supports a couple of different ways to insert an object into the queue.



Collection.add adds the element immediately if possible or throws an IllegalStateException if the queue is full
BlockingQueue.offer adds the element immediately if possible or returns false if the queue is full
BlockingQueue.put waits if necessary and adds the element when space is available



SedaProducer extends CollectionProducer which holds a reference to a collection, so it has to use the add method specified by the Collection interface.


I suggest that either of the BlockingQueue methods would be superior.","adambrewster:1251566862:2009-08-30T01:27:42.024+0000:1251566862:2009-08-30T01:27:42.024+0000:Here's my attempt at a fix.

I know that there are two variables called queue in the new class, but it seemed prettier than casting.
adambrewster:1251624434:2009-08-30T17:27:14.959+0000:1251624434:2009-08-30T17:27:14.959+0000:It looks like that won't work because SedaProducer overrides the process method to call add anyway
{code}
queue.add(copy);
// lets see if we can get the task done before the timeout
boolean done = latch.await(timeout, TimeUnit.MILLISECONDS);
if (!done) {
     exchange.setException(new ExchangeTimedOutException(exchange, timeout));
}
{code}

and

{code}
// no wait, eg its a InOnly then just add to queue and return
queue.add(copy);
{code}

----

The second block can be replaced easily with 

{code}
// no wait, eg its a InOnly then just add to queue and return
queue.put(copy);
{code}

but I'm not sure of the best way to handle this when the caller wants a response.  Maybe it's as simple as
{code}
if (!queue.offer(copy, timeout, TimeUnit.MILLISECONDS)) {
     exchange.setException(new QueueFullException(exchange));
} else if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {
     exchange.setException(new ExchangeTimedOutException(exchange, timeout));
}
{code}
This, however, allows the possibility of waiting twice as long as the timeout (if the the queue accepts the exchange just before the timeout expires latch.await will still wait the full timeout).

Another possibility is
{code}
if (!queue.offer(copy)) {
     exchange.setException(new QueueFullException(exchange));
} else if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {
     exchange.setException(new ExchangeTimedOutException(exchange, timeout));
}
{code}
But it will be confusing when the queue-full behavior depends on the ExchangePatern (InOut drops extra packets, InOnly blocks)
davsclaus:1251690924:2009-08-31T11:55:24.152+0000:1251690924:2009-08-31T11:55:24.152+0000:I think its best to offer an option on the seda endpoint to dictate which behavior you want
- current behavior with an exception
- waiting and blocking

And maybe this one to offer eg a 20 sec timeout
- waiting, blocking but with timeout
adambrewster:1251731427:2009-08-31T23:10:27.962+0000:1251731427:2009-08-31T23:10:27.962+0000:On a third look today, and after reviewing [http://www.eecs.harvard.edu/~mdw/papers/mdw-phdthesis.pdf], I think that it will take more than a few lines to bring this component into line with the SEDA ideas and to get it into a state where it's really useful to me.  In particular, I think three critical features are missing:

 - SEDA queues are one way.  A producer shouldn't wait for a response.  If one needs a response, then a direct:// endpoint may be more appropriate.  This would cause problems in the VM component, though.

 - SEDA components should have admission control over their queue.  While limiting the length of the queue is a start, it's not really enough.

 - SEDA stages don't necessarily have one output.  A stage can deposit work into any number of other queues.   Routing from seda:// seems peculiar.

I like the ideas that camel introduces but it's starting to look like integrating it into my current project is going to cause more issues that it solves, so I'm going to put it on the shelf for a bit.
davsclaus:1252839439:2009-09-13T18:57:19.064+0000:1252839439:2009-09-13T18:57:19.064+0000:Keeping current behavior. Adam is looking for something elsewhere.

ragnarotech:1529060541:2018-06-15T19:02:21.997+0000:1529060541:2018-06-15T19:02:21.997+0000:Created new feature request for ""Offer/Timeout"" suggestion from [~davsclaus] in CAMEL-12584

 "
0,CAMEL-1961,Bug,Major,2.1.0,2.1.0,"
None
",Closed,Won't Fix,2.1.0,Stanley J. Lewis,Claus Ibsen,0,0,2009-08-29 12:55:52+00:00,2010-06-03 07:24:04+00:00,"Stan the code from trunk fails in 2 unit tests in camel-xmpp.


Could you take a look?","slewis:1251522406:2009-08-29T13:06:46.139+0000:1251522406:2009-08-29T13:06:46.139+0000:It could be because I've been logged into the jabber.org accounts these tests use, I've logged out of them now if you want to give it another try.  I'll have to see if I can track down a way to unit test these against some mock implementation, otherwise if the tests require a local xmpp server setup they'll likely be disabled like the original tests for this component and probably never run.
davsclaus:1251690802:2009-08-31T11:53:22.618+0000:1251690802:2009-08-31T11:53:22.618+0000:I think the people at mina want to develop a XMPP java server.
davsclaus:1252837533:2009-09-13T18:25:33.357+0000:1252837533:2009-09-13T18:25:33.357+0000:Now works
davsclaus:1275521044:2010-06-03T07:24:04.142+0000:1275521044:2010-06-03T07:24:04.142+0000:Closing old resolved issues"
0,CAMEL-1960,Bug,Major,2.1.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-29 11:27:32+00:00,2010-06-03 07:24:03+00:00,"The ExchangeHelper.prepareAggregation method moves the message to IN to avoid confusing end users whether what they are looking for is on either IN or OUT.


Hover we some recent changes in MessageSupport to clear some headers it could cause problems as it was in fact the same message being copied from OUT to IN.
What it should do instead is to move it instead of using copy mechanism.","njiang:1251518753:2009-08-29T12:05:53.626+0000:1251518753:2009-08-29T12:05:53.626+0000:Maybe we just need to add a check in the MessageSupport.copyFrom(), to skip to copy work of the same message.
davsclaus:1251518914:2009-08-29T12:08:34.748+0000:1251518914:2009-08-29T12:08:34.748+0000:It was CAMEL-1955
davsclaus:1251519593:2009-08-29T12:19:53.491+0000:1251519593:2009-08-29T12:19:53.491+0000:@Willem excactly

This is what I am adding

        if (that == this) {
            // the same instance so do not need to copy
            return;
        }

davsclaus:1251519714:2009-08-29T12:21:54.308+0000:1251519714:2009-08-29T12:21:54.308+0000:Willem can you merge the fix in MessageSupport to Camel 1.6.2 as it should apply in that release as well?
davsclaus:1251519730:2009-08-29T12:22:10.348+0000:1251519730:2009-08-29T12:22:10.348+0000:trunk: 809122.
njiang:1251520856:2009-08-29T12:40:56.872+0000:1251520856:2009-08-29T12:40:56.872+0000:@Claus,
Yeah, I just merged the check code back to camel-1.x branch.
Will commit the patch after running the test.
davsclaus:1275521043:2010-06-03T07:24:03.512+0000:1275521043:2010-06-03T07:24:03.512+0000:Closing old resolved issues"
0,CAMEL-1959,Task,Trivial,2.0.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Martin Krasser,Claus Ibsen,0,0,2009-08-29 10:11:17+00:00,2011-04-24 10:01:20+00:00,"HAPI 0.6.0 has been released and can be retrieved from this m2 repo:


http://hl7api.sourceforge.net/m2/","davsclaus:1253400640:2009-09-20T06:50:40.480+0000:1253400640:2009-09-20T06:50:40.480+0000:Need to create a bundle out of this jar for working with Karaf
davsclaus:1266554517:2010-02-19T12:41:57.898+0000:1266554517:2010-02-19T12:41:57.898+0000:Martin you use HL7 in IPF could you once you got the time upgrade to use the latest HAPI release
mrt1nz:1266561316:2010-02-19T14:35:16.500+0000:1266561316:2010-02-19T14:35:16.500+0000:Will do that within the next days. I'll also update the documentation because there's no longer a single hapi jar but several (a base jar and one for each HL7v2 version). User's of the camel-hl7 component will need to add the version-dependent jars themselves.

For using HAPI 0.6 in OSGi I'll create a single bundle having all version jars on the bundle classpath (and upload it to the Camel maven repo). Deploying them separately in OSGi causes issues with split packages.

Although hapi-1.0-beta1 is already out I'd prefer an upgrade to 0.6 at the moment, for stability reasons.

davsclaus:1303610480:2011-04-24T10:01:20.538+0000:1303610480:2011-04-24T10:01:20.538+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1958,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Christian Schneider,0,0,2009-08-29 08:09:43+00:00,2010-03-02 21:38:52+00:00,"The test  SpringDataSetTest produces the following failure. Sometime the actual counts where different from 0. The problem is that this failure does not happen when running only this test. It only happens when the other tests in spring-jms also run. So I guess some other test does not clean up correctly or it is a timing issue.


dataset://foo?minRate=50 Received message count. Expected: <100> but was: <0>


Stracktrace


java.lang.AssertionError: dataset://foo?minRate=50 Received message count. Expected: <100> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:899)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:881)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:230)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:149)
	at org.apache.camel.component.dataset.SpringDataSetTest.testRun(SpringDataSetTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runManaged(AbstractJUnit38SpringContextTests.java:307)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.access$000(AbstractJUnit38SpringContextTests.java:94)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests$1.run(AbstractJUnit38SpringContextTests.java:193)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTest(AbstractJUnit38SpringContextTests.java:270)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTestTimed(AbstractJUnit38SpringContextTests.java:228)
	at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:191)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)","davsclaus:1254179652:2009-09-29T07:14:12.897+0000:1254179652:2009-09-29T07:14:12.897+0000:How does it run now with latest code from snapshot?
cschneider:1254186569:2009-09-29T09:09:29.539+0000:1254186569:2009-09-29T09:09:29.539+0000:The tests run successfully with the current head of subversion.

davsclaus:1254187719:2009-09-29T09:28:39.641+0000:1254187719:2009-09-29T09:28:39.641+0000:That is good as I did some recent changes to seda and dataset which I hoped will fix the Windows side as well. Had an issue on some slow AIX / HP boxes."
0,CAMEL-1957,Bug,Major,"2.0-M2, 2.0-M3, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Willem Jiang,0,0,2009-08-29 07:32:49+00:00,2010-06-03 07:24:03+00:00,"The construction of SourceCache is wrong , it will cause the NPE when you enable the stream cache.



  public SourceCache(String data) {
        new StringSource(data);
        // It should be changed to 
        // super(data);
    }","njiang:1251502880:2009-08-29T07:41:20.835+0000:1251502880:2009-08-29T07:41:20.835+0000:http://svn.apache.org/viewvc?rev=809089&view=rev
davsclaus:1275521043:2010-06-03T07:24:03.240+0000:1275521043:2010-06-03T07:24:03.240+0000:Closing old resolved issues"
0,CAMEL-1956,Improvement,Minor,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-28 12:23:12+00:00,2010-06-03 07:24:02+00:00,"Currently it's not possible to receive the response from commands like WHO as irclib invokes onReply when it gets a response from the IRC server, which the IrcConsumer doesn't implement.  This patch adds that and also turns on debug logging for the IRC component in the tests.","njiang:1251505659:2009-08-29T08:27:39.077+0000:1251505719:2009-08-29T08:28:39.682+0000:Applied patch with thanks to Stan.
 
http://svn.apache.org/viewvc?rev=809097&view=rev
davsclaus:1275521042:2010-06-03T07:24:02.675+0000:1275521042:2010-06-03T07:24:02.675+0000:Closing old resolved issues"
0,CAMEL-1955,Bug,Major,"1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-08-28 12:06:34+00:00,2010-11-27 06:42:57+00:00,"If the we want to clean up the attachment in the pipeline processor, we will hit this bug.



 from(""direct:start"")
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            exchange.getOut().copyFrom(exchange.getIn());
                            //Added the header and attachment
                            exchange.getOut().setHeader(""test"", ""testValue"");
                            exchange.getOut().addAttachment(""test1.xml"", new DataHandler(new FileDataSource(""pom.xml"")));
                        }
                    })
                    .process(new Processor() {
                        public void process(Exchange exchange) throws Exception {
                            exchange.getOut().copyFrom(exchange.getIn());
                            assertNotNull(""The test attachment should not be null"", exchange.getOut().getAttachment(""test1.xml""));
                            assertNotNull(""The test header should not be null"", exchange.getOut().getHeader(""test""));
                            exchange.getOut().removeAttachment(""test1.xml"");
                            exchange.getOut().removeHeader(""test"");
                        }
                    });","njiang:1251433471:2009-08-28T12:24:31.006+0000:1251433471:2009-08-28T12:24:31.006+0000:trunk
http://svn.apache.org/viewvc?rev=808857&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=808856&view=rev
davsclaus:1275521042:2010-06-03T07:24:02.391+0000:1275521042:2010-06-03T07:24:02.391+0000:Closing old resolved issues"
0,CAMEL-1954,New Feature,Major,None,None,"
None
",Closed,Fixed,Future,Unassigned,Moulliard Charles,0,1,2009-08-28 10:44:49+00:00,2010-11-19 17:18:54+00:00,"Since a couple of days I try to find an easy way to handle ""jobs"" in Apache Felix Karaf and Camel. In standard, Camel proposes a camel-timer and camel-quartz components but they can only be used inside a camel route. By the way, camel context or camel routes are not ""schedulable"" like it is possible with Spring batch. So it is not possible to start a route at 9:00 and stop it at 11:00 and to check if the route succeed or fails inside a OSGI server. Of course, if camel is packaged in java standalone application or j2EE server, alternative exist.


This is why I come with the following idea who could be very interesting for Apache Felix Karaf / Camel in term of enterprise added value.


Job Scheduler for starting and stopping bundles


With the help of a quartz configuration file, the kernel of Apache Felix Karaf can check which bundles have to be scheduled (like jobs) and started/stopped. The bundle to be started could be a camel route, .... When the bundle stops or if the thread is still running at the end of the job, this information must be returned to the job scheduler in order to decide what to do (wait and send an alert to administrator to decide what to do). Another interesting feature could be to return fail / succeed to the job scheduler to keep trace of what happen during job execution. This information could be also used to link jobs / bundles together as this is a feature that you have with tool like IBM Tivoli Manager where you can chain jobs.


Idea about implementation


Definition of the ""scheduler service""  :


<job id=""A"" scheduler=""ref to quartz cron definition"" errorHandlerRef=""reference to the error handler who will handle the exception"">
<start ref=""routeA""> // bean refering to a camel toute
<transacted> // can be used when we have transacted job (= routes)
<choose>
   <when>
     <simple>job succeed</simple>
     <stop ref=""routeA""/>
     <to queue:job:succeed> // can be a queue component where job report information will be send 
     <start ref=routeB/> // new job (= route to start)
  </when>
  <when>
     <simple>job fails</simple>
     <to queue:job:fail>
  </when>
  ...
</job>


Remarks :


My proposition depends on the following assertions :



CamelContexts must be exported/exposed as a blueprint/spring DM/... services,
Routes defines in camel context are visible,
When the job is started, it will wait to receive from camel route a return parameter : fail or succeed. Maybe this return parameter could be placed as a message in the  scheduler queue that the job context is listening !!
If the job does not receive fail or succeed, then it should be possible to stop it though console, mbeans, ...","yaytay:1269214021:2010-03-22T07:27:01.290+0000:1269214021:2010-03-22T07:27:01.290+0000:I have a need of something similar to this, though I was thinking of implementing it outside of camel and then have it call camel routes as necessary.
My requirements are for:
* A clustered quartz implementation.
* Jobs configured entirely from code (jobs will be added and removed at runtime, so spring and other configuration files are of limited use for me).
cmoulliard:1290158334:2010-11-19T17:18:54.479+0000:1290158334:2010-11-19T17:18:54.479+0000:I think that the new feature proposed in Camel 2.5 (http://camel.apache.org/routepolicy.html) allows to schedule routes in camel using a scheduledRoute with Quartz. Even if the cron scheduler is defined as parameter in the camel route, it allows to start/stop camel routes inside the container where it is deployed. This simplifies the architecture and avoid to scan the bundles to detect which one must be started and stopped. As a bundle can contain more than one camel route, this is a better idea that the route policy associated with the route take care about when the route must be started and stopped.

I propose to close my ticket"
0,CAMEL-1953,Bug,Minor,2.0.0,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Alan Feng,0,0,2009-08-28 06:04:30+00:00,2010-02-07 09:58:27+00:00,"During a package scan in the DefaultPackageScanClassResolver class, it gives warning:
WARN  [DefaultPackageScanClassResolver] Could not find class 'org/apache/camel/component/file/remote/SftpOperations$1.class' in any classloaders: [sun.misc.Launcher$AppClassLoader@567c567c]


However, the SftpOperations$1.class exists in the camel-ftp-2.0.0.jar file.


To recreate this problem, use the following test class and make sure only include commons-logging.jar, camel-core-2.0.0.jar, and camel-ftp-2.0.0.jar in the classpath.


import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;


public class CamelTest {


    public static void main(String[] args) throws Exception{
        CamelContext context = new DefaultCamelContext();
        context.start();


        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception 

{
                from(""direct:start"").to(""log:test?level=INFO"");
            }

        });
        context.createProducerTemplate().sendBody(""direct:start"", ""test"");
    }


}


This bug can be reproduced with both IBM and Sun JDK.","davsclaus:1251411366:2009-08-28T06:16:06.891+0000:1251411366:2009-08-28T06:16:06.891+0000:You need all the dependent classes camel-ftp requires

If you use maven you get this for free. Here is the list
{code}
[INFO] The following files have been resolved:
[INFO]    aopalliance:aopalliance:jar:1.0:test
[INFO]    com.sun.xml.bind:jaxb-impl:jar:2.1.10:compile
[INFO]    commons-logging:commons-logging:jar:1.1.1:test
[INFO]    commons-logging:commons-logging-api:jar:1.1:compile
[INFO]    commons-net:commons-net:jar:2.0:compile
[INFO]    javax.activation:activation:jar:1.1:compile
[INFO]    javax.xml.bind:jaxb-api:jar:2.1:compile
[INFO]    javax.xml.stream:stax-api:jar:1.0-2:compile
[INFO]    jsch:jsch:jar:0.1.40:compile
[INFO]    junit:junit:jar:4.4:test
[INFO]    log4j:log4j:jar:1.2.14:test
[INFO]    org.apache.camel:camel-core:jar:2.1-SNAPSHOT:compile
[INFO]    org.apache.camel:camel-spring:jar:2.1-SNAPSHOT:test
[INFO]    org.apache.camel:camel-test:jar:2.1-SNAPSHOT:test
[INFO]    org.apache.ftpserver:ftplet-api:jar:1.0.0:test
[INFO]    org.apache.ftpserver:ftpserver-core:jar:1.0.0:test
[INFO]    org.apache.mina:mina-core:jar:2.0.0-M4:test
[INFO]    org.slf4j:slf4j-api:jar:1.5.6:test
[INFO]    org.slf4j:slf4j-log4j12:jar:1.5.6:test
[INFO]    org.springframework:spring-aop:jar:2.5.6:test
[INFO]    org.springframework:spring-beans:jar:2.5.6:test
[INFO]    org.springframework:spring-context:jar:2.5.6:test
[INFO]    org.springframework:spring-core:jar:2.5.6:test
[INFO]    org.springframework:spring-tx:jar:2.5.6:test
{code}

E.g. you need jsch jar on classpath for the SFTP part
davsclaus:1251411396:2009-08-28T06:16:36.604+0000:1251411396:2009-08-28T06:16:36.604+0000:Classpath issue. End user do not have the all the required classes.
snowbug:1251462615:2009-08-28T20:30:15.130+0000:1251462615:2009-08-28T20:30:15.130+0000:Thanks. It is dependency issue. We are not using Maven here so it's very hard to ensure all dependencies are included, especially the error is not a ""ClassNotFoundException"".

Will it be possible to include a dependency list (by camel components) with each release, auto-generated from your Maven settings?
"
0,CAMEL-1952,Improvement,Trivial,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-28 05:14:28+00:00,2010-06-03 07:24:02+00:00,"It would be nice with a getIn(type) method so you can avoid ugly type cast and let Camel do type casting instead.



CxfMessage cxf = exchange.getIn(CxfMessage.class);




And the same for a getOut as well.","davsclaus:1251407768:2009-08-28T05:16:08.347+0000:1251407768:2009-08-28T05:16:08.347+0000:trunk: 808758.
davsclaus:1275521042:2010-06-03T07:24:02.104+0000:1275521042:2010-06-03T07:24:02.104+0000:Closing old resolved issues"
0,CAMEL-1951,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Ron Gavlin,0,0,2009-08-28 03:45:50+00:00,2010-06-03 07:24:01+00:00,No Desc,"davsclaus:1251851566:2009-09-02T08:32:46.700+0000:1251851566:2009-09-02T08:32:46.700+0000:trunk: 810412.

Added a lot of the JMS configuration to JmsEndpoint so you can adjust/manage them from JMX.
Then by restarting the jms consumers they will pickup the changes from JmsEndpoint.


davsclaus:1275521041:2010-06-03T07:24:01.509+0000:1275521041:2010-06-03T07:24:01.509+0000:Closing old resolved issues"
0,CAMEL-1950,Improvement,Trivial,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-27 13:34:34+00:00,2010-06-03 07:24:00+00:00,When connected to multiple IRC servers it's a bit difficult to figure out what server incoming log messages from the event adapter are from.  This patch adds the IRC server responsible for a given log message from the event adapter.,"njiang:1251508749:2009-08-29T09:19:09.573+0000:1251508749:2009-08-29T09:19:09.573+0000:Applied patch with thanks to Stan.
http://svn.apache.org/viewvc?rev=809100&view=rev
davsclaus:1275521040:2010-06-03T07:24:00.840+0000:1275521040:2010-06-03T07:24:00.840+0000:Closing old resolved issues"
0,CAMEL-1949,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Jonathan Anstey,Christian Schneider,0,0,2009-08-27 08:58:50+00:00,2010-03-02 21:39:09+00:00,"I do not understand the test enough to say why the exception happens. Apart from the failure I think it would be better if the test would not use port 80 as it may be already in use on many machines.


I have attached the stack trace and the log on debug level:


com.meterware.httpunit.HttpNotFoundException: Error on HTTP request: 404  http://localhost/mycontext/services2/hello
	at com.meterware.httpunit.WebClient.validateHeaders(WebClient.java:575)
	at com.meterware.httpunit.WebClient.updateClient(WebClient.java:464)
	at com.meterware.httpunit.WebWindow.updateWindow(WebWindow.java:139)
	at com.meterware.httpunit.WebWindow.getSubframeResponse(WebWindow.java:130)
	at com.meterware.httpunit.WebWindow.getResponse(WebWindow.java:121)
	at com.meterware.httpunit.WebClient.getResponse(WebClient.java:113)
	at org.apache.camel.component.servlet.MultiServletConsumerTest.getService(MultiServletConsumerTest.java:66)
	at org.apache.camel.component.servlet.MultiServletConsumerTest.testMultiServletsConsumers(MultiServletConsumerTest.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
	at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
	at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
	at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
	at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
	at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
	at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
	at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
	at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
	at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
	at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
	at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


Rhino classes (js.jar) not found - Javascript disabled
2009-08-27 10:56:51,195 [main           ] INFO  DefaultCamelContext            - JMX enabled. Using DefaultManagedLifecycleStrategy.
2009-08-27 10:57:00,471 [main           ] DEBUG MultiServletConsumerTest       - Using created route builder: Routes: []
2009-08-27 10:57:03,453 [main           ] DEBUG DefaultCamelContext            - Adding routes from builder: Routes: []
2009-08-27 10:57:04,837 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) is starting
2009-08-27 10:57:04,846 [main           ] DEBUG DefaultProducerServicePool     - Starting service pool: org.apache.camel.impl.DefaultProducerServicePool@f42160
2009-08-27 10:57:05,487 [main           ] DEBUG DefaultComponentResolver       - Found component: servlet via type: org.apache.camel.component.servlet.ServletComponent via: META-INF/services/org/apache/camel/component/servlet
2009-08-27 10:57:05,542 [main           ] DEBUG DefaultHttpParams              - Set parameter http.useragent = Jakarta Commons-HttpClient/3.1
2009-08-27 10:57:05,547 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.version = HTTP/1.1
2009-08-27 10:57:05,551 [main           ] DEBUG DefaultHttpParams              - Set parameter http.connection-manager.class = class org.apache.commons.httpclient.SimpleHttpConnectionManager
2009-08-27 10:57:05,552 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.cookie-policy = default
2009-08-27 10:57:05,553 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.element-charset = US-ASCII
2009-08-27 10:57:05,554 [main           ] DEBUG DefaultHttpParams              - Set parameter http.protocol.content-charset = ISO-8859-1
2009-08-27 10:57:05,561 [main           ] DEBUG DefaultHttpParams              - Set parameter http.method.retry-handler = org.apache.commons.httpclient.DefaultHttpMethodRetryHandler@1e2a069
2009-08-27 10:57:05,562 [main           ] DEBUG DefaultHttpParams              - Set parameter http.dateparser.patterns = [EEE, dd MMM yyyy HH:mm:ss zzz, EEEE, dd-MMM-yy HH:mm:ss zzz, EEE MMM d HH:mm:ss yyyy, EEE, dd-MMM-yyyy HH:mm:ss z, EEE, dd-MMM-yyyy HH-mm-ss z, EEE, dd MMM yy HH:mm:ss z, EEE dd-MMM-yyyy HH:mm:ss z, EEE dd MMM yyyy HH:mm:ss z, EEE dd-MMM-yyyy HH-mm-ss z, EEE dd-MMM-yy HH:mm:ss z, EEE dd MMM yy HH:mm:ss z, EEE,dd-MMM-yy HH:mm:ss z, EEE,dd-MMM-yyyy HH:mm:ss z, EEE, dd-MM-yyyy HH:mm:ss z]
2009-08-27 10:57:05,608 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///hello], path=[/hello], parameters=[{}]
2009-08-27 10:57:05,648 [main           ] DEBUG DefaultCamelContext            - servlet:///hello converted to endpoint: Endpoint[/hello] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,776 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///echo?servletName=CamelServlet1], path=[/echo], parameters=[

{servletName=CamelServlet1}

]
2009-08-27 10:57:05,799 [main           ] DEBUG DefaultCamelContext            - servlet:///echo?servletName=CamelServlet1 converted to endpoint: Endpoint[/echo?servletName=CamelServlet1] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,829 [main           ] DEBUG DefaultComponent               - Creating endpoint uri=[servlet:///echo?servletName=CamelServlet2], path=[/echo], parameters=[

{servletName=CamelServlet2}

]
2009-08-27 10:57:05,833 [main           ] DEBUG DefaultCamelContext            - servlet:///echo?servletName=CamelServlet2 converted to endpoint: Endpoint[/echo?servletName=CamelServlet2] by component: org.apache.camel.component.servlet.ServletComponent@83e5f1
2009-08-27 10:57:05,836 [main           ] DEBUG DefaultCamelContext            - Starting routes
2009-08-27 10:57:06,175 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/echo?servletName=CamelServlet2]
2009-08-27 10:57:06,423 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/echo?servletName=CamelServlet1]
2009-08-27 10:57:06,613 [main           ] DEBUG HttpConsumer                   - Starting consumer: Consumer[/hello]
2009-08-27 10:57:06,615 [main           ] INFO  CamelHttpTransportServlet      - Since no servlet name is specified, using the first element of camelServlet map [CamelServlet1]
2009-08-27 10:57:06,616 [main           ] DEBUG DefaultCamelContext            - Route 0: EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,618 [main           ] DEBUG DefaultCamelContext            - Route 1: EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,620 [main           ] DEBUG DefaultCamelContext            - Route 2: EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]
2009-08-27 10:57:06,621 [main           ] DEBUG DefaultCamelContext            - Started routes
2009-08-27 10:57:06,622 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) started
2009-08-27 10:57:13,064 [main           ] DEBUG MultiServletConsumerTest       - Routing Rules are: [EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]]
2009-08-27 10:57:14,863 [main           ] DEBUG MultiServletConsumerTest       - Routing Rules are: [EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet2] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/echo?servletName=CamelServlet1] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]], EventDrivenConsumerRoute[Endpoint[/hello] -> Instrumention:route[UnitOfWork(Channel[org.apache.camel.component.servlet.MultiServletConsumerTest$1$1@15c2843])]]]
2009-08-27 10:57:26,641 [main           ] DEBUG MultiServletConsumerTest       - tearDown test 
2009-08-27 10:57:26,642 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) is stopping
2009-08-27 10:57:26,642 [main           ] INFO  CamelHttpTransportServlet      - Since no servlet name is specified, using the first element of camelServlet map [CamelServlet1]
2009-08-27 10:57:26,643 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/hello]
2009-08-27 10:57:26,643 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/echo?servletName=CamelServlet1]
2009-08-27 10:57:26,644 [main           ] DEBUG HttpConsumer                   - Stopping consumer: Consumer[/echo?servletName=CamelServlet2]
2009-08-27 10:57:26,644 [main           ] DEBUG DefaultProducerServicePool     - Stopping service pool: org.apache.camel.impl.DefaultProducerServicePool@f42160
2009-08-27 10:57:26,645 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.1-SNAPSHOT (CamelContext:camel-1) stopped","davsclaus:1256272446:2009-10-23T12:34:06.702+0000:1256272446:2009-10-23T12:34:06.702+0000:Christian can you try latest trunk code again?


cschneider:1256355918:2009-10-24T11:45:18.955+0000:1256355918:2009-10-24T11:45:18.955+0000:The test succeeds. Thanks
janstey:1256356176:2009-10-24T11:49:36.228+0000:1256356176:2009-10-24T11:49:36.228+0000:Ah yeah fixed this yesterday. It was occurring for me on Linux with JDK 1.6 too.
janstey:1256356280:2009-10-24T11:51:20.408+0000:1256356280:2009-10-24T11:51:20.408+0000:BTW the fix rev is http://svn.apache.org/viewvc?rev=829164&view=rev"
0,CAMEL-1948,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-27 07:49:06+00:00,2010-06-03 07:24:00+00:00,"This hampers restart of services by example the overhauled JMX in CAMEL-1933.


When a service was restarted it had the following incorrect state:



started = true
starting = false
stopped = true
stopping = false



The stopped should have been changed to false as its started.","davsclaus:1251330618:2009-08-27T07:50:18.417+0000:1251330618:2009-08-27T07:50:18.417+0000:trunk: 808309
davsclaus:1275521040:2010-06-03T07:24:00.573+0000:1275521040:2010-06-03T07:24:00.573+0000:Closing old resolved issues"
0,CAMEL-1947,Task,Major,None,None,"
None
",Closed,Fixed,2.2.0,Hadrian Zbarcea,Willem Jiang,0,1,2009-08-27 01:08:12+00:00,2010-11-03 05:12:44+00:00,"http://camel.apache.org/schema/spring/ is missing the camel-spring-2.0.0.xsd.  
It is same with the other schemas.


Here is the mail thread which discusses about it.
http://www.nabble.com/2.0.0-specific-version-of-the-camel-spring.xsd--tp25151657p25151657.html","davsclaus:1252839969:2009-09-13T19:06:09.596+0000:1252839969:2009-09-13T19:06:09.596+0000:The XSD is  now online.

Hadrian have you fixed the copy script?
hadrian:1260173567:2009-12-07T16:12:47.487+0000:1260173567:2009-12-07T16:12:47.487+0000:In good part, but there are some wrinkles to take care of.

The big difference is that the files that need to be uploaded onto the Apache site are not on the local file system, but available in the [nexus repo|http://repository.apache.org].  As a consequence one needs to download them on a temp copy.  I could not get wget to do only download what I want in one shot, I had to explicitly specify the versions to look for, which is a bit nasty, yet fixable.  Plus I think there is a bug in one of the python scripts that puts the spring xsd under spring/integration as well.  Didn't get too look at that yet."
0,CAMEL-1946,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-27 00:18:04+00:00,2010-06-03 07:24:00+00:00,"Currently the camel-xmpp consumer will only accept one chat session (the one configured) and won't accept messages coming in from another producer.  The attached patch adds a test case for this and fixes the issue, I also implemented a PacketListener to add some debug logging that prints the incoming/outgoing XMPP packets.","njiang:1251311330:2009-08-27T02:28:50.549+0000:1251311330:2009-08-27T02:28:50.549+0000:Applied patch with thanks to Stan.
trunk 
http://svn.apache.org/viewvc?rev=808253&view=rev
davsclaus:1275521039:2010-06-03T07:23:59.982+0000:1275521039:2010-06-03T07:23:59.982+0000:Closing old resolved issues"
0,CAMEL-1945,Improvement,Minor,1.5.0,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Praveen Krishnan,0,0,2009-08-26 23:28:15+00:00,2010-02-07 09:58:27+00:00,"In our organization, we are trying to install multiple services on the same physical host, but each service is assigned to a dynamic network IP. 


In case our service that use camel, when we tried to install in this new environment, it does not bind the JMX to the network IP that we provide. Basically, as per the http://camel.apache.org/camel-jmx.html i could not find any attribute that takes in the hostname/ip addr on which the JMX should be started and binded to.","davsclaus:1251407867:2009-08-28T05:17:47.646+0000:1251407867:2009-08-28T05:17:47.646+0000:See this nabble thread about the solution to use some JMX system options for this.
http://www.nabble.com/Monitor-GC-on-Camel-Context-td25164533.html

And also a more background what the reported had in mind."
0,CAMEL-1944,Improvement,Minor,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-26 15:47:30+00:00,2010-06-03 07:23:59+00:00,Currently only the camel-irc producer installs an event listener on the IRC connection to log incoming messages from the IRC server.  This patch revamps the logging so that the component installs an event adapter to do logging before the connection is even established so it's easier to debug various issues that could be occurring with the connection to the IRC server.,"njiang:1251312713:2009-08-27T02:51:53.134+0000:1251312713:2009-08-27T02:51:53.134+0000:Patch Applied with thanks to Stan
http://svn.apache.org/viewvc?rev=808259&view=rev
davsclaus:1275521039:2010-06-03T07:23:59.235+0000:1275521039:2010-06-03T07:23:59.235+0000:Closing old resolved issues"
0,CAMEL-1943,Task,Major,2.0.0,None,"
None
",Closed,Fixed,"1.6.2, 2.1.0",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-08-26 14:36:14+00:00,2010-06-03 07:23:58+00:00,It looks the source distribution links from the download page are broken due to files not present on the mirrors.,"davsclaus:1252839922:2009-09-13T19:05:22.532+0000:1252839922:2009-09-13T19:05:22.532+0000:Hadrian any luck publishing the sources?
hadrian:1256025381:2009-10-20T15:56:21.871+0000:1256025381:2009-10-20T15:56:21.871+0000:The ianal maven plugin was complaining about missing legal files, which were present, but in a different place.
davsclaus:1275521038:2010-06-03T07:23:58.571+0000:1275521038:2010-06-03T07:23:58.571+0000:Closing old resolved issues"
0,CAMEL-1942,Improvement,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Jеns Riеmschneidеɾ,0,0,2009-08-26 13:10:57+00:00,2010-06-03 07:23:57+00:00,"In 1.x it was possible to get access to the IoSession via the MinaExchange.
In 2.0, MinaExchange is no more and therefore access to the IoSession is impossible.
Add a MinaMessage that has an accessor to the IoSession set by the MinaConsumer.
Mailing List: http://www.nabble.com/IoSession-data-in-Exchange-created-by-MinaConsumer-td25150794.html","njiang:1251310230:2009-08-27T02:10:30.928+0000:1251310247:2009-08-27T02:10:47.195+0000:Hi Jens,

I think you missed the MinaMessage.java in your patch.
If you use svn diff to create the patch , you need to use ""svn add ../MinaMessage.java"" first.
Can you submit the patch again ?

Thanks,

Willem
davsclaus:1251320530:2009-08-27T05:02:10.609+0000:1251320530:2009-08-27T05:02:10.609+0000:And in mina consumer it should set these 2 properties as headers, and not properties on the exchange.

They are protocol specific for mina and thus belongs on the MinaMessage.
davsclaus:1251320561:2009-08-27T05:02:41.868+0000:1251320561:2009-08-27T05:02:41.868+0000:And we need an unit test as well, so please create an unit test to test this new feature.
jriemsch:1251333792:2009-08-27T08:43:12.601+0000:1251333792:2009-08-27T08:43:12.601+0000:I'm sorry, the patch got mixed up with earlier changes I did. Claus suggested offering the IoSession via a MinaMessage and that was the actual way I implemented it. Plus, I forgot to add the new files. I upload the patch again.
I noticed that you put most (all?) header keys into Exchange. Should this be done with those from the MinaMessage as well?
davsclaus:1251367703:2009-08-27T18:08:23.223+0000:1251367703:2009-08-27T18:08:23.223+0000:Jens patch looks much better, however please use the method {{populateInitialHeaders}} to setup the headers instead of creating your own method for that.

Then its aligned what we do in Camel.
davsclaus:1251367745:2009-08-27T18:09:05.659+0000:1251367745:2009-08-27T18:09:05.659+0000:Jens we push commonly used or shared header keys in Exchange itself.

Camel mina does not fall into that category so its fine to have them on MinaMessage.
jriemsch:1251419004:2009-08-28T08:23:24.883+0000:1251419004:2009-08-28T08:23:24.883+0000:Changed it. Also, I do now put the SocketAddresses into the header instead of a string representation.
njiang:1251504757:2009-08-29T08:12:37.327+0000:1251504757:2009-08-29T08:12:37.327+0000:
After digging a pipeline issue this week, I realized that you can't get the MinaMessage if your processor is far from the MinaConsumer. You can change the route rule of the MinaMessageTest.java to reproduce the error.
{code}
   @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""mina:tcp://localhost:6200?textline=true&sync=false"")
                    .to(""log://mytest"")
                    .to(""mock:result"");
            }
        };
    }
{code}
So I changed the code to put the IOSession into the DefaultMessage header , then the pipeline will pass it to the next processor.


  
njiang:1251505324:2009-08-29T08:22:04.311+0000:1251505324:2009-08-29T08:22:04.311+0000:http://svn.apache.org/viewvc?rev=809095&view=rev
davsclaus:1251510165:2009-08-29T09:42:45.693+0000:1251510165:2009-08-29T09:42:45.693+0000:Yeah I might be overkill with only one session to be stored in a specialized MinaMessage.

You could use {{newInstance}} or what it was to ensure a MinaMessage is constructed so you can preserve the IoSession while being routed.
See the file component.

Anyway storing it as a header is great as well.

Remember to document this on the mina wiki page.

And storing the local and remote address in separate headers is also a good idea for CBR routing using headers. I wonder if it has a nice toString if its stored as InetAddress object. We want to be able to use regexp or equal etc. for nice CBR routing. If not we could consider adding a type converter in camel-mina for InetAddress or maybe even better in camel-core for reuse elsewhere.
njiang:1251520068:2009-08-29T12:27:48.075+0000:1251520068:2009-08-29T12:27:48.075+0000:Updated the document.

I also did a quick test on the message header. As we support  to use the converter when get the message header,  message.getHeader(MinaEndpoint.HEADER_LOCAL_ADDRESS, String.class)  will did the trick for CBR, and we may need to add a simple language for getting the message header with specified Type. 
davsclaus:1251520383:2009-08-29T12:33:03.052+0000:1251520383:2009-08-29T12:33:03.052+0000:Willem the binary operators should support type coercing so if you compare the LOCAL_ADDRESS with a java.lang.String then Camel will covert it to String as well.

And I do think the regexp will convert to String before matching as it uses String by nature. So it should work out of the box with the simple language.

But as always its best to ask the computer and add an unit test to ensure it works :)
jriemsch:1251525366:2009-08-29T13:56:06.249+0000:1251525366:2009-08-29T13:56:06.249+0000:The toString() methods of the SocketAddress implementations should return something useful. Usually something of the form ""host:port"" or ""ip-address:port"". So that should be fine.
I don't know about others, but for us the IoSession itself wasn't the important thing. We only need the addresses. You can do a lot of things with the IoSession that are probably not very useful. Also, the IoSession might have been closed at the time the header is retrieved, e.g. in asynchronous routing. So maybe it would be better to simply offer some of the data that the IoSession offers and not the IoSession itself. 
davsclaus:1251587135:2009-08-30T07:05:35.156+0000:1251587135:2009-08-30T07:05:35.156+0000:Yeah good point about the async.

Would be smarter to take a copy of the local/remote address, then you got that throughout the entire routing. And where it could make sense the do CBR based on which client called.

And we can keep the IoSession there for people needing it in some special cases. 
davsclaus:1275521037:2010-06-03T07:23:57.196+0000:1275521037:2010-06-03T07:23:57.196+0000:Closing old resolved issues"
0,CAMEL-1941,Bug,Trivial,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-26 12:33:05+00:00,2010-06-03 07:23:56+00:00,When using Tracer the FROM -> TO is not logged correctly.,"davsclaus:1258192191:2009-11-14T17:49:51.969+0000:1258192191:2009-11-14T17:49:51.969+0000:try is now not logged, but the route logged is correct anyway.

There is a ticket for later adding those abstract events to the trace log.
davsclaus:1275521036:2010-06-03T07:23:56.928+0000:1275521036:2010-06-03T07:23:56.928+0000:Closing old resolved issues"
0,CAMEL-1940,Bug,Major,2.0.0,None,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Moulliard Charles,0,1,2009-08-26 11:43:46+00:00,2010-06-03 07:23:55+00:00,"Hi,


In the following route example, the pollenrich processor is never called



            <camel:from uri=""quartz://x3sReporting/clientError?cron=0+0/5+9-18+?+*+MON-FRI""/>
            <camel:pollEnrich uri=""queuingservice:x3s:reporting"" strategyRef=""queueAggregator""/>

            <camel:transacted ref=""PROPAGATION_REQUIRED_NEW"" />
            <camel:choice>
                <camel:when>
                    <camel:simple>${body} != null</camel:simple>
                    <camel:doTry>
                        <camel:marshal ref=""csvAuditBindyDataFormat"" />




Definiton of the AggregationStrategy class used



public class QueueAggregator implements AggregationStrategy {
   
    private static final transient Log LOG = LogFactory.getLog(QueueAggregator.class);

    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        if (newExchange == null) {
            LOG.info(""Old object received (null exchange) : "" + oldExchange.getIn().getBody().toString());
            return oldExchange;
        }
        Object oldBody = oldExchange.getIn().getBody();
        LOG.info(""Old object received : "" + oldBody.toString());
        Object newBody = newExchange.getIn().getBody();
        LOG.info(""New object received : "" + newBody.toString());
        oldExchange.getIn().setBody(newBody);
        return oldExchange;
    }
}




Unfortunately, the aggregator is not called (no info trace in the LOG) and the body object send to the endpoint (marshall) is of type org.quartz.JobDetail



11:10:02,703 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> from(quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI) --> ref:PROPAGATION_REQUIRED_NEW, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,718 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> ref:PROPAGATION_REQUIRED_NEW --> Choice, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,734 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> Choice --> Try, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:02,734 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-10 >>> Try -->, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:03,171 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger  166 | ID-dell-charles-3372-1251127950838-0-10 >>> Try -->, Pattern:InOnly, Headers:{triggerGroup=x3sReporting, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, nextFireTime=Tue Aug 25 11:15:00 CEST 2009, previousFireTime=null, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, triggerName=clientError, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, scheduler=org.quartz.impl.StdScheduler@16975d, jobRunTime=-1, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, result=null, calendar=null, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, refireCount=0, fireTime=Tue Aug 25 11:10:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, Exception: java.lang.ClassCastException: org.quartz.JobDetail
11:10:03,171 | INFO  | heduler_Worker-1 | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-3372-1251127950838-0-11 >>>  --> log://com.xpectis.x3s?level=INFO&multiline=true&showCaughtException=true&showException=true&showStackTrace=true, Pattern:InOnly, Headers:{calendar=null, scheduledFireTime=Tue Aug 25 11:10:00 CEST 2009, trigger=Trigger 'x3sReporting.clientError':  triggerClass: 'org.quartz.CronTrigger isVolatile: false calendar: 'null' misfireInstruction: 0 nextFireTime: Tue Aug 25 11:15:00 CEST 2009, triggerGroup=x3sReporting, previousFireTime=null, jobRunTime=-1, jobDetail=JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false, result=null, triggerName=clientError, fireTime=Tue Aug 25 11:10:00 CEST 2009, mergedJobDataMap=org.quartz.JobDataMap@ccc462dc, jobInstance=org.apache.camel.component.quartz.CamelJob@1264f27, scheduler=org.quartz.impl.StdScheduler@16975d, refireCount=0, nextFireTime=Tue Aug 25 11:15:00 CEST 2009}, BodyType:org.quartz.JobDetail, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
11:10:03,187 | INFO  | heduler_Worker-1 | x3s                              | rg.apache.camel.processor.Logger   88 | Exchange[
, BodyType:org.quartz.JobDetail
, Body:JobDetail 'DEFAULT.quartz://x3sReporting/clientError?cron=0+0%2F5+9-18+%3F+*+MON-FRI':  jobClass: 'org.apache.camel.component.quartz.CamelJob isStateful: false isVolatile: false isDurable: false requestsRecovers: false
, CaughtExceptionType:java.lang.ClassCastException, CaughtExceptionMessage:org.quartz.JobDetail, StackTrace:java.lang.ClassCastException: org.quartz.JobDetail
    at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.marshal(BindyCsvDataFormat.java:60)","davsclaus:1251519781:2009-08-29T12:23:01.435+0000:1251519781:2009-08-29T12:23:01.435+0000:Which version are you using?

Can you try again with code from trunk as I have committed a fix for CAMEL-1960.
cmoulliard:1251673145:2009-08-31T06:59:05.195+0000:1251673145:2009-08-31T06:59:05.195+0000:Version : 2.0.

I will try with a new build of 2.1-SNAPSHOT
cmoulliard:1251681615:2009-08-31T09:20:15.267+0000:1251681615:2009-08-31T09:20:15.267+0000:I have retested with build - 31/08/2009 of camel-core / camel-spring but the problem is still there.
davsclaus:1251681995:2009-08-31T09:26:35.321+0000:1251681995:2009-08-31T09:26:35.321+0000:Is queuingservice:x3s:reporting a JMS endpoint?
cmoulliard:1251682388:2009-08-31T09:33:08.391+0000:1251682388:2009-08-31T09:33:08.391+0000:Yes. This is a queue running in activeMQ.
davsclaus:1251690208:2009-08-31T11:43:28.972+0000:1251690208:2009-08-31T11:43:28.972+0000:trunk: 809546.

Use <pollEnrich timeout=""1""  .... /> as a workaround in Camel 2.0 when consuming for a JMS queue.

The issue is spring jms template and using -1 does not work properly for signaling no wait.
cmoulliard:1251690748:2009-08-31T11:52:28.457+0000:1251690748:2009-08-31T11:52:28.457+0000:Many thanks. It works fine now. ;-)
davsclaus:1275521035:2010-06-03T07:23:55.874+0000:1275521035:2010-06-03T07:23:55.874+0000:Closing old resolved issues"
0,CAMEL-1939,New Feature,Minor,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,Claus Ibsen,0,0,2009-08-26 11:24:51+00:00,2010-06-03 07:23:55+00:00,"Add option to configure encoder and decoder max line length for TextLine codec.


See Mina 1.1 API:
http://mina.apache.org/report/1.1/apidocs/org/apache/mina/filter/codec/textline/TextLineCodecFactory.html


By default its 1024 bytes and you can hit it.
http://www.nabble.com/Mina-Buffer-size-td25136625.html","slewis:1251783587:2009-09-01T13:39:47.183+0000:1251783587:2009-09-01T13:39:47.183+0000:Here's a patch that adds the options for the encoder/decoder max line length.
davsclaus:1251931391:2009-09-03T06:43:11.513+0000:1251931391:2009-09-03T06:43:11.513+0000:Thanks Stan for the patch.

I did change it to use -1 as default value to avoid changing the defaults in Mina itself.

trunk: 810785.

I also updated the camel mina wiki page.
davsclaus:1275521035:2010-06-03T07:23:55.300+0000:1275521035:2010-06-03T07:23:55.300+0000:Closing old resolved issues"
0,CAMEL-1938,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Christian Schneider,0,0,2009-08-25 21:38:03+00:00,2010-03-02 21:39:25+00:00,"The test VelocityDynamicTemplateTest fails in method testVelocityLetter.


The second message the test sends contains /r/n instead of the expected /n as line break. The template letter2.vm that the test uses contains /r/n so I wonder if this test only fails on windows. I fixed the test for me by changing the expected text.","njiang:1251226094:2009-08-26T02:48:14.255+0000:1251226094:2009-08-26T02:48:14.255+0000:trunk
http://svn.apache.org/viewvc?rev=807866&view=rev"
0,CAMEL-1937,New Feature,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-25 14:41:06+00:00,2010-06-03 07:23:54+00:00,"We need multiple support for LifecycleStrategy so 3rd party plugins can listening and react to lifecycle events, and add bootstapping if needed etc.


Need to be able to just define spring bean as instanceof LifecycleStrategy and Camel will pick em up and add 'em to its list.","cschneider:1251242567:2009-08-26T07:22:47.406+0000:1251242567:2009-08-26T07:22:47.406+0000:Pehaps you can take a look at my patch for https://issues.apache.org/activemq/browse/CAMEL-1718. I have implemented being able to use multiple lifecyle strategies. The whole patch is of course too destructive after the 2.0.0 release but perhaps you can use parts of it.

davsclaus:1251255044:2009-08-26T10:50:44.269+0000:1251255044:2009-08-26T10:50:44.269+0000:trunk: 807958.

In Java:
Use addLifecycleStrategy on CamelContext.

In Spring XML
Just declare as many spring beans you like with the type {{LifecycleStrategy}} and Camel take it from there.
davsclaus:1251260484:2009-08-26T12:21:24.122+0000:1251260484:2009-08-26T12:21:24.122+0000:trunk: 807977.
cschneider:1251292309:2009-08-26T21:11:49.158+0000:1251292309:2009-08-26T21:11:49.158+0000:Hi Claus,

I am getting a test failure in camel-spring that could have to do with this change.
The lifecycleStrategie (org.apache.camel.management.DefaultManagedLifecycleStrategy) is initialized with a constructor argument of type org.apache.camel.management.ManagedManagementStrategy. But there is no such constructor.

Greetings

Christian
----

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel': Invocation of init method failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'lifeCycleStrategy' defined in class path resource [org/apache/camel/spring/management/jmxInstrumentationWithConnector.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.apache.camel.CamelContext]: Could not convert constructor argument value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]: Failed to convert value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]: no matching editors or conversion strategy found
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:473)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:308)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:947)
	at org.springframework.context.support.AbstractApplicationContext.registerListeners(AbstractApplicationContext.java:701)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:377)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.spring.managment.JmxInstrumentationWithConnectorTest.createApplicationContext(JmxInstrumentationWithConnectorTest.java:36)
	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:46)
	at junit.framework.TestCase.runBare(TestCase.java:132)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:232)
	at junit.framework.TestSuite.run(TestSuite.java:227)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'lifeCycleStrategy' defined in class path resource [org/apache/camel/spring/management/jmxInstrumentationWithConnector.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [org.apache.camel.CamelContext]: Could not convert constructor argument value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]: Failed to convert value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [org.apache.camel.management.ManagedManagementStrategy] to required type [org.apache.camel.CamelContext]: no matching editors or conversion strategy found
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:565)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:193)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:925)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:308)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:297)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:941)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookupByType(ApplicationContextRegistry.java:60)
	at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:254)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1369)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1335)
	... 31 more


cschneider:1251292335:2009-08-26T21:12:15.915+0000:1251292335:2009-08-26T21:12:15.915+0000:Found a failing test (see comment above)
davsclaus:1251319156:2009-08-27T04:39:16.749+0000:1251319156:2009-08-27T04:39:16.749+0000:@Christian

Would have been nice if you could write *which* unit test that failed
davsclaus:1251320376:2009-08-27T04:59:36.214+0000:1251320376:2009-08-27T04:59:36.214+0000:Got it and fixed it. Thanks Christian.
davsclaus:1275521034:2010-06-03T07:23:54.639+0000:1275521034:2010-06-03T07:23:54.639+0000:Closing old resolved issues"
0,CAMEL-1936,Bug,Major,"1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3, 2.0.0","1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Martin Krasser,0,0,2009-08-25 12:00:03+00:00,2010-06-03 07:23:54+00:00,See http://www.nabble.com/Loading-TypeConverters-in-OSGi-with-Camel-2.0-RC1-td25117256s22882.html#a25117256,"mrt1nz:1251172867:2009-08-25T12:01:07.361+0000:1251172867:2009-08-25T12:01:07.361+0000:Attached is a patch for camel-osgi that fixes the problems (allows for null returned from bundle.getBundleContext())
njiang:1251177513:2009-08-25T13:18:33.655+0000:1251177513:2009-08-25T13:18:33.655+0000:Applied the patch with thanks to Martin.
http://svn.apache.org/viewvc?rev=807604&view=rev
njiang:1253155039:2009-09-17T10:37:19.879+0000:1253155039:2009-09-17T10:37:19.879+0000:back port the patch into camel-1.x branch
http://svn.apache.org/viewvc?rev=816114&view=rev
davsclaus:1275521034:2010-06-03T07:23:54.021+0000:1275521034:2010-06-03T07:23:54.021+0000:Closing old resolved issues"
0,CAMEL-1935,New Feature,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-25 08:50:10+00:00,2010-06-03 07:23:53+00:00,No Desc,"davsclaus:1251161449:2009-08-25T08:50:49.007+0000:1251161449:2009-08-25T08:50:49.007+0000:Currently only endpoint uri is supported.

We should allow to refer to an existing endpoint that is a bit more common to do in XML routing only.
davsclaus:1256465696:2009-10-25T18:14:56.862+0000:1256465696:2009-10-25T18:14:56.862+0000:trunk: 829622.
davsclaus:1275521033:2010-06-03T07:23:53.834+0000:1275521033:2010-06-03T07:23:53.834+0000:Closing old resolved issues"
0,CAMEL-1934,Bug,Major,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Christian Schneider,0,0,2009-08-25 08:00:28+00:00,2010-03-02 21:39:43+00:00,"The temporary file is not deleted. I think the file is still open in some other stream. The problem is I have no idea how to find this place. Like in issue  	 CAMEL-1924 this only happens on windows as on unix you can delete a file even if there are open streams.


testStreamCacheToFileShouldBeDeletedInCaseOfException
	java.lang.AssertionError: There should be no files expected:<1> but was:<0>


org.apache.camel.component.jetty.HttpStreamCacheFileTest:71","njiang:1251225027:2009-08-26T02:30:27.020+0000:1251225027:2009-08-26T02:30:27.020+0000:We should close the FileStreamCache when the Exchange is done to make sure the temporary file close.
I will commit the patch after whole tests are passed.
njiang:1251247564:2009-08-26T08:46:04.617+0000:1251247564:2009-08-26T08:46:04.617+0000:trunk
http://svn.apache.org/viewvc?rev=807874&view=rev
cschneider:1251249570:2009-08-26T09:19:30.567+0000:1251249570:2009-08-26T09:19:30.567+0000:Hi Willem,

perhaps you can also fix two minor errors in the test HttpStreamCacheFileTest.
In the assertions the expected and actual values are in the wrong order.

This is how it should be:
assertEquals(""There should be no files"", 0, files.length);

Greetings

Christian
njiang:1251308945:2009-08-27T01:49:05.711+0000:1251308945:2009-08-27T01:49:05.711+0000:@ Christian

Done.
http://svn.apache.org/viewvc?rev=808247&view=rev"
0,CAMEL-1933,New Feature,Major,"1.6.1, 2.0.0",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-25 06:39:45+00:00,2010-06-03 07:23:53+00:00,This is a ticket to hold the work of overhaul of the JMX management to be done in Camel 2.1.,"davsclaus:1251153999:2009-08-25T06:46:39.003+0000:1251153999:2009-08-25T06:46:39.003+0000:trunk: 807498.

Renamed some classes.
davsclaus:1251173050:2009-08-25T12:04:10.233+0000:1251173050:2009-08-25T12:04:10.233+0000:URL: http://svn.apache.org/viewvc?rev=807573&view=rev
Log:
CAMEL-1933: First overhaul of JMX management in Camel. Introduced pluggable API. Much more details in mbeans and more mbeans registered. Also fixed routes not being performance counted correctly before.

davsclaus:1251272405:2009-08-26T15:40:05.924+0000:1251272405:2009-08-26T15:40:05.924+0000:A bit more with improved management of routes.

trunk: 808058.
davsclaus:1251334784:2009-08-27T08:59:44.093+0000:1251334784:2009-08-27T08:59:44.093+0000:A bit more with starting and stopping routes

trunk: 808328.
davsclaus:1251348290:2009-08-27T12:44:50.227+0000:1251348290:2009-08-27T12:44:50.227+0000:Better cleanup when restarting routes. And removed some not needed code.

trunk: 808400.
davsclaus:1251413661:2009-08-28T06:54:21.563+0000:1251413661:2009-08-28T06:54:21.563+0000:trunk: 808777.

 Added managed send to.Prepared for camel/route context runtime configuration to be managed.
davsclaus:1251680698:2009-08-31T09:04:58.245+0000:1251680698:2009-08-31T09:04:58.245+0000:trunk: 809509.

Managed tracer and scheduled polling consumer.
davsclaus:1252286569:2009-09-07T09:22:49.594+0000:1252286569:2009-09-07T09:22:49.594+0000:trunk: 812052.

Statistics can now be enabled/disabled from JMX
davsclaus:1275521033:2010-06-03T07:23:53.563+0000:1275521033:2010-06-03T07:23:53.563+0000:Closing old resolved issues"
0,CAMEL-1932,Task,Major,None,"1.6.2, 2.1.0","
None
",Closed,Fixed,"1.6.2, 2.1.0",Willem Jiang,Willem Jiang,0,0,2009-08-25 04:39:50+00:00,2010-06-03 07:23:53+00:00,No Desc,"njiang:1251147393:2009-08-25T04:56:33.710+0000:1251147393:2009-08-25T04:56:33.710+0000:trunk
 http://svn.apache.org/viewvc?rev=807476&view=rev
camel 1.x branch
 http://svn.apache.org/viewvc?rev=807478&view=rev
davsclaus:1275521033:2010-06-03T07:23:53.295+0000:1275521033:2010-06-03T07:23:53.295+0000:Closing old resolved issues"
0,CAMEL-1931,Improvement,Minor,2.0.0,2.1.0,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-24 19:43:41+00:00,2010-06-03 07:23:52+00:00,"I started using velocity in my project which seems to add some headers to the message exchange, the values of which are apparently not serialize-able.  As a result when a message in my route gets to the camel-xmpp component it fails in XmppBinding with an IllegalArgumentException as the binding tries to add the bad header.  This patch that by not inserting any headers into the xmpp message that don't have serialize-able values.","njiang:1251134219:2009-08-25T01:16:59.375+0000:1251134219:2009-08-25T01:16:59.375+0000:Applied patch with thanks to Stan.
http://svn.apache.org/viewvc?rev=807440&view=rev
davsclaus:1275521032:2010-06-03T07:23:52.759+0000:1275521032:2010-06-03T07:23:52.759+0000:Closing old resolved issues"
0,CAMEL-1930,Bug,Major,2.0-M3,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Fabrice Delaporte,0,0,2009-08-24 09:15:20+00:00,2010-06-03 07:23:52+00:00,"Hi,


I'm using Camel to do some JMS message routing. Messages are XML so xpath is a natural choice.


However when using a choice with an xpath expression, the XPathBuilder creates one XPathExpression object. According to the specification, these objects are not thread safe so synchronizing looks natural. But then, using multiple jms consumers is totally useless since no concurrent evaluations can be made.


XPathExpression objects would rather need to be stored in a ThreadLocal to avoid synchronization and contention.


Cheers,
Fabrice","davsclaus:1253752196:2009-09-24T08:29:56.983+0000:1253752196:2009-09-24T08:29:56.983+0000:Fabrice

If I attach a patch to this ticket do you want to try it for yourself on your environment by building the source from trunk and apply the patch?

I would like it to be tested more thoroughly before committing to trunk.
fdelaporte:1253753183:2009-09-24T08:46:23.312+0000:1253753183:2009-09-24T08:46:23.312+0000:Sure, go ahead !
davsclaus:1253756315:2009-09-24T09:38:35.041+0000:1253756315:2009-09-24T09:38:35.041+0000:That was a fast reply. So I am attaching my current patch. It does still need more extensive unit testing but it does seem at first glance to work with concurrent evaluation.

Yet again if you or other have more advanced xml documentations and xpath expressions to use for testing that would be appreciated. As the one in this test is simple and thus fast for the computer to evaluate at runtime.
davsclaus:1253763999:2009-09-24T11:46:39.155+0000:1253763999:2009-09-24T11:46:39.155+0000:Fabrice can you measure any performance degradation with and without the patch?
fdelaporte:1253774576:2009-09-24T14:42:56.333+0000:1253774576:2009-09-24T14:42:56.333+0000:Well, I guess this time you'll have to wait a little bit more for my next reply :-)

I'll try to test that in the coming days.

As a side note, my personal experience with contention was also with simple XML/XPath, but at high concurrency (100 consumers or so). I was doing some profiling and noticed threads that were blocked on object monitors, so I started investigating and ended up on these XPath synchronized blocks.

I'll bet back to you as soon as I can.
davsclaus:1253780377:2009-09-24T16:19:37.639+0000:1253780377:2009-09-24T16:19:37.639+0000:Ah okay I was only trying with at most 20 concurrent consumers.

So maybe I give it a go with 100+ to see if I can notice any difference.


fdelaporte:1255334508:2009-10-12T16:01:48.705+0000:1255334508:2009-10-12T16:01:48.705+0000:This capture shows ten consumers competing to evaluate an XPath expression
fdelaporte:1255334674:2009-10-12T16:04:34.508+0000:1255334674:2009-10-12T16:04:34.508+0000:This capture shows the seda consumers allowed to evaluate XPath expressions concurrently (with attached patch applied).
fdelaporte:1255334842:2009-10-12T16:07:22.936+0000:1255334842:2009-10-12T16:07:22.936+0000:Test case with bigger XML/XPath
fdelaporte:1255334867:2009-10-12T16:07:47.795+0000:1255334867:2009-10-12T16:07:47.795+0000:Hi Claus,

Sorry for the delay, been quite busy these days but finally got some time to run some tests against your patch.

Attached is my own version (heavily inspired by your own test case). By the way, why are you using an Executor to send your message to the SEDA queue ? Being an asynchronous endpoint I'm not sure I see the point in using a thread pool.

Anyway, I'm sending 100 000 xml messages (a little bit bigger than yours) to the seda queue, and then awaits for the mock endpoints to reach their expected message count to measure actual processing time. The XPath expression is also closer from what we may have here in production (kind of a big switch on the message type, there may be more efficient ways to do that (especially get rid of the // wild card to put a true /message/messagetype) but that's not the point here, the point is that we get something heavier on the CPU side. And, actually, setting a low value for consumer count does not prevent contention from happening (10 in my test case).

Results are pretty cool. On my computer it gives on average :
- around 150s without your patch
- around 110s with the patch

That's about 36% faster, so I think it's worth including the patch, although I have to admit that the performance difference is smaller than what I had expected (I guess that the more cores you have, the bigger the difference).

In addition to that I also attached two screenshots of my instance of JVisualVM to show contention without the patch (red threads) and with the patch (yeah, that green is beautiful).

Cheers,
Fabrice

davsclaus:1255390890:2009-10-13T07:41:30.084+0000:1255390890:2009-10-13T07:41:30.084+0000:Thanks Fabrice for testing it and providing screenshots (nice to see the before and after situation).

I have applied the patch to trunk: 824627.
davsclaus:1275521032:2010-06-03T07:23:52.122+0000:1275521032:2010-06-03T07:23:52.122+0000:Closing old resolved issues"
0,CAMEL-1929,Improvement,Major,"1.6.1, 2.0-M3",2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-24 06:25:02+00:00,2010-06-03 07:23:51+00:00,"When using



onException(Exception.class).handled(true).process(new MyErrorHandler());

// or use

doTry()
   ...
doCatch(Exception.class).handled(true).process(new MyErrorHandler());




We should make it consistent that you can obtain the caused exception.


So these properties on the Exchange should be the during the failure processor routing and what is returned to the client



Exchange.EXCEPTION_CAUGHT contains the caused exception","davsclaus:1251068053:2009-08-24T06:54:13.006+0000:1251068053:2009-08-24T06:54:13.006+0000:Currently in 2.0 or lower the problem is that doCatch clears the Exchange.EXCEPTION_CAUGHT where as onException does not.
So this ticket is to make the two of them consistent.
davsclaus:1251071221:2009-08-24T07:47:01.361+0000:1251071221:2009-08-24T07:47:01.361+0000:trunk: 807109.
davsclaus:1275521031:2010-06-03T07:23:51.856+0000:1275521031:2010-06-03T07:23:51.856+0000:Closing old resolved issues"
0,CAMEL-1898,Bug,Major,2.0.0,2.3.0,"
None
",Closed,Fixed,2.3.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-08-10 23:04:38+00:00,2011-04-24 10:00:40+00:00,"While building the camel-manual we get the log below:



[INFO] About to execute PrinceXml (see www.princexml.com)
[INFO]  prince /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.pdf
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36888: error: Unexpected end tag : div
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36890: error: Unexpected end tag : div
[INFO] [prince] prince: /w1/apache/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36903: error: Unexpected end tag : body
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: bad argument
[INFO] [prince] prince: warning: no glyphs for character U+006E, fallback to '?'
[INFO] [prince] Uncaught Mercury exception:
[INFO] [prince] Software Error: no fallback glyph for character U+006E
[ERROR] PDF Conversion failed due to return code: 1




The first errors are because of the html being improperly generated by the maven-html-to-pdf.  The ""prince: warning: bad argument"" interestingly seem to be generated by prince having to create its own font, which it cannot do, for cases where the requested font is not available, like for instance a <b> bold tag with a Courier font.


We know that the pdf was not generated in the 2.0-M3 release either.  The cause of this errors popping up appears to be the wiki changes at apache. The fact that the book-in-one-page is that big does not help either.  I quickly tried with the deployed version at http://camel.apache.org/book-in-one-page.html and I get a very similar result unfortunately, so there's no quick fix or workaround it seems.


I will try to resolve this asap.  Any help/ideas I could get are highly appreciated.","njiang:1249925985:2009-08-11T01:39:45.009+0000:1249926262:2009-08-11T01:44:22.395+0000:@ hadrian

I tried it on my mac box with latest beta version of prince 7.0b1, I didn't get the error of the bad argument.
And the pdf file was generated.

{code}
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36959: error: Unexpected end tag : div
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36961: error: Unexpected end tag : div
[INFO] [prince] prince: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.html:36974: error: Unexpected end tag : body
[INFO] [prince] prince: http://www.enterpriseintegrationpatterns.com/img/ChannelIcon.gif: warning: Unknown image MIME type: text/html
[INFO] Stored: /Users/jiangning/Work/camel/trunk/tooling/camel-manual/target/site/manual/camel-manual-2.0-SNAPSHOT.pdf
{code}

But the pdf have some formate issue of the code sections,  please see the screen captured file that I attached with this JIRA.

hadrian:1249935488:2009-08-11T04:18:08.786+0000:1249935488:2009-08-11T04:18:08.786+0000:Yes Willem, it works much better with prince 7.0b1.

One issue is the following div generated by Confluence near the end of every page:
{code}
</div>
    <br clear=""none"" class=""clear"">
</div>
{code}

Another (bigger) issue is the css for the code.  I'll try to get that fixed tomorrow.
davsclaus:1250026900:2009-08-12T05:41:40.231+0000:1250026900:2009-08-12T05:41:40.231+0000:Hadrian can we get a RC out without the manual. We should really get one out sooner the better to give people a chance to test it throughly.

The manual can always bee fixed later, generated and uploaded to the apache web site.
We should not hold a release because of this _minor_ issue.

And we do anticipate that we need another RC build before its final then the manual could have been fixed in the meantime.

davsclaus:1250193997:2009-08-14T04:06:37.337+0000:1250193997:2009-08-14T04:06:37.337+0000:@Hadrian

If that psg:sign issue is still around I suggest to revert back the changes in the pom xml files to as there where for the M3 release so we can get 2.0 out.

And its also very important that releases can be build on Max OS X as that is what all/most of all committers use.
And it should be possible for them /us/other than you to do releases as well.

We need a bit quicker pace on release cycles for Camel. For instance a 1.6.2 should also be out in the near future.


davsclaus:1250292626:2009-08-15T07:30:26.199+0000:1250292626:2009-08-15T07:30:26.199+0000:@Hadrian

Can you give an ETA when a RC can be released? You said that you thought the pgp:sign issue was resolved?
We cant keep postponing a release, a lot of other Apache releases depend on Camel 2.0 being GA.

hadrian:1250529589:2009-08-18T01:19:49.967+0000:1250529589:2009-08-18T01:19:49.967+0000:The pdf manual is now generated, but there is an issue with the CSS that depends more on the wiki than the code.
davsclaus:1271294045:2010-04-15T09:14:05.313+0000:1271294045:2010-04-15T09:14:05.313+0000:After the Apache attack the confluence wiki now appears to return the book in one page, but now there is an issue with the maven html2pdf plugin reporting about a missing div tag.
davsclaus:1271294073:2010-04-15T09:14:33.376+0000:1271294073:2010-04-15T09:14:33.376+0000:Hadrian can you try it out? What is the maven goal btw to generate the manual?
hadrian:1271310180:2010-04-15T13:43:00.447+0000:1271310180:2010-04-15T13:43:00.447+0000:I think there is a trickier issue related to some headers, I suspect ContentLength. It sometimes happens with wget as well. I'll need to find some time to look into this, hopefully this weekend.
njiang:1271364362:2010-04-16T04:46:02.637+0000:1271396587:2010-04-16T13:43:07.261+0000:When I used wget http://cwiki.apache.org/confluence/display/CAMEL/Book+In+One+Page to get the page, 
the request was redirect to https://cwiki.apache.org/confluence/display/CAMEL/Book+In+One+Page.
So I changed the html2pdf plugin's url, then the plugin can get the page rightly.

After checking the generated PDF, all the content in the 'code' section are gone :(.
I don't know if it relates to the CSS, maybe some  CSS expert can help us.
davsclaus:1271369507:2010-04-16T06:11:47.682+0000:1271369507:2010-04-16T06:11:47.682+0000:@Willem

Ah yeah of course. I bet I didn't notice the http redirect when using a browser :) Good catch.
davsclaus:1272513431:2010-04-29T11:57:11.105+0000:1272513431:2010-04-29T11:57:11.105+0000:I think the manual can be downloaded now. So we should be able to generate the manual.
davsclaus:1303610440:2011-04-24T10:00:40.299+0000:1303610440:2011-04-24T10:00:40.299+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1897,Task,Major,"1.6.1, 2.0-M3",None,"
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Claus Ibsen,0,0,2009-08-10 09:20:08+00:00,2010-02-07 09:56:23+00:00,"We need to add all the official release versions



1.6.0
1.6.1
2.0



to all files in Spring schemas in:



src/main/resource/schema



Components needed



camel-spring
camel-cxf
camel-spring-integration
and maybe some other I forgot","davsclaus:1249867566:2009-08-10T09:26:06.649+0000:1249867566:2009-08-10T09:26:06.649+0000:Ups I was a bit wrong, there are the files needed to be updated

./components/camel-cxf/src/main/resources/META-INF/spring.schemas
./components/camel-osgi/src/main/resources/META-INF/spring.schemas
./components/camel-spring/src/main/resources/META-INF/spring.schemas
./components/camel-spring-integration/src/main/resources/META-INF/spring.schemas

davsclaus:1249867647:2009-08-10T09:27:27.152+0000:1249867647:2009-08-10T09:27:27.152+0000:Willem I am assigning this to you as camel-cxf was a bit out dated, only 1.5.0 was the last entry.

And I was a bit confused whether cxfEndpoint is the right name etc. So can you take a look and make sure all spring schemas is updated.
They should add the next release number also as the build release process do not add it automatic.


hadrian:1249882233:2009-08-10T13:30:33.042+0000:1249882233:2009-08-10T13:30:33.042+0000:r802786
njiang:1249885747:2009-08-10T14:29:07.964+0000:1249885747:2009-08-10T14:29:07.964+0000:camel trunk
 http://svn.apache.org/viewvc?rev=802803&view=rev
camel 1.x branch
 http://svn.apache.org/viewvc?rev=802805&view=rev"
0,CAMEL-1896,Improvement,Trivial,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-09 12:20:32+00:00,2010-02-07 09:56:23+00:00,"When using DataSet endpoint the sender and receiver is not reporting totally similar.


The receiver is logging using a regular logger and using fixed name.
It should also use a throughput logger with its endpoint uri as name, then you can correlate sender/receiver.


Such as shown below



2009-08-09 14:19:03,259 [ataSetComponent] INFO  dataset://acme                 - Sent: 8000 messages so far. Last group took: 48 millis which is: 41,666.667 messages per second. average: 23,391.813
2009-08-09 14:19:03,259 [acme?size=20000] INFO  dataset://acme                 - Received: 8000 messages so far. Last group took: 48 millis which is: 41,666.667 messages per second. average: 23,460.411",davsclaus:1249792651:2009-08-09T12:37:31.635+0000:1249792651:2009-08-09T12:37:31.635+0000:trunk: 802532
0,CAMEL-1895,Improvement,Minor,2.0-M3,2.5.0,"
None
",Closed,Fixed,2.5.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-09 05:33:26+00:00,2011-04-24 09:58:05+00:00,"See nabble
http://www.nabble.com/Problem-with-FileConsumer-and-pollEnrich-td24795192.html","davsclaus:1249855426:2009-08-10T06:03:46.724+0000:1249855426:2009-08-10T06:03:46.724+0000:trunk: 802661
davsclaus:1249861654:2009-08-10T07:47:34.092+0000:1249861654:2009-08-10T07:47:34.092+0000:trunk: 802679

Added in Camel 2.0 a pre check that will deny polling if both starting and poll endpoint are file based as its not supported in Camel 2.0.
davsclaus:1282547779:2010-08-23T15:16:19.931+0000:1282547779:2010-08-23T15:16:19.931+0000:trunk: 988146.
davsclaus:1303610285:2011-04-24T09:58:05.591+0000:1303610285:2011-04-24T09:58:05.591+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1894,Task,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-08-08 18:08:51+00:00,2010-02-07 09:56:22+00:00,... to allow example being run during unit testing.,"hadrian:1249726189:2009-08-08T18:09:49.433+0000:1249727136:2009-08-08T18:25:36.031+0000:r802428
r802429 (camel-1.x)"
0,CAMEL-1893,Bug,Minor,2.0-M3,2.3.0,"
None
",Closed,Cannot Reproduce,2.3.0,William Tam,Claus Ibsen,0,0,2009-08-08 10:49:09+00:00,2011-04-24 10:00:57+00:00,"During CAMEL-1886 I discovered that the camel-cxf component and maybe others as well potentially sets the reponse code twice.


As headers are populate from the HTTP request it may already have a Exchange.HTTP_RESPONSE_CODE key key already however in different case, such as lower case only etc.
And then in the code later the response code is added using the Exchange.HTTP_RESPONSE_CODE key that have a different case.


But CAMEL-1886 can resolve this as we would like to add case insensitive headers in Camel.


However the code in camel-cxf should be reviewed to ensure that the response code is set correctly using Exchange.HTTP_RESPONSE_CODE to avoid double values.
And most importantly the response code is the correct value.","davsclaus:1249699780:2009-08-08T10:49:40.778+0000:1249699780:2009-08-08T10:49:40.778+0000:See a bit here:
http://www.nabble.com/-DISCUSS----Camel-2.0---Case-insensitive-headers-on-Camel-Message-td24877029s22882.html
davsclaus:1256645771:2009-10-27T20:16:11.722+0000:1256645771:2009-10-27T20:16:11.722+0000:William when you got some time please check the CXF source code for setting the HTTP response code as it appears it can set it twice (case problem)
wtam:1273158607:2010-05-06T23:10:07.885+0000:1273158607:2010-05-06T23:10:07.885+0000:I checked all three components (cxf, cxfbean, cxfrs) but I did not see Exchange.HTTP_RESPONSE_CODE getting set twice (with different cases).  It might have been fixed already.
davsclaus:1303610457:2011-04-24T10:00:57.102+0000:1303610457:2011-04-24T10:00:57.102+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1892,Test,Major,None,None,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Willem Jiang,0,0,2009-08-08 04:39:29+00:00,2010-02-07 09:56:22+00:00,No Desc,njiang:1249748784:2009-08-09T00:26:24.844+0000:1249748784:2009-08-09T00:26:24.844+0000:http://svn.apache.org/viewvc?rev=802317&view=rev
0,CAMEL-1891,Test,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-08-08 04:34:33+00:00,2010-02-07 09:56:22+00:00,No Desc,"njiang:1249758887:2009-08-09T03:14:47.485+0000:1249758887:2009-08-09T03:14:47.485+0000:trunk
 http://svn.apache.org/viewvc?rev=802478&view=rev
camel 1.x branch
 http://svn.apache.org/viewvc?rev=802479&view=rev"
0,CAMEL-1890,Test,Major,None,"1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-08-08 04:31:53+00:00,2010-02-07 09:56:22+00:00,No Desc,"njiang:1249748682:2009-08-09T00:24:42.272+0000:1249748682:2009-08-09T00:24:42.272+0000:trunk
 http://svn.apache.org/viewvc?rev=802307&view=rev
camel 1.x branch
 http://svn.apache.org/viewvc?rev=802309&view=rev"
0,CAMEL-1889,Test,Major,None,"1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-08-07 11:54:15+00:00,2010-02-07 09:56:22+00:00,No Desc,"njiang:1249881557:2009-08-10T13:19:17.258+0000:1249881557:2009-08-10T13:19:17.258+0000:trunk
http://svn.apache.org/viewvc?rev=801960&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=801965&view=rev"
0,CAMEL-1888,Improvement,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Andreas Kuhtz,0,0,2009-08-07 09:26:50+00:00,2010-02-07 09:56:22+00:00,"The CamelInvocationHandler.invoke() method should throw the RuntimeException if the fault is a RuntimeException instead of  throwing an InvocationTargetException with the RuntimeException included.


This would allow to use the @Produce to inject a direct endpoint on a pojo (that acts as a service interface) and the calling side would receive the RuntimeException instead of the UndeclaredThrowableException. With this behaviour the error handling on the calling side would be the same as if no camel route is between the caller and the called pojo.


The attached testcase is based on the original testcase that was commited here: http://svn.apache.org/viewvc?view=rev&revision=801511


See also http://www.nabble.com/Camel-Spring-Remoting-throwing-RuntimeException-question-td24825646.html for more info.","davsclaus:1249617059:2009-08-07T11:50:59.337+0000:1249617059:2009-08-07T11:50:59.337+0000:Thanks for the patch.

What is needed is that its a *new* unit tests so we still have the old unit test also.

akuhtz:1249618108:2009-08-07T12:08:28.543+0000:1249618108:2009-08-07T12:08:28.543+0000:New camel-spring patch with *new* test case
njiang:1249626018:2009-08-07T14:20:18.766+0000:1249626018:2009-08-07T14:20:18.766+0000:Applied patch with thanks to Andreas
http://svn.apache.org/viewvc?rev=801993&view=rev"
0,CAMEL-1887,New Feature,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-07 08:55:23+00:00,2010-02-07 09:56:22+00:00,"See nabble
http://www.nabble.com/file-processing%2C-error-handling-td24861063.html",davsclaus:1249610840:2009-08-07T10:07:20.179+0000:1249610840:2009-08-07T10:07:20.179+0000:trunk: 801928.
0,CAMEL-1886,Improvement,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,2,2009-08-07 08:03:53+00:00,2010-02-07 09:56:22+00:00,"Today the case matter so: getHeader(""Foo"") and getHeader(""foo"") is not the same.


And for some protocols the header case do not matter such as



http
mail
etc.



And who would in real life want to send 2 headers that are different only depending on the case



Foo=me
foo=you","davsclaus:1249603521:2009-08-07T08:05:21.093+0000:1249603521:2009-08-07T08:05:21.093+0000:[09:55]  <davsclaus> jstrachan i wonder if we should add a case insensitve header lookup
[09:56]  <davsclaus> the mail component is kinda relying on people can spell the headers as they like
[09:56]  <davsclaus> Reply-TO
[09:56]  <davsclaus> reply-to
[09:56]  <davsclaus> Reply-To
[09:56]  <davsclaus> etc.
[09:56]  <davsclaus> different providers might have different case
[09:56]  <davsclaus> and we got that behavior now for camel mail
[09:56]  <davsclaus> wonder if that should be extended to a core feature
[09:56]  <davsclaus> eg
[09:56]  <davsclaus> content-type
[09:56]  <davsclaus> Content-type
[09:57]  <davsclaus> Content-Type
[09:57]  <jstrachan> yeah - http is the same
[09:57]  <davsclaus> can be spelt different
[09:57]  <davsclaus> I doubt anyone want to send 2 headers with dfferent case
[09:57]  <davsclaus> Foo=me
[09:57]  <davsclaus> foo=you
[09:57]  <jstrachan> yeah
[09:57]  <davsclaus> cool as the tuning kinda changes a bit as its a bit more lazy on headers
[09:58]  <davsclaus> so if you lookup directly on the source object (MailMessage etc.) then the case can change when its later extracted to the camel message headers
[09:58]  <davsclaus> so its confusing
[09:58]  <jstrachan> yeah
[09:58]  <davsclaus> okay i think we should add that to the camel-core so whenever you do a getHeader(name) it can lookup regardless of case
[09:59]  <davsclaus> how can we do that fast, eg use some Entry object as Key instead of string? so we can do a equals/hashCode contract?
[09:59]  <davsclaus> where we can control the equals to be in case sensitve
[09:59]  <davsclaus> as you may want to retrieve the headers out in the original case
[10:00]  <jstrachan> I guess we could always use a custom Map which just converts all keys to lower case before storing/looking up?
[10:00]  <davsclaus> so we cannot just do .toLowerCase when adding a header/headers
[10:00]  <davsclaus> but when you get the keys back they will be lower now? do we want that
[10:00]  <davsclaus> We also got some speical camel headers: CamelFileName
[10:01]  <davsclaus> easier to read when its Camel cased :)
[10:01]  <jstrachan> I guess we could have 2 maps; the map which preserves case; and a lower-case-index used to lookup headers in a case insensitive way? bit icky mind you
[10:01]  <jstrachan> I guess the latter could kick in if folks do a get() which doesn't find anything
[10:01]  <jstrachan> so to avoid creating 2 maps, we only use the case-insensiive index when folks do get(String) and don't find anything
[10:01]  <davsclaus> ah yeah try the regular map first and if null then the 2nd as lowered cased
[10:02]  <jstrachan> Object getHeader(String name) { Object answer = map.get(name); if (answer == null) { answer = getLowerCaseMap().get(name.toLowerCase())
[10:02]  <davsclaus> so we create the 2nd map lazy?
[10:02]  <jstrachan> yeah
[10:02]  <davsclaus> ah clever
[10:02]  <davsclaus> let me grab coffee and try it on the pesky mail
[10:02]  <jstrachan> so its zero cost when folks never do lookups; when we just copy headers from message to message we don't bother with the lower case map
[10:02]  <jstrachan> :)
[10:03]  <davsclaus> and doing a map empty check as well to avoid creating the 2nd if empty
[10:03]  <jstrachan> yeah
[10:03]  <davsclaus> btw about 50% of the componetns now tests with tuning

davsclaus:1249609241:2009-08-07T09:40:41.348+0000:1249609241:2009-08-07T09:40:41.348+0000:See the commit on tuning-experiment branch that we need to backport to trunk
svn tuning: 801918.
davsclaus:1249699799:2009-08-08T10:49:59.657+0000:1249699799:2009-08-08T10:49:59.657+0000:Started discussion on dev forum
http://www.nabble.com/-DISCUSS----Camel-2.0---Case-insensitive-headers-on-Camel-Message-td24877029s22882.html
davsclaus:1249709182:2009-08-08T13:26:22.448+0000:1249709182:2009-08-08T13:26:22.448+0000:I had another implementation that was compacter and in a single class.

Attached as AnotherCaseInsensitiveMap.java
However its issue is to retain the case of the keys we need to override entrySet and use the original keys.
That works, however then scripting engines such as Freemarker have an issue doing lookup. But I just got that resolved using a 2nd lookup using a pseudo lookup.
davsclaus:1249710003:2009-08-08T13:40:03.110+0000:1249710003:2009-08-08T13:40:03.110+0000:A much better implementation that only requires one file and do *not* store holder objects such as a KeyValuePair.

And it works out of the box with scripting engines such as Velocity and Freemarker as well.
hadrian:1249721798:2009-08-08T16:56:38.363+0000:1249725005:2009-08-08T17:50:05.303+0000:Claus, what about a Map<lowercase-header, <header, Object>> ?

The key would always be the lowercase header for searches and what not, but on the wire and where it matters the original header value would be used.

I agree that having case sensitive headers doesn't make sense (i.e. having 'Foo' and 'foo' as different headers).
davsclaus:1249766860:2009-08-09T05:27:40.096+0000:1249766860:2009-08-09T05:27:40.096+0000:@Hadrian

I tried that as well. Its in the first patch but it messes up how scripting engines and other frameworks accesses the Map. To fix this we need yo copy the map to a regular Map instance for them to work with. And then we need to merge back any changes.

That is doable but the latest patch is just a single class that works in all situations - and something I wanted to try out afterwards to see if that was possible.
davsclaus:1249769436:2009-08-09T06:10:36.949+0000:1249769436:2009-08-09T06:10:36.949+0000:As this change isn't a blocker for 2.0 I think we could take our time and maybe introduce it post 2.0 release?

As Hadrian also points out sending Foo and foo as two headers is not what end users want.
davsclaus:1249780494:2009-08-09T09:14:54.419+0000:1249780494:2009-08-09T09:14:54.419+0000:Hadrian I have now a solution using the KeyValuePair object as holder.

It works as well with the scripting engines when I go the extra mile and _washes the KeyValuePair object away_ when they get hold on the headers.

The other solution that does *not* use KeyValuePair do not need to do this and thus is more elegant. However it requires to keep booking of the lower case keys -> original key in a 2nd internal map.

So in result we got 2 possible solutions
a) Use KeyValuePair holder objects (that holds original key and value)
b) Use internal 2nd map to keep booking of lower case key -> original key

I will attach new files with a and b code
davsclaus:1249780619:2009-08-09T09:16:59.701+0000:1249780619:2009-08-09T09:16:59.701+0000:*example a*
- AnotherCaseInsensitiveMap
- KeyValuePair
davsclaus:1249780647:2009-08-09T09:17:27.418+0000:1249780647:2009-08-09T09:17:27.418+0000:*example b*
- CaseInsensitiveMap
davsclaus:1249792715:2009-08-09T12:38:35.888+0000:1249792715:2009-08-09T12:38:35.888+0000:example b works best as it can complete a test run in all Camel code with no problems.

example a currently have issues with the camel-jms component.
davsclaus:1249862353:2009-08-10T07:59:13.499+0000:1249862353:2009-08-10T07:59:13.499+0000:I am going for example b as the other cases to much trouble elsewhere.
davsclaus:1249866633:2009-08-10T09:10:33.838+0000:1249866633:2009-08-10T09:10:33.838+0000:trunk: 802700.
cschneider:1265209677:2010-02-03T23:07:57.613+0000:1265209845:2010-02-03T23:10:45.800+0000:We have the case where we want to send out case sensitive headers. CXF expects the soap action to be written SOAPAction, Tibco Business Works expects it like SoapAction (at least when using SOAP/JMS). 

So I vote for reverting this change and bring back the normal map.  Perhaps the case insensitive lookup can be implemented in a way that does not affect people who need case sensitive headers.
iamryadh:1265241588:2010-02-04T07:59:48.501+0000:1265241588:2010-02-04T07:59:48.501+0000:I agree with Christian on this one, we are also using Business Works, and case-sensitive headers are expected, I was actually going to comment on this issue a long time ago."
0,CAMEL-1885,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Jеns Riеmschneidеɾ,0,0,2009-08-07 07:59:40+00:00,2010-02-07 09:56:22+00:00,"According to the documentation Stream Caching should be disabled by default in Camel 2.0. The default is overriden when using CamelContextFactoryBean because of this line:


    private Boolean streamCache = Boolean.TRUE;


Unit test showing the problem:


public class DefaultStreamCachingTest {
     @Test
     public void test() throws Exception {
         ApplicationContext appContext = new ClassPathXmlApplicationContext(new String[] 

{""context.xml""}

);
         DefaultCamelContext camelContext = (DefaultCamelContext) appContext.getBean(""camelContext"");
         assertFalse(camelContext.isStreamCacheEnabled());
     }
}


context.xml:


<beans xmlns=""http://www.springframework.org/schema/beans"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring"" xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
    <camel:camelContext id=""camelContext"" />
</beans>


Currently one must use:


    <camel:camelContext id=""camelContext"" streamCache=""false"" />","njiang:1249621224:2009-08-07T13:00:24.771+0000:1249621224:2009-08-07T13:00:24.771+0000:Applied patch with thanks to Jens.
http://svn.apache.org/viewvc?rev=801982&view=rev"
0,CAMEL-1884,Improvement,Minor,2.0-M3,None,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Stanley J. Lewis,0,0,2009-08-06 20:36:16+00:00,2010-02-07 09:56:22+00:00,"It's actually not possible to produce and consume messages from the same XMPP endpoint, i.e. something like:


from(""xmpp://irc.jabber.org..."").to(""direct:out"");


from(""direct:in"").to(""xmpp://irc.jabber.org..."");


typically what I see happen is that the consumer will work until the XMPP producer sends a message, at that point the consumer stops receiving messages.  What's happening is that producers and consumers created from the endpoint also create their own connection object and then also create their own Chat object.  The attached patch ties the XMPP connection to the endpoint, making a producer or consumer share this connection.  If a consumer creates the Chat first the producer will look it up and connect to the existing Chat.  If the producer creates the Chat then the consumer will attach itself as a listener to this Chat.


I notice that the tests are turned off as they require a local Jabber server instance to run.  Is it worth creating some accounts on jabber.org to run the test with?  Currently I've been testing this patch using my own Google talk accounts, this is all working towards an IRC to Jabber bridge that I might submit later on as a more complicated demo...","slewis:1249587340:2009-08-07T03:35:40.169+0000:1249587340:2009-08-07T03:35:40.169+0000:Here's the patch + unit test.  I went and grabbed camel_consumer@jabber.org & camel_producer@jabber.org accounts that the test uses to run.
njiang:1249589695:2009-08-07T04:14:55.900+0000:1249589695:2009-08-07T04:14:55.900+0000:Applied patch with thanks to Stan.

http://svn.apache.org/viewvc?rev=801874&view=rev"
0,CAMEL-1883,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2009-08-06 10:41:37+00:00,2010-02-07 09:56:22+00:00,Currently whatever exception is caught in doCatch there is a EXCEPTION_CAUGHT header set to the exception that was set on the exchange itself. As doCatch() traverses causes of exception it might happen that something else is caught and something else is in EXCEPTION_CAUGHT header.,romkal:1249531781:2009-08-06T12:09:41.488+0000:1249531781:2009-08-06T12:09:41.488+0000:Fixed in r801596
0,CAMEL-1882,Bug,Critical,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2009-08-06 08:26:07+00:00,2010-02-07 09:56:22+00:00,"BatchSender thread in BatchProcessor doesn't expect any error thrown from Collection.add() method, so when it is thrown the whole thread dies and is never recovered. In Aggregator, where aggregation strategy exists such exceptions can be easily thrown from Collection.add() and can render Aggregator unusable.","romkal:1249521072:2009-08-06T09:11:12.777+0000:1249521072:2009-08-06T09:11:12.777+0000:Fix in r801545

The fix could be improved as errors are not handled using standard error handlers, but some error handler attached to BatchProcessor. I did it to fix the problem quickly. Moreover there is error handler already used in BatchProcessor, while I believe it should be removed at all and use standard error handler.
romkal:1249532947:2009-08-06T12:29:07.693+0000:1249532947:2009-08-06T12:29:07.693+0000:The problem also exists if exception is thrown from correlation expression - not only from aggregation strategy. The fix that is commited already also handles this scenario."
0,CAMEL-1881,Improvement,Minor,2.0-M3,None,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Stanley J. Lewis,0,0,2009-08-05 17:53:32+00:00,2010-02-07 09:56:22+00:00,"While camel-irc listens to events on a channel very nicely, if you send a camel-irc consumer a message directly it ignores it.","slewis:1249466042:2009-08-05T17:54:02.167+0000:1249466042:2009-08-05T17:54:02.167+0000:here's a patch.
hadrian:1249478035:2009-08-05T21:13:55.285+0000:1249478035:2009-08-05T21:13:55.285+0000:@Stan, maybe you want to add a unit test?  Many thanks for the patch!
slewis:1249529629:2009-08-06T11:33:49.997+0000:1249529629:2009-08-06T11:33:49.997+0000:yup, will do...
slewis:1249530776:2009-08-06T11:52:56.865+0000:1249530776:2009-08-06T11:52:56.865+0000:Patch with unit test...
davsclaus:1249710795:2009-08-08T13:53:15.590+0000:1249710795:2009-08-08T13:53:15.590+0000:Thanks a lot Stan for the patch.
I have applied it to trunk.

trunk: 802379."
0,CAMEL-1880,New Feature,Major,2.0-M3,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Claus Ibsen,0,1,2009-08-05 11:33:52+00:00,2012-07-06 08:04:12+00:00,"When using batch consumers they poll multiple items from a given source.


Sometimes the source returns bad data or one of the entities have some bad data or the likes.
We should add an option to be able to skip/filter out/or create an exchange with an exception with the cause


So end users can remedy the issue and get moving.


See CAMEL-1869 for an example with camel-mail receiving mails that cannot be parsed on local JVM.",davsclaus:1341533052:2012-07-06T08:04:12.235+0000:1341533052:2012-07-06T08:04:12.235+0000:Lets close old ticket that are not in demand.
0,CAMEL-1879,Improvement,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-05 08:54:43+00:00,2010-02-07 09:56:22+00:00,No Desc,"davsclaus:1249433702:2009-08-05T08:55:02.532+0000:1249433702:2009-08-05T08:55:02.532+0000:See nabble
http://www.nabble.com/bean-binding-with-inheritance---2.0-M3-camel-http-td24802648.html
davsclaus:1249444621:2009-08-05T11:57:01.785+0000:1249444621:2009-08-05T11:57:01.785+0000:trunk: 801145."
0,CAMEL-1878,Bug,Minor,"1.6.1, 2.0-M3","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Claus Ibsen,Claus Ibsen,0,0,2009-08-05 07:37:51+00:00,2010-02-07 09:56:22+00:00,"This is only an issue when your bean implements javax.jms.MessageListener and then specify a specific method to use, then Camel will still prefer to use the onMessage method.","davsclaus:1249429091:2009-08-05T07:38:11.475+0000:1249429091:2009-08-05T07:38:11.475+0000:See nabble
http://www.nabble.com/bean-binding-with-inheritance---2.0-M3-camel-http-td24802648.html
davsclaus:1249432286:2009-08-05T08:31:26.890+0000:1249432286:2009-08-05T08:31:26.890+0000:Its the {{ActiveMQMessageConverter}} that has a onMessage converter 
davsclaus:1249447821:2009-08-05T12:50:21.832+0000:1249447821:2009-08-05T12:50:21.832+0000:trunk: 801196.
davsclaus:1254526912:2009-10-03T07:41:52.233+0000:1254526912:2009-10-03T07:41:52.233+0000:backported to 1.x: 821262."
0,CAMEL-1877,Improvement,Major,"1.6.1, 2.0-M3",2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,1,1,2009-08-05 06:44:14+00:00,2011-04-24 10:01:21+00:00,"There have recently been a couple of end users with problems using xpath functions with Camel.
We should look into this to see what is missing or wrong.


See nabble:
http://www.nabble.com/using-xpath-tokenize-function-inside-camel-td24659816.html
http://www.nabble.com/Error-when-using-XPath-functions-td24817775.html","davsclaus:1265770738:2010-02-10T10:58:58.385+0000:1265770738:2010-02-10T10:58:58.385+0000:trunk: 908446.

Well frankly you have to use Saxon to get additional XPath functions as it support XPath 2.0. The JDK may only support XPath 1.0, unless SUN have added that into JDK 1.6 etc. Anyway you can now more easily tell Camel to use Saxon instead.
davsclaus:1265775342:2010-02-10T12:15:42.291+0000:1265775342:2010-02-10T12:15:42.291+0000:trunk: 908466.

Now XPathBuilder supports reading the system property which defines the XPath factory to use
davsclaus:1303610481:2011-04-24T10:01:21.915+0000:1303610481:2011-04-24T10:01:21.915+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1876,Task,Major,"1.6.1, 2.0-M3",None,"
None
",Closed,Fixed,"1.6.2, 2.0.0",Claus Ibsen,Claus Ibsen,0,0,2009-08-04 12:26:00+00:00,2010-02-07 09:56:22+00:00,"See discussion at ohloh
http://www.ohloh.net/forums/11/topics/3160","davsclaus:1249360039:2009-08-04T12:27:19.792+0000:1249360039:2009-08-04T12:27:19.792+0000:also affected:
./components/camel-xstream/pom.xml
davsclaus:1249364977:2009-08-04T13:49:37.623+0000:1249364977:2009-08-04T13:49:37.623+0000:trunk: 800785.
1.x: 800788.
njiang:1249367267:2009-08-04T14:27:47.973+0000:1249367267:2009-08-04T14:27:47.973+0000:Added a check style rule for checking the GPL licenses in Java file.
trunk
http://svn.apache.org/viewvc?rev=800797&view=rev

camel-1.x branch
http://svn.apache.org/viewvc?rev=800819&view=rev
And we need other tools to take care of the pom.xml.
davsclaus:1249369242:2009-08-04T15:00:42.941+0000:1249369242:2009-08-04T15:00:42.941+0000:Thanks Willem for the checkstyles."
0,CAMEL-1875,New Feature,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,1,2009-08-04 06:31:57+00:00,2010-02-07 09:56:22+00:00,"The async API on the ProducerTemplate could add methods that expose the OnCompletion so you could send in a message that is routed async (from you as the client point of view) and Camel will use the OnCompletion callback to invoke when the message is done. 


This frees the burden from the client to use the Future handle to check the isDone.","davsclaus:1249365180:2009-08-04T13:53:00.262+0000:1249365180:2009-08-04T13:53:00.262+0000:trunk: 800792.
davsclaus:1249423683:2009-08-05T06:08:03.382+0000:1249423683:2009-08-05T06:08:03.382+0000:trunk: 801070.

Will update wiki as well
http://camel.apache.org/async"
0,CAMEL-1874,Task,Major,None,None,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Willem Jiang,0,0,2009-08-04 02:40:05+00:00,2010-02-07 09:56:22+00:00,No Desc,"njiang:1249344155:2009-08-04T08:02:35.463+0000:1249344155:2009-08-04T08:02:35.463+0000:trunk
 http://svn.apache.org/viewvc?rev=800683&view=rev"
0,CAMEL-1873,Bug,Major,"1.4.0, 1.5.0, 1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-08-03 12:52:36+00:00,2010-02-07 09:56:21+00:00,"Current camel support to define a producer template OUTSIDE a camel context, I think it works well just like the autowire function which is provided in Spring.


If there more than two Camel context in the Spring Application context , the user should specify the camel context which the template should use.


But I have a concern that even we put the template INSIDE the camel context, the template will not be set with a right version of camel context, since we use a CamelPostProcessor to inject CamelContext.


So I did a quick test on the current Camel code and found there is a bug  if there are more one CamelContext – CamelPostProcessor will inject the last create camel context into the CamelContextAware object. 


Since it is not easy to add the camelContext referece id into the template element attribute, we'd better just support to parser these elements inside the camel context.","njiang:1249275267:2009-08-03T12:54:27.204+0000:1249275267:2009-08-03T12:54:27.204+0000:We should remove the feature of CAMEL-1870 to avoid the ambiguity of the camel contexts.
njiang:1249280229:2009-08-03T14:17:09.444+0000:1249280229:2009-08-03T14:17:09.444+0000:camel-trunk
http://svn.apache.org/viewvc?rev=800340&view=rev
http://svn.apache.org/viewvc?rev=800340&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=800394&view=rev
davsclaus:1249290465:2009-08-03T17:07:45.209+0000:1249290465:2009-08-03T17:07:45.209+0000:I think its a bit of a *hack* to use reflection to invoke a getter for CamelContext to test whether it has already been set.

I would prefer in Camel 2.0 to add a {{getCamelContext}} method to the CamelContextAware interface to avoid the reflection hack.

And the best would be that we had a bit better control on the bean post processor and which camel context it belongs to.
njiang:1249324723:2009-08-04T02:38:43.186+0000:1249324723:2009-08-04T02:38:43.186+0000:Yes,  it's a *hack* way, if we change the CamelContextAware interface, it will effect the user's bean which implement's CamelContextAware interface.
As we working on the camel 2.0, it's a good change to add getCamelContext method in the CamelContextAware.

Current CamelPostProcessor can see all the beans in the application context, it is hard to tell if the CamelPostProcessor's camel context is belong to the bean.
so I add the checking in the the CamelPostProcessor to skip the camel context injection if the bean already have the camel context to avoid the injection of a  wrong camel context."
0,CAMEL-1872,Task,Minor,None,2.4.0,"
None
",Closed,Fixed,2.4.0,Christian Müller,Claus Ibsen,0,0,2009-08-03 12:44:27+00:00,2011-04-24 10:00:55+00:00,"See nabble:
http://www.nabble.com/consuming-an-entity-bean-from-a-table-using-JPA-td24600877.html","muellerc:1276782057:2010-06-17T21:40:57.044+0000:1276782057:2010-06-17T21:40:57.044+0000:Added org.apache.camel.component.jpa.JpaWithQueryTest and org.apache.camel.component.jpa.JpaWithNativeQueryTest
Updated the wiki page how the consumer URI query option 'consumer.query', 'consumer.namedQuery' and 'consumer.nativeQuery' could be used
davsclaus:1303610455:2011-04-24T10:00:55.569+0000:1303610455:2011-04-24T10:00:55.569+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1871,Improvement,Minor,"1.6.1, 2.0-M3",2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-03 10:42:12+00:00,2010-02-07 09:56:21+00:00,"If an end user sends a JMS property as



MY_KEY




Then it should be preserved when Camel route it, so the receiver side using Camel as well will see it as: MY_KEY and not MY.KEY.


The code should be:



        String answer = key.replace(""."", ""_DOT_"");

        answer = answer.replace(""_DOT_"", ""."");",davsclaus:1249269394:2009-08-03T11:16:34.593+0000:1249269394:2009-08-03T11:16:34.593+0000:trunk: 800307.
0,CAMEL-1870,Bug,Major,"2.0-M1, 2.0-M2, 2.0-M3",2.0.0,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Willem Jiang,0,0,2009-08-03 03:06:06+00:00,2010-02-07 09:56:21+00:00,"Here is the mail thread which discuss about it[1]
[1] http://www.nabble.com/Cannot-Autowire-consumerTemplate-for-client-test-td24781739.html","njiang:1249243129:2009-08-03T03:58:49.765+0000:1249243129:2009-08-03T03:58:49.765+0000:trunk
http://svn.apache.org/viewvc?rev=800190&view=rev"
0,CAMEL-1869,Improvement,Minor,"1.6.1, 2.0-M3",2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-08-02 14:54:10+00:00,2010-02-07 09:56:21+00:00,"See nabble:
http://www.nabble.com/Camel-Mail-issue-with-unsupported-charset-td24755585.html","davsclaus:1249364515:2009-08-04T13:41:55.886+0000:1249443076:2009-08-05T11:31:16.841+0000:trunk: 800779.

Added option ignoreUnsupportedCharset
Currently it has been implemented for the producer side (eg when sending)

davsclaus:1249443271:2009-08-05T11:34:31.413+0000:1249443271:2009-08-05T11:34:31.413+0000:CAMEL-1880 will resolve this from the consumer side"
0,CAMEL-1868,New Feature,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Ashwin J. Karpe,0,0,2009-07-31 20:12:13+00:00,2010-06-03 07:23:44+00:00,"I have developed a Camel Caching component based on ehCache. I am submitting this new feature for your review and consideration for releasing this capability into the Camel mainstream.  


The Camel Caching component has the following abilities


    a> In Producer mode, the component provides the ability to direct payloads in exchanges to a  stored in a pre-existing or created-on-demand Cache. The producer mode supports operations to ADD/UPDATE/DELETE/DELETEALL elements in a cache. (Examples goven below)


    b> In Consumer mode, the component provides the ability to listen on a pre-existing or created-on-demand Cache using an event Listener and receive automatic notifications when any cache activity take place (i.e ADD/UPDATE/DELETE/DELETEALL). Upon such an activity takng place, an exchange containing header elements describing the operation and cachekey and a body containing the just added/updated payload is placed and sent. In case of a DELETEALL operation the body of the exchanage is not populated.


The cache itself may be created on demand or if a cache of that name already exists then it is simply utilized with its original settings. The URL itself may take the following form


from (""cache://MyApplicationCache?maxElementsInMemory=1000&memoryStoreEvictionPolicy=MemoryStoreEvictionPolicy.LFU&overflowToDisk=true&eternal=true&timeToLiveSeconds=300&timeToIdleSeconds=true&diskPersistent=true&diskExpiryThreadIntervalSeconds=300"")  


Note that all the attributes of the above URL are standard ehCache settings that may be set at Cache creation.


Given below are examples of how to create/set routes:


Producer Example 1: Adding keys to the cache with a body received from direct:start
----------------------------------------------------------------------------------------------------
        context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""ADD"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");
            }

        });
        context.start();


Producer Example 2: Updating existing keys in a cache with a body received from direct:start
----------------------------------------------------------------------------------------------------


         context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""UPDATE"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");
            }

        });
        context.start();


Producer Example 3: Deleting existing keys in a cache with a body received from direct:start
----------------------------------------------------------------------------------------------------


        context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""DELETE"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");
            }

        });
        context.start();


Producer Example 4: Deleting all keys in a cache with a body received from direct:start
----------------------------------------------------------------------------------------------------


        context.addRoutes(new RouteBuilder() {
            public void configure() 

{
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""ADD"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""ADD"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson2"")).
                    to(""cache://TestCache1"");
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""DELETEALL"")).
                    to(""cache://TestCache1"");
            }

        });
        context.start();


Consumer Example 1: Notifying any changes registering in a Cache to Processors and other Producers
---------------------------------------------------------------------------------------------------------------------------------------------
Note: in this example the consumer is created first and then 3 routes send different message as Cache Producers


        // Cache Notification Consumer
        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from(""cache://TestCache1"").
                    process(new Processor() {
                        public void process(Exchange exchange) throws Exception 

{
                            String operation = (String) exchange.getIn().getHeader(""CACHE_OPERATION"");
                            String key = (String) exchange.getIn().getHeader(""CACHE_KEY"");
                            Object body = exchange.getIn().getBody();
                            // Do something
                        }


                    });


                // Cache Producer1
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""ADD"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");


                // Cache Producer2
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""UPDATE"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");


                // Cache Producer3 
                from(""direct:start"").
                    setHeader(""CACHE_OPERATION"", constant(""DELETE"")).
                    setHeader(""CACHE_KEY"", constant(""Ralph_Waldo_Emerson"")).
                    to(""cache://TestCache1"");
            }
        });
        context.start();","akarpe:1249042512:2009-07-31T20:15:12.213+0000:1249042512:2009-07-31T20:15:12.213+0000:Please see attached patch file and zip file containing the source code.

BTW, I have run this code through checkstyle to ensure code compliance.
akarpe:1249042656:2009-07-31T20:17:36.671+0000:1249042656:2009-07-31T20:17:36.671+0000:There are appropriate unit tests which run as intended. Please check the camel-test log file in the target directory generated by log4j to verify the run
hadrian:1249047280:2009-07-31T21:34:40.498+0000:1249047280:2009-07-31T21:34:40.498+0000:Awesome contribution Ashwin.  ehCache is licensed under APL 2.0 which is great.  Will schedule this for 2.1 and will commit right after 2.0 goes public.
Thanks, Hadrian
akarpe:1249064777:2009-08-01T02:26:17.144+0000:1249064777:2009-08-01T02:26:17.144+0000:Thanks Hadrian. I am glad you like it. ehCache is a very nice piece of software...

If you need me to do something, please let me know.

Cheers,

Ashwin...
akarpe:1250235759:2009-08-14T15:42:39.825+0000:1250258022:2009-08-14T21:53:42.451+0000:Hi All,

I have added a set of nice processors to the camel-cache component to provide the ability to perform cache lookups and selectively replace payload content at the
      - body
      - token
      -or xpath level.

The mechanics of doing this are as follows.
{code}
        context.addRoutes(new RouteBuilder() {
               public void configure() {
                       from(""cache://TestCache1"").
                             filter(header(""CACHE_KEY"").isEqualTo(""greeting"")).
                             process (new CacheBasedMessageBodyReplacer(""cache://TestCache1"",""farewell"")).
                             to(""direct:next"");
 
                       from(""cache://TestCache1"").
                             filter(header(""CACHE_KEY"").isEqualTo(""quote"")).
                             process (new CacheBasedTokenReplacer(""cache://TestCache1"",""novel"",""#novel#"")).
                             process (new CacheBasedTokenReplacer(""cache://TestCache1"",""author"",""#author#"")).
                             process (new CacheBasedTokenReplacer(""cache://TestCache1"",""number"",""#number#"")).
                             to(""direct:next"");

                      from(""cache://TestCache1"").
                             filter(header(""CACHE_KEY"").isEqualTo(""XML_FRAGMENT"")).
                             process (new CacheBasedXPathReplacer(""cache://TestCache1"",""book1"",""/books/book1"")).
                             process (new CacheBasedXPathReplacer(""cache://TestCache1"",""book2"",""/books/book2"")).
                             to(""direct:next"");                 
               }
        });
{code}
akarpe:1250236358:2009-08-14T15:52:38.595+0000:1250257950:2009-08-14T21:52:30.135+0000:Oops, looks like m earlier comment came out incoherently.

What I mean to say was

========================================
Hi All, 

I have added a set of nice processors to the camel-cache component to provide the ability to perform cache lookups and selectively replace payload content at the
    - body 
    - token
    - xpath level

The mechanics of doing this are as follows
{code}
context.addRoutes(new RouteBuilder() {
    public void configure() { 
 
        from(""cache://TestCache1""). 
             filter(header(""CACHE_KEY"").isEqualTo(""greeting"")). 
             process (new CacheBasedMessageBodyReplacer(""cache://TestCache1"",""farewell"")). 
             to(""direct:next"");

        from(""cache://TestCache1""). 
            filter(header(""CACHE_KEY"").isEqualTo(""quote"")). 
            process (new CacheBasedTokenReplacer(""cache://TestCache1"",""novel"",""#novel#"")). 
            process (new CacheBasedTokenReplacer(""cache://TestCache1"",""author"",""#author#"")). 
            process (new CacheBasedTokenReplacer(""cache://TestCache1"",""number"",""#number#"")). 
            to(""direct:next"");

        from(""cache://TestCache1""). 
            filter(header(""CACHE_KEY"").isEqualTo(""XML_FRAGMENT"")). 
            process (new CacheBasedXPathReplacer(""cache://TestCache1"",""book1"",""/books/book1"")). 
            process (new CacheBasedXPathReplacer(""cache://TestCache1"",""book2"",""/books/book2"")). 
            to(""direct:next"");
    }
});
{code}
davsclaus:1252800766:2009-09-13T08:12:46.137+0000:1252800766:2009-09-13T08:12:46.137+0000:Comments on patch
================

1)
Are the dependencies in pom.xml all needed? It has JSCH and commons net as mandatory? Maybe they are optional or for testing only?

2)
Could we reduce the INFO level logging to DEBUG. Especially in process methods that can be assumed to be invoked a lot. 

3)
Remove todo comments such as
/ TODO Auto-generated method stub

4)
Constants used to add to headers. CACHE_KEY etc. Is that a special ehache name? If not please use CamelCacheKey as this is the syntax we have agree upon in Camel.

5)
Program against interfaces
Instead of using DefaultExchange use Exchange and the same for Message, in such code as:

  DefaultExchange exchange = new DefaultExchange(this.getCamelContext(), getExchangePattern());
  DefaultMessage message = new DefaultMessage();

6)
Wrong error handling

+        try {
+            cacheConsumer.getProcessor().process(exchange);
+        } catch (Exception e) {
+            throw new CacheException(""Error in consumer while dispatching exchange containing Key "" + (String) element.getObjectKey() + "" for further processing  "", e);
+        }

It should just set the exception on the exchange
exchange.setException(e);

7)
Why does it use clone?

+    public Object clone() throws CloneNotSupportedException {
+        return super.clone();
+    }

8)
No need to log when starting and stopping if no special is done as Camel does this by default at DEBUG level

+    @Override
+    protected void doStart() throws Exception {
+        LOG.info(""In CacheProducer.start()"");
+        super.doStart();
+    }
+
+    @Override
+    protected void doStop() throws Exception {
+        LOG.info(""In CacheProducer.stop()"");
+        super.doStop();
+    }
+

9)
A lot of the INFO logging should be TRACE and a some of them DEBUG.

10)
Use Camel type converter to convert to a byte[]

+        // Read InputStream into a byte[] buffer
+        byte[] buffer = new byte[is.available()];
+        int n = is.available();
+        for (int j = 0; j < n; j++) {
+            buffer[j] = (byte)is.read();
+        }

11)
Use IllegalArgumentException for invalid configuration instead of CacheException

12)
Maybe use .convertMandatoryTo(InputStream.class) if the input stream *must* be not null

13)
And use the camel type converter features instead of all that manual type converting.


davsclaus:1252800961:2009-09-13T08:16:01.479+0000:1252800961:2009-09-13T08:16:01.479+0000:Ashwin do you mind creating wiki documentation for your new component?

1)
Add it to the components list wiki page

2)
Add a new wiki page documenting it
njiang:1252803960:2009-09-13T09:06:00.271+0000:1252803960:2009-09-13T09:06:00.271+0000:Applied patch with thanks to Ashwin
http://svn.apache.org/viewvc?rev=814274&view=rev
also fix some CS related  issues.
http://svn.apache.org/viewvc?rev=814277&view=rev
akarpe:1252850956:2009-09-13T22:09:16.945+0000:1252850956:2009-09-13T22:09:16.945+0000:Hi Claus,

No problem. I will write up documentation and submt it this week on the camel documentation wiki.

Cheers,

Ashwin...
davsclaus:1275521024:2010-06-03T07:23:44.614+0000:1275521024:2010-06-03T07:23:44.614+0000:Closing old resolved issues"
0,CAMEL-1867,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Mark White,0,0,2009-07-30 15:11:50+00:00,2009-08-05 16:39:36+00:00,"On entry to a route from a JMS endpoint configured with PassthroughJmsKeyFormatStrategy the headers with underscores (_) are passed through correctly.


However, when any header value in the message is then changed, the original headers are added back into the message using the DefaultJmsKeyFormatStrategy.  For example, sending a JMS message with headers;


HEADER_1=VALUE_1
HEADER_2=VALUE_1


we do see just these two headers in the message received into the route.


However, if we then set a header value in the route, say HEADER_1=VALUE_2, we now see the headers;


HEADER.1=VALUE_1
HEADER.2=VALUE_1
HEADER_1=VALUE_2
HEADER_2=VALUE_1


For some reason in the set header process the original message headers and values get added into the message after being passed through the DefaultJmsKeyFormatStrategy.  This has the implication of unnecessary duplication of the headers.


Also, when a message header is accessed using the getHeader(key) method it also goes through the DefaultJmsKeyFormatStrategy to decode the key that is passed.  


In the example above, if after we have updated 'HEADER_1' to 'VALUE_2', we do;


message.getHeader(""HEADER_1"") this goes through the DefaultJmsKeyFormatStrategy and actually gets executed as message.getHeader(""HEADER.1"") which returns VALUE_1 (wrong!).


Note: if instead we lookup the header through message.getHeaders() which returns the all headers in a Map, we can correctly access the 'HEADER_1' key.  (Why is getHeader(key) even going through the KeyFormatStrategy anyway if setHeader() isn't?)","msjwhite:1248938260:2009-07-30T15:17:40.352+0000:1248938260:2009-07-30T15:17:40.352+0000:Here is the Spring bean configuration we use to test;

	<bean id=""ConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"" destroy-method=""stop"">
		<property name=""connectionFactory"">
			<bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
				<property name=""brokerURL"" value=""failover:tcp://localhost:61616""/>
			</bean>
		</property>
	</bean>

	<bean id=""PassThroughHeader"" class=""org.apache.camel.component.jms.PassThroughJmsKeyFormatStrategy""/>

	<bean id=""jmsConfig"" class=""org.apache.camel.component.jms.JmsConfiguration"">
		<property name=""connectionFactory"" ref=""ConnectionFactory""/>
		<property name=""jmsKeyFormatStrategy"" ref=""PassThroughHeader""/>
		<property name=""explicitQosEnabled"" value=""true""/>
		<property name=""deliveryPersistent"" value=""false""/>
		<property name=""concurrentConsumers"" value=""1""/>
	</bean>

	<bean id=""jms"" class=""org.apache.camel.component.jms.JmsComponent"">
		<property name=""configuration"" ref=""jmsConfig""/>
	</bean>
msjwhite:1248938403:2009-07-30T15:20:03.855+0000:1248938403:2009-07-30T15:20:03.855+0000:Here is the Camel route we use to test;

	<bean id=""MessageTester"" class=""route.test.camel.bean.MessageTester""/>

	<camelContext id=""myroute"" trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">

		<route>
			<from uri=""jms:IN_QUEUE""/>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<setHeader headerName=""HEADER_1""><constant>VALUE_2</constant></setHeader>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<bean ref=""MessageTester"" method=""setHeader""/>
			<bean ref=""MessageTester"" method=""prettyPrintHeaders""/>
			<to uri=""log:route.log""/>
		</route>

	</camelContext>

msjwhite:1248938712:2009-07-30T15:25:12.286+0000:1248938712:2009-07-30T15:25:12.286+0000:And attached;

1. the bean to print out headers from map and through getHeader()

2. the log output 
davsclaus:1248939770:2009-07-30T15:42:50.601+0000:1248939770:2009-07-30T15:42:50.601+0000:How do you send a message to the jms:IN_QUEUE ?
davsclaus:1248940791:2009-07-30T15:59:51.155+0000:1248940791:2009-07-30T15:59:51.155+0000:Added unit test to trunk where it works nicely: 799342.
msjwhite:1248942818:2009-07-30T16:33:38.807+0000:1248942818:2009-07-30T16:33:38.807+0000:We use a Spring test to wrap the route we're testing with other routes to generate input and trap output; 'direct:' input and 'mock:' outputs.  So we go through;

So, say the route we're testing

<route>
<from uri=""jms:IN_QUEUE""/>
...
<to uri=""jms:OUT_QUEUE""/>
</route>

and so the Spring test creates;

from(""direct:RouteTestProducer"").to(""jms:IN_QUEUE"");
from(""jms:OUT_QUEUE"").to(""mock:OutConsumer"");
from(""jms:ERROR"").to(""mock:ErrorConsumer"")

We then ProducerTemplate.send() to send an Exchange created from DefaultExchange.

I'll look at the UnitTest and see if I can't reproduce through that somehow.
msjwhite:1248946600:2009-07-30T17:36:40.666+0000:1248946600:2009-07-30T17:36:40.666+0000:I tried running the tests against M3 and indeed the 'HEADER.1' key is added to the message in M3 but not in trunk, so that appears to be an improvement.  But there is still a problem on the getHeader() in trunk.

The unit test doesn't do enough to show - instead of testing the new header value, I changed it to test the change of the input header value, this then causes the error where getHeader(key) is returning a different value from getHeaders().get(key) and so test fails - code is attached.  I also added some output of the headers in my copy and you can see difference in the two values:

--Start Message Headers (from getHeaders().get(key)) --
HEADER_1=VALUE_2
--End Message Headers--
--Start Message Headers (from getHeader(key)) --
HEADER_1=VALUE_1
--End Message Headers--

msjwhite:1249020243:2009-07-31T14:04:03.603+0000:1249020243:2009-07-31T14:04:03.603+0000:In JmsMessage the getHeader() always looks for the original message property and doesn't use message header map unless the header doesn't exist in the original;

public Object getHeader(String name) {
...
            answer = jmsMessage.getObjectProperty(name);
...

This dates back to the original implementation, but at that time the setHeader() also used jmsMessage.setObjectProperty(), so it probably made sense then.

Why does the JmsMessage getHeader() still use the jmsMessage.getObjectProperty() to return the original value rather than the message value (which can be modified)?


davsclaus:1249262929:2009-08-03T09:28:49.903+0000:1249262929:2009-08-03T09:28:49.903+0000:getHeader(String name) should also consider jms key format strategy so it can do lookup based on key decoded

So you can lookup with {{Content-Type}} and where the key has been decoded to {{Content_HYPHEN_Type}}. That should be tested without the passthrough ket strategy but the default one.
davsclaus:1249269112:2009-08-03T11:11:52.639+0000:1249269112:2009-08-03T11:11:52.639+0000:Created CAMEL-1871 to let Camel not mess with header keys using underscore, so it can preserve HEADER_1 out of the box.
davsclaus:1249343693:2009-08-04T07:54:53.942+0000:1249343693:2009-08-04T07:54:53.942+0000:trunk: 800694.
davsclaus:1249343777:2009-08-04T07:56:17.863+0000:1249343777:2009-08-04T07:56:17.863+0000:Mark can you test on your side by using latest code from SVN?

I have just commit a fix to make:
- working with the headers consistent
- you do not need to use the pass through strategy to be able to send HEADER_1 headers anymore. Camel handles that by default as well now (CAMEL-1871)
msjwhite:1249461576:2009-08-05T16:39:36.697+0000:1249461576:2009-08-05T16:39:36.697+0000:Confirmed fixed in 2.0 trunk.

Thanks!"
0,CAMEL-1866,New Feature,Minor,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-30 13:19:13+00:00,2010-02-07 09:56:21+00:00,"Allows tooling to be in control of the ids auto generated for nodes in the route path.


Also expose CamelContext to InterceptStrategy as its convenient to have access to it there.","davsclaus:1248931329:2009-07-30T13:22:09.081+0000:1248931329:2009-07-30T13:22:09.081+0000:trunk: 799257.

See {{org.apache.camel.spi.NodeIdFactory}} that can be set on CamelContext to use a custom factory"
0,CAMEL-1865,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Mark White,0,0,2009-07-30 11:40:27+00:00,2009-07-30 17:44:58+00:00,"Stack trace;


org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: doSplit on MySplitter due to: java.lang.NullPointerException
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:82)
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:87)
        at org.apache.camel.processor.Splitter.createProcessorExchangePairs(Splitter.java:72)
...
Caused by: java.lang.NullPointerException
        at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:129)
        at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:38)
        at java.lang.String.valueOf(String.java:2827)
        at java.lang.StringBuilder.append(StringBuilder.java:115)
        at java.util.AbstractCollection.toString(AbstractCollection.java:422)
        at java.lang.String.valueOf(String.java:2827)
        at java.lang.StringBuilder.append(StringBuilder.java:115)
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:139)


Steps to reproduce;


1. Create simple route with splitter pattern; e.g.


<route>
	<from uri=""jms:IN_QUEUE""/>
	<split><method bean=""MySplitter"" method=""doSplit""/>
		<to uri=""log:route.log""/>
	</split>
</route>


2. Set DEBUG logging on for org.apache.camel classes, e.g.


log4j.logger.org.apache.camel=DEBUG


3. Fire message into route - message fails with NPE inside Camel","davsclaus:1248928289:2009-07-30T12:31:29.718+0000:1248928289:2009-07-30T12:31:29.718+0000:Can you show the splitter code, eg MySplitter.doSplit 
msjwhite:1248929095:2009-07-30T12:44:55.117+0000:1248929095:2009-07-30T12:44:55.117+0000:Sure, attached.

Splitter makes a copy of the original (in.copy()) and adds a body and header, then returns message in the list.

If it instead is changed to just return the original message in the list, it doesn't throw NPE.

Thanks

davsclaus:1248929428:2009-07-30T12:50:28.845+0000:1248929428:2009-07-30T12:50:28.845+0000:Hi

Okay so my feeling was correct that you return a org.apache.camel.Message object.

I am in the middle of another bigger work so I will get a fix in a bit later.

davsclaus:1248939163:2009-07-30T15:32:43.142+0000:1248939163:2009-07-30T15:32:43.142+0000:trunk: 799332.
msjwhite:1248947098:2009-07-30T17:44:58.236+0000:1248947098:2009-07-30T17:44:58.236+0000:Confirmed fixed in 2.0 trunk

Thanks!"
0,CAMEL-1864,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-30 07:03:14+00:00,2010-02-07 09:56:21+00:00,The reason is that onException is initialized before interceptors,"davsclaus:1248915106:2009-07-30T08:51:46.396+0000:1248915106:2009-07-30T08:51:46.396+0000:trunk: 799205.


davsclaus:1248915187:2009-07-30T08:53:07.099+0000:1248915187:2009-07-30T08:53:07.099+0000:At current time only implemented for when using SendProcessor that is the most common to use, eg as its the {{.to}}.
There may be some other processors that needs to be tweaked to let it work as well.

However the route builder logic inside Camel should be reworked in the future to better accommodate such interceptors messing with the endpoints.
davsclaus:1248991502:2009-07-31T06:05:02.898+0000:1248991502:2009-07-31T06:05:02.898+0000:trunk: 799523."
0,CAMEL-1863,New Feature,Minor,"1.6.1, 2.0-M3",None,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-29 12:36:06+00:00,2010-02-07 09:56:20+00:00,No Desc,"davsclaus:1248842186:2009-07-29T12:36:26.878+0000:1248842186:2009-07-29T12:36:26.878+0000:see nabble
http://www.nabble.com/How-to-prevent-HL7-message-validation--td24717549.html
davsclaus:1248845792:2009-07-29T13:36:32.411+0000:1248845792:2009-07-29T13:36:32.411+0000:trunk: 798902.

TODO: HL7 segment that fails validation and add it to the validate unit test
davsclaus:1248851200:2009-07-29T15:06:40.943+0000:1248851200:2009-07-29T15:06:40.943+0000:trunk: 798934.

HL7 test with validation error"
0,CAMEL-1862,Bug,Major,2.0-M3,"1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,S. Ali Tokmen,0,0,2009-07-29 10:01:17+00:00,2009-09-25 13:25:25+00:00,"The camel-cxf component is currently generated against CXF version 2.2.2.


As a result, the camel-cxf module as well as the camel-cxf bundle require CXF 2.2. More importantly, that bundle does not work correctly with CXF 2.0 (note that this is an expected behavior, CXF has had API changes with its 2.2 version).


Now, the trouble is that the camel-cxf JAR's MANIFEST has an Import-Package on org.apache.cxf.* components without specifying any version! As a result, when it looks for CXF and both CXF 2.0 and 2.2 are present on the platform, it sometimes chooses the wrong one.


To solve this issue, version specifiers should be added to the Import-Package declarations of the camel-cxf bundle. I guess an import on version 2.2 would be enough (we don't need to specify 2.2.2 explicitely).


Cheers


S. Ali Tokmen
http://ali.tokmen.com/","alitokmen:1248929758:2009-07-30T12:55:58.475+0000:1248929758:2009-07-30T12:55:58.475+0000:Hello

Looks like http://svn.apache.org/viewvc/camel/trunk/components/camel-cxf/pom.xml?view=diff&r1=799251&r2=799252&pathrev=799252 fixes this :)

Cheers

S. Ali Tokmen
http://ali.tokmen.com/
njiang:1248930601:2009-07-30T13:10:01.709+0000:1248930601:2009-07-30T13:10:01.709+0000:trunk
http://svn.apache.org/viewvc?rev=799252&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=799253&view=rev
njiang:1248930679:2009-07-30T13:11:19.512+0000:1248930679:2009-07-30T13:11:19.512+0000:@ S. Ali Tokmen
Please feel free to give it a try ;)
davsclaus:1248931723:2009-07-30T13:28:43.785+0000:1248931723:2009-07-30T13:28:43.785+0000:Hmm what happens if CXF v2.3 is released, or does the 2.2 3.0 means 2.2-3.0 ?
alitokmen:1248933106:2009-07-30T13:51:46.309+0000:1248933106:2009-07-30T13:51:46.309+0000:Hello

I've applied the patch on the CAMEL-CXF 2.0-M3 tag, and retried launching the platform with various versions of CXF. The behavior is as follows:

 - When only CXF 2.2.2 is present, all my tests pass (i.e., no regression)
 - When only CXF 2.0.11 is present, the bundle does not resolve but (as expected) says things like: Unresolved constraint in bundle 132: package; (&(package=org.apache.cxf.headers)(version>=2.2.0)(!(version>=3.0.0)))
 - When both CXF 2.0.11 and 2.2.2 are present, the bundle does resolve and when started seems to take the good version

This bug can therefore be marked ""closed, fixed"".

Cheers

S. Ali Tokmen
http://ali.tokmen.com/
alitokmen:1248933486:2009-07-30T13:58:06.802+0000:1248933486:2009-07-30T13:58:06.802+0000:@Claus

Hello

[2.2,3.0.0) means ""everything that's superior to 2.2, including 2.2 and 2.2.0; but inferior to 3.0.0, therefore excluding 3.0.0 itself"".

This means 2.2.0, 2.2.2, 2.3.0 ... 2.999.9999 are valid. 1.x, 2.0.x, 2.1.x and 3.x are not.

Cheers

S. Ali Tokmen
http://ali.tokmen.com/
davsclaus:1248935947:2009-07-30T14:39:07.763+0000:1248935947:2009-07-30T14:39:07.763+0000:@Savas

Thanks for the explanation.
alitokmen:1253856037:2009-09-25T13:20:37.112+0000:1253856153:2009-09-25T13:22:33.874+0000:This actually solves half of the issue, by guaranteeing that Camel-CXF won't start if CXF 2.0 or 2.1 is here.

The trouble with CXF is that it registers itself to Spring without specifying its version. As a result, in the case some CXF 2.0 applications are started for real (i.e. registered to Spring), Camel-CXF (with CXF 2.2) will not start with an exception that looks like:

{quote}
    WSDLManagerImpl.registerInitialExtensions : Failed to add extension element.
    java.lang.ClassNotFoundException: org.xmlsoap.schemas.wsdl.http.AddressType
           at org.apache.felix.framework.searchpolicy.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:627)
           at org.apache.felix.framework.searchpolicy.ModuleImpl.access$100(ModuleImpl.java:61)
           at org.apache.felix.framework.searchpolicy.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1469)
           at java.lang.ClassLoader.loadClass(ClassLoader.java:251)
           at org.apache.cxf.common.classloader.ClassLoaderUtils.loadClass2(ClassLoaderUtils.java:236)
           at org.apache.cxf.common.classloader.ClassLoaderUtils.loadClass(ClassLoaderUtils.java:222)
           at org.apache.cxf.wsdl.JAXBExtensionHelper.addExtensions(JAXBExtensionHelper.java:85)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.registerInitialExtensions(WSDLManagerImpl.java:239)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.registerInitialExtensions(WSDLManagerImpl.java:219)
           at org.apache.cxf.wsdl11.WSDLManagerImpl.<init>(WSDLManagerImpl.java:109)
           at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
           at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
           at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
           at java.lang.reflect.Constructor.newInstance(Constructor.java:494)
           at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:100)
           at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:61)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:877)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:839)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:440)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409)

           at java.security.AccessController.doPrivileged(Native Method)
           at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380)
           at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
           at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
           at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
           at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
           at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
           at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:429)
           at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:728)
           at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:380)
           at org.apache.cxf.bus.spring.BusApplicationContext.<init>(BusApplicationContext.java:91)
           at org.apache.cxf.bus.spring.SpringBusFactory.createApplicationContext(SpringBusFactory.java:102)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:93)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:86)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:64)
           at org.apache.cxf.bus.spring.SpringBusFactory.createBus(SpringBusFactory.java:53)
           at org.ow2.jonas.camel.cxf.servlet.OsgiHttpServiceCXFServlet.loadBus(OsgiHttpServiceCXFServlet.java:75)
           at org.apache.cxf.transport.servlet.AbstractCXFServlet.init(AbstractCXFServlet.java:79)
           at org.ow2.jonas.web.httpServiceTomcat6.HttpServiceImpl.registerServlet(HttpServiceImpl.java:231)
           at org.ow2.jonas.camel.cxf.servlet.OsgiCXFServletDeployer.__start(OsgiCXFServletDeployer.java:74)
           at org.ow2.jonas.camel.cxf.servlet.OsgiCXFServletDeployer.start(OsgiCXFServletDeployer.java)
           at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
           at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
           at java.lang.reflect.Method.invoke(Method.java:585)
           at org.apache.felix.ipojo.util.Callback.call(Callback.java:235)
           at org.apache.felix.ipojo.util.Callback.call(Callback.java:191)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallback.call(LifecycleCallback.java:86)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.__stateChanged(LifecycleCallbackHandler.java:162)
           at org.apache.felix.ipojo.handlers.lifecycle.callback.LifecycleCallbackHandler.stateChanged(LifecycleCallbackHandler.java)
           at org.apache.felix.ipojo.InstanceManager.setState(InstanceManager.java:428)
           at org.apache.felix.ipojo.InstanceManager.start(InstanceManager.java:309)
           at org.apache.felix.ipojo.ComponentFactory.createInstance(ComponentFactory.java:155)
           at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:283)
           at org.apache.felix.ipojo.IPojoFactory.createComponentInstance(IPojoFactory.java:220)
           at org.apache.felix.ipojo.InstanceCreator$ManagedInstance.create(InstanceCreator.java:349)
           at org.apache.felix.ipojo.InstanceCreator.addInstance(InstanceCreator.java:84)
           at org.apache.felix.ipojo.Extender.parse(Extender.java:269)
           at org.apache.felix.ipojo.Extender.startManagementFor(Extender.java:208)
           at org.apache.felix.ipojo.Extender.access$600(Extender.java:52)
           at org.apache.felix.ipojo.Extender$CreatorThread.run(Extender.java:669)
           at java.lang.Thread.run(Thread.java:595)
{quote}

As a result, my previous comment:

bq. When both CXF 2.0.11 and 2.2.2 are present, the bundle does resolve and when started seems to take the good version

May or may not be valid depending on what has been done with which CXF version and the order in which these actions have been done

Long story short: don't try to have two CXF bundles on the same OSGi platform...
alitokmen:1253856325:2009-09-25T13:25:25.794+0000:1253856325:2009-09-25T13:25:25.794+0000:Closing issue"
0,CAMEL-1861,Task,Minor,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-29 07:47:19+00:00,2010-02-07 09:56:20+00:00,Its not used and not needed anymore as we got no more specialized exchanges - we only get DefaultExchange,"davsclaus:1248845630:2009-07-29T13:33:50.798+0000:1248845630:2009-07-29T13:33:50.798+0000:trunk: 798900, 798901"
0,CAMEL-1860,New Feature,Minor,2.0-M3,2.0.0,"
None
",Closed,Won't Fix,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-28 12:59:37+00:00,2010-02-07 09:56:20+00:00,"The callbacks is invoked after the mock have registered and receive it. We need a pair of methods to be invoked beforehand so you can simulate errors by thrown an exception.


This will also let the index version work with redelivery as the index will stay the same.


And I will rename the regular methods to use after in the name so its easier to distinguish the before/after callbacks.",davsclaus:1248759434:2009-07-28T13:37:14.424+0000:1248759434:2009-07-28T13:37:14.424+0000:Didnt work out as well as I expected.
0,CAMEL-1859,Task,Major,"1.6.0, 2.0-M1, 1.6.1, 2.0-M2, 2.0-M3","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-07-28 11:31:32+00:00,2010-02-07 09:56:20+00:00,"Here is the mail thread[1] which discusses about it.
[1] http://www.nabble.com/-ANN--Apache-Camel-2.0-M3-Released-td24663590.html","njiang:1248756548:2009-07-28T12:49:08.513+0000:1248756548:2009-07-28T12:49:08.513+0000:trunk
http://svn.apache.org/viewvc?rev=798489&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=798501&view=rev"
0,CAMEL-1858,Improvement,Minor,"1.6.1, 2.0-M3","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Claus Ibsen,Stanley J. Lewis,0,0,2009-07-27 18:51:43+00:00,2010-02-07 09:56:20+00:00,"CAMEL-1853 adds the ability to use a custom Spring MessageConverter to map an incoming (or outgoing) JMS Message, and also makes it easier to do a pass through route where Camel does not try and deserialize a serialized object message.  This improvement is to add a simple flag that achieves a similar effect but without having to supply a MessageConverter implementation.","davsclaus:1248725261:2009-07-28T04:07:41.863+0000:1248725261:2009-07-28T04:07:41.863+0000:Great idea and great patch.

One note: I will rename the {{getMapJmsMessage}} to use the java bean style isXXX
davsclaus:1248725328:2009-07-28T04:08:48.640+0000:1248725328:2009-07-28T04:08:48.640+0000:And impressive you could do this for the *camel-jms* component that is one of the more complex components.
davsclaus:1248727419:2009-07-28T04:43:39.011+0000:1248727419:2009-07-28T04:43:39.011+0000:trunk: 798401.

Thanks a lot Stan for the patch. I have applied it to trunk.
davsclaus:1248727672:2009-07-28T04:47:52.822+0000:1248727672:2009-07-28T04:47:52.822+0000:Updated wiki as well with this new option
slewis:1248764573:2009-07-28T15:02:53.160+0000:1248764573:2009-07-28T15:02:53.160+0000:Here's a patch for 1.x for this as well.
davsclaus:1248814959:2009-07-29T05:02:39.059+0000:1248814959:2009-07-29T05:02:39.059+0000:Thanks a lot Stan for doing a patch for 1.x as well. I have applied it:

1.x: 798783."
0,CAMEL-1857,Improvement,Minor,2.0-M1,,"
None
",Closed,Won't Fix,None,Unassigned,Yuri Schimke,0,0,2009-07-27 09:15:53+00:00,2010-02-07 09:58:27+00:00,"There are some small improvements that would improve the Flatpack DataFormat.  Basically because the header and trailer are fixed names, and are not exposed via the DataSetList, there are some cases where we need to write our own code instead of using the FlatPack DataFormat.


Firstly, it would be good if instead of two special cases ""header"" and ""trailer"", if you could designate your own set of special record ids to be checked e.g. ""header"", ""footer1"", ""footer2"".  This would allow us to reuse our existing flatpack config files, especially where we have most than one footer.


Secondly, since the FlatpackConverter already detects the record id as part of its processing, it would be nice if it included this as a synthetic key value in the DataSetList e.g. ""record_type"" -> ""trailer"".  


n.b. I have raised a feature request with FlatPack, so that they expose the current record type, but I doubt there is any point waiting for it.  If they did implement it, then you would not need to have any special record types e.g. ""header and ""trailer""


https://sourceforge.net/tracker/?func=detail&aid=2827654&group_id=127761&atid=709369","davsclaus:1256645086:2009-10-27T20:04:46.052+0000:1256645086:2009-10-27T20:04:46.052+0000:Yuri have you tried implemeting this yourself?
yuri:1256699103:2009-10-28T11:05:03.338+0000:1256699103:2009-10-28T11:05:03.338+0000:Yes.  It is working well for us.  I can't submit as it is work code, and not complex enough to be worth running the legal gauntlet.

I have just implemented a DataFormat, that calls flatpack directly and knows about the special header and footer names.

This is a low priority issue, but I think it is significant when you find the limitations of the camel components mean you have to write your own with slight customisations.  We have had to do that in a number of cases.
davsclaus:1258674150:2009-11-20T07:42:30.056+0000:1258674150:2009-11-20T07:42:30.056+0000:Feature which is better implemented in flatpack. However flatpack is also a project which seems not maintained anymore."
0,CAMEL-1856,Task,Major,"1.6.2, 2.0.0","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-07-27 07:17:27+00:00,2010-02-07 09:56:20+00:00,"Talked with Rong about the detail requirement of the CAMEL-1818,
I think we can leverage the camel-transport and cxf-rt-binding-jbi to create a JBI message from a proxy method call.","njiang:1248756639:2009-07-28T12:50:39.450+0000:1248756639:2009-07-28T12:50:39.450+0000:trunk
http://svn.apache.org/viewvc?rev=798052&view=rev
http://svn.apache.org/viewvc?rev=798063&view=rev
camel-1.x branch
 http://svn.apache.org/viewvc?rev=798083&view=rev"
0,CAMEL-1855,Improvement,Minor,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-27 06:54:52+00:00,2010-02-07 09:56:20+00:00,"Some are 5 and others are 10, we should set all to 10 so its consistent.


Note that ease of thread management is scheduled for Camel 2.1, so this is just a minor work to make it consistent defaults.",davsclaus:1248651162:2009-07-27T07:32:42.368+0000:1248651162:2009-07-27T07:32:42.368+0000:trunk: 798057.
0,CAMEL-1854,Task,Trivial,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-27 06:30:40+00:00,2010-02-07 09:56:20+00:00,No Desc,davsclaus:1248647482:2009-07-27T06:31:22.761+0000:1248647482:2009-07-27T06:31:22.761+0000:trunk: 798035.
0,CAMEL-1853,New Feature,Major,"1.6.1, 2.0-M3","1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Claus Ibsen,Claus Ibsen,0,0,2009-07-27 04:21:50+00:00,2010-02-07 09:56:20+00:00,"org.springframework.jms.support.converter.MessageConverter can be configured on a Camel JMS endpoint but its only used when sending.


It should also be useable when consuming a message","davsclaus:1248642007:2009-07-27T05:00:07.137+0000:1248642007:2009-07-27T05:00:07.137+0000:trunk: 798024.

A patch preparing for this ticket
davsclaus:1248644905:2009-07-27T05:48:25.305+0000:1248644905:2009-07-27T05:48:25.305+0000:trunk: 798027.
davsclaus:1248648111:2009-07-27T06:41:51.445+0000:1248648111:2009-07-27T06:41:51.445+0000:1.x: 798037."
0,CAMEL-1852,Bug,Major,2.0-M3,2.0.0,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Willem Jiang,0,0,2009-07-24 14:28:42+00:00,2010-02-07 09:56:20+00:00,There some NPE when you run the example of loan broker which is caused by the change of CAMEL-1722.,"njiang:1248832412:2009-07-29T09:53:32.733+0000:1248832412:2009-07-29T09:53:32.733+0000:trunk
http://svn.apache.org/viewvc?rev=797494&view=rev"
0,CAMEL-1851,Bug,Major,"2.0-M2, 2.0-M3",2.0.0,"
None
",Closed,Fixed,2.0.0,Claus Ibsen,Mark White,0,0,2009-07-24 08:20:08+00:00,2009-07-27 16:17:26+00:00,"Some routes are not getting instrumented using JMX and we get the following WARN for those on startup;


InstrumentationLifecycleStrategy: Route has not been instrumented for endpoint: ...


It turns out that its only those routes that have an onException handler as the first processor in the route, e.g.


<route id=""per-msg-route"" errorHandlerRef=""RouteErrorHandler"">
  <from uri=""jms:MSG_IN""/>
  <onException>
    <exception>can.retry.Exception</exception>
    <redeliveryPolicy ref=""UnlimitedRedeliveryPolicyConfig""/>
    <handled><constant>true</constant></handled>
  </onException>
  <bean ref=""Formatter"" method=""formatInput""/>
...8<... 


More info and proposed fix at http://www.nabble.com/Routes-JMX-attributes-not-updated-in-2.0-M2-td24631265.html#a24639433","davsclaus:1248585958:2009-07-26T13:25:58.681+0000:1248585958:2009-07-26T13:25:58.681+0000:trunk: 797926.

Mark you can test by trying latest SNAPSHOT or get the source and build a new .jar yourself
msjwhite:1248682646:2009-07-27T16:17:26.115+0000:1248682646:2009-07-27T16:17:26.115+0000:Confirmed fixed in 2.0-SNAPSHOT

Thanks!"
0,CAMEL-1850,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,slad,0,0,2009-07-23 21:46:58+00:00,2010-06-03 07:23:44+00:00,"It would be nice to have a message header that can be used to specify which velocity template to be used for the message. This allows to dynamically use different templates while still preserving velocity endpoint cache. In real life you will have more than 1 template and you use of template will change from message to message.


Something like -


from(""direct:start"")
.setHeader(""velocityTemplate"", ""orderDisplay.vm""); 
.to(""velocity:dummyTemplate.vm"") 


Currently to achieve this you have to define custom bean or some processor.","davsclaus:1248387604:2009-07-24T06:20:04.272+0000:1248387604:2009-07-24T06:20:04.272+0000:Should be coded in the camel-spring since its the base for the other template components such as freemarker and stringtemplate as well.
davsclaus:1251521044:2009-08-29T12:44:04.091+0000:1251521044:2009-08-29T12:44:04.091+0000:Stan you want to take a stab at this? It improves at least 3 components, all the template based :)
slewis:1251522228:2009-08-29T13:03:48.097+0000:1251522228:2009-08-29T13:03:48.097+0000:yeah, can do...
slewis:1252657855:2009-09-11T16:30:55.393+0000:1252657855:2009-09-11T16:30:55.393+0000:I looked into implementing this in camel-spring's ResourceBasedEndpoint but it felt like the solution was starting to get really complicated as that endpoint is designed to only manage one resource.  This way is definitely a lot simpler and I think is a good approach to implementing this feature.
davsclaus:1252707024:2009-09-12T06:10:24.953+0000:1252707024:2009-09-12T06:10:24.953+0000:Applied patch with thanks to Stan

trunk: 814110.

Stan do you mind updating the wiki documentation at:
http://camel.apache.org/velocity

To include some text about this new feature. And remember to state that it requires *Camel 2.1* in bold.

slewis:1252992824:2009-09-15T13:33:44.935+0000:1252992824:2009-09-15T13:33:44.935+0000:Updated the wiki BTW...
davsclaus:1275521024:2010-06-03T07:23:44.048+0000:1275521024:2010-06-03T07:23:44.048+0000:Closing old resolved issues"
0,CAMEL-1849,Bug,Major,1.6.1,"1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Claus Ibsen,Dave Stanley,0,0,2009-07-23 18:26:52+00:00,2010-02-07 09:56:20+00:00,A recent feature of Camel's CachedOutputStream is to serialize any messages over 64k to disk. In some cases the *tmp message files are not being cleaned up.,"dave_stanley:1248344894:2009-07-23T18:28:14.225+0000:1248344894:2009-07-23T18:28:14.225+0000:Patch and testcase attached. 

Two changes were required, on in HttpProducer.java and the other in CachedOutputStream itself. 
hadrian:1248345670:2009-07-23T18:41:10.969+0000:1248345670:2009-07-23T18:41:10.969+0000:@Dave, awesome!

Is this fix required in 2.0 as well?
janstey:1248345948:2009-07-23T18:45:48.791+0000:1248345948:2009-07-23T18:45:48.791+0000:Yeah, thanks Dave!

Hadrian, don't forget to add in a check for null in HttpProducer as well ala

{code}
+                if (is != null) { 
+                    is.close();
+                }
{code}

HttpProducerSelectMethodTest fails without this mod.
njiang:1248368705:2009-07-24T01:05:05.572+0000:1248368705:2009-07-24T01:05:05.572+0000:Here is a thing, if you close the input stream of the HttpProducer, you will not get a readable InputStream from the message body of the exchange which will be processed after the HttpProducer.

Please remember to call the close of the InputStream , If you want to make sure the temp file to be deleted.
davsclaus:1248387409:2009-07-24T06:16:49.884+0000:1248387409:2009-07-24T06:16:49.884+0000:Yes it should be patched in 2.0 as well.

I wonder if the closing the input stream should be in a finally block to ensure its always closed?
davsclaus:1248387526:2009-07-24T06:18:46.815+0000:1248387526:2009-07-24T06:18:46.815+0000:PS: This stream cache is really becoming a pain, we got to many issues with it!

I do think we should add an option to the CamelContext properties to let people turn it on/off and it should be off by default.
njiang:1248418044:2009-07-24T14:47:24.542+0000:1248418044:2009-07-24T14:47:24.542+0000:@Claus,

But we don't know if there is another processor or endpoint after the HttpProducer, so we can't close the InputStream in the HttpProducer.


dave_stanley:1248422963:2009-07-24T16:09:23.502+0000:1248422963:2009-07-24T16:09:23.502+0000:@Willem,

If the stream is not closed in HttpProducer, wondering where is the right place to close the stream? I definitely think it should be automatically cleaned up. 

(I would be happy to try and tweak the patch if you can provide some suggestion on how it can be improved upon)

dave_stanley:1248439533:2009-07-24T20:45:33.741+0000:1248439533:2009-07-24T20:45:33.741+0000:Given this stream is only created to hold the body of of http exception's, another option might be to change the HttpOperationFailedException implementation to use a string for the body rather than an InputStream. 

This way the stream can be safely closed in HttpProducer. 

In terms of the exception body itself, if its a large exception body the entire body could be logged and then [optionally] truncated in the Exception object itself if needed?
 


davsclaus:1248563032:2009-07-26T07:03:52.567+0000:1248563032:2009-07-26T07:03:52.567+0000:Dave, yeah a good idea to store the content as a String instead to detach it from the underlying stream.

As it only occurs when an exception is to be thrown then the overhead is negligible.

Maybe the stream should be closed as part of the exchange unit of work terminating?
We do that for instance with other components where they do house cleaning.

And removing temporary work files would make sense to do in this part as well. And I do believe the code could use an overhaul as well since its a bit _tricky_ in places.
For instance generating the temporary filename should just use the exchange id as its unique and a much better name than a generated number. 

I would take a 2nd look and ping back ideas
davsclaus:1248564462:2009-07-26T07:27:42.071+0000:1248564462:2009-07-26T07:27:42.071+0000:*Some observations*

1. 
CachedOutputStream is build as if its holds multiple streams (i.e. it has a streamList) but its only used in Camel as wrapping a single stream.

2.
It got an output locked option that is newer used, i.e. could be removed to reduce complexity

3.
it lacks try .. finally to ensure proper house cleaning when working with streams

4.
It silently ignore the output dir if provided with one and it cannot create the directory.
It should really throw an exception to indicate the temp output folder cannot be used

5. Some methods is newer used and should be removed to reduce complexity
- resetOut
- lockOutputStream
- getBytes
- writeCacheTo (can be removed as its only used for toString that should just omit printing the stream content)
- getOut
- getTempFile
- getInputStream

6. Duplicate code
The write methods has duplicate code that should be avoided and instead invoke a single method that does the actual writing

7. Using java.io.File instead of NIO
The NIO library have features to support paging memory to disk. But yeah its a bit complex to work with the NIO but it is faster and it can leverage the OS memory paging to be faster. 


davsclaus:1248576792:2009-07-26T10:53:12.963+0000:1248576792:2009-07-26T10:53:12.963+0000:I am working on patching this for Camel 2.0 and cleaning up the code in CachedOutputStream
davsclaus:1248579019:2009-07-26T11:30:19.612+0000:1248579019:2009-07-26T11:30:19.612+0000:trunk: 797907.
davsclaus:1248579381:2009-07-26T11:36:21.769+0000:1248579381:2009-07-26T11:36:21.769+0000:1.x: 797911.

unit test demonstrating the issue to help resolve the issue on 1.x branch
davsclaus:1248580779:2009-07-26T11:59:39.048+0000:1248580779:2009-07-26T11:59:39.048+0000:Setting the threshold to -1 or 0 should disable file based cache all together
davsclaus:1248581553:2009-07-26T12:12:33.679+0000:1248581553:2009-07-26T12:12:33.679+0000:1.x: 797918.

A fix so the tmp files is also deleted in case of an http exception. And the http exception uses a copy of the stream so its detached.
davsclaus:1248582121:2009-07-26T12:22:01.543+0000:1248582121:2009-07-26T12:22:01.543+0000:1.x: 797920.

You can now disable disk based cache by setting a threshold of 0 or negative

Updated wiki as well:
http://cwiki.apache.org/confluence/display/CAMEL/Stream+caching
davsclaus:1248582891:2009-07-26T12:34:51.074+0000:1248582891:2009-07-26T12:34:51.074+0000:trunk: 797923.

To disable the file based cache
dave_stanley:1248630943:2009-07-27T01:55:43.862+0000:1248630943:2009-07-27T01:55:43.862+0000:Thanks Claus! Really like the exchange.addOnCompletion(). Didn't know you could do that."
0,CAMEL-1818,Improvement,Major,1.6.0,,"
None
",Closed,Won't Fix,None,Willem Jiang,Ron Gavlin,0,0,2009-07-10 09:04:35+00:00,2010-02-07 09:58:26+00:00,"I would like to incorporate the camel-cxf component into smx-camel and use wsdl2java-generated stubs to send jbi requests and receive jbi responses from smx-cxf-bc and smx-cxf-se endpoints. Essentially, what I can do today in the smx-cxf-se container with proxies I would also like to be able to do in the smx-camel.


The discussion on this topic with willem and ffang is pasted below.


<rong>	willem: i have code currently running in smx-cxf-se that I would like to move into smx-camel. The code in smx-cxf-se uses wsdl2java to proxy to a smx-cxf-bc provider. If I bundle the camel-cxf component within smx-camel, should I be able to port this code over from smx-cxf-se to smx-camel?
	<rong>	willem: of course, I would provide a jbi location uri as the proxy address.
	<willem>	rong: wsdl2java generated artifacts can be used in camel-cxf.
	<rong>	willem: so in this scenario, I am not explicitly using camel-cxf at all. I presume it is being used behind the scenes to send a camel CxfExchange which then gets converted into a jbi exchange on its way to the smx-cxf-bc provider. Is that how you would understand it?
	<rong>	willem: the smx-cxf-bc provider allows me to share the same jbi endpoint configuration across numerous camel routes defined in different smx-camel sus.
	<willem>	rong: Do you still want to use the smx-cxf-bc for the transport work ?
	<willem>	rong: are you using SMX 3?
	<rong>	willem: i see it as providing a single exit/entry point on the bus that can be shared across numerous camel routes. Yes, I am still on smx3.
	<willem>	rong: do you just want route the jbi message to camel and let camel call the POJO as the smx-cxf-se does?
	<rong>	willem: what advantage would defining a separate smx-camel su with a route ""from jbi to cxf"" have over directly using the smx-cxf-bc provider?
	<rong>	willem: no, i have a service that choreographs multiple external SOAP services. Today, the work is done in smx-cxf-se. It would be more convenient to do the choreography work in camel where I can inline other mediation/routing operations with the external SOAP service invocations.
	<rong>	willem: I know how the smx-cxf-se proxies to smx-cxf-bc provider endpoints. However, it is not clear how the wsdl2java-generated classes running in smx-camel would use camel-cxf behind the scenes to send a jbi message to the smx-cxf-bc provider endpoint.
	<willem>	rong; If you just want to routing the raw message and don't get the CXF interceptor get touch of the message, you could route the JBI message into the camel.
	<rong>	willem: I am not sure I understand your comment. When I say smx-cxf-bc provider, I am using the term ""provider"" in jbi speak, meaning it is a proxy to an external service. So, I am not trying to route a message into camel, I am trying to route a message out of camel to the ""jbi provider"". Does that make sense?
	<willem>	rong: but for camel-cxf , it doesn't take the transport and soap stack business apart. if you still want to the smx-cxf-se's marshal and unmarshal work do inside the camel, you still need to route the message to smx-cxf-se and camel-cxf can't do it.
	<rong>	willem: doesn't cxf's native support for the jbi transport mean that the wsdl2java-generated stubs running in smx-camel do the jbi work for me. I was thinking I was only using camel-cxf to essentially import the relevant cxf jars. When the smx-cxf-se proxies to the smx-cxf-bc provider, is it doing more for me than I realize?
	<willem>	rong: wsdl2java generated artifacts are for the mapping between the xml message and Java objects, they can't handle the jbi transport themselves. It need the CXF runtime to handle it.
	<willem>	rong : I don't know what the smx-cxf-se proxies does, maybe I need to ask ffang to join this discussion.
	<rong>	willem: i was thinking the same thing...
	<rong>	ffang: ping
	<ffang>	rong:pong
	<rong>	ffang: i have been chatting with willem about moving some integration logic from a smx-cxf-se component to smx-camel. Do you have a moment to read our discussion history here and provide additional insight regarding how proxies to smx-cxf-bc providers work in smx-cxf-se?
	<ffang>	rong: sure, basically, proxy in cxf se means, cxf se can hold the proxy of provider endpoint inside jbi bus, then from within the cxf se endpoint, can use this proxy to send message exchange to the provider endpoint just like a normal java invocation, but the provider endpoint must has the wsdl interface
	<rong>	ffang: So, ii am trying to determine if the smx-cxf-se itself has magic to support proxying to smx-cxf-bc providers or if all the magic is the cxf runtime's support for jbi destinations...
	<ffang>	rong: so you can from smx-cxf-se, use proxy of other cxf se endpoint/ cxf bc provider/ jsr181 se endpoint, because all of these provider endpoint has wsdl as interface
	<willem>	ffang: does smx-cxf-se still need to marshal and unmarshal of the incoming and outgoing JBI message ?
	<ffang>	rong: in your scenario, if camel se(as a provider) has wsdl interface, then it should be ok
	<ffang>	willem: yeah
	<willem>	ffang: Does the wsdl interface means SEI ?
	<rong>	ffang: so, in smx-camel, if i bundle the camel-cxf component to incorporate the cxf runtime and I use wsdl2java-generated stubs with a jbi locationUri pointing to the smx-cxf-bc provider (just like I do in smx-cxf-se today), the code should port from smx-cxf-se to smx-camel?
	<ffang>	rong: yeah, cxf se proxy use cxf JBI destination underlying, but it doesn't care the provider endpoint on the other side is cxf bc provider or not, any provider has wsdl interface should be ok
	<ffang>	willem: yeah
	<rong>	ffang: but in this case, i wouldn't be using the cxf-se proxy. i am running in smx-camel and trying to send a jbi request to smx-cxf-bc provider using wsdl2java-generated classes.
	<rong>	ffang: is all the work i need being done in the cxf jbi transport layer and not in the cxf-se?
	<rong>	ffang: the jbi proxy work, i mean
	<ffang>	rong: yeah, basically it's cxf runtime issue, I mean here mainly involve ClientProxyFactoryBean(which is cxf client proxy) an cxf JBI transport
	<ffang>	willem: can we use ClientProxyFactoryBean from camel-cxf now?
	<rong>	ffang: am I correct that the major drawback of using this technique, i.e., ClientProxyFactoryBean, is that only synchronous invocations are supported. OTOH, if I manually build the request rather than using wsdl2java-generated classes, then I can asynchronously send the request, correct?
	<willem>	ffang: camel-cxf uses ClientProxyFactoryBean to create the proxy to send the request to out side of service.
	<willem>	ffang: I think the issue is how to initial the JBI transport in normal CXF endpoint.
	<willem>	ffang: current camel-cxf endpoint can't consume the JBI message directly.
	<ffang>	rong: yeah
	<ffang>	rong: actually no
	<rong>	willem: when the cxf runtime sees a jbi location uri, doesn't it know to automatically perform this initialization? I would think camel-cxf endpoint would play any role here, except making sure it brings with it the jbi transport jars.
	<ffang>	rong: even we use sendSync in proxy to send out MessageChangr, but for cxf client api level, we have asyn, so the asyn/sync of cxf client api decouple with the underlying transport
	<ffang>	rong: think about cxf client can support async over http transport, which is sync indeed
	<rong>	willem: s/would/would not
	<willem>	rong: yes, if you take a look at the CxfSeProxyFactoryBean in cxf-se, cxf-se did some customization on the client side.
	<ffang>	willem: it's easy do use JBI transport, just do like cf.setAddress(""jbi://"" + ""anything"");
	<rong>	ffang: it looks like CxfSeProxyFactoryBean has a reasonable amount of goodness to make proxies work with MTOM attachments, etc. Any idea how much of this functionality would have to be integrated into cxf, camel-cxf, or smx-camel? Would it make sense to move this into the cxf jbi library as a helper class so that smx-cxf-se and camel can share it?
	<ffang>	rong: yeah, maybe some interceptors should move to cxf code base, if these would be shared by camel-cxf also
	<rong>	willem, ffang: so it sounds to me like camel-cxf does not currently fully support the cxf jbi transport. If you agree, I'll open a Camel JIRA for this functionality to be added to the camel-cxf component.
	<willem>	rong： current camel JBI related work is done in servicemix-camel component, I don't know if it is right for camel-cxf do consume or produce any JBI related message.
	<willem>	rong: if you want to camel-cxf handle the JBI message from smx-cxf-se and smx-cxf-bc, we need to do merge the JBI related work in to camel-cxf.
	<willem>	rong: please feel free to fill that requirement.
	<rong>	willem: yes, i want camel-cxf to send jbi request and receive jbi response from both smx-cxf-se & smx-cxf-bc. So, should that be a camel-cxf JIRA?
	<willem>	rong: yes, camel-cxf can cover that.
	<rong>	willem, ffang: thanks for your assistance. i'll open a camel-cxf JIRA then.","njiang:1248395225:2009-07-24T08:27:05.979+0000:1248395824:2009-07-24T08:37:04.145+0000:Hi Rong,

After digging the cxf jbi transport code for while, I found there is an issue for using the cxf jbi transport in camel-cxf.

CXF JBI has a delivery channel property which is got from servicemix ComponentContext and it means you need to deploy the CXF JBI endpoint into the ServiceMix container to get the JBI transport work.

But for camel-cxf component , it knows nothing about the servicemix and  the delivery channel.

So we need to figure out a way to set delivery channel to the CXF JBI transport first, currently I have no idea to implement this in CXF.

BTW, servicemix-camel component supports to route the message between the camel endpoint and servicemix endpoint, maybe we can route the message directly to smx-cxf-se & smx-cxf-bc from the camel endpoint by using the servicemix-camel component.

Willem

njiang:1248756741:2009-07-28T12:52:21.763+0000:1248756741:2009-07-28T12:52:21.763+0000:Hi Rong,

I committed a simple unit test to show how to use CXF proxy with jbi-binding and the camel transport, please check out the change of CAMEL-1856 for it.

Willem 
rgavlin:1248829421:2009-07-29T09:03:41.109+0000:1248829479:2009-07-29T09:04:39.953+0000:Hi Willem,

Thanks for the unit test in CAMEL-1856. Unfortunately, it is not completely clear to me that the test case reproduces my problem. In my case, I guess I am looking for another level of indirection where the HelloWorld proxy gets injected into the JbiServiceProcessor. Then in the JbiServiceProcessor proxy.echo() is invoked to send a message to a jbi endpoint (maybe a smx-cxf-se endpoint or maybe a smx-cxf-bc endpoint). Maybe the only real way to demonstrate this is to write a test in smx-camel that bundles and leverages the camel-cxf component to implement this functionality.

The smx-camel cxf client proxy test would essentially look just like smx-cxf-se test

http://svn.apache.org/viewvc/servicemix/smx3/branches/servicemix-3.2/deployables/serviceengines/servicemix-cxf-se/src/test/java/org/apache/servicemix/cxfse/CxfSeClientProxyTest.java?view=co

except it would be re-implemented to test the Cxf client proxy in smx-camel instead of smx-cxf-se. This would demonstrate how the cxf client proxy is configured in smx-camel and verify that all the cxf client proxy features available in smx-cxf-se are also available in smx-camel with the bundled camel-cxf component using the jbi binding. 

Does that make sense?

/Ron"
0,CAMEL-1817,Improvement,Major,2.0-M2,2.8.0,"
None
",Resolved,Fixed,2.8.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-10 05:26:46+00:00,2013-05-02 02:29:38+00:00,"See wiki
http://camel.apache.org/camel-2x-speed-optimizations.html


This will pave the road for speed optimizations in Camel","davsclaus:1247201977:2009-07-10T12:59:37.782+0000:1247201977:2009-07-10T12:59:37.782+0000:work in progress patch.


davsclaus:1247362282:2009-07-12T09:31:22.881+0000:1247362282:2009-07-12T09:31:22.881+0000:Await closure on the API changes.

What is needed thereafter is to ensure that moving the logic from Pipeline to REH will preserve same semantic in Exchange about IN / OUT.
However if the API is agreed the IN OUT could be simplified and it would be easier to move this logic without breaking stuff.
davsclaus:1247468617:2009-07-13T15:03:37.554+0000:1247468617:2009-07-13T15:03:37.554+0000:After digging a bit more the copy facade is the best option
davsclaus:1269833511:2010-03-29T11:31:51.047+0000:1269833511:2010-03-29T11:31:51.047+0000:We need to do this when we incorporate the copy of write message facade API in Camel which allows us to be optimize Camel in several ways. However this work would require a lot of work to get done properly and hence we need a time where its feasible such as Camel 2.5/3.0.
davsclaus:1308560847:2011-06-20T17:07:27.572+0000:1308560847:2011-06-20T17:07:27.572+0000:Implemented this today"
0,CAMEL-1816,Bug,Major,None,None,"
None
",Closed,Not A Problem,2.0-M3,Claus Ibsen,Moulliard Charles,0,1,2009-07-09 12:39:52+00:00,2009-11-21 11:59:12+00:00,"Hi,


When I use the following route :


        <camel:route errorHandlerRef=""txErrorHandler""> 
			<camel:from ref=""directRequestEndpoint""/>
				<camel:transacted ref=""PROPAGATION_REQUIRED""/>
				<camel:doTry>
					<!-- Call the requestService to save the request -->
					<camel:bean ref=""serviceHelper"" method=""createRequest""/>
					<camel:bean ref=""serviceHelper"" method=""generateError"" />
					<camel:to ref=""queueRequestEndpoint"" />
					<camel:doCatch>
						<!-- <camel:exception>com.xpectis.x3s.exception.X3SException</camel:exception>
						<camel:bean ref=""serviceHelper"" method=""processException""/> -->
						<camel:exception>java.lang.Exception</camel:exception>
						<camel:rollback message=""Exception occur""/>
						<camel:to ref=""queueReportingEndpoint"" />
					</camel:doCatch>
				</camel:doTry>
		</camel:route>


the following error is generated on the console :


14:38:26,437 | DEBUG | 1: FileComponent | HibernateTransactionManager      | ate3.HibernateTransactionManager  442 | Found thread-bound Session [org.hibernate.impl.SessionImpl@a62f5b] for Hibernate transaction
14:38:26,453 | DEBUG | 1: FileComponent | nager$$EnhancerByCGLIB$$4617a97b | stractPlatformTransactionManager  469 | Participating in existing transaction
14:38:26,453 | DEBUG | 1: FileComponent | AbstractSaveEventListener        | nt.def.AbstractSaveEventListener  320 | executing identity-insert immediately
14:38:26,453 | DEBUG | 1: FileComponent | AbstractBatcher                  | g.hibernate.jdbc.AbstractBatcher  410 | about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
14:38:26,453 | DEBUG | 1: FileComponent | SQL                              | ate.jdbc.util.SQLStatementLogger  111 | 
    insert 
    into
        x3stst.REQUEST
        (FIL_NM, REQ_STU, BODY_TX, REQ_TYP, CRT_USR_NM, CRT_TS, LUP_USR_NM, LUP_TS) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
14:38:26,453 | DEBUG | 1: FileComponent | IdentifierGeneratorFactory       | te.id.IdentifierGeneratorFactory   95 | Natively generated identity: 1449
14:38:26,453 | DEBUG | 1: FileComponent | AbstractBatcher                  | g.hibernate.jdbc.AbstractBatcher  418 | about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
14:38:26,468 | DEBUG | 1: FileComponent | BeanProcessor                    | mel.component.bean.BeanProcessor  147 | Setting bean invocation result on the IN message: com.xpectis.x3s.platform.model.Request@1dbc091
14:38:26,468 | INFO  | 1: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2908-1247142325218-0-10 >>>  -->, Pattern:InOnly, Headers:

{CamelFileNameOnly=OINP-dummy.txt, CamelFileRelativePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileLastModified=Tue Jun 16 14:50:55 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP-dummy.txt, origin=file, CamelBeanMultiParameterArray=false, messageType=OINP, CamelBeanMethodName=null, CamelFileName=OINP-dummy.txt, CamelFileLength=332, CamelFilePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileParent=d:\temp\data\oinp, CamelFileAbsolute=true}

, BodyType:com.xpectis.x3s.platform.model.Request, Body:com.xpectis.x3s.platform.model.Request@1dbc091
14:38:26,468 | DEBUG | 1: FileComponent | DefaultListableBeanFactory       | tory.support.AbstractBeanFactory  214 | Returning cached instance of singleton bean 'serviceHelper'
14:38:26,484 | INFO  | 1: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger  166 | ID-dell-charles-2908-1247142325218-0-10 >>>  -->, Pattern:InOnly, Headers:

{CamelFileNameOnly=OINP-dummy.txt, CamelFileRelativePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileLastModified=Tue Jun 16 14:50:55 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP-dummy.txt, origin=file, CamelBeanMultiParameterArray=false, messageType=OINP, CamelBeanMethodName=null, CamelFileName=OINP-dummy.txt, CamelFileLength=332, CamelFilePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileParent=d:\temp\data\oinp, CamelFileAbsolute=true}

, BodyType:com.xpectis.x3s.platform.model.Request, Body:com.xpectis.x3s.platform.model.Request@1dbc091, Exception: java.lang.IllegalArgumentException: Generate error
14:38:26,484 | DEBUG | 1: FileComponent | Pipeline                         | .apache.camel.processor.Pipeline   95 | Message exchange has failed so breaking out of pipeline: Exchange[GenericFileMessage with body: com.xpectis.x3s.platform.model.Request@1dbc091] exception: java.lang.IllegalArgumentException: Generate error
14:38:26,515 | INFO  | 1: FileComponent | TraceInterceptor                 | rg.apache.camel.processor.Logger   88 | ID-dell-charles-2908-1247142325218-0-11 >>>  --> [class java.lang.Exception], Pattern:InOnly, Headers:

{CamelFileNameOnly=OINP-dummy.txt, CamelFileRelativePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileLastModified=Tue Jun 16 14:50:55 CEST 2009, CamelFileAbsolutePath=d:\temp\data\oinp\OINP-dummy.txt, origin=file, CamelBeanMultiParameterArray=false, messageType=OINP, CamelBeanMethodName=null, CamelFileName=OINP-dummy.txt, CamelFileLength=332, CamelFilePath=d:\temp\data\oinp\OINP-dummy.txt, CamelFileParent=d:\temp\data\oinp, CamelFileAbsolute=true}

, BodyType:com.xpectis.x3s.platform.model.Request, Body:com.xpectis.x3s.platform.model.Request@1dbc091
14:38:26,515 | DEBUG | 1: FileComponent | Pipeline                         | .apache.camel.processor.Pipeline   95 | Message exchange has failed so breaking out of pipeline: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091] exception: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
14:38:26,515 | DEBUG | 1: FileComponent | TryProcessor                     | che.camel.processor.TryProcessor  115 | The exception is handled: true for the exception: java.lang.IllegalArgumentException caused by: Generate error
14:38:26,515 | DEBUG | 1: FileComponent | TransactionErrorHandler          | rg.apache.camel.processor.Logger  197 | Rollback exchange due: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
14:38:26,515 | DEBUG | 1: FileComponent | TransactionErrorHandler          | processor.RedeliveryErrorHandler  361 | This exchange is not handled so its marked as failed: Exchange[GenericFileMessage with body: com.xpectis.x3s.platform.model.Request@1dbc091]
14:38:26,515 | DEBUG | 1: FileComponent | TransactionErrorHandler          | ng.spi.TransactionErrorHandler$1  127 | Setting transaction to rollbackOnly due to exception being thrown: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
14:38:26,515 | DEBUG | 1: FileComponent | TransactionTemplate              | tion.support.TransactionTemplate  152 | Initiating transaction rollback on application exception
org.apache.camel.spring.spi.TransactedRuntimeCamelException: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
	at org.apache.camel.spring.spi.TransactionErrorHandler.wrapTransactedRuntimeException(TransactionErrorHandler.java:170)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:121)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:62)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:142)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:62)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:63)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:198)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
	at org.apache.camel.processor.RollbackProcessor.process(RollbackProcessor.java:42)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.processor.TryProcessor.handleException(TryProcessor.java:110)
	at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:78)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	... 59 more
14:38:26,515 | DEBUG | 1: FileComponent | nager$$EnhancerByCGLIB$$4617a97b | stractPlatformTransactionManager  828 | Participating transaction failed - marking existing transaction as rollback-only
14:38:26,515 | DEBUG | 1: FileComponent | HibernateTransactionManager      | ate3.HibernateTransactionManager  695 | Setting Hibernate transaction on Session [org.hibernate.impl.SessionImpl@a62f5b] rollback-only
14:38:26,515 | DEBUG | 1: FileComponent | TransactionTemplate              | tion.support.TransactionTemplate  152 | Initiating transaction rollback on application exception
org.apache.camel.spring.spi.TransactedRuntimeCamelException: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
	at org.apache.camel.spring.spi.TransactionErrorHandler.wrapTransactedRuntimeException(TransactionErrorHandler.java:170)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:121)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:33)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:128)
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:86)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:62)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:142)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:62)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:63)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:198)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
Caused by: org.apache.camel.RollbackExchangeException: Exception occur on the exchange: Exchange[Message: com.xpectis.x3s.platform.model.Request@1dbc091]
	at org.apache.camel.processor.RollbackProcessor.process(RollbackProcessor.java:42)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.processor.TryProcessor.handleException(TryProcessor.java:110)
	at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:78)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$101(TransactionErrorHandler.java:41)
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:114)
	... 59 more","davsclaus:1247114939:2009-07-09T12:48:59.055+0000:1247114939:2009-07-09T12:48:59.055+0000:The stacktrace does not indicate any error. All is DEBUG level output with stacktraces that a rollback was forced.

And the TM said it is going to do a rollback
{code}
4:38:26,515 | DEBUG | 1: FileComponent | TransactionTemplate | tion.support.TransactionTemplate 152 | Initiating transaction rollback on application exception
{code}


cmoulliard:1247120583:2009-07-09T14:23:03.805+0000:1247120583:2009-07-09T14:23:03.805+0000:I don't know if it is related or not. But If I remove the <transacted/> in my route, I see this error in the log :

org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.IllegalArgumentException: interface org.hibernate.jdbc.ConnectionWrapper is not visible from class loader
	at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:599)
	at sun.reflect.GeneratedMethodAccessor104.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56)
	at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:635)
	at org.springframework.orm.hibernate3.HibernateTransactionManager$$EnhancerByCGLIB$$4a379526.doBegin(<generated>)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:374)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:263)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:101)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy217.saveRequest(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:307)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.doInvoke(ServiceInvoker.java:58)
	at org.springframework.osgi.service.importer.support.internal.aop.ServiceInvoker.invoke(ServiceInvoker.java:62)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invokeUnprivileged(ServiceTCCLInterceptor.java:56)
	at org.springframework.osgi.service.util.internal.aop.ServiceTCCLInterceptor.invoke(ServiceTCCLInterceptor.java:39)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.osgi.service.importer.support.LocalBundleContextAdvice.invoke(LocalBundleContextAdvice.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:131)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
	at $Proxy267.saveRequest(Unknown Source)
	at com.xpectis.x3s.core.util.ServiceHelper.createRequest(ServiceHelper.java:127)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:193)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:115)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:118)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.TryProcessor.process(TryProcessor.java:63)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:70)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:45)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:65)
	at org.apache.camel.processor.SendProcessor$1.doInProducer(SendProcessor.java:62)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:142)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:62)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:53)
	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:82)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:148)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.processExchange(RedeliveryErrorHandler.java:186)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:155)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:88)
	at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:49)
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:148)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:73)
	at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
	at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:198)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:120)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:93)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:98)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.IllegalArgumentException: interface org.hibernate.jdbc.ConnectionWrapper is not visible from class loader
	at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353)
	at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)
	at org.hibernate.jdbc.BorrowedConnectionProxy.generateProxy(BorrowedConnectionProxy.java:91)
	at org.hibernate.jdbc.ConnectionManager.borrowConnection(ConnectionManager.java:186)
	at org.hibernate.jdbc.JDBCContext.borrowConnection(JDBCContext.java:134)
	at org.hibernate.impl.SessionImpl.connection(SessionImpl.java:386)
	at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:510)
cmoulliard:1247120630:2009-07-09T14:23:50.662+0000:1247120630:2009-07-09T14:23:50.662+0000:This point is discussed in this spring ticket : http://jira.springframework.org/browse/SPR-5036?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel
but I use spring Tx 2.5.6
cmoulliard:1247122337:2009-07-09T14:52:17.919+0000:1247122337:2009-07-09T14:52:17.919+0000:Concerning the error reported in my last comment. This one appears if inside a Camelcontext some routes where db access exist (behind camel bean / spring) are not defined as transacted

e.g.

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
	<!--
		Copyright (C) 1998-2009 Streamlined Solutions and Services.
		All Rights Reserved. 

	-->
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:context=""http://www.springframework.org/schema/context""
	xmlns:osgi=""http://www.springframework.org/schema/osgi""
	xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""
	    http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/osgi
		http://www.springframework.org/schema/osgi/spring-osgi.xsd
		http://camel.apache.org/schema/osgi
		http://camel.apache.org/schema/osgi/camel-osgi.xsd
		http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd"">
	
    <bean id=""aggregationStrat"" class=""com.xpectis.x3s.core.util.x3sAggregationStrategy"" />
 
    <camel:camelContext id=""InToOut"" trace=""true"" xmlns=""http://camel.apache.org/schema/osgi"">
	
        <!-- Core component 
	     Flow IN to OUT
	     Process P1
	    -->        
        <camel:route>
			<camel:from ref=""fileClientEndpoint"" />
			
 			<camel:doTry>
				<camel:setHeader headerName=""origin"">
					<camel:constant>file</camel:constant>
				</camel:setHeader>
beans 
				<!-- Set Message type header with the name of the parent folder -->				
				<camel:bean ref=""serviceHelper"" method=""getParentFolderName""/>
				
		    	<camel:convertBodyTo type=""java.lang.String""/>
				<camel:to ref=""directRequestEndpoint"" />

				<camel:doCatch>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:to uri=""log:x3sLog?level=DEBUG&amp;multiline=true"" />
				</camel:doCatch>
			</camel:doTry>

		</camel:route>
        
        <!-- Core component 
	     Flow IN to OUT
	     Process P2 
	    -->
        <camel:route errorHandlerRef=""txErrorHandler""> 
			<camel:from ref=""directRequestEndpoint""/>
				<camel:transacted ref=""PROPAGATION_REQUIRED""/>
				<camel:doTry>
					<!-- Call the requestService to save the request -->
					<camel:bean ref=""serviceHelper"" method=""createRequest""/>
					<!-- <camel:bean ref=""serviceHelper"" method=""generateError"" />  -->
					<camel:to ref=""queueRequestEndpoint"" />
					<camel:doCatch>
						<camel:exception>com.xpectis.x3s.exception.X3SException</camel:exception>
						<camel:bean ref=""serviceHelper"" method=""processException""/>
						<!-- <camel:rollback message=""Exception occur""/>  -->
						<camel:to ref=""queueReportingEndpoint"" />
					</camel:doCatch>
				</camel:doTry>
		</camel:route>

        <!-- Core component 
	     Flow IN to OUT
	     Process P3 technical parsing
	    --> 		
        <camel:route>
			<camel:from ref=""queueRequestEndpoint"" />
			<camel:doTry>
			
				<camel:convertBodyTo type=""com.xpectis.x3s.platform.model.Request"" />
			
				<!-- Parse the request -->
				<camel:bean ref=""serviceHelper"" method=""parseRequest""/>

            	<!-- Check if the request has been parsed -->
				<camel:choice>
					<camel:when>
						<camel:ognl>request.headers.requestStatus = 'ACCEPTED'</camel:ognl>
			        	<camel:to ref=""directRequestMessageEndpoint"" />
					</camel:when>
					<camel:when>
						<camel:ognl>request.headers.requestStatus = 'REJECTED'</camel:ognl>
			        	<camel:to ref=""queueReportingEndpoint"" />
					</camel:when>
					<camel:otherwise>
				      	<camel:to ref=""queueReportingEndpoint"" />
					</camel:otherwise>
				</camel:choice>
			<camel:doCatch>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:to ref=""queueReportingEndpoint"" />
			</camel:doCatch>
			</camel:doTry>						
    	</camel:route>
        
        <!-- Core component 
	     Flow IN to OUT
	     Process P3 request message creation
	    --> 		
        <camel:route>  	
			<camel:from ref=""directRequestMessageEndpoint"" />

                        //
			// Transacted has been removed here
                        //
			
			<!-- Split the collection of messages -->
			<camel:split strategyRef=""aggregationStrat"">
				<camel:ognl>request.body</camel:ognl>

				<!-- (1) Call the service to save the request message -->
			    <camel:bean ref=""serviceHelper"" method=""createRequestMessage""/>
			    
			    <!-- (2) Validate the business message -->
			    <camel:bean ref=""serviceHelper"" method=""validateRequestMessage""/>
			    
			    <!-- (3) Save business message -->
			    <camel:bean ref=""serviceHelper"" method=""saveRequestMessage""/>
			    
			</camel:split>
			
			<!-- Update Request status -->
			<camel:bean ref=""serviceHelper"" method=""updateRequestStatus"" />
			
			<!-- Put result in queue -->
			<camel:to ref=""queueRequestMessageEndpoint"" />
			
    	</camel:route>
    	
    	<!-- Core component 
	     Flow IN to OUT
	     Process P4 request message transformation
	    --> 
	    <camel:route errorHandlerRef=""txErrorHandler"">
			<camel:from ref=""queueRequestMessageEndpoint"" />
			<camel:convertBodyTo type=""java.util.List"" />
			<camel:transacted ref=""PROPAGATION_REQUIRED""/>
			<camel:split>
				<!-- Iterate through the Request list -->
				<camel:ognl>request.body</camel:ognl>
				<camel:bean ref=""serviceHelper"" method=""transformRequestMessage"" />
				
			<!-- Check if the request has been transformed -->
			<camel:choice>
				<camel:when>
					<camel:ognl>request.body.ProcessingStatus = true</camel:ognl>
			        <camel:to ref=""directTransformedRequestMessageEndpoint"" />
				</camel:when>
				<camel:when>
					<camel:ognl>request.body.ProcessingStatus = false</camel:ognl>
			        <camel:to ref=""queueReportingEndpoint"" />
				</camel:when>
				<camel:otherwise>
				      <camel:to ref=""queueReportingEndpoint"" />
				</camel:otherwise>
			</camel:choice>
			</camel:split> 
	    
	    </camel:route> 
	    
    	<!-- Core component 
	     Flow IN to OUT
	     Process P5 Sendrequest message transformation
	    --> 
	    <camel:route>
	    	<camel:from ref=""directTransformedRequestMessageEndpoint""/>
            <camel:bean ref=""serviceHelper"" method=""createFixMessageFromRequest""/>
            <camel:to ref=""quickFixClientEndpoint""/>
        </camel:route>    
	    
	    
	</camel:camelContext>
</beans>
{code}
cmoulliard:1247124351:2009-07-09T15:25:51.096+0000:1247124351:2009-07-09T15:25:51.096+0000:I have added DynamicImport-Package : * in the manifest file of Spring AOP and the second error mentioned has disappeared.
cmoulliard:1247124607:2009-07-09T15:30:07.906+0000:1247124607:2009-07-09T15:30:07.906+0000:The rollback occurs. Sorry for my mistake

Nevertheless, I don't understand why we have an error in the log when rollback occurs !!!!!
davsclaus:1247129290:2009-07-09T16:48:10.979+0000:1247129290:2009-07-09T16:48:10.979+0000:I think the spring framework regardless what will log the stacktrace at DEBUG level if it does a rollback forced by an exception. Yeah its quite verbose in the log, but thats the pain for the gain :)

Maybe I can force the rollback with an exception triggering it. But I am busy at the moment with other stuff.
davsclaus:1247384952:2009-07-12T15:49:12.919+0000:1247384952:2009-07-12T15:49:12.919+0000:Its spring that logs much when using DEBUG level logging. When using INFO level logging its not verbose.
davsclaus:1258775952:2009-11-21T11:59:12.410+0000:1258775952:2009-11-21T11:59:12.410+0000:Closing all 2.0M3 tickets"
0,CAMEL-1815,Task,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-09 04:06:23+00:00,2009-11-21 11:59:12+00:00,"See nabble
http://www.nabble.com/Missing-debug.xml-in-2.0-M2-td24400032.html","davsclaus:1247102177:2009-07-09T09:16:17.054+0000:1247102177:2009-07-09T09:16:17.054+0000:trunk: 792468.
davsclaus:1258775952:2009-11-21T11:59:12.389+0000:1258775952:2009-11-21T11:59:12.389+0000:Closing all 2.0M3 tickets"
0,CAMEL-1814,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Duplicate,2.0-M3,Claus Ibsen,Terry Jeske,0,0,2009-07-09 04:00:58+00:00,2009-11-21 11:59:12+00:00,"I get the following error trying to run camel from ant with the debug arg. I checked and debug.xml is indeed missing from the 2.0-M2 release.  (trace.xml is missing as well).


Adding java] [                          main] MainSupport                    INFO  Apache Camel 2.0-M2 starting
[java] [                          main] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@253498: display name [org.spri
ngframework.context.support.ClassPathXmlApplicationContext@253498]; startup date [Wed Jul 08 14:45:33 PDT 2009]; root of context hierarchy
[java] [                          main] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from class path resource [META-INF/services/org/apache/camel/spring/debug.xml]
[java] [                          main] MainSupport                    INFO  Apache Camel 2.0-M2 stopping
[java] [                          main] MainSupport                    ERROR Failed: org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document fro
m class path resource [META-INF/services/org/apache/camel/spring/debug.xml]; nested exception is java.io.FileNotFoundException: class path resource [META-INF/services/org/apache/camel/spring
/debug.xml] cannot be opened because it does not exist
[java] org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [META-INF/services/org/apache/camel/spring/debug.xml]; n
ested exception is java.io.FileNotFoundException: class path resource [META-INF/services/org/apache/camel/spring/debug.xml] cannot be opened because it does not exist
[java]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:349)
[java]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:310)
[java]     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)
[java]     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)
[java]     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:149)
[java]     at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:212)
[java]     at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:113)
[java]     at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:80)
[java]     at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:123)
[java]     at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:423)
[java]     at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:353)
[java]     at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
[java]     at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
[java]     at org.apache.camel.spring.Main.getParentApplicationContext(Main.java:159)
[java]     at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:227)
[java]     at org.apache.camel.spring.Main.doStart(Main.java:185)
[java]     at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52)
[java]     at org.apache.camel.impl.MainSupport.run(MainSupport.java:120)
[java]     at org.apache.camel.impl.MainSupport.run(MainSupport.java:298)
[java]     at org.apache.camel.spring.Main.main(Main.java:97)
[java] Caused by: java.io.FileNotFoundException: class path resource [META-INF/services/org/apache/camel/spring/debug.xml] cannot be opened because it does not exist
[java]     at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:142)
[java]     at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)","davsclaus:1247102355:2009-07-09T09:19:15.998+0000:1247102355:2009-07-09T09:19:15.998+0000:CAMEL-1815

Debugger is removed in 2.0. And marked as @deprecated in 1.x.

You can instead use
- Tracer
- Interceptor
- Add you own InterceptStrategy where you can do your own debugging


And for a debugger use something like the FUSE Integration Designer that has a real Camel debugger.

davsclaus:1247102399:2009-07-09T09:19:59.122+0000:1247102399:2009-07-09T09:19:59.122+0000:And the -t option for trace should be fixed so you can use it from ANT again.
davsclaus:1258775952:2009-11-21T11:59:12.367+0000:1258775952:2009-11-21T11:59:12.367+0000:Closing all 2.0M3 tickets"
0,CAMEL-1813,Bug,Major,2.0-M2,None,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Willem Jiang,0,0,2009-07-09 00:45:40+00:00,2009-11-21 11:59:12+00:00,"Here is the mail thread which discuss about it.
http://www.nabble.com/HTTP-component-and-IN-head-loss-to24393415.html","njiang:1247086096:2009-07-09T04:48:16.652+0000:1247086096:2009-07-09T04:48:16.652+0000:trunk
http://svn.apache.org/viewvc?rev=792381&view=rev
davsclaus:1258775952:2009-11-21T11:59:12.345+0000:1258775952:2009-11-21T11:59:12.345+0000:Closing all 2.0M3 tickets"
0,CAMEL-1812,Task,Minor,"1.6.1, 2.0-M2",None,"
None
",Closed,Fixed,"1.6.2, 2.0-M3",Hadrian Zbarcea,Hadrian Zbarcea,0,0,2009-07-08 20:58:46+00:00,2009-11-21 11:59:12+00:00,As per http://www.nabble.com/-DISCUSSION---VOTE----remove-%40author-tags-in-code-to24368095.html,"hadrian:1247058061:2009-07-08T21:01:01.368+0000:1247060846:2009-07-08T21:47:26.019+0000:r792319 (trunk)
r792334 (camel-1.x)
davsclaus:1258775952:2009-11-21T11:59:12.322+0000:1258775952:2009-11-21T11:59:12.322+0000:Closing all 2.0M3 tickets"
0,CAMEL-1811,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-08 14:02:14+00:00,2009-11-21 11:59:12+00:00,"See nabble
http://www.nabble.com/CamelContext-No-Longer-Auto-Wires-Via-Package-Element--td24363086.html","davsclaus:1247035366:2009-07-08T14:42:46.700+0000:1247035366:2009-07-08T14:42:46.700+0000:trunk: 792166.
davsclaus:1258775952:2009-11-21T11:59:12.303+0000:1258775952:2009-11-21T11:59:12.303+0000:Closing all 2.0M3 tickets"
0,CAMEL-1810,New Feature,Major,2.1.0,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Seumas Soltysik,0,0,2009-07-08 13:39:16+00:00,2009-11-21 11:59:12+00:00,"Currently, when creating a cxf-endpoint, a service class is required even when running in PAYLOAD or MESSAGE mode. A service class should only be necessary when running in POJO mode.


Therefore it should be possible to define a cxf endpoint in the following manner:


   <cxf:cxfEndpoint id=""serviceEndpoint"" address=""http://localhost:9000/PersonService/""
      			   wsdlURL=""person.wsdl""
                   endpointName=""person:soap""
                   serviceName=""person:PersonService""                   
                   xmlns:person=""http://camel.apache.org/wsdl-first"">
   </cxf:cxfEndpoint>","seumas.soltysik:1247031643:2009-07-08T13:40:43.656+0000:1247031643:2009-07-08T13:40:43.656+0000:Attaching patch for 1810.
njiang:1247035318:2009-07-08T14:41:58.689+0000:1247035318:2009-07-08T14:41:58.689+0000:Applied patch with thanks to Seumas, also fixed some CS error and added few comments for the code.

http://svn.apache.org/viewvc?rev=792163&view=rev
davsclaus:1258775952:2009-11-21T11:59:12.277+0000:1258775952:2009-11-21T11:59:12.277+0000:Closing all 2.0M3 tickets"
0,CAMEL-1809,Improvement,Major,None,"1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Willem Jiang,0,0,2009-07-08 05:10:03+00:00,2009-11-21 11:59:12+00:00,"I got the user requirement that he just can use one socket port in his application, and his application has lots of camel context.
Current camel-jetty component can't share the connector across the camel contexts,  he had to setup different port the each JettyComponent in different camel context.


Since the socket port is a global resource, we can use a static map to keep the track of the connector. In this way , we can share the Jetty connector in different camel context which host in one JVM.","njiang:1247003885:2009-07-08T05:58:05.474+0000:1247003885:2009-07-08T05:58:05.474+0000:trunk
http://svn.apache.org/viewvc?rev=792038&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=792041&view=rev
davsclaus:1258775952:2009-11-21T11:59:12.252+0000:1258775952:2009-11-21T11:59:12.252+0000:Closing all 2.0M3 tickets"
0,CAMEL-1808,Improvement,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-07 14:42:04+00:00,2009-07-20 04:08:12+00:00,"In some situations in OSGi platforms the file lock can be kept and then you need to shutdown the JVM to clear the JDK FileLock.
So better to not use them as we can just create the file and Camel will still back off reading the file as it can see the lock file exists.","davsclaus:1246948944:2009-07-07T14:42:24.993+0000:1246948944:2009-07-07T14:42:24.993+0000:See forum
http://www.nabble.com/Apache-Felix-Karaf-must-be-restarted-to-remove-lock-on-a-file--consumed-in-a-camel-route-td24368909s22882.html
davsclaus:1246949950:2009-07-07T14:59:10.629+0000:1246949950:2009-07-07T14:59:10.629+0000:trunk: 791854.
cmoulliard:1247095279:2009-07-09T07:21:19.042+0000:1247095279:2009-07-09T07:21:19.042+0000:Can be closed.

I have done a test with modification done about locking and now I can delete the camel lock file after stopping the bundle contaning camel routes

Thx"
0,CAMEL-1807,New Feature,Major,2.0-M2,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Claus Ibsen,0,1,2009-07-07 13:07:38+00:00,2011-04-24 09:58:15+00:00,"JmsProducer can a current time only use fixed reply to



set on component
set on endpoint



We should support using dynamic reply to provided as a camel header.


Setting a Camel header on the IN message with the key CamelJmsReplyTo will do just that.
The downside is the listener of the response is created dynamic and after use its terminated.


Consider using a fixed reply to such as the replyTo on the endpoint instead as the listener can run all the time.","davsclaus:1246943895:2009-07-07T13:18:15.009+0000:1246943895:2009-07-07T13:18:15.009+0000:A patch but the problem is that the affinity should be local scoped only, eg to avoid concurrency issues.

And the patch does not this as it holds state. So it need to be worked some more to support this.
davsclaus:1280716907:2010-08-02T10:41:47.864+0000:1280716907:2010-08-02T10:41:47.864+0000:I think the current request/reply over JMS options we have is sufficient
davsclaus:1303610295:2011-04-24T09:58:15.784+0000:1303610295:2011-04-24T09:58:15.784+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1806,Improvement,Major,None,"1.6.2, 2.0.0","
None
",Closed,Fixed,"1.6.2, 2.0.0",Willem Jiang,Willem Jiang,0,0,2009-07-07 03:48:37+00:00,2010-04-28 02:18:33+00:00,"We will have the query parameter with POST and GET method.
But current Camel just support to put these parameters into the message header with the http GET method.


Here is the user requirement of this[1], we should add this support in Camel.


[1] http://www.nabble.com/Jetty-component-and-HTTP-parameter-to24287116.html","njiang:1246913862:2009-07-07T04:57:42.930+0000:1246913862:2009-07-07T04:57:42.930+0000:trunk
http://svn.apache.org/viewvc?rev=791695&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=791698&view=rev
swenvogel:1247187429:2009-07-10T08:57:09.205+0000:1247187429:2009-07-10T08:57:09.205+0000:I have tested the feature with apache-camel-2.0-SNAPSHOT.zip (Thu Jul 09 17:35:12 GMT+00:00 2009)
and send a very simple XML file as request body:

<?xml version=""1.0"" encoding=""ISO-8859-1""?>
<test>
	Hello World
</test>

And i encountered two problems:

1. In the IN message exists the following curious header:

HEADER NAME:
<?xml version 

HEADER VALUE:
""1.0"" encoding=""ISO-8859-1""?>
<test>
	Hello World
</test>

2. The original message body of the IN message is empty when processed by following processor's,
     perhaps the stream cache is not reseted?
davsclaus:1247188015:2009-07-10T09:06:55.744+0000:1247188015:2009-07-10T09:06:55.744+0000:@Willem

1)
I think you should revert this change. POST does not support request parameters.
And since the = sign is in the payload you think its a parameter

Parameter name: <?xml version
Value: the rest of the POST body.

2)
And then you should if POST check the URI string instead and only grab the parameters from there.
There must be a method on HttpRequest that can return the URI used. 
davsclaus:1247188046:2009-07-10T09:07:26.011+0000:1247188046:2009-07-10T09:07:26.011+0000:And add an unit test based sending a XML body in the POST
sergey_beryozkin:1247189283:2009-07-10T09:28:03.376+0000:1247189283:2009-07-10T09:28:03.376+0000:> POST does not support request parameters.

URIs used in POST requests may still contain queries - it may not be regarded as the best use of queries but it may be used. For ex, JAX-RS spec does not prohibit having resource methods like :

@POST
void doPost(@QueryParam(""a"")  String s) {}

Another variation is form submissions, with application/x-www-form-urlencoded. Even though name-value pairs go in the request body, the names can still be accessed as Form parameters. In fact, the WADL spec types such parameters as 'query'

Sergey
njiang:1247190725:2009-07-10T09:52:05.606+0000:1247190725:2009-07-10T09:52:05.606+0000:@Claus
HTTP supports to sent the queries parameters through GET method's URI, 
since there is a length limitation of URI,  it supports to use POST method to sent the queries parameters.
As Sergey said, if the content-type is ""application/x-www-form-urlencoded"" we need to take the parameter from the POST input stream.

I will add a xml unit test and content type verification. 
njiang:1248245327:2009-07-22T14:48:47.239+0000:1248245327:2009-07-22T14:48:47.239+0000:A better solution
trunk
http://svn.apache.org/viewvc?rev=792899&view=rev
camel 1.x
http://svn.apache.org/viewvc?rev=792957&view=rev
davsclaus:1250302877:2009-08-15T10:21:17.791+0000:1250302877:2009-08-15T10:21:17.791+0000:Willem there is still issues with this. When you POST data using x-www-form-urlencoded such as a ascii/binary file you want the content of this to be stored in the message body and not as HTTP headers.

For example
{code}
 curl -d@src/test/data/data.txt http://localhost:9080/myapp/myservice
{code}

Where we want to post the data.txt file to Camel and want its content to be in the body
njiang:1264010999:2010-01-21T02:09:59.035+0000:1264010999:2010-01-21T02:09:59.035+0000:@Claus
If you post the data with ascii or binary the content-type will not be set with ""application/x-www-form-urlencoded"".
So current solution is safe for your case.

BTW, 
When a web browser sends a POST request from an HTML form element, the Internet media type is ""application/x-www-form-urlencoded"".
jnorris:1272053083:2010-04-24T04:04:43.330+0000:1272053083:2010-04-24T04:04:43.330+0000:@Willem If you are proxying POSTs of type ""application/x-www-form-urlencoded"", you don't have a choice to use ascii or binary content type, it's part of someone else's API.

I posted some questions about this here: http://old.nabble.com/jetty%3Ahttp-component-%22mangles%22-x-www-form-urlencoded-POST-in-message%3A-td28348176s22882.html

Am I missing something?  Thanks.
jnorris:1272141172:2010-04-25T04:32:52.596+0000:1272141340:2010-04-25T04:35:40.118+0000:In order to preserve the message body during ""application/x-www-form-urlencoded"" POSTs (for the purpose of proxying http endpoints), I've come up the following solution:  This still propagates the form params to the message headers, but the body is preserved.  Feedback is appreciated.  Thanks.
jnorris:1272141563:2010-04-25T04:39:23.895+0000:1272141563:2010-04-25T04:39:23.895+0000:In order to preserve the message body during ""application/x-www-form-urlencoded"" POSTs (for the purpose of proxying http endpoints), I've come up the following solution: This still propagates the form params to the message headers, but the body is preserved. Feedback is appreciated. Thanks.

(Attached is HttpBinding implementation and an associated unit test).
njiang:1272221158:2010-04-26T02:45:58.531+0000:1272221158:2010-04-26T02:45:58.531+0000:Hi Jeremy
I went through your HttpBindingPreservePostFormUrlEncodedBody.java and found something.
You need to use the request.getCharacterEncoding() to check the message body instead of using ""UTF-8""  directly.

I just broke the readRequst() Method of DefaultHttpBinding into some smaller methods, you can choice if you want populate the message headers from the request parameters.
njiang:1272261390:2010-04-26T13:56:30.934+0000:1272261390:2010-04-26T13:56:30.934+0000:I did some refactoring on current DefaultHttpBinding[1], now you can override the populateMessageHeader in your HttpBinding to avoid putting the form parameter into message header.

[1] https://issues.apache.org/activemq/browse/CAMEL-2673 

Willem"
0,CAMEL-1805,Improvement,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-07-06 13:13:22+00:00,2009-11-21 11:59:12+00:00,"The time option expects a java.util.Date object, but is given a String with the date.


Adding String -> Date converters in the TimerComponent directly so we can convert it to a Date object.


Supports the following to patterns



                sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");
            } else {
                sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");




And adding a new option pattern to allow you to specify the pattern in the URI.","davsclaus:1246857867:2009-07-06T13:24:27.079+0000:1246857867:2009-07-06T13:24:27.079+0000:trunk: 791476.
1.x: 791478.
davsclaus:1258775952:2009-11-21T11:59:12.234+0000:1258775952:2009-11-21T11:59:12.234+0000:Closing all 2.0M3 tickets"
0,CAMEL-1804,Task,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Xueqiang Mi,Jonathan Anstey,0,0,2009-07-06 12:25:48+00:00,2010-06-03 07:23:40+00:00,"The Groovy renderer in CAMEL-1392 will need a comprehensive user guide showing how to use, what DSL features are supported, and any know holes.","janstey:1248079443:2009-07-20T16:44:03.909+0000:1248079443:2009-07-20T16:44:03.909+0000:Perhaps some screen shots of the web console screens would be helpful here?

Also describe the bits of a route that we cannot (yet...) render with the Groovy renderer. Like explain how anonymous classes used in a process() method cannot be rendered properly (and that this problem exists in the XML editor as well).

davsclaus:1252840341:2009-09-13T19:12:21.162+0000:1252840341:2009-09-13T19:12:21.162+0000:Xuegiang what is the status of the user guide? Is it done?
xueqiang.mi:1252868121:2009-09-14T02:55:21.455+0000:1252868121:2009-09-14T02:55:21.455+0000:Hi,Claus, two pages have been written to for the guide.
http://camel.apache.org/groovy-renderer-user-guide.html
http://camel.apache.org/unsupported-groovy-dsl-features-on-web-console.html
You may want to give some advice to improve it.

davsclaus:1252876373:2009-09-14T05:12:53.859+0000:1252876373:2009-09-14T05:12:53.859+0000:The documentation looks good. I think you should add a little introduction to the groovy editor and add a link to it from the web console wiki page.
Then people who look at the web console will know there is this new groovy render/editor and they can find your documentation.
davsclaus:1252876425:2009-09-14T05:13:45.385+0000:1252876425:2009-09-14T05:13:45.385+0000:And its good you have documented that not everything is possible with the groovy render, and that some DSL is not supported. 
davsclaus:1252876441:2009-09-14T05:14:01.830+0000:1252876441:2009-09-14T05:14:01.830+0000:And having screenshots is also great, too. Great.
janstey:1252987732:2009-09-15T12:08:52.489+0000:1252987732:2009-09-15T12:08:52.489+0000:The docs look good. I'm calling this one done. Great work!

Xueqiang, feel free to still make changes to the wiki docs even if this issue is closed.
davsclaus:1275521020:2010-06-03T07:23:40.928+0000:1275521020:2010-06-03T07:23:40.928+0000:Closing old resolved issues"
0,CAMEL-1803,Bug,Minor,"1.6.1, 2.0-M2",2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-06 11:11:04+00:00,2009-11-21 11:59:12+00:00,"If for instance an onException() is handling a given exception the traces of the redelivery headers should be removed from the message.
As if the exchange will fail yet another again then it will continue using counters from where the old left. It should start from 0 again.","davsclaus:1246853638:2009-07-06T12:13:58.130+0000:1246853638:2009-07-06T12:13:58.130+0000:trunk: 791456.
davsclaus:1258775952:2009-11-21T11:59:12.212+0000:1258775952:2009-11-21T11:59:12.212+0000:Closing all 2.0M3 tickets"
0,CAMEL-1802,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,James Strachan,1,2,2009-07-06 10:11:59+00:00,2012-07-06 08:03:36+00:00,thanks to Peter Thygesen for the suggestion,"davsclaus:1341533016:2012-07-06T08:03:36.042+0000:1341533016:2012-07-06T08:03:36.042+0000:Lets close old ticket that are not in demand.

For Camel 3.x we will offer a REST API over the JMX management API so you can get json stats etc."
0,CAMEL-1801,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-06 05:06:22+00:00,2009-11-21 11:59:12+00:00,"When ftp component attempts login it does that once. We should add option to configure how many attempts should be done before giving up.


For instance try 3 times with 1 sec apart.","davsclaus:1246861076:2009-07-06T14:17:56.863+0000:1246861076:2009-07-06T14:17:56.863+0000:trunk: 791486.

Will now by default try 3 times waiting 1 sec apart.
Added options to control this behavior.
davsclaus:1258775952:2009-11-21T11:59:12.190+0000:1258775952:2009-11-21T11:59:12.190+0000:Closing all 2.0M3 tickets"
0,CAMEL-1800,Improvement,Major,2.0-M2,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-06 05:02:15+00:00,2010-06-03 07:23:40+00:00,"We should wait starting the input to the CamelContext until all child processors and other services have been started.


Then at the end we should open the gates by starting all the input consumers.


That should also help unit testing on slower boxes where these consumers might start a bit early and the remaining work starting the other processors is slow and thus the consumer is too fast.","davsclaus:1253487591:2009-09-21T06:59:51.700+0000:1253487591:2009-09-21T06:59:51.700+0000:Already works this way
davsclaus:1253488309:2009-09-21T07:11:49.690+0000:1253488309:2009-09-21T07:11:49.690+0000:Improving this to start the consumers at the very end as in description.
davsclaus:1253505201:2009-09-21T11:53:21.462+0000:1253505201:2009-09-21T11:53:21.462+0000:trunk: 817214.
davsclaus:1275521020:2010-06-03T07:23:40.704+0000:1275521020:2010-06-03T07:23:40.704+0000:Closing old resolved issues"
0,CAMEL-1799,New Feature,Major,2.0-M2,2.3.0,"
None
",Closed,Fixed,2.3.0,Willem Jiang,Claus Ibsen,0,0,2009-07-05 13:00:54+00:00,2011-04-24 10:01:14+00:00,"We could use an DSL for error handling in Spring DSL


Then we can use the <redeliveryPolicy/> tag as well. And have an enum to specify the type in case we want a dead letter channel instead or transactional instead



<errorHandler id=""myErrorHandler"" type=""DeadLetterChannel"">
    <deadLetter uri=""log:dead""/>
    <redeliveryPolicy maximumRedeliveries=""5"" logStackTrace=""true"" backOffMultiplier=""2""/>
</errorHandler>","davsclaus:1246770089:2009-07-05T13:01:29.968+0000:1246770089:2009-07-05T13:01:29.968+0000:Currently it is a bit verbose and its the only feature in Spring DSL that requires to use spring bean style.
davsclaus:1246770180:2009-07-05T13:03:00.096+0000:1246770180:2009-07-05T13:03:00.096+0000:And you can define multiple of them with unique ids that you can refer to in the routes

{code}
<route errorHandlerRef=""myErrorHandler"">
...
</route>

<route errorHandlerRef=""myOtherErrorHandler"">
...
</route>
{code}
njiang:1269545272:2010-03-26T03:27:52.574+0000:1269545272:2010-03-26T03:27:52.574+0000:I just put the deadLetterUri  into the errorHandler's attribute.
Now You can configure the errorHandler like this 
{code}
   <errorHandler id=""a"" type=""DeadLetterChannel"" deadLetterUri=""mock:a"" handled=""true""
       useOriginalMessage=""true"" xmlns=""http://camel.apache.org/schema/spring"">
       <redeliveryPolicy maximumRedeliveries=""2"" redeliveryDelay=""0"" logStackTrace=""false"" />
    </errorHandler>
{code}
davsclaus:1269548962:2010-03-26T04:29:22.923+0000:1269548962:2010-03-26T04:29:22.923+0000:Willem good start.

I would suggest to
- use an enum for the type as you then have type safe choices in the XML editor. And you are missing the TransactionalErrorHandler its in camel-spring :)
- handled should be default true as its should always be true for error handlers. That way you do not need to configure it explicit.

And add more unit tests as error handling is very complex and we should have it well tested.


davsclaus:1269549022:2010-03-26T04:30:22.824+0000:1269549022:2010-03-26T04:30:22.824+0000:And could it be possible to configure it *inside* <camelContext> as well?
njiang:1269551551:2010-03-26T05:12:31.423+0000:1269551551:2010-03-26T05:12:31.423+0000:@Claus
Thanks for the suggestion, I will keep working on it today :)

njiang:1269638495:2010-03-27T05:21:35.459+0000:1269638495:2010-03-27T05:21:35.459+0000:@Claus,

I just committed some enhancement patches of this issue according to your suggestion, please have a look at them :)
BTW, 
I didn't find a way to set the handled attribute default value to be true by changing the ErrorHandlerDefintion code, 
It looks like the JAXB annotation only supports set the default value of element.


njiang:1269638537:2010-03-27T05:22:17.941+0000:1269638537:2010-03-27T05:22:17.941+0000:TODO update the document of the errorHandler.
davsclaus:1269676836:2010-03-27T16:00:36.683+0000:1269676955:2010-03-27T16:02:35.855+0000:Hi Willem

I have more comments
- The class ErrorHandlerDefintion is misspelt - it should be Definition
- I think we should let the <errorHandler> support the most commonly used options and therefore remove some of the advanced options you really newer use anyway
- option handled should be removed (in fact I think we should @deprecated it on the Java DSL error handler builder as well)
- I do not think we should add the new notion you added to set those advanced options they way you do. Its really not easy to use and intuitive as its a notion that we do not already use in other places.

I think the following code should be removed
{code}
    @XmlElements({
        @XmlElement(name = ""exceptionPolicyStrategy"",  required = false),
        @XmlElement(name = ""onRedelivery"", required = false),
        @XmlElement(name = ""failureProcessor"", required = false),
        @XmlElement(name = ""transactionTemplate"", required = false),
        @XmlElement(name = ""deadLetter"", required = false)})
    private List beans; 
{code}

And instead I propose to add String to indicate ref's instead which can be attributes in the XML instead. And only use these two options:
- onRedeliveryRef
- transactionTemplateRef

the reset is *not* commonly needed. In fact failureProcessors is *not* something end users should configure. Its an *internal* thing Camel uses.


davsclaus:1269676931:2010-03-27T16:02:11.394+0000:1269676931:2010-03-27T16:02:11.394+0000:For example this notion is really not something that is intuitive. You should of course just use {{deadLetterUri}} attribute to set the destination for the DLQ


{code:xml}
+    <camel:errorHandler id=""deadLetterErrorHandler"" type=""DeadLetterChannel"" handled=""true"">
+       <camel:redeliveryPolicy maximumRedeliveries=""2"" redeliveryDelay=""1000"" logHandled=""true"" />
+       <camel:deadLetter>
+           <bean class=""org.apache.camel.component.direct.DirectEndpoint"">
+               <constructor-arg>
+                  <value>direct:start</value>
+               </constructor-arg>
+           </bean>
+       </camel:deadLetter>
{code}
davsclaus:1269677126:2010-03-27T16:05:26.879+0000:1269677126:2010-03-27T16:05:26.879+0000:Which should simply just be
{code:xml}
<errorHandler id=""myEH"" type=""DeadLetterChannel"" deadLetterUri=""log:dead"">
    <redeliveryPolicy maximumRedeliveries=""2"" redeliveryDelay=""1000""/>
</errorHandler>
{code}

And I wonder if we can make the {{type}} default to be *DefaultErrorHandler* then its even easier to configure for default use cases
njiang:1269800075:2010-03-29T02:14:35.208+0000:1269800075:2010-03-29T02:14:35.208+0000:Hi Claus,

I just committed a patch with your suggestion, the errorHandler Spring DSL is more clean now :)



davsclaus:1269831803:2010-03-29T11:03:23.318+0000:1269831803:2010-03-29T11:03:23.318+0000:Willem this is great. Its much better now.

I wonder if it would be _too_ much and have it being able understand than if you have set either a
- deadLetterUri
- transactionTemplateRef

And *not* change the type accordingly it should either
a) fail and say its a miss match. eg default type != deadLetterUri
b) or just change the type to the most appropiate type (deadLetterUri => deadLetterChannel) etc.

Maybe option b is _too_ magic. At least we should check for option a and throw an exception with the problem.

I do like option a the most as its the concept of least surprise. That you have to set a correct _type_ and matching options.


The other road to go, would be creating specialized XML for each different error handler, eg:
{code:xml}
  <deadLetterChannel .../>
  <defaultErrorHandler ../>
  <noErrorHandler ../>
  <loggingErrorHandler .../>
   <transactionalErrorHandler ../>
{code}

That is of course a bigger problem with 5 different XML types for the *same* as its an error handler.

So for now I think we should go for option a and add validation check for how the XML error handler was configured.
davsclaus:1303610474:2011-04-24T10:01:14.547+0000:1303610474:2011-04-24T10:01:14.547+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1798,Improvement,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-05 12:49:52+00:00,2009-11-21 11:59:12+00:00,"The DefaultErrorHandler is not redelivering by default.


We should have the same setting for the dead letter channel. Then its the same for all error handlers in Camel that redelivery is not enable at all, and people should explicit enable it if they need it.","davsclaus:1246835001:2009-07-06T07:03:21.148+0000:1246835001:2009-07-06T07:03:21.148+0000:trunk: 791395.

Fix part of this bigger commit. 
davsclaus:1258775952:2009-11-21T11:59:12.173+0000:1258775952:2009-11-21T11:59:12.173+0000:Closing all 2.0M3 tickets"
0,CAMEL-1797,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-05 09:46:38+00:00,2009-11-21 11:59:12+00:00,The tracer is Spring DSL is under some circumstances being registered twice and thus doing double tracing.,"davsclaus:1246760279:2009-07-05T10:17:59.699+0000:1246760279:2009-07-05T10:17:59.699+0000:trunk: 791215.
davsclaus:1258775952:2009-11-21T11:59:12.152+0000:1258775952:2009-11-21T11:59:12.152+0000:Closing all 2.0M3 tickets"
0,CAMEL-1796,Wish,Minor,2.0-M2,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,2,2009-07-03 15:52:38+00:00,2012-07-06 08:02:49+00:00,http://cwiki.apache.org/confluence/display/labs/vysper,davsclaus:1341532969:2012-07-06T08:02:49.477+0000:1341532969:2012-07-06T08:02:49.477+0000:Lets close old ticket that are not in demand.
0,CAMEL-1795,Bug,Critical,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-07-03 14:54:34+00:00,2009-11-21 11:59:12+00:00,"JmsConfiguratiuon have a bad default
maxMessagesPerTask=1


It should be -1 as we do not want to strict the DefaultMessageListenerContainer to only handle 1 message per thread.","davsclaus:1246604103:2009-07-03T14:55:03.434+0000:1246604103:2009-07-03T14:55:03.434+0000:A workaround is to always use option {{maxMessagesPerTask=-1}} on all your JMS endpoints.
davsclaus:1246605225:2009-07-03T15:13:45.601+0000:1246605225:2009-07-03T15:13:45.601+0000:trunk: 790936
1.x: 790946.

Updated wiki with a warning on the jms page
davsclaus:1258775952:2009-11-21T11:59:12.123+0000:1258775952:2009-11-21T11:59:12.123+0000:Closing all 2.0M3 tickets"
0,CAMEL-1794,Bug,Minor,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Moulliard Charles,Kevin,0,0,2009-07-03 14:48:07+00:00,2010-06-03 07:23:40+00:00,"First of all, thanks a lot for the great tutorial. Actually I think it's the best tutorial for Camel.


Few glitches I found:



In new version of serviceMix 4.x, it changed the command syntax from ""osgi install"" to ""osgi/install"". But in the tutorial, it only mentioned ""osgi install"". If people download the latest servicemix, it will not work.




At the bottom of tutorial web pages, there are couple links. The href links are mismatched. ""Part 2a"" points xxx-part2.html, ""Part 2b"" links to xxx-part2a.html, etc.




cannot build reportincident.activemq in the attached resource. The error is:



C:\temp\grid-console\reportincident.activemq>mvn          install org.ops4j:maven-pax-plugin:eclipse
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building ActiveMQ Queuing engine
[INFO]    task-segment: [install, org.ops4j:maven-pax-plugin:eclipse]
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[ERROR] BUILD ERROR
[INFO] ------------------------------------------------------------------------
[INFO] Cannot find lifecycle mapping for packaging: 'bundle'.
Component descriptor cannot be found in the component repository: org.apache.maven.lifecycle.mapping.LifecycleMappingbundle.
[INFO] ------------------------------------------------------------------------
[INFO] For more information, run Maven with the -e switch
[INFO] ------------------------------------------------------------------------
[INFO] Total time: < 1 second
[INFO] Finished at: Fri Jul 03 07:16:51 PDT 2009
[INFO] Final Memory: 2M/5M
[INFO] ------------------------------------------------------------------------


After I added ""<extensions>true</extensions> "" to the pom.xml, it works.","davsclaus:1252838927:2009-09-13T18:48:47.314+0000:1252838927:2009-09-13T18:48:47.314+0000:Charles can you fix this in your tutorial?
davsclaus:1256645525:2009-10-27T20:12:05.854+0000:1256645525:2009-10-27T20:12:05.854+0000:Charles you could you take a look at this?
cmoulliard:1256882772:2009-10-30T14:06:12.864+0000:1256882772:2009-10-30T14:06:12.864+0000:Part 1 of the tutorial has been review to run the example top of Apache Felix Karaf 1.0.0 and Apache Camel 2.0
cmoulliard:1258694127:2009-11-20T13:15:27.415+0000:1258694127:2009-11-20T13:15:27.415+0000:Part 2 of the tutorial has been updated to run on Apache Felix Karaf 1.0.0

;-)
davsclaus:1275521020:2010-06-03T07:23:40.120+0000:1275521020:2010-06-03T07:23:40.120+0000:Closing old resolved issues"
0,CAMEL-1793,Bug,Major,1.6.1,"1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Jonathan Anstey,Jonathan Anstey,0,0,2009-07-03 13:12:10+00:00,2009-11-21 11:59:12+00:00,"Sometimes I get the following error


[23:59:55]: Running org.apache.camel.itest.customerrelations.CustomerServicesWsAddressingTest
[00:00:06]: Exception in thread ""DefaultMessageListenerContainer-4"" java.lang.NullPointerException
[00:00:06]: at java.lang.String.indexOf(String.java:1564)
[00:00:06]: at java.lang.String.indexOf(String.java:1546)
[00:00:06]: at org.springframework.jms.support.JmsUtils.buildExceptionMessage(JmsUtils.java:255)
[00:00:06]: at org.springframework.jms.listener.DefaultMessageListenerContainer.handleListenerSetupFailure(DefaultMessageListenerContainer.java:745)
[00:00:06]: at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:897)
[00:00:06]: at java.lang.Thread.run(Thread.java:595)


... which then causes a hang. Its a known issue in spring-jms 2.5.6 (http://jira.springframework.org/browse/SPR-5470). Happens when we try to do a shutdown of the context. Reverting back to 2.5.5 fixes this issue, but we probably don't want to do that","janstey:1246598229:2009-07-03T13:17:09.521+0000:1246598229:2009-07-03T13:17:09.521+0000:Seems that switching to a VM transport in ActiveMQ changes the original exception being thrown (not null anymore) and so we don't hit this spring-jms bug. Will commit this in a few mins. Of course, when Spring 3.0 is out we should upgrade since it fixes the spring-jms bug.
janstey:1246599290:2009-07-03T13:34:50.978+0000:1246599290:2009-07-03T13:34:50.978+0000:trunk: http://svn.apache.org/viewvc?rev=790907&view=rev
1.x: http://svn.apache.org/viewvc?rev=790910&view=rev
davsclaus:1258775952:2009-11-21T11:59:12.103+0000:1258775952:2009-11-21T11:59:12.103+0000:Closing all 2.0M3 tickets"
0,CAMEL-1792,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-03 11:36:37+00:00,2009-11-21 11:59:12+00:00,No Desc,"davsclaus:1246594019:2009-07-03T12:06:59.501+0000:1246594019:2009-07-03T12:06:59.501+0000:trunk: 790882.
davsclaus:1258775952:2009-11-21T11:59:12.080+0000:1258775952:2009-11-21T11:59:12.080+0000:Closing all 2.0M3 tickets"
0,CAMEL-1791,Task,Minor,2.0-M2,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Claus Ibsen,0,0,2009-07-03 07:55:12+00:00,2010-06-03 07:23:39+00:00,"We are using quartz 1.6.1 but 1.6.5 has been released
http://www.opensymphony.com/


Also remember to updated the features","davsclaus:1258590816:2009-11-19T08:33:36.405+0000:1258590816:2009-11-19T08:33:36.405+0000:trunk: 882074.

Upgraded to quartz 1.6.6
davsclaus:1258591019:2009-11-19T08:36:59.645+0000:1258591019:2009-11-19T08:36:59.645+0000:Changed to use regular quarz jar instead of the -all version
davsclaus:1275521019:2010-06-03T07:23:39.837+0000:1275521019:2010-06-03T07:23:39.837+0000:Closing old resolved issues"
0,CAMEL-1790,Sub-task,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-03 07:20:35+00:00,2009-11-21 11:59:12+00:00,"Is only used to copy from input stream to output stream.


Should use IOHelper from camel-core to do this instead.
Then we can lose this dependency.","davsclaus:1246577300:2009-07-03T07:28:20.060+0000:1246577300:2009-07-03T07:28:20.060+0000:The same for *camel-http* that also have this dependency we can loose.
davsclaus:1246587506:2009-07-03T10:18:26.974+0000:1246587506:2009-07-03T10:18:26.974+0000:No camel .jars depend any longer on commons-io

trunk: 790845.
davsclaus:1258775952:2009-11-21T11:59:12.057+0000:1258775952:2009-11-21T11:59:12.057+0000:Closing all 2.0M3 tickets"
0,CAMEL-1789,New Feature,Major,None,"1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Willem Jiang,0,0,2009-07-03 03:09:43+00:00,2009-11-21 11:59:12+00:00,"Here this user request from the Fuse forum.
http://fusesource.com/forums/thread.jspa?messageID=3385","njiang:1247709937:2009-07-16T10:05:37.103+0000:1247709937:2009-07-16T10:05:37.103+0000:trunk
http://svn.apache.org/viewvc?rev=792398&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=792471&view=rev
davsclaus:1258775952:2009-11-21T11:59:12.008+0000:1258775952:2009-11-21T11:59:12.008+0000:Closing all 2.0M3 tickets"
0,CAMEL-1788,Bug,Major,1.6.0,,"
None
",Closed,Incomplete,None,Willem Jiang,Scott Parkerson,0,0,2009-07-02 21:09:39+00:00,2010-02-07 09:58:26+00:00,"The following code will not work under Servicemix, but works fine in standalone Camel:



        FlatpackDataFormat fpdf = new FlatpackDataFormat();
        fpdf.setDefinition(new ClassPathResource(""dataspecs/mypzmap.xml""));
        fpdf.setFixed(false);
        fpdf.setDelimiter('|');
        fpdf.setIgnoreFirstRecord(false);

        from(""activemq:"" + incomingQueueName).convertBodyTo(String.class).unmarshal(fpdf).to(""activemq:input_to_call"");




This NPEs when attempting to unmarshal under SMX 4, but works fine in Camel 1.6.x. I've traced down the problem to this code in Flatpack: 


net/sf/flatpack/util/ParseUtils.java

    public static Properties loadConvertProperties() throws IOException {
        final Properties pzConvertProps = new Properties();
        final URL url = ParserUtils.class.getClassLoader().getResource(""fpconvert.properties"");
        pzConvertProps.load(url.openStream());

        return pzConvertProps;
    }




The classloader under SMX is the bundle's classloader, which (of course) cannot find fpconvert.properties, which makes url null, and then causes pzConvertProps.load(...) to raise an NPE.


I know that this isn't strictly a bug in Camel or SMX, but I thought I'd file it here as an action item to either change upstream flatpack or note a possible workaround on the wiki.


I suspect that this is a problem with all versions of Camel + SMX including the latest version.","davsclaus:1253484944:2009-09-21T06:15:44.472+0000:1253484944:2009-09-21T06:15:44.472+0000:Have you raised this issue at Flatpack as well? 
njiang:1256703985:2009-10-28T12:26:25.317+0000:1256704061:2009-10-28T12:27:41.714+0000:I think We should change to use the thread context loader to load the fpconvert.properties from the user bundle.
BTW, it is a servicemix-bundle issue, I will try to create a patch for it.

njiang:1256704830:2009-10-28T12:40:30.797+0000:1256704830:2009-10-28T12:40:30.797+0000:@Scott,

Can you submit a small test case which use the ""fpconvert.properties"" file?
It will be helpful for me to verify my change on the flatpack bundle.


davsclaus:1258673649:2009-11-20T07:34:09.807+0000:1258673649:2009-11-20T07:34:09.807+0000:Closing this as reported is providing details and the problem is the flatpack library and not Camel"
0,CAMEL-1787,New Feature,Major,None,None,"
None
",Closed,Fixed,2.0-M3,Jonathan Anstey,Stanley J. Lewis,0,0,2009-07-02 19:20:09+00:00,2009-11-21 11:59:11+00:00,"Am attaching a patch that adds SSL support to camel-irc for connecting to SSL-enabled IRC servers.  Unfortunately I haven't tracked down a public IRC server that's SSL enabled to add a test for this but have tested here a bunch against a private IRC server.  The URI format is like:


ircs://<username>:server:6667/#channel


By default the component will use SSLDefaultTrustManager but I've added in another parameter so you can pass ?trustManagerClass and specify a class that implements SSLTrustManager","slewis:1246533651:2009-07-02T19:20:51.212+0000:1246533651:2009-07-02T19:20:51.212+0000:Here's the patch!
janstey:1246608167:2009-07-03T16:02:47.559+0000:1246608167:2009-07-03T16:02:47.559+0000:Just tested and committed your addition Stan. Thanks!
janstey:1246608203:2009-07-03T16:03:23.310+0000:1246608203:2009-07-03T16:03:23.310+0000:http://svn.apache.org/viewvc?rev=790952&view=rev & http://svn.apache.org/viewvc?rev=790956&view=rev
davsclaus:1246608240:2009-07-03T16:04:00.538+0000:1246608240:2009-07-03T16:04:00.538+0000:Janstey be careful the loading of custom SSLTrustManager is flawed.

It should not use a string to load a class name using Class.forName etc.
What you should do instead is having a SSLTrustManager setter/getter on the endpoint.

And then use Spring IoC or the likes to setup the implementation.

So I would like this patch to be fixed by
{code}
ircEndpoint

  private SSLTrustManager sslTrustManager = new DefaultSSLTrustManager();

  // add getter/setter to it
{code}

And remove the trustManagerClass option as its not needed.

Then you can use a custom manager like this
{code}
ircs://<username>:server:6667/#channel?sslTruastManager=#myCustomManager
{code}

And Camel will lookup in the registry for the custom manager by this given id.

davsclaus:1246608372:2009-07-03T16:06:12.499+0000:1246608372:2009-07-03T16:06:12.499+0000:And Class.forName does not work well in OSGi platforms and whatnot.

If you really need to load a class you should use CamelContext.getClassResolver and use it to load a class as it can handle OSGi vs non OSGi platforms.
janstey:1246608409:2009-07-03T16:06:49.306+0000:1246608409:2009-07-03T16:06:49.306+0000:Good point Claus. I'll fix this up.
janstey:1246614438:2009-07-03T17:47:18.171+0000:1246614438:2009-07-03T17:47:18.171+0000:Fixes have been committed to trunk.
slewis:1246681123:2009-07-04T12:18:43.016+0000:1246681123:2009-07-04T12:18:43.016+0000:Awesome, thanks guys!  Good to know about the class loading, I didn't want to leave that hard coded, thanks Claus.
davsclaus:1258775951:2009-11-21T11:59:11.980+0000:1258775951:2009-11-21T11:59:11.980+0000:Closing all 2.0M3 tickets"
0,CAMEL-1786,Bug,Minor,"1.6.1, 2.0-M2",None,"
None
",Closed,Fixed,"1.6.2, 2.0-M3",Jonathan Anstey,Stanley J. Lewis,0,0,2009-07-02 17:54:04+00:00,2009-11-21 11:59:11+00:00,"If you try and pass some parameters to camel-irc it turns out that camel joins a different IRC channel than expected, for example a URI like:


irc://camel-con@irc.codehaus.org:6667/#camel-test?nickname=camel-con


causes camel to join #camel-test?nickname=camel-con and not #camel-test with a nickname of camel-con.  Will attach a patch that addresses this and updates the unit test.","slewis:1246528496:2009-07-02T17:54:56.725+0000:1246528496:2009-07-02T17:54:56.725+0000:The patch, made to apply to the top level of camel-irc.
janstey:1246530203:2009-07-02T18:23:23.778+0000:1246530203:2009-07-02T18:23:23.778+0000:Applied your fix to trunk: http://svn.apache.org/viewvc?rev=790701&view=rev

Thanks!
slewis:1246530541:2009-07-02T18:29:01.701+0000:1246530541:2009-07-02T18:29:01.701+0000:No problem!
janstey:1246531194:2009-07-02T18:39:54.915+0000:1246531194:2009-07-02T18:39:54.915+0000:Applied fix to 1.x as well: http://svn.apache.org/viewvc?rev=790702&view=rev
davsclaus:1258775951:2009-11-21T11:59:11.955+0000:1258775951:2009-11-21T11:59:11.955+0000:Closing all 2.0M3 tickets"
0,CAMEL-1785,Bug,Major,2.0-M2,None,"
None
",Closed,Fixed,2.0-M3,Jonathan Anstey,Jonathan Anstey,0,0,2009-07-02 12:33:00+00:00,2009-11-21 11:59:11+00:00,No Desc,"janstey:1246509997:2009-07-02T12:46:37.855+0000:1246509997:2009-07-02T12:46:37.855+0000:trunk: http://svn.apache.org/viewvc?rev=790562&view=rev
davsclaus:1258775951:2009-11-21T11:59:11.936+0000:1258775951:2009-11-21T11:59:11.936+0000:Closing all 2.0M3 tickets"
0,CAMEL-1784,Improvement,Major,None,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Unassigned,Moulliard Charles,0,0,2009-07-02 08:03:59+00:00,2009-11-21 11:59:11+00:00,No Desc,"cmoulliard:1246497360:2009-07-02T09:16:00.935+0000:1246497360:2009-07-02T09:16:00.935+0000:Code committed
davsclaus:1258775951:2009-11-21T11:59:11.915+0000:1258775951:2009-11-21T11:59:11.915+0000:Closing all 2.0M3 tickets"
0,CAMEL-1783,Improvement,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-07-02 05:16:48+00:00,2009-11-21 11:59:11+00:00,"We cannot use JMSDestination as it would not work when you do a route from(jms A) to (jms B) as it will go into round about as when received from jms A the header will contain JMSDestination = queue:A and thus Camel will send it back to itself.


So we should a different name
CamelJmsDestination","davsclaus:1246483058:2009-07-02T05:17:38.596+0000:1246483058:2009-07-02T05:17:38.596+0000:The idea is to reuse the same endpoint but being able to send it to a destination of choice. This will reduce the number of endpoints needed in case you send JMS message to thousands of different JMS queues.


davsclaus:1246488501:2009-07-02T06:48:21.903+0000:1246488501:2009-07-02T06:48:21.903+0000:Added two headers
- {{CamelJmsDestination}}
- {{CamelJmsDestinationName}}

Then you can reuse the same endpoint but send to a different JMS queue.
davsclaus:1246489937:2009-07-02T07:12:17.718+0000:1246489937:2009-07-02T07:12:17.718+0000:trunk: 790476.
davsclaus:1246503637:2009-07-02T11:00:37.108+0000:1246503637:2009-07-02T11:00:37.108+0000:1.x: 790547.
davsclaus:1258775951:2009-11-21T11:59:11.894+0000:1258775951:2009-11-21T11:59:11.894+0000:Closing all 2.0M3 tickets"
0,CAMEL-1782,Bug,Major,2.0-M2,2.1.0,"
None
",Closed,Fixed,2.1.0,Stanley J. Lewis,M Chen,0,1,2009-07-02 01:42:23+00:00,2010-06-03 07:23:39+00:00,"in using a private chat consumer in a route – paraphrasing,


from(""xmpp://server.where.ever:5222/recipient@where.ever? ..."").process(...)


the first connect generally succeeds but no XMPP messages flow.


stopping later and restarting (second route) generally works properly with both connection and XMPP messages flowing.


tried with both jabber.org and talk.google.com","davsclaus:1246503746:2009-07-02T11:02:26.603+0000:1246503746:2009-07-02T11:02:26.603+0000:Can you post your entire route?

There could maybe be a glitch when using more than 1 xmpp endpoing.

And if you could prepare or write a little instructions how to reproduce with steps. Then we can quicker get started and look into this.
machenmusik@comcast.net:1246554241:2009-07-03T01:04:01.374+0000:1246554241:2009-07-03T01:04:01.374+0000:attaching a little test to demonstrate.

the test logs in as cameltest@jabber.org (pw: cameltest)
opens private chat to cameltest2@jabber.org (pw: cameltest2)
and consumes into a processor that prints what it got
(but nothing is received)
then stops and starts again
(and here you can see things being received)


machenmusik@comcast.net:1246554291:2009-07-03T01:04:51.386+0000:1246554291:2009-07-03T01:04:51.386+0000:test case
davsclaus:1253485024:2009-09-21T06:17:04.912+0000:1253485024:2009-09-21T06:17:04.912+0000:Stan you did some fixes and updates to XMPP. Do you mind checking whether we have other issues with it.

Would be great to have a solid XMPP component with Camel.
slewis:1253509302:2009-09-21T13:01:42.959+0000:1253509302:2009-09-21T13:01:42.959+0000:Yeah, this should definitely be working in trunk, there's a test I added that does this very thing.  M Chen, can you try 2.1-SNAPSHOT?
davsclaus:1275521019:2010-06-03T07:23:39.189+0000:1275521019:2010-06-03T07:23:39.189+0000:Closing old resolved issues"
0,CAMEL-1781,Task,Critical,2.0.0,None,"
None
",Closed,Fixed,2.0-M3,Unassigned,Hadrian Zbarcea,0,0,2009-07-01 21:16:34+00:00,2009-11-21 11:59:11+00:00,"The build was broken by missing Security.java file in a previous commit.


I added a dummy Security.java file but had to disable some tests and noticed that some tests were already disabled.  We need to fix the camel-bindy component and make sure that all tests are passing.","cmoulliard:1246492897:2009-07-02T08:01:37.391+0000:1246492897:2009-07-02T08:01:37.391+0000:Security class updated and pom.xml file also

All the tests have run successfully on my machine
davsclaus:1258775951:2009-11-21T11:59:11.874+0000:1258775951:2009-11-21T11:59:11.874+0000:Closing all 2.0M3 tickets"
0,CAMEL-1780,Improvement,Major,None,Future,"
None
",Closed,Duplicate,Future,Unassigned,Sriram Chavali,0,0,2009-07-01 19:05:25+00:00,2011-04-24 10:01:05+00:00,"This is a follow-up from my exchange with Claus on the user-forum. If the camel routes are spread across multiple files, it'd be very useful to allow for a templating or hierarchical mechanism that'd allow for common routes (in my case Exception processing) to be re-used without copy-pasting in the different files.


http://www.nabble.com/Multiple-camelContext-elements-in-camel-2.0.m2-Spring-DSL-td24293351.html",davsclaus:1303610465:2011-04-24T10:01:05.769+0000:1303610465:2011-04-24T10:01:05.769+0000:Closing all resolved tickets from 2010 or older
0,CAMEL-1779,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-01 08:55:36+00:00,2009-11-21 11:59:11+00:00,"For testing and whatelse its great that Camel can create the folder itself when consuming.


So we should add it back.","davsclaus:1246418423:2009-07-01T11:20:23.556+0000:1246418423:2009-07-01T11:20:23.556+0000:trunk: 790121.
davsclaus:1258775951:2009-11-21T11:59:11.804+0000:1258775951:2009-11-21T11:59:11.804+0000:Closing all 2.0M3 tickets"
0,CAMEL-1778,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-07-01 08:54:30+00:00,2009-11-21 11:59:11+00:00,You cannot use ${ } in the start path of file/ftp consumers. Use the fileName option for that. We should validate and thrown an exception about this so end users notices this immediately and can fix it.,"davsclaus:1246411213:2009-07-01T09:20:13.756+0000:1246411213:2009-07-01T09:20:13.756+0000:trunk: 790084.
davsclaus:1258775951:2009-11-21T11:59:11.783+0000:1258775951:2009-11-21T11:59:11.783+0000:Closing all 2.0M3 tickets"
0,CAMEL-1777,Bug,Major,"1.6.0, 2.0-M1, 1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Willem Jiang,0,0,2009-07-01 07:34:42+00:00,2015-10-20 13:42:16+00:00,"If the Bean endpoint has an explicit method name ,   the Bean processor will set the message header of Exchange.Bean_METHOD_NAME with the value of method name  before the invocation and will try to reset the message header of Exchange.Bean_METHOD_NAME with the preview method name after the invocation. 
Current camel code just set the InMessage's header , if the ExchangePatter is InOut , it forget to reset the OutMessage's header.","njiang:1246413020:2009-07-01T09:50:20.281+0000:1246413020:2009-07-01T09:50:20.281+0000:camel trunk
http://svn.apache.org/viewvc?rev=790052&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=790055&view=rev
davsclaus:1258775951:2009-11-21T11:59:11.763+0000:1258775951:2009-11-21T11:59:11.763+0000:Closing all 2.0M3 tickets"
0,CAMEL-1776,New Feature,Minor,"1.6.1, 2.0-M2",2.3.0,"
None
",Closed,Won't Fix,2.3.0,Stanley J. Lewis,Claus Ibsen,0,0,2009-07-01 04:42:01+00:00,2011-04-24 10:00:39+00:00,"The validator processor that is the base proceossor for various components, but most noticable the xslt component.


We should support specifying multiple file resources in the endpoint uri. Currently only 1 resource is supported.


See nabble:
http://www.nabble.com/XML-Validation-with-multiple-XSLT-schema-files.-td24068904.html","davsclaus:1246394582:2009-07-01T04:43:02.153+0000:1246394582:2009-07-01T04:43:02.153+0000:See the nabble as the is a code snippet that shows how to do it
davsclaus:1251930430:2009-09-03T06:27:10.949+0000:1251930430:2009-09-03T06:27:10.949+0000:Stan you want to take a stab at this one?
davsclaus:1266386386:2010-02-17T13:59:46.369+0000:1266386386:2010-02-17T13:59:46.369+0000:The problem with multiple files on the endpoint uri is that it makes the xsl:include much more problematic as now it can be relative to the location defined in the endpoint.

Stan there is some recent code which uses the single location from the endpoint as the base path for xsl include resolution. If we support multiple locations in the endpoint that include logic needs to be adjusted as well.
slewis:1266386805:2010-02-17T14:06:45.814+0000:1266386805:2010-02-17T14:06:45.814+0000:@Claus, luckily I haven't had a chance then to implement this, with the code change you mentioned do you think this improvement is worth keeping?  I suppose some folks may like keeping their schema in various different locations, so perhaps yes...
davsclaus:1269833656:2010-03-29T11:34:16.435+0000:1269833656:2010-03-29T11:34:16.435+0000:They could in fact just have one XML schema and have includes for the others in that file. 

I do not think its worth wile to try to get this working in conjunction with the other changes. I fear that it will be too complex to ensure it works nicely in all situations.
So I am closing this ticket now.
davsclaus:1303610439:2011-04-24T10:00:39.547+0000:1303610439:2011-04-24T10:00:39.547+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1775,New Feature,Major,2.0-M2,2.3.0,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2009-06-30 12:11:26+00:00,2011-04-24 10:01:26+00:00,"See
http://fusesource.com/forums/thread.jspa?messageID=3356&#3356","davsclaus:1266385587:2010-02-17T13:46:27.516+0000:1266385587:2010-02-17T13:46:27.516+0000:There is an option {{closeCorrelationKeyOnCompletion}} to indicate _late_ exchanges should fail
davsclaus:1303610486:2011-04-24T10:01:26.897+0000:1303610486:2011-04-24T10:01:26.897+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1774,Bug,Major,"2.0-M1, 2.0-M2",None,"
None
",Closed,Fixed,2.0-M3,William Tam,William Tam,0,1,2009-06-30 01:33:51+00:00,2009-11-21 11:59:11+00:00,No Desc,"wtam:1246298016:2009-06-30T01:53:36.057+0000:1246298016:2009-06-30T01:53:36.057+0000:Add code to propagate HTTP response code in cxfbean.
Committed revision 789534.

davsclaus:1258775951:2009-11-21T11:59:11.742+0000:1258775951:2009-11-21T11:59:11.742+0000:Closing all 2.0M3 tickets"
0,CAMEL-1773,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Not A Problem,2.0-M3,Claus Ibsen,Eric Bouer,0,1,2009-06-29 19:24:53+00:00,2009-11-21 11:59:11+00:00,"By default camel sets the JMSReplyTo for InOut messages.
A user should be able to customize the JMSReplyTo  property. 
Camel always overrides the JMSReplyTo and sets it to a temp-queue regardless user settings.
=========== code Snippet =============
package com.mycompany.CamelExample;
import javax.jms.ConnectionFactory;
import org.apache.activemq.ActiveMQConnectionFactory;


import org.apache.activemq.camel.component.ActiveMQComponent;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;


import org.apache.camel.component.jms.JmsConstants;
import org.apache.camel.impl.DefaultCamelContext;
public final class App {


    public static void main(String args[]) throws Exception {


        CamelContext context = new DefaultCamelContext();
        ConnectionFactory connectionFactory =  new ActiveMQConnectionFactory(""tcp://amq1:61616"");
        final String TEST_QUEUE_1 = ""test-jms:queue:test1"";
        final String TEST_QUEUE_2 = ""test-jms:queue:test2"";
        final String REPLY_QUEUE = ""queue:myResponseQueue"";
        context.addComponent(""test-jms"", ActiveMQComponent.jmsComponent(connectionFactory));
        context.addRoutes(new RouteBuilder() {
            public void configure() {
             from(TEST_QUEUE_1)
                     .process(new Processor() { public void process(Exchange exchange) throws Exception 

{
                        System.out.println(exchange.getIn().getBody());
                        exchange.getOut().setBody(""Hello again"");
                        exchange.setProperty(JmsConstants.JMS_REPLY_DESTINATION, REPLY_QUEUE);
                    }

                })
                .to(TEST_QUEUE_2);


                from(TEST_QUEUE_2)
                        .process(new Processor() {  public void process(Exchange exchange) throws Exception {
                        String body = (String) exchange.getIn().getBody();
                        System.out.println(""direct:a got process"" + body.toString());
                        exchange.getIn().setBody(""lolo"");
                        System.out.println(exchange.getIn().getHeaders());
                        exchange.getIn().setBody(""Bye World"");
                        // the reply destination is set as a property on the exchange while we process it
                        String ReplyTo = exchange.getProperty(JmsConstants.JMS_REPLY_DESTINATION).toString();
                         if (!ReplyTo.equalsIgnoreCase(REPLY_QUEUE)) 

{
                        //assert
                              throw new Exception(""JMSReplyTo is not set correctly: got:"" + ReplyTo
                                     + "" Expexting:"" +  REPLY_QUEUE);
                         }

                    }});


            }});
        ProducerTemplate template = context.createProducerTemplate();
        context.start();
        Thread.sleep(2000);
        String requestBody =  (String) template.requestBody(TEST_QUEUE_1, ""Hello world"", String.class);
    }
}
======== Log ==============
2:19:41,559  INFO DefaultCamelContext:135 - JMX enabled. Using InstrumentationLifecycleStrategy.
22:19:41,656  INFO DefaultCamelContext:875 - Apache Camel 2.0-M2 (CamelContext:camel-1) is starting
22:19:42,251  INFO DefaultCamelContext:868 - Apache Camel 2.0-M2 (CamelContext:camel-1) started
22:19:44,453 DEBUG JmsProducer:202 - Using JMS API v1.1
22:19:44,515 DEBUG JmsConfiguration$CamelJmsTemplate:469 - Executing callback on JMS Session: ActiveMQSession 

{id=ID:niso-42103-1246303182016-0:3:1,started=false}

22:19:44,519 DEBUG JmsBinding:370 - Using JmsMessageType: Text
22:19:44,525 DEBUG JmsProducer:188 - Endpoint[test-jms:queue:test1] sending JMS message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-45344-1246303184258-2-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:2:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello world}

22:19:44,527 DEBUG JmsConfiguration$CamelJmsTemplate:202 - Sending created message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-45344-1246303184258-2-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:2:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello world}

22:19:44,564 DEBUG EndpointMessageListener:66 - Endpoint[test-jms:queue:test1] consumer receiving JMS message: ActiveMQTextMessage 

{commandId = 5, responseRequired = true, messageId = ID:niso-42103-1246303182016-0:3:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:niso-42103-1246303182016-0:3:1:1, destination = queue://test1, transactionId = null, expiration = 1246303204528, timestamp = 1246303184528, arrival = 0, brokerInTime = 1246303121068, brokerOutTime = 1246303121099, correlationId = ID-niso-45344-1246303184258-2-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:2:1, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Hello world}

Hello world
22:19:44,853 DEBUG JmsProducer:202 - Using JMS API v1.1
22:19:44,853 DEBUG JmsConfiguration$CamelJmsTemplate:469 - Executing callback on JMS Session: ActiveMQSession 

{id=ID:niso-42103-1246303182016-0:1:1,started=true}

22:19:44,854 DEBUG JmsBinding:370 - Using JmsMessageType: Text
22:19:44,854 DEBUG JmsProducer:188 - Endpoint[test-jms:queue:test2] sending JMS message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-45344-1246303184258-4-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:4:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello again}

22:19:44,855 DEBUG JmsConfiguration$CamelJmsTemplate:202 - Sending created message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-45344-1246303184258-4-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:4:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello again}

22:19:44,895 DEBUG EndpointMessageListener:66 - Endpoint[test-jms:queue:test2] consumer receiving JMS message: ActiveMQTextMessage 

{commandId = 7, responseRequired = true, messageId = ID:niso-42103-1246303182016-0:1:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:niso-42103-1246303182016-0:1:1:1, destination = queue://test2, transactionId = null, expiration = 1246303204855, timestamp = 1246303184855, arrival = 0, brokerInTime = 1246303121399, brokerOutTime = 1246303121433, correlationId = ID-niso-45344-1246303184258-4-0, replyTo = temp-queue://ID:niso-42103-1246303182016-0:4:1, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Hello again}

direct:a got processHello again

{JMSXGroupID=null, JMSCorrelationID=ID-niso-45344-1246303184258-4-0, JMSType=null, JMSExpiration=1246303204855, JMSMessageID=ID:niso-42103-1246303182016-0:1:1:1:1, JMSRedelivered=false, JMSDeliveryMode=2, JMSPriority=4, JMSReplyTo=temp-queue://ID:niso-42103-1246303182016-0:4:1, JMSTimestamp=1246303184855, JMSDestination=queue://test2}

22:19:44,905 ERROR EndpointMessageListener:207 - java.lang.Exception: JMSReplyTo is not set correctly: got:temp-queue://ID:niso-42103-1246303182016-0:4:1 Expexting:queue:myResponseQueue
org.apache.camel.RuntimeCamelException: java.lang.Exception: JMSReplyTo is not set correctly: got:temp-queue://ID:niso-42103-1246303182016-0:4:1 Expexting:queue:myResponseQueue
        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:986)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:101)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:543)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:482)
        at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:451)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:323)
        at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:261)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:982)
        at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:881)
        at java.lang.Thread.run(Thread.java:619)
Caused by: java.lang.Exception: JMSReplyTo is not set correctly: got:temp-queue://ID:niso-42103-1246303182016-0:4:1 Expexting:queue:myResponseQueue
        at com.mycompany.CamelExample.App$1$2.process(App.java:45)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:61)
        at org.apache.camel.processor.DefaultErrorHandler.process(DefaultErrorHandler.java:52)
        at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:147)
        at org.apache.camel.processor.UnitOfWorkProcessor.processNext(UnitOfWorkProcessor.java:54)
        at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:48)
        at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:81)
        ... 8 more
22:19:44,906  WARN DefaultMessageListenerContainer:646 - Execution of JMS message listener failed
org.apache.camel.RuntimeCamelException: java.lang.Exception: JMSReplyTo is not set correctly: got:temp-queue://ID:niso-42103-1246303182016-0:4:1 Expexting:queue:myResponseQueue
====","davsclaus:1246320986:2009-06-30T08:16:26.898+0000:1246320986:2009-06-30T08:16:26.898+0000:Related to CAMEL-1689
davsclaus:1246321135:2009-06-30T08:18:55.386+0000:1246321135:2009-06-30T08:18:55.386+0000:You have to set the {{JMSReplyTo}} as a *header* and not as a property to expect Camel to use it.

Use
{code}
exchange.getIn().setHeader(""JMSReplyTo"", ""foo"");
{code}
davsclaus:1258775951:2009-11-21T11:59:11.702+0000:1258775951:2009-11-21T11:59:11.702+0000:Closing all 2.0M3 tickets"
0,CAMEL-1772,New Feature,Major,1.6.2,1.6.2,"
None
",Closed,Fixed,1.6.2,Willem Jiang,Erwin Kroon,0,0,2009-06-29 14:08:03+00:00,2010-11-03 05:10:51+00:00,Add a property valuebuilder as available in Camel 2.0. Implementation is a backport of 2.0,"njiang:1246301296:2009-06-30T02:48:16.577+0000:1246301296:2009-06-30T02:48:16.577+0000:Applied patch with thanks to  Erwin.
camel-1.x branch 
http://svn.apache.org/viewvc?rev=789536&view=rev"
0,CAMEL-1771,Bug,Critical,"1.4.0, 1.5.0, 1.6.0, 1.6.1, 2.0-M2",None,"
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Andres,0,0,2009-06-29 09:22:11+00:00,2009-11-21 11:59:11+00:00,"I found that RecipientList leaks memory .
The problem is that RecipientList stores endpoints in producerCache and cache key computed by using getEndpointUri. If endpoint uris are unique ( as we have ) then every new entry will stored in cache and will never released.


In example we are using recipientList  to send messages to the external http server, every url contains unique query parameters therefor every recipientList entry will create new producer ant that producer will stored in producerCache.
In our system recipientList wlil leak about 20M per day


Unfortunately I was unable to find any workaround","davsclaus:1246240198:2009-06-29T09:49:58.824+0000:1246240198:2009-06-29T09:49:58.824+0000:Ah cool with your finding. 

I will fix the ProducerCache to be size limited so it wont grow forever. Using a LRUCache instead of Map, with a default of 1000.

kalamaks:1246242250:2009-06-29T10:24:10.998+0000:1246242250:2009-06-29T10:24:10.998+0000:Tnx Claus
is it possible to use one of the concurrent API for LRUcache to get ride of  syncronization in ProducerCache.getProducer ?
davsclaus:1246243756:2009-06-29T10:49:16.917+0000:1246243756:2009-06-29T10:49:16.917+0000:Yeah I guess LRUCache was created before Java 5 really took off.

I am wondering thought if there is an implementation in Java 5 from the concurrency API that supports a Map like sorted on usage.
davsclaus:1246244539:2009-06-29T11:02:19.538+0000:1246244539:2009-06-29T11:02:19.538+0000:trunk: 789285
1.x: 789287.
kalamaks:1246260815:2009-06-29T15:33:35.997+0000:1246261011:2009-06-29T15:36:51.349+0000:much better now however there is still some leak. I'm not 100% sure but seemst that DefaultCamelContext.addEndpoint adds unique endpoints to the endpoints hashmap ( like in ProducerCache )

Only thing I will see is that there is lot of Hasmap entrys containing HttpEndpoints  and the count of HttpEndpoints  growing and  this hasmap is inside SpringCamelContext ( DefaultCamelContext ). If it helps I will provide memory snapshot in yourkit format
davsclaus:1246262119:2009-06-29T15:55:19.748+0000:1246262119:2009-06-29T15:55:19.748+0000:Yeah CamelContext also holds a list of all endpoints created. I guess we should use a LRUCache as well to avoid high memory usages.

Another idea is to not add these endpoints to the CamelContext internal list at all as you will not re-use them later anyway.
But I am working on a patch for the JMX console right now. Only registering 1 endpoint for all the https.
davsclaus:1246262620:2009-06-29T16:03:40.521+0000:1246262620:2009-06-29T16:03:40.521+0000:I actually think we should not *store* the endpoints that have lenient properties, such as *http*. Then we wont store them in the CamelContext.

So if you need such an endpoint its created on demand when you call the {{getEndpoint(uri)}} method.
So when you do as you have millions http endpoints that are different it wont be added to Camel and also not in JMX.

In the future we could add the first in JMX to have a single entry there so we later can track number of invocations to this endpoint and more.
But all the JMX stuff is slated for an overhaul in 2.1
davsclaus:1246310863:2009-06-30T05:27:43.128+0000:1246310863:2009-06-30T05:27:43.128+0000:See nabble for discussion
http://www.nabble.com/-DISCUSS----Camel-2.0---About-Endpoints-with-lenient-properties--eating-to-much-memory-td24266319s22882.html
kalamaks:1246314566:2009-06-30T06:29:26.225+0000:1246314566:2009-06-30T06:29:26.225+0000:Another thing I was wonderingi is that do we realy need ProducerCache in RecipientList ? Path to the camelContext seems relatively short  (allmost direct call to camelContext.getEndpoint(uri) ) and camelContext caches endpoints anyway
davsclaus:1246316380:2009-06-30T06:59:40.378+0000:1246316380:2009-06-30T06:59:40.378+0000:Yeah we need the cache when people send to the same endpoint again and again.

ProducerCache if for caching *producers*
CamelContext caches *endpoints*

So we need both.
davsclaus:1246319153:2009-06-30T07:45:53.839+0000:1246319153:2009-06-30T07:45:53.839+0000:trunk: 789593.
1.x: 789598.

Andres can you try again with latest code? I have fixed this and also the JMX issue as well, so Camel will not register all the http endpoints.
So you do *not* need your own custom naming strategy anymore.

The fix is for both 1.6.2 and 2.0
kalamaks:1246331125:2009-06-30T11:05:25.074+0000:1246331125:2009-06-30T11:05:25.074+0000:
 I tested 789598 and no more memory leaks - supercool :)
I hope  1.6.2 will realeased soon so that we can switch our pdoduction also to 1.6.2

thank you Claus 



davsclaus:1258775951:2009-11-21T11:59:11.646+0000:1258775951:2009-11-21T11:59:11.646+0000:Closing all 2.0M3 tickets"
0,CAMEL-1770,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Cannot Reproduce,2.0-M3,Claus Ibsen,Eric Bouer,0,1,2009-06-29 08:38:34+00:00,2009-11-21 11:59:11+00:00,"The following test code should send a ""hello world""  request and receive a ""bye world"" response.
The JMSReplyTo field is set. but camel won't send a reply.
If I explicitly set the exchange pattern in the route all goes fine.
This code uses template.send() , I also got the same error with template.asycRequestBody()
============= Code  snippet ===============


 context.addComponent(""test-jms"", ActiveMQComponent.jmsComponent(connectionFactory));
        context.addRoutes(new RouteBuilder() {
            public void configure() {
              from(""test-jms:queue:test"")
                             //.setExchangePattern(ExchangePattern.InOut) <-- Setting this explicitly solves the issue. camel should detect that automatically.
                    .process(new Processor() {
                    public void process(Exchange exchange) throws Exception 

{
                        exchange.getIn().setBody(""Bye world"");
                        System.out.println(exchange.getProperty(JmsConstants.JMS_REPLY_DESTINATION).toString());
                    }

                });
            }});
        ProducerTemplate template = context.createProducerTemplate();
        context.start();


         Exchange out = template.send(""test-jms:queue:test"", ExchangePattern.InOut, new Processor() {
            public void process(Exchange exchange) throws Exception 

{
                exchange.getIn().setBody(""Hello World"");
            }

        });
================Logs: =============================================================


11:32:59,605 DEBUG DefaultCamelContext:497 - Adding routes from: Routes: [Route[[From[test-jms:queue:test]] -> [process[com.mycompany.CamelExample.App$1$1@4b14b82b]]]] routes: []
11:32:59,611  INFO DefaultCamelContext:875 - Apache Camel 2.0-M2 (CamelContext:camel-1) is starting
11:32:59,612 DEBUG DefaultProducerServicePool:93 - Starting service pool: org.apache.camel.impl.DefaultProducerServicePool@6293df2c
11:32:59,613 DEBUG DefaultCamelContext:882 - StreamCaching is enabled
11:32:59,720 DEBUG DefaultInstrumentationAgent:229 - Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@4b8a6e6e
11:32:59,921 DEBUG DefaultInstrumentationAgent:293 - Registered MBean with objectname: org.apache.camel:context=niso/camel-1,name=context
11:33:00,000 DEBUG DefaultComponent:77 - Creating endpoint uri=[test-jms:queue:test], path=[queue:test], parameters=[{}]
11:33:00,009 DEBUG DefaultCamelContext:379 - test-jms:queue:test converted to endpoint: Endpoint[test-jms:queue:test] by component: org.apache.camel.component.jms.JmsComponent@410d3f0d
11:33:00,044 DEBUG DefaultInstrumentationAgent:293 - Registered MBean with objectname: org.apache.camel:context=niso/camel-1,type=endpoints,name=""test-jms:queue:test?id=0xa6c6baa1""
11:33:00,119 DEBUG DefaultInstrumentationAgent:293 - Registered MBean with objectname: org.apache.camel:context=niso/camel-1,type=processors,nodeid=process1,name=""process[com.mycompany.CamelExample.App$1$1@4b14b82b]""
11:33:00,180 DEBUG DefaultInstrumentationAgent:293 - Registered MBean with objectname: org.apache.camel:context=niso/camel-1,type=routes,name=""route1""
11:33:00,203 DEBUG DefaultInstrumentationAgent:293 - Registered MBean with objectname: org.apache.camel:context=niso/camel-1,type=consumers,name=JmsConsumer(0x6ec5122f)
11:33:00,522 DEBUG WireFormatNegotiator:77 - Sending: WireFormatInfo { version=3, properties=

{CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=
[A,c,t,i,v,e,M,Q]
}


11:33:00,525 DEBUG DefaultMessageListenerContainer:347 - Established shared JMS Connection


11:33:00,552 DEBUG WireFormatNegotiator:108 - Received WireFormat: WireFormatInfo { version=3, properties={CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}

, magic=[A,c,t,i,v,e,M,Q]}
11:33:00,553 DEBUG WireFormatNegotiator:115 - tcp://amq1/192.168.5.28:61616 before negotiation: OpenWireFormat

{version=3, cacheEnabled=false, stackTraceEnabled=false, tightEncodingEnabled=false, sizePrefixDisabled=false}


11:33:00,554 DEBUG WireFormatNegotiator:130 - tcp://amq1/192.168.5.28:61616 after negotiation: OpenWireFormat{version=3, cacheEnabled=true, stackTraceEnabled=true, tightEncodingEnabled=true, sizePrefixDisabled=false}


11:33:00,712 DEBUG DefaultProducerServicePool:97 - Stopping service pool: org.apache.camel.impl.DefaultProducerServicePool@6293df2c


11:33:00,737  INFO DefaultCamelContext:868 - Apache Camel 2.0-M2 (CamelContext:camel-1) started


11:33:00,743 DEBUG ProducerCache:196 - Adding to producer cache with key: Endpoint
[test-jms:queue:test]
 for producer: Producer
[test-jms:queue:test]


11:33:00,847 DEBUG ProducerCache:163 - >>>> Endpoint
[test-jms:queue:test]
 Exchange
[JmsMessage: Hello World]


11:33:00,857 DEBUG WireFormatNegotiator:77 - Sending: WireFormatInfo { version=3, properties={CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=
[A,c,t,i,v,e,M,Q]
}


11:33:00,859 DEBUG SimpleMessageListenerContainer:347 - Established shared JMS Connection


11:33:00,877 DEBUG WireFormatNegotiator:108 - Received WireFormat: WireFormatInfo { version=3, properties={CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=
[A,c,t,i,v,e,M,Q]
}


11:33:00,878 DEBUG WireFormatNegotiator:115 - tcp://amq1/192.168.5.28:61616 before negotiation: OpenWireFormat{version=3, cacheEnabled=false, stackTraceEnabled=false, tightEncodingEnabled=false, sizePrefixDisabled=false}

11:33:00,878 DEBUG WireFormatNegotiator:130 - tcp://amq1/192.168.5.28:61616 after negotiation: OpenWireFormat

{version=3, cacheEnabled=true, stackTraceEnabled=true, tightEncodingEnabled=true, sizePrefixDisabled=false}


11:33:00,948 DEBUG JmsProducer:202 - Using JMS API v1.1


11:33:00,954 DEBUG WireFormatNegotiator:77 - Sending: WireFormatInfo { version=3, properties={CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=
[A,c,t,i,v,e,M,Q]
}


11:33:00,958 DEBUG WireFormatNegotiator:108 - Received WireFormat: WireFormatInfo { version=3, properties={CacheSize=1024, CacheEnabled=true, SizePrefixDisabled=false, MaxInactivityDurationInitalDelay=10000, TcpNoDelayEnabled=true, MaxInactivityDuration=30000, TightEncodingEnabled=true, StackTraceEnabled=true}, magic=
[A,c,t,i,v,e,M,Q]
}


11:33:00,958 DEBUG WireFormatNegotiator:115 - tcp://amq1/192.168.5.28:61616 before negotiation: OpenWireFormat{version=3, cacheEnabled=false, stackTraceEnabled=false, tightEncodingEnabled=false, sizePrefixDisabled=false}


11:33:00,958 DEBUG WireFormatNegotiator:130 - tcp://amq1/192.168.5.28:61616 after negotiation: OpenWireFormat{version=3, cacheEnabled=true, stackTraceEnabled=true, tightEncodingEnabled=true, sizePrefixDisabled=false}

11:33:00,987 DEBUG JmsConfiguration$CamelJmsTemplate:469 - Executing callback on JMS Session: ActiveMQSession 

{id=ID:niso-55060-1246264380379-0:2:1,started=false}

11:33:00,992 DEBUG JmsBinding:370 - Using JmsMessageType: Text
11:33:01,023 DEBUG JmsProducer:188 - Endpoint[test-jms:queue:test] sending JMS message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-53590-1246264380744-2-0, replyTo = temp-queue://ID:niso-55060-1246264380379-0:1:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello World}

11:33:01,024 DEBUG JmsConfiguration$CamelJmsTemplate:202 - Sending created message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = null, originalDestination = null, originalTransactionId = null, producerId = null, destination = null, transactionId = null, expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-53590-1246264380744-2-0, replyTo = temp-queue://ID:niso-55060-1246264380379-0:1:1, persistent = false, type = null, priority = 0, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = false, readOnlyBody = false, droppable = false, text = Hello World}

11:33:01,026 DEBUG ActiveMQSession:1640 - ID:niso-55060-1246264380379-0:2:1 sending message: ActiveMQTextMessage 

{commandId = 0, responseRequired = false, messageId = ID:niso-55060-1246264380379-0:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:niso-55060-1246264380379-0:2:1:1, destination = queue://test, transactionId = null, expiration = 1246264401026, timestamp = 1246264381026, arrival = 0, brokerInTime = 0, brokerOutTime = 0, correlationId = ID-niso-53590-1246264380744-2-0, replyTo = temp-queue://ID:niso-55060-1246264380379-0:1:1, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Hello World}

11:33:01,057 DEBUG ActiveMQMessageConsumer:432 - ID:niso-55060-1246264380379-0:0:1:1 received message: MessageDispatch {commandId = 0, responseRequired = false, consumerId = ID:niso-55060-1246264380379-0:0:1:1, destination = queue://test, message = ActiveMQTextMessage 

{commandId = 5, responseRequired = true, messageId = ID:niso-55060-1246264380379-0:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:niso-55060-1246264380379-0:2:1:1, destination = queue://test, transactionId = null, expiration = 1246264401026, timestamp = 1246264381026, arrival = 0, brokerInTime = 1246264325691, brokerOutTime = 1246264325719, correlationId = ID-niso-53590-1246264380744-2-0, replyTo = temp-queue://ID:niso-55060-1246264380379-0:1:1, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Hello World}

, redeliveryCounter = 0}
11:33:01,057 DEBUG DefaultMessageListenerContainer:311 - Received message of type [class org.apache.activemq.command.ActiveMQTextMessage] from consumer [ActiveMQMessageConsumer 

{ value=ID:niso-55060-1246264380379-0:0:1:1, started=true }

] of session [ActiveMQSession 

{id=ID:niso-55060-1246264380379-0:0:1,started=true}

]
11:33:01,060 DEBUG EndpointMessageListener:66 - Endpoint[test-jms:queue:test] consumer receiving JMS message: ActiveMQTextMessage 

{commandId = 5, responseRequired = true, messageId = ID:niso-55060-1246264380379-0:2:1:1:1, originalDestination = null, originalTransactionId = null, producerId = ID:niso-55060-1246264380379-0:2:1:1, destination = queue://test, transactionId = null, expiration = 1246264401026, timestamp = 1246264381026, arrival = 0, brokerInTime = 1246264325691, brokerOutTime = 1246264325719, correlationId = ID-niso-53590-1246264380744-2-0, replyTo = temp-queue://ID:niso-55060-1246264380379-0:1:1, persistent = true, type = null, priority = 4, groupID = null, groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, marshalledProperties = null, dataStructure = null, redeliveryCounter = 0, size = 0, properties = null, readOnlyProperties = true, readOnlyBody = true, droppable = false, text = Hello World}

11:33:01,066 DEBUG DefaultPackageScanClassResolver:80 - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.component.file, org.apache.camel.converter, org.apache.camel.component.activemq, org.apache.activemq.camel.converter, org.apache.camel.spring.converter]
11:33:01,067 DEBUG DefaultPackageScanClassResolver:243 - Loading from jar: /home/ori7/.m2/repository/org/apache/camel/camel-core/2.0-M2/camel-core-2.0-M2.jar
11:33:01,077 DEBUG TcpTransport:458 - Stopping transport tcp://amq1/192.168.5.28:61616
11:33:01,352 DEBUG DefaultPackageScanClassResolver:243 - Loading from jar: /home/ori7/.m2/repository/org/apache/camel/camel-core/2.0-M2/camel-core-2.0-M2.jar
11:33:01,527 DEBUG DefaultPackageScanClassResolver:243 - Loading from jar: /home/ori7/.m2/repository/org/apache/camel/camel-activemq/1.1.0/camel-activemq-1.1.0.jar
11:33:01,563 DEBUG DefaultPackageScanClassResolver:243 - Loading from jar: /home/ori7/.m2/repository/org/apache/activemq/activemq-camel/5.2.0/activemq-camel-5.2.0.jar
11:33:01,615 DEBUG DefaultPackageScanClassResolver:90 - Found: [class org.apache.camel.component.file.GenericFileConverter, class org.apache.camel.converter.CamelConverter, class org.apache.camel.converter.CollectionConverter, class org.apache.camel.converter.IOConverter, class org.apache.camel.converter.NIOConverter, class org.apache.camel.converter.ObjectConverter, class org.apache.camel.converter.jaxp.DomConverter, class org.apache.camel.converter.jaxp.StaxConverter, class org.apache.camel.converter.jaxp.StreamSourceConverter, class org.apache.camel.converter.jaxp.XmlConverter, class org.apache.camel.converter.stream.StreamCacheConverter, class org.apache.camel.component.activemq.ActiveMQConverter, class org.apache.activemq.camel.converter.ActiveMQConverter, class org.apache.activemq.camel.converter.ActiveMQMessageConverter]
11:33:01,619 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.component.file.GenericFileConverter
11:33:01,625 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.CamelConverter
11:33:01,627 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.CollectionConverter
11:33:01,629 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.IOConverter
11:33:01,632 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.NIOConverter
11:33:01,634 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.ObjectConverter
11:33:01,635 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.jaxp.DomConverter
11:33:01,636 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.jaxp.StaxConverter
11:33:01,638 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter
11:33:01,639 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.jaxp.XmlConverter
11:33:01,644 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter
11:33:01,646 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.camel.component.activemq.ActiveMQConverter
11:33:01,646 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.activemq.camel.converter.ActiveMQConverter
11:33:01,647  WARN DefaultTypeConverter:197 - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.activemq.command.ActiveMQDestination org.apache.camel.component.activemq.ActiveMQConverter.toDestination(java.lang.String) to: StaticMethodTypeConverter: public static org.apache.activemq.command.ActiveMQDestination org.apache.activemq.camel.converter.ActiveMQConverter.toDestination(java.lang.String)
11:33:01,648 DEBUG AnnotationTypeConverterLoader:65 - Loading converter class: org.apache.activemq.camel.converter.ActiveMQMessageConverter
temp-queue://ID:niso-55060-1246264380379-0:1:1
11:33:20,552 DEBUG InactivityMonitor:99 - 10000 ms elapsed since last write check.
11:33:20,877 DEBUG InactivityMonitor:99 - 9999 ms elapsed since last write check.
11:33:21,080 DEBUG JmsProducer:239 - Future timed out: java.util.concurrent.TimeoutException
java.util.concurrent.TimeoutException
        at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:228)
        at java.util.concurrent.FutureTask.get(FutureTask.java:91)
        at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:231)
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:165)
        at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:151)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:136)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:150)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:104)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:102)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:89)
        at com.mycompany.CamelExample.App.main(App.java:57)
11:33:21,855 DEBUG DefaultTimeoutMap:128 - Evicting inactive request for correlationID: Entry for key: ID-niso-53590-1246264380744-2-0
11:33:30,552 DEBUG InactivityMonitor:99 - 10000 ms elapsed since last write check.
11:33:30,877 DEBUG InactivityMonitor:99 - 10000 ms elapsed since last write check.
11:33:40,552 DEBUG InactivityMonitor:99 - 10000 ms elapsed since last write check.","davsclaus:1246321743:2009-06-30T08:29:03.904+0000:1246321743:2009-06-30T08:29:03.904+0000:trunk: 789610.

Working fine here.

I have added explicit unit test based on your route. 
davsclaus:1258775951:2009-11-21T11:59:11.599+0000:1258775951:2009-11-21T11:59:11.599+0000:Closing all 2.0M3 tickets"
0,CAMEL-1769,Bug,Minor,None,2.5.0,"
None
",Closed,Won't Fix,2.5.0,Claus Ibsen,Xueqiang Mi,0,0,2009-06-29 06:54:33+00:00,2011-04-24 09:57:14+00:00,"When add a route with groovy expression, camelcontext can't provide some readable information to render the route.


For example, when adding a route, the ExpressionDefinition can convert header(""foo"").isEqualTo(""bar"") to 

{header(foo) == bar}, which can be used in groovy renderer easily. But when we save the route with the sentence {header(foo) == bar}

, the ExpressionDefinition can not convert it to a readable expression this time. It only reply a 

{Groovy[GroovyRoute$_configure_closure1@9c7307]}

 when request the expression.


The ExpressionDefinition do the following convertions:
          java fluent expression  ------------->  groovy style experssion
          groovy style expression ------------>  un-readable built-in groovy closure
So we can't render the groovy expression in web console. Maybe we should store some expressions when receiving a route with groovy expressions.","davsclaus:1282881552:2010-08-27T11:59:12.108+0000:1282881552:2010-08-27T11:59:12.108+0000:We are trimming camel-web and therefore the groovy editor is either removed or moved to an optional component.

If we remove the groovy editor then this bug can be closed with wont fix.
However there are a good chance for this, as the camel team can't maintain the groovy editor and its not much in demand.
davsclaus:1283146729:2010-08-30T13:38:49.638+0000:1283146729:2010-08-30T13:38:49.638+0000:We have removed the groovy editor from camel-web.
davsclaus:1303610234:2011-04-24T09:57:14.222+0000:1303610234:2011-04-24T09:57:14.222+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1738,Bug,Minor,1.6.0,"1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Andres,1,0,2009-06-22 11:10:06+00:00,2009-11-21 11:59:10+00:00,"There seems to be a memory leak if you are using recipientList and JMX enabled. The problem is that endpoint MBean name computed by using hashCode, if there is lot of different endpoints (created on runtime) every new endpoint will create a new MBean instance. 
Also in recipientList every entry will create new endpoint. 
In example if we have 3 urls ; 
http://host/index?id=1
http://host/index?id=2
http://host/index?id=3
Camel will add 3 different MBeans entry to JMX. As url parameters are normally unique then camel will end up with creating thousands of endpoint entries. But every MBean takes memory.","kalamaks:1245640383:2009-06-22T11:13:03.964+0000:1245640383:2009-06-22T11:13:03.964+0000:Example class to reproduce problem
kalamaks:1245640492:2009-06-22T11:14:52.955+0000:1245640492:2009-06-22T11:14:52.955+0000:JConsole picture
kalamaks:1245640985:2009-06-22T11:23:05.009+0000:1245640985:2009-06-22T11:23:05.009+0000:Temporary workaround that works for me is  to overwrite CamelNamingStrategy via custom lifecycleStrategy bean.

My custom CamelNamingStrategy overwrites getEndpointId and computes EndpointId so that url parameters not considered.
davsclaus:1245805361:2009-06-24T09:02:41.372+0000:1245805361:2009-06-24T09:02:41.372+0000:Thanks for reporting. 

JMX is scheduled for an overhaul in Camel 2.1
davsclaus:1246247709:2009-06-29T11:55:09.023+0000:1246247709:2009-06-29T11:55:09.023+0000:Duplicate of CAMEL-1771
davsclaus:1246247753:2009-06-29T11:55:53.034+0000:1246247753:2009-06-29T11:55:53.034+0000:Sorry this is JMX registering new endpoints all the time
davsclaus:1246247848:2009-06-29T11:57:28.093+0000:1246247848:2009-06-29T11:57:28.093+0000:I guess some endpoints should not consider parameters and others should as they could differ.

The http should obviously not consider parameters.
davsclaus:1246248592:2009-06-29T12:09:52.724+0000:1246248592:2009-06-29T12:09:52.724+0000:Its kinda like the issue with seda component as well.

We should have a new method on Endpoint to compute a *key* for the JMX bean to use.
{{getEndpointKey()}}
Then all your http endpoints can share the same JMX bean.

But each endpoint is registered individually in the endpoint cache as they are different as they have a different id parameter.

Thanks for the unit test. It uses about 50mb more memory with or without the patch on my laptop.
davsclaus:1246252172:2009-06-29T13:09:32.370+0000:1246252172:2009-06-29T13:09:32.370+0000:The direct component does not have its consumer named nicely as its an anonymous inner class. I am fixing this.
davsclaus:1246319175:2009-06-30T07:46:15.036+0000:1246319175:2009-06-30T07:46:15.036+0000:Fixed by CAMEL-1771
davsclaus:1246319226:2009-06-30T07:47:06.948+0000:1246319226:2009-06-30T07:47:06.948+0000:jconsole with Camel 1.6.2 showing that the http endpoints is only registered once.
davsclaus:1258775950:2009-11-21T11:59:10.696+0000:1258775950:2009-11-21T11:59:10.696+0000:Closing all 2.0M3 tickets"
0,CAMEL-1737,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Willem Jiang,0,0,2009-06-22 09:25:44+00:00,2009-11-21 11:59:10+00:00,"CXF  JAXRS endpoint provides a Http central client API , camel-cxfrs component should leverage this API to give user more choice.","njiang:1246303177:2009-06-30T03:19:37.228+0000:1246303177:2009-06-30T03:19:37.228+0000:Added an Unit test to show how to send the request with WebClient in camel-cxfrs producer.

https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsProducerTest.java
njiang:1246303568:2009-06-30T03:26:08.391+0000:1246303568:2009-06-30T03:26:08.391+0000:trunk 
http://svn.apache.org/viewvc?rev=787210&view=rev
wtam:1249485115:2009-08-05T23:11:55.561+0000:1249485115:2009-08-05T23:11:55.561+0000:Submitted revision 801457 for the following enhancements.

* The ""WebClient-centric"" camel-cxfrs producer can now propagate headers to/from camel exchange.  It uses the standard header filtering mechanism so it can be customized.

* User can plug a custom CxfRsBinding implementation to affect the binding in the provider.

* By default, it drops the internal headers such as CamelCxfRsUsingHttpAPI (see the list in CxfRsHeaderFilterStrategy).

* Only If the ""CamelCxfRsResponseClass"" header is NOT set (the default) or if it is set to javax.ws.rs.core.Response, HTTP response headers and HTTP response code are propagated then to Camel.  (It is a limitation in WebClient APIs).

* By default, the out message body is a javax.ws.rs.core.Response object if CamelCxfRsResponseClass is NOT set.  This gives users a bit more flexibility.  For example, the WebClient would throw exception if response code is not equal to 200 when the response class is specified.  A converter is created to convert from a Response to an InputStream.  Users can still get the old behavior by setting the CamelCxfRsResponseClass header to InputStream class.

* Make sure setEndpointHeaderFilterStrategy() in called on non-spring configured CXF/CXF RS endpoints

* Remove component local header ""CamelCxfRsMethod"" and use the one defined in Exchange.java (CamelHttpMethod) instead.


davsclaus:1258775950:2009-11-21T11:59:10.665+0000:1258775950:2009-11-21T11:59:10.665+0000:Closing all 2.0M3 tickets"
0,CAMEL-1736,Bug,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Willem Jiang,0,0,2009-06-22 09:17:10+00:00,2009-11-21 11:59:10+00:00,"Here is the mailing thread[1] which discuss this issue.
[1] http://www.nabble.com/-camel-cxf--Stripping-headers-td24143323.html","alitokmen:1245643249:2009-06-22T12:00:49.073+0000:1245643249:2009-06-22T12:00:49.073+0000:Attaching sample headers.
alitokmen:1245643285:2009-06-22T12:01:25.286+0000:1245643285:2009-06-22T12:01:25.286+0000:Attaching sample code.

The full sample project is on svn://svn.forge.objectweb.org/svnroot/jonas/sandbox/camel-jonas5/trunk/camel-osgi-package
njiang:1245711323:2009-06-23T06:55:23.242+0000:1245711323:2009-06-23T06:55:23.242+0000:trunk
 http://svn.apache.org/viewvc?rev=787206&view=rev
camel 1.x
 http://svn.apache.org/viewvc?rev=787220&view=rev
alitokmen:1245813038:2009-06-24T11:10:38.631+0000:1245813038:2009-06-24T11:10:38.631+0000:Thanks for the patch, looks like the auto-generated CAMEL headers are now stripped.

I'm checking if it creates any issues with other applications, but expect it not to (a WS service message's details are always expected to be in the payload or attachments, and not in the HTTP headers, anyway!)

Cheers

S. Ali Tokmen
http://ali.tokmen.com/
davsclaus:1258775950:2009-11-21T11:59:10.595+0000:1258775950:2009-11-21T11:59:10.595+0000:Closing all 2.0M3 tickets"
0,CAMEL-1735,Bug,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Unassigned,Claus Ibsen,0,0,2009-06-22 08:35:30+00:00,2009-11-21 11:59:10+00:00,No Desc,"davsclaus:1245630956:2009-06-22T08:35:56.401+0000:1245630956:2009-06-22T08:35:56.401+0000:See nabble
http://www.nabble.com/etl-example-and-message-conversion-td24142904.html
davsclaus:1245631038:2009-06-22T08:37:18.711+0000:1245631038:2009-06-22T08:37:18.711+0000:The issue is that the type converter is not discovered in the package
{{org.apache.camel.example.etl}}

That is was supposed to.
davsclaus:1245792594:2009-06-24T05:29:54.015+0000:1245793059:2009-06-24T05:37:39.632+0000:trunk: 787909, 787911.
davsclaus:1258775950:2009-11-21T11:59:10.576+0000:1258775950:2009-11-21T11:59:10.576+0000:Closing all 2.0M3 tickets"
0,CAMEL-1734,New Feature,Major,Future,None,"
None
",Closed,Fixed,None,Willem Jiang,Fernando Ribeiro,0,0,2009-06-20 20:41:11+00:00,2010-02-07 09:58:26+00:00,"Supports the CHAR, DECIMAL, INTEGER, LOGICAL and TEMP-TABLE types and depends on the Progress OpenEdge Java Open Client (tested with all versions up to 10.1C).","njiang:1245526916:2009-06-21T03:41:56.229+0000:1245526916:2009-06-21T03:41:56.229+0000:Hi Fernando,

Thanks for the contribution. I just have quick review of your code, there is no unit test, can you add them ?

Since Progress OpenEdge is a commercial product , I don't know if we could download the jar from public mvn repository and use it freely, can you clarify it ?
If not , we need to find a way to accept your code.

BTW, the codes have no Apache License declaration, you can take the other camel component module as an example.

Willem
fribeiro:1245530139:2009-06-21T04:35:39.813+0000:1245530139:2009-06-21T04:35:39.813+0000:Regarding the dependency on Progress OpenEdge, it is only available to their customers, which will need instructions for wrapping and deploying it in SMX.

I will work on the unit tests and Apache License issues right away.
jstrachan:1246244586:2009-06-29T11:03:06.710+0000:1246244586:2009-06-29T11:03:06.710+0000:Since folks at Apache won't be able to even compile this (as they won't have the jars) we might wanna move this to a separate project such as at FuseSource where there's a bunch of Camel components for commercial projects (with a private repo so things can be built using CI etc)
fribeiro:1246436315:2009-07-01T16:18:35.956+0000:1246436315:2009-07-01T16:18:35.956+0000:I don't have any problem with that, let me know how to proceed.

Updated the submission with the Apache License (are we going to stick to it?), no unit tests yet.
jstrachan:1246506839:2009-07-02T11:53:59.766+0000:1246506839:2009-07-02T11:53:59.766+0000:I've spun up a little Forge project to host this code; then we can use the private mvn repo to do CI builds against OpenEdge and so forth...

http://cameledge.fusesource.org/"
0,CAMEL-1733,Bug,Trivial,"2.0-M1, 2.0-M2",2.0-M3,"
None
",Closed,Won't Fix,2.0-M3,Claus Ibsen,Adam,0,0,2009-06-19 17:42:41+00:00,2009-11-21 11:59:10+00:00,"org.apache.camel.component.file.FileComponent.java is missing FileComponent.HEADER_FILE_NAME for M1 and M2. If it should not be there, then this is documentation issue,","davsclaus:1245623504:2009-06-22T06:31:44.003+0000:1245623504:2009-06-22T06:31:44.003+0000:All these constants are moved to {{org.apache.camel.Exchange}}.

There is a {{Exchange.FILE_NAME}} to be used in Camel 2.0 onwards.
szczepanadam:1245634770:2009-06-22T09:39:30.790+0000:1245634770:2009-06-22T09:39:30.790+0000:Excellent, many thanks for that. 
davsclaus:1258775950:2009-11-21T11:59:10.544+0000:1258775950:2009-11-21T11:59:10.544+0000:Closing all 2.0M3 tickets"
0,CAMEL-1732,Bug,Minor,"1.6.1, 2.0-M2",,"
None
",Closed,Duplicate,None,Unassigned,Jörn Kottmann,0,0,2009-06-18 09:34:17+00:00,2009-06-18 11:01:24+00:00,"The camel mail component has a feature to send a mail
in text/plain and text/html. To do that the text/html content
is placed in the message body, the text/plain content
in the header mail_alternateBody (camel 1.6.1) and the message is
send via smtp with the content type set to text/html.


The message is displayed as expected in a mail reader
but contains also the mail_alternateBody header field with
the text/plain part, which means that the text/plain part
is included twice in the mail once mime encoded and once in
the mail header.","joern:1245290148:2009-06-18T09:55:48.182+0000:1245290148:2009-06-18T09:55:48.182+0000:I will provide patches for both versions, is there a way to assign the issue to me ?"
0,CAMEL-1731,Bug,Major,1.6.1,None,"
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Guillaume Nodet,0,0,2009-06-18 09:24:27+00:00,2009-11-21 11:59:10+00:00,"It barfs with the following error:


[INFO] The projects in the reactor contain a cyclic reference: Edge between 'Vertex

{label='org.apache.camel:camel-buildtools'}

' and 'Vertex

{label='org.apache.camel:camel-buildtools'}

' introduces to cycle in the graph org.apache.camel:camel-buildtools --> org.apache.camel:camel-buildtools


The problem is that the parent pom defines the checkstyle plugin and defines a dependency on buildtools.  So when maven tries to buid buildtools, it has a dependency on itself because it is inherited from  the parent pom.


A fix would be to define a ""parent"" module.   The root pom would not define the checkstyle plugin, but this definition would be in the parent module.  The buildtool module would directly inherit from the root pom, while all other modules inherit from the ""parent"" pom.


You can see how this is set up in mina:
http://svn.apache.org/repos/asf/mina/trunk/pom.xml
http://svn.apache.org/repos/asf/mina/trunk/legal/pom.xml
http://svn.apache.org/repos/asf/mina/trunk/parent/pom.xml
http://svn.apache.org/repos/asf/mina/trunk/core/pom.xml","njiang:1245711286:2009-06-23T06:54:46.286+0000:1245711286:2009-06-23T06:54:46.286+0000:trunk
http://svn.apache.org/viewvc?rev=786141&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=787565&view=rev
davsclaus:1258775950:2009-11-21T11:59:10.496+0000:1258775950:2009-11-21T11:59:10.496+0000:Closing all 2.0M3 tickets"
0,CAMEL-1730,Improvement,Major,None,None,"
None
",Closed,Fixed,2.1.0,Willem Jiang,Guillaume Nodet,0,0,2009-06-18 09:12:01+00:00,2010-06-03 07:23:37+00:00,No Desc,"alitokmen:1245749650:2009-06-23T17:34:10.574+0000:1245749650:2009-06-23T17:34:10.574+0000:What is the motivation behind this merge?

If you want, we have a fully OSGi-based example project on svn://svn.forge.objectweb.org/svnroot/jonas/sandbox/camel-jonas5/trunk (with modules for creating missing bundles, creating route bundles, testing everything and packaging Felix + CAMEL + routes) and deploying CAMEL-SPRING seperately doesn't seem to create issues.

Thanks
davsclaus:1245820068:2009-06-24T13:07:48.311+0000:1245820068:2009-06-24T13:07:48.311+0000:It was Guillaume that suggested it while we look at an issue with Camel and OSGi related to discovering type converters in bundles.

But yes we should take a look at this again when G. comes back and is avail for a discussion.
gnodet:1245820493:2009-06-24T13:14:53.997+0000:1245820493:2009-06-24T13:14:53.997+0000:I know very well camel can be used in OSGi right now.  One of the problem comes from the way the osgi / camel integration works.  If the camel-osgi bundles is not correctly deployed (meaning camel-spring has been resolved after camel-osgi has been installed), it leads to a lot of problems.

The goal is simple to remove some of the problems by merging the two bundles together but still retain the existing behavior: i.e. just use plain Camel when deployed in a non osgi env and use the camel / osgi integration when deployed in OSGi.
I don't see any drawbacks to this approach if done correctly (i.e. no additional dependency when used in a non osgi environement).
alitokmen:1245986877:2009-06-26T11:27:57.432+0000:1245986877:2009-06-26T11:27:57.432+0000:Hello Guillaume

-- A BIT OUT OF CONTEXT --

The same bundle issues also exist between CAMEL-CXF and CXF: if you start the bundles in alphabetical order (i.e., camel-cxf and then cxf), the camel-cxf bundle tries to import cxf and since cxf is waiting for camel-cxf to deploy this never gets resolved.

There is another way of solving this issue: iPOJO. In this approach, you don't bind packages but services, therefore the start order doesn't affect the framework's stabilisation.

-- END OF OUT OF CONTEXT --

I guess CAMEL-SPRING can be deployed without OSGi... So don't you think merging it with CAMEL-OSGi would be blocking for some users?

Cheers

S. Ali Tokmen
http://ali.tokmen.com/
davsclaus:1246571377:2009-07-03T05:49:37.932+0000:1246571377:2009-07-03T05:49:37.932+0000:Scoping for Camel 2.1
njiang:1256668972:2009-10-28T02:42:52.781+0000:1256668972:2009-10-28T02:42:52.781+0000:Maybe we could leave the camel-spring alone , and create a bundle which contains camel-osgi and camel-spring module for the OSGi deployment.
When people use camel without OSGi , he can choice camel-spring; and when he want to work within an OSGi platform, he can us this camel-osgi and camel-spring merged one.

BTW, we may do the same thing for the camel-blueprint.
njiang:1256703084:2009-10-28T12:11:24.606+0000:1256703084:2009-10-28T12:11:24.606+0000:I just created a camel-spring-osgi module to merge camel-spring and camel-osgi together.
Please see the attached patch.
Since camel-osgi can work without camel-spring (CamelContextFactory), I did not merge the camel-osgi with camel-spring bundle directly.

Any thought?
davsclaus:1256956082:2009-10-31T10:28:02.871+0000:1256956082:2009-10-31T10:28:02.871+0000:Ah cool that all can be done in the pom.xml. Then no need to duplicate code.
davsclaus:1258332210:2009-11-16T08:43:30.328+0000:1258332210:2009-11-16T08:43:30.328+0000:BTW I wonder if camel-spring-osgi should be in the assembly as well so its included in the big ZIP file?

njiang:1258332408:2009-11-16T08:46:48.965+0000:1258332408:2009-11-16T08:46:48.965+0000:trunk
 http://svn.apache.org/viewvc?rev=880661&view=rev
update the features file
 http://svn.apache.org/viewvc?rev=880670&view=rev

njiang:1258332794:2009-11-16T08:53:14.931+0000:1258332794:2009-11-16T08:53:14.931+0000:@ Claus,
I don't think we need put camel-spring-osgi into the big ZIP file.
as it just repack the camel-spring and camel-osgi bundle, and it is mainly used for OSGi :)
davsclaus:1258333133:2009-11-16T08:58:53.384+0000:1258333133:2009-11-16T08:58:53.384+0000:@Willem

Yeah that was also my initial thought but wanted to know anyway.
davsclaus:1275521017:2010-06-03T07:23:37.600+0000:1275521017:2010-06-03T07:23:37.600+0000:Closing old resolved issues"
0,CAMEL-1729,Bug,Major,None,"1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Willem Jiang,Guillaume Nodet,0,0,2009-06-18 09:05:19+00:00,2009-11-21 11:59:10+00:00,No Desc,"gnodet:1245287301:2009-06-18T09:08:21.942+0000:1245287301:2009-06-18T09:08:21.942+0000:Fixed in 1.x branch:

Sending        camel-osgi/src/main/java/org/apache/camel/osgi/Activator.java
Sending        camel-osgi/src/main/java/org/apache/camel/osgi/OsgiAnnotationTypeConverterLoader.java
Sending        camel-osgi/src/test/java/org/apache/camel/osgi/ActivatorTest.java
Transmitting file data ...
Committed revision 785968.

njiang:1245311024:2009-06-18T15:43:44.635+0000:1245311024:2009-06-18T15:43:44.635+0000:camel trunk
http://svn.apache.org/viewvc?rev=785987&view=rev
davsclaus:1258775950:2009-11-21T11:59:10.475+0000:1258775950:2009-11-21T11:59:10.475+0000:Closing all 2.0M3 tickets"
0,CAMEL-1728,Bug,Major,"1.6.1, 2.0-M2",2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-18 06:37:35+00:00,2009-11-21 11:59:10+00:00,"See nabble
http://www.nabble.com/AmbiguousMethodCallException-td24042324s22882.html","davsclaus:1245281210:2009-06-18T07:26:50.095+0000:1245281210:2009-06-18T07:26:50.095+0000:trunk: 785941.
davsclaus:1258775950:2009-11-21T11:59:10.449+0000:1258775950:2009-11-21T11:59:10.449+0000:Closing all 2.0M3 tickets"
0,CAMEL-1727,Bug,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-06-18 05:45:50+00:00,2009-11-21 11:59:10+00:00,"See nabble
http://www.nabble.com/Camel-Mail%3A-Alternate-body-is-included-twice-td24049547.html","davsclaus:1245275617:2009-06-18T05:53:37.489+0000:1245275617:2009-06-18T05:53:37.489+0000:trunk: 785915.
1.x: 785916.
davsclaus:1258775950:2009-11-21T11:59:10.405+0000:1258775950:2009-11-21T11:59:10.405+0000:Closing all 2.0M3 tickets"
0,CAMEL-1726,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Hadrian Zbarcea,john robens,0,0,2009-06-18 01:16:34+00:00,2009-07-20 04:08:13+00:00,"Hi 


SNAPSHOT in POM files does not work . Should be M2. Sounds trivial, but probably is a barrier for people trialing this software.","davsclaus:1245798910:2009-06-24T07:15:10.368+0000:1245798910:2009-06-24T07:15:10.368+0000:Hadrian could you take a look at this? Could be something related to the release process. We should make sure the 2.0 final POMs are okay.
njiang:1246236442:2009-06-29T08:47:22.602+0000:1246236442:2009-06-29T08:47:22.602+0000:@Claus,

I don't think this is an issue. since the example's project version will be updated when we did the release. 
And let the example dependents on the current SNAPSHOT vesion could help us to make sure the snapshot changes don't broke the unit tests of example.

If the use wants to try out the example, he could choice the released version of example instead of the SNAPSHOT one.


davsclaus:1246246783:2009-06-29T11:39:43.894+0000:1246246783:2009-06-29T11:39:43.894+0000:Is it the 2.0m2 .zip distribution that has SNAPSHOT in pom.xml? If so we should make sure its correct in the 2.0 final release.

Yeah the examples in trunk should depend on SNAPSHOT so we can test it with latest code.
jrobens:1246253915:2009-06-29T13:38:35.704+0000:1246253915:2009-06-29T13:38:35.704+0000:I downloaded the M2 tar file today and it was fine. 

I updated from subversion and the only error I got is (macos/java 1.6_13):

2009-06-29 22:02:09.201::WARN:  EXCEPTION on HttpExchange@10779770=POST//localhost:52319/cometd/cometd#4
org.eclipse.jetty.io.EofException
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:310)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:203)
	at org.eclipse.jetty.client.HttpConnection.handle(HttpConnection.java:271)
	at org.eclipse.jetty.client.SocketConnector$1.run(SocketConnector.java:71)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:436)
	at java.lang.Thread.run(Thread.java:613)
2009-06-29 22:02:09.201::WARN:  IOE on HttpExchange@10779770=POST//localhost:52319/cometd/cometd#9
passed CometDisconnectFailureTest.testDisconnectFailure


hadrian:1246254274:2009-06-29T13:44:34.154+0000:1246254274:2009-06-29T13:44:34.154+0000:The examples in our code, actually all subprojects do depend on the *same* snapshot version.  One step in the release process is to update the release version.  Consequently all projects, components and examples will depend on the correct version in the release.

This is the way it should be to ensure that the examples keep working while we make changes to the code."
0,CAMEL-1725,Improvement,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-06-17 13:04:41+00:00,2009-11-21 11:59:10+00:00,"We should at least once at INFO level log whether OSGi was detected or not.


And in the camel-osgi we should have more DEBUG / TRACE logging as well.","davsclaus:1245218134:2009-06-17T13:55:34.332+0000:1245218134:2009-06-17T13:55:34.332+0000:trunk: 785599.
1.x: 785603.
davsclaus:1258775950:2009-11-21T11:59:10.388+0000:1258775950:2009-11-21T11:59:10.388+0000:Closing all 2.0M3 tickets"
0,CAMEL-1724,Bug,Major,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Claus Ibsen,0,0,2009-06-17 10:46:16+00:00,2009-11-21 11:59:10+00:00,No Desc,"davsclaus:1245206825:2009-06-17T10:47:05.503+0000:1245206825:2009-06-17T10:47:05.503+0000:On delivery attempt: 0 caught: org.springframework.mail.MailSendException; nested exceptions (1) are:
Failed message 1: javax.mail.MessagingException: IOException while sending message (javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii)
org.springframework.mail.MailSendException; nested exception details (1) are:
Failed message 1:
javax.mail.MessagingException: IOException while sending message (javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii)
        at com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.java:625)
        at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:403)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:342)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:357)
        at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346)
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:69)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:87)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:189)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:133)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:115)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:89)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55)
        at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)
        at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:90)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:82)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
        at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:154)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:90)
        at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:100)
        at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:66)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:146)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:170)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:651)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:676)
        at java.lang.Thread.run(Thread.java:613)
Caused by: javax.activation.UnsupportedDataTypeException: text/plain; charset=us-ascii
        at javax.activation.DataHandler.writeTo(DataHandler.java:78)
        at javax.mail.internet.MimeMessage.writeTo(MimeMessage.java:1166)
        at com.sun.mail.smtp.SMTPTransport.sendMessage(SMTPTransport.java:585)
        ... 39 more

 
davsclaus:1245207270:2009-06-17T10:54:30.204+0000:1245207270:2009-06-17T10:54:30.204+0000:1.x: 785548.
2.0: 785549.
davsclaus:1258775950:2009-11-21T11:59:10.361+0000:1258775950:2009-11-21T11:59:10.361+0000:Closing all 2.0M3 tickets"
0,CAMEL-1723,Improvement,Minor,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Roman Kalukiewicz,Roman Kalukiewicz,0,0,2009-06-17 09:44:18+00:00,2009-11-21 11:59:10+00:00,createInOutTemplate() method in JmsConfiguration sets Time to Live parameter to requestTimeout ignoring any TTL previously set. As this is nice default value it would be good to be able to change it.,davsclaus:1258775950:2009-11-21T11:59:10.314+0000:1258775950:2009-11-21T11:59:10.314+0000:Closing all 2.0M3 tickets
0,CAMEL-1722,Improvement,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-16 16:27:18+00:00,2009-11-21 11:59:10+00:00,"Force the wrapping of a pipeline so its always IN that end users should use to get the payload.


Now it depends on the number of sub processors in the route. If you only have 1 processor then there is no pipeline wrapped.
If you have 2+ then Camel will wrap a pipeline.


We should always force a pipeline then its consistent to use IN","davsclaus:1245636504:2009-06-22T10:08:24.603+0000:1245636504:2009-06-22T10:08:24.603+0000:See nabble
http://www.nabble.com/Information-required-about-IN-OUT-pattern-of-splitter-EIP-td24053037.html
davsclaus:1245636609:2009-06-22T10:10:09.454+0000:1245636609:2009-06-22T10:10:09.454+0000:trunk: 787184.

Now when using {{AggregationStrategy}} the body is always in IN and the OUT is null. This eliminates the confusion of whether to use IN or OUT.

davsclaus:1258775950:2009-11-21T11:59:10.294+0000:1258775950:2009-11-21T11:59:10.294+0000:Closing all 2.0M3 tickets"
0,CAMEL-1721,Bug,Minor,2.0-M1,None,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Joe Gottman,0,0,2009-06-16 14:29:41+00:00,2009-11-21 11:59:10+00:00,"There are a few minor problems with the website:


1)  The link for the pdf version of the Camel 2.0-M2 manual is broken.
2) The list of components does not include camel-jing
3) @Handler is not included in the list of new annotations on the ""Camel 2.0-M2 release"" page.
4) Also on the ""Camel 2.0-M2 release"" page, a new option for the File component is described as ""existFile"".  This should be ""fileExist"".","davsclaus:1245140500:2009-06-16T16:21:40.409+0000:1245140500:2009-06-16T16:21:40.409+0000:ad 1)
Hadrian will take care of it. Takes some time for the html website to be updated

ad 2)
camel-jing contains 2 components with scheme name: rng and rnc.
If you look at the components page they list the artifact as camel-jing

ad 3)
Fixed

ad 4)
Fixed

Note 3 and 4 is fixed on the ongoing 2.0 release page. And not the 2.0m2.
davsclaus:1258775950:2009-11-21T11:59:10.266+0000:1258775950:2009-11-21T11:59:10.266+0000:Closing all 2.0M3 tickets"
0,CAMEL-1720,Improvement,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-16 14:06:00+00:00,2009-11-21 11:59:10+00:00,"We should disable the stream cache by default in Camel 2.0.


Then add options in Spring DSL and Java DSL to enable it on demand.
It can cause side effects of chaining the body type that can confuse end users.


If users are using streams then they need to add this option on the route.


ServiceMix will handle this in its servicemix-camel component when it gets upgraded to use Camel 2.0.","davsclaus:1245652503:2009-06-22T14:35:03.648+0000:1245652503:2009-06-22T14:35:03.648+0000:trunk: 787246.

Notice: StreamCache is now disabled by default. 
davsclaus:1258775950:2009-11-21T11:59:10.221+0000:1258775950:2009-11-21T11:59:10.221+0000:Closing all 2.0M3 tickets"
0,CAMEL-1719,Bug,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-16 11:47:15+00:00,2009-11-21 11:59:10+00:00,"See nabble:
http://www.nabble.com/Error-not-raised-by-Camel-if-the-%40Header-type-define-in-a-bean-is-not--correct-td24051086s22882.html","davsclaus:1245129897:2009-06-16T13:24:57.545+0000:1245129897:2009-06-16T13:24:57.545+0000:trunk: 785204.
davsclaus:1258775950:2009-11-21T11:59:10.202+0000:1258775950:2009-11-21T11:59:10.202+0000:Closing all 2.0M3 tickets"
0,CAMEL-1718,Improvement,Major,2.0-M2,Future,"
None
",Closed,Won't Fix,Future,Unassigned,Christian Schneider,0,0,2009-06-16 07:04:07+00:00,2010-02-07 09:55:24+00:00,"Currently management and impl are tangled by a InstrumentationLifecycleStrategy and DefaultCamelContext. For example the DefaultCamelContext decides if JMX should be used and falls back to the DefaultLifecycleStrategy. 


I think DefaultCamelContext should not know about JMX. So my proposal is to add a fallback lifecycle strategy to IntrumentationLifecycle. So it can delegate to this strategy if jmx does not work. So this logic can be removed from DefaultCamelContext.


Another issue is with Service and ServiceSupport. ManagedService refrences ServiceSupport instead of Service. I think this is only because it needs an isStarted method. So I suggest to add this method to Service. Of course this means that several classes that implement Service need one new method but I think this is ok as isStarted can be quite usefull anyway.
Additionally I would move ServiceSupport to camel as many packages need it. 


Together these changes make the dependencies much easier to understand and remove cycles.


I will add a patch for this shortly and hope it can be included into 2.0 as it changes the API.","davsclaus:1245109581:2009-06-16T07:46:21.397+0000:1245109581:2009-06-16T07:46:21.397+0000:Christian hold your horses on this one.

The JMX is scheduled for a total overhaul in Camel 2.1.
You are still welcome to submit a patch but we might not commit it.
davsclaus:1245140079:2009-06-16T16:14:39.605+0000:1245140079:2009-06-16T16:14:39.605+0000:Christian fell free to provide patches that improves the package tangling. That will be helpful before we overhaul the JMX in Camel 2.1
The overhaul is more about the function and feature of JMX. So we will change the API at that time.
cschneider:1245159335:2009-06-16T21:35:35.739+0000:1245159335:2009-06-16T21:35:35.739+0000:I am not sure if this patch is already ready for inclusion but I post it to get some feedback.

Additional to the issue text I have removed the dependency from impl to management. This is done by creating the instrumentation lifecycle in builder. So impl does not have to know anything about the management package. This has the side effect that a simple call to new DefaultCamelContext() will not activate the InstrumentationLifecycle. This could be a migration issue for some people. 

I have also moved MainSupport into an own package main. This will remove some more dependencies from impl to view. At the moment the new package only has one class but I think it could be the starting point for factory classes that wire the parts of camel together. At the moment camel does much of its wiring in the impl and model classes which is bad as it creates many cycles.
davsclaus:1258027606:2009-11-12T20:06:46.902+0000:1258027606:2009-11-12T20:06:46.902+0000:I am resolving this as wont fix.

The codebase in 2.1 has changed since 2.0.
So after the 2.1 release feel free to take a look at it again."
0,CAMEL-1717,Improvement,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Christian Schneider,0,0,2009-06-16 06:21:02+00:00,2009-11-21 11:59:10+00:00,"Currently util and model reference each other what makes them difficult to understand separately. 


When you look closely at the references you see that model only needs one class ProcessorDefinitionHelper. As this class only needs other classes from model I think it should belong to model. As this class is only needed from model I think it does not need to be public. So it is also clear that the class does not belong to the camel model classes users should access.","cschneider:1245104682:2009-06-16T06:24:42.284+0000:1245104682:2009-06-16T06:24:42.284+0000:Patch is only for camel core. So it is probably best you do the two steps by hand instead of using it.
davsclaus:1245140971:2009-06-16T16:29:31.258+0000:1245140971:2009-06-16T16:29:31.258+0000:trunk: 785285.
davsclaus:1258775950:2009-11-21T11:59:10.167+0000:1258775950:2009-11-21T11:59:10.167+0000:Closing all 2.0M3 tickets"
0,CAMEL-1716,Bug,Major,2.0.0,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Oliver Hecker,0,0,2009-06-15 21:18:43+00:00,2009-11-21 11:59:10+00:00,"The current implementation for CAMEL-1637 fails if the string constants in the two expressions are enclosed in single quotation marks as given in the following example 



${in.header.foo} == 'abc' and ${in.header.bar} == '123'




This is due to an issue with the GROUP_PATTERN regular expression in SimpleLanguageSupport.java. The matching pattern in between the single quotes is greedy and thus does not match correctly.","ohecker:1245072134:2009-06-15T21:22:14.908+0000:1245072134:2009-06-15T21:22:14.908+0000:A patch file to extend the given unit tests to reproduce the problem and a patch containing the fix for the issue.
davsclaus:1245099894:2009-06-16T05:04:54.060+0000:1245099894:2009-06-16T05:04:54.060+0000:Thanks a lot Oliver for reporting and providing a patch with unit test as well. That is great. Keep 'em coming :)

trunk: 785080.
davsclaus:1258775950:2009-11-21T11:59:10.119+0000:1258775950:2009-11-21T11:59:10.119+0000:Closing all 2.0M3 tickets"
0,CAMEL-1715,New Feature,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-15 14:38:20+00:00,2009-11-21 11:59:10+00:00,"TransactionErrorHandler is solely relying on the backing system handling redelivery et. all.


What we should allow as end users in the past have requested is to mix these two. So you can use TransactionErrorHandler and still leverage all the goodies we know from the dead letter channel to eg. do redelivery inside Camel. But at the end still signaling an exception to the TransactionErrorHandler if we still could not process it.


This allows you for instance to consume from a JMS queue, do some routing in Camel and allow Camel to do eg. local redelivery. For instance to upload some data to a FTP server still in the same transaction.


For example if you had prior some processing steps that was expensive to compute it could make sense to have local redelivery near the problem instead of rolling the entire exchange back and retry from zero.


And on top of that we leverage that all 3 major error handlers in Camel



dead letter channel
default error handler
transactional error handler



All leverages on the same base class, the RedeliverErrorHandler, this allows us to reuse code.


The spring transactional error handler needs a few callback hooks from RedeliverErrorHandler to be able to run inside a spring TX template.","davsclaus:1245049455:2009-06-15T15:04:15.206+0000:1245049455:2009-06-15T15:04:15.206+0000:trunk: 784803.
davsclaus:1245054906:2009-06-15T16:35:06.229+0000:1245054906:2009-06-15T16:35:06.229+0000:Updated wiki as well
davsclaus:1258775950:2009-11-21T11:59:10.101+0000:1258775950:2009-11-21T11:59:10.101+0000:Closing all 2.0M3 tickets"
0,CAMEL-1714,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,None,Willem Jiang,Willem Jiang,0,0,2009-06-15 12:50:10+00:00,2010-02-07 09:55:24+00:00,No Desc,njiang:1252474116:2009-09-09T13:28:36.738+0000:1252474116:2009-09-09T13:28:36.738+0000:Current we didn't see the requirement for upgrading camel-spring test to JUnit 4.
0,CAMEL-1713,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,None,Unassigned,Willem Jiang,0,0,2009-06-15 12:49:48+00:00,2010-02-07 09:55:24+00:00,No Desc,"njiang:1252473957:2009-09-09T13:25:57.644+0000:1252473957:2009-09-09T13:25:57.644+0000:Since JUnit4 supports to run the JUnit3 test, we don't need to upgrade the camel-core's unit test to JUnit 4."
0,CAMEL-1712,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0.0,Willem Jiang,Willem Jiang,0,0,2009-06-15 12:49:33+00:00,2010-02-07 09:55:24+00:00,No Desc,
0,CAMEL-1711,Bug,Critical,"1.6.1, 2.0-M2","1.6.2, 2.0-M3","
None
",Closed,Fixed,"1.6.2, 2.0-M3",Claus Ibsen,Andreas Kuhtz,0,0,2009-06-15 11:16:27+00:00,2009-11-21 11:59:10+00:00,"I've a spring based web application that has 2 applicationContexts (the second has the first as parent). My problem is that the SpringCamelContext listens to the ContextRefreshedEvent and starts the camel context.


This works fine if you have only 1 context but if the ContextRefreshedEvent of the second context is received the routes are started a second time.
The second start of the camel context is catched correctly (in ServiceSupport) but I think the the startRoutes() in the start()-method of DefaultCamelContext should also prevent to be called twice...  


See discussion here http://www.nabble.com/How-to-prevent-routes-from-started-twice--td23983653.html


Attached is a test-project. The core project simply defines a service that is exported in the web project. The applicationContext-services.xml creates the camelContext and the DispatcherServlet is used to export the service as remoteService.


Start the webapp with the jetty-run.cmd in the web project. The logfile is created in the web project.


The root web application context is started:



2009-06-15 11:43:24.771 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Publishing spring-event: \
   org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a: \
   display name [Root WebApplicationContext]; startup date [Mon Jun 15 11:43:22 CEST 2009]; root of context hierarchy]
2009-06-15 11:43:24.771 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Starting the CamelContext now that the ApplicationContext has started
2009-06-15 11:43:24.771 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) is starting
....
2009-06-15 11:43:25.245 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) started
....
2009-06-15 11:43:25.372 INFO  [main][org.springframework.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 2420 ms
2009-06-15 11:43:25.435 INFO  [main][/camel-spring-problem-web] - Initializing Spring FrameworkServlet 'CamelSpringProblem'
2009-06-15 11:43:25.435 INFO  [main][org.springframework.web.servlet.DispatcherServlet] - FrameworkServlet 'CamelSpringProblem': initialization started
2009-06-15 11:43:25.435 INFO  [main][org.springframework.web.context.support.XmlWebApplicationContext] - Refreshing org.springframework.web.context.support.XmlWebApplicationContext@1ccbdf7: \
   display name [WebApplicationContext for namespace 'CamelSpringProblem-servlet']; startup date [Mon Jun 15 11:43:25 CEST 2009]; parent: \
   org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a
...




And now the web application context for the servlet is started:



2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Publishing spring-event: \
   org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.web.context.support.XmlWebApplicationContext@1ccbdf7: \
   display name [WebApplicationContext for namespace 'CamelSpringProblem-servlet']; startup date [Mon Jun 15 11:43:25 CEST 2009]; \
   parent: org.springframework.web.context.support.XmlWebApplicationContext@1d4e49a]
2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.spring.SpringCamelContext] - Starting the CamelContext now that the ApplicationContext has started
2009-06-15 11:43:25.530 DEBUG [main][org.apache.camel.management.DefaultInstrumentationAgent] - Registered MBean with objectname: \
   org.apache.camel:context=chaw389c/camel-amq,type=consumers,name=JmsConsumer(0x14bcb5c)
2009-06-15 11:43:25.530 INFO  [main][org.apache.camel.impl.DefaultCamelContext] - Apache Camel 1.6.1 (CamelContext:camel-amq) started
2009-06-15 11:43:25.530 INFO  [main][org.springframework.web.servlet.DispatcherServlet] - FrameworkServlet 'CamelSpringProblem': initialization completed in 95 ms




The ContextRefreshedEvent is published and causes the SpringCamelContext to handle the event and try to start the camel context again. But the start() in DefaultCamelContext calls super.start() and ServiceSupport detects correctly that the context is already started and does nothing but the call to startRoutes(...) is executed and this should no happen.


DefaultCamelContext.java
public void start() throws Exception {
        super.start();
        
        // the context is now considered started (i.e. isStarted() == true))
        // starting routes is done after, not during context startup
        synchronized (this) {
            startRoutes(routes);
        }

        LOG.info(""Apache Camel "" + getVersion() + "" (CamelContext:"" + getName() + "") started"");
}




My favorite solution would be to add a flag that would prevent the camel context to be started from the ContextRefreshed event but allows to start the context manually from another user defined bean (possible by calling the start() method on SpringCamelContext. The shouldStartContext blocks both ways if set to false.","akuhtz:1245035823:2009-06-15T11:17:03.655+0000:1245035823:2009-06-15T11:17:03.655+0000:Sample project
akuhtz:1245035869:2009-06-15T11:17:49.968+0000:1245035869:2009-06-15T11:17:49.968+0000:The logfile that contains the messages that are referenced in the description
davsclaus:1245140871:2009-06-16T16:27:51.623+0000:1245140871:2009-06-16T16:27:51.623+0000:We had another Camel user report this on user forum.
davsclaus:1245205232:2009-06-17T10:20:32.852+0000:1245205232:2009-06-17T10:20:32.852+0000:Andreas are you using CXF with your project?
akuhtz:1245205917:2009-06-17T10:31:57.364+0000:1245205917:2009-06-17T10:31:57.364+0000:The sample project does not contain CXF and the problem exists (... in my real project I use CXF ...).
davsclaus:1245210913:2009-06-17T11:55:13.046+0000:1245210913:2009-06-17T11:55:13.046+0000:trunk: 785564.

Andreas could you give it a test? You could grap the source and build yourself or wait for a SNAPSHOT to be deployed to the apache maven snapshot repo
davsclaus:1245214934:2009-06-17T13:02:14.410+0000:1245214934:2009-06-17T13:02:14.410+0000:1.x: 785578.
akuhtz:1245215272:2009-06-17T13:07:52.027+0000:1245215272:2009-06-17T13:07:52.027+0000:Currently building trunk ... 

But one thing that I've already seen: The {{doStart()}} calls {{maybeDoStart()}} that checks {{getShouldStartContext()}} and this prevents the camel context to 
be started from another bean calling the {{start()}} on the camel context (Our usecase: We use camel on a richclient and must wait for the user to login before the camel context can be started. Therefore we have a bean that listens on a special event to start the camel context) if the {{shouldStartContext}} flag is set to false.
If {{doStart()}} would just be 
{code}
protected void doStart() throws Exception {
    super.doStart();
    if (eventEndpoint == null) {
        eventEndpoint = createEventEndpoint();
    }
}
{code}
this would work.

I'm not sure if this additional check in {{doStart()}} is needed in other cases but I haven't seen any reason....

akuhtz:1245241507:2009-06-17T20:25:07.864+0000:1245241507:2009-06-17T20:25:07.864+0000:Claus, the fix works fine for me. However I think my comment (06:07 AM) about the {{doStart()}} method above should be added.
pledge:1247187923:2009-07-10T09:05:23.960+0000:1247187923:2009-07-10T09:05:23.960+0000:We found this issue too.  Running against the latest CI build of 1.6.x does seem to fix the problem.
davsclaus:1247188155:2009-07-10T09:09:15.004+0000:1247188155:2009-07-10T09:09:15.004+0000:Martin can you download and build from the source locally. The Apache maven repo for SNAPSHOTS can get ***** and return old .jars.
pledge:1247188741:2009-07-10T09:19:01.196+0000:1247188741:2009-07-10T09:19:01.196+0000:Claus, we took a build from the Camel Hudson server (a problem with our corporate Maven proxy is preventing Camel building).  We've been running off it for most of this week and it seems fine.
davsclaus:1258775950:2009-11-21T11:59:10.030+0000:1258775950:2009-11-21T11:59:10.030+0000:Closing all 2.0M3 tickets"
0,CAMEL-1710,Bug,Major,None,None,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Willem Jiang,0,0,2009-06-15 07:55:44+00:00,2009-11-21 11:59:09+00:00,"The test is failed because of recent change in camel repository


org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWritten =================
java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:879)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:861)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWritten(FileExclusiveReadRenameStrategyTest.java:90)


org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWrittenWithTimeoutAndNoop =================
java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:879)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:861)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.file.FileExclusiveReadRenameStrategyTest.testPollFileWhileSlowFileIsBeingWrittenWithTimeoutAndNoop(FileExclusiveReadRenameStrategyTest.java:145)","davsclaus:1245025807:2009-06-15T08:30:07.952+0000:1245025807:2009-06-15T08:30:07.952+0000:the same mistake is in FileLockExclusiveReadLockStrategy also!
njiang:1245311113:2009-06-18T15:45:13.228+0000:1245311113:2009-06-18T15:45:13.228+0000:trunk
http://svn.apache.org/viewvc?rev=784697&view=rev
davsclaus:1258775949:2009-11-21T11:59:09.983+0000:1258775949:2009-11-21T11:59:09.983+0000:Closing all 2.0M3 tickets"
0,CAMEL-1709,New Feature,Major,None,2.3.0,"
None
",Closed,Won't Fix,2.3.0,Unassigned,Claus Ibsen,0,0,2009-06-15 05:15:00+00:00,2011-04-24 10:01:32+00:00,"We have onRedeliver(Processor) that is executed for any redeliver. We should add a support for specifying which excpetions it should occur for so you can do custom on redeliver for certain exceptions such as: IOException, ConnectException or the likes.


We could consider having it like the other global onXXX



onException
onCompletion



Then you can have cross cutting processing for any routes that redelivers","davsclaus:1269833560:2010-03-29T11:32:40.112+0000:1269833560:2010-03-29T11:32:40.112+0000:This may be overkill and a feature which end users may not really need.
davsclaus:1303610492:2011-04-24T10:01:32.875+0000:1303610492:2011-04-24T10:01:32.875+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1708,Improvement,Major,2.0-M1,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Stephen Gargan,0,0,2009-06-15 01:57:11+00:00,2009-11-21 11:59:09+00:00,"Attached is a patch to allow for Routes to be included and excluded using ant like path patterns. Packages to be scanned are supplied as ususal, but whether the Route classes discovered in these packages are included is now also controlled by sets of include and exclude filters. 


This mechanism is defined as a subelement of the CamelContext definition in Spring context as follows. 


<camelContext xmlns=""http://camel.apache.org/schema/spring"">


    <packageScan>
      <packages>org.apache.camel.spring.config.scan</packages>
      <exclude>**/Excluded</exclude>
      <include>**/Included</include>
    </packageScan>
    ....
</camelContext>


It leverages Spring's AntPathMatcher to match fully qualified class names against the supplied patterns. The existing <package></package> definition has been deprecated and will emit a log message suggesting the new mechanism.


This patch also includes code to allow Routes to be selectively excluded via class matching at test time. i.e.


public class RouteExcludingSpringTest extends SpringTestSupport {


    @Override
    protected AbstractXmlApplicationContext createApplicationContext() {
        return new ClassPathXmlApplicationContext(new String[] 

{""routes-context.xml""}

, getRouteExcludingApplicationContext());
    }


    ....


    @Override
    protected Class excludeRoute() 

{

        return MyExcludedRouteBuilder.class;
    }

}  


I hope you can find this usefull. I'll be happy to make any changes you might suggest.


rgds,


Stephen","davsclaus:1245010399:2009-06-15T04:13:19.070+0000:1245010399:2009-06-15T04:13:19.070+0000:Stephen

Very good work. Its definitely great.

Just a few comments:
- I think we should name the includes like the file based one: so they should end with and s: *includes* and *excludes*.
- The patch includes changes to files that hasn't anything with this new feature (I saw 1 unit test). The problem is that it looks like some auto code formatter has been applied and it changes the existing format. So is it possible to tone down this? For instance could you look into you changes files and revert the changes where it is not needed to respect the existing code format.
- And could you run: {{mvn compile -Psourcecheck}} that runs a checkstyle that all Camel code should adhere to.
- Good idea about the sub scan package and leveraging what we got in there.  :)

By again cool feature, great work and we love it. You got great skills!

Would you also be willing to help with documenting this new feature?
sgargan:1245017795:2009-06-15T06:16:35.740+0000:1245017795:2009-06-15T06:16:35.740+0000:Claus,

I can't really take credit, the scan framework lends itself nicely to extension. It's easy when its all laid out to begin with ;). 

Yeah, didn't mean to try and slip something in under the radar.  The test was failing on me for some reason. I took a quick look ad it seemed the routes were coming out in the reverse order so I added a little to grab it by name. I didn't figure it warranted its own patch, but I should have said it was attached.  I'll make the changes and upload a new patch.

I'd be happy to document it, just a couple of things; Where would you like it to go? How do you go about editing the confluence pages? Will my Jira credentials work?

thanks,

ste

davsclaus:1245020699:2009-06-15T07:04:59.475+0000:1245020699:2009-06-15T07:04:59.475+0000:Stephen, cool.

AFAIR the JIRA and Confluence are not linked with username. So you gotta signup at confluence.

There is a link on the page about how do I edit the wiki pages
http://camel.apache.org/contributing.html

When you got a confluence username, then I can grant you karma so you can edit.

I guess the best spot to add docu about this new feature is at:
http://camel.apache.org/spring.html



sgargan:1245054181:2009-06-15T16:23:01.027+0000:1245054181:2009-06-15T16:23:01.027+0000:Sounds good,  I'll sign up. Here's another patch, with those changes.


davsclaus:1245102451:2009-06-16T05:47:31.248+0000:1245102451:2009-06-16T05:47:31.248+0000:Hi

Could you split the patch into 2 files: 1 files for came-core and another for camel-spring?
I hate applying big patch to SVN its painful when it gets messy (looking forward to git)

And please also undo all the code formatting you have done in files that hasn't anything to do with this new feature.

For instance you should not change the existing code layout such as:
{code}
-        // do special preparation for some concepts such as interceptors and policies
-        // this is needed as JAXB does not build excaclty the same model definition as Spring DSL would do
-        // using route builders. So we have here a little custom code to fix the JAXB gaps
+        // do special preparation for some concepts such as interceptors and
+        // policies
+        // this is needed as JAXB does not build excaclty the same model
+        // definition as Spring DSL would do
+        // using route builders. So we have here a little custom code to fix the
+        // JAXB gaps
{code}

If not then I need to go over and do that manually. We want to keep the existing format and only
apply patches that fixes the issue its subject to.


And btw PackageScanDefinition should be added to {{jaxb.index}} file. Something that is very often forgotten.
sgargan:1245156395:2009-06-16T20:46:35.532+0000:1245156395:2009-06-16T20:46:35.532+0000:Will do, Didn't really mean to format stuff I wasn't writing. I have a compulsive twitch that has me hit the formatter by default ;). I'll get back to you about the patches.

ste

sgargan:1245180065:2009-06-17T03:21:05.134+0000:1245180065:2009-06-17T03:21:05.134+0000:So I've undone any formatting changes not related to the patches.

 I've been using the formatting rules for eclipse from the project, are these not correct? Is there a beautifier I could run before submission to make sure the code was consistent with the project's standards? 

I've also got a small amount of documentation to add to the confluence wiki if I can get access.
davsclaus:1245190097:2009-06-17T06:08:17.975+0000:1245194229:2009-06-17T07:17:09.031+0000:Thanks a lot for the patch and helping with providing the patch multiple times.

trunk: 785479, 785490.

You can run {{mvn compile -Psourcecheck}} to check if the code is formatted correct.

I guess your eclipse format is a bit extreme in the limit of line lengths. At Camel its like 140+ chars.

Before we can wrap this one we need to have the documentation in wiki as well.
Stephen if you could help here that would be great. Let me know when you have created an account on the wiki.


davsclaus:1245194211:2009-06-17T07:16:51.021+0000:1245194211:2009-06-17T07:16:51.021+0000:Stephen,

I renamed the <packages> to <package> in the <packageScan> tag.
You can have 1..n package

For instance
{code}
<packageScan>
  <package>com.foo</package>
  <package>com.bar</package>
  <excludes>**/*JustForTest*</excludes>
<packageScan>
{code}


sgargan:1245233195:2009-06-17T18:06:35.528+0000:1245233195:2009-06-17T18:06:35.528+0000:That's strange, as I did run the sourcecheck and cleared out any warnings it gave. I'm also using the eclipse formatting settings from the etc/eclipse directory. Are the rules there not the latest? Anyhow, I understand though that changes to the comments are just noisy in a patch. Thetwo replacements should be clean. I'll up the line length to 140 to see if that helps.

rgds,

ste

davsclaus:1245623574:2009-06-22T06:32:54.450+0000:1245623574:2009-06-22T06:32:54.450+0000:Stephen have done the documentation now. Cool.
http://camel.apache.org/spring.html
davsclaus:1258775949:2009-11-21T11:59:09.956+0000:1258775949:2009-11-21T11:59:09.956+0000:Closing all 2.0M3 tickets"
0,CAMEL-1707,New Feature,Major,None,None,"
None
",Closed,Won't Fix,2.6.0,Claus Ibsen,Willem Jiang,0,0,2009-06-14 07:44:26+00:00,2011-04-24 09:58:21+00:00,"URI Scheme for Java(tm) Message Service 1. 0 [1] has the definitions of JNDI like this



jms:jndi:SomeJndiNameForDestination?jndiInitialContextFactory= com.example.jndi.JndiFactory&priority=3





 jms:jndi:REQ_QUEUE?jndiURL=file:/C:/JMSAdmin&jndiInitialContextFactory=com.sun.jndi.fscontext.RefFSContextFactory&jndiConnectionFactoryName=CONNFACT  &replyToName=RESP_QUEUE




We may need to implement this URI in camel-jms.


[1] http://tools.ietf.org/id/draft-merrick-jms-uri-05.txt","davsclaus:1258776535:2009-11-21T12:08:55.520+0000:1258776535:2009-11-21T12:08:55.520+0000:This looks really ugly

I would prefer to configure that on the JmsComponent and leave it out of the URL

And there is also a destinationResolver you can use to lookup in JNDI etc. But maybe some properties on JmsComponent to set JNDI stuff and then it will lookup in JNDI also.
davsclaus:1303610301:2011-04-24T09:58:21.669+0000:1303610301:2011-04-24T09:58:21.669+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1706,Improvement,Major,"2.0-M1, 2.0-M2",2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-14 06:12:09+00:00,2009-11-21 11:59:09+00:00,The new default error handler does currently not support redelivery. The error handling codebase has stabilized and we should allow this error handler to leverage the redelivery features we have in DeadLetterChannel.,"davsclaus:1245012976:2009-06-15T04:56:16.812+0000:1245025627:2009-06-15T08:27:07.132+0000:trunk: 784652, 784665, 784685.
davsclaus:1258775949:2009-11-21T11:59:09.894+0000:1258775949:2009-11-21T11:59:09.894+0000:Closing all 2.0M3 tickets"
0,CAMEL-1705,Bug,Major,"2.0-M1, 2.0-M2",None,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-14 06:10:15+00:00,2009-11-21 11:59:09+00:00,"Using RedeliveryOptions with the DeadLetterChannel in Java DSL you have a name clash with the delay EIP.
delay should be renamed to redeliverDelay to avoid this clash.","davsclaus:1244933568:2009-06-14T06:52:48.185+0000:1244933568:2009-06-14T06:52:48.185+0000:trunk: 784513.
davsclaus:1258775949:2009-11-21T11:59:09.851+0000:1258775949:2009-11-21T11:59:09.851+0000:Closing all 2.0M3 tickets"
0,CAMEL-1704,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Willem Jiang,0,0,2009-06-14 06:07:57+00:00,2009-11-21 11:59:09+00:00,"Just working on CAMEL-1673 and found JUnit 4.x have a good supports of old Junit test cases.
Your old JUnit's3 class can be ran smorthly with JUnit 4.x. 
But if you want to leverage the JUnit4's new features, you need to use new JUnit4's Camel test support classes.


So I create a JUnit4's version of CamelTestSupport and CamelSpringTestSupport in camel-test module, 
now camel-test supports JUnit 3.x and JUnit 4.x test like Spring-test does.","njiang:1245040809:2009-06-15T12:40:09.680+0000:1245040809:2009-06-15T12:40:09.680+0000:http://svn.apache.org/viewvc?rev=784509&view=rev
davsclaus:1258775949:2009-11-21T11:59:09.830+0000:1258775949:2009-11-21T11:59:09.830+0000:Closing all 2.0M3 tickets"
0,CAMEL-1703,Improvement,Minor,None,2.0-M3,"
None
",Closed,Fixed,2.0-M3,William Tam,William Tam,0,0,2009-06-14 04:25:54+00:00,2009-11-21 11:59:09+00:00,No Desc,"wtam:1244924918:2009-06-14T04:28:38.165+0000:1244924918:2009-06-14T04:28:38.165+0000:Committed revision 784507.

davsclaus:1258775949:2009-11-21T11:59:09.804+0000:1258775949:2009-11-21T11:59:09.804+0000:Closing all 2.0M3 tickets"
0,CAMEL-1702,Improvement,Major,None,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-12 12:23:37+00:00,2009-11-21 11:59:09+00:00,"We should migrate various headers that Camel EIP add to exhanges from headers to properties.
Many of them more naturally fit as a property than a header. And we have good support in the DSL to retrieve the headers.
And in fact Camel does a fallback from header -> property so much end user code will not break.


Look at Exchange to see all the keys we have for headers. For example:



    String AGGREGATED_INDEX = ""CamelAggregatedIndex"";
    String AGGREGATED_SIZE  = ""CamelAggregatedSize"";

    String ASYNC_WAIT = ""CamelAsyncWait"";

    String BATCH_INDEX    = ""CamelBatchIndex"";
    String BATCH_SIZE     = ""CamelBatchSize"";
    String BATCH_COMPLETE = ""CamelBatchComplete"";

    String BEAN_METHOD_NAME           = ""CamelBeanMethodName"";
    String BEAN_HOLDER                = ""CamelBeanHolder"";
    String BEAN_MULTI_PARAMETER_ARRAY = ""CamelBeanMultiParameterArray"";
    String DATASET_INDEX = ""CamelDataSetIndex"";

    String EXCEPTION_CAUGHT  = ""CamelExceptionCaught"";
    String EXCEPTION_HANDLED = ""CamelExceptionHandled"";
    String FAILURE_HANDLED   = ""CamelFailureHandled"";
    String FILTERED             = ""CamelFiltered"";
    String INTERCEPTED_ENDPOINT = ""CamelInterceptedEndpoint"";

    String LOG_DEBUG_BODY_MAX_CHARS = ""CamelLogDebugBodyMaxChars"";
    String LOOP_INDEX               = ""CamelLoopIndex"";
    String LOOP_SIZE                = ""CamelLoopSize"";

    String MULTICAST_INDEX = ""CamelMulticastIndex"";

    String ON_COMPLETION = ""CamelOnCompletion"";

    String ROUTE_STOP = ""CamelRouteStop"";

    String REDELIVERED        = ""CamelRedelivered"";
    String REDELIVERY_COUNTER = ""CamelRedeliveryCounter"";

    String SPLIT_INDEX = ""CamelSplitIndex"";
    String SPLIT_SIZE  = ""CamelSplitSize"";

    String TRANSACTED    = ""CamelTransacted"";
    String ROLLBACK_ONLY = ""CamelRollbackOnly"";




Most of this list should be stored as properties instead of headers. Some of them already do that.","erwink:1245199326:2009-06-17T08:42:06.910+0000:1245199326:2009-06-17T08:42:06.910+0000:This is an patch for camel 1.6.x as discussed in http://www.nabble.com/Custom-AggregationStrategy-needs-specific-headers-td23996092.html
davsclaus:1245199703:2009-06-17T08:48:23.625+0000:1245199703:2009-06-17T08:48:23.625+0000:Erwin. Cool thanks for the patch. Will get it in 1.6.2

Do you mind taking a stab at the Aggregator in Camel 1.6.x as well? It also decorates headers.

davsclaus:1245200582:2009-06-17T09:03:02.945+0000:1245200582:2009-06-17T09:03:02.945+0000:Splitter 1.x: 785515.
davsclaus:1245285246:2009-06-18T08:34:06.505+0000:1245287359:2009-06-18T09:09:19.696+0000:trunk: 785949, 785969.
davsclaus:1258775949:2009-11-21T11:59:09.748+0000:1258775949:2009-11-21T11:59:09.748+0000:Closing all 2.0M3 tickets"
0,CAMEL-1701,New Feature,Major,2.0-M2,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-12 10:28:27+00:00,2009-11-21 11:59:09+00:00,"We have other beans you can just add to spring context and Camel will autodetect them by type and use them.


For instance: Tracer, Debugger, Registry and whatnot.


We should add InterceptStrategy to that to allow Camel to easily use global interceptors for all camel contexts you may define with spring XML files.","davsclaus:1244782270:2009-06-12T12:51:10.311+0000:1244782270:2009-06-12T12:51:10.311+0000:trunk: 784101.

And started a wiki page about it
http://cwiki.apache.org/confluence/display/CAMEL/Advanced+configuration+of+CamelContext+using+Spring

davsclaus:1258775949:2009-11-21T11:59:09.728+0000:1258775949:2009-11-21T11:59:09.728+0000:Closing all 2.0M3 tickets"
0,CAMEL-1700,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M3,Willem Jiang,Willem Jiang,0,0,2009-06-12 08:11:20+00:00,2009-11-21 11:59:09+00:00,No Desc,"njiang:1245216749:2009-06-17T13:32:29.564+0000:1245216749:2009-06-17T13:32:29.564+0000:http://svn.apache.org/viewvc?rev=785579&view=rev
davsclaus:1258775949:2009-11-21T11:59:09.704+0000:1258775949:2009-11-21T11:59:09.704+0000:Closing all 2.0M3 tickets"
0,CAMEL-1699,Improvement,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Joe Gottman,0,0,2009-06-11 20:22:29+00:00,2010-02-07 09:55:24+00:00,"Currently the pipeline function takes an array of uri strings or Endpoints.  It should also take 0 parameters to create a PipelineDefinition object that requires an end() to finish, similar to multicast().  To see why this is necessary, consider the multicast example from the wiki:


<route>
  <from uri=""activemq:SomeQueue""/>
  <multicast>
    <pipeline>
      <bean ref=""something""/>
      <to uri=""log:Something""/>
    </pipeline>
    <pipeline>
      <bean ref=""foo""/>
      <bean ref=""bar""/>
      <to uri=""activemq:OutputQueue""/>
    </pipeline>
  </multicast>
</route>


   Since the contents of the two pipelines are not just uri's there is no easy way to create this route in Java.  If we had a pipeline() function, we could do it as follows:


  from(""activemq:SomeQueue"")
    .multicast()
      pipeline()
         .beanRef(""something"")
         .to(""log:Something"")
     .end()  //pipeline
     .pipeline()
        .beanRef(""foo"")
        .beanRef=""bar""/>
        .to(""activemq:OutputQueue)
     .end() //pipeline
  .end() ;//multicast","hadrian:1244748571:2009-06-12T03:29:31.677+0000:1244748571:2009-06-12T03:29:31.677+0000:Well spotted.

We appreciated contributions, would you like to take a stab at it?
davsclaus:1254179528:2009-09-29T07:12:08.179+0000:1254179528:2009-09-29T07:12:08.179+0000:Thanks for reporting. I just added this feature.

trunk: 819847."
0,CAMEL-1698,Improvement,Major,2.0-M1,Future,"
None
",Resolved,Fixed,Future,Claus Ibsen,Edward Campbell,0,3,2009-06-11 17:50:01+00:00,2012-07-06 08:02:32+00:00,"According to the smack documentation if you register the same listener multiple times, only the most recent filter is used.
Since the XmppConsumer is being used for all listeners in this case only the last add<Message|Packet>Listener call is honored.
It would be wiser to have the listeners as separate classes, then the handling of each packet/message type can be addressed separately.
A ConnectionListener can be added as well to handle connections that go down and can be retried later.
Proposed listeners:
ConnectionListener (to listen to and respond to connection and disconnection events)
MessageListener (to listen to and process messages)
RosterListener (to listen to and process roster events)
PresenceListeners (should be one for most types of listener defined in org.jivesoftware.smack.packet)


Each listener type should be able to pass messages up through the camel exchange. All except the MessageListener should be disabled by default, but enabled via an option in the uri passed to camel. MessageListener should always pass the message up through the camel exchange.","davsclaus:1253485604:2009-09-21T06:26:44.993+0000:1253485604:2009-09-21T06:26:44.993+0000:Stan, a XMPP related ticket, do you mind take a look?
slewis:1253509069:2009-09-21T12:57:49.227+0000:1253509069:2009-09-21T12:57:49.227+0000:Yeah, this is definitely a good idea, will look into it.
davsclaus:1269834101:2010-03-29T11:41:41.715+0000:1269834101:2010-03-29T11:41:41.715+0000:Stan what is the status of this one?
slewis:1269834805:2010-03-29T11:53:25.566+0000:1269834805:2010-03-29T11:53:25.566+0000:Have gotten some patches to ActiveMQ committed that allows me to use a broker as a mock XMPP server, just waiting for 5.4 to be released to then commit these changes to the camel-xmpp tests, then I can look into doing this, I think it'll require some refactoring so I wanted to have an easier way to test.
davsclaus:1269841471:2010-03-29T13:44:31.883+0000:1269841471:2010-03-29T13:44:31.883+0000:Okay I am putting this out of the 2.3 roadmap as AMQ 5.4 is most likely not around the corner :)
davsclaus:1341532952:2012-07-06T08:02:32.362+0000:1341532952:2012-07-06T08:02:32.362+0000:Lets close old ticket that are not in demand."
0,CAMEL-1697,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-06-11 09:56:27+00:00,2009-11-21 11:58:03+00:00,"When using one of the EIP that uses a nested route for sub processing, typically EIPs that does some sort of aggregation such as



multicast (for aggregating a response)
split
aggregate
And maybe a few others



They should use pushBlock so the end() DSL to indicate end of sub route works correctly in Java DSL.","davsclaus:1244691819:2009-06-11T11:43:39.318+0000:1244691819:2009-06-11T11:43:39.318+0000:Got myself into knee deep on this one. I gotta it sorted exception that doTry .. doCatch and doFinally also need to use end() to indicate end of each of their block.
So you can end up with having to 2 x end() might not be intuitive

{code}
doTry()
   ...
doCatch()
   ..
end() // to end do catch
end() // to end do try
// now we can continue the route
{code}

I will look into allowing you to only set 1 end as when you are in a doCatch Camel knows there is a doTry also.
davsclaus:1244694415:2009-06-11T12:26:55.739+0000:1244694415:2009-06-11T12:26:55.739+0000:Okay looks like I got the doTry sorted as well

{code}
                from(""direct:start"")
                    .doTry()
                        .process(new ProcessorFail())
                        .to(""mock:result"")
                    .doCatch(Exception.class)
                        .process(new ProcessorHandle())
                    .doFinally()
                        .to(""mock:finally"")
                    .end()
                    .to(""mock:last"");
{code}

Works as expected now.
So mock:last is always invoked as it comes after the big try ... catch .. finally block.
davsclaus:1244765988:2009-06-12T08:19:48.661+0000:1244766194:2009-06-12T08:23:14.929+0000:I have decided to keep the old behavior. It does work best this way. So in Java DSL you have to use end() more consistently. Think of them as } in Java code.

Ah I added the special handling for doing end() in doTry .. doCatch .. doFinally. Only 1 end is needed.
{code}
from(""direct:start"")
                    .doTry()
                        .process(new ProcessorFail())
                        .to(""mock:result"")
                    .doCatch(Exception.class)
                         .process(new ProcessorHandle())
                     .doFinally()
                         .to(""mock:finally"")
                    .end() // to end try block
                    .to(""mock:last"");
{code}
davsclaus:1244768451:2009-06-12T09:00:51.949+0000:1244768451:2009-06-12T09:00:51.949+0000:trunk: 784038.
davsclaus:1258775883:2009-11-21T11:58:03.155+0000:1258775883:2009-11-21T11:58:03.155+0000:Closing all 2.0M2 tickets"
0,CAMEL-1696,Bug,Major,"1.6.0, 2.0-M1, 1.6.1",None,"
None
",Closed,Fixed,"1.6.2, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-06-11 09:14:11+00:00,2009-11-21 11:58:03+00:00,"smx@root:/> osgi/refresh 120
smx@root:/> Exception in thread ""SpringOsgiExtenderThread-16"" org.springframework.beans.factory.BeanCreationException: E
rror creating bean with name 'illustrationGenerationEndpoint': Initialization of bean failed; nested exception is java.l
ang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the
ApplicationContext
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCap
ableBeanFactory.java:480)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBea
nFactory.java:409)
at java.security.AccessController.doPrivileged(Native Method)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapab
leBeanFactory.java:380)
at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264)
at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegis
try.java:222)
at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185)
at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164)
at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListable
BeanFactory.java:429)
at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplic
ationContext.java:728)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$1600(AbstractDel
egatedExecutionApplicationContext.java:68)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegated
ExecutionApplicationContext.java:343)
at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(Abstrac
tDelegatedExecutionApplicationContext.java:308)
at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$Co
mpleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:138)
at java.lang.Thread.run(Thread.java:595)
Caused by: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before access
ing beans via the ApplicationContext
at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableA
pplicationContext.java:153)
at org.springframework.context.support.AbstractApplicationContext.getBeanDefinitionNames(AbstractApplicationCont
ext.java:929)
at org.apache.cxf.configuration.spring.ConfigurerImpl.initWildcardDefinitionMap(ConfigurerImpl.java:77)
at org.apache.cxf.configuration.spring.ConfigurerImpl.addApplicationContext(ConfigurerImpl.java:223)
at org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor.updateBusReferencesInContext(BusWiringBeanFactory
PostProcessor.java:118)
at org.apache.camel.component.cxf.spring.CxfEndpointBeanDefinitionParser$CxfSpringEndpointBean.setApplicationCon
text(CxfEndpointBeanDefinitionParser.java:115)
at org.springframework.context.support.ApplicationContextAwareProcessor.postProcessBeforeInitialization(Applicat
ionContextAwareProcessor.java:70)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeIni
tialization(AbstractAutowireCapableBeanFactory.java:350)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireC
apableBeanFactory.java:1331)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCap
ableBeanFactory.java:473)
... 16 more","njiang:1244696191:2009-06-11T12:56:31.403+0000:1244696251:2009-06-11T12:57:31.880+0000:When call the ConfigurerImpl.addApplicationContext(ctx) to add a new application context, we need to check if the ConfigureImpl's ApplicationContext is closed.
Since if we closed the application context which the ConfigureImpl has and add a new application context to it, we will got the exception of ""BeanFactory not initialized or already closed"".

I work around this issue by clean up the BusFactory default factory when the application context is closed, but we still need to fix this issue in CXF[1].

[1] https://issues.apache.org/jira/browse/CXF-2279 
njiang:1244698270:2009-06-11T13:31:10.851+0000:1244698270:2009-06-11T13:31:10.851+0000:Clean up the BunFactory's default bus factory when the application context is stopped.
trunk
http://svn.apache.org/viewvc?rev=783743&view=rev
camel-1.x 
http://svn.apache.org/viewvc?rev=783745&view=rev
davsclaus:1258775883:2009-11-21T11:58:03.101+0000:1258775883:2009-11-21T11:58:03.101+0000:Closing all 2.0M2 tickets"
0,CAMEL-1695,New Feature,Major,None,2.0-M2,"
None
",Closed,Duplicate,2.0-M2,Unassigned,Claus Ibsen,0,0,2009-06-11 07:35:41+00:00,2009-11-21 11:58:02+00:00,"When using the <package>com.mycompany.foo</package> tag to auto discover any RouteBuilder impl and install its route it is sometimes desireable to be able to exclude some routes.


We should add support for ANT path matching style.
As its spring based we can leverage the spring ANT path matcher we already do for the file and ftp components.


And we should consider renaming <package> to <package-scan> as its more clear what it does.


Or maybe inline it in the routeBuilder tag, as it would be more clear that the package is for route builders:



<routeBuilder>
  <package-scan>xxxxx</package-scan>
  <excludes>**/*MyTestRoute*</excludes>
</routeBuilder>","davsclaus:1245010436:2009-06-15T04:13:56.112+0000:1245010436:2009-06-15T04:13:56.112+0000:Duplicate of CAMEL-1708
davsclaus:1258775882:2009-11-21T11:58:02.976+0000:1258775882:2009-11-21T11:58:02.976+0000:Closing all 2.0M2 tickets"
0,CAMEL-1694,New Feature,Major,None,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Claus Ibsen,0,0,2009-06-11 07:31:58+00:00,2009-11-21 11:59:09+00:00,"The enrich DSL works for producers only. eg it sends the exchange to the given endpoint uri and aggregates the response.


We should have a similar DSL for polling consumer poll could be a good name.
It should accept same kind of parameters, but also an optional timeout value for the receive method on the consumer.","davsclaus:1246235190:2009-06-29T08:26:30.783+0000:1246235190:2009-06-29T08:26:30.783+0000:Wanted to get this in 2.0 as some users have requested it.

The DSL name is {{pollEnrich}} to indicate its like {{enrich}} but for polling, eg using a PollingConsumer to obtain the additional data.
davsclaus:1246247033:2009-06-29T11:43:53.049+0000:1246247033:2009-06-29T11:43:53.049+0000:trunk: 789294.

updated wiki
http://camel.apache.org/content-enricher.html
davsclaus:1258775949:2009-11-21T11:59:09.661+0000:1258775949:2009-11-21T11:59:09.661+0000:Closing all 2.0M3 tickets"
0,CAMEL-1693,New Feature,Minor,2.0-M1,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Rohit Rai,0,0,2009-06-11 06:14:11+00:00,2009-11-21 11:59:09+00:00,The SMTP component uses JavaMailSenderImpl to send the mail. But many a times we need finer control over sending the mail and so wold like to use our own MailSender implmentation. This should be a property that can be specified via the endpoint URL.,"davsclaus:1246444257:2009-07-01T18:30:57.466+0000:1246444257:2009-07-01T18:30:57.466+0000:Lets get this done for 2.0
davsclaus:1246662156:2009-07-04T07:02:36.628+0000:1246662156:2009-07-04T07:02:36.628+0000:trunk: 791068.

Added new option {{javaMailSender}} to use a custom mail sender implementation instead of the default one
davsclaus:1258775949:2009-11-21T11:59:09.641+0000:1258775949:2009-11-21T11:59:09.641+0000:Closing all 2.0M3 tickets"
0,CAMEL-1692,Improvement,Major,2.0-M2,,"
None
",Closed,Fixed,None,Claus Ibsen,Nils Breunese,0,1,2009-06-10 12:17:34+00:00,2010-02-07 09:55:24+00:00,"Using from(""file:input"") as the starting point of a route and using deadLetterChannel(""file:error"") as the error handler I had a problem that whenever an exception occurred in the route, the message was correctly sent to the dead letter channel directory, but the message was not removed from the input directory, so it was picked up over and over again.


In #camel on IRC Claus Ibsen recommended to use .handled(true) on the dead letter channel, which solves this problem. He thought it might be good to have this as the default behavior. From the IRC log:





<cibsen> hmm yeah the DLC does not mark it as handled. I guess it should do that when it moves it to the DLC
<cibsen> then the caller will however not know that exchange failed
<cibsen> you can mark it as handled by adding .handled(true) to your DLC definition
<cibsen> maybe it should do that by default. But beware any caller/client will not be notified about this error
<cibsen> but I guess thats the point with the DLQ to move a message there and just continue as if everything is OK
<cibsen> let me know if it works and remind me a bit later to look into changing the default to handled(true) for the DLC",davsclaus:1244933590:2009-06-14T06:53:10.807+0000:1244933590:2009-06-14T06:53:10.807+0000:trunk: 784513.
0,CAMEL-1691,Improvement,Major,1.6.1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-06-10 09:28:36+00:00,2009-12-14 12:52:25+00:00,"When you use split, aggregator or the likes that uses an aggregation strategy and you filter the message out then it still passed in into the aggregation strategy.
It should be skipped.


For instance below we want to split a message and filter out bad lines.



                Predicate goodWord = body().contains(""World"");

                from(""direct:start"")
                    .split(body(List.class), new MyAggregationStrategy())
                        .filter(goodWord)
                        .to(""mock:filtered"")
                    .end()
                    .to(""mock:result"");




See nabble:
http://www.nabble.com/Filtered-message-after-splitter-shows-up-after-aggregation-td23957958s22882.html","davsclaus:1244598663:2009-06-10T09:51:03.095+0000:1244598663:2009-06-10T09:51:03.095+0000:BTW: Looks like MulticastProcessor does not honor the end() I have to investigate the further
davsclaus:1244677206:2009-06-11T07:40:06.906+0000:1244678169:2009-06-11T07:56:09.769+0000:trunk: 783663,783675

New header {{Exchange.FILTERED}} as a Boolean to indicate if an Exchange is filtered.

Any filtered Exchanges will *not* be aggregated by the AggregatorStrategy.
davsclaus:1258775882:2009-11-21T11:58:02.941+0000:1258775882:2009-11-21T11:58:02.941+0000:Closing all 2.0M2 tickets"
0,CAMEL-1690,Task,Minor,None,None,"
None
",Closed,Fixed,2.2.0,Claus Ibsen,Joe Gottman,0,0,2009-06-09 17:42:01+00:00,2010-02-07 09:55:24+00:00,"I don't know whether this is the right forum to report this, but the components in camel-extra will not work with Camel 2.0.  For example they still use generics in their Consumer and Producer classes.","hadrian:1244549958:2009-06-09T20:19:18.895+0000:1244549958:2009-06-09T20:19:18.895+0000:This is certainly not the wrong forum.  We are in the process of releasing 2.0-M2.  I will take care of it later this week.  Thanks.
akuhtz:1245903450:2009-06-25T12:17:30.599+0000:1245903450:2009-06-25T12:17:30.599+0000:patch for upgrade camel-extra to CAMEL 2.0-SNAPSHOT
hadrian:1245908634:2009-06-25T13:43:54.773+0000:1245908634:2009-06-25T13:43:54.773+0000:@Andreas, awesome work.  I'll try this out today or tomorrow.  Thanks a bunch!
davsclaus:1246671474:2009-07-04T09:37:54.145+0000:1246671474:2009-07-04T09:37:54.145+0000:Moving to 2.1, eg after Camel 2.0 has been released as we want to have a final release before upgrading the extra components.
davsclaus:1257457918:2009-11-06T05:51:58.070+0000:1257457918:2009-11-06T05:51:58.070+0000:Changing to type to task as its not a bug
davsclaus:1263694164:2010-01-17T10:09:24.078+0000:1263694164:2010-01-17T10:09:24.078+0000:Migrated camel-extra to use Camel 2.1.0

svn rev: 288."
0,CAMEL-1689,Bug,Major,2.0-M1,2.0-M3,"
None
",Closed,Fixed,2.0-M3,Claus Ibsen,Siegfried Wirth,0,1,2009-06-09 15:49:40+00:00,2009-11-21 11:59:09+00:00,"Camel jms producer ignores some JMSHeaders. For example the header JMSPriority is ignored - due to the comment in the code, because it is set by the producer. But it should not only be set by the produer due to the received message, it should also be possible to set a priority using the JMSPriority header on the consumer. (See also the option preserveMessageQos on the jms endpoint - if every JMSHeader is ignored by the producer it is impossible to set Qos-Properties on the message.)


The reason for the bug is in org.apache.camel.component.jms.JmsBinding#appendJmsProperty. 


The follwoing JMS message headers are useful for sending messages and therefore should be copied to the jms message:



JMSDestination
JMSDeliveryMode
JMSExpiration
JMSPriority
JMSMessageID
JMSTimestamp","davsclaus:1244592914:2009-06-10T08:15:14.905+0000:1244592914:2009-06-10T08:15:14.905+0000:Thanks for reporting.

James Strachan had a look and came up with:

[10:00]  <jstrachan> davsclaus: yeah, looks like we could let folks specify those headers; it'll be a tad complex to implement given the complex code path in JmsProducer - and the fact that we wanna clear down the fact that we are customizing the QoS on the JmsTemplate after we have sent them (so we might wanna create a new temporary JmsTemplate if any of the QoS headers are specified on the message) - but its possible, yes


I put it on the roadmap for Camel 2.1.
But maybe we take a stab at it before so it will be in 2.0.
davsclaus:1246229887:2009-06-29T06:58:07.994+0000:1246229887:2009-06-29T06:58:07.994+0000:Looks like Spring JMS Template have default configuration for eg. JMSPriority = 4. So even if you set the JMSPriority on the javax.jms.Message object it will be disregarded and Spring uses its default value of 4 instead.
davsclaus:1246230132:2009-06-29T07:02:12.544+0000:1246230132:2009-06-29T07:02:12.544+0000:Added unit test for starters: 789236.
davsclaus:1246331300:2009-06-30T11:08:20.850+0000:1246331300:2009-06-30T11:08:20.850+0000:Creating a temporary JmsTemplate is the only option if user is having custom QoS headers
davsclaus:1246400355:2009-07-01T06:19:15.991+0000:1246400355:2009-07-01T06:19:15.991+0000:Looks like I found a glitch in camel-jms.

Its possible with Spring JMSTemplate to use reuse template but sending custom values for
- JMSDeliveryMode
- JMSPriority
- JMSExpiration

That requires however currently that the option {{PreserveMessageQos}} is enabled on the endpoint.
davsclaus:1246406324:2009-07-01T07:58:44.400+0000:1246407590:2009-07-01T08:19:50.981+0000:We can set the following headers now requiring that you enable the {{preserveMessageQos=true}} on the endpoint to take over:
- JMSDeliveryMode
- JMSExpiration
- JMSPriority

Otherwise the QoS of the endpoint is used.
davsclaus:1246407777:2009-07-01T08:22:57.318+0000:1246407777:2009-07-01T08:22:57.318+0000:JMSDestination is *not* possible to set in a IN header as it can cause jms routing to go into looping such as:

{code}
from(""jms:queue:foo"").to(""jms:queue:bar"")
{code}

In this case when we receive a message from *foo* then it will populate a Camel message that contains the details from the javax.jms.Message and thus also {{JMSDestination}}.
And it will be {{queue://foo}}. So when the message is routed to the {{to}} endpoint then it will mistakenly send it back to itself, instead of using the {{queue:bar}} destination defined on the endpoint.



davsclaus:1246410108:2009-07-01T09:01:48.845+0000:1246410138:2009-07-01T09:02:18.567+0000:To use a different JMSDestiantion you can do
{code}
exchange.setProperty(""JMSDestination"", destination);
{code}

Maybe we can support a special header to override the destination as a string name

To send it to bar instead of the regular destination
{code}
exchange.getIn().setHeader(JmsConstants.JMS_DESTINATION_NAME, ""activemq:queue:bar"");
{code}
as its often easier to work with String names for JMS destinations than javax.jms.Destination objects.
davsclaus:1246423615:2009-07-01T12:46:55.185+0000:1246423615:2009-07-01T12:46:55.185+0000:trunk: 790144.
hadrian:1246426187:2009-07-01T13:29:47.369+0000:1246426187:2009-07-01T13:29:47.369+0000:@Claus, component specific properties is a general problem that exists with other components.  Since very few components have a XyzConstants class, but pretty much all of them have a XyzComponent I am thinking of putting the configuration specific property/headers in the XyzComponent class and make it consistent across all components.

What do you think?
davsclaus:1246426419:2009-07-01T13:33:39.721+0000:1246426419:2009-07-01T13:33:39.721+0000:[15:33]  <cibsen> yeah a good idea to have it on component instead
[15:34]  <cibsen> and the xxxConstants is introduced in 2.0 so we could change it before final

davsclaus:1249593081:2009-08-07T05:11:21.508+0000:1249593081:2009-08-07T05:11:21.508+0000:trunk: 801884 fixing setting JMSPriority with a value as zero is accepted as well
davsclaus:1258775949:2009-11-21T11:59:09.599+0000:1258775949:2009-11-21T11:59:09.599+0000:Closing all 2.0M3 tickets"
0,CAMEL-1658,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-29 09:14:20+00:00,2009-11-21 11:58:02+00:00,No Desc,"njiang:1244142409:2009-06-05T03:06:49.336+0000:1244142409:2009-06-05T03:06:49.336+0000:http://svn.apache.org/viewvc?rev=779898&view=rev
davsclaus:1258775882:2009-11-21T11:58:02.317+0000:1258775882:2009-11-21T11:58:02.317+0000:Closing all 2.0M2 tickets"
0,CAMEL-1657,Sub-task,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-29 09:12:18+00:00,2009-11-21 11:58:02+00:00,"We could leverage current CXF JAXRS spring configuration to support configuring the REST endpoint with spring.
Since there are lots of difference between the JAXRS Server and JAXRS Client, we need to configure them separately.","njiang:1244142371:2009-06-05T03:06:11.092+0000:1244142371:2009-06-05T03:06:11.092+0000:http://svn.apache.org/viewvc?rev=779898&view=rev
davsclaus:1258775882:2009-11-21T11:58:02.298+0000:1258775882:2009-11-21T11:58:02.298+0000:Closing all 2.0M2 tickets"
0,CAMEL-1656,New Feature,Major,None,2.3.0,"
None
",Closed,Duplicate,2.3.0,Claus Ibsen,Claus Ibsen,0,0,2009-05-28 12:53:58+00:00,2011-04-24 10:01:00+00:00,"People using Spring XML as DSL is challenged with the fact they dont have a real programming language under the cover.


And people do not want to hardcode values/options in the DSL directly. And spring property placeholder support is limited in what it can do.
So we need for now our own properties component that can load a properties file from classpath. Leverage the spring resource endpoint that can do this.


And let the simple language be able to access these properties as well so people can use it in expressions



<simple>${propertiesfile:foo:email}</simple>




And the properties file is could be define something like:



<endpoint id=""foo"" url=""propertiesfile://META-INF/myprops.properties""/>




And the file content



email=someone@somewhere.org




Need to think a bit about how to define the properties file. If we can allow you to define it as a url or as a ref.
For instance the simple expression could be:



<simple>${propertiesfile:classpath://META-INF/myprops.properties:email}</simple>




The above is for quick and dirty.","davsclaus:1243486455:2009-05-28T12:54:15.280+0000:1243486455:2009-05-28T12:54:15.280+0000:And I think James Strachan have reported something similar.
davsclaus:1265513712:2010-02-07T11:35:12.477+0000:1265513712:2010-02-07T11:35:12.477+0000:Got a basic properties component up and running.
davsclaus:1265526154:2010-02-07T15:02:34.988+0000:1265526267:2010-02-07T15:04:27.074+0000:You can now do something like this

{code}
                from(""#{cool.start}"")
                    .to(""log:#{cool.start}?showBodyType=false&showExchangeId=#{cool.showid}"")
                    .to(""mock:#{cool.result}"");
{code}

Where #{ } is the property placeholder syntax to lookup properties. Using #{ } does not clash with ${ } for simple language and it also resembles the # lookup we support on parameters.

Notice how you can define placeholders as only part of the uri or for parameters etc. 

There is also a properties component you can use
{code}
                from(""direct:start"").to(""properties:#{cool.end}"");
{code}

Which also supports having only part of the endpoint uri as a placeholder. Notice how {{mock:}} is fixed below 
{code}
                from(""direct:start"").to(""properties:mock:#{cool.result}"");
{code}
And it support a locations parameter so you can use non default locations
{code}
                from(""direct:start"").to(""properties:#{bar.end}?locations=org/apache/camel/component/properties/bar.properties"");
{code}
davsclaus:1265526431:2010-02-07T15:07:11.398+0000:1265526431:2010-02-07T15:07:11.398+0000:And you can have placeholders in the properties file itself, which Camel will resolve as well (think recursive)
{code}
cool.end=mock:result
cool.result=result
cool.concat=mock:#{cool.result}
cool.start=direct:cool
cool.showid=true
{code}
davsclaus:1265527467:2010-02-07T15:24:27.314+0000:1265527467:2010-02-07T15:24:27.314+0000:And simple language can not leverage properties as well
{code}
                from(""direct:start"")
                    .transform().simple(""Hi ${body} do you think ${properties:cheese.quote}?"");
{code}

With properties
{code}
cheese.quote=Camel rocks
{code}
davsclaus:1303610460:2011-04-24T10:01:00.151+0000:1303610460:2011-04-24T10:01:00.151+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1655,New Feature,Major,None,2.1.0,"
None
",Closed,Fixed,2.1.0,Xueqiang Mi,Jonathan Anstey,1,1,2009-05-28 12:23:47+00:00,2010-02-07 09:55:23+00:00,Our Google Summer of Code student Xueqiang Mi will be attaching code updates to this JIRA for review. See http://cwiki.apache.org/confluence/display/CAMEL/GSoC+2009 for more info on the project.,"xueqiang.mi:1244679919:2009-06-11T08:25:19.376+0000:1246003989:2009-06-26T16:13:09.196+0000:Camel-web Groovy and Ruby rotue editing support patch.Now camel-web module allow user to editing routes by using Groovy and Ruby language. These function are supported by camel-groovy and camel-ruby modules.Two examples of editing a route are as follows:
1. Editing a rotue in Groovy.
import org.apache.camel.language.groovy.GroovyRouteBuilder;

class GroovyRoute extends GroovyRouteBuilder {

  void configure() {

    from(""direct:a"").to(""mock:results"")

  }
}
2. Editing a route in Ruby.
require 'camel'

include_class ""org.apache.camel.ruby.RubyCamel""

class RubyRoute < Camel::RubyRouteBuilder

  def configure 
    
    from ""direct:a""
        
    to ""mock:results""

  end

end

RubyCamel.addRouteBuilder(RubyRoutes.new)

There may be some exceptions when typing in error format route configuration. I will fix them ASAP.
janstey:1244711021:2009-06-11T17:03:41.149+0000:1244711021:2009-06-11T17:03:41.149+0000:Xueqiang,

Just committed your patch in revision 783847. Had to do a few minor edits due to the patch failing to apply properly and CheckStyle failing. In the future, you should build with the -Psourcecheck option to ensure proper formatting. 

I think before you move on to any other languages, we should get the ability to actually view the RouteDefinitions as Groovy/Ruby in the editor. Your current work only involves saving the route as another language.

James has an idea about this for a future version of Camel (see http://issues.apache.org/activemq/browse/CAMEL-1389), but you can also brainstorm another solution if you like.
davsclaus:1254183821:2009-09-29T08:23:41.908+0000:1254183821:2009-09-29T08:23:41.908+0000:Jonathan, isn't the work on the groovy editor finished? And thus we can close this ticket.

janstey:1254288660:2009-09-30T13:31:00.759+0000:1254288660:2009-09-30T13:31:00.759+0000:Calling this complete.

Xueqiang, feel free to make any changes to the web console under new tickets as they happen."
0,CAMEL-1654,New Feature,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-28 05:43:57+00:00,2009-11-21 11:58:02+00:00,"We should add an option to BatchConsumers maxMessagesPerPoll as a limit of how many message we can max. gather in a given poll.


For instance if you start a server and there are 20.000 files to poll, the user can set a limit to eg 100 to avoid consuming all 20.000 in the very first poll.","davsclaus:1244191880:2009-06-05T16:51:20.049+0000:1244191880:2009-06-05T16:51:20.049+0000:trunk: 782062.
davsclaus:1258775882:2009-11-21T11:58:02.249+0000:1258775882:2009-11-21T11:58:02.249+0000:Closing all 2.0M2 tickets"
0,CAMEL-1653,New Feature,Minor,2.0.0,,"
None
",Closed,Fixed,None,Claus Ibsen,Joe Gottman,0,0,2009-05-28 03:02:38+00:00,2010-02-07 09:55:23+00:00,"FileComponent currently has an append option, which is set to true for File Producers to make the Producer write to the end of an existing file, and false to make it overwrite an existing file.  However, sometimes it is an error for it to do anything to change an existing file.  Would it be possible to add a clobber option to the FileComponent which defaults to true but when set to false prevents the File Producer from modifying an existing file?  It should probably throw some kind of Camel Exception when it attempts to write to a file that already exists. If desired, the Route can then catch this Exception and handle it, for instance by trying to write the file to a different location.


   This option might also be useful for some other Producer components for the same reason.","davsclaus:1243542281:2009-05-29T04:24:41.674+0000:1243542281:2009-05-29T04:24:41.674+0000:Good idea. I think I will give this option an overhaul and introduce an enum to choose what you want

What we have now:
- override
- append

And these additional options (if existing file exists):
- fail
- ignore
- rename original file
- write with a new filename (postfixed with _camel or something, leaving original file)
davsclaus:1243549791:2009-05-29T06:29:51.132+0000:1243549791:2009-05-29T06:29:51.132+0000:What would a good default be for this option?

Before we had append as the default.
But would it make more sense to change to a new default such as:

- Fail
or
- Override

Any thoughts?
davsclaus:1243565469:2009-05-29T10:51:09.709+0000:1243565469:2009-05-29T10:51:09.709+0000:trunk: 779924.

Added a new {{fileExist}} option with 4 options
- Override
- Append
- Fail
- Ignore

Override is now default.

Also added the Append feature to the FTP component as it only supported Override before.

davsclaus:1243575423:2009-05-29T13:37:03.637+0000:1243575423:2009-05-29T13:37:03.637+0000:Lets keep it to the 4 types for now, as we should focus on getting Camel 2.0 out of the door before mid summer.

In the future we can add strategy interface for easier plugin of custom code to determine what to do."
0,CAMEL-1652,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Christian Schneider,0,0,2009-05-27 21:45:28+00:00,2009-06-16 03:06:50+00:00,"See http://www.nabble.com/convertBodyTo-heap-problem-to23743181.html


When using a file endpoint with sorting as start of a route then the files are processed in a batch. In the current implementation this means a List of exchanges is created and given to the batch processing. The list is then traversed and each exchange is processed. This means the list references all exchanges during the whole batch processing. So none of the exchanges can be collected by the garbage collector till the whole batch is fully processed.


The problem really becomes bad when the exchanges are large. For example if you use convertBodyTo(String.class) and the files are large. If you have 100 files with 10 MB each then camel will consume 1 GB of heap. What is even worse is that it seems the processing simply stops when the heap is full. 


I have written a small test that shows the problem and a patch that corrects this problem. I hope this gets into 2.0-M2 as this is a quite serious bug.","cschneider:1243432024:2009-05-27T21:47:04.136+0000:1243432024:2009-05-27T21:47:04.136+0000:Test and patch for this issue
njiang:1243439840:2009-05-27T23:57:20.345+0000:1243439840:2009-05-27T23:57:20.345+0000:@claus

I think this issue is introduced by the recent new feature of BatchConsumer CAMEL-1640, you may need to recheck the components of mail, ibatis, jpa.  
davsclaus:1243455500:2009-05-28T04:18:20.445+0000:1243455500:2009-05-28T04:18:20.445+0000:@willem

The bug has been there before CAMEL-1640, it used a List for quite some time. But glad we discovered it and have a fix for it.

Yes it should be applied to the other listed here:
http://camel.apache.org/batch-consumer.html

davsclaus:1243456545:2009-05-28T04:35:45.094+0000:1243456545:2009-05-28T04:35:45.094+0000:Running the unit test for 30 sec on my laptop: 

*Before patch:* usage = 42mb
*After patch:* usage = 5mb


davsclaus:1243456823:2009-05-28T04:40:23.326+0000:1243456823:2009-05-28T04:40:23.326+0000:Not critical, as there is a workaround by clearing the exchange body after usage.
davsclaus:1243458331:2009-05-28T05:05:31.469+0000:1243458331:2009-05-28T05:05:31.469+0000:trunk: 779434.

Thanks Christian for the patch and unit test.

I have applied the fix for the other BatchConsumer components as well.
cschneider:1243520173:2009-05-28T22:16:13.172+0000:1243520173:2009-05-28T22:16:13.172+0000:Thanks for committing the patch"
0,CAMEL-1651,Bug,Major,"2.0-M1, 1.6.1","1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Martin Krasser,0,0,2009-05-27 15:05:04+00:00,2009-11-21 11:58:02+00:00,http://www.nabble.com/DefaultHttpBinding-prevents-response-streaming-to23742014s22882.html,"davsclaus:1243458703:2009-05-28T05:11:43.653+0000:1243458703:2009-05-28T05:11:43.653+0000:Yeah CAMEL-1327 could have been better as it could have checked the content type before reading into memory :)

Thanks for reporting.
davsclaus:1243474431:2009-05-28T09:33:51.574+0000:1243474431:2009-05-28T09:33:51.574+0000:trunk: 779489.
1.x: 779508.
davsclaus:1258775882:2009-11-21T11:58:02.230+0000:1258775882:2009-11-21T11:58:02.230+0000:Closing all 2.0M2 tickets"
0,CAMEL-1650,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Oliver Hecker,0,1,2009-05-27 12:38:36+00:00,2009-11-21 11:58:02+00:00,"A possible possible race condition exists in the IdempotentConsumer implementation:
The code first checks in the MessageIdRepository if the message was already processed. If not then it processes the message and
afterwards adds the id to the repository. (See also http://issues.apache.org/activemq/browse/CAMEL-1451). There is no locking
between the check with ""contains"" and the insert with ""add"". So if multiple threads/instances try this in parallel for the same id, then
it might happen that more than one finds the id not yet contained in the repository and the same message is processed multiple
times.


I enclose an extended version of IdempotentConsumerTest which illustrates the problem.
It is important to note that even if the test demonstrates the issue with an MemoryIdempotentRepository a solution should also
address the case of a database based respository in a clustered environment. So this might imply that some locking mechanism on the
database is required.","ohecker:1243399222:2009-05-27T12:40:22.301+0000:1243399222:2009-05-27T12:40:22.301+0000:Extended version of the unit test which shows the problem.
davsclaus:1243401830:2009-05-27T13:23:50.200+0000:1243401830:2009-05-27T13:23:50.200+0000:Thanks for the unit test.

The problem is a bit chicken and egg. Should you add the id before you start process the message or afterwards?
If you do it before then you have the issue what if the processing failed? Should the id be removed or should it stay?

Maybe we should expose options so end user can configure
- before
- after
- and if id should be removed in case of failure


ohecker:1243407404:2009-05-27T14:56:44.571+0000:1243407404:2009-05-27T14:56:44.571+0000:Yes, I see the problem. The way how it is implemented at the moment assures an ""at least once"" quality of service.
Assuming that race conditions will not occur quite often this seems to be OK for most cases.
I was testing this because I am looking for a way to manage scheduled jobs (via Camel Quartz) in a clustered szenario
running the same camel config on multiple host in parallel. I am looking for a way to assure that even if the job is triggered
on every host only one of them gets actually processed. Due to the timers running more or less synchronous on all hosts
I am expecting that race conditions might occur quite often. (I actually also investigated in using the cluster features of Quartz
itself but found it not working within Camel Quartz)

Removing the id in case of a failure will not work if there there is some (technical) problem which prevents from deleting the entry
in the database. So if we crash after inserting in the database but before we could deliver to the destination then the message then
even when retrying later the filter will filter out the message.

I was thinking of some intermediate state to be stored in the repository to serve as a lock for the time between ""contains"" and ""add"".
But this requires quite some effort concerning coordination and detecting failed instances in the cluster.

So the Interface of IdempotentRepository might be something like

isProcessedAndLockIfNot (the former ""contains""): 
  - Returns true if the id is contained in state ""processed""
  - Returns false if id is not contained. Will insert id in state ""locked""
  - if id is contained in state ""locked"" then the call will be blocked until
      - the id is either removed or goes to state processed, then proceed as above   or
      - a timeout is reached which indicates that the process which set the lock possibly crashed; in this case the lock will be stolen and false will be returned

setProcessed (the former ""add""):
  - set state of ID to ""processed""

unlock (new):
  - delete id from the repository;

It might even be necessary to keep track of who aquired a lock to avoid messing up if the locker tries to release a lock after the timeout occurred.

In any case this requires quite some interface and coding changes (and some more thoughts about how to do it).

davsclaus:1244184414:2009-06-05T14:46:54.132+0000:1244184414:2009-06-05T14:46:54.132+0000:We could add a 1st cache that is a JVM only memory pool for the in flight exchanges.
So if there is a duplicate sent while another is currently being processed it can be found in the memory pool and be rejected.


a_abes@yahoo.com:1244197623:2009-06-05T18:27:03.171+0000:1244197623:2009-06-05T18:27:03.171+0000:Sounds that what you're looking for is a bit like transaction management - you want to make sure that the Quartz event gets processed exactly once.
If the UnitOfWork provided a means to register  ""start"" synchronization objects, with access to the Exchange then you could potentially do something like:
 - sync.start() - extract the message ID and perform duplication check against DB (or memory) and implement your decision algorithm, potentially delaying until timeout. Potentially polling for completion against the DB. In a memory based approach, you could get notified when the lock on the process is signaled.

 -sync.onFailure / onComplete would update the database (memory) with the status and continue.

this basically would provide a means to have an ""exclusive"" unit of work...

ohecker:1244202197:2009-06-05T19:43:17.145+0000:1244202197:2009-06-05T19:43:17.145+0000:Andi summarized quite exaclty what I am looking for. I think this is how interaction with the IdempotentRepository should look like to make shure it works in a parallel processing scenario.
The old implementation (pre CAMEL-1451) had the issue that the message gets lost when the route fails after checking the repository.
The current implentation has the issue that there might be duplicates because identical messages are not detected unless the first one gets processed completely. 

The solution with the in memory cache might improve the situation but will have no effect in my main use case (Quartz trigger duplicates) because here the duplicate messages occur on always on different machines. So in this scenario a synchronization via database is required to make it work. 

davsclaus:1244339371:2009-06-07T09:49:31.202+0000:1244339371:2009-06-07T09:49:31.202+0000:Oliver, thanks for the unit test.

I have reproduced the problem, and working with CAMEL-1679 on a solution.
davsclaus:1244340149:2009-06-07T10:02:29.585+0000:1244340149:2009-06-07T10:02:29.585+0000:I added the *remove* operation to the idempotent interface so you can implement your DB based solution.

And changed the behavior to add the key before processing. And in case of a failure it will invoke the remove operation so you can process the failed message at a later stage.


{code}
public interface IdempotentRepository<E> {

    /**
     * Adds the key to the repository.
     *
     * @param key the key of the message for duplicate test
     * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element
     */
    boolean add(E key);

    /**
     * Returns <tt>true</tt> if this repository contains the specified element.
     *
     * @param key the key of the message
     * @return <tt>true</tt> if this repository contains the specified element
     */
    boolean contains(E key);

    /**
     * Removes the key from the repository.
     *
     * @param key the key of the message for duplicate test
     * @return <tt>true</tt> if the key was removed
     */
    boolean remove(E key);
}
{code}



ohecker:1244343663:2009-06-07T11:01:03.744+0000:1244343663:2009-06-07T11:01:03.744+0000:Thanks Claus.
I was in the meantime locally working on a solution as I had drafted it above. It would be a major change in the IdempotentRepository interface. Also the interface
would no longer be as easy as the ""Set-alike"" interface of the current IdempotentRepository.
 
The main idea is that the key might be first ""reserved"" in the repository which also includes a timeout and might lateron either be ""confirmed"" or ""released"".

I already got a changed MemoryIdempotentRepository working and an IdempotentConsumer implementation. For the
FileConsumer it is not that straightforward as the lockHandle Object needs to be attached to the Exchange due to the asynchronous processor.

Probably CAMEL-1679 provides a more generic solution for this and similar requirements.

I just want to note that your approach with the {{remove}} method might result in loss of the message if processing the message fails after executing {{add}} 
and removing the key from the repository with {{remove}} also fails. Especially when using a DB based Repository this might happen when loosing the network
connection when processing the message.

For completeness here is the IdempotentRepository Interface as I was experimenting with:
{code}
public interface IdempotentRepository<E> {
    /**
     * Reserves a given key in the repository.
     * <ul>
     * <li>If the key is neither reserved nor confirmed then the key will be reserved and an Object will be returned which serves as handle for either confirming or
     * releasing the key lateron.</li>
     * <li>If the key is already confirmed then <code>null</code> will be returned immediately.</li>
     * <li>If the key is reserved then the method will block until
     *   <ul>
     *     <li>the key is confirmed by the actor which reserved the key</li>
     *     <li>the key is released by the actor which reserved the key</li>
     *     <li>the reservation of the original actor timed out</li>
     *   </ul>
     *   In all cases the method will then try to reserve the key and react as indicated above.</li>
     * </ul>
     * On completion of the method it is guaranteed that
     * <ul>
     *   <li>the key was successfully reserved, indicated by a returned lock handle object, or</li>
     *   <li>the key was already confirmed, indicated by returning <code>null</code></li>
     * </ul>     
     * 
     * @param key The key which should be reserved in the repository.
     * @param timeOut Indicates how long the key is locked before the lock might be broken by another actor requesting to reserve the same key. This is
     * a minimum time and the lock might still be valid even after the timeout.
     * @return a lock handle object in case of successful reservation; <code>null</code> is the key was already confirmed beforehand
     */
    Serializable reserveKey(E key, int timeOut);

    
    /**
     * Releases the key in the repository which is represented by the given lock handle object.
     * The key is then available again for reservation by this or another actor.
     * If the lock handle object is unknown (which might also be caused by a timed out lock or the lock already being released or confirmed)
     * no action is taken.
     * @param lockHandle the lock handle object which was returned when reserving the key via the {@link #reserveKey(Object,int)} method.
     */
    void releaseKey(Serializable lockHandle);

    /**
     * Confirms the key in the repository which is represented by the given lock handle object.
     * @param lockHandle the lock handle object which was returned when reserving the key via the {@link #reserveKey(Object,int)} method.
     * @throws CamelException  if the lock handle object is unknown (which might also be caused by a timed out lock or the lock already
     * being released or confirmed) 
     */
    void confirmKey(Serializable lockHandle) throws CamelException;
    
}
{code}

If I don't get any other message from you I will stop working on this for now.
davsclaus:1244345009:2009-06-07T11:23:29.540+0000:1244345009:2009-06-07T11:23:29.540+0000:trunk: 782371.

Oliver we now eagerly adds to repository to be able to detect duplications of in progress exchanges.

Camel also provides a jpa based repository you can use. Check out camel-jpa and some of the unit tests there.


davsclaus:1244371121:2009-06-07T18:38:41.186+0000:1244371121:2009-06-07T18:38:41.186+0000:Oliver

Sorry I did not see you comments before I marked this as fixed. I had prepared by pressing fixed, and was running one last final test and waiting for the SVN rev. no.

You have a good idea about the confirm key. So I have created a ticket for this issue. See the sub ticket.
I do think that adding the confirm to the SPI interface you will be able to implement your timeout feature.

But lets take that discussion at the sub ticket.
davsclaus:1244411479:2009-06-08T05:51:19.419+0000:1244411479:2009-06-08T05:51:19.419+0000:I add the confirm key to the repo interface. This allows you to be able to impl. your timeout version.

{code}
MyRepo repo = new MyRepo();
repo.setTimeout(20000);
{code}

And then use MyRepo with the idempotent consumer EIP.

Camel will eagerly add and then when the exchange is done call the confirm.
In case of failure it will call the remove instead.

I also added an {{eager}} option so you can turn it on/off. Its enabled by default.
If disabled then Camel will add when the exchange is complete.

trunk: 782534.
davsclaus:1258775882:2009-11-21T11:58:02.197+0000:1258775882:2009-11-21T11:58:02.197+0000:Closing all 2.0M2 tickets"
0,CAMEL-1649,Improvement,Minor,"2.0-M1, 1.6.1","1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-05-26 10:39:48+00:00,2009-11-21 11:58:02+00:00,"Only the INSERT should store the response from ibatis in the OUT body.


The others such as INSERT, UPDATE, DELETE should store the response in a special header.
This allows the end user to keep the original payload in the message so it can be continued to be routed.
That could be an order Object that he/she wants to continue routing with.


Then the header can contain the response from ibatis that can be a auto generated key or the like.","davsclaus:1243308434:2009-05-26T11:27:14.591+0000:1243308434:2009-05-26T11:27:14.591+0000:trunk: 778650.
1.x: 778655.
davsclaus:1258775882:2009-11-21T11:58:02.147+0000:1258775882:2009-11-21T11:58:02.147+0000:Closing all 2.0M2 tickets"
0,CAMEL-1648,Sub-task,Major,None,None,"
None
",Closed,Won't Fix,2.5.0,Unassigned,Jonathan Anstey,0,0,2009-05-25 18:34:18+00:00,2011-04-24 09:57:09+00:00,"The Bespin editor in the web console takes nice route XML like 



<route id=""route1"" xmlns:ns2=""http://camel.apache.org/schema/web"" xmlns=""http://camel.apache.org/schema/spring"">
    <description>This is an example route which you can start, stop and modify</description>
    <from uri=""seda:foo""/>
    <to uri=""mock:results"" id=""to1""/>
</route>




and spits out



<route id=""route1"" xmlns:ns2=""http://camel.apache.org/schema/web"" xmlns=""http://camel.apache.org/schema/spring"">
    <description>This is an example route which you can start, stop and modify</description>
    <from uri=""seda:foo"">
    <to uri=""mock:results"" id=""to1"">
</to>

</from></route>




which will blow up Camel when we try and save it.","janstey:1243248197:2009-05-25T18:43:17.353+0000:1243248197:2009-05-25T18:43:17.353+0000:Just disabled the Bespin editor in revision 778465 until we get this fixed. Its back to the good ol ugly textarea :)


davsclaus:1284860555:2010-09-19T09:42:35.422+0000:1284860555:2010-09-19T09:42:35.422+0000:The bespin editor has been removed from 2.5 onwards
davsclaus:1303610229:2011-04-24T09:57:09.523+0000:1303610229:2011-04-24T09:57:09.523+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1647,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-25 13:19:42+00:00,2009-11-21 11:58:02+00:00,"With CAMEL-1644 some components such as: Mina, FTP has producers that are not singleton scoped. And thus a new producer is used when the send a message to the give endpoint.


What is needed now is a pool for producers so we can reuse producers that are already connected to the given endpoint.
For FTP that is a FTP producer that has established a connection to the remote FTP server. Likewise for Mina.


We should also add options to configure the pool size, and the producers in general should be able to reconnect. However they can already do that.","davsclaus:1243228827:2009-05-25T13:20:27.243+0000:1243228827:2009-05-25T13:20:27.243+0000:CAMEL-1644 must be implemented before we can have this pooling
davsclaus:1243319946:2009-05-26T14:39:06.208+0000:1243319946:2009-05-26T14:39:06.208+0000:First cut committed: 778715

It needs a bit more unit test covering for odd situations and stress.

And please review the pool implementation.
davsclaus:1243380620:2009-05-27T07:30:20.984+0000:1243380620:2009-05-27T07:30:20.984+0000:ServicePool is now SPI: 779038.
davsclaus:1243389634:2009-05-27T10:00:34.175+0000:1243389634:2009-05-27T10:00:34.175+0000:Added wiki documentation:

http://cwiki.apache.org/confluence/display/CAMEL/ServicePool

davsclaus:1258775882:2009-11-21T11:58:02.111+0000:1258775882:2009-11-21T11:58:02.111+0000:Closing all 2.0M2 tickets"
0,CAMEL-1646,Bug,Major,"2.0-M1, 1.6.1","1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Claus Ibsen,0,0,2009-05-25 12:08:09+00:00,2009-11-21 11:58:02+00:00,camel-restlet creates exchanges that are inOnly. But they should be InOut.,"davsclaus:1243224962:2009-05-25T12:16:02.592+0000:1243224962:2009-05-25T12:16:02.592+0000:trunk: 778399
1.x: 778401
davsclaus:1258775882:2009-11-21T11:58:02.092+0000:1258775882:2009-11-21T11:58:02.092+0000:Closing all 2.0M2 tickets"
0,CAMEL-1645,Bug,Major,"1.6.0, 2.0-M1, 1.6.1","1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Rohit Rai,0,0,2009-05-25 09:40:18+00:00,2009-11-21 11:58:02+00:00,"The document at http://camel.apache.org/mail.html suggests that contentType header should set the Content-Type of the out going mail, but that doesn't work.


I am trying to set the content type of the mail I send using the contentType header. That doesn't work, but it works if I put the contentType in the endpoint uri. i.e. - 


            <camel:setHeader headerName=""contentType""> 
                <camel:constant>text/html</camel:constant> 
            </camel:setHeader> 


Has no effect, while this works - 
             smtp://rohitr@xyzab.pramati.com?password=32478hds78&contentType=text/html 


But I am not able to set the charset and it always takes us-ascii 


So for the mail the content type header comes as - 
Content-Type: text/html; charset=us-ascii


I tried using 
            <camel:setHeader headerName=""contentType""> 
                <camel:constant>text/html;charset=UTF-8</camel:constant> 
            </camel:setHeader> 


and also 


            <camel:setHeader headerName=""content-type""> 
                <camel:constant>text/html;charset=UTF-8</camel:constant> 
            </camel:setHeader> 


and 
smtp://rohitr@xyzab.pramati.com?password= 32478hds78&contentType=text/html;charset=UTF-8 


but nothing works","davsclaus:1243399391:2009-05-27T12:43:11.478+0000:1243399391:2009-05-27T12:43:11.478+0000:trunk: 779143.
1.x: 779149.
rohitbrai:1244601360:2009-06-10T10:36:00.971+0000:1244601360:2009-06-10T10:36:00.971+0000:The change works only in case of non multipart message i.e. message without alternative message body and without attachments, but in case of multipart messages the following code is executed -

protected void addBodyToMultipart(org.apache.camel.Message camelMessage, MailConfiguration configuration, MimeMultipart activeMultipart) throws MessagingException {
        BodyPart bodyMessage = new MimeBodyPart();
        bodyMessage.setContent(camelMessage.getBody(String.class), configuration.getContentType());
        activeMultipart.addBodyPart(bodyMessage);
 }

which takes contentType from configuration and doesn't respect the header passed.

We should use the contentType header value if passed to set the contentType and fall back to configuration.getContentType only if required.

Will that take care of applying the charset to the body, if the contentType header is defined as - text/html; charset=UTF-8?
davsclaus:1244604551:2009-06-10T11:29:11.476+0000:1244604551:2009-06-10T11:29:11.476+0000:Rohit thanks for reporting.

Arrrrggghh why is that every API that SUN does it terrible low level and a pain to work with.

Yeah I have to a bit of refator to let the I put the content on this part of the mime message being able to detect content type and set it correctly as either text or content and handle the charset as well :) 
davsclaus:1244670416:2009-06-11T05:46:56.102+0000:1244670416:2009-06-11T05:46:56.102+0000:trunk: 783632.
1.x : 783638.

I did a fix on 1.x that did not involve API changes. In 2.0 I did cleanup the API a bit.

Rohit can you test it?
davsclaus:1258775882:2009-11-21T11:58:02.038+0000:1258775882:2009-11-21T11:58:02.038+0000:Closing all 2.0M2 tickets"
0,CAMEL-1644,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-25 08:24:46+00:00,2009-11-21 11:58:02+00:00,"See CAMEL-1641 that is a bug reported about the FTP producer not being thread safe for concurrent usage.


To address this we should consider supporting Producers to implement IsSingleton and return false to indicate that a producer should not be cached in the ProducerCache.


We should also introduce a ProducerCallback to allow safely usages of a producer and letting Camel handle the correct resource management to



find the producer (singletons)
add to cache if needed
or create it
start it
invoke the callback
stop it for non singletons
etc.



In the future we can support a pool of non singleton producers as well and with this callback users of this producer can safely use it without worrying how to get it from a pool and how to safely return it back without leaking.","davsclaus:1243211226:2009-05-25T08:27:06.897+0000:1243211226:2009-05-25T08:27:06.897+0000:First cut of a patch. Notice there are some changes in for the CAMEL-1641 as well.
davsclaus:1243216043:2009-05-25T09:47:23.951+0000:1243216043:2009-05-25T09:47:23.951+0000:A patch without the file/ftp changes. 
davsclaus:1243228963:2009-05-25T13:22:43.120+0000:1243228963:2009-05-25T13:22:43.120+0000:trunk: 778418.
davsclaus:1258775882:2009-11-21T11:58:02.000+0000:1258775882:2009-11-21T11:58:02.000+0000:Closing all 2.0M2 tickets"
0,CAMEL-1643,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-25 01:11:01+00:00,2009-11-21 11:58:01+00:00,"Since the guiceyfruit 2.0 was released, we need to upgrade current guiceyfruit version.","njiang:1243191929:2009-05-25T03:05:29.892+0000:1243191929:2009-05-25T03:05:29.892+0000:trunk
http://svn.apache.org/viewvc?rev=778263&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.980+0000:1258775881:2009-11-21T11:58:01.980+0000:Closing all 2.0M2 tickets"
0,CAMEL-1642,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-24 08:15:24+00:00,2009-11-21 11:58:01+00:00,getScanner should recognize GenericFile as type so we can leverage the underlying java.io.File handle.,"davsclaus:1243124714:2009-05-24T08:25:14.011+0000:1243124714:2009-05-24T08:25:14.011+0000:See nabble:
http://www.nabble.com/split-%2B-stream-%2B-choice%2C-what-wrong--td23689175s22882.html

davsclaus:1243124994:2009-05-24T08:29:54.586+0000:1243124994:2009-05-24T08:29:54.586+0000:trunk: 778114.

This bug is only in Camel 2.0. Camel 1.x works fine.
davsclaus:1258775881:2009-11-21T11:58:01.932+0000:1258775881:2009-11-21T11:58:01.932+0000:Closing all 2.0M2 tickets"
0,CAMEL-1641,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,1,2009-05-23 08:14:55+00:00,2009-11-21 11:58:01+00:00,"See nabble for discussion:
http://www.nabble.com/Threadsafety-of-Camel-FTP-td23615932.html


Basically FTPClient should be created as a new instance for each created producer or consumer (like http component does)","davsclaus:1243212624:2009-05-25T08:50:24.761+0000:1243212624:2009-05-25T08:50:24.761+0000:trunk: 778354.

When/if CAMEL-1644 is implemented then this bug is already fixed.
However remember to add the unit test in FtpProducerConcurrentTest java. There is a TODO.
davsclaus:1243229194:2009-05-25T13:26:34.576+0000:1243229194:2009-05-25T13:26:34.576+0000:trunk: 778419

And fixed by CAMEL-1644.
davsclaus:1258775881:2009-11-21T11:58:01.915+0000:1258775881:2009-11-21T11:58:01.915+0000:Closing all 2.0M2 tickets"
0,CAMEL-1640,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-22 20:06:19+00:00,2021-04-08 08:38:29+00:00,"Most of the consumers can handle batch but they dont decorate the Exchange with this information.
Only the file component does this.


We should expose a BatchConsumer interface to mark a consumer as being batch capable.
Then this consumer should be able to round up the exchanges beforehand they are processed. This allows us to gather the total number of exchanges in the batch.
And then afterwards loop this list and emit each exchange with information about: current index out of total.


This also makes it much easier to support aggregator afterwards as the aggregator will be able to support BatchConsumer and then know when it has the complete batch aggregated.


In camel-core its the file component that should be batch aware.


Other components such as: mail, rss, atom, and many others can support this as well.","davsclaus:1243033112:2009-05-23T06:58:32.188+0000:1243033112:2009-05-23T06:58:32.188+0000:First commit in: 777808.
davsclaus:1243048460:2009-05-23T11:14:20.721+0000:1243048460:2009-05-23T11:14:20.721+0000:Should the batch information be set as header or properties?
{code}
            // add current index and total as headers
            exchange.getIn().setHeader(Exchange.BATCH_INDEX, index);
            exchange.getIn().setHeader(Exchange.BATCH_SIZE, total);
            exchange.getIn().setHeader(Exchange.BATCH_COMPLETE, index == total - 1);
{code}

at first I added it as properties but then I felt that as headers was where most of the others is usually set.

Any thoughts? eg headers or properties?

davsclaus:1243048579:2009-05-23T11:16:19.012+0000:1243048579:2009-05-23T11:16:19.012+0000:I 2nd that. I do think they belong as properties. I changed it to headers to easier unit test camel-mail. But I will revert it to properties.
davsclaus:1243048728:2009-05-23T11:18:48.717+0000:1243048728:2009-05-23T11:18:48.717+0000:camel-mail: 777891. *DONE*
davsclaus:1243063003:2009-05-23T15:16:43.499+0000:1243063003:2009-05-23T15:16:43.499+0000:camel-ibatis: 777941. *DONE*
davsclaus:1243064669:2009-05-23T15:44:29.383+0000:1243064669:2009-05-23T15:44:29.383+0000:camel-jpa: 777944. *DONE*
davsclaus:1243066812:2009-05-23T16:20:12.414+0000:1243066812:2009-05-23T16:20:12.414+0000:We got them covered now. only atom/rss is not batch consumer as they are working in a special way with how it uses it split entries to consume the next entry on the next poll. And as such its not really batch aware.
davsclaus:1243066831:2009-05-23T16:20:31.899+0000:1243066831:2009-05-23T16:20:31.899+0000:Added wiki
http://camel.apache.org/batch-consumer.html

davsclaus:1258775881:2009-11-21T11:58:01.894+0000:1258775881:2009-11-21T11:58:01.894+0000:Closing all 2.0M2 tickets"
0,CAMEL-1639,Improvement,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-22 20:02:21+00:00,2009-11-21 11:58:01+00:00,"When routing using async DSL the exchange on the async thread should have the UoW synchronization jobs handed over. This allows onCompletion tasks to be preserved and also be executed when the async thread is complete. 


This can be used to allow a file consumer to use a async thread pool to speed up. The thread pool can concurrently process the files and each of the threds in this pool will do the file consume commit/rollback when they finish.","davsclaus:1243033089:2009-05-23T06:58:09.302+0000:1243033089:2009-05-23T06:58:09.302+0000:trunk: 777808.

The {{async}} DSL not hands over onCompletion to the async thread so it does the on completion callbacks.
davsclaus:1258775881:2009-11-21T11:58:01.845+0000:1258775881:2009-11-21T11:58:01.845+0000:Closing all 2.0M2 tickets"
0,CAMEL-1638,Improvement,Major,"2.0-M1, 1.6.1",2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-22 18:58:49+00:00,2009-11-21 11:58:01+00:00,"Using aggregator, splitterl, multicast etc. that supports AggregatorStrategy all have the flaw that they skip invoking this interface callback for the very first exchange.


This hazzles the end users implementing this interface if they are to be able to traverse all the exchanges, to eg summing a total amount or the likes.
And its also a bit confusing as well why the first one is skipped.


And if you aggregator out of order then you dont know which one was the first exchange.


So we should invoke this callback always. And the first time the oldExchange parameter is null.","njiang:1243015735:2009-05-23T02:08:55.698+0000:1243015735:2009-05-23T02:08:55.698+0000:How about adding a callback method for visiting the exchange in AggregatorStragtegy ?
And we can get ride of the annoying  old Exchange ""null"" checking.
 
davsclaus:1243027685:2009-05-23T05:28:05.805+0000:1243027685:2009-05-23T05:28:05.805+0000:Willem could you explain a bit more?

I would also like the AggregationStrategy to be a single method to implement as thats easier for anonym inner classes and also for languages with closure to support more nicely.

I agree we have a catch-22 situation.

If we leave it like the old way then we loose that first callback, that
- takes end users by the surprise as if they aggregate 10 exchanges they would expect 10 callbacks
- you lose 1 callback and have to deal with the situation how to remedy this by eg adding a special ""boolean"" flag on the exchange that you have
  done your own ""i missed the first exchange fixup"".

With the new way, we get
- all 10 callbacks is executed and end users is not surprised
- however the first callback have {{null}} for oldExchange

BTW: As a side note I am speculating how to allow a POJO to be AggregatorStrategy so we dont have to use Camel API at all. But I will create a new ticket for that as well.
davsclaus:1243028497:2009-05-23T05:41:37.948+0000:1243028497:2009-05-23T05:41:37.948+0000:Willem it isnt that bad with the null check. Not all implementations suffer for that. Check this out

*before*
{code}
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        Exchange copy = newExchange.copy();
        Message newIn = copy.getIn();
        String oldBody = oldExchange.getIn().getBody(String.class);
        String newBody = newIn.getBody(String.class);
        newIn.setBody(oldBody + ""+"" + newBody);
        return copy;
    }
{code}

*after*
{code}
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        if (oldExchange != null) {
            String oldBody = oldExchange.getIn().getBody(String.class);
            String newBody = newExchange.getIn().getBody(String.class);
            newExchange.getIn().setBody(oldBody + ""+"" + newBody);
        }
        return newExchange;
    }
{code}

The code in after is also very readable. 
davsclaus:1243033226:2009-05-23T07:00:26.710+0000:1243033226:2009-05-23T07:00:26.710+0000:trunk: 777808.

Willem this is still up for discussion, even though I committed a bunch of stuff.

I have also thought of adding a {{boolean first}} parameter to indicate its the very first call.
njiang:1243036404:2009-05-23T07:53:24.121+0000:1243036404:2009-05-23T07:53:24.121+0000:This call back API gives us enough flexibilities for aggregation
{noformat} 
public Exchange aggregate(Exchange oldExchange, Exchange newExchange)
{noformat} 
I just think if we want to visit the all the exchanges,  we could introduce a
 visit method to look up these exchanges without write a customer aggregator.
davsclaus:1243036753:2009-05-23T07:59:13.750+0000:1243036753:2009-05-23T07:59:13.750+0000:But Willem you would like to do you code in one place.

So if you need to count the number of aggregated methods, or do some custom changes on all aggregated exception you can do all that in the same method.

If we skip the very first exchange then you cannot do that. And if you had to do a visit pattern afterwards that might be to late as you have already aggregated the incoming exchanges. So its a chicken and egg situation.

So IMHO the best solution is to also pass in the first exchange in this callback. That gives full power to the end user.
njiang:1243039271:2009-05-23T08:41:11.867+0000:1243039271:2009-05-23T08:41:11.867+0000:I can't agree with your more on the standard of giving the full power to the end user :) 

Let's call the aggregate method when the aggregator gets the exchange each time.

BTW , We also need to update the comments and change log for it.

davsclaus:1243042026:2009-05-23T09:27:06.788+0000:1243042026:2009-05-23T09:27:06.788+0000:Well spotted Willem.

I have updated the javadoc on AggregationStrategy and added a note on the camel 2.0 release page about API changes.
davsclaus:1243042046:2009-05-23T09:27:26.794+0000:1243042046:2009-05-23T09:27:26.794+0000:Ups will update the Aggregate EIP wiki page as well.
davsclaus:1243042282:2009-05-23T09:31:22.052+0000:1243042282:2009-05-23T09:31:22.052+0000:Wiki updated.

And using
{code}
if (oldExchange == null) {
  return newExchange;
}
{code}

Applies as well for Camel 1.x as basically no harm is done, as oldExchange is newer null in Camel 1.x
davsclaus:1258775881:2009-11-21T11:58:01.819+0000:1258775881:2009-11-21T11:58:01.819+0000:Closing all 2.0M2 tickets"
0,CAMEL-1637,New Feature,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-22 18:41:08+00:00,2009-11-21 11:58:01+00:00,"The simple language only supports a single expression with a single operator.


We should add support for adding AND , OR as operator to concat two expressions.
Currently we only support a single AND , OR as it will cover most use cases.


Now you can do:



        ${in.header.foo} == abc and ${in.header.bar} == 123","davsclaus:1242989487:2009-05-22T18:51:27.156+0000:1242989487:2009-05-22T18:51:27.156+0000:trunk: 777654

updated wiki as well.
davsclaus:1258775881:2009-11-21T11:58:01.799+0000:1258775881:2009-11-21T11:58:01.799+0000:Closing all 2.0M2 tickets"
0,CAMEL-1636,Improvement,Major,2.0-M1,,"
None
",Closed,Won't Fix,None,Claus Ibsen,alexander j. perez tchernov,0,0,2009-05-22 08:07:38+00:00,2015-10-20 13:42:16+00:00,"I think that we need an tutorial / example how to use camel with JMS queue created in geronimo-jetty-2.1.4 . I have got  NPE when try to use camel producer in simple servlet


I have created 
--------- Simple Producer — 
public class SimpleProducer {
      @EndpointInject(uri=""activemq:queue:SendReceiveQueue"")
        ProducerTemplate producer;
	public  void produceMessage() 

{ producer.sendBody(""<message>test</message>""); }

}
--------- WEB-INF/applicationContext.xml--- 
    <context:component-scan base-package=""org.camel.test.conf""/>
    <context:annotation-config />
     <bean id=""producer"" class=""org.camel.test.conf.SimpleProducer""/>
     <bean id=""activemq"" class=""org.apache.camel.component.jms.JmsComponent"">
  		<property name=""connectionFactory"">
    		<bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
      			<property name=""brokerURL"" value=""tcp://localhost:61616""/>
    		</bean>
  		</property>
	</bean>
-------- UserServlet -------------
public class UserServlet  extends javax.servlet.http.HttpServlet implements javax.servlet.Servlet{
        @Resource(name=""jms/TestConnectionFactory"")
	 private ConnectionFactory connectionFactory;
	 @Resource(name=""jms/TestQueue"")
	 private Queue queue;


        protected void    doGet (...) 

{ 
                     //use EJB 3.0 injected resources - works fine
                    producer.send(session.createMessage());	
                    // NPE            
	            new SimpleProducer().produceMessage();
        }

}
-------- NPE -------------
Geronimo Application Server started
INFO RMI TCP Connection(7)-169.254.167.193 org.apache.geronimo.deployment.DeploymentContext - The Strict Manifest Classpath processing mode is in effect.
This option can be altered by specifying -DXorg.apache.geronimo.deployment.LenientMFCP=true|false
Specify =""true"" for more lenient processing such as ignoring missing jars and references that are not spec compliant.


ERROR DefaultThreadPool 195 org.mortbay.log - /camel/UserServlet
java.lang.NullPointerException
	at org.camel.test.conf.SimpleProducer.produceMessage(SimpleProducer.java:30)
	at webjms.UserServlet.doGet(UserServlet.java:68)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:693)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:806)
	at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487)
	at org.apache.geronimo.jetty6.InternalJettyServletHolder.handle(InternalJettyServletHolder.java:65)
	at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362)
	at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
	at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)
	at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726)
	at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)
	at org.apache.geronimo.jetty6.handler.TwistyWebAppContext.access$101(TwistyWebAppContext.java:40)
	at org.apache.geronimo.jetty6.handler.TwistyWebAppContext$TwistyHandler.handle(TwistyWebAppContext.java:65)
	at org.apache.geronimo.jetty6.handler.ThreadClassloaderHandler.handle(ThreadClassloaderHandler.java:46)
	at org.apache.geronimo.jetty6.handler.InstanceContextHandler.handle(InstanceContextHandler.java:58)
	at org.apache.geronimo.jetty6.handler.UserTransactionHandler.handle(UserTransactionHandler.java:48)
	at org.apache.geronimo.jetty6.handler.ComponentContextHandler.handle(ComponentContextHandler.java:47)
	at org.apache.geronimo.jetty6.handler.TwistyWebAppContext.handle(TwistyWebAppContext.java:59)
	at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:206)
	at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)
	at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)
	at org.mortbay.jetty.Server.handle(Server.java:324)
	at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505)
	at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828)
	at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514)
	at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)
	at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380)
	at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395)
	at org.apache.geronimo.pool.ThreadPool$1.run(ThreadPool.java:214)
	at org.apache.geronimo.pool.ThreadPool$ContextClassLoaderRunnable.run(ThreadPool.java:344)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:619)


----------- WEB-INF / lib ----------
activemq-camel-5.2.0
activemq-web-5.2.0
apache-camel-2.0-M1
camel-core-2.0-M1
camel-jms-2.0-M1
camel-spring-2.0-M1
camel-spring-integration-2.0-M1


----------- ${geronimo-home} / repository / org /springframework / ----------
spring
spring-aop
spring-beans
spring-context
spring-core
sprinx-txn
spring-web


----------- geronimo-web.xml----------


<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
<web:web-app xmlns:app=""http://geronimo.apache.org/xml/ns/j2ee/application-2.0""
             xmlns:client=""http://geronimo.apache.org/xml/ns/j2ee/application-client-2.0""
             xmlns:conn=""http://geronimo.apache.org/xml/ns/j2ee/connector-1.2""
             xmlns:dep=""http://geronimo.apache.org/xml/ns/deployment-1.2""
             xmlns:ejb=""http://openejb.apache.org/xml/ns/openejb-jar-2.2""
             xmlns:name=""http://geronimo.apache.org/xml/ns/naming-1.2""
             xmlns:pers=""http://java.sun.com/xml/ns/persistence""
             xmlns:pkgen=""http://openejb.apache.org/xml/ns/pkgen-2.1""
             xmlns:sec=""http://geronimo.apache.org/xml/ns/security-2.0""
             xmlns:web=""http://geronimo.apache.org/xml/ns/j2ee/web-2.0.1"">
    <dep:environment>
        <dep:moduleId>
            <dep:groupId>org.apache.camel</dep:groupId>
            <dep:artifactId>geronimo-test</dep:artifactId>
            <dep:version>1.0</dep:version>
            <dep:type>car</dep:type>
        </dep:moduleId>
        <dep:dependencies>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-beans</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-context</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-core</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-web</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-aop</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
            <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring-tx</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>
             <dep:dependency>
                <dep:groupId>org.springframework</dep:groupId>
                <dep:artifactId>spring</dep:artifactId>
                <dep:version>2.5.6</dep:version>
                <dep:type>jar</dep:type>
            </dep:dependency>        
           <dep:dependency>         
                <dep:groupId>org.apache.geronimo.configs</dep:groupId>
                <dep:artifactId>activemq-ra</dep:artifactId>
                <dep:version>2.1.4</dep:version>
                <dep:type>car</dep:type>
           </dep:dependency>               
        </dep:dependencies>
    </dep:environment>
    <web:context-root>/camel</web:context-root>
    <name:resource-ref>
    	<name:ref-name>jms/TestConnectionFactory</name:ref-name>
    	<name:pattern>
    	    <name:groupId>org.apache.geronimo.configs</name:groupId>
            <name:artifactId>activemq-ra</name:artifactId>
            <name:version>2.1.4</name:version>
            <name:name>DefaultActiveMQConnectionFactory</name:name>
    	</name:pattern>
    </name:resource-ref>
    <name:resource-env-ref>
    	<name:ref-name>jms/TestQueue</name:ref-name>
        <name:pattern>
          <name:groupId>org.apache.geronimo.configs</name:groupId>
            <name:artifactId>activemq-ra</name:artifactId>
            <name:version>2.1.4</name:version>            
            <name:name>SendReceiveQueue</name:name>
        </name:pattern>
    </name:resource-env-ref>
</web:web-app>


I'll try to upload the attachment with overall project but reduced web-inf/lib","xasima:1242951207:2009-05-22T08:13:27.351+0000:1242951207:2009-05-22T08:13:27.351+0000:Example of the project with all libraries reduced
davsclaus:1243330959:2009-05-26T17:42:39.967+0000:1243330959:2009-05-26T17:42:39.967+0000:You need a camelContext in your spring XML file.

This must be included to let Spring create a CamelContext and allow Camel to do all the needed bean post processors so it can do the @EndpointInject and whatnot.

See more here:
http://camel.apache.org/spring.html

Basically you need something like:

{code:xml}
<camel:camelContext id=""camel5"">
</camel:camelContext>
{code}

in the applicationContext.xml file.
xasima:1243391377:2009-05-27T10:29:37.312+0000:1243391377:2009-05-27T10:29:37.312+0000:Sorry, to omit this part from the comment above...  Here is the full version of applicationContent.xml with cameContext presented. 

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""	
    xmlns:camel=""http://camel.apache.org/schema/spring""
	xmlns:context=""http://www.springframework.org/schema/context""
	xmlns:broker=""http://activemq.apache.org/schema/core""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-2.5.xsd       
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd"">
    
    <!-- Spring IoC scan -->
    <context:component-scan base-package=""org.camel.test.conf""/>
    <context:annotation-config />
    
    <!-- Define camel -->
	<camel:camelContext id=""camel"">		
    	   <!-- will auto discover camel router in the specified package -->
	      <camel:package>org.camel.test.conf</camel:package>	     
	</camel:camelContext>
	
    <bean id=""producer"" class=""org.camel.test.conf.SimpleProducer""/>
    <bean id=""consumer"" class=""org.camel.test.conf.SimpleConsumer""/>
    
	
    <bean id=""jms"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    	<property name=""brokerURL"" value=""tcp://localhost:61616""/>
	</bean>
	
	<bean id=""activemq"" class=""org.apache.camel.component.jms.JmsComponent"">
  		<property name=""connectionFactory"">
    		<bean class=""org.apache.activemq.ActiveMQConnectionFactory"">
      			<property name=""brokerURL"" value=""tcp://localhost:61616""/>
    		</bean>
  		</property>
	</bean>
</beans>
davsclaus:1243394942:2009-05-27T11:29:02.335+0000:1243394958:2009-05-27T11:29:18.764+0000:As a workaround do not use @EndpointInject and use a simple Spring setter

{code:xml}
<bean id=""producer"" class=""org.camel.test.conf.SimpleProducer"">
    <property name=""producer"" ref=""template""/>
</bean>

<camelContext ...>
   <template id=""template""/>
   ...
</camelContext>
{code}

And then use:
{code}
   producer.sendBody(""activemq:queue: activemq:queue:SendReceiveQueue"", ""this is my body"");
{code}

And have a setProducer() method on your Producer bean.
davsclaus:1243395028:2009-05-27T11:30:28.858+0000:1243395028:2009-05-27T11:30:28.858+0000:I have not looked into it by could be classpath issues with Geronimo.

You can enable TRACE logging at org.apache.camel and log it to a file.
Then start it up and so you get the error.

And then attach the log file to this ticket.
davsclaus:1243990883:2009-06-03T09:01:23.510+0000:1243990883:2009-06-03T09:01:23.510+0000:CAMEL-1663 fixes the issue with using camel annotations and other annotations.
davsclaus:1243990940:2009-06-03T09:02:20.805+0000:1243990940:2009-06-03T09:02:20.805+0000:Hi

Can you try using the SNAPSHOT version when I have CAMEL-1663 committed?
It should fix your issue as well.

You can also wait about 2 weeks for the 2.0m2 release to be out.
davsclaus:1244184471:2009-06-05T14:47:51.707+0000:1244184471:2009-06-05T14:47:51.707+0000:See CAMEL-1663 where we have fixed some issue with beans being post processed by Spring for dependency injected.
In some special or rare cases it did not work."
0,CAMEL-1635,Task,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-22 06:59:37+00:00,2009-11-21 11:58:01+00:00,"Current camel-spring-java-config relay on the latest spring java configuration snapshot which is not released yet, and we don't want it to block the camel 2.0-m2 release.
So I introduced the camel internal repository[1] to hold this version of spring java configuration module. 


[1] http://svn.apache.org/repos/asf/camel/m2-repo","njiang:1242947100:2009-05-22T07:05:00.761+0000:1242947100:2009-05-22T07:05:00.761+0000:trunk
http://svn.apache.org/viewvc?rev=777394&view=rev
http://svn.apache.org/viewvc?rev=777408&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.733+0000:1258775881:2009-11-21T11:58:01.733+0000:Closing all 2.0M2 tickets"
0,CAMEL-1634,Improvement,Major,None,None,"
None
",Closed,Fixed,"1.6.2, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-05-21 06:43:38+00:00,2009-11-21 11:58:01+00:00,"Since we already have the velocity-1.6.2_1 in servicemix bundle, let's use it in camel-feature.","njiang:1242946428:2009-05-22T06:53:48.531+0000:1242946428:2009-05-22T06:53:48.531+0000:trunk
http://svn.apache.org/viewvc?rev=776975&view=rev
camel-1.x branch
http://svn.apache.org/viewvc?rev=777030&view=rev

davsclaus:1258775881:2009-11-21T11:58:01.714+0000:1258775881:2009-11-21T11:58:01.714+0000:Closing all 2.0M2 tickets"
0,CAMEL-1633,Bug,Major,1.6.1,"1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Edward Campbell,0,1,2009-05-20 14:24:36+00:00,2009-11-21 11:58:01+00:00,"I am currently porting an application using an in house Smack integration to Apache Camel.


Specifically, I am getting failures with multiuser chat where messages stop being received in the middle of the message stream I am sending.
I have yet to verify the issue exists with private chat as well, but the XMPPConsumer source looks like there will be a similar issue.


The XMPPConsumer class registers itself for all packet types in the doStart method, but in the processPacket method immediately casts the received Packet to Message.


I have found with the in house integration that Smack sends several types of Packets, and I could not find assurance that it would not call the packet listener with a null message.


A simple if((null != packet) && (packet instanceof Message))  should be used to prevent improper packets from being utilized.


FYI: the above if statement should also prevent packets from building up in the Smack message queue, since all messages will be processed without throwing an exception.
So a call to muc.nextMessage() is unnecessary, and actually detrimental (since if the next packet is a message, it will be dropped without processing).
It may be wise to actually use a try/catch block to prevent exceptions from being thrown by the processPacket method, since messages that throw exceptions seem to stay in the Smack message queue.","davsclaus:1243045921:2009-05-23T10:32:01.659+0000:1243045921:2009-05-23T10:32:01.659+0000:Edward feel free to try working on a patch to fix this.
edward.campbell:1243341027:2009-05-26T20:30:27.173+0000:1243341027:2009-05-26T20:30:27.173+0000:That should fix it.
davsclaus:1243396566:2009-05-27T11:56:06.482+0000:1243396566:2009-05-27T11:56:06.482+0000:trunk: 779121.
1.x: 779124.

Applied patch with thanks to Edward Campbell.
edward.campbell:1244553474:2009-06-09T21:17:54.291+0000:1244553474:2009-06-09T21:17:54.291+0000:Only half the patch was applied.
Please apply the changes to the processPacket and processMessage methods from the file I previously attached to fix the problem.
davsclaus:1244581120:2009-06-10T04:58:40.538+0000:1244581120:2009-06-10T04:58:40.538+0000:Hi Edward

Thanks for spotting it.

trunk: 783204.
1.x: 783205.
edward.campbell:1244631946:2009-06-10T19:05:46.308+0000:1244631946:2009-06-10T19:05:46.308+0000:My fault.
After going through a bunch of testing, I found some issues with the fix I originally posted.
Specifically the doStart() method of XmppConsumer.java should be as follows:

{code:java}
    protected void doStart() throws Exception {
        connection = endpoint.createConnection();

        if (endpoint.getRoom() == null) {
            Chat privateChat = connection.getChatManager().createChat(endpoint.getParticipant(), this);
            if (LOG.isInfoEnabled()) {
                LOG.info(""Open private chat to: "" + privateChat.getParticipant());
            }
        } else {
            // add the presence packet listener to the connection so we only get packets that concerns us
            final ToContainsFilter toFilter = new ToContainsFilter(endpoint.getParticipant());
            final AndFilter packetFilter = new AndFilter(new PacketTypeFilter(Presence.class), toFilter);
            connection.addPacketListener(this, packetFilter);

            muc = new MultiUserChat(connection, endpoint.resolveRoom(connection));
            muc.addMessageListener(this);
            DiscussionHistory history = new DiscussionHistory();
            history.setMaxChars(0); // we do not want any historical messages

            muc.join(endpoint.getNickname(), null, history, SmackConfiguration.getPacketReplyTimeout());
            if (LOG.isInfoEnabled()) {
                LOG.info(""Joined room: "" + muc.getRoom() + "" as: "" + endpoint.getNickname());
            }
        }

        super.doStart();
    }
{code}

For some reason the order of adding listeners is important with smack. I haven't yet downloaded the smack source to find out why.

davsclaus:1244670834:2009-06-11T05:53:54.188+0000:1244670834:2009-06-11T05:53:54.188+0000:Thanks Edward for reporting and providing the solution.
I have changed the order so the listener is created first.

trunk: 783639.
1.x: 783640.
edward.campbell:1244712831:2009-06-11T17:33:51.536+0000:1244712909:2009-06-11T17:35:09.307+0000:Found out why the order mattered in this case...
According to the smack documentation if you register the same listener multiple times, only the most recent filter is used.
Since the XmppConsumer is being used for all listeners in this case only the last add<Message|Packet>Listener call is honored.
It would be wiser to have the listeners as separate classes, then the handling of each packet/message type can be addressed separately.
A ConnectionListener can be added as well to handle connections that go down and can be retried later.
I'm going to put an improvement request in for this...
davsclaus:1258775881:2009-11-21T11:58:01.687+0000:1258775881:2009-11-21T11:58:01.687+0000:Closing all 2.0M2 tickets"
0,CAMEL-1632,Bug,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-19 15:46:37+00:00,2009-11-21 11:58:01+00:00,"So when you later call exchange.getFromEndpoint() it returns null. What it should return is the file/ftp endpoint that it was consumed from.


See nabble:
http://www.nabble.com/Get-The-intercepted-endpoint-when-using-inetrcept%28%29-td23543993s22882.html","davsclaus:1242720165:2009-05-19T16:02:45.303+0000:1242720165:2009-05-19T16:02:45.303+0000:trunk: 776372.
davsclaus:1258775881:2009-11-21T11:58:01.557+0000:1258775881:2009-11-21T11:58:01.557+0000:Closing all 2.0M2 tickets"
0,CAMEL-1631,New Feature,Major,None,None,"
None
",Closed,Fixed,2.3.0,Claus Ibsen,James Strachan,1,1,2009-05-19 13:54:27+00:00,2011-04-24 10:01:13+00:00,"rather than this trick: http://camel.apache.org/how-do-i-use-spring-property-placeholder-with-camel-xml.html which is spring specific and a bit cludgy (requiring an <endpoint> in XML and an entry in a properties file) it would be good if we could define a PropertiesComponent which can be configured like this...



<bean id=""properties"" class=""org.apache.camel.components.properties.PropertiesComponent"">
  <property name=""location"" value=""classpath:myfile.properties""/>
</bean>




Then if the file myfile.properties on the classpath looks like this



foo = file://usr/local/cheese




Then sending to the endpoint properties:foo would in fact send to *file://usr/local/cheese* unless folks overrode the system property on the command line (say)","jstrachan:1242712608:2009-05-19T13:56:48.572+0000:1242712608:2009-05-19T13:56:48.572+0000:similar versions of this could be done to use JNDI/LDAP lookups for endpoint URIs
cookj02:1243905755:2009-06-02T09:22:35.055+0000:1243905755:2009-06-02T09:22:35.055+0000:I assume this would work for all endpoints? Is there a clever way to lookup the right endpoint to delegate to?
davsclaus:1245805601:2009-06-24T09:06:41.163+0000:1245805601:2009-06-24T09:06:41.163+0000:Maybe its a duplicate of CAMEL-1656
davsclaus:1265606284:2010-02-08T13:18:04.490+0000:1265606284:2010-02-08T13:18:04.490+0000:trunk: 907650.
davsclaus:1303610473:2011-04-24T10:01:13.873+0000:1303610473:2011-04-24T10:01:13.873+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1630,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Julien Faissolle,0,1,2009-05-19 13:01:49+00:00,2009-11-21 11:58:01+00:00,"I have the following simple configuration :



<route>
    <from uri=""file:///home/julien/tests/a?include=.*?\.xml"" />
    <to uri=""file:///home/julien/tests/b?fileName=${date:now:yyyy_MM_dd}/${file:onlyname}""/>
</route>




After putting an input file into /home/julien/tests/a I get the following error:



 
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: /home/julien/tests/b/2009_05_19/160903061200040046.xml
        at org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:188)
        at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:135)
        at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:78)
        at org.apache.camel.component.file.GenericFileProducer.process(GenericFileProducer.java:49)
        at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:83)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:195)
        at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:130)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.proceed(StreamCachingInterceptor.java:88)
        at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:83)
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52)
        at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:157)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:98)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
        at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
        at java.lang.Thread.run(Thread.java:619)
Caused by: java.io.FileNotFoundException: /home/julien/tests/b/2009_05_19/160903061200040046.xml (No such file or directory)
        at java.io.RandomAccessFile.open(Native Method)
        at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)
        at org.apache.camel.component.file.FileOperations.prepareOutputFileChannel(FileOperations.java:253)
        at org.apache.camel.component.file.FileOperations.writeFileByFile(FileOperations.java:205)
        at org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:178)
        ... 24 more




In the meantime, Camel has created a fubar directory /home/julien/tests/b/home/julien/tests/b/2009_05_19 .


I tracked the problem and found it to be cause by the following code section in GenericFileProducer.java




    protected void writeFile(GenericFileExchange<T> exchange, String fileName) throws GenericFileOperationFailedException {
        InputStream payload = exchange.getIn().getBody(InputStream.class);
        try {
            // build directory if auto create is enabled
            if (endpoint.isAutoCreate()) {
                int lastPathIndex = fileName.lastIndexOf(File.separator);
                if (lastPathIndex != -1) {
                    String directory = fileName.substring(0, lastPathIndex);
                    // skip trailing /
                    directory = FileUtil.stripLeadingSeparator(directory);
                    if (!operations.buildDirectory(directory, false)) {
                        log.debug(""Cannot build directory ["" + directory + ""] (could be because of denied permissions)"");
                    }
                }
            }
          ....................




Instead of stripping the trailing separator as noted in the comment, the code strips the leading separator...","davsclaus:1242711955:2009-05-19T13:45:55.853+0000:1242711955:2009-05-19T13:45:55.853+0000:Hi Julien

Thanks for reporting I am looking into this now.
davsclaus:1242715499:2009-05-19T14:44:59.778+0000:1242715499:2009-05-19T14:44:59.778+0000:trunk: 776336.
davsclaus:1258775881:2009-11-21T11:58:01.532+0000:1258775881:2009-11-21T11:58:01.532+0000:Closing all 2.0M2 tickets"
0,CAMEL-1629,Improvement,Major,None,"1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-05-19 12:23:52+00:00,2009-11-21 11:58:01+00:00,"camel-example-osgi just provides a simple Spring configuration of how to setup the camel context.
We could also provides a Java DSL version of it.","njiang:1242946522:2009-05-22T06:55:22.883+0000:1242946522:2009-05-22T06:55:22.883+0000:trunk
http://svn.apache.org/viewvc?rev=776289&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=776320&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.514+0000:1258775881:2009-11-21T11:58:01.514+0000:Closing all 2.0M2 tickets"
0,CAMEL-1628,Bug,Major,2.0-M1,None,"
None
",Closed,Won't Fix,None,Willem Jiang,Daniel Keir Haywood,0,0,2009-05-19 12:14:41+00:00,2010-02-07 09:55:22+00:00,"see also: http://www.nabble.com/How-extract-message-body-and-use-later-on-in-route-for-endpoint--td23612034.html


I've got:


private static final String HOST_URI = ""http://localhost:7070"";


from(""direct:getEmployee"")
.to(""restlet:"" + HOST_URI + ""/services"")
.process(new Processor() {
    public void process(Exchange exchange) throws Exception 

{
        String resourcePath = ... xpath to obtain the resource path from exchange.getIn().getBody()
        message.setBody(resourcePath);
        exchange.setOut(message);
    }

}).recipientList(new ExpressionAdapter(){
    public Object evaluate(Exchange exchange) 

{
        return ""restlet:"" + HOST_URI + exchange.getIn().getBody();
    }

});


The first restlet call succeeds, returning an XHTML entity.  The processor then extracts a resource from an <a href>


The ExpressionAdapter dynamically constructs a new Uri to invoke via Restlet.  However, this second restlet call fails, with a nullpointerexception.  It seems that the org.restlet.Restlet is instantiated with the default constructor.  For the first successful call the Restlet#init() method is called, so its context is setup correctly.  But for the second restlet call #init() doesn't seem to get called.


This ultimately triggers the NPE in com.neolios.restlet.http.HttpConverter#addAdditionalHeaders, trying to get a Logger from this context object, but it is passed in from RestletComponent which I imagine wraps the Restlet.


My guess is that it is the dynamic creation of the recipientList is what's ultimately responsible for this failure to call #init()?


This is Camel 2.0-M1 against Restlet 1.1.1.





Some stacktraces:


1. first time through:


Component(Restlet).setContext(Context) line: 228	
ComponentHelper.<init>(Component) line: 64	
Engine.createHelper(Component) line: 380	
Engine.createHelper(Component) line: 105	
Component.<init>() line: 177	
RestletComponent.<init>() line: 46	
NativeConstructorAccessorImpl.newInstance0(Constructor, Object[]) line: not available [native method] 
NativeConstructorAccessorImpl.newInstance(Object[]) line: 39	
DelegatingConstructorAccessorImpl.newInstance(Object[]) line: 27	
Constructor<T>.newInstance(Object...) line: 494	
Class<T>.newInstance0() line: 350 [local variables unavailable] 
Class<T>.newInstance() line: 303 [local variables unavailable] 
ObjectHelper.newInstance(Class<T>) line: 797	
ReflectionInjector.newInstance(Class<T>) line: 32	
DefaultComponentResolver.resolveComponent(String, CamelContext) line: 72	
DefaultCamelContext.getComponent(String) line: 201	
DefaultCamelContext.getEndpoint(String) line: 354	
CamelContextHelper.getMandatoryEndpoint(CamelContext, String) line: 52	
RouteDefinition.resolveEndpoint(String) line: 133	
DefaultRouteContext.resolveEndpoint(String) line: 103	
DefaultRouteContext.resolveEndpoint(String, String) line: 109	
ToDefinition(SendDefinition<Type>).resolveEndpoint(RouteContext) line: 57	
ToDefinition(SendDefinition<Type>).createProcessor(RouteContext) line: 51	


vs


2. second time through, is constructed, but no setContext was called:


Client(Restlet).<init>(Context) line: 79	
Client(Connector).<init>(Context, List<Protocol>) line: 83	
Client.<init>(Context, List<Protocol>, String) line: 82	
Client.<init>(Context, Protocol) line: 101	
Client.<init>(Protocol) line: 121	
Client.<init>(String) line: 131	
RestletProducer.<init>(RestletEndpoint) line: 38	
RestletEndpoint.createProducer() line: 73	
ProducerCache.getProducer(Endpoint) line: 52	
RecipientList.sendToRecipientList(Exchange, Object) line: 74	
RecipientList.process(Exchange) line: 62	
InstrumentationProcessor.process(Exchange, AsyncCallback) line: 80	
StreamCachingInterceptor.proceed(Exchange, AsyncCallback) line: 88	
StreamCachingInterceptor.process(Exchange, AsyncCallback) line: 83	
DeadLetterChannel.process(Exchange, AsyncCallback, DeadLetterChannel$RedeliveryData) line: 195	
DeadLetterChannel.process(Exchange, AsyncCallback) line: 130	
Pipeline.process(Exchange, Exchange, AsyncCallback, Iterator<Processor>, AsyncProcessor) line: 115	
Pipeline.process(Exchange, AsyncCallback) line: 89	
InstrumentationProcessor.process(Exchange, AsyncCallback) line: 68	
StreamCachingInterceptor.proceed(Exchange, AsyncCallback) line: 88	
StreamCachingInterceptor.process(Exchange, AsyncCallback) line: 83	
UnitOfWorkProcessor.process(Exchange, AsyncCallback) line: 52	
AsyncProcessorHelper.process(AsyncProcessor, Exchange) line: 41	
UnitOfWorkProcessor(DelegateAsyncProcessor).process(Exchange) line: 65	
DirectProducer.process(Exchange) line: 47	
ProducerCache.sendExchange(Endpoint, Producer, Processor, Exchange) line: 151	
ProducerCache.send(Endpoint, ExchangePattern, Processor) line: 136	
DefaultProducerTemplate.send(Endpoint, ExchangePattern, Processor) line: 99	
DefaultProducerTemplate.sendBody(Endpoint, ExchangePattern, Object) line: 103","njiang:1242766692:2009-05-20T04:58:12.058+0000:1242766692:2009-05-20T04:58:12.058+0000:This issue is fixed in the CAMEL-1516.
Please check out the latest released Camel 1.6.1 or coming out Camel 2.0-m2 for verifcation."
0,CAMEL-1627,New Feature,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-19 10:18:18+00:00,2009-11-21 11:58:01+00:00,"This allows Camel routing with Spring DSL a bit easier as end users dont have to rely on Java code for various predicate testing in their content based router etc.


Yes they can use EL, OGNL etc for real programming language but then they need these extra jars and learn that language. The simple language provided by Camel should be able to offer a good deal of uses cases out of the box.","davsclaus:1242701925:2009-05-19T10:58:45.724+0000:1242701925:2009-05-19T10:58:45.724+0000:trunk: 776267.
davsclaus:1258775881:2009-11-21T11:58:01.470+0000:1258775881:2009-11-21T11:58:01.470+0000:Closing all 2.0M2 tickets"
0,CAMEL-1626,Improvement,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-19 07:15:46+00:00,2009-11-21 11:58:01+00:00,"For instance



        public void handleException(Exchange exchange, @ExchangeException MyCustomException custom) {




Where we have stated that @ExchangeException expects a MyCustomException to be mapped.
Currently that did not work, you had to define the type as Exception.","davsclaus:1242689961:2009-05-19T07:39:21.612+0000:1242689961:2009-05-19T07:39:21.612+0000:trunk: 776221.
davsclaus:1258775881:2009-11-21T11:58:01.452+0000:1258775881:2009-11-21T11:58:01.452+0000:Closing all 2.0M2 tickets"
0,CAMEL-1625,Bug,Major,None,None,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Ryan Gardner,0,0,2009-05-18 22:59:30+00:00,2009-11-21 11:58:01+00:00,"-------------------------------------------------------------------------------
Test set: org.apache.camel.spring.processor.SpringDeadLetterChannelUseOriginalBodyWithFileTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.379 sec <<< FAILURE!
testOriginalInBodyIsFile(org.apache.camel.spring.processor.SpringDeadLetterChannelUseOriginalBodyWithFileTest)  Time elapsed: 4.106 sec  <<< ERROR!
java.lang.AssertionError: mock:dead bodyAs[java.lang.String] == Hello on Exchange[GenericFileMessage: GenericFile[hello.txt]]
	at org.apache.camel.util.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:38)
	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:115)
	at org.apache.camel.component.mock.MockEndpoint$14.run(MockEndpoint.java:639)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:251)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:218)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:151)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:286)
	at org.apache.camel.processor.DeadLetterChannelUseOriginalInBodyWithFileTest.testOriginalInBodyIsFile(DeadLetterChannelUseOriginalInBodyWithFileTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
	at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:993)


When trying to build latest svn trunk ( 776125 ) with 'mvn clean install'","njiang:1242667631:2009-05-19T01:27:11.033+0000:1242667631:2009-05-19T01:27:11.033+0000:I got this error sometimes,  
it looks like the GenericFileConverter's fallback converter method is not be loaded before the common toString converter.
But if I run this test separately ,  the test error goes away.


davsclaus:1242679718:2009-05-19T04:48:38.130+0000:1242679718:2009-05-19T04:48:38.130+0000:Spring IoC is kinda slow to initialize so I guess the unit test that is actually in camel-core is *too fast* :)

On my laptop however I have not seen this error, might be because I have a brand new laptop so its still fast.

njiang:1242681686:2009-05-19T05:21:26.129+0000:1242681686:2009-05-19T05:21:26.129+0000:I think we could add a delay before the exception throwing processor to make sure the Converter is initialized.

davsclaus:1242684629:2009-05-19T06:10:29.394+0000:1242684629:2009-05-19T06:10:29.394+0000:Ah I got it, a noop=true was missing. The problem is that when the file consumer is faster than the mock, then it would move the consumed file into a .camel subfolder.

The camel-core has this option, it was missing in the spring XML file.

trunk: 776196.
davsclaus:1258775881:2009-11-21T11:58:01.427+0000:1258775881:2009-11-21T11:58:01.427+0000:Closing all 2.0M2 tickets"
0,CAMEL-1624,Bug,Major,1.6.1,"1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Edward Campbell,0,1,2009-05-18 16:19:13+00:00,2009-11-21 11:58:01+00:00,"The code in XmppPrivateChatProducer and XmppGroupChatProducer does not call setSubject() on the org.jivesoftware.smack.packet.Message object.
Setting a subject property on the org.apache.camel.Message object produces a header on the Smack object via its superclass org.jivesoftware.smack.packet.Packet, but that never gets reflected in the Message object because the Message object does not override the setProperty() method on Packet.



private void send(String camelConnectionString) {
		final CamelContext camel = new DefaultCamelContext();
		camel.start();
		Endpoint endpoint = camel.getEndpoint(camelConnectionString);
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOut);
		Producer producer = endpoint.createProducer();
		producer.start();

		// send the message
		Message message = exchange.getIn();
		message.setBody(""The message body"");
		message.setHeader(""subject"", ""Message subject for filtering."");
		producer.process(exchange);
}




The annoying part about this, is that I am trying to integrate with a receiving system that handles messages using the subject as a key to determine how the message should be handled.","davsclaus:1242684691:2009-05-19T06:11:31.403+0000:1242684691:2009-05-19T06:11:31.403+0000:added code formatting to description
davsclaus:1242686649:2009-05-19T06:44:09.139+0000:1242686649:2009-05-19T06:44:09.139+0000:trunk: 776198
1.x: 776202.

I also added this feature to be able to set the language as well.

So subject and language is not set on the xmpp message if provided in a Camel Message header with the key name. The type is converted to String.
davsclaus:1258775881:2009-11-21T11:58:01.379+0000:1258775881:2009-11-21T11:58:01.379+0000:Closing all 2.0M2 tickets"
0,CAMEL-1623,Task,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Claus Ibsen,0,0,2009-05-18 14:48:10+00:00,2009-11-21 11:58:01+00:00,"Willem camel-cxf uses some @deprecated classes in CXF.


Could you see if you can get this sorted? 


This class is @deprecated
import org.apache.cxf.binding.soap.interceptor.SoapActionOutInterceptor;","njiang:1243358229:2009-05-27T01:17:09.145+0000:1243358229:2009-05-27T01:17:09.145+0000:trunk 
http://svn.apache.org/viewvc?rev=777033&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.357+0000:1258775881:2009-11-21T11:58:01.357+0000:Closing all 2.0M2 tickets"
0,CAMEL-1622,Bug,Major,"1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,"1.6.2, 2.0-M2",Willem Jiang,Willem Jiang,0,0,2009-05-18 13:59:37+00:00,2009-11-21 11:58:01+00:00,"camel-osgi module doesn't support to lookup the fallback coverter from the active bundles.
And I got the user complain in the support forums
http://fusesource.com/forums/message.jspa?messageID=2787#2787","njiang:1242628102:2009-05-18T14:28:22.208+0000:1242628102:2009-05-18T14:28:22.208+0000:trunk
http://svn.apache.org/viewvc?rev=775959&view=rev
camel 1.x branch
http://svn.apache.org/viewvc?rev=775963&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.337+0000:1258775881:2009-11-21T11:58:01.337+0000:Closing all 2.0M2 tickets"
0,CAMEL-1621,Bug,Major,"2.0-M1, 1.6.1",2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-16 16:32:26+00:00,2009-11-21 11:58:01+00:00,The correlation expression is not easy to set from Spring DSL.,"davsclaus:1242468963:2009-05-16T18:16:03.903+0000:1242468963:2009-05-16T18:16:03.903+0000:trunk: 775503.
davsclaus:1258775881:2009-11-21T11:58:01.288+0000:1258775881:2009-11-21T11:58:01.288+0000:Closing all 2.0M2 tickets"
0,CAMEL-1620,Task,Minor,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Claus Ibsen,0,0,2009-05-16 16:04:08+00:00,2009-11-21 11:58:01+00:00,"Some of the different load balancer types was not unit tested.


And add a nicer DSL for providing your custom load balancer. The current DSL was a bit ugly with a setLoadBalance method in the fluent builder.","davsclaus:1242461130:2009-05-16T16:05:30.596+0000:1242461130:2009-05-16T16:05:30.596+0000:And LoadBalancerSupport should offer a method to go from endpoint uri to the processor that matches this endpoint.
davsclaus:1242468947:2009-05-16T18:15:47.002+0000:1242468947:2009-05-16T18:15:47.002+0000:trunk: 775503.
davsclaus:1242518189:2009-05-17T07:56:29.315+0000:1242518189:2009-05-17T07:56:29.315+0000:trunk: 775596.
davsclaus:1258775881:2009-11-21T11:58:01.260+0000:1258775881:2009-11-21T11:58:01.260+0000:Closing all 2.0M2 tickets"
0,CAMEL-1619,Task,Major,None,None,"
None
",Closed,Fixed,2.3.0,Hadrian Zbarcea,James Strachan,0,0,2009-05-15 10:01:42+00:00,2011-04-24 10:01:03+00:00,see http://camel.apache.org/maven/camel-core/apidocs/,"davsclaus:1244501326:2009-06-09T06:48:46.467+0000:1244501326:2009-06-09T06:48:46.467+0000:Also the XSD files is not updated as well.
jstrachan:1257229432:2009-11-03T14:23:52.633+0000:1257229432:2009-11-03T14:23:52.633+0000:still broken :)
davsclaus:1257230826:2009-11-03T14:47:06.581+0000:1257230826:2009-11-03T14:47:06.581+0000:Hadrian can you take a look I guess you have the karma to either delete the javadoc and/or upload new copies
davsclaus:1272517399:2010-04-29T13:03:19.450+0000:1272517399:2010-04-29T13:03:19.450+0000:In the mean time you can look at the FUSE Camel API javadoc which is actually based on Camel 2.2 release
http://fusesource.com/docs/router/2.2/apidoc/index.html
davsclaus:1273918434:2010-05-15T18:13:54.056+0000:1273918434:2010-05-15T18:13:54.056+0000:Hadrian have now updated the javadoc to 2.2.0 release.
davsclaus:1303610463:2011-04-24T10:01:03.222+0000:1303610463:2011-04-24T10:01:03.222+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1618,Bug,Major,"1.5.0, 1.6.0, 2.0-M1",None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-15 09:46:55+00:00,2009-11-21 11:58:01+00:00,"Here is the mail thread of it
[1] http://www.nabble.com/Non-registry-beans-td20088181.html","davsclaus:1242352473:2009-05-15T09:54:33.169+0000:1242352473:2009-05-15T09:54:33.169+0000:Its already there in BeanLanguage. 

But what is missing is a method in the BuilderSupport so you can use it with predicates.
davsclaus:1242352563:2009-05-15T09:56:03.909+0000:1242352563:2009-05-15T09:56:03.909+0000:What I also meant to say is that is *only* when doing predicates is missing.

In regular routing its there, eg if you do a .bean(MyClass.class) is there.
davsclaus:1242429693:2009-05-16T07:21:33.712+0000:1242429693:2009-05-16T07:21:33.712+0000:Willem

Sadly it breaks camel-spring in its SpringRouteBuilder.
You have to revert the change in 1.x as we need to keep the API stable.

On trunk we have the luxury of being able to change the API in SpringRouteBuilder so it does not conflict with camel-core.

In SpringRouteBuilder we also have a bean method for lookup in the spring registry. 
They are not the same

- one is for expression
- the other is for a lookup, so I am inclined to rename the methods in SpringRouteBuilder to {{lookup}} instead.
njiang:1242432499:2009-05-16T08:08:19.977+0000:1242432499:2009-05-16T08:08:19.977+0000:Claus,

My bad, I just ran the tests in camel-core :(.

How about just removing the DSL of Bean(Class BeanType) from the BuilderSupport in the camel 1.x?
In this way we don't need ot change the API of SpringRouteBuilder and can use bean expression without registry.

For the Camel trunk, I'd like to rename the lookup bean() method to lookupBean..

Willem

davsclaus:1242434851:2009-05-16T08:47:31.151+0000:1242434851:2009-05-16T08:47:31.151+0000:I am renaming the {{bean}} method in SpringRouuteBuilder to {{lookup}} to avoid the clash. And the bean method is actually a lookup so its a better suited name anyway.
njiang:1242438059:2009-05-16T09:40:59.491+0000:1242438059:2009-05-16T09:40:59.491+0000:@Claus,
Thanks for looking this compile error.
I will take care of camel-1.x , now I removed the bean(Class beanType) from  BuilderSupport  in camel-1.x branch and am running the test.
davsclaus:1242449875:2009-05-16T12:57:55.174+0000:1242449875:2009-05-16T12:57:55.174+0000:Fixed the problem on trunk: 775458.
njiang:1242451504:2009-05-16T13:25:04.650+0000:1242451504:2009-05-16T13:25:04.650+0000:Reverted the change of camel-1.x.

trunk
http://svn.apache.org/viewvc?rev=775123&view=rev
http://svn.apache.org/viewvc?rev=775155&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.228+0000:1258775881:2009-11-21T11:58:01.228+0000:Closing all 2.0M2 tickets"
0,CAMEL-1617,Improvement,Major,2.0-M1,None,"
None
",Closed,Fixed,2.0-M2,Willem Jiang,Willem Jiang,0,0,2009-05-15 06:59:57+00:00,2009-11-21 11:58:01+00:00,"Here is the mail thread[1] which discusses about it.
[1] http://www.nabble.com/Setting-the-HeaderFilterStrategy-on-the-component-to23533790.html","davsclaus:1242350060:2009-05-15T09:14:20.905+0000:1242350060:2009-05-15T09:14:20.905+0000:Willem *do not* change 1.x. 

1.6.x is for bug fixes only. People using Camel 1.6.x should rely that is stable and that we only fix important bugs.
So I change the fix to 2.0 only
njiang:1242352264:2009-05-15T09:51:04.445+0000:1242352264:2009-05-15T09:51:04.445+0000:Got it,  fortunately I didn't touch the code of camel 1.x :)

njiang:1243358029:2009-05-27T01:13:49.014+0000:1243358029:2009-05-27T01:13:49.014+0000:trunk
http://svn.apache.org/viewvc?rev=775588&view=rev
http://svn.apache.org/viewvc?rev=775599&view=rev
http://svn.apache.org/viewvc?rev=775808&view=rev

Changed the components which are listed below
camel-cxf, camel-http, camel-jetty, camel-jhc, camel-mail, camel-restlet
davsclaus:1258775881:2009-11-21T11:58:01.163+0000:1258775881:2009-11-21T11:58:01.163+0000:Closing all 2.0M2 tickets"
0,CAMEL-1616,New Feature,Major,2.0-M1,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,0,1,2009-05-14 11:28:01+00:00,2017-02-28 12:34:58+00:00,"Camel have quiet a number of annotations. But we should consider adding more power to them for POJO routing.


This is just a ticket to remember and for starting a discussion what is needed



Add more @annotations for some of the EIP patterns
Add some @annotations for async routing
Add some @annotations for onCompletion callbacks



And what else","eduardoraupp:1468064820:2016-07-09T19:47:00.016+0000:1468064820:2016-07-09T19:47:00.016+0000:Could you explain me a little bit more about that?
"
0,CAMEL-1615,Bug,Major,2.0-M1,2.0-M2,"
None
",Closed,Fixed,2.0-M2,Claus Ibsen,Maciej Prochniak,0,0,2009-05-14 10:48:29+00:00,2009-11-21 11:58:01+00:00,CamelExchangeException implements Serializable (as inheriting from Exception) but has not transient field Exchange.,"davsclaus:1242458703:2009-05-16T15:25:03.172+0000:1242458703:2009-05-16T15:25:03.172+0000:trunk: 775486.
davsclaus:1258775881:2009-11-21T11:58:01.129+0000:1258775881:2009-11-21T11:58:01.129+0000:Closing all 2.0M2 tickets"
0,CAMEL-1614,Bug,Major,"1.6.0, 2.0-M1","1.6.2, 2.0-M2","
None
",Closed,Fixed,"1.6.2, 2.0-M2",Claus Ibsen,Frank Schwarz,0,0,2009-05-14 07:11:59+00:00,2009-11-21 11:58:01+00:00,see: http://www.nabble.com/Disabling-JMSReplyTo-as-this-Exchange-is-not-OUT-capable-td23524909s22882.html,"davsclaus:1242261866:2009-05-14T08:44:26.953+0000:1242261866:2009-05-14T08:44:26.953+0000:trunk: 774678
1.x: 774687


Frank feel free to test the fix
davsclaus:1258775881:2009-11-21T11:58:01.107+0000:1258775881:2009-11-21T11:58:01.107+0000:Closing all 2.0M2 tickets"
0,CAMEL-1613,New Feature,Major,2.0-M2,,"
None
",Closed,Won't Fix,None,Unassigned,Bruno Borges,0,0,2009-05-14 06:11:24+00:00,2011-04-24 10:00:56+00:00,"It's common to code a ""CamelStartup"" class to call through maven-camel-plugin or directly from the IDE.


But now all threads inside CamelContext are daemon, causing the VM to shutdown right after the main() method is called, even if the Context is still starting.


The Main class from camel-spring should have a version on camel-core for projects not Spring-related.


The Maven plugin should then check the configured class to see if it is Spring based (org.apache.camel.spring.Main) or a standalone application (org.apache.camel.server.CamelServer).


         <plugin>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-maven-plugin</artifactId>
            <configuration>
               <mainClass>org.apache.camel.twitter.demo.CamelStartup</mainClass>
            </configuration>
         </plugin>


public class CamelStartup {
  public static void main(String[] args) 

{
     CamelServer server = new CamelServer();
     server.addContext(new MyContext());
     server.start();
  }

}","davsclaus:1242455605:2009-05-16T14:33:25.907+0000:1242455605:2009-05-16T14:33:25.907+0000:Bruno there is an abstract MainSupport class in camel-core in the util package. It might just need a tiny work to be useable.


davsclaus:1303610456:2011-04-24T10:00:56.740+0000:1303610456:2011-04-24T10:00:56.740+0000:Closing all resolved tickets from 2010 or older"
0,CAMEL-1612,Bug,Major,2.0-M1,2.1.0,"
None
",Closed,Fixed,2.1.0,Claus Ibsen,Siegfried Wirth,0,0,2009-05-13 16:30:55+00:00,2010-02-07 09:55:22+00:00,"When defining routes in two camel contexts the endpoints are not correctly assigned to the contexts. The bug can easily be observed by using jconsole / jmx. For one camel context the endpoints are not registered.


From debugging up to InstrumentationLifecycleStrategy#onEndpointAdd(Endpoint) it looks like the order of starting contexts and registering endpoints is wrong. (Camel tries to add endpoints with this method to one context before (initialized) and so the endpoints are not really added. It looks like the reason for this is in the order of initializing contexts and routes/endpoints.)


See also discussion http://www.nabble.com/Two-camel-contexts-and-assinging-endpoints-(visible-by-jconsole%2C-jmx)-td23520282.html.","siegfriedwirth:1242203861:2009-05-13T16:37:41.551+0000:1242203861:2009-05-13T16:37:41.551+0000:Added a simple example demonstrating the issue. Use the attached applicationContext.xml as configuration for camel and start a jconsole. (To see the route working create a file /tmp/file1.txt which will be renamed to file2.txt by one route and named back to file1.txt by the other route.)

Using jconsole the result looks like shown in jconsoletwocontexts.png: You can observe that the endpoints for one context are not assigned to the correct context.

Further investigation does indicate it is not a problem with the jmx support, but with the order of creating, starting and initializing contexts and endpoint.
davsclaus:1242457033:2009-05-16T14:57:13.186+0000:1242457033:2009-05-16T14:57:13.186+0000:JMX is planned for a rewrite/overhaul in Camel 2.1
davsclaus:1252879187:2009-09-14T05:59:47.450+0000:1252879187:2009-09-14T05:59:47.450+0000:trunk: 814483.
siegfriedwirth:1252879392:2009-09-14T06:03:12.310+0000:1253576602:2009-09-22T07:43:22.132+0000:(was automatic out of office reply)"
0,CAMEL-1611,Bug,Major,1.6.0,1.6.1,"
None
",Closed,Fixed,1.6.1,Willem Jiang,Ethan Aubin,0,0,2009-05-13 14:40:29+00:00,2010-02-07 09:55:22+00:00,"The IOConverter unit test fails with


-------------------------------------------------------------------------------
Test set: org.apache.camel.converter.IOConverterTest
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.102 sec <<< FAILURE!
testToBytes(org.apache.camel.converter.IOConverterTest)  Time elapsed: 0.003 sec  <<< FAILURE!
junit.framework.AssertionFailedError: expected:<!> but was:<
>
	at junit.framework.Assert.fail(Assert.java:47)
	at junit.framework.Assert.failNotEquals(Assert.java:280)
	at junit.framework.Assert.assertEquals(Assert.java:64)
	at junit.framework.Assert.assertEquals(Assert.java:172)
	at junit.framework.Assert.assertEquals(Assert.java:178)
	at org.apache.camel.converter.IOConverterTest.testToBytes(IOConverterTest.java:40)",davsclaus:1242337171:2009-05-15T05:39:31.467+0000:1242337171:2009-05-15T05:39:31.467+0000:Willem Jiang already fixed this.
0,CAMEL-1610,Bug,Major,1.6.0,,"
None
",Closed,Not A Problem,None,Claus Ibsen,Ethan Aubin,0,0,2009-05-13 14:34:13+00:00,2010-02-07 09:55:22+00:00,"Hi,


I've a client that should connect to mina and will push over messages and excepts no response.  I think I should be using something like the following unit test which fails raising an exception (stacktrace at end of bug report). I'm not clear if this is a mina or camel problem.


    public void testTcpReceipt() throws Exception {
        CamelContext context = new DefaultCamelContext();


        final Endpoint inEndpoint = context.getEndpoint(""mina:tcp://127.0.0.1:15001?sync=false"");


        context.addRoutes(
            new RouteBuilder() {
                @Override
                public void configure() {
                    from(inEndpoint).
                    process(new Processor() {
                        public void process(Exchange exchange) throws Exception 

{
                            System.out.println(""exchange.getOut().getBody(): "" + exchange.getOut().getBody());                            
                        }

                    }).
                    to(""log:loggingCategoryFoo?level=INFO"");
                }
            });
        context.start();    


        Socket socket = new Socket();
        socket.connect(new InetSocketAddress(""127.0.0.1"", 15001));
        PrintWriter writer = new PrintWriter(socket.getOutputStream());
        writer.write(""Hello\nApache\nCamel\n"");
        writer.flush();
        Thread.sleep(1000);
        socket.close();
        context.stop();
    }


38 [AnonymousIoService-2] WARN org.apache.camel.component.mina.MinaConsumer$ReceiveHandler - [/127.0.0.1:51182] Unexpected exception from exceptionCaught handler.
org.apache.camel.CamelException: org.apache.mina.filter.codec.ProtocolDecoderException: org.apache.mina.common.BufferDataException: dataLength: 1214606444 (Hexdump: 48 65 6C 6C 6F 0A 41 70 61 63 68 65 0A 43 61 6D 65 6C 0A)
	at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.exceptionCaught(MinaConsumer.java:88)
	at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.exceptionCaught(AbstractIoFilterChain.java:564)
	at org.apache.mina.common.support.AbstractIoFilterChain.callNextExceptionCaught(AbstractIoFilterChain.java:345)
	at org.apache.mina.common.support.AbstractIoFilterChain.access$1000(AbstractIoFilterChain.java:53)
	at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.exceptionCaught(AbstractIoFilterChain.java:643)
	at org.apache.mina.common.IoFilterAdapter.exceptionCaught(IoFilterAdapter.java:75)
	at org.apache.mina.common.support.AbstractIoFilterChain.callNextExceptionCaught(AbstractIoFilterChain.java:345)
	at org.apache.mina.common.support.AbstractIoFilterChain.access$1000(AbstractIoFilterChain.java:53)
	at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.exceptionCaught(AbstractIoFilterChain.java:643)
	at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:224)
	at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)
	at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)
	at java.lang.Thread.run(Thread.java:637)
Caused by: org.apache.mina.filter.codec.ProtocolDecoderException: org.apache.mina.common.BufferDataException: dataLength: 1214606444 (Hexdump: 48 65 6C 6C 6F 0A 41 70 61 63 68 65 0A 43 61 6D 65 6C 0A)
	at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:165)
	at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)
	at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)
	at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)
	at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)
	... 5 more
Caused by: org.apache.mina.common.BufferDataException: dataLength: 1214606444
	at org.apache.mina.common.ByteBuffer.prefixedDataAvailable(ByteBuffer.java:1631)
	at org.apache.mina.filter.codec.serialization.ObjectSerializationDecoder.doDecode(ObjectSerializationDecoder.java:88)
	at org.apache.mina.filter.codec.CumulativeProtocolDecoder.decode(CumulativeProtocolDecoder.java:133)
	at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:158)
	... 9 more
May 13, 2009 10:15:13 AM org.apache.camel.component.mina.MinaConsumer doStop","davsclaus:1242196820:2009-05-13T14:40:20.103+0000:1242196820:2009-05-13T14:40:20.103+0000:If you send text data (eg like String) then you must use the the textline protocol.

eg add textline=true to your MINA URI
eaubin:1242197515:2009-05-13T14:51:55.221+0000:1242197515:2009-05-13T14:51:55.221+0000:Thats good to know. Though, using the endpoint ""mina:tcp://127.0.0.1:15001?textline=true?sync=false"" I still get the exception. 
davsclaus:1242197703:2009-05-13T14:55:03.571+0000:1242197703:2009-05-13T14:55:03.571+0000:It should be & to separate the URI parameters. You have 2 times ?
eaubin:1242198533:2009-05-13T15:08:53.238+0000:1242198533:2009-05-13T15:08:53.238+0000:Ahh, my mistake. That's exactly what it was.  Perhaps an exception
should be thrown if the URI is ill-formed. Cheers - EA


davsclaus:1242251004:2009-05-14T05:43:24.596+0000:1242251004:2009-05-14T05:43:24.596+0000:Ethan, we have discussed if we should validate for double ? marks in URI.

But according to the URI spec its legal to have multiple ? marks as the 2nd ? can be part of the value of the option. Yeah I think its a bad design, as its much more common to make the mistake you did than really want an option value with a ? in the text.

davsclaus:1242251035:2009-05-14T05:43:55.358+0000:1242251035:2009-05-14T05:43:55.358+0000:Not a bug."
0,CAMEL-1609,Bug,Major,"1.6.0, 2.0-M1","1.6.1, 2.0-M2","
None
",Closed,Fixed,"1.6.1, 2.0-M2",Willem Jiang,Frank V. Castellucci,0,0,2009-05-13 11:47:13+00:00,2009-11-21 11:58:01+00:00,"I use the following route:


		final	String	spurl = protocols.get(0).getEpUrl();
			cc.addRoutes(new RouteBuilder()
			{
				public	void	configure()

				{
					from(""direct:say"")
					.setHeader(HttpConstants.HTTP_CONTENT_TYPE, 
							constant(""application/octet-stream""))
					.to(spurl);
				}

			});


where ""spurl"" is the servlet URL endpoint. The messages are being sent to the servlet, but the content type in the ""doPost(...)"" is null.","davsclaus:1242190497:2009-05-13T12:54:57.499+0000:1242190497:2009-05-13T12:54:57.499+0000:This bug should also exist in Camel 1.6.0. It has been reported in FUSE MR 1.6.0.

Willem is looking into it.
davsclaus:1242190552:2009-05-13T12:55:52.507+0000:1242190552:2009-05-13T12:55:52.507+0000:BTW a workaround is creating your own http header filter stategy and define it on the http component.

See the camel http wiki page, the advanced section how to overload the http component and configure it in Spring XML (for instance)
njiang:1242198861:2009-05-13T15:14:21.702+0000:1242198861:2009-05-13T15:14:21.702+0000:trunk
 http://svn.apache.org/viewvc?rev=774383&view=rev
camel-1.x
 http://svn.apache.org/viewvc?rev=774394&view=rev
njiang:1242261733:2009-05-14T08:42:13.895+0000:1242261733:2009-05-14T08:42:13.895+0000:Did some enhancement
trunk
http://svn.apache.org/viewvc?rev=774658&view=rev
camel-1.x  (camel 1.6.2)
http://svn.apache.org/viewvc?rev=774672&view=rev
davsclaus:1258775881:2009-11-21T11:58:01.058+0000:1258775881:2009-11-21T11:58:01.058+0000:Closing all 2.0M2 tickets"
