,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-8883,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-18 06:44:04+00:00,2015-06-18 15:42:07+00:00,ContainsKey and containsValue can be useful also in MultiMap and ReplicatedMap producer.,
0,CAMEL-8882,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-18 06:39:36+00:00,2015-06-18 15:42:22+00:00,"The AWS SDK RunInstanceRequest has a lot of options. We can add these options to make the EC2 producer message more customizable. For example:



We can add an header related to client token to get an idempotent request
We can add an header related to key pair to specify a key pair to use
We can add an header to specify a Placement for the instance and so on",
0,CAMEL-8881,Bug,Major,2.15.2,,"
None
",Resolved,Duplicate,None,Unassigned,Agostinho Pires,0,1,2015-06-17 15:57:42+00:00,2015-06-23 17:15:13+00:00,"I was wondering if the current Camel-salesforce component is able to deal with the current Salesforce developer edition summer 15 (Api version 34) because I'm getting the below 
error when trying to generate the DTO objects... it seems that some object's field cause problems.


-----Stack -----


[INFO] Salesforce login...
[INFO] Login user xxx.xxxxx.xxxx@xxxxxx.xx at Salesforce url: https://login.salesforce.com/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[WARNING] Generating Java classes for all 275 Objects, this may take a while...
[INFO] Retrieving Object descriptions...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.888 s
[INFO] Finished at: 2015-06-17T17:49:57+01:00
[INFO] Final Memory: 18M/183M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.15.2:generate (default-cli) on project test-camel: Error getting SObject description for 'AcceptedEventRelation': Unrecognized field ""encrypted"" (Class org.apache.camel.component.salesforce.api.dto.SObjectField), not marked as ignorable
[ERROR] at [Source: java.io.ByteArrayInputStream@36021b3a; line: 1, column: 593] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""encrypted""])
[ERROR] -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.15.2:generate (default-cli) on project test-camel: Error getting SObject description for 'AcceptedEventRelation': Unrecognized field ""encrypted"" (Class org.apache.camel.component.salesforce.api.dto.SObjectField), not marked as ignorable
 at [Source: java.io.ByteArrayInputStream@36021b3a; line: 1, column: 593] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""encrypted""])
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error getting SObject description for 'AcceptedEventRelation': Unrecognized field ""encrypted"" (Class org.apache.camel.component.salesforce.api.dto.SObjectField), not marked as ignorable
 at [Source: java.io.ByteArrayInputStream@36021b3a; line: 1, column: 593] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""encrypted""])
	at org.apache.camel.maven.CamelSalesforceMojo.execute(CamelSalesforceMojo.java:312)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	... 19 more
Caused by: org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field ""encrypted"" (Class org.apache.camel.component.salesforce.api.dto.SObjectField), not marked as ignorable
 at [Source: java.io.ByteArrayInputStream@36021b3a; line: 1, column: 593] (through reference chain: org.apache.camel.component.salesforce.api.dto.SObjectDescription[""fields""]->org.apache.camel.component.salesforce.api.dto.SObjectField[""encrypted""])
	at org.codehaus.jackson.map.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:53)
	at org.codehaus.jackson.map.deser.StdDeserializationContext.unknownFieldException(StdDeserializationContext.java:267)
	at org.codehaus.jackson.map.deser.std.StdDeserializer.reportUnknownProperty(StdDeserializer.java:673)
	at org.codehaus.jackson.map.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:659)
	at org.codehaus.jackson.map.deser.BeanDeserializer.handleUnknownProperty(BeanDeserializer.java:1365)
	at org.codehaus.jackson.map.deser.BeanDeserializer._handleUnknown(BeanDeserializer.java:725)
	at org.codehaus.jackson.map.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:703)
	at org.codehaus.jackson.map.deser.BeanDeserializer.deserialize(BeanDeserializer.java:580)
	at org.codehaus.jackson.map.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:217)
	at org.codehaus.jackson.map.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:194)
	at org.codehaus.jackson.map.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:30)
	at org.codehaus.jackson.map.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:299)
	at org.codehaus.jackson.map.deser.SettableBeanProperty$MethodProperty.deserializeAndSet(SettableBeanProperty.java:414)
	at org.codehaus.jackson.map.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:697)
	at org.codehaus.jackson.map.deser.BeanDeserializer.deserialize(BeanDeserializer.java:580)
	at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2732)
	at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1909)
	at org.apache.camel.maven.CamelSalesforceMojo.execute(CamelSalesforceMojo.java:309)
	... 21 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException",
0,CAMEL-8880,New Feature,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,stephen hartley,0,4,2015-06-17 13:41:42+00:00,2015-08-07 13:07:51+00:00,"It would be very helpful to me if the Camel API (Spring and Java) had the ability to expose the JMX service either using the host name or using IP address. At present release no option is given and the host name is always used.


This would mean a change to the logic in org.apache.camel.management.DefaultManagementAgent for determining JMX hostname in 



protected void createMBeanServer()



 method:



if (canAccessSystemProps) {
   try {
      hostName = InetAddress.getLocalHost().getHostName();
   } catch (UnknownHostException uhe) {
      LOG.info(""Cannot determine localhost name. Using default: "" +
         DEFAULT_REGISTRY_PORT, uhe);
      hostName = DEFAULT_HOST;
   }
} else {
   hostName = DEFAULT_HOST;
}



If the API passed down a request to use the IP then InetAddress.getLocalHost().getHostAddress() should be called rather than InetAddress.getLocalHost().getHostName().


The reason for wanting this is that my host has an underscore _ character in its name.  A java.net.MalformedURLException: Bad URL path: exception is (correctly) thrown by javax.management.remote.JMXServiceURL when the looked up name is used to form the URL for the JMX service.  


I know this is not a valid host name according to the various RFCs, but I have been unable to convince network administrators to change the host name.  If I used the IP instead then validation would pass and the JMX service would be correctly exposed.  


I would find it very helpful if the Camel API could expose an option to use JMX with host IP address as well as for the host name.


I would like to be able to configure something like this:



<jmxAgent id=""camelJmxAgent"" createConnector=""true""
   registryPort=""{{jmx.registry.port:1099}}"" useIpAddress=""true""  />



Thanks!","davsclaus:1435051024:2015-06-23T17:17:04.490+0000:1435051024:2015-06-23T17:17:04.490+0000:Good idea, contributions is welcome to work on a patch with this functionality
http://camel.apache.org/support
mnki:1435086958:2015-06-24T03:15:58.776+0000:1435086958:2015-06-24T03:15:58.776+0000:I would like to work on this issue.
davsclaus:1435746314:2015-07-01T18:25:14.753+0000:1435746314:2015-07-01T18:25:14.753+0000:Thanks Mohan, how are you doing? Did you start on this.
mnki:1438282208:2015-07-31T02:50:08.031+0000:1438282229:2015-07-31T02:50:29.969+0000:Yes.Got little delayed.
Planning to wrap up in a week.
githubbot:1438676003:2015-08-04T16:13:23.147+0000:1438676003:2015-08-04T16:13:23.147+0000:GitHub user mnki opened a pull request:

    https://github.com/apache/camel/pull/584

    CAMEL-8880 :Enable ability to expose Camel JMX service using IP address via API

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mnki/camel expose_JMX_using_IPAddress

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/584.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #584
    
----
commit 0f0396bb96c2d0a97d623807efb733080399f8bb
Author: Yamini Sadu <ysadu@tdktech.com>
Date:   2015-08-04T16:07:36Z

    Add Host IP Address to JMX properties

----

davsclaus:1438732291:2015-08-05T07:51:31.175+0000:1438732291:2015-08-05T07:51:31.175+0000:Thanks for the PR
githubbot:1438924071:2015-08-07T13:07:51.551+0000:1438924071:2015-08-07T13:07:51.551+0000:Github user mnki closed the pull request at:

    https://github.com/apache/camel/pull/584
"
0,CAMEL-8879,Improvement,Major,2.15.2,2.17.0,"
None
",Resolved,Won't Fix,2.17.0,Claus Ibsen,Jimmy Selgen Nielsen,0,2,2015-06-17 12:56:35+00:00,2016-02-21 10:19:02+00:00,"The Camel-sjms component doesn't treat messages being sent to the InOnlyProducer equally to the ones sent to the InOutProducer.


As far as i can tell, the InOnlyProducer handles messages the correct way, by splitting up the ArrayList<BatchMessage<...>> into individual messages, which it then sends. The InOutProducer just calls ""JmsMessageHelper.createMessage"" with the ArrayList<BatchMessage<...>> payload.


When used with WebSphere MQ, the InOutProducer causes an exception:
JMSCC0083: An incorrect object of type 'org.apache.camel.component.sjms.BatchMessage' was provided.","jinie:1443587190:2015-09-30T12:26:30.031+0000:1443587190:2015-09-30T12:26:30.031+0000:I wrote a patch a few months ago for this issue, and we've been testing it internally. It seems to work.
davsclaus:1443826838:2015-10-03T07:00:38.230+0000:1443826838:2015-10-03T07:00:38.230+0000:Would you be able to attach an unit test also?
davsclaus:1456021142:2016-02-21T10:19:02.233+0000:1456021142:2016-02-21T10:19:02.233+0000:We are in fact deprecating this batch message. And have marked in the javadoc that its only available for in only."
0,CAMEL-8878,Sub-task,Minor,2.15.2,,"
None
",Resolved,Abandoned,None,Unassigned,Hieu Nguyen,0,2,2015-06-16 13:41:56+00:00,2019-07-31 09:15:21+00:00,"I'm camel-rabbitmq component as as rabbitmq consumer. The consumer is consuming message from a default exchange """" with a routing key. When I started up the app, I got the exception ""Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint"". 
The camel version I'm using is 2.15.2.","davsclaus:1435051101:2015-06-23T17:18:21.029+0000:1435051101:2015-06-23T17:18:21.029+0000:Can you provide more details such as the route and configuration you have setup etc.
splazit:1435052945:2015-06-23T17:49:05.738+0000:1435052945:2015-06-23T17:49:05.738+0000:It is something like the following:
 
<camel:route id=""convertWebserviceModelToHibernateModelRoute"" streamCache=""true"">
      <camel:from
        uri=""rabbitmq://{{amqp.uri}}/?vhost=coc&amp;declare=true&amp;connectionTimeout=2000&amp;requestedHeartbeat=120&amp;automaticRecoveryEnabled=true&amp;username=guest&amp;password=guest&amp;queue=myqueue&amp;routingKey=myqueue&amp;exchangeType=direct&amp;autoDelete=false"" />
....
</camel:route>
davsclaus:1564535721:2019-07-31T09:15:21.141+0000:1564535721:2019-07-31T09:15:21.141+0000:Closing old ticket"
0,CAMEL-8877,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-16 09:04:34+00:00,2015-06-16 15:39:29+00:00,The containsKey operation and containsValue operation can be useful in the Hazelcast map producer.,"acosentino:1434440369:2015-06-16T15:39:29.170+0000:1434440369:2015-06-16T15:39:29.170+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/a7eb8b17"
0,CAMEL-8876,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Willem Jiang,0,3,2015-06-16 02:46:16+00:00,2015-11-06 16:40:00+00:00,"Sometime the user just want to check the response code and don't want to read the response, we can enable this kind of feature with the option ""ignoreRequestBody"".","davsclaus:1434408829:2015-06-16T06:53:49.269+0000:1434408829:2015-06-16T06:53:49.269+0000:I assume the option should be named more like ignoreResponseBody. 

Mind that we have many HTTP components so likely also a good idea to add to the others as well.
njiang:1434437941:2015-06-16T14:59:01.331+0000:1434437941:2015-06-16T14:59:01.331+0000:Hi Claus,  
You are right, the option should be ignoreResponseBody instead of ignoreRequestBody.
davsclaus:1441590316:2015-09-07T09:45:16.745+0000:1441590316:2015-09-07T09:45:16.745+0000:Willem what is the status of this ticket?
ralfsteppacher:1446799200:2015-11-06T16:40:00.275+0000:1446799200:2015-11-06T16:40:00.275+0000:Could this be further enhanced to place the uncached response input stream in the exchange instead of discarding the response? Essentially implementing CAMEL-7638?"
0,CAMEL-8875,Bug,Major,2.14.0,None,"
None
",Closed,Invalid,None,Unassigned,Nayana Devanandan,0,3,2015-06-15 20:51:06+00:00,2015-06-16 06:52:35+00:00,"I have a single jetty server and I keep getting the below in logs.


WARN org.apache.camel.component.file.strategy.FileChangedExclusiveReadLockStrategy - Cannot acquire read lock within 5000 millis. Will skip the file: GenericFile


List of maven dependencies in the project 
<!-- Camel Dependencies -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
			<version>2.14.0</version>
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring</artifactId>
			<version>2.14.0</version>
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-stream</artifactId>
			<version>2.14.0</version>
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-cxf</artifactId>
			<version>2.14.0</version>  <!-- use the same version as your Camel core version -->
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http4</artifactId>
			<version>2.14.0</version>
			<!-- use the same version as your Camel core version -->
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-zipfile</artifactId>
			<version>2.12.2</version>
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-csv</artifactId>
			<version>2.12.2</version>
		</dependency>


		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-metrics</artifactId>
			<version>2.14.0</version>
		</dependency>


		<dependency>
			<groupId>org.apache-extras.camel-extra</groupId>
			<artifactId>camel-jcifs</artifactId>
			<version>2.13.3</version>
			<!-- use the same version as your Camel core version -->
		</dependency>","njiang:1434393317:2015-06-16T02:35:17.721+0000:1434393317:2015-06-16T02:35:17.721+0000:Please use the mailing list to discuss the issue first.
You doesn't show us the camel route and you should use the same version of camel components.
davsclaus:1434408747:2015-06-16T06:52:27.386+0000:1434408747:2015-06-16T06:52:27.386+0000:Use the user forum / mailing list first to get help as instructed
http://camel.apache.org/support

You can find the user forum here
http://camel.apache.org/discussion-forums.html

And the mailing lists is at
http://camel.apache.org/mailing-lists.html"
0,CAMEL-8874,Bug,Minor,"2.15.0, 2.15.1, 2.15.2","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-06-15 14:49:42+00:00,2015-06-15 15:13:14+00:00,"The camel-test-blueprint dependency scope should be test, otherwise bundle plugin could import the packages of pojosr framework.",njiang:1434352073:2015-06-15T15:07:53.506+0000:1434352073:2015-06-15T15:07:53.506+0000:Applied the patch into camel master and camel-2.15.x branch.
0,CAMEL-8873,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-06-15 11:18:33+00:00,2015-07-29 12:57:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/DeadLetterQueue-Access-the-object-before-shutDown-tp5768069p5768244.html


We could expose some more stats on ManagedErrorHandlerMBean to include details about number of pending exchanges for redelivery, and a tabular list with  the list of exchanges etc.


Currently end users can get some details from the inflight repo but that is generic. You may want to pin down on exchanges pending for redelivery in the error handlers.",davsclaus:1438145865:2015-07-29T12:57:45.030+0000:1438145865:2015-07-29T12:57:45.030+0000:We have a attribute with the number of pending exchanges for redelivery
0,CAMEL-8872,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-15 10:30:04+00:00,2015-06-15 15:35:20+00:00,"There are some new operations supported by Hazelcast IAtomicLong that can be added to HazelcastAtomicNumber producer. These operations are:



compareAndSet
getAndAdd","acosentino:1434353720:2015-06-15T15:35:20.261+0000:1434353720:2015-06-15T15:35:20.261+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/68c62b68
http://git-wip-us.apache.org/repos/asf/camel/commit/11883ff7
http://git-wip-us.apache.org/repos/asf/camel/commit/75745c5a"
0,CAMEL-8871,Bug,Minor,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Hans Orbaan,0,2,2015-06-15 08:19:29+00:00,2015-06-15 09:31:41+00:00,"When an exception is thrown from a transform method I lose the content of the message body. This behaviour is unexpected because it does not happen when an exception is thrown from a bean call.


.bean(ErrorBean.class, ErrorBean.METHOD)
Vs.
.transform().method(ErrorBean.class, ErrorBean.METHOD)


I have a testcase that I will try to get attached but here are the routes:



if (""testTransformExceptionToErrorRoute"".equals(getTestMethodName())) {
                    from(START)
                    .routeId(""exception.test.transform"")
                    .transform().method(ErrorBean.class, ErrorBean.METHOD)
                    .to(END);
                } else {
                    from(START)
                    .routeId(""exception.test.bean"")
                    .bean(ErrorBean.class, ErrorBean.METHOD)
                    .to(END);
                }

    public static class ErrorBean {
        private static final String METHOD = ""throwException"";
        public static void throwException(Exchange exchange) {
            String body = exchange.getIn().getBody(String.class);
            Assertions.assertThat(body).isEqualTo(BODY);
            throw new NullPointerException();
        }
    }","HansO:1434327820:2015-06-15T08:23:40.677+0000:1434327820:2015-06-15T08:23:40.677+0000:CamelTestSupport test that shows the difference between exception from different calls. I would expect both tests to succeed and both methods to show the same exception behavior.
davsclaus:1434327847:2015-06-15T08:24:07.080+0000:1434327847:2015-06-15T08:24:07.080+0000:Use bean as workaround
davsclaus:1434329511:2015-06-15T08:51:51.861+0000:1434329511:2015-06-15T08:51:51.861+0000:The same problem is potential in setBody / setHeader. Fixing a few others as well.
davsclaus:1434331901:2015-06-15T09:31:41.625+0000:1434331901:2015-06-15T09:31:41.625+0000:Thanks for reporting and the test case"
0,CAMEL-8870,Improvement,Minor,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrew Block,0,3,2015-06-14 18:22:56+00:00,2015-06-17 00:28:58+00:00,The archteype currently generates a project where the version is required to be entered when accessing the deployed application. Removing the requirement of specifying the version.,"githubbot:1434277748:2015-06-14T18:29:08.679+0000:1434277748:2015-06-14T18:29:08.679+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/545

    CAMEL-8870 Remove version from URL in archetype web project

    Removed the requirement for specifying the version when accessing the deployed application generated by the archetype

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8870

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/545.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #545
    
----
commit af6f0996da291413b4e13b56b88b3123356604b8
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-06-14T18:28:04Z

    CAMEL-8870 Remove version from URL in archetype web project

----

davsclaus:1434337984:2015-06-15T11:13:04.986+0000:1434337984:2015-06-15T11:13:04.986+0000:Thanks for the PR
githubbot:1434472138:2015-06-17T00:28:58.039+0000:1434472138:2015-06-17T00:28:58.039+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/545
"
0,CAMEL-8869,Test,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-14 13:31:12+00:00,2015-06-14 22:01:29+00:00,"While I was trying to switch LightCouch from version 1.6 to 1.8 I have to upgrade httpClient from 4.3.x to 4.4.x to make LightCouch feature works.


This upgrade, however, break the tests. The LocalTestServer originally used in the camel-http4 component, doesn't exist anymore from 4.4.x as this mail reports: http://mail-archives.apache.org/mod_mbox/hc-httpclient-users/201504.mbox/%3C1429533016.21609.7.camel@apache.org%3E


I will work on camel-http4 tests refactoring.","acosentino:1434290489:2015-06-14T22:01:29.771+0000:1434290489:2015-06-14T22:01:29.771+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/2da8f198
http://git-wip-us.apache.org/repos/asf/camel/commit/82526729"
0,CAMEL-8868,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-14 11:29:44+00:00,2015-06-14 11:44:56+00:00,When using Hazelcast queue it can be useful to support the remaining capacity method inside the queue producer.,"acosentino:1434253496:2015-06-14T11:44:56.280+0000:1434253496:2015-06-14T11:44:56.280+0000:Related commits:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=a8f71ae32366087d6e8e5cdc559eaa9d04cec786
https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=2acb2a05fd6ff2d0ee8aca1d09a18d3b67d0b684"
0,CAMEL-8867,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-14 09:51:48+00:00,2015-07-13 15:31:58+00:00,"We need to upgrade the GAE bundle version to 1.9.23 when servicemix-bundle release will be done.


Just a reminder.",
0,CAMEL-8866,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-14 09:27:06+00:00,2015-06-19 20:41:27+00:00,"We need to upgrade the olingo bundle version to 2.0.4 when servicemix-bundle release will be done.


Just a reminder.","acosentino:1434717687:2015-06-19T20:41:27.088+0000:1434717687:2015-06-19T20:41:27.088+0000:Related commit

http://git-wip-us.apache.org/repos/asf/camel/commit/5a4f6e16"
0,CAMEL-8865,Improvement,Major,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrew Block,0,3,2015-06-14 04:09:57+00:00,2015-06-14 18:37:12+00:00,"Currently, several of the web based examples require the build version in the URL. To simplify the documentation and to align all web examples, all example projects should be invoked without requiring the use of a version number","githubbot:1434228226:2015-06-14T04:43:46.345+0000:1434228226:2015-06-14T04:43:46.345+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/544

    CAMEL-8865 Removal of version from url in web based examples

    Removal of version in url in web based examples and updated system property reference in tomcat examples

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8865

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/544.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #544
    
----
commit 855295b135599627a89cf8e5b7ed726817ad9cdf
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-06-14T04:39:14Z

    CAMEL-8865 Removal of version from url in web based examples

----

davsclaus:1434236108:2015-06-14T06:55:08.567+0000:1434236108:2015-06-14T06:55:08.567+0000:Thanks Andrew.

Do you mind doing the same for the camel-archetype-web - its in tooling maven somewhere.
sabre1041:1434278045:2015-06-14T18:34:05.883+0000:1434278045:2015-06-14T18:34:05.883+0000:CAMEL-8870 created to track the enhancement
githubbot:1434278232:2015-06-14T18:37:12.888+0000:1434278232:2015-06-14T18:37:12.888+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/544
"
0,CAMEL-8864,Bug,Minor,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Pankaj Takawale,0,2,2015-06-13 12:52:52+00:00,2015-06-23 17:49:37+00:00,"I'm using FlexibleAggregationStrategy to aggregate objects into collection. I found following issue where Aggregator ends up overwriting old collection with the new one.


JdbcCamelCodec is not marshaling all of the exchange properties. 
E.g. it does not marshal exchange's 'CamelFlexAggrStrCollectionGuard' property.
So next time Aggregator tries to fetch BLOB from database, oldExchange does not have above property.
So following code creates new collection for each new object, and hence overwrites the old collection.
private Collection<E> FlexibleAggregationStrategy::safeInsertIntoCollection(Exchange oldExchange, Collection<E> oldValue, E toInsert) {
        Collection<E> collection = null;
        try {
            if (oldValue == null || oldExchange.getProperty(COLLECTION_AGGR_GUARD_PROPERTY, Boolean.class) == null) {
                try {
                     collection = collectionType.newInstance();    //**EVERYTIME NEW COLLECTION as previous aggregation did not serialize COLLECTION_AGGR_GUARD_PROPERTY to database.",davsclaus:1435052977:2015-06-23T17:49:37.901+0000:1435052977:2015-06-23T17:49:37.901+0000:Thanks have added that property to the other codecs.
0,CAMEL-8863,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-12 07:54:51+00:00,2015-06-12 15:43:43+00:00,We need to add the valueCount operation to multimap.,"acosentino:1434095023:2015-06-12T15:43:43.374+0000:1434095023:2015-06-12T15:43:43.374+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/9dd309a4
http://git-wip-us.apache.org/repos/asf/camel/commit/1323ceb3"
0,CAMEL-8862,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-12 06:23:55+00:00,2015-06-20 11:25:01+00:00,"We need to update the jsch bundle to version 0.1.53, when it will be available.


Just a reminder.","acosentino:1434770701:2015-06-20T11:25:01.467+0000:1434770701:2015-06-20T11:25:01.467+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/87d3ea14"
0,CAMEL-8861,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Emilien,0,2,2015-06-11 15:23:04+00:00,2015-06-16 08:33:51+00:00,"Websocket supports sub-protocol definition (see https://tools.ietf.org/html/rfc6455#section-1.9). However, there is no way to provide your own websocket implementation to handle your own subprotocol. Adding a configurable websocket factory to the component could enable this functionnality.","ebondu:1434008598:2015-06-11T15:43:18.118+0000:1434008598:2015-06-11T15:43:18.118+0000:Here the patch from current master.
ebondu:1434008974:2015-06-11T15:49:34.009+0000:1434008974:2015-06-11T15:49:34.009+0000:And also an exemple of the corresponding camel context configuration :

<util:map id=""websocketFactoryMap"">
	<entry key=""default"">
		<bean class=""org.apache.camel.component.websocket.DefaultWebsocketFactory"" />
	</entry>
	<entry key=""myProtocol"">
		<bean id=""mySocketFactory"" class=""exemple.myprotocol.MySocketFactory""/>
	</entry>
</util:map>
   
<bean id=""websocket"" class=""org.apache.camel.component.websocket.WebsocketComponent"">
	<property name=""socketFactory"" ref=""websocketFactoryMap""/>
</bean>
davsclaus:1434409169:2015-06-16T06:59:29.537+0000:1434409169:2015-06-16T06:59:29.537+0000:So in this example myProtocol is the sub protocol?

And would you not always need the default, should we not include that by default? 
ebondu:1434413088:2015-06-16T08:04:48.832+0000:1434413121:2015-06-16T08:05:21.264+0000:Exaclty, myProtocol is the sub protocol. In the provided patch, if no configuration is defined, then the default websocket factory is added to the factory map. This approach also allows users to override the default websocket factory. But you are right, adding the defaultSocketFactory to the map if not present in the conf should also helps to simplify it.

ebondu:1434413862:2015-06-16T08:17:42.603+0000:1434413862:2015-06-16T08:17:42.603+0000:The updated patch that add the defaultWebsocketFactory if not defined in the conf.
davsclaus:1434414831:2015-06-16T08:33:51.423+0000:1434414831:2015-06-16T08:33:51.423+0000:Thanks for the patch."
0,CAMEL-8860,Bug,Major,2.14.0,,"
None
",Closed,Fixed,None,Grzegorz Grzybek,Himanshu Mittal,0,2,2015-06-11 12:36:17+00:00,2017-09-22 11:55:40+00:00,"So many connections remain in TIME_WAIT state while configuring a FTP producer route with tempfilename property in FTP producer. 


Files are writen using producer template.


Producertemplate.sendBodyAndHeader(producerURI, Exchange.FILE_NAME, fileName) to write file to destination. 


Producer URI : ftp://<USER@MACHINE_ADDRESS>//?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&pollStrategy=#ConsumerPollStrategy&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true


fileName: file.tmp


We are writing ~ 2000 files . First files are written to temp directory then moved to destination. Connections opened for tempfiles are not re used to write temporary files and we run out of connection after writing 1000 files. 
Route resumes once connections are released. 
Is there a way we can  reuse connection to write temporary files also.


Once tempfilename is removed from the configuration then single connection is used for ftp transfer.","himanshu:1434001996:2015-06-11T13:53:16.905+0000:1434001996:2015-06-11T13:53:16.905+0000:Issue exists in 2.15.2 also .. 
ggrzybek:1435549175:2015-06-29T11:39:35.844+0000:1435549175:2015-06-29T11:39:35.844+0000:[~himanshu], could you provide more details? Could you enable DEBUG logging for {{org.apache.camel.component.file.remote}} logger and attach the logs?
I tried with special socket factory to see when sockets are created and connected and I had single connection reused for all writes:
{noformat}
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1642030774
2015-06-29 13:36:43,103 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1642030774 to localhost/127.0.0.1:21000
2015-06-29 13:36:43,194 [main           ] DEBUG RemoteFileProducer             - Connected and logged in to: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,292 [main           ] DEBUG FtpOperations                  - About to store file: file1.txt.part using stream: java.io.ByteArrayInputStream@2f7298b
2015-06-29 13:36:43,336 [main           ] DEBUG FtpOperations                  - Took 0.044 seconds (44 millis) to store file: file1.txt.part and FTP client returned: true
2015-06-29 13:36:43,337 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file1.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,337 [main           ] DEBUG FtpOperations                  - Renaming file: out/file1.txt.part to: out/file1.txt
2015-06-29 13:36:43,343 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,437 [main           ] DEBUG FtpOperations                  - About to store file: file2.txt.part using stream: java.io.ByteArrayInputStream@6eda5c9
2015-06-29 13:36:43,479 [main           ] DEBUG FtpOperations                  - Took 0.042 seconds (42 millis) to store file: file2.txt.part and FTP client returned: true
2015-06-29 13:36:43,481 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file2.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,481 [main           ] DEBUG FtpOperations                  - Renaming file: out/file2.txt.part to: out/file2.txt
2015-06-29 13:36:43,487 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part] Exchange[Message: Hello World]
2015-06-29 13:36:43,580 [main           ] DEBUG FtpOperations                  - About to store file: file3.txt.part using stream: java.io.ByteArrayInputStream@55b7a4e0
2015-06-29 13:36:43,623 [main           ] DEBUG FtpOperations                  - Took 0.043 seconds (43 millis) to store file: file3.txt.part and FTP client returned: true
2015-06-29 13:36:43,625 [main           ] DEBUG RemoteFileProducer             - Wrote [out/file3.txt.part] to [Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]]
2015-06-29 13:36:43,625 [main           ] DEBUG FtpOperations                  - Renaming file: out/file3.txt.part to: out/file3.txt
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Testing done: testConnectionLeak(org.apache.camel.component.file.remote.FileToFtpTempFileNameProducerConnectionLeakTest)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - Took: 0.606 seconds (606 millis)
2015-06-29 13:36:43,629 [main           ] INFO  NameProducerConnectionLeakTest - ********************************************************************************
2015-06-29 13:36:43,629 [main           ] DEBUG CamelTestSupport               - tearDown test
2015-06-29 13:36:43,630 [main           ] DEBUG SharedProducerServicePool      - Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@166fa74d
2015-06-29 13:36:43,631 [main           ] DEBUG RemoteFileProducer             - Disconnecting from: Endpoint[ftp://admin:xxxxxx@localhost:21000/out/?delete=true&disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=false&tempFileName=%24%7Bfile%3Aonlyname%7D.part]
2015-06-29 13:36:43,632 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1642030774
{noformat}

himanshu:1435632627:2015-06-30T10:50:27.942+0000:1435632627:2015-06-30T10:50:27.942+0000:Here is the output of netstat command which i used to track number of TCP connection from ftp server to my machine (10.80.12.47 in this case)
himanshu:1435632858:2015-06-30T10:54:18.493+0000:1435633215:2015-06-30T11:00:15.360+0000:Processed  around 5000 files from '10.80.160.137' to '10.80.12.47'.
ProducerURI : {{""ftp://scppuser@10.80.160.137//home/scppuser/hmittal?password=RAW(PASSWORD)&binary=true&passiveMode=false&delete=true&disconnect=false&tempFileName=/temp/hello.tmp&initialDelay=10&throwExceptionOnConnectFailed=true&reconnectDelay=10&maximumReconnectAttempts=0&maxMessagesPerPoll=100&readLock=changed&readLockCheckInterval=500&readLockMinLength=1&sendEmptyMessageWhenIdle=true""}}

himanshu:1435633188:2015-06-30T10:59:48.360+0000:1435633188:2015-06-30T10:59:48.360+0000:Sample java 
himanshu:1435633833:2015-06-30T11:10:33.908+0000:1435633833:2015-06-30T11:10:33.908+0000:Attaching the result without tempfilename property in URI. Processes 5000 files and here netstat result in screenshot shows that number of connection do not increase from 3-4 .
himanshu:1435634038:2015-06-30T11:13:58.546+0000:1435634038:2015-06-30T11:13:58.546+0000:Processed 5000 messages with tempfilename in URI . Screen shot clearly shows that tcp connection count reached uptill 3104.
ggrzybek:1435711955:2015-07-01T08:52:35.274+0000:1435711968:2015-07-01T08:52:48.221+0000:[~himanshu], I was checking your example and I see that I was using {{passiveMode=true}}, you were using active mode, so:
* without using tempFileName, each send operation created one server socket on your side (FTP active mode) to send the file to server
* when using tempFileName, each send operation create *three* server sockets
** to check if target file exists
** to check if temp file exists
** to store file

Mina FTP client doesn't provide a way to set SO_REUSEADDR option in server socket, so it defaults to .... platform specific value. In my case (Linux 4.0.6) the value is true, so when creating another server socket, Linux can reuse existing socket in TIME-WAIT state.
Didn't you try considering ftp passive mode?
himanshu:1435723242:2015-07-01T12:00:42.050+0000:1435784077:2015-07-02T04:54:37.312+0000:Grzegorz ,

{{passiveMode=true/false}} does not make any difference in number of connection being opened.
Here test sample is 200 messages with FTP sender. Screen shot shows number of connection reached up till 400( 2 per transaction) 
After removing tempfilename from URI we have a single tcp connection for transaction.
NetStat_NoTempFile.PNG
Passive_false_NoTempFile.log
NetStat_Passive_False.PNG
Passive_false.log
NetStat_Passive_True.PNG
Passive_True.log

As you mentioned in case of tempfileName there will be 3 active sockets else only 1 will be created. Tempfile configuration should yield just 3 times connection .
These configuration must not change the behavior of SO_REUSEADDR . 
Assume SO_REUSEADDR is set to false in my ftp server it could have created as many number of connections as there were transactions in both scenarios(with / without tempfilename ).
Currently I am figuring out to check SO_REUSEADDR property on my ftp server but I believe it is set to true as same connection is reused when we do not write temp files.

ggrzybek:1435788358:2015-07-02T06:05:58.428+0000:1435788358:2015-07-02T06:05:58.428+0000:Thanks for comments - I'll search more...
ggrzybek:1436233830:2015-07-07T09:50:30.063+0000:1436233830:2015-07-07T09:50:30.063+0000:[~himanshu], I checked again with camel 2.16-SNAPSHOT and even when I used passive mode and NO tempFileName, I had connection per write.

I've additionally set a range of passive ports to be used in ftp server (mina-ftp used in camel ftp tests) to {{40000-40020}} and I wrote 1000 files. {{ss -napt | wc -l}} showed me 1000 sockets in TIME-WAIT state like this:
{noformat}
...
TIME-WAIT  0      0          ::ffff:127.0.0.1:60184     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60185     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60190     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60193     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60197     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60212     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60217     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60220     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60235     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60241     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60259     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60274     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60277     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60284     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60290     ::ffff:127.0.0.1:40006 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60295     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60301     ::ffff:127.0.0.1:40003 
TIME-WAIT  0      0          ::ffff:127.0.0.1:60322     ::ffff:127.0.0.1:40003 
...
{noformat}
So no problem with reusing TIME-WAIT sockets.

Also I've used my own socket factory to be used in ftp endpoint:
{code:java}
    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry jndi = super.createRegistry();

        SocketFactory sf = new AuditingSocketFactory();
        jndi.bind(""sf"", sf);
        return jndi;
    }
{code}

I used this parameter in FTP endpoint: {{ftpClient.socketFactory=#sf}}. My socket factory just logged information about opening and closing sockets. I had 1000 blocks of such logs:
{noformat}
2015-07-07 11:49:38,264 [main           ] DEBUG ProducerCache                  - >>>> Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp] Exchange[Message: Hello World 00018]
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 298317613
2015-07-07 11:49:38,266 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 298317613 to /127.0.0.1:40014
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,267 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 298317613
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 1597289593
2015-07-07 11:49:38,307 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 1597289593 to /127.0.0.1:40001
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,308 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 1597289593
2015-07-07 11:49:38,350 [main           ] DEBUG FtpOperations                  - About to store file: hello.tmp using stream: java.io.ByteArrayInputStream@7d34a4c3
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - Creating socket 187514477
2015-07-07 11:49:38,351 [main           ] INFO  NameProducerConnectionLeakTest - connecting socket 187514477 to /127.0.0.1:40003
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,352 [main           ] INFO  NameProducerConnectionLeakTest - closing socket 187514477
2015-07-07 11:49:38,391 [main           ] DEBUG FtpOperations                  - Took 0.041 seconds (41 millis) to store file: hello.tmp and FTP client returned: true
2015-07-07 11:49:38,393 [main           ] DEBUG RemoteFileProducer             - Wrote [out//temp/hello.tmp] to [Endpoint[ftp://admin@localhost:21000/out/?disconnect=false&fileName=%24%7Bfile%3Aname%7D&ftpClient.socketFactory=%23sf&passiveMode=true&password=xxxxxx&tempFileName=%2Ftemp%2Fhello.tmp]]
2015-07-07 11:49:38,393 [main           ] DEBUG FtpOperations                  - Renaming file: out//temp/hello.tmp to: out/file-00018.txt
{noformat}
ggrzybek:1436234222:2015-07-07T09:57:02.760+0000:1436234222:2015-07-07T09:57:02.760+0000:And what is the ftp server you are using?
himanshu:1436247053:2015-07-07T13:30:53.087+0000:1436247053:2015-07-07T13:30:53.087+0000:Hi Grzegorz Grzybek,

I am using {{vsftp version 2.2.2 with camel 2.14. }}
Could it be an issue with the ftp server ?

In above comments you have mentioned that even without {{tempfileName}} in URI you are seeing 1000 connection in TIME_WAIT and you have {{disconnect=false}} set in URI. 
With this configuration it should not have opened 1000 connection in TIME_WAIT. That means sockets are not re-used . I am not sure whether my understanding is correct here.

Do you have any other alternative to avoid these many connection ?


ggrzybek:1436250672:2015-07-07T14:31:12.902+0000:1436250672:2015-07-07T14:31:12.902+0000:I checked with camel 2.14.0 as well with the same result. I hade many sockets in TIME-WAIT state.
Please try debugging https://github.com/apache/commons-net/blob/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java#L810 - commons-net/ftpclient opens either {{_serverSocketFactory_.createServerSocket}} (active mode) or {{_socketFactory_.createSocket()}} (passive mode), but I didn't have problems with creating socket (reusing them)...

Maybe you have the problem described here: http://ma.juii.net/blog/excessive-ftp-connections ?
himanshu:1436251513:2015-07-07T14:45:13.627+0000:1436251571:2015-07-07T14:46:11.937+0000:Hi Grzegorz Grzybek,

Thats a nice article and explains well about ftp active/passive mode. 
My only point here is {{tempFIleName}} configuration in URI should not drive socket behavior as it is happening in my case. It clearly stays that there is a problem in the implementation.

Anyways thanks for your inputs
ggrzybek:1436251717:2015-07-07T14:48:37.793+0000:1436251717:2015-07-07T14:48:37.793+0000:yes, I understand. This is how ftpclient works - what's weird is how did you actually get this socket reuse... hmm, maybe my socket factory should do some reuse? Maybe default socket factory does this?
himanshu:1436252499:2015-07-07T15:01:39.159+0000:1436325187:2015-07-08T11:13:07.525+0000:I will debug FTPClient code and check about the connection creation difference with/without tempFileName configuration.

Still I feel problem that active/passive mode is not resulting in these many connections . Need to check Camel FTP component. As the behavior is driven by tempFIleName configuration
ggrzybek:1436325844:2015-07-08T11:24:04.339+0000:1436325844:2015-07-08T11:24:04.339+0000:Thanks.
I saw that passive mode doesn't make any difference. And for me not using tempFileName didn't lead to single socket use...
himanshu:1436742725:2015-07-13T07:12:05.463+0000:1436742725:2015-07-13T07:12:05.463+0000:Grzegorz Grzybek,

As you mentioned that even {{tempFileName}} does not make any difference in number of connections. Number of Connections shoot up with each file transfer and result in TIME_WAIT connections.
Should not camel-ftp check the connection handling part ? As FTP URI config already has {{disconnect=false}}.
himanshu:1453855389:2016-01-27T08:43:09.974+0000:1453855465:2016-01-27T08:44:25.590+0000:Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.
himanshu:1453855536:2016-01-27T08:45:36.738+0000:1453855536:2016-01-27T08:45:36.738+0000:Issue was with endpoint URi which was changing with every message transfer and forcing camel to create a new connection for every changed URI .We have changed the configuration. Taken out tempFileName from endpointURI and setting it as header in Producer template. With this approach uri remains static for each file transfer.
ggrzybek:1453855651:2016-01-27T08:47:31.955+0000:1453855651:2016-01-27T08:47:31.955+0000:[~himanshu] thanks for the update ;) I'm glad it works.
himanshu:1505857005:2017-09-20T05:36:45.863+0000:1505858667:2017-09-20T06:04:27.491+0000:[~grzes], 
It solved the problem of connection leak at camel end , but still creates a new connection if tempFileName is added as uri paramaters in camel ftp uri. Verified it in 2.19.2 . And same issue

Reiterating the issue
When we have {{tempFilename}} in camel uri and we use producer template to write file to remote ftp location , camel opens new connection for every file transfer. Though {{disconnect}} option is set to false in uri.
If we take out {{tempFilename}} from uri connections are reused.
ggrzybek:1505857136:2017-09-20T05:38:56.390+0000:1505857136:2017-09-20T05:38:56.390+0000:Pretty please create new issue with the details and new version of Camel.
himanshu:1505858825:2017-09-20T06:07:05.894+0000:1505858825:2017-09-20T06:07:05.894+0000:Created CAMEL-11792 for other issue"
0,CAMEL-8859,Bug,Minor,2.15.2,,"
None
",Resolved,Not A Problem,None,Unassigned,Vaclav Chalupa,0,2,2015-06-11 09:26:21+00:00,2015-06-13 07:42:00+00:00,"By description in http://camel.apache.org/message-history.html it looks like that message history can be changed in runtime by camelContext.setMessageHistory(false / true) - but it is not true, message history is set by route creation and cannot be changed (change has no effect).


It would be nice to add information about this behavior to documentation.


Or, if considered as important, add possibility to change message history settings in runtime.","davsclaus:1434152520:2015-06-13T07:42:00.847+0000:1434152520:2015-06-13T07:42:00.847+0000:Its as designed. You configure camel context using the setters and start it.

For runtime changes use the camel context mbean"
0,CAMEL-8858,Bug,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-11 09:00:01+00:00,2015-06-11 15:22:09+00:00,Some new Hazelcast operations are not mapped inside HazelcastComponentHelper.,"acosentino:1434007329:2015-06-11T15:22:09.517+0000:1434007329:2015-06-11T15:22:09.517+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/26e09e13"
0,CAMEL-8857,Improvement,Minor,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Toni Fadjukoff,0,1,2015-06-11 08:16:13+00:00,2015-08-05 13:01:27+00:00,Camel SCR should publish the CamelContext to OSGi registry like camel-spring and camel-blueprint do. Otherwise eg. Karaf commands cannot work with camel-scr.,
0,CAMEL-8856,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-11 08:13:50+00:00,2015-06-11 15:21:36+00:00,We need to add evict and evictAll operation to hazelcast map.,"acosentino:1434007296:2015-06-11T15:21:36.436+0000:1434007296:2015-06-11T15:21:36.436+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/30558012
http://git-wip-us.apache.org/repos/asf/camel/commit/076585fc
http://git-wip-us.apache.org/repos/asf/camel/commit/3faef3f8"
0,CAMEL-8855,New Feature,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Tadayoshi Sato,0,4,2015-06-11 05:50:44+00:00,2017-04-26 15:52:02+00:00,"Currently, camel-jpa producer



to(""jpa:MyEntity?..."")




can only invoke EntityManager.persist() or EntityManager.merge(), but sometimes users want to send JPA entities to camel-jpa producer to delete them from the database, i.e. invoke EntityManager.remove().


Maybe, introducing remove option to JPA producer is sufficient like this:



to(""jpa:MyEntity?remove=true"")","acosentino:1434025726:2015-06-11T20:28:46.459+0000:1434025726:2015-06-11T20:28:46.459+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/cdbb91c6
http://git-wip-us.apache.org/repos/asf/camel/commit/8e37d25d
tadayosi:1434043664:2015-06-12T01:27:44.470+0000:1434043664:2015-06-12T01:27:44.470+0000:Thanks [~ancosen]. How fast you fixed it!
acosentino:1434353788:2015-06-15T15:36:28.134+0000:1434353863:2015-06-15T15:37:43.477+0000:Thank you for reporting and opening this JIRA issue :-)
Caranthir:1493188401:2017-04-26T14:33:21.746+0000:1493188702:2017-04-26T14:38:22.404+0000:This issue was succesfully resolved but the documentation was not updated. Please add this tag to the documentation on https://camel.apache.org/jpa.html !!!
davsclaus:1493189742:2017-04-26T14:55:42.627+0000:1493189742:2017-04-26T14:55:42.627+0000:Look at the docs here
https://github.com/apache/camel/tree/master/components#components

These are the updated docs
Caranthir:1493193122:2017-04-26T15:52:02.149+0000:1493193122:2017-04-26T15:52:02.149+0000:Thanks for the link. I think some newbies like me aren't aware of these docs. It would be nice to have the link https://camel.apache.org/jpa.html also updated. "
0,CAMEL-8854,Improvement,Major,2.15.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Christian Bauer,0,2,2015-06-10 23:35:26+00:00,2016-05-03 08:30:32+00:00,"To completely prevent information leakage from Jetty, you have to



change its default error page (already possible, but broken, see CAMEL-8179)




disable the default Server HTTP response header with JettyHttpEndpoint#setSendServerVersion(false).



This option is also missing as a String-based endpoint parameter in JettyHttpComponent#createEndpoint().",davsclaus:1462235432:2016-05-03T08:30:32.203+0000:1462235432:2016-05-03T08:30:32.203+0000:You can now configure it on the component level also.
0,CAMEL-8853,Bug,Minor,2.15.2,,"
None
",Resolved,Not A Problem,None,Unassigned,Tomas Rohovsky,0,5,2015-06-10 14:06:19+00:00,2019-09-27 13:09:53+00:00,"If you invoke this Camel CXF endpoint by a producer template:



<cxf-camel:cxfEndpoint id=""greetingService"" address=""/greeting-service"" serviceClass=""org.example.cxf_producer_template.GreetingService""/>




you will get:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Tom]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1635)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:645)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:471)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:133)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:301)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:331)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.example.cxf_producer_template.ProducerProcessor.process(ProducerProcessor.java:12)[265:cxf-producer-template:0.0.1.SNAPSHOT]
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:165)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:73)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at java.util.TimerThread.mainLoop(Timer.java:555)[:1.7.0_71]
	at java.util.TimerThread.run(Timer.java:505)[:1.7.0_71]
Caused by: java.lang.IllegalArgumentException: URI is not absolute
	at java.net.URI.toURL(URI.java:1095)[:1.7.0_71]
	at org.apache.cxf.transport.http.Address.getURL(Address.java:45)[123:org.apache.cxf.cxf-rt-transports-http:3.0.4.redhat-620123]
	at org.apache.cxf.transport.http.URLConnectionHTTPConduit.createConnection(URLConnectionHTTPConduit.java:93)[123:org.apache.cxf.cxf-rt-transports-http:3.0.4.redhat-620123]
	at org.apache.cxf.transport.http.URLConnectionHTTPConduit.setupConnection(URLConnectionHTTPConduit.java:105)[123:org.apache.cxf.cxf-rt-transports-http:3.0.4.redhat-620123]
	at org.apache.cxf.transport.http.HTTPConduit.prepare(HTTPConduit.java:496)[123:org.apache.cxf.cxf-rt-transports-http:3.0.4.redhat-620123]
	at org.apache.cxf.interceptor.MessageSenderInterceptor.handleMessage(MessageSenderInterceptor.java:46)[118:org.apache.cxf.cxf-core:3.0.4.redhat-620123]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)[118:org.apache.cxf.cxf-core:3.0.4.redhat-620123]
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:516)[118:org.apache.cxf.cxf-core:3.0.4.redhat-620123]
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:418)[118:org.apache.cxf.cxf-core:3.0.4.redhat-620123]
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:116)[207:org.apache.camel.camel-cxf:2.15.1.redhat-620123]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:68)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:201)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)[198:org.apache.camel.camel-core:2.15.1.redhat-620123]
	... 18 more




It works as expected if you specify an absolute path instead:



<cxf-camel:cxfEndpoint id=""greetingService"" address=""http://localhost:8182/cxf/greeting-service"" serviceClass=""org.example.cxf_producer_template.GreetingService""/>




I think that if a relative path is specified, it should be internally translated to the absolute path, in this case http://localhost:8181/cxf/greeting-service. A reproducer is attached.","davsclaus:1443481826:2015-09-29T07:10:26.269+0000:1443481826:2015-09-29T07:10:26.269+0000:Yeah if you use cxf:bean then I think we should lookup the endpoint and grab an absolute url for the http to use.
nimnio:1542196829:2018-11-14T20:00:29.280+0000:1542196829:2018-11-14T20:00:29.280+0000:Just FYI, I encountered this using Camel 2.22.1. I work around it by making the URI a package-private field of my RouteBuilder class, and then overriding it with an absolute URI in a @BeforeClass method in the unit test.

 {code:java}
@BeforeClass
static public void replaceRelativeUriWithAbsoluteUri() {
    port = AvailablePortFinder.getNextAvailable(24000);
    BestRoute.CXF_URI_BEST = ""cxf://http://localhost:"" + port + ""/BestAdapter/webservices/best?wsdlURL=BestFamilyHealth.wsdl&serviceClass="" + BestFamilyHealth.class.getName()
            + ""&loggingFeatureEnabled={{cxfLoggingFeatureEnabled}}"";
}
{code}
ffang:1559630040:2019-06-04T14:34:00.812+0000:1559630040:2019-06-04T14:34:00.812+0000:The relative address of cxf endpoint means using serlvet transport, it assume the endpoint is deployed into servlet container.

In the test code, which suppose to use the plain http transport, should use absolute url instead.


Sirbu:1569558976:2019-09-27T12:36:16.826+0000:1569560993:2019-09-27T13:09:53.350+0000:[~nimnio]

For my case I wrote this code (just after the camel context is started - i start it myself by using @UseWithAdvice ) :
{code:java}
protected void rewriteUrlWithServerPort() {
	final String START_URL = ""http://localhost:"" + randomPort + ""/parc/ws"";
	Map<String, CxfSpringEndpoint> wsCxfCamelEndpoints = applicationContext 
                                                                        .getBeansOfType(CxfSpringEndpoint.class);
	wsCxfCamelEndpoints.values()
		.stream()
		.filter(cxfSpringEndpoint -> cxfSpringEndpoint.getAddress().startsWith(""/""))
		.forEach(cxfSpringEndpoint
			-> cxfSpringEndpoint.setAddress(START_URL + cxfSpringEndpoint.getAddress()));
}
{code}"
0,CAMEL-8852,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Tarek CHAOUALI,0,3,2015-06-10 09:18:19+00:00,2015-07-02 19:43:30+00:00,"This bug exists in all camel jcr component version 
Camel JCR component  provides a connection to the default workspace 
no custom workspace connection is allowed .","davsclaus:1434409224:2015-06-16T07:00:24.497+0000:1434409224:2015-06-16T07:00:24.497+0000:And would you be able to tell more how you would like to be able to specify a different workspace? Should there be some new option or how would you see it done?
Tarek CHAOUALI:1435190104:2015-06-25T07:55:04.959+0000:1435193074:2015-06-25T08:44:34.473+0000:I Think That the best way is to add a new header to  the JCR header's list , it may be called : CamelWorkspaceName
If the header is null or empty a connection to the default workspace  is provided otherwise a connection to the mentionned workspace is provided
The test on the workspace name should be done on both cases: node insertion and node retreiving.
acosentino:1435281200:2015-06-26T09:13:20.323+0000:1435281200:2015-06-26T09:13:20.323+0000:Maybe it's better to add a new URI parameter since we open a session also in the JCR consumer."
0,CAMEL-8851,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-10 06:47:09+00:00,2015-06-10 15:59:54+00:00,We need to add operations to enable/disable monitoring on EC2 instances.,"acosentino:1433923194:2015-06-10T15:59:54.457+0000:1433923194:2015-06-10T15:59:54.457+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/7567990f"
0,CAMEL-8850,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-09 12:20:30+00:00,2015-06-09 15:14:33+00:00,We need to an operation to reboot one or more EC2 instances from the related component.,"acosentino:1433834073:2015-06-09T15:14:33.615+0000:1433834073:2015-06-09T15:14:33.615+0000:Related commits:

http://git-wip-us.apache.org/repos/asf/camel/commit/dc6f78aa
http://git-wip-us.apache.org/repos/asf/camel/commit/18c37ec7"
0,CAMEL-8849,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-09 07:07:56+00:00,2015-06-09 15:11:13+00:00,We need to add retainAll operation to Hazelcast List in the related camel component.,"acosentino:1433833873:2015-06-09T15:11:13.445+0000:1433833873:2015-06-09T15:11:13.445+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/054815fd"
0,CAMEL-8848,Bug,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas,0,2,2015-06-08 16:42:39+00:00,2017-02-28 14:45:45+00:00,"I am having issues hitting an http end point via camel recipientlist(2.14).
When the url has a + sign(in one of the parameters) then its breaking. I also tried %2B then it is getting converted to space.


There is a JIRA: https://issues.apache.org/jira/browse/CAMEL-6176


However when i am using RAW its not working with recipientlist.


Getting following exception:



Caused by: java.net.URISyntaxException: Illegal character in query at index 558: http://someurl?facet=true&binary=true&-fq=nm_task_type%3A%28OTM_QUERY+OR+OTM_CLIENT_QUERY%29&facet.query=%7B%21key%3D%22%5B*+TO+NOW-30%5D%22%7Ddt_created%3A%5B*+TO+NOW-30DAY%5D&facet.query=%7B%21key%3D%22%5BNOW-30DAY+TO+NOW-15DAY%5D%22%7Ddt_created%3A%5BNOW-30DAY+TO+NOW-15DAY%5D&facet.query=%7B%21key%3D%22%5BNOW-15DAY+TO+NOW-7DAY%5D%22%7Ddt_created%3A%5BNOW-15DAY+TO+NOW-7DAY%5D&facet.query=%7B%21key%3D%22%5BNOW-7DAY+TO+NOW-1DAY%5D%22%7Ddt_created%3A%5BNOW-7DAY+TO+NOW-1DAY%5D&facet.query=RAW({!key=""[NOW-1DAY TO NOW]""}dt_created:[NOW-1DAY TO NOW+1DAY])&q=*%3A*&rows=0
    at java.net.URI$Parser.fail(URI.java:2829)
    at java.net.URI$Parser.checkChars(URI.java:3002)
    at java.net.URI$Parser.parseHierarchical(URI.java:3092)
    at java.net.URI$Parser.parse(URI.java:3034)
    at java.net.URI.<init>(URI.java:595)
    at org.apache.camel.util.URISupport.createURIWithQuery(URISupport.java:334)
    at org.apache.camel.util.URISupport.createRemainingURI(URISupport.java:428)
    at org.apache.camel.component.http.HttpComponent.createEndpoint(HttpComponent.java:248)
    at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
    at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:525)
    ... 52 more",davsclaus:1436406825:2015-07-09T09:53:45.191+0000:1436406825:2015-07-09T09:53:45.191+0000:Does it work without recipient list. Also test with latest Camel release.
0,CAMEL-8847,Bug,Major,2.15.1,2.15.1,"
None
",Closed,Invalid,2.15.1,Unassigned,Bertrand Josse,0,2,2015-06-08 15:37:37+00:00,2015-06-10 06:41:25+00:00,"In case of a CXF proxy in payload mode.
If a call to the client side fall in timeout, the server side of the proxy respond by a soap message with an empty body after 30s.


So, to describe the problem in depth:  
Our project is composed by : 



One CXF endpoint expose a Webservice.
One CXF endpoint invoke a Webservice.
a route between that endpoints to dispatch messages.
an http-conduit that set the Receivetimeout to 300000ms (300s).



So, there is no way to explain why the server side is responding after 30s.","njiang:1433886677:2015-06-10T05:51:17.913+0000:1433886677:2015-06-10T05:51:17.913+0000:Please use mailing list for this kind of issue first.  The time out  error should be thrown if the proxy client cannot read the message from server in 30s, you won't get an empty message from the client."
0,CAMEL-8846,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-06-08 15:27:48+00:00,2015-06-08 15:35:33+00:00,"This archetype creates a project that uses a timer -> stream out. 


As a war app it should really be the servlet etc instead. So lets use the tomcat-example as base for this quickstart.",
0,CAMEL-8845,Improvement,Minor,2.15.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-06-08 14:30:00+00:00,2015-06-08 14:54:28+00:00,"When looking up the service then if the end user specify the service name in a nicer human readable format such as:


service:foo-bar


then the ENV variables are


FOO_BAR_SERVICE


eg all upper case, and dash is a underscore.",
0,CAMEL-8844,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-06-08 09:35:14+00:00,2015-06-09 10:23:10+00:00,"Currently there are issues when directory in (s)ftp(s) endpoint is absolute (or contains arbitrary number of leading slashes). Sometimes the path is normalized, sometimes don't and camel-ftp code can't find correct prefix in absolute path when retrieving remote file.


Documentation says:


Absolute path is not supported.


I suggest normalizing the behavior and treating absolute FTP endpoint URI directories as relative. When URI contains absolute path, WARNing will be printed:



2015-06-08 09:52:41,304 [main           ] WARN  FtpUtils                       - FtpComponent doesn't support absolute paths, ""//foo"" will be converted to ""foo"".",ggrzybek:1433729498:2015-06-08T10:11:38.405+0000:1433729498:2015-06-08T10:11:38.405+0000:Resolved [here|https://github.com/apache/camel/commit/ca6d74205815269b7b3caf32ca57cb73c1a7299a] in version 2.16.
0,CAMEL-8843,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-08 09:13:17+00:00,2015-06-08 15:51:15+00:00,It can be useful to have a particular operation to get EC2 instances statuses in the related component.,"acosentino:1433749875:2015-06-08T15:51:15.923+0000:1433749875:2015-06-08T15:51:15.923+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/43b79533"
0,CAMEL-8842,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-08 08:09:21+00:00,2015-06-08 15:50:35+00:00,We need to add addAll and removeAll operations to Hazelcast List in the related camel component.,"acosentino:1433749835:2015-06-08T15:50:35.873+0000:1433749835:2015-06-08T15:50:35.873+0000:Related commit

http://git-wip-us.apache.org/repos/asf/camel/commit/0c2e5df1"
0,CAMEL-8841,Bug,Minor,"2.15.1, 2.15.2","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Martin Lichtin,0,2,2015-06-08 07:19:25+00:00,2015-06-15 11:12:29+00:00,"karaf> camel:context-inflight myCamelContext
Error executing command: Object name cannot be null 

karaf> log:exception-display
javax.management.RuntimeOperationsException: Object name cannot be null
        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.isRegistered(DefaultMBeanServerInterceptor.java:569)[:1.8.0_45]
        at com.sun.jmx.mbeanserver.JmxMBeanServer.isRegistered(JmxMBeanServer.java:638)[:1.8.0_45]
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_45]
        at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_45]
        at org.apache.karaf.management.boot.KarafMBeanServerBuilder$MBeanInvocationHandler.invoke(KarafMBeanServerBuilder.java:80)[karaf-jmx-boot.jar:]
        at com.sun.proxy.$Proxy0.isRegistered(Unknown Source)[:]
        at org.apache.camel.commands.AbstractLocalCamelController.browseInflightExchanges(AbstractLocalCamelController.java:186)
        at org.apache.camel.commands.ContextInflightCommand.performContextCommand(ContextInflightCommand.java:56)
        at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74)
        at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42)
        at org.apache.camel.karaf.commands.ContextInflight.doExecute(ContextInflight.java:40)
        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)[25:org.apache.karaf.shell.console:3.0.3]
        at Proxy199cb572_c6d4_4d06_851e_3f55b795651b.execute(Unknown Source)[:]
        at Proxy199cb572_c6d4_4d06_851e_3f55b795651b.execute(Unknown Source)[:]
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[25:org.apache.karaf.shell.console:3.0.3]
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:208)
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1.runConsole(ShellFactoryImpl.java:158)[52:org.apache.karaf.shell.ssh:3.0.3]
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1$1.run(ShellFactoryImpl.java:133)
        at java.security.AccessController.doPrivileged(Native Method)[:1.8.0_45]
        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)[26:org.apache.karaf.jaas.modules:3.0.3]
        at org.apache.karaf.shell.ssh.ShellFactoryImpl$ShellImpl$1.run(ShellFactoryImpl.java:129)[52:org.apache.karaf.shell.ssh:3.0.3]
Caused by: java.lang.IllegalArgumentException: Object name cannot be null
        ... 30 more




I think when combining the object name


            Set<ObjectName> set = mBeanServer.queryNames(new ObjectName(agent.getMBeanObjectDomainName() + "":type=services,name=DefaultInflightRepository,*""), null);


The "":context=context-name"" part seems missing.
The query should be something like


org.apache.camel:context=<context-name>,type=services,name=DefaultInflightRepository","davsclaus:1434236287:2015-06-14T06:58:07.948+0000:1434236287:2015-06-14T06:58:07.948+0000:Martin are you working on a patch?
lichtin:1434250309:2015-06-14T10:51:49.751+0000:1434250309:2015-06-14T10:51:49.751+0000:Yes, I'll give it a whirl.
lichtin:1434259017:2015-06-14T13:16:57.642+0000:1434259017:2015-06-14T13:16:57.642+0000:Following http://camel.apache.org/contributing.html

{noformat}
git clone https://git-wip-us.apache.org/repos/asf/camel.git
cd camel
mvn eclipse:eclipse
{noformat}

unfortunately fails with

{noformat}
[ERROR] Failed to execute goal on project camel-gae: Could not resolve dependencies for project org.apache.camel:camel-gae:bundle:2.16-SNAPSHOT: The following artifacts could not be resolved: com.google.gdata:gdata-contacts-3.0:jar:1.41.5, com.google.gdata:gdata-calendar-2.0:jar:1.41.5, com.google.gdata:gdata-client-1.0:jar:1.41.5, com.google.gdata:gdata-core-1.0:jar:1.41.5: Could not find artifact com.google.gdata:gdata-contacts-3.0:jar:1.41.5 in bbp-repo (http://repo.bbp.ch/artifactory/repo) -> [Help 1]
{noformat}
davsclaus:1434262105:2015-06-14T14:08:25.789+0000:1434262105:2015-06-14T14:08:25.789+0000:Dont use mvn eclipse:eclipse. Instead Eclipse has out of the box maven plugin, so you can import existing maven project and select the folder of the platforms/commands


lichtin:1434286536:2015-06-14T20:55:36.328+0000:1434286536:2015-06-14T20:55:36.328+0000:Right. Just wanted to report that I cannot build Camel given the instructions.
""mvn clean install -Dtest=false"" fails the same way. But anyways.. don't need to for this JIRA.

What's confusing is that the context names listed by ""camel:context-list"" don't match what is expected by JMX as the 'context' name.
There is a so-called ""ManagementName"" expected when composing the object name. Not a problem, just one more thing.
davsclaus:1434322073:2015-06-15T06:47:53.865+0000:1434322073:2015-06-15T06:47:53.865+0000:the context name is not required to be unique in the entire jvm and also end users can configure an explict name such as myCamel etc. Where as management name must be unique in the JVM. Therefore these 2 can differ. 
lichtin:1434327786:2015-06-15T08:23:06.785+0000:1434327786:2015-06-15T08:23:06.785+0000:BTW, I see a regression in 2.16-SNAPSHOT with regards to Blueprint config files.
For example:

{noformat}
	<camelContext id=""myContext"" xmlns=""http://camel.apache.org/schema/blueprint""
		xsi:schemaLocation=""http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"" depends-on=""jms,PROPAGATION_REQUIRED"">
{noformat}

gives

{noformat}
org.osgi.service.blueprint.container.ComponentDefinitionException: Unresolved ref/idref to component: jms,PROPAGATION_REQUIRED
{noformat}

It no longer seems to understand the ""depends-on"" in case of more than one reference mentioned.
As far as I remember, the separator could be comma or space.
davsclaus:1434337949:2015-06-15T11:12:29.739+0000:1434337949:2015-06-15T11:12:29.739+0000:Thanks for the patch."
0,CAMEL-8840,Task,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-07 10:03:59+00:00,2015-06-07 10:17:52+00:00,We need to add support for Security Groups when we create and run EC2 instances.,"acosentino:1433643472:2015-06-07T10:17:52.469+0000:1433643472:2015-06-07T10:17:52.469+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/39f04d44"
0,CAMEL-8839,Task,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-07 09:02:44+00:00,2015-06-07 09:08:06+00:00,We need to add clear operation to Hazelcast List in the related camel component.,"acosentino:1433639286:2015-06-07T09:08:06.094+0000:1433639286:2015-06-07T09:08:06.094+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/0c7d9a83"
0,CAMEL-8838,Bug,Major,"2.13.4, 2.15.0, 2.15.2",,"

camel
http

",Resolved,Won't Fix,None,Claus Ibsen,Deepak,0,3,2015-06-07 03:05:50+00:00,2016-04-28 14:34:31+00:00,"Hi, 
When we pass HttpClientParams in EndPoint URI, to override HttpConnectionManager class, the HttpComponent is not considering the overridden parameter, 


Example URL 
https://myapplication.com/myappservice/?bridgeEndpoint=true&throwExceptionOnFailure=false&httpClient.connectionManagerClass=org.apache.commons.httpclient.SimpleHttpConnectionManager 


In org.apache.camel.component.http.HttpComponent, if there is no bean injection of httpConnectionManager class, by default a new instance of MultiThreadedHttpConnectionManager class is created. 


In HttpComponent class, while constructing the HttpEndPoint, the same above HttpConnection Manager class is sent as reference. 


In HttpEndPoint class, createHttpClient method, although all the Http client params are considered, HttpConnectionManager class sent by the HttpClient Params is not considered. 


Please clarify or fix it. 


HttpClient answer = new HttpClient(getClientParams()); // Line Number 110 answer.setHttpConnectionManager(httpConnectionManager); // Line Number 144","njiang:1435012144:2015-06-23T06:29:04.706+0000:1435012144:2015-06-23T06:29:04.706+0000:Current camel-http4 component doesn't support to set the connectionManagerClass any more, as we move to the new HttpClientBuilder API since Camel 2.14.x.  Now we don't provide community support of camel-2.13.x any more. So I just close this issue as not fix.

You can setup the HttpConnectionManager from the HttpComponent.
smswamy:1435047673:2015-06-23T16:21:13.037+0000:1435047673:2015-06-23T16:21:13.037+0000:Hi,
    Thanks for looking into it. I had raised this bug for Camel-HTTP component and not HTTP4 component.
Also in all released versions of Camel-HTTP component I see this issue.
Please check.
njiang:1435091579:2015-06-24T04:32:59.693+0000:1435091579:2015-06-24T04:32:59.693+0000:Sorry, I just checked the code of camel-http4, I will take a look at this issue today.
davsclaus:1461825271:2016-04-28T14:34:31.718+0000:1461825271:2016-04-28T14:34:31.718+0000:Yeah you cannot set all options in the uri"
0,CAMEL-8837,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-06-05 12:56:43+00:00,2015-06-05 13:19:06+00:00,Maven archetype for creating a Camel CDI project,
0,CAMEL-8836,Improvement,Major,None,"2.15.3, 2.16.0, 2.14.4","
None
",Resolved,Fixed,"2.15.3, 2.16.0, 2.14.4",Willem Jiang,Willem Jiang,0,1,2015-06-05 12:11:11+00:00,2015-06-05 12:27:25+00:00,"As elasticsearch already include the joda-time into its bundle, we don't need to install the jode-time bundle anymore in the camel-elasticsearch feature.","njiang:1433478445:2015-06-05T12:27:25.074+0000:1433478445:2015-06-05T12:27:25.074+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8835,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-06-05 10:17:45+00:00,2015-06-05 10:51:52+00:00,"PojoSR was donated to Apache foundation and it's currently available as felix-connect and is available in version 0.1.0 in Maven Central.


felix-connect is based on:



    <dependencies>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>5.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.compendium</artifactId>
            <version>5.0.0</version>
        </dependency>
    </dependencies>",ggrzybek:1433472679:2015-06-05T10:51:19.705+0000:1433472679:2015-06-05T10:51:19.705+0000:Resolved [here|https://github.com/apache/camel/commit/da85d858148431627e9ff668945014f8e31d5807]
0,CAMEL-8834,New Feature,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-06-05 10:06:35+00:00,2015-06-06 21:20:56+00:00,We need to add the Describe Instances operation to list the EC2 instances status and informations.,"acosentino:1433471659:2015-06-05T10:34:19.827+0000:1433471670:2015-06-05T10:34:30.620+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/38f32b76

acosentino:1433596856:2015-06-06T21:20:56.303+0000:1433596856:2015-06-06T21:20:56.303+0000:Add a Spring test with this commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/11ccb823"
0,CAMEL-8803,Bug,Minor,2.15.2,"2.15.3, 2.16.0","

maven

",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Mikko Tommila,0,2,2015-05-27 11:24:14+00:00,2015-07-29 13:34:45+00:00,"The Maven artifact camel-jetty9 depends on org.apache.geronimo.specs:geronimo-servlet_3.0_spec.


camel-jetty9 also depends on org.eclipse.jetty:jetty-server:jar:9.2.9.v20150224, which further depends on javax.servlet:javax.servlet-api:jar:3.1.0


The dependencies of camel-jetty9 include thus two conflicting and different versions of several classes. Both the Servlet API 3.0 version and Servlet API 3.1 version are included as (transitive) dependencies.


Instead of depending on the geronimo artifact, couldn't camel-jetty9 just depend on the servlet-api artifact (of the correct version)?",davsclaus:1438148085:2015-07-29T13:34:45.927+0000:1438148085:2015-07-29T13:34:45.927+0000:Thanks for reporting
0,CAMEL-8802,Task,Minor,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Willem Jiang,Claus Ibsen,0,2,2015-05-27 09:10:04+00:00,2015-05-27 14:08:03+00:00,"This test fails



Failed tests:
  CxfRsConsumerSimpleBindingTest.testMultipartPostWithoutParameters:319->Assert.assertEquals:542->Assert.assertEquals:555->Assert.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 expected:<200> but was:<405>




But the others works. Wonder if you could take a look?","njiang:1432690669:2015-05-27T09:37:49.031+0000:1432690669:2015-05-27T09:37:49.031+0000:sure, I will take a look at this today.

njiang:1432706883:2015-05-27T14:08:03.888+0000:1432706883:2015-05-27T14:08:03.888+0000:Just commit the patch into camel master and camel-2.15.x branches."
0,CAMEL-8801,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Henryk Konsek,Chris Pimlott,0,3,2015-05-26 19:54:08+00:00,2015-06-02 15:02:14+00:00,"The @Bean declaration of CamelContext within CamelAutoConfiguration should be made conditional to allow the user to create it manually if they so desire.  This is useful when converting an application using an existing XML-based camelContext, for example.


This would also make camel-spring-boot more consistent with Spring Boot's policy of non-invasive auto-configuration.


The fix is just to add a conditional annotation on the camelContext method, e.g.:



    @Bean
    @ConditionalOnMissingBean(CamelContext.class)
    CamelContext camelContext(ApplicationContext applicationContext,
                              CamelConfigurationProperties configurationProperties) {","pimlottc:1432641351:2015-05-26T19:55:51.767+0000:1432641351:2015-05-26T19:55:51.767+0000:It would probably make sense to do this for other auto-created beans, such as {{ProducerTemplate}} and {{ConsumerTemplate}}, although I'm not familiar enough with all of them to determine which ones.
pimlottc:1432727098:2015-05-27T19:44:58.013+0000:1432727387:2015-05-27T19:49:47.364+0000:In my case, I'm using a simple FarJarRouter subclass that pulls in a Spring XML context containing a camelContext definition:

{code:java}
@SpringBootApplication
@ImportResource(value = ""classpath:META-INF/spring/camelContext.xml"")
public class CamelApplication extends FatJarRouter {

}
{code}

This gives an exception on startup due to there being two {{CamelContext}} instances defined:

{noformat}

org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [org.apache.camel.CamelContext] is defined: expected single matching bean but found 2: camelContext,transferAndNotify
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:365)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:331)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:968)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:50)
	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:29)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:151)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:128)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:331)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:773)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:483)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:320)
	at org.apache.camel.spring.boot.FatJarRouter.main(FatJarRouter.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.springframework.boot.maven.RunMojo$LaunchRunner.run(RunMojo.java:418)
	at java.lang.Thread.run(Thread.java:744)
{noformat}
githubbot:1432913562:2015-05-29T23:32:42.135+0000:1432913562:2015-05-29T23:32:42.135+0000:GitHub user pimlottc opened a pull request:

    https://github.com/apache/camel/pull/532

    CAMEL-8801 Make spring-boot auto-configuration defer to existing beans

    Only instantiate a CamelContext bean if one does not already exist.  Same with ConsumerTemplate and ProducerTemplate.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pimlottc/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/532.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #532
    
----
commit 89da35368e75f7b18172444a79b5bb2067b9f36c
Author: Chris Pimlott <chris@spartansoftwareinc.com>
Date:   2015-05-26T19:10:27Z

    CAMEL-8801 Make spring-boot auto-configuration defer to existing beans

----

githubbot:1433228280:2015-06-02T14:58:00.146+0000:1433228280:2015-06-02T14:58:00.146+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/532

hekonsek:1433228534:2015-06-02T15:02:14.486+0000:1433228534:2015-06-02T15:02:14.486+0000:Pull request has been merged."
0,CAMEL-8800,Improvement,Major,"2.15.2, 2.16.0","2.15.3, 2.16.0","
None
",Closed,Fixed,"2.15.3, 2.16.0",Willem Jiang,Mark Mindenhall,0,3,2015-05-26 17:25:03+00:00,2015-06-02 19:06:50+00:00,"CAMEL-8621 upgraded kafka from 0.8.1.1 to 0.8.2.0.  The issue mentioned that 0.8.2.1 was available, but the bundle had not yet been created.  The bundle is available, and the upgrade to 0.8.2.1 should be made as soon as possible.  Version 0.8.2.0 had 1 Critical and 3 Blocker bugs that were fixed by 0.8.2.1.  Those bugs can result in crashes and/or loss of data.","davsclaus:1432716232:2015-05-27T16:43:52.707+0000:1432716232:2015-05-27T16:43:52.707+0000:People can just upgrade manually. A version in a Camel pom.xml is not locked version.
davsclaus:1432716254:2015-05-27T16:44:14.165+0000:1432716254:2015-05-27T16:44:14.165+0000:Thanks for reporting and the patch. Willem has upgraded.
acosentino:1433226738:2015-06-02T14:32:18.529+0000:1433226738:2015-06-02T14:32:18.529+0000:It seems that this commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/520295b2

downgrade the kafka dependency to 0.8.2.0.

I've just committed the newest version, 0.8.2.1, once again, with this commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/f91155ed

Just a note to trace the activity.
mmindenhall:1433230577:2015-06-02T15:36:17.658+0000:1433230577:2015-06-02T15:36:17.658+0000:It looks like both the initial commit, and this fix both set the kafka version, but not the kafka bundle version to 0.8.2.1:

{code:xml}
     <jzlib-version>1.1.3</jzlib-version>
-    <kafka-version>0.8.2.0</kafka-version>
+    <kafka-version>0.8.2.1</kafka-version>
     <kafka-bundle-version>0.8.2.0_1</kafka-bundle-version>
     <karaf-version>2.4.2</karaf-version>
{code}

The 0.8.2.1 bundle is available, so that should be:

{code:xml}
     <kafka-bundle-version>0.8.2.1_1</kafka-bundle-version>
{code}
mmindenhall:1433230688:2015-06-02T15:38:08.355+0000:1433230688:2015-06-02T15:38:08.355+0000:Reopening so bundle version can be updated as well.
acosentino:1433243188:2015-06-02T19:06:28.479+0000:1433243203:2015-06-02T19:06:43.589+0000:I've updated the kafka-bundle.

Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/82dd8e19

Willem, I do this update just to close the issue :-)"
0,CAMEL-8799,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Preben Asmussen,0,3,2015-05-26 15:55:13+00:00,2018-01-11 17:07:35+00:00,"It should be possible to suppress exceptions when evaluating JsonPath's.


See http://camel.465427.n5.nabble.com/How-to-suppress-exceptions-from-Jsonpath-expressions-td5767384.html


There are 2 options
1.  Make it the default behaviour, so a null value will be returned instead of throwing an PathNotFoundException when evaluating json path expressions and the path is not found. I have a working patch for that here https://github.com/pax95/camel/commit/e09bd00d9199c88787f0acb0d2ea8c86e6a1bba9 that I can do a PR on.


2. Make it configurable on the JsonPath component so you can enable/disable it on demand. This would also make it possible to expose other options from com.jayway.jsonpath.Option if they make sense. More work is require to make it available as both xml and java dsl.


Currently I'm at bit overloaded to do a PR on 2 if that is the preferred option, so if any want to take over It will be fine.


If option 1 is ok I'll create a PR.","davsclaus:1432702076:2015-05-27T12:47:56.868+0000:1432702076:2015-05-27T12:47:56.868+0000:Ideally we should do #2. But your PR for #1 can likely be reused when doing #2 such as unit tests etc. You are welcome to do the PR.

The DSL needs to be updated in camel-core which is just exposed in
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/language/JsonPathExpression.java

And then likely a change needed to make fluent builders for Java DSL as well. 
githubbot:1432708517:2015-05-27T14:35:17.402+0000:1432708517:2015-05-27T14:35:17.402+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/528

    CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default

    This PR is a solution for option 1 described in the issue, and the tests can be reused in the implementation of option 2.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pax95/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/528.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #528
    
----
commit e09bd00d9199c88787f0acb0d2ea8c86e6a1bba9
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2015-05-26T15:37:28Z

    Make json-path suppress PathNotFoundExceptions by default

----

githubbot:1433112708:2015-06-01T06:51:48.878+0000:1433112708:2015-06-01T06:51:48.878+0000:Github user pax95 closed the pull request at:

    https://github.com/apache/camel/pull/528

githubbot:1515485731:2018-01-09T16:15:31.938+0000:1515485731:2018-01-09T16:15:31.938+0000:yihtserns commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r160451573
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   This comment is 2 years late, but I don't think there's any need to use json-path's internal API?
   
   `Configuration.Builder.build()` will do the same thing internally anyway if no custom `jsonProvider` provided.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1515541780:2018-01-10T07:49:40.116+0000:1515541780:2018-01-10T07:49:40.116+0000:davsclaus commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r160608232
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   @yihtserns you are welcome to provide a PR to fix this

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1515575359:2018-01-10T17:09:19.600+0000:1515575359:2018-01-10T17:09:19.600+0000:davsclaus commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r160740881
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   Thanks I just pushed a fix for this: https://github.com/apache/camel/commit/9e58df3c602f2502333ca0760e1a0baee1c5a909

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1515658619:2018-01-11T16:16:59.449+0000:1515658619:2018-01-11T16:16:59.449+0000:yihtserns commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r160999558
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   I wanted to create a PR, but I'm not very sure of the process.
   
   I read that I have to:
   1. Create a JIRA ticket
   2. Commit and reference that ticket ID in the message
   3. Create a PR
   
   Are the steps correct?  And if it is, will that be too much for some refactoring to remove some duplicated lines?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1515658998:2018-01-11T16:23:18.233+0000:1515658998:2018-01-11T16:23:18.233+0000:davsclaus commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r161001598
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   If its just some cleanup and minor code changes then you do NOT need to create a JIRA ticket. We only use JIRA for normal/bigger things. So in your case, just do the PR

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1515661655:2018-01-11T17:07:35.720+0000:1515661655:2018-01-11T17:07:35.720+0000:yihtserns commented on a change in pull request #528: CAMEL-8799: Make json-path suppress PathNotFoundExceptions by default
URL: https://github.com/apache/camel/pull/528#discussion_r161015777
 
 

 ##########
 File path: components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java
 ##########
 @@ -38,7 +41,8 @@
     private final Configuration configuration;
 
     public JsonPathEngine(String expression) {
-        this.configuration = Configuration.defaultConfiguration();
+        Defaults defaults = DefaultsImpl.INSTANCE;
 
 Review comment:
   👌

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-8798,Bug,Minor,"2.14.2, 2.15.0, 2.15.1, 2.15.2","2.15.3, 2.16.0, 2.14.4","
None
",Resolved,Fixed,"2.15.3, 2.16.0, 2.14.4",Claus Ibsen,Terral Guillaume,0,3,2015-05-26 13:14:56+00:00,2015-05-29 07:43:58+00:00,"I'm currently upgrading from Camel 2.14.1 to 2.15.2, after the upgrade some of my test are failing. 


My route is: 



from(""file:input?idempotent=true&moveFailed=.error"").routeId(""MyRoute"")
        .choice()
             .when(body().isEqualTo(""body1""))
                 .log(""body1"")
             .otherwise()
                .log(""notBody1"")
       .end()
 



My test contains : 



camelContext.getRouteDefinition(""MyRoute"").adviceWith(camelContext, new AdviceWithRouteBuilder() {
            @Override
            public void configure() {
                weaveAddLast().to(mockOutput);
            }
        });




The weaveAddLast is failing with the following stackTrace: 



java.lang.UnsupportedOperationException 
        at java.util.AbstractList.add(AbstractList.java:148) 
        at org.apache.camel.builder.AdviceWithTasks$4.task(AdviceWithTasks.java:298) 
        at org.apache.camel.model.RouteDefinition.adviceWith(RouteDefinition.java:270) 




After some debug I found that when my route and with a Choice I cannot weaveAddLast the route. 
When the AdviceWithTasks task method try to add the outputs (here) the implementation of the list return by the ChoiceDefinition class does not implements the method add(int,Object) then we have the UnsupportedOperation 


The difference between 2.14.1 and 2.15.2 is that in the AdviceWithTasks the outputs list where the weaveAddLast try to find the last Processor to add the outputs is not a list returned by ChoiceDefinition but it's a list with the Logs processor. 


This difference is there because now in 2.15.2 the method that is going through the route to retrieve the outputs nodes have a maximum depth which is computed here


When my route have finish with a ChoiceDefinition the maximum depth computed is only 1 then I cannot have my logs in outputs an the weaveAddLast have in his list only the ChoiceDefinition.",davsclaus:1432856637:2015-05-29T07:43:57.983+0000:1432856637:2015-05-29T07:43:57.983+0000:Thanks for reporting.
0,CAMEL-8797,Bug,Major,None,None,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,Calle Kabo,0,2,2015-05-26 07:05:11+00:00,2015-05-29 08:40:14+00:00,"I have a byte[] containing an XML.



<log message=""Body is '${in.body.getClass.getCanonicalName}'"" loggingLevel=""DEBUG""/>
<log message=""Body = '${in.body}'"" loggingLevel=""DEBUG""/>
                            <choice>
                                <when>
                                    <simple>${in.body} is &#39;java.io.File&#39;</simple>
                                    <setHeader headerName=""CamelAwsS3ContentLength"">
                                        <simple>${file:size}</simple>
                                    </setHeader>
                                </when>
                                <otherwise>
                                    <setHeader headerName=""CamelAwsS3ContentLength"">
                                        <simple>${in.body.length}</simple>
                                    </setHeader>
                                </otherwise>
                            </choice>
<log message=""Body length = ${in.header.CamelAwsS3ContentLength}"" loggingLevel=""DEBUG""/>




The above code outputs the following in the logs:



Body is 'byte[]'
Body = '<?xml version=""1.0"" encoding=""ISO-8859-1""?><root> /... bla bla bla .../ </root>'
Body length = 1




Using Camel 2.14.0.","davsclaus:1432629710:2015-05-26T16:41:50.622+0000:1432629710:2015-05-26T16:41:50.622+0000:It may be due to stream caching
http://camel.apache.org/stream-caching.html
davsclaus:1432629826:2015-05-26T16:43:46.807+0000:1432629826:2015-05-26T16:43:46.807+0000:Cannot reproduce
https://github.com/apache/camel/commit/7f0f97a8eed922e61674a86d5ca6d30f712fab8e
emancalle:1432680681:2015-05-27T06:51:21.077+0000:1432680681:2015-05-27T06:51:21.077+0000:Perhaps I should have mentioned that the input was a ActiveMQBytesMessage. Could ActiveMQBytesMessage end up as a read once, thus in need of stream caching?
davsclaus:1432681016:2015-05-27T06:56:56.462+0000:1432681016:2015-05-27T06:56:56.462+0000:Yes certainly its stream based
https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java
emancalle:1432681584:2015-05-27T07:06:24.889+0000:1432681584:2015-05-27T07:06:24.889+0000:Hmm, I see that was already enabled.
{code}
    <camel:camelContext errorHandlerRef=""dlcErrorHandler"" xmlns=""http://camel.apache.org/schema/spring""
                        id=""the.id.here""
                        streamCache=""true"">
{code}
davsclaus:1432682195:2015-05-27T07:16:35.553+0000:1432682195:2015-05-27T07:16:35.553+0000:Its not a InputStream and therefore not cacheable by stream caching in Camel.

You should likely use this method to get the length
https://github.com/apache/activemq/blob/master/activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java#L197
emancalle:1432682797:2015-05-27T07:26:37.283+0000:1432682853:2015-05-27T07:27:33.024+0000:I was thinking the exact same thing :)
But is it possible to get to that function using simple? Something like
{code}
${in.getBodyLength}
{code}
? Only that doesn't seem to work...
davsclaus:1432683527:2015-05-27T07:38:47.490+0000:1432683527:2015-05-27T07:38:47.490+0000:Use

{code}
${in.body.getBodyLength()}
{code}

Or as its a getter you can use shorthand

{code}
${in.body.bodyLength}
{code}

emancalle:1432683844:2015-05-27T07:44:04.316+0000:1432683844:2015-05-27T07:44:04.316+0000:Well, that didn't work as expected.
{code}
Failed delivery for (MessageId: messageid on ExchangeId: ID-vurten-centos-demo-1-37698-1432712384273-0-7). On delivery attempt: 0 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .bodyLength on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: bodyLength on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: bodyLength not found on bean: [B@1d4b808d of type: [B. Exchange[JmsMessage[JmsMessageID: ID:vurten-centos-demo-1-60101-1432710490465-5:2:1:1:1]]
{code}
Perhaps there has been some <convertBodyTo type=""byte[]"" /> earlier somewhere.

But now I have more to go on. Many thanks for your assistance! 
emancalle:1432685621:2015-05-27T08:13:41.903+0000:1432685621:2015-05-27T08:13:41.903+0000:Sorry, I'm back again...
I made this test:
{code}
            <setBody>
                <simple resultType=""byte[]"">this is the new body</simple>
            </setBody>
            <log message=""RECEIVED2, body length = '${in.body.length}'"" loggingLevel=""DEBUG""/>
            <log message=""RECEIVED2, body = '${in.body}'"" loggingLevel=""DEBUG""/>
            <log message=""RECEIVED2, body is '${in.body.getClass.getCanonicalName}'"" loggingLevel=""DEBUG""/>
{code}
and get this output:
{code}
RECEIVED2, body length = '1'
RECEIVED2, body = 'this is the new body'
RECEIVED2, body is 'byte[]'
{code}

Surely this can not be a stream issue? I mean the body is hardcoded here.
I'm using XML instead of java, could that be a problem?

Also, this is using Camel 2.14.0. I'm going to try it with Camel 2.14.2 next.
emancalle:1432686412:2015-05-27T08:26:52.259+0000:1432686412:2015-05-27T08:26:52.259+0000:Got the same result in 2.14.2. I'll see if I can run this in camel 2.15.2 as well.
emancalle:1432687032:2015-05-27T08:37:12.409+0000:1432687032:2015-05-27T08:37:12.409+0000:Yup, got the same result in 2.15.2. Weird...
emancalle:1432688053:2015-05-27T08:54:13.688+0000:1432688053:2015-05-27T08:54:13.688+0000:In order to eliminate any other errors I stripped out anything unnecessary from the camel-context.xml and ended up with this:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       ""
        >

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

    <camel:camelContext xmlns=""http://camel.apache.org/schema/spring""
                        id=""the.id""
                        streamCache=""true"">

        <route id=""InitialRoute"" startupOrder=""1001"">
            <from uri=""activemq:queue:ShipmentManagement.FromPartner.FromPartner?acknowledgementModeName=CLIENT_ACKNOWLEDGE&amp;clientId=ShipmentManagement.FromPartner.PartnerShipmentToCanonical"" />
            <setBody>
                <simple resultType=""byte[]"">this is the new body</simple>
            </setBody>
            <log message=""RECEIVED2, body length = '${in.body.length}'"" loggingLevel=""DEBUG""/>
            <log message=""RECEIVED2, body = '${in.body}'"" loggingLevel=""DEBUG""/>
            <log message=""RECEIVED2, body is '${in.body.getClass.getCanonicalName}'"" loggingLevel=""DEBUG""/>

            <to uri=""activemq:queue:ShipmentManagement.FromPartner.Canonical""/>
        </route>

    </camel:camelContext>
</beans>
{code}

I still get the exact same output. I'm attaching the debug.log.
emancalle:1432688244:2015-05-27T08:57:24.122+0000:1432688244:2015-05-27T08:57:24.122+0000:Oh, and if I try to use 
{code}
${in.body.bodyLength}
{code}
instead of
{code}
${in.body.length}
{code}
in the above camel-context.xml, I get
{code}
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .bodyLength on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: bodyLength on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: bodyLength not found on bean: [B@186ebdb9 of type: [B. Exchange[Message: this is the new body]
{code}
emancalle:1432860014:2015-05-29T08:40:14.115+0000:1432860014:2015-05-29T08:40:14.115+0000:[~davsclaus], would you consider reopening this issue given the new information I've provided? Is there anything else I can provide you with to assist you?"
0,CAMEL-8796,Bug,Minor,"2.14.0, 2.14.1, 2.14.2, 2.15.0, 2.15.1, 2.15.2","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,ayache khettar,0,2,2015-05-25 10:13:23+00:00,2015-06-05 09:55:52+00:00,"Schematron component requires Saxon, rules loader requires class loader of this component to work in OSGI environment.  See discussion here: http://camel.465427.n5.nabble.com/Schematron-component-Not-supported-http-saxon-sf-net-feature-linenumbering-td5766887.html","akhettar:1432520094:2015-05-25T10:14:54.198+0000:1432520094:2015-05-25T10:14:54.198+0000:I can't assign this to myself. I am working on patch fix for this hopefully I should get it resolved today. I will create a pull request once done.

Ayache
githubbot:1433158246:2015-06-01T19:30:46.117+0000:1433158246:2015-06-01T19:30:46.117+0000:GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/537

    Handling resources loading in OSGI environment

    This pull request is in relation to the following Jira ticket: https://issues.apache.org/jira/browse/CAMEL-8796
    Hopefully this change should go to all camel releases from version 14.0.0 onwards.
    
    Thanks

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/537.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #537
    
----
commit 82d6e60d07a017faa48af3c99d47a036979c3699
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-03-24T11:12:20Z

    * component creates its own instance only if it's not provided
    * ability to reference the instance by its name

commit 20b416788a0f52f45437967e7b962f53cb7400e7
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-03-25T11:27:39Z

    Adding a check if the hazelcastInstanceName parameter is present or not before querying the cluster.

commit 28e4371a74f6f35b1bda415e113178c43a5d6388
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-01T19:18:19Z

    Handling resource loading in OSGI environment

commit e84c13f43aff9de32a70a0bfbfde97b6ded19f20
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-01T19:22:21Z

    Merge remote-tracking branch 'upstream/master'
    
    Conflicts:
    	components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/HazelcastComponent.java
    	components/camel-schematron/src/main/java/org/apache/camel/component/schematron/SchematronEndpoint.java

----

akhettar:1433158329:2015-06-01T19:32:09.938+0000:1433158329:2015-06-01T19:32:09.938+0000:Let me know if you need any help in porting the changes to all the versions.

Thanks

Ayache
githubbot:1433203549:2015-06-02T08:05:49.848+0000:1433203549:2015-06-02T08:05:49.848+0000:Github user akhettar closed the pull request at:

    https://github.com/apache/camel/pull/537

githubbot:1433204424:2015-06-02T08:20:24.917+0000:1433204424:2015-06-02T08:20:24.917+0000:GitHub user akhettar opened a pull request:

    https://github.com/apache/camel/pull/538

    Adding support for resource loading in OSGI environment

    Hi Claus,
    
    Sorry about the hazelcast mix up, it's now a clean pull request
    
    https://issues.apache.org/jira/browse/CAMEL-8796
    
    Ayache

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/akhettar/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/538.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #538
    
----
commit 39d7f3f53c491826383443dc674796d7fcf1b702
Author: Ayache Khettar <ayache@zotix-consulting.co.uk>
Date:   2015-06-02T08:18:07Z

    Handling resources loading in OSGI environment

----

githubbot:1433467244:2015-06-05T09:20:44.725+0000:1433467244:2015-06-05T09:20:44.725+0000:Github user akhettar closed the pull request at:

    https://github.com/apache/camel/pull/538

akhettar:1433467387:2015-06-05T09:23:07.728+0000:1433467387:2015-06-05T09:23:07.728+0000:Hi

Could you let me know when the affected versions are updated?

Regards,

Ayache"
0,CAMEL-8795,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Álvaro García Delgado,0,3,2015-05-25 08:57:16+00:00,2015-05-27 14:08:34+00:00,"Camel-kafka uses a kafka built with scala 2.10, so it becomes incompatible when used in a scala 2.11 project in runtime:



A needed class was not found. This could be due to an error in your runpath. Missing class: scala/collection/GenTraversableOnce$class
java.lang.NoClassDefFoundError: scala/collection/GenTraversableOnce$class




It seems to be solved excluding the kafka 2.10 dependency and adding the 2.11 version but I am afraid it could bring up new problems. 
Thanks, Álvaro","njiang:1432518931:2015-05-25T09:55:31.263+0000:1432518931:2015-05-25T09:55:31.263+0000:I don't think camel-karaf can work with Scala 2.11. 
Current camel-karaf just made the dependency of scala language to be provided which means you need to specify the scala version (2.10.x) yourself, when you use camel-karaf. 
algd:1432524493:2015-05-25T11:28:13.913+0000:1432524493:2015-05-25T11:28:13.913+0000:Sorry I didn't mean replacing scala library but kafka module (from kafka_2.10 to kafka_2.11) so it can be used with scala 2.11.
davsclaus:1432628849:2015-05-26T16:27:29.365+0000:1432628849:2015-05-26T16:27:29.365+0000:Ah yeah we can upgrade to Scala 2.11, a PR or patch is welcome
njiang:1432684141:2015-05-27T07:49:01.706+0000:1432684141:2015-05-27T07:49:01.706+0000:Got it, I just updated the maven dependency and ran test ,  everything looks fine.
I will commit a quick fix for it shortly.
njiang:1432706914:2015-05-27T14:08:34.310+0000:1432706914:2015-05-27T14:08:34.310+0000:Applied the patch into camel master branch."
0,CAMEL-8794,Improvement,Major,2.15.2,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Willem Jiang,0,2,2015-05-25 02:50:31+00:00,2015-06-12 14:04:08+00:00,"As CamelSwaggerServlet need to access the JMX to dump the RestDefinition, and the JMX server could be guarded by the container. We need to support to set the username and password for accessing the JMX service.","chmj:1433819191:2015-06-09T11:06:31.412+0000:1433819191:2015-06-09T11:06:31.412+0000:Any idea how? 
njiang:1433820550:2015-06-09T11:29:10.683+0000:1433820550:2015-06-09T11:29:10.683+0000:Current Camel access the JMX agent by using the in process connection, which means the JMX agent doesn't need to create a connector for connection.
If we want the username, password work, we need to setup the JMX connector for JMX agent in the Camel context.
njiang:1434089026:2015-06-12T14:03:46.307+0000:1434089026:2015-06-12T14:03:46.307+0000:It can be address by KARAF-3147 in another way."
0,CAMEL-8793,Bug,Major,2.15.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Mateusz Nowakowski,0,2,2015-05-23 13:29:07+00:00,2015-09-29 07:13:40+00:00,"Scenario:



used  Camel spring with <camelContext id=""flows"" xmlns=""http://camel.apache.org/schema/spring"" />




camelContext is used by some internal bean to expose an api to register routes for other thread




Spring hasn't finished  initializing beans from the spring context contains Spring Camel context




different thread starts using an api - calling indirectly Spring Camel context to register routes




Camel context in order to add route get locks: camel context, spring singleton lock (due to spring registry), but initial thread starting Spring context get lock: spring singleton lock, camel context... causing deadlock.



Workaround:



create and start DefaultCamelContext without Spring Registry.




Found one Java-level deadlock:
=============================
""localhost-startStop-6"":
  waiting to lock monitor 0xf350f544 (object 0x7e04a668, a org.apache.camel.spring.SpringCamelContext),
  which is held by ""lifecycleWorker6""
""lifecycleWorker6"":
  waiting to lock monitor 0xf33ecc84 (object 0x7f01dc70, a java.util.concurrent.ConcurrentHashMap),
  which is held by ""localhost-startStop-6""

Java stack information for the threads listed above:
===================================================
""localhost-startStop-6"":
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:767)
	- waiting to lock <0x7e04a668> (a org.apache.camel.spring.SpringCamelContext)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:397)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:311)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:731)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:728)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:728)
	at com.blablabla.BlaBlaRegistrar.registerBlaBlas(BlaBlaRegistrar.java:50)	
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:349)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:300)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:133)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:408)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1558)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	- locked <0x7f01dc70> (a java.util.concurrent.ConcurrentHashMap)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	- locked <0x7d8b79b0> (a java.lang.Object)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4887)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5381)
	- locked <0x7b9bde78> (a org.apache.catalina.core.StandardContext)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	- locked <0x7b9bde78> (a org.apache.catalina.core.StandardContext)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
	at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977)
	at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1655)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
""lifecycleWorker6"":
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:188)
	- waiting to lock <0x7f01dc70> (a java.util.concurrent.ConcurrentHashMap)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:487)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:519)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:512)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1052)
	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:228)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.findByTypeWithName(ApplicationContextRegistry.java:85)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.findByTypeWithName(PropertyPlaceholderDelegateRegistry.java:70)
	at org.apache.camel.processor.interceptor.DefaultChannel.getOrCreateBacklogDebugger(DefaultChannel.java:372)
	at org.apache.camel.processor.interceptor.DefaultChannel.initChannel(DefaultChannel.java:235)
	at org.apache.camel.model.ProcessorDefinition.wrapChannel(ProcessorDefinition.java:273)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:440)
	at org.apache.camel.model.ProcessorDefinition.createOutputsProcessor(ProcessorDefinition.java:163)
	at org.apache.camel.model.OnExceptionDefinition.addRoutes(OnExceptionDefinition.java:193)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1025)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:185)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:841)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2895)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:775)
	- locked <0x7e04a668> (a org.apache.camel.spring.SpringCamelContext)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:397)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:311)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:731)
	at org.apache.camel.impl.DefaultCamelContext$1.call(DefaultCamelContext.java:728)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2486)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:728)
	at com.blablabla.BlaBlaRegistrar.registerBlaBlas(BlaBlaRegistrar.java:50)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)

Found 1 deadlock.",davsclaus:1443482013:2015-09-29T07:13:33.286+0000:1443482013:2015-09-29T07:13:33.286+0000:You should ideally add the routes the standard way. Or add them after Camel has started.
0,CAMEL-8792,Bug,Major,2.15.2,,"
None
",Resolved,Invalid,None,Willem Jiang,黄颜木,0,3,2015-05-22 10:03:06+00:00,2015-05-26 16:29:04+00:00,"1. when just use sqlComponents ,its okay. 
2. I try to just run the sql one times,so add timer//foo?repeatCount=1
error happend.  


Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .mainid on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: mainid on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: mainid not found on bean: [com.ofbizian.CategoryBean@bbf16e, 


my code goes here:
----------------------------------------------------------------------------
...
 42
 43   <bean id=""categoryBean"" class=""com.ofbizian.CategoryBean""/>
 44
...
 53     <route id=""encoderCategory-route"">
 54       <!-- 仅运行一次-->
 55       <from uri=""timer://foo?repeatCount=1""/>
 56       <to uri=""sql:sql.selectCategory?outputClass=com.ofbizian.CategoryBean""/>
...","njiang:1432271443:2015-05-22T13:10:43.782+0000:1432271443:2015-05-22T13:10:43.782+0000:The message body is list, camel has trouble to find the right instance to invoke.
Can you just put the first element of the list into the message body?
fustic:1432279658:2015-05-22T15:27:38.784+0000:1432279658:2015-05-22T15:27:38.784+0000:okay,I will try. 3x for ur answer.
fustic:1432322226:2015-05-23T03:17:06.080+0000:1432322226:2015-05-23T03:17:06.080+0000:I add the  outputType=SelectOne;

<from uri=""timer://foo?repeatCount=1""/>
 <to uri=""sql:{{sql.selectCategory}}?outputType=SelectOne&outputClass=com.ofbizian.CategoryBean""/>

get the error message below:

Caused by: org.xml.sax.SAXParseException; lineNumber: 60; columnNumber: 75; 对实体 ""outputClass"" 的引用必须以 ';' 分隔符结尾。

fustic:1432337412:2015-05-23T07:30:12.664+0000:1432337412:2015-05-23T07:30:12.664+0000:how to use outputType=SelectOne with outputClass=xxx.xxxxBean?
here is my code. but that not work. can you give me an example?
 
<from uri=""timer:foo?repeatCount=1""/>
<to uri=""sql:{{sql.selectCategory}}?outputType=SelectOne&outputClass=com.ofbizian.CategoryBean""/>

fustic:1432339635:2015-05-23T08:07:15.402+0000:1432339635:2015-05-23T08:07:15.402+0000:I try to set one record to the body, still not work.

<from uri=""timer:foo?repeatCount=1""/>
<to uri=""sql:sql.selectCategory?outputClass=com.ofbizian.CategoryBean""/>

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
        Id                  ID-localhost-localdomain-44340-1432368273830-0-2
        ExchangePattern     InOnly
        Headers             {breadcrumbId=ID-localhost-localdomain-44340-1432368273830-0-1, CamelRedelivered=false, CamelRedeliveryCounter=0, CamelSqlRowCount=1, firedTime=Sat May 23 16:04:35 CST 2015}
        BodyType            java.util.ArrayList
        Body                [com.ofbizian.CategoryBean@590e7e]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .mainid
njiang:1432519984:2015-05-25T10:13:04.457+0000:1432519984:2015-05-25T10:13:04.457+0000:As there are more then one CategorgyBean returned, the message body is an array list.
You use splitter to do split the message body just like this
{code}
<from uri=""timer:foo?repeatCount=1""/>
<to uri=""sql:sql.selectCategory?outputClass=com.ofbizian.CategoryBean""/>
<split>
   <simple>${body}</simple>
   <!-- you can do your work here -->
   <to uri=""mock:result""/>
</split>
{code}
davsclaus:1432628944:2015-05-26T16:29:04.210+0000:1432628944:2015-05-26T16:29:04.210+0000:Please use the user forum or mailing list to get help with using Camel."
0,CAMEL-8791,Bug,Major,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Vaclav Chalupa,0,2,2015-05-22 09:37:31+00:00,2015-05-28 04:56:33+00:00,"SEVERE [http-nio-8080-exec-2] org.apache.catalina.core.StandardWrapperValve.invoke Servlet.service() for servlet [ApiDeclarationServlet] in context with path [/camel-example-servlet-rest-tomcat] threw exception
 java.lang.NullPointerException
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:190)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$createParameters$2.apply(RestSwaggerReader.scala:179)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.Iterator$class.foreach(Iterator.scala:727)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at org.apache.camel.component.swagger.RestSwaggerReader.createParameters(RestSwaggerReader.scala:179)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$read$2.apply(RestSwaggerReader.scala:123)
	at org.apache.camel.component.swagger.RestSwaggerReader$$anonfun$read$2.apply(RestSwaggerReader.scala:70)
	at scala.collection.TraversableLike$WithFilter$$anonfun$foreach$1.apply(TraversableLike.scala:772)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)
	at scala.collection.TraversableLike$WithFilter.foreach(TraversableLike.scala:771)
	at org.apache.camel.component.swagger.RestSwaggerReader.read(RestSwaggerReader.scala:70)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1$$anonfun$apply$1.apply(RestApiListingCache.scala:42)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1$$anonfun$apply$1.apply(RestApiListingCache.scala:41)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1.apply(RestApiListingCache.scala:41)
	at org.apache.camel.component.swagger.RestApiListingCache$$anonfun$listing$1.apply(RestApiListingCache.scala:38)
	at scala.Option.orElse(Option.scala:257)
	at org.apache.camel.component.swagger.RestApiListingCache$.listing(RestApiListingCache.scala:38)
	at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.renderResourceListing(RestSwaggerApiDeclarationServlet.scala:171)
	at org.apache.camel.component.swagger.RestSwaggerApiDeclarationServlet.doGet(RestSwaggerApiDeclarationServlet.scala:98)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.camel.component.swagger.RestSwaggerCorsFilter.doFilter(RestSwaggerCorsFilter.scala:44)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)","davsclaus:1432717005:2015-05-27T16:56:45.537+0000:1432717005:2015-05-27T16:56:45.537+0000:You must be using 2.16-SNAPSHOT as that code in 2.15.x is working
davsclaus:1432717030:2015-05-27T16:57:10.231+0000:1432717030:2015-05-27T16:57:10.231+0000:And the stacktrace does not match 2.15.x. It only matches 2.16-SNAPSHOT
vchalupa:1432760193:2015-05-28T04:56:33.204+0000:1432760193:2015-05-28T04:56:33.204+0000:Sorry, it is 2.16-SNAPSHOT."
0,CAMEL-8790,Improvement,Major,"2.14.2, 2.15.2, 2.16.0","2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Mark Mindenhall,0,3,2015-05-22 02:39:29+00:00,2015-07-16 16:10:57+00:00,"Kafka natively supports two encoders for messages:



kafka.serializer.DefaultEncoder - encodes as byte arrays
kafka.serializer.StringEncoder - encodes as Strings



Camel-kafka exposes settings to select the encoder ((serializerClass and keySerializerClass), but the org.apache.camel.component.kafka.KafkaProducer class hard-codes String for both the key and value types.  This results in a ClassCastException when using the DefaultDecoder.


The attached patch fixes this as follows (conforming to kafka itself):



If no serializerClass option is specified, the DefaultDecoder is used.
If no keySerializerClass option is specified, the same encoder as serializerClass is used



This fix shouldn't break any existing code, as there was not previously a default setting (i.e., StringEncoder always had to be specified).


I created the patch against master, but it should backport easily to 2.15.x and 2.14.x.","mmindenhall:1432238448:2015-05-22T04:00:48.106+0000:1432632349:2015-05-26T17:25:49.062+0000:When you apply this patch, please also upgrade the kafka version to 0.8.2.1.  I believe there were some serious bugs in 0.8.2.0, which is why 0.8.2.1 was released so quickly. Edit:  I created CAMEL-8800 to address this.
mmindenhall:1434965632:2015-06-22T17:33:52.269+0000:1434965632:2015-06-22T17:33:52.269+0000:Any timeframe on merging this?  Also, I noticed the fix version is 2.16.0 only...please merge into 2.15.x as well.  Thanks!

njiang:1435009331:2015-06-23T05:42:11.215+0000:1435009331:2015-06-23T05:42:11.215+0000:It's a new feature, we normally don't add a new feature to the patched release branch.
I will take a look at this issue this week.
mmindenhall:1436967970:2015-07-15T21:46:10.031+0000:1436967970:2015-07-15T21:46:10.031+0000:[~njiang], [~davsclaus]: I would really like to have this in 2.15.3.  I think this is definitely more of a fix than a new feature.  The camel-kafka component didn't support kafka's {{DefaultEncoder}} prior to this patch.  This would be comparable to the camel-http4 component supporting https (non-default), but not http (default).   

So prior to this patch, the only way to use the component was to specify {{serializerClass=kafka.serializer.StringEncoder}}.  Leaving {{serializerClass}} unspecified would result in an error.  This can be verified by removing the {{serializerClass}} option in {{org.apache.camel.component.kafka.KafkaProducerFullTest}}, then running the test.  

With this patch, leaving {{serializerClass}} unspecified will use the {{DefaultEncoder}}.  Since {{serializerClass}} previously always had to be specified (and specified as {{kafka.serializer.StringEncoder}}) for the component to work, the behavior is unchanged for anyone using the component in their project.  Also note that all of the existing tests still pass with this patch, and I have added new tests for the {{DefaultEncoder}}.

Thanks,
Mark

davsclaus:1437032759:2015-07-16T15:45:59.961+0000:1437032759:2015-07-16T15:45:59.961+0000:Thanks for reporting and the patch.
mmindenhall:1437034257:2015-07-16T16:10:57.460+0000:1437034257:2015-07-16T16:10:57.460+0000:Thanks for getting that into 2.15.3!"
0,CAMEL-8789,Bug,Major,2.15.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Amit Patel,0,4,2015-05-21 17:27:25+00:00,2016-04-20 13:03:54+00:00,"http://camel.465427.n5.nabble.com/websocket-with-jetty-9-tp5766712p5767217.html


I did try websocket component with jetty 9 and Apache Camel 2.15.2 and i got  same exception due to  SslContextFactory  class  moved in jetty 9 to  org.eclipse.jetty.util.ssl.folder and Apache  websocket 
reference to  org.eclipse.jetty.http.ssl.SslContextFactory  that is only  exist in Jetty 8 and below version.","njiang:1432226380:2015-05-22T00:39:40.282+0000:1432226380:2015-05-22T00:39:40.282+0000:Just add the other task which is related to Jetty9 upgrade.
jarslanian:1453727604:2016-01-25T21:13:24.308+0000:1453727604:2016-01-25T21:13:24.308+0000:Is there any ETA on this?  I checked out the master branch and it looks to still be setup for jetty 8 in the camel-websocket component pom.  I am working on a decision on what to do about lack of support for Jetty 9 websockets.
davsclaus:1453954945:2016-01-28T12:22:25.215+0000:1453954945:2016-01-28T12:22:25.215+0000:Yeah we love contributions, so people is welcome to help migrate camel-websocket to be jetty 9.
jarslanian:1454316778:2016-02-01T16:52:58.743+0000:1454316778:2016-02-01T16:52:58.743+0000:We are now leaning toward fixing this ourselves.  Has anyone done any initial assessment for the level of effort of this task?  This would be my first time working with any of the camel source code, if there is any information or guidance you can provide on getting started on this that would be much appreciated.
davsclaus:1454328753:2016-02-01T20:12:33.855+0000:1454328753:2016-02-01T20:12:33.855+0000:See here how to contribute
http://camel.apache.org/contributing
davsclaus:1455871469:2016-02-19T16:44:29.677+0000:1455871469:2016-02-19T16:44:29.677+0000:This is massive work, moving to next release where we drop jetty8"
0,CAMEL-8788,Bug,Major,2.15.2,,"

documentation
http
httpclient

",Closed,Fixed,None,Unassigned,Torsten Mielke,0,2,2015-05-21 14:27:41+00:00,2015-05-22 08:23:31+00:00,"The documentation of the camel-http component implies there is full support for NTLM. 


However tests against IIS 8 prove this wrong.
Further from http://hc.apache.org/httpclient-3.x/authentication.html#NTLM


""NT Lan Manager (NTLM) authentication is a proprietary, closed challenge/response authentication protocol for Microsoft Windows. Only some details about NTLM protocol are available through reverse engineering. HttpClient provides limited support for what is known as NTLMv1, the early version of the NTLM protocol. HttpClient does not support NTLMv2 at all. ""


These limitations on NTLM should be documented on the camel-http component doc.","tmielke:1432189770:2015-05-21T14:29:30.325+0000:1432189901:2015-05-21T14:31:41.753+0000:I could imagine a comment like the following being added to the ""Authentication and Proxy"" section of the camel-http documentation.

{quote}
Note: camel-http is based on HttpClient v3.x and as such has only [limited support|http://hc.apache.org/httpclient-3.x/authentication.html#NTLM] for what is known as NTLMv1, the early version of the NTLM protocol. It does not support NTLMv2 at all.""
{quote}


I am happy to add this note to the documentation if there is agreement.
davsclaus:1432190086:2015-05-21T14:34:46.829+0000:1432190086:2015-05-21T14:34:46.829+0000:+1 go ahead Torsten we love contributions
tmielke:1432195092:2015-05-21T15:58:12.485+0000:1432195092:2015-05-21T15:58:12.485+0000:Resolved with revision 88 of 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=54726"
0,CAMEL-8787,Bug,Major,2.12.1,,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,Jean-Baptiste Onofré,0,2,2015-05-21 12:55:54+00:00,2015-07-09 09:47:53+00:00,"If we have a blueprint bundle containing the following:



OSGI-INF/blueprint/context1.xml containing:




<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
                <route id=""route1"">
                        <from uri=""direct-vm:route1""/><to uri=""log:route1""/>
                </route>
        </camelContext>
        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
                <route id=""route2"">
                        <from uri=""direct-vm:route2""/><to uri=""log:route2""/>
                </route>
        </camelContext>

</blueprint>





OSGI-INF/blueprint/context2.xml containing:




<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
                <route id=""route3"">
                        <from uri=""direct-vm:route3""/><to uri=""log:route3""/>
                </route>
        </camelContext>
        <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
                <route id=""route4"">
                        <from uri=""direct-vm:route4""/><to uri=""log:route4""/>
                </route>
        </camelContext>

</blueprint>




However, when deploying this bundle, only the first CamelContext (containing route1) is registered as an OSGi service:



karaf@trun> ls 197

multicontext (197) provides:
----------------------------
objectClass = org.osgi.service.blueprint.container.BlueprintListener
service.id = 383
----
camel.context.name = 197-camel-6
camel.context.symbolicname = jbonofre.multicontext
camel.context.version = 1.0.0.SNAPSHOT
objectClass = org.apache.camel.CamelContext
service.id = 384
----
objectClass = org.osgi.service.blueprint.container.BlueprintListener
service.id = 385
----
objectClass = org.osgi.service.blueprint.container.BlueprintListener
service.id = 386
----
objectClass = org.osgi.service.blueprint.container.BlueprintListener
service.id = 387
----
osgi.blueprint.container.version = 1.0.0.SNAPSHOT
osgi.blueprint.container.symbolicname = jbonofre.multicontext
objectClass = org.osgi.service.blueprint.container.BlueprintContainer
service.id = 388




All CamelContexts and routes should register the corresponding OSGi services.","davsclaus:1436406437:2015-07-09T09:47:17.294+0000:1436406437:2015-07-09T09:47:17.294+0000:Works fine in newer release such as 2.16
{code}
karaf@root> camel:context-list
 Context        Status         Uptime
 -------        ------         ------
 camel-1        Started        41.367 seconds
 camel-2        Started        41.002 seconds
karaf@root> camel:route-list
 Context        Route          Status
 -------        -----          ------
 camel-1        route1         Started
 camel-2        route2         Started
karaf@root> ls 78

Bundle 78 provides:
-------------------
objectClass = [org.osgi.service.blueprint.container.BlueprintListener]
service.id = 414
----
camel.context.managementname = myapp.xml
camel.context.name = camel-1
camel.context.symbolicname = myapp.xml
camel.context.version = 0.0.0
objectClass = [org.apache.camel.CamelContext]
service.id = 415
----
objectClass = [org.osgi.service.blueprint.container.BlueprintListener]
service.id = 416
----
camel.context.managementname = myapp.xml-1
camel.context.name = camel-2
camel.context.symbolicname = myapp.xml
camel.context.version = 0.0.0
objectClass = [org.apache.camel.CamelContext]
service.id = 417
----
objectClass = [org.osgi.service.blueprint.container.BlueprintContainer]
osgi.blueprint.container.symbolicname = myapp.xml
osgi.blueprint.container.version = 0.0.0
service.id = 418
karaf@root>
{code}

davsclaus:1436406473:2015-07-09T09:47:53.736+0000:1436406473:2015-07-09T09:47:53.736+0000:eg using the first xml file that has 2 camel contexts"
0,CAMEL-8786,Bug,Minor,"2.14.2, 2.15.2","2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-05-21 06:34:04+00:00,2015-05-21 14:21:20+00:00,"CamelServletContextListener always complains, even the parameter is quite useful. 



There are 1 ServletContext init parameters, unknown to Camel. Maybe they are  used by other frameworks? [{routeBuilder-routes=com.mycompany.MyRoute}]




There is the mail thread  about it","njiang:1432189280:2015-05-21T14:21:20.457+0000:1432189280:2015-05-21T14:21:20.457+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8785,Bug,Major,2.14.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-05-21 03:16:26+00:00,2015-05-21 06:53:45+00:00,"Testing a route including camel's custom InterceptStrategy, http://camel.apache.org/intercept.html, got a StackOverFlowError as below,



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Test]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:283)
at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:381)
at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
Caused by: java.lang.StackOverflowError
at java.lang.ThreadLocal$ThreadLocalMap.nextIndex(ThreadLocal.java:313)
at java.lang.ThreadLocal$ThreadLocalMap.expungeStaleEntry(ThreadLocal.java:563)
at java.lang.ThreadLocal$ThreadLocalMap.remove(ThreadLocal.java:461)
at java.lang.ThreadLocal$ThreadLocalMap.access$200(ThreadLocal.java:261)
at java.lang.ThreadLocal.remove(ThreadLocal.java:202)




The stack shows me StackOverFlowError on the org.apache.camel.processor.InterceptorToAsyncProcessorBridge.process() for the affected camel versions.","njiang:1432149516:2015-05-21T03:18:36.525+0000:1432149516:2015-05-21T03:18:36.525+0000:As the Custom InterceptStrategy could introduce a cycle to processor chain, that lead to the StackOverFlowError.
We need to avoid this cycle when setup the InterceptorToAsyncProcessorBridge.
njiang:1432162425:2015-05-21T06:53:45.807+0000:1432162425:2015-05-21T06:53:45.807+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8784,Bug,Major,"2.14.2, 2.15.2","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-05-20 11:52:32+00:00,2015-05-21 02:50:41+00:00,"org.apache.camel.scala.dsl.SAbstractDefinition just return this instance when calling ""Policy, Validate, Wiretap"" scala DSL, it cause the same issue of CAMEL-8783","njiang:1432147841:2015-05-21T02:50:41.956+0000:1432147841:2015-05-21T02:50:41.956+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x."
0,CAMEL-8783,Bug,Major,2.15.2,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Willem Jiang,François LAROCHE,0,3,2015-05-19 21:19:38+00:00,2015-09-05 09:11:25+00:00,"When I try to use transacted in a scala route, I get an error and the camel context doesn't start.


The error states that there is no output in route.


After some time watching at the code with different breakpoints, I noticed :


In org.apache.camel.scala.dsl.builder.RouteBuilder (l199) the transacted with URI doesn't call the stack.top.transacted with the URI parameter.


Even with this done, it still gives the same error : 


""Route myRoute has no output processors. You need to add outputs to the route such as to(""log:foo"").""


even when  my route is as simple as :


""direct:something"" ==> {
  routeId(""log:foo"")
  transacted(""SomeStrategy"")
  --> (""log:foo"")
}


After some more debug, I saw that the output list for the transacted node stays empty, so my guess is that, in the org.apache.camel.scala.dsl.SAbstractDefinition class, the line def transacted(ref: String) = wrap(target.transacted(ref)) should return something else to handle outputs.


Since I can mix java and scala routes, there are workarounds, but still, now that I've gotten used to scala routes, I don't really want to go back to java routes","njiang:1432078906:2015-05-20T07:41:46.233+0000:1432078906:2015-05-20T07:41:46.233+0000:It's caused by SAbstractDefinition wrap method doesn't return a write object, I just commit a quick fix with a simple test of it.
davsclaus:1432078913:2015-05-20T07:41:53.973+0000:1432078913:2015-05-20T07:41:53.973+0000:btw Willem as policy works similar as transacted could you check that if we need a similar fix for that also?

{code}
from a
  policy myPolicy
  to b
{code}
njiang:1432080043:2015-05-20T08:00:43.014+0000:1432080043:2015-05-20T08:00:43.014+0000:Yeah, some other DSLs have the similar issue, I'm working on it now.
flaroche:1440391754:2015-08-24T12:49:14.462+0000:1440391754:2015-08-24T12:49:14.462+0000:I have tested today with 2.15.3 and I still get the same issues.

I have tried the following dsl nodes :

transacted(uri: String) // something seems wrong with this node, since the code states : def transacted(uri: String) = stack.top.transacted in org.apache.camel.scala.dsl.builder.RouteBuilder:198
transacted
policy(policy: Policy)

all these tries give me a no processor exception.

GL with them !
davsclaus:1441409877:2015-09-05T07:37:57.617+0000:1441409877:2015-09-05T07:37:57.617+0000:That is because you use the ==> syntax which dont work as well. If you just do

      from(""direct:start"")
        .routeId(""myRoute"").transacted.to(""mock:result"")

it works fine
davsclaus:1441412139:2015-09-05T08:15:39.461+0000:1441412139:2015-09-05T08:15:39.461+0000:Okay tracked this down to when using ==> style then the Camel routes it builds do not get prepared which is the process that setup transactions and whatnot. If you use the java style then this happens as its just java based.


davsclaus:1441415485:2015-09-05T09:11:25.463+0000:1441415485:2015-09-05T09:11:25.463+0000:I got it fixed now"
0,CAMEL-8782,Bug,Major,2.15.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-05-19 19:44:04+00:00,2015-05-19 20:25:57+00:00,"Based on PR
https://github.com/apache/camel/pull/522#issuecomment-103620070


Yeah I had a look its due primtive vs object types, that causes Camel to not match the setter method.


eg the method uses a boolean type, but the returned value from the reference lookup is a java.lang.Boolen type. And therefor its not used. I will log a ticket and fix that.",
0,CAMEL-8781,Improvement,Minor,None,3.17.0,"
None
",Resolved,Won't Fix,3.17.0,Unassigned,Claus Ibsen,0,2,2015-05-18 12:57:52+00:00,2022-04-05 08:35:27+00:00,"The camel-sip component has a configuration class which does it own uri parsing and other initializations.


It should just be a plain getter/setter class.


The uri parsing is out of the box of the component, so most of that can be removed.


And any init logic should be part of the endpoint class, which it should do in doStart / doStop.","orpiske:1649118927:2022-04-05T08:35:27.100+0000:1649118927:2022-04-05T08:35:27.100+0000:This component was deprecated and removed on Camel 3.17.0, therefore closing as won't fix."
0,CAMEL-8780,Bug,Major,"2.14.2, 2.15.2","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-05-18 05:18:10+00:00,2015-05-22 02:59:02+00:00,"When trying to set the following header:



            <setHeader headerName=""CamelExecCommandArgs"" >
                <simple>""--import"" ""--export""</simple>
            </setHeader>




We receive the following error:



org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.util.List with value ""--import"" ""--export"" due java.lang.NumberFormatException: For input string: """"--import"" ""--export""""","njiang:1431897694:2015-05-18T05:21:34.955+0000:1431897694:2015-05-18T05:21:34.955+0000:It turns out that DefaultExecBinding try to turn the String into a List, but other type converter just introduces an exception when doing it.

njiang:1432234742:2015-05-22T02:59:02.119+0000:1432234742:2015-05-22T02:59:02.119+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8779,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-05-17 07:02:43+00:00,2015-05-17 07:48:24+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Mail-mapMailMessage-flag-ignored-tp5766767.html


When this flag is off, we do not need to create body/headers as we can just copy the raw message as-is.",
0,CAMEL-8778,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Gareth Healy,0,3,2015-05-16 18:54:17+00:00,2015-09-29 07:14:42+00:00,"Maven 3.3.3 has been released and now supports a .mvn folder for any config. One of those is JVM settings, so instead of having to set the MAVEN_OPTS env var, you can have it at project level.


http://blog.soebes.de/blog/2015/03/17/apache-maven-3-dot-3-1-features/","githubbot:1431773737:2015-05-16T18:55:37.499+0000:1431773737:2015-05-16T18:55:37.499+0000:GitHub user garethahealy opened a pull request:

    https://github.com/apache/camel/pull/517

    Added support for .mvn folder which comes with mvn 3.3.3

    CAMEL-8778
    
    http://blog.soebes.de/blog/2015/03/17/apache-maven-3-dot-3-1-features/

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garethahealy/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/517.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #517
    
----
commit fb135f3de31c2b0671cb8f0158e314c94b832b19
Author: Gareth Healy <garethahealy@gmail.com>
Date:   2015-05-16T18:51:43Z

    Added support for .mvn folder which comes with mvn 3.3.3
    
    http://blog.soebes.de/blog/2015/03/17/apache-maven-3-dot-3-1-features/

----

davsclaus:1431820250:2015-05-17T07:50:50.146+0000:1431820250:2015-05-17T07:50:50.146+0000:Does any existing ENV variable override the .mvn folder?  As imho any change like this should not affect existing setup, as some many need more memory or different settings etc.
garethahealy:1431835984:2015-05-17T12:13:04.348+0000:1431835984:2015-05-17T12:13:04.348+0000:Hi Claus,

After some playing around and checking the source, the jvm.config are concatenated with MAVEN_OPTS as per the below commit. The problem this causes is, if the same value is in MAVEN_OPTS and jvm.config, java fails.

I'll raise a ticket with maven to see if this can be improved and discard the PR.

[1] https://git-wip-us.apache.org/repos/asf?p=maven.git;a=commitdiff;h=8ed9a1caa8890773b45c6c408a4e40acf4f4b0fd
githubbot:1431836065:2015-05-17T12:14:25.299+0000:1431836065:2015-05-17T12:14:25.299+0000:Github user garethahealy closed the pull request at:

    https://github.com/apache/camel/pull/517
"
0,CAMEL-8777,New Feature,Major,None,None,"

calendar

",Resolved,Fixed,2.16.0,Willem Jiang,Carl J. Mosca,0,2,2015-05-15 14:35:22+00:00,2015-05-29 11:55:05+00:00,"I have am currently testing code for this feature which I intend to submit.  


I don't see the Google Calendar component as a listed component.


Did I miss it?","carljmosca:1431674532:2015-05-15T15:22:12.511+0000:1431674532:2015-05-15T15:22:12.511+0000:Initial attempt at support for Google Service Accounts.  Current tests are successful.  Additional testing (not submitted) also was OK.
njiang:1431900784:2015-05-18T06:13:04.200+0000:1431900784:2015-05-18T06:13:04.200+0000:Hi Carl,
Thanks for your contribution. Can you create a Pull Request with your test if it is possible?
It could be more easy for us to review your patch. 
carljmosca:1431918308:2015-05-18T11:05:08.715+0000:1431918308:2015-05-18T11:05:08.715+0000:Hello Willem,

I just cloned the code on github, patched the files, and committed/pushed to a branch.  Hopefully, the pull request was done correctly.

https://github.com/apache/camel/pull/519

Thank you,
Carl
njiang:1431991331:2015-05-19T07:22:11.733+0000:1431991331:2015-05-19T07:22:11.733+0000:Hi Carl,
I just added a comment for your PR, please check it out in the github.

carljmosca:1432004853:2015-05-19T11:07:33.051+0000:1432004853:2015-05-19T11:07:33.051+0000:The code has been reformatted per your request to make it easier to review.
carljmosca:1432176300:2015-05-21T10:45:00.503+0000:1432176300:2015-05-21T10:45:00.503+0000:Do the code changes/commits include the JIRA tags?
njiang:1432189342:2015-05-21T14:22:22.178+0000:1432189363:2015-05-21T14:22:43.720+0000:Hi Carl,

I think you just misinterpreted my comment, I said without code formate :)
Any way I managed to apply the patch based on your first PR, it's just add some new parameters (emailAddress,  p12FileName) to use the Calender service. As this is a new feature, I didn't back port the patch into Camel 2.15.x branch.

Now it's time to update [the wiki page|https://cwiki.apache.org/confluence/display/CAMEL/GoogleCalendar] for it. Please check out the change and make sure I didn't miss anything.
njiang:1432189401:2015-05-21T14:23:21.414+0000:1432189401:2015-05-21T14:23:21.414+0000:Applied the patch into Camel master branch with thanks to Carl.
carljmosca:1432190669:2015-05-21T14:44:29.892+0000:1432190669:2015-05-21T14:44:29.892+0000:Hello Willem,

The wiki looks good, thank you.  

On the code formatting, I thought I understood.  I opened it in Eclipse (which I don't normally use) and (re)formatted it using the standard I thought you guys were using.  Is there an xml format file for Camel I should download?

Carl
carljmosca:1432275776:2015-05-22T14:22:56.449+0000:1432275776:2015-05-22T14:22:56.449+0000:The two new properties (emailAddress and p12FileName) are not showing up in the Advanced Properties along with the others in JBoss Developer Studio.  I believe they are annotated correctly.

I am wondering if it's an Eclipse cache issue or is there some other code/property file that needs to be updated.
njiang:1432842014:2015-05-29T03:40:14.112+0000:1432842014:2015-05-29T03:40:14.112+0000:Hi Carl,

I don't think JBoss Developer Studio supports the camel self document annotation out of box right now :)

carljmosca:1432871705:2015-05-29T11:55:05.045+0000:1432871705:2015-05-29T11:55:05.045+0000:Willem,

I should have been a bit more specific with my question.  While I realize JBDS does not support it right now, it does show the advanced properties after the component is added to the pom file and referenced in the designer.

The issue is it does not include the two newly added properties and the reason I am wondering about Eclipse caching is because we saw the same issue with MuleESB Designer as we updated components there.

Probably more of a question for the designer folks but I would think we could get these two new properties to be recognized along with the original ones more easily/consistently for component writing/modifying in general.

HTH,
Carl"
0,CAMEL-8776,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Willem Jiang,0,5,2015-05-14 02:35:16+00:00,2016-06-07 18:50:43+00:00,"As Monogo is deprecated, we need to use MonogoClient instead.","njiang:1431543276:2015-05-14T02:54:36.307+0000:1431543276:2015-05-14T02:54:36.307+0000:I just did a quick research, it looks like there are quite difference between the Mongo and MongoClient, as MongoClient introduce some new mongo 3.x API, we need to change lots of code in the camel-mongodb for it.
acosentino:1431555720:2015-05-14T06:22:00.456+0000:1431555720:2015-05-14T06:22:00.456+0000:This is related also with this issue:

https://issues.apache.org/jira/browse/CAMEL-8668


davsclaus:1441590337:2015-09-07T09:45:37.296+0000:1441590337:2015-09-07T09:45:37.296+0000:Willem are you working on this?
anoordover:1464494094:2016-05-29T11:54:54.562+0000:1464494094:2016-05-29T11:54:54.562+0000:To support users to migrate to MongoClient I think we should introduce a wrapper around the MongoClient class and the Mongo class with two implementation which forwards the calls to the correct method.
Issue could be solved in two steps:
- first implement the wrapper for Mongo;
- then implement the wrapper for the MongoClient.

anoordover:1464506413:2016-05-29T15:20:13.876+0000:1464506413:2016-05-29T15:20:13.876+0000:This is a major change.
I was in the process of defining interfaces for deprecated things.
Currently I have three interface which each should implement an old and a new implementation with for example a findOne in DBCollection which isn't available in MongoCollection
davsclaus:1464651800:2016-05-31T07:43:20.371+0000:1464651800:2016-05-31T07:43:20.371+0000:Arno its fine with migrating the code to the newer API of the mongo client. We do not want to get stuck on old libraries."
0,CAMEL-8775,Improvement,Minor,2.14.0,2.16.0,"

docuentation

",Resolved,Auto Closed,2.16.0,Willem Jiang,Frank Greguska,0,2,2015-05-13 19:56:17+00:00,2015-05-14 12:13:22+00:00,"I was trying to set up a dozer endpoint as described on this page http://camel.apache.org/dozer.html but I was getting an error message:


""No component found with scheme: dozer""


I was using camel-dozer 2.14.


Endpoint support for dozer was added in 2.15. Can this be reflected on the http://camel.apache.org/dozer.html page?","njiang:1431541937:2015-05-14T02:32:17.396+0000:1431541937:2015-05-14T02:32:17.396+0000:Thanks for pointing that out, I just updated the wiki page for it.
njiang:1431576802:2015-05-14T12:13:22.791+0000:1431576802:2015-05-14T12:13:22.791+0000:Updated the the wiki page for it."
0,CAMEL-8774,Bug,Major,2.15.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Mateusz Nowakowski,0,2,2015-05-13 08:09:50+00:00,2015-05-27 14:19:53+00:00,"When Http Request is Gzip encoded (CONTENT_ENCODING is set) but the HTTP response is not ( httpExchange.getResponseHeaders().get(HttpHeaders.CONTENT_ENCODING) == null) then Exchange.CONTENT_ENCODING is present in the Camel out message.


This is because DefaultJettyHttpBinding:125 preserves all in headers.


I believe that HTTP protocol headers (except custom ones) from the in shouldn't be copied to the Camel out message.","njiang:1431576848:2015-05-14T12:14:08.372+0000:1431576848:2015-05-14T12:14:08.372+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.
matihost:1431579928:2015-05-14T13:05:28.048+0000:1431579928:2015-05-14T13:05:28.048+0000:Looks better, but I'm wondering still about ""Content-Encoding"" header.
It is not included  in HttpHeaderFilterStrategy.
Could you add also some test for that?

PS. Thanks for really fast attention.
njiang:1431626308:2015-05-15T01:58:28.932+0000:1431626308:2015-05-15T01:58:28.932+0000:Hi Mateusz, 

You are right, I made a mistake to use the HttpHeaderFilterStrategy directly.
As this HttpHeaderFilter doesn't filter all http related protocol and it also filter the Camel related headers. 
I will commit a quick fix for it by apply a custom HttpHeaderFilterStrategy to use.

Regards,

Willem
njiang:1431626970:2015-05-15T02:09:30.720+0000:1431626970:2015-05-15T02:09:30.720+0000:I just found camel-http, camel-http4, camel-ahc have the same issue here.
njiang:1432707593:2015-05-27T14:19:53.819+0000:1432707593:2015-05-27T14:19:53.819+0000:Just applied a patch into camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8773,Improvement,Trivial,2.15.2,2.16.0,"
None
",Resolved,Pending Closed,2.16.0,Willem Jiang,Stéphane Deraco,0,2,2015-05-13 07:54:54+00:00,2015-05-13 10:06:13+00:00,"In the Scheduler page at http://camel.apache.org/scheduler.html, in the Options table, there is the schedulerProperties.xxx in order to specify custom properties on Quartz2 or Spring scheduler.


Shouldn't schedulerProperties.xxx be in fact scheduler.xxx ?


If you agree, I can update the wiki.


Thanks,
Stéphane","njiang:1431477093:2015-05-13T08:31:33.410+0000:1431477114:2015-05-13T08:31:54.290+0000:I just find the code to support this change :)
https://github.com/apache/camel/blob/eaa06ef28836390abafdd22e63e2b628d3f7d7a5/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollEndpoint.java#L104

Please updated the wiki page for it.
stephane_deraco:1431477564:2015-05-13T08:39:24.268+0000:1431477564:2015-05-13T08:39:24.268+0000:Thanks Willem, the wiki has been updated."
0,CAMEL-8772,Task,Major,None,"2.16.0, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.15.4",Dhiraj Sureshkumar Bokde,Claus Ibsen,0,2,2015-05-13 07:49:24+00:00,2015-09-18 09:35:34+00:00,"We need to document each of the options this endpoint has.


To do this add javadoc to the setter methods on



https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceLoginConfig.java




https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/SalesforceEndpointConfig.java



Dhiraj as you know this component the best. I would love if you would have time to do this.","davsclaus:1441590362:2015-09-07T09:46:02.927+0000:1441590362:2015-09-07T09:46:02.927+0000:Dhiraj do you have some time to help with the docs, eg the javadoc docs?
dhirajsb:1442540134:2015-09-18T09:35:34.215+0000:1442540134:2015-09-18T09:35:34.215+0000:Javadoc added to the Salesforce login config and endpoint classes in master branch, and cherry-picked onto 2.15.x branch"
0,CAMEL-8771,Bug,Major,"2.14.2, 2.15.2","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Pending Closed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-05-13 06:49:47+00:00,2015-05-13 08:32:33+00:00,"if we don't specify the MaxChannelMemorySize and MaxTotalMemorySize, the OrderedMemoryAwareThreadPoolExecutor could eat up all the heap memory when the tasks are added very fast","njiang:1431477153:2015-05-13T08:32:33.446+0000:1431477153:2015-05-13T08:32:33.446+0000:Applied the patch into camel master, camel 2.14.x and camel 2.15.x branches."
0,CAMEL-8770,Bug,Major,"2.14.2, 2.15.2","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Pending Closed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Willem Jiang,0,2,2015-05-13 06:35:33+00:00,2015-09-01 19:36:04+00:00,"Attribute depends-on does not work for camelContext element in blueprint container. When bean XXX does not exist then an exception should be thrown like in spring container.



<camelContext ... depends-on=""XXX"">","njiang:1431474295:2015-05-13T07:44:55.145+0000:1431474295:2015-05-13T07:44:55.145+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches.
lichtin:1441107364:2015-09-01T19:36:04.736+0000:1441107364:2015-09-01T19:36:04.736+0000:Hi Willem thanks for the fix. Something definitely changed with 2.15.3 :)
I've so far been referring to several beans with depends-on=""beanA,beanB""
However, this (obviously) no longer works. It seems depends-on does not support a list (unlike the depends-on in Aries Blueprint).
How then can one make the CamelContext depend on more than one bean?"
0,CAMEL-8769,Bug,Major,2.14.2,,"
None
",Closed,Invalid,None,Willem Jiang,Qi Cui,0,2,2015-05-13 03:18:39+00:00,2015-05-15 02:51:20+00:00,"java API CopyObjectRequest delete the source file sometimes:
case 1.  copy from /xxx-workspaces/temp/bbb.txt0 to anywhere
	works properly. after copy, the source file bbb.txt0 still there.


case 2. copy from /xxx-workspaces/bbb.txt0 to anywhere
	unexpected behaviour! After copy, the source file bbb.txt0 got deleted! CopyObjectRequest is the only request I submitted. but I can see there's ""DELETE"" request from the log. Also there is lots of ""GET"" requests to retrieve the log.


Tested with pure CopyObjectRequest by using aws Java Client API directly, It works fine and no extra ""DELETE"" and ""GET"" submitted.


Code to do the Copy:



public class CamelS3SaverRouteBuilder extends RouteBuilder {
....
 @Override
    public void configure()
            throws Exception {
        ProfileCredentialsProvider awsCredentials = new ProfileCredentialsProvider(AWS_PROFILE_CONFIG_NAME, 
               WORKSPACE_BUCKET_NAME);
                
        AmazonS3 client = new AmazonS3Client(awsCredentials);
        
     // Copying object
        CopyObjectRequest copyObjRequest = new CopyObjectRequest(
                srcBucket.bucketName, srcBucket.bucketKey, 
                destBucket.bucketName, destBucket.bucketKey);
        client.copyObject(copyObjRequest);
        
        JndiRegistry registry = (JndiRegistry) (
                (PropertyPlaceholderDelegateRegistry)getContext().getRegistry()).getRegistry();
        registry.bind(""client"", client);
        
        // lets shutdown faster in case of in-flight messages stack up
        getContext().getShutdownStrategy().setTimeout(10);

        onException(Exception.class)
        .handled(true).maximumRedeliveries(3)
        .to(""log:error processing message"");
        
        from(""aws-s3://"" + srcBucket.bucketName + ""?amazonS3Client=#client&region=us-east-1"")
            .setExchangePattern(ExchangePattern.InOnly)
            .process(new Processor() {
                     @Override
                     public void process(Exchange exchange) throws Exception {
                         /*  trashing whatever message after having processed it */
                         exchange.getIn().setBody(null);
                         
                      // stop Camel by signalling to the latch
                         latch.countDown();
                     }
            })
            .log(""Finished file transfer between S3!"");
        
    }
....

} 




LOG when deletion happens:



13:24:41.257 [ CamelS3SaverRouteBuilder] srcBucket bucketName = xxx-test (0ms)
13:24:41.259 [ CamelS3SaverRouteBuilder] srcBucket bucketKey = bbb.txt0 (2ms)
13:24:41.259 [ CamelS3SaverRouteBuilder] destBucket bucketName = xxx-workspaces (0ms)
13:24:41.259 [ CamelS3SaverRouteBuilder] destBucket bucketKey = user-null/temp/import/999/raw-data/bbb.txt0 (0ms)
13:24:41.265 [...camel.main.MainSupport] Apache Camel 2.14.1 starting (6ms)
13:24:41.532 [..mpl.DefaultCamelContext] Adding routes from builder: Routes: [] (267ms)
13:24:41.533 [..mpl.DefaultCamelContext] Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@2c8d23f9 to resolve component with name: properties (1ms)
13:24:41.544 [..efaultComponentResolver] Found component: properties in registry: null (11ms)
13:24:41.548 [..efaultComponentResolver] Found component: properties via type: org.apache.camel.component.properties.PropertiesComponent via: META-INF/services/org/apache/camel/component/properties (4ms)
13:24:42.645 [    com.amazonaws.request] Sending Request: PUT https://xxx-workspaces.s3.amazonaws.com /user-null/temp/import/999/raw-data/bbb.txt0 Headers: (x-amz-copy-source: /xxx-test/bbb.txt0, Content-Length: 0, User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (1097ms)
13:24:43.496 [     org.apache.http.wire] >> ""PUT /user-null/temp/import/999/raw-data/bbb.txt0 HTTP/1.1[\r][\n]"" (851ms)
13:24:43.498 [     org.apache.http.wire] >> ""Host: xxx-workspaces.s3.amazonaws.com[\r][\n]"" (2ms)
13:24:43.498 [     org.apache.http.wire] >> ""x-amz-copy-source: /xxx-test/bbb.txt0[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:EvEC4VlkWvkf6KDQUMGFG0ImgtA=[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:42 GMT[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Content-Length: 0[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:43.498 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:43.575 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (77ms)
13:24:43.581 [     org.apache.http.wire] << ""x-amz-id-2: 0U2iXSNdG48eOJChLNe5pOwSWF1aykCkejluv9A4DUH0k4ktmmc9xHgtWdeDvx5Emot7fiyemyg=[\r][\n]"" (6ms)
13:24:43.582 [     org.apache.http.wire] << ""x-amz-request-id: CFC6F4E833716E1C[\r][\n]"" (1ms)
13:24:43.582 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:18 GMT[\r][\n]"" (0ms)
13:24:43.582 [     org.apache.http.wire] << ""Content-Type: application/xml[\r][\n]"" (0ms)
13:24:43.582 [     org.apache.http.wire] << ""Content-Length: 234[\r][\n]"" (0ms)
13:24:43.582 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:43.583 [     org.apache.http.wire] << ""[\r][\n]"" (1ms)
13:24:43.605 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (22ms)
13:24:43.714 [     org.apache.http.wire] << ""<?xml version=""1.0"" encoding=""UTF-8""?>[\n]"" (109ms)
13:24:43.715 [     org.apache.http.wire] << ""<CopyObjectResult xmlns=""http://s3.amazonaws.com/doc/2006-03-01/""><LastModified>2015-05-08T17:25:18.000Z</LastModified><ETag>""9e9ee72bd937cf7b6d7242c64f9214bd""</ETag></CopyObjectResult>"" (1ms)
13:24:43.723 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: CFC6F4E833716E1C (8ms)
13:24:43.761 [..mpl.DefaultCamelContext] Apache Camel 2.14.1 (CamelContext: camel-1) is starting (38ms)
13:24:43.761 [..mpl.DefaultCamelContext] Using ClassResolver=org.apache.camel.impl.DefaultClassResolver@60e028e1, PackageScanClassResolver=org.apache.camel.impl.DefaultPackageScanClassResolver@1c9bfd77, ApplicationContextClassLoader=sun.misc.Launcher$AppClassLoader@1667a232 (0ms)
13:24:43.762 [..nagedManagementStrategy] JMX is enabled (1ms)
13:24:43.763 [...DefaultManagementAgent] Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@11507b87 (1ms)
13:24:43.827 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=context,name=""camel-1"" (64ms)
13:24:43.827 [..rt.TimerListenerManager] Added TimerListener: org.apache.camel.management.mbean.ManagedCamelContext@4efa1bec (0ms)
13:24:43.827 [..gementLifecycleStrategy] Registering 1 pre registered services (0ms)
13:24:43.831 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""properties"" (4ms)
13:24:43.865 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultTypeConverter (34ms)
13:24:43.877 [..tionTypeConverterLoader] Found 3 packages with 15 @Converter classes to load (12ms)
13:24:43.929 [..tionTypeConverterLoader] Loading file META-INF/services/org/apache/camel/TypeConverter to retrieve list of packages, from url: jar:file:/C:/src/qi/xxx/main/webapp/WEB-INF/lib/camel-core-2.14.1.jar!/META-INF/services/org/apache/camel/TypeConverter (52ms)
13:24:43.930 [..tionTypeConverterLoader] No additional package names found in classpath for annotated type converters. (1ms)
13:24:43.931 [..er.DefaultTypeConverter] Loaded 178 type converters (1ms)
13:24:43.939 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=EndpointRegistry (8ms)
13:24:43.942 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultExecutorServiceManager (3ms)
13:24:43.944 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=SharedProducerServicePool (2ms)
13:24:43.945 [..aredProducerServicePool] Starting service pool: org.apache.camel.impl.SharedProducerServicePool@7075cca9 (1ms)
13:24:43.947 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultInflightRepository (2ms)
13:24:43.950 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultShutdownStrategy (3ms)
13:24:43.953 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultPackageScanClassResolver (3ms)
13:24:43.961 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultRestRegistry (8ms)
13:24:43.965 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=eventnotifiers,name=EventNotifier(0x7bab0b6c) (4ms)
13:24:43.970 [..mpl.DefaultCamelContext] Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@2c8d23f9 to resolve component with name: aws-s3 (5ms)
13:24:43.970 [..efaultComponentResolver] Found component: aws-s3 in registry: null (0ms)
13:24:43.972 [..efaultComponentResolver] Found component: aws-s3 via type: org.apache.camel.component.aws.s3.S3Component via: META-INF/services/org/apache/camel/component/aws-s3 (2ms)
13:24:43.975 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""aws-s3"" (3ms)
13:24:43.978 [..l.impl.DefaultComponent] Creating endpoint uri=[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1], path=[xxx-test] (3ms)
13:24:43.982 [..il.IntrospectionSupport] Configured property: amazonS3Client on bean: org.apache.camel.component.aws.s3.S3Configuration@550661b8 with value: com.amazonaws.services.s3.AmazonS3Client@15f9a2a4 (4ms)
13:24:43.982 [..il.IntrospectionSupport] Configured property: region on bean: org.apache.camel.component.aws.s3.S3Configuration@550661b8 with value: us-east-1 (0ms)
13:24:43.989 [..mpl.DefaultCamelContext] aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1 converted to endpoint: Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] by component: org.apache.camel.component.aws.s3.S3Component@1d2d2db8 (7ms)
13:24:43.993 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1"" (4ms)
13:24:43.994 [    com.amazonaws.request] Sending Request: GET https://xxx-test.s3.amazonaws.com / Parameters: (max-keys: 0, ) Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (1ms)
13:24:44.390 [     org.apache.http.wire] >> ""GET /?max-keys=0 HTTP/1.1[\r][\n]"" (396ms)
13:24:44.390 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:44.391 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:0a5FG38433Kj9wO2lFfByO4/UR8=[\r][\n]"" (1ms)
13:24:44.391 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:43 GMT[\r][\n]"" (0ms)
13:24:44.391 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:44.391 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (0ms)
13:24:44.391 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:44.392 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (1ms)
13:24:44.392 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (64ms)
13:24:44.456 [     org.apache.http.wire] << ""x-amz-id-2: 30pFcCgf7i7WAGPirV1uBiSF8fWhAO66W5dkbvTmXbCRtC45ZlGscQnBds47pAKlZ0t9zRZgVyY=[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""x-amz-request-id: 0F9F8EB13565C850[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:18 GMT[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""Content-Type: application/xml[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""Transfer-Encoding: chunked[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:44.456 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:44.458 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (2ms)
13:24:44.460 [     org.apache.http.wire] << ""ed[\r][\n]"" (2ms)
13:24:44.461 [     org.apache.http.wire] << ""<?xml version=""1.0"" encoding=""UTF-8""?>[\n]"" (1ms)
13:24:44.461 [     org.apache.http.wire] << ""<ListBucketResult xmlns=""http://s3.amazonaws.com/doc/2006-03-01/""><Name>xxx-test</Name><Prefix></Prefix><Marker></Marker><MaxKeys>0</MaxKeys><IsTruncated>false</IsTruncated></ListBucketResult>"" (0ms)
13:24:44.461 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:44.461 [     org.apache.http.wire] << ""0[\r][\n]"" (0ms)
13:24:44.461 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:44.462 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: 0F9F8EB13565C850 (1ms)
13:24:44.492 [..mpl.DefaultCamelContext] Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@2c8d23f9 to resolve component with name: log (30ms)
13:24:44.492 [..efaultComponentResolver] Found component: log in registry: null (0ms)
13:24:44.494 [..efaultComponentResolver] Found component: log via type: org.apache.camel.component.log.LogComponent via: META-INF/services/org/apache/camel/component/log (2ms)
13:24:44.499 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""log"" (5ms)
13:24:44.500 [..l.impl.DefaultComponent] Creating endpoint uri=[log://error%20processing%20message], path=[error processing message] (1ms)
13:24:44.504 [..mpl.DefaultCamelContext] log://error%20processing%20message converted to endpoint: Endpoint[log://error%20processing%20message] by component: org.apache.camel.component.log.LogComponent@460bfa3c (4ms)
13:24:44.509 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""log://error%20processing%20message"" (5ms)
13:24:44.517 [..erceptor.DefaultChannel] Initialize channel for target: 'To[log:error processing message]' (8ms)
13:24:44.528 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogTracer (11ms)
13:24:44.539 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger (11ms)
13:24:44.545 [..erceptor.DefaultChannel] Initialize channel for target: 'setExchangePattern[pattern: InOnly]' (6ms)
13:24:44.561 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"" (16ms)
13:24:44.574 [..mel.model.LogDefinition] The LogName is null. Falling back to create logger by using the route id route1. (13ms)
13:24:44.575 [..erceptor.DefaultChannel] Initialize channel for target: 'Log[Starting file transfer between S3...]' (1ms)
13:24:44.577 [..erceptor.DefaultChannel] Initialize channel for target: 'process[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]' (2ms)
13:24:44.579 [..mel.model.LogDefinition] The LogName is null. Falling back to create logger by using the route id route1. (2ms)
13:24:44.579 [..erceptor.DefaultChannel] Initialize channel for target: 'Log[Finished file transfer between S3!]' (0ms)
13:24:44.586 [..mpl.DefaultCamelContext] AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance. (7ms)
13:24:44.586 [..mpl.DefaultCamelContext] StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html (0ms)
13:24:44.587 [..mpl.DefaultCamelContext] Warming up route id: route1 having autoStartup=true (1ms)
13:24:44.587 [..camel.impl.RouteService] Starting services on route: route1 (0ms)
13:24:44.592 [..camel.impl.RouteService] Starting child service on route: route1 -> Pipeline[[Channel[SetExchangePattern[InOnly]], Channel[Log(route1)[Starting file transfer between S3...]], Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]], Channel[Log(route1)[Finished file transfer between S3!]]]] (5ms)
13:24:44.598 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=producers,name=LogProducer(0x89b2158) (6ms)
13:24:44.598 [..mponent.log.LogProducer] Starting producer: Producer[log://error%20processing%20message] (0ms)
13:24:44.599 [..amel.impl.ProducerCache] Adding to producer cache with key: Endpoint[log://error%20processing%20message] for producer: Producer[log://error%20processing%20message] (1ms)
13:24:44.599 [..sor.DefaultErrorHandler] Redelivery enabled: true on error handler: DefaultErrorHandler[Instrumentation:setExchangePattern[SetExchangePattern[InOnly]]] (0ms)
13:24:44.610 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""ErrorHandlerRedeliveryThreadPool"" (11ms)
13:24:44.610 [..tExecutorServiceManager] Created new ScheduledThreadPool for source: ErrorHandlerRedeliveryThreadPool with name: ErrorHandlerRedeliveryTask. -> org.apache.camel.util.concurrent.SizedScheduledExecutorService@4e67f43b[ErrorHandlerRedeliveryTask] (0ms)
13:24:44.610 [..sor.DefaultErrorHandler] Redelivery enabled: true on error handler: DefaultErrorHandler[Instrumentation:log[Log(route1)[Starting file transfer between S3...]]] (0ms)
13:24:44.610 [..sor.DefaultErrorHandler] Redelivery enabled: true on error handler: DefaultErrorHandler[Instrumentation:process[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]]] (0ms)
13:24:44.610 [..sor.DefaultErrorHandler] Redelivery enabled: true on error handler: DefaultErrorHandler[Instrumentation:log[Log(route1)[Finished file transfer between S3!]]] (0ms)
13:24:44.610 [..camel.impl.RouteService] Starting child service on route: route1 -> Pipeline[[Channel[SetExchangePattern[InOnly]], Channel[Log(route1)[Starting file transfer between S3...]], Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]], Channel[Log(route1)[Finished file transfer between S3!]]]] (0ms)
13:24:44.610 [..camel.impl.RouteService] Starting child service on route: route1 -> SetExchangePattern[InOnly] (0ms)
13:24:44.622 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""setExchangePattern1"" (12ms)
13:24:44.622 [..camel.impl.RouteService] Starting child service on route: route1 -> Channel[SetExchangePattern[InOnly]] (0ms)
13:24:44.622 [..camel.impl.RouteService] Starting child service on route: route1 -> Log(route1)[Starting file transfer between S3...] (0ms)
13:24:44.626 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log1"" (4ms)
13:24:44.627 [..camel.impl.RouteService] Starting child service on route: route1 -> Channel[Log(route1)[Starting file transfer between S3...]] (1ms)
13:24:44.627 [..camel.impl.RouteService] Starting child service on route: route1 -> DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e] (0ms)
13:24:44.631 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""process1"" (4ms)
13:24:44.631 [..camel.impl.RouteService] Starting child service on route: route1 -> Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]] (0ms)
13:24:44.631 [..camel.impl.RouteService] Starting child service on route: route1 -> Log(route1)[Finished file transfer between S3!] (0ms)
13:24:44.635 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2"" (4ms)
13:24:44.635 [..camel.impl.RouteService] Starting child service on route: route1 -> Channel[Log(route1)[Finished file transfer between S3!]] (0ms)
13:24:44.648 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""route1"" (13ms)
13:24:44.648 [..rt.TimerListenerManager] Added TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@60bb132e (0ms)
13:24:44.648 [..mpl.DefaultCamelContext] Route: route1 >>> EventDrivenConsumerRoute[Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] -> Pipeline[[Channel[SetExchangePattern[InOnly]], Channel[Log(route1)[Starting file transfer between S3...]], Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]], Channel[Log(route1)[Finished file transfer between S3!]]]]] (0ms)
13:24:44.649 [..mpl.DefaultCamelContext] Starting consumer (order: 1000) on route: route1 (1ms)
13:24:44.655 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=S3Consumer(0x218a968b) (6ms)
13:24:44.655 [..onent.aws.s3.S3Consumer] Starting consumer: S3Consumer[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (0ms)
13:24:44.659 [..il.IntrospectionSupport] Configured property: initialDelay on bean: org.apache.camel.impl.DefaultScheduledPollConsumerScheduler@1f707a6a with value: 1000 (4ms)
13:24:44.659 [..il.IntrospectionSupport] Configured property: timeUnit on bean: org.apache.camel.impl.DefaultScheduledPollConsumerScheduler@1f707a6a with value: MILLISECONDS (0ms)
13:24:44.659 [..il.IntrospectionSupport] Configured property: scheduledExecutorService on bean: org.apache.camel.impl.DefaultScheduledPollConsumerScheduler@1f707a6a with value: null (0ms)
13:24:44.659 [..il.IntrospectionSupport] Configured property: useFixedDelay on bean: org.apache.camel.impl.DefaultScheduledPollConsumerScheduler@1f707a6a with value: true (0ms)
13:24:44.659 [..il.IntrospectionSupport] Configured property: delay on bean: org.apache.camel.impl.DefaultScheduledPollConsumerScheduler@1f707a6a with value: 500 (0ms)
13:24:44.661 [...DefaultManagementAgent] Registered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""S3Consumer(0x218a968b)"" (2ms)
13:24:44.662 [..tExecutorServiceManager] Created new ScheduledThreadPool for source: S3Consumer[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] with name: aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1. -> org.apache.camel.util.concurrent.SizedScheduledExecutorService@1174d546[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (1ms)
13:24:44.662 [..edPollConsumerScheduler] Scheduling poll (fixed delay) with initialDelay: 1000, delay: 500 (milliseconds) for: Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (0ms)
13:24:44.666 [..mpl.DefaultCamelContext] Route: route1 started and consuming from: Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (4ms)
13:24:44.666 [..gementLifecycleStrategy] Load performance statistics disabled (0ms)
13:24:44.666 [..mpl.DefaultCamelContext] Total 1 routes, of which 1 is started. (0ms)
13:24:44.668 [..mpl.DefaultCamelContext] Apache Camel 2.14.1 (CamelContext: camel-1) started in 0.905 seconds (2ms)
13:24:45.665 [    com.amazonaws.request] Sending Request: GET https://xxx-test.s3.amazonaws.com / Parameters: (max-keys: 10, ) Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (997ms)
13:24:45.669 [     org.apache.http.wire] >> ""GET /?max-keys=10 HTTP/1.1[\r][\n]"" (4ms)
13:24:45.669 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:+RL93PYc7l7fbSL1wCIBzmi547g=[\r][\n]"" (1ms)
13:24:45.670 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:45 GMT[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:45.670 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:45.906 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (236ms)
13:24:45.907 [     org.apache.http.wire] << ""x-amz-id-2: Gq/0uubPkJRiyi6Am5iuUmxZn6w/1b7JzF58u5GqHtY7UwfMxT289+GakyeTmLKh0/Ov1UNrnyE=[\r][\n]"" (1ms)
13:24:45.907 [     org.apache.http.wire] << ""x-amz-request-id: FA7EB44DD92B1343[\r][\n]"" (0ms)
13:24:45.907 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:20 GMT[\r][\n]"" (0ms)
13:24:45.907 [     org.apache.http.wire] << ""Content-Type: application/xml[\r][\n]"" (0ms)
13:24:45.907 [     org.apache.http.wire] << ""Transfer-Encoding: chunked[\r][\n]"" (0ms)
13:24:45.907 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:45.907 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:45.907 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (0ms)
13:24:45.909 [     org.apache.http.wire] << ""512[\r][\n]"" (2ms)
13:24:45.909 [     org.apache.http.wire] << ""<?xml version=""1.0"" encoding=""UTF-8""?>[\n]"" (0ms)
13:24:45.909 [     org.apache.http.wire] << ""<ListBucketResult xmlns=""http://s3.amazonaws.com/doc/2006-03-01/""><Name>xxx-test</Name><Prefix></Prefix><Marker></Marker><MaxKeys>10</MaxKeys><IsTruncated>false</IsTruncated><Contents><Key>abc12.txt</Key><LastModified>2015-05-07T20:36:02.000Z</LastModified><ETag>""3f376a7d147c8c2e0d28d0da97d70999""</ETag><Size>2733677708</Size><Owner><ID>52a027bcc58ec546c69a154a6668993008ca81ad219aa22f4480667b7dccad90</ID><DisplayName>cscdigitalmarketing-billing</DisplayName></Owner><StorageClass>STANDARD</StorageClass></Contents><Contents><Key>bbb.txt0</Key><LastModified>2015-05-08T17:25:08.000Z</LastModified><ETag>""9e9ee72bd937cf7b6d7242c64f9214bd""</ETag><Size>10</Size><Owner><ID>52a027bcc58ec546c69a154a6668993008ca81ad219aa22f4480667b7dccad90</ID><DisplayName>cscdigitalmarketing-billing</DisplayName></Owner><StorageClass>STANDARD</StorageClass></Contents><Contents><Key>test/2015/abc12.txt</Key><LastModified>2015-05-07T19:53:40.000Z</LastModified><ETag>""3f376a7d147c8c2e0d28d0da97d70999""</ETag><Size>2733677708</Size><Owner><ID>52a027bcc58ec546c69a154a6668993008ca81ad219aa22f4480667b7dccad90</ID><DisplayName>cscdigitalmarketing-billing</DisplayName></Owner><StorageClass>STANDARD</StorageClass></Contents></ListBucketResult>"" (0ms)
13:24:45.909 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:45.910 [     org.apache.http.wire] << ""0[\r][\n]"" (1ms)
13:24:45.910 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:45.916 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: FA7EB44DD92B1343 (6ms)
13:24:45.918 [    com.amazonaws.request] Sending Request: GET https://xxx-test.s3.amazonaws.com /abc12.txt Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (2ms)
13:24:45.920 [     org.apache.http.wire] >> ""GET /abc12.txt HTTP/1.1[\r][\n]"" (2ms)
13:24:45.920 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:45.920 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:GBtozfcK1psdSlgyP9MlwIIxZHA=[\r][\n]"" (0ms)
13:24:45.920 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:45 GMT[\r][\n]"" (0ms)
13:24:45.920 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:45.920 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (0ms)
13:24:45.921 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (1ms)
13:24:45.921 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:45.921 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:46.058 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (137ms)
13:24:46.058 [     org.apache.http.wire] << ""x-amz-id-2: wRPHWaZ38MDI9slzGQPSVMxMqOUCrkzCGqXmXxnR0981lp72DdwnlG31lP6Hg+zS3V90vdvkGrQ=[\r][\n]"" (0ms)
13:24:46.059 [     org.apache.http.wire] << ""x-amz-request-id: 9183346338F941B7[\r][\n]"" (1ms)
13:24:46.059 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:20 GMT[\r][\n]"" (0ms)
13:24:46.059 [     org.apache.http.wire] << ""x-amz-meta-gid: 1001[\r][\n]"" (0ms)
13:24:46.059 [     org.apache.http.wire] << ""x-amz-meta-mtime: 1431028974[\r][\n]"" (0ms)
13:24:46.060 [     org.apache.http.wire] << ""x-amz-version-id: null[\r][\n]"" (1ms)
13:24:46.060 [     org.apache.http.wire] << ""x-amz-meta-uid: 1001[\r][\n]"" (0ms)
13:24:46.060 [     org.apache.http.wire] << ""x-amz-meta-mode: 33204[\r][\n]"" (0ms)
13:24:46.060 [     org.apache.http.wire] << ""Last-Modified: Thu, 07 May 2015 20:36:02 GMT[\r][\n]"" (0ms)
13:24:46.060 [     org.apache.http.wire] << ""ETag: ""3f376a7d147c8c2e0d28d0da97d70999""[\r][\n]"" (0ms)
13:24:46.061 [     org.apache.http.wire] << ""Accept-Ranges: bytes[\r][\n]"" (1ms)
13:24:46.061 [     org.apache.http.wire] << ""Content-Type: text/plain[\r][\n]"" (0ms)
13:24:46.061 [     org.apache.http.wire] << ""Content-Length: 2733677708[\r][\n]"" (0ms)
13:24:46.061 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:46.061 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:46.062 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (1ms)
13:24:46.086 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: 9183346338F941B7 (24ms)
13:24:46.092 [    com.amazonaws.request] Sending Request: GET https://xxx-test.s3.amazonaws.com /bbb.txt0 Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (6ms)
13:24:46.370 [     org.apache.http.wire] >> ""GET /bbb.txt0 HTTP/1.1[\r][\n]"" (278ms)
13:24:46.370 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:46.371 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:241o6egyQEetCin2uT/Yd/SaaT0=[\r][\n]"" (1ms)
13:24:46.371 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:46 GMT[\r][\n]"" (0ms)
13:24:46.371 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:46.371 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (0ms)
13:24:46.371 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:46.371 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:46.372 [     org.apache.http.wire] >> ""[\r][\n]"" (1ms)
13:24:46.447 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (75ms)
13:24:46.448 [     org.apache.http.wire] << ""x-amz-id-2: LuxT43ah+N02FkH38qAPPEEOu/2wFnc7kroRXLoJV/zyp1UW24Dtw5hahvgAgwgxGa0dQYpy5EY=[\r][\n]"" (1ms)
13:24:46.448 [     org.apache.http.wire] << ""x-amz-request-id: 5782AC9143E67431[\r][\n]"" (0ms)
13:24:46.448 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:20 GMT[\r][\n]"" (0ms)
13:24:46.448 [     org.apache.http.wire] << ""x-amz-version-id: null[\r][\n]"" (0ms)
13:24:46.448 [     org.apache.http.wire] << ""Last-Modified: Fri, 08 May 2015 17:25:08 GMT[\r][\n]"" (0ms)
13:24:46.449 [     org.apache.http.wire] << ""ETag: ""9e9ee72bd937cf7b6d7242c64f9214bd""[\r][\n]"" (1ms)
13:24:46.449 [     org.apache.http.wire] << ""Accept-Ranges: bytes[\r][\n]"" (0ms)
13:24:46.449 [     org.apache.http.wire] << ""Content-Type: text/plain[\r][\n]"" (0ms)
13:24:46.449 [     org.apache.http.wire] << ""Content-Length: 10[\r][\n]"" (0ms)
13:24:46.449 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:46.449 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:46.450 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (1ms)
13:24:46.451 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: 5782AC9143E67431 (1ms)
13:24:46.451 [    com.amazonaws.request] Sending Request: GET https://xxx-test.s3.amazonaws.com /test/2015/abc12.txt Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (0ms)
13:24:46.695 [     org.apache.http.wire] >> ""GET /test/2015/abc12.txt HTTP/1.1[\r][\n]"" (244ms)
13:24:46.695 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:46.695 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:Y3S5FBOh6Sx+DIu4hmma762kzmE=[\r][\n]"" (0ms)
13:24:46.695 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:46 GMT[\r][\n]"" (0ms)
13:24:46.695 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:46.696 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (1ms)
13:24:46.696 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:46.696 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:46.696 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:46.896 [     org.apache.http.wire] << ""HTTP/1.1 200 OK[\r][\n]"" (200ms)
13:24:46.896 [     org.apache.http.wire] << ""x-amz-id-2: WElpbJnvgDm2sKYpUTdGaN5NCGFFdCj6nE4PsOxhU7opXOoZcRgCv91q/dtzL3Y0RgtXv4h51Sg=[\r][\n]"" (0ms)
13:24:46.896 [     org.apache.http.wire] << ""x-amz-request-id: 618C9C6B8F2E187B[\r][\n]"" (0ms)
13:24:46.896 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:21 GMT[\r][\n]"" (0ms)
13:24:46.897 [     org.apache.http.wire] << ""x-amz-meta-gid: 1001[\r][\n]"" (1ms)
13:24:46.897 [     org.apache.http.wire] << ""x-amz-meta-mtime: 1431028232[\r][\n]"" (0ms)
13:24:46.897 [     org.apache.http.wire] << ""x-amz-version-id: null[\r][\n]"" (0ms)
13:24:46.897 [     org.apache.http.wire] << ""x-amz-meta-uid: 1001[\r][\n]"" (0ms)
13:24:46.897 [     org.apache.http.wire] << ""x-amz-meta-mode: 33204[\r][\n]"" (0ms)
13:24:46.898 [     org.apache.http.wire] << ""Last-Modified: Thu, 07 May 2015 19:53:40 GMT[\r][\n]"" (1ms)
13:24:46.898 [     org.apache.http.wire] << ""ETag: ""3f376a7d147c8c2e0d28d0da97d70999""[\r][\n]"" (0ms)
13:24:46.898 [     org.apache.http.wire] << ""Accept-Ranges: bytes[\r][\n]"" (0ms)
13:24:46.898 [     org.apache.http.wire] << ""Content-Type: text/plain[\r][\n]"" (0ms)
13:24:46.898 [     org.apache.http.wire] << ""Content-Length: 2733677708[\r][\n]"" (0ms)
13:24:46.899 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (1ms)
13:24:46.899 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:46.900 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (1ms)
13:24:46.901 [    com.amazonaws.request] Received successful response: 200, AWS Request ID: 618C9C6B8F2E187B (1ms)
13:24:46.928 [                   route1] Starting file transfer between S3... (27ms)
13:24:46.928 [..amelS3SaverRouteBuilder] Processing... (0ms)
13:24:46.928 [...camel.main.MainSupport] Apache Camel 2.14.1 stopping (0ms)
13:24:46.928 [..mpl.DefaultCamelContext] Apache Camel 2.14.1 (CamelContext: camel-1) is shutting down (0ms)
13:24:46.929 [                   route1] Finished file transfer between S3! (1ms)
13:24:46.929 [..DefaultShutdownStrategy] Starting to graceful shutdown 1 routes (timeout 10 seconds) (0ms)
13:24:46.929 [    com.amazonaws.request] Sending Request: DELETE https://xxx-test.s3.amazonaws.com /abc12.txt Headers: (User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71, Content-Type: application/x-www-form-urlencoded; charset=utf-8, )  (0ms)
13:24:46.932 [..tExecutorServiceManager] Created new ThreadPool for source: org.apache.camel.impl.DefaultShutdownStrategy@20ad3a7a with name: ShutdownTask. -> org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@3c443007[Running, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0][ShutdownTask] (3ms)
13:24:46.935 [..DefaultShutdownStrategy] There are 1 routes to shutdown (3ms)
13:24:46.937 [..DefaultShutdownStrategy] Route: route1 suspended and shutdown deferred, was consuming from: Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (2ms)
13:24:46.937 [..DefaultShutdownStrategy] Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 10 seconds. (0ms)
13:24:47.190 [     org.apache.http.wire] >> ""DELETE /abc12.txt HTTP/1.1[\r][\n]"" (253ms)
13:24:47.190 [     org.apache.http.wire] >> ""Host: xxx-test.s3.amazonaws.com[\r][\n]"" (0ms)
13:24:47.190 [     org.apache.http.wire] >> ""Authorization: AWS AKIAJIY6B67JBFCXLL5A:FAeigwZab6FKtgvT9+KWTFYZSbM=[\r][\n]"" (0ms)
13:24:47.190 [     org.apache.http.wire] >> ""Date: Fri, 08 May 2015 17:24:46 GMT[\r][\n]"" (0ms)
13:24:47.190 [     org.apache.http.wire] >> ""User-Agent: aws-sdk-java/1.9.33 Windows_7/6.1 Java_HotSpot(TM)_64-Bit_Server_VM/24.71-b01/1.7.0_71[\r][\n]"" (0ms)
13:24:47.191 [     org.apache.http.wire] >> ""Content-Type: application/x-www-form-urlencoded; charset=utf-8[\r][\n]"" (1ms)
13:24:47.191 [     org.apache.http.wire] >> ""Connection: Keep-Alive[\r][\n]"" (0ms)
13:24:47.191 [     org.apache.http.wire] >> ""Accept-Encoding: gzip[\r][\n]"" (0ms)
13:24:47.191 [     org.apache.http.wire] >> ""[\r][\n]"" (0ms)
13:24:47.279 [     org.apache.http.wire] << ""HTTP/1.1 204 No Content[\r][\n]"" (88ms)
13:24:47.279 [     org.apache.http.wire] << ""x-amz-id-2: xbTWOgHJWqro7cjTekdIwriz3jKVWp+2nVloj+SNqqtQXRiVDtmzy6OhOXMe4/xst4/P/rPwavw=[\r][\n]"" (0ms)
13:24:47.279 [     org.apache.http.wire] << ""x-amz-request-id: F6AD4E2E785E0AEA[\r][\n]"" (0ms)
13:24:47.279 [     org.apache.http.wire] << ""Date: Fri, 08 May 2015 17:25:21 GMT[\r][\n]"" (0ms)
13:24:47.280 [     org.apache.http.wire] << ""x-amz-version-id: null[\r][\n]"" (1ms)
13:24:47.280 [     org.apache.http.wire] << ""x-amz-delete-marker: true[\r][\n]"" (0ms)
13:24:47.280 [     org.apache.http.wire] << ""Server: AmazonS3[\r][\n]"" (0ms)
13:24:47.280 [     org.apache.http.wire] << ""[\r][\n]"" (0ms)
13:24:47.281 [..s.http.AmazonHttpClient] x-amzn-RequestId: not available (1ms)
13:24:47.281 [    com.amazonaws.request] Received successful response: 204, AWS Request ID: F6AD4E2E785E0AEA (0ms)
13:24:47.937 [..DefaultShutdownStrategy] Route: route1 preparing to shutdown complete. (656ms)
13:24:47.937 [..edPollConsumerScheduler] This consumer is stopping, so cancelling scheduled task: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@2486bd80 (0ms)
13:24:47.937 [..onent.aws.s3.S3Consumer] Stopping consumer: S3Consumer[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (0ms)
13:24:47.938 [..aredProducerServicePool] Stopping service pool: org.apache.camel.impl.SharedProducerServicePool@7075cca9 (1ms)
13:24:47.938 [..mponent.log.LogProducer] Stopping producer: Producer[log://error%20processing%20message] (0ms)
13:24:47.938 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=producers,name=LogProducer(0x89b2158) (0ms)
13:24:47.939 [..DefaultShutdownStrategy] Route: route1 shutdown complete, was consuming from: Endpoint[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (1ms)
13:24:47.939 [..DefaultShutdownStrategy] Graceful shutdown of 1 routes completed in 1 seconds (0ms)
13:24:47.940 [..rt.TimerListenerManager] Removed TimerListener: org.apache.camel.management.mbean.ManagedSuspendableRoute@60bb132e (1ms)
13:24:47.940 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=routes,name=""route1"" (0ms)
13:24:47.940 [..camel.impl.RouteService] Stopping services on route: route1 (0ms)
13:24:47.940 [..camel.impl.RouteService] Shutting down child service on route: route1 -> S3Consumer[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (0ms)
13:24:47.940 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=consumers,name=S3Consumer(0x218a968b) (0ms)
13:24:47.941 [..tExecutorServiceManager] Forcing shutdown of ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@1174d546[aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1] (1ms)
13:24:47.941 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""S3Consumer(0x218a968b)"" (0ms)
13:24:47.941 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Pipeline[[Channel[SetExchangePattern[InOnly]], Channel[Log(route1)[Starting file transfer between S3...]], Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]], Channel[Log(route1)[Finished file transfer between S3!]]]] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Pipeline[[Channel[SetExchangePattern[InOnly]], Channel[Log(route1)[Starting file transfer between S3...]], Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]], Channel[Log(route1)[Finished file transfer between S3!]]]] (1ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> SetExchangePattern[InOnly] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Channel[SetExchangePattern[InOnly]] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Log(route1)[Starting file transfer between S3...] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Channel[Log(route1)[Starting file transfer between S3...]] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Channel[DelegateSync[com.google.refine.importing.camel.CamelS3SaverRouteBuilder$1@18f63b8e]] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Log(route1)[Finished file transfer between S3!] (0ms)
13:24:47.942 [..camel.impl.RouteService] Shutting down child service on route: route1 -> Channel[Log(route1)[Finished file transfer between S3!]] (0ms)
13:24:47.943 [..camel.impl.RouteService] Shutting down services on route: route1 (1ms)
13:24:47.943 [..tExecutorServiceManager] Forcing shutdown of ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@4e67f43b[ErrorHandlerRedeliveryTask] (0ms)
13:24:47.944 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=threadpools,name=""ErrorHandlerRedeliveryThreadPool"" (1ms)
13:24:47.944 [..rt.TimerListenerManager] Removed TimerListener: org.apache.camel.management.mbean.ManagedCamelContext@a03313c (0ms)
13:24:47.944 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=context,name=""camel-1"" (0ms)
13:24:47.945 [..tExecutorServiceManager] Forcing shutdown of ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@3c443007[Running, pool size = 1, active threads = 0, queued tasks = 0, completed tasks = 1][ShutdownTask] (1ms)
13:24:47.945 [..faultInflightRepository] Shutting down with no inflight exchanges. (0ms)
13:24:47.946 [...camel.util.EventHelper] Ignoring notifying event Stopped CamelContext: camel-1. The EventNotifier has not been started yet: org.apache.camel.impl.DefaultRuntimeEndpointRegistry@7bab0b6c (1ms)
13:24:47.946 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultTypeConverter (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=eventnotifiers,name=EventNotifier(0x7bab0b6c) (1ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=SharedProducerServicePool (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""setExchangePattern1"" (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""aws-s3"" (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultRestRegistry (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=EndpointRegistry (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log1"" (0ms)
13:24:47.947 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultPackageScanClassResolver (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=errorhandlers,name=""DefaultErrorHandlerBuilder(ref:CamelDefaultErrorHandlerBuilder)"" (1ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""process1"" (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""log://error%20processing%20message"" (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogTracer (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""properties"" (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=components,name=""log"" (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger (0ms)
13:24:47.948 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=processors,name=""log2"" (0ms)
13:24:47.949 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultInflightRepository (1ms)
13:24:47.949 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=endpoints,name=""aws-s3://xxx-test?amazonS3Client=%23client&region=us-east-1"" (0ms)
13:24:47.949 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultShutdownStrategy (0ms)
13:24:47.949 [...DefaultManagementAgent] Unregistered MBean with ObjectName: org.apache.camel:context=camel-1,type=services,name=DefaultExecutorServiceManager (0ms)
13:24:47.949 [..il.IntrospectionSupport] Clearing cache[size=42, hits=57, misses=46, evicted=0] (0ms)
13:24:47.954 [..mpl.DefaultCamelContext] Apache Camel 2.14.1 (CamelContext: camel-1) uptime 4.193 seconds (5ms)
13:24:47.955 [..mpl.DefaultCamelContext] Apache Camel 2.14.1 (CamelContext: camel-1) is shutdown in 1.026 seconds (1ms)
13:24:47.956 [..pport$HangupInterceptor] Received hang up - stopping the main instance. (1ms)","njiang:1431628078:2015-05-15T02:27:58.390+0000:1431628078:2015-05-15T02:27:58.390+0000:If you take a look at the [camel-aws-s3|https://camel.apache.org/aws-s3.html] document, you can find the default option value of ""deleteAfterRead"" is true.
It means that camel alway delete the file when it finish the processing the S3 file. If you don't delete the file you may hit another issue CAMEL-8431 which should be addressed in Camel 2.14.3.

From the log message there still a inflight message there, I think it could explain that why the file  /xxx-workspaces/bbb.txt0 is not deleted yet.

BTW, please use email to discuss this kind of issue first, if it's an issue of Camel we can create a JIRA then.


jackyq2015:1431629480:2015-05-15T02:51:20.349+0000:1431629480:2015-05-15T02:51:20.349+0000:Just found from the source code of Unit test that the copy operation is not supported yet. "
0,CAMEL-8768,Bug,Major,2.15.2,"2.15.3, 2.16.0","

hadoop

",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Hassan Faouaz,0,2,2015-05-12 14:45:03+00:00,2015-07-09 10:08:16+00:00,"If you need to produce files into an existing HDFS2 path, the default behavoir is overwrite the path, which will delete all existing files on HDFS.  If overwrite option is disabled, then the component will complain that the existing HDFS directory exists and will not work.  


The propose solution is to add the following if statement to ignore check if the HDFS directory exists. The overwrite option should only be used for files not directories.


code snippet in HdfsOutputStream.java and patch is attached


 if (ret.info.getFileSystem().exists(new Path(ret.actualPath))) {
                //only check of not directory
                if (!ret.info.getFileSystem().isDirectory(new Path(ret.actualPath))) {
                    if (configuration.isOverwrite()) 

{
                        ret.info.getFileSystem().delete(new Path(ret.actualPath), true);
                    }

 else 

{
                        throw new RuntimeCamelException(""The file already exists"");
                    }

                }
            }","hfaouaz:1431414292:2015-05-12T15:04:52.249+0000:1431414396:2015-05-12T15:06:36.048+0000:patch is attached  to handle directory path in HDFS
davsclaus:1436407696:2015-07-09T10:08:16.964+0000:1436407696:2015-07-09T10:08:16.964+0000:Thanks for the patch. I did similar for the hdfs 1.x component."
0,CAMEL-8767,Improvement,Major,None,2.16.0,"
None
",Resolved,Pending Closed,2.16.0,Andrea Cosentino,Claus Ibsen,0,2,2015-05-12 07:05:42+00:00,2015-05-12 21:18:38+00:00,"This component does its own parsing as a ctr in ElasticsearchConfiguration. This is wrong as configuration should be plain pojos.


The uri parsing et all is done by the component.","acosentino:1431436710:2015-05-12T21:18:30.019+0000:1431436710:2015-05-12T21:18:30.019+0000:Related commits:
http://git-wip-us.apache.org/repos/asf/camel/commit/461e15f9
http://git-wip-us.apache.org/repos/asf/camel/commit/e085ef29
http://git-wip-us.apache.org/repos/asf/camel/commit/746e4263"
0,CAMEL-8766,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Claus Ibsen,0,2,2015-05-11 07:33:26+00:00,2015-05-11 15:19:47+00:00,"The camel-cache component has some old custom code to parse the uri to configure the configuration class.


This is not needed as it can be done out of the box from the component


Should be removed
org.apache.camel.component.cache.CacheConfiguration#parseURI


And just set the remaining as the cache name.","acosentino:1431328778:2015-05-11T15:19:38.139+0000:1431328778:2015-05-11T15:19:38.139+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/ae91e61e"
0,CAMEL-8765,Bug,Minor,2.15.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-05-10 18:34:08+00:00,2015-05-10 18:43:09+00:00,"There can be a NPE if the jpa consumer polls too soon



2015-05-10 20:35:25,605 [ction.BookOrder] WARN  JpaConsumer                    - Consumer Consumer[jpa://camelinaction.BookOrder] failed polling endpoint: Endpoint[jpa://camelinaction.BookOrder]. Will try again at next poll. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.component.jpa.JpaConsumer$1.doInTransaction(JpaConsumer.java:97)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)
	at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:94)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)",
0,CAMEL-8764,Bug,Minor,None,"2.15.3, 2.16.0","

Redis

",Resolved,Fixed,"2.15.3, 2.16.0",Andrea Cosentino,Andrea Cosentino,0,1,2015-05-10 14:22:11+00:00,2015-05-10 14:36:00+00:00,"Actually when you run CamelSpringRedisTest Karaf Integration test you get the following error:



ERROR: Bundle org.apache.servicemix.bundles.jedis [90] Error starting mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jedis/2.6.2_1 (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle org.apache.servicemix.bundles.jedis [90] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.servicemix.bundles.jedis [90]: Unable to resolve 90.0: missing requirement [90.0] osgi.wiring.package; (osgi.wiring.package=org.apache.commons.pool2)
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:745)
[org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient] : Remote bundle context found after 5495 millis




The test passes, but we need to avoid these kind of errors.


We need to add a dependency inside features.xml file with org.apache.commons/commons-pool2 package.","acosentino:1431239558:2015-05-10T14:32:38.095+0000:1431239760:2015-05-10T14:36:00.450+0000:Related commit on master:

http://git-wip-us.apache.org/repos/asf/camel/commit/ecad8a1e

Cherry-pick on camel-2.15.x:

http://git-wip-us.apache.org/repos/asf/camel/commit/b5a30b10"
0,CAMEL-8763,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-05-10 07:38:15+00:00,2015-05-10 10:49:58+00:00,"The delay is currently set to 0, which was not as intended, as it should be 1 sec just like for DLC etc.",
0,CAMEL-8762,New Feature,Minor,None,2.16.0,"
None
",Resolved,Pending Closed,2.16.0,Claus Ibsen,Andrew Block,0,3,2015-05-09 15:51:56+00:00,2015-05-13 10:08:40+00:00,"The CamelBlueprintTestSupport provides the ability to specify services that may not be available in the unit testing environment. However, the current addServicesOnStartup method only allows for a single service interface to be specified.


Additional methods should be added to enable the ability to specify multiple services with the same interface providing their own service properties


Common use cases:



Datasources
Camel components","githubbot:1431158720:2015-05-09T16:05:20.700+0000:1431158720:2015-05-09T16:05:20.700+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/512

    CAMEL-8762: Ability to add multiple services with same interface for blueprint testing

    Created additional methods to facilitate the adding of multiple services with the same interface and different service properties as part of unit testing blueprint applications

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8762

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/512.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #512
    
----
commit ef179719f37224a31a613d6bdb17b2fbef00f20f
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-05-09T16:03:15Z

    CAMEL-8762: Ability to add multiple services with same interface for blueprint testing

----

davsclaus:1431213591:2015-05-10T07:19:51.163+0000:1431213591:2015-05-10T07:19:51.163+0000:Thanks Andrew, do you mind updating the wiki documentation about this?
http://camel.apache.org/blueprint-testing.html
sabre1041:1431249781:2015-05-10T17:23:01.646+0000:1431249781:2015-05-10T17:23:01.646+0000:Wiki has been updated with an example
githubbot:1431380237:2015-05-12T05:37:17.720+0000:1431380237:2015-05-12T05:37:17.720+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/512
"
0,CAMEL-8761,Improvement,Major,None,2.16.0,"
None
",Resolved,Pending Closed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-05-09 14:35:11+00:00,2015-05-14 11:25:10+00:00,"This EIP will add/confirm the key using exchange on completion which happens when the entire routing is done.


But there can be use cases where you want the EIP to do this sooner, eg when the EIP scope ends.


For example outside the scope of the EIP and if some error happens then the on completion will rollback, and then a redelivery can happen. And if so then the idempotent block may execute again, despite that block was success before.


If users do not want this to happen then we need a new option they can turn on to do the on completion when the eip ends, eg in its callback and not as on completion.


What the name of this option should be is ... hard",davsclaus:1431573910:2015-05-14T11:25:10.292+0000:1431573910:2015-05-14T11:25:10.292+0000:There is a scope option to control this now
0,CAMEL-8760,Task,Minor,None,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-05-09 07:16:01+00:00,2015-05-11 15:41:52+00:00,"We should upgrade Netty 3.x to their new releases.
http://netty.io/news/2015/05/08/3-9-8-Final-and-3.html


They are not synched in mvn central yet",
0,CAMEL-8759,Task,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Claus Ibsen,0,2,2015-05-09 06:47:53+00:00,2015-05-10 14:35:24+00:00,"See
http://errorprone.info/


Its a project to scan and catch common java mistakes and turn them into javac compiler errors. 


Wonder if we should try this on the Camel source code - it may find some mistakes.


You install it in the mvn 
http://errorprone.info/installation","njiang:1431215310:2015-05-10T07:48:30.955+0000:1431215310:2015-05-10T07:48:30.955+0000:I just did a quick test on the master branch and find out some typo errors in the code.
I will commit the code after doing some clean up work later today.
njiang:1431239724:2015-05-10T14:35:24.624+0000:1431239724:2015-05-10T14:35:24.624+0000:Added errorprone profile to enable the check, and I also fix errors that found by the errorprone."
0,CAMEL-8758,Bug,Minor,2.14.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Jérémy Carnus,0,3,2015-05-08 12:36:51+00:00,2015-05-10 07:12:16+00:00,"I have randomly NPE for cache component
java.lang.NullPointerException
	at org.apache.camel.component.cache.CacheProducer.performCacheOperation(CacheProducer.java:98)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:103)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)","githubbot:1431170216:2015-05-09T19:16:56.716+0000:1431170216:2015-05-09T19:16:56.716+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/513

    CAMEL-8758: Fix to Camel Cache producer to avoid NPE in race condition

    Fix to avoid potential race condition which can cause NPE. An element is retrieved from the cache to perform a null check and if not null, retrieved once again to perform object retrieval. If the object is either removed from the cache or TTL expires, can result in NPE.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8758

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/513.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #513
    
----
commit b684be16fce360000bad4853666d29a8f7f56781
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-05-09T18:02:56Z

    CAMEL-8758: Fix to Camel Cache producer to avoid NPE in race condition

----

githubbot:1431213010:2015-05-10T07:10:10.538+0000:1431213010:2015-05-10T07:10:10.538+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/513

davsclaus:1431213136:2015-05-10T07:12:16.643+0000:1431213136:2015-05-10T07:12:16.643+0000:Thanks Andrew for the PR"
0,CAMEL-8757,Bug,Minor,"2.14.2, 2.15.2, 2.16.0","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Pending Closed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Stephan Siano,0,2,2015-05-08 12:36:42+00:00,2015-05-29 11:10:14+00:00,"The documentation for the soTimeout parameter in the camel-ftp option says:
FTP and FTPS Only: Camel 2.4: Is the SocketOptions.SO_TIMEOUT value in millis. Note SFTP will automatic use the connectTimeout as the soTimeout.


The last statement is unfortunately not entirely true. JSCH's Session.connect(int connectTimeout) method will initially set the SO_TIMEOUT of the underlying socket to connectTimeout, however once the connection phase is finished, it will change this value to the provided timeout value.


We have an incredibly broken SFTP server. On that connections sometimes hang after the connect phase, which causes polling consumer endpoints to hang in a Socket.read() forever (which means that they stop polling).


IMO the fix for that is twofold:
1. I attach a (trivial one-line) fix for the camel-ftp component, which will set the soTimeout parameter to the timeout parameter of the JSCH session.
2. Someone with the access rights should modify the camel-ftp documentation
3. It might make sense to set the default for the soTimeout parameter to something more sane than 0 (forever) but I don't do that in the patch (as it may change the existing behaviour).","siano:1431060469:2015-05-08T12:47:49.518+0000:1431060469:2015-05-08T12:47:49.518+0000:One might discuss whether this is an extension or a bug. IMO at least the documentation is faulty, one could also consider the change itself an extension.
davsclaus:1431131129:2015-05-09T08:25:29.875+0000:1431131129:2015-05-09T08:25:29.875+0000:Thanks Stephan. Are you able  to edit the documentation yourself? If not I suggest you read this page, and get things setup so you can do this. We love help. Also the ICLA signing is needed for becoming a committer. So that is just a step closer towards that ;)
http://camel.apache.org/how-do-i-edit-the-website.html
siano:1431294235:2015-05-11T05:43:55.128+0000:1431294235:2015-05-11T05:43:55.128+0000:On another thought I changed the patch a little. It might be better to move the session.setTimout() call into the createSession() method and add a comment.
siano:1431295181:2015-05-11T05:59:41.035+0000:1431295181:2015-05-11T05:59:41.035+0000:Hi Claus, 
I am not able to edit the documentation. I will check the ICLA signing with my employer (but this may take some time because I have to find out how that process works first).

There are some general questions remaining:
1. Does it make sense to set a general default for the soTimeout (e.g. 300000 (5 minutes))? This would change the behaviour for all endpoints, which is probably not so good (at least not in a patch). On the other hand having an SFTP (or FTP) poller that hangs forever on a stuck socket also doesn't make too much sense for me.
2. I am unsure about what is the best way to change the documentation. A potential approach would be:
a) remove the sentence ""Note SFTP will automatic use the connectTimeout as the soTimeout."" now. It is not really true.
b) once the patch is applied and released change the documentation again, however, I am not sure what would be the best here:
""FTP and FTPS Only: Camel 2.4, SFTP: Camel 2.14.3, 2.15.3: Is the SocketOptions.SO_TIMEOUT value in millis.""?

What do you think?
Stephan
davsclaus:1431480451:2015-05-13T09:27:31.130+0000:1431480451:2015-05-13T09:27:31.130+0000:Yeah had a deeper look and found that jsch session sets the timeout on SO socket too. So yeah lets apply your patch.
For a default value such as 300000, then we can do this from 2.16 onwards.
davsclaus:1431482624:2015-05-13T10:03:44.898+0000:1431482624:2015-05-13T10:03:44.898+0000:For setting a default value then please log a new JIRA and provide a patch.
siano:1432869014:2015-05-29T11:10:14.354+0000:1432869014:2015-05-29T11:10:14.354+0000:I created CAMEL-8818 for that"
0,CAMEL-8756,Bug,Major,2.15.2,"2.15.3, 2.16.0","

consumer
kafka

",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,André Stein,1,3,2015-05-08 10:42:38+00:00,2015-08-07 14:17:48+00:00,"Hi,


we encountered a problem when consuming events from Kafka and stopping the route while there are still events in Kafka.
Obviously, the run-method doesn't stop reading events from Kafka stream and so there are always events in-flight what prevents the route from being gracefully shut down.



12:30:27.611 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) is shutting down
12:30:27.612 INFO o.a.c.i.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 300 seconds)
12:30:27.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds.
12:30:28.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 299 seconds.
12:30:29.615 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 298 seconds.
12:30:30.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 297 seconds.
12:30:31.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 296 seconds.
12:30:32.616 INFO o.a.c.i.DefaultShutdownStrategy - Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 295 seconds.
12:30:33.618 INFO o.a.c.c.kafka.KafkaConsumer - Stopping Kafka consumer
12:30:33.618 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], ZKConsumerConnector shutting down
12:30:33.626 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] Stopping leader finder thread
12:30:33.626 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Shutting down
12:30:33.626 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Stopped 
12:30:33.627 INFO k.c.ConsumerFetcherManager$LeaderFinderThread - [camelGroup1_localhorst-1431081021945-a3d9f455-leader-finder-thread], Shutdown completed
12:30:33.627 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] Stopping all fetchers
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Shutting down
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Stopped 
12:30:33.627 INFO k.consumer.ConsumerFetcherThread - [ConsumerFetcherThread-camelGroup1_localhorst-1431081021945-a3d9f455-0-0], Shutdown completed
12:30:33.627 INFO k.c.ConsumerFetcherManager - [ConsumerFetcherManager-1431081022017] All connections stopped
12:30:33.662 INFO o.I0Itec.zkclient.ZkEventThread - Terminate ZkClient event thread.
12:30:33.696 INFO org.apache.zookeeper.ZooKeeper - Session: 0x14d2d359d900022 closed
12:30:33.696 INFO org.apache.zookeeper.ClientCnxn - EventThread shut down
12:30:33.696 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], ZKConsumerConnector shutdown completed in 78 ms
12:30:33.698 INFO o.a.c.i.DefaultShutdownStrategy - Route: route1 shutdown complete, was consuming from: Endpoint[kafka://localhost:9092?groupId=camelGroup1&topic=mykafkatopic&zookeeperHost=localhost]
12:30:33.699 INFO o.a.c.i.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 6 seconds
12:30:33.703 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) uptime 12.510 seconds
12:30:33.703 INFO o.a.c.impl.DefaultCamelContext - Apache Camel 2.15.2 (CamelContext: camel-1) is shutdown in 6.091 seconds
12:30:33.717 ERROR o.a.c.p.DefaultErrorHandler - Failed delivery for (MessageId: ID-localhorst-33557-1431081020733-0-1656461 on ExchangeId: ID-localhorst-33557-1431081020733-0-1656462). Exhausted after delivery attempt: 1 caught: java.util.concurrent.RejectedExecutionException

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [                                                                              ] [        14]
[route1            ] [filter1           ] [filter[{SimpleKafkaToCamelExample$1$$Lambda$1/1468303011@a38d7a3}]            ] [         1]
[route1            ] [bean1             ] [bean[SimpleKafkaToCamelExample$1$$Lambda$2/1354011814@e4ce7ae]                ] [         0]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-localhorst-33557-1431081020733-0-1656462
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-localhorst-33557-1431081020733-0-1656461, CamelRedelivered=false, CamelRedeliveryCounter=0, kafka.EXCHANGE_NAME=0, kafka.TOPIC=mykafkatopic}
	BodyType            byte[]
	Body                SOMESTRING
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.util.concurrent.RejectedExecutionException: null
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:349) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:58) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448) ~[camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) [camel-core-2.15.2.jar:2.15.2]
	at org.apache.camel.component.kafka.KafkaConsumer$AutoCommitConsumerTask.run(KafkaConsumer.java:209) [camel-kafka-2.15.2.jar:2.15.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_45]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]
12:30:34.171 INFO k.c.ZookeeperConsumerConnector - [camelGroup1_localhorst-1431081021945-a3d9f455], stopping watcher executor thread for consumer camelGroup1_localhorst-1431081021945-a3d9f455




Regards,
– 
André","astein:1431053077:2015-05-08T10:44:37.555+0000:1431053077:2015-05-08T10:44:37.555+0000:You can use the attached example to reproduce the issue.
Just set up a Kafka containing enough events to not be empty before hitting any key to initiate the shutdown.
astein:1431053243:2015-05-08T10:47:23.755+0000:1431053243:2015-05-08T10:47:23.755+0000:We produced a patch for {{org.apache.camel.component.kafka.KafkaConsumer}} and would be happy about a review.
davsclaus:1438928268:2015-08-07T14:17:48.502+0000:1438928268:2015-08-07T14:17:48.502+0000:Thanks for reporting and the patch. I polished it a bit"
0,CAMEL-8755,Improvement,Major,"2.14.2, 2.15.2",None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Björn Paulsen,0,2,2015-05-08 07:50:07+00:00,2016-02-05 15:17:32+00:00,"If the default errorHandler is a deadLetterChannel, no MessageHistory will be displayed by an Error.


This work:
public class defaultRoutes extends RouteBuilder {
	public void configure() throws Exception {
		errorHandler(defaultErrorHandler()
			.logExhausted(true)
			.logExhaustedMessageHistory(true));


This not:
public class defaultRoutes extends RouteBuilder {
	public void configure() throws Exception {
		errorHandler(deadLetterChannel(""direct:deadLetter"")
			.logExhausted(true)
			.logExhaustedMessageHistory(true));","davsclaus:1431214303:2015-05-10T07:31:43.693+0000:1431214303:2015-05-10T07:31:43.693+0000:This is intended as the DLC handles the exception - not making noise by default.
davsclaus:1431215027:2015-05-10T07:43:47.269+0000:1431215027:2015-05-10T07:43:47.269+0000:Though we should improve this so setting that value explicit to true then its being logged. Then it can be default false for the DLC so its not noisy.
davsclaus:1431217957:2015-05-10T08:32:37.574+0000:1431217957:2015-05-10T08:32:37.574+0000:You can set .logHandled(true) on the DLC then you can see the message history.
davsclaus:1431225527:2015-05-10T10:38:47.510+0000:1431225527:2015-05-10T10:38:47.510+0000:Fixing this onwards for 2.16 as it involves more changes. For older releases then just set logHandled=true also."
0,CAMEL-8754,Improvement,Major,2.15.2,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Willem Jiang,Valentin Mayamsin,0,3,2015-05-07 22:38:22+00:00,2015-07-17 07:39:51+00:00,"Due to incorrect camel-kafka Producer implementation, it prevents sending anything other than String. See https://github.com/apache/camel/blob/a7dfc45097a610dca1a39c86f481182efc20e152/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java#L72



String msg = exchange.getIn().getBody(String.class);




Apparently it should be something like



Object msg = exchange.getIn().getBody();","njiang:1431026926:2015-05-08T03:28:46.913+0000:1431026926:2015-05-08T03:28:46.913+0000:If you take a look at the definition of the kafka.javaapi.producer.Producer, Producer<String, String> producer;
You can see it just take the Message Key with String and Message Value with String.
It makes sense that we need to take the message body as a String, it is not String, camel type converter can help us turn it into String.
{code}
String msg = exchange.getIn().getBody(String.class);
{code}

I don't think we can change the code as you suggest, because you can only send the message body which type is String.
yavalek:1431028636:2015-05-08T03:57:16.963+0000:1431028636:2015-05-08T03:57:16.963+0000:That is not true. Take a look at Avro integration for example:

http://confluent.io/docs/current/schema-registry/docs/serializer-formatter.html
njiang:1431036956:2015-05-08T06:15:56.757+0000:1431036956:2015-05-08T06:15:56.757+0000:OK, the example just shows a way to send messages of Avro type to Kafka.  
As we have camel-avro data format, we can consider sending the more generic message to Kafka by default. 

yavalek:1431071044:2015-05-08T15:44:04.302+0000:1431071073:2015-05-08T15:44:33.488+0000:I think this is actually a bug since if you attempt to send anything other than String it will throw ClassCastException on the line mentioned above.

{code}
String msg = exchange.getIn().getBody(String.class);
{code}
davsclaus:1437089991:2015-07-17T07:39:51.982+0000:1437089991:2015-07-17T07:39:51.982+0000:Duplicate of CAMEL-8790"
0,CAMEL-8723,New Feature,Major,2.15.1,2.18.0,"

pojo
type-converter

",Resolved,Resolved,2.18.0,Luca Burgazzoli,Geert Schuring,0,5,2015-04-30 12:47:48+00:00,2016-05-03 13:29:15+00:00,"Using Pojo Messaging annotations, Camel automatically uses the Type Converter system to unmarshall XML messages to JAXB objects in the following scenario:



public class CamelPojoDemo {
	
    @Produce(uri = ""amq:camelpojodemo.reply"")
    private ProducerTemplate producer;
	
    @Consume(uri = ""amq:camelpojodemo.request"")
    public void trigger(UpdateMarketDataMessage message) {
    	String result = ""Processed prices: "" + message.getMarketData().getPrices().size();
    	producer.sendBody(result);
    }
}




However, handing the producer a JAXB object and expecting it to marshall it to XML before sending it does not seem possible in the current API.


I would like to propose to add the following method to the ProducerTemplate:




  /**
     * Sends the body to the default endpoint after converting it to the given type
     * <br/><br/>
     * <p/><b>Notice:</b> that if the processing of the exchange failed with an Exception
     * it is thrown from this method as a {@link org.apache.camel.CamelExecutionException} with
     * the caused exception wrapped.
     *
     * @param body the payload to send
     * @param type the type which the body should be converted to before sending
     * @throws CamelExecutionException if the processing of the exchange failed
     */
    void sendBody(Object body, Class type) throws CamelExecutionException;





This would allow users to send a JAXB object and instruct Camel to use its Type Converter system to marshall the object to XML:



producer.sendBody(jaxbObject, String.class);




Note: The sendBody, sendBodyAndHeader and sendBodyAndProperty methods are all overloaded several times which could mean quite a number of new methods.","davsclaus:1430369477:2015-04-30T12:51:17.348+0000:1430369477:2015-04-30T12:51:17.348+0000:I suggest using sendBodyAs as the name then it stands out for the others.
hekonsek:1430375151:2015-04-30T14:25:51.103+0000:1430375151:2015-04-30T14:25:51.103+0000:I really like the idea. That would make using {{typeConverter}} for the template users much easier. And +1 for the {{sendBodyAs}} method name.
cathodion:1430375268:2015-04-30T14:27:48.050+0000:1430375268:2015-04-30T14:27:48.050+0000:This patch adds the proposed methods. I've not been able to test it properly due to a problem in my local build environment, so just use this as a suggestion for a possible solution.
davsclaus:1430433948:2015-05-01T06:45:48.936+0000:1430433948:2015-05-01T06:45:48.936+0000:I think its maybe time we have a producer template that uses the builder pattern? The template itself has 

{code}
ProducerTemplateBuider template = ...

template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).send();
template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).to(""jms:queue:bla"").send();

template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).withPattern(ExchangePattern.InOnly).send();
Exchange out = template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).request();
Object reply = template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).requestBody();
String reply = template.withBodyAs(body, String.class).addHeader(""foo"", 123).addHeader(""bar"", 456).requestBodyAs(String.class);
{code}

And you can get the builder from the existing producer template
{code}
ProducerTemplateBuilder builder = template.builder();
...
{code}

And it would also work with the existing @Produce annotations so you can IoC inject it

{code}
@Produce(uri = ""jms:queue:foo"")
private ProducerTemplateBuilder template;
{code}
lb:1462239748:2016-05-03T09:42:28.239+0000:1462239748:2016-05-03T09:42:28.239+0000:Working to support withBodyAs in FluentProducerTemplate (CAMEL-9602)"
0,CAMEL-8722,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,2,2015-04-30 12:31:38+00:00,2015-04-30 14:27:12+00:00,"This allows end users to do custom code if an exception was thrown from the file consumer, when it attempts to delete / move files when the consumer was done routing the file.


By default the consumer would catch the exception and do a WARN log. This ticket allows to plugin a custom code to handle the exception.",hekonsek:1430375232:2015-04-30T14:27:12.045+0000:1430375232:2015-04-30T14:27:12.045+0000:Thanks Claus. That was fast :) .
0,CAMEL-8721,Bug,Major,"2.15.0, 2.15.1",None,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Yap Poh Soon,0,2,2015-04-30 08:52:55+00:00,2015-04-30 09:16:25+00:00,"All works fine in Camel v2.14.2, and i wanted to upgrade because of the RabbitMq Priority and AWS S3 multiPartUpload support.


However, when using Camel 2.15.0 (or 2.15.1), the property configuration failed within the Idempotent EIP component. see below at ""line 62""



<route id=""consumeAdServerQueue"" errorHandlerRef=""dlc"">
	<!-- receive work from a queue  -->
	<from uri=""rabbitmq://localhost/adserver?queue=ad_google_dfa_reporting_queue&amp;routingKey=ad_google_dfa_reporting_queue&amp;declare=false&amp;autoAck=false&amp;prefetchEnabled=true&amp;prefetchCount=2&amp;concurrentConsumers=1""/>

	<idempotentConsumer messageIdRepositoryRef=""memoryRepo"" skipDuplicate=""false"">
		<!-- use the messageId header as key for identifying duplicate messages -->
		<header>messageId</header>
		<!-- we will to handle duplicate messages using a filter -->
		<filter>
			<!-- the filter will only react on duplicate messages, if this property is set on the Exchange -->
<!--line 62 -->		<property>CamelDuplicateMessage</property>

			<log message=""duplicate request ${header.messageId}""/>
			<!-- and then stop -->
			<stop/>
		</filter>
		
		<to uri=""rabbitmq://localhost/adserver?queue=ad_google_dfa_reporting_stage_queue&amp;routingKey=ad_google_dfa_reporting_stage_queue&amp;declare=false&amp;bridgeEndpoint=true""/>
		
	</idempotentConsumer>
</route>




With error:



[localhost-startStop-1] 16:43:19,716 ERROR org.springframework.web.context.ContextLoader - Context initialization failed
org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Failed to import bean definitions from relative location [app-dfareporting-camel-context.xml]
Offending resource: ServletContext resource [/WEB-INF/spring/app-root-context.xml]; nested exception is org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 62 in XML document from ServletContext resource [/WEB-INF/spring/app-dfareporting-camel-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'property'. One of '{""http://camel.apache.org/schema/spring"":description, ""http://camel.apache.org/schema/spring"":expressionDefinition, ""http://camel.apache.org/schema/spring"":constant, ""http://camel.apache.org/schema/spring"":el, ""http://camel.apache.org/schema/spring"":exchangeProperty, ""http://camel.apache.org/schema/spring"":groovy, ""http://camel.apache.org/schema/spring"":header, ""http://camel.apache.org/schema/spring"":jxpath, ""http://camel.apache.org/schema/spring"":javaScript, ""http://camel.apache.org/schema/spring"":jsonpath, ""http://camel.apache.org/schema/spring"":language, ""http://camel.apache.org/schema/spring"":method, ""http://camel.apache.org/schema/spring"":mvel, ""http://camel.apache.org/schema/spring"":ognl, ""http://camel.apache.org/schema/spring"":php, ""http://camel.apache.org/schema/spring"":python, ""http://camel.apache.org/schema/spring"":ref, ""http://camel.apache.org/schema/spring"":ruby, ""http://camel.apache.org/schema/spring"":simple, ""http://camel.apache.org/schema/spring"":spel, ""http://camel.apache.org/schema/spring"":sql, ""http://camel.apache.org/schema/spring"":terser, ""http://camel.apache.org/schema/spring"":tokenize, ""http://camel.apache.org/schema/spring"":vtdxml, ""http://camel.apache.org/schema/spring"":xtokenize, ""http://camel.apache.org/schema/spring"":xpath, ""http://camel.apache.org/schema/spring"":xquery}' is expected.
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85)
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:76)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:272)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseDefaultElement(DefaultBeanDefinitionDocumentReader.java:197)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:182)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)
	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)
	at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:389)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:294)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)
	at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4973)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5467)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:632)
	at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:670)
	at org.apache.catalina.startup.HostConfig$DeployDescriptor.run(HostConfig.java:1839)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 62 in XML document from ServletContext resource [/WEB-INF/spring/app-dfareporting-camel-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'property'. One of '{""http://camel.apache.org/schema/spring"":description, ""http://camel.apache.org/schema/spring"":expressionDefinition, ""http://camel.apache.org/schema/spring"":constant, ""http://camel.apache.org/schema/spring"":el, ""http://camel.apache.org/schema/spring"":exchangeProperty, ""http://camel.apache.org/schema/spring"":groovy, ""http://camel.apache.org/schema/spring"":header, ""http://camel.apache.org/schema/spring"":jxpath, ""http://camel.apache.org/schema/spring"":javaScript, ""http://camel.apache.org/schema/spring"":jsonpath, ""http://camel.apache.org/schema/spring"":language, ""http://camel.apache.org/schema/spring"":method, ""http://camel.apache.org/schema/spring"":mvel, ""http://camel.apache.org/schema/spring"":ognl, ""http://camel.apache.org/schema/spring"":php, ""http://camel.apache.org/schema/spring"":python, ""http://camel.apache.org/schema/spring"":ref, ""http://camel.apache.org/schema/spring"":ruby, ""http://camel.apache.org/schema/spring"":simple, ""http://camel.apache.org/schema/spring"":spel, ""http://camel.apache.org/schema/spring"":sql, ""http://camel.apache.org/schema/spring"":terser, ""http://camel.apache.org/schema/spring"":tokenize, ""http://camel.apache.org/schema/spring"":vtdxml, ""http://camel.apache.org/schema/spring"":xtokenize, ""http://camel.apache.org/schema/spring"":xpath, ""http://camel.apache.org/schema/spring"":xquery}' is expected.
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:256)
	... 33 more
Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.a: Invalid content was found starting with element 'property'. One of '{""http://camel.apache.org/schema/spring"":description, ""http://camel.apache.org/schema/spring"":expressionDefinition, ""http://camel.apache.org/schema/spring"":constant, ""http://camel.apache.org/schema/spring"":el, ""http://camel.apache.org/schema/spring"":exchangeProperty, ""http://camel.apache.org/schema/spring"":groovy, ""http://camel.apache.org/schema/spring"":header, ""http://camel.apache.org/schema/spring"":jxpath, ""http://camel.apache.org/schema/spring"":javaScript, ""http://camel.apache.org/schema/spring"":jsonpath, ""http://camel.apache.org/schema/spring"":language, ""http://camel.apache.org/schema/spring"":method, ""http://camel.apache.org/schema/spring"":mvel, ""http://camel.apache.org/schema/spring"":ognl, ""http://camel.apache.org/schema/spring"":php, ""http://camel.apache.org/schema/spring"":python, ""http://camel.apache.org/schema/spring"":ref, ""http://camel.apache.org/schema/spring"":ruby, ""http://camel.apache.org/schema/spring"":simple, ""http://camel.apache.org/schema/spring"":spel, ""http://camel.apache.org/schema/spring"":sql, ""http://camel.apache.org/schema/spring"":terser, ""http://camel.apache.org/schema/spring"":tokenize, ""http://camel.apache.org/schema/spring"":vtdxml, ""http://camel.apache.org/schema/spring"":xtokenize, ""http://camel.apache.org/schema/spring"":xpath, ""http://camel.apache.org/schema/spring"":xquery}' is expected.
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)
	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)
	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:423)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3188)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:1812)
	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.startElement(XMLSchemaValidator.java:711)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:400)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2756)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)
	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:232)
	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284)
	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388)
	... 36 more","davsclaus:1430356147:2015-04-30T09:09:07.612+0000:1430356147:2015-04-30T09:09:07.612+0000:See the release notes, in the section about important
http://camel.apache.org/camel-2150-release.html

The release notes says that <property> is renamed to <exchangeProperty>

reusable:1430356539:2015-04-30T09:15:39.910+0000:1430356585:2015-04-30T09:16:25.003+0000:Oh yah, thank you for point that out!  Now let me try to iron another issue below 
{noformat}
Unsupported major.minor version 51.0 (unable to load class org.apache.camel.spring.handler.CamelNamespaceHandler)
{noformat}

guessing i need jdk 1.7..."
0,CAMEL-8720,Wish,Major,2.15.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Stijn Van Bael,0,3,2015-04-29 12:50:45+00:00,2022-09-02 09:02:10+00:00,"It would be nice if I could select a custom data format for an individual REST DSL route to marshal objects differently.


For example: Say I have a REST service that returns company data including the company's employees. But when I get an individual employee, I want to include the URI of the company in the response. So I defined a ""json-standalone"" data format that uses a different Jackson view.




rest(""/companies/{companyId}"")
  .get()

rest(""/employees/{employeeId}"")
  .get()
  .dataFormat(""json-standalone"")

@Bean(name = ""json-standalone"")
@Scope(""prototype"")
public JacksonDataFormat dataFormat() {
    return new JacksonDataFormat(objectMapper, HashMap.class, JsonViews.Standalone.class);
}",davsclaus:1662080530:2022-09-02T09:02:10.638+0000:1662080530:2022-09-02T09:02:10.638+0000:this will make the rest-dsl too complex
0,CAMEL-8719,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Kristopher Noronha,0,3,2015-04-29 11:40:34+00:00,2015-07-01 19:09:33+00:00,"Upgrade camel-quickfix dependency to quickfixj 1.6.0. Quickfixj 1.6.0, released on 02 April 2015, supercedes quickfixj 1.5.3.","acosentino:1430292485:2015-04-29T15:28:05.190+0000:1430292485:2015-04-29T15:28:05.190+0000:Hi,

I've opened an issue to ServiceMix JIRA to release the related bundle: https://issues.apache.org/jira/browse/SM-2537

Thanks for the ticket :-)
acosentino:1432766372:2015-05-28T06:39:32.120+0000:1432766372:2015-05-28T06:39:32.120+0000:This upgrade is not simple. From version 1.5.3 to 1.6.0 the Mina dependency change from 1.x family to 2.x family.
davsclaus:1435746953:2015-07-01T18:35:53.740+0000:1435746953:2015-07-01T18:35:53.740+0000:We got this from PR
https://github.com/apache/camel/pull/550
acosentino:1435748973:2015-07-01T19:09:33.544+0000:1435748973:2015-07-01T19:09:33.544+0000:Hi,

I really didn't see the PR. Sorry for this and thanks for taking care of that.

Andrea"
0,CAMEL-8718,Bug,Major,"2.12.5, 2.13.4, 2.14.2, 2.15.1","2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Grzegorz Grzybek,Grzegorz Grzybek,0,3,2015-04-29 09:34:07+00:00,2015-05-08 07:08:39+00:00,"In each iteration new socket connection is created, but never closed. This leads to growth of ESTABLISHED connections to FTP server.","ggrzybek:1430277471:2015-04-29T11:17:51.484+0000:1430277471:2015-04-29T11:17:51.484+0000:Fixed in:
* [master branch|https://github.com/apache/camel/commit/e129b88c223e53595113b54a3637e6fabb5a940f]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/7c51a070b9ef6d2d690eaa8f370b2bb1fbc8504f]
* [camel-2.14.x branch|https://github.com/apache/camel/commit/c18c4157d30fa81785c8e7d938006818da5af34b]

kvileid@yahoo.com:1430809641:2015-05-05T15:07:21.247+0000:1430810465:2015-05-05T15:21:05.922+0000:I am working in a project that has been hit by this problem with leaking sockets, and great to see that problem is attacked.
However I have some comments to the chosen solution.

1. In FtpBadLoginConnectionLeakTest.java using maximumReconnectAttempts=3 (which is camel default), causes leaking sockets, and hence test to fail.

2. In RemoteFileConsumer.java. Some FTP servers (at least one of ours), responds OK to getOperations().sendNoop(), even though user has not been authorized.
This again causes leaking sockets where;
            isConnected = getOperations().sendNoop();  // isConnected is true

and loggedIn is always false (since credentials are wrong in this case), causing new connect, without disconnecting previous connection, for every poll.

        if (!loggedIn || !isConnected) {
            loggedIn = getOperations().connect((RemoteFileConfiguration) endpoint.getConfiguration());

3. Problem with leaking connections is also seen for Ftp producers, suggesting that solution could be done in common part for consumers and producers.

----------

Possible solutions:
1. In FtpOperations.java could disconnect if login failed

{code}
if (!login) {
    throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString());
}
{code}

Changed to:

{code}
if (!login) {
    client.disconnect();
    throw new GenericFileOperationFailedException(client.getReplyCode(), client.getReplyString());
}
{code}

2. Disconnect regardless of what goes wrong, maybe a more robust solution. In FtpOperations.java

{code}
public boolean connect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
{code}

Changed to:

{code}
public boolean connect(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
    try {
        return connectInternal(configuration);
    } catch (GenericFileOperationFailedException e) {
        if (isConnected()) {
            disconnect();
        }
        throw e;
    }
}
   
private boolean connectInternal(RemoteFileConfiguration configuration) throws GenericFileOperationFailedException {
{code}

davsclaus:1430950984:2015-05-07T06:23:04.704+0000:1430950984:2015-05-07T06:23:04.704+0000:Karsten, have you tried implementing those code changes you suggest and test it on your system to see if it works?

You are welcome to contribute these changes as a patch or PR
http://camel.apache.org/contributing.html
kvileid@yahoo.com:1430959378:2015-05-07T08:42:58.246+0000:1430959378:2015-05-07T08:42:58.246+0000:I have tried implementing the code changes and tested them. However I will test the code changes a bit more in our system, and provide some additional unit tests (for ftp producers), and create a pull request.


ggrzybek:1430962001:2015-05-07T09:26:41.000+0000:1430962001:2015-05-07T09:26:41.000+0000:Thank you very much!



ggrzybek:1430984191:2015-05-07T15:36:31.691+0000:1430984191:2015-05-07T15:36:31.691+0000:I confirm that simply disconnecting {{client}} after {{org.apache.commons.net.ftp.FTPClient#login()}} returns {{false}} prevents from leaking sockets/connections.
Checking with producer and whether this is correct solution.
ggrzybek:1430993604:2015-05-07T18:13:24.826+0000:1430993604:2015-05-07T18:13:24.826+0000:Fixed producer and consumer connection leak (general approach) in:
* [master branch|https://github.com/apache/camel/commit/e1b6592a18362a5903c88923d18abb3430c1c630]
* [camel-2.15.x branch|https://github.com/apache/camel/commit/8c6dce78c11c91d070ba1894c0a4d71336ad4e03]
* [camel-2.14.x branch|https://github.com/apache/camel/commit/3f44084b38030e2fb6bd6bf399e1afedc4382d5a]

ggrzybek:1430993671:2015-05-07T18:14:31.312+0000:1430993671:2015-05-07T18:14:31.312+0000:[~kvileid@yahoo.com], could you check if this works for you?
I added a test for this {{NOOP}} case too, but I think now it is not an issue anymore.
kvileid@yahoo.com:1431040032:2015-05-08T07:07:12.693+0000:1431040032:2015-05-08T07:07:12.693+0000:I can confirm that fix has been tested and works
ggrzybek:1431040119:2015-05-08T07:08:39.858+0000:1431040119:2015-05-08T07:08:39.858+0000:Thanks for checking!"
0,CAMEL-8717,Bug,Major,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2015-04-29 08:15:51+00:00,2015-04-29 10:27:46+00:00,No Desc,"ffang:1430274466:2015-04-29T10:27:46.754+0000:1430274466:2015-04-29T10:27:46.754+0000:commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/cd95b8b3 for master
https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=f42186b1 for camel-2.15.x branch"
0,CAMEL-8716,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-04-29 06:34:54+00:00,2015-04-29 11:13:54+00:00,"See SO
http://stackoverflow.com/questions/29861465/custom-httpbinding-in-camel-http-component


The class org.apache.camel.component.http.DefaultHttpBinding should have a default no arg ctr, and then dependency inject the endpoint instead. So it should have a getter/setter for the endpoint.


Then the component can inject the endpoint automatic.


Then end users can easy extend the default and provide it to Camel as the default no-arg ctr is used.",
0,CAMEL-8715,Bug,Minor,2.15.1,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-29 05:40:56+00:00,2015-04-29 11:13:46+00:00,"See SO
http://stackoverflow.com/questions/29933629/apache-camel-sql-component-is-not-closing-resultset


The Spring javadocs says



<p><b>NOTE:</b> Any ResultSets opened should be closed in finally blocks
within the callback implementation. Spring will close the Statement
object after the callback returned, but this does not necessarily imply
that the ResultSet resources will be closed: the Statement objects might
get pooled by the connection pool, with 
{@code close}
 calls only
returning the object to the pool but not physically closing the resources.",
0,CAMEL-8714,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-28 19:56:28+00:00,2015-04-28 20:02:44+00:00,"The Openshift Java Client offers the methods to manipulate Environment Variables on the platform. These operations are:



GetAll
Add
Update
Remove
Get



It can be useful to have these operations in our component.","acosentino:1430222555:2015-04-28T20:02:35.200+0000:1430222555:2015-04-28T20:02:35.200+0000:Related commit:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=fa947f01edc53efff0558fea41f9738747d8e20a"
0,CAMEL-8713,Bug,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-28 15:08:13+00:00,2015-04-28 18:34:02+00:00,"See CAMEL-7521


When using parallel processing then the boss thread aggregate on the fly is a single threaded boss thread that controls the aggregation. So even if setting parallel aggregate = true, then its still only 1 boss thread.


We should have a thread pool (or allow to use the existing pool for parallel processing) for worker threads to do the aggregate work in parallel.",
0,CAMEL-8712,Improvement,Major,"2.15.0, 2.15.1","2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-04-28 13:44:57+00:00,2015-04-30 05:27:11+00:00,It could be better to just share the timer inside the camel netty component instead of using static variable to share it across the JVM.,
0,CAMEL-8711,Improvement,Major,2.15.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Thomas Diesler,0,3,2015-04-28 08:09:29+00:00,2015-05-06 10:39:15+00:00,"On a JMS message consumer route, we support



jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE




The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()


The Session is however not exposed to the client, which makes it impossible to call Session.recover(). CLIENT_ACKNOWLEDGE has IMHO currently limited use because of this.


CrossRef: https://jira.spring.io/browse/SPR-12961","mswiech:1430796781:2015-05-05T11:33:01.111+0000:1430796781:2015-05-05T11:33:01.111+0000:Just for completeness:
There is same problem with 
{code}
activemq:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE
{code}

davsclaus:1430875813:2015-05-06T09:30:13.368+0000:1430875813:2015-05-06T09:30:13.368+0000:[~tdiesler] please close the SPR ticket as we can use {{org.springframework.jms.listener.SessionAwareMessageListener}} which provides the session.
davsclaus:1430879871:2015-05-06T10:37:51.102+0000:1430879871:2015-05-06T10:37:51.102+0000:There is API changes so keeping this on 2.16 for now.
davsclaus:1430879955:2015-05-06T10:39:15.606+0000:1430879955:2015-05-06T10:39:15.606+0000:You can now get the JMS session from the Camel JmsMessage.

{code}
Exchange exchange = ...
JmsMessage camelMsg = exchange.getIn(JmsMessage.class);
Session session = camelMsg.getJmsSession();
// and the JMS message as today
Message jmsMessage = camelMsg.getJmsMessage();
{code}
"
0,CAMEL-8710,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.15.2, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-04-28 00:36:29+00:00,2015-04-28 00:40:57+00:00,Right now we auth against google user accounts only (see https://github.com/apache/camel/blob/master/components/camel-google-calendar/src/main/java/org/apache/camel/component/google/calendar/BatchGoogleCalendarClientFactory.java) but there are also other options like service accounts. Should make this pluggable so folks can use whatever they want.,janstey:1430152857:2015-04-28T00:40:57.115+0000:1430152857:2015-04-28T00:40:57.115+0000:https://github.com/apache/camel/commit/d57437c663e4218ce2525e0ce6082411e37b00b9
0,CAMEL-8709,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-27 19:39:15+00:00,2015-04-27 19:59:32+00:00,"We have to add the async operation available on Infinispan. Methods like:



PutAsync
PutAllAsync
PutIfAbsentAsync
RemoveAsync
ReplaceAsync","acosentino:1430135962:2015-04-27T19:59:22.168+0000:1430135962:2015-04-27T19:59:22.168+0000:Related commit:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=1451499b83a69842658f0bfd95a8cd1fa2632e80"
0,CAMEL-8708,Bug,Minor,2.15.1,"2.16.2, 2.17.0","
None
",Resolved,Fixed,"2.16.2, 2.17.0",Claus Ibsen,Alex Savitsky,0,5,2015-04-27 16:51:31+00:00,2015-12-14 07:56:18+00:00,"Camel-soap code assumes that all Faults that a Camel SOAP endpoint is receiving, are containing a Detail element. Sending a Fault without Detail will result in an NPE. Detail is optional element in SOAP Faults (see http://www.w3.org/TR/soap12-part1/#soapfault) and its absence should not generate an error.","davsclaus:1430217606:2015-04-28T18:40:06.080+0000:1430217606:2015-04-28T18:40:06.080+0000:People is welcome to work on a patch to fix this.

It would be good to report the stacktrace of the NPE as that helps people to pin point the location where to fix this.
alex_savitsky:1430218208:2015-04-28T18:50:08.758+0000:1430218208:2015-04-28T18:50:08.758+0000:The culprit piece is in org.apache.camel.dataformat.soap.Soap12DataFormatAdapter.createExceptionFromFault() method, first line dereferences fault.getDetail().getAny(), but getDetail() can return null as per SOAP spec. I would've done a patch as well, but I'm not sure of the functionality the original author has intended to put in this method, that's why I'd prefer the original author to take a look at it. Basically, the whole method seem to insist to have the FaultDetail around, yet it's optional, and it's not clear what the intended functionality was for its absence (if there was any, that is)
jxwest:1449204157:2015-12-04T12:42:37.019+0000:1449204157:2015-12-04T12:42:37.019+0000:Was this ever fixed/patched?
davsclaus:1449441477:2015-12-07T06:37:57.910+0000:1449441477:2015-12-07T06:37:57.910+0000:No a patch is much welcome, just do that != null check as suggested by Alex.
http://camel.apache.org/contributing
githubbot:1449833669:2015-12-11T19:34:29.044+0000:1449833669:2015-12-11T19:34:29.044+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/727

    CAMEL-8708: SOAP marshaling shouldn't fail for Faults that lack an op…

    …tional Detail element

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel CAMEL-8708

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/727.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #727
    
----
commit 6e81be37253fc7c78c39d4483bfe4f8be57e8417
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2015-12-11T17:22:40Z

    CAMEL-8708: SOAP marshaling shouldn't fail for Faults that lack an optional Detail element

----

pascalschumacher:1449833887:2015-12-11T19:38:07.107+0000:1449833887:2015-12-11T19:38:07.107+0000:Just adding a != null check for the detail was not possible, because it is used to determine the class of the exception created. I solved this be creating a generic SOAPFaultException when the detail is not present.
githubbot:1450050978:2015-12-14T07:56:18.699+0000:1450050978:2015-12-14T07:56:18.699+0000:Github user PascalSchumacher closed the pull request at:

    https://github.com/apache/camel/pull/727
"
0,CAMEL-8707,Bug,Major,2.15.1,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Gururaja Kowlali,0,2,2015-04-27 14:50:40+00:00,2015-04-28 14:05:25+00:00,"We are evaluating on using apache camel + jsmpp for sending smses. 
apache camel version: 2.15.1
jsmpp version: 2.1.1
smpp works fine with proxy, but smpps with doesn't work. 
Route definition is as follows: 
from(direct:start)
.to(smpps://user@smschost:smscport?password=********&httpProxyHost=proxyhostname&httpProxyPort=proxyport®isteredDelivery=1&lazySessionCreation=true)
from(smpps://user@smschost:smscport?password=********&httpProxyHost=proxyhostname&httpProxyPort=proxyport®isteredDelivery=1)
.to(direct.result)
When using smpps, we are getting the following exception: 
Failed to start camel Context
java.io.IOException: SmppConnectionFactory: Unrecognized SSL message,
plaintext connection?
        at
org.apache.camel.component.smpp.SmppConnectionFactory.createConnection(SmppConnectionFactory.java:97)
        at
org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:221)
        at
org.jsmpp.session.SMPPSession.connectAndBind(SMPPSession.java:200)
        at
org.apache.camel.component.smpp.SmppConsumer.createSession(SmppConsumer.java:95)
        at
org.apache.camel.component.smpp.SmppConsumer.doStart(SmppConsumer.java:84)
In SmppConnectionFactory.createConnection(), for smpps, there is a HTTP
connect in SSL Socket. 
We should be tunnelling SSL through HTTP, as given below: 
https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/samples/sockets/client/SSLSocketClientWithTunneling.java","kgururaja:1430117905:2015-04-27T14:58:25.898+0000:1430117905:2015-04-27T14:58:25.898+0000:Attachment has the patch to fix this.
njiang:1430201125:2015-04-28T14:05:25.251+0000:1430201125:2015-04-28T14:05:25.251+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches with thanks to Gururaja."
0,CAMEL-8706,Improvement,Minor,2.15.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Mauricio Jost,0,4,2015-04-27 14:26:58+00:00,2015-07-02 19:54:29+00:00,"The elasticsearch component does not allow to set a multi-transport-addresses client as endpoint, even though the underlying elasticsearch client supports it. 


It does not allow either to choose any of replication type, or write consistency level for INDEX operations.","githubbot:1430116492:2015-04-27T14:34:52.399+0000:1430116492:2015-04-27T14:34:52.399+0000:GitHub user mauriciojost opened a pull request:

    https://github.com/apache/camel/pull/507

    CAMEL-8706: Increase set of parameters for Elasticsearch

    More parameters are available for Elasticsearch component,
    including replication type, write consistency level and
    multiple transport addresses.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mauriciojost/camel CAMEL-8706

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/507.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #507
    
----
commit 346acbac9f586b88d8e7c9244ca3af8582b8807f
Author: Mauricio Jost <mauricio.jost@activeeon.com>
Date:   2015-04-27T14:30:46Z

    CAMEL-8706: Increase set of parameters for Elasticsearch
    
    More parameters are available for Elasticsearch component,
    including replication type, write consistency level and
    multiple transport addresses.

----

githubbot:1430136575:2015-04-27T20:09:35.900+0000:1430136575:2015-04-27T20:09:35.900+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/507

acosentino:1430137171:2015-04-27T20:19:31.527+0000:1430140907:2015-04-27T21:21:47.264+0000:Thanks for the PR. It has been merged.
mauriciojost:1430177588:2015-04-28T07:33:08.921+0000:1430177588:2015-04-28T07:33:08.921+0000:My ICLA has been filed. 
acosentino:1430178356:2015-04-28T07:45:56.915+0000:1430178356:2015-04-28T07:45:56.915+0000:Do you already have karma to update documentation pages on camel site?

If you want you can help with documentation :-)
mauriciojost:1430182981:2015-04-28T09:03:01.362+0000:1430182981:2015-04-28T09:03:01.362+0000:Sure, I will do it. 
mauriciojost:1430620718:2015-05-03T10:38:38.234+0000:1430620718:2015-05-03T10:38:38.234+0000:I probably haven't been granted the rights to edit the page, at least when clicking on ""edit page"" at http://camel.apache.org/elasticsearch.html I got ""Not Permitted"" message. My ID is ""mauriciojost"" :)
davsclaus:1430622406:2015-05-03T11:06:46.399+0000:1430622406:2015-05-03T11:06:46.399+0000:Thanks Mauricio. I just granted you karma to edit the docs.
mauriciojost:1430816244:2015-05-05T16:57:24.242+0000:1430816244:2015-05-05T16:57:24.242+0000:I have just updated it. Please take a look and let me know. "
0,CAMEL-8705,Bug,Minor,2.15.1,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Jonas Waage,0,3,2015-04-27 14:16:53+00:00,2015-04-30 06:14:31+00:00,"Camel will throw FailedToCreateRouteException when using SimpleScheduledRoutePolicy or CronScheduledRoutePolicy on routes defined with several ""from"" (as below).



<<< FAILURE! - in org.apache.camel.routepolicy.quartz2.SimpleScheduledRoutePolicyTest
testScheduledSuspendAndRestartPolicyTwoConsumers(org.apache.camel.routepolicy.quartz2.SimpleScheduledRoutePolicyTest)  Time elapsed: 0.839 sec  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route test: Route(test)[[From[direct:start], From[direct:start2]] -> [To... because of org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-test.job-START-test', because one already exists with this identification.





    context.addRoutes(new RouteBuilder() {
            public void configure() {
                SimpleScheduledRoutePolicy policy = new SimpleScheduledRoutePolicy();
                long suspendTime = System.currentTimeMillis() + 1000L;
                policy.setRouteSuspendDate(new Date(suspendTime));
                policy.setRouteSuspendRepeatCount(0);
                long startTime = System.currentTimeMillis() + 4000L;
                policy.setRouteStartDate(new Date(startTime));
                policy.setRouteResumeRepeatCount(1);
                policy.setRouteResumeRepeatInterval(3000);
                
                from(""direct:start"").from(""direct:start2"")
                    .routeId(""test"")
                    .routePolicy(policy)
                    .to(""mock:success"");
            } 
        });","MadMod:1430115607:2015-04-27T14:20:07.594+0000:1430115607:2015-04-27T14:20:07.594+0000:Possible patch that builds Id from ""from"" and not routeId.
davsclaus:1430203774:2015-04-28T14:49:34.733+0000:1430203774:2015-04-28T14:49:34.733+0000:Having 2+ inputs to the same route is deprecated. Favor use 1 input for a route.


MadMod:1430216357:2015-04-28T18:19:17.114+0000:1430216357:2015-04-28T18:19:17.114+0000:So the current preferred way would be to define three routes for the above? Two with a policy passing along to a third with common logic?

njiang:1430345640:2015-04-30T06:14:00.210+0000:1430345671:2015-04-30T06:14:31.955+0000:2+ From route could confuse the user and the policy, I'm agree with Claus, so I just resolve this issue with won't fix. "
0,CAMEL-8704,Task,Blocker,2.14.2,2.14.3,"
None
",Resolved,Fixed,2.14.3,Willem Jiang,Claus Ibsen,0,2,2015-04-27 05:45:18+00:00,2015-04-30 04:49:00+00:00,"The CI server cannot build 2.14.x due OSGi jar not found
https://builds.apache.org/job/Camel.2.14.x.notest/147/consoleFull



Waiting for Jenkins to finish collecting data
[ERROR] Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2) -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2)
	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:210)




It seems the OSGi jar is in central but only 2 versions. There is a 3.6.0 and 3.7.1 JAR. So I guess it may fool Mvn to download from central instead of some eclipse repo. As I think those JARs are in Eclipse Maven Repo as well. 


Nevertheless building the source should work out of the box.","njiang:1430340540:2015-04-30T04:49:00.283+0000:1430340540:2015-04-30T04:49:00.283+0000:The build is green now. 
https://builds.apache.org/view/A-D/view/Camel/job/Camel.2.14.x.notest/151/"
0,CAMEL-8703,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-26 12:20:09+00:00,2015-04-26 13:05:22+00:00,"It can be useful to have among available operations something related to Openshift scale. New operations to add:



scaleUp
scaleDown
getGitUrl



I'll test these operations on my private account.","acosentino:1430023570:2015-04-26T12:46:10.487+0000:1430023570:2015-04-26T12:46:10.487+0000:Related commit:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=d9ae20ba7d8d41a9604cd624addf354ea6df06cd"
0,CAMEL-8702,Bug,Major,"2.15.0, 2.15.1","2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Willem Jiang,HugoMarco,0,2,2015-04-26 07:18:34+00:00,2015-04-30 06:06:03+00:00,"I used netty4 and netty4http as producer ,when occurs  exception ""Connection reset by peer"",netty4 client's EventLoopGroup ""Selector"" thread and related port won't shut down.I used thread dump and found ClientChannelHandler's method exceptionCaught just close channel,it won't close ""Selector"" thread and port, and the same to NettyProducer.NettyProducerPoolableObjectFactory.destroyObject.","njiang:1430073798:2015-04-27T02:43:18.288+0000:1430073798:2015-04-27T02:43:18.288+0000:You can configure the wokerGroup option to setup a custom eventloop across the all the NettyProducer, in this way the NettyProducer are sharing this workGroup across the NettyEndpoint, and we just need shutdown it when the whole application is shutdown.
I will commit a quick fix it incase the user doesn't setup the workGroup option to let the producer show the workerGroup across the NettyProducer.
njiang:1430098866:2015-04-27T09:41:06.530+0000:1430098904:2015-04-27T09:41:44.811+0000:I just committed a patch for it, please try the latest Camel 2.15.2-SNAPSHOT for verification. Now we just create one WorkGroup for all the NettyProducer if the WorkGroup option is not specified."
0,CAMEL-8701,Test,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Unassigned,Andrea Cosentino,0,4,2015-04-25 21:30:04+00:00,2015-08-30 09:12:21+00:00,The camel-docker tests don't work anymore. It seems that the connection to localhost:5000 used in the base header test is refused every time and then we get an out of memory PermGen space.,"hekonsek:1430045523:2015-04-26T18:52:03.795+0000:1430045523:2015-04-26T18:52:03.795+0000:Can you share your Docker server version?

Cheers.
acosentino:1430045974:2015-04-26T18:59:34.905+0000:1430045974:2015-04-26T18:59:34.905+0000:Hi Henryk,

My Docker Server version is 1.6.0.

Anyway, I've upgraded my version one week ago and the tests was ok. I've pushed two commits (related to client configuration options) in last days, but I don't think the problem is there: I've removed my lines of code and the problem still remains.

Thank you.

hekonsek:1430114820:2015-04-27T14:07:00.670+0000:1430114820:2015-04-27T14:07:00.670+0000:Hi Andrea,

Can you check if Docker client used by Camel is compatible with Docker 1.6? 1.6 has been released something like two weeks ago. Maybe the client doesn't support it yet?

Cheers.
acosentino:1430141177:2015-04-27T21:26:17.311+0000:1430141177:2015-04-27T21:26:17.311+0000:I'll do this check :-)

We have the same problem on Jenkins latest builds.

Cheers.
Andrea
acosentino:1430296440:2015-04-29T16:34:00.269+0000:1430296440:2015-04-29T16:34:00.269+0000:Same problem. I'll do other tests. What is really weird is the Jenkins build.
acosentino:1430631942:2015-05-03T13:45:42.820+0000:1430631942:2015-05-03T13:45:42.820+0000:Maybe the problem is related to this:

https://github.com/docker-java/docker-java/issues/196
davsclaus:1430889546:2015-05-06T13:19:06.786+0000:1430889546:2015-05-06T13:19:06.786+0000:These tests still fails. Can we disable them until the docker java module works.
acosentino:1430916874:2015-05-06T20:54:34.823+0000:1430916874:2015-05-06T20:54:34.823+0000:Now 34 tests are skipped.
acosentino:1431301715:2015-05-11T07:48:35.445+0000:1431301715:2015-05-11T07:48:35.445+0000:Even with Docker-java 1.3.0 release, we have the same problem. The 1.3.0 has been released yesterday.
sabre1041:1431719521:2015-05-16T03:52:01.968+0000:1431719521:2015-05-16T03:52:01.968+0000:The issue appears to be due to the version of the JDK and powermock and not the docker API

{code}
java.lang.VerifyError: Bad <init> method call from inside of a branch
Exception Details:
  Location:
    org/apache/camel/component/docker/headers/WaitContainerCmdHeaderTest.<init>()V @32: invokespecial
  Reason:
    Error exists in the bytecode
  Bytecode:
    0000000: 2a4c 1210 b800 1603 bd00 0d12 17b8 001b
    0000010: b800 214e 2db2 0025 a500 0e2a 01c0 0027
    0000020: b700 2aa7 0009 2bb7 002c 0157 a700 0301
    0000030: 3a05 2ab8 0032 b1                      
  Stackmap Table:
    full_frame(@38,{UninitializedThis,UninitializedThis,Top,Object[#13]},{})
    full_frame(@44,{Object[#2],Object[#2],Top,Object[#13]},{})
    same_frame(@47)

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2570)
	at java.lang.Class.privateGetPublicMethods(Class.java:2690)
	at java.lang.Class.getMethods(Class.java:1467)
	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.getTestMethods(PowerMockJUnit44RunnerDelegateImpl.java:93)
	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.<init>(PowerMockJUnit44RunnerDelegateImpl.java:69)
	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl.<init>(PowerMockJUnit47RunnerDelegateImpl.java:42)
	at org.powermock.modules.junit4.internal.impl.PowerMockJUnit49RunnerDelegateImpl.<init>(PowerMockJUnit49RunnerDelegateImpl.java:25)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
	at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.createDelegatorFromClassloader(JUnit4TestSuiteChunkerImpl.java:156)
	at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.createDelegatorFromClassloader(JUnit4TestSuiteChunkerImpl.java:40)
	at org.powermock.tests.utils.impl.AbstractTestSuiteChunkerImpl.createTestDelegators(AbstractTestSuiteChunkerImpl.java:244)
	at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.<init>(JUnit4TestSuiteChunkerImpl.java:61)
	at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.<init>(AbstractCommonPowerMockRunner.java:32)
	at org.powermock.modules.junit4.PowerMockRunner.<init>(PowerMockRunner.java:34)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:29)
	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:21)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:26)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.<init>(JUnit4TestReference.java:33)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestClassReference.<init>(JUnit4TestClassReference.java:25)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:48)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
{code}

This corresponds to the following articles: 

* https://bugs.openjdk.java.net/browse/jdk-8051012
* https://access.redhat.com/solutions/1157183

Two solutions are available

# Upgrade JDK version
# Add -noverify switch to maven-surefire-plugin configuration
acosentino:1440897141:2015-08-30T09:12:21.120+0000:1440897141:2015-08-30T09:12:21.120+0000:The tests are working again. Thanks Andrew."
0,CAMEL-8700,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-25 21:22:16+00:00,2015-04-25 21:31:01+00:00,"There are many available operations on the OpenShift platform and the latest OpenShift Java Client offers many new method.


I think we can add the following operations (from producer point of view):



Get Standalone cartridge
Get Embedded cartridges list
Add Embedded cartridge
Remove Embedded cartridge","acosentino:1429968654:2015-04-25T21:30:54.452+0000:1429968654:2015-04-25T21:30:54.452+0000:Related commit:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=5becebd30cc723a23899102350a0de3148804ae9"
0,CAMEL-8699,Test,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Andrea Cosentino,Andrea Cosentino,0,1,2015-04-25 11:00:24+00:00,2015-04-29 08:08:30+00:00,"The ref attribute on <loadBalance> has been removed, as it has been deprecated for a long time, and you should use a <customLoadBalancer> to refer to a custom load balancer.


So we need to change the code of camel-example-cxf CamelTransportSpringConfig.xml configuration file and remove ref attribute from loadBalance tag","acosentino:1429930968:2015-04-25T11:02:48.750+0000:1429930968:2015-04-25T11:02:48.750+0000:Related commit:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=16f4d2e92329fc38a02df9b7c25a7929b2deba6f"
0,CAMEL-8698,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-25 09:27:37+00:00,2015-04-25 09:45:30+00:00,I think a Size operation should be added to Camel-Infinispan available operations set. It can be useful for end users.,"acosentino:1429925780:2015-04-25T09:36:20.282+0000:1429925780:2015-04-25T09:36:20.282+0000:Related commits:

https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=09aa6f68fb3552da1ab486f0b093a2019a562d74

"
0,CAMEL-8697,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,1,2015-04-24 21:28:31+00:00,2015-05-10 13:41:45+00:00,"We need to update olingo2 component with the latest release 2.0.3.


The OSGi bundle is not available at this moment, so I've opened a JIRA to ServiceMix guys, and I'll wait for the release of this bundle.","acosentino:1431236505:2015-05-10T13:41:45.729+0000:1431236505:2015-05-10T13:41:45.729+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/d4f82d86"
0,CAMEL-8696,New Feature,Major,2.13.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Justin Heesemann,0,2,2015-04-24 12:09:50+00:00,2015-04-27 06:16:32+00:00,"The Apns Endpoint only accepts Strings with the payload.
It would be great if we alternatively could send EnhancedApnsNotifications so we have more control about the message that is being sent.


This would especially help with handling notification errors, since the java-apns allows a ApnsDelegate to be notified about errors ""messageSendFailed(ApnsNotification message, Throwable e)"" - only we currently have no way of linking these failure messages to the exchange send by camel.","convoi:1429857125:2015-04-24T14:32:05.046+0000:1429857125:2015-04-24T14:32:05.046+0000:patch for Camel-2.16.0-SNAPSHOT
davsclaus:1430086592:2015-04-27T06:16:32.014+0000:1430086592:2015-04-27T06:16:32.014+0000:Thanks for the patch."
0,CAMEL-8695,Improvement,Major,2.13.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Justin Heesemann,0,4,2015-04-24 12:04:06+00:00,2015-07-02 19:52:09+00:00,"Current version of java-apns in apache-camel is 0.2.3.


From it's website:
""There currently is a perelease for 1.0.0 which fixes a number of problems over 0.2.3. There's still a CI test that sporadically fails on Travis-CI only, but not on other test machines I have access to. Supposedly it is a still undetected race condition.


However 1.0.0 Beta fixes a lot of problems over 0.2.x, so even as it is called beta I'd recommend to use the beta instead of the 0.2.3 even for production.""


I tried to use Beta6 in camel-apns-2.13.3 and it seemed to work fine, without code changes.","muellerc:1429880825:2015-04-24T21:07:05.453+0000:1429880825:2015-04-24T21:07:05.453+0000:Because we also need an OSGIfied version to be able to run in Karaf, we have to wait until the SMX guys released it.
davsclaus:1430434123:2015-05-01T06:48:43.079+0000:1430434123:2015-05-01T06:48:43.079+0000:I logged a ticket about the OSGi bundle
https://issues.apache.org/jira/browse/SMX4-1968
acosentino:1431344938:2015-05-11T19:48:58.475+0000:1431344938:2015-05-11T19:48:58.475+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/8b5b1abf"
0,CAMEL-8694,Bug,Major,2.15.1,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Christian Müller,Homayoun Zariv,0,2,2015-04-24 05:48:24+00:00,2015-04-24 21:30:32+00:00,"I am using camel-netty4-http 2.15.1 version and getting the following NPE in org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done. Debugging through the code it seems like null check for response is missing.


 public void done(boolean doneSync) {
            try {
                NettyHttpMessage nettyMessage = exchange.hasOut() ? exchange.getOut(NettyHttpMessage.class) : exchange.getIn(NettyHttpMessage.class);
                if (nettyMessage != null) {
                    FullHttpResponse response = nettyMessage.getHttpResponse();
                    // Need to retain the ByteBuffer for producer to consumer
                    // TODO Remove this part of ByteBuffer right away
                    response.content().retain();  <-- response in null
                    if (response != null) {


java.lang.NullPointerException
	at org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done(NettyHttpProducer.java:98)
	at org.apache.camel.component.netty4.NettyProducer.process(NettyProducer.java:181)
	at org.apache.camel.component.netty4.http.NettyHttpProducer.process(NettyHttpProducer.java:52)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:111)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:134)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:105)
	at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:119)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339)
	at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:32)
	at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:329)
	at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:36)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:744)","davsclaus:1429825860:2015-04-24T05:51:00.817+0000:1429825860:2015-04-24T05:51:00.817+0000:You are welcome to work on a patch to fix this
http://camel.apache.org/contributing.html"
0,CAMEL-8693,Improvement,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Homayoun Zariv,0,2,2015-04-24 05:26:21+00:00,2015-04-24 05:41:31+00:00,"I am using camel with netty4-http 2.15.1 and getting the following exception because the query string my server is receiving ends with '&'. As far as I know most sites simply ignore the trailing & at the end of query string. Camel should either ignore the trailing ""&"" or provide an optional option to skip this check. This error prevents replacing an existing ESB product with Apache Camel since our exiting ESB product doesn't flag this as error.


23769 Camel (camel-1) thread #0 - NettyEventExecutorGroup WARN  - Closing channel as an exception was thrown from Netty 
java.net.URISyntaxException: Invalid uri syntax: Trailing & marker found. Check the uri and remove the trailing & marker.: version=765&responseencoding=JSON&appid=xxxxxxx&siteid=0&callname=xxxx&ItemID=131334609454&IncludeSelector=Details& 
        at org.apache.camel.util.URISupport.parseQuery(URISupport.java:153) ~[camel-core-2.15.1.jar:2.15.1] 
        at org.apache.camel.util.URISupport.parseQuery(URISupport.java:133) ~[camel-core-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.populateCamelHeaders(DefaultNettyHttpBinding.java:182) ~[camel-netty4-http-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.http.RestNettyHttpBinding.populateCamelHeaders(RestNettyHttpBinding.java:50) ~[camel-netty4-http-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.toCamelMessage(DefaultNettyHttpBinding.java:89) ~[camel-netty4-http-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.http.NettyHttpEndpoint.createExchange(NettyHttpEndpoint.java:103) ~[camel-netty4-http-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:87) ~[camel-netty4-2.15.1.jar:2.15.1] 
        at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202) ~[camel-netty4-http-2.15.1.jar:2.15.1]
        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final] 
        at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:119) ~[camel-netty4-http-2.15.1.jar:2.15.1] 
        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final] 
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339) [netty-transport-4.0.26.Final.jar:4.0.26.Final] 
        at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:32) [netty-transport-4.0.26.Final.jar:4.0.26.Final] 
        at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:329) [netty-transport-4.0.26.Final.jar:4.0.26.Final] 
        at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:36) [netty-common-4.0.26.Final.jar:4.0.26.Final] 
        at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111) [netty-common-4.0.26.Final.jar:4.0.26.Final] 
        at java.lang.Thread.run(Thread.java:744) [na:1.7.0-45]","davsclaus:1429824564:2015-04-24T05:29:24.200+0000:1429824564:2015-04-24T05:29:24.200+0000:You can use a custom http binding and extend the default and ""remove the trailing &""
hzariv:1429825265:2015-04-24T05:41:05.263+0000:1429825265:2015-04-24T05:41:05.263+0000:That is exactly what I have done but I believe this behavior is not right. I worked with many Netty based servers and none of them behave this way."
0,CAMEL-8692,Improvement,Major,2.15.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Christian Müller,Christian Müller,0,1,2015-04-23 19:22:45+00:00,2015-04-23 19:40:52+00:00,"org.apache.camel.builder.PredicateBuilder lacks the following two methods:
public static Predicate or(List<Predicate> predicates);
public static Predicate or(Predicate... predicates)


We have it for ""and"", but not for ""or"".",
0,CAMEL-8691,Improvement,Minor,None,2.16.0,"
None
",Closed,Fixed,2.16.0,Andrea Cosentino,Andrea Cosentino,0,2,2015-04-23 15:53:06+00:00,2015-05-28 06:39:58+00:00,"Docker-java API has two options LoggingFilter and FollowRedirects that can be used in the Docker Client Configuration.


It can be a good improvement.","githubbot:1429776004:2015-04-23T16:00:04.451+0000:1429776004:2015-04-23T16:00:04.451+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/506

    CAMEL-8691 Camel-docker: Add FollowRedirects and LoggingFilter options to client configuration

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8691
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel docker-improvement

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/506.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #506
    
----
commit 7f69dcbe13edb8477c5bfd4bd6a16ac2d6e0279b
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-23T07:41:48Z

    CAMEL-8691 Camel-docker: Add FollowRedirects and LoggingFilter options to client configuration

----

acosentino:1429776114:2015-04-23T16:01:54.029+0000:1429776114:2015-04-23T16:01:54.029+0000:PR submittted:
https://github.com/apache/camel/pull/506

Andrea
githubbot:1429828158:2015-04-24T06:29:18.701+0000:1429828158:2015-04-24T06:29:18.701+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/506
"
0,CAMEL-8690,Bug,Major,2.15.1,2.15.2,"
None
",Resolved,Fixed,2.15.2,Grzegorz Grzybek,Grzegorz Grzybek,0,1,2015-04-23 15:00:55+00:00,2015-04-23 15:13:03+00:00,"During shutdown of Karaf with camel-hdfs2 installed, I'm getting:



Exception in thread ""Thread-56"" java.lang.NoClassDefFoundError: org/apache/hadoop/util/ShutdownHookManager$2
	at org.apache.hadoop.util.ShutdownHookManager.getShutdownHooksInOrder(ShutdownHookManager.java:124)
	at org.apache.hadoop.util.ShutdownHookManager$1.run(ShutdownHookManager.java:52)
Caused by: java.lang.ClassNotFoundException: Unable to load class 'org.apache.hadoop.util.ShutdownHookManager$2' because the bundle wiring for org.apache.servicemix.bundles.hadoop-client is no longer valid.
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1521)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:77)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1993)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 2 more",ggrzybek:1429773183:2015-04-23T15:13:03.698+0000:1429773183:2015-04-23T15:13:03.698+0000:Resolved in master and camel-2.15.x branches
0,CAMEL-8689,Bug,Major,2.15.1,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Raúl Kripalani,Raúl Kripalani,0,3,2015-04-23 12:37:25+00:00,2015-05-06 13:50:39+00:00,"Dozer is a tough library to work with in a multi-module context, because of its use of singletons for configuration. In an OSGi environment, each bundle will have its own classloader but Dozer's architecture makes it impossible to cater for this scenario nicely. Unfortunately, it expects a single container-wide classloader configured in the BeanContainer singleton.


In Camel we worked around this by providing a custom DozerClassLoader implementation that is aware of the Camel Context, but what happens if we are sharing Dozer across multiple Camel Contexts? The most recently initialized context will override the container-wide classloader.


We need a solution such that the classloader can dynamically change based on the Camel Context that is using the component.","raulvk:1429764528:2015-04-23T12:48:48.056+0000:1429764528:2015-04-23T12:48:48.056+0000:Fix pushed to branch [fix/CAMEL-8689-camel-dozer-classloading-issue|https://github.com/apache/camel/tree/fix/CAMEL-8689-camel-dozer-classloading-issue].
[~davsclaus] - would you mind having a quick look as you know the Dozer stuff better than I do?

Thanks.
davsclaus:1429769139:2015-04-23T14:05:39.585+0000:1429769139:2015-04-23T14:05:39.585+0000:Looks good. I posted some comments on the github link
davsclaus:1430342984:2015-04-30T05:29:44.516+0000:1430342984:2015-04-30T05:29:44.516+0000:Raul, you didnt merge this to the master and 2.15.x branch so you missed the release train.

Can you get it merged?
raulvk:1430736887:2015-05-04T18:54:47.821+0000:1430736887:2015-05-04T18:54:47.821+0000:Tested at a customer with satisfactory results.
tdiesler:1430890956:2015-05-06T13:42:36.577+0000:1430891024:2015-05-06T13:43:44.459+0000:With this I get 

{code}
15:26:16,518 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-2-thread-1) Failed: org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal: org.dozer.MappingException: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82) [dozer-5.5.1.jar:]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:366) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.registerClassLoader(DozerInitializer.java:118) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:98) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:79) [dozer-5.5.1.jar:]
	at org.dozer.DozerInitializer.init(DozerInitializer.java:64) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173) [dozer-5.5.1.jar:]
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99) [dozer-5.5.1.jar:]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.createDozerBeanMapper(DozerTypeConverterLoader.java:232) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.<init>(DozerTypeConverterLoader.java:118) [camel-dozer-2.16-SNAPSHOT.jar:2.16-SNAPSHOT]
	at org.wildfly.camel.test.csv.CSVIntegrationTest.testMarshal(CSVIntegrationTest.java:68) [csv-dataformat-tests:]
...
Caused by: java.lang.InstantiationException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader
	at java.lang.Class.newInstance(Class.java:423) [rt.jar:1.8.0_31]
	at org.dozer.util.ReflectionUtils.newInstance(ReflectionUtils.java:364) [dozer-5.5.1.jar:]
	... 150 more
Caused by: java.lang.NoSuchMethodException: org.apache.camel.converter.dozer.DozerThreadContextClassLoader.<init>()
	at java.lang.Class.getConstructor0(Class.java:3074) [rt.jar:1.8.0_31]
	at java.lang.Class.newInstance(Class.java:408) [rt.jar:1.8.0_31]
	... 151 more
{code}

The {{org.dozer.DozerInitializer}} does

{code}
  private void registerClassLoader(GlobalSettings globalSettings, ClassLoader classLoader, BeanContainer beanContainer) {
    String classLoaderName = globalSettings.getClassLoaderName();
    if (!DozerConstants.DEFAULT_CLASS_LOADER_BEAN.equals(classLoaderName)) {
      DefaultClassLoader defaultClassLoader = new DefaultClassLoader(classLoader);
      Class<? extends DozerClassLoader> classLoaderType = loadBeanType(classLoaderName, defaultClassLoader, DozerClassLoader.class);
      DozerClassLoader classLoaderBean = ReflectionUtils.newInstance(classLoaderType);
      beanContainer.setClassLoader(classLoaderBean);
    }
  }
{code}"
0,CAMEL-8688,Bug,Major,2.15.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Geert Vanheusden,0,3,2015-04-23 12:02:10+00:00,2015-05-04 18:00:05+00:00,"Hi,


I noticed a bug where the body (StreamCache) was already removed before the exchange reached the end (in the Wiretap route).


I added a test as an attachment.


f you run the test you can clearly see the temp file deletion followed by the closed stream exception:


Tried 1 to delete file: /var/folders/db/brq60fqj4vb8mnx_5nlz36nw0000gn/T/camel/camel-tmp-00cd1ce2-7d44-47fe-b357-008e8146f770/cos8797132745923044996.tmp with result: true


Cannot reset stream from file /var/folders/db/brq60fqj4vb8mnx_5nlz36nw0000gn/T/camel/camel-tmp-00cd1ce2-7d44-47fe-b357-008e8146f770/cos8797132745923044996.tmp


I encountered the same issue during a more complex route that does some splitting (zip file) and multicasting. This occurred on Camel 2.14.1 so it could be fixed by https://issues.apache.org/jira/browse/CAMEL-8284 but I need to test this.


Kind regards,


Geert","geertvanheusden:1429762024:2015-04-23T12:07:04.566+0000:1429762024:2015-04-23T12:07:04.566+0000:Solution proposal by [~forsthofer]:

{quote}
My original proposal to copy the stream cache file is not the optimal 
solution. A better solution would be to have only one stream cache 
file and to delete this file only when all exchanges which need this 
file are done. This does mean we have to register listeners to the 
event onDone of all UnitOfWorks of the relevant exchanges in the 
stream cache file object and only when all listeners have got the 
onDone event, then the file can be deleted.  However this will require 
quite some changes 

Probably we could also use this solution for the agregator and splitter case.. 
{quote}
forsthofer:1430445909:2015-05-01T10:05:09.694+0000:1430445909:2015-05-01T10:05:09.694+0000:Hi,
I am working on a patch.
Regards Franz
forsthofer:1430456536:2015-05-01T13:02:16.119+0000:1430456536:2015-05-01T13:02:16.119+0000:Hi,
Here is the patch. It consists of two files. One for camel-core and one for camel-netty-http.

I had to change the clone() method in the interface StreamCache to

StreamCache clone(Exchange exchange)

because I needed to count the exchanges which are relevant for the cached file.

Regards Franz Forsthofer
SAP SE
e-mail: franz.forsthofer@sap.com
davsclaus:1430733605:2015-05-04T18:00:05.804+0000:1430733605:2015-05-04T18:00:05.804+0000:Thanks for the patch.

There we are few other components where the copy needed to be adjusted. But its all sorted now."
0,CAMEL-8687,Bug,Major,"2.14.2, 2.15.1",None,"
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-04-23 06:24:09+00:00,2015-04-23 07:54:26+00:00,"As there are ' ' inside the structured data, we cannot just check ' '  for separation of the structured message.
Here is the discussion about it.
http://camel.465427.n5.nabble.com/Syslog-data-format-incorrect-parsing-of-structured-data-td5766123.html","njiang:1429746866:2015-04-23T07:54:26.840+0000:1429746866:2015-04-23T07:54:26.840+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8686,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrea Cosentino,0,2,2015-04-22 15:17:42+00:00,2015-04-23 11:33:24+00:00,The Camel-Infinispan Replace operation can use the options Lifespan and Max Idle Time in his implementation.,"githubbot:1429688305:2015-04-22T15:38:25.265+0000:1429688305:2015-04-22T15:38:25.265+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/505

    CAMEL-8686 Camel-Infinispan Replace operation can use options Lifespan and Max Idle Time

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8686
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel improve-infinispan-replace-operation

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/505.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #505
    
----
commit 18dec0331f9e06d842032b6be1eeb3d4e5094bc6
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-22T15:17:56Z

    Resolve CAMEL-8686 Camel-Infinispan Replace operation can use options Lifespan and Max Idle Time

----

acosentino:1429688329:2015-04-22T15:38:49.012+0000:1429688329:2015-04-22T15:38:49.012+0000:PR submitted:
https://github.com/apache/camel/pull/505

Andrea
githubbot:1429688871:2015-04-22T15:47:51.692+0000:1429688871:2015-04-22T15:47:51.692+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/505
"
0,CAMEL-8685,Improvement,Major,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Henryk Konsek,Henryk Konsek,0,1,2015-04-22 11:36:12+00:00,2015-04-22 11:51:28+00:00,"Currently it is impossible to define wildcard URI that will serve custom OPTIONS response to all the requests:



   from(""netty4-http:http://0.0.0.0:{{port}}/path1?httpMethodRestrict=POST"").setBody().constant(""somePostResponse"");
                from(""netty4-http:http://0.0.0.0:{{port}}?matchOnUriPrefix=true&httpMethodRestrict=OPTIONS"").setBody().constant(""expectedOptionsResponse"");




POST route is detected as match for OPTION method too early and the second route is never called.


Netty HTTP should be smart enough to find out that there is the wildcard route serving OPTION requests and prefer that route over the default OPTION response generated by the POST routes.","hekonsek:1429674282:2015-04-22T11:44:42.529+0000:1429674282:2015-04-22T11:44:42.529+0000:Resolved in 5b27ecc8aae83f6a4a8b1cd14133387f01d77151.
hekonsek:1429674688:2015-04-22T11:51:28.666+0000:1429674688:2015-04-22T11:51:28.666+0000:Backported to 2.15.2 in 517db207815e36c32cdd510bed84b85df3b8b54a."
0,CAMEL-8684,Improvement,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-22 10:42:36+00:00,2015-04-23 13:52:23+00:00,"The load balancer model classes build a bit wrong in java dsl, as the definiton classes implements LoadBalancer processor which is for the runtime. The model is for design time only.


This is some very old code we havent spotted this before.",
0,CAMEL-8683,Bug,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-22 10:00:19+00:00,2015-04-23 13:52:13+00:00,"If using load balancer in context scoped onException then it adds duplicate outputs per route you have. So if you have 3 routes, then there is 2 x duplicates as there is 2 additional routes.",davsclaus:1429768259:2015-04-23T13:50:59.401+0000:1429768259:2015-04-23T13:50:59.401+0000:This requires CAMEL-8684 but I think this is justified to fix this other bug.
0,CAMEL-8682,Bug,Major,2.15.1,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-22 08:46:36+00:00,2015-04-22 09:53:41+00:00,"If you stop a route and uses context scoped error handling, then its services may be stopped when the route stops. This should not happen for context scoped as they are reused by other routes etc.


This can also happen for OnCompletion which has same scope as OnException.",
0,CAMEL-8681,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Andrea Cosentino,0,3,2015-04-21 20:13:21+00:00,2015-04-23 11:33:44+00:00,"In Camel-infinispan we don't use Lifespan and Max Idle Time variable when we put a key/value pair in an Infinispan cache.


There are some methods that use this variables and I think we have to change the implementation.","githubbot:1429618598:2015-04-21T20:16:38.197+0000:1429618598:2015-04-21T20:16:38.197+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/504

    CAMEL-8681 Camel-Infinispan: use Lifespan and Max Idle Time in the implementation

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8681
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel improvement-to-infinispan-with-lifespan-and-other-features

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/504.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #504
    
----
commit 105525e5a9c42c0706acdfff667cd50671b4fb0b
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-21T20:13:45Z

    Resolve CAMEL-8681 Camel-Infinispan: use Lifespan and Max Idle Time in the implementation

----

acosentino:1429618609:2015-04-21T20:16:49.023+0000:1429618609:2015-04-21T20:16:49.023+0000:PR submitted:
https://github.com/apache/camel/pull/504

Andrea
njiang:1429657606:2015-04-22T07:06:46.997+0000:1429657606:2015-04-22T07:06:46.997+0000:Merged the patch with thanks to Andrea into camel master branch.
[~ancosen] Do you mind update the wiki page for it?
acosentino:1429657730:2015-04-22T07:08:50.846+0000:1429657730:2015-04-22T07:08:50.846+0000:Hi Willem,

Yes. I will start this evening. I think I have a little change to do also on the REPLACE operation.

Thank you.
Andrea
acosentino:1429658300:2015-04-22T07:18:20.461+0000:1429658300:2015-04-22T07:18:20.461+0000:I can't see the commit related to this patch at this moment.
githubbot:1429659217:2015-04-22T07:33:37.512+0000:1429659217:2015-04-22T07:33:37.512+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/504

njiang:1429659257:2015-04-22T07:34:17.943+0000:1429659257:2015-04-22T07:34:17.943+0000:I just found out my last git push is not succeed, now it should be fine.
acosentino:1429659366:2015-04-22T07:36:06.034+0000:1429659366:2015-04-22T07:36:06.034+0000:Thank you very much Willem :-)
acosentino:1429660206:2015-04-22T07:50:06.087+0000:1429660206:2015-04-22T07:50:06.087+0000:And sorry for my penultimate comment. I didn't like the tone I used."
0,CAMEL-8680,Bug,Minor,2.15.1,None,"
None
",Resolved,Incomplete,None,Unassigned,Johan Blomgren,0,1,2015-04-21 11:13:24+00:00,2017-02-28 14:45:19+00:00,"I do not get this to work, trying to multicast a transacted message.


Here are 2 tests, both behaving a bit differently, the first uses a xml context and the other uses plain java.


JmsTransactionMulticast.java
import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;

/**
 * Unit test will look for the spring .xml file with the same class name
 * but postfixed with -config.xml as filename.
 * <p/>
 * We use Spring Testing for unit test, eg we extend AbstractJUnit4SpringContextTests
 * that is a Spring class.
 */
@ContextConfiguration
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class JmsTransactionMulticast extends AbstractJUnit4SpringContextTests {

    @Autowired
    private CamelContext camelContext;

    @EndpointInject(uri = ""mock:result1"")
    private MockEndpoint result1;

    @EndpointInject(uri = ""mock:result2"")
    private MockEndpoint result2;

    @EndpointInject(uri = ""mock:dlq"")
    private MockEndpoint dlq;

    @EndpointInject(uri = ""direct:start"")
    private ProducerTemplate start;

    @EndpointInject(uri = ""direct:start2"")
    private ProducerTemplate start2;

    @Before
    public void setUp() throws Exception {
        camelContext.addRoutes(new RouteBuilder() {

            @Override
            public void configure() throws Exception {

                onException(Exception.class).handled(true).to(""mock:dlq"").markRollbackOnlyLast();

                // Multicast route
                from(""direct:start"")
                    .transacted(""PROPAGATION_REQUIRES_NEW"")
                    .multicast().shareUnitOfWork().stopOnException().to(""direct:1"", ""direct:2"");

                // Route that does not multicast
                from(""direct:start2"")
                    .transacted(""PROPAGATION_REQUIRES_NEW"")
                    .to(""direct:2"")
                ;

                from(""direct:1"")
                    .choice()
                    .when(body().isEqualTo(""a"")).to(""mock:result1"")
                    .otherwise().throwException(new Exception(""fail in |""));
                ;

                from(""direct:2"")
                    .choice()
                    .when(body().isEqualTo(""b"")).to(""mock:result2"")
                    .otherwise().throwException(new Exception(""fail in 2""));
                ;

            }
        });
    }

    // this does work, it rollbacks properly
    @Test
    public void start2Send_rollback() throws Exception {
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start2.sendBody(""a"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

    //This will throw an exception in direct:2
    @Test
    public void start1Send_rollback() throws Exception {
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start.sendBody(""a"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

    //This will throw an exception in direct:1
    @Test
    public void testSend_rollback2() throws Exception {
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start.sendBody(""b"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

}




JmsTransactionMulticast-context.xml
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:broker=""http://activemq.apache.org/schema/core""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd"">

  <!-- use required TX -->
  <bean id=""PROPAGATION_REQUIRES_NEW"" class=""org.apache.camel.spring.spi.SpringTransactionPolicy"">
    <property name=""transactionManager"" ref=""jmsTransactionManager""/>
    <property name=""propagationBehaviorName"" value=""PROPAGATION_REQUIRES_NEW""/>
  </bean>

  <!-- setup JMS connection factory -->
  <bean id=""poolConnectionFactory"" class=""org.apache.activemq.pool.PooledConnectionFactory"">
    <property name=""maxConnections"" value=""8""/>
    <property name=""connectionFactory"" ref=""jmsConnectionFactory""/>
  </bean>

  <bean id=""jmsConnectionFactory"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
    <property name=""brokerURL"" value=""vm://localhost?broker.persistent=false&amp;broker.useJmx=false""/>
  </bean>

  <!-- setup spring jms TX manager -->
  <bean id=""jmsTransactionManager"" class=""org.springframework.jms.connection.JmsTransactionManager"">
    <property name=""connectionFactory"" ref=""poolConnectionFactory""/>
  </bean>

  <!-- define our activemq component -->
  <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    <property name=""connectionFactory"" ref=""poolConnectionFactory""/>
    <!-- define the jms consumer/producer as transacted -->
    <property name=""transacted"" value=""true""/>
    <!-- setup the transaction manager to use -->
    <!-- if not provided then Camel will automatic use a JmsTransactionManager, however if you
         for instance use a JTA transaction manager then you must configure it -->
    <property name=""transactionManager"" ref=""jmsTransactionManager""/>
  </bean>

  <camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/spring"">
  </camelContext>

</beans>




And here is another test that does not use xml configuration and behaves a bit differently


JmsTransactionMulticast2.java
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jms.JmsComponent;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.impl.JndiRegistry;
import org.apache.camel.spring.spi.SpringTransactionPolicy;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;
import org.springframework.jms.connection.JmsTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;


public class JmsTransactionMulticast2 extends CamelTestSupport {

    private final String a1 = ""wmq:queue:A1"";
    private final String a2 = ""wmq:queue:A2"";
    private final String errorQueue = ""wmq:queue:AERROR"";
    private static final String PROPAGATION_REQUIRES_NEW = ""PROPAGATION_REQUIRES_NEW"";


    @EndpointInject(uri = ""mock:result1"")
    private MockEndpoint result1;

    @EndpointInject(uri = ""mock:result2"")
    private MockEndpoint result2;

    @EndpointInject(uri = ""mock:dlq"")
    private MockEndpoint dlq;

    @EndpointInject(uri = ""direct:start"")
    private ProducerTemplate start;

    @EndpointInject(uri = ""direct:start2"")
    private ProducerTemplate start2;

    public void addRoutes() throws Exception {
        context.addRoutes(new RouteBuilder() {

            @Override
            public void configure() throws Exception {

                onException(Exception.class).handled(true).to(errorQueue).markRollbackOnlyLast();

                from(a1).to(""mock:result1"");
                from(a2).to(""mock:result2"");
                from(errorQueue).to(""mock:dlq"");

                // Multicast route
                from(""direct:start"")
                    .transacted(""PROPAGATION_REQUIRES_NEW"")
                    .multicast().shareUnitOfWork().stopOnException().to(""direct:1"", ""direct:2"");

                // Route that does not multicast
                from(""direct:start2"")
                    .transacted(""PROPAGATION_REQUIRES_NEW"")
                    .to(""direct:2"")
                ;

                from(""direct:1"")
                    .choice()
                    .when(body().isEqualTo(""a"")).to(a1)
                    .otherwise().throwException(new Exception(""fail in |""));
                ;

                from(""direct:2"")
                    .choice()
                    .when(body().isEqualTo(""b"")).to(a2)
                    .otherwise().throwException(new Exception(""fail in 2""));
                ;
            }
        });
    }

    @Test
    public void start2Send_rollback() throws Exception {
        addRoutes();
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start2.sendBody(""a"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

    //This will throw an exception in direct:2
    @Test
    public void start1Send_rollback() throws Exception {
        addRoutes();
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start.sendBody(""a"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

    //This will throw an exception in direct:1
    @Test
    public void testSend_rollback2() throws Exception {
        addRoutes();
        result1.expectedMessageCount(0);
        result2.expectedMessageCount(0);
        dlq.expectedMessageCount(1);

        start.sendBody(""b"");

        result1.assertIsSatisfied();
        result2.assertIsSatisfied();
        dlq.assertIsSatisfied();
    }

    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext camelContext = super.createCamelContext();
        addWmqComponent(camelContext);
        return camelContext;
    }

    final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""vm://localhost?broker.persistent=false"");
    final PlatformTransactionManager transactionManager = (PlatformTransactionManager) new JmsTransactionManager(connectionFactory);

    private void addWmqComponent(CamelContext camelContext) {
        final JmsComponent component = JmsComponent.jmsComponentTransacted(connectionFactory, transactionManager);
        component.setConcurrentConsumers(1);
        camelContext.addComponent(""wmq"", component);
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        final JndiRegistry registry = super.createRegistry();
        registry.bind(""jmsTransactionManager"", transactionManager);
        registry.bind(PROPAGATION_REQUIRES_NEW, createTransactionPolicy(PROPAGATION_REQUIRES_NEW));
        return registry;
    }

    private SpringTransactionPolicy createTransactionPolicy(String propagation) {
        final SpringTransactionPolicy policy = new SpringTransactionPolicy();
        policy.setTransactionManager(transactionManager);
        policy.setPropagationBehaviorName(propagation);
        return policy;
    }

}",
0,CAMEL-8679,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Andrea Cosentino,0,3,2015-04-20 17:18:01+00:00,2015-04-21 13:35:38+00:00,We need to update Openshift Java Client version from 2.5.0.Final to 2.7.0.Final,"githubbot:1429521590:2015-04-20T17:19:50.058+0000:1429521590:2015-04-20T17:19:50.058+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/503

    CAMEL-8679 Update Openshift Java Client Version from 2.5.0.Final to 2.7.0.Final

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8679
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-openshift-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/503.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #503
    
----
commit 2d54a85c90096a4b58d6862c6fdf4f8030cc91a5
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-20T17:18:09Z

    Resolve CAMEL-8679 Update Openshift Java Client Version from 2.5.0.Final to 2.7.0.Final

----

acosentino:1429521644:2015-04-20T17:20:44.091+0000:1429521644:2015-04-20T17:20:44.091+0000:PR submitted:
https://github.com/apache/camel/pull/503

Andrea
njiang:1429554038:2015-04-21T02:20:38.131+0000:1429554038:2015-04-21T02:20:38.131+0000:Merged the patch into camel master branch with thanks to Andrea.
githubbot:1429594538:2015-04-21T13:35:38.642+0000:1429594538:2015-04-21T13:35:38.642+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/503
"
0,CAMEL-8678,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.15.2, 2.16.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-04-20 16:24:16+00:00,2015-04-20 16:28:47+00:00,"This causes the stack to overflow, which is bad  Offending code: 


https://github.com/apache/camel/blob/66e04492c34cc4150abcd9908c8afd837c9eb51d/components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java#L227-L229",janstey:1429518527:2015-04-20T16:28:47.363+0000:1429518527:2015-04-20T16:28:47.363+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/b7138260
0,CAMEL-8677,Task,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Andrea Cosentino,0,3,2015-04-20 15:50:41+00:00,2015-04-21 13:35:47+00:00,We need to update the version of iCal4j from 1.5.0.2 to version 1.6.0,"githubbot:1429516371:2015-04-20T15:52:51.027+0000:1429516371:2015-04-20T15:52:51.027+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/502

    CAMEL-8677 Update iCal4j from version 1.5.0.2 to version 1.6.0

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8677
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-ical4j

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/502.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #502
    
----
commit 994a4ba1e8b938f494054c59bbbe49d30b64aaef
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-20T15:50:56Z

    Resolve CAMEL-8677 Update iCal4j from version 1.5.0.2 to version 1.6.0

----

acosentino:1429516382:2015-04-20T15:53:02.746+0000:1429516382:2015-04-20T15:53:02.746+0000:PR submitted:
https://github.com/apache/camel/pull/502
njiang:1429554065:2015-04-21T02:21:05.152+0000:1429554065:2015-04-21T02:21:05.152+0000:Merged the patch into camel master branch with thanks to Andrea.
githubbot:1429594547:2015-04-21T13:35:47.750+0000:1429594547:2015-04-21T13:35:47.750+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/502
"
0,CAMEL-8676,Bug,Major,"2.12.0, 2.15.0",,"
None
",Resolved,Not A Problem,None,Jonathan Anstey,Jay SenSharma,0,2,2015-04-20 12:27:02+00:00,2015-04-20 16:48:33+00:00,"If a camel mail route contains an E-Mail address containing  '&' symbol in it then trhe camel route fails to start.



Example:
=======



	<camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/blueprint"">
            <route>
	       <from uri=""timer://foo?delay=2s&amp;repeatCount=1""/>
	       <to uri=""smtp://test.mail.com:25?To=user&amp;123@gmail.com&amp;From=jsenshar@gmail.com"" />

               <!--  Sending mail using smtp  when the  email address contains  '&' character like  user&123@gmail.com  Caues issue-->
            </route>
	</camelContext>





Where as, As per the http://en.wikipedia.org/wiki/Email_address
   AND  http://tools.ietf.org/html/rfc5322#section-3.2.3
The local-part of the email address may use any of these ASCII characters RFC 5322 Section 3.2.3




The following error is received during camel route deployment:

17:56:31,791 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Apache Camel 2.12.0.redhat-610379 (CamelContext: camel-9) is starting
17:56:31,792 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Tracing is enabled on CamelContext: camel-9
17:56:31,792 | INFO  | l Console Thread | ManagedManagementStrategy        | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | JMX is enabled
17:56:31,803 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Apache Camel 2.12.0.redhat-610379 (CamelContext: camel-9) is shutting down
17:56:31,804 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Apache Camel 2.12.0.redhat-610379 (CamelContext: camel-9) uptime 0.013 seconds
17:56:31,804 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Apache Camel 2.12.0.redhat-610379 (CamelContext: camel-9) is shutdown in 0.001 seconds
17:56:31,804 | ERROR | l Console Thread | BlueprintCamelContext            | 151 - org.apache.camel.camel-blueprint - 2.12.0.redhat-610379 | Error occurred during starting Camel: CamelContext(camel-9) due Failed to create route route9 at: >>> To[smtp://test.mail.com:25?To=user&123@gmail.com&From=jsenshar@gmail.com] <<< in route: Route(route9)[[From[timer://foo?delay=2s&repeatCount=1]] -> ... because of Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
org.apache.camel.FailedToCreateRouteException: Failed to create route route9 at: >>> To[smtp://test.mail.com:25?To=user&123@gmail.com&From=jsenshar@gmail.com] <<< in route: Route(route9)[[From[timer://foo?delay=2s&repeatCount=1]] -> ... because of Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:912)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:177)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:778)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1955)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1705)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:934)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:795)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4666)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3674)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:347)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:353)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_71]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_71]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_71]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_71]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_71]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:676)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:374)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:270)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:233)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4650)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix$4.run(Felix.java:2123)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.runInContext(Felix.java:2147)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2121)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)[31:org.apache.karaf.shell.osgi:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:189)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:61)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:531)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:192)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:500)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 63 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:192)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:137)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:511)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	... 72 more
17:56:31,814 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Apache Camel 2.12.0.redhat-610379 (CamelContext: camel-9) is starting
17:56:31,814 | INFO  | l Console Thread | BlueprintCamelContext            | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Tracing is enabled on CamelContext: camel-9
17:56:31,814 | INFO  | l Console Thread | ManagedManagementStrategy        | 143 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | JMX is enabled
17:56:31,829 | ERROR | l Console Thread | BlueprintCamelContext            | 151 - org.apache.camel.camel-blueprint - 2.12.0.redhat-610379 | Error occurred during starting Camel: CamelContext(camel-9) due Failed to create route route9 at: >>> To[smtp://test.mail.com:25?To=user&123@gmail.com&From=jsenshar@gmail.com] <<< in route: Route(route9)[[From[timer://foo?delay=2s&repeatCount=1]] -> ... because of Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
org.apache.camel.FailedToCreateRouteException: Failed to create route route9 at: >>> To[smtp://test.mail.com:25?To=user&123@gmail.com&From=jsenshar@gmail.com] <<< in route: Route(route9)[[From[timer://foo?delay=2s&repeatCount=1]] -> ... because of Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:912)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:177)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:778)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1955)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1705)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)[151:org.apache.camel.camel-blueprint:2.12.0.redhat-610379]
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)[151:org.apache.camel.camel-blueprint:2.12.0.redhat-610379]
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)[151:org.apache.camel.camel-blueprint:2.12.0.redhat-610379]
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:934)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:795)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:544)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4666)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3674)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:347)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:448)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:383)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:270)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:233)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4650)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix$4.run(Felix.java:2123)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.runInContext(Felix.java:2147)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2121)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)[31:org.apache.karaf.shell.osgi:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:189)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:61)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:531)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:192)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:500)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	... 47 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: smtp://test.mail.com:25?123%40gmail.com=&From=jsenshar%40gmail.com&To=user due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{123@gmail.com=}]
	at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:192)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:137)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:511)[143:org.apache.camel.camel-core:2.12.0.redhat-610379]
	... 56 more","jaysensharma:1429507355:2015-04-20T13:22:35.799+0000:1429507355:2015-04-20T13:22:35.799+0000:Attached a simple standaone Spring Based TestCase using Camel version 2.15.0

janstey:1429519713:2015-04-20T16:48:33.085+0000:1429519713:2015-04-20T16:48:33.085+0000:You need to use the raw value of the property to handle special characters like ""&"". See http://camel.apache.org/how-do-i-configure-password-options-on-camel-endpoints-without-the-value-being-encoded.html. I just added a note to the camel-mail wiki docs about this."
0,CAMEL-8675,Bug,Major,2.12.2,,"

aggregator

",Resolved,Not A Problem,None,Unassigned,Jostein Gogstad,0,2,2015-04-20 10:57:36+00:00,2015-07-09 10:11:46+00:00,"Processors attached to aggregators can not throw exceptions, they will be swallowed. This makes it impossible to propagate exceptions from camel to, for instance, a CXF endpoint or custom JAX-WS service.


This route and test illustrates the problem:


AggregatorBug.java
public class AggregatorBug extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from(""direct:start"")
            .routeId(getClass().getSimpleName())
            .aggregate().header(""cheese"")
            .aggregationStrategy(new GroupedExchangeAggregationStrategy())
            .completionSize(1)
            .process(new Processor() {
                @Override
                public void process(Exchange exchange) throws Exception {
                    throw new RuntimeException();
                }
            });
    }
}




AggregatorBugTest.java
public class AggregatorBugTest extends CamelTestSupport {

    @EndpointInject(uri = ""mock:beforeException"")
    protected MockEndpoint beforeException;

    @Override
    public boolean isUseAdviceWith() {
        return true;
    }


    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new AggregatorBug();
    }

    @Override
    protected void doPostSetup() throws Exception {
        context.getRouteDefinition(AggregatorBug.class.getSimpleName()).adviceWith(context, new AdviceWithRouteBuilder() {
            @Override
            public void configure() throws Exception {
                weaveByType(ProcessDefinition.class).before().to(""mock:beforeException"");
            }
        });
        context.start();
    }

    @Test
    public void exceptions_are_swallowed() throws Exception {
        try {
            template.sendBodyAndHeader(""direct:start"", 42, ""cheese"", ""foo"");
            fail(""Expected exception"");
        } catch (CamelExecutionException e) {
            beforeException.expectedMessageCount(1);
        }

    }
}




From what I can see, the problem is located in AggregatorProcessor (github link). The output from doAggregate is ignored, even though it contains the exchange with the exception. The exchange that is used from here on out is the original input to the route, not the aggregated output. 


The only way I can see that would trigger the exception would be to add a custom errorHandler that re-throwed the exception. Unfortunately this is also impossible. The errorHandler on AggregatorProcessor is set in the constructor, and there is no API to set the errorHandler from AggregatorDefinition. The errorHandler set on the route is also ignored by AggregatorProcessor (it will though be invoked with the original not-aggregated exchange).


This problem has been reported earlier in CAMEL-1546. The proposed solution with using a seda route is not satisfactory for cxf endpoints since the calling thread would return.",davsclaus:1436407906:2015-07-09T10:11:46.934+0000:1436407906:2015-07-09T10:11:46.934+0000:The aggregator runs in separate output route that is not assoicated with the inputs.
0,CAMEL-8674,Bug,Major,2.15.1,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Tuure Laurinolli,0,2,2015-04-20 09:44:34+00:00,2015-04-22 11:26:50+00:00,"It appears that camel-netty4 does not set CamelNettyRemoteAddress in headers of an Exchange generated by an in-only UDP endpoint.


It does set CamelNettyRemoteAddress in properties of the exchange.


CamelNettyRemoteAddress in properties is set from AddressedEnvelope#sender(). CamelNettyRemoteAddress in headers is set from ChannelHandlerContext#channel().remoteAddress().


It appears that the latter does not actually contain the remote address. Possible solutions are:
1) Change NettyEndpoint to set CamelNettyRemoteAddress in headers from the AddressedEnvelope received
2) Change NettyEndpoint to set CamelNettyRemoteAddress from properties (and to set properties of the Exchange first)","njiang:1429661514:2015-04-22T08:11:54.143+0000:1429661514:2015-04-22T08:11:54.143+0000:Thanks for reporting this, I just wrote a simple test and produce the error.
Current we just set the CamelNettyRemoteAddress on the Exchange property to help us find a way to send the response message back.
I just updated the code of NettyEndpoint to setup the CamelNettyRemoteAddress on the message header at the same time.
tuure.laurinolli@portalify.com:1429661642:2015-04-22T08:14:02.941+0000:1429661642:2015-04-22T08:14:02.941+0000:Thank you. That's the reason I need the information as well :)
njiang:1429673210:2015-04-22T11:26:50.701+0000:1429673210:2015-04-22T11:26:50.701+0000:I just merge the patch into camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8643,Bug,Major,2.15.0,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Richard Peter,1,2,2015-04-15 14:50:15+00:00,2015-07-26 15:38:49+00:00,When upgrading from camel 2.14.1 to 2.15.0 our http posts from clients were sometimes failing.  Traced issue to https://issues.apache.org/jira/browse/CAMEL-5806.  The linked issue added a check of InputStream.available() which on a slow or remote client the binary stream isn't always immediately available.  Since this is done as part of the initial setup the data is never parsed when it becomes available.,davsclaus:1437101769:2015-07-17T10:56:09.186+0000:1437101769:2015-07-17T10:56:09.186+0000:There is a new option eagerCheckContentAvailable that is default false to correct this behavior. You can set it to true to have the 2.15.x situation.
0,CAMEL-8642,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Willem Jiang,0,1,2015-04-15 14:48:33+00:00,2015-04-22 11:58:31+00:00,"The ObjectInputStream uses latestUserDefinedLoader() to load the class [1], 
But I think we need to use ApplicationContextClassLoader of the camel context to load the class, in this way we can give the user right to change the classloader as they want.


[1]https://community.oracle.com/thread/1151865",njiang:1429675111:2015-04-22T11:58:31.248+0000:1429675111:2015-04-22T11:58:31.248+0000:Applied the patch into camel master branch.
0,CAMEL-8641,Bug,Minor,2.14.2,2.14.3,"
None
",Resolved,Fixed,2.14.3,Claus Ibsen,Richard Peter,1,3,2015-04-15 14:41:24+00:00,2015-04-17 06:05:29+00:00,The ScheduledPollConsumer does not have a scheduler if it has never been started.  The scheduler is not checked for null in doStop.  This comes up when routes are set to not autoStart and context managent later stops the route.,"jaysensharma:1429089284:2015-04-15T17:14:44.058+0000:1429089284:2015-04-15T17:14:44.058+0000:Looks like Claus Ibsen has already fixed it in later version of Camel please check: 

https://github.com/apache/camel/commit/a8fd547fbc63429831be89b5f5566334bd9b4358
richard.peter:1429090542:2015-04-15T17:35:42.712+0000:1429090542:2015-04-15T17:35:42.712+0000:Yes, he fixed on master/2.15.x branch.  2.14.x needs the commit as well, since it was broken on 2.14.2.
davsclaus:1429221929:2015-04-17T06:05:29.919+0000:1429221929:2015-04-17T06:05:29.919+0000:Thanks for reporting and highlighting the commit to backport"
0,CAMEL-8640,Improvement,Minor,2.15.1,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Mateusz Nowakowski,0,4,2015-04-15 10:42:50+00:00,2015-05-04 17:44:23+00:00,"By default each camel context has one BacklogTracer which is by default disabled.
However BacklogTracer  contains a queue with



public static final int MAX_BACKLOG_SIZE = 100 * 1000;
private final Queue<DefaultBacklogTracerEventMessage> queue = new ArrayBlockingQueue<DefaultBacklogTracerEventMessage>(MAX_BACKLOG_SIZE);




The easiest way:
is it possible to replace it with LinkedBlockingQueue(int capacity)?


Ideally the object could be initialized only when it is enabled but it seems BacklogTracer  is not fully encapsulated (the queue reference is maintained also outside BacklogTracer   in BacklogTracerAdvice)","davsclaus:1429221968:2015-04-17T06:06:08.829+0000:1429221968:2015-04-17T06:06:08.829+0000:Yeah good idea. You are welcome to work on a patch / PR
http://camel.apache.org/contributing.html
githubbot:1430538762:2015-05-02T11:52:42.517+0000:1430538762:2015-05-02T11:52:42.517+0000:GitHub user rbudzko opened a pull request:

    https://github.com/apache/camel/pull/508

    CAMEL-8640 on Camel 2.15.x 

    Encapsulated BacklogTracer queue. 
    Implementation of queue changed to list based instead of array based. 
    Ensuring free space in queue responsibility moved into BacklogTracer instead from BacklogTracer's user.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rbudzko/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/508.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #508
    
----
commit f1ad2dbf7d720b08dc37917dfc104f1b7ba3df2e
Author: Robert Budźko <r.budzko@oberthur.com>
Date:   2015-05-02T11:19:27Z

    Issue CAMEL-8640. Encapsulated BacklogTracer queue. Implementation of queue changed to list based instead of array based. Ensuring free space in queue responsibility moved into BacklogTracer instead from BacklogTracer's user.

commit b2d599f7f4ea2c28841495291fa6d3ac150d8b5d
Author: Robert Budźko <r.budzko@oberthur.com>
Date:   2015-05-02T11:33:06Z

    Issue CAMEL-8640. Removed import * wildcards delivered in previous commit.

commit b84e72a233505aba2b9124bf33742d67e86d30a3
Author: Robert Budźko <r.budzko@oberthur.com>
Date:   2015-05-02T11:37:31Z

    Issue CAMEL-8640. Removed import * wildcards delivered in previous commit.

commit b81cfc988da9fb79f28316513f59e2f92400a914
Author: Robert Budźko <r.budzko@oberthur.com>
Date:   2015-05-02T11:50:45Z

    Issue CAMEL-8640. More safe ensuring of space in queue.

----

davsclaus:1430617132:2015-05-03T09:38:52.750+0000:1430617132:2015-05-03T09:38:52.750+0000:Thanks for the PR. I had to adjust it a bit to apply to master first.
eg we always merge to master first, and then cherry pick to patch branches.
davsclaus:1430617155:2015-05-03T09:39:15.353+0000:1430617155:2015-05-03T09:39:15.353+0000:Also I lowered the max limit to 10.000 as 100.000 is likely way to high anyway.
githubbot:1430729566:2015-05-04T16:52:46.627+0000:1430729566:2015-05-04T16:52:46.627+0000:Github user rbudzko closed the pull request at:

    https://github.com/apache/camel/pull/508

solimo:1430732663:2015-05-04T17:44:23.869+0000:1430732663:2015-05-04T17:44:23.869+0000:I see. Will create master PR in future."
0,CAMEL-8639,Bug,Major,None,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Marcin Marzyński,1,3,2015-04-15 09:50:10+00:00,2015-07-19 08:09:19+00:00,"Camel FTP endpoint cannot recover by itself after network failure if no custom PollingConsumerPollStrategy is defined. Few years ago there was similar issue (https://issues.apache.org/jira/browse/CAMEL-1838), and it was fixed by adding in RemoteFileConsumer:
this.setPollStrategy(new RemoteFilePollingConsumerPollStrategy());


However it is broken again, as FtpEndpoint is overriding it with DefaultPollingConsumerPollStrategy in initConsumerProperties method, inherited from ScheduledPollEndpoint. I believe RemoteFilePollingConsumerPollStrategy should be used as default in RemoteFileEndpoint as well.


Adding this.setPollStrategy(new RemoteFilePollingConsumerPollStrategy()); in RemoteFilePollingConsumerPollStrategy should fix this issue.


Workaround for this bug is to create RemoteFilePollingConsumerPollStrategy in the registry and provide it directly to FTP endpoint by adding consumer.pollStrategy=#myRemoteFilePollingConsumerPollStrategyBeanId to the URL. This is also why FromFtpSimulateNetworkIssueRecoverTest didn't catch it - it's using custom PollingStrategy.","davsclaus:1436408393:2015-07-09T10:19:53.301+0000:1436408393:2015-07-09T10:19:53.301+0000:Can you work on a patch or something to better explain what you think needs to be fixed?
robses:1437126762:2015-07-17T17:52:42.133+0000:1437126762:2015-07-17T17:52:42.133+0000:First steps in contributing to camel, so bear with me. See the attached patch and basic unit test that fixes this issue as described above. Regards Rob

 
davsclaus:1437176188:2015-07-18T07:36:28.762+0000:1437176188:2015-07-18T07:36:28.762+0000:Thanks for reporting, and Rob for the patch."
0,CAMEL-8638,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas Diesler,0,2,2015-04-15 07:30:16+00:00,2022-09-02 09:01:25+00:00,"There are properties on CamelContext that should be immutable after context start.


For example the application classloader associated with a CamelContext is not a dynamic thing. You are supposed to


1. Create the CamelContext 
2. Configure it (i.e. setApplicationContextClassLoader, etc)
3. Start the CamelContext


Reconfiguring the CamelContext at runtime would lead to undefined behaviour. If a higher level supports dynamicity in that classloader, it should set the application classloader to something that supports that.


Dynamicity in classloading is generally problematic because Java does not have a notion of ""unload class"", which would apply to the remove and replace cases.


For example:



CL loads type A1 - CL gets reconfigured so that A1 is no longer available - loading of A1 is now inconsistent
CL loads type A1 - CL gets reconfigured so that A1 is something else - loading of A1 is again inconsistent",
0,CAMEL-8637,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Willem Jiang,17,5,2015-04-15 06:42:42+00:00,2016-05-05 12:33:12+00:00,It's time to upgrade the Jetty version to 9.x as the 8.x is EOL for a while.,"davsclaus:1441590498:2015-09-07T09:48:18.419+0000:1441590498:2015-09-07T09:48:18.419+0000:Willem are you working on this?
githubbot:1462420626:2016-05-05T11:57:06.420+0000:1462420626:2016-05-05T11:57:06.420+0000:GitHub user jludvice opened a pull request:

    https://github.com/apache/camel/pull/978

    [CAMEL-8637] Update camel-cometd feature.xml

    * update description
    * narrow down jetty feature dependency to version 9

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jludvice/camel camel-8637-cometd

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/978.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #978
    
----
commit 74686593220b64a676f7dfff86df295bac971502
Author: Josef Ludvicek <jludvice@redhat.com>
Date:   2016-05-05T11:55:40Z

    [CAMEL-8637] Update camel-cometd feature.xml
    
    * update description
    * narrow down jetty feature dependency to version 9

----

githubbot:1462422792:2016-05-05T12:33:12.237+0000:1462422792:2016-05-05T12:33:12.237+0000:Github user jludvice closed the pull request at:

    https://github.com/apache/camel/pull/978
"
0,CAMEL-8636,Bug,Major,"2.15.0, 2.15.1","2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-04-15 06:38:51+00:00,2015-04-15 07:02:10+00:00,"CAMEL-8085 introduced a new feature of commit the consumer offset in batch mode, but it doesn't commit the last batch of messages.",njiang:1429052530:2015-04-15T07:02:10.638+0000:1429052530:2015-04-15T07:02:10.638+0000:Committed the patch into camel master and camel-2.15.x branch.
0,CAMEL-8635,Improvement,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Willem Jiang,Thomas Diesler,0,4,2015-04-14 14:15:17+00:00,2015-04-15 06:10:47+00:00,No Desc,"githubbot:1428993428:2015-04-14T14:37:08.005+0000:1428993428:2015-04-14T14:37:08.005+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/487

    [CAMEL-8635] XStream no longer supports dynamic CL updates

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel camel-8635

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/487.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #487
    
----
commit 5e3c9d9bb1cd59f2dc31730b170588bcedf0ffe5
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-04-14T14:35:46Z

    [CAMEL-8635] XStream no longer supports dynamic CL updates

----

davsclaus:1428993721:2015-04-14T14:42:01.981+0000:1428993721:2015-04-14T14:42:01.981+0000:Thomas do be aware that the correct procedure would be PR against master branch that are then cherry picked to older branches such as 2.15.x.

However your PR is targeted against 2.15.x. So its the opposite.
njiang:1428994013:2015-04-14T14:46:53.830+0000:1428994013:2015-04-14T14:46:53.830+0000:Merged the patch into camel-2.15.x and camel master branches with thanks to Thomas.
githubbot:1429049447:2015-04-15T06:10:47.463+0000:1429049447:2015-04-15T06:10:47.463+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/487
"
0,CAMEL-8634,Improvement,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-14 13:15:34+00:00,2015-04-14 14:22:51+00:00,"See nabble
http://camel.465427.n5.nabble.com/Wiretap-not-firing-events-tp5765760.html",
0,CAMEL-8633,Improvement,Major,2.12.4,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Richard Groote,0,2,2015-04-14 08:14:45+00:00,2016-05-03 09:09:37+00:00,"The servlet component cannot handle attachments from a multipart request.


In our situation a REST multipart call is made and the attachments must be handled.


I created a extension on the DefaultHttpBinding and added functionality for multipart parsing. May be this functionality can be added to apache camel.","davsclaus:1462237512:2016-05-03T09:05:12.752+0000:1462237528:2016-05-03T09:05:28.585+0000:There is a new option on the serlvet component you must enable: attachmentMultipartBinding

{code}
    /**
     * Whether to automatic bind multipart/form-data as attachments on the Camel {@link Exchange}.
     * <p/>
     * This is turn off by default as this may require servet specific configuration to enable this when using Servlet's.
     */
    public void setAttachmentMultipartBinding(boolean attachmentMultipartBinding) {
        this.attachmentMultipartBinding = attachmentMultipartBinding;
    }
{code}"
0,CAMEL-8632,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Richard Groote,0,2,2015-04-14 08:09:02+00:00,2015-04-17 01:58:00+00:00,"In the documentation of apache camel servlet (http://camel.apache.org/servlet.html) the option for the HttpBindingRef is missing.


HttpBinding is not supported on the servlet. It would be nice if this works the same as for the HTTP component",njiang:1429207080:2015-04-17T01:58:00.919+0000:1429207080:2015-04-17T01:58:00.919+0000:Applied the patch into Camel master branch.
0,CAMEL-8631,Improvement,Major,2.15.1,None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Martin Lichtin,2,3,2015-04-14 07:36:28+00:00,2016-03-23 08:40:06+00:00,"It's currently not possible to use Camel with Spring version 4.


When first installing Spring 4:


   feature:install -v spring/4.1.2.RELEASE_1


and then installing Camel:


   feature:repo-add mvn:org.apache.camel.karaf/apache-camel/2.15.1/xml/features
   feature:install camel


The Camel feature file will actually install Spring 3 and not use the version 4 that is already installed.


One can verify this with


   bundle:requirements camel-spring


to see that it resolved the 'spring' packages with 3.2.11.RELEASE and not version 4.


E.g.:


osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.2.0)(!(version>=5.0.0))) resolved by:
   osgi.wiring.package; org.springframework.beans 3.2.11.RELEASE from org.apache.servicemix.bundles.spring-beans [83]


I believe the Camel features file needs to be modified to support Spring 4. It currently has range restrictions that exclude version 4.",
0,CAMEL-8630,Improvement,Minor,2.15.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Aaron Whiteside,0,2,2015-04-13 23:18:18+00:00,2015-04-14 05:58:19+00:00,"Allow simple language to call static methods.


For example:



simple(""System.currentTimeMillis() + ${header['OFFSET']}"");","davsclaus:1428962292:2015-04-14T05:58:12.287+0000:1428962292:2015-04-14T05:58:12.287+0000:You can use the bean function for that - something a long the lines of ""${bean:java.lang.System?method=currentTimeMillis}"". But its really not in the scope of simple to do this. If you want to add two long values then use groovy / javascript or some other programming language."
0,CAMEL-8629,Task,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrea Cosentino,0,3,2015-04-13 19:32:34+00:00,2015-04-14 12:43:15+00:00,"After the latest update from old version of SDK to 1.9.17, I've opened a ticket into Servicemix JIRA to ask for  a bundle release of latest AWS SDK version, 1.9.30. The ticket has been resolved.


We need to update the dependency from 1.9.17 to 1.9.30.","githubbot:1428924861:2015-04-13T19:34:21.106+0000:1428924861:2015-04-13T19:34:21.106+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/486

    CAMEL-8629 Update AWS SDK from version 1.9.17 to version 1.9.30

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8629
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-aws-to-latest-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/486.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #486
    
----
commit f79355bd51d749526d06f6c77ca7d0c5acdab0d1
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-13T19:33:00Z

    Resolve CAMEL-8629 Update AWS SDK from version 1.9.17 to version 1.9.30

----

acosentino:1428924879:2015-04-13T19:34:39.584+0000:1428924879:2015-04-13T19:34:39.584+0000:PR submitted:
https://github.com/apache/camel/pull/486

Andrea
davsclaus:1428961620:2015-04-14T05:47:00.850+0000:1428961620:2015-04-14T05:47:00.850+0000:The OSGi versions is ""strange"" so they actually use underscore, so it should be 

<aws-java-sdk-bundle-version>1.9.30_1</aws-java-sdk-bundle-version>
davsclaus:1428961732:2015-04-14T05:48:52.618+0000:1428961732:2015-04-14T05:48:52.618+0000:The last OSGi release is .22
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.aws-java-sdk/
davsclaus:1428961817:2015-04-14T05:50:17.639+0000:1428961817:2015-04-14T05:50:17.639+0000:Logged a ticket about aws bundle .30 needed
https://issues.apache.org/jira/browse/SMX4-1967
davsclaus:1428961945:2015-04-14T05:52:25.545+0000:1428961945:2015-04-14T05:52:25.545+0000:We will do the osgi upgrade later when new bundles is released
acosentino:1428963167:2015-04-14T06:12:47.463+0000:1428963167:2015-04-14T06:12:47.463+0000:Sorry also for this.
acosentino:1428963408:2015-04-14T06:16:48.887+0000:1428963408:2015-04-14T06:16:48.887+0000:In the last days I've opened a ticket for this on ServiceMix JIRA:
https://issues.apache.org/jira/browse/SM-2496

and they resolved it yesterday.
githubbot:1428986595:2015-04-14T12:43:15.762+0000:1428986595:2015-04-14T12:43:15.762+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/486
"
0,CAMEL-8628,Bug,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Keith Babo,0,3,2015-04-13 19:14:25+00:00,2015-04-14 12:17:25+00:00,"The reference to the current exchange is cleared on each invocation of ExpressionMapper in the done() method.  If a mapping file contains multiple expression mappings, the first expression clears out the exchange reference and subsequent expression mappings fail with:



java.lang.IllegalStateException: Current exchange has not been set for ExpressionMapper




Fix is to not clear the reference in ExpressionMapper.done().  We should do this in DozerProducer after all mappings in the mapping file have completed.","githubbot:1428923867:2015-04-13T19:17:47.822+0000:1428923867:2015-04-13T19:17:47.822+0000:GitHub user kcbabo opened a pull request:

    https://github.com/apache/camel/pull/485

    CAMEL-8628: camel-dozer component fails with multiple expression mappings

    https://issues.apache.org/jira/browse/CAMEL-8628

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kcbabo/camel CAMEL-8628

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/485.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #485
    
----
commit 07fedad005b2cfa72006ea386b07600cb6926942
Author: Keith Babo <kbabo@redhat.com>
Date:   2015-04-13T19:15:24Z

    CAMEL-8628: camel-dozer component fails with multiple expression mappings

----

davsclaus:1428961435:2015-04-14T05:43:55.329+0000:1428961435:2015-04-14T05:43:55.329+0000:Thanks for the PR
githubbot:1428985045:2015-04-14T12:17:25.358+0000:1428985045:2015-04-14T12:17:25.358+0000:Github user kcbabo closed the pull request at:

    https://github.com/apache/camel/pull/485
"
0,CAMEL-8627,Task,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrea Cosentino,0,3,2015-04-13 15:33:33+00:00,2015-04-17 06:06:56+00:00,We need to update Infinispan from version 6.0.2.Final to the latest stable version 7.1.1.Final,"githubbot:1428910545:2015-04-13T15:35:45.315+0000:1428910545:2015-04-13T15:35:45.315+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/484

    CAMEL-8627 Update Infinispan version from 6.0.2.Final to 7.1.1.Final

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8627
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-infinispan-to-latest-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/484.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #484
    
----
commit ff6eb04388187f05e01aad75b7bd61e61cf3e03b
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-13T15:34:07Z

    Resolve CAMEL-8627 Update Infinispan version from 6.0.2.Final to 7.1.1.Final

----

acosentino:1428910560:2015-04-13T15:36:00.448+0000:1428910560:2015-04-13T15:36:00.448+0000:PR submitted:
https://github.com/apache/camel/pull/484

Andrea
davsclaus:1428961150:2015-04-14T05:39:10.894+0000:1428961150:2015-04-14T05:39:10.894+0000:Unfortunately sometimes this is not so easy with OSGi. This upgrade does not work in osgi, and changes would be needed in the karaf features file.

You can test by

davsclaus:~/workspace/camel/tests/camel-itest-karaf (master)/$ mvn clean test -Dtest=CamelInfinispanTest

You get a bunch of errors like
{code}
ERROR: Bundle org.xerial.snappy.snappy-java [98] Error starting mvn:org.xerial.snappy/snappy-java/1.1.0.1 (org.osgi.framework.BundleException: Activator start error in bundle org.xerial.snappy.snappy-java [98].)
java.lang.UnsatisfiedLinkError: no libsnappyjava.dylib in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1886)
	at java.lang.Runtime.loadLibrary0(Runtime.java:849)
	at java.lang.System.loadLibrary(System.java:1088)
	at org.xerial.snappy.SnappyBundleActivator.start(SnappyBundleActivator.java:52)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:744)
ERROR: Bundle org.infinispan.core [100] Error starting mvn:org.infinispan/infinispan-core/7.1.1.Final (org.osgi.framework.BundleException: Unresolved constraint in bundle org.infinispan.core [100]: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.infinispan.core [100]: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:744)
ERROR: Bundle org.apache.camel.camel-infinispan [108] Error starting mvn:org.apache.camel/camel-infinispan/2.16-SNAPSHOT (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-infinispan [108]: Unable to resolve 108.0: missing requirement [108.0] osgi.wiring.package; (&(osgi.wiring.package=org.infinispan)(version>=7.1.0)(!(version>=8.0.0))) [caused by: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-infinispan [108]: Unable to resolve 108.0: missing requirement [108.0] osgi.wiring.package; (&(osgi.wiring.package=org.infinispan)(version>=7.1.0)(!(version>=8.0.0))) [caused by: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1299)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:744)
[org.ops4j.pax.exam.rbc.client.RemoteBundleContextClient] : Remote bundle context found after 11400 millis
ERROR: Bundle org.xerial.snappy.snappy-java [98] Error starting/stopping bundle. (org.osgi.framework.BundleException: Activator start error in bundle org.xerial.snappy.snappy-java [98].)
java.lang.UnsatisfiedLinkError: no libsnappyjava.dylib in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1886)
	at java.lang.Runtime.loadLibrary0(Runtime.java:849)
	at java.lang.System.loadLibrary(System.java:1088)
	at org.xerial.snappy.SnappyBundleActivator.start(SnappyBundleActivator.java:52)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:744)
ERROR: Bundle org.infinispan.core [100] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.infinispan.core [100]: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0))))
org.osgi.framework.BundleException: Unresolved constraint in bundle org.infinispan.core [100]: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:744)
ERROR: Bundle org.apache.camel.camel-infinispan [108] Error starting/stopping bundle. (org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-infinispan [108]: Unable to resolve 108.0: missing requirement [108.0] osgi.wiring.package; (&(osgi.wiring.package=org.infinispan)(version>=7.1.0)(!(version>=8.0.0))) [caused by: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))])
org.osgi.framework.BundleException: Unresolved constraint in bundle org.apache.camel.camel-infinispan [108]: Unable to resolve 108.0: missing requirement [108.0] osgi.wiring.package; (&(osgi.wiring.package=org.infinispan)(version>=7.1.0)(!(version>=8.0.0))) [caused by: Unable to resolve 100.0: missing requirement [100.0] osgi.wiring.package; (&(osgi.wiring.package=org.jboss.marshalling)(version>=1.4.0)(!(version>=2.0.0)))]
	at org.apache.felix.framework.Felix.resolveBundleRevision(Felix.java:4002)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2045)
	at org.apache.felix.framework.Felix.setBundleStartLevel(Felix.java:1491)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:334)
	at java.lang.Thread.run(Thread.java:744)
[org.ops4j.pax.tinybundles.core.intern.RawBuilder] : make()
{code}
davsclaus:1428961543:2015-04-14T05:45:43.382+0000:1428961543:2015-04-14T05:45:43.382+0000:And make sure to build a new features.xml file first before osgi karaf tests

davsclaus:~/workspace/camel/platforms/karaf/features (master)/$ mvn clean install
acosentino:1428963091:2015-04-14T06:11:31.748+0000:1428963091:2015-04-14T06:11:31.748+0000:First of all: sorry for this.

I close the PR and work on this.
githubbot:1428963220:2015-04-14T06:13:40.671+0000:1428963220:2015-04-14T06:13:40.671+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/484

githubbot:1429015245:2015-04-14T20:40:45.465+0000:1429015245:2015-04-14T20:40:45.465+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/488

    CAMEL-8627 Update Infinispan version from 6.0.2.Final to 7.1.1.Final

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8627
    
    Thanks.
    Bye,
    Andrea


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-infinispan-to-7.1.1.Final

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/488.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #488
    
----
commit 6d7491391b88943e2e134fa52b1242db3f4bdd89
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-14T20:37:03Z

    Resolve CAMEL-8627 Update Infinispan version from 6.0.2.Final to 7.1.1.Final

----

acosentino:1429015431:2015-04-14T20:43:51.334+0000:1429015431:2015-04-14T20:43:51.334+0000:PR submitted:
https://github.com/apache/camel/pull/488

There were some things to change inside features.xml and some dependencies version to change.

Infinispan 7.1.1.Final bundle now depends on jboss-marshalling-osgi bundle and no more from jboss-marshalling bundle.
githubbot:1429052186:2015-04-15T06:56:26.175+0000:1429052186:2015-04-15T06:56:26.175+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/488

davsclaus:1429222016:2015-04-17T06:06:56.439+0000:1429222016:2015-04-17T06:06:56.439+0000:Thanks for helping with this."
0,CAMEL-8626,Bug,Critical,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Mateusz Nowakowski,0,2,2015-04-13 15:15:31+00:00,2015-04-20 09:17:08+00:00,"Having a camel context with a single route:



        onException(Throwable.class)
                .handled(true)
                .process(handleException()); // essentially  doing exchange.setException(someConvertedException);

        from(""direct:generalFlow"")
                .routingSlip(property(GeneralFlowRoute.class.getName()));




started from Spring:



    <camelContext id=""flows"" xmlns=""http://camel.apache.org/schema/spring"">
        <template id=""template"" defaultEndpoint=""direct:generalFlow""/>
        <routeBuilder ref=""generalFlow""/>
    </camelContext>

    <bean id=""generalFlow"" class=""com.blabla.GeneralFlowRoute""/>




During performance test both exchangesInFlightKeys  and exchangesInFlightStartTimestamps are accumulating over time.


But if the test is run in one thread with debug - nothing is accumulated.


Issue found after migration from 2.14.1 to 2.15.1","matihost:1428911132:2015-04-13T15:45:32.035+0000:1428911132:2015-04-13T15:45:32.035+0000:Output from Eclipse Memory Analizer Tool
{code}
Class Name                                                                                                              | Shallow Heap | Retained Heap
-------------------------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0xa8ac4cf0                                                  |          128 |    33 939 752
|- <class> class org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0xa8ecfd20                                 |            0 |             0
|- lastExchangeFailureExchangeId java.lang.String @ 0x8b01cb68  ID-plabq10-dev-sabre-com-21992-1428925014784-0-9822762  |           24 |           152
|- lastExchangeCompletedExchangeId java.lang.String @ 0x9b134df8  ID-plabq10-dev-sabre-com-21992-1428925014784-0-9823226|           24 |           152
|- context org.apache.camel.spring.SpringCamelContext @ 0xa8272878                                                      |          384 |        60 760
|- exchangesInFlightKeys java.util.concurrent.ConcurrentHashMap @ 0xa87d7358                                            |           64 |     4 977 264
|- exchangesTotal org.apache.camel.management.mbean.Statistic @ 0xa8aad000                                              |           40 |            40
|- resetTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad028                                              |           40 |            40
|- exchangesCompleted org.apache.camel.management.mbean.Statistic @ 0xa8aad050                                          |           40 |            40
|- exchangesFailed org.apache.camel.management.mbean.Statistic @ 0xa8aad078                                             |           40 |            40
|- exchangesInflight org.apache.camel.management.mbean.Statistic @ 0xa8aad0a0                                           |           40 |            40
|- failuresHandled org.apache.camel.management.mbean.Statistic @ 0xa8aad0c8                                             |           40 |            40
|- redeliveries org.apache.camel.management.mbean.Statistic @ 0xa8aad0f0                                                |           40 |            40
|- externalRedeliveries org.apache.camel.management.mbean.Statistic @ 0xa8aad118                                        |           40 |            40
|- minProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad140                                           |           40 |            40
|- maxProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad168                                           |           40 |            40
|- totalProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad190                                         |           40 |            40
|- lastProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad1b8                                          |           40 |            40
|- deltaProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad1e0                                         |           40 |            40
|- meanProcessingTime org.apache.camel.management.mbean.Statistic @ 0xa8aad208                                          |           40 |            40
|- firstExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad230                             |           40 |            40
|- firstExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad258                               |           40 |            40
|- lastExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad280                              |           40 |            40
|- lastExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0xa8aad2a8                                |           40 |            40
|- load org.apache.camel.management.mbean.LoadTriplet @ 0xa8aad2d0                                                      |           40 |            40
|- exchangesInFlightStartTimestamps java.util.concurrent.ConcurrentSkipListMap @ 0xa8ab4850                             |           48 |     4 421 800
-------------------------------------------------------------------------------------------------------------------------------------------------------
{code}

And some statistics values:

exchangesInFlightKeys  -> 98175 non-empty entries
exchangesTotal.value 4911592
exchangesCompleted.value 4788850
exchangesFailed.value 122742
exchangesInFlight.value  27
failuresHandled.value 0
failuresHandled.updateCount 0
redeliveries.value 0
externalRedeliveries.value 0
davsclaus:1428963307:2015-04-14T06:15:07.282+0000:1428963307:2015-04-14T06:15:07.282+0000:Thanks for reporting, its when an exchange had failed the leak happens. Not for succesfull exchanges.
davsclaus:1428965939:2015-04-14T06:58:59.317+0000:1428965939:2015-04-14T06:58:59.317+0000:attached fixed camel-core JAR
davsclaus:1428965969:2015-04-14T06:59:29.833+0000:1428965969:2015-04-14T06:59:29.833+0000:I have build a JAR with the fix, you are welcome to give a test. 

You can also build from source yourself
http://camel.apache.org/building.html
matihost:1428973988:2015-04-14T09:13:08.182+0000:1428973988:2015-04-14T09:13:08.182+0000:Thanks for a fast fix.

WIll run a test again and will have report tomorrow after 6 AM CDT.
matihost:1429061930:2015-04-15T09:38:50.125+0000:1429061930:2015-04-15T09:38:50.125+0000:Still exchangesInFlightStartTimestamps  leaking  (see MAT dump below)

However it is a case of one of ManagedSuspendableRoute object out of existing 214 in the system.

It is for a route:
{code}
        from(""direct:loopV300"")
                .choice().when(property(WHILE_COUNTER).isGreaterThan(0))
                    // some procesing
                    .setProperty(WHILE_COUNTER, decrementProperty(WHILE_COUNTER))
                    .to(""direct:loopV300"")
                .end();
{code}

MAT dump:

{code}
Class Name                                                                                                              | Shallow Heap | Retained Heap
-------------------------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0x78b76a5e8                                                 |          128 |   153 059 616
|- <class> class org.apache.camel.management.mbean.ManagedSuspendableRoute @ 0x789ef31b0                                |            0 |             0
|- lastExchangeCompletedExchangeId java.lang.String @ 0x782074c98  ID-plabq10-dev-sabre-com-30368-1429011401321-0-934556|           24 |           152
|- context org.apache.camel.spring.SpringCamelContext @ 0x788396c88                                                     |          384 |        83 344
|- exchangesInFlightStartTimestamps java.util.concurrent.ConcurrentSkipListMap @ 0x789fb5760                            |           48 |   153 056 936
|- exchangesInFlightKeys java.util.concurrent.ConcurrentHashMap @ 0x789fb5790                                           |           48 |         1 792
|- route org.apache.camel.impl.EventDrivenConsumerRoute @ 0x78a7b88d8                                                   |           72 |           592
|- exchangesTotal org.apache.camel.management.mbean.Statistic @ 0x78bb01220                                             |           40 |            40
|- resetTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01248                                             |           40 |            40
|- exchangesCompleted org.apache.camel.management.mbean.Statistic @ 0x78bb01270                                         |           40 |            40
|- exchangesFailed org.apache.camel.management.mbean.Statistic @ 0x78bb01298                                            |           40 |            40
|- exchangesInflight org.apache.camel.management.mbean.Statistic @ 0x78bb012c0                                          |           40 |            40
|- failuresHandled org.apache.camel.management.mbean.Statistic @ 0x78bb012e8                                            |           40 |            40
|- redeliveries org.apache.camel.management.mbean.Statistic @ 0x78bb01310                                               |           40 |            40
|- externalRedeliveries org.apache.camel.management.mbean.Statistic @ 0x78bb01338                                       |           40 |            40
|- minProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01360                                          |           40 |            40
|- maxProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01388                                          |           40 |            40
|- totalProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb013b0                                        |           40 |            40
|- lastProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb013d8                                         |           40 |            40
|- deltaProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01400                                        |           40 |            40
|- meanProcessingTime org.apache.camel.management.mbean.Statistic @ 0x78bb01428                                         |           40 |            40
|- firstExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01450                            |           40 |            40
|- firstExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb01478                              |           40 |            40
|- lastExchangeCompletedTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb014a0                             |           40 |            40
|- lastExchangeFailureTimestamp org.apache.camel.management.mbean.Statistic @ 0x78bb014c8                               |           40 |            40
|- load org.apache.camel.management.mbean.LoadTriplet @ 0x78bb014f0                                                     |           40 |            40
|- firstExchangeCompletedExchangeId java.lang.String @ 0x790515100  ID-plabq10-dev-sabre-com-30368-1429011401321-0-2    |           24 |           136
|- firstExchangeFailureExchangeId java.lang.String @ 0x7928bb518  ID-plabq10-dev-sabre-com-30368-1429011401321-0-223200 |           24 |           152
|- lastExchangeFailureExchangeId java.lang.String @ 0x79931b290  ID-plabq10-dev-sabre-com-30368-1429011401321-0-834588  |           24 |           152
-------------------------------------------------------------------------------------------------------------------------------------------------------


route.endpoint direct://loopV300
exchangesInFlightKeys size = 0
exchangesInFlightStartTimestamps  size = 1 401 792
exchangeInFlight.value 0
exchangesTotal.value 1 869 106
exchangedFailed.value 10
exchangesCompleted.value 1 869 096

{code}



davsclaus:1429225471:2015-04-17T07:04:31.633+0000:1429225471:2015-04-17T07:04:31.633+0000:Ah you may do something bad/odd with your ""while loop trick"". There is a loop eip you should favor to use
http://camel.apache.org/loop


davsclaus:1429225520:2015-04-17T07:05:20.329+0000:1429225520:2015-04-17T07:05:20.329+0000:If you look using jconsole / jvisualvm there is a inflight repository mbean under services. What does it say?
davsclaus:1429228648:2015-04-17T07:57:28.867+0000:1429228648:2015-04-17T07:57:28.867+0000:Okay found the leak when you call the same route recursive which you do in your ""while loop"". I will commit a fix and attach a new JAR for you to test
davsclaus:1429229547:2015-04-17T08:12:27.837+0000:1429229547:2015-04-17T08:12:27.837+0000:Attached the updated JAR with a new fix.
matihost:1429347344:2015-04-18T16:55:44.985+0000:1429347344:2015-04-18T16:55:44.985+0000:Thanks for the second patch.

First tests and dumps shows that the leak is gone. I will have full result tests tomorrow.

When is 1.15.2 going to be released?



davsclaus:1429398188:2015-04-19T07:03:08.753+0000:1429398188:2015-04-19T07:03:08.753+0000:Thanks for testing.

Follow this talk about the 2.15.2 release
http://camel.465427.n5.nabble.com/Apache-Camel-2-15-2-Patch-Release-td5765747.html
matihost:1429492628:2015-04-20T09:17:08.855+0000:1429492628:2015-04-20T09:17:08.855+0000:Finally confirming that the issues are gone.
Thanks
Looking forward the patched release.
"
0,CAMEL-8625,Improvement,Minor,"2.13.4, 2.14.2, 2.15.1",Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Tomasz Ptak,1,3,2015-04-13 14:36:06+00:00,2022-09-02 09:01:09+00:00,"DefaultRestletBinding adds values from submitted form as headers in the inMessage of the exchange. As a result it is close to impossible to rely on any of the values provided.
Suggested solution:
a) form values should be stored separately, or
b) populating headers from the form should fail if a header with this key already exists
c) prefixing keys coming from the form with something, for instance ""form.""


Solution a is a safer solution which will break compatibility with previous versions of Apache Camel (it can also be spread over a number of releases, first introducing new field for form values and logging a warning if form data is being extracted, next making it configurable and disabled by default, then removing this functionality).
Solution b is backwards compatible if this behaviour is not used as a feature  (if it is, it should not). That said someone could still use it to populate RestletRequest-like headers in the Message.
Solution c would be rather ok as well, but I like a more, personally.


I can provide a patch if any solution is accepted.","davsclaus:1436408523:2015-07-09T10:22:03.556+0000:1436408523:2015-07-09T10:22:03.556+0000:You are welcome to work on a patch for c, and also add some option to turn this form -> header mapping on/off. Then you can turn it off, and get the form data directly in another way.
wblancqu:1473231842:2016-09-07T15:04:02.157+0000:1473231879:2016-09-07T15:04:39.595+0000:Hi,

We encountered an issue which is strongly correlated to the issue described above.

We saw that in the outgoing restlet response, incoming request form parameters are attached. In our case, one of these form parameters were having a newline character. The response went through a HAProxy instance, marking the response header (which was actually a request header) as having an unauthorized character, provoking a HTTP 502 bad gateway.

In the end, the incoming form parameters should not be routed back to the response, so I did an effort implementing solution c prefixing the keys. It is however not ""toggleable"", but you might want to use this as a base to fix this issue.

I've attached the patched files.

Kind regards
davsclaus:1662080469:2022-09-02T09:01:09.789+0000:1662080469:2022-09-02T09:01:09.789+0000:restlet is removed in camel 3"
0,CAMEL-8624,Bug,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-04-13 08:37:29+00:00,2015-04-13 09:13:36+00:00,"See nabble
http://camel.465427.n5.nabble.com/transformers-not-working-after-update-to-2-15-1-tp5765600.html",
0,CAMEL-8623,Improvement,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,2,2015-04-13 06:42:32+00:00,2015-04-13 11:51:33+00:00,We need to update Metrics from version 3.1.0 to the latest version 3.1.1,"githubbot:1428878651:2015-04-13T06:44:11.658+0000:1428878651:2015-04-13T06:44:11.658+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/483

    CAMEL-8623 Update Dropwizard Metrics from version 3.1.0 to 3.1.1

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8623
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-metrics-version-to-latest

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/483.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #483
    
----
commit 5a4d6ba4806c06bed72681d3571c4f3109840c1c
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-13T06:42:32Z

    Resolve CAMEL-8623 Update Dropwizard Metrics from version 3.1.0 to 3.1.1

----

githubbot:1428897093:2015-04-13T11:51:33.635+0000:1428897093:2015-04-13T11:51:33.635+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/483
"
0,CAMEL-8622,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Andrea Cosentino,0,3,2015-04-12 12:21:22+00:00,2015-04-12 13:08:19+00:00,We need to update Apache PDFbox from version 1.6.0 to the latest release 1.8.9,"githubbot:1428812644:2015-04-12T12:24:04.774+0000:1428812644:2015-04-12T12:24:04.774+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/481

    CAMEL-8622 Update Apache PdfBox from version 1.6.0 to version 1.8.9

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8622
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-pdfbox-version-to-1.8.9

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/481.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #481
    
----
commit ad7f5db53b84b047676c5857a87a8216f6829a20
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-12T12:22:18Z

    Resolve CAMEL-8622 Update Apache PdfBox from version 1.6.0 to version 1.8.9

----

acosentino:1428812672:2015-04-12T12:24:32.685+0000:1428812672:2015-04-12T12:24:32.685+0000:PR submitted:
https://github.com/apache/camel/pull/481

Andrea
githubbot:1428815264:2015-04-12T13:07:44.225+0000:1428815264:2015-04-12T13:07:44.225+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/481

davsclaus:1428815299:2015-04-12T13:08:19.448+0000:1428815299:2015-04-12T13:08:19.448+0000:Thanks for helping out"
0,CAMEL-8621,Improvement,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,2,2015-04-12 10:14:52+00:00,2015-04-14 05:55:15+00:00,"We need to update Apache Kafka from 0.8.1.1 to 0.8.2.0.


Actually there is also a 0.8.2.1 version, but the related bundle has not been released yet.","githubbot:1428805109:2015-04-12T10:18:29.465+0000:1428805109:2015-04-12T10:18:29.465+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/480

    CAMEL-8621 Update Apache Kafka version from 0.8.1.1 to 0.8.2.0

    Hi everyone,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8621
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-kafka-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/480.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #480
    
----
commit 32ce9b120b891f066296d9964235b3eb7aa9267f
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-12T10:15:35Z

    Resolve CAMEL-8621 Update Apache Kafka version from 0.8.1.1 to 0.8.2.0

----

acosentino:1428805290:2015-04-12T10:21:30.287+0000:1428805290:2015-04-12T10:21:30.287+0000:PR submitted:
https://github.com/apache/camel/pull/480

Andrea
githubbot:1428824244:2015-04-12T15:37:24.476+0000:1428824244:2015-04-12T15:37:24.476+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/480
"
0,CAMEL-8620,Improvement,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,2,2015-04-12 08:59:34+00:00,2015-04-14 05:56:03+00:00,We need to update the LightCouch version from 0.1.3 to the latest release 0.1.6,"githubbot:1428800483:2015-04-12T09:01:23.575+0000:1428800483:2015-04-12T09:01:23.575+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/478

    CAMEL-8620 Update LigthCouch version from 0.1.3 to 0.1.6

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8620
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-lightcouch-to-latest-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/478.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #478
    
----
commit 40a3c54797c106ad3460f0d3c3bf7e7fd1e945b7
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-12T09:00:01Z

    Resolve CAMEL-8620 Update LigthCouch version from 0.1.3 to 0.1.6

----

githubbot:1428800632:2015-04-12T09:03:52.875+0000:1428800632:2015-04-12T09:03:52.875+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/478

githubbot:1428800981:2015-04-12T09:09:41.013+0000:1428800981:2015-04-12T09:09:41.013+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/479

    CAMEL-8620 Update LightCouch version from 0.1.3 to 0.1.6

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8620
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-lightcouch-version-to-0.1.6

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/479.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #479
    
----
commit 55ec97f8d996a1ccb48fa47cd6925127e063e615
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-12T09:07:51Z

    Resolve CAMEL-8620 Update LightCouch version from 0.1.3 to 0.1.6

----

acosentino:1428801015:2015-04-12T09:10:15.763+0000:1428801015:2015-04-12T09:10:15.763+0000:PR submitted:
https://github.com/apache/camel/pull/479

Andrea
githubbot:1428811837:2015-04-12T12:10:37.985+0000:1428811837:2015-04-12T12:10:37.985+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/479
"
0,CAMEL-8619,Test,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,3,2015-04-12 07:51:09+00:00,2015-04-12 08:15:18+00:00,"The two Camel-WebSocket SSL Tests fails. It seems to be related to the update of Async-http-client from 1.9.8 to 1.9.17.


The Jenkins job Camel.trunk.fulltest fail on this two tests.


https://builds.apache.org/job/Camel.trunk.fulltest/2260/org.apache.camel$camel-websocket/","githubbot:1428796401:2015-04-12T07:53:21.941+0000:1428796401:2015-04-12T07:53:21.941+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/477

    CAMEL-8619 Camel WebSocket SSL tests fail

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8619
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-websocket-fix-ssl-route-tests

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/477.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #477
    
----
commit 469281abd80df73e37394d9ad7db9defe5c77052
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-12T07:51:25Z

    Fix Camel-8619 Camel WebSocket SSL tests fail

----

acosentino:1428796452:2015-04-12T07:54:12.963+0000:1428796452:2015-04-12T07:54:12.963+0000:PR submitted:
https://github.com/apache/camel/pull/477

Andrea
githubbot:1428797697:2015-04-12T08:14:57.849+0000:1428797697:2015-04-12T08:14:57.849+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/477

davsclaus:1428797718:2015-04-12T08:15:18.231+0000:1428797718:2015-04-12T08:15:18.231+0000:Thanks again for this PR"
0,CAMEL-8618,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-04-12 07:00:30+00:00,2015-04-12 07:01:36+00:00,"These commands dont bring much value. You can see the labels from the regular list commands.


They just clutter up the list of commands.",
0,CAMEL-8617,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-04-11 13:52:23+00:00,2015-04-11 16:15:46+00:00,"If starting a clustered vertx eventbus then it may need extra time to startup which requires using its async api to get the notification. The current api calls the sync which says in javadoc that the eventbus may not be ready.


So lets improved this and wait for it with a default timeout of 60 sec",
0,CAMEL-8616,Improvement,Minor,None,None,"

twitter

",Resolved,Fixed,"2.15.3, 2.16.0",Andrea Cosentino,Andrea Cosentino,0,4,2015-04-11 11:50:34+00:00,2015-05-10 13:46:16+00:00,"We need to update Twitter4j and Twitter4j OSGi bundle to latest relese 4.0.3


I opened an issue into ServiceMix JIRA to make available the latest release of the OSGI bundle: https://issues.apache.org/jira/browse/SM-2494","githubbot:1428877355:2015-04-13T06:22:35.024+0000:1428877355:2015-04-13T06:22:35.024+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/482

    CAMEL-8616 Update Twitter4j to latest version

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8616
    
    Thank you.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-twitter4j-to-4.0.3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/482.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #482
    
----
commit c4900c04644eda4a88e70a7237a3a8f3d2020406
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-13T06:20:41Z

    Resolve CAMEL-8616 Update Twitter4j to latest version

----

acosentino:1428877458:2015-04-13T06:24:18.761+0000:1428877458:2015-04-13T06:24:18.761+0000:PR submitted:
https://github.com/apache/camel/pull/482
githubbot:1428877568:2015-04-13T06:26:08.296+0000:1428877568:2015-04-13T06:26:08.296+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/482

ffang:1430264729:2015-04-29T07:45:29.301+0000:1430264729:2015-04-29T07:45:29.301+0000:We just add twitter 4.0.3 bundle in Servicemix but that bundle isn't released yet, so reopen this issue
acosentino:1430267706:2015-04-29T08:35:06.459+0000:1430267706:2015-04-29T08:35:06.459+0000:Yes, I forget to comment and add this note. Thank you, Freeman.

Andrea
davsclaus:1430342740:2015-04-30T05:25:40.131+0000:1430342740:2015-04-30T05:25:40.131+0000:Yeah we need to wait for the 4.0.3 bundle release. I downgraded the bundle to 4.0.2 in the mean time.
acosentino:1431236556:2015-05-10T13:42:36.094+0000:1431236776:2015-05-10T13:46:16.461+0000:The bundle has been released. I've upgraded the version.

Related commit on master:

http://git-wip-us.apache.org/repos/asf/camel/commit/1babd7ca

Cherry-pick on camel-2.15.x:

http://git-wip-us.apache.org/repos/asf/camel/commit/296f81e7"
0,CAMEL-8615,Improvement,Minor,None,None,"

dropbox

",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,3,2015-04-10 09:48:35+00:00,2015-04-12 07:02:31+00:00,We need to update Dropbox-core-sdk from 1.7.6 to 1.7.7.,"githubbot:1428631534:2015-04-10T10:05:34.729+0000:1428631534:2015-04-10T10:05:34.729+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/475

    CAMEL-8615 Update Dropbox-core-sdk from 1.7.6 to 1.7.7

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8615
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-dropbox-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/475.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #475
    
----
commit a920c66d468b1d3da4388a3b4d0bcd2281ae9fdb
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-10T09:49:40Z

    Resolve CAMEL-8615 Update Dropbox-core-sdk from 1.7.6 to 1.7.7

----

acosentino:1428631578:2015-04-10T10:06:18.987+0000:1428631578:2015-04-10T10:06:18.987+0000:PR submitted:
https://github.com/apache/camel/pull/475
githubbot:1428633707:2015-04-10T10:41:47.052+0000:1428633707:2015-04-10T10:41:47.052+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/475

davsclaus:1428793328:2015-04-12T07:02:08.739+0000:1428793328:2015-04-12T07:02:08.739+0000:Thanks"
0,CAMEL-8614,Task,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-04-10 05:54:50+00:00,2015-04-10 07:12:04+00:00,So all the mvn coord is the same and consistent,
0,CAMEL-8613,Bug,Major,2.12.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Jay SenSharma,0,2,2015-04-10 04:15:14+00:00,2015-04-21 15:50:12+00:00,"camel-https4 fails when  ""sslContextParameters"" and ""proxyAuthHost"" are defined together.

    <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true""/>





Above works fine but if i add the ""proxyAuthHost"" info then it fails with the following error:



   <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true&amp;proxyAuthHost=my.squid.proxy.com&amp;proxyAuthPort=3128""/>




  The following Error occurs: 



[jsensharma@localhost CamelBased]$ mvn clean install camel:run

[INFO] Starting Camel ...
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/jsensharma/.m2/repository/org/slf4j/slf4j-log4j12/1.6.6/slf4j-log4j12-1.6.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/jsensharma/.m2/repository/org/slf4j/slf4j-log4j12/1.7.10/slf4j-log4j12-1.7.10.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.12.0.redhat-610379 starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle redhat-case is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is starting
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Tracing is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] HttpComponent                  INFO  Created ClientConnectionManager org.apache.http.impl.conn.PoolingClientConnectionManager@1a428ecd
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 2831
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 2831
[         Blueprint Extender: 1] SSLContextParameters           INFO  Available providers: SUN version 1.7.
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 443
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 443
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] DefaultStreamCachingStrategy   INFO  StreamCaching in use with spool directory: /tmp/camel/camel-tmp-75033967-7017-48d6-9394-d690a6174d87 and rules: [Spool > 128K body size]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is shutting down
[         Blueprint Extender: 1] HttpComponent                  INFO  Shutting down ClientConnectionManager: org.apache.http.impl.conn.PoolingClientConnectionManager@1a428ecd
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) uptime 0.308 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is shutdown in 0.004 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          ERROR Error occurred during starting Camel: CamelContext(myCamelId) due Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:191)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:358)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:994)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:329)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2150)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2080)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1868)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1740)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:872)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:792)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:540)
	at de.kalpatec.pojosr.framework.PojoSR$1.serviceChanged(PojoSR.java:66)
	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:116)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:88)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:260)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:149)
	at org.apache.camel.component.http4.HttpEndpoint.getHttpClient(HttpEndpoint.java:113)
	at org.apache.camel.component.http4.HttpProducer.<init>(HttpProducer.java:83)
	at org.apache.camel.component.http4.HttpEndpoint.createProducer(HttpEndpoint.java:99)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
	... 92 more
Caused by: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpComponent.registerPort(HttpComponent.java:329)
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:147)
	... 96 more
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.12.0.redhat-610379 (CamelContext: myCamelId) is starting
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Tracing is enabled on CamelContext: myCamelId
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)
[         Blueprint Extender: 1] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)
[         Blueprint Extender: 1] HttpComponent                  INFO  Created ClientConnectionManager org.apache.http.impl.conn.PoolingClientConnectionManager@235089b4
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 2831
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 2831
[         Blueprint Extender: 1] SSLContextParameters           INFO  Available providers: SUN version 1.7.
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https on port 443
[         Blueprint Extender: 1] HttpComponent                  INFO  Registering SSL scheme https4 on port 443
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[         Blueprint Extender: 1] DefaultStreamCachingStrategy   INFO  StreamCaching in use with spool directory: /tmp/camel/camel-tmp-75033967-7017-48d6-9394-d690a6174d87 and rules: [Spool > 128K body size, Spool > 128K body size]
[         Blueprint Extender: 1] BlueprintCamelContext          ERROR Error occurred during starting Camel: CamelContext(myCamelId) due Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[https4://dic.googlecode.com/files/GoogleSearch.wsdl?proxyAuthHost=my.squid.proxy.com&sslContextParameters=%23testSSLContext&throwExceptionOnFailure=true&proxyAuthPort=2831]. Reason: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:191)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:358)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:994)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:329)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2150)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2080)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1868)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1740)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1579)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1547)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:872)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:792)
	at de.kalpatec.pojosr.framework.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:540)
	at de.kalpatec.pojosr.framework.PojoSR$1.serviceChanged(PojoSR.java:66)
	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistry.registerService(ServiceRegistry.java:116)
	at de.kalpatec.pojosr.framework.PojoSRBundleContext.registerService(PojoSRBundleContext.java:95)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:439)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:379)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:149)
	at org.apache.camel.component.http4.HttpEndpoint.getHttpClient(HttpEndpoint.java:113)
	at org.apache.camel.component.http4.HttpProducer.<init>(HttpProducer.java:83)
	at org.apache.camel.component.http4.HttpEndpoint.createProducer(HttpEndpoint.java:99)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
	... 76 more
Caused by: java.lang.IllegalArgumentException: Only same instance of SSLContextParameters is supported. Cannot use a different instance. Previous instance hashcode: 0x2e6857ea, New instance hashcode: 0x0
	at org.apache.camel.component.http4.HttpComponent.registerPort(HttpComponent.java:329)
	at org.apache.camel.component.http4.HttpEndpoint.createHttpClient(HttpEndpoint.java:147)
	... 80 more
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [31], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [8], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintListener], bundle: redhat-case [2], symbolicName: redhat-case
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [31], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-http [4], symbolicName: org.apache.camel.camel-http
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [8], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [20], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [32], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [22], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: redhat-case [2], symbolicName: redhat-case
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-http [4], symbolicName: org.apache.camel.camel-http
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-http4 [7], symbolicName: org.apache.camel.camel-http4
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-http4 [7], symbolicName: org.apache.camel.camel-http4
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle redhat-case
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1428558491683
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:352)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)","jaysensharma:1428610635:2015-04-10T04:17:15.558+0000:1428610635:2015-04-10T04:17:15.558+0000:- In order to reproduce this issue we can use the following kind of blueprint.xml. 
- Try running a camel route as following WITH and then WITHOUT the  ""proxyAuthHost""  along with ""sslContextParameters""  *(problem happens when these are used together)*

{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/blueprint""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                            http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

	<sslContextParameters xmlns=""http://camel.apache.org/schema/blueprint"" id=""testSSLContext"" camelContextId=""myCamelId"" >
		<secureSocketProtocols>
			<secureSocketProtocol>TLSv1</secureSocketProtocol>
		</secureSocketProtocols>
		<keyManagers keyPassword=""rmi+ssl"">
			<keyStore type=""JKS"" password=""rmi+ssl"" resource=""/home/jsensharma/Certs/chap8.keystore"" />
		</keyManagers>
		<trustManagers>
			<keyStore type=""JKS"" password=""rmi+ssl"" resource=""/home/jsensharma/Certs/chap8.keystore"" />
		</trustManagers>
		<cipherSuitesFilter>
			<include>.*</include>
		</cipherSuitesFilter>
	</sslContextParameters>
	
	<camelContext trace=""true"" id=""myCamelId"" xmlns=""http://camel.apache.org/schema/blueprint""  streamCache=""true"">
           <route >
               <from uri=""timer://foo?delay=2s&amp;repeatCount=1""/>
                 <setHeader headerName=""CamelHttpMethod"">
                    <constant>GET</constant>
                 </setHeader>

                 <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true&amp;proxyAuthHost=my.squid.proxy.com&amp;proxyAuthPort=3128""/>

                 <!--   
                 Following as ""https4:"" also should work wtihout any issue here  as it does not have the proxy info.
                 <to uri=""https4://dic.googlecode.com/files/GoogleSearch.wsdl?sslContextParameters=#testSSLContext&amp;throwExceptionOnFailure=true""/>
                 -->

               <to uri=""file:target/RECEIVED""/>   <!-- here the WSDL will be stored -->
          </route>
	</camelContext>

</blueprint>
{code}

njiang:1429602612:2015-04-21T15:50:12.802+0000:1429602612:2015-04-21T15:50:12.802+0000:This issue is already fix since Camel 2.13.0 with upgrading of http client 4 ."
0,CAMEL-8612,Improvement,Minor,None,None,"

cassandra

",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,3,2015-04-09 21:08:42+00:00,2015-04-10 06:10:48+00:00,"We need to update the dependencies of cassandraql component with the latest releases:



Datastax Cassandra Driver version from 2.1.2 to 2.1.5
Cassandra-all version from 2.1.2 to 2.1.4
Cassandra-Unit version from 2.0.2.2 to 2.1.3.1","githubbot:1428585016:2015-04-09T21:10:16.971+0000:1428585016:2015-04-09T21:10:16.971+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/474

    CAMEL-8612 Update Cassandraql component dependencies

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8612
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-cassandra

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/474.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #474
    
----
commit 4c7a7ce62c9d50c48e74c73dc41a2dd370e5d626
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-09T21:09:07Z

    Resolve Camel-8612 Update Cassandraql component dependencies

----

acosentino:1428585040:2015-04-09T21:10:40.205+0000:1428585040:2015-04-09T21:10:40.205+0000:PR submitted:
https://github.com/apache/camel/pull/474
davsclaus:1428614700:2015-04-10T05:25:00.828+0000:1428614700:2015-04-10T05:25:00.828+0000:Thanks for the PR
githubbot:1428617448:2015-04-10T06:10:48.543+0000:1428617448:2015-04-10T06:10:48.543+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/474
"
0,CAMEL-8611,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Christian Müller,Andrea Cosentino,0,3,2015-04-09 20:29:54+00:00,2015-04-10 06:10:42+00:00,We need to update the Freemarker version from 2.3.21 to the latest release 2.3.22,"githubbot:1428583147:2015-04-09T20:39:07.882+0000:1428583147:2015-04-09T20:39:07.882+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/473

    CAMEL-8611 Update freemarker version from 2.3.21 to 2.3.22

    Hi all,
    
    This PR is relate to:
    https://issues.apache.org/jira/browse/CAMEL-8611
    
    Thanks,
    Bye.
    
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-freemarker-version-to-2.3.22

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/473.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #473
    
----
commit 5a549c14c0c8c867e77f4a5c9db5784b2670014d
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-09T20:30:13Z

    Resolve Camel-8611 Update freemarker version from 2.3.21 to 2.3.22

----

acosentino:1428584685:2015-04-09T21:04:45.056+0000:1428584685:2015-04-09T21:04:45.056+0000:PR submitted:
https://github.com/apache/camel/pull/473
muellerc:1428586870:2015-04-09T21:41:10.602+0000:1428586870:2015-04-09T21:41:10.602+0000:committed:
commit cc456efaab82a7179d34086ef1ad5ccd034852e2
Author: ancosen <ancosen@gmail.com>
Date:   Thu Apr 9 22:30:13 2015 +0200

    Resolve Camel-8611 Update freemarker version from 2.3.21 to 2.3.22
githubbot:1428617442:2015-04-10T06:10:42.063+0000:1428617442:2015-04-10T06:10:42.063+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/473
"
0,CAMEL-8610,New Feature,Major,2.15.1,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Aaron Whiteside,1,2,2015-04-09 19:33:27+00:00,2019-07-31 09:10:34+00:00,"Add support for dynamic route templates



<route id=""my-template"" template=""true"">
  <from uri=""{{myendpoint}}""/>
  <to uri=""seda:{{seda.name}}?size={{seda.size:10}}""/>
</route>





CamelContext.startRouteFromTemplate(String templateRouteId, String newRouteId, Map<String,Object> templateProperties);




Usage would be something like:



 Map map = new HashMap<>();
 map.put(""myendpoint"", ""direct:hello"");
 map.put(""seda.name"", ""test"");
 camelContext.startRouteFromTemplate(""my-template"", ""my-new-route-1"", map);
// or
 camelContext.startRouteFromTemplate(""my-template"", null, null); // auto assign new route id and supply no specific properties.","davsclaus:1436408599:2015-07-09T10:23:19.513+0000:1436408599:2015-07-09T10:23:19.513+0000:This is for XML routes, as java routes is just java code and you can template this using java code.
aaronjwhiteside:1445870481:2015-10-26T22:41:21.325+0000:1445870481:2015-10-26T22:41:21.325+0000:Java routes might still take advantage of this (the property placeholder replacement), sure you could do it manually in java code.. but a java template route could still be at parity with xml."
0,CAMEL-8609,Bug,Major,"2.14.2, 2.15.1","2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-04-09 18:26:19+00:00,2015-04-09 18:37:15+00:00,"The camel-jpa component uses open-jpa for testing, but it does not require the bundle in the feature, and could be used with other JPA implementations, such as Hibernate.",dhirajsb:1428575835:2015-04-09T18:37:15.392+0000:1428575835:2015-04-09T18:37:15.392+0000:Fix merged into branches camel-2.14.x camel-2.15.x master
0,CAMEL-8608,Improvement,Minor,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Andrea Cosentino,0,3,2015-04-09 15:41:19+00:00,2015-04-09 15:59:49+00:00,"We need to update the async-http-client library version from version 1.9.8 to latest version 1.9.17.


The affected components are:



Camel-ahc
Camel-websocket (test dependency)
Camel-atmosphere-websocket (test dependency)","githubbot:1428565454:2015-04-09T15:44:14.953+0000:1428565454:2015-04-09T15:44:14.953+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/472

    CAMEL-8608 Update async-http-client version from 1.9.8 to 1.9.17

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8608
    
    Tests are ok for all the components affected by this change.
    
    Thanks.
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-async-http-client-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/472.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #472
    
----
commit 1073ef853f7b5e235e468db17ff49b9b1aecf50f
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-09T15:41:35Z

    Resolve Camel-8608 Update async-http-client version from 1.9.8 to 1.9.17

----

acosentino:1428565503:2015-04-09T15:45:03.866+0000:1428565503:2015-04-09T15:45:03.866+0000:PR submitted:
https://github.com/apache/camel/pull/472
githubbot:1428566374:2015-04-09T15:59:34.699+0000:1428566374:2015-04-09T15:59:34.699+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/472

davsclaus:1428566389:2015-04-09T15:59:49.789+0000:1428566389:2015-04-09T15:59:49.789+0000:Thanks for the PR"
0,CAMEL-8607,Bug,Major,2.15.1,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Hani ElHaffar,0,2,2015-04-09 15:32:35+00:00,2015-04-23 10:52:33+00:00,"I am creating a camel endpoint such as this (somehost/someport/baseurl have been replaced):
https4://somehost:someport/baseurl?authenticationPreemptive=true&authPassword=RAW(foo%bar)&authUsername=RAW(username)


This causes camel to log the entire endpoint, including the user/password:
(DefaultComponent.java:67) - Supplied URI 'https4://somehost:someport/baseurl?authenticationPreemptive=true&authPassword=RAW(foo%bar)&authUsername=RAW(username)' contains unsafe characters, please check encoding


Consider:
-It is a security issue to log the username/password


-Specifiying RAW would allow for special characters, specifically for passwords, as indicated here : https://camel.apache.org/configuring-camel.html, but it seems that UnsafeUriCharactersEncoder is not handling them appropriately.","njiang:1429746716:2015-04-23T07:51:56.018+0000:1429746716:2015-04-23T07:51:56.018+0000:The encoding issue is fixed in CAMEL-8649, I will clean up the warning log to avoid logging the username/password.
njiang:1429757553:2015-04-23T10:52:33.117+0000:1429757553:2015-04-23T10:52:33.117+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8606,Improvement,Major,None,,"
None
",Resolved,Not A Problem,None,Willem Jiang,kishore kumar,0,4,2015-04-09 07:16:14+00:00,2015-04-10 02:55:02+00:00,"Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().


Remediation: If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.


Few classes used java.util.Random.


WeightedRandomLoadBalancer.java: 56
RedeliveryPolicy.java: 221
FileUtil.java: 330
RandomLoadBalancer.java: 44
FileUtil.java: 334
OptimisticLockRetryPolicy.java: 63","kdesu:1428535095:2015-04-09T07:18:15.768+0000:1428535095:2015-04-09T07:18:15.768+0000:We are using Apache camel 2.13.2 version and also request you provide any resolution to get resolve from this violation issue.
njiang:1428542109:2015-04-09T09:15:09.458+0000:1428542109:2015-04-09T09:15:09.458+0000:Hi Kishore,

The classes which you showed  do not use the Random.nextInt is not used to generate the random number for the session key or session identifier. I don't think we need to switch it to  use the SecureRandom.

Regards,

Willem
kdesu:1428555768:2015-04-09T13:02:48.797+0000:1428555768:2015-04-09T13:02:48.797+0000:But java itselt suggested to use java.security.SecureRandom class to generate random values. Is there any plan to use SecureRandom class in camel source code in further releases?
antoine.dessaigne:1428560543:2015-04-09T14:22:23.828+0000:1428560543:2015-04-09T14:22:23.828+0000:Hi Willem,

I totally agree with you there's absolutely no security risk with the usage of these _non-secure_ random.

That being said, there are a *lot* of static code analyzers. For me updating the code will:
* prevent this kind of false-positive issues from being created again and again
* reduce the noises from these analysis reports and potentially detect real issues that are not drowned in false-positive.

Regards,

Antoine
dkulp:1428561603:2015-04-09T14:40:03.321+0000:1428561603:2015-04-09T14:40:03.321+0000:
Using SecureRandom in areas that don't need the the security it provides causes the system entropy to be drained and then not available in the cases where real secure random numbers are required.   That can cause performance problems across the system.

This should be closed as not a problem."
0,CAMEL-8605,Improvement,Minor,None,2.17.0,"

camel-lucene
lucene

",Resolved,Fixed,2.17.0,Unassigned,Andrea Cosentino,0,3,2015-04-08 19:52:25+00:00,2016-01-05 17:42:12+00:00,We need to update Apache Lucene version from 4.10.3 to 5.0.0. At the same time we need to update Apache Solr version from 4.10.2 to 5.0.0,"acosentino:1428494808:2015-04-08T20:06:48.637+0000:1428494808:2015-04-08T20:06:48.637+0000:PR submitted:
https://github.com/apache/camel/pull/470
acosentino:1428533320:2015-04-09T06:48:40.697+0000:1428533320:2015-04-09T06:48:40.697+0000:I don't understand why, but asfgit doesn't trace this PR and there is no notification on this JIRA issue.
githubbot:1428533385:2015-04-09T06:49:45.789+0000:1428533385:2015-04-09T06:49:45.789+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/470

githubbot:1428533389:2015-04-09T06:49:49.063+0000:1428533389:2015-04-09T06:49:49.063+0000:GitHub user oscerd reopened a pull request:

    https://github.com/apache/camel/pull/470

    Camel-8605 Update Apache Lucene version to 5.0.0

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8605
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-apache-lucene

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/470.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #470
    
----
commit 703c2a331024be74a8301a62e40e4f8a73ec5d23
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-08T19:52:45Z

    Fix Camel-8605 Update Apache Lucene version to 5.0.0

----

acosentino:1428533420:2015-04-09T06:50:20.305+0000:1428533420:2015-04-09T06:50:20.305+0000:Now it's ok :-)
davsclaus:1428538618:2015-04-09T08:16:58.640+0000:1428538618:2015-04-09T08:16:58.640+0000:There is some other components that related to lucense such as solr / elastichsearch (I think) etc. And its better to align and upgrade them together.

[~bvahdat] talked about this recently.
acosentino:1428538763:2015-04-09T08:19:23.227+0000:1428538763:2015-04-09T08:19:23.227+0000:Ok. I'll take a look. I close the PR for the moment.
githubbot:1428538776:2015-04-09T08:19:36.956+0000:1428538776:2015-04-09T08:19:36.956+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/470

davsclaus:1428538896:2015-04-09T08:21:36.960+0000:1428538896:2015-04-09T08:21:36.960+0000:There is also the issue of having OSGi bundles for these never versions. If they are missing then a ticket can be logged in SMX to request a bundle release at
http://repo2.maven.org/maven2/org/apache/servicemix/bundles/
davsclaus:1428538948:2015-04-09T08:22:28.324+0000:1428538948:2015-04-09T08:22:28.324+0000:But surely we would love to upgrade to latest releases of our Camel components. Keep up the good work. We have a lot of other components which may has a newer release that can be upgraded.
acosentino:1428539199:2015-04-09T08:26:39.803+0000:1428539199:2015-04-09T08:26:39.803+0000:The Lucene OSGI bundle is already on the latest version.

I need to take a look to solr component, work on it and look for the latest OSGI bundle version.

I think i will submit a new PR with all the components related to Lucene aligned with latest release version.
acosentino:1428577714:2015-04-09T19:08:34.519+0000:1428578201:2015-04-09T19:16:41.050+0000:The components using Apache Lucene are 3:

- camel-lucene
- camel-solr (only test)
- camel-jcr

{code}
parent/pom.xml:      org.apache.lucene.*;version=""${lucene-version-range}"",
parent/pom.xml:        <groupId>org.apache.lucene</groupId>
parent/pom.xml:        <groupId>org.apache.lucene</groupId>
parent/pom.xml:        <groupId>org.apache.lucene</groupId>
components/camel-jcr/pom.xml:      <groupId>org.apache.lucene</groupId>
components/camel-solr/src/test/resources/solr/collection1/conf/schema.xml:      <analyzer class=""org.apache.lucene.analysis.el.GreekAnalyzer""/>
components/camel-solr/src/test/resources/solr/collection1/conf/schema.xml:	    float -> org.apache.lucene.analysis.payloads.FloatEncoder,
components/camel-solr/src/test/resources/solr/collection1/conf/schema.xml: <!-- <similarity class=""org.apache.lucene.search.DefaultSimilarity""/> -->
components/camel-solr/src/test/resources/solr/collection1/conf/solrconfig.xml:        <mergePolicy class=""org.apache.lucene.index.TieredMergePolicy"">
components/camel-solr/src/test/resources/solr/collection1/conf/solrconfig.xml:       <mergeScheduler class=""org.apache.lucene.index.ConcurrentMergeScheduler""/>
components/camel-solr/src/test/resources/solr/collection1/conf/solrconfig.xml:         implement org.apache.lucene.index.IndexDeletionPolicy.
components/camel-solr/src/test/resources/solr/collection1/conf/solrconfig.xml:           org.apache.lucene.search.spell.JaroWinklerDistance
components/camel-solr/src/test/resources/solr/conf/collection1/schema.xml:      <analyzer class=""org.apache.lucene.analysis.el.GreekAnalyzer""/>
components/camel-solr/src/test/resources/solr/conf/collection1/schema.xml:	    float -> org.apache.lucene.analysis.payloads.FloatEncoder,
components/camel-solr/src/test/resources/solr/conf/collection1/schema.xml: <!-- <similarity class=""org.apache.lucene.search.DefaultSimilarity""/> -->
components/camel-solr/src/test/resources/solr/conf/collection1/solrconfig.xml:        <mergePolicy class=""org.apache.lucene.index.TieredMergePolicy"">
components/camel-solr/src/test/resources/solr/conf/collection1/solrconfig.xml:       <mergeScheduler class=""org.apache.lucene.index.ConcurrentMergeScheduler""/>
components/camel-solr/src/test/resources/solr/conf/collection1/solrconfig.xml:         implement org.apache.lucene.index.IndexDeletionPolicy.
components/camel-solr/src/test/resources/solr/conf/collection1/solrconfig.xml:           org.apache.lucene.search.spell.JaroWinklerDistance
components/camel-lucene/src/test/java/org/apache/camel/processor/lucene/LuceneQueryProcessorTest.java:import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
components/camel-lucene/src/test/java/org/apache/camel/processor/lucene/LuceneQueryProcessorTest.java:import org.apache.lucene.analysis.standard.StandardAnalyzer;
components/camel-lucene/src/test/java/org/apache/camel/component/lucene/LuceneIndexAndQueryProducerTest.java:import org.apache.lucene.analysis.core.SimpleAnalyzer;
components/camel-lucene/src/test/java/org/apache/camel/component/lucene/LuceneIndexAndQueryProducerTest.java:import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
components/camel-lucene/src/test/java/org/apache/camel/component/lucene/LuceneIndexAndQueryProducerTest.java:import org.apache.lucene.analysis.standard.StandardAnalyzer;
components/camel-lucene/src/main/java/org/apache/camel/processor/lucene/LuceneQueryProcessor.java:import org.apache.lucene.analysis.Analyzer;
components/camel-lucene/src/main/java/org/apache/camel/processor/lucene/LuceneQueryProcessor.java:import org.apache.lucene.search.IndexSearcher;
components/camel-lucene/src/main/java/org/apache/camel/processor/lucene/LuceneQueryProcessor.java:import org.apache.lucene.util.Version;
components/camel-lucene/src/main/java/org/apache/camel/processor/lucene/support/Hit.java:import org.apache.lucene.document.Document;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.analysis.Analyzer;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.document.Document;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.index.DirectoryReader;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.index.IndexReader;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.queryparser.classic.ParseException;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.queryparser.classic.QueryParser;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.search.IndexSearcher;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.search.Query;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.search.ScoreDoc;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.search.TopScoreDocCollector;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.store.NIOFSDirectory;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneSearcher.java:import org.apache.lucene.util.Version;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.analysis.Analyzer;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.document.Document;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.document.Field;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.document.FieldType;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.index.IndexWriter;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.index.IndexWriterConfig;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.index.IndexWriterConfig.OpenMode;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.store.NIOFSDirectory;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneIndexer.java:import org.apache.lucene.util.Version;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneQueryProducer.java:import org.apache.lucene.analysis.Analyzer;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneConfiguration.java:import org.apache.lucene.analysis.Analyzer;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneConfiguration.java:import org.apache.lucene.analysis.standard.StandardAnalyzer;
components/camel-lucene/src/main/java/org/apache/camel/component/lucene/LuceneConfiguration.java:import org.apache.lucene.util.Version;
components/camel-lucene/pom.xml:			<groupId>org.apache.lucene</groupId>
components/camel-lucene/pom.xml:			<groupId>org.apache.lucene</groupId>
components/camel-lucene/pom.xml:			<groupId>org.apache.lucene</groupId>
{code}

So I was thinking to submit the PR with Lucene and Solr updated at the same time.

What do you think?
davsclaus:1441590535:2015-09-07T09:48:55.612+0000:1441590535:2015-09-07T09:48:55.612+0000:Yeah sure upgrade all those lucence related components at once if possible
acosentino:1441591486:2015-09-07T10:04:46.584+0000:1441591486:2015-09-07T10:04:46.584+0000:Hi Claus,

I was waiting for James Netherton on the following ticket:

https://issues.apache.org/jira/browse/CAMEL-9080

I think we can add a link to this one.
davsclaus:1443393233:2015-09-28T06:33:53.547+0000:1443393233:2015-09-28T06:33:53.547+0000:CAMEL-9080 has been implemented. Is all of this done for the 2.16 release or what is missing? Otherwise we need to move this to the 2.17 release.
acosentino:1443393760:2015-09-28T06:42:40.172+0000:1443393855:2015-09-28T06:44:15.447+0000:From my point of view everything is done.

We can move the switch to 5.0.0 on 2.17
acosentino:1451986932:2016-01-05T17:42:12.040+0000:1451986932:2016-01-05T17:42:12.040+0000:Solr and Lucene are currently on version 5.2.1"
0,CAMEL-8604,Wish,Minor,2.15.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Ramon Rosa da Silva,1,3,2015-04-08 15:17:50+00:00,2015-10-05 14:47:00+00:00,"I would like RabbitMQ component knew how to handle messages in RPC format more easily.
RabbitMQ RPC Sample: https://www.rabbitmq.com/tutorials/tutorial-six-java.html


Currently, to receive and reply in RPC is required (as server):


RouteSample.java
from(""rabbitmq://rabbit-server:5672/myExc?routingKey=myQueue&queue=myQueue&vhost=myVhost&autoAck=false&prefetchEnabled=true&prefetchCount=10&concurrentConsumers=10&declare=true"")
.transacted ()
.setProperty (RabbitMQConstants.REPLY_TO) .header (RabbitMQConstants.REPLY_TO)
.to (""sql: ......"")
.setHeader (RabbitMQConstants.ROUTING_KEY) .property (RabbitMQConstants.REPLY_TO)
.setHeader (RabbitMQConstants.EXCHANGE_NAME) .simple ("""")
.to(""rabbitmq://rabbit-server:5672/_required_fake_field?routingKey=_required_fake_field&vhost=myVhost&threadPoolSize=1"");




So you must save ""reply_to"" from header to properties, set fake exchange and routing key, and overwrite with setHeader.


Would be simpler:



The consumer save the reply_to in properties.
Enable exchange and routing key blank.
Use reply_to property as routhing key when exchange and key is blank.



Test unit for improvement:


ProducerTest.java
    private RabbitMQEndpoint endpoint = Mockito.mock(RabbitMQEndpoint.class);
    private Exchange exchange = Mockito.mock(Exchange.class);
    private Message message = new DefaultMessage();
    private Connection conn = Mockito.mock(Connection.class);
    private Channel channel = Mockito.mock(Channel.class);;

    @Before
    public void before() throws IOException {
        Mockito.when(exchange.getIn()).thenReturn(message);
        Mockito.when(endpoint.connect(Matchers.any(ExecutorService.class))).thenReturn(conn);
        Mockito.when(conn.createChannel()).thenReturn(null);
    }

       @Test
       public void testRpcReplyTo() throws Exception {             
             message = Mockito.mock(Message.class);
             Mockito.when(exchange.getIn()).thenReturn(message);         
             Mockito.when(message.getHeader(RabbitMQConstants.EXCHANGE_NAME, String.class)).thenReturn("""");
             
             Mockito.when(conn.createChannel()).thenReturn(channel);
             RabbitMQProducer producer = new RabbitMQProducer(endpoint);
             exchange.setFromEndpoint(endpoint);
             exchange.setProperty(RabbitMQConstants.REPLY_TO, ""queue_to_reply"");
             
             producer.process(exchange);
             
             Mockito.verify(channel).basicPublish(Mockito.eq(""""), Mockito.eq(""queue_to_reply""), Mockito.any(BasicProperties.class), Mockito.any(byte[].class));
       }","davsclaus:1443482265:2015-09-29T07:17:45.730+0000:1443482265:2015-09-29T07:17:45.730+0000:We do not want to endorse RPC over messaging
souciance:1444027620:2015-10-05T14:47:00.944+0000:1444027620:2015-10-05T14:47:00.944+0000:I actually ran into this scenario a few days at my employee where they want RPC support. The main reason is that the client is connecting via socket to Camel and is waiting for a response else it times out. Camel is sending the request via RPC to the backend and waiting as well. Right now we have to write the RPC code manually as written in the RabbitMQ documentation. The main argument for RPC here was that one did want to run into a scenario where the backend takes long time and returns messages after the client has closed the socket. Although it is always more suited to go with event-driven, sometimes its not possible for various reasons so it would be nice to have better functionality to support it."
0,CAMEL-8603,Improvement,Trivial,None,"2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,3,2015-04-08 05:50:09+00:00,2015-04-08 07:22:04+00:00,"See SO
http://stackoverflow.com/questions/29496850/reduce-camel-ftp-component-logging


We should change the 2 places in camel-ftp where we log at INFO level to DEBUG level so we dont noise the production logs.


Its in both the consumer and producer, such as
log.info(""Connected and logged in to: "" + remoteServer());


Contributions for a patch / PR is much welcome.","githubbot:1428447957:2015-04-08T07:05:57.656+0000:1428447957:2015-04-08T07:05:57.656+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/468

    CAMEL-8603 Camel-ftp Reduce connection info logging from INFO to DEBUG

    Hi,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8603
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-8603-reduce-logging-level

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/468.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #468
    
----
commit cebc80fd434d2a21ef469fdecea160c97623149a
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-08T07:03:48Z

    Camel-8603 Camel-ftp Reduce connection info logging from INFO to DEBUG

----

acosentino:1428447989:2015-04-08T07:06:29.871+0000:1428447989:2015-04-08T07:06:29.871+0000:PR submitted:
https://github.com/apache/camel/pull/468
githubbot:1428448917:2015-04-08T07:21:57.599+0000:1428448917:2015-04-08T07:21:57.599+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/468

davsclaus:1428448923:2015-04-08T07:22:03.928+0000:1428448923:2015-04-08T07:22:03.928+0000:Thanks for the PR"
0,CAMEL-8602,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Ben Manes,0,2,2015-04-07 09:24:35+00:00,2021-01-27 14:58:28+00:00,"When Camel transitions to requiring Java 8, please upgrade to Caffeine. The performance should be relatively the same. The per-instance memory usage should be smaller and Camel may decide to opt-in to use some of the additional features. The only drawback is that the jar size is larger due to code generation, though that may be trimmed over time and usually is not a concern for server-side applications.


ConcurrentLinkedHashMap changes will continue to be minimal, even more so now, and driven by requests from Java 6 users unable to upgrade. Caffeine is ideally the upgrade path for Guava cache users too, which due to Android cannot be significantly modified.


Caffeine: https://github.com/ben-manes/caffeine
Benchmarks: https://github.com/ben-manes/caffeine/wiki/Benchmarks
ConcurrentLinkedHashMap: https://code.google.com/p/concurrentlinkedhashmap","davsclaus:1428793429:2015-04-12T07:03:49.448+0000:1428793429:2015-04-12T07:03:49.448+0000:Thanks for letting us know. We will follow your advice when we drop support for JDK 1.7
davsclaus:1458709546:2016-03-23T13:05:46.358+0000:1458709546:2016-03-23T13:05:46.358+0000:Working on this. The eviction list runs async so we need to force a cleanup in our unit tests or use thread sleeps. But the force cleanUp works the best and fastest.

Otherwise the code changes wasnt that bad. And caffine offers weak/soft out of the box we can turn on in our soft/weak caches.
ben.manes:1458712656:2016-03-23T13:57:36.635+0000:1458712656:2016-03-23T13:57:36.635+0000:You can configure the cache to use a direct (same thread) executor for unit tests, e.g. Runnable::run. See Caffeine#executor for details.
davsclaus:1458714507:2016-03-23T14:28:27.883+0000:1458714507:2016-03-23T14:28:27.883+0000:Thanks ben, the sync runnable works like a charm.
davsclaus:1458719689:2016-03-23T15:54:49.646+0000:1458719689:2016-03-23T15:54:49.646+0000:Sadly we have OSGi issues now generating the osgi manfests for camel-core. I pushed this to a branch called osgi-trouble.
ben.manes:1458724674:2016-03-23T17:17:54.451+0000:1458724674:2016-03-23T17:17:54.451+0000:Let me know if there is an issue on my side to fix. I do provide OSGi manifests and have a [test case|https://github.com/ben-manes/caffeine/blob/master/caffeine/src/test/java/com/github/benmanes/caffeine/OSGiTest.java] to validate it.
davsclaus:1458731050:2016-03-23T19:04:10.036+0000:1458731050:2016-03-23T19:04:10.036+0000:Its the karaf maven plugin that generates the manifest.mf for camel-core. As its rather complex and we shade caffeine and another JAR then it breaks it when its upgraded. Version 2.3.7 used to work, but do not with caffeeine, some weird error about LRUCache not a valid class. And the newer versions of this plugin each have their own set of bugs/problems.

davsclaus:1459385219:2016-03-31T08:46:59.183+0000:1459385219:2016-03-31T08:46:59.183+0000:Okay we got the OSGi troubles fixed now, so I am getting this merged into the code base."
0,CAMEL-8601,Improvement,Major,"2.12.5, 2.13.4, 2.14.2, 2.15.1","2.14.3, 2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2015-04-06 21:04:23+00:00,2015-06-30 16:30:51+00:00,Add support for compound types Addess and Geolocation introduced in Salesforce API 30.,"dhirajsb:1428359063:2015-04-07T06:24:23.971+0000:1428359063:2015-04-07T06:24:23.971+0000:Added support in branches: camel-2.12.x camel-2.13.x camel-2.14.x camel-2.15.x and master
mbasovni:1435646870:2015-06-30T14:47:50.110+0000:1435646991:2015-06-30T14:49:51.437+0000:Hi, I tried to run test {{org.apache.camel.component.salesforce.CompoundTypesIntegrationTest}} but I got the following exception. Do you know why?
{code}
Caused by: org.apache.camel.component.salesforce.api.SalesforceException: {errors:[{""errorCode"":""INVALID_FIELD"",""message"":""No such column 'Shipping_Location__Latitude__s' on sobject of type Account""}],statusCode:400}
{code}

How to run integration tests properly? Maven profile {{integration}} does not work for me, so I run in as follows: {{mvn test -Dtest=CompoundTypesIntegrationTest}}.
dhirajsb:1435653051:2015-06-30T16:30:51.572+0000:1435653051:2015-06-30T16:30:51.572+0000:Hi Martin, you can run all the salesforce tests using the profile {{salesforce-test}}. See the Javadoc for {{CompundTypesIntegrationTest}} for what it needs:

{code}
Test support for Salesforce compound data types.
This test requires a custom field in the <code>Account</code> object called <code>""Shipping Location""</code> of type <code>Geolocation</code> in decimal units.
 @see <a href=""https://www.salesforce.com/developer/docs/api/index_Left.htm#CSHID=compound_fields.htm|StartTopic=Content%2Fcompound_fields.htm|SkinName=webhelp"">Compound data types</a>
{code}"
0,CAMEL-8600,Improvement,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-04-06 13:02:13+00:00,2015-04-06 13:31:53+00:00,"As most Ftp server use the file separator as Unit style, we should use it as default. Here is an use case which send the file from windows box to a FTP server, if the file separator is Auto, the file is upload with an error path.",njiang:1428298313:2015-04-06T13:31:53.071+0000:1428298313:2015-04-06T13:31:53.071+0000:Applied the patch into camel master and camel-2.15.x branches.
0,CAMEL-8599,New Feature,Minor,2.15.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Aaron Whiteside,0,1,2015-04-03 23:16:26+00:00,2019-07-31 09:10:13+00:00,"Support a dependsOn=""<route-id>"" route attribute


Much like spring's depends-on bean attribute.


Calculate the start order based on the dependsOn graphs. Using startupOrder in a dynamic route environment is hard because the startupOrder must be unique across all routes.



<route id=""hello"" dependsOn=""world""/>
<route id=""world""/>",
0,CAMEL-8598,Improvement,Minor,2.14.2,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Andrea Cosentino,Derek Abdine,0,4,2015-04-03 21:50:05+00:00,2016-07-19 20:18:46+00:00,"The aws-swf component does not set a default ""Execution Start To Close Timeout"" or ""Task Start To Close Timeout"" when workflows are newly registered. 


This has the effect of scheduled workflows immediately moving to the TIMEOUT state (and being tracked as timed out in the AWS SWF UI).


workarounds
For newcomers to the aws-swf component this is particularly confusing. My work-around was to explicitly create the workflow type in the AWS SWF UI before camel had a chance to register it with proper timeouts (the UI requires you to set a timeout, which may mean there's also a bug in the AWS API). Another approach looks to be related to the workflowTypeRegistrationOptions uri option on the aws-swf endpoint, though I haven't validated that approach as a work-around for this issue, so explore at your own risk.","davsclaus:1428127659:2015-04-04T14:07:39.540+0000:1428127659:2015-04-04T14:07:39.540+0000:Thanks for reporting. Are you able to work on a patch to fix this?
sidshar:1468673565:2016-07-16T20:52:45.480+0000:1468673639:2016-07-16T20:53:59.493+0000:[~davsclaus] I encountered the same issue while using camel-swf (latest 2.17) and even after the defaults by Camel client, it seems the scheduling options are not used by AWS client as the StartWorkflowOptions parameters are injected after a workflow is created

CamelSWFWorkflowClient#startWorkflowExecution
{code}
  public String[] startWorkflowExecution(String workflowId, String runId, String eventName, String version, Object arguments) {
        DynamicWorkflowClientExternalImpl dynamicWorkflowClientExternal = (DynamicWorkflowClientExternalImpl) getDynamicWorkflowClient(workflowId, runId);

        WorkflowType workflowType = new WorkflowType();
        workflowType.setName(eventName);
        workflowType.setVersion(version);
        dynamicWorkflowClientExternal.setWorkflowType(workflowType);
        dynamicWorkflowClientExternal.startWorkflowExecution(toArray(arguments));
        StartWorkflowOptions startWorkflowOptions = new StartWorkflowOptions();
        startWorkflowOptions.setTaskStartToCloseTimeoutSeconds(FlowHelpers.durationToSeconds(configuration.getTaskStartToCloseTimeout()));
        startWorkflowOptions.setExecutionStartToCloseTimeoutSeconds(FlowHelpers.durationToSeconds(configuration.getExecutionStartToCloseTimeout()));
        dynamicWorkflowClientExternal.setSchedulingOptions(startWorkflowOptions);

        String newWorkflowId = dynamicWorkflowClientExternal.getWorkflowExecution().getWorkflowId();
        String newRunId = dynamicWorkflowClientExternal.getWorkflowExecution().getRunId();

        return new String[] {newWorkflowId, newRunId};
    }
{code}

Seems, it should be

{code}
  public String[] startWorkflowExecution(String workflowId, String runId, String eventName, String version, Object arguments) {
        DynamicWorkflowClientExternalImpl dynamicWorkflowClientExternal = (DynamicWorkflowClientExternalImpl) getDynamicWorkflowClient(workflowId, runId);

        WorkflowType workflowType = new WorkflowType();
        workflowType.setName(eventName);
        workflowType.setVersion(version);
        dynamicWorkflowClientExternal.setWorkflowType(workflowType);
        StartWorkflowOptions startWorkflowOptions = new StartWorkflowOptions();
          startWorkflowOptions.setTaskStartToCloseTimeoutSeconds(FlowHelpers.durationToSeconds(configuration.getTaskStartToCloseTimeout()));
        startWorkflowOptions.setExecutionStartToCloseTimeoutSeconds(FlowHelpers.durationToSeconds(configuration.getExecutionStartToCloseTimeout()));
        dynamicWorkflowClientExternal.setSchedulingOptions(startWorkflowOptions);
        dynamicWorkflowClientExternal.startWorkflowExecution(toArray(arguments));
        
        String newWorkflowId = dynamicWorkflowClientExternal.getWorkflowExecution().getWorkflowId();
        String newRunId = dynamicWorkflowClientExternal.getWorkflowExecution().getRunId();

        return new String[] {newWorkflowId, newRunId};
    }
{code}
githubbot:1468676443:2016-07-16T21:40:43.760+0000:1468676443:2016-07-16T21:40:43.760+0000:GitHub user ssharma opened a pull request:

    https://github.com/apache/camel/pull/1079

    https://issues.apache.org/jira/browse/CAMEL-8598

    The defaults as part of above bug are not used by AWS client before
    starting a workflow

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssharma/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1079.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1079
    
----
commit 9536bf91862324532aea88bf33793720c36e843e
Author: siddharth.sharma <siddharth.sharma@jobvite-inc.com>
Date:   2016-07-16T21:18:52Z

    https://issues.apache.org/jira/browse/CAMEL-8598
    
    The defaults as part of above bug are not used by AWS client before
    starting a workflow

----

sidshar:1468676825:2016-07-16T21:47:05.749+0000:1468676825:2016-07-16T21:47:05.749+0000:https://github.com/apache/camel/pull/1079
githubbot:1468709009:2016-07-17T06:43:29.562+0000:1468709009:2016-07-17T06:43:29.562+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1079
"
0,CAMEL-8597,Bug,Major,2.15.1,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Jakub Kotowski,0,3,2015-04-03 12:00:06+00:00,2015-04-04 18:24:34+00:00,"When indexName and indexType is configured only by endpoint URL then indexType is ignored, resp. it is mistakenly replaced with indexName, see https://github.com/apache/camel/blob/master/components/camel-elasticsearch/src/main/java/org/apache/camel/component/elasticsearch/ElasticsearchProducer.java#L112","githubbot:1428033845:2015-04-03T12:04:05.140+0000:1428033845:2015-04-03T12:04:05.140+0000:GitHub user jkot opened a pull request:

    https://github.com/apache/camel/pull/466

    CAMEL-8597: fix setting of indexType message header

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jkot/camel CAMEL-8597

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/466.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #466
    
----
commit 9d82ada53de68db899b29c1fd853ad37b5770420
Author: Jakub Kotowski <jakub@kotowski.cz>
Date:   2015-04-03T12:00:55Z

    CAMEL-8597: fix setting of indexType message header

----

davsclaus:1428127622:2015-04-04T14:07:02.906+0000:1428127622:2015-04-04T14:07:02.906+0000:Thanks for the PR
githubbot:1428143074:2015-04-04T18:24:34.783+0000:1428143074:2015-04-04T18:24:34.783+0000:Github user jkot closed the pull request at:

    https://github.com/apache/camel/pull/466
"
0,CAMEL-8596,Improvement,Major,2.15.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Mateusz Nowakowski,0,3,2015-04-03 10:48:43+00:00,2015-09-11 08:21:55+00:00,"Could you add
Map<String, Collection<String>> getRequestHeaders() method to 
JettyContentExchange interface?


Context:
In Camel 2.14.x JettyContentExchange was a class extending ContentExchange so that it gives access to ContentExchange methods.


Currently it is an interface and it is impossible to access (without hacking access to private final field.... hell yeah ]:->)  for example in order to access to HTTP request headers...","davsclaus:1428047538:2015-04-03T15:52:18.156+0000:1428047538:2015-04-03T15:52:18.156+0000:You are welcome to work on a patch. Mind that jetty module now has a common module and a jetty8 and jetty9 module so its maybe not super easy to get it working for all of them.
davsclaus:1436408832:2015-07-09T10:27:12.272+0000:1436408832:2015-07-09T10:27:12.272+0000:Contributions is welcome.
jlindstorff:1441840448:2015-09-10T07:14:08.237+0000:1441840448:2015-09-10T07:14:08.237+0000:Attached a patch that extends JettyContentExchange with Map<String, Collection<String>> getRequestHeaders().

Implemented for both jetty8 and jetty9.
davsclaus:1441930915:2015-09-11T08:21:55.979+0000:1441930915:2015-09-11T08:21:55.979+0000:Thanks James for the patch."
0,CAMEL-8595,New Feature,Minor,2.15.0,2.16.0,"

features

",Resolved,Fixed,2.16.0,Willem Jiang,Can Yaman,0,3,2015-04-03 07:55:42+00:00,2015-04-03 08:41:35+00:00,"Json message body support added as a new feature.
on the URI configuration ""..&messageStructure=json""
or on the message header add (SnsConstans.MESSAGE_STRUCTURE,""json"") key-value","canyaman:1428019200:2015-04-03T08:00:00.988+0000:1428019200:2015-04-03T08:00:00.988+0000:https://github.com/apache/camel/pull/460
njiang:1428021238:2015-04-03T08:33:58.584+0000:1428021238:2015-04-03T08:33:58.584+0000:The patch has been merged.
githubbot:1428021695:2015-04-03T08:41:35.295+0000:1428021695:2015-04-03T08:41:35.295+0000:Github user canyaman closed the pull request at:

    https://github.com/apache/camel/pull/460
"
0,CAMEL-8594,Wish,Major,None,None,"
None
",Resolved,Implemented,Future,Unassigned,Jyrki Ruuskanen,3,6,2015-04-03 07:34:55+00:00,2017-02-26 08:18:27+00:00,"To me, ReactiveX and Camel looks like a perfect match. I'm wondering if all Camel routes could in future (Camel 3?) be based on RX?


Camel would bring the components, front-ends and a variety of RX extensions, and routes/pipelines would be built as Observable<Exchange> sequences.


This arrangement could greatly benefit both projects and simplify the Camel codebase as well.","njiang:1428019541:2015-04-03T08:05:41.453+0000:1428019541:2015-04-03T08:05:41.453+0000:Yeah, I have the same thought in my mind, as the Reactive Extension makes the async call composition, error handling quite easy, if camel pipeline can leverage this module, the async engine code could be more easy to read, but I don't know if it support the sync invocation at the same time.
Maybe we can start a new wiki page to collect more thoughts about it, and write some POC code to verify the them.
yuruki:1428056126:2015-04-03T18:15:26.682+0000:1428056126:2015-04-03T18:15:26.682+0000:Right, could the page be under https://cwiki.apache.org/confluence/display/CAMEL/RX?

Proving the concept could start with developing the camel-rx module further to see how far we can go with the current components, and CamelContext and Exchange objects. Then we'll see if RX pipeline could be an option in Camel 2, requires architecture changes which means Camel 3, or is just not feasible.
davsclaus:1436408765:2015-07-09T10:26:05.800+0000:1436408765:2015-07-09T10:26:05.800+0000:Something for the future, eg post Camel 3.0. People should rely on Camel being stable.
davsclaus:1488068307:2017-02-26T08:18:27.939+0000:1488068307:2017-02-26T08:18:27.939+0000:There is a camel-reactive-streams and other tickets about reactive stuff"
0,CAMEL-8563,New Feature,Major,None,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-03-28 06:20:23+00:00,2015-03-28 06:52:28+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-FTP-Component-does-not-support-ACCOUNT-ACCT-in-RFC959-yet-tp5764879.html",
0,CAMEL-8562,Improvement,Major,2.15.0,"2.15.2, 2.16.0","
None
",Resolved,Won't Fix,"2.15.2, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-03-27 11:48:27+00:00,2015-03-31 08:56:34+00:00,"See nabble
http://camel.465427.n5.nabble.com/Route-removal-triggers-endpoint-shutdown-tp5764796.html


We should check if the endpoint may be in use by other routes, just as we do for endpoints within the route itself. And if so avoid stopping it, as its still in use.","davsclaus:1427446646:2015-03-27T16:57:26.058+0000:1427446646:2015-03-27T16:57:26.058+0000:Got a pending fix for this. Also noticed that the endpoint wasn't stopped when a route was removed, so this should fix that too.
davsclaus:1427759926:2015-03-31T07:58:46.611+0000:1427759926:2015-03-31T07:58:46.611+0000:This is causing a side effect in camel-jetty
davsclaus:1427763394:2015-03-31T08:56:34.354+0000:1427763394:2015-03-31T08:56:34.354+0000:Causing side effects. Keep the current behavior."
0,CAMEL-8561,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-27 11:28:30+00:00,2015-12-28 13:08:32+00:00,"The description for components is taken from endpoint javadoc, maven description.


We should improve this so we have better javadoc description for all components. Then its documented in one place.


And then maybe have the description into two



summary
description



Where summary is a one liner sentence to be used for headlines / tables to tell what the component does.


And description is the more in-depth text about the component.","davsclaus:1451208556:2015-12-27T17:29:16.941+0000:1451208556:2015-12-27T17:29:16.941+0000:All the summaries has been updated and ensure they are more correct. 

There is a few that is maybe a bit to long in the text, so we can look at cutting them down to max a tweet size (120-140 chars etc).
davsclaus:1451279306:2015-12-28T13:08:26.254+0000:1451279306:2015-12-28T13:08:26.254+0000:We may want to keep the current name description as the summary, and then we can use 'detail' as the name for more documentation details, which could be the entire class javadoc of the endpoint class.

But lets log a new ticket if that becomes something we would like to include."
0,CAMEL-8560,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Jonathan Anstey,Claus Ibsen,0,2,2015-03-27 10:35:30+00:00,2015-05-08 13:45:50+00:00,"See nabble
http://camel.465427.n5.nabble.com/SortTerm-in-Spring-XML-tp5764866.html


SortTerm is not an enum so we may need to add a type converter fro String -> SortTerm. And then allow sort.XXX in the uri style to setup this easier like you can do wtih search term.",janstey:1431063950:2015-05-08T13:45:50.363+0000:1431063950:2015-05-08T13:45:50.363+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/edabde20
0,CAMEL-8559,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Claus Ibsen,0,4,2015-03-26 21:28:23+00:00,2015-03-30 09:33:41+00:00,"They have released 2.0. We should upgrade to this
https://github.com/jayway/JsonPath","githubbot:1427590804:2015-03-29T09:00:04.442+0000:1427590804:2015-03-29T09:00:04.442+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/449

    CAMEL-8559 Upgrade jsonpath version from 1.2.0 to 2.0.0

    Hi,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8559
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-8559-upgrade-jsonpath-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/449.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #449
    
----
commit c7bc218e5a577829e0f6b1ab5c82d8a8beb50c1e
Author: ancosen <ancosen@gmail.com>
Date:   2015-03-29T08:55:28Z

    Related to Camel-8559. Upgrade jsonpath version from 1.2.0 to 2.0.0

----

acosentino:1427590844:2015-03-29T09:00:44.126+0000:1427590844:2015-03-29T09:00:44.126+0000:PR submitted:
https://github.com/apache/camel/pull/449
njiang:1427648916:2015-03-30T01:08:36.828+0000:1427648916:2015-03-30T01:08:36.828+0000:Merged the patch with thanks to Andrea.
githubbot:1427679221:2015-03-30T09:33:41.373+0000:1427679221:2015-03-30T09:33:41.373+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/449
"
0,CAMEL-8558,Improvement,Major,None,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-03-26 14:07:22+00:00,2015-03-27 11:25:44+00:00,"Each component has a name such as ejb, ftp, jms, mqtt, file etc. But presenting these names to humans,we may want to let the component provide a humainzed text of its name, so we can do 100% correct names.



ejb = EJB
mqtt = MQTT
sap-netweaver = SAP NetWeaver



and so on.","davsclaus:1427377953:2015-03-26T21:52:33.955+0000:1427377953:2015-03-26T21:52:33.955+0000:A sample output from Karaf
{code}
karaf@root> camel-catalog:component-list --verbose
 Title                                   Scheme                 Label                       Maven Coordinate
 -----                                   ------                 -----                       ----------------
 AHC                                     ahc                    http                        org.apache.camel/camel-ahc/2.16-SNAPSHOT
 AHC Websocket                           ahc-ws                 http,websocket              org.apache.camel/camel-ahc-ws/2.16-SNAPSHOT
 AHC Secure Websocket                    ahc-wss                http,websocket              org.apache.camel/camel-ahc-ws/2.16-SNAPSHOT
 AMQP                                    amqp                   messaging                   org.apache.camel/camel-amqp/2.16-SNAPSHOT
 APNS                                    apns                   eventbus,mobile             org.apache.camel/camel-apns/2.16-SNAPSHOT
 Atmos                                   atmos                  file,cloud                  org.apache.camel/camel-atmos/2.16-SNAPSHOT
 Atmosphere Websocket                    atmosphere-websocket   http,websocket              org.apache.camel/camel-atmosphere-websocket/2.16-SNAPSHOT
 Atom                                    atom                   feeds                       org.apache.camel/camel-atom/2.16-SNAPSHOT
 Avro                                    avro                   messaging,transformation    org.apache.camel/camel-avro/2.16-SNAPSHOT
 AWS CloudWatch                          aws-cw                 cloud,monitoring            org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS DynamoDB                            aws-ddb                cloud,database,nosql        org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS S3 Storage Service                  aws-s3                 cloud,file                  org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS SimpleDB                            aws-sdb                cloud,database,nosql        org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS Simple Email Service                aws-ses                cloud,mail                  org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS Simple Notification System          aws-sns                cloud,mobile,messaging      org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS Simple Queue Service                aws-sqs                cloud,messaging             org.apache.camel/camel-aws/2.16-SNAPSHOT
 AWS Simple Workflow                     aws-swf                cloud,workflow              org.apache.camel/camel-aws/2.16-SNAPSHOT
 Bean                                    bean                   core,java                   org.apache.camel/camel-core/2.16-SNAPSHOT
 Bean Validator                          bean-validator         validation                  org.apache.camel/camel-bean-validator/2.16-SNAPSHOT
{code}

.. and the variation with description
{code}
araf@root> camel-catalog:component-list
 Title                                   Description
 ----                                    ----------------
 AHC                                     Defines the Async HTTP Client Component
 AHC Websocket                           Defines the WebSocket Client Component
 AHC Secure Websocket                    Defines the WebSocket Client Component
 AMQP                                    This component supports the AMQP protocol using the Client API of the Apache Qpid project.
 APNS                                    A Camel Apple Push Notification Server Component
 Atmos                                   Camel Atmos support
 Atmosphere Websocket                    Camel Atmosphere WebSocket Servlet
 Atom                                    An Atom Component.
 Avro                                    Camel Avro data format
 AWS CloudWatch                          Defines the AWS CloudWatch Component
 AWS DynamoDB                            Defines the AWS DynamoDB component
 AWS S3 Storage Service                  Defines the AWS S3 Component
 AWS SimpleDB                            Defines the AWS SDB component
 AWS Simple Email Service                Defines the AWS SES component
 AWS Simple Notification System          Defines the AWS SNS Component
 AWS Simple Queue Service                Defines the AWS Component
 AWS Simple Workflow                     Defines the Amazon Simple Workflow Component
 Bean                                    The Bean Component is for invoking Java beans from Camel.
 Bean Validator                          Bean Validator Component for validating Java beans against reference implementation of JSR 303 Validator (Hibernate Vali
 Beanstalk                               Beanstalk Camel component.
{code}
davsclaus:1427377978:2015-03-26T21:52:58.634+0000:1427377978:2015-03-26T21:52:58.634+0000:The first column is the new human readable title.
davsclaus:1427426744:2015-03-27T11:25:44.956+0000:1427426744:2015-03-27T11:25:44.956+0000:We now have this for data formats and languages as well."
0,CAMEL-8557,Bug,Minor,2.12.2,2.16.0,"
None
",Resolved,Cannot Reproduce,2.16.0,Claus Ibsen,Padmanaban,0,2,2015-03-26 13:45:12+00:00,2015-03-28 16:23:36+00:00,"Use Case:
Using Sftp End point to poll remote directory
Set the following attributes in uri
noop=true 
idempotent=true
idempotentRepository=#idemRep


where #idemRep is defined in context xml as below


 <bean id=""idemRep"" class=""org.apache.camel.processor.idempotent.MemoryIdempotentRepository"">
       <property name=""cacheSize"" value=""10""  />
    </bean>


The number of files in the remote directory is more than 10.


In the above scenario, while trying to add 11th entry into the map, the eldest entry is evicted as expected but soon after the eviction the LRUCache.onEviction clears cache, which i am wondering is not the expected behavior of LRU Cache.


This happens because LRUCache.stopOnEviction is always set to true during the LRUCache instantiation which triggers ServiceHelper.stopService on eviction.


 I am trying to understand why we need to reset the cache on eviction.","davsclaus:1427531016:2015-03-28T16:23:36.471+0000:1427531016:2015-03-28T16:23:36.471+0000:Added unit test and it works as expected. The cache is not cleared only the eldest entry.

The stop operation is only for services. But the idempotent repo contains String values for the file names, so the stop dont have any matter.

It must be something else on your end."
0,CAMEL-8556,Bug,Minor,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Thomas Diesler,0,2,2015-03-26 12:56:04+00:00,2015-03-26 14:27:48+00:00,"A package with an uppercase letter like 



org.wildfly.camel.test.core.subA




would be treated as class leading to 



Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:262)
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:130)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:544)","githubbot:1427348588:2015-03-26T13:43:08.949+0000:1427348588:2015-03-26T13:43:08.949+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/446

    [CAMEL-8556] AnnotationTypeConverterLoader treats package as class

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8556

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/446.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #446
    
----
commit f2f46faa82e3491ef86888ef29e2890132a6bb49
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-26T13:41:47Z

    [CAMEL-8556] AnnotationTypeConverterLoader treats package as class

----

githubbot:1427351221:2015-03-26T14:27:01.054+0000:1427351221:2015-03-26T14:27:01.054+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/446
"
0,CAMEL-8555,Improvement,Minor,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,moritz löser,0,2,2015-03-26 09:36:16+00:00,2019-06-12 08:00:31+00:00,"In my application i need to do some stuff before i want camel to start. in a normal camel app you would just call main.run().
The problem on using the camel modules is that they all start the context on ""@PostConstruct"" so as soon as the injector is constructed the context starts.


I would suggest a CamelModule or an option (constructor parameter) to disable this auto start behavior. So with disabled autostart one must call org.apache.camel.guice.Main.run().","davsclaus:1436409153:2015-07-09T10:32:33.624+0000:1436409153:2015-07-09T10:32:33.624+0000:You are welcome to work on a patch for camel-guice. 
davsclaus:1560297631:2019-06-12T08:00:31.083+0000:1560297631:2019-06-12T08:00:31.083+0000:camel-guice is deprecated and removed from camel 3 onwards"
0,CAMEL-8554,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Henryk Konsek,0,3,2015-03-26 07:56:37+00:00,2015-07-31 16:48:13+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,"hekonsek:1427328625:2015-03-26T08:10:25.392+0000:1427328625:2015-03-26T08:10:25.392+0000:Resolved in 2fa60111add917affc161570892efda4a763f56a.
njiang:1427483613:2015-03-28T03:13:33.981+0000:1427483613:2015-03-28T03:13:33.981+0000:As the ObjectMapper could have some trouble to convert the object, we need to catch the exception to let other type converter to do the job.
I just committed a quick patch for fixing the test errors of camel-jetty components.
davsclaus:1427494981:2015-03-28T06:23:01.110+0000:1427494981:2015-03-28T06:23:01.110+0000:We should re-consider whether its a good idea to have this. If there is a lot of misses on the type converter its a performance bottle-neck, and it takes people by surprises.

Always take extra caution when adding a type converter that converts to String because all objects can be converted to a String.
davsclaus:1427495003:2015-03-28T06:23:23.638+0000:1427495003:2015-03-28T06:23:23.638+0000:Do jackson not have any api to check whether the object is even possible to converter?
davsclaus:1427529880:2015-03-28T16:04:40.401+0000:1427529880:2015-03-28T16:04:40.401+0000:I think we should consider removing this. As people who are using jackson, may need to configure it before it can be used for conversion. And the type converter dont support that configuration, it just creates a bare ObjectMapper. That only works for simpler use cases. 

But when people want to configure custom jackson modules, and a ton of other option jackson supports then they fall short. Instead the real data formatter of jackson should be used.

hekonsek:1427536953:2015-03-28T18:02:33.086+0000:1427536953:2015-03-28T18:02:33.086+0000:Sorry for all those duplicated cases. I got a network problems and I wan't aware I create all of them.
hekonsek:1427537410:2015-03-28T18:10:10.795+0000:1427537410:2015-03-28T18:10:10.795+0000:Actually I think that we should keep this converter, but exclude String conversions from its scope. It's really pain in the ass not to have Map => Object POJO fallback converter in Camel. This is really common conversion and believe we should support it.

I propose then to:
- keep the conversion
- exclude some common non-Pojo types from it (String, Number, primitives)
- add option to lookup for the ObjectMapper in the registry, so people can provide their own preconfigured instances

What do you think? 
njiang:1427650728:2015-03-30T01:38:48.249+0000:1427650728:2015-03-30T01:38:48.249+0000:I think it's OK to keep the converter, as the toString convert is last one in the fallback converter, if the camel-jackson cannot convert a map into an object, we just need to avoid converting the try of converting any map into an object.
davsclaus:1427765883:2015-03-31T09:38:03.792+0000:1427765898:2015-03-31T09:38:18.986+0000:The problem was {code}log(""${headers}""){code} that is causing the type converter to convert the map of headers to a String. I am fixing this now.

Yeah the TC should really only be about custom class types, and not objects from the JDK.
And yeah to lookup the object mapper / or jackson data format to use would be better.
hekonsek:1428581782:2015-04-09T20:16:22.898+0000:1428581782:2015-04-09T20:16:22.898+0000:I've added some extra exclusions to the converter (Numbers and primitives). Now I will the option to provide custom mapper via registry.
hekonsek:1428583225:2015-04-09T20:40:25.495+0000:1428583225:2015-04-09T20:40:25.495+0000:Done. I need some docs and we can close this one.
hekonsek:1428616410:2015-04-10T05:53:30.652+0000:1428616410:2015-04-10T05:53:30.652+0000:Done.
davsclaus:1437969489:2015-07-27T11:58:09.913+0000:1437969489:2015-07-27T11:58:09.913+0000:We should remove this as it causes side effects such as CAMEL-9022 and potential others. There is no way to safely convert something to map/list in the ""hopes"" its json.
davsclaus:1437969790:2015-07-27T12:03:10.157+0000:1437969790:2015-07-27T12:03:10.157+0000:CAMEL-9022 can also happen for end user if they convert to a list, such as using bean binding and have 
{code}
public void foo(List myList)
{code}

And call that from a camel bean, then camel-jackson may attempt to do a string -> list as json conversion and fail. And each of these hits cost a performance penalty in case you hide this failure. Which shields the fact a json conversion shouldnt be attempted. 

davsclaus:1437970804:2015-07-27T12:20:04.607+0000:1437970804:2015-07-27T12:20:04.607+0000:Okay we can add a property you need to set on camel context to enable this behavior. Then its off by default. But in some microservice use cases you may want nice jackson pojo list/map converter which is this ticket.
davsclaus:1437971752:2015-07-27T12:35:52.146+0000:1437971752:2015-07-27T12:35:52.146+0000:You must enable this explicit now with
{code}
        // enable jackson type converter by setting this property on CamelContext
        context.getProperties().put(JacksonConstants.ENABLE_TYPE_CONVERTER, ""true"");
{code}
hekonsek:1438332493:2015-07-31T16:48:13.119+0000:1438332493:2015-07-31T16:48:13.119+0000:Thanks Claus!"
0,CAMEL-8553,Improvement,Major,None,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-26 07:53:49+00:00,2015-03-28 16:24:36+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,
0,CAMEL-8552,Improvement,Major,None,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-26 07:52:21+00:00,2015-03-28 16:24:28+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,
0,CAMEL-8551,Improvement,Major,None,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-26 07:51:23+00:00,2015-03-28 16:24:21+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,
0,CAMEL-8550,Improvement,Major,None,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-26 07:50:01+00:00,2015-03-28 16:24:13+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,
0,CAMEL-8549,Improvement,Major,None,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-26 07:48:34+00:00,2015-03-28 16:24:03+00:00,Jackson's ObjectMapper can be used to convert Map to pojo. It would be nice if Jackson component provide this kind of fallback converter then.,
0,CAMEL-8548,Task,Major,None,None,"
None
",Resolved,Fixed,"2.15.1, 2.16.0",Willem Jiang,Freeman Yue Fang,0,1,2015-03-26 07:25:33+00:00,2015-04-02 09:41:01+00:00,No Desc,
0,CAMEL-8547,Bug,Major,2.15.0,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,James Netherton,0,3,2015-03-25 16:17:18+00:00,2015-03-26 11:58:59+00:00,"xmlbeans marshalling and unmarshalling does not respect the ApplicationContextClassLoader
CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/457","githubbot:1427273084:2015-03-25T16:44:44.779+0000:1427273084:2015-03-25T16:44:44.779+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/445

    [CAMEL-8547] Usage of camel-xmlbeans depends on TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-8547

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/445.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #445
    
----
commit dec46867f6d02fa26e14892776b68c33428ec708
Author: James Netherton <jnethert@redhat.com>
Date:   2015-03-25T16:19:16Z

    [CAMEL-8547] Usage of camel-xmlbeans depends on TCCL

----

githubbot:1427330695:2015-03-26T08:44:55.932+0000:1427330695:2015-03-26T08:44:55.932+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/445

njiang:1427342303:2015-03-26T11:58:23.107+0000:1427342339:2015-03-26T11:58:59.147+0000:Applied the patch into camel-2.15.x and camel-2.14.x branch with thanks to James, I also rewrite the patch in camel master branch."
0,CAMEL-8546,Bug,Major,2.14.1,"2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Bart Horré,0,4,2015-03-25 16:07:35+00:00,2015-03-30 12:58:31+00:00,"Unable to start blueprint container for bundle test.xml due to unresolved dependencies [(&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))]
java.util.concurrent.TimeoutException
        at org.apache.aries.blueprint.container.BlueprintContainerImpl$1.run(BlueprintContainerImpl.java:293)[10:org.apache.aries.blueprint:0.3.2]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_17]
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_17]
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_17]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)[:1.7.0_17]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)[:1.7.0_17]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_17]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_17]
        at java.lang.Thread.run(Thread.java:722)[:1.7.0_17] 



This happens when we try to use script with blueprint because blueprint tries to resolve the LanguageResolver with filter language=js. However camel.osgi registered a default LanguageResolver under resolver=default which causes blueprint to wait for ever.","davsclaus:1427271208:2015-03-25T16:13:28.480+0000:1427271208:2015-03-25T16:13:28.480+0000:You need to install the camel-script-javascript feature to install the language
githubbot:1427271223:2015-03-25T16:13:43.559+0000:1427271223:2015-03-25T16:13:43.559+0000:GitHub user barthorre opened a pull request:

    https://github.com/apache/camel/pull/444

    CAMEL-8546: fix script language resolvers

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/barthorre/camel CAMEL-8546

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/444.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #444
    
----
commit d48a2600c1972a55d092224f7bcc64ed0e555703
Author: bart <bart@anova.be>
Date:   2015-03-25T15:59:57Z

    CAMEL-8546: fix script language resolvers

----

barthorre:1427271291:2015-03-25T16:14:51.604+0000:1427271291:2015-03-25T16:14:51.604+0000:created a pull request for master branch at https://github.com/apache/camel/pull/444
barthorre:1427274522:2015-03-25T17:08:42.171+0000:1427274522:2015-03-25T17:08:42.171+0000:I installed the camel-script-javascript feature but could not find a LanguageResolver registered with language=js in the services list.

njiang:1427342424:2015-03-26T12:00:24.964+0000:1427342424:2015-03-26T12:00:24.964+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches with thanks to Bart. I also polish the code to avoid the NPE.
githubbot:1427691511:2015-03-30T12:58:31.706+0000:1427691511:2015-03-30T12:58:31.706+0000:Github user barthorre closed the pull request at:

    https://github.com/apache/camel/pull/444
"
0,CAMEL-8545,Improvement,Major,2.14.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Karl Openet,0,2,2015-03-25 14:00:25+00:00,2015-09-23 09:46:05+00:00,"I use camel as a front end to provide a RESTful API in front of a mix of various web services. Requests come in in either xml or json, and are converted to xml, transformed and sent on to the back end services which only support an RPC style.


I use rest dsl with configuration via spring xml, and it runs in a java process.



  <restConfiguration bindingMode=""auto"" component=""jetty"" host=""localhost"" port=""18910""/>




I would love to use the camel-swagger component to provide a live API document of the Rest API's configured, but it seems that it is not possible without configuring a web.xml file.


Is this feasible? Is there an alternative to document the Rest API the camel context provides?


Camel-context below.



<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:context=""http://www.springframework.org/schema/context""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd"">
                  
  <import resource=""classpath:META-INF/spring/jolokia.xml""/>    
                                                             
  <bean id=""metricsRoutePolicyFactory"" class=""org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory""/>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">

    <properties>
        <property key=""CamelLogDebugBodyStreams"" value=""true""/>
   </properties>
    <propertyPlaceholder location=""classpath:incident.properties,file:target/custom.properties"" id=""properties""/>
    
	<endpoint uri=""jetty:http://localhost:28950/ig?bridgeEndpoint=true"" id=""jsonEndpoint""/>
	<endpoint uri=""cxf:http://localhost:28960/ig?dataFormat=PAYLOAD&amp;wsdlURL=http://localhost:28960/ig?WSDL&amp;loggingFeatureEnabled=true"" id=""soapEndpoint""/>         
	<dataFormats>
    		<xmljson id=""xmljson"" forceTopLevelObject=""true"" removeNamespacePrefixes=""true""/>
    		<xmljson id=""xmljsonWithOptions"" trimSpaces=""true"" skipNamespaces=""true""
             removeNamespacePrefixes=""true""/>
	</dataFormats>
    <restConfiguration bindingMode=""auto"" component=""jetty"" host=""localhost"" port=""18910""/>

  <rest path=""/SubscriberProfilesJson/"" consumes=""application/json"">
    <get uri=""/{SubscriberId}"">
      <to uri=""direct:GetProfileJson""/>
    </get>
    <post uri=""/{SubscriberId}/Subscriptions"" consumes=""application/json"">
      <to uri=""direct:CreateSubscriptionJson""/>
    </post>
    <get uri=""/{SubscriberId}/Subscriptions"" consumes=""application/json"">
      <to uri=""direct:GetSubscriptionsJson""/>
    </get>
  </rest>
  
  <rest path=""/SubscriberProfilesXml/"" consumes=""application/xml"">
    <get uri=""/{SubscriberId}"">
      <to uri=""direct:GetProfile""/>
    </get>
    <get uri=""/{SubscriberId}/Subscriptions"" consumes=""application/xml"">
      <to uri=""direct:GetSubscriptions""/>
    </get>
    <post uri=""/{SubscriberId}/Subscriptions"" consumes=""application/xml"">
      <to uri=""direct:CreateSubscription""/>
    </post>
  </rest>
  
  <rest path=""/SubscriberProfilesJsonConvert/"" consumes=""application/json"">
    <get uri=""/{SubscriberId}/Subscriptions"" consumes=""application/json"">
      <to uri=""direct:GetSubscriptionsJsonConvert""/>
    </get>
  </rest>","davsclaus:1427531273:2015-03-28T16:27:53.150+0000:1427531273:2015-03-28T16:27:53.150+0000:camel-swagger uses a servlet currently.
https://github.com/apache/camel/blob/master/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/DefaultCamelSwaggerServlet.scala

Though we could maybe bridge this with rest-dsl and leverage the chosen component as the transport. So its maybe a matter of adding camel-swagger to the classpath, and somewhere with the rest-dsl enable swagger and configure it.
davsclaus:1442901765:2015-09-22T14:02:45.288+0000:1442901765:2015-09-22T14:02:45.288+0000:I am working on this. I hope I get this implemented so you just add camel-swagger-java and configure an api context path, and you get the swagger api out of the box, using the rest component you have chosen.

karlopenet:1442970182:2015-09-23T09:03:02.231+0000:1442970182:2015-09-23T09:03:02.231+0000:Thanks Claus, 
good news, that will be a great addition for our solutions.

Regards, Karl.
davsclaus:1442972224:2015-09-23T09:37:04.808+0000:1442972224:2015-09-23T09:37:04.808+0000:There is an example how to run this outside servlet contain in a standalone cdi app
https://github.com/apache/camel/tree/master/examples/camel-example-swagger-cdi"
0,CAMEL-8544,Improvement,Major,"2.14.2, 2.15.0","2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-25 03:30:04+00:00,2015-03-25 06:40:06+00:00,Dynamic Router pattern does not contain attribute cacheSize but RecipientList and Routing slip already support it.,"njiang:1427236569:2015-03-25T06:36:09.802+0000:1427236569:2015-03-25T06:36:09.802+0000:Applied the patch into camel master, camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8543,Improvement,Major,"2.12.5, 2.13.4, 2.14.2, 2.15.0","2.14.3, 2.15.1","

camel-salesforce
salesforce

",Closed,Fixed,"2.14.3, 2.15.1",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-03-24 20:55:34+00:00,2015-03-24 22:36:15+00:00,"Camel salesforce component exposes an httpClient property in SalesforceEndpointConfig to provide a custom Jetty HTTP client configured with HTTP proxy settings. But this requires writing a factory bean o simply inject simple properties in the HTTP client. 
The maven plugin does not expose any mechanism to provide a custom HTTP client. 
Both the component and the plugin should expose simple properties to configure:



SSLContextParameters,
HTTP proxy host, port, username and password for proxy-authentication
All other basic properties of Jetty Http client, for e.g. connectTimeout, timeout, removeIdleDestinations, etc.","dhirajsb:1427207761:2015-03-24T22:36:01.328+0000:1427207761:2015-03-24T22:36:01.328+0000:Fix merged in branches:
  camel-2.12.x
  camel-2.13.x
  camel-2.14.x
  camel-2.15.x
  master"
0,CAMEL-8542,Improvement,Major,2.15.0,,"
None
",Resolved,Abandoned,None,Unassigned,Sergey Zhemzhitsky,0,3,2015-03-24 20:18:55+00:00,2022-09-02 09:00:51+00:00,"Here is the conversation


CAMEL-4555 introduced an ability to merge files from within a single directory.
The merge operation is done locally, i.e. by means of creating the whole file on the local file system (that may be space and time consuming in case of multi -gigabyte, -terabyte files). 



It will be more efficient to stream these files directly from hdfs, for example by wrapping them into SequenceInputStream or something like this MapReducePartInputStreamEnumeration
It will be really great if there will be an ability to switch merging on and off by means of an option or parameter.",davsclaus:1436409286:2015-07-09T10:34:46.587+0000:1436409286:2015-07-09T10:34:46.587+0000:You are welcome to work on a patch for this. Not sure how easy it is when in streaming mode.
0,CAMEL-8541,Improvement,Minor,"2.12.5, 2.14.2","2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Claus Ibsen,Alex Savitsky,0,2,2015-03-24 18:55:07+00:00,2015-03-25 06:47:25+00:00,"JUnit4 test support class (org.apache.camel.test.junit4.TestSupport) contains the following declaration:



    // CHECKSTYLE:OFF
    @Rule
    public TestName testName = new TestName();
    // CHECKSTYLE:ON




In addition to being a terrible idea overall, this public field also breaks CDI integration, as any tests attempted to be bootstrapped in CDI will throw the following error (WELD trace is shown for an example):



org.jboss.weld.exceptions.DefinitionException: WELD-000075: Normal scoped managed bean implementation class has a public field:  [EnhancedAnnotatedFieldImpl] @Rule public com.netotc.ha.route.TestCDI.testName
	at org.jboss.weld.bean.ManagedBean.checkBeanImplementation(ManagedBean.java:227)
	at org.jboss.weld.bean.AbstractClassBean.internalInitialize(AbstractClassBean.java:74)
	at org.jboss.weld.bean.ManagedBean.internalInitialize(ManagedBean.java:105)
	at org.jboss.weld.bean.RIBean.initialize(RIBean.java:66)
	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:121)
	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:118)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:60)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:53)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)





Suggesting to create a getter for this field, making the field private, and moving the @Rule annotation to the getter.",davsclaus:1427237245:2015-03-25T06:47:25.578+0000:1427237245:2015-03-25T06:47:25.578+0000:Thanks for reporting.
0,CAMEL-8540,Bug,Minor,2.15.0,"2.15.2, 2.16.0","
None
",Resolved,Fixed,"2.15.2, 2.16.0",Claus Ibsen,Alexey Hanin,0,4,2015-03-24 16:31:34+00:00,2015-03-30 12:39:08+00:00,"S3Consumer sets the maximum number of keys to retrieve from S3 to the value of maxMessagesPerPoll property. According to documentation (http://camel.apache.org/batch-consumer.html), the limit can be disabled by setting the value to negative or zero. In case of S3Consumer, setting the maxMessagesPerPoll URI property will have and effect of always empty result.


S3Consumer.java
listObjectsRequest.setMaxKeys(maxMessagesPerPoll);




The consumer must set key limit only when value of maxMessagesPerPoll is greater than 0.","githubbot:1427603284:2015-03-29T12:28:04.762+0000:1427603284:2015-03-29T12:28:04.762+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/450

    CAMEL 8540 S3Consumer uses maxMessagesPerPoll incorrectly

    Hi,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8540
    
    Thanks,
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-8540-aws-s3-consumer-maxMessagesPerPoll

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/450.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #450
    
----
commit b3a915c026734a8635d1d21308c70938ca7c8ea5
Author: ancosen <ancosen@gmail.com>
Date:   2015-03-29T12:24:57Z

    Fix Camel-8540 S3Consumer uses maxMessagesPerPoll incorrectly

----

acosentino:1427603313:2015-03-29T12:28:33.057+0000:1427603313:2015-03-29T12:28:33.057+0000:PR submitted:
https://github.com/apache/camel/pull/450

Andrea
davsclaus:1427689963:2015-03-30T12:32:43.095+0000:1427689963:2015-03-30T12:32:43.095+0000:Thanks for reporting and the PR
githubbot:1427690348:2015-03-30T12:39:08.141+0000:1427690348:2015-03-30T12:39:08.141+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/450
"
0,CAMEL-8539,Bug,Major,2.15.0,,"
None
",Closed,Duplicate,None,Unassigned,Alexey Hanin,0,5,2015-03-24 16:23:28+00:00,2016-01-28 13:09:28+00:00,"S3Consumer doesn't set marker correctly, when deleteAfterRead is set to false. Therefore, on every subsequent poll, it starts from the beginning of the list.


The reason for that is the following code in S3Consumer:


S3Consumer.java
            if (!getConfiguration().isDeleteAfterRead()) {
                // where marker is track
                marker = listObjects.getMarker();
            }




Accordingly to S3 client documentation, getMarker() return a marker previously set in request. Instead, getNextMarker() shall be used. Although, simply changing it to use getNextMarker() introduces an endless loop iterating over the same set of keys under the prefix, because when reached the end of the key set, getNextMarker() returns null, and on the next poll, the head of the list will be returned, and so on.","davsclaus:1436409361:2015-07-09T10:36:01.054+0000:1436409361:2015-07-09T10:36:01.054+0000:Wonder what kind of solution could be done then? Is there not a api to peek / know if we are at the end?
jlindstorff:1444774676:2015-10-14T06:17:56.396+0000:1444774676:2015-10-14T06:17:56.396+0000:As I understand the AWS S3 client the marker is only for paging through a listObjects result and can not be use for detecting new items in a bucket. I think something like the idempotent option on the file-component is needed to use the S3consumer with deleteAfterRead set to false. There is a isTruncated() method on the objectlisting that indicates if there are more pages in the listing.
jlindstorff:1446000280:2015-10-28T10:44:40.125+0000:1446000280:2015-10-28T10:44:40.125+0000:Attached is a patch that uses isTruncated to detect the end of the object listing.

Note that using the consumer with deleteAfterRead=false only read the files once so the consumer will never detect new files in the bucket.
lb:1453957303:2016-01-28T13:01:43.705+0000:1453957303:2016-01-28T13:01:43.705+0000:Looks like this has been fixed via [CAMEL-8431|https://issues.apache.org/jira/browse/CAMEL-8431]

{code:java}
if (!getConfiguration().isDeleteAfterRead()) {
    // if the marker is truncated, the nextMarker should not be null
    if (listObjects.getNextMarker() != null) {
        marker = listObjects.getNextMarker();
    } else {
        // if there is no marker, the files are consumed, we should not pull it again
        filesConsumed = true;
    }
}
{code}

isn't it ?


davsclaus:1453957603:2016-01-28T13:06:43.285+0000:1453957603:2016-01-28T13:06:43.285+0000:Yeah Luca looks like that. So lets close this ticket."
0,CAMEL-8538,New Feature,Minor,2.16.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Unassigned,Brad Reitmeyer,0,3,2015-03-24 15:43:36+00:00,2015-10-05 16:32:48+00:00,The RabbitMQ component does not support inOut routes like the ActiveMQ and AMQP components do. It needs support for automatically creating a temporaryReplyQueue and properly handling reply timeouts.,"unleashed85:1427183069:2015-03-24T15:44:29.939+0000:1427183069:2015-03-24T15:44:29.939+0000:I plan on working on this soon and contributing it back (unless someone wants to take it)
githubbot:1431543558:2015-05-14T02:59:18.532+0000:1431543558:2015-05-14T02:59:18.532+0000:GitHub user brreitme opened a pull request:

    https://github.com/apache/camel/pull/514

    CAMEL-8538 Add inOut support to the camel-rabbitmq component

    This adds several major features to the camel-rabbitmq component that the camel-jms component has. InOut support that spins up a temporary reply queue that supports timeouts. Serializing / de-serializing objects that implement Serializable. Transfers exceptions that occur in consumers.
    
    Added the following URI options (same usage as camel-jms)
    transferException
    requestTimeout
    requestTimeoutCheckerInterval

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/brreitme/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/514.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #514
    
----
commit b77e1297f2f8371257a36e56c9cfd096720c39ca
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-04-28T18:57:39Z

    CAMEL-8538 Add inOut support to the camel-rabitmq component

commit ea3aae1f1e8b7aaea6e28e8919fe756b225bd578
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-05-05T02:49:33Z

    Code review comments and bug fixes.

commit ee4bf0077ce900dc808a777da37163d97ca67951
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-05-06T20:10:24Z

    More cleanup and tests.

commit 89e5119692fb97bb61e4bf55a7fb6c08d42f0860
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-05-14T01:03:26Z

    Merge remote-tracking branch 'upstream/master'
    
    Conflicts:
    	components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQEndpoint.java

commit 371745e282a426fe315c6fc7388dab357c234cf6
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-05-14T01:40:30Z

    minor fixes

commit 96bc135ae220a1fa027cc5cd4ae05d62bd1eb77a
Author: Brad Reitmeyer <github@bradreitmeyer.com>
Date:   2015-05-14T02:01:21Z

    More minor changes after diffing agaist master.

----

githubbot:1433803963:2015-06-09T06:52:43.057+0000:1433803963:2015-06-09T06:52:43.057+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/514

ceefour:1444033968:2015-10-05T16:32:48.566+0000:1444033968:2015-10-05T16:32:48.566+0000:Thank you [~unleashed85] :)"
0,CAMEL-8537,Improvement,Major,2.15.0,2.16.0,"

patch

",Resolved,Fixed,2.16.0,Claus Ibsen,ayache khettar,0,2,2015-03-24 12:11:54+00:00,2015-03-31 08:09:53+00:00,"Hi


Currently Hazelcast component creates its own HZ instance regardless if a reference to a HZ instance is provided or not. So in the case of a reference of HZ instance is provided, the one created by the component does not get shutdown - see below code snippet, doesn't get shutdown. So one end up with multipole instances.


I believe the component should not create its own instance at the doStart() method. It should first check if a reference to HZ instance is provided, if yes then use it and if not create its own. 


I have made the changes to reflect the correct behaviour described above. The changes will make sure only one instance of HZ is created. Also, added the ability to reference HZ instance by its name.


What remains?

Update the wiki to show how to reference HZ by its name
Update the wiki to show the newly introduced parameter (hazelcastInstanceName)
Update the wiki to ideally show an example of how to publish HZ instance as an OSGI service for reuse by multiple bundles.




Changes made

No longer the component creates its own HZ instance in doStart() method.
When the component is initialised, only one instance is either been created or use the referenced on in the endpoint.
Ability to reference HZ instance by its name. This will serve the use case whereby the hazelcast cluster is running remotely or not part of the camel context.




HazelcastComponent.java
 @Override
    public void doStart() throws Exception {
        super.doStart();
        if (hazelcastInstance == null) {
            createOwnInstance = true;
            hazelcastInstance = createOwnInstance();
        }
    }




I have created a pull request for this, details can be seen here: https://github.com/apache/camel/pull/443","akhettar:1427170533:2015-03-24T12:15:33.259+0000:1427170533:2015-03-24T12:15:33.259+0000:Hi 

I have provided a patch fix for this improvement as a form of a pull request:  https://github.com/apache/camel/pull/443. Once happy with the changes, do let me know. I will be happy to update the camel wiki for this component too.

One may disagree with this improvement in relation to referencing a HZ instance by its name, but certainly the component should not create more than one HZ instance. The cluster capability of HZ makes more sense in the world of multiple JVM or VM.

Thanks

Ayache
davsclaus:1427237651:2015-03-25T06:54:11.975+0000:1427237651:2015-03-25T06:54:11.975+0000:There is unit test errors due NPE with this patch. Do you mind checking what is the problem and update the PR.
davsclaus:1427263375:2015-03-25T14:02:55.080+0000:1427263375:2015-03-25T14:02:55.080+0000:Thanks I am pushing the code changes. Do you want to help update the wiki? 

To do that read here
http://camel.apache.org/how-do-i-edit-the-website.html

It requires signing an ICLA which the link explains about.
akhettar:1427337978:2015-03-26T10:46:18.834+0000:1427337978:2015-03-26T10:46:18.834+0000:Hi Claus

I have signed the ICLA few months back when i introduced the Schematron Component so it should still be valid right? I will update the wiki sometime today.

Ayache
davsclaus:1427338087:2015-03-26T10:48:07.359+0000:1427338087:2015-03-26T10:48:07.359+0000:Yeah sure that is valid forever. So you are very welcome to edit any time you want
akhettar:1427410500:2015-03-27T06:55:00.309+0000:1427410500:2015-03-27T06:55:00.309+0000:Hi Claus

I have updated the wiki. For the new parameter (hazelcastInstanceName) said it's going to be available in camel 2.16 (not sure if it will end up in the previous version, I believe it should). I have also included samples how to use hazelcast reference by its name, the actual instance and as an OSGI service.

Ayache
davsclaus:1427760593:2015-03-31T08:09:53.200+0000:1427760593:2015-03-31T08:09:53.200+0000:Thanks for updating the docs"
0,CAMEL-8536,Improvement,Major,None,"2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-24 06:40:28+00:00,2015-03-24 06:48:13+00:00,"Current ServiceMix JCR API 2.0 bundle 2.4 is not generated right. AS the JCR API bundle is already OSGi bundle, we should use it directly.


BTW, I checked the code of camel-jcr, the user need to setup the Repository directly to the JCR endpoint, so we don't need to leverage the service locator lookup feature that servicemix spec provides.","njiang:1427150893:2015-03-24T06:48:13.511+0000:1427150893:2015-03-24T06:48:13.511+0000:Applied the patch camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8535,Bug,Major,2.15.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Sandeep Poreddy,0,3,2015-03-23 21:04:42+00:00,2015-05-15 12:49:25+00:00,"Refer to the issue at :


http://camel.465427.n5.nabble.com/Camel-Restlet-2-15-0-setting-up-SSL-td5764552.html","nkukhar:1431639566:2015-05-15T05:39:26.502+0000:1431639566:2015-05-15T05:39:26.502+0000:I think we can close this bug, an it's not related to camel itself. And also looks like camel is now using restlet version 2.3.1 so this should not be an issue for 2.15.0 < 
hekonsek:1431665365:2015-05-15T12:49:25.565+0000:1431665365:2015-05-15T12:49:25.565+0000:Closing then. Feel free to reopen it if needed.

Laters!"
0,CAMEL-8534,New Feature,Minor,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Scott Stults,0,1,2015-03-23 15:41:32+00:00,2022-09-02 09:00:36+00:00,"Apache ManifoldCF has access to quite a number of document repositories, and maps these to several search engines. Rather than duplicate the actual integration code, it would be useful if Camel could provide access to MCF's Consumer and Producer equivalents. These are exposed in MCF via REST API and should be fairly easy to map to a Camel component.",
0,CAMEL-8533,Task,Minor,None,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Thomas Diesler,0,4,2015-03-23 12:08:12+00:00,2015-03-25 10:12:14+00:00,No Desc,"githubbot:1427088257:2015-03-23T13:24:17.848+0000:1427088257:2015-03-23T13:24:17.848+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/442

    [CAMEL-8533] camel-ognl exposes servicemix ognl bundle

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8533

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/442.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #442
    
----
commit fdc45ad77a01726737b76295a7598c4caa61905c
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-23T13:20:54Z

    [CAMEL-8533] camel-ognl exposes servicemix ognl bundle

----

githubbot:1427089191:2015-03-23T13:39:51.872+0000:1427089191:2015-03-23T13:39:51.872+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/442

antoine.dessaigne:1427100215:2015-03-23T16:43:35.765+0000:1427100215:2015-03-23T16:43:35.765+0000:Hi,

Changing this dependency will make {{camel-ognl}} unable to work in an OSGi environment.

Thomas, can you explain why you need the original version and not the repackaged one by ServiceMix ?

Thanks
davsclaus:1427100664:2015-03-23T16:51:04.962+0000:1427100664:2015-03-23T16:51:04.962+0000:It works fine in OSGi.

The karaf features are using the SMX ognl bundle. Just like all the other features does.
antoine.dessaigne:1427101240:2015-03-23T17:00:40.242+0000:1427101240:2015-03-23T17:00:40.242+0000:Yes, but you can use camel in an OSGi platform without karaf.

In that case, since the {{ognl}} jar has no OSGi metadata, it won't work. You will need to do the following in your {{pom.xml}}
{code:xml}
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-ognl</artifactId>
            <version>${camel.version}</version>
            <exclusions>
                <!-- Not an OSGi bundle, see OSGified version below -->
                <exclusion>
                    <groupId>ognl</groupId>
                    <artifactId>ognl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.servicemix.bundles</groupId>
            <artifactId>org.apache.servicemix.bundles.ognl</artifactId>
            <version>3.0.8_1</version>
        </dependency>
{code}

Thus, I was wondering why it's not possible to directly use the repackaged version ?
tdiesler:1427249534:2015-03-25T10:12:14.541+0000:1427249534:2015-03-25T10:12:14.541+0000:We must not confuse compile/build time with runtime dependencies. At build time camel-ognl has dependencies on plain ognl, which in any execution environment except OSGi also become runtime dependencies. So in flat classpath env but also in a modular env camel-ognl must see the types from ognl.

In an OSGi environment there must be a bundle deployed that exports ognl types (i.e. the smx ognl bundle). The maven compile time dependency from camel-ognl to ognl does not mean (and should not cause) ognl to be deployed as a bundle. Whatever configures the OSGi runtime must deploy both the camel-ognl bundle and a bundle for ognl itself. This should however not leak into non-osgi environments.

The SMX OGNL bundle is OSGi specific and should not leak into non-osgi environments only because camel-ognl declares a maven compile time dependency on it."
0,CAMEL-8532,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.15.2, 2.16.0",Henryk Konsek,Henryk Konsek,0,2,2015-03-23 10:04:00+00:00,2015-04-16 07:13:50+00:00,"Bootified Camel routers are supposed to block the main thread of the application, so even for the empty router folks should be able to just execute `java -jar myapp.jar` and the application will wait for the Ctrl+C.","hekonsek:1427076383:2015-03-23T10:06:23.923+0000:1427076383:2015-03-23T10:06:23.923+0000:Resolved in 472903bf2dc069b7cd47dcdbfa957603092c282e. Now {{FatJarRouter}} blocks the main thread by default, while for non-{{FatJarRouter}} folks can use the following bean:

{code}
    public static void main(String... args) {
        ApplicationContext applicationContext = new SpringApplication(MyApp.class).run(args);
        CamelSpringBootApplicationController applicationController =
                applicationContext.getBean(CamelSpringBootApplicationController.class);
        applicationController.blockMainThread();
    }
{code}
ccampo:1429083434:2015-04-15T15:37:14.176+0000:1429083460:2015-04-15T15:37:40.700+0000:Would it be possible for this to be released in 2.15.2? Without this fix, the Spring Boot component is effectively unusable.

See: http://camel.465427.n5.nabble.com/Spring-Boot-component-is-missing-CamelSpringBootApplicationController-td5765405.html
hekonsek:1429096384:2015-04-15T19:13:04.823+0000:1429096384:2015-04-15T19:13:04.823+0000:Hi,

Just add spring-boot-starter-web to your project. It will block the main thread. Or camel-boot-starter-remote-shell. I didn't backported CAMEL-8532 because it is as easy to block the main thread. I personally always add spring-boot-starter-web to the app to have a Jolokia endpoint exposed. 

I hope that resolves the issue. :)

Cheers.
ccampo:1429098680:2015-04-15T19:51:20.740+0000:1429098680:2015-04-15T19:51:20.740+0000:That's an interesting solution, but in production, I want neither of those dependencies, especially the web portion. The workaround for now is just to apply your fix manually my self.
hekonsek:1429100715:2015-04-15T20:25:15.588+0000:1429100715:2015-04-15T20:25:15.588+0000:It this concerns you, then I can backport my fix to the Camel 2.15.2 :) I will do it tomorrow.
ccampo:1429100811:2015-04-15T20:26:51.265+0000:1429100811:2015-04-15T20:26:51.265+0000:Awesome, thanks :)
hekonsek:1429139609:2015-04-16T07:13:29.135+0000:1429139609:2015-04-16T07:13:29.135+0000:Backported to 2.15.2 in commit ff554c053f9532d57037066564c029f8a6747c0d. Enjoy :) ."
0,CAMEL-8531,New Feature,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-23 09:44:01+00:00,2015-03-24 07:30:38+00:00,"As we primary have the performance stats and whatnot in JMX MBeans that are registered in the mbean server, end users would need to use the clunky JMX API to lookup the mbean for a process id.


From Java code, you may just want to easily grab the mbean. 


For example:



ManagedAggregateProcessorMBean mbean = context.getManagedProcessor(""myAggregator"", ManagedAggregateProcessorMBean.class);




Then you have from java code, all the power of the mbean to get any kind of statistics you want, just like from JMX.",davsclaus:1427153438:2015-03-24T07:30:38.550+0000:1427153438:2015-03-24T07:30:38.550+0000:There is also api to get the route mbean - which are the most common to use
0,CAMEL-8530,Bug,Major,2.15.0,None,"
None
",Resolved,Fixed,"2.15.1, 2.16.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2015-03-23 05:38:44+00:00,2015-03-23 06:03:07+00:00,No Desc,"ffang:1427060563:2015-03-23T05:42:43.041+0000:1427061108:2015-03-23T05:51:48.161+0000:get exception like
{code}
Caused by: java.lang.Exception: Unable to install bundle mvn:org.eclipse.mylyn.github/org.eclipse.egit.github.core/2.1.5
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:45)
	... 18 more
Caused by: org.osgi.framework.BundleException: Could not create bundle object.
	at org.apache.felix.framework.Felix.installBundle(Felix.java:2960)
	at org.apache.felix.framework.BundleContextImpl.installBundle(BundleContextImpl.java:165)
	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:43)
	... 18 more
Caused by: java.lang.IllegalArgumentException: Unable to parse header: com.google.gson;version=""[1.6.0,2.2.0]"",com.google.gson.annotations;version=""[1.6.0,2.2.0]"",com.google.gson.reflect;version=""[1.6.0,2.2.0]"",com.google.gson.stream;version=""[1.6.0,2.2.0]
	at org.apache.felix.framework.util.manifestparser.ManifestParser.parseStandardHeader(ManifestParser.java:1926)
	at org.apache.felix.framework.util.manifestparser.ManifestParser.<init>(ManifestParser.java:179)
	at org.apache.felix.framework.BundleRevisionImpl.<init>(BundleRevisionImpl.java:121)
	at org.apache.felix.framework.BundleImpl.createRevision(BundleImpl.java:1243)
	at org.apache.felix.framework.BundleImpl.<init>(BundleImpl.java:112)
	at org.apache.felix.framework.Felix.installBundle(Felix.java:2907)
	... 20 more

{code}


This is caused by that the OSGi header for org.eclipse.mylyn.github/org.eclipse.egit.github.core/2.1.5 isn't correct, the 
{code}
Import-Package: com.google.gson;version=""[1.6.0,2.2.0]"",com.google.gso
 n.annotations;version=""[1.6.0,2.2.0]"",com.google.gson.reflect;version
 =""[1.6.0,2.2.0]"",com.google.gson.stream;version=""[1.6.0,2.2.0]
{code}
miss a ""\"""" at the end of the line

need use the smx wrapped one(SMX4-1857)
ffang:1427061787:2015-03-23T06:03:07.907+0000:1427061787:2015-03-23T06:03:07.907+0000:commit fix
https://git1-us-west.apache.org/repos/asf?p=camel.git;a=commit;h=13caf518 for master
http://git-wip-us.apache.org/repos/asf/camel/commit/4a4cdcfa for camel-2.15.x branch"
0,CAMEL-8529,Improvement,Minor,2.15.0,,"
None
",Resolved,Won't Fix,None,Unassigned,gui,0,5,2015-03-22 19:34:40+00:00,2019-07-31 09:09:30+00:00,"When a script is compiled (eg in case of js), the scriptbuilder is (re) creating a new engine instance on every invocation, although the compiled script has already an engine attached. 
This cause a lot of unnecessary engine initialization on every invocation.","janssk1:1427024285:2015-03-22T19:38:05.201+0000:1427024285:2015-03-22T19:38:05.201+0000:Patch that optimizes engine creation
njiang:1427136977:2015-03-24T02:56:17.463+0000:1427136977:2015-03-24T02:56:17.463+0000:We hit some concurrent issue when using the same ScriptEngine in different thread :(.
We may need to find other way to improve the performance of ScriptBuilder.

janssk1:1427175271:2015-03-24T13:34:31.431+0000:1427175271:2015-03-24T13:34:31.431+0000:Rhino engine claims to support it. Maybe you could add a property that allow the user to opt-in for scriptengine reuse. Preventing it because some engine has an issue with reuse is safe, but slow
onders:1497246654:2017-06-12T13:50:54.530+0000:1497246654:2017-06-12T13:50:54.530+0000:Hi, any update required for this issue? This issue is addressed for very old version. Still any requirement?
snurmine:1497260728:2017-06-12T17:45:28.791+0000:1497263029:2017-06-12T18:23:49.342+0000:There seems to be camel context property REUSE_SCRIPT_ENGINE used in  org.apache.camel.builder.script.ScriptBuilder which seems to be undocumented? Maybe it could be exposed somehow, for example same way as ""cacheScript"" option in the language component eg. reuseScriptEngine true/false. At least in my machine javascript didn't have any concurrence issues with simple test copied from RubyScriptTextTest. Or maybe a little pool of script engines.
davsclaus:1564535370:2019-07-31T09:09:30.479+0000:1564535370:2019-07-31T09:09:30.479+0000:camel-script is deprecated and removed in camel 3"
0,CAMEL-8528,Improvement,Major,2.15.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-22 10:52:50+00:00,2015-09-28 11:06:02+00:00,"For example having



                rest(""book"").produces(""application/json"")
                    .get(""/order/{id}"")
                        .to(""bean:bookService?method=getOrder"");




You may want this rest service to return application/json as the content-type header.


We should have an option that control what behavior to use



always use
use if no existing header
off","davsclaus:1426993472:2015-03-22T11:04:32.265+0000:1426993472:2015-03-22T11:04:32.265+0000:Notice this is only applicable when you have binding auto, and no json/xml on the classpath for actual pojo bindings.

davsclaus:1443409562:2015-09-28T11:06:02.516+0000:1443409562:2015-09-28T11:06:02.516+0000:We now fallback and use produces as content-type if not already set. Also if binding is off."
0,CAMEL-8527,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-22 07:15:49+00:00,2015-03-22 08:12:51+00:00,"When the routes are created based on the model, the processors do not include information from which model it was created. We should introduce IdAware so we can inject the id, and then allow the processor to find its model etc.",
0,CAMEL-8526,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-21 09:54:37+00:00,2015-07-24 17:01:45+00:00,"Like CAMEL-8525 we should have more ManagedXXXMBean that include statics about the given EIP. 


This allows end users to gain even more insight to the various EIPs and how the operate at runtime.


The filter EIP can have



number of messages filtered
number of messages not filtered



The CBR could have a break down per predicate which matched


The resequencer could have a statics with which id is currently missing, and the likes


The throttler could have statics about number of messages hold back being throttled currently, and time until next timeslot opens, and so forth


The delayer similar to the throttler, eg number of messages hold back being delated, and time left in the timeslot


The idempotent consumer could have statics about how many idempotent messages arrived, and number of keys in the repo and so forth.",
0,CAMEL-8525,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-21 09:07:04+00:00,2015-03-22 08:13:32+00:00,"We should capture statistics in the aggregator so we can see number of completed exchanges by completion type



size
timeout
forced



And other relevant stats.",
0,CAMEL-8524,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2015-03-21 06:38:20+00:00,2015-07-09 10:37:56+00:00,"By convention we have assumed that the properties component should be named properties.


But we should allow to use a custom name, so they can configure a name of their choosing.",
0,CAMEL-8523,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-20 15:41:18+00:00,2015-03-20 15:48:04+00:00,"It will be nice if Spring Boot can automatically pick up XML routes from the classpath (for example from the /camel/*.xml path).


That would work really nice with the Camel tooling like JBoss Tooling Eclipse plugin - you could just create new XML routes file in the project, edit it using Eclipse and run the application using mvn spring-boot:run.",hekonsek:1426837670:2015-03-20T15:47:50.884+0000:1426837684:2015-03-20T15:48:04.387+0000:Resolved in 2b6bf5f8ca0c509b565a36c98e3e63219b77b7f0.
0,CAMEL-8522,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Susan Javurek,0,2,2015-03-20 13:41:50+00:00,2016-02-20 09:26:42+00:00,"Can we consider setting OriginalDestination property on the ActiveMQMessage when sending it to the DLQ in Camel?
That would be useful for tools like Hawt.io or FMC. For example FMC relies on the OriginalDestination to provide ""retry"" functionality. Currently Camel doesn't set OriginalDestination, so we can't retry the delivery of the AMQ messages from Camel DLQ.","davsclaus:1428222984:2015-04-05T16:36:24.624+0000:1428222984:2015-04-05T16:36:24.624+0000:This may require a change in activemq-camel in Apache AMQ instead where we can have additional logic when creating the JMS message to send to the DLQ. Then it could detect that the original message is a JMS message from AMQ and grab the original destination if exists.

Otherwise we would need to rely on reflection which we dont want the overhead off using.
davsclaus:1430889019:2015-05-06T13:10:19.416+0000:1430889019:2015-05-06T13:10:19.416+0000:There is an unit test with example how this can be done
org.apache.camel.component.jms.ActiveMQOriginalDestinationTest

But to have it out of the box would require ActiveMQ 5.12 with Camel 2.16 onwards are in use.
davsclaus:1455931590:2016-02-20T09:26:30.249+0000:1455931590:2016-02-20T09:26:30.249+0000:The implementation will be out of the box in ActiveMQ 5.14 onwards. For using ActiveMQ 5.13 or older, there is a custom strategy you can use yourself in the unit test: org.apache.camel.component.jms.ActiveMQOriginalDestinationTest"
0,CAMEL-8521,Bug,Major,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-03-20 07:00:34+00:00,2015-03-20 07:02:43+00:00,Due CAMEL-8338],
0,CAMEL-8520,Bug,Major,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Ben Harris,0,2,2015-03-20 00:38:17+00:00,2015-03-20 06:52:48+00:00,"Camel XMPP doesn't use a DNS resolver to look at SRV records, whereas in 2.14.1 it did.


In 2.15.0, ConnectionConfiguration calls DNSUtil.resolveXMPPDomain(serviceName) which runs this code:


DNSUtil.java
public static List<HostAddress> resolveXMPPDomain(final String domain) {
        if (dnsResolver == null) {
            List<HostAddress> addresses = new ArrayList<HostAddress>(1);
            addresses.add(new HostAddress(domain, 5222));
            return addresses;
        }
        return resolveDomain(domain, 'c');
    }




dnsResolver is never initialised, so it returns the service name, in my case 'jabberzac.org', instead of the actual XMPP server from the SRV Record, 'xmpp.jabberzac.org', which then causes a timeout.


The dnsResolver is meant to be instantiated in init(), which is meant to be called by SmackConfiguration, but never is.


DNSUtil.java
    /**
     * Initializes DNSUtil. This method is automatically called by SmackConfiguration, you don't
     * have to call it manually.
     */
    public static void init() {
        final String[] RESOLVERS = new String[] { ""javax.JavaxResolver"", ""minidns.MiniDnsResolver"",
                        ""dnsjava.DNSJavaResolver"" };
        for (String resolver :RESOLVERS) {
            DNSResolver availableResolver = null;
            String resolverFull = ""org.jivesoftware.smack.util.dns"" + resolver;
            try {
                Class<?> resolverClass = Class.forName(resolverFull);
                Method getInstanceMethod = resolverClass.getMethod(""getInstance"");
                availableResolver = (DNSResolver) getInstanceMethod.invoke(null);
                if (availableResolver != null) {
                    setDNSResolver(availableResolver);
                    break;
                }
            }
            catch (ClassNotFoundException|NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {
                LOGGER.log(Level.FINE, ""Exception on init"", e);
            }
        }
    }




2.14.1 doesn't seem to have this problem as DNSUtil class in 2.14.1 doesn't have an init() function which is meant to be 'automatically called', it just has a static code block:



    static {
        try {
            Hashtable env = new Hashtable();
            env.put(""java.naming.factory.initial"", ""com.sun.jndi.dns.DnsContextFactory"");
            context = new InitialDirContext(env);
        }
        catch (Exception e) {
            // Ignore.
        }
    }","davsclaus:1426804287:2015-03-20T06:31:27.607+0000:1426804287:2015-03-20T06:31:27.607+0000:I dont think its a Camel problem. The init code is called when I run an unit test. But it seems those DNS classes that it attempts to load are not in the classpath. So you may need to add some JARs to include the resolver classes.
davsclaus:1426804352:2015-03-20T06:32:32.126+0000:1426804352:2015-03-20T06:32:32.126+0000:Now using static code blocks and static configuration classes as how smack is done is of course a very bad idea - but that is how they decided to code their library - nothing we can do here.
bharris:1426804571:2015-03-20T06:36:11.548+0000:1426804571:2015-03-20T06:36:11.548+0000:If they are in {{org.jivesoftware.smack.util.dns}} shouldn't they be part of camel-xmpp's smack dependencies?

see: https://www.igniterealtime.org/builds/smack/docs/latest/javadoc/org/jivesoftware/smack/util/dns/dnsjava/DNSJavaResolver.html
davsclaus:1426804581:2015-03-20T06:36:21.170+0000:1426804593:2015-03-20T06:36:33.621+0000:And they have a bug in the code loading the resolvers

This is the resolved name in the java code:
{code}
org.jivesoftware.smack.util.dnsdnsjava.DNSJavaResolver
{code}

Notice the a dot is missing
{code}
org.jivesoftware.smack.util.dns.dnsjava.DNSJavaResolver
{code}
bharris:1426804697:2015-03-20T06:38:17.142+0000:1426804697:2015-03-20T06:38:17.142+0000:Right. Over to Smack then...
davsclaus:1426804712:2015-03-20T06:38:32.603+0000:1426804712:2015-03-20T06:38:32.603+0000:Ah which seems to be fixed in 4.0.7
davsclaus:1426805108:2015-03-20T06:45:08.488+0000:1426805108:2015-03-20T06:45:08.488+0000:You need to add the DNS dependency you want - they have 3 different implementations.
davsclaus:1426805568:2015-03-20T06:52:48.872+0000:1426805568:2015-03-20T06:52:48.872+0000:Upgraded to 4.0.7"
0,CAMEL-8519,Bug,Major,"2.13.4, 2.14.2, 2.15.0","2.14.3, 2.15.1","
None
",Closed,Fixed,"2.14.3, 2.15.1",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-03-19 23:32:57+00:00,2015-03-20 21:41:00+00:00,"The security listener incorrectly adds a copy of the auth header for streaming api client. Although this causes the exchange to ultimately fail, the BayeuxClient reconnects and proceeds without raising errors in Camel route. However, this ends up logging multiple warnings from the security listener and the BayeuxClient. 
Fixing the security listener to reset the auth header will optimize this process and let the BayeuxClient continue with the existing exchange.","dhirajsb:1426858860:2015-03-20T21:41:00.358+0000:1426858860:2015-03-20T21:41:00.358+0000:Fix merged to branches
 master
 camel-2.12.x
 camel-2.13.x
 camel-2.14.x
 camel-2.15.x
"
0,CAMEL-8518,Bug,Major,2.14.1,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Edward Welch,0,2,2015-03-19 21:55:59+00:00,2015-04-30 06:17:12+00:00,"I'm using camel as an HTTP proxy server for Kibana, when creating a new index in kibana, it uses a url that contains square braces:


http://localhost:5601/elasticsearch/.kibana/index-pattern/[logstash-]YYYY.MM.DD


This leads to a java.net.URISyntaxException in the HttpHelper class createURI method, on the first line where it tries to instantiate a URI.


I believe this may easily be fixed by adding square braces to the list of chars which need encoding in the UnsafeUriCharactersEncoder.encodeHttpURI method.  This method is being called on line 215 of the HttpHelper class earlier in the processing.


Adding '[' and ']' to the static unsafeCharactersHttp initializer should cause those characters to be encoded and prevent this exception.


I see there is an unsafeCharactersRfc1738 set, which includes square braces, perhaps this could be used instead? I'm not sure the reason there are separate characters lists in this class.


Thanks,
Ed","njiang:1429673832:2015-04-22T11:37:12.590+0000:1429673832:2015-04-22T11:37:12.590+0000:Hi Ed,
The '[' and ']' are removed from Http endpoint due to CAMEL-6914 for supporting the IPV6.
So I just have a quick question for you.
What's your proxy camel route looks like? 
I think you may need to encod the uri path yourself to avoid the  java.net.URISyntaxException.
"
0,CAMEL-8517,Improvement,Minor,"2.13.4, 2.14.2, 2.15.0","2.14.3, 2.15.1","

camel-salesforce
salesforce

",Closed,Fixed,"2.14.3, 2.15.1",Unassigned,Dhiraj Sureshkumar Bokde,0,1,2015-03-19 15:23:40+00:00,2015-03-20 21:40:10+00:00,"The fields accessToken and instanceUrl in class SalesforceSession could be modified in another thread that does a session refresh, hence they must be declared volatile to synchronize access.","dhirajsb:1426858810:2015-03-20T21:40:10.950+0000:1426858810:2015-03-20T21:40:10.950+0000:Fix merged to branches
 master
 camel-2.12.x
 camel-2.13.x
 camel-2.14.x
 camel-2.15.x
"
0,CAMEL-8516,Improvement,Minor,"2.13.4, 2.14.2, 2.15.0","2.14.3, 2.15.1","

camel-salesforce
salesforce

",Closed,Fixed,"2.14.3, 2.15.1",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-03-19 15:08:51+00:00,2015-03-20 21:40:00+00:00,"Salesforce returns a list of matching records for non-unique external id with a status code 300. The component looks for List<RestError> by default, which causes a parse exception for 300. 
The error handling code should check for an empty response body and use the status line as the exception message if its missing or empty.","dhirajsb:1426858800:2015-03-20T21:40:00.262+0000:1426858800:2015-03-20T21:40:00.262+0000:Fix merged to branches
 master
 camel-2.12.x
 camel-2.13.x
 camel-2.14.x
 camel-2.15.x
"
0,CAMEL-8515,Bug,Major,"2.14.2, 2.15.0","2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Claus Ibsen,Claus Ibsen,0,1,2015-03-19 14:44:22+00:00,2015-03-19 14:45:58+00:00,"For example if crypto dataformat cannot load some class and throw 



Caused by: java.lang.NoClassDefFoundError: javax/crypto/CipherOutputStream
        at org.apache.camel.converter.crypto.CryptoDataFormat.marshal(CryptoDataFormat.java:131)
        at org.apache.camel.processor.MarshalProcessor.process(MarshalProcessor.java:81)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)




We should detect and handle that in marshaller / unmarshaller like the rest of the routing engine does.",
0,CAMEL-8514,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Raúl Kripalani,Thomas Diesler,0,3,2015-03-19 11:12:04+00:00,2015-03-19 14:18:10+00:00,The camel-castor component should depend on plain castor-xml instead of an aggregate bundle from servicemix,"githubbot:1426734840:2015-03-19T11:14:00.986+0000:1426734840:2015-03-19T11:14:00.986+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/441

    [CAMEL-8514] Update to castor-1.3.3

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8514

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/441.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #441
    
----
commit 0257063e23813113615f18340a5dbcf651dbe18a
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-19T11:12:57Z

    [CAMEL-8514] Update to castor-1.3.3

----

raulvk:1426735793:2015-03-19T11:29:53.699+0000:1426735793:2015-03-19T11:29:53.699+0000:Hello,

This data format should have been depending on Castor 1.3.2, not on the SMX bundle for Castor 1.3.2. You are right.

However, the problem is that vanilla Castor is not OSGi-ready. Upgrading to Castor 1.3.3 without a corresponding OSGi-bundle from the SMX community effectively creates a version fork.

The problem is that the camel-castor unit tests would run against vanilla Castor 1.3.3 whereas OSGi users would be using a lower version. This leaves the community in a brittle position, as it makes it relatively easy to introduce new features that are not backward compatible without anyone realising – because no test would report it.

Therefore I can see two solutions:
* Contribute an upgraded OSGi bundle to the SMX community (quite a simple task) – but then we have to wait for their next bundles release so we can use it.
* Create 2 JUnit executions for this component: one against the OSGi bundle, one against the latest vanilla Castor library.

Ideas?

Regards,
Raúl.
tdiesler:1426737178:2015-03-19T11:52:58.812+0000:1426737178:2015-03-19T11:52:58.812+0000:Yes, I noticed that. However, OSGi is one of potentially many clients. OSGi itself is a declining technology, which will become even more marginalised when JDK modularity enters the scene. 

The non-existence of a castor-1.3.3 bundle should IMHO not prevent Camel to move forward and upgrade the castor library. The OSGi community  may want to provide a castor-1.3.3 bundle, which Camel can then integrate in its Karaf feature definition. There may however never be a call for a castor-1.3.3 bundle.

For the WildFly Camel integration, it would AFAICS also work to stick with castor-1.3.2 and only fix the dependency from camel-castor to (non-osgi) castor-xml 
raulvk:1426737812:2015-03-19T12:03:32.311+0000:1426737812:2015-03-19T12:03:32.311+0000:Hi Thomas,

For me it would be ok to have this component depend on the latest release of castor-xml as long as we also have a JUnit execution against the latest OSGi-fied bundle. That would serve us as a regression test.

Do you have experience with multiple JUnit executions with different dependencies by any chance?

Regards,
Raúl.
tdiesler:1426742743:2015-03-19T13:25:43.373+0000:1426743915:2015-03-19T13:45:15.237+0000:I changed to castor-1.3.2 to avoid the OSGi hassle.

Don't really understand your OSGi rational here. We test that the camel-castor component works correctly with the castor-x.y.z codebase. To test OSGi functionality, you would need to run both in an OSGi framework. In other words, running a plain JUnit test in camel-castor with a dependency on a castor bundle, does by no means verify that this combination works in an OSGi environment.

raulvk:1426744216:2015-03-19T13:50:16.199+0000:1426744216:2015-03-19T13:50:16.199+0000:No, the goal is not to test the OSGi deployment (for that we have the itest). The goal is to test whether the component presents no regressions when tested against the latest OSGi bundle, e.g. if we upgrade the component to castor-xml 1.3.3 but the latest OSGi bundle continues to be for castor-xml 1.3.2, I want to guarantee zero regressions by running the unit tests against castor-xml 1.3.2 also (bundle dependency).
tdiesler:1426744549:2015-03-19T13:55:49.324+0000:1426744549:2015-03-19T13:55:49.324+0000:I see, you mean if there are code changes in camel-castor that work with castor-1.3.3, but not with the castor-bundle-1.3.2.
The PR now uses a dependency on castor-xml-1.3.2 - the version disconnect is gone.  
raulvk:1426744897:2015-03-19T14:01:37.434+0000:1426744897:2015-03-19T14:01:37.434+0000:Yeah, although in practice it wouldn't be necessary for this particular upgrade. After all, if Castor is doing sane versioning, a micro version upgrade shouldn't break anything. But I could foresee a possible upgrade to Castor 2.0, and then we could've really had a problem.

In fact, my idea was aimed to pave the way for further upgrades in Castor in case the SMX community was not interested/active enough to keep up with the update rhythm of the upstream projects (and to benefit any other components which are, or can be, in a similar situation).
githubbot:1426745361:2015-03-19T14:09:21.456+0000:1426745361:2015-03-19T14:09:21.456+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/441
"
0,CAMEL-8483,Improvement,Minor,2.15.0,"2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Raúl Kripalani,Jörg Peschke,0,2,2015-03-13 14:53:49+00:00,2015-03-13 17:36:45+00:00,"When creating a MongoDB Consumer endpoint with the ""readPreference"" option specified, an exception will be thrown (operation, writeConcern, writeConcernRef, readPreference, dynamicity, invokeGetLastError options cannot appear on a consumer endpoint).


This should be changed so it is possible to define a readPreference for MongoDB consumers.


See also: http://camel.465427.n5.nabble.com/MongoDB-Consumer-Endpoint-ReadPreference-cannot-be-set-tc5764015.html","githubbot:1426230129:2015-03-13T15:02:09.225+0000:1426230129:2015-03-13T15:02:09.225+0000:GitHub user jpeschke2608 opened a pull request:

    https://github.com/apache/camel/pull/434

    CAMEL-8483: Removed readPreference from the list of invalid options for camel consumer endpoints

    Hi,
    This one is about the issue https://issues.apache.org/jira/browse/CAMEL-8483, also discussed here:
    http://camel.465427.n5.nabble.com/MongoDB-Consumer-Endpoint-ReadPreference-cannot-be-set-tc5764015.html
    
    I simply removed the ""readPreference"" option from the list of invalid options, which should allow you to define MongoDB consumer endpoints with a non-default readPreference (for example to consume data from a tailable consumer by reading from the secondary hosts in a MongoDB replica set).
    
    This is my first GitHub commit/Pull request, so I hope I didn't break anything :).
    
    Best regards,
    Joerg

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jpeschke2608/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/434.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #434
    
----
commit c0ce4eba934a5ec762c9b76470afe2a95f6b80b7
Author: jpeschke2608 <peschke@etone.de>
Date:   2015-03-13T14:55:58Z

    CAMEL-8483: Removed readPreference from the list of invalid options for
    camel consumer endpoints

----

jpeschke:1426230192:2015-03-13T15:03:12.357+0000:1426230192:2015-03-13T15:03:12.357+0000:Added a GitHub Pull to fix the issue:
https://github.com/apache/camel/pull/434
githubbot:1426239238:2015-03-13T17:33:58.325+0000:1426239238:2015-03-13T17:33:58.325+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/434
"
0,CAMEL-8482,Bug,Major,2.15.0,,"
None
",Resolved,Cannot Reproduce,None,Henryk Konsek,Manuel Rivas,0,3,2015-03-13 14:06:18+00:00,2015-05-12 15:37:22+00:00,"When having a camel route builder making use of a property managed by spring  cloud config server, the beans in the application managed by Spring get the property values refreshed when invoking the Spring cloud config RefreshEndpoint but the camel routebuilders does not pick up the new values. Restarting the camel context does not help either. Restart of Spring application context is required.


Example that works for Spring managed beans:


package se.comhem.service;


import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.stereotype.Component;


@Component
@RefreshScope()
public class CosmosProperties {


    @Value(""${cosmos.someappconf}"")
    private String someAppConf;


    public String getSomeAppConf()

{
        return someAppConf;
    }



}


When using this bean together with a camel routebuilder it does not work until Spring Application context is restarted:


package se.comhem.service;


import org.apache.camel.model.language.SimpleExpression;
import org.apache.camel.spring.SpringRouteBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;


@Component
public class ConfigClientRouteBuilder extends SpringRouteBuilder {
pansowa
    private final static String URI = ""servlet:///testCamel"";


    @Autowired
    private CosmosProperties cosmosProperties;


    @Override
    public void configure() throws Exception 

{
        from(URI)
                .setBody(new SimpleExpression(cosmosProperties.getSomeAppConf()))
                .to(""log:se.comhem?level=INFO&showBody=true&multiline=true"")
                .end();

    }


}


Main application class:


package se.comhem.service;


import org.apache.camel.component.servlet.CamelHttpTransportServlet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@Configuration
@EnableAutoConfiguration
@RestController
@ComponentScan
public class Application {


    private static final String CAMEL_URL_MAPPING = ""/camel/*"";
    private static final String CAMEL_SERVLET_NAME = ""CamelServlet"";


    @Autowired
    private CosmosProperties cosmosProperties;


    @RequestMapping(""/"")
    public String home() 

{
        return ""Config client running correctly"";
    }


    public static void main( String[] args ) 

{
        SpringApplication.run(Application.class, args);
    }


    @RequestMapping(""/some-app-conf"")
    public String someAppConf()

{
        return ""Some app conf "" + this.cosmosProperties.getSomeAppConf();
    }


    @Bean
    public ServletRegistrationBean servletRegistrationBean() 

{
        ServletRegistrationBean registration = new ServletRegistrationBean(new CamelHttpTransportServlet(), CAMEL_URL_MAPPING);
        registration.setName(CAMEL_SERVLET_NAME);
        return registration;
    }


}


Bootstrap configuration


spring:
  boot:
    admin:
      url: http://localhost:8880
  application:
    name: config-client
  config:
    name: config-client
  profiles:
      active: ${environment}
  cloud:
      config:
        uri: http://localhost:8110
        enabled: true
        failFast: true


pom:


<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
    <modelVersion>4.0.0</modelVersion>


    <groupId>se.comhem.service</groupId>
    <artifactId>config-client</artifactId>
    <version>1.0-SNAPSHOT</version>


    <properties>
        <org.springframework.version>4.1.5.RELEASE</org.springframework.version>
        <camel.version>2.15.0</camel.version>
        <java.version>1.8</java.version>
    </properties>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-parent</artifactId>
                <version>1.0.0.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <dependencies>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter</artifactId>
        </dependency>


        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-starter-admin-client</artifactId>
            <version>1.1.2</version>
        </dependency>


        <dependency>
            <groupId>se.comhem.common</groupId>
            <artifactId>decrypt</artifactId>
            <version>1.0.0</version>
        </dependency>


        <!-- Camel -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>${camel.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-servlet</artifactId>
            <version>${camel.version}</version>
        </dependency>


    </dependencies>


    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>


        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version><!-$NO-MVN-MAN-VER$->
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>","davsclaus:1426288624:2015-03-14T07:17:04.796+0000:1426288624:2015-03-14T07:17:04.796+0000:Duplicate of CAMEL-8460
hekonsek:1427188207:2015-03-24T17:10:07.231+0000:1427188207:2015-03-24T17:10:07.231+0000:Actually I think that this is a different issue than CAMEL-8460. I need to take a look at Spring Cloud before I investigate it. Added to my backlog.
hekonsek:1430102927:2015-04-27T10:48:47.353+0000:1430102927:2015-04-27T10:48:47.353+0000:Hi Manuel,

Actually it looks more like a Spring Boot issue, than Camel issue. Can you send me the Maven example I could use to reproduce the issue?

Cheers.
hekonsek:1431416242:2015-05-12T15:37:22.475+0000:1431416242:2015-05-12T15:37:22.475+0000:Let me know if you can help me to reproduce this issue. In the meantime, I'm closing the ticket."
0,CAMEL-8481,Bug,Major,2.15.0,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Yuffie Chow,0,2,2015-03-13 13:45:08+00:00,2019-08-06 05:26:59+00:00,"when the request cross the jetty9, it has two same key of some attributes in request header like the follows:
--------------this one has two User-Agent,Accept-Encoding
Accept-Encoding: gzip
User-Agent: Jetty/9.2.9.v20150224
Accept: /
Accept-Encoding: gzip, deflate, sdch
Accept-Language: zh-CN,zh;q=0.8
Cookie: ASP.NET_SessionId=jc412f45qx2mqw55ivfuhljm
dnt: 1
Referer: http://localhost:8080/MobileService/
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36
x-requested-with: XMLHttpRequest
-------------------------------------------------------------
-------------------with two SAME cookie
Accept-Encoding: gzip
Content-Type: application/json
Accept: /
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8
Cookie: ASP.NET_SessionId=hv5tiq55muv1ki55esc2hi45
DNT: 1
Origin: chrome-extension://hgmloofddffdnphfgcellkdfbfbjeloo
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36
Cookie: ASP.NET_SessionId=hv5tiq55muv1ki55esc2hi45
--------------------------------------------","davsclaus:1436410003:2015-07-09T10:46:43.145+0000:1436410003:2015-07-09T10:46:43.145+0000:Ah there is a duplicate of accept-encoding. 
davsclaus:1438930429:2015-08-07T14:53:49.627+0000:1438930429:2015-08-07T14:53:49.627+0000:Can you try again with latest releases. And can you provide more details how to reproduce this issue?"
0,CAMEL-8480,Bug,Minor,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-13 09:47:01+00:00,2015-03-14 07:17:43+00:00,"It should not specify all the packages that it wants to exports, if it cannot generate the package,  the bundle plugin just create an import package entry for it.",
0,CAMEL-8479,Bug,Major,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-13 05:20:51+00:00,2015-10-20 13:43:42+00:00,No Desc,"njiang:1426204271:2015-03-13T07:51:11.279+0000:1426204271:2015-03-13T07:51:11.279+0000:Applied the patch into camel master, camel-2.15.x branches."
0,CAMEL-8478,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Andrea Cosentino,Claus Ibsen,0,1,2015-03-12 10:11:28+00:00,2015-07-03 20:27:55+00:00,"The org.apache.camel.spi.IdempotentRepository do not have a flush/clear operation to clear all.


We could likely add such a method, and expose over JMX so people can manage this repo at runtime.


See nabble
http://camel.465427.n5.nabble.com/how-to-flush-idempotent-in-memory-cache-tp5764024.html",
0,CAMEL-8477,Bug,Major,2.13.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Christian Damsgaard,0,2,2015-03-12 07:46:14+00:00,2015-03-12 07:51:45+00:00,"When using the URI endpoint option 'throwExceptionOnFailure=true' on the HTTP4 component I'm not expected to receive exception such as:



java.net.ConnectException in case of a connection refuse problem
java.net.UnknownHostException in case of an invalid hostname
java.net.SocketTimeoutException in case of an non reachable server.



Is this an expected behavior?","davsclaus:1426117880:2015-03-12T07:51:20.844+0000:1426117880:2015-03-12T07:51:20.844+0000:Yes that option is only for server side response code, eg if the response code is 3xx, 4xx, 5xx etc. Those exception you list are prior to calling the remote server and those will happen regardless.
 
davsclaus:1426117905:2015-03-12T07:51:45.686+0000:1426117905:2015-03-12T07:51:45.686+0000:Questions about using Camel, please use the mailing list / user forum first."
0,CAMEL-8476,Bug,Major,2.15.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Keith Babo,1,3,2015-03-11 13:21:15+00:00,2015-03-14 13:31:41+00:00,"There seems to be a peculiarity with fault processing when a route consists of a single TryProcessor and the MEP for an exchange is InOut.  The TryProcessor will iterate over any number of processors defined inside of it and during each iteration it sets the out msg to the in msg and clears the out msg reference.  The end result of this is that when the route completes, the out reference is cleared and Exchange.isFailed() will return false (it checks the out message for fault status).  Here’s where things get interesting, if I add a single processor after the doTry block, some logic in Pipeline kicks in that copies the in message to the out message for InOut MEPs before ending the route.


I have included a unit test which demonstrates the expected behavior and current (unexpected) behavior.  The expected behavior test fails and the unexpected behavior test passes.  Additional details can be found as comments in the unit test and the camel configuration containing the routes under test.",davsclaus:1426311101:2015-03-14T13:31:41.969+0000:1426311101:2015-03-14T13:31:41.969+0000:Thanks for reporting and providing a sample project that demonstrates the issue.
0,CAMEL-8475,Bug,Major,2.14.1,,"
None
",Closed,Invalid,None,Willem Jiang,Jani,0,2,2015-03-11 12:08:02+00:00,2015-03-12 12:49:18+00:00,"I'm trying to use CamelSpringDelegatingTestContextLoader with TestNG. Here's my test class:


MyTest.java
@ContextConfiguration(classes = SpringTestConfiguration.class, loader = CamelSpringDelegatingTestContextLoader.class)
public class MyTest extends AbstractCamelTestNGSpringContextTests {
    @Autowired
    private CamelContext camelContext;

    @Test
    public void test() {
        Assert.notNull(camelContext);
    }
}




Configuration class:


SpringTestConfiguration.java
@Configuration
@ComponentScan(basePackageClasses = {SpringTestRoot.class})
public class SpringTestConfiguration extends CamelConfiguration {
}




Here's the exception I'm getting:



org.testng.TestNGException: 
Cannot instantiate class com.mycompany.demo.MyTest
	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:38)
	at org.testng.internal.ClassHelper.createInstance1(ClassHelper.java:380)
	at org.testng.internal.ClassHelper.createInstance(ClassHelper.java:293)
	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:115)
	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:200)
	at org.testng.internal.TestNGClassFinder.<init>(TestNGClassFinder.java:120)
	at org.testng.TestRunner.initMethods(TestRunner.java:409)
	at org.testng.TestRunner.init(TestRunner.java:235)
	at org.testng.TestRunner.init(TestRunner.java:205)
	at org.testng.TestRunner.<init>(TestRunner.java:160)
	at org.testng.remote.RemoteTestNG$1.newTestRunner(RemoteTestNG.java:141)
	at org.testng.remote.RemoteTestNG$DelegatingTestRunnerFactory.newTestRunner(RemoteTestNG.java:271)
	at org.testng.SuiteRunner$ProxyTestRunnerFactory.newTestRunner(SuiteRunner.java:575)
	at org.testng.SuiteRunner.init(SuiteRunner.java:159)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:113)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1299)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1286)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:408)
	at org.testng.internal.ObjectFactoryImpl.newInstance(ObjectFactoryImpl.java:29)
	... 27 more
Caused by: java.lang.IllegalStateException: Neither GenericXmlContextLoader nor AnnotationConfigContextLoader was able to detect defaults, and no ApplicationContextInitializers were declared for context configuration [ContextConfigurationAttributes@327b636c declaringClass = 'org.apache.camel.testng.AbstractCamelTestNGSpringContextTests', classes = '{}', locations = '{}', inheritLocations = true, initializers = '{}', inheritInitializers = true, name = [null], contextLoaderClass = 'org.apache.camel.testng.AbstractCamelTestNGSpringContextTests$TestNGCamelSpringTestContextLoader']
	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.processContextConfiguration(AbstractDelegatingSmartContextLoader.java:201)
	at org.springframework.test.context.ContextLoaderUtils.buildMergedContextConfiguration(ContextLoaderUtils.java:607)
	at org.springframework.test.context.ContextLoaderUtils.buildMergedContextConfiguration(ContextLoaderUtils.java:560)
	at org.springframework.test.context.TestContext.<init>(TestContext.java:99)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:121)
	at org.springframework.test.context.TestContextManager.<init>(TestContextManager.java:107)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.<init>(AbstractTestNGSpringContextTests.java:108)
	at org.apache.camel.testng.AbstractCamelTestNGSpringContextTests.<init>(AbstractCamelTestNGSpringContextTests.java:49)
	at com.mycompany.demo.MyTest.<init>(MyTest.java:12)
	... 32 more




If I drop AbstractCamelTestNGSpringContextTests and use AbstractTestNGSpringContextTests and copy the listeners I'm able to execute the test.


Will there be TestNG support for CamelSpringDelegatingTestContextLoader?","njiang:1426125758:2015-03-12T10:02:38.330+0000:1426125849:2015-03-12T10:04:09.553+0000:It's caused by the setting of @ContextConfiguration, you need to specify  inheritLocations = false to avoid using the setting of AbstractCamelTestNGSpringContextTests.  I just committed a quick test for it.
https://github.com/apache/camel/commit/d6812ffe44606117865a60141fef9f6dce9d2df1

Please send out an email before you fill a JIRA, we need to avoid creating this kind invalided issue.
janil:1426127222:2015-03-12T10:27:02.755+0000:1426127342:2015-03-12T10:29:02.238+0000:Thanks for the example, works fine.

Sorry about that. I googled and first result was this JIRA instead of the support site. I guess this ticket could be about making an example then, since there was no instructions, forum posts or anything I was kinda sure this was a bug.

Should I close the issue or will someone else do that?
njiang:1426135714:2015-03-12T12:48:34.663+0000:1426135714:2015-03-12T12:48:34.663+0000:We normally close the issue when release the kit, but it's OK you close it."
0,CAMEL-8474,Task,Trivial,2.15.0,2.15.0,"

title
website

",Resolved,Fixed,2.15.0,Claus Ibsen,Geert Schuring,0,1,2015-03-11 09:27:51+00:00,2015-03-11 09:29:31+00:00,"The title of download page for release 2.15.0 reads ""currently in progress"" while the release has been done already.",
0,CAMEL-8473,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-11 06:55:08+00:00,2015-03-11 09:00:40+00:00,"When using the DLC you may want to prepare the exchange before its sent to the dead letter uri. Today you would need to create a new route, and use direct to link the routes.


We should make it easier to plugin a custom processor / bean to do the prepare logic.


Some EIPs has a onPrepare option.",
0,CAMEL-8472,Task,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Nazarii Kukhar,0,3,2015-03-11 06:32:46+00:00,2015-03-15 06:50:35+00:00,Currently camel-eip-documentation-enricher-maven-plugin has pretty low test coverage. It would be nice to improve it with adding unit/integration tests.,"nkukhar:1426026784:2015-03-11T06:33:04.771+0000:1426026784:2015-03-11T06:33:04.771+0000:Working on it.
githubbot:1426291945:2015-03-14T08:12:25.106+0000:1426291945:2015-03-14T08:12:25.106+0000:GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/437

    [CAMEL-8472] Tests added. Minor refactoring and bug fixes.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-8472

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/437.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #437
    
----
commit defe078cf895c9419f8721706c6e043adc99986d
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-03-14T08:06:46Z

    Minor refactoring and bug fixes.

commit aba12d0928c08a41e3c60c125eb9dac4af98c5fd
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-03-14T08:07:20Z

    Tests added.

----

davsclaus:1426372811:2015-03-15T06:40:11.430+0000:1426372811:2015-03-15T06:40:11.430+0000:Thanks for the PR
githubbot:1426373435:2015-03-15T06:50:35.078+0000:1426373435:2015-03-15T06:50:35.078+0000:Github user nkukhar closed the pull request at:

    https://github.com/apache/camel/pull/437
"
0,CAMEL-8471,Bug,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Hiram R. Chirino,Hiram R. Chirino,0,0,2015-03-10 19:35:15+00:00,2015-03-10 19:38:55+00:00,"In some containerized environments, the ActiveMQUuidGenerator does not work that great. Not only does it not usually detect the hostname correctly. But binding to a dynamic port might be restricted.
We should support supplying both those data values via system properties.",chirino:1425987535:2015-03-10T19:38:55.394+0000:1425987535:2015-03-10T19:38:55.394+0000:fixed.
0,CAMEL-8470,Bug,Major,2.14.2,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-10 14:32:58+00:00,2015-12-01 19:01:32+00:00,"companies/addShare should return the created Update
Share#comment should be String instead of Comment
Group#isOpenToNonMembers and Group#allowMemberInvites should be Boolean instead of boolean
Otherwise invoking of people/addGroupMembership causes

Error invoking addGroupMembership: Unexpected {group-membership/group/is-open-to-non-members} element, Unexpected {group-membership/group/allow-member-invites}


because both attributes (that are not valid for this resource) are present.
remove role from people/getSuggestedGroupPosts
It is only for group-memberships/{id}/posts resource.","githubbot:1425988266:2015-03-10T19:51:06.254+0000:1425988266:2015-03-10T19:51:06.254+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/433

    CAMEL-8470 Several small fixes for camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8470

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/433.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #433
    
----
commit e0b5daf83878fe30fa51e6b1fb459d315d26c9e9
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-10T15:38:01Z

    CAMEL-8470 Several small fixes for camel-linkedin

----

trohovsky:1426645477:2015-03-18T10:24:37.250+0000:1426645477:2015-03-18T10:24:37.250+0000:Can someone merge this PR please?
githubbot:1427265129:2015-03-25T14:32:09.323+0000:1427265129:2015-03-25T14:32:09.323+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/433

trohovsky:1430727181:2015-05-04T16:13:01.229+0000:1430727181:2015-05-04T16:13:01.229+0000:Share#comment is not fixed to be of String type
githubbot:1430727623:2015-05-04T16:20:23.785+0000:1430727623:2015-05-04T16:20:23.785+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/510

    CAMEL-8470 Change Share#comment to String in camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8470

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/510.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #510
    
----
commit e05a8da55c47f7be0231b6f2e378f78a7d272c0c
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-05-04T16:19:15Z

    CAMEL-8470 Change Share#comment to String in camel-linkedin

----

dhirajsb:1430730221:2015-05-04T17:03:41.328+0000:1430730221:2015-05-04T17:03:41.328+0000:Commit merged, ok to close PR. "
0,CAMEL-8469,Bug,Major,2.14.1,None,"
None
",Closed,Fixed,None,Dhiraj Sureshkumar Bokde,Tomas Rohovsky,0,2,2015-03-10 12:14:14+00:00,2015-05-04 14:54:40+00:00,"Following parameters - types should generate values in lower case:



event_type - org.apache.camel.component.linkedin.api.Eventtype
category - org.apache.camel.component.linkedin.api.Category
order - org.apache.camel.component.linkedin.api.Order
role - org.apache.camel.component.linkedin.api.Role
postcategorycode - org.apache.camel.component.linkedin.api.model.PostCategoryCode



Also notice that postcategory code should contain 'job' and 'promotion' values - https://developer-programs.linkedin.com/documents/groups-api.


I've tried to fix that with adding of



<bindings node=""//xs:simpleType[@name='event-type']"">
    <typesafeEnumClass name=""EventType"" />
</bindings>




to linkedin-api-schema.xjb as well as appropriate simpleType to linkedin-api-schema.xsd, but it was without success. I still got:



Error invoking getCompanyUpdates: Invalid filter {STATUS_UPDATE}




Names of enum values are used.","dhirajsb:1425965091:2015-03-10T13:24:51.779+0000:1425965091:2015-03-10T13:24:51.779+0000:Its actually an issue in the enums generated by CXF WADLtoJava, so the jaxb bindings have no effect. The solution is to move the enumerations to the schema and reference them in the wadl. I'll take care of that. 
dhirajsb:1425986678:2015-03-10T19:24:38.562+0000:1425986678:2015-03-10T19:24:38.562+0000:Moving the enums to xsd fixed the issue with generating {{public String value()}} method in the enum. But CXF still marshaled the name of the enum value, instead of the String in the value field. So an {{EnumQueryParamConverterProvider}} had to be added to the Linkedin API and component to handle enums in query params. 
New tests were also added to verify the changes. 
dhirajsb:1425986718:2015-03-10T19:25:18.338+0000:1425986718:2015-03-10T19:25:18.338+0000:[~trohovsky], once you have verified this fix, please close this issue. 
trohovsky:1430722470:2015-05-04T14:54:30.859+0000:1430722470:2015-05-04T14:54:30.859+0000:verified"
0,CAMEL-8468,Improvement,Major,2.15.0,"2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Thomas Diesler,0,3,2015-03-10 08:39:07+00:00,2015-04-14 14:16:41+00:00,"XStream unmarshalling does not respect the ApplicationContextClassLoader


CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/387","githubbot:1425948189:2015-03-10T08:43:09.317+0000:1425948189:2015-03-10T08:43:09.317+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/431

    [CAMEL-8468] Usage of camel-xstream depends on TCCL

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel camel-8468

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/431.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #431
    
----
commit 01b89279822d90bac7e7ed32c5ae4f4493bbfafd
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-10T08:40:44Z

    [CAMEL-8468] Usage of camel-xstream depends on TCCL

----

njiang:1426036303:2015-03-11T09:11:43.444+0000:1426036334:2015-03-11T09:12:14.286+0000:Applied the patch into master, camel-2.15.x and camel-2.14.x with thanks to Thomas.
githubbot:1426560752:2015-03-17T10:52:32.055+0000:1426560752:2015-03-17T10:52:32.055+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/431
"
0,CAMEL-8467,Bug,Major,"2.14.2, 2.15.0",None,"
None
",Resolved,Fixed,"2.14.3, 2.15.2",Willem Jiang,Dhiraj Sureshkumar Bokde,0,1,2015-03-09 23:32:31+00:00,2015-05-04 14:27:08+00:00,"Update these features to use the servicemix bundle wrapping htmlunit. It is currently incorrectly named as httpunit. So a request has been logged in a comment for SMX4-1816. 
Once the name is corrected, the features should be updated to use the smx4 bundle instead of the wrapped jars, which sometimes leads to CNF exceptions at runtime.",
0,CAMEL-8466,Bug,Major,"2.14.2, 2.15.0",None,"
None
",Closed,Fixed,"2.14.3, 2.15.1",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-03-09 23:16:45+00:00,2015-03-09 23:34:17+00:00,"OSGi dependencies for xalan, xerces and xmlresolver are missing for feature camel-linkedin. These dependencies are transitive from htmlunit, which is included as a wrapped jar right now, it should be switched to the servicemix bundle for htmlunit for this and camel-box features.. That bundle needs to be named correctly as mentioned in SMX4-1816.","dhirajsb:1425915257:2015-03-09T23:34:17.500+0000:1425915257:2015-03-09T23:34:17.500+0000:Feature camel-linkedin has been updated on master, camel-2.15.x and camel-2.14.x branches. 
The requirement to update features to use smx4 bundle for htmlunit has been moved to CAMEL-8467. "
0,CAMEL-8465,New Feature,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-09 18:27:52+00:00,2015-12-01 19:00:50+00:00,"Add groups/getPosts endpint that covers following resource:



https://api.linkedin.com/v1/groups/{group-id}/posts




Similar functionality as this resource provides people/getPosts mapped to



https://api.linkedin.com/v1/people/~/group-memberships/{group-id}/posts




, but it requires role to be set.","githubbot:1425898697:2015-03-09T18:58:17.825+0000:1425898697:2015-03-09T18:58:17.825+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/429

    CAMEL-8465 Add groups/getPosts endpoint to camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8465

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/429.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #429
    
----
commit 215179d309140183ac4459aea4c98295a113c480
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-09T18:39:33Z

    CAMEL-8465 Add groups/getPosts endpoint to camel-linkedin

----

njiang:1425924092:2015-03-10T02:01:32.937+0000:1425924092:2015-03-10T02:01:32.937+0000:Merged the patch into master, camel-2.15.x and camel-2.14.x branches with thanks to Tomas.
githubbot:1427265265:2015-03-25T14:34:25.564+0000:1427265265:2015-03-25T14:34:25.564+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/429
"
0,CAMEL-8464,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-09 17:57:59+00:00,2015-12-01 19:00:33+00:00,"Similar as CAMEL-8456. The underlying resource



/companies/{company-id}/updates/key={update-key}/is-liked




doesn't exist. It was probably added by mistake instead of



https://api.linkedin.com/v1/people/~/network/updates/key={update-key}/is-liked




mentioned in the documentation https://developer-programs.linkedin.com/documents/commenting-and-liking-company-share. The resource is already mapped to linkedin://people/likeUpdate so there is no need to add it to companies prefixed endpoints.","githubbot:1425896176:2015-03-09T18:16:16.052+0000:1425896176:2015-03-09T18:16:16.052+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/428

    CAMEL-8464 Remove likeCompanyUpdate endpoint from camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8464

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/428.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #428
    
----
commit 2dcee54520212d5b3babebc8eeae287436f4d040
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-09T18:13:17Z

    CAMEL-8464 Remove likeCompanyUpdate endpoint from camel-linkedin

----

njiang:1425924067:2015-03-10T02:01:07.269+0000:1425924067:2015-03-10T02:01:07.269+0000:Merged the patch into master, camel-2.15.x and camel-2.14.x branches with thanks to Tomas.
githubbot:1427265270:2015-03-25T14:34:30.588+0000:1427265270:2015-03-25T14:34:30.588+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/428
"
0,CAMEL-8463,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Joe Francis,0,2,2015-03-09 17:28:02+00:00,2015-07-09 10:53:39+00:00,"Allow overloading of methods that accept a Camel exchange.


Suppose one defines a bean called “helloBean” with the following two methods:



public void hello(String first) 
public void hello(String first, String last) 




The following Camel route will distinguish one method from the other. 



from(""timer://foo?repeatCount=1"")
.beanRef(""helloBean"", ""hello('Wilma')"")
.beanRef(""helloBean"", ""hello('Wilma','Flintstone')"");




Now alter the two methods to have them accept a Camel Exchange, as follows:



public void hello(String first, Exchange ex1)
public void hello(String first, String last, Exchange ex1) 




The same Camel route will not be able to distinguish one method from the other. The route will throw either an AmbiguousMethodCallException or ParameterBindingException exception. 


If, on the other hand, you remove one of the methods, and alter the route accordingly, then the route will work just fine and the exchange will be implicitly passed to the method. For example, 



public void hello(String first, String last, Exchange ex1) 

from(""timer://foo?repeatCount=1"")
.beanRef(""helloBean"", ""hello('Wilma','Flintstone')"");",davsclaus:1436410419:2015-07-09T10:53:39.091+0000:1436410419:2015-07-09T10:53:39.091+0000:The binding is already flexible and complicated. And its more for binding non Camel types. If you want Exchange then just have that as a single-arg.
0,CAMEL-8462,Bug,Major,"2.14.2, 2.15.0","2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-09 10:00:24+00:00,2015-03-09 10:51:50+00:00,"HttpServerChannelHandler is created per NettyHttpConsumer, we should not store the Request instance in it's field. 
BTW, we can alway access the Request Object from the MessageEvent or Context Object from the NettyHttpHandler.","njiang:1425869510:2015-03-09T10:51:50.359+0000:1425869510:2015-03-09T10:51:50.359+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8461,Bug,Major,"2.14.2, 2.15.0","2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Willem Jiang,Willem Jiang,0,1,2015-03-09 09:36:12+00:00,2015-03-09 10:51:37+00:00,"If we have the camel route which remove the all the header after the netty-http consumer, netty doesn't  close the connection even the client send the http header connection as closed.



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" default-activation=""eager"">
  <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
    <route>
      <from id=""t1"" uri=""netty-http:http://localhost:9000/test""/>
      <removeHeaders pattern=""*""/>
      <setBody>
        <constant>Hello, World!</constant>
      </setBody>
      <to uri=""log:XXX?level=ERROR""/>
    </route>
  </camelContext>
</blueprint>","njiang:1425869497:2015-03-09T10:51:37.517+0000:1425869497:2015-03-09T10:51:37.517+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches."
0,CAMEL-8460,Bug,Major,2.15.0,"2.15.3, 2.16.0","
None
",Resolved,Pending Closed,"2.15.3, 2.16.0",Henryk Konsek,Steven Marcus,1,6,2015-03-08 21:59:38+00:00,2017-06-28 19:16:52+00:00,"The latest snapshot fixes the issue with my routes not being found.
But there is still some undesirable behaviour with routes being restarted during the context refresh.


Here's the console log that shows shutdown handlers being run during app startup... tia


.   ____          _            __ _ _
/ / __' __ _ ()_ __  __ _ \ \ \ \
( ( )___ | '_ | '| | ' \/ _` | \ \ \ \
/  __)| |)| | | | | || (_| |  ) ) ) )
'  |___| .|| ||| |_, | / / / /
=========||==============|_/=////
:: Spring Boot ::        (v1.2.2.RELEASE)


2015-03-09 08:40:55.162  INFO 81935 — [           main] mediaroom.MRServicesApp                  : Starting MRServicesApp on MBP13.local with PID 81935 (/Users/srnm/Documents/workspace-buffdubs/MRServices/target/classes started by srnm in /Users/srnm/Documents/workspace-buffdubs/MRServices)
2015-03-09 08:40:55.165 DEBUG 81935 — [           main] mediaroom.MRServicesApp                  : Running with Spring Boot v1.2.2.RELEASE, Spring v4.1.5.RELEASE
...
[AppClassLoader@14dad5dc] info AspectJ Weaver Version 1.8.5 built on Thursday Jan 29, 2015 at 01:03:58 GMT
[AppClassLoader@14dad5dc] info register classloader sun.misc.Launcher$AppClassLoader@14dad5dc
[AppClassLoader@14dad5dc] info using configuration /Users/srnm/Documents/workspace-buffdubs/MRServices/src/main/resources/META-INF/aop.xml
[AppClassLoader@14dad5dc] info register aspect com.amazonaws.services.simpleworkflow.flow.aspectj.AsynchronousAspect
[AppClassLoader@14dad5dc] info register aspect com.amazonaws.services.simpleworkflow.flow.aspectj.ExponentialRetryAspect
[AppClassLoader@14dad5dc] warning javax.* types are not being woven because the weaver option '-Xset:weaveJavaxPackages=true' has not been specified
2015-03-09 08:41:03.406  INFO 81935 — [           main] o.a.c.i.converter.DefaultTypeConverter   : Loaded 183 type converters
2015-03-09 08:41:04.345 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Post-processing CamelContext bean: camel-1
2015-03-09 08:41:04.346 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: []
2015-03-09 08:41:04.394  INFO 81935 — [           main] o.a.camel.component.log.LogComponent     : Using custom Logger: Logger[camelLogger]
2015-03-09 08:41:04.630 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: []
2015-03-09 08:41:04.632  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.15-SNAPSHOT (CamelContext: camel-1) is starting
2015-03-09 08:41:04.633  INFO 81935 — [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2015-03-09 08:41:04.932  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-03-09 08:41:04.932  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-03-09 08:41:05.089  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: roomSyncDLQ started and consuming from: Endpoint[direct://roomSyncDLQ]
2015-03-09 08:41:05.090  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: syncAllRooms started and consuming from: Endpoint[timer://roomSyncTimer?delay=3s&period=30s]
2015-03-09 08:41:05.092  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: writeRoomSync started and consuming from: Endpoint[direct://writeRoomSync]
2015-03-09 08:41:05.095  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: updateRoomRepo started and consuming from: Endpoint[direct://updateRoomRepo]
2015-03-09 08:41:05.096  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowDLQ started and consuming from: Endpoint[direct://transcodeWorkflowDLQ]
2015-03-09 08:41:05.098  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowStart started and consuming from: Endpoint[direct://transcodeWorkflowStart]
2015-03-09 08:41:05.106  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Total 6 routes, of which 6 is started.
2015-03-09 08:41:05.108  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.15-SNAPSHOT (CamelContext: camel-1) started in 0.474 seconds
...
2015-03-09 08:41:07.020 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Post-processing CamelContext bean: camel-1
2015-03-09 08:41:07.022 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: [Route(roomSyncDLQ)[[From[direct://roomSyncDLQ]] -> [To[browse:roomSyncDLQ]]], Route(syncAllRooms)[[From[timer://roomSyncTimer?delay=3s&period=30s]] -> [process[Processor@0x64910b2d], Split[

{body}

 -> [process[Processor@0x1247c72e], process[Processor@0x6fef75c6], Multicast[[To[direct://writeRoomSync], To[direct://updateRoomRepo], To[direct://transcodeWorkflowStart]]]]]]], Route(writeRoomSync)[[From[direct://writeRoomSync]] -> [Choice[[When[simple{${body.isNoChange}} -> [To[log://?level=OFF]]]] Otherwise[[process[Processor@0x5f61e002], Marshal[org.apache.camel.model.DataFormatDefinition@334540a0], Tofile:///Users/srnm/MR-reports/RoomSync?fileExist=Fail&fileName=%24%7Bfile%3Aonlyname.noext%7D.json&tempFileName=%24%7Bfile%3Aonlyname.noext%7D_%24%7Bfile%3Aname.ext%7D.inprogress]]]]], Route(updateRoomRepo)[[From[direct://updateRoomRepo]] -> [Split[

{ognl(body, asUpdatesJava)}

 -> [process[Processor@0x1f179f51], To[browse:updateRoomRepoComplete]]]]]]
2015-03-09 08:41:07.023  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.029  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: roomSyncDLQ shutdown complete, was consuming from: Endpoint[direct://roomSyncDLQ]
2015-03-09 08:41:07.029  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.031  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: roomSyncDLQ is stopped, was consuming from: Endpoint[direct://roomSyncDLQ]
2015-03-09 08:41:07.032  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: roomSyncDLQ is shutdown and removed, was consuming from: Endpoint[direct://roomSyncDLQ]
2015-03-09 08:41:07.034  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.035  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: syncAllRooms shutdown complete, was consuming from: Endpoint[timer://roomSyncTimer?delay=3s&period=30s]
2015-03-09 08:41:07.035  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.037  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: syncAllRooms is stopped, was consuming from: Endpoint[timer://roomSyncTimer?delay=3s&period=30s]
2015-03-09 08:41:07.038  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: syncAllRooms is shutdown and removed, was consuming from: Endpoint[timer://roomSyncTimer?delay=3s&period=30s]
2015-03-09 08:41:07.039  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.039  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: writeRoomSync shutdown complete, was consuming from: Endpoint[direct://writeRoomSync]
2015-03-09 08:41:07.039  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.040  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: writeRoomSync is stopped, was consuming from: Endpoint[direct://writeRoomSync]
2015-03-09 08:41:07.041  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: writeRoomSync is shutdown and removed, was consuming from: Endpoint[direct://writeRoomSync]
2015-03-09 08:41:07.042  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.042  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: updateRoomRepo shutdown complete, was consuming from: Endpoint[direct://updateRoomRepo]
2015-03-09 08:41:07.043  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.044  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: updateRoomRepo is stopped, was consuming from: Endpoint[direct://updateRoomRepo]
2015-03-09 08:41:07.045  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: updateRoomRepo is shutdown and removed, was consuming from: Endpoint[direct://updateRoomRepo]
2015-03-09 08:41:07.057  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: roomSyncDLQ started and consuming from: Endpoint[direct://roomSyncDLQ]
2015-03-09 08:41:07.091  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: syncAllRooms started and consuming from: Endpoint[timer://roomSyncTimer?delay=3s&period=30s]
2015-03-09 08:41:07.113  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: writeRoomSync started and consuming from: Endpoint[direct://writeRoomSync]
2015-03-09 08:41:07.129  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: updateRoomRepo started and consuming from: Endpoint[direct://updateRoomRepo]
2015-03-09 08:41:07.129 DEBUG 81935 — [           main] o.a.camel.spring.boot.RoutesCollector    : Injecting following route into the CamelContext: Routes: [Route(transcodeWorkflowDLQ)[[From[direct://transcodeWorkflowDLQ]] -> [To[browse:transcodeWorkflowDLQ]]], Route(transcodeWorkflowStart)[[From[direct://transcodeWorkflowStart]] -> [process[Processor@0x4a6a6a69]]]]
2015-03-09 08:41:07.130  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.130  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: transcodeWorkflowDLQ shutdown complete, was consuming from: Endpoint[direct://transcodeWorkflowDLQ]
2015-03-09 08:41:07.130  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.131  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowDLQ is stopped, was consuming from: Endpoint[direct://transcodeWorkflowDLQ]
2015-03-09 08:41:07.132  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowDLQ is shutdown and removed, was consuming from: Endpoint[direct://transcodeWorkflowDLQ]
2015-03-09 08:41:07.132  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Starting to graceful shutdown 1 routes (timeout 300 seconds)
2015-03-09 08:41:07.132  INFO 81935 — [ - ShutdownTask] o.a.camel.impl.DefaultShutdownStrategy   : Route: transcodeWorkflowStart shutdown complete, was consuming from: Endpoint[direct://transcodeWorkflowStart]
2015-03-09 08:41:07.133  INFO 81935 — [           main] o.a.camel.impl.DefaultShutdownStrategy   : Graceful shutdown of 1 routes completed in 0 seconds
2015-03-09 08:41:07.133  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowStart is stopped, was consuming from: Endpoint[direct://transcodeWorkflowStart]
2015-03-09 08:41:07.134  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowStart is shutdown and removed, was consuming from: Endpoint[direct://transcodeWorkflowStart]
2015-03-09 08:41:07.144  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowDLQ started and consuming from: Endpoint[direct://transcodeWorkflowDLQ]
2015-03-09 08:41:07.150  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Route: transcodeWorkflowStart started and consuming from: Endpoint[direct://transcodeWorkflowStart]
2015-03-09 08:41:07.151  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.15-SNAPSHOT (CamelContext: camel-1) is starting
2015-03-09 08:41:07.151  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Total 6 routes, of which 6 is started.
2015-03-09 08:41:07.151  INFO 81935 — [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.15-SNAPSHOT (CamelContext: camel-1) started in 0.000 seconds
2015-03-09 08:41:07.164  INFO 81935 — [           main] mediaroom.MRServicesApp                  : Started MRServicesApp in 12.586 seconds (JVM running for 13.145)","hekonsek:1426040648:2015-03-11T10:24:08.912+0000:1426040648:2015-03-11T10:24:08.912+0000:I will take a look at this soon. Stay tuned!
davsclaus:1427100235:2015-03-23T16:43:55.087+0000:1427100235:2015-03-23T16:43:55.087+0000:Did you have a chance to look at this?

We are working on closing down for a 2.15.1 patch release
srnm:1427143576:2015-03-24T04:46:16.422+0000:1427143597:2015-03-24T04:46:37.869+0000:I tested against 2.15.1-SNAPSHOT available just before I replied here.

The undesirable behaviour of routes being shutdown and restarted during startup was still visible in the app logs.

HTH,
Steven

hekonsek:1427188054:2015-03-24T17:07:34.930+0000:1427188054:2015-03-24T17:07:34.930+0000:Hi guys,

I think I will take a look at this by the end of this week.

Stay tuned!
hekonsek:1429358015:2015-04-18T19:53:35.965+0000:1429358054:2015-04-18T19:54:14.765+0000:Hi Steven,

I've just tried to execute the following test against the Camel master (2.16-SNAPSHOT):

{code}
@SpringBootApplication
public class DoubleStartTest extends FatJarRouter {

    @Override
    public void configure() throws Exception {
        from(""direct:test"").to(""mock:test"");
    }

    @Test
    public void xxx() {
        DoubleStartTest.main(""--spring.main.sources="" + DoubleStartTest.class.getName());
    }

}
{code}

Everything seems to work like a charm. The routes and context have been started only once:

{code}
Running org.apache.camel.spring.boot.testme.DoubleStartTest
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v1.2.3.RELEASE)

2015-04-18 21:46:40.823  INFO 28438 --- [           main] o.apache.camel.spring.boot.FatJarRouter  : Starting FatJarRouter on henryberg with PID 28438 (/home/hekonsek/projects/camel/components/camel-spring-boot/target/classes started by hekonsek in /home/hekonsek/projects/camel/components/camel-spring-boot)
2015-04-18 21:46:40.856  INFO 28438 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@402e37bc: startup date [Sat Apr 18 21:46:40 CEST 2015]; root of context hierarchy
2015-04-18 21:46:41.273  INFO 28438 --- [           main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean 'beanNameViewResolver': replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter; factoryMethodName=beanNameViewResolver; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter.class]]
2015-04-18 21:46:41.597  INFO 28438 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.camel.spring.boot.CamelAutoConfiguration' of type [class org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$369735a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2015-04-18 21:46:41.895  INFO 28438 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)
2015-04-18 21:46:42.088  INFO 28438 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat
2015-04-18 21:46:42.090  INFO 28438 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.0.20
2015-04-18 21:46:42.217  INFO 28438 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2015-04-18 21:46:42.217  INFO 28438 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1365 ms
2015-04-18 21:46:42.757  INFO 28438 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/]
2015-04-18 21:46:42.760  INFO 28438 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'characterEncodingFilter' to: [/*]
2015-04-18 21:46:42.760  INFO 28438 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2015-04-18 21:46:43.031  INFO 28438 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@402e37bc: startup date [Sat Apr 18 21:46:40 CEST 2015]; root of context hierarchy
2015-04-18 21:46:43.081  INFO 28438 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped ""{[/error],methods=[],params=[],headers=[],consumes=[],produces=[text/html],custom=[]}"" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest)
2015-04-18 21:46:43.081  INFO 28438 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped ""{[/error],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}"" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2015-04-18 21:46:43.106  INFO 28438 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2015-04-18 21:46:43.107  INFO 28438 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2015-04-18 21:46:43.148  INFO 28438 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2015-04-18 21:46:43.417  INFO 28438 --- [           main] o.a.c.i.converter.DefaultTypeConverter   : Loaded 197 type converters
2015-04-18 21:46:43.507  INFO 28438 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
2015-04-18 21:46:44.174  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is starting
2015-04-18 21:46:44.174  INFO 28438 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled
2015-04-18 21:46:44.314  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-04-18 21:46:44.314  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-04-18 21:46:44.345  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: Endpoint[direct://test]
2015-04-18 21:46:44.347  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route2 started and consuming from: Endpoint[direct://xmlAutoLoading]
2015-04-18 21:46:44.348  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 2 routes, of which 2 is started.
2015-04-18 21:46:44.349  INFO 28438 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) started in 0.175 seconds
2015-04-18 21:46:44.398  INFO 28438 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)
2015-04-18 21:46:44.400  INFO 28438 --- [           main] o.apache.camel.spring.boot.FatJarRouter  : Started FatJarRouter in 3.928 seconds (JVM running for 4.837)
2015-04-18 21:46:44.401  INFO 28438 --- [           main] org.apache.camel.main.MainSupport        : Apache Camel 2.16-SNAPSHOT starting
{code}

Can you create the example that reproduces the issue on the Camel master branch?

Laters!
srnm:1429375016:2015-04-19T00:36:56.489+0000:1429375016:2015-04-19T00:36:56.489+0000:Hello,

I can confirm that I see cleaner context startup with 2.16-SNAPSHOT.

But I am not sure that the lifecycle contracts are being maintained?
A processor registered in a route is being started twice:
{code}
2015-04-19 10:28:20.535  INFO 21330 --- [           main] melLifecycleMonitorRoute$$anon$1$$anon$2 : create: 1
2015-04-19 10:28:20.644  INFO 21330 --- [           main] melLifecycleMonitorRoute$$anon$1$$anon$2 : start: 1
2015-04-19 10:28:20.656  INFO 21330 --- [           main] melLifecycleMonitorRoute$$anon$1$$anon$2 : start: 2
{code}

Here's the code I used:

{code}
@Configuration
class CamelLifecycleMonitorConfiguration {
  @Bean def CamelLifecycleMonitorRoutes(ef: ExchangeFormatter): RouteBuilder = {
    new RouteBuilder() {
      override def configure(): Unit = {

        val creates = new AtomicInteger()
        val starts = new AtomicInteger()
        val stops = new AtomicInteger()

        from(""direct:camelLifecycleMonitor"")
          .process(new Processor with Service with StrictLogging {

            {
              val c = creates.incrementAndGet()
              logger.info(s""create: $c"")
            }

            override def stop(): Unit = {
              val c = stops.incrementAndGet()
              logger.info(s""stop: $c"")
            }

            override def start(): Unit = {
              val c = starts.incrementAndGet()
              logger.info(s""start: $c"")
            }

            override def process(exchange: Exchange): Unit = {
              logger.info(ef.format(exchange))
            }
          })
      }
    }
  }
}
{code}

Do I not understand the lifecycle contract? Is my test wrong?
Or is there a bug in the framework code?

TIA,
Steven

davsclaus:1429393677:2015-04-19T05:47:57.075+0000:1429393677:2015-04-19T05:47:57.075+0000:Ah you should override doStart / doStop as those are the callbacks where end users have their logic. start|stop may trigger more than once but there is logic in there by default that check the state and only call doStart / doStop appropriately.
hekonsek:1429621283:2015-04-21T21:01:23.665+0000:1429621283:2015-04-21T21:01:23.665+0000:Also if you create your processor as a Spring bean, you are guaranteed that it follows the Spring lifecycle. I.e. it is a singleton created/destroyed together with the Spring context.
hekonsek:1429621443:2015-04-21T21:04:03.657+0000:1429621443:2015-04-21T21:04:03.657+0000:Let me close this one. It is a corner case, which is hard to reproduce even in Camel 2.15, while it is definitely fixed in Camel 2.16. Feel free to reopen the case if you don't agree with me :) .
jhberges:1430892970:2015-05-06T14:16:10.849+0000:1430892970:2015-05-06T14:16:10.849+0000:I think this is a case of multiple levels of application contexts.
I've debugged this down to {{org.apache.camel.spring.boot.RoutesCollector}}.
For my clients case, this seems to happen when spring-boot-actuator-starter is used.

One fix might be that {{RoutesCollector}} only process the route beans when it is the root context that has been refreshed?

Details: the {{onApplicationEvent}} callback is called twice with the following contexts, from breakpoint [here|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L52]:
{code}
org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@26be9a6: startup date [Wed May 06 15:56:32 CEST 2015]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@28b46423]
org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@28b46423: startup date [Wed May 06 15:55:18 CEST 2015]; root of context hierarchy]
{code}

Adding the routes on the latter would be correct for our case.

I'll investigate wether or not some dependency management may solve it, else I'll do a forked tweak for my specific use
githubbot:1430894839:2015-05-06T14:47:19.786+0000:1430894839:2015-05-06T14:47:19.786+0000:GitHub user jhberges opened a pull request:

    https://github.com/apache/camel/pull/511

    Simplistic workaround for ...

    https://issues.apache.org/jira/browse/CAMEL-8460, that works for me.
    
    A bit difficult to write unit test for, since this requires multiple ApplicationContext instances to have been started.
    
    I also would image there's a better way to implement this - perhaps by checking for existing routes before adding them?
    I don't know, but this simple tweak works for us - so it's good enough for us, for now.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jhberges/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/511.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #511
    
----
commit f268a0c200a915d042d4d05b124e99a981ca60ea
Author: Jan-Helge Bergesen <jan.helgebergesen@free2.no>
Date:   2015-05-06T14:42:14Z

    Simplistic workaround for https://issues.apache.org/jira/browse/CAMEL-8460, that works for me

----

hekonsek:1430912230:2015-05-06T19:37:10.103+0000:1430912230:2015-05-06T19:37:10.103+0000:Yeah, parent application context might be the corner case here. Let me verify this with the unit test and merge your fix. Thanks for catching this!
hekonsek:1431417673:2015-05-12T16:01:13.394+0000:1431417673:2015-05-12T16:01:13.394+0000:Resolved in 98902f02d143b6e81c8d7f0b8048b1788ecbcb50. Great thanks for the patch!
githubbot:1431422776:2015-05-12T17:26:16.009+0000:1431422776:2015-05-12T17:26:16.009+0000:Github user jhberges closed the pull request at:

    https://github.com/apache/camel/pull/511

mranest:1446294078:2015-10-31T20:21:18.537+0000:1446294078:2015-10-31T20:21:18.537+0000:Fix as implemented fails to properly initialize Camel context when Spring instantiates the application context as a child of another, parent context. This is the case for example when using spring-cloud-config. See:

http://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_the_bootstrap_application_context

As soon as spring-cloud-config is enabled in a camel spring boot application (i.e. include the org.springframework.cloud:spring-cloud-starter-config dependency) Camel context does not get to be initialized, as test expression at line 58 evaluates to false even for the initial context refresh event at application initialization.

The same problem will arise for any applications that use Spring Boot's fluent builder API (see: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-fluent-builder-api) that provides methods to programmatically create multiple contexts with a parent/child relationship.
githubbot:1446340218:2015-11-01T09:10:18.807+0000:1446340218:2015-11-01T09:10:18.807+0000:GitHub user mranest opened a pull request:

    https://github.com/apache/camel/pull/666

    CAMEL-8460: Revert simplistic workaround

    Workaround failed to initialize routes in case of multiple contexts
    with parent/child relationship. Reverted check for `null` parent
    application context in `onApplicationEvent()` and added assertions in
    unit test to verify correct initialization.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mranest/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/666.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #666
    
----
commit 43c9cf1e8e86ef3e37c0fd017dd127a055cb25f4
Author: Anestis Georgiadis <mranest@gmail.com>
Date:   2015-11-01T09:06:15Z

    CAMEL-8460: Revert simplistic workaround
    
    Workaround failed to initialize routes in case of multiple contexts
    with parent/child relationship. Reverted check for null parent
    application context in onApplicationEvent() and added assertions in
    unit test to verify correct initialization.

commit c55ff829ef21d9ab733afa54e8e3574cc510c7bc
Author: Anestis Georgiadis <mranest@gmail.com>
Date:   2015-11-01T09:06:58Z

    Merge remote-tracking branch 'upstream/master'

----

githubbot:1446520050:2015-11-03T11:07:30.811+0000:1446520050:2015-11-03T11:07:30.811+0000:GitHub user msparer opened a pull request:

    https://github.com/apache/camel/pull/668

    adapted the changes of CAMEL-8460 to only refresh routes on ContextRe…

    …freshEvents from ""own"" applicationContext. Previously route refreshs were initiated only if the parent applicationContext of the event's context was null. This doesn't work when Spring instantiates the Camel's application context as child of another applicationContext. This e.g. happens as soon as you're using spring-cloud-config.
    
    This proposed change brings back RouteCollector's constructor from camel version 2.15.2 and aims to fix both [the initial reason for the change](https://github.com/spring-cloud/spring-cloud-netflix/issues/438) and the [bug introduced with the change](https://issues.apache.org/jira/browse/CAMEL-8460).
    
    Furthermore it should replace [PR#666](https://github.com/apache/camel/pull/666)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/msparer/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/668.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #668
    
----
commit 7d56055294e0bfe13acd336945e10249f37b3531
Author: msparer <msp+git@molindo.at>
Date:   2015-11-03T11:01:14Z

    adapted the changes of CAMEL-8460 to only refresh routes on ContextRefreshEvents from ""own"" applicationContext. Previously route refreshs were initiated only if the parent applicationContext of the event's context was null. This doesn't work when Spring instantiates the Camel's application context as child of another applicationContext. This e.g. happens as soon as you're using spring-cloud-config

----

githubbot:1446523217:2015-11-03T12:00:17.551+0000:1446523217:2015-11-03T12:00:17.551+0000:Github user mranest closed the pull request at:

    https://github.com/apache/camel/pull/666

githubbot:1447198566:2015-11-11T07:36:06.124+0000:1447198566:2015-11-11T07:36:06.124+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/668
"
0,CAMEL-8459,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-07 14:32:12+00:00,2015-03-08 08:00:18+00:00,"When calling a bean using the bean eip in the Java DSL, then to refer to a bean its named beanRef in Java, where as in XML its just bean.


We should align this so its the same. Also for processRef it should just be process.",
0,CAMEL-8458,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1",Tomas Rohovsky,Tomas Rohovsky,0,2,2015-03-06 23:00:24+00:00,2015-12-01 19:00:19+00:00,"public_profile_url should be String instead of URI. The value of public_profile_url must be URL encoded what is not possible with URI.


Currently I am getting



Error invoking getPersonByUrl: Unknown field {pub} in resource {Person}




for https://www.linkedin.com/pub/jboss-fuse-qe/b4/14b/b","trohovsky:1425655219:2015-03-06T23:20:19.756+0000:1425655219:2015-03-06T23:20:19.756+0000:https://github.com/apache/camel/pull/426. It is rebased with a branch for https://github.com/apache/camel/pull/425.
njiang:1425869622:2015-03-09T10:53:42.736+0000:1425869622:2015-03-09T10:53:42.736+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas."
0,CAMEL-8457,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-06 20:47:42+00:00,2015-12-01 18:59:55+00:00,"These endpoints return wrong type:



companies/getCompanyUpdateComments - Comments/UpdateComments
companies/getUpdateComments - Comments/UpdateComments
people/getGroupMembershipSettings - GroupMemberships/GroupMembership



so it results in java.lang.ClassCastException.","githubbot:1425648342:2015-03-06T21:25:42.630+0000:1425648342:2015-03-06T21:25:42.630+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/425

    CAMEL-8457 Correct return types of some endpoints in camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8457

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/425.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #425
    
----
commit 0447273d3096b958efd10764e6c6c030671e79bc
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-06T21:19:46Z

    CAMEL-8457 Correct return types of some endpoints in camel-linkedin

----

trohovsky:1425648574:2015-03-06T21:29:34.847+0000:1425648574:2015-03-06T21:29:34.847+0000:I also removed start and count options for getGroupMembershipSettings because they are only for collections of objects. The documentation for camel-linkedin should be corrected when the PR is merged.
njiang:1425869612:2015-03-09T10:53:32.331+0000:1425869612:2015-03-09T10:53:32.331+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas
githubbot:1427265193:2015-03-25T14:33:13.428+0000:1427265193:2015-03-25T14:33:13.428+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/425
"
0,CAMEL-8456,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-06 20:11:20+00:00,2015-12-01 18:59:40+00:00,"Underlying resource 



/companies/{company-id}/updates/key={update-key}/update-comments 




does not exist. It was probably added by mistake instead of 



https://api.linkedin.com/v1/people/~/network/updates/key={update-key}/update-comments




 mentioned in the documentation https://developer-programs.linkedin.com/documents/commenting-and-liking-company-share. The resource is already mapped to linkedin://people/addUpdateComment so there is no need to add it to companies prefixed endpoints.","githubbot:1425644576:2015-03-06T20:22:56.291+0000:1425644576:2015-03-06T20:22:56.291+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/424

    CAMEL-8456 - Remove addCompanyUpdateComment endpoint from camel-linkedin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8456

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/424.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #424
    
----
commit 383f3edab9c33af897ae5ae538264a48600dd3c6
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-06T20:20:58Z

    CAMEL-8456 - Remove addCompanyUpdateComment endpoint from camel-linkedin

----

njiang:1425869601:2015-03-09T10:53:21.542+0000:1425869601:2015-03-09T10:53:21.542+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas
githubbot:1427265199:2015-03-25T14:33:19.169+0000:1427265199:2015-03-25T14:33:19.169+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/424
"
0,CAMEL-8455,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-06 19:15:31+00:00,2015-12-01 18:59:29+00:00,"update_key option should be optional in getHistoricalStatusUpdateStatistics endpoint. Currently it ends with an exception if the option is not specified: org.apache.camel.RuntimeCamelException: Missing properties for getHistoricalStatusUpdateStatistics, need one or more from [end_timestamp, update_key] See the LinkedIn API docs: https://developer-programs.linkedin.com/historical-company-statistics.","trohovsky:1425641725:2015-03-06T19:35:25.103+0000:1425641725:2015-03-06T19:35:25.103+0000:update_key was renamed to statistics_update_key due to conflict with update_key option used in the other company endpoints where it is required
trohovsky:1425642253:2015-03-06T19:44:13.338+0000:1425642253:2015-03-06T19:44:13.338+0000:https://github.com/apache/camel/pull/423
njiang:1425869586:2015-03-09T10:53:06.490+0000:1425869586:2015-03-09T10:53:06.490+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas.
githubbot:1427265221:2015-03-25T14:33:41.280+0000:1427265221:2015-03-25T14:33:41.280+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/423
"
0,CAMEL-8454,Task,Trivial,2.14.1,"2.14.3, 2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.1, 2.16.0",Tomas Rohovsky,Tomas Rohovsky,0,3,2015-03-06 17:10:33+00:00,2015-12-01 18:59:10+00:00,Generted files contains original name of the plugin (camel-component-util-maven-plugin) instead of camel-api-component-maven-plugin.,"githubbot:1425633503:2015-03-06T17:18:23.290+0000:1425633503:2015-03-06T17:18:23.290+0000:GitHub user trohovsky opened a pull request:

    https://github.com/apache/camel/pull/422

    CAMEL-8454 Correct a comment in files generated by api-component plugin

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/trohovsky/camel CAMEL-8454

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/422.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #422
    
----
commit e2cc1cfd9dab759841ac7301d53bd4b9e8ff33f9
Author: Tomas Rohovsky <trohovsk@redhat.com>
Date:   2015-03-06T17:13:11Z

    CAMEL-8454 Correct a comment in files generated by api-component plugin

----

njiang:1425869531:2015-03-09T10:52:11.169+0000:1425869531:2015-03-09T10:52:11.169+0000:Applied the patch into master , camel-2.14.x and camel-2.15.x branches with thanks to Tomas.
githubbot:1427265225:2015-03-25T14:33:45.428+0000:1427265225:2015-03-25T14:33:45.428+0000:Github user trohovsky closed the pull request at:

    https://github.com/apache/camel/pull/422
"
0,CAMEL-8453,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-03-06 16:48:11+00:00,2015-03-06 18:30:06+00:00,"Getting this exception when using avro dataformat from spring:


org.xml.sax.SAXParseException; lineNumber: 27; columnNumber: 88; cvc-complex-type.3.2.2: Attribute 'instanceClass' is not allowed to appear in element 'avro'.


Don't think this has ever worked from spring.",janstey:1425632423:2015-03-06T17:00:23.035+0000:1425632423:2015-03-06T17:00:23.035+0000:Fix for master http://git-wip-us.apache.org/repos/asf/camel/commit/fa38e09b
0,CAMEL-8452,Improvement,Major,2.15.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Hiram R. Chirino,Claus Ibsen,0,2,2015-03-06 15:01:50+00:00,2015-03-18 16:28:56+00:00,"When people use {{ }} property placeholders in the route model, it gets resolved with the actual value during route creation, and the original {{ }} is lost.


What we should do is preserve the {{ }} and do the resolve on demand (on access). The trick is to make this transparent, or to keep a shadow map of the {{ }} to actual mapping or something.


But by preserving the {{ }} we can make round trip editing possible. And also if people use {{ }} for username and passwords, then they are not exposed in the model.


ITs this logic that resolves the placeholders currently
org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholders(org.apache.camel.CamelContext, java.lang.Object)","githubbot:1425910042:2015-03-09T22:07:22.830+0000:1425910042:2015-03-09T22:07:22.830+0000:GitHub user chirino opened a pull request:

    https://github.com/apache/camel/pull/430

    Fix for CAMEL-8452: Camel route model - Preserve {{ }} placeholders 

    We preserve just the uri property of ProcessorDefinitions before we create the associated Processor and restore the original value after the the processor is created.
    
    We can probably target more properties to be preserved/restored as the need arrises.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chirino/camel CAMEL-8452

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/430.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #430
    
----
commit 87d8893b701247981a69d0fe32d3be06cf2edc7e
Author: Hiram Chirino <hiram@hiramchirino.com>
Date:   2015-03-09T21:53:38Z

    Fix for CAMEL-8452: Camel route model - Preserve {{ }} placeholders in model
    
    We preserve just the uri property of ProcessorDefinitions before we create the associated Processor and restore the original value after the the processor is created.
    
    We can probably target more properties to be preserved/restored as the need arrises.

----

githubbot:1426667336:2015-03-18T16:28:56.169+0000:1426667336:2015-03-18T16:28:56.169+0000:Github user chirino closed the pull request at:

    https://github.com/apache/camel/pull/430
"
0,CAMEL-8451,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Christian Schneider,Christian Schneider,0,1,2015-03-06 14:50:32+00:00,2015-03-06 15:26:05+00:00,Due to a security bug in 9.2.7 we should update to jetty  9.2.9.v20150224,
0,CAMEL-8450,Bug,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Henryk Konsek,Henryk Konsek,0,1,2015-03-06 11:10:33+00:00,2015-03-06 11:17:07+00:00,"NettyComponent.timer is static. It is initialized/started on component startup and stopped/nulled on component shutdown. The static timer is shared between. It means that when you start two bundles using camel-netty and then stop one of it, then the remaining running bundle will not be able to create new endpoints dynamically, because of the nulled timer in the component (until some other bundle using Netty component is started and reinitalizes the timer again).


IMHO, we should not stop neither null the static timer. It can be shared between components and initialized/started when the first NettyComponent instance is created, but it should last forever. We technically could count the number of the component instances, and stops the timer when there is no NettyComponent available, but I don't see a point in this kind of micro-optimization. This is only one timer instance per application.","hekonsek:1425611613:2015-03-06T11:13:33.913+0000:1425611613:2015-03-06T11:13:33.913+0000:Fixed in 72c65431b0dc0c5df847fc4ce628e50794cb8934.
hekonsek:1425611827:2015-03-06T11:17:07.477+0000:1425611827:2015-03-06T11:17:07.477+0000:My commit also includes the test reproducing the issue."
0,CAMEL-8449,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-06 09:43:45+00:00,2015-03-06 09:44:57+00:00,"We should support a broader range of CDI as 1.2 is very new and many libraries and containers do not support that yet.


And CDI 1.2 is compatible with the older versions, so there is no harm.",
0,CAMEL-8448,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Thomas Diesler,0,2,2015-03-06 09:42:37+00:00,2015-03-08 08:05:25+00:00,No Desc,"githubbot:1425606244:2015-03-06T09:44:04.030+0000:1425606244:2015-03-06T09:44:04.030+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/421

    [CAMEL-8448] Expose mina-2.0 instead of mina-1.1 through BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel mina

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/421.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #421
    
----
commit f8e3a57c7e6f6e2b037af2cca4ba71c07ac51de5
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-06T09:43:22Z

    [CAMEL-8448] Expose mina-2.0 instead of mina-1.1 through BOM

----

githubbot:1425616857:2015-03-06T12:40:57.162+0000:1425616857:2015-03-06T12:40:57.162+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/421
"
0,CAMEL-8447,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2015-03-06 07:42:27+00:00,2015-03-08 08:08:20+00:00,"Here we just add the camel-jetty module which is based on the camel-jetty8 to provide the pom backward support, and we can switch the camel-jetty to camel-jetty9 once it is used by default.",
0,CAMEL-8446,Improvement,Major,2.15.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-06 07:09:39+00:00,2015-09-07 14:57:38+00:00,"See CAMEL-7999 and CAMEL-8444.


We should allow options on component level to have same level of information as endpoints.",davsclaus:1441609058:2015-09-07T14:57:38.566+0000:1441609058:2015-09-07T14:57:38.566+0000:Its sufficient to support @Metadata on component level fields. Then we can document them there with required and default types etc.
0,CAMEL-8445,Bug,Major,2.15.0,2.16.0,"
None
",Resolved,Abandoned,2.16.0,Grzegorz Grzybek,Claus Ibsen,0,2,2015-03-05 16:17:49+00:00,2021-07-20 12:07:01+00:00,"Seems like a bug in hadoop trying to set some permission on windows causing a NPE in Java code



org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[hdfs2:////E:/workspa
e/camel/components/camel-hdfs2/target/test/test-camel1?fileSystemType=LOCAL&fileType=SEQUENCE_FILE&valueType=TEXT]. Rea
on: java.lang.NullPointerException
        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1012)
        at org.apache.hadoop.util.Shell.runCommand(Shell.java:445)
        at org.apache.hadoop.util.Shell.run(Shell.java:418)
        at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:650)
        at org.apache.hadoop.util.Shell.execCommand(Shell.java:739)
        at org.apache.hadoop.util.Shell.execCommand(Shell.java:722)
        at org.apache.hadoop.fs.RawLocalFileSystem.setPermission(RawLocalFileSystem.java:631)
        at org.apache.hadoop.fs.FilterFileSystem.setPermission(FilterFileSystem.java:468)
        at org.apache.hadoop.fs.ChecksumFileSystem.create(ChecksumFileSystem.java:456)
        at org.apache.hadoop.fs.ChecksumFileSystem.create(ChecksumFileSystem.java:424)
        at org.apache.hadoop.fs.FileSystem.create(FileSystem.java:907)
        at org.apache.hadoop.io.SequenceFile$Writer.<init>(SequenceFile.java:1071)
        at org.apache.hadoop.io.SequenceFile.createWriter(SequenceFile.java:270)
        at org.apache.camel.component.hdfs2.HdfsFileType$2.createOutputStream(HdfsFileType.java:212)
        at org.apache.camel.component.hdfs2.HdfsOutputStream.createOutputStream(HdfsOutputStream.java:69)
        at org.apache.camel.component.hdfs2.HdfsProducer.setupHdfs(HdfsProducer.java:143)
        at org.apache.camel.component.hdfs2.HdfsProducer.doStart(HdfsProducer.java:104)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2869)
        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1097)
        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1058)
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
        at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
        at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:219)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1272)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)","davsclaus:1425607685:2015-03-06T10:08:05.435+0000:1425607685:2015-03-06T10:08:05.435+0000:Since its a NPE in Java itself. And I am using latest Java 8 update 40, I wonder if we can detect we run on windows and then avoid that set permission call somehow? But maybe its just for testing hdfs running on windows itself. A production system surely woudlnt use windows for hdfs.
ggrzybek:1425608071:2015-03-06T10:14:31.124+0000:1425608071:2015-03-06T10:14:31.124+0000:By looking at hadoop code (quickly in 2.6.0 version), I see hadoop uses something called {{winutils.exe}} expected to be present somewhere in {{HADOOP_HOME}}. it uses it to pass {{chmod}} invocation.
davsclaus:1425608134:2015-03-06T10:15:34.480+0000:1425608134:2015-03-06T10:15:34.480+0000:Currently configured pom to skip testing on windows"
0,CAMEL-8444,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-05 14:50:58+00:00,2015-03-06 07:49:11+00:00,"The component options are currently discovered in apt from fields. But there is a few components that has delegate setters, such as JMS component.


We can improve apt to discover those setters as well to be included.


Or better to use the same set of @UriParam on component level as well so its the same all over. But that would need to migrate on all the components if going down that path.",davsclaus:1425596912:2015-03-06T07:08:32.700+0000:1425596912:2015-03-06T07:08:32.700+0000:Have the setters working now. We will look at supporting @UriParam / @UriParams in Camel 2.16 so its similar to as endpoints.
0,CAMEL-8443,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Jyrki Ruuskanen,0,2,2015-03-05 11:23:42+00:00,2015-03-06 10:32:26+00:00,"Allow adding arbitrary String properties to a route, with .routeProperty(name, value) in Java DSL and <routeProperty name=""..."" value=""...""/> in XML.


Expose getProperties(), getProperty(String name) and setProperty(String name, String value) for routes in JMX.


Our use case:
Add documentation to route in code and show it on a graph of Camel contexts, routes and endpoints in a running system. Graph is generated from JMX data.


This would be nice data to show on hawtio as well. Although in this case we might want to use an explicit documentation variable rather than a reserved property name.


Route has a properties map but that's used internally. These public properties would be held in a new map: publicProperties.","davsclaus:1425597053:2015-03-06T07:10:53.914+0000:1425597053:2015-03-06T07:10:53.914+0000:You can use <description> on a route to document it. 
yuruki:1425601986:2015-03-06T08:33:06.913+0000:1425602002:2015-03-06T08:33:22.366+0000:Yeah, that can be used to set the description (which ends up in OptionalIdentifiedDefinition), but how do I access it through JMX?

Route JMX operation getDescription() is tied to route.toString() which doesn't seem to have any connection to OptionalIdentifiedDefinition.getDescription().
davsclaus:1425602935:2015-03-06T08:48:55.668+0000:1425602935:2015-03-06T08:48:55.668+0000:Yeah we should use the description over JMX instead of toString. Let me work on that.
davsclaus:1425605608:2015-03-06T09:33:28.033+0000:1425605608:2015-03-06T09:33:28.033+0000:The route description is now used as JMX description.

For Java and Scala DSL there is now a new .routeDescription to more easily set that.
yuruki:1425609146:2015-03-06T10:32:26.964+0000:1425609146:2015-03-06T10:32:26.964+0000:Is toString representation of the route still available on JMX? We are currently using it, and I can imagine there are others who rely on it, as well.

How is the optional language parameter handled on JMX? getDescription(String lang), maybe?"
0,CAMEL-8442,Test,Minor,2.15.0,None,"
None
",Resolved,Later,Future,Unassigned,Claus Ibsen,0,2,2015-03-05 09:49:50+00:00,2015-09-29 07:19:08+00:00,"Tests in error:
  UniVocityCsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityCsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:119 » TextParsing
  UniVocityFixedWidthDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityFixedWidthDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:118 » TextParsing
  UniVocityTsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityTsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:118 » TextParsing


Tests run: 115, Failures: 0, Errors: 6, Skipped: 0","antoine.dessaigne:1425523102:2015-03-05T10:38:22.825+0000:1425523102:2015-03-05T10:38:22.825+0000:I'm on it !
antoine.dessaigne:1425538211:2015-03-05T14:50:11.669+0000:1425538211:2015-03-05T14:50:11.669+0000:Unfortunatly I didn't managed to reproduce this bugs. Can you attach the surefire report ?
davsclaus:1425544216:2015-03-05T16:30:16.698+0000:1425544216:2015-03-05T16:30:16.698+0000:Attached console output and the test log
antoine.dessaigne:1425626460:2015-03-06T15:21:00.779+0000:1425626460:2015-03-06T15:21:00.779+0000:I really really don't understand what's happening here.
Unmarshalling as list works but not as iterator. The strange thing here is that list unmarshalling uses the iterator.
In the tests I'm joining the lines according to the {{System.lineSeparator()}} and velocity uses {{System.getProperty(""line.separator"")}}. Do you change the default line separator ? But again, the line separator is working fine for the other separators.
I keep digging into the source code. If you have an idea or a new information, please tell me !
davsclaus:1425626581:2015-03-06T15:23:01.678+0000:1425626581:2015-03-06T15:23:01.678+0000:When I get a bit of time I can also try to debug on the window system I have that fails.

But others with windows boxes, do you have test issues as well?
antoine.dessaigne:1425627094:2015-03-06T15:31:34.706+0000:1425627094:2015-03-06T15:31:34.706+0000:I'm using windows too without any problem.
antoine.dessaigne:1427100492:2015-03-23T16:48:12.993+0000:1427100492:2015-03-23T16:48:12.993+0000:Claus,

Does it still fail in your environment ?
davsclaus:1427101962:2015-03-23T17:12:42.229+0000:1427101962:2015-03-23T17:12:42.229+0000:Yes I wonder if I use a different platform encoding that you.

> Default locale: en_US, platform encoding: Cp1252



{code}
E:\workspace\camel\components\camel-univocity-parsers [master]> mvn --version
Java HotSpot(TM) Client VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T22:58:10+02:00)
Maven home: c:\maven
Java version: 1.8.0_40, vendor: Oracle Corporation
Java home: C:\Java\jdk1.8.0_40\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 7"", version: ""6.1"", arch: ""x86"", family: ""dos""
E:\workspace\camel\components\camel-univocity-parsers [master]> mvn clean install
Java HotSpot(TM) Client VM warning: ignoring option MaxPermSize=512m; support was removed in 8.0
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: UniVocity Parsers 2.16-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-univocity-parsers ---
[INFO] Deleting E:\workspace\camel\components\camel-univocity-parsers\target
[INFO]
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-univocity-parsers ---
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-univocity-parsers ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ camel-univocity-parsers ---
[INFO]
[INFO] --- camel-package-maven-plugin:2.16-SNAPSHOT:prepare-components (default) @ camel-univocity-parsers ---
[INFO] Generated E:\workspace\camel\components\camel-univocity-parsers\target\generated\camel\dataformats\META-INF\servi
ces\org\apache\camel\dataformat.properties containing 3 Camel dataformats: univocity-csv univocity-fixed univocity-tsv
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-univocity-parsers ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-univocity-parsers ---
[INFO] Compiling 7 source files to E:\workspace\camel\components\camel-univocity-parsers\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-univocity-parsers ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 7 resources
[INFO] Copying 3 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-univocity-parsers ---
[INFO] Compiling 16 source files to E:\workspace\camel\components\camel-univocity-parsers\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.16:test (default-test) @ camel-univocity-parsers ---
[INFO] Surefire report directory: E:\workspace\camel\components\camel-univocity-parsers\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.843 sec - in org.apache.camel.dataformat.univocity.Uni
VocityCsvDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 sec - in org.apache.camel.dataformat.univocity.Uni
VocityCsvDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.apache.camel.dataformat.univocity.UniVoc
ityCsvDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.594 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityCsvDataFormatUnmarshalSpringTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest)  Time elap
sed: 0.265 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=29. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.csv.CsvParser.parseValue(CsvParser.java:81)
        at com.univocity.parsers.csv.CsvParser.parseField(CsvParser.java:125)
        at com.univocity.parsers.csv.CsvParser.parseRecord(CsvParser.java:67)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator(
UniVocityCsvDataFormatUnmarshalSpringTest.java:117)

Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.047 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityCsvDataFormatUnmarshalTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest)  Time elapsed: 0
.016 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=29. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.csv.CsvParser.parseValue(CsvParser.java:81)
        at com.univocity.parsers.csv.CsvParser.parseField(CsvParser.java:125)
        at com.univocity.parsers.csv.CsvParser.parseRecord(CsvParser.java:67)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator(UniVoc
ityCsvDataFormatUnmarshalTest.java:119)

Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.703 sec - in org.apache.camel.dataformat.univocity.Uni
VocityFixedWidthDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 sec - in org.apache.camel.dataformat.univocity.Uni
VocityFixedWidthDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.apache.camel.dataformat.univocity.UniVoc
ityFixedWidthDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.516 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest)  Ti
me elapsed: 0.094 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=39. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.fixed.FixedWidthParser.readValue(FixedWidthParser.java:138)
        at com.univocity.parsers.fixed.FixedWidthParser.parseRecord(FixedWidthParser.java:91)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIt
erator(UniVocityFixedWidthDataFormatUnmarshalSpringTest.java:117)

Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityFixedWidthDataFormatUnmarshalTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest)  Time ela
psed: 0 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=39. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.fixed.FixedWidthParser.readValue(FixedWidthParser.java:138)
        at com.univocity.parsers.fixed.FixedWidthParser.parseRecord(FixedWidthParser.java:91)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest.shouldUnmarshalUsingIterator
(UniVocityFixedWidthDataFormatUnmarshalTest.java:118)

Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.671 sec - in org.apache.camel.dataformat.univocity.Uni
VocityTsvDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.062 sec - in org.apache.camel.dataformat.univocity.Uni
VocityTsvDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.apache.camel.dataformat.univocity.UniVoc
ityTsvDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityTsvDataFormatUnmarshalSpringTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest)  Time elap
sed: 0 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=29. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.tsv.TsvParser.parseField(TsvParser.java:103)
        at com.univocity.parsers.tsv.TsvParser.parseRecord(TsvParser.java:63)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator(
UniVocityTsvDataFormatUnmarshalSpringTest.java:117)

Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE! - in org.apache.camel.dataformat.
univocity.UniVocityTsvDataFormatUnmarshalTest
shouldUnmarshalUsingIterator(org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest)  Time elapsed: 0
 sec  <<< ERROR!
com.univocity.parsers.common.TextParsingException: Error processing input: , line=3, char=29. Content parsed: [three]
        at sun.nio.cs.StreamDecoder.ensureOpen(StreamDecoder.java:46)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:148)
        at java.io.InputStreamReader.read(InputStreamReader.java:184)
        at com.univocity.parsers.common.input.DefaultCharInputReader.reloadBuffer(DefaultCharInputReader.java:71)
        at com.univocity.parsers.common.input.AbstractCharInputReader.updateBuffer(AbstractCharInputReader.java:103)
        at com.univocity.parsers.common.input.AbstractCharInputReader.nextChar(AbstractCharInputReader.java:141)
        at com.univocity.parsers.tsv.TsvParser.parseField(TsvParser.java:103)
        at com.univocity.parsers.tsv.TsvParser.parseRecord(TsvParser.java:63)
        at com.univocity.parsers.common.AbstractParser.parseNext(AbstractParser.java:181)
        at org.apache.camel.dataformat.univocity.Unmarshaller$RowIterator.next(Unmarshaller.java:118)
        at org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator(UniVoc
ityTsvDataFormatUnmarshalTest.java:118)


Results :

Tests in error:
  UniVocityCsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityCsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:119 » TextParsing
  UniVocityFixedWidthDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityFixedWidthDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:118 » TextParsing
  UniVocityTsvDataFormatUnmarshalSpringTest.shouldUnmarshalUsingIterator:117 » TextParsing
  UniVocityTsvDataFormatUnmarshalTest.shouldUnmarshalUsingIterator:118 » TextParsing

Tests run: 115, Failures: 0, Errors: 6, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18.344 s
[INFO] Finished at: 2015-03-23T18:13:22+01:00
[INFO] Final Memory: 16M/46M
[INFO] ------------------------------------------------------------------------
[WARNING] The requested profile ""jube"" could not be activated because it does not exist.
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.16:test (default-test) on project camel-
univocity-parsers: There are test failures.
[ERROR]
[ERROR] Please refer to E:\workspace\camel\components\camel-univocity-parsers\target\surefire-reports for the individual
 test results.
[ERROR] -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
E:\workspace\camel\components\camel-univocity-parsers [master]>
{code}
antoine.dessaigne:1427104851:2015-03-23T18:00:51.180+0000:1427104851:2015-03-23T18:00:51.180+0000:My default locale is fr_FR, same encoding. Here what I have for the same commands
{noformat}
U:\sources\camel\components\camel-univocity-parsers>mvn --version
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T18:29:23+01:00)
Maven home: T:\opt\apache-maven-3.2.5
Java version: 1.7.0_76, vendor: Oracle Corporation
Java home: T:\opt\jdk-1.7.0_76\jre
Default locale: fr_FR, platform encoding: Cp1252
OS name: ""windows 8.1"", version: ""6.3"", arch: ""amd64"", family: ""windows""
U:\sources\camel\components\camel-univocity-parsers>mvn clean install
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: UniVocity Parsers 2.16-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-univocity-parsers ---
[INFO] Deleting U:\sources\camel\components\camel-univocity-parsers\target
[INFO]
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-univocity-parsers ---
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-univocity-parsers ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ camel-univocity-parsers ---
[INFO]
[INFO] --- camel-package-maven-plugin:2.16-SNAPSHOT:prepare-components (default) @ camel-univocity-parsers ---
[INFO] Generated U:\sources\camel\components\camel-univocity-parsers\target\generated\camel\dataformats\META-INF\services\org\apache\camel\dataformat.properties containing 3 Camel dataformats: univocity-csv univocity-fixed univocity-tsv
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-univocity-parsers ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-univocity-parsers ---
[INFO] Compiling 7 source files to U:\sources\camel\components\camel-univocity-parsers\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-univocity-parsers ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 7 resources
[INFO] Copying 3 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-univocity-parsers ---
[INFO] Compiling 16 source files to U:\sources\camel\components\camel-univocity-parsers\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.16:test (default-test) @ camel-univocity-parsers ---
[INFO] Surefire report directory: U:\sources\camel\components\camel-univocity-parsers\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.99 sec - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 sec - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.988 sec - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.081 sec - in org.apache.camel.dataformat.univocity.UniVocityCsvDataFormatUnmarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.707 sec - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.673 sec - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 sec - in org.apache.camel.dataformat.univocity.UniVocityFixedWidthDataFormatUnmarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.569 sec - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatMarshalTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.564 sec - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalSpringTest
Running org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 sec - in org.apache.camel.dataformat.univocity.UniVocityTsvDataFormatUnmarshalTest

Results :

Tests run: 115, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:bundle (default-bundle) @ camel-univocity-parsers ---
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for !org.apache.camel.dataformat.univocity.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for com.thoughtworks.xstream.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for freemarker.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for javax.persistence.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for net.sf.flatpack.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for net.sf.saxon.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.antlr.stringtemplate.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.abdera.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.commons.httpclient.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.commons.logging.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.cxf.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.lucene.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.qpid.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.solr.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.velocity.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.apache.xmlbeans.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.ccil.cowan.tagsoup.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.eclipse.jetty.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.mortbay.cometd.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.osgi.framework*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.slf4j.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.springframework.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.springframework.ws.*
[WARNING] Bundle org.apache.camel:camel-univocity-parsers:bundle:2.16-SNAPSHOT : Did not find matching referal for org.springframework.xml.*
[INFO]
[INFO] --- maven-site-plugin:3.3:attach-descriptor (attach-descriptor) @ camel-univocity-parsers ---
[INFO]
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-univocity-parsers ---
[INFO] Checking legal files in: camel-univocity-parsers-2.16-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.5.1:install (default-install) @ camel-univocity-parsers ---
[INFO] Installing U:\sources\camel\components\camel-univocity-parsers\target\camel-univocity-parsers-2.16-SNAPSHOT.jar to C:\Users\adessaigne\.m2-camel\repository\org\apache\camel\camel-univocity-parsers\2.16-SNAPSHOT\camel-univocity-parsers-2.16-SNAPSHOT.jar
[INFO] Installing U:\sources\camel\components\camel-univocity-parsers\pom.xml to C:\Users\adessaigne\.m2-camel\repository\org\apache\camel\camel-univocity-parsers\2.16-SNAPSHOT\camel-univocity-parsers-2.16-SNAPSHOT.pom
[INFO] Installing U:\sources\camel\components\camel-univocity-parsers\target\generated\camel\dataformats\META-INF\services\org\apache\camel\dataformat.properties to C:\Users\adessaigne\.m2-camel\repository\org\apache\camel\camel-univocity-parsers\2.16-SNAPSHOT\camel-univocity-parsers-2.16-SNAPSHOT-camelDataFormat.properties
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:install (default-install) @ camel-univocity-parsers ---
[INFO] Installing org/apache/camel/camel-univocity-parsers/2.16-SNAPSHOT/camel-univocity-parsers-2.16-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.841 s
[INFO] Finished at: 2015-03-23T18:58:13+01:00
[INFO] Final Memory: 28M/487M
[INFO] ------------------------------------------------------------------------
{noformat}

I don't know how the locale could change something here.
antoine.dessaigne:1427105345:2015-03-23T18:09:05.780+0000:1427105345:2015-03-23T18:09:05.780+0000:I've found how to change the locale to en_US and it's not failing :("
0,CAMEL-8441,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Thomas Diesler,0,3,2015-03-05 09:00:01+00:00,2015-03-06 09:43:51+00:00,"For wildfly-camel we have to redefine a number of camel 3rd party dependencies like this



        <!-- Camel version -->
        <version.apache.camel>2.14.1</version.apache.camel>
        
        <!-- Camel 3rd party versions for artefacts that are not defined in the BOM -->
        <version.apache.abdera>1.1.3</version.apache.abdera>
        <version.apache.activemq>5.10.0</version.apache.activemq>
        <version.apache.cxf>3.0.2</version.apache.cxf>
        <version.apache.lucene>4.6.1</version.apache.lucene>
        <version.apache.mina>2.0.7</version.apache.mina>
        <version.beanshell>2.0b5</version.beanshell>
        <version.hapi>2.2</version.hapi>




These should probably come from the camel BOM","githubbot:1425517341:2015-03-05T09:02:21.551+0000:1425517341:2015-03-05T09:02:21.551+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/420

    [CAMEL-8441] Add required 3rd party dependencies to the BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel bom

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/420.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #420
    
----
commit c896681e041e49303f0dcbefa1b560a5c7b9410b
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2015-03-05T09:00:56Z

    [CAMEL-8441] Add required 3rd party dependencies to the BOM

----

njiang:1425576933:2015-03-06T01:35:33.133+0000:1425576933:2015-03-06T01:35:33.133+0000:Applied the patch into camel master branch and fix some build error and warning message.
githubbot:1425606231:2015-03-06T09:43:51.292+0000:1425606231:2015-03-06T09:43:51.292+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/420
"
0,CAMEL-8440,Test,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-03-05 08:04:34+00:00,2015-03-05 16:26:29+00:00,"The following components have/may have unit test failures



jms
apns
aws
beanstalk
barcode
-elasticsearch
gae
hdfs
hdfs2
mina
mina2
mqtt
quartz2
restlet
univercity-parser
zookeeper","davsclaus:1425538341:2015-03-05T14:52:21.071+0000:1425538341:2015-03-05T14:52:21.071+0000:There is likely an issue in jetty with stream caching and files with windows, causing the file to not be deleted.


Failed tests:
  HttpStreamCacheFileResponseTest.testStreamCacheToFileShouldBeDeletedInCaseOfResponse:51->Assert.assertEquals:555->Asse
rt.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 There should be no files expected:<0> but was:<1>

Tests run: 303, Failures: 1, Errors: 0, Skipped: 9


davsclaus:1425543989:2015-03-05T16:26:29.010+0000:1425543989:2015-03-05T16:26:29.010+0000:There is a separate ticket about the univerciry"
0,CAMEL-8439,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Jyrki Ruuskanen,0,3,2015-03-05 07:29:08+00:00,2015-03-05 07:56:58+00:00,"Instead of skipping Camel context's start() when active property is false, we should call Camel context's setAutoStartup(false). This way Camel context will start without starting any of the routes, and allows us to see and control the ""inactive"" context through JMX/Jolokia/hawtio.","githubbot:1425511867:2015-03-05T07:31:07.011+0000:1425511867:2015-03-05T07:31:07.011+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/419

    CAMEL-8439 Use setAutoStartup(false) instead of skipping start()

    https://issues.apache.org/jira/browse/CAMEL-8439

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel scr-use-autostart

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/419.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #419
    
----
commit b331c7a074d09c9350efd1c1573aaf1865ebc79a
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-03-04T19:06:31Z

    Use setAutoStartup(false)

----

davsclaus:1425512150:2015-03-05T07:35:50.571+0000:1425512150:2015-03-05T07:35:50.571+0000:Thanks for the PR
githubbot:1425513418:2015-03-05T07:56:58.300+0000:1425513418:2015-03-05T07:56:58.300+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/419
"
0,CAMEL-8438,Improvement,Major,2.14.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Serge Smertin,0,2,2015-03-04 20:11:45+00:00,2022-09-02 08:59:45+00:00,"After some low-level debugging i've figured out that it's not possible to use optimistic locking for HazelcastAggregationRepository, as marshalled exchanges have different representation on binary level and some of distributed atomic update operations by design rely on it. So it might be also relevant for aggregation repositories with optimistic locking for other backends. Problem is that inHeaders of DefaultExchangeHolder is marshalled as LinkedHashMap, which may change physical order of entries, still giving same hash code after unmarshalling.


As workaround - create special class for holding all aggregation properties and not to use more than one header. 


How to reproduce:
create a unit test with embedded hazelcast instance, hazecast agg. repository and let newExchange's have more than one header.","nfx:1425618662:2015-03-06T13:11:02.586+0000:1425618662:2015-03-06T13:11:02.586+0000:Final conclusion - optimistic locking for HazelcastAggregationRepository does not work at all:
- test cases don't cover complex objects like hasmaps and multiple headers
- every time exchange is completed with predicate or with forced shutdown, new property is being added by AggregateProcessor, so cache.remove(key, holder) is always false. so that means, exchange would never be removed, as modified one would have new property set. It might be a good idea to do compare-and-swap on holder without properties. or creating different implementation of holder. or extending a holder. 
- HazelcastAggregationRepository is one of the few final classes within the project, which makes me sad and incapable of extending it

davsclaus:1425945978:2015-03-10T08:06:18.999+0000:1425945978:2015-03-10T08:06:18.999+0000:You are welcome to work on a patch to not make it final, but also to try to fix/improve this
davsclaus:1436410354:2015-07-09T10:52:34.639+0000:1436410354:2015-07-09T10:52:34.639+0000:I made the class able to extend in Camel 2.16 onwards."
0,CAMEL-8437,Bug,Major,2.13.0,"2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Antoine DESSAIGNE,2,3,2015-03-04 15:52:54+00:00,2015-03-14 20:10:54+00:00,"The simple language fails calling methods with parameters that contains "")"".


First use case, direct use:



<route>
    <from uri=""timer:foo?repeatCount=1""/>
    <setBody>
        <groovy>["")"", 42]</groovy>
    </setBody>
    <setHeader headerName=""test"">
        <simple>${body.contains("")"")}</simple>
    </setHeader>
    <log message=""Body: ${body}, contains: ${header.test}""/>
</route>




It throws an error.


Second use case, with a usage of a parameter:



<route>
    <from uri=""timer:foo?repeatCount=1""/>
    <setBody>
        <groovy>["")"", 42]</groovy>
    </setBody>
    <setProperty propertyName=""query"">
        <constant>)</constant>
    </setProperty>
    <setHeader headerName=""test"">
        <simple>${body.contains(${property.query})}</simple>
    </setHeader>
    <log message=""Body: ${body}, contains: ${header.test}""/>
</route>




It doesn't throw any exception but doesn't work.",antoine.dessaigne:1426335054:2015-03-14T20:10:54.536+0000:1426335054:2015-03-14T20:10:54.536+0000:Thanks a lot for fixing this bug.
0,CAMEL-8436,Bug,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Henryk Konsek,Dmitry Drozdov,0,3,2015-03-04 14:52:14+00:00,2015-03-04 21:04:08+00:00,"In our project we have several classes that extend SpringRouteBuilder and that are annotated with @Component.
Some days ago we've noticed that most of them stopped being initialized on application startup.


Found out that our issues started from this commit:
https://github.com/apache/camel/commit/6bcc0b6110a762623888ded294c78dc168a18e75


If I roll it back everything is fine again.","davsclaus:1425452656:2015-03-04T15:04:16.147+0000:1425452656:2015-03-04T15:04:16.147+0000:[~hekonsek] wonder if we can rollback that commit to fix that issue reported? Or if not would be good if you could take a look today/tomorrow before Camel 2.15.0 is being cut.
hekonsek:1425453629:2015-03-04T15:20:29.281+0000:1425453655:2015-03-04T15:20:55.485+0000:Hi,

Actually that commit is important one as it prevents {{CamelContext}} from premature initialization.

[~di_m_an] Can you provide me a minimal Maven example reproducing your issue? I can't see this kind of behavior in our tests nor in the projects that uses camel-spring-boot.

Cheers!
hekonsek:1425459583:2015-03-04T16:59:43.584+0000:1425459583:2015-03-04T16:59:43.584+0000:I committed some changes to the {{RoutesCollector}} lifecycle and added extra tests demonstrating that {{@Component}} scanning works as expected (see {{ComponentRouteTest}}). Can you give the current master version a try?
di_m_an:1425459826:2015-03-04T17:03:46.655+0000:1425459826:2015-03-04T17:03:46.655+0000:Managed to reproduce the issue in minimal project - gradle one, not maven, sorry.
Attached the project.

If you {{./gradlew run}} it, you get:
{noformat}
2015-03-04 19:46:28.102  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: Endpoint[direct://1]
2015-03-04 19:46:28.116  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route2 started and consuming from: Endpoint[direct://2]
2015-03-04 19:46:28.131  INFO 32637 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route3 started and consuming from: Endpoint[direct://5]
{noformat}

If you do {{mv src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java.thisworks src/main/java/org/apache/camel/spring/boot/CamelAutoConfiguration.java}} and run it once again, you get:
{noformat}
2015-03-04 19:48:15.225  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: Endpoint[direct://1]
2015-03-04 19:48:15.241  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route2 started and consuming from: Endpoint[direct://2]
2015-03-04 19:48:15.265  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route3 started and consuming from: Endpoint[direct://3]
2015-03-04 19:48:15.286  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route4 started and consuming from: Endpoint[direct://4]
2015-03-04 19:48:15.309  INFO 464 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route5 started and consuming from: Endpoint[direct://5]
{noformat}

Something wrong is with this injection:
{code}
    @Resource
    private ProducerTemplate producerTemplate;
{code}
only the first route that has it, is initialized.

In the real project ProducerTemplate is injected in some other beans and they are injected in the SpringRouteBuilder ones, and the result is the same.
hekonsek:1425460089:2015-03-04T17:08:09.164+0000:1425460089:2015-03-04T17:08:09.164+0000:Hi Dmitry,

Can you give it a shot against the latest master version? If not, I will do it but not today.

Cheers!
di_m_an:1425460865:2015-03-04T17:21:05.192+0000:1425460865:2015-03-04T17:21:05.192+0000:Tried the latest RoutesCollector - the issue is still there.
hekonsek:1425474248:2015-03-04T21:04:08.686+0000:1425474248:2015-03-04T21:04:08.686+0000:Nailed it :) Revision - 1c1953ac4dc2319403101b5f04a31e53cdf615f1 . Great thanks for the example!

The problem was that creation of {{ProducerTemplate}} forced {{CamelContext}} to start too early. I changed {{RoutesCollector}} to collect routes when {{ApplicationContext}} is refreshed and then start {{CamelContext}}."
0,CAMEL-8435,Bug,Major,2.12.3,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Frédéric Pirson,0,3,2015-03-04 14:07:24+00:00,2015-07-09 10:44:17+00:00,"When a direct route is accessed before it is started (for example when an activemq route is started and use this direct route and there is 1 waiting message), it indicates that there is No consumers available for endpoint for the current message and all the next messages.


<route>
   <errohandler ../> <!-- To deadletter queue--> 
   <from uri=""activemq:testQueue"">
    <to uri=""direct:test"">
</route>


<route>
   <from uri=""direct:test"">
    <to uri=""log:..."">
</route>


stop the application, add a message in the testQueue, set a break point in DefaultCamelContext method doStartOrResumeRoutes. Ensure that the activemq route is started and the message is consumed, the message will go to the deadletter queue because no consumer available. That is correct. but when the direct roure is started and a new message is sent, it still go in the deadletter queue.","davsclaus:1425449576:2015-03-04T14:12:56.749+0000:1425449576:2015-03-04T14:12:56.749+0000:Camel 2.12 is EOL. Please follow the advice here
http://camel.apache.org/support
raulvk:1426746371:2015-03-19T14:26:11.768+0000:1426746371:2015-03-19T14:26:11.768+0000:[~fpirson] - could you please provide a unit test so we can reproduce on newer (supported) versions of Camel? Thanks.
davsclaus:1436409847:2015-07-09T10:44:07.502+0000:1436409847:2015-07-09T10:44:07.502+0000:You can use the block option, or change the order of the starting of the routes, so its started before the amq route."
0,CAMEL-8434,Bug,Major,"2.14.2, 2.15.0",None,"
None
",Resolved,Fixed,"2.14.3, 2.15.0",Grzegorz Grzybek,Grzegorz Grzybek,0,2,2015-03-04 10:13:32+00:00,2015-03-05 18:36:18+00:00,It is not possible to consume an empty file with camel HDFS2 consumer.,"davsclaus:1425542260:2015-03-05T15:57:40.947+0000:1425542260:2015-03-05T15:57:40.947+0000:I dont think this works as intended. As the consumer has no idempotency, so you would essentially end up reading the same file over and over again.

Adding

        Thread.sleep(5000);

In your empty file tests, causes

java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <49931>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1394)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1376)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)
	at org.apache.camel.component.hdfs.HdfsConsumerTest.testSimpleConsumerWithEmptyFile(HdfsConsumerTest.java:183)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)

eg the file was read 49xxx times.

The hdfs consumer really need a delete | idempotent option as the regular file consumer or something. Not sure what was the original thought behind the hdfs component consumer.


ggrzybek:1425551674:2015-03-05T18:34:34.860+0000:1425551674:2015-03-05T18:34:34.860+0000:Sorry for little mistake.
FIxed in:
* [master|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=c1a74982c6e7d3ab05f40da320099a30d8f26d33]
* [camel-2.14.x|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=b552ceac1c3353e59b1ce261222ac6e91abddd1b]
ggrzybek:1425551778:2015-03-05T18:36:18.984+0000:1425551778:2015-03-05T18:36:18.984+0000:Messages read from hdfs are renamed according to ""readSuffix"" endpoint URI parameter"
0,CAMEL-8403,New Feature,Major,2.14.1,,"
None
",Resolved,Abandoned,None,Unassigned,Daniel Pocock,1,3,2015-02-25 10:05:37+00:00,2022-09-02 08:58:45+00:00,"It is quite common to send emails that have a signature but no encryption.


A typical example of such an email is a release announcement from a free software project.


The marshalled message body should be human-readable but will either:
a) have an ASCII armored signature at the bottom
b) have a signature in a MIME attachment


Maybe the PGP marshaller should just put the binary version of the PGP signature in a header and then other data formats can be used for either the ASCII-armoring or conversion to MIME?


However, if the message body is already MIME (possibly with attachments), then the PGP data format may need to be able to sign each attachment and then the marshalled data will also be a MIME message but with additional signature attachments.


Below is an example of the most simple case, clearsigning ""Hello world"" with the gpg command.  The PGP data format should be able to both marshal the body ""Hello world"" into a message like that below and also unmarshal/verify it.


When unmarshalling the message below, the signature stuff should all be removed and the body will just become ""Hello world"" again.


$ echo ""Hello world"" | gpg --clearsign
----BEGIN PGP SIGNED MESSAGE----
Hash: SHA256


Hello world
----BEGIN PGP SIGNATURE----
Version: GnuPG v1.4.12 (GNU/Linux)


iQIcBAEBCAAGBQJU7ZjuAAoJEOm1uwJp1aqDcqwQAKVl4YQyL9VG+Vwy7y5W5Frb
mlhqibqquaYFc6HQvw+RLy9zicowdoMiXK4NRPxzTm5+PFxHXjgVMSFSDWNvuO6E
fzzkGOnyZdzPbFq+d0q1uMs4EnqfqHX/Y8v6PyWPdyHD8Isu7if0xpGNXbWGZMQn
jNGQzvj2t1lYqDP9DJDnctROI5qVDzXqR69pmgG+J9ZzaZW4EJmkitt9BJIath0a
ueVc5XJroGGj7KBJSyQAbpEhEO6b9Kz4cXCUqUfHTdKgVjO9UBfAZpmCappwMbDH
yvaAvUq1lAIncIS5ocWVvz66qG/tver5jrruGU5ptEwn9At/ZyKp88nvM09hNzuN
4Q6dFcytKtnEc2mSDeQ3/IFgT0FVU9vFhP8UusdfHF5GOBfsTWLc0RJdofCo27JN
jy1fHj9LroM7m0S/3ln7yQaa9qzatCOctzqq4d0xo8zX5WZ/7Eo9gwYgNUKg0WsU
PgZrzov0ImeULJvj43i2IMfojQSAN7aXnVPW817stIoKmkZpavH4TutfV6DDgbGa
UfsiYQ3BX/o/cfPB88SWmEMWZvP7syDwxK+iBzPDtwAexIAYP9NURfyWZvWe1ZBl
zdR/6pN8VR6/R17jJr3YCjpFlDs4zG67QoI8qSl91TH2h4V7uPQbaOUaSdAoh9Z6
TXpyXYPk5GTGx8rf5v5E
=Qbwp
----END PGP SIGNATURE----",
0,CAMEL-8402,Bug,Major,2.14.1,2.16.0,"
None
",Resolved,Implemented,2.16.0,Claus Ibsen,Stephan Siano,0,3,2015-02-25 08:39:23+00:00,2016-01-09 14:36:33+00:00,"The CxfPayloadConverter has a mechanism that replaces the first bodySource of the source CxfMessage with a newly created DOMSource.


This mechanism does not work if the conversion result is a Source itself (e.g. a SAXSource). In this case the bodySource is first replaced by the DOMSource and afterwards replaced again by the conversion result (the SAXSource) If that one is read, the data is gone.


While the first replacement of the source is questionable, the second replacement is plain wrong.


The attached patch will just remove the code that does the second replacement.","pascalschumacher:1451789486:2016-01-03T10:51:26.561+0000:1451789486:2016-01-03T10:51:26.561+0000:Any reasons why this patch was not applied yet?
davsclaus:1452321393:2016-01-09T14:36:33.042+0000:1452321393:2016-01-09T14:36:33.042+0000:There has been other patches / work on CXF that has resolved and change these type coverters."
0,CAMEL-8401,Bug,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Willem Jiang,Chris Pimlott,0,1,2015-02-25 01:06:08+00:00,2015-02-26 13:02:08+00:00,"According to the docs, when using CamelOverruleFileName, the original CamelFileName should be restored after the overruling name is used once.  This is not working when using a remote file endpoint, such as FTP.


From the description of CAMEL-5269, it seems like this worked once, but it doesn't seem to anymore.","pimlottc:1424798676:2015-02-25T01:24:36.559+0000:1424798676:2015-02-25T01:24:36.559+0000:See https://github.com/apache/camel/pull/408 for a quick fix
"
0,CAMEL-8400,Improvement,Minor,"2.14.2, 2.15.0",2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Mark Mindenhall,0,2,2015-02-24 19:31:39+00:00,2015-02-28 06:42:36+00:00,"I'm beginning to work with MQTT brokers, and have found that having an endpoint only able to subscribe to a single topic is limiting.  Looking at the code, the underlying implementation (fusesource mqtt-client) accepts an array of Topics when creating a subscription.  I have modified the camel-mqtt component to allow for a ""subscribeTopicNames"" option, which expects a comma-delimited list of topics that will be subscribed.


I'm attaching a patch (after creating the issue) that includes additional unit tests for this functionality.  It would be really great if this could be accepted before the 2.14.2 release is cut!


A couple of notes:



If the new ""subscribeTopicNames"" option is specified, anything specified for the existing ""subscribeTopicName"" option will be ignored.  Long term, it doesn't make sense to maintain both options.  Should the singular version be deprecated?  If so, I can submit another patch that deprecates that option within the code.
I don't know how to submit a ""patch"" for the component documentation.  Here's something that would work:






Property
Default
Description


subscribeTopicName
 
The name of the Topic to subscribe to for messages. Deprecated since 2.14.2 (use subscribeTopicNames instead).


subscribeTopicNames
 
Since Camel 2.14.2.  A comma-delimited list of Topics to subscribe to for messages.    Note that each item of this list can contain MQTT wildcards ('+' and/or '#'), in order to subscribe to topics matching a certain pattern within a hierarchy.  For example, '+' is a wildcard for all topics at a level within the hierarchy, so if a broker has topics ""topics/one"" and ""topics/two"", then ""topics/+"" can be used to subscribe to both.  A caveat to consider here is that if the broker adds ""topics/three"", the route would also begin to receive messages from that topic.","mmindenhall:1424777908:2015-02-24T19:38:28.775+0000:1424777908:2015-02-24T19:38:28.775+0000:Adds support for subscribing to multiple MQTT topics (including tests).
njiang:1424828303:2015-02-25T09:38:23.692+0000:1424828303:2015-02-25T09:38:23.692+0000:Hi Mark,

We usually don't add new features into a patch branch, so I will merged the patch into Camel master which means it will be a part of Camel 2.15.x."
0,CAMEL-8399,Improvement,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Gareth Western,0,2,2015-02-24 11:50:51+00:00,2015-02-26 14:25:32+00:00,"CAMEL-7592 introduced the ability to customise the XStream mode, however org.apache.camel.dataformat.xstream.JsonDataFormat#createXStream still sets the mode explicitly to NO_REFERENCES.


I think someone just has to update the method to do the following instead:



                if (getMode() != null) {
                    xs.setMode(getModeFromString(getMode()));
                }","westerg:1424754825:2015-02-24T13:13:45.321+0000:1424755591:2015-02-24T13:26:31.304+0000:Perhaps it's not that simple: XStream does not appear to handle cyclic dependencies for JSON, only XML. As it states on [the XStream page|http://xstream.codehaus.org/json-tutorial.html]: {quote}Since JSON has no possibility to express references, you should always set the NO_REFERENCES mode writing JSON.{quote}

This makes sense, although I am slightly confused because I tested the proposed solution in our own project by extending JsonDataFormat, and it appeared to work. So I cloned the Apache repo and wrote a patch/test for camel-xstream however that fails. I'll look closer at the reason.
davsclaus:1424926636:2015-02-26T12:57:16.392+0000:1424926636:2015-02-26T12:57:16.392+0000:Thanks for reporting.
westerg:1424931932:2015-02-26T14:25:32.310+0000:1424931932:2015-02-26T14:25:32.310+0000:Thanks for the quick fix, [~davsclaus], but did you see my previous comment? I'm not sure that what I originally proposed makes sense when using Json. Or does it?"
0,CAMEL-8398,Bug,Major,2.11.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,walid krifi,0,2,2015-02-24 11:30:18+00:00,2015-02-26 12:58:12+00:00,"Files under a sared folder (mapped folder) are not consumed.
A warning is loggued 
WARN - [FileEndpoint:61] Cannot auto create starting directory: S:\Folder\work
with S: is a mapped drive on a remote folder","davsclaus:1424926692:2015-02-26T12:58:12.542+0000:1424926692:2015-02-26T12:58:12.542+0000:Please use the mailing list / user forum to get help first. 

A good place is to read this page about how to get help
http://camel.apache.org/support"
0,CAMEL-8397,Improvement,Major,2.14.1,"2.15.3, 2.16.0, 2.14.4","

camel-salesforce
salesforce
salesforce-analytics

",Resolved,Fixed,"2.15.3, 2.16.0, 2.14.4",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-02-23 22:28:56+00:00,2015-06-25 03:52:10+00:00,Salesforce has recently introduced an Analytics API. Camel Salesforce component should be updated to support this API.,"dhirajsb:1435175530:2015-06-25T03:52:10.547+0000:1435175530:2015-06-25T03:52:10.547+0000:Fix merged into master, camel-2.15.x, camel-2.14.x branches"
0,CAMEL-8396,Improvement,Major,2.14.1,2.19.0,"

camel
camel-salesforce
salesforce

",Resolved,Implemented,2.19.0,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,3,2015-02-23 22:26:02+00:00,2017-11-07 12:24:13+00:00,"Since API 22.0, a number of new resources and operations were added to Salesforce REST API for working with organization limits, recently viewed information, approval processes and rules, and event notification. 
Salesforce component should be updated to support these new operations in the REST API. 
See https://www.salesforce.com/us/developer/docs/api_rest/ for more information.","zregvart:1478828815:2016-11-11T09:46:55.572+0000:1478828815:2016-11-11T09:46:55.572+0000:Linking to CAMEL-10471 that tracks implementation of organization limits and CAMEL-10472 that tracks implementation of recently viewed information.
zregvart:1479458876:2016-11-18T16:47:56.209+0000:1479458876:2016-11-18T16:47:56.209+0000:Linking also to CAMEL-10498 that tracks implementation of process approvals.
davsclaus:1488068478:2017-02-26T08:21:18.048+0000:1488068478:2017-02-26T08:21:18.048+0000:Zoran / Dhiraj - Is this not done, are we not up to date with newer salesforce APIs?
zregvart:1488080228:2017-02-26T11:37:08.105+0000:1488080228:2017-02-26T11:37:08.105+0000:[~davsclaus] out of that list we are missing only rules, but it's an ongoing effort to support Salesforce, as they keep adding new APIs with each release.
zregvart:1510028637:2017-11-07T12:23:57.854+0000:1510028637:2017-11-07T12:23:57.854+0000:I think we can resolve this, much of the work has been done and we can open new issues for specific APIs that we need to support."
0,CAMEL-8395,Bug,Major,2.14.1,"2.14.2, 2.15.0","
None
",Closed,Fixed,"2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-02-23 20:41:41+00:00,2015-02-23 22:30:04+00:00,Salesforce inbuilt/user customizable picklist types may be empty with no values defined. This breaks sobject-picklist.vm. It should instead generate an empty Enum with no values.,dhirajsb:1424701804:2015-02-23T22:30:04.289+0000:1424701804:2015-02-23T22:30:04.289+0000:Fixed on master and 2.14.x branches. 
0,CAMEL-8394,Improvement,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,3,2015-02-23 07:12:30+00:00,2015-03-03 14:39:56+00:00,"The configuration classes should be pure configuration, eg for users to configure options.


Any state such as client in use et all should be stored on endpoint or component.


eg move the options from DockerClientProfile to DockerConfiguration so there is only 1 class.


And move the map with DockerClient to the component.","githubbot:1424848843:2015-02-25T15:20:43.648+0000:1424848843:2015-02-25T15:20:43.648+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/409

    CAMEL-8394 Consolidated configurations and moved client state to component

    Consolidated user configurations by removing DockerClientProfile from DockerConfiguration class. Removed map of clients from configuration class to component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8394

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/409.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #409
    
----
commit 987c8c15ca8cd29381dfa9dfc57814e693740b01
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-02-25T15:18:12Z

    CAMEL-8394 Consolidated configurations and moved client state to component

----

davsclaus:1424849287:2015-02-25T15:28:07.127+0000:1424849287:2015-02-25T15:28:07.127+0000:Thanks a lot for the quick PR for this. Great we made this into the next release.
githubbot:1425364796:2015-03-03T14:39:56.923+0000:1425364796:2015-03-03T14:39:56.923+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/409
"
0,CAMEL-8393,Bug,Major,2.14.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Minh Tran,0,3,2015-02-23 05:27:55+00:00,2015-09-16 13:04:57+00:00,"When redelivery occurs for dynamic routers, the properties are being kept. So if the dynamic router uses a property to store the current state such as used in example http://camel.apache.org/dynamic-router.html , then the redelivery actually ends up skipping the endpoint that caused the exception


Here is my dynamic router class



public class Router {
	public String route(Exchange exchange) {
		Boolean invoked = exchange.getProperty(""invoked"", Boolean.class);
		if (invoked == null) {
			exchange.setProperty(""invoked"", true);
			return ""mock:route"";
		} else
			return null;
	}
}




Here is my unit test class



@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(loader = CamelSpringDelegatingTestContextLoader.class)
public class DynamicRouterTest {

	@Produce(uri = ""direct:start"")
	private ProducerTemplate producerTemplate;

	@EndpointInject(uri = ""mock:end"")
	private MockEndpoint end;

	@EndpointInject(uri = ""mock:route"")
	private MockEndpoint route;

	@Configuration
	public static class JavaConfig extends SingleRouteCamelConfiguration {

		@Override
		public RouteBuilder route() {
			return new SpringRouteBuilder() {

				@Override
				public void configure() throws Exception {
					this.getContext().setTracing(true);
					from(""direct:start"").onException(IOException.class).maximumRedeliveries(-1).end()

					.dynamicRouter().method(Router.class).to(""mock:end"");
				}
			};
		}

	}

	@Test
	public void test() throws InterruptedException {
		route.whenAnyExchangeReceived(new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.getIn().setBody(""mock route"");
			}
		});
		route.expectedBodiesReceived(""before"");
		end.expectedBodiesReceived(""mock route"");

		producerTemplate.sendBody(""before"");
		route.assertIsSatisfied();
		end.assertIsSatisfied();
	}

	@Test
	public void test_exception() throws InterruptedException {
		route.whenExchangeReceived(1, new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.setException(new IOException());
			}
		});
		route.whenExchangeReceived(2, new Processor() {

			@Override
			public void process(Exchange exchange) throws Exception {
				exchange.getIn().setBody(""mock route"");
			}
		});

                // this bit fails
		route.expectedBodiesReceived(""before"", ""before"");

		end.expectedBodiesReceived(""mock route"");
		producerTemplate.sendBody(""before"");
		route.assertIsSatisfied();
		end.assertIsSatisfied();
	}
}




The test method runs successfully but the test_exception method which tests the redelivery does not. Fails with ""java.lang.AssertionError: mock://route Received message count. Expected: <2> but was: <1>"" which shows that the dynamic router only called the mock:route once.","davsclaus:1426398285:2015-03-15T13:44:45.971+0000:1426398285:2015-03-15T13:44:45.971+0000:Requires routing slip and dynamic router to include similar outbound error handling that we added to multicast/recipinentlist/splitter.

This requires a fair amount of work to incorporate in camel-core.
davsclaus:1442379897:2015-09-16T13:04:57.730+0000:1442379897:2015-09-16T13:04:57.730+0000:Thanks for reporting"
0,CAMEL-8392,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Lewis John McGibbney,0,4,2015-02-22 22:47:52+00:00,2015-08-20 16:12:45+00:00,"We recently release Apache Gora 0.6 and we are doing the usual rounds now trying to identify which projects consume Gora and require updating.
The Camel-Gora Camel component relies upon Gora 0.4 so the upgrade will be a very good step forward for the Camel-Gora components.
I am tagging in ipolyzos here because he was the original author of the component. 


ipolyzos, I am not suggesting that you do this upgrade, I am merely tagging you here for awareness. 


BTW, it also appears that there is no tag for camel-gora","davsclaus:1424643987:2015-02-23T06:26:27.265+0000:1424643987:2015-02-23T06:26:27.265+0000:Hi

Thanks for reporting. 
On top of your head is there any significant changes we should be aware of doing an upgrade?

lewismc:1424644540:2015-02-23T06:35:40.784+0000:1424644540:2015-02-23T06:35:40.784+0000:Yes.
We have implemented Hadoop Shim support meaning you can use Hadoop 2.5.2 or
1.2.1. There have been some improvements made to the xML mapping
configurations.
We have some improvements for the generated data beans so these will need
to be regenerated as well.
The good thing is that there are no API changes, the API is pretty stable
right now.
I'll try and take a look into a patch very soo. Once I finish my work on
Chukwa.




-- 
*Lewis*

githubbot:1424695624:2015-02-23T20:47:04.974+0000:1424695624:2015-02-23T20:47:04.974+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/407

    CAMEL-8392 - Upgrading Apache Gora version from 0.4 to 0.6

    Hi all,
    
    This PR is related to the following issue:
    https://issues.apache.org/jira/browse/CAMEL-8392
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel camel-8392-update-camel-gora

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/407.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #407
    
----
commit 377ac1ee154f278b285d2f4779bf23d38c7e94e8
Author: ancosen <ancosen@gmail.com>
Date:   2015-02-23T20:44:07Z

    Upgrading Apache Gora version from 0.4 to 0.6

----

acosentino:1424695646:2015-02-23T20:47:26.920+0000:1424695646:2015-02-23T20:47:26.920+0000:Upgrading from Apache Gora 0.4 to 0.6 doesn't affect tests result.


acosentino:1424695668:2015-02-23T20:47:48.334+0000:1424695668:2015-02-23T20:47:48.334+0000:PR submitted:

https://github.com/apache/camel/pull/407

Bye,
Andrea
githubbot:1424696794:2015-02-23T21:06:34.604+0000:1424696794:2015-02-23T21:06:34.604+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/407

acosentino:1424697003:2015-02-23T21:10:03.777+0000:1424697118:2015-02-23T21:11:58.375+0000:Hi Lewis,

You're right. I didn't read your comment. Sorry, my mistake. I've closed the PR. I'd like to work on this issue. So, please consider me for the next developments on camel-gora."
0,CAMEL-8391,Test,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,2,2015-02-22 13:39:18+00:00,2015-03-06 07:21:58+00:00,"The client mode test fails sometimes, getting 2 messages. The 2nd message has empty body.","davsclaus:1425273167:2015-03-02T13:12:47.749+0000:1425273167:2015-03-02T13:12:47.749+0000:I get the test error using java8 with camel-mina (but mina 1.x is EOL and we should not add new functionality into it, so maybe we can remove it instead).

{code}
Running org.apache.camel.component.mina.MinaClientModeTcpTextlineDelimiterTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.902 sec <<< FAILURE! - in org.apache.camel.component.mina.MinaClientModeTcpTextlineDelimiterTest
testMinaRoute(org.apache.camel.component.mina.MinaClientModeTcpTextlineDelimiterTest)  Time elapsed: 0.68 sec  <<< FAILURE!
java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <2>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1394)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1376)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)
	at org.apache.camel.component.mina.MinaClientModeTcpTextlineDelimiterTest.testMinaRoute(MinaClientModeTcpTextlineDelimiterTest.java:44)
{code}
davsclaus:1425273185:2015-03-02T13:13:05.519+0000:1425273185:2015-03-02T13:13:05.519+0000:Failed tests:
  MinaClientModeTcpTextlineDelimiterTest.testMinaRoute:44 mock://result Received message count. Expected: <1> but was: <2>
davsclaus:1425273528:2015-03-02T13:18:48.672+0000:1425273528:2015-03-02T13:18:48.672+0000:The same works for camel-mina2. So IMHO we should remove the invalid functionality in camel-mina.
davsclaus:1425273578:2015-03-02T13:19:38.895+0000:1425273578:2015-03-02T13:19:38.895+0000:[~njiang] see above. Would you mind removing the client mode functionality in camel-mina as it seems failed, and also mina is EOL/deprecated. People should use mina2 or netty.
davsclaus:1425543571:2015-03-05T16:19:31.987+0000:1425543571:2015-03-05T16:19:31.987+0000:I get test failures always on windows in both camel-mina and camel-mina2. But the netty components works.
njiang:1425583238:2015-03-06T03:20:38.318+0000:1425583238:2015-03-06T03:20:38.318+0000:Hi Claus,

I managed to reproduce the error on my windows VirtualBox when the firewall is open by default. When I gave the Java right to access the network, the error went away. I guess it could relate the listener right about it.

So I did some change on the mina server just listen to local loop address, it should resolve the error that you hit.

Regards,

Willem"
0,CAMEL-8390,Test,Major,2.15.0,None,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-22 12:20:16+00:00,2015-03-09 09:55:04+00:00,"Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 6.929 sec <<< FAILURE! - in org.apache.camel.component.cmis.CMISQueryProducerTest
getResultCountFromHeader(org.apache.camel.component.cmis.CMISQueryProducerTest)  Time elapsed: 0.423 sec  <<< ERROR!
java.lang.NoClassDefFoundError: Could not initialize class org.apache.chemistry.opencmis.commons.impl.JaxBHelper
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.unmarshalElement(AtomPubParser.java:396)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspaceElement(AtomPubParser.java:448)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspace(AtomPubParser.java:221)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseServiceDoc(AtomPubParser.java:191)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parse(AtomPubParser.java:138)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.parse(AbstractAtomPubService.java:529)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.getRepositoriesInternal(AbstractAtomPubService.java:719)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:59)
	at org.apache.chemistry.opencmis.client.bindings.impl.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:85)
	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:109)
	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:96)
	at org.apache.camel.component.cmis.CMISTestSupport.createSession(CMISTestSupport.java:102)
	at org.apache.camel.component.cmis.CMISTestSupport.deleteAllContent(CMISTestSupport.java:79)
	at org.apache.camel.component.cmis.CMISTestSupport.setUp(CMISTestSupport.java:166)
	at org.apache.camel.component.cmis.CMISQueryProducerTest.setUp(CMISQueryProducerTest.java:36)",davsclaus:1425269110:2015-03-02T12:05:10.577+0000:1425269110:2015-03-02T12:05:10.577+0000:Works now
0,CAMEL-8389,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2015-02-22 07:21:49+00:00,2015-02-23 04:09:39+00:00,"We should make it easier to configure jackson as a <dataFormat> using the XML DSL.


Its ObjectMapper has a fluent builder using with and without to turn things on or off. 


We would need some kind of mapping to this from the XML DSL, so end users can configure this.",jjathman:1424635779:2015-02-23T04:09:39.776+0000:1424635779:2015-02-23T04:09:39.776+0000:This looks great and is exactly what I was looking for! Thank you very much. I look forward to the next release when we can use it. 
0,CAMEL-8388,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2015-02-22 06:42:49+00:00,2019-07-31 09:07:00+00:00,"We should try to avoid storing headers with are transient such as JpaEntityManager and other kinds. But instead allow access to them using a JpaMessage type that has a getter method to it,


Then ppl can access it using



EntityManager em = exchange.getIn(JpaMessage.class).getEntityManager();




See SO for a problem when using as a header
http://stackoverflow.com/questions/28608301/apache-camel-aggregate-persistence-and-hibernate","davsclaus:1425086328:2015-02-28T09:18:48.592+0000:1425086328:2015-02-28T09:18:48.592+0000:This will be fixed by CAMEL-8415
davsclaus:1564535220:2019-07-31T09:07:00.247+0000:1564535220:2019-07-31T09:07:00.247+0000:Okay so there is an option on the endpoint you can turn on|off for this"
0,CAMEL-8387,Improvement,Minor,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Christoffer Eide,0,2,2015-02-21 17:39:06+00:00,2015-02-22 12:35:16+00:00,"If the readLockCheckInterval is greater than or equal to readLockTimeout when using readLock=changed, the consumer never picks up any files.


So this URI will triggers the behaviour:
file:some-folder?readLock=changed&readLockCheckInterval=1000&readLockTimeout=500


The problem is that FileChangedExclusiveReadLockStrategy only takes readLockTimeout into account. 


1. FileChangedExclusiveReadLockStrategy get the last modified and size of the file.
2. It sleeps for the duration configured in readLockCheckInterval
3. Now the timeout configured in readLockTimeout is exceeded, so FileChangedExclusiveReadLockStrategy logs ""Cannot acquire read lock within.."" and returns false","davsclaus:1424512563:2015-02-21T17:56:03.113+0000:1424512563:2015-02-21T17:56:03.113+0000:This is not a bug, you configure it wrong. But we can add a check that timeout must be < interval.
davsclaus:1424512602:2015-02-21T17:56:42.248+0000:1424512602:2015-02-21T17:56:42.248+0000:A patch that adds this validation is welcome.
eiden:1424513860:2015-02-21T18:17:40.401+0000:1424513860:2015-02-21T18:17:40.401+0000:If you don't consider this to be a bug, it would be nice if this was documented in http://camel.apache.org/file2.html since it's kind of a big 'gotcha'. I'm not so familiar with the camel project, so I'm not sure on how I can contribute to the docs..

I don't think a simple check on timeout < interval will quite cut it. If the two values are close, it's still a good chance that this behavior will be triggered. 

The most obvious way (at least from my POV), would be to change the {{FileChangedExclusiveReadLockStrategy}}. 
from this {{if (delta > timeout)}} to  {{if (delta > timeout + checkInterval)}}. But that may cause other problems..


davsclaus:1424569819:2015-02-22T09:50:19.467+0000:1424569819:2015-02-22T09:50:19.467+0000:Documentation updated and added a check for next release.
eiden:1424579716:2015-02-22T12:35:16.230+0000:1424579716:2015-02-22T12:35:16.230+0000:Great! Thanks :)"
0,CAMEL-8386,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-21 15:06:44+00:00,2015-02-22 15:12:24+00:00,Related to CAMEL-8284.,
0,CAMEL-8385,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Hiram R. Chirino,Hiram R. Chirino,0,2,2015-02-21 14:57:23+00:00,2017-05-28 17:38:45+00:00,If we has an attribute like OldestInflightStartedTimestamp and OldestInflightStartedExchangeId then it would be easier to monitor for routes which get 'stuck' or exceed the expected SLA for the route to complete processing the exchange.,"chirino:1424504863:2015-02-21T15:47:43.644+0000:1424504863:2015-02-21T15:47:43.644+0000:Basic impl available at:

https://github.com/chirino/camel/commit/888bdf05b61122ac9b1205e04c0db90b42c7bd94
davsclaus:1424505159:2015-02-21T15:52:39.341+0000:1424505159:2015-02-21T15:52:39.341+0000:There is already an inflight registry which can give you that information.

See
org.apache.camel.api.management.mbean.ManagedInflightRepositoryMBean

And it has more details, so you can see where the message ""is stuck"". It has a nodeId which is the current node, etc.

chirino:1424506543:2015-02-21T16:15:43.104+0000:1424506543:2015-02-21T16:15:43.104+0000:Sounds reasonable.  But the info is in tabular data which is not as easy to access and you might have to page through a bunch of data before you get to the data related to your route.
davsclaus:1424512711:2015-02-21T17:58:31.815+0000:1424512711:2015-02-21T17:58:31.815+0000:You are welcome to add suggestion to this registrey as that is the better place to add this kind of logic.

The performance processor mbean is the wrong place as its used by every processor mbean and should be light weight and no ""heavy computations"".
davsclaus:1424512803:2015-02-21T18:00:03.361+0000:1424512803:2015-02-21T18:00:03.361+0000:You could for example add an operation that returns the oldest per route in some json or xml format. Then its a single operation for all the routes, and the data format is easy to use for non java clients also.
dhirajsb:1424683690:2015-02-23T17:28:10.222+0000:1424683690:2015-02-23T17:28:10.222+0000:[~davsclaus], how about adding it at the route level? The ManagedInflightRepositoryMBean could use a filter by route id operation, that is reused by the route metrics mbean to compute the oldestinflight metrics? It won't affect every processor, and maybe its better to have it at the route level. 
chirino:1424692686:2015-02-23T19:58:06.140+0000:1424692686:2015-02-23T19:58:06.140+0000:I'll see if I can rework the patch to reuse the ManagedInflightRepositoryMBean and expose the simpler OldestInflightStartedTimestamp  type stat in the route mbean.
chirino:1424695460:2015-02-23T20:44:20.298+0000:1424695460:2015-02-23T20:44:20.298+0000:Ok. I've reworked the patch to look like:

https://github.com/chirino/camel/commit/14a30ff094673ac0866db2470bd1247772e7e7d1

I had to add a method to the InflightRepository so that I could order the exchanges in the right order and restrict the results to the desired route id:
{code}
Collection<InflightExchange> browse(String routeId, int limit, Comparator<InflightExchange> comparator)
{code}

Since adding methods to interfaces can be breaking change, I'm not sure if this is acceptable. 

davsclaus:1424849856:2015-02-25T15:37:36.467+0000:1424849856:2015-02-25T15:37:36.467+0000:I am not sure that JMX attributes should invoke computing logic, but instead be no overhead return field values. 

So IMHO it would be better to have logic in the inflight registry that keeps state of the oldest per route and keeps that list up to date when an exchange is done. And then the route mbeans can quickly read that information from the inflight registry without causing computation overhead.

Also the current approach would imho cause to much overhead if users have many routes, and then some jmx tools read all the attributes, which per route causes the ""computing"".

And its okay to add / change the interface in a new minor release such as Camel 2.15. We add the api changes in the release notes.
chirino:1424855771:2015-02-25T17:16:11.163+0000:1424855771:2015-02-25T17:16:11.163+0000:Thx for the feedback Claus.  Ok I've managed to get a cheap to lookup version of this at:
https://github.com/chirino/camel/commit/1fe78e88fb07de533e1b6fbefcaec0dd987ba162

It does hold the data in ManageRoute.  Perhaps it would be better to hold it in InflightRepository, but then we would need to use Maps of Maps in there and that's always a mess.
chirino:1424855971:2015-02-25T17:19:31.888+0000:1424855971:2015-02-25T17:19:31.888+0000:Claus if you do like this approach but worry about the synchronization that Collections.synchronizedMap(new LinkedHashMap()) does, we can probably switch to a ConcurrentSkipListMap.
davsclaus:1424912741:2015-02-26T09:05:41.596+0000:1424912741:2015-02-26T09:05:41.596+0000:Yeah switching to the concurrent map is better. I added some comments on the github
chirino:1424943517:2015-02-26T17:38:37.976+0000:1424943517:2015-02-26T17:38:37.976+0000:Ok this commit switches it to concurrent maps and avoids the catch:

https://github.com/chirino/camel/commit/4de0530261048ebf97358bce5ead51b62542aee4

Claus if this looks good to you, I'll squash and then merge into master.
davsclaus:1425270459:2015-03-02T12:27:39.302+0000:1425270459:2015-03-02T12:27:39.302+0000:[~chirino] the latest code looks good, but would be better if you implement the 2 bullets in my last comment. You need to hurry up if you want to make it into Camel 2.15.0 release.
chirino:1425277068:2015-03-02T14:17:48.699+0000:1425277068:2015-03-02T14:17:48.699+0000:Ok, code squashed and now passes checkstyle.  Did not hook this into reset since that would make the stats inconsistent.  Commit done to master."
0,CAMEL-8384,Task,Minor,"2.14.2, 2.15.0",2.15.1,"
None
",Resolved,Fixed,2.15.1,Claus Ibsen,Mark Mindenhall,0,2,2015-02-20 18:48:06+00:00,2015-03-21 06:43:03+00:00,"From a message I sent last night to dev@camel.apache.org:



I’m using the 2.14.2-SNAPSHOT builds at the moment (need a fix I submitted after 2.14.1).  Since I started using the snapshot builds, whenever I click “download sources” in my IDE (so I can view documentation/source as I code against the API), I see the “sources not found” message.  I originally thought the sources were not being built for snapshot builds.
https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.14.2-SNAPSHOT/
However, after checking the repo with the link above, I was able to see that some builds include the sources and javadoc, and some don’t.  I also noticed that there seem to be two nightly builds which complete 30-60 minutes apart each night, where the first build includes the sources and javadoc, but the second build does not.  
Here are the available builds, the time they completed, and whether the sources/javadoc jars were included:
Fri Feb 13 builds
Build 64   03:18 UTC   yes
Build 65   03:50 UTC   no
Sat Feb 14 build (just one build for some reason)
Build 66   06:33 UTC   yes
Sun Feb 15 builds
Build 67   06:56 UTC   yes
Build 68   07:54 UTC   no
Mon Feb 16 builds
Build 69   02:30 UTC   yes
Build 70   03:02 UTC   no
Tue Feb 17 builds
Build 71   02:31 UTC   yes
Build 72   02:49 UTC   no
Wed Feb 18 builds
Build 73   02:36 UTC   yes
Build 74   03:06 UTC   no
Thu Feb 19 builds
Build 75   02:34 UTC   yes
Build 76   03:06 UTC   no
I see the same pattern with the camel component builds as well (two nightly builds, only first has sources/javadoc jars).
Does anyone know what might be happening here?  It would be greatly appreciated if this could be fixed so all the builds include the sources and javadoc!


Marked as regression since this was fixed back in CAMEL-5318.","davsclaus:1424560206:2015-02-22T07:10:06.128+0000:1424560206:2015-02-22T07:10:06.128+0000:There is a CI job that runs once a day to build SNAPSHOT jars. And if for some reason that fails, then it will attempt only the next day, and so on.

There is a new SNAPSHOT from feb 22rd that worked, and was uploaded.
mmindenhall:1424561528:2015-02-22T07:32:08.650+0000:1424767012:2015-02-24T16:36:52.091+0000:Hi [~davsclaus],

If you look at what's out in the repo (for camel-core, see link posted in issue), there are two builds for Feb 22:  build 77 and build 78.  Build 77 includes the javadoc and sources, build 78 does not.  When version ""2.14.2-SNAPSHOT"" is specified as a dependency, maven goes out and grabs the latest snapshot available, and uses that.  In this case, it grabbed build 78 (or more precisely 2.14.2-20150222.034718-78, which I verified within my local repository).

To reproduce:

1.  Clean out your ~/.m2/repository/org/apache/camel/camel-core/2.14.2-SNAPSHOT folder
2.  Specify 2.14.2-SNAPSHOT as the version for camel-core within a POM
3.  Build the project
4.  Force maven source download (mvn dependency:sources)
5.  Verify that the build 78 artifacts (or whatever are the latest) were pulled (no sources or javadocs).  The ""mvn dependency:sources"" command will also report which dependencies were resolved (i.e., sources found) and which were not.
davsclaus:1426891383:2015-03-21T06:43:03.169+0000:1426891383:2015-03-21T06:43:03.169+0000:The 2.15.x snapshots has sources."
0,CAMEL-8383,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Sergey Beryozkin,0,2,2015-02-20 12:23:48+00:00,2015-03-09 16:47:41+00:00,"CXFRS consumer processors should be able to use JAX-RS Contexts, for example, instead of 



String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);
if (path.equals(""/customers"")) {
//...
} 




do something like



javax.ws.rs.core.UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class);
if (ui.getPath().equals(""/customers"")) {
//...
} 




This will make the processor code more JAX-RS friendly. Besides UriInfo, Request, HttpHeaders and other JAX-RS contexts offer a lot of utility methods for simplifying managing an HTTP request","sergey_beryozkin:1424423272:2015-02-20T17:07:52.478+0000:1424423272:2015-02-20T17:07:52.478+0000:The patch supports the optional propagation of JAX-RS contexts to the Camel exchange.

Right now it is done in CxfRsInvoker - but may be easily enough refactored for it to be done inside the default binding. I marginally prefer it be done in the invoker so that if someone does write a custom binding without extending the default one the propagation of context still works. The other reason is that for it to work the invoker needs to pass an optional flag to the binding and we'd need a property name for that - and I'd like to do that as part of another refactoring related to where some of JAXRS constants are defined.

So IMHO doing it in the invoker if fine for now. The patch is safe with respect to the existing cxfrs users



davsclaus:1425169474:2015-03-01T08:24:34.912+0000:1425169474:2015-03-01T08:24:34.912+0000:Thanks for the patch.

Do you mind adding some documentation to
http://camel.apache.org/cxfrs

about this new option?
sergey_beryozkin:1425265773:2015-03-02T11:09:33.371+0000:1425265773:2015-03-02T11:09:33.371+0000:Thanks, will deal with updating the wiki page asap, some other new options would need to be described too.
Cheers, Sergey
sergey_beryozkin:1425890861:2015-03-09T16:47:41.438+0000:1425890861:2015-03-09T16:47:41.438+0000:Done, thanks;  I'll need to add a couple of code examples showing the new options in action, will deal with it shortly"
0,CAMEL-8382,Bug,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Gareth Western,0,2,2015-02-20 10:07:22+00:00,2015-02-20 10:33:02+00:00,"We have defined our routes with property keys for all endpoints (""from"" and ""to""). When using the dumpRoutesAsXml operation we see that the ""from uri"" value is the property key, however the ""to uri"" has been resolved to the actual property value. 


For example, given a RouteBuilder like the following:



        from(""{{route1.uri}}"")
            .routeId(""myRoute"")
            .to(""{{route2.uri}}"")




dumpRoutesAsXml outputs the following:



    <route customId=""true"" id=""myRoute"">
        <from uri=""{{route1.uri}}""/>
        <to uri=""jms:myapp.route2"" id=""to2""/>
    </route>




where ""myapp.route2"" is the resolved value of ""route2.uri"".


Perhaps there is a good reason for this behaviour, but it appears to be inconsistent.",davsclaus:1424398307:2015-02-20T10:11:47.578+0000:1424398307:2015-02-20T10:11:47.578+0000:Yeah it should be similar.
0,CAMEL-8381,Improvement,Minor,2.15.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,3,2015-02-20 09:47:29+00:00,2015-03-08 10:13:53+00:00,"If we look at the springframework schema, they word wrap their documentation and use CDATA section



		<xsd:attribute name=""lazy-init"" default=""default"" type=""defaultable-boolean"">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	Indicates whether or not this bean is to be lazily initialized.
	If false, it will be instantiated on startup by bean factories
	that perform eager initialization of singletons. The default is
	""false"".

	Note: This attribute will not be inherited by child bean definitions.
	Hence, it needs to be specified per concrete bean definition.
				]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>




As our documentation is single line, then it can be very long. I wonder if we should not word wrap as well, and format similar to spring so its easier to read directly from the schema file.","githubbot:1425752159:2015-03-08T02:15:59.156+0000:1425752159:2015-03-08T02:15:59.156+0000:GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/427

    [CAMEL-8381] XML XSD enriched documentation word wrap documentation text for easier read in raw file

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel camel-8381-new

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/427.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #427
    
----
commit beee84db672f254b4a3d7cd9582303ef71437497
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-03-08T02:08:15Z

    [CAMEL-8381] Wraps documentation for easier read in raw file.

commit b2cdc4a27a981d6c04a0a86b957d4a566d6dbeaa
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-03-08T02:11:48Z

    Moving dependencies to class level attributes to reduce number of parameters in methods.

----

davsclaus:1425773089:2015-03-08T08:04:49.531+0000:1425773089:2015-03-08T08:04:49.531+0000:Thanks for the PR. Looks great.
githubbot:1425780833:2015-03-08T10:13:53.058+0000:1425780833:2015-03-08T10:13:53.058+0000:Github user nkukhar closed the pull request at:

    https://github.com/apache/camel/pull/427
"
0,CAMEL-8380,Improvement,Major,2.15.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,2,2015-02-20 09:38:29+00:00,2016-08-28 09:23:00+00:00,"Now that we have eip documentation enriched using the maven plugin. We should see if we cannot grab the additional documentation for the spring / blueprint types such as <camelContext> and others.


eg today the generated xsd contains



  <xs:complexType name=""camelContextFactoryBean"">
    <xs:complexContent>
      <xs:extension base=""tns:abstractCamelContextFactoryBean"">
        <xs:sequence>
          <xs:element minOccurs=""0"" ref=""tns:properties""/>
          <xs:element minOccurs=""0"" ref=""tns:propertyPlaceholder""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" name=""package"" type=""xs:string""/>
          <xs:element minOccurs=""0"" ref=""tns:packageScan""/>
          <xs:element minOccurs=""0"" ref=""tns:contextScan""/>
          <xs:element minOccurs=""0"" ref=""tns:streamCaching""/>
          <xs:element minOccurs=""0"" ref=""tns:jmxAgent""/>
          <xs:choice maxOccurs=""unbounded"" minOccurs=""0"">
            <xs:element ref=""tns:template""/>
            <xs:element ref=""tns:consumerTemplate""/>
            <xs:element ref=""tns:proxy""/>
            <xs:element ref=""tns:export""/>
            <xs:element ref=""tns:errorHandler""/>
          </xs:choice>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:routeBuilder""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:routeContextRef""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:restContextRef""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:threadPoolProfile""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:threadPool""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:endpoint""/>
          <xs:element minOccurs=""0"" ref=""tns:dataFormats""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:redeliveryPolicyProfile""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:onException""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:onCompletion""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:intercept""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:interceptFrom""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:interceptSendToEndpoint""/>
          <xs:element minOccurs=""0"" ref=""tns:restConfiguration""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:rest""/>
          <xs:element maxOccurs=""unbounded"" minOccurs=""0"" ref=""tns:route""/>
        </xs:sequence>
        <xs:attribute name=""depends-on"" type=""xs:string""/>
        <xs:attribute name=""trace"" type=""xs:string""/>
        <xs:attribute name=""messageHistory"" type=""xs:string""/>
        <xs:attribute name=""streamCache"" type=""xs:string""/>
        <xs:attribute name=""delayer"" type=""xs:string""/>
        <xs:attribute name=""handleFault"" type=""xs:string""/>
        <xs:attribute name=""errorHandlerRef"" type=""xs:string""/>
        <xs:attribute name=""autoStartup"" type=""xs:string""/>
        <xs:attribute name=""shutdownEager"" type=""xs:string""/>
        <xs:attribute name=""useMDCLogging"" type=""xs:string""/>
        <xs:attribute name=""useBreadcrumb"" type=""xs:string""/>
        <xs:attribute name=""allowUseOriginalMessage"" type=""xs:string""/>
        <xs:attribute name=""runtimeEndpointRegistryEnabled"" type=""xs:string""/>
        <xs:attribute name=""managementNamePattern"" type=""xs:string""/>
        <xs:attribute name=""threadNamePattern"" type=""xs:string""/>
        <xs:attribute name=""shutdownRoute"" type=""tns:shutdownRoute""/>
        <xs:attribute name=""shutdownRunningTask"" type=""tns:shutdownRunningTask""/>
        <xs:attribute name=""lazyLoadTypeConverters"" type=""xs:boolean""/>
        <xs:attribute name=""typeConverterStatisticsEnabled"" type=""xs:boolean""/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>




We may need to let the apt plugin run on camel-spring to generate json schema files for those extra JAXB annotated classes so we can grab the documentation like we do for EIPs","nkukhar:1424423081:2015-02-20T17:04:41.877+0000:1424451632:2015-02-21T01:00:32.600+0000:Where is documentation for <camelContext> located? 
davsclaus:1424471945:2015-02-21T06:39:05.470+0000:1424471945:2015-02-21T06:39:05.470+0000:Its javadoc in the .java files in camel-spring or camel-blueprint. 

Then we likely would need the apt plugin to generate the same set of json schema files we do for the core model files, but for those additional files also.
And then the eip enhancer goal would be able to find those extra json files to obtain the documentation
davsclaus:1424484815:2015-02-21T10:13:35.537+0000:1424484815:2015-02-21T10:13:35.537+0000:This is a bit tougher as the tooling/apt would need to have a new annotation processor for spring and blueprint to deal with those. It can reuse parts of the eip but they likely need a bit special."
0,CAMEL-8379,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-19 09:03:16+00:00,2015-02-19 10:24:45+00:00,"We should include this in the catalog.


And also add java api to access those as well.
And then add JMX api as well to all the catalog functions.",
0,CAMEL-8378,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-19 08:59:37+00:00,2015-02-21 09:07:29+00:00,"Today the catalog commands are part of the Camel karaf commands. We should move them to a separate module, so they dont clutter the existing karaf commands.


Then the end user can install the camel-catalog feature in karaf if he/she wants to use the catalog commands.",
0,CAMEL-8377,Task,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Janos Haber,0,2,2015-02-19 08:37:57+00:00,2015-02-19 09:01:15+00:00,inOut deprecated without alternative,"davsclaus:1424307675:2015-02-19T09:01:15.251+0000:1424307675:2015-02-19T09:01:15.251+0000:See the javadoc which refers to what to use
     * @deprecated use {@link #setExchangePattern(org.apache.camel.ExchangePattern)} instead

"
0,CAMEL-8376,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-19 06:41:38+00:00,2015-02-19 07:08:48+00:00,This archetype has been deprecated for a long time. Lets remove it,
0,CAMEL-8375,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Steven Marcus,0,2,2015-02-19 06:27:43+00:00,2015-02-19 07:13:00+00:00,"The aws-swf component doesn't support a way to configure the activity thread pool size. By default, the aws-sdk's activity task thread pool is 100 threads – which is way too high for cpu-intensive activities.


Here's a PR: https://github.com/apache/camel/pull/399 that adds 
SWFConfiguration.activityThreadPoolSize


Please let me know if there are changes you need to facilitate the merge.",davsclaus:1424301180:2015-02-19T07:13:00.650+0000:1424301180:2015-02-19T07:13:00.650+0000:Thanks for the PR
0,CAMEL-8374,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Henryk Konsek,Henryk Konsek,0,2,2015-02-18 22:01:23+00:00,2015-02-25 15:43:31+00:00,"We should provide Eclipse Kura (1) component to easily start Camel routes from Kura container (M2M message gateway). In the first place I propose to create base activator that could be used as to easily add new OSGi bundles containing Camel routes. 


(1) https://eclipse.org/kura","hekonsek:1424268171:2015-02-18T22:02:51.540+0000:1424268171:2015-02-18T22:02:51.540+0000:Initial commit in revision - 471163a660459e40869c83b5161c1e7e72d962cc .
davsclaus:1424849933:2015-02-25T15:38:53.263+0000:1424849933:2015-02-25T15:38:53.263+0000:Is there more work to this, or can this ticket be closed?
hekonsek:1424850211:2015-02-25T15:43:31.922+0000:1424850211:2015-02-25T15:43:31.922+0000:It can be closed. Initial version of the component is ready."
0,CAMEL-8373,Task,Major,2.14.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Claus Ibsen,4,7,2015-02-18 15:34:07+00:00,2016-03-23 08:43:26+00:00,"Look into reported on SO
http://stackoverflow.com/questions/28562817/camel-rest-dsl-enablecors-only-working-for-get


For non simple requests, such as PUT see
http://www.w3.org/TR/cors/","senexi:1424679516:2015-02-23T16:18:36.274+0000:1424680453:2015-02-23T16:34:13.648+0000:I was able to work around this issue by setting the CORS Headers manually.

<route>
            <from uri=""jetty://http://127.0.0.1:8082/uri?matchOnUriPrefix=true&amp;httpMethodRestrict=OPTIONS"" />
            <to uri=""direct:setcors""/>
        </route>
        
        <route>
            <from uri=""jetty://http://127.0.0.1:8082/transfer?matchOnUriPrefix=true&amp;httpMethodRestrict=OPTIONS"" />
            <to uri=""direct:setcors""/>
        </route>
        
        <route>
            <from uri=""jetty://http://127.0.0.1:8082/resource?matchOnUriPrefix=true&amp;httpMethodRestrict=OPTIONS"" />
            <to uri=""direct:setcors""/>
        </route>
        
        <route>
            <from uri=""direct:setcors""/>
            <log message=""Setting CORS Header""/>
            <setHeader headerName=""Access-Control-Allow-Origin"">
                <constant>*</constant>
            </setHeader>
            <setHeader headerName=""Access-Control-Allow-Methods"">
                <constant>GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH</constant>
            </setHeader>
            <setHeader headerName=""Access-Control-Allow-Headers"">
                <constant>Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers</constant>
            </setHeader>
        </route>

It was not possible to just set <from uri=""jetty://http://127.0.0.1:8082?matchOnUriPrefix=true&amp;httpMethodRestrict=OPTIONS"" />. 

Another very interesting issue is that this works now for the uri and the resource endpoint defined above. The transfer endpoint is not working when I call http://127.0.0.1/transfer. I get a 405 - Methode not allowed error. It only works when I call it with some suffix like this http://127.0.0.1/transfer/1.  

The OPTIONS request header looks like:

Host: 127.0.0.1:8082
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:35.0) Gecko/20100101 Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
Origin: http://localhost:8083
Access-Control-Request-Method: POST
Access-Control-Request-Headers: content-type
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
davsclaus:1425092054:2015-02-28T10:54:14.010+0000:1425092054:2015-02-28T10:54:14.010+0000:This requires a bit more work to add cors support for non simple requests, as we need to short circuit the request, to return the cors header response asap.
davydewaele:1427093090:2015-03-23T14:44:50.055+0000:1427093090:2015-03-23T14:44:50.055+0000:Even for simple GET requests I cannot get this to work, as the pre-flight OPTIONS doesn't contain the correct CORs headers.

I noticed that the camel-example-servlet-rest-tomcat sample uses the RestSwaggerCorsFilter (https://github.com/apache/camel/blob/master/examples/camel-example-servlet-rest-tomcat/src/main/webapp/WEB-INF/web.xml) to achieve CORS (and not the enableCors flag on the restConfiguration).

With that example CORs works out of the box due to the Swagger filter. 

If you enableCORS on the restConfiguration it will fail because you'll have both the REST component and the restConfiguration putting CORs headers on the response.

Might be interesting to use this example to demonstrate the enableCORS flag.
stijn.van.bael:1428560417:2015-04-09T14:20:17.795+0000:1428560736:2015-04-09T14:25:36.747+0000:I have a similar issue with netty4-http. The OPTIONS request only returns following headers:

    Allow: OPTIONS,GET
    Content-Length: 0
    Content-Type: text/plain


I tried working around it in a similar way Florian did:

    from(""netty4-http:http://0.0.0.0:8081/products?matchOnUriPrefix=true&httpMethodRestrict=OPTIONS"")
            .setHeader(""Access-Control-Allow-Origin"", constant(""*""))
            .setHeader(""Access-Control-Allow-Methods"", constant(""GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH""))
            .setHeader(""Access-Control-Allow-Headers"", constant(""Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers""))
            .setHeader(""Allow"", constant(""GET, OPTIONS, POST, PATCH""));


but that makes things even more strange. None of the Access-Control-Allow-* headers are returned and now Allow returns OPTIONS twice:

    Allow: OPTIONS,OPTIONS
    Content-Length: 0
    Content-Type: text/plain
githubbot:1428563771:2015-04-09T15:16:11.805+0000:1428563771:2015-04-09T15:16:11.805+0000:GitHub user stijnvanbael opened a pull request:

    https://github.com/apache/camel/pull/471

    Allows customizing the OPTIONS request.

     Could be used as a workaround for CAMEL-8373:
    
    rest(""/products"")
                    .verb(""options"")
                    .route()
                    .setHeader(""Access-Control-Allow-Origin"", constant(""*""))
                    .setHeader(""Access-Control-Allow-Methods"", constant(""GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH""))
                    .setHeader(""Access-Control-Allow-Headers"", constant(""Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers""))
                    .setHeader(""Allow"", constant(""GET, OPTIONS, POST, PATCH""));

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/stijnvanbael/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/471.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #471
    
----
commit d2520570f60bb13fecb14a504069c4d345785556
Author: Stijn Van Bael <stijnvanbael@gmail.com>
Date:   2015-04-09T15:10:09Z

    Allows customizing the OPTIONS request. Could be used as a workaround for CAMEL-8373:
    
    rest(""/products"")
                    .verb(""options"")
                    .route()
                    .setHeader(""Access-Control-Allow-Origin"", constant(""*""))
                    .setHeader(""Access-Control-Allow-Methods"", constant(""GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, CONNECT, PATCH""))
                    .setHeader(""Access-Control-Allow-Headers"", constant(""Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers""))
                    .setHeader(""Allow"", constant(""GET, OPTIONS, POST, PATCH""));

----

hekonsek:1429150417:2015-04-16T10:13:37.542+0000:1429150417:2015-04-16T10:13:37.542+0000:Hi,

I have merged Stijn's pull request into the CAMEL-8645. Great thanks Stijn! It still doesn't resolve the main issue discusses here, but it allows to provide a workaround for Netty REST endpoints.

Cheers!
githubbot:1429308872:2015-04-18T06:14:32.472+0000:1429308872:2015-04-18T06:14:32.472+0000:Github user stijnvanbael closed the pull request at:

    https://github.com/apache/camel/pull/471

cmoulliard:1441956092:2015-09-11T15:21:32.455+0000:1441956092:2015-09-11T15:21:32.455+0000:Such option should be added for REST DSL. Otherwise we can't answer to CORS preflight requests of Swagger where OPTIONS requests are send
davsclaus:1458693805:2016-03-23T08:43:25.984+0000:1458693805:2016-03-23T08:43:25.984+0000:We have fixed a number of CORS issues for 2.17.0"
0,CAMEL-8372,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Akitoshi Yoshida,Sergey Beryozkin,0,2,2015-02-18 13:57:39+00:00,2015-02-20 15:02:35+00:00,This is the first step toward supporting CXFRS consumers with only the model information available (CXF Model extensions but also other sources/description languages in the future),"sergey_beryozkin:1424239089:2015-02-18T13:58:09.303+0000:1424239089:2015-02-18T13:58:09.303+0000:patch is on the way
sergey_beryozkin:1424251148:2015-02-18T17:19:08.588+0000:1424251148:2015-02-18T17:19:08.588+0000:Patch allows for the registration of a default interface handler that can is used to internally by the JAX-RS runtime to match any incoming request but also use a given model information in processors (path info, parameters, etc)
ay:1424414542:2015-02-20T14:42:22.155+0000:1424414542:2015-02-20T14:42:22.155+0000:Hi Sergey,
I have applied your patch.
thanks.
regards, aki
sergey_beryozkin:1424415755:2015-02-20T15:02:35.478+0000:1424415755:2015-02-20T15:02:35.478+0000:Hi Aki

Thanks again. 
Cheers, Sergey"
0,CAMEL-8371,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Andrew Block,0,3,2015-02-18 07:01:40+00:00,2015-03-03 14:39:47+00:00,Update Camel Docker component to support underlying docker-java library version 0.10.5,"githubbot:1424591555:2015-02-22T15:52:35.533+0000:1424591555:2015-02-22T15:52:35.533+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/404

    CAMEL-8371 Improvements and enhancements to camel-docker component

    Improvements and enhancements to camel-docker component and updated to support docker-java 0.10.5

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-8371

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/404.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #404
    
----
commit 4c02d9cee130e354e67e8b83ca04baa7b08114b0
Author: Andrew Block <andy.block@gmail.com>
Date:   2015-02-22T15:45:16Z

    CAMEL-8371 Improvements and enhancements to camel-docker component and updated to support docker-java 0.10.5

----

davsclaus:1424646639:2015-02-23T07:10:39.684+0000:1424646639:2015-02-23T07:10:39.684+0000:Thanks
davsclaus:1424646781:2015-02-23T07:13:01.175+0000:1424646781:2015-02-23T07:13:01.175+0000:I logged a ticket to improve camel-docker as it does something wrong: CAMEL-8394
sabre1041:1424727614:2015-02-24T05:40:14.032+0000:1424727614:2015-02-24T05:40:14.032+0000:Thanks [~davsclaus] for the suggestions in CAMEL-8394. I will start making the appropriate modifications. I can retract the PR and open a new one with the combined enhancements covered in both issues
davsclaus:1424731409:2015-02-24T06:43:29.331+0000:1424731409:2015-02-24T06:43:29.331+0000:Andrew we have merged these changes.

So please only do a PR with the new changes.
githubbot:1425364787:2015-03-03T14:39:47.455+0000:1425364787:2015-03-03T14:39:47.455+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/404
"
0,CAMEL-8370,Task,Minor,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Mark Mindenhall,0,2,2015-02-17 22:40:54+00:00,2015-02-18 06:43:23+00:00,"I sent the following to the users@camel.apache.org list earlier today:



I’m using the camel-netty4-http (latest 2.14.2-SNAPSHOT) component to create an endpoint that receives an HTTP POST from a device, translates the message from binary to JSON, then sends it along to a kafka topic for further processing.  When there are errors in validating or translating the incoming message, I need to be able to return a HTTP response code and response body.
The camel-netty4-http documentation has an “Access to Netty types” section, which says that I should be able to do the following to access the instance of io.netty.handler.codec.http.HttpResponse:
    HttpResponse response = exchange.getIn(NettyHttpMessage.class).getHttpResponse();
Regardless of where I access the exchange within the route, getHttpResponse() is always returning null.  On the ""happy path” I can return 200 by calling exchange.getOut().setBody(myResponse), but I have been unable to figure out how to return another response code.
Is this a bug?  Or is there another way to accomplish what I’m trying to do?


After digging around in the code, it looks like the HTTP status code is set via the CamelHttpResponseCode message header (org.apache.camel.component.netty4.http.DefaultNettyHttpBinding, line 308).  However, there is no mention of this message header in either the camel-netty-http or camel-netty4-http documentation.  It would be helpful to add this header to the list of applicable message headers, and also to include an example that demonstrates how to set the response status code and body:


Finally, the existing ""Access to Netty types"" example should be modified to be clear that only the request can be accessed in this way.



// specify response body and status
exchange.getOut().setBody(myResponseBody);               exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 401);","davsclaus:1424212745:2015-02-18T06:39:05.279+0000:1424212745:2015-02-18T06:39:05.279+0000:If you want to help with doc then see here
http://camel.apache.org/how-do-i-edit-the-website.html
davsclaus:1424213003:2015-02-18T06:43:23.548+0000:1424213003:2015-02-18T06:43:23.548+0000:There is a custom response code sample at
http://camel.apache.org/rest-dsl"
0,CAMEL-8369,Bug,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Chris Pimlott,0,2,2015-02-17 22:27:38+00:00,2015-02-18 08:38:32+00:00,"When using AdviceWithRouteBuilder to modify a route definition, weaveAddLast does not work correctly when the route ends with a split.  It appears to add the additional components within the split, not afterwards.


See attached testcase.


Adding a trivial operation after the split in the original route builder fixes it.","davsclaus:1424215689:2015-02-18T07:28:09.966+0000:1424215703:2015-02-18T07:28:23.139+0000:Yeah last has to be last of the siblings - and not last of the children.

If you do this as a workaround then it works
{code}
weaveByType(SplitDefinition.class).after().log(""weaveAddLast: ${body}"").to(""mock:result"");
{code}"
0,CAMEL-8368,New Feature,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-17 16:28:14+00:00,2015-02-21 15:39:27+00:00,"Look into letting timer endpoint support those backoff, greedy options we have. The idea would be that the exchange at the end of the routing, has some property/header, that the timer consumer understands, and then know if it should regard as one message polled, or zero message polled, etc.


Then greedy, backoff, and the other options can work as usual.


This allows people to have the simple timer scheduler to scale up / down depending on demand.","davsclaus:1424305630:2015-02-19T08:27:10.915+0000:1424305630:2015-02-19T08:27:10.915+0000:We should leave the timer as is, and create a new scheduler component that is a ScheduledPollEndpoint
davsclaus:1424504367:2015-02-21T15:39:27.625+0000:1424504367:2015-02-21T15:39:27.625+0000:There is a new scheduler component people can use."
0,CAMEL-8367,Improvement,Minor,2.14.1,2.15.0,"
None
",Resolved,Cannot Reproduce,2.15.0,Claus Ibsen,Tarundeep Singh,0,2,2015-02-17 14:49:39+00:00,2015-02-18 08:59:11+00:00,"Reference Link: http://stackoverflow.com/questions/28508351/apache-camel-how-to-print-exception-trace-while-unit-testing-using-cameltestsup


While unit testing a Route Builder class, a Runtime exception takes place in code that creates routes. This is simply reported as test failure.
No Stacktrace or any reason of failure of a particular test is printed.


Would prefer better reporting of runtime exceptions while testing.","davsclaus:1424221151:2015-02-18T08:59:11.591+0000:1424221151:2015-02-18T08:59:11.591+0000:Just added some tests and they report the exception when the instance is null.
https://github.com/apache/camel/commit/69934ac79afa48ba30387da06823e526f10d8aa0"
0,CAMEL-8366,Improvement,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Tomohisa Igarashi,0,3,2015-02-17 09:46:25+00:00,2015-02-18 07:30:52+00:00,"There're some spots using user provided iterator but don't close them if RuntimeException is thrown during iteration even if it's Closeable . It would be convenient if it is closed in finally block.


I immediately found 2, guessing there're some more else:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Splitter.java#L232-L234
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java#L267-L347","githubbot:1424163733:2015-02-17T17:02:13.594+0000:1424163733:2015-02-17T17:02:13.594+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/396

    CAMEL-8366 Close used iterator if RuntimeException is thrown at next()/h...

    ...asNext() in Splitter

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-8366

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/396.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #396
    
----
commit 7e7574278fdffbf2b46a6b74397f6475fc812a7b
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-02-17T16:41:00Z

    CAMEL-8366 Close used iterator if RuntimeException is thrown at next()/hasNext() in Splitter

----

igarashitm:1424164010:2015-02-17T17:06:50.835+0000:1424164010:2015-02-17T17:06:50.835+0000:Apparently the iterator in MulticastProcessor is not user provided, so fixed Splitter only.
davsclaus:1424215185:2015-02-18T07:19:45.969+0000:1424215185:2015-02-18T07:19:45.969+0000:Thanks for reporting an the PR
githubbot:1424215852:2015-02-18T07:30:52.604+0000:1424215852:2015-02-18T07:30:52.604+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/396
"
0,CAMEL-8365,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-17 09:21:52+00:00,2015-02-19 07:09:08+00:00,"We have a bunch of Maven Archetypes in tooling/archetypes. 


But we do not have a camel-archetype.xml file as part of the release which is published to maven central, so users / tooling can use that to know the Camel only archetypes.


Today they are in the big maven central at, but it contains all 1000+ archetypes
http://repo2.maven.org/maven2/archetype-catalog.xml


We should build our own camel-catalog.xml and publish at
http://repo1.maven.org/maven2/org/apache/camel/archetypes/2.14.1/


And maybe name it archetype-catalog.xml.


And then we should include the archetype in the camel-catalog JAR so its also easy for offline tooling and whatnot to grab that file.","davsclaus:1424256301:2015-02-18T18:45:01.618+0000:1424256301:2015-02-18T18:45:01.618+0000:Will be published here, when its released
http://repo1.maven.org/maven2/org/apache/camel/archetypes/2.15.0/"
0,CAMEL-8364,Test,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-17 09:03:35+00:00,2015-03-01 08:24:49+00:00,"Tests in error:
  CxfBeanSpringRouteTest.testGetCustomer:45 » ClassNotFound javax.naming.Invalid...
  CxfBeanBlueprintRouterTest.testGetCustomerWithQuery:67 » ClassNotFound javax.n...
  CxfBeanBlueprintRouterTest.testGetCustomer:50 » ClassNotFound javax.naming.Inv...
  CxfRsBlueprintRouterTest.testGetCustomers:115 » ClassNotFound javax.naming.Inv...
  CxfRsBlueprintRouterTest.testPutConsumer:156 » ClassNotFound javax.naming.Inva...
  CxfRsBlueprintRouterTest.testGetSubResource:138 » ClassNotFound javax.naming.I...
  CxfRsBlueprintRouterTest.testGetCustomerWithQuery:99 » ClassNotFound javax.nam...
  CxfRsBlueprintRouterTest.testPostConsumer:174 » ClassNotFound javax.naming.Inv...
  CxfRsBlueprintRouterTest.testGetCustomer:78 » ClassNotFound javax.naming.Inval...
  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  Http4Test.testHttp4Get:38 » ClassNotFound javax.naming.InvalidNameException no...
  Http4Test.testHttp4Post:44 » ClassNotFound javax.naming.InvalidNameException n...
  RestletTest.testRestletProducer:41 » ClassNotFound javax.naming.InvalidNameExc...


Tests run: 195, Failures: 0, Errors: 15, Skipped: 23",
0,CAMEL-8363,Improvement,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2015-02-16 13:31:51+00:00,2015-02-16 19:05:45+00:00,"This is verbose and not recommanded, ppl should just use <camelContext> as is


eg remove <camel:xxx""> in the archetypes


eg



 <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <!-- here is a sample which processes the input files
         (leaving them in place - see the 'noop' flag)
         then performs content based routing on the message using XPath -->
    <camel:route>
      <camel:from uri=""file:src/data?noop=true""/>
      <camel:choice>
        <camel:when>
          <camel:xpath>/person/city = 'London'</camel:xpath>
          <camel:log message=""UK message""/>
          <camel:to uri=""file:target/messages/uk""/>
        </camel:when>
        <camel:otherwise>
          <camel:log message=""Other message""/>
          <camel:to uri=""file:target/messages/others""/>
        </camel:otherwise>
      </camel:choice>
    </camel:route>
  </camel:camelContext>",
0,CAMEL-8362,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Guillaume Nodet,Claus Ibsen,2,5,2015-02-16 06:42:30+00:00,2019-06-14 09:55:20+00:00,"Similar to CAMEL-8361, but for generating java source code fluent builder, so people can configured components and endpoints in a nicer style.



Endpoint file = FileEndpointBuilder.directory(""somepath"").recursive(true).includes(""*.txt"").build();
...




Though there is a few tasks to figure out.


We would need some template as skeleton for generating the source code. And we would need a naming convention for the class name. And also we should allow each builder method to have 2 options. As its original type, eg String, boolean, int, etc. And then an alternative that uses a String so people can use property placeholders, eg ""foo"".


And besides endpoints we should also generate for components as well, so its easier to configure them.","davsclaus:1424222103:2015-02-18T09:15:03.767+0000:1424222103:2015-02-18T09:15:03.767+0000:Roaster is a easy to use library to generate java source code
https://github.com/forge/roaster#java-source-code-generation-api"
0,CAMEL-8361,New Feature,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,4,7,2015-02-16 06:37:38+00:00,2022-09-02 08:58:23+00:00,"Now due to CAMEL-7999 we have information about each component and would be able to create a maven plugin that generates per component XML schema, which we can use in spring or blueprint to have per component type safe configuration of both the component and endpoints.


For example for endpoints something a like



<route>
<from><file directory=""somepath"" recursive=""true"" include=""*.txt""/></from>
<to><jms queue=""foo""/></to>
</route>




Though there a few more tasks to this as we would need to



figure out how to integrate this with the camel model that is generated from camel-core
how the namespace parsers of spring/blueprint detects these new namespaces for each component
and have it work in all environments, eg standalone, jee, osgi, et all



For starters we could allow to configure endpoints in the <endpoints> section at first, an then later directly within the <routes>","davsclaus:1424057233:2015-02-16T11:27:13.507+0000:1424057233:2015-02-16T11:27:13.507+0000:And we would need a new <components> that allow to configure components, like we have for <dataformats>. Then ppl can do

{code}
<camelContext ...>
  <components
    <activemq id=""foo"" brokerUrl=""tcp:..."" maxReconnectAttempts=""3"" prefetchSize=""500"" .../>
    <jetty id=""jetty"" enabledJmx=""true"" maxThreads=""100""/>
  </components>

   ...
</camelContext>
{code}

Then inside components, its the components generated schema we use to configure components. The id is likely optional so you can differentiate components or given them a id. But if its omitted, then it should use the default component name, eg jetty for jetty etc.

Now the component schema is maybe a mix of using attributes and elements. And should also allow to use <property> style as well? 
davsclaus:1424057377:2015-02-16T11:29:37.259+0000:1424057414:2015-02-16T11:30:14.594+0000:For component configuration we could start to allow using <property> style, then we could allow to configure this without the schemas which are maybe not yet ready.

{code}
<camelContext ...>
  <components>
     <component id=""foo"" name=""activemq"">
       <property name=""brokerUrl"" value=""tcp:...""/>
       <property name=""prefetchSize"" value=""100""/>
     </component>
    <component id=""jetty"">
      <property name=""enabledJmx"" value=""true""/>
      <property name=""maxThreads"" value=""100""/>
  </components>
   ...
</camelContext>
{code}
onders:1530498807:2018-07-02T10:33:27.657+0000:1530498807:2018-07-02T10:33:27.657+0000:i did not look into this improvement area in deep but just had an idea to mentioned if my thinking would be worth thinking through around my idea.

so i think apt-compiler generates .json file per component, would it possible to convert them to their xml representation and generating an .xsd file per component using [trang.|http://www.thaiopensource.com/relaxng/trang.html] at this point not sure if the resulting xsd will be good enough to integrate with core model and have them work in all environments..
davsclaus:1564534783:2019-07-31T08:59:43.262+0000:1564534783:2019-07-31T08:59:43.262+0000:We may do an endpoint DSL for XML in 3.x later."
0,CAMEL-8360,Bug,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Steven Marcus,0,2,2015-02-16 03:04:43+00:00,2015-02-18 09:18:31+00:00,"CamelSWFWorkflowClient.getDynamicWorkflowClient :


DynamicWorkflowClientExternalImpl(workflowExecution, null, endpoint.getStartWorkflowOptions(), null, genericClient);


should be 


DynamicWorkflowClientExternalImpl(workflowExecution, null, endpoint.getStartWorkflowOptions(), configuration.getDataConverter(), genericClient);


?","davsclaus:1424039384:2015-02-16T06:29:44.305+0000:1424039384:2015-02-16T06:29:44.305+0000:A patch is welcome
srnm:1424222156:2015-02-18T09:15:56.890+0000:1424222156:2015-02-18T09:15:56.890+0000:I've submitted a pull request that completes the support for user-supplied DataConverter:
https://github.com/apache/camel/pull/398

This is my first patch to camel/camel-aws.
Please let me know if there is anything else I need to do to get the patch accepted?
davsclaus:1424222311:2015-02-18T09:18:31.081+0000:1424222311:2015-02-18T09:18:31.081+0000:Thanks Steven for the PR"
0,CAMEL-8359,Bug,Minor,2.14.1,None,"

camel
camel-linkedin
linkedin

",Closed,Fixed,"2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2015-02-16 01:54:51+00:00,2015-02-16 02:06:36+00:00,"LinkedIn consumer endpoints that take a 'fields' parameter should not have to specify an empty value for the optional field. 
This field is handled for producer endpoints as its default value is set in LinkedInEndpoint.interceptProperties().
This field should be automatically set to null if the api method requires it in LinkedInConsumer.interceptPropertyNames().",dhirajsb:1424023596:2015-02-16T02:06:36.682+0000:1424023596:2015-02-16T02:06:36.682+0000:Fixed on master and camel-2.14.x branches
0,CAMEL-8358,Bug,Major,"2.14.1, 2.15.0",None,"

camel
olingo2

",Closed,Fixed,"2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2015-02-16 00:49:27+00:00,2015-02-16 23:27:19+00:00,"Olingo2 library classes in 'core' are internal and should not be used. Even though the URI parser classes should really have been exposed through the public API. This includes a public URI parser URIInfo exposed through the api package, but its implementation URIInfoImpl is part of core and hence not exposed. 


This does not affect any public component classes in the Olingo2 component.  


See OLINGO-420.",dhirajsb:1424100439:2015-02-16T23:27:19.453+0000:1424100439:2015-02-16T23:27:19.453+0000:Fix committed to master and 2.14.x branches
0,CAMEL-8357,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,2,2015-02-15 04:25:20+00:00,2015-02-27 08:48:56+00:00,"Enhance all Camel file-type consumers to probe the content type and populate a header on the exchange to allow access to content type.
See:
http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#probeContentType%28java.nio.file.Path%29","davsclaus:1423959601:2015-02-15T08:20:01.773+0000:1423959601:2015-02-15T08:20:01.773+0000:You have a system out printlin in your GenericFile which should be removed
davsclaus:1424570866:2015-02-22T10:07:46.851+0000:1424570866:2015-02-22T10:07:46.851+0000:I removed the system out.

For hdfs / hdfs2 you would need to add this manually as they dont use the generic file api from camel-core.
njiang:1424998102:2015-02-27T08:48:22.163+0000:1424998102:2015-02-27T08:48:22.163+0000:I just check the code of ftp and hdfs/hdfs2, the File instances which these component use don't extends java.io.File, so we cannot use the Files.probeContentType API within these components."
0,CAMEL-8356,Bug,Major,"2.14.1, 2.15.0","2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Willem Jiang,Stefan Mandel,0,6,2015-02-14 12:05:33+00:00,2019-04-26 07:09:26+00:00,"Calling IOConverter.toInputStream with either UTF-8 or ISO-8859-1 returns a stream that behaves strange on non-ascii-characters:



putting this stream into an InputStreamReader will return false encoded characters
a naive new BufferedReader(new InputStreamReader(new FileInputStream(file), charset)) will return the correctly encoded characters.



I will attach some unit tests for this case.","almond:1423887217:2015-02-14T12:13:37.605+0000:1423887217:2015-02-14T12:13:37.605+0000:I wanted to provide a patch, but the resulting patch also had charset problems. So the Test has to be deployed manually:
- The java file can be placed next to th IOConverterTest
- The text files have to be placed at the directory mentioned in the test

I can help to debug/patch this problem, when someone has confirmed this defect.
almond:1423887385:2015-02-14T12:16:25.147+0000:1423887415:2015-02-14T12:16:55.670+0000:To fix CAMEL-8346 I suggest to use the GenericFileConverter.toInputStream, which is dependent on IOConverter.

Yet GenericFileConverter will not solve CAMEL-8346 because of this IOconvert.toInputStream problem.

njiang:1423953933:2015-02-15T06:45:33.691+0000:1423953933:2015-02-15T06:45:33.691+0000:When you consume the InputStream with a Reader, you need to specify the charset that reader use.
As IOconvert.toInputStream just return an InputStream back, it has no chance to use the charset information.
How about use IOconvert.toReader(File file, String charset) directly?

almond:1423983740:2015-02-15T15:02:20.696+0000:1423983740:2015-02-15T15:02:20.696+0000:How exactly is the specification of  IOconvert.toInputStream(File file, String charset)?

I expected that it transforms the file to a stream using the specified charset. In fact that method uses the charset (can be seen in the implementation), but the resulting stream delivers exactly the same byte sequence as the one without charset specification.

Using  IOconvert.toReader(File file, String charset) would be fine, but will not work for 2.14.x because it is not public in this branch. Besides this is a workaround, but the inconsistency of toInputStream stays.
almond:1423983952:2015-02-15T15:05:52.424+0000:1423984046:2015-02-15T15:07:26.309+0000:The third unit test (I just replaced the old test file attachment) shows that the returned byte stream is the same as a pure FileInputStream.

This seems strange, because anybody can see that the implementation does use the specified charset. However the Streaming-Pipeline (Stream->BufferedReader->Stream) seems to loose it.

As I said - i can hunt this bug down, but yet I am not certain if a majority recognizes this behaviour as bug.
githubbot:1424689979:2015-02-23T19:12:59.637+0000:1424689979:2015-02-23T19:12:59.637+0000:GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/406

    CAMEL-8356 IOConverter.toInputStream(file, charset) returns strange

    I extended some Unittests to point out the problems:
    - toReader(file, charset) does respect the charset
    - toStream(file, charset) does not respect the charset
    
    The provided Patch for IOConverter.toInputStream does respect the charset. I do not know if other projects already rely on the current behaviour that the charset is completely ignored.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/406.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #406
    
----
commit 9020431e167c2f03d96597d3c598fd988b2b5f56
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-02-14T17:31:37Z

    CAMEL-8356 IOConverter.toInputStream(file, charset) returns strange
    behaving stream

----

njiang:1425054877:2015-02-28T00:34:37.885+0000:1425054877:2015-02-28T00:34:37.885+0000:Applied the patch into camel-core with thanks to Stefan.
almond:1425098836:2015-02-28T12:47:16.929+0000:1425099297:2015-02-28T12:54:57.799+0000:I reviewed your patch and I think we both made a mistake.

My intension was to provide an Inputstream which could be read by any unparameterized reader / wrapper stream. I will attach a patch for the tests and a fix for IOConverter.toInputStream.

Your cleanup made obvious that my fix converts the stream to UTF-8, which could only be read by readers with UTF-8 (instead of default) input encoding.

The attachment will fix CAMEL-8346 for branch 2.14 but unfortunately breaks branch 2.15. You cannot apply this attachment to branch 2.15.x without another fix for CAMEL-8346.

Notify me if you want to apply this patch. I will try to provide a patch for CAMEL-8346 on branch 2.15.x then.





almond:1425098968:2015-02-28T12:49:28.831+0000:1425098968:2015-02-28T12:49:28.831+0000:The proposed patch. Note that this patch needs another patch in JsonPathEngine (camel-jsonpath, only in the branches 2.15.x and newer), because the used JsonProvider expects a ""UTF-8""-stream (and not a default-encoded stream).
davsclaus:1425168802:2015-03-01T08:13:22.027+0000:1425168802:2015-03-01T08:13:22.027+0000:We would need a patch for 2.15 as a release is scheduled soon.
githubbot:1425179507:2015-03-01T11:11:47.395+0000:1425179507:2015-03-01T11:11:47.395+0000:Github user almondtools closed the pull request at:

    https://github.com/apache/camel/pull/406

githubbot:1425181420:2015-03-01T11:43:40.735+0000:1425181420:2015-03-01T11:43:40.735+0000:GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/412

    CAMEL-8356 corrections to default charset

    this pull request contains:
    - corrections to IOConverter as described in issue CAMEL-8356
    - unit tests for json path (related to CAMEL-8346)
    - the fix for CAMEL-8346 (ported from master)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel CAMEL-8356-2.14.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/412.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #412
    
----
commit 7f6538cb1b30a80eef3f743d0f9e98b3e7b8f1bc
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-03-01T11:26:15Z

    CAMEL-8356 corrections to default charset

----

githubbot:1425181618:2015-03-01T11:46:58.772+0000:1425181618:2015-03-01T11:46:58.772+0000:GitHub user almondtools opened a pull request:

    https://github.com/apache/camel/pull/413

    CAMEL-8356 corrections to default charset

    this pull request contains:
    
    * corrections to IOConverter as described in issue CAMEL-8356
    * the fix for CAMEL-8346 adjusted to the the fix of CAMEL-8356
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/almondtools/camel CAMEL-8356-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/413.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #413
    
----
commit 55607d14787f574825e309a975659861e7d6ead4
Author: Stefan Mandel <mandelst@gmail.com>
Date:   2015-03-01T11:26:15Z

    CAMEL-8356 corrections to default charset

----

almond:1425181981:2015-03-01T11:53:01.764+0000:1425181981:2015-03-01T11:53:01.764+0000:I just proposed two pull requests, for each affected branch (2.14 and 2.15).

Yet the fixes to jsonpath are included. I considered this best, because the fixes are not independent. If you suggest another partitioning of the commits I can adjust them.
githubbot:1425247137:2015-03-02T05:58:57.667+0000:1425247137:2015-03-02T05:58:57.667+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/412

njiang:1425319567:2015-03-03T02:06:07.127+0000:1425319567:2015-03-03T02:06:07.127+0000:Applied the patch into camel master and camel-2.14.x branches.
githubbot:1425348779:2015-03-03T10:12:59.003+0000:1425348779:2015-03-03T10:12:59.003+0000:Github user almondtools closed the pull request at:

    https://github.com/apache/camel/pull/413

ssidashov:1433192580:2015-06-02T05:03:00.231+0000:1433192580:2015-06-02T05:03:00.231+0000:It seems encoding problem with IOConverter still exists. I try to load text file in cp1251 encoding, using file component (uri=file:C:\addr\in\?charset=cp1251 for example). Then I write bean with method:

public static String convertStreamToString(InputStream inputStream) throws IOException {
        if (inputStream == null) return null;
        StringBuilder sb = new StringBuilder(2048); // Define a size if you have an idea of it.
        char[] read = new char[128]; // Your buffer size.
        try (InputStreamReader ir = new InputStreamReader(inputStream, ""cp1251"")) {
            for (int i; -1 != (i = ir.read(read)); sb.append(read, 0, i));
        } catch (Throwable t) {}
        return sb.toString();
    }
to test conversion from File to InputStream. This stream for some files reads all content successfully, but for some files it clips contents of file. It seems file reading ends with some characters (for example, in cp1251 encoding, file reading ends with characters 'яя'). Camel version 2.15.2, java version 1.8.0_45.
njiang:1433287059:2015-06-03T07:17:39.953+0000:1433287451:2015-06-03T07:24:11.228+0000:[~ssidashov]
I just found you use char array as buffer to read the stream, what if the read method just read more than 128 character. Can you submit a simple test case for us to dig the issue?
ssidashov:1433297323:2015-06-03T10:08:43.104+0000:1433297679:2015-06-03T10:14:39.218+0000:source.txt - original file with non-ascii characters
result.txt - file processed by route

files in cp1251 encoding

<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:context=""http://www.springframework.org/schema/context""
       xmlns:tx=""http://www.springframework.org/schema/tx"" xmlns:jaxws=""http://cxf.apache.org/jaxws""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <camelContext xmlns=""http://camel.apache.org/schema/spring"">
        <route>
            <from uri=""file:C:\\test\\in?charset=cp1251""/>
            <!--<convertBodyTo type=""String""></convertBodyTo>-->
            <convertBodyTo type=""java.io.InputStream""/>
            <to uri=""file:C:\\test\\out""/>
        </route>
    </camelContext>
</beans>

when I uncomment conversion to String step then file processed and copied entirely. When step is commented, file clipped to position of 'яя' symbols.
mvlakh:1556233766:2019-04-26T07:09:26.678+0000:1556233766:2019-04-26T07:09:26.678+0000:Hello [~njiang],

I have a question regarding this issue and the way it was fixed. It seems like there is a defect or maybe I do not understand something, maybe you can help me?

The issue is the following, I have a file consumer that I use to process XML files with UTF-8 charset. In my processor I am taking content of an incoming file like this:
{code:java}
exchange.getIn().getBody(InputStream.class){code}
and then I am passing it to XML parser together with configured charset (UTF-8) to make sure that reader, that is used by XML parser, will consume binary stream correctly. 

The issue is that if default system charset is not UTF-8 (valid case for my application) I am getting question marks instead of Chinese characters. 

After some debugging I found a strange thing, the converted, which is used to give me file body as InputStream, org.apache.camel.converter.IOConverter.toInputStream(File, String) does something strange, it reads characters from the file and them encodes them into system's default charset. This blew my mind, this looks wrong.

When I take body as InputStream I am expecting to get a binary stream, not a re-encoded characters stream. The current behavior seems totally unexpected to me.

Thank you for your answer in advance. 

 "
0,CAMEL-8355,Bug,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Jeremy,0,4,2015-02-14 10:30:13+00:00,2015-02-16 13:45:24+00:00,"Using ""dynamicity=true"" on MongoDb endpoint is running a dropIndex command on the specified collection (CamelMongoDbCollection header), for each exchange going through.","githubbot:1423886156:2015-02-14T11:55:56.622+0000:1423886156:2015-02-14T11:55:56.622+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/395

    CAMEL-8355 Dynamicity flag on Mongodb endpoint run a dropIndex() command on specified collection

    Hi all,
    
    This PR is related to the following issue:
    https://issues.apache.org/jira/browse/CAMEL-8355
    
    Thanks.
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel CAMEL-8355-Dynamicity-flag-mongodb-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/395.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #395
    
----
commit f70af503d811c54874c414b335c36a12458cba57
Author: ancosen <ancosen@gmail.com>
Date:   2015-02-14T11:51:10Z

    Fix CAMEL-8355 issue. The mongoDB endpoint was deleting all the indexes when setting dynamicity parameter to true

----

acosentino:1423886321:2015-02-14T11:58:41.252+0000:1423886337:2015-02-14T11:58:57.532+0000:PR submitted:

https://github.com/apache/camel/pull/395/

Andrea
Sufod:1423886648:2015-02-14T12:04:08.831+0000:1423886648:2015-02-14T12:04:08.831+0000:Thanks :)
acosentino:1423886759:2015-02-14T12:05:59.216+0000:1423886759:2015-02-14T12:05:59.216+0000:It was a very weird behaviour. I ran all the tests with this fix and everything seems ok.
Sufod:1423886822:2015-02-14T12:07:02.163+0000:1423886822:2015-02-14T12:07:02.163+0000:https://github.com/apache/camel/pull/395
acosentino:1423886937:2015-02-14T12:08:57.585+0000:1423886937:2015-02-14T12:08:57.585+0000:Wait for the merge before change the state to ""Resolved"".
davsclaus:1423892440:2015-02-14T13:40:40.115+0000:1423892440:2015-02-14T13:40:40.115+0000:Thanks for the PR
githubbot:1424065524:2015-02-16T13:45:24.444+0000:1424065524:2015-02-16T13:45:24.444+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/395
"
0,CAMEL-8354,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-14 08:44:27+00:00,2015-02-14 13:35:59+00:00,"The bean component should be a producer only, which makes most sence, eg to call a bean by sending a message to it, where the message is data for the bean parameters.


We should remove support for consumer, which was not intended but was possible due its use of ProcessorEndpoint and being based on old stuff from 1.x days.


The bean component should also be more aligned like the other components and how it setup and initializes itself, using doStart / doStop as others do.",
0,CAMEL-8323,Improvement,Minor,2.14.1,2.16.0,"

patch

",Resolved,Fixed,2.16.0,Claus Ibsen,Maksim Kviatkouski,0,2,2015-02-07 17:14:53+00:00,2015-08-19 09:21:12+00:00,"JcrProducer creates nt:unstructured nodes without ability to specify node type. There should be possibility to specify node type by passing it through message header JcrConstants.JCR_NODE_TYPE
Documentation at http://camel.apache.org/jcr.html will need to be updated","maksim_kviatkouski:1423336758:2015-02-08T03:19:18.462+0000:1423337044:2015-02-08T03:24:04.154+0000:I think that would be also great to provide a config option for JCR Producer not to persist changes into JCR session right after message was received. For example if I need to create a node with type ""nt:file"" I cannot create ""nt:file"" node only - I'll get a ConstraintViolationExcaption due to missing child jcr:content node. So there are two options:
- allow more flexible creation of parent-child pairs (specifying headers for both of them)
- let jcr producer not to do session.save() after each message received so code can look like that:

{code}
from(""direct:someInput"")
.multicast(""direct:createParent"", ""direct:createChild"", ""direct:saveChanges"");

from(""direct:createParent"")
.to(""jcr://user:pass@repo/tmp/parent?saveImmediately=false"");
from(""direct:createChild"")
.to(""jcr://user:pass@repo/tmp/parent/child?saveImmediately=false"");
from(""direct:saveChanges"")
.to(""jcr://user:pass@repo/tmp/parent?noop=true""); //noop would mean that no node should be created
{code}

Though in this case session needs to be kept open during Camel context lifetime and I'm not sure how well it fits its architecture.
I'd be grateful if you could help me to understand what would be right solution there and I'll be more than happy to implement it.
davsclaus:1439947271:2015-08-19T09:21:11.961+0000:1439947271:2015-08-19T09:21:11.961+0000:Thanks for the patch."
0,CAMEL-8322,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-06 15:40:50+00:00,2015-02-09 10:00:17+00:00,"We have all the endpoint options, but do not have for the component itself.


We should generate those based on getter/setter which is how you configure components.


Then the apt plugin can discover and generate that information also.",
0,CAMEL-8321,Improvement,Major,None,"2.14.2, 2.15.0","
None
",Closed,Fixed,"2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Claus Ibsen,1,3,2015-02-06 11:28:52+00:00,2015-02-18 01:45:56+00:00,This is standard Camel that header keys never has dots as that dont work well with various components such as jms and whatnot.,"julian.cable:1423295510:2015-02-07T15:51:50.867+0000:1423295510:2015-02-07T15:51:50.867+0000:Indeed - hit that problem with custom headers driving velocity templates.
julian.cable:1423297655:2015-02-07T16:27:35.333+0000:1423297757:2015-02-07T16:29:17.798+0000:I've attached a sed script that will make the change. I left the PROPERTY_PREFIX alone - if you want to change that too it's easy by hand:

        super(BoxConfiguration.class, BoxConstants.PROPERTY_PREFIX);
./src/main/java/org/apache/camel/component/box/internal/BoxPropertiesHelper.java
    String PROPERTY_PREFIX = ""CamelBox."";
    String NEXT_STREAM_POSITION_PROPERTY = PROPERTY_PREFIX + ""nextStreamPosition"";
    String CHUNK_SIZE_PROPERTY = PROPERTY_PREFIX + ""chunkSize"";
./src/main/java/org/apache/camel/component/box/internal/BoxConstants.java


But the file:

./src/main/java/org/apache/camel/component/box/BoxConverter.java

should be changed:

            folderId = exchange.getIn().getHeader(BoxConstants.PROPERTY_PREFIX + ""folderId"", ""0"", String.class);

should now be:

            folderId = exchange.getIn().getHeader(""CamelBoxFolderId"", ""0"", String.class);

on two occasions.

The sed can be invoked by putting it in ~ and running a find from the camel-box folder as:

find . -type f -a -exec sed -i -f ~/box.sed ""{}"" \; 

It builds after this change but will be incompatible with existing users code.
davsclaus:1423700820:2015-02-12T08:27:00.013+0000:1423700820:2015-02-12T08:27:00.013+0000:[~dhirajsb] any thoughts on this?

> Any of the options can be provided in a message header for producer endpoints with CamelBox. prefix.

If the prefix header is changed from CamelBox. to CamelBox (without dot). Would the message headers still be able to use as options, as said above?

eg before
{code}
key=CamelBox.folderId
{code}

After
{code}
key=CamelBoxFolderId
{code}

Notice that the first letter of the option is upper cased? Or we can make the case not matter?

I wonder if this requires any change in the core api component or what?



dhirajsb:1423749598:2015-02-12T21:59:58.226+0000:1423749598:2015-02-12T21:59:58.226+0000:Why are Box headers being used/fed in other components/processors? These headers are only supposed to be fed to the Box component, then should be cleaned up n the next step. 

I wasn't aware of the Camel 'no dots in header' convention. I'll have to take a look at the API framework to see if that's affected. At the very minimum code generation maven plugin is affected since it uses that convention for all generated components, and also would make the new components backward incompatible. 
dhirajsb:1423814267:2015-02-13T15:57:47.470+0000:1423814267:2015-02-13T15:57:47.470+0000:I'll fix it in the framework and the code generation plugins so that it supports both legacy '.' prefixed headers as well as the Camel case 'no dots' format. New components will use the camel case format in test code. Existing component integration tests could be updated to not use the '.' prefix, but won't have to be updated right away if the legacy style is also supported. 
davsclaus:1423898680:2015-02-14T15:24:40.806+0000:1423898680:2015-02-14T15:24:40.806+0000:Good idea Dhiraj.

If you have time to do this before Camel 2.15 that would be good, if not then please push this for Camel 2.16.
dhirajsb:1424195156:2015-02-18T01:45:56.870+0000:1424195156:2015-02-18T01:45:56.870+0000:Added support for camel case header names in API Component Framework. The framework defaults to '.' separated property names in generated test code and at runtime, but also looks for camel case property names. 
Also modified Box component to support camel case names for folderId and fileName. 
Changes pushed to master and 2.14.x branches."
0,CAMEL-8320,Sub-task,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-06 10:32:12+00:00,2015-03-01 07:43:51+00:00,"When using @UriPath on endpoints to denote that this is an option part of the beginning of the uri, such as host name, port, authority, context path etc. 


What we need is some way of being able to know what is the syntax, so when tools build endpoints using the information from @UriPath and @UriParam, then the tooling needs to know how to build that url.


eg should it separate @UriPath using color or forward slash or something else.",davsclaus:1425167031:2015-03-01T07:43:51.774+0000:1425167031:2015-03-01T07:43:51.774+0000:There is a syntax attribute on UriEndpoint now
0,CAMEL-8319,Task,Minor,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Chris Pimlott,0,2,2015-02-06 01:50:35+00:00,2015-02-06 06:29:33+00:00,"I was following the velocity template example on the wiki and had some confusion over why it was failing.  I was even more confused when the same test worked in the camel-velocity component project.


What I did was cut-and-paste the template from the wiki page into letter.vm, and also cut-and-paste the unit test code into a JUnit test.


Finally I noticed that the velocity template, when transcluded in the wiki page, has extra spaces in the empty lines that make it different than the one expected by the test.  Perhaps you can figure out a way to prevent the extra space from being added to the template when shown on the wiki, or modify the template so that it doesn't get affected by that whitespace.  Just want to avoid someone else getting confused like I did.",davsclaus:1423175373:2015-02-06T06:29:33.908+0000:1423175373:2015-02-06T06:29:33.908+0000:Yeah we can use double quote which I assume would show better.
0,CAMEL-8318,Bug,Major,None,,"
None
",Resolved,Invalid,None,Claus Ibsen,Lakshma,0,2,2015-02-05 21:21:10+00:00,2015-02-06 05:28:50+00:00,"Camel FTP - FTP poll is not consuming any files from ftp server:


Route sample - 
  from(""ftp://xxx@yyyy/zzzz?""
				+ ""password=RAW(ftp.pass)""
				+ ""&delete=true""
				+ ""&idempotent=true""
				+ ""&include=vmstosolr.*""
				+ ""&consumer.exceptionHandler=#cantConnectHandler""
				+ ""&consumer.delay=10000""
				+ ""&consumer.greedy=false""
				+ ""&consumer.backoffMultiplier=10""
				+ ""&consumer.backoffIdleThreshold=3""
				+ ""&consumer.backoffErrorThreshold=3""
				+ ""&passiveMode=true""
				+ ""&localWorkDirectory=file.tmp"")	
			.routeId(""fromFtpToCsvRecords"")
			.routePolicy(routePolicy)
			.to(""file.inbox"");


FTP poll works fine most of the time. But once in a while we see the below error in my log. From the point this error occured, No files getting consumed from ftp server. Files keep getting accumilated on the ftp and has to restart the tomcat server which host the application that contains ftp component logic.


""File operation failed: 150 Opening ASCII mode data connection for vmstosolr_20150204215023.csv.
IOException caught while copying.. Code: 150""


Camel version - 2.12.3


Please suggest ASAP. Thanks in advance.","davsclaus:1423171730:2015-02-06T05:28:50.878+0000:1423171730:2015-02-06T05:28:50.878+0000:As said on support page use the mailing list / user forum to get help with this kind of question
http://camel.apache.org/support"
0,CAMEL-8317,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-05 10:14:07+00:00,2015-02-05 14:55:48+00:00,"So we can do



<endpoint id=""foo"" uri=""file:something"">
   <property name=""includes"" value=""backup/*.xml""/>
   <property name=""recursive"" value=""true""/>
   ...
</endpoint>




See also CAMEL-7419",
0,CAMEL-8316,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-02-05 08:56:37+00:00,2015-02-05 14:55:57+00:00,"Using the generic name property is unfortunate as it causes clash in XML DSL and also confusion about property placeholders etc.


Also this language is less in use, as more often people use simple language which is more powerful with predicates and expressions around exchange properties / message headers / bodies etc.


See also CAMEL-7094 as a side effect of this naming clash.",
0,CAMEL-8315,Bug,Major,2.12.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,HugoMarco,0,3,2015-02-05 07:28:06+00:00,2015-02-09 05:32:58+00:00,"I set the option ""responseHeaderSize"" like :
JettyHttpComponent jettyHttpComponent=(JettyHttpComponent) getContext().getComponent(""jetty"");
jettyHttpComponent.setResponseHeaderSize(51202);


But there is no effect;then I checked the camel-jetty.jar's source,and found in JettyHttpComponent.createSocketConnector:
if (responseHeaderSize != null) 

{
            answer.setResponseBufferSize(responseHeaderSize);
        }","njiang:1423093748:2015-02-05T07:49:08.317+0000:1423094026:2015-02-05T07:53:46.761+0000:I just check the code of camel master, it is not fixed yet. 
We just need to update the camel-jetty8 code for it as CAMEL-8222 fix the same issue here.
davsclaus:1423192960:2015-02-06T11:22:40.050+0000:1423192960:2015-02-06T11:22:40.050+0000:Willem is all of this done, if so fell free to resolve this ticket"
0,CAMEL-8314,Bug,Major,2.14.1,None,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Thomas Diesler,0,2,2015-02-04 13:08:49+00:00,2015-02-06 08:01:33+00:00,"In XQueryTransformTest we see this



<people><person name='Jonathan'/></people>
...
transform().xquery(""/people/person[@name='Jonathan']"")




the expected result is 



<person name=\""Jonathan\""/>




Note, this is the entire node - not just the value ""Jonathan""


When trying to select a node value like this 



<people><person>Jonathan</person></people>
...
transform().xquery(""/people/person/text()"")




I get



Caused by: net.sf.saxon.trans.XPathException: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted. 
	at net.sf.saxon.dom.DOMWriter.characters(DOMWriter.java:218) [Saxon-HE-9.5.1-5.jar:]
	at net.sf.saxon.event.ProxyReceiver.characters(ProxyReceiver.java:193) [Saxon-HE-9.5.1-5.jar:]
	at net.sf.saxon.event.TreeReceiver.characters(TreeReceiver.java:246) [Saxon-HE-9.5.1-5.jar:]
	at net.sf.saxon.evpull.EventIteratorToReceiver.copy(EventIteratorToReceiver.java:49) [Saxon-HE-9.5.1-5.jar:]
	at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:516) [Saxon-HE-9.5.1-5.jar:]
	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:179) [camel-saxon-2.14.1.jar:2.14.1]
	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:135) [camel-saxon-2.14.1.jar:2.14.1]","davsclaus:1423121267:2015-02-05T15:27:47.305+0000:1423121267:2015-02-05T15:27:47.305+0000:You need to tell it to use String as the result type, eg

                    transform().xquery(""/people/person/text()"", String.class).

tdiesler:1423180869:2015-02-06T08:01:09.395+0000:1423180893:2015-02-06T08:01:33.703+0000:great, thanks.

for the record ... this also works

{code}
                Namespaces ns = new Namespaces(""ns"", ""http://org/wildfly/test/jaxb/model/Customer"");
                from(""direct:start"").transform().xquery(""/ns:customer/ns:firstName"", String.class, ns)
{code}"
0,CAMEL-8313,Bug,Major,"2.13.3, 2.14.1","2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Willem Jiang,0,1,2015-02-04 12:55:36+00:00,2015-02-04 13:23:17+00:00,"I am running a web service in Cxf PAYLOAD mode and in one of the use cases I need to convert the body into Node (Element) and I am doing that by cxfpayload.getBody().get(0)
This makes the namespaces from nsMap to be copied on to the element. While doing so, if the nsMap contains a namespace prefix that is also part of the element's attribute, it is being overwritten in the addNamespace(Element element, Map<String, String> nsMap) method.
But when same prefix in soap Envelope and body contains different namespace values, that makes the body (XML) invalid.
Here is a sample soap request that contains same namespace prefix ns1 in soap:Envelope and soap:Body but contains different namespace values.



<soapenv:Envelope 
xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" 
xmlns:ns=""http://www.example.com/location/consumerfundbalances/1/"" 
xmlns:ns1=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"">
<soapenv:Body>
<ns1:retrieveFundBalances 
xmlns=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/""
xmlns:ns1=""http://www.example.com/location/consumerfundbalances/1/"">
<retrieveFundBalances>
<fundBalancesRequestIdentifier/>
</retrieveFundBalances>
</ns1:retrieveFundBalances>
</soapenv:Body>
</soapenv:Envelope>




Now when I convert the payload into DOM Node, here is output XML namespace value for prefix ns1 is being replaced with the envelope.



<ns1:retrieveFundBalances 
xmlns:ns1=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"" 
xmlns=""http://www.example.com/consumerfundbalances/retrievefundbalances/bi/1/"" 
xmlns:ns=""http://www.example.com/location/consumerfundbalances/1/"">
<retrieveFundBalances>
<fundBalancesRequestIdentifier/>
</retrieveFundBalances>
</ns1:retrieveFundBalances>","njiang:1423027397:2015-02-04T13:23:17.770+0000:1423027397:2015-02-04T13:23:17.770+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x."
0,CAMEL-8312,Improvement,Major,"2.13.3, 2.14.1","2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Stephan Siano,0,2,2015-02-04 07:25:25+00:00,2015-03-03 21:12:58+00:00,If the documentType of an XPath expression is set to a class for that no type converter exists and the data to which the expression is applied is of type WrappedFile or String the XPath will seem to work anyway. However this setup will create issues by using an InputSource created from the String or Generic file.,"siano:1423013402:2015-02-04T09:30:02.157+0000:1425387021:2015-03-03T20:50:21.277+0000:One thing I overlooked:

the javadoc of the XPathBuilder.documentType() method says:
...
For example you can set it to InputSource to use SAX streams. By default Camel uses Document as the type.
...

Using InputSource as documentType is a particularily bad idea. If the XPath implementation supports it (Saxon does, the JDK implementation doesn't), SAXSource can be a more memory efficient choice for the docuementType. We should probably also change the Javadoc here...
siano:1423017143:2015-02-04T10:32:23.988+0000:1423017143:2015-02-04T10:32:23.988+0000:There were some issues in camel-saxon tests, so I fixed the test in there, too...
siano:1425248361:2015-03-02T06:19:21.444+0000:1425386921:2015-03-03T20:48:41.290+0000:Hi Claus,

are you sure that you want to delay this till 2.15.0? 
I think this issue is serious.

Best regards
Stephan"
0,CAMEL-8311,Improvement,Major,"2.13.3, 2.14.1","2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Stephan Siano,0,1,2015-02-03 09:58:37+00:00,2015-03-03 21:13:14+00:00,"The XMLConverter creates issues when converting XML Documents for SAXSource.
DOM and StAX parsing is not affected.","siano:1422936111:2015-02-03T12:01:51.683+0000:1422936136:2015-02-03T12:02:16.044+0000:I just saw that the XsltDTDTest was failing. However I don't see that it is an error if the runtime reacts in the same way with allowStax=false as with allowStax=true. Therefore I have changed the test.
siano:1423003962:2015-02-04T06:52:42.114+0000:1423003962:2015-02-04T06:52:42.114+0000:Sorry, I attached the patch file again where the fix for XsltDTD test was missing.
siano:1423016253:2015-02-04T10:17:33.479+0000:1423016253:2015-02-04T10:17:33.479+0000:There was virtually the same test in camel-saxon. This patch also fixes that one...
siano:1423019220:2015-02-04T11:07:00.624+0000:1423019220:2015-02-04T11:07:00.624+0000:I mixed up the patches a little. If you only apply this patch, you will get a test error in camel-saxon. The fix for that accidentally run into the patch for CAMEL-8312, however if you are ok with that I'd like to stop changing the patches (tests will be fine if you apply the patch for CAMEL-8312 first)."
0,CAMEL-8310,Improvement,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Sajjad Akhter,0,2,2015-02-03 06:00:21+00:00,2015-02-22 15:28:31+00:00,Current implementation has requeue is set to false that means there is no way for me to put back message in the queue if its  one of the downstream system is down,"davsclaus:1424590111:2015-02-22T15:28:31.930+0000:1424590111:2015-02-22T15:28:31.930+0000:Thanks for reporting, and the PR"
0,CAMEL-8309,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2015-02-02 18:42:29+00:00,2015-02-04 18:52:33+00:00,"If you have very long uris in routes, then in Java DSL you can just split the code into new lines, as its just Java code.


But in XML you cannot do that. So we should allow the uri attribute to have new lines, and then when parsing the CamelContext we remove those whitespace noise, so the uri is one line.


The parser does this partly when you obtain the attribute. All new lines, tabs etc is represented as a space. But then the url has double spaces, we need to trim, in the parser.


You will still have to use & to separate the options though


Here is a very little example with only 2 options, but just imagine if the url was longer



        <route>
            <from uri=""direct:start""/>
            <to uri=""seda:bar?timeout=10000
              &amp;blockWhenFull=true""/>
        </route>

        <route>
            <from uri=""seda:bar?
              timeout=10000&amp;
              blockWhenFull=true""/>
            <to uri=""mock:bar""/>
        </route>","davsclaus:1422881602:2015-02-02T20:53:22.925+0000:1422881602:2015-02-02T20:53:22.925+0000:Updated docs at
https://cwiki.apache.org/confluence/display/CAMEL/How+do+I+configure+endpoints
davsclaus:1422881675:2015-02-02T20:54:35.117+0000:1422881675:2015-02-02T20:54:35.117+0000:Notice its only the attribute with name uri / url that is supported.

We may want to extend this to resourceUri or some other variations that enrich / pollEnrich may use in the EIPs. Or maybe just check if the attribute has uri as part of its name?"
0,CAMEL-8308,Bug,Major,2.14.1,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Daniel Neugebauer,0,3,2015-02-02 16:22:15+00:00,2016-04-28 14:35:48+00:00,"If RabbitMQEndpoint is configured with either prefetchEnabled=false or prefetchCount=0 (both are default values), then messages appear to be locked on server-side (getting prefetched with high/no limit?).


To reproduce:



add multiple messages to a RabbitMQ queue which define an expiration header (after expiration, RabbitMQ will remove those message from queue without delivering them to consumers)
watch RabbitMQ admin panel, you should see n messages are ""Ready"", 0 messages are ""Unacknowledged""
configure & run one concurrent RabbitMQEndpoint from Camel with above settings + autoAck=false and delay/block processing of messages (e.g. by running Thread.wait(10000) in a Processor)
watch the admin panel again: 0 messages are ""Ready"", n messages are ""Unacknowledged"" - so Camel appears to have prefetched all messages?
wait until messages should have expired
admin panel still shows all unprocessed messages as unacknowledged although they should have been removed from queue
Camel still processes those messages after expiration
stop Camel (returns all unacknowledged messages to ready state)
admin panel shows that all messages now have been purged from queue (much later than they should have)



Workaround: Repeating with prefetchEnabled=true and prefetchCount=1 shows only 1 message ""unacknowledged"" while queue is being processed by Camel, all other messages remain ""ready"" and expire in time (thus skipping the Camel queue as expected).


Expected behaviour: If the prefetcher is disabled, no messages should get locked on server-side, so messages can be expired by RabbitMQ as intended by the message sender.","neoramon:1426080402:2015-03-11T21:26:42.452+0000:1426080402:2015-03-11T21:26:42.452+0000:Hello [~dneuge],
The expiration is set in ""properties"", not in the ""header"".
I can't reproduce in RabbitMQ 3.1.4, Erlang R16B01, Apache Camel 2.14.1 and amqp-client 3.3.4.
dneuge:1426126130:2015-03-12T10:08:50.587+0000:1426126247:2015-03-12T10:10:47.130+0000:Sorry, of course I meant the properties. :)

Here it's RabbitMQ 3.2.4, Erlang R15B03-1, Camel 2.14.1, amqp-client 3.3.4. The message is generated via [php-amqplib|https://github.com/videlalvaro/php-amqplib] 2.4.1 (which shouldn't matter):
{code:none}
$msg = new AMQPMessage($msg_body, array(
    'content_type' => 'text/plain',
    'delivery_mode' => 2,
    'expiration' => $timeoutSeconds * 1000,
    //'reply_to' => 'amq.rabbitmq.reply-to'
    'reply_to' => $replyQueueName
));
$ch->basic_publish($msg, $exchangeName);
{code}

It's not in production yet, so I may get an opportunity to try an update next week (I'm currently on vacation). Both RabbitMQ 3.1.4 and 3.2.4 (latest ""stable"" on the Linux distribution we use) are fairly old but since I get that issue on a later version, there might have been some new feature introduced between 3.1 and 3.2 which causes that message locking. The news regarding 3.2.0 says it ""features enhanced policies for aspects of the broker which previously required AMQP arguments"" - maybe that's the culprit unless it's just some bug in RabbitMQ (but then still the client appears to be too eager when querying for messages).
neoramon:1446530371:2015-11-03T13:59:31.626+0000:1446530371:2015-11-03T13:59:31.626+0000:It isn't a camel issue, just a RabbitMQ configuration. By default RabbitMQ prefetch is unlimit, so it will get all messages available in broker.

davsclaus:1461825348:2016-04-28T14:35:48.752+0000:1461825348:2016-04-28T14:35:48.752+0000:Okay thanks for the explanation Ramon"
0,CAMEL-8307,Improvement,Minor,2.12.0,"2.14.2, 2.15.0","
None
",Closed,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Siarhei Krukau,0,1,2015-02-02 15:42:53+00:00,2018-09-04 23:07:14+00:00,"When whitespaces or newlines are used in location attribute of propertyPlaceholder (XML):



<propertyPlaceholder id=""camelPropertyPlaceholderConfigurer""
    location=""classpath:a/b/c/environments/base.properties,
              classpath:a/b/c/environments/${env:ENV}/env.properties,
              classpath:a/b/c/environments/${ENV}/env.properties""
    ignoreMissingLocation=""true""/>




, the properties are loaded only from the first source (base.properties) in this case. The problem may be in org.apache.camel.component.properties.DefaultPropertiesResolver#loadPropertiesFromClasspath:



    protected Properties loadPropertiesFromClasspath(CamelContext context, boolean ignoreMissingLocation, String path) throws IOException {
        Properties answer = new Properties();

        if (path.startsWith(""classpath:"")) {
            path = ObjectHelper.after(path, ""classpath:"");
        }

        InputStream is = context.getClassResolver().loadResourceAsStream(path);
        if (is == null) {
           ...
        } else {...}

        return answer;
    }




startsWith returns false as the path are splitted around ,. Trimming the path somewhere around those calls may help.",
0,CAMEL-8306,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,2,6,2015-02-02 12:00:31+00:00,2023-10-19 15:51:02+00:00,"See SO
http://stackoverflow.com/questions/28264748/regex-on-camel-rest-component


eg if we add support for using * as a wildcard then people can do rest paths with * as suffix, to indicate that it should match by wildcard


eg


 rest(""/api/user/*"") 


To match



/api/user
/api/user/foo
-/api/user/foo/bar



As * requires support from the underlying component, but most of them support that too, eg servlet / jetty / netty-http etc so likely we should be able to do this","davsclaus:1427099857:2015-03-23T16:37:37.743+0000:1427099857:2015-03-23T16:37:37.743+0000:We may need to introduce a intermediate route layer in camel rest-dsl so we can have match by wildcard and the likes coded in one place, and support on all http transports. Then we can better control the matching, such as the issue with restlet that has a bug - another ticket logged about that.
davsclaus:1491534264:2017-04-07T11:04:24.174+0000:1491534264:2017-04-07T11:04:24.174+0000:Not as sure if this is so good, are uri templates in spring-boot etc support wildcards like this?

[~zregvart] you have been in rest land recently, and thoughts? 
zregvart:1491537134:2017-04-07T11:52:14.017+0000:1491538862:2017-04-07T12:21:02.099+0000:I don't think that we should build another router, I think that we could have an API contract between the REST DSL and the implementing HTTP transport component that can percolate this information to it. This can be as simple as passing {{matchOnUriPrefix}} to the HTTP transport component in this case. With Spring Web MVC you have a lot of options to map requests to handlers, and one of the option is Ant style globs like {{/path/**}} that matches all nested paths within {{/path}}, but you also have regex support and you can implement custom {{HandlerMapping}} that maps in whatever way you feel is needed.
I don't see the need for Camel to match competencies of other Web frameworks, that is not it's core strength, but detecting {{&#42;}} or {{&#42;&#42;}} and passing that on to the HTTP transport as {{matchOnUriPrefix}} property should suffice.
tanyu:1695667096:2023-09-26T02:38:16.422+0000:1695667096:2023-09-26T02:38:16.422+0000:I see we support uri template now, I wonder if it's possible to use trie tree to support  uri template and wildcards at same time [~davsclaus]
davsclaus:1695683686:2023-09-26T07:14:46.322+0000:1695683686:2023-09-26T07:14:46.322+0000:Yeah uri template can match a single element, eg /api/user/{name} which in most use-cases is what you need.

However some http libraries like vertx-web can route from wildcard (see link and search for wildcard)
https://vertx.io/docs/vertx-web/java/"
0,CAMEL-8305,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,0,2,2015-02-02 11:40:16+00:00,2019-07-31 08:58:48+00:00,"As aggregation strategy is mandatory, its better to enforce that this option is always configured, instead of having a special groupExchanges that does this magically.


Instead ppl should just configure the strategy as usual but can use GroupedExchangeAggregationStrategy if they want to group. Then the configuration is more consistent.",davsclaus:1564534722:2019-07-31T08:58:42.419+0000:1564534722:2019-07-31T08:58:42.419+0000:The option is removed on the aggregate EIP but from Java DSL there is a helper to set it via: org.apache.camel.builder.AggregationStrategies#groupedExchange
0,CAMEL-8304,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,1,3,2015-02-02 09:14:16+00:00,2019-07-28 09:54:13+00:00,"The component api for social that dhiraj added. I wonder if we can reduce the number of 3rd party dependencies at runtime. Currently it has too many dependencies. And htmlunit dont work well with osgi, and many of the jars is wrapped and whatnot.


eg it should ideally be a slim addition of 3rd party JARs - such as the need for HTTP client, and then as little as possible.",davsclaus:1422839693:2015-02-02T09:14:53.169+0000:1422839693:2015-02-02T09:14:53.169+0000:For example take a look at camel-box dependency tree.
0,CAMEL-8303,Bug,Minor,None,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Lars Rothberg-Hansen,0,2,2015-02-01 22:53:07+00:00,2015-02-15 17:07:54+00:00,"According to the documentation, it should be possible to send through an Exchange with the body containing a String


""If the body is an instance of String, then it will be marshalled into a GSON object before insert.""


When doing this, an InvalidPayloadException occurs.


The culprit is this line in the CouchDbProducer:
""return new Gson().toJsonTree(body)""


According to the Gson documentation, this should not be executed on Generic types as the String will not be parsed, but stored in a JsonPrimitive as opposed to the expected JsonObject.


In order to correct it, is to use the code which parses the String (Sorry, don't have time just now to do a proper patch):


try{
   return new JsonParser().parse((String)body);
}catch(JsonSyntaxException jse){
   throw new InvalidPayloadException(exchange, body != null ? body.getClass() : null);
}


It's also worth mentioning that existing test cases does not result in this Exception and the original 2.14.1 code base as long as my local modified version both passes the tests.",davsclaus:1423991274:2015-02-15T17:07:54.690+0000:1423991274:2015-02-15T17:07:54.690+0000:Thanks for reporting and with the patch
0,CAMEL-8302,Bug,Major,2.14.1,"2.16.1, 2.17.0","
None
",Resolved,Fixed,"2.16.1, 2.17.0",Claus Ibsen,Sajjad Akhter,0,6,2015-02-01 20:14:50+00:00,2015-11-26 09:43:44+00:00,"Current implementation is declaring both exchange and queue on any init (producer or consumer). In case of producer one don't need queue and may not know who going to be client. 


We can add flag skipQueueDeclare  so that it won't genrate uuid queue. 


i can provide PR if it helps.","davsclaus:1425086551:2015-02-28T09:22:31.194+0000:1425086551:2015-02-28T09:22:31.194+0000:Yes a PR is welcome with an unit test
neoramon:1446538247:2015-11-03T16:10:47.134+0000:1446538389:2015-11-03T16:13:09.105+0000:Already exists verify to declare a queue:

{code:title=RabbitMQEndpoint.java|borderStyle=solid}
if (getQueue() != null) {
  channel.queueDeclare(getQueue(), isDurable(), false, isAutoDelete(), queueArgs);
{code}
But the queue never is null, because it is initialized:
{code:title=RabbitMQEndpoint.java|borderStyle=solid}
@UriParam
private String queue = String.valueOf(UUID.randomUUID().toString().hashCode());
{code}

I think initialize the queue with ""null"" resolves this issue.
githubbot:1447240695:2015-11-11T19:18:15.273+0000:1447240695:2015-11-11T19:18:15.273+0000:GitHub user davidwilliams1978 opened a pull request:

    https://github.com/apache/camel/pull/676

    CAMEL-8302: Added skipQueueDeclare flag to camel-rabbitmq

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidwilliams1978/camel CAMEL-8302

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/676.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #676
    
----
commit 3eb130f76ec65ec20c66d01adbb0e06ad9899662
Author: davidwilliams <david@getgathering.com>
Date:   2015-11-11T19:11:36Z

    CAMEL-8302: Added skipQueueDeclare flag to camel-rabbitmq

----

david-gathering:1447240963:2015-11-11T19:22:43.304+0000:1447240974:2015-11-11T19:22:54.416+0000:I have created a PR implementing the logic suggested in the original description. I took this approach rather than the one suggested above (setting the queue to null) to avoid backwards compatibility issues for those who may be relying on the random integer queues.

https://github.com/apache/camel/pull/676
davsclaus:1447398649:2015-11-13T15:10:49.911+0000:1447398649:2015-11-13T15:10:49.911+0000:Thanks David for the PR.

Does this option only really apply to a producer? The code is part of 
org.apache.camel.component.rabbitmq.RabbitMQEndpoint#declareExchangeAndQueue

which both the consumer and producer uses. But it may be that the option only makes sense on the producer side. And if so we can mark the option with label producer so the end users would know.
david-gathering:1447399421:2015-11-13T15:23:41.259+0000:1447399421:2015-11-13T15:23:41.259+0000:Hi Claus -- this flag is indeed only intended for producers. Should I add the label to my existing PR?
davsclaus:1447399509:2015-11-13T15:25:09.609+0000:1447399509:2015-11-13T15:25:09.609+0000:Thanks can you log a new PR and rebase from master first as the code has been merged already.
davsclaus:1447399572:2015-11-13T15:26:12.221+0000:1447399572:2015-11-13T15:26:12.221+0000:And btw if you are aware of other options that only consumer or producer you are welcome to label them as well. We want to make this more clear for the end users and the label is the way. In the future then the docs is auto generated.
githubbot:1447403263:2015-11-13T16:27:43.000+0000:1447403263:2015-11-13T16:27:43.000+0000:Github user davidwilliams1978 closed the pull request at:

    https://github.com/apache/camel/pull/676

githubbot:1447403435:2015-11-13T16:30:35.709+0000:1447403435:2015-11-13T16:30:35.709+0000:GitHub user davidwilliams1978 opened a pull request:

    https://github.com/apache/camel/pull/682

    CAMEL-8302: Added producer label to skipQueueDeclare flag

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidwilliams1978/camel CAMEL-8302

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/682.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #682
    
----
commit 1bbb2931c5f34b8aadc6a801e4364b1e8987eac3
Author: davidwilliams <david@getgathering.com>
Date:   2015-11-13T16:29:39Z

    CAMEL-8302: Added producer label to skipQueueDeclare flag

----

david-gathering:1447403633:2015-11-13T16:33:53.100+0000:1447403633:2015-11-13T16:33:53.100+0000:Added the producer flag for skipQueueDeclare: https://github.com/apache/camel/pull/682

I took a look at the other options to see if any could be firmly categorized but none jumped out at me (although I'm relatively new to RabbitMq so I might well have missed some.)
githubbot:1447408179:2015-11-13T17:49:39.795+0000:1447408179:2015-11-13T17:49:39.795+0000:Github user davidwilliams1978 closed the pull request at:

    https://github.com/apache/camel/pull/682

ceefour:1448502224:2015-11-26T09:43:44.003+0000:1448502224:2015-11-26T09:43:44.003+0000:Thank you [~davewilliams] [~cibsen] ! But what's the difference betwen {{declare}} and {{skipQueueDeclare}}?"
0,CAMEL-8301,Bug,Blocker,2.14.0,,"
None
",Resolved,Invalid,None,Unassigned,Moulliard Charles,0,2,2015-01-30 15:31:09+00:00,2015-10-20 13:43:01+00:00,"The blueprint context of the bundle camel-cxf-transport (version 2.14) cannot be started as this exception is generated :



2015-01-30 16:23:25,913 | ERROR | l Console Thread | BlueprintContainerImpl           | ?                                   ? | 9 - org.apache.aries.blueprint.core - 1.0.1.redhat-610379 | Unable to start blueprint container for bundle org.apache.camel.camel-cxf-transport
org.osgi.service.blueprint.container.ComponentDefinitionException: Unable to instantiate components
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:680)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:374)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:270)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:233)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.0.1.redhat-610379]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:696)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:484)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4650)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix$4.run(Felix.java:2123)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.runInContext(Felix.java:2147)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2121)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:474)[22:org.apache.karaf.features.core:2.3.0.redhat-610379]
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:404)[22:org.apache.karaf.features.core:2.3.0.redhat-610379]
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:400)[22:org.apache.karaf.features.core:2.3.0.redhat-610379]
	at org.apache.karaf.features.command.InstallFeatureCommand.doExecute(InstallFeatureCommand.java:62)[26:org.apache.karaf.features.command:2.3.0.redhat-610379]
	at org.apache.karaf.features.command.FeaturesCommandSupport.doExecute(FeaturesCommandSupport.java:41)[26:org.apache.karaf.features.command:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[15:org.apache.felix.gogo.runtime:0.11.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:189)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
	at org.apache.karaf.shell.console.jline.DelayedStarted.run(DelayedStarted.java:61)[17:org.apache.karaf.shell.console:2.3.0.redhat-610379]
Caused by: java.lang.NoClassDefFoundError: org/apache/aries/blueprint/NamespaceHandler
	at java.lang.ClassLoader.defineClass1(Native Method)[:1.7.0_51]
	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)[:1.7.0_51]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2275)
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1501)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)[:1.7.0_51]
	at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1870)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:937)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.loadClass(BlueprintContainerImpl.java:428)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintRepository.loadClass(BlueprintRepository.java:410)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.GenericType.parse(GenericType.java:113)
	at org.apache.aries.blueprint.di.AbstractRecipe.doLoadType(AbstractRecipe.java:168)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.di.AbstractRecipe.loadType(AbstractRecipe.java:161)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BeanRecipe.loadClass(BeanRecipe.java:249)
	at org.apache.aries.blueprint.container.BeanRecipe.getType(BeanRecipe.java:895)
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:323)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:106)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.ServiceRecipe.createService(ServiceRecipe.java:290)
	at org.apache.aries.blueprint.container.ServiceRecipe.internalGetService(ServiceRecipe.java:257)
	at org.apache.aries.blueprint.container.ServiceRecipe.internalCreate(ServiceRecipe.java:147)
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_51]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:676)[9:org.apache.aries.blueprint.core:1.0.1.redhat-610379]
	... 34 more
Caused by: java.lang.ClassNotFoundException: org.apache.aries.blueprint.NamespaceHandler not found by org.apache.camel.camel-cxf-transport [300]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1532)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)[org.apache.felix.framework-4.0.3.redhat-610379.jar:]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)[:1.7.0_51]
	... 63 more","cmoulliard:1422603249:2015-01-30T15:34:09.004+0000:1422603249:2015-01-30T15:34:09.004+0000:Only these classes are loaded

{code}
camel-cxf-transport (300)
org/apache/aries/blueprint/mutable/MutableBeanArgument.class
org/apache/aries/blueprint/mutable/MutableBeanMetadata.class
org/apache/aries/blueprint/mutable/MutableBeanProperty.class
org/apache/aries/blueprint/mutable/MutableCollectionMetadata.class
org/apache/aries/blueprint/mutable/MutableComponentMetadata.class
org/apache/aries/blueprint/mutable/MutableIdRefMetadata.class
org/apache/aries/blueprint/mutable/MutableMapEntry.class
org/apache/aries/blueprint/mutable/MutableMapMetadata.class
org/apache/aries/blueprint/mutable/MutablePassThroughMetadata.class
org/apache/aries/blueprint/mutable/MutablePropsMetadata.class
org/apache/aries/blueprint/mutable/MutableRefMetadata.class
org/apache/aries/blueprint/mutable/MutableReferenceListMetadata.class
org/apache/aries/blueprint/mutable/MutableReferenceListener.class
org/apache/aries/blueprint/mutable/MutableReferenceMetadata.class
org/apache/aries/blueprint/mutable/MutableRegistrationListener.class
org/apache/aries/blueprint/mutable/MutableServiceMetadata.class
org/apache/aries/blueprint/mutable/MutableServiceReferenceMetadata.class
org/apache/aries/blueprint/mutable/MutableValueMetadata.class
{code}
cmoulliard:1422603440:2015-01-30T15:37:20.086+0000:1422603440:2015-01-30T15:37:20.086+0000:The class is well exported by the aries bliueprint bundle 

{code}
Apache Aries Blueprint Core (9)
...
org/apache/aries/blueprint/NamespaceHandler.class
...
{code}

and the package ""org/apache/aries/blueprint/"" is well imported by camel-cxf-transport

{code}
packages:imports 300
System Bundle (0): org.osgi.framework; version=1.7.0
System Bundle (0): javax.xml.namespace; version=0.0.0
System Bundle (0): org.w3c.dom; version=0.0.0
OPS4J Pax Logging - API (4): org.slf4j; version=1.7.1
OPS4J Pax Logging - API (4): org.slf4j; version=1.6.6
OPS4J Pax Logging - API (4): org.slf4j; version=1.5.11
OPS4J Pax Logging - API (4): org.slf4j; version=1.4.3
Apache Aries Blueprint Core (9): org.apache.aries.blueprint.mutable; version=1.0.0
Apache Aries Blueprint Core (9): org.osgi.service.blueprint; version=1.0.0
Apache Aries Blueprint API (14): org.osgi.service.blueprint.reflect; version=1.0.1
{code}
cmoulliard:1422603606:2015-01-30T15:40:06.127+0000:1422603606:2015-01-30T15:40:06.127+0000:I suspect that the problem comes from the fact that this version of the camel-cxf-transport is targeted for Aries Blueprint 1.1

{code}
camel-cxf-transport (300)
-------------------------
Manifest-Version = 1.0
Karaf-Info = Camel;camel-cxf-transport=2.14.0
Bnd-LastModified = 1410773615135
Tool = Bnd-1.50.0
Built-By = ubuntu
Implementation-Version = 2.14.0
Build-Jdk = 1.7.0_67
Implementation-Title = Apache Camel
Created-By = Apache Maven Bundle Plugin

Bundle-Vendor = The Apache Software Foundation
Bundle-Name = camel-cxf-transport
Bundle-DocURL = http://www.apache.org/
Bundle-Description = Camel Transport for CXF
Bundle-SymbolicName = org.apache.camel.camel-cxf-transport
Bundle-Version = 2.14.0
Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txt
Bundle-ManifestVersion = 2

Export-Service =
	org.apache.aries.blueprint.NamespaceHandler;osgi.service.blueprint.namespace=http://cxf.apache.org/transports/camel/blueprint

Import-Package =
	javax.xml.namespace,
	org.apache.aries.blueprint;resolution:=optional;version=""[1.1,2)"",
{code}
davsclaus:1422835141:2015-02-02T07:59:01.473+0000:1422835141:2015-02-02T07:59:01.473+0000:Please report JBoss Fuse issues in the JBoss issue tracker.
Likewise for other commercial products form other companies should be reported in their system, not at Apache.

"
0,CAMEL-8300,Improvement,Major,None,"3.0.0, Future","
None
",Resolved,Duplicate,"3.0.0, Future",Unassigned,Claus Ibsen,1,2,2015-01-30 07:05:14+00:00,2017-11-04 20:45:02+00:00,"This EIP is the only one which has naming clash for setting completion size and completion timeout.


They are both as attributes and expression using same name. We could just use the expressions as that is more flexible, as you need to use an expression anyway for the correlation.",
0,CAMEL-8299,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,3,2015-01-30 03:44:15+00:00,2015-02-10 06:08:19+00:00,"""I found out that I needed to get more information from the bulk-request result. elasticsearch provides the BulkResponse with the full info. returning the full BulkResponse allows the caller to tell the reason of index failures and more.""


Here is the PR for it.","davsclaus:1423518100:2015-02-10T05:41:40.565+0000:1423518100:2015-02-10T05:41:40.565+0000:This broke the old behavior. Instead there should be an option to indicate if you want the response object or the ids as before. This also breaks an unit test
https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-elasticsearch/2156/testReport/junit/org.apache.camel.component.elasticsearch/ElasticsearchComponentTest/bulkRequestBody/
davsclaus:1423518898:2015-02-10T05:54:58.302+0000:1423518898:2015-02-10T05:54:58.302+0000:I added the old behavior, and added a new operation named BULK that returns the BulkResponse object. Then we have both behaviors.
zivsegal:1423519658:2015-02-10T06:07:38.681+0000:1423519658:2015-02-10T06:07:38.681+0000:@Claus, Sorry for the unit-test break. I'm not familiar with the PR submit procedure, I will take a note of that and make sure the test runs before next PR. 

I didn't though this PR will get merged as-is, I wanted to raise the issue and have a discussion on what is the right approach. I also asked for a feedback from the latest committer in this file here: https://github.com/apache/camel/commit/69de2e3dd8f9d0e61b3a9e6e5495e406c9159909#commitcomment-9381453

First, I can fix the specific broken unit-test. than, If you can please make it clear what is the best way to fix the backward compatibility issue, I will be glad to fix that as well. 

please let me know how to proceed.
zivsegal:1423519699:2015-02-10T06:08:19.054+0000:1423519699:2015-02-10T06:08:19.054+0000:OK, thanks!"
0,CAMEL-8298,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,2,2015-01-30 03:33:10+00:00,2015-01-30 12:41:34+00:00,We got a PR which need to remove the deprecated class JavaConfigContextLoader at the same time.,"njiang:1422560140:2015-01-30T03:35:40.990+0000:1422560140:2015-01-30T03:35:40.990+0000:Applied the patch into camel master branch with thanks to Nathan.
davsclaus:1422592677:2015-01-30T12:37:57.622+0000:1422592677:2015-01-30T12:37:57.622+0000:An unit test of camel-jaxb now fails. 

[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:testCompile (default-testCompile) on project camel-jaxb: Compilation failure: Compilation failure:
[ERROR] /Users/davsclaus/workspace/camel/components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueUsingSpringJavaConfigTest.java:[29,46] error: package org.apache.camel.spring.javaconfig.test does not exist
[ERROR] /Users/davsclaus/workspace/camel/components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueUsingSpringJavaConfigTest.java:[41,31] error: cannot find symbol
[ERROR] symbol: class JavaConfigContextLoader
[ERROR] /Users/davsclaus/workspace/camel/components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueUsingSpringJavaConfigTest.java:[29,46] error: package org.apache.camel.spring.javaconfig.test does not exist
[ERROR] /Users/davsclaus/workspace/camel/components/camel-jaxb/src/test/java/org/apache/camel/jaxb/JaxbDataFormatIssueUsingSpringJavaConfigTest.java:[41,31] error: cannot find symbol
davsclaus:1422592894:2015-01-30T12:41:34.008+0000:1422592894:2015-01-30T12:41:34.008+0000:I am removing that unit test since some spring java class was removed. Btw which should be added to the release notes so ppl can read about it."
0,CAMEL-8297,Bug,Major,None,2.15.0,"
None
",Resolved,Duplicate,2.15.0,Unassigned,Ilya Melnik,0,2,2015-01-29 13:24:55+00:00,2015-02-02 08:13:46+00:00,"Download empty karaf 3.0.2
Install camel-blueprint and camel-box features
Add common-lang-2.6.jar to deploy folder
Run sample box route and get this exception



java.lang.NoClassDefFoundError: org/apache/xml/utils/PrefixResolver
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:791)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.findClass(BundleWiringImpl.java:2279)
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1501)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
        at com.gargoylesoftware.htmlunit.javascript.configuration.JavaScriptConfiguration.<clinit>(JavaScriptConfigurati
on.java:288)
        at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.<init>(JavaScriptEngine.java:131)
        at com.gargoylesoftware.htmlunit.WebClient.init(WebClient.java:233)
        at com.gargoylesoftware.htmlunit.WebClient.<init>(WebClient.java:208)
        at org.apache.camel.component.box.internal.LoginAuthFlowUI.authenticate(LoginAuthFlowUI.java:77)
        at com.box.boxjavalibv2.BoxClient.authenticate(BoxClient.java:486)
        at org.apache.camel.component.box.internal.BoxClientHelper.getOAuthToken(BoxClientHelper.java:139)
        at org.apache.camel.component.box.BoxEndpoint.doStart(BoxEndpoint.java:219)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2158)
        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1016)
        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:977)
        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:973)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:541)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:202)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:923)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:794)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2184)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1916)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745)
        at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
        at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
        at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:352)
        at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
        at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
        at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
        at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
        at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
        at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl
.java:681)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:378)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245)
        at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:500)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:433)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java
:725)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java
:463)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java
:422)
        at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
        at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.Felix$RefreshHelper.restart(Felix.java:4844)
        at org.apache.felix.framework.Felix.refreshPackages(Felix.java:4122)
        at org.apache.felix.framework.FrameworkWiringImpl.run(FrameworkWiringImpl.java:178)
        at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.ClassNotFoundException: org.apache.xml.utils.PrefixResolver not found by wrap_mvn_net.sourceforge.h
tmlunit_htmlunit_2.15 [90]
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1532)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
        ... 81 more",
0,CAMEL-8296,Bug,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Ilya Melnik,0,4,2015-01-29 13:20:39+00:00,2015-03-07 16:45:44+00:00,"Download empty karaf 3.0.2
Install camel-blueprint and camel-box features
Run sample box route and get this exception



java.lang.NoClassDefFoundError: org/apache/commons/lang/NotImplementedException
        at org.apache.camel.component.box.internal.BoxClientHelper.createBoxClient(BoxClientHelper.java:97)
        at org.apache.camel.component.box.BoxComponent.getBoxClient(BoxComponent.java:59)
        at org.apache.camel.component.box.BoxEndpoint.createBoxClient(BoxEndpoint.java:127)
        at org.apache.camel.component.box.BoxEndpoint.afterConfigureProperties(BoxEndpoint.java:102)
        at org.apache.camel.util.component.AbstractApiEndpoint.configureProperties(AbstractApiEndpoint.java:115)
        at org.apache.camel.util.component.AbstractApiComponent.createEndpoint(AbstractApiComponent.java:96)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:525)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:202)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:923)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:794)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2184)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1916)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745)
        at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
        at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
        at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
        at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
        at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
        at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
        at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
        at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
        at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:352)
        at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:601)
        at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)
        at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)
        at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824)
        at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)
        at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)
        at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)
        at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl
.java:681)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:378)
        at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276)
        at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245)
        at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:500)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker
.java:433)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java
:725)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java
:463)
        at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java
:422)
        at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
        at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
        at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
        at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)
        at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)
        at org.apache.karaf.bundle.command.Restart.doExecute(Restart.java:48)
        at org.apache.karaf.bundle.command.BundlesCommand.doExecute(BundlesCommand.java:50)
        at org.apache.karaf.bundle.command.BundlesCommandWithConfirmation.doExecute(BundlesCommandWithConfirmation.java:
41)
        at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)
        at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)
        at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)
        at Proxydce7d8d9_a802_4295_bc90_9f32a888e927.execute(Unknown Source)
        at Proxydce7d8d9_a802_4295_bc90_9f32a888e927.execute(Unknown Source)
        at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)
        at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)
        at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)
        at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)
        at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)
        at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
        at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:203)
        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:115)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)
        at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:108)
Caused by: java.lang.ClassNotFoundException: org.apache.commons.lang.NotImplementedException not found by wrap_mvn_net.b
ox_boxjavalibv2_3.0.9 [89]
        at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1532)
        at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:75)
        at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1955)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
        ... 86 more




Headers for box sdk show that it is missing two packages:



org.apache.commons.lang;resolution:=optional,
org.apache.commons.lang.builder;resolution:=optional,




Headers for 84 | Active |  50 | 3.3.2   | Apache Commons Lang shows that it exports following packages:



Export-Package =
        org.apache.commons.lang3;version=3.3.2,
        org.apache.commons.lang3.builder;version=3.3.2,
        org.apache.commons.lang3.concurrent;version=3.3.2,
        org.apache.commons.lang3.event;version=3.3.2,
        org.apache.commons.lang3.exception;version=3.3.2,
        org.apache.commons.lang3.math;version=3.3.2,
        org.apache.commons.lang3.mutable;version=3.3.2,
        org.apache.commons.lang3.reflect;version=3.3.2,
        org.apache.commons.lang3.text;version=3.3.2,
        org.apache.commons.lang3.text.translate;version=3.3.2,
        org.apache.commons.lang3.time;version=3.3.2,
        org.apache.commons.lang3.tuple;version=3.3.2","i.melnik:1422837889:2015-02-02T08:44:49.731+0000:1422837889:2015-02-02T08:44:49.731+0000:Hello, want to know can we have this fix in 2.14 to have possibility to upgrade it.
Thanks.
davsclaus:1422839363:2015-02-02T09:09:23.140+0000:1422839363:2015-02-02T09:09:23.140+0000:Just install these needed bundles manually

    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.2_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xerces/2.11.0_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5</bundle>
<bundle dependency='true'>mvn:commons-lang/commons-lang/2.6</bundle>

You can do that from the karaf shell

    osgi:install 

And then the maven coordinate listed above, eg

   osgi:install mvn:commons-lang/commons-lang/2.6



i.melnik:1422917795:2015-02-03T06:56:35.050+0000:1422917795:2015-02-03T06:56:35.050+0000:Thanks, it helped.
dhirajsb:1425671243:2015-03-07T03:47:23.767+0000:1425671243:2015-03-07T03:47:23.767+0000:[~davsclaus], uncommenting xalan, xerces and xmlresolver in the feature breaks the Broker in JBoss Fuse 6.2. I added those in lib/endorsed for JBoss Fuse 6.2 and IIRC they are present in standard Karaf. So these should be commented in the feature and added to lib/endorsed otherwise there is a conflict with the one from the JDK.  
dhirajsb:1425717944:2015-03-07T16:45:44.607+0000:1425717944:2015-03-07T16:45:44.607+0000:Nevermind, the issue seems to be in JBoss Fuse 6.2 build. I'll address it there. "
0,CAMEL-8295,Bug,Major,2.15.0,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Edgar Wentzlaff,0,3,2015-01-29 11:31:01+00:00,2015-01-29 12:33:08+00:00,"Cant change the Camel Context Name fully, if the RouteBuilder ran already.


This Code is not working for the JMX MBeans


MyAppConfig.java
@Configuration
public class MyAppConfig {
 
  ...
 
  @Bean
  CamelContextConfiguration contextConfiguration() {
    return new CamelContextConfiguration() {
      @Override
      public void beforeApplicationStart(CamelContext context) {
        ((SpringCamelContext)context).setName(""foo"");
      }
    };
  }
}




The JMX MBeans are not updated after the RouteBuilde ran:
The Context Name Changed, but the JMX Object Name not.
""foo"" != ""camel-1""","eddi888:1422502333:2015-01-29T11:32:13.033+0000:1422502333:2015-01-29T11:32:13.033+0000:Screenshot: ""foo"" != ""camel-1""
githubbot:1422502565:2015-01-29T11:36:05.035+0000:1422502565:2015-01-29T11:36:05.035+0000:GitHub user eddi888 opened a pull request:

    https://github.com/apache/camel/pull/384

    CAMEL-8295

    Add Name for Camel Context in camel-spring-boot Configuration
    Properties. 
    Its required to set the Camel Context Name before run the RouteBuilder. 
    After the RouteBuilder ran, can't change the Camel Context Name fully in
    all JMX Management Beans.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eddi888/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/384.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #384
    
----
commit f2fba4f1914191fb7be30365c78e4a017780d2f6
Author: eddi888 <edgar.wentzlaff@gmx.net>
Date:   2015-01-29T11:33:15Z

    CAMEL-8295 
    Add Name for Camel Context in camel-spring-boot Configuration
    Properties. 
    Its required to set the Camel Context Name before run the RouteBuilder. 
    After the RouteBuilder ran, can't change the Camel Context Name fully in
    all JMX Management Beans.

----

githubbot:1422505897:2015-01-29T12:31:37.152+0000:1422505897:2015-01-29T12:31:37.152+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/384

njiang:1422505988:2015-01-29T12:33:08.128+0000:1422505988:2015-01-29T12:33:08.128+0000:Applied the patch into camel master branch with thanks to Edgar."
0,CAMEL-8294,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-29 06:37:33+00:00,2015-01-29 06:40:30+00:00,"See PR
https://github.com/apache/camel/pull/379",
0,CAMEL-8293,Improvement,Major,2.14.1,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,David J. M. Karlsen,0,3,2015-01-28 21:56:18+00:00,2019-02-26 12:59:53+00:00,"CamelTestSupport has a 
protected JndiRegistry createRegistry()
method.


It would be better if it returned the Generic type Registry instead - that way you can override the method and return a SimpleRegistry for your tests without having to do this in createCamelContext() which defats createRegistry's purpose.","githubbot:1422453456:2015-01-28T21:57:36.380+0000:1422453456:2015-01-28T21:57:36.380+0000:GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/383

    CAMEL-8293: Be more override-friendly in CamelTestSupport by returning i...

    ...nterface type instead of concrete impl

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-8293

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/383.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #383
    
----
commit b894b4a79058ef4dd456e3fd6204a373cbcae228
Author: david <david@davidkarlsen.com>
Date:   2015-01-28T21:56:58Z

    CAMEL-8293: Be more override-friendly in CamelTestSupport by returning interface type instead of concrete impl

----

davidkarlsen@gmail.com:1422453553:2015-01-28T21:59:13.215+0000:1422453553:2015-01-28T21:59:13.215+0000:Pull request: https://github.com/apache/camel/pull/383
(Close it automatically by adding the text ""this closes #383"" in the git comment.
davsclaus:1422839427:2015-02-02T09:10:27.617+0000:1422839427:2015-02-02T09:10:27.617+0000:I think we looked at this in the past, and it broke some/many unit tests. Have you tested this by building all the source code, and maybe run unit tests in some components?
davidkarlsen@gmail.com:1422843136:2015-02-02T10:12:16.134+0000:1422843136:2015-02-02T10:12:16.134+0000:It ran ok (mvn clean install -Pspring4 >& /tmp/build.log&) until a test which fails due to something else:

Test set: org.apache.camel.spring.processor.aggregator.SpringAggregateGroupedExchangeCompletionExpressionSizeTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.016 sec <<< FAILURE! - in org.apache.camel.spring.processor.aggregator.SpringAggregateGroupedExchangeCompletionExpressionSizeTest
testGrouped(org.apache.camel.spring.processor.aggregator.SpringAggregateGroupedExchangeCompletionExpressionSizeTest)  Time elapsed: 0.015 sec  <<< ERROR!
org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 28 in XML document from class path resource [org/apache/camel/spring/processor/aggregator/SpringAggregateGroupedExchangeCompletionExpressionSizeTest.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 28; columnNumber: 46; cvc-complex-type.4: Attribute 'strategyRef' must appear on element 'aggregate'.
        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203)
 

Trying to rerun with -Dmaven.test.failure.ignore=true
davsclaus:1422870546:2015-02-02T17:49:06.028+0000:1422870546:2015-02-02T17:49:06.028+0000:That test has been fixed.
davsclaus:1423175815:2015-02-06T06:36:55.030+0000:1423175815:2015-02-06T06:36:55.030+0000:Btw there is also camel-testng do you mind doing the same change in that module?
davsclaus:1423178393:2015-02-06T07:19:53.102+0000:1423178393:2015-02-06T07:19:53.102+0000:I found the old ticket CAMEL-4538 about this same issue
davsclaus:1437271696:2015-07-19T10:08:16.590+0000:1437271696:2015-07-19T10:08:16.590+0000:Looking into this, so you can do

{code}
    @Override
    protected Registry createRegistry() throws Exception {
        SimpleRegistry simple = createRegistry(SimpleRegistry.class);
        simple.put(""beer"", ""yes"");
        return simple;
    }
{code}

Notice the method that takes the type class.
davsclaus:1437272136:2015-07-19T10:15:36.812+0000:1437272136:2015-07-19T10:15:36.812+0000:This change would break the api a bit, there was 114 places in all the Camel components that needed to be changed.
githubbot:1437275482:2015-07-19T11:11:22.600+0000:1437275482:2015-07-19T11:11:22.600+0000:Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/383

davsclaus:1551157193:2019-02-26T12:59:53.731+0000:1551157193:2019-02-26T12:59:53.731+0000:You can now bind directly via the registry interface. And there is a newer createCamelRegistry if you really want to control it, however just use the default registry from camel and call its bind method. The old method is there for backwards compatibility and its marked as deprecated and you get a WARN log if you use it."
0,CAMEL-8292,Improvement,Major,None,"2.14.2, 2.15.0","
None
",Closed,Fixed,"2.14.2, 2.15.0",Moulliard Charles,Moulliard Charles,0,1,2015-01-28 17:37:26+00:00,2015-01-28 18:38:29+00:00,The query created by the WeatherConfiguration.getQuery() method is not logged (DEBUG mode),cmoulliard:1422441509:2015-01-28T18:38:29.389+0000:1422441509:2015-01-28T18:38:29.389+0000:DEBUG Log option already defined for the consumer/producer
0,CAMEL-8291,Bug,Major,2.14.0,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Ilya Melnik,0,3,2015-01-28 15:40:51+00:00,2015-02-04 18:52:10+00:00,"When deploying camel box route in karaf container i've get this error



NoSuchMethodError org.apache.xerces.xni.XMLDocumentHandler.startDocument(Lorg/apache/xerces/xni/XMLLocator;Ljava/lang/String;Lorg/apache/xerces/xni/Augmentations;)V
[org.cyberneko.html.xercesbridge.XercesBridge_2_0.XMLDocumentHandler_startDocument(XercesBridge_2_0.java:57),
 org.cyberneko.html.HTMLScanner$ContentScanner.scan(HTMLScanner.java:2147),
 org.cyberneko.html.HTMLScanner.scanDocument(HTMLScanner.java:920),
 org.cyberneko.html.HTMLConfiguration.parse(HTMLConfiguration.java:499),
 org.cyberneko.html.HTMLConfiguration.parse(HTMLConfiguration.java:452),
 org.apache.xerces.parsers.XMLParser.parse(Unknown Source),
 com.gargoylesoftware.htmlunit.html.HTMLParser$HtmlUnitDOMBuilder.parse(HTMLParser.java:965),
 com.gargoylesoftware.htmlunit.html.HTMLParser.parse(HTMLParser.java:247),
 com.gargoylesoftware.htmlunit.html.HTMLParser.parseHtml(HTMLParser.java:193),
 com.gargoylesoftware.htmlunit.DefaultPageCreator.createHtmlPage(DefaultPageCreator.java:268),
 com.gargoylesoftware.htmlunit.DefaultPageCreator.createPage(DefaultPageCreator.java:156),
 com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:468),
 com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:342),
 com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:407),
 com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:392),
 org.apache.camel.component.box.internal.LoginAuthFlowUI.authenticate(LoginAuthFlowUI.java:101),
 com.box.boxjavalibv2.BoxClient.authenticate(BoxClient.java:486),
 org.apache.camel.component.box.internal.BoxClientHelper.getOAuthToken(BoxClientHelper.java:139),
 org.apache.camel.component.box.BoxEndpoint.doStart(BoxEndpoint.java:219),
 org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61),
 org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2158),
 org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1016),
 org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:977),
 org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:973),
 org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:541),
 org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71),
 org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:202),
 org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106),
 org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112),
 org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72),
 org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:88),
 org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:923),
 org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187),
 org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:794),
 org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2184),
 org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1916),
 org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777),
 org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61),
 org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745),
 org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177),
 org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209),
 org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147),
 org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:107),
 org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861),
 org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230),
 org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214),
 org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433),
 org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:451),
 org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:950),
 org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:97),
 sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method),
 sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57),
 sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43),
 java.lang.reflect.Method.invoke(Method.java:601),
 org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297),
 org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958),
 org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712),
 org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:824),
 org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787),
 org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79),
 java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334),
 java.util.concurrent.FutureTask.run(FutureTask.java:166),
 org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88),
 org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245),
 org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183),
 org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:681),
 org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:378),
 org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269),
 org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276),
 org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245),
 org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235),
 org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500),
 org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433),
 org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725),
 org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463),
 org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422),
 org.eclipse.osgi.framework.internal.core.Framework$10.call(Framework.java:1605),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHookPrivileged(ServiceRegistry.java:1239),
 org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.notifyHooksPrivileged(ServiceRegistry.java:1222),
 org.eclipse.osgi.framework.internal.core.Framework.notifyEventHooksPrivileged(Framework.java:1602),
 org.eclipse.osgi.framework.internal.core.Framework.publishBundleEventPrivileged(Framework.java:1557),
 org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1504),
 org.eclipse.osgi.framework.internal.core.Framework.publishBundleEvent(Framework.java:1499),
 org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:391),
 org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:300),
 org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:292),
 org.apache.karaf.bundle.command.Restart.doExecute(Restart.java:48),
 org.apache.karaf.bundle.command.BundlesCommand.doExecute(BundlesCommand.java:50),
 org.apache.karaf.bundle.command.BundlesCommandWithConfirmation.doExecute(BundlesCommandWithConfirmation.java:41),
 org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33),
 org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39),
 org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33),
 Proxy9bb638be_d95c_4954_8190_e6cd902f2063.execute(Unknown Source),
 Proxy9bb638be_d95c_4954_8190_e6cd902f2063.execute(Unknown Source),
 org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78),
 org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477),
 org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403),
 org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108),
 org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183),
 org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120),
 org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92),
 org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:217),
 org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:115),
 java.security.AccessController.doPrivileged(Native Method),
 org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57),
 org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:108)]




Actually this error i found only in debug. It silently fails - no error in console and karaf.log
Possible it is because of xercesImpl -2.11.0 dependency, but nekohtml-1.9.21 depends on xercesImpl-2.10.0
See attached blueprint configuration","amarkevich:1423010894:2015-02-04T08:48:14.825+0000:1423010894:2015-02-04T08:48:14.825+0000:There was endorsed missconfiguration: original org.osgi.framework.system.packages.extra dropped. After regression fix the component works.
davsclaus:1423047130:2015-02-04T18:52:10.343+0000:1423047130:2015-02-04T18:52:10.343+0000:Okay assume it works now for you"
0,CAMEL-8290,Improvement,Minor,2.14.1,,"
None
",Resolved,Abandoned,None,Unassigned,James Green,0,1,2015-01-28 14:24:28+00:00,2022-09-02 08:57:17+00:00,"Reference ""Modifying a shipped TypeConvertor"" (http://camel.465427.n5.nabble.com/Modifying-a-shipped-TypeConverter-td5761945.html).


When converting a POJO to mongodb, a Jackson ObjectMapper is used by default. ObjectMapper by default converts Date types into Long types by default.


MongoDB of course has ISODate. In our case we had to provide a custom ObjectMapper switching off this Date to timestamp converter option. It would be nice if:


1. This was the default for mongodb
2. We could see this converter being picked up at runtime for use across the application.",
0,CAMEL-8289,Bug,Minor,"2.13.3, 2.14.1","2.13.4, 2.14.2","
None
",Resolved,Fixed,"2.13.4, 2.14.2",Willem Jiang,Willem Jiang,0,1,2015-01-28 08:44:14+00:00,2015-01-29 12:38:15+00:00,It could generate lots of annoying warning message when the client connection is closed and camel-netty-http try to send some error message there.,"njiang:1422506295:2015-01-29T12:38:15.024+0000:1422506295:2015-01-29T12:38:15.024+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8288,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Kranti Parisa,0,3,2015-01-27 23:10:32+00:00,2015-02-11 17:52:20+00:00,"Current Hits result only contains the lucene docId, score and assuming there will be a field with the name ""contents"". 
This feature will allow specifying a new header value 



 .setHeader(""RETURN_LUCENE_DOCS"",constant(""true""))




and return the actual lucene documents part of the Hits for further processing. This will allow us to retrieve any field from the actual lucene document. 


Both Lucene component and LuceneQueryProcessor should support this new header.","githubbot:1422375947:2015-01-28T00:25:47.264+0000:1422375947:2015-01-28T00:25:47.264+0000:GitHub user krantiparisa opened a pull request:

    https://github.com/apache/camel/pull/382

    CAMEL-8288 Attach Lucene Documents to the Results(Hits) if header contains RETURN_LUCENE_DOCS=true

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/krantiparisa/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/382.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #382
    
----
commit 29601ac78cb8a043ea537893b510ea5f248e924d
Author: Kranti Parisa <kranti.parisa@gmail.com>
Date:   2015-01-28T00:22:27Z

    CAMEL-8288 Attach Lucene Documents to the Results(Hits) if header contains RETURN_LUCENE_DOCS=true

----

davsclaus:1422484478:2015-01-29T06:34:38.503+0000:1422484478:2015-01-29T06:34:38.503+0000:Is it not better to add an option to the endpoint you can turn on|off whether to include docs? 

Something like:
{code}
to(""lucene:searchIndex:query?analyzer=#stdAnalyzer&indexDir=#std&maxHits=20&includeDocs=true"").
{code}
krantiparisa:1422485090:2015-01-29T06:44:50.043+0000:1422486055:2015-01-29T07:00:55.662+0000:Initially, I thought the same. but after looking at the QUERY header param, which is used by both lucene component and LuceneQueryProcessor, wanted to follow the same. if we want to pass that via the param then we will need to change the LuceneQueryProcessor constructor as well. do you think that's ok? users might need to fix their implementations in case if they are using the LuceneQueryProcessor. 
krantiparisa:1422975245:2015-02-03T22:54:05.767+0000:1422975245:2015-02-03T22:54:05.767+0000:[~davsclaus] let me know your thoughts. so that we can merge this imp feature. thanks.
davsclaus:1423175737:2015-02-06T06:35:37.861+0000:1423175737:2015-02-06T06:35:37.861+0000:Thanks the patch has been merged.

We would like help with updating the documentation, can you help with that?
http://camel.apache.org/lucene
githubbot:1423524763:2015-02-10T07:32:43.012+0000:1423524763:2015-02-10T07:32:43.012+0000:Github user krantiparisa closed the pull request at:

    https://github.com/apache/camel/pull/382

davsclaus:1423648340:2015-02-11T17:52:20.753+0000:1423648340:2015-02-11T17:52:20.753+0000:Added a little doc"
0,CAMEL-8287,Improvement,Minor,2.14.1,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",ayache khettar,Thomas Walzer,1,6,2015-01-27 14:17:20+00:00,2016-08-15 15:40:48+00:00,"I have a schematron with includes:


 <pattern>
      <include href=""include/DTr1_ANY.sch""/>
....
</pattern>


when I run against this schematron I get the following error:


Recoverable error on line 472 
  FODC0002: I/O error reported by XML parser processing null: null
Unable to open referenced included file: include/DTr1_ANY.sch
Unable to locate id attribute: include/DTr1_ANY.sch
Recoverable error on line 472 


There is question with an answer on stackoverflow that seems applicable to me:


http://stackoverflow.com/questions/7236291/saxon-error-with-xslt-import-statement


BTW: camel-schematron is not yet a component in JIRA.


Many thanks in advance!
Thomas.","davsclaus:1422398368:2015-01-28T06:39:28.931+0000:1422398368:2015-01-28T06:39:28.931+0000:You are welcome to work on a patch or provide an unit test that reproduces this. 
twalzer:1422431846:2015-01-28T15:57:26.786+0000:1422431846:2015-01-28T15:57:26.786+0000:The patch (I hope it works the way I created it) contains a test case to reproduce the issue.
pascalschumacher:1451789394:2016-01-03T10:49:54.072+0000:1451789394:2016-01-03T10:49:54.072+0000:Any reasons this patch was not applied yet?
davsclaus:1452321436:2016-01-09T14:37:16.220+0000:1452321436:2016-01-09T14:37:16.220+0000:The patch is only an unit test, not the needed implementation to support includes.
akhettar:1452838281:2016-01-15T14:11:21.528+0000:1452838281:2016-01-15T14:11:21.528+0000:Claus, can you assign this to me ( I wrote this component)? Would it be possible to have more permission on Camel Jira component.

Thanks
davsclaus:1452841429:2016-01-15T15:03:49.944+0000:1452841429:2016-01-15T15:03:49.944+0000:Yeah try to assign the ticket now.
hutchkintoot:1453184727:2016-01-19T14:25:27.858+0000:1453184727:2016-01-19T14:25:27.858+0000:Facing the same problem. Using camel-schematron in an OSGI-application running under Karaf. I guess the ClassLoader of the component is used to resolve the included file that in fact is only reachable by the ClassLoader of the applications CamelContext. 
akhettar:1453192060:2016-01-19T16:27:40.641+0000:1453192060:2016-01-19T16:27:40.641+0000:Hi Johan

What version of camel are you using? I believe the issue around OSGI class loader has been resolved here: https://issues.apache.org/jira/browse/CAMEL-8796?jql=text%20~%20%22Schematron%22. I will try to see if I can provide you with a running example.

Regards
hutchkintoot:1453205789:2016-01-19T20:16:29.060+0000:1453205789:2016-01-19T20:16:29.060+0000:Hi Ayache!

Schematron without includes works fine in Karaf. I'm running version 2.15.3. It's just when i include files that they are not found. 

Regards
akhettar:1453244658:2016-01-20T07:04:18.601+0000:1453244658:2016-01-20T07:04:18.601+0000:Thanks Johan, I see what you mean I will look into this hopefully today.
twalzer:1467085229:2016-06-28T11:40:29.596+0000:1467085229:2016-06-28T11:40:29.596+0000:Hi Ayache,

did you manage to look into this?

Regards, Thomas.
akhettar:1467240197:2016-06-30T06:43:17.014+0000:1467240197:2016-06-30T06:43:17.014+0000:Hi [~twalzer]. I apologise profusely for the delay. I did have two attempts to find a solution but without success. I tried all the possible tricks, I even set the rules.sch to be located in the file system and still doesn't work.
{code}
  Apache ServiceMix (7.0.0.M2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'system:shutdown' to shutdown ServiceMix.

karaf@root>
karaf@root>
karaf@root>
karaf@root>
karaf@root>Recoverable error on line 472
  FODC0002: I/O error reported by XML parser processing null: null
Unable to open referenced included file: /tmp/schematron/rules/rules.sch
Unable to locate id attribute: /tmp/schematron/rules/rules.sch
{code}

We need a way of passing an XML Catalog or URI Resolver that may fix the issue but I doubt it as  the last test failed to find the included file in the file system. Here is the camel example I sued to test the solutions: https://github.com/akhettar/zotix/tree/master/schematron-service. 

I am extremely busy these days with family commitments and finding difficult hard to allocate time to investigate the issue properly. But I am confident we will get there

twalzer:1467507125:2016-07-03T08:52:05.780+0000:1467507125:2016-07-03T08:52:05.780+0000:Hi Ayache,

please do not apologise. This is unpaid work, after all ;-)

I re-tried your example, and got the same error.
When I add the rules.sch to the /tmp/schematron/sch/include directory I get the following:
  
  $ curl -v -H ""Content-Type: application/xml"" -X POST --data ""@src/test/resources/input.xml""             http://localhost:9090/schematron/validate
   *   Trying ::1...
   * connect to ::1 port 9090 failed: Connection refused
   *   Trying 127.0.0.1...
   * Connected to localhost (127.0.0.1) port 9090 (#0)
   > POST /schematron/validate HTTP/1.1
   > Host: localhost:9090
   > User-Agent: curl/7.43.0
   > Accept: */*
   > Content-Type: application/xml
   > Content-Length: 358
   >
   * upload completely sent off: 358 out of 358 bytes
   < HTTP/1.1 404 Not Found
   < Content-Type: text/plain
   < Content-Length: 0
   <
  * Connection #0 to host localhost left intact

I created a pull request (https://github.com/akhettar/zotix/pull/1), basically as a note to myself.


hutchkintoot:1470724101:2016-08-09T14:28:21.424+0000:1470724207:2016-08-09T14:30:07.015+0000:I'v been trying some things out and found that a possible way to fix this issue is to allow the user to configure the endpoint with an optional ""Client"" URIResolver. 

{code:xml}
...
<to id=""DD_METS-schematron-validation"" uri=""schematron:metadata/schematron/identifier_checks.sch?uriResolver=#customUriResolver""/>
...
{code}

This resolver would then be included in the components ClassPathURIResolver and be used as a fallback if the first resolve fail and the clientUriResolver is not null. 

like this :
{code}
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.component.schematron.processor;

import java.io.File;
import java.io.InputStream;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerException;
import javax.xml.transform.URIResolver;
import javax.xml.transform.stream.StreamSource;

/**
 * Class path resolver for schematron templates
 */
public class ClassPathURIResolver implements URIResolver {

    private final String rulesDir;
    private final URIResolver clientUriResolver;

    /**
     * Constructor setter for rules directory path.
     */
    public ClassPathURIResolver(final String rulesDir, URIResolver clientUriResolver) {
        this.rulesDir = rulesDir;
        this.clientUriResolver = clientUriResolver;
    }

    @Override
    public Source resolve(String href, String base) throws TransformerException {
        InputStream stream = ClassPathURIResolver.class.getClassLoader()
                .getResourceAsStream(rulesDir.concat(File.separator).concat(href));

        if (null != stream) {
            return new StreamSource(stream);
        } else {
            if (null != clientUriResolver) {
                return clientUriResolver.resolve(href, base);
            } else {
                return new StreamSource(stream);
            }
        }
    }
}

{code}

We use version 2.15.x of camel so i've based my experiments on this version of the component.
akhettar:1470790267:2016-08-10T08:51:07.700+0000:1470790267:2016-08-10T08:51:07.700+0000:Hi Johan. Thank you for looking into this. Have you tested your solution on karaf? if so, would you be able to create a pull request for this? I will review it and merge it for you.

Thanks
hutchkintoot:1470970642:2016-08-12T10:57:22.596+0000:1470970642:2016-08-12T10:57:22.596+0000:Hi, i just tried it in karaf 3.0.5 and it worked like a charm. Will try to make a pull request. It will be on the camel 2.15.x branch. But maybe you can update the other branches?
githubbot:1470973759:2016-08-12T11:49:19.233+0000:1470973759:2016-08-12T11:49:19.233+0000:GitHub user hutchkintoot opened a pull request:

    https://github.com/apache/camel/pull/1118

    Fix for CAMEL-8287

    Allows a user to supply a custom URIResolver to be used to resolve imports in his/her schematron rules files.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hutchkintoot/camel CAMEL-8287

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1118.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1118
    
----
commit 3d58063eb6612f7ba198fde1d8dd90c190bce9dc
Author: Johan Mörén <johan.moren@kb.se>
Date:   2016-08-12T11:46:06Z

    Fix for CAMEL-8287
    
    Allows a user to supply a custom URIResolver to be used to resolve imports in his/her schematron rules files.

----

hutchkintoot:1470973792:2016-08-12T11:49:52.999+0000:1470973792:2016-08-12T11:49:52.999+0000:Pull request sent https://github.com/apache/camel/pull/1118
akhettar:1471173804:2016-08-14T19:23:24.677+0000:1471173862:2016-08-14T19:24:22.547+0000:Many thanks Johan, really appreciated. I have asked [~davsclaus] to merge the pull request as I don't have the right privileges to push to master. I will update the wiki shortly.
githubbot:1471238302:2016-08-15T13:18:22.040+0000:1471238302:2016-08-15T13:18:22.040+0000:GitHub user hutchkintoot opened a pull request:

    https://github.com/apache/camel/pull/1123

    Fix for CAMEL-8287

    Allows a user to supply a custom URIResolver to be used to resolve imports in his/her schematron rules files.
    
    Fix now applied to master. But we would really need to have this back ported to the 2.16.x and 2.17.x branches if possible. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hutchkintoot/camel CAMEL-8287-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1123.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1123
    
----
commit ffb4b1cd22f27767f320fcec5de13dd6aec27916
Author: Johan Mörén <johan.moren@kb.se>
Date:   2016-08-15T13:14:27Z

    Fix for CAMEL-8287
    
    Allows a user to supply a custom URIResolver to be used to resolve imports in his/her schematron rules files.

----

githubbot:1471238428:2016-08-15T13:20:28.570+0000:1471238428:2016-08-15T13:20:28.570+0000:Github user hutchkintoot closed the pull request at:

    https://github.com/apache/camel/pull/1118

githubbot:1471245144:2016-08-15T15:12:24.195+0000:1471245144:2016-08-15T15:12:24.195+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1123

davsclaus:1471245159:2016-08-15T15:12:39.193+0000:1471245159:2016-08-15T15:12:39.193+0000:Thanks for the PR with the custom URIResolver"
0,CAMEL-8286,Bug,Major,2.13.2,None,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Ryan,0,2,2015-01-27 10:42:09+00:00,2015-02-15 08:29:43+00:00,"Found a possible issue when working with camel and trying to move a file after it has finished processing, It appears that camel tries to close the file to early before the split has finished with the file 


I have attached images of where i am finding this problem, In the image ""Where the problem occurs.png"" camel tries to close the file the first time at this point?


The rather ugly hack is on the close method of the iiterator","davsclaus:1422327089:2015-01-27T10:51:29.161+0000:1422327089:2015-01-27T10:51:29.161+0000:This should be fixed by another ticket. Try with SNAPSHOT as suggested here: http://camel.apache.org/support
davsclaus:1422327154:2015-01-27T10:52:34.250+0000:1422327154:2015-01-27T10:52:34.250+0000:CAMEL-7787 fixes this"
0,CAMEL-8285,Improvement,Minor,2.14.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Grzegorz Grzybek,0,2,2015-01-27 10:09:17+00:00,2016-05-05 16:58:25+00:00,"JdbcProducer gets java.sql.Connection by direct call to javax.sql.DataSource#getConnection(). But depending on dataSource used, the acquired connection may not be the correct JDBC connection (and XAResource in case of XA transactions) which is currently associated with org.springframework.transaction.PlatformTransactionManager used by org.springframework.transaction.support.TransactionTemplate which is used by Camel's <transacted> (org.apache.camel.spring.spi.TransactionErrorHandler).


JdbcProducer might use:



org.springframework.jdbc.datasource.DataSourceUtils#getConnection()
org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection()



just like Spring's JdbcTemplate does it (and camel-sql component uses).","ggrzybek:1422324721:2015-01-27T10:12:01.005+0000:1422324721:2015-01-27T10:12:01.005+0000:This will however tie {{camel-jdbc}} with {{spring-jdbc}}, which isn't the case right now.
davsclaus:1422398395:2015-01-28T06:39:55.118+0000:1422398395:2015-01-28T06:39:55.118+0000:We cannot use spring code in this component, its a pure jdbc api component.
ggrzybek:1422404693:2015-01-28T08:24:53.761+0000:1422404693:2015-01-28T08:24:53.761+0000:Agree.
Maybe we could tell JdbcProducer/JdbcComponent about current TransactedPolicy and extend it to provide methods for getting current connection? (maybe not directly, rather via some kind of _adapt()_ method?) org.apache.camel.spring.spi.SpringTransactionPolicy could then implement this method to use {{org.springframework.jdbc.datasource.DataSourceUtils#getConnection()}}.
Otherwise JdbcProducer won't use the right connection in transacted case.
Also we can just document current limitation...
davsclaus:1422498051:2015-01-29T10:20:51.804+0000:1422498070:2015-01-29T10:21:10.821+0000:What kind of transactions are you talking about? single resources or XA. The latter with XA ought to let the TX manage orchestrate it all about commit / rollback, and just by using the XADataSource it should work - I assume.

For single resource if the idea is to defer the commit to the end of the route, then yeah I guess maybe the connection should be reused or not returned to the pool. So maybe the component detects that the exchange is transacted, eg exchange.isTransacted() and if so it grabs the connection and keep it around, and only return it to the pool when the exchange UoW is done. Well in fact this ought also to work for XA.
ggrzybek:1422501728:2015-01-29T11:22:08.995+0000:1422501728:2015-01-29T11:22:08.995+0000:I was thinking about single resource transactions. In case of XA, datasource.getConnection() may (at least in case of aries-jdbc when working in Fuse) return the same connection, but I'm pretty sure it's not guaranteed.
In case of single resource transaction (when Camel uses spring's JdbcTransactionManager) dataSource.getConnection() may return new connection and commit in JdbcTransactionManager won't commit on this connection.
davsclaus:1462438705:2016-05-05T16:58:25.546+0000:1462438705:2016-05-05T16:58:25.546+0000:The jdbc component is for pure jdbc. If using spring then use camel-sql that is spring based."
0,CAMEL-8284,Improvement,Major,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Franz Forsthofer,0,4,2015-01-27 07:51:37+00:00,2015-02-21 15:06:06+00:00,"If the multi-cast processor gets as an input a stream cache in the parallel processing mode, then the stream is read by different threads concurrently. This leads to wrong results.


The attached patch solves this issue. The idea of the patch is to provide a copy of the stream cache to each thread. The copy will use the same cache of the original stream cache, only the stream which accesses the cached data  will be a separate instance. For this, we introduced the new method


   copy()


in the StreamCache class.


See also discussion in http://camel.465427.n5.nabble.com/Data-Corruption-in-SFTP-in-Parallel-Multicast-branches-td5761673.html#a5761781


Franz Forsthofer
SAP SE
e-mail: franz.forsthofer[at]sap.com","ay:1422320079:2015-01-27T08:54:39.143+0000:1422320079:2015-01-27T08:54:39.143+0000:this is a known limitation of camel's stream caching.
http://mail-archives.apache.org/mod_mbox/camel-users/201302.mbox/%3CCAF8t5Xvr8rnHs8z5GzDPppAm5Hq9j0f4BbsUcT5HwPMvaO0FUg@mail.gmail.com%3E

I think we should just make camel's stream cache work similar to cxf's stream caching, which can be read multiple times by multiple threads.

regards, aki
forsthofer:1422329660:2015-01-27T11:34:20.496+0000:1422329660:2015-01-27T11:34:20.496+0000:Hello Aki,

the behavior is similar as in CXF:

- For a file cache you can create now several FileInputStream instances. 
- The FileInputStream instances are registered in the FileInputStreamCloser instance. There is a one to one relationship between a FileInputStreamCloser instance and the file cache (CachedOutputStream instance).
- The FileInputSteamCloser instance closes all the registered FileInputStream instances before the file cache is deleted at the end of the route.

Regards Franz


forsthofer:1422339836:2015-01-27T14:23:56.328+0000:1422339836:2015-01-27T14:23:56.328+0000:I made a correction in the patch. Therefore I updated the patch.
davsclaus:1422397599:2015-01-28T06:26:39.955+0000:1422397599:2015-01-28T06:26:39.955+0000:Need to review this as want to avoid further complicating the code and eips. 
forsthofer:1422660893:2015-01-31T07:34:53.628+0000:1422660893:2015-01-31T07:34:53.628+0000:I changed the patch again in order to make it less intrusive. Please check.
siano:1423194562:2015-02-06T11:49:22.132+0000:1423194562:2015-02-06T11:49:22.132+0000:This patch is also needed:
camel-netty-http and camel-netty4-http also implement a StreamCache, so they need also to implement the copy() method.

The underlying netty buffers do implement a copy() method for this purpose, though, so the patch is not too difficult
forsthofer:1423638445:2015-02-11T15:07:25.287+0000:1423638445:2015-02-11T15:07:25.287+0000:Hello Claus,

I attached an alternative solution 0001-parallel-processable-stream.patch where I do not change the StreamCache interface but where I introduce a new interface ParallelProcessableStream with a copy method.

With this solution, implementations of StreamCache must not be changed.

Please have a look, if this solution can be applied for 2.14 and 2.15.

The above patch does not make changes in the netty component (as suggested by Stephan Siano, see patch 0001-CAMEL-8284-Implement-copy-method-in-NettyChannelBuff.patch) because the implementation of ParallelProcessableStream  is optional for enabling parallel processing. But of course it would make sense to implement the ParallelProcessableStream  in NettyChannelBufferStreamCache.

Regards Franz


davsclaus:1424226148:2015-02-18T10:22:28.301+0000:1424226148:2015-02-18T10:22:28.301+0000:Thanks Franz for working on this.

Taking a look now.
davsclaus:1424242788:2015-02-18T14:59:48.698+0000:1424242788:2015-02-18T14:59:48.698+0000:org.apache.camel.converter.stream.ByteArrayInputStreamCache#copy

Would have been lovely if there was a way for byte array input streams to not need to copy the byte[] but reuse the same instance to avoid 2x the memory usage.
But seems like buf[] is protected in the jdk api, and no api to access it.

Also I think we should add the copy method directly to StreamCache so its out of the box. There is to many interfaces already in Camel.
davsclaus:1424502366:2015-02-21T15:06:06.164+0000:1424502366:2015-02-21T15:06:06.164+0000:Thanks for reporting and the patch.

The wire tap EIP would need to copy the stream as well. So I am logging a ticket about this."
0,CAMEL-8283,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Volodymyr Sobotovych,0,2,2015-01-26 20:51:09+00:00,2015-01-28 06:31:45+00:00,"There is some incorrectness in description of ""charset"" option in documentation (http://camel.apache.org/file2.html):


Camel 2.9.3: this option is used to specify the encoding of the file, and camel will set the Exchange property with Exchange.CHARSET_NAME with the value of this option. You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file, you can use this option to specify which charset to write the file as well. See further below for a examples and more important details.


The incorrectness is highlighted in italic above. No endpoint (file, ftp, sftp) sets Exchange.CHARSET_NAME as illustrated by the output of this test:



public class FileEncodingTest extends CamelTestSupport {
    @Test
    public void testFileEncoding() {
        template.sendBody(""direct:in"", ""Hi there"");
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:in"")
                        .log(""Charset name header (1): ${header.CamelCharsetName}"")
                        .to(""file://output.txt?charset=iso-8859-1"")
                        .log(""Charset name header (2): ${header.CamelCharsetName}"")
                        .setHeader(Exchange.CHARSET_NAME, constant(""iso-8859-1""))
                        .log(""Charset name header (3): ${header.CamelCharsetName}"");
            }
        };
    }
}





[                          main] route1                         INFO  Charset name header (1): 
[                          main] SendProcessor                  DEBUG >>>> Endpoint[file://output.txt?charset=iso-8859-1] Exchange[Message: Hi there]
[                          main] FileOperations                 DEBUG Using Reader to write file: output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1 with charset: iso-8859-1
[                          main] GenericFileProducer            DEBUG Wrote [output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1] to [Endpoint[file://output.txt?charset=iso-8859-1]]
[                          main] route1                         INFO  Charset name header (2): 
[                          main] route1                         INFO  Charset name header (3): iso-8859-1",davsclaus:1422397905:2015-01-28T06:31:45.371+0000:1422397905:2015-01-28T06:31:45.371+0000:Updated doc
0,CAMEL-8282,Test,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-26 15:01:33+00:00,2015-01-28 06:21:00+00:00,"Maybe this test used an outdated AMQ version 5.6.0?
https://github.com/apache/camel/blob/master/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jms/JmsTest.java#L52",
0,CAMEL-8281,New Feature,Minor,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Julian Cable,0,2,2015-01-26 12:01:50+00:00,2015-02-06 11:29:11+00:00,"BoxTypeConverter - documentation is ambiguous as to whether the folderId can be specified with a property or a header. The attached patch changes it so that it can be set on a header and adds a second conversion from byte[] so that camel-box endpoints can sit on the end of a message queue or other non-file like route.


A dependence on the CamelFileName header is introduced.","davsclaus:1422398038:2015-01-28T06:33:58.160+0000:1422398038:2015-01-28T06:33:58.160+0000:We may want to fallback to check the exchange property to be backwards compatible?
julian.cable:1422440385:2015-01-28T18:19:45.800+0000:1422440385:2015-01-28T18:19:45.800+0000:The code would be noticably clunkier - I hope we are early enough not too many people will have used the exchange property but what do the original developers think?
davsclaus:1423193106:2015-02-06T11:25:06.042+0000:1423193106:2015-02-06T11:25:06.042+0000:Yeah that is fine, we can add a note to the release notes
davsclaus:1423193351:2015-02-06T11:29:11.451+0000:1423193351:2015-02-06T11:29:11.451+0000:Founder another problem logged CAMEL-8321"
0,CAMEL-8280,Bug,Major,"2.13.3, 2.14.1","2.13.4, 2.14.2","
None
",Resolved,Fixed,"2.13.4, 2.14.2",Willem Jiang,Willem Jiang,0,1,2015-01-26 10:21:22+00:00,2015-01-26 12:06:22+00:00,We need to avoid calling assembleKey in the CaseInsensitiveMap putAll method if the map instance is CaseInsensitiveMap.,njiang:1422245182:2015-01-26T12:06:22.231+0000:1422245182:2015-01-26T12:06:22.231+0000:Applied the patch into camel-2.14.x and camel-2.13.x branches.
0,CAMEL-8279,Improvement,Trivial,None,None,"

camel-zipfile
multicast

",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Ranil Wijeyratne,0,2,2015-01-25 18:59:35+00:00,2015-01-26 13:54:58+00:00,When aggregating byte arrays using a zipaggregationstrategy within a multicast the messageid will be the same resulting in an error because the filename will be duplicate,"stravag:1422183875:2015-01-25T19:04:35.716+0000:1422183875:2015-01-25T19:04:35.716+0000:https://github.com/apache/camel/pull/378
davsclaus:1422251698:2015-01-26T13:54:58.871+0000:1422251698:2015-01-26T13:54:58.871+0000:Thanks for the PR"
0,CAMEL-8278,Sub-task,Major,None,2.15.0,"
None
",Resolved,Later,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-24 08:23:02+00:00,2015-01-29 10:15:11+00:00,"To provide a combined camelModel.json schema that includes all the eips, data formats, languages from the model, based on each individual schema, but being inter connected and easier for tooling, Camel commands, and Camel runtime management itself to leverage.",davsclaus:1422497711:2015-01-29T10:15:11.244+0000:1422497711:2015-01-29T10:15:11.244+0000:Deferring this as the existing information at hand is sufficient at this time
0,CAMEL-8277,Improvement,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Emilien,0,1,2015-01-23 17:59:07+00:00,2015-02-12 06:25:24+00:00,"It can be useful to perform some scan requests based on a HBase row prefix filter. A ""ModelAwareRowPrefixMatchingFilter"" filter could be added to the existing set of available filters.","ebondu:1422007441:2015-01-23T18:04:01.718+0000:1422007441:2015-01-23T18:04:01.718+0000:Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268"
0,CAMEL-8276,Improvement,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Emilien,0,1,2015-01-23 17:52:48+00:00,2015-02-12 06:25:46+00:00,The returned objects for scan / get methods does not contains the HBase timestamp. A timestamp field could be added on HBaseRow/HBaseCell classes to allow to get access to timestamps in mapping strategies / routes.,"ebondu:1422007478:2015-01-23T18:04:38.455+0000:1422007478:2015-01-23T18:04:38.455+0000:Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268"
0,CAMEL-8275,Improvement,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Emilien,0,1,2015-01-23 17:47:58+00:00,2015-02-12 06:26:09+00:00,"By default, the input exchange message headers are not propagated when the get/scan method is called. It is not convenient in routes if you want to call others endpoints after the hbase enpoint. Instead of extending the HeaderMappingStrategy or implementing your own strategy, the HeaderMappingStrategy should propagates input message headers.","ebondu:1422007508:2015-01-23T18:05:08.848+0000:1422007508:2015-01-23T18:05:08.848+0000:Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268"
0,CAMEL-8274,Bug,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Emilien,0,1,2015-01-23 17:41:50+00:00,2015-02-12 06:26:33+00:00,"The max result option defined on the endpoint does not stop the hbase scanner. To be more convenient, the max result should also be dynamicaly passed as a header (for example with a ""CamelHBaseMaxScanResults"" header).","ebondu:1422007544:2015-01-23T18:05:44.261+0000:1422007544:2015-01-23T18:05:44.261+0000:Here the patch that fix bugs :
https://issues.apache.org/jira/browse/CAMEL-8277
https://issues.apache.org/jira/browse/CAMEL-8276
https://issues.apache.org/jira/browse/CAMEL-8275
https://issues.apache.org/jira/browse/CAMEL-8274
https://issues.apache.org/jira/browse/CAMEL-8268"
0,CAMEL-8243,Improvement,Major,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Bilgin Ismet Ibryam,Tristan Tarrant,0,3,2015-01-14 12:48:45+00:00,2016-03-02 12:36:48+00:00,HotRod 2.0 (included in Infinispan 7.0) has support for remote events. The Infinispan component should be enhance to support this as well as embedded events.,"tristan.tarrant@gmail.com:1455851724:2016-02-19T11:15:24.760+0000:1455851724:2016-02-19T11:15:24.760+0000:https://github.com/apache/camel/pull/849
githubbot:1456269918:2016-02-24T07:25:18.962+0000:1456269918:2016-02-24T07:25:18.962+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/849
"
0,CAMEL-8242,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-14 07:34:32+00:00,2015-01-14 14:38:48+00:00,We have schema and documentation for components + eip as part of the build process. We need to include information about languages as well,
0,CAMEL-8241,Bug,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Dave Heath,1,6,2015-01-13 20:55:00+00:00,2015-10-27 19:40:16+00:00,"I'm attaching a test case that shows an issue I've been running into with the exec command since updating my environment to Java 8. It appears that I'm running into a race condition where a stream is sometimes closed prematurely before DefaultExecutor has a chance to close it, causing DefaultExecCommandExecutor to throw and exit (even though the command did execute properly). I've tested this against the updated version of commons-exec as well just to make sure this hasn't somehow been fixed in that library.


Please note that the attached test doesn't always fail; you may need to run it a few times before the error will show up.","davsclaus:1423960337:2015-02-15T08:32:17.217+0000:1423960337:2015-02-15T08:32:17.217+0000:Do you have any log or stacktrace when this error happens? If so you are very welcome to attach to this ticket
davsclaus:1423960352:2015-02-15T08:32:32.228+0000:1423960352:2015-02-15T08:32:32.228+0000:Also please report which JDK and Unix OS you use.
AWickert:1424229128:2015-02-18T11:12:08.434+0000:1424229128:2015-02-18T11:12:08.434+0000:I've got the same problem as described.I've reduced my program on a simple route. 

I am using CentOS 6.4, jdk1.8.0_25 and the camel version 2.14.1.

this is the route:
 <route id=""test_exec"" autoStartup=""true"">
      <from uri=""file://target/test"" />
      <to uri=""exec:pwd"" />
 </route>

and this is the stracktrace:
org.apache.camel.component.exec.ExecException: Unable to execute command ExecCommand [args=[], executable=pwd, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:81)
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:46)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:416)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433)
        at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)
        at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Stream closed
        at java.lang.ProcessBuilder$NullOutputStream.write(ProcessBuilder.java:433)
        at java.io.OutputStream.write(OutputStream.java:116)
        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
        at java.io.FilterOutputStream.close(FilterOutputStream.java:158)
        at org.apache.commons.exec.DefaultExecutor.closeStreams(DefaultExecutor.java:288)
        at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:364)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:160)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:147)
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:67)
        ... 20 more


davsclaus:1424573484:2015-02-22T10:51:24.297+0000:1424573484:2015-02-22T10:51:24.297+0000:Thanks for the unit test.

I could reproduce the issue, and added a workaround in camel-exec to catch the stream closed and move on.

But the bug is in commons-exec which likely need to fix that issue.
brianok:1438239176:2015-07-30T14:52:56.388+0000:1438239538:2015-07-30T14:58:58.586+0000:FYI -- This bug is not resolved for me in Camel 2.15.0 because the workaround in components/camel-exec/src/main/java/org/apache/camel/component/exec/impl/DefaultExecCommandExecutor.java looks for the string ""if (""Stream closed"".equals(msg)) {..."", but on my JVM the exception message is actually ""Stream Closed"".  See stack trace below.  I am not very familiar with how to report that a workaround is still broken in JIRA, so please advise.

I would recommend changing the check to ""if (""stream closed"".equals(msg.toLowerCase())) {""

       at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:102)
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:53)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
        at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:736)
        at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:83)
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:304)
        at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:289)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Stream Closed
        at java.io.FileOutputStream.writeBytes(Native Method)
        at java.io.FileOutputStream.write(FileOutputStream.java:307)
        at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82)
        at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:140)
        at java.io.FilterOutputStream.close(FilterOutputStream.java:158)
        at org.apache.commons.exec.DefaultExecutor.closeProcessStreams(DefaultExecutor.java:306)
        at org.apache.commons.exec.DefaultExecutor.executeInternal(DefaultExecutor.java:387)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:166)
        at org.apache.commons.exec.DefaultExecutor.execute(DefaultExecutor.java:153)
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:69)
        ... 21 more

davsclaus:1438307155:2015-07-31T09:45:55.192+0000:1438307155:2015-07-31T09:45:55.192+0000:Thanks Brian I just improved to check ignoring the case.
davisda:1445943194:2015-10-27T18:53:14.307+0000:1445946016:2015-10-27T19:40:16.325+0000:I can confirm the same error on RHEL 6.x using ServiceMix 5.5.0, Camel 2.15.2 and Oracle Java 1.8_66.  The source code for the exec component in branch camel-2.15.x has the workaround described above.  It appears that the workaround is not in the ServiceMix distribution so I built 2.15.5.SNAPSHOT from the source and it seems to be working correctly.

The stack trace is:

2015-10-27 14:39:58,830 | WARN  | ora.apim.update] | EndpointMessageListener          | 124 - org.apache.camel.camel-core - 2.15.2 | Execution of JMS message listener failed. Caused by: [org.apache.camel.component.exec.ExecException - Unable to execute command ExecCommand [args=[-f, staging/ID-oris-srv03-si-edu-51333-1445886844310-7-158], executable=rm, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]]
org.apache.camel.component.exec.ExecException: Unable to execute command ExecCommand [args=[-f, staging/ID-oris-srv03-si-edu-51333-1445886844310-7-158], executable=rm, timeout=9223372036854775807, outFile=null, workingDir=null, useStderrOnEmptyStdout=false]
        at org.apache.camel.component.exec.impl.DefaultExecCommandExecutor.execute(DefaultExecCommandExecutor.java:102)[230:org.apache.camel.camel-exec:2.15.2]
        at org.apache.camel.component.exec.ExecProducer.process(ExecProducer.java:53)[230:org.apache.camel.camel-exec:2.15.2]
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[124:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)[124:org.apache.camel.camel-core:2.15.2]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[124:org.apache.camel.camel-core:2.15.2]
 








"
0,CAMEL-8240,New Feature,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Willem Jiang,Justin Heesemann,0,1,2015-01-13 15:31:04+00:00,2015-01-17 11:10:32+00:00,"Currently it is not possible to send apns messages with a user defined expiration date.
This affects both STRING and PAYLOAD message types.
The org.apache.camel.component.apns.ApnsProducer calls the ApnsService.push(Collection<String> deviceTokens, String payload) throws NetworkIOException;
method which uses a EnhancedApnsNotification.MAXIMUM_EXPIRY (somewhen in 2038).


A possible solution would allow the usage of a new ApnsConstants.HEADER_EXPIRY message header where users could store the wanted expiration time.",
0,CAMEL-8239,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Christian Schneider,Christian Schneider,0,1,2015-01-13 14:58:09+00:00,2015-01-19 16:12:37+00:00,"Support for jetty 8 will soon end and karaf 4 will only support jetty 9.
On the other hand a lot of people are still using jetty 8.


So we need to make camel compatible to jetty 8 and jetty 9.


On the list we agreed to create separate modules 
camel-jetty8
camel-jetty9
and camel-jetty-common 


This is necessary as jetty 9 is incompatible to jetty 8 in some APIs.","cschneider:1421655157:2015-01-19T16:12:37.559+0000:1421655157:2015-01-19T16:12:37.559+0000:For karaf there are two different features now.

Install camel-jetty for karaf < 4
and camel-jetty9 for karaf >=4

Currently the karaf 4 jetty feature is missing the jetty client bundle so it has to be installed by hand:
install -s mvn:org.eclipse.jetty/jetty-client/9.0.7.v20131107

I did not add it to the camel-jetty9 feature as karaf 4.0.0 will have it in the jetty feature."
0,CAMEL-8238,Improvement,Minor,None,,"
None
",Resolved,Abandoned,None,Unassigned,Sergey Beryozkin,0,1,2015-01-13 14:12:23+00:00,2019-07-31 08:56:25+00:00,Running CXFRS responses via a Camel Route initiated from a JAX-RS out interceptor can make it simpler to setup the routes for existing JAX-RS implementations.,"sergey_beryozkin:1421132823:2015-01-13T15:07:03.668+0000:1421132823:2015-01-13T15:07:03.668+0000:JAX-RS out interceptor that can send a response body to a Camel route
sergey_beryozkin:1421399471:2015-01-16T17:11:11.430+0000:1421399471:2015-01-16T17:11:11.430+0000:This patch may need to be updated..."
0,CAMEL-8237,Bug,Major,2.14.1,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Benjamin Habegger,0,3,2015-01-13 11:35:55+00:00,2015-02-15 08:30:09+00:00,"Previously in version 2.14.0 it was possible to define a dataFormat as a spring bean (as decribed in http://camel.apache.org/data-format.html) and set the rest configuration to use this custom dataformat.


Since version 2.14.1, defining such a dataformat and configuring rest to use it  leads to : java.lang.IllegalArgumentException: JsonDataFormat name: json must not be an existing bean instance from the registry","njiang:1421120447:2015-01-13T11:40:47.402+0000:1421120447:2015-01-13T11:40:47.402+0000:Hi Benjamin, 
Can you add a simple test case to use the error?
davsclaus:1421123449:2015-01-13T12:30:49.253+0000:1421123449:2015-01-13T12:30:49.253+0000:This is by design, you cannot use instances, as that was faulty in 2.14.0.


davsclaus:1421464318:2015-01-17T11:11:58.462+0000:1421464318:2015-01-17T11:11:58.462+0000:Ben, is there something in 2.14.1 you no longer can do?

You should be able to configure the data formats using the rest-dsl style, using the dataFormatProperty. And you can use the prefixies if you want to configure options differently on IN vs OUT etc.
benjamin.habegger:1421652364:2015-01-19T15:26:04.898+0000:1421652364:2015-01-19T15:26:04.898+0000:Well, we had our own implementation of the org.apache.camel.spi.DataFormat interface we were using by creating a bean and referencing it using the rest jsonDataFormat configuration.

In our spring xml file:

<bean id=""myDataFormat"">
<!-- etc. -->
</bean>

In our java RouteBuilder:

rest().jsonDataFormat(""myDataFormat"")
 // etc. 
;

From what, I understand, we don't have any way to use a completely custom DataFormat implementation where as this was possible before. From what I understand the dataFormatProperty only allows to configure an existing dataFormat implementation. Am I wrong ?

Benjamin

davsclaus:1421652605:2015-01-19T15:30:05.212+0000:1421652605:2015-01-19T15:30:05.212+0000:Honestly rest-dsl wasnt intended at start to use custom data format, but just jaxb / jackson-json etc.

But I think we can support custom under the rule, that it has a no-arg default constructor, then we use that to instantiate a new instance, and use the existing data format configuration for you to configure it. Then it should fit like the built in data formats.

"
0,CAMEL-8236,Bug,Minor,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Rafael Winterhalter,0,4,2015-01-13 09:01:36+00:00,2015-01-13 14:28:55+00:00,"The DefaultCamelContext attempts to detect an IBM WebSphere application server by a simple test: loader.getClass().getName().startsWith(""com.ibm"")


This test can introduce very subtle bugs when working with other IBM productes and I suggest to replace it by a list of known class names of WebSphere class loaders. At least, one should add an additional dot in order to avoid matching packages that only start with ""com.ibm"" such as any ""com.ibmfoobar"".","njiang:1421120885:2015-01-13T11:48:05.932+0000:1421120885:2015-01-13T11:48:05.932+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
davidkarlsen@gmail.com:1421123373:2015-01-13T12:29:33.174+0000:1421123373:2015-01-13T12:29:33.174+0000:com.ibm. is still very wide (looking at https://github.com/apache/camel/commit/91cc51ff0999e52ee284ab02ebfd768ac3f65c17)
I suggest to go at least one package deeper.
You can look at https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/context/annotation/MBeanExportConfiguration.java to get some inspiration - but that is really about WAS management extensions.

I downloaded some javadocs from: http://www-01.ibm.com/software/webservers/appserv/was/library/v85/nd-dp/
and maybe com.ibm.websphere.servlet.container. or com.ibm.websphere.servlet. is more suitable?
njiang:1421125585:2015-01-13T13:06:25.417+0000:1421125585:2015-01-13T13:06:25.417+0000:How about ""com.ibm.webspehere.""? I think it should be enough.
davidkarlsen@gmail.com:1421126153:2015-01-13T13:15:53.194+0000:1421126153:2015-01-13T13:15:53.194+0000:I think in fact that too is too wide as webpshere is whole family of products and not only the app server.
raphw:1421129196:2015-01-13T14:06:36.565+0000:1421129357:2015-01-13T14:09:17.806+0000:I second that. As class loader magic becomes more and more common place, this might just break for any future weblogic family application. The name of the WebSphere class loader should however be pretty stable, wouldn't it be easiest to match the exact name? Also, one could add some system property ""-Dcamel.websphereClassLoader"" for overriding this name if it would indeed change before Camel would add this additional name and a user would require this adaption.
davsclaus:1421130535:2015-01-13T14:28:55.846+0000:1421130535:2015-01-13T14:28:55.846+0000:This code has been working fine for about 7 years.

This is not for all classloading but only for annotation package scanning, which in Camel 1.x was how it discovered type converters. This has changed a long time ago, and is no longer needed.

Only when using camel-bindy it does some package scanning annotations, only because we havent refactored and migrated camel-bindy to avoid this. There is a jira about that.

There is no need to add a system property and whatnot. You can remove this code and have Camel work in websphere, its only when you use camel-bindy it would may fail. But newer versions of WebSphere may work without this. So if anyone got access to a set of IBM WebSphere App Servers they are welcome to test the situation today.

Also WebSpherePackageScanClassResolver is no harm as it just adds an extra fallback that has no harm for non websphere environments"
0,CAMEL-8235,Improvement,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2015-01-12 18:09:42+00:00,2015-01-13 07:00:56+00:00,"End users can configure a property on CamelContext to control the max logging length of the message body, CamelLogDebugBodyMaxChars.


That option is not in use with message history as the setMaxChars on the internal exchange formatter does not read that property value.",
0,CAMEL-8234,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-12 17:43:38+00:00,2015-01-13 07:00:24+00:00,"The DefaultClassResolver should also use the configured org.apache.camel.impl.DefaultCamelContext#getApplicationContextClassLoader if its available to attempt to load a class.


There can be situations where otherwise loading a class would fail.",
0,CAMEL-8233,Bug,Minor,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2015-01-12 15:46:23+00:00,2015-01-12 15:52:08+00:00,"If both options are true, then parallel aggregate runs in sequence. It was a missing place in the code that wasn't changed when the parallelAggregate option was added to Camel",
0,CAMEL-8232,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-12 13:55:23+00:00,2015-01-13 17:05:39+00:00,We have schema and documentation for components + eip as part of the build process. We need to include information about data formats as well.,
0,CAMEL-8231,Bug,Critical,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Karthik Raman,0,2,2015-01-12 12:23:54+00:00,2015-02-15 08:43:42+00:00,"At the time of  sending the message if the message broker (Apollo is used in this case) is down then no exception is raised from the send method of StompEndpoint.  The underlying connection (stomp jms connection) has the error caught and handled. Since the Stompendpoint does not use the CallBack to get notified of the underlying issue, the message sending is assumed successful.",davsclaus:1423961022:2015-02-15T08:43:42.005+0000:1423961022:2015-02-15T08:43:42.005+0000:Thanks for reporting.
0,CAMEL-8230,New Feature,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,0,4,2015-01-12 09:00:12+00:00,2022-09-02 08:56:04+00:00,"This component does not support setting up https/ssl so end users can communicate with a secured server.


See user forum about the issue with some findings what to do
https://developer.jboss.org/thread/251474","jayarr1:1498712671:2017-06-29T13:04:31.137+0000:1498712694:2017-06-29T13:04:54.248+0000:Any updates on the same please? I am trying to use this to connect to CMIS, however would need SSL/TLS support. Thanks.
davsclaus:1498778153:2017-06-30T07:15:53.427+0000:1498778153:2017-06-30T07:15:53.427+0000:We love contributions so people in the community is welcome to help/work on this
http://camel.apache.org/contributing"
0,CAMEL-8229,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-12 08:58:42+00:00,2015-02-06 13:00:38+00:00,"We should have support classes in the support package.


And then leave the old class as @deprecated which we have done for others, such as org.apache.camel.impl.ServiceSupport


The same should be done for RoutePolicySupport.


And there is a few components that should migrated to the new class location



camel-metrics
camel-quartz
camel-quartz2
camel-zookeeper",davsclaus:1423194403:2015-02-06T11:46:43.549+0000:1423194403:2015-02-06T11:46:43.549+0000:And move org.apache.camel.impl.LoggingExceptionHandler to support as well.
0,CAMEL-8228,Bug,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Not A Problem,"2.14.2, 2.15.0",Willem Jiang,Claus Ibsen,0,3,2015-01-12 05:56:08+00:00,2015-01-14 10:39:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/Issue-in-publishTopicName-in-mqtt-component-td5760531.html","pontus.ullgren:1421033789:2015-01-12T11:36:29.937+0000:1421033789:2015-01-12T11:36:29.937+0000:Added unit test case to show the issue and possible workaround (adding a seda in between the MQTT endpoints).
njiang:1421121100:2015-01-13T11:51:40.698+0000:1421121100:2015-01-13T11:51:40.698+0000:I ran the test with camel-2.14.1, I didn't get any error. 
I think the test should be fix by patch of CAMEL-7673.
pontus.ullgren:1421157069:2015-01-13T21:51:09.652+0000:1421157069:2015-01-13T21:51:09.652+0000:That is strange I just ran it again with camel-2.14.1 and it still fails.
{quote}
pontus@devws:/CAMEL-8228$ ./gradlew clean test
:clean
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:compileTestJava
:processTestResources
:testClasses
:test

MqttBrigeTest > testMqttBridge FAILED
    java.lang.AssertionError at MqttBrigeTest.java:53

2 tests completed, 1 failed
:test FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///CAMEL-8228/build/reports/tests/index.html

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 1 mins 13.946 secs
pontus@devws://CAMEL-8228$ ./gradlew -version

------------------------------------------------------------
Gradle 2.0
------------------------------------------------------------

Build time:   2014-07-01 07:45:34 UTC
Build number: none
Revision:     b6ead6fa452dfdadec484059191eb641d817226c

Groovy:       2.3.3
Ant:          Apache Ant(TM) version 1.9.3 compiled on December 23 2013
JVM:          1.7.0_55 (Oracle Corporation 24.51-b03)
OS:           Linux 3.2.0-58-generic amd64

pontus@devws:/CAMEL-8228$
{quote}

njiang:1421199928:2015-01-14T09:45:28.214+0000:1421199928:2015-01-14T09:45:28.214+0000:I ran test in my box, it passed without any error.

I also added the tests into camel-mqtt module, the tests passed[1].
[1]https://builds.apache.org/job/Camel.2.14.x.fulltest/org.apache.camel$camel-mqtt/116/testReport/org.apache.camel.component.mqtt/MQTTBrigeTest/
pontus.ullgren:1421201904:2015-01-14T10:18:24.548+0000:1421201904:2015-01-14T10:18:24.548+0000:OK I then I guess that there is some problem on my local machine.
Guess we can close the issue."
0,CAMEL-8227,Bug,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-11 10:03:07+00:00,2015-01-11 15:25:30+00:00,"Related to CAMEL-5301


Which was implemented for recipient list. But the same thing should be fixed/implemented for send processor as well.


See nabble
http://camel.465427.n5.nabble.com/Rest-DSL-org-apache-camel-ExchangeTimedOutException-The-OUT-message-was-not-received-within-20000-mis-tp5761530.html","davsclaus:1420943808:2015-01-11T10:36:48.012+0000:1420943808:2015-01-11T10:36:48.012+0000:You can use .to(ExchangePattern.InOnly, ""url goes here"") as a the solution.

With this bug fix, we ensure that setting ?exchangePattern=InOnly or InOut from the uri is the pattern that is used, eg it takes precedence. Also as documented it is possible here: http://camel.apache.org/request-reply.html
davsclaus:1420961130:2015-01-11T15:25:30.093+0000:1420961130:2015-01-11T15:25:30.093+0000:Lets keep this for 2.15 onwards so it goes hand in hand with CAMEL-5301."
0,CAMEL-8226,Bug,Major,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Benjamin Graf,0,3,2015-01-10 18:02:16+00:00,2015-02-10 09:02:30+00:00,If several sql endpoints are defined using dataSourceRef attribute the latest one will not get dataSourceRef removed in createEndpoint causing validation exception.,"githubbot:1423526077:2015-02-10T07:54:37.152+0000:1423526077:2015-02-10T07:54:37.152+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/388

    CAMEL-8226 Deprecated feature dataSourceRef not working correctly

    If you try to create more than one of endpoint from SqlComponent with specifying dataSourceRef option, it doesn't remove dataSourceRef option from URL on 2nd attempt as dataSource object is already populated on 1st attempt, causes org.apache.camel.ResolveEndpointFailedException

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-8226

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/388.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #388
    
----
commit 2ccb7b87a650df1e18498df715148db2f2029631
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2015-02-10T07:45:36Z

    CAMEL-8226 Deprecated feature dataSourceRef not working correctly
    
    If you try to create more than one of endpoint from SqlComponent with specifying dataSourceRef option, it doesn't remove dataSourceRef option from URL on 2nd attempt as dataSource object is already populated on 1st attempt, causes org.apache.camel.ResolveEndpointFailedException

----

davsclaus:1423527011:2015-02-10T08:10:11.144+0000:1423527011:2015-02-10T08:10:11.144+0000:Well spotted, in fact the code is a bit wrong as the endpoint options should overrule the component configured, the correct code would be

{code}
        // endpoint options overrule component configured datasource
        DataSource ds = resolveAndRemoveReferenceParameter(parameters, ""dataSource"", DataSource.class);
        String dataSourceRef = getAndRemoveParameter(parameters, ""dataSourceRef"", String.class);
        if (ds == null && dataSourceRef != null) {
            ds = CamelContextHelper.mandatoryLookup(getCamelContext(), dataSourceRef, DataSource.class);
        }
        if (ds == null) {
            // fallback and use component
            ds = dataSource;
        }
        if (ds == null) {
            throw new IllegalArgumentException(""DataSource must be configured"");
        }
{code}
davsclaus:1423528240:2015-02-10T08:30:40.840+0000:1423528240:2015-02-10T08:30:40.840+0000:Thanks for the PR
githubbot:1423530150:2015-02-10T09:02:30.828+0000:1423530150:2015-02-10T09:02:30.828+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/388
"
0,CAMEL-8225,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-09 13:27:51+00:00,2015-01-12 12:30:49+00:00,"With CAMEL-8223 we can now show more details about those exchanges that are inflight but didnt complete in time.


We can then show which exchanges, and where they are ""stuck"" in the routes. This may aid end users to know where to look to improve their situation.",
0,CAMEL-8224,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Markus Eisele,0,2,2015-01-09 10:11:00+00:00,2015-07-09 11:16:24+00:00,"We have the camel timer component which is a simple, non persistence timer using the JDK's in built timer mechanism.
Plus there are the quartz components.
If Camel is running in an EE environment it would make sense to actually use the Java EE TimerService to create persistent timers.


http://docs.oracle.com/javaee/7/api/javax/ejb/TimerService.html",davsclaus:1421037280:2015-01-12T12:34:40.533+0000:1421037280:2015-01-12T12:34:40.533+0000:This can be implemented in camel-ejb which is about EJBs
0,CAMEL-8223,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2015-01-09 08:53:14+00:00,2015-01-09 13:25:55+00:00,"We should improve the inflight repo, to allow to browse the exchanges, so end users can ""see"" where the exchange ""are"".


Today we only offers a counter of the number of inflight per context / routes.


But we are able to provide more details about each exchange, such as where they currently are being processed.


We should also introduce a mbean so people can use that from tooling to browse. And as well from karaf commands etc.",
0,CAMEL-8222,Bug,Major,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Zoltan Farkas,0,2,2015-01-08 20:54:40+00:00,2015-02-05 07:52:07+00:00,"This is due to a ""copy/paste"" bug in: 


org.apache.camel.component.jetty.JettyHttpComponent at line: 691


        if (responseBufferSize != null) 

{
            answer.setResponseBufferSize(responseBufferSize);
        }


        if (responseHeaderSize != null) {
            answer.setResponseBufferSize(responseHeaderSize);
        }





needs to be:





        if (responseBufferSize != null) {            answer.setResponseBufferSize(responseBufferSize);        }

        if (responseHeaderSize != null) 

{
            answer.setResponseHeaderSize(responseHeaderSize);
        }


This issue seems to be also in the latest master and in other places where the header size is set.","davsclaus:1420756617:2015-01-09T06:36:57.330+0000:1420756617:2015-01-09T06:36:57.330+0000:Thanks for reporting. Are you working on a patch?
http://camel.apache.org/contributing.html"
0,CAMEL-8221,Improvement,Major,2.14.1,Future,"
None
",Resolved,Invalid,Future,Unassigned,Dan Brown,0,3,2015-01-08 19:43:18+00:00,2016-05-05 16:56:24+00:00,"We're using a camel Consumer with an aws-sqs endpoint and running into issues with large queues and slow consumers. The consumer jvm downloads messages very fast from sqs, onto the jvm heap, even though the camel receive method processes each message very slowly (and Ack's when done, with autoAck = false). The result of this is that the consumer jvm continually fills its heap with an unbounded queue of incoming messages and eventually throws OOME.


To avoid this failure, we're looking for a way to enable backpressure when using aws-sqs—e.g. an on-heap bounded queue between the component fetching from sqs and the user-defined actor processing the messages—but I don't see anything relevant in the config:



http://camel.apache.org/aws-sqs.html



Looking at the code, I see that SqsConsumer subtypes ScheduledBatchPollingConsumer, which subtypes ScheduledPollConsumer. To get backpressure, should it use something like EventDrivenPollingConsumer somewhere, which uses a blocking queue to avoid the heap blowup above?



https://github.com/apache/camel/blob/camel-2.14.1/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsConsumer.java#L52-L57
https://github.com/apache/camel/blob/camel-2.14.1/camel-core/src/main/java/org/apache/camel/impl/ScheduledBatchPollingConsumer.java#L31-L34
https://github.com/apache/camel/blob/camel-2.14.1/camel-core/src/main/java/org/apache/camel/impl/ScheduledPollConsumer.java#L40-L43
https://github.com/apache/camel/blob/camel-2.14.1/camel-core/src/main/java/org/apache/camel/impl/EventDrivenPollingConsumer.java#L35-L42","srnm:1424026293:2015-02-16T02:51:33.777+0000:1424299523:2015-02-19T06:45:23.448+0000:I think blocking exchanges is Camel's implementation of back-pressure for polling consumers.

Have you tried using a seda component to block additional polls until in-flight exchanges complete?

to(""seda:seda?blockWhenFull=true&size=2&concurrentConsumers=2&waitForTaskToComplete=Always&timeout=0"")

SQS is a ScheduledBatchPollingConsumer so you will need to set maxMessagesPerPoll.
A value of 1 is probably right if you have ""slow"" consumers.

I don't know if there are any other implications of ScheduledBatchPollingConsumer vs. a simple PollingConsumer so what I say here may not be effective with SQS. ymmv... GL!



davsclaus:1462438584:2016-05-05T16:56:24.453+0000:1462438584:2016-05-05T16:56:24.453+0000:More a question for the user forum / mailing list"
0,CAMEL-8220,Sub-task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,2,2015-01-08 09:21:21+00:00,2015-01-14 10:43:11+00:00,"The archertype should generate a component with the @UriEndpoint and UriEndpointComponent out of the box, so people get component documentation included.


The pom.xml should also include the apt-plugin so Camel generates the .json and .html files in the build.",njiang:1421203391:2015-01-14T10:43:11.915+0000:1421203391:2015-01-14T10:43:11.915+0000:Applied the patch into camel master branch.
0,CAMEL-8219,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Daniel Pocock,0,3,2015-01-08 08:24:23+00:00,2016-05-30 06:46:00+00:00,"There are a lot of bug fixes and also some new development in the master branch of jSMPP, recently released as v2.2.1


Unfortunately, there are also API changes and some of the unit tests in camel-smpp fail with the new jSMPP.


I've created a branch that includes all the fixes for compiler errors:


https://github.com/dpocock/camel/tree/dpocock-jsmpp-update


but more work is needed on the branch to fix the unit tests before it is merged.","githubbot:1458213639:2016-03-17T19:20:39.173+0000:1458213639:2016-03-17T19:20:39.173+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/909

    CAMEL-8219: camel-smpp - use jsmpp version 2.2.3

    Note: Not ready to merge. There are still six failing tests:
    
    >Failed tests:
      SmppBindingTest.createSmppMessageFrom8bitDataCodingDeliverSmShouldNotModifyBody:338 data coding=0xF6; encoding=Big5: actual array was null
    
    >SmppMessageTest.createBodyShouldNotMangle8bitDataCodingShortMessage:130 data coding=0xF6; encoding=Big5: array lengths differed, expected.length=8 a
    ctual.length=6
    
    >SmppReplaceSmCommandTest.eightBitDataCodingOverridesDefaultAlphabet:274
      Unexpected method call SMPPSession.replaceShortMessage(null, UNKNOWN, UNKNOWN, ""1616"", null, null, org.jsmpp.bean.RegisteredDelivery@1, 0, [63, 65,
    66, 0, 63, 127, 67, 63]):
        SMPPSession.replaceShortMessage(isNull(), UNKNOWN, UNKNOWN, ""1616"", isNull(), isNull(), org.jsmpp.bean.RegisteredDelivery@1, 0, [-1, 65, 66, 0, -1
    , 127, 67, -1]): expected: 1, actual: 0
    
    >SmppReplaceSmCommandTest.bodyWithGSM8bitDataCodingNotModified:246
      Unexpected method call SMPPSession.replaceShortMessage(null, UNKNOWN, UNKNOWN, ""1616"", null, null, org.jsmpp.bean.RegisteredDelivery@1, 0, [63, 65,
    66, 0, 63, 127, 67, 63]):
    
    >SMPPSession.replaceShortMessage(isNull(), UNKNOWN, UNKNOWN, ""1616"", isNull(), isNull(), org.jsmpp.bean.RegisteredDelivery@1, 0, [-1, 65, 66, 0, -1
    , 127, 67, -1]): expected: 1, actual: 0
    
    >SmppSubmitMultiCommandTest.bodyWithGSM8bitDataCodingNotModified:336
      Unexpected method call SMPPSession.submitMultiple(""CMT"", UNKNOWN, UNKNOWN, ""1616"", [org.jsmpp.bean.Address@bac86b6d], org.jsmpp.bean.ESMClass@1, 0,
    1, null, null, org.jsmpp.bean.RegisteredDelivery@1, org.jsmpp.bean.ReplaceIfPresentFlag@1, DataCoding:247, 0, [63, 65, 66, 0, 63, 127, 67, 63]):
        SMPPSession.submitMultiple(""CMT"", UNKNOWN, UNKNOWN, ""1616"", [org.jsmpp.bean.Address@bac86b6d], org.jsmpp.bean.ESMClass@1, 0, 1, isNull(), isNull()
    , org.jsmpp.bean.RegisteredDelivery@1, org.jsmpp.bean.ReplaceIfPresentFlag@1, DataCoding:247, 0, [-1, 65, 66, 0, -1, 127, 67, -1]): expected: 1, actual: 0
    
    >SmppSubmitSmCommandTest.bodyWithGSM8bitDataCodingNotModified:540
      Unexpected method call SMPPSession.submitShortMessage(""CMT"", UNKNOWN, UNKNOWN, ""1616"", UNKNOWN, UNKNOWN, ""1717"", org.jsmpp.bean.ESMClass@1, 0, 1, nu
    ll, null, org.jsmpp.bean.RegisteredDelivery@1, 0, DataCoding:247, 0, [63, 65, 66, 0, 63, 127, 67, 63]):
        SMPPSession.submitShortMessage(""CMT"", UNKNOWN, UNKNOWN, ""1616"", UNKNOWN, UNKNOWN, ""1717"", org.jsmpp.bean.ESMClass@1, 0, 1, isNull(), isNull(), org
    .jsmpp.bean.RegisteredDelivery@1, 0, DataCoding:247, 0, [-1, 65, 66, 0, -1, 127, 67, -1]): expected: 1, actual: 0
    
    Any tips/help with thess would be greatly appreciated. :)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel smpp-update

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/909.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #909
    
----
commit 2782890ddc2dc878db81e3f22376b095ae78ac56
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2016-03-17T19:07:31Z

    CAMEL-8219: camel-smpp - use jsmpp version 2.2.3

----

githubbot:1464394113:2016-05-28T08:08:33.179+0000:1464394113:2016-05-28T08:08:33.179+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/909

githubbot:1464525941:2016-05-29T20:45:41.403+0000:1464525941:2016-05-29T20:45:41.403+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/1004

    CAMEL-8219: camel-smpp - use jsmpp version 2.2.4 or later

    Test changes were necessary because of two jsmpp changes: https://github.com/opentelecoms-org/jsmpp/commit/fcb495f09b97738796548069b2c60050be7892e3 and https://github.com/opentelecoms-org/jsmpp/commit/d50fbd7e9b76e292459858b26c1397e6d2c69c9e
    
    My osgi/service-mix is almost non-extant, so please forgive if I made a mistake.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel smpp-update-2-2-4

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1004.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1004
    
----
commit c40907c9b703622b67e33101d3d355af6b48764e
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2016-05-29T20:42:40Z

    CAMEL-8219: camel-smpp - use jsmpp version 2.2.4 or later

----

githubbot:1464561833:2016-05-30T06:43:53.164+0000:1464561833:2016-05-30T06:43:53.164+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1004
"
0,CAMEL-8218,Bug,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Willem Jiang,Willem Jiang,0,1,2015-01-08 02:59:16+00:00,2015-01-08 06:52:45+00:00,"""I'm trying out the REST DSL in 2.14.1 and I'm not able to get it to work 
with restlet within a servlet container.""
Here is the mail thread about it.",njiang:1420671165:2015-01-08T06:52:45.071+0000:1420671165:2015-01-08T06:52:45.071+0000:Applied the patch into camel master and camel-2.14.x branch.
0,CAMEL-8217,Bug,Minor,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Toni Fadjukoff,0,3,2015-01-07 23:34:53+00:00,2015-01-09 07:10:45+00:00,"Camel core's model fails to set the option typeHints to the data format implementation.


The data format implementation mixes up option values YES and WITH_PREFIX.","githubbot:1420645156:2015-01-07T23:39:16.316+0000:1420645156:2015-01-07T23:39:16.316+0000:GitHub user lamperi opened a pull request:

    https://github.com/apache/camel/pull/371

    CAMEL-8217: Fix typeHints option for camel-xmljson

    Fixed camel-core model to set the option on the data format. Changed the
    behaviour of YES and WITH_PREFIX to reflect documentation and naming.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lamperi/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/371.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #371
    
----
commit 4ce11c999c01e8b00eb577e5b17a96c2063b003a
Author: Toni Fadjukoff <lamperi@lamperi.name>
Date:   2015-01-07T23:36:54Z

    CAMEL-8217: Fix typeHints option for camel-xmljson
    
    Fixed camel-core model to set the option on the data format. Changed the
    behaviour of YES and WITH_PREFIX to reflect documentation and naming.

----

njiang:1420758574:2015-01-09T07:09:34.181+0000:1420758574:2015-01-09T07:09:34.181+0000:Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Toni.
githubbot:1420758645:2015-01-09T07:10:45.708+0000:1420758645:2015-01-09T07:10:45.708+0000:Github user lamperi closed the pull request at:

    https://github.com/apache/camel/pull/371
"
0,CAMEL-8216,Bug,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Jonathan Anstey,Jonathan Anstey,0,3,2015-01-07 18:45:17+00:00,2020-10-16 10:01:08+00:00,"Getting ""Missing/invalid parameter: startHistoryId"" when calling history list via camel-google-mail component. This is a required parameter.","janstey:1420627820:2015-01-07T18:50:20.295+0000:1420627820:2015-01-07T18:50:20.295+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/ebae9b51
krecco:1602813455:2020-10-16T09:57:35.622+0000:1602813455:2020-10-16T09:57:35.622+0000:Does this relate also to camel-quarkus-google-mail?

I am getting compile error using: .to(""google-mail:history/list?userId=me&....&startHistoryId=12322121"")

*There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{startHistoryId=6944817}]*

 

I also tried:

 

{{.setHeader(""startHistoryId"", constant(""12322121""))}}

{{.to(""google-mail:history/list?userId=me&...."")}}

{{Without success. }}

{{}}

{{Github issiue:}}

[https://github.com/apache/camel-quarkus/issues/1927]

 

Any help would be apriciated.

 

 
acosentino:1602813668:2020-10-16T10:01:08.162+0000:1602813668:2020-10-16T10:01:08.162+0000:Camel-quarkus project is based on Camel 3. This is a really old issue, so it is probably unrelated. We need to double check what is actually supported and what not."
0,CAMEL-8215,Task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Daniel Pocock,0,5,2015-01-07 15:39:54+00:00,2015-02-15 16:40:05+00:00,"A new jSMPP version is available


It is released under a new groupId org.jsmpp


Some of the ServiceMix enhancements are included and it is also released as a bundle.","githubbot:1420616776:2015-01-07T15:46:16.625+0000:1420616776:2015-01-07T15:46:16.625+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/369

    Begin conversion to jsmpp v2.2.1

    This is for CAMEL-8215 - it builds but some unit tests fail

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-jsmpp-update

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/369.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #369
    
----
commit adce7182b16bd461b04306ab31fcc0b735e08661
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2015-01-07T15:36:47Z

    Begin conversion to jsmpp v2.2.1

----

githubbot:1420633691:2015-01-07T20:28:11.359+0000:1420633691:2015-01-07T20:28:11.359+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/370

    camel-smpp: CAMEL-8215: update to org.jsmpp / jsmpp v2.1.1

    This uses 2.1.1 instead of jumping up to 2.2.0

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-jsmpp-update-v2.1.1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/370.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #370
    
----
commit d813f269add0be67f37abc7b3043eb418beaa874
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2015-01-07T20:26:58Z

    camel-smpp: CAMEL-8215: update to org.jsmpp / jsmpp v2.1.1

----

njiang:1420656069:2015-01-08T02:41:09.696+0000:1420656069:2015-01-08T02:41:09.696+0000:Hi Daniel,
I tried to merge you PR, but there is test error.
{code}
createBodyShouldNotMangle8bitDataCodingShortMessage(org.apache.camel.component.smpp.SmppMessageTest)  Time elapsed: 0.158 sec  <<< ERROR!
java.lang.ClassCastException: java.lang.String cannot be cast to [B
	at org.apache.camel.component.smpp.SmppMessageTest.createBodyShouldNotMangle8bitDataCodingShortMessage(SmppMessageTest.java:129)
{code}
It looks like your recent change of DataCoding cause some error here.
{code}
-                        DataCoding.newInstance(submitMulti.getDataCoding()),
+                        new RawDataCoding(submitMulti.getDataCoding()),
{code}
Can you take a look at it?
daniel.pocock:1420668719:2015-01-08T06:11:59.921+0000:1420668719:2015-01-08T06:11:59.921+0000:Can you please try my second pull request, https://github.com/apache/camel/pull/370 ?

The first pull request, #369, uses jSMPP v2.2.1 and I also observed issues with unit tests with that version.

The second pull request, #370, uses v2.1.1 and it doesn't appear to cause any issues with unit tests
njiang:1420671102:2015-01-08T06:51:42.872+0000:1420671102:2015-01-08T06:51:42.872+0000:Applied the PR 370.patch into camel master branch.
daniel.pocock:1420676293:2015-01-08T08:18:13.428+0000:1420676805:2015-01-08T08:26:45.966+0000:I've changed the title of this issue to refer explicitly to v2.1.1.  We can track v2.2.x as a separate JIRA issue.

I feel that this change, using 2.1.1, should be backported to Camel 2.14 and 2.13.

The jSMPP 2.1.x branch will only be used for minor bug fixes, security fixes, etc.  There won't be any API breaking changes in the 2.1.x branch.

The jSMPP 2.2.x release should probably not be backported to Camel 2.14 or earlier and maybe it won't even be ready for 2.15.


daniel.pocock:1420676721:2015-01-08T08:25:21.989+0000:1420676824:2015-01-08T08:27:04.013+0000:I've created the separate JIRA issue for jSMPP v2.2.1 here: https://issues.apache.org/jira/browse/CAMEL-8219
githubbot:1420760801:2015-01-09T07:46:41.334+0000:1420760801:2015-01-09T07:46:41.334+0000:Github user dpocock closed the pull request at:

    https://github.com/apache/camel/pull/370

davsclaus:1423961095:2015-02-15T08:44:55.700+0000:1423961095:2015-02-15T08:44:55.700+0000:What is the status of this?
daniel.pocock:1423988043:2015-02-15T16:14:03.863+0000:1423988043:2015-02-15T16:14:03.863+0000:From the Github comments it looks like it was merged into master.

I'd recommend cherry-picking this change to other supported releases (2.14.x, 2.13.x?) and then marking it as resolved by the next release in each branch."
0,CAMEL-8214,Bug,Major,2.14.1,None,"
None
",Resolved,Fixed,"2.14.2, 2.15.0",Jonathan Anstey,Jonathan Anstey,0,1,2015-01-07 13:47:58+00:00,2015-01-07 18:51:31+00:00,"Would be good to support partial responses in the Google API components:
https://developers.google.com/blogger/docs/3.0/performance#partial-response",janstey:1420627891:2015-01-07T18:51:31.158+0000:1420627891:2015-01-07T18:51:31.158+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/ecd9977c
0,CAMEL-8213,Bug,Trivial,2.14.1,"2.13.4, 2.14.2, 2.15.0","

nullpointerexception

",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Steffen Ryll,0,1,2015-01-07 09:31:00+00:00,2015-01-09 08:10:39+00:00,"The default constructor of UseOriginalAggregationStrategy sets the final field original to null.
In one corner case, the aggregate will dereference this null pointer, as no null-pointer check is made.



    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        if (propagateException) {
            Exception exception = checkException(oldExchange, newExchange);
            if (exception != null) {
                original.setException(exception);
            }
        }
        return original != null ? original : oldExchange;
    }




This potential NPE should be fixed, maybe a unit test be added.",
0,CAMEL-8212,Improvement,Minor,None,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Willem Jiang,Sergey Beryozkin,0,2,2015-01-07 09:12:16+00:00,2015-02-25 02:27:16+00:00,CXFRS Consumer often requires a no-op interface implementation provided. Having the interface alone should be enough.,"sergey_beryozkin:1420605507:2015-01-07T12:38:27.900+0000:1420605507:2015-01-07T12:38:27.900+0000:Patch is attached; 
At the moment it is a bit inconsistent that interfaces are supported when resource classes are registered as URI parameters but not when it is done from the cxfrs application beans
njiang:1421120172:2015-01-13T11:36:12.260+0000:1421120172:2015-01-13T11:36:12.260+0000:Applied the patch into camel master and camel-2.14.x branch with thanks to Sergey."
0,CAMEL-8211,New Feature,Minor,2.15.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Claus Ibsen,0,3,2015-01-07 08:28:58+00:00,2016-03-11 12:23:41+00:00,"A new camel-catalog-component-info command to display detailed information about the component.


We should show


component description
label(s)
maven coordinate
list of all its options and description for those


This allows users to use these commands in tooling to read the component documentation.


In the future we may slurp in any readme.md files we have in the components so we can do all component documentation in the source code and not use the confluence wiki which gets out of sync etc.","lb:1456893094:2016-03-02T12:31:34.057+0000:1456893094:2016-03-02T12:31:34.057+0000:I've played a little bit around this and I've created/amended the following classes:

- [CamelController|https://github.com/lburgazzoli/apache-camel/blob/d394fce4a6dc0be831bbdab0d256d9270aa0a8cc/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/CamelController.java]
- [AbstractCamelControlle|https://github.com/lburgazzoli/apache-camel/blob/d394fce4a6dc0be831bbdab0d256d9270aa0a8cc/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/AbstractCamelController.java]
- [CatalogComponentInfoCommand|https://github.com/lburgazzoli/apache-camel/blob/d394fce4a6dc0be831bbdab0d256d9270aa0a8cc/platforms/commands/commands-core/src/main/java/org/apache/camel/commands/CatalogComponentInfoCommand.java]

Running the command to get information about hdfs component it would produce:

{code}
HDFS :: For reading/writing from/to an HDFS filesystem using Hadoop 1.x.
------------------------------------------------------------------------

label: hadoop,file
maven: org.apache.camel/camel-hdfs/2.17-SNAPSHOT

componentProperties

Key                      Description
---                      -----------
jAASConfiguration        To use the given configuration for security with JAAS.

properties

Key                      Description
---                      -----------
hostName                 HDFS host to use
port                     HDFS port to use
path                     The directory path to use
blockSize                The size of the HDFS blocks
bufferSize               The buffer size used by HDFS
checkIdleInterval        How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is IDLE.
chunkSize                When reading a normal file this is split into chunks producing a message per chunk.
compressionCodec         The compression codec to use
compressionType          The compression type to use (is default not in use)
connectOnStartup         Whether to connect to the HDFS file system on starting the producer/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup and not block for up till 15 minutes.
fileSystemType           Set to LOCAL to not use HDFS but local java.io.File instead.
fileType                 The file type to use. For more details see Hadoop HDFS documentation about the various files types.
keyType                  The type for the key in case of sequence or map files.
openedSuffix             When a file is opened for reading/writing the file is renamed with this suffix to avoid to read it during the writing phase.
owner                    The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped.
readSuffix               Once the file has been read is renamed with this suffix to avoid to read it again.
replication              The HDFS replication factor
splitStrategy            In the current version of Hadoop opening a file in append mode is disabled since it's not very reliable. So for the moment it's only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:valueST:value... where ST can be: BYTES a new file is created and the old is closed when the number of written bytes is more than value MESSAGES a new file is created and the old is closed when the number of written messages is more than value IDLE a new file is created and the old is closed when no writing happened in the last value milliseconds
valueType                The type for the key in case of sequence or map files
bridgeErrorHandler       Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
delay                    The interval (milliseconds) between the directory scans.
initialDelay             For the consumer how much to wait (milliseconds) before to start scanning the directory.
pattern                  The pattern used for scanning the directory
sendEmptyMessageWhenIdle If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
exceptionHandler         To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
pollStrategy             A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
append                   Append to existing file. Notice that not all HDFS file systems support the append option.
overwrite                Whether to overwrite existing files with the same name
exchangePattern          Sets the default exchange pattern when creating an exchange
synchronous              Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
backoffErrorThreshold    The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
backoffIdleThreshold     The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
backoffMultiplier        To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
greedy                   If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
runLoggingLevel          The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
scheduledExecutorService Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
scheduler                To use a cron scheduler from either camel-spring or camel-quartz2 component
schedulerProperties      To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
startScheduler           Whether the scheduler should be auto started.
timeUnit                 Time unit for initialDelay and delay options.
useFixedDelay            Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
{code}

Is that what you'd expect ?

davsclaus:1457224725:2016-03-06T08:38:45.578+0000:1457224725:2016-03-06T08:38:45.578+0000:Yeah this is a great start.

We could add a --verbose option so you can show columns with: group and default value also. 
And a --filter to filter on the label, so you can do --filter consumer to only show consumer related options etc.


lb:1457413954:2016-03-08T13:12:34.150+0000:1457413954:2016-03-08T13:12:34.150+0000:
Now with verbose mode:

{code}
HDFS :: For reading/writing from/to an HDFS filesystem using Hadoop 1.x.
------------------------------------------------------------------------

label: hadoop,file
maven: org.apache.camel/camel-hdfs/2.17-SNAPSHOT

componentProperties

Property          Description                                           
--------          -----------                                           
jAASConfiguration To use the given configuration for security with JAAS.

properties

Property                 Group               Default Value Description

hostName                 common                            HDFS host to use
port                     common              8020          HDFS port to use
path                     common                            The directory path to use                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
blockSize                common              67108864      The size of the HDFS blocks
bufferSize               common              4096          The buffer size used by
checkIdleInterval        common              500           How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is
chunkSize                common              4096          When reading a normal file this is split into chunks producing a message per chunk
compressionCodec         common              DEFAULT       The compression codec to use                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
compressionType          common              NONE          The compression type to use (is default not in use
connectOnStartup         common              true          Whether to connect to the HDFS file system on starting the producer/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup and not block for up till 15 minutes
fileSystemType           common              HDFS          Set to LOCAL to not use HDFS but local java.io.File instead
fileType                 common              NORMAL_FILE   The file type to use. For more details see Hadoop HDFS documentation about the various files types
keyType                  common              NULL          The type for the key in case of sequence or map files
openedSuffix             common              opened        When a file is opened for reading/writing the file is renamed with this suffix to avoid to read it during the writing phase
owner                    common                            The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped
readSuffix               common              read          Once the file has been read is renamed with this suffix to avoid to read it again
replication              common              3             The HDFS replication factor
splitStrategy            common                            In the current version of Hadoop opening a file in append mode is disabled since it's not very reliable. So for the moment it's only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:valueST:value... where ST can be: BYTES a new file is created and the old is closed when the number of written bytes is more than value MESSAGES a new file is created and the old is closed when the number of written messages is more than value IDLE a new file is created and the old is closed when no writing happened in the last value milliseconds
valueType                common              BYTES         The type for the key in case of sequence or map files
bridgeErrorHandler       consumer            false         Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
delay                    consumer            1000          The interval (milliseconds) between the directory scans
initialDelay             consumer                          For the consumer how much to wait (milliseconds) before to start scanning the directory
pattern                  consumer            *             The pattern used for scanning the directory
sendEmptyMessageWhenIdle consumer            false         If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead
exceptionHandler         consumer (advanced)               To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored
pollStrategy             consumer (advanced)               A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel
append                   producer            false         Append to existing file. Notice that not all HDFS file systems support the append option
overwrite                producer            true          Whether to overwrite existing files with the same name
exchangePattern          advanced            InOnly        Sets the default exchange pattern when creating an exchange
synchronous              advanced            false         Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported
backoffErrorThreshold    scheduler                         The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in
backoffIdleThreshold     scheduler                         The number of subsequent idle polls that should happen before the backoffMultipler should kick-in
backoffMultiplier        scheduler                         To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured
greedy                   scheduler           false         If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages
runLoggingLevel          scheduler           TRACE         The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that
scheduledExecutorService scheduler                         Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool
scheduler                scheduler           none          To use a cron scheduler from either camel-spring or camel-quartz2 component
schedulerProperties      scheduler                         To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
startScheduler           scheduler           true          Whether the scheduler should be auto started
timeUnit                 scheduler           MILLISECONDS  Time unit for initialDelay and delay options
useFixedDelay            scheduler           true          Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details
{code}


With verbose and filter for label=consumer:

{code}
HDFS :: For reading/writing from/to an HDFS filesystem using Hadoop 1.x.
------------------------------------------------------------------------

label: hadoop,file
maven: org.apache.camel/camel-hdfs/2.17-SNAPSHOT

properties

Property                 Group               Default Value Description                                                                                                                                                                                                                                                                                                                                                                                                      
--------                 -----               ------------- -----------                                                                                                                                                                                                                                                                                                                                                                                                      
bridgeErrorHandler       consumer            false         Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
delay                    consumer            1000          The interval (milliseconds) between the directory scans.                                                                                                                                                                                                                                                                                                                                                         
initialDelay             consumer                          For the consumer how much to wait (milliseconds) before to start scanning the directory.                                                                                                                                                                                                                                                                                                                         
pattern                  consumer            *             The pattern used for scanning the directory                                                                                                                                                                                                                                                                                                                                                                      
sendEmptyMessageWhenIdle consumer            false         If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.                                                                                                                                                                                                                                                                                            
exceptionHandler         consumer (advanced)               To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.                                                                                                                                                                    
pollStrategy             consumer (advanced)               A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.                                                                                                                                                              
backoffErrorThreshold    scheduler                         The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.                                                                                                                                                                                                                                                                                      
backoffIdleThreshold     scheduler                         The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.                                                                                                                                                                                                                                                                                                               
backoffMultiplier        scheduler                         To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.                                                                      
greedy                   scheduler           false         If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.                                                                                                                                                                                                                                                                                    
runLoggingLevel          scheduler           TRACE         The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.                                                                                                                                                                                                                                                                                       
scheduledExecutorService scheduler                         Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.                                                                                                                                                                                                                                                                    
scheduler                scheduler           none          To use a cron scheduler from either camel-spring or camel-quartz2 component                                                                                                                                                                                                                                                                                                                                      
schedulerProperties      scheduler                         To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.                                                                                                                                                                                                                                                                                                   
startScheduler           scheduler           true          Whether the scheduler should be auto started.                                                                                                                                                                                                                                                                                                                                                                    
timeUnit                 scheduler           MILLISECONDS  Time unit for initialDelay and delay options.                                                                                                                                                                                                                                                                                                                                                                    
useFixedDelay            scheduler           true          Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.                                                                                                                                                                                                                                                                                                                  
{code}

davsclaus:1457654940:2016-03-11T08:09:00.223+0000:1457654940:2016-03-11T08:09:00.223+0000:Looks good. Wonder if you can push this PR so we can get it into the release?
lb:1457665459:2016-03-11T11:04:19.363+0000:1457665459:2016-03-11T11:04:19.363+0000:Done : https://github.com/apache/camel/pull/895
githubbot:1457665459:2016-03-11T11:04:19.545+0000:1457665459:2016-03-11T11:04:19.545+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/895

    CAMEL-8211 - Camel commands - camel-component-info

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-8211

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/895.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #895
    
----
commit 6a17c38d89ff6439ff44b837c4e0aae2feecbbb3
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-03-02T12:23:40Z

    CAMEL-8211 - Camel commands - camel-component-info

----

githubbot:1457670111:2016-03-11T12:21:51.355+0000:1457670111:2016-03-11T12:21:51.355+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/895
"
0,CAMEL-8210,Test,Major,2.15.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,2,2015-01-07 06:12:14+00:00,2015-01-07 06:36:42+00:00,"The CI server report this failure
https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-script/2111/testReport/junit/org.apache.camel.builder.script/JRubyScriptThreadSafeTest/testParallelLocalContext/


Which happens locally as well. I guess the test runs for a too short time to process all 200 messages. I get about 70-80 processed messages before it fails.


Also the test prints to system out which should use the logger instead.","njiang:1420583789:2015-01-07T06:36:29.561+0000:1420583789:2015-01-07T06:36:29.561+0000:It's my fault, I should not force the script builder to use the compiled script which could cause NPE error. 
I just committed a quick fix for it."
0,CAMEL-8209,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2015-01-07 02:42:19+00:00,2015-01-12 12:48:18+00:00,"added ""inputHeader"" parameter to use a header value as input to the component instead of the body


This way parameters don't need to be set as body before a query. In combination with ""outputHeader"" you can completely retain the body and don't even take it as a parameter.


Ultimately this reduces the boilderplate of ""setBody""/""setHeader"" statements even more.


Here is the PR for it.",
0,CAMEL-8208,Bug,Major,2.13.2,2.19.0,"
None
",Resolved,Later,2.19.0,Unassigned,Leo Wang,1,5,2015-01-06 11:07:43+00:00,2017-04-07 08:52:59+00:00,"My company is using ZooKeeperRoutePolicy to maintain a Master/Slaver cluster. Sometimes the cluster got network problem which make the app server disconnect from remote ZooKeeper server. The disconnection usually don't last long but still long enough to expire the zookeeper session of ZooKeeperRoutePolicy. By our observation, it seems ZooKeeperRoutePolicy would not recovery and do re-election after session expiration which lead to multiple master situation.
Is it possible to do enhancement or bug fixing on this?","njiang:1420523021:2015-01-06T13:43:41.031+0000:1420523021:2015-01-06T13:43:41.031+0000:If the reelection happens, the old leader should be switched to salve mode.
I just checked the code of ZooKeeperRoutePolicy, it just shutdown the consumer once the node switches from master mode to salve mode by default.
Can you double check if the old leader switched to the salve mode? 
lwang:1420570730:2015-01-07T02:58:50.675+0000:1420570730:2015-01-07T02:58:50.675+0000:Hi Willem,

The problem is ZooKeeperRoutePolicy do not re-elect the master for the route having expired session so it keeps considering itself master. However at the same time there is another route elected as master by ZooKeeper. As a result, we got two working master nodes.

njiang:1420579695:2015-01-07T05:28:15.442+0000:1420579695:2015-01-07T05:28:15.442+0000:I just checked the code of ZooKeeperRoutePolicy, it doesn't switch to the not master mode if the node is disconnected.
So I made a patch for it, can you verify it in your system?
{code}
diff --git a/components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperElection.java b/components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperElection.java
index 3fb3eb1..180b738 100644
--- a/components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperElection.java
+++ b/components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperElection.java
@@ -236,6 +236,10 @@ public class ZooKeeperElection {
                         LOG.debug(""This node is number '{}' on the candidate list, election is configured for the top '{}'. this node will be {}"",
                                 new Object[]{location, enabledCount, masterNode.get() ? ""enabled"" : ""disabled""}
                         );
+                    } else {
+                        // Cannot find the location from the candidate, we need to reset the masterNode state
+                        LOG.info(""This node {} is session expirated, so it is switch to slave mode."", candidateName);
+                        masterNode.set(false);
                     }
                     electionComplete.countDown();
{code}
lwang:1420587982:2015-01-07T07:46:22.066+0000:1420587982:2015-01-07T07:46:22.066+0000:I don't think this patch work for us because the internal ElectoralMonitorRoute is ""dead"" once session expired which means that It won't receive any Exchange message afterward. So you patched code was just not being reached.

Actually, we've done a fix by watching the Zookeeper client if SessionExpired event received, we reset the ZooKeeperElection so that it create a new ElectoralMonitorRoute and do election again next time when isMaster() is call.
{code:title=ZooKeeperElection.java}

...
    private ElectoralMonitorRoute electoralMonitorRoute;
...
    private ZooKeeperEndpoint createCandidateNode(CamelContext camelContext) {
        LOG.info(""Initializing ZookeeperElection with uri '{}'"", uri);
        ZooKeeperEndpoint zep = camelContext.getEndpoint(uri, ZooKeeperEndpoint.class);
        zep.getConfiguration().setCreate(true);
        zep.getConfiguration().setTimeout(SolviansBaseRoute.SESSION_EXPIRED_TIMEOUT);
        String fullpath = createFullPathToCandidate(zep);
        Exchange e = zep.createExchange();
        e.setPattern(ExchangePattern.InOut);
        e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_NODE, fullpath);
        e.getIn().setHeader(ZooKeeperMessage.ZOOKEEPER_CREATE_MODE, CreateMode.EPHEMERAL_SEQUENTIAL);
        producerTemplate.send(zep, e);

        if (e.isFailed()) {
            LOG.error(""Error setting up election node "" + fullpath, e.getException());
        } else {
            LOG.info(""Candidate node '{}' has been created"", fullpath);
            try {
                electoralMonitorRoute = new ElectoralMonitorRoute(zep);
                camelContext.addRoutes(electoralMonitorRoute);
            } catch (Exception ex) {
                LOG.error(""Error configuring ZookeeperElection"", ex);
            }
        }
        return zep;

    }
...
    public void reset() throws Exception {
        camelContext.removeEndpoints(uri);
        camelContext.removeComponent(""zookeeper"");
        camelContext.stopRoute(this.electoralMonitorRoute.getRouteCollection().getId());
        camelContext.removeRoute(this.electoralMonitorRoute.getRouteCollection().getId());
        producerTemplate.stop();
        this.isCandidateCreated = false;
        this.electionComplete = new CountDownLatch(1);
        producerTemplate = camelContext.createProducerTemplate();
    }
...
{code}
njiang:1420651230:2015-01-08T01:20:30.147+0000:1420651230:2015-01-08T01:20:30.147+0000:Hi Leo,

Thanks for sharing the solution with us.  I think it's enough to stop and remove the selection route, you don't need to remove the endpoint and create new producerTemplate. The missing part is how to listen the SessionExpired even and call the reset method.
Please feel free to submit a patch or a pull request, I'd happy to help you merge the patch into Apache Camel git repo.

Regards,

Willem
davsclaus:1427099881:2015-03-23T16:38:01.143+0000:1427099881:2015-03-23T16:38:01.143+0000:Any update on this?
davsclaus:1455932244:2016-02-20T09:37:24.984+0000:1455932244:2016-02-20T09:37:24.984+0000:This is a bag of half ugly code. We should try to use Curator API that has a nicer abstraction for leader election and watching.
davsclaus:1455932498:2016-02-20T09:41:38.739+0000:1455932498:2016-02-20T09:41:38.739+0000:And we can let the fabric8 team donate some of the code we did for master/slave for camel
https://github.com/jboss-fuse/fabric8/tree/1.2.0.redhat-6-3-x/fabric/fabric-camel/src/main/java/io/fabric8/camel


davsclaus:1473923563:2016-09-15T15:12:43.639+0000:1473923563:2016-09-15T15:12:43.639+0000:There is a few other camel-zookeeper tickets about the route policy stuff. We would like to rewrite it to use Curator API which is easier/better API for ZK.
beny23:1473978929:2016-09-16T06:35:29.744+0000:1473978971:2016-09-16T06:36:11.339+0000:Would a suitable workaround for this be to use something like:

{code}
        ZooKeeperRoutePolicy routePolicy = new ZooKeeperRoutePolicy(zookeeperUrl, 1);
        routePolicy.setShouldStopConsumer(false);

        from(""quartz2:run-test?cron=0/2+*+*+*+*+?"")
            .routePolicy(routePolicy) 
            .onException(IllegalStateException.class)
                .log(LoggingLevel.INFO, ""Not master"")
                .handled(true)
            .end()
            .log(LoggingLevel.INFO, ""I am master"");
{code}

?
davsclaus:1491526379:2017-04-07T08:52:59.003+0000:1491526379:2017-04-07T08:52:59.003+0000:There is a new zookeeper-master component that works better"
0,CAMEL-8207,Improvement,Major,2.14.1,,"
None
",Resolved,Abandoned,None,Unassigned,Daniel Pocock,0,2,2015-01-05 14:58:55+00:00,2022-09-02 08:55:44+00:00,"I've noticed that the producer is just creating one transmitter bind but the consumer appears to try and create multiple receiver binds.


I tried putting threads(1, 1) into the consumer route but it still appears to try and create multiple receiver binds.


There are many scenarios where somebody would only want to use a single receiver bind


Many providers limit the number of binds and the component creates a lot of noise in the log file when it can't create additional binds because the SMSC rejects the additional connections with negative response code 5.


I went looking for information about this and found the following related comments about threading issues in jSMPP:


https://issues.jboss.org/browse/MR-838","daniel.pocock:1423988531:2015-02-15T16:22:11.280+0000:1423988531:2015-02-15T16:22:11.280+0000:Of all the outstanding camel-smpp issues, this is probably one of the more serious ones that needs to be addressed
davsclaus:1461830043:2016-04-28T15:54:03.837+0000:1461830043:2016-04-28T15:54:03.837+0000:Can you look more into this. Do you see a bunch of logs with ""Trying to reconnect to .."". It seems the consumer has some logic to fork a thread to create a sesseion and re-connect if the connection was closed.

"
0,CAMEL-8206,Task,Minor,2.15.0,None,"

components
version

",Resolved,Fixed,2.15.0,Claus Ibsen,Andrea Cosentino,0,3,2015-01-05 10:40:45+00:00,2015-01-05 14:42:23+00:00,There is a new release of the chunk-templates library. We have to update from 2.6 to 2.6.3.,"githubbot:1420425705:2015-01-05T10:41:45.574+0000:1420425705:2015-01-05T10:41:45.574+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/367

    CAMEL-8206 Updated chunk-templates version from 2.6 to 2.6.3 release

    Hi all,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-8206
    
    Thanks,
    Bye.
    
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-chunk-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/367.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #367
    
----
commit 71cbd508291d1cde6ad0fecea940f8fb65c2da1b
Author: ancosen <ancosen@gmail.com>
Date:   2015-01-05T10:36:14Z

    Updated chunk-templates version from 2.6 to 2.6.3 release

----

davsclaus:1420433560:2015-01-05T12:52:40.352+0000:1420433560:2015-01-05T12:52:40.352+0000:Thanks for the PR
githubbot:1420440143:2015-01-05T14:42:23.742+0000:1420440143:2015-01-05T14:42:23.742+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/367
"
0,CAMEL-8205,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Sergey Beryozkin,0,2,2015-01-05 08:56:31+00:00,2015-01-18 03:37:38+00:00,No Desc,"sergey_beryozkin:1420605188:2015-01-07T12:33:08.966+0000:1420605230:2015-01-07T12:33:50.525+0000:This is actually interesting if a concrete service implementation is provided - in such cases it will be a method response that will be propagated down to the rest of the route and then ultimately returned to the remote client.
It will need to be optional and likely have to be done by customizing CxfRsInvoker
sergey_beryozkin:1420608579:2015-01-07T13:29:39.927+0000:1420608579:2015-01-07T13:29:39.927+0000:Hi Willem, happy to see you taking on it, I was just looking at the code, thinking that 
CxfRsInvoker.performInvocation() can delegate to the superclass if some property is set and only if it is Exchange.InOut and then just set out body on the Camel exchange and let the route continue as usual. I may be missing something else, you'd know best. This way the JAX-RS implementation would act as an implicit ""to(cxfbean:serviceBean)""

The rest of the route then can modify the response if needed and do something else with it. I guess a similar thing can be done by combining an existing cxfrs consumer with the cxfbean...
Thanks, Sergey  
njiang:1420611736:2015-01-07T14:22:16.492+0000:1420611736:2015-01-07T14:22:16.492+0000:Hi Sergey,

I think the way you just showed is workable, but the use case can be implemented by a camel cxfrs proxy route just like this.
{code}
  from(""cxfrs:endpoint1"").to(""cxfrs:endpoint2"").transform(xxx); 
{code}
or 
{code}
  from(""cxfrs:endpoint1"")..transform(xxx).to(""cxfrs:endpoint2"");
{code}
If we want to modify the response, we could also change the implementation directly. So I don't think it's a good idea to support user use the camel-cxfrs endpoint this way.
For ""to(cxfbean:serviceBean)"", it can leverage the camel component to provide some transports those CXF doesn't support, but I don't think people use it that way.



sergey_beryozkin:1420612423:2015-01-07T14:33:43.997+0000:1420612423:2015-01-07T14:33:43.997+0000:Hi Willem
you are probably right; 
As far as I understand the proxy route actually implies invoking on the remore endpoint (endpoint2), right ? 
I was thinking of an optional local service invocation - the service can already be implemented, so in such cases having users do custom processors may not be optimal; I'm still may be missing something though. Let me experiment a bit later with this option and report back; I might offer some patch for you to review.  Please keep this JIRA open for a bit longer, reassign to me in meantime if you prefer
Cheers, Sergey
  
sergey_beryozkin:1421036465:2015-01-12T12:21:05.082+0000:1421036465:2015-01-12T12:21:05.082+0000:Hi Willem
I have a test showing what I'd like to do, this test does not require any main code modifications. The use case is as follows. A JAX-RS service implementation exists, the response from this service needs to be processed by a Camel route and then returned back to the remote client. It is similar to a cxfbean example, where a Jetty endpoint is a consumer, cxfbean is a producer, except that in my test it is all done with a cxfrs only, no need to introduce another Camel component (camel-jetty). It is not a proxy example.

At this stage I'll be happy enough with only a test added so that we can possibly discuss further what can be optimized.

Can you give me a favor though and apply a patch to https://issues.apache.org/jira/browse/CAMEL-8212 first ? The test I've done is done on top of the patch I did for CXF-8212. A CXF-8212 patch is a safe patch that allows CXFRS Spring users avoid typing no-op JAX-RS impementations. 

Cheers, Sergey 
njiang:1421120317:2015-01-13T11:38:37.572+0000:1421120317:2015-01-13T11:38:37.572+0000:Hi Sergey,
I just merged the patch of CAMEL-8212 into Camel master and camel-2.14.x branches.
BTW, you can send a pull request from github if you want.

Regards,

Willem
sergey_beryozkin:1421122916:2015-01-13T12:21:56.623+0000:1421122916:2015-01-13T12:21:56.623+0000:Hi Willem, 
thanks for taking care of CAMEL-8212.
Let me do a test patch first, I can work with creating pull requests afterwards, no problems
Cheers, Sergey

sergey_beryozkin:1421125387:2015-01-13T13:03:07.293+0000:1421125387:2015-01-13T13:03:07.293+0000:Hi Willem

I'm thinking a bit more about it, may be this test should not go yet into the test source because it is very ineffective to do it this way. This is what I've tested:

{code:xml}
<cxf:rsServer id=""rsServer3"" address=""http://localhost:${CXFTestSupport.port1}/CxfRsSpringConsumerTest3/"">
    <cxf:serviceBeans>
       <ref bean=""customerServiceBean""/>
    </cxf:serviceBeans>
  </cxf:rsServer>
  
  
  <bean id=""customerServiceBean"" class=""org.apache.camel.component.cxf.jaxrs.testbean.CustomerService""/>
{code}
and then

{code:java}
protected RouteBuilder createRouteBuilder() throws Exception {
        
        final Processor baseUriProcessor = new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setHeader(""CamelHttpBaseUri"", ""/CxfRsSpringConsumerTest3"");
            }  
        };
        return new RouteBuilder() {
            public void configure() {
                from(""cxfrs://bean://rsServer3"").process(baseUriProcessor)
                    .to(""cxfbean:customerServiceBean"");
            }
        };
    }
{code}

This actually works right now, the problem is the CXF server chain is run twice. The existing example where a Jetty consumer delegates to a cxfbean is more effective.
I'm still considering to attach this test as part of a patch but for a different issue (a JAX-RS out interceptor can initiate a route to process a response). For this issue I'd like to have something like 

{code:java}
protected RouteBuilder createRouteBuilder() throws Exception {
        
        final Processor customerProcessor = new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().getBody(Customer.class).setId(999);
            }  
        };
        return new RouteBuilder() {
            public void configure() {
                from(""cxfrs://bean://rsServer3"").process(customerProcessor);
            }
        };
    }
{code}

but I'm not sure how viable it is; I'll experiment a bit later on
Thanks
njiang:1421126562:2015-01-13T13:22:42.422+0000:1421126562:2015-01-13T13:22:42.422+0000:Hi Sergey,

If I were you to change the response,  I would change the resource class method directly.

Regards,

Willem

sergey_beryozkin:1421127272:2015-01-13T13:34:32.400+0000:1421127272:2015-01-13T13:34:32.400+0000:Hi Willem. 
That is a good point, I just copied and pasted a test fragment, it would be a test only, to confirm that the response was routed to some Camel route.
I think an existing jetty consumer to cxfbean approach works well, it effectively does what this JIRA is really about, but as I said I'm curious if it can be marginally optimized directly with CXFRS alone...Let me update priority to Minor for now, I'll experiment later on...
Cheers, Sergey
sergey_beryozkin:1421224435:2015-01-14T16:33:55.594+0000:1421224435:2015-01-14T16:33:55.594+0000:Patch is on the way. Let me clarify again the use case.
A CXF user has implemented a JAX-RS service, example, a CustomerService which queries or updates some database. The task is to migrate this service into Camel. 
Wriiting a Camel Processor to check the operation names, etc (typical CXFRS processing) while a service implementation already exists is not really acceptable.

Camel offers one solution, from:jetty to cxfbean:bean, however it is a migration effort on its own compared to simply converting the existing CXF jaxrs:server configuration with JAX-RS providers, interceptors, properties, etc into a cxfrs: schema and avoiding introducing a new HTTP aware component (jetty, etc) into a context.

The service invocation will be optional and hence this enhancement is completely safe as far as the typical CXFRS flow users are concerned.
CXFRS users will be able to work with the request properties as usual in custom processors (example, also post a request body to some JMS topic, etc), while having a portable JAX-RS service in place. The response body would also be available to the custom processors.

Cheers, Sergey
sergey_beryozkin:1421304393:2015-01-15T14:46:33.077+0000:1421304393:2015-01-15T14:46:33.077+0000:Minor update to the patch: no need to create the out message early if the response is null.
Willem, can you please review ? IMHO it is a simple, safe, but very useful improvement for CXFRS users
Thanks 
njiang:1421523458:2015-01-18T03:37:38.716+0000:1421523458:2015-01-18T03:37:38.716+0000:Applied the patch into camel master branch with thanks to Sergey."
0,CAMEL-8204,Improvement,Minor,None,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Willem Jiang,0,2,2015-01-04 12:33:02+00:00,2015-01-12 05:31:55+00:00,It could help us to find out the reason of the thread block issue that the JmsProducer sends the request/reply message when there is duplicated correlationId.,"davsclaus:1420582552:2015-01-07T06:15:52.237+0000:1420582552:2015-01-07T06:15:52.237+0000:I wonder if we should not fail instead of logging a warning? If the end user provides a custom JMSCorrelationID that is already in use, then there is a duplicate error, and we should not send the message.

Its just that today nobody normally experience this situation as the out of the box generators makes unique ids. But if ppl use their own id generator they may do this wrong. And IMHO its better for Camel to detect this and fail sending the message which the end user can see asap. 



njiang:1420584426:2015-01-07T06:47:06.964+0000:1420584426:2015-01-07T06:47:06.964+0000:Yeah, we could throw an IllegalArgumentException at the same time, and the user could know the issue immediately and it won't block the thread which could wait for the response forever. 
njiang:1420759524:2015-01-09T07:25:24.092+0000:1420759524:2015-01-09T07:25:24.092+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
davsclaus:1420952775:2015-01-11T13:06:15.223+0000:1420952775:2015-01-11T13:06:15.223+0000:putIfAbsent was missing to be overriden in camel-jms. I am fixing this now.
njiang:1421000678:2015-01-12T02:24:38.410+0000:1421000678:2015-01-12T02:24:38.410+0000:Hi Claus,

Thanks for fixing the issue.

Regards,

Willem
davsclaus:1421011915:2015-01-12T05:31:55.634+0000:1421011915:2015-01-12T05:31:55.634+0000:I think we should add a JmsDuplicateCorrelationIdException to camel-jms that is being thrown which has a getter to get the correlationId. Then end users can deal with that kind of exception easier, instead of illegal argument exception."
0,CAMEL-8203,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,1,5,2015-01-02 16:22:41+00:00,2022-09-02 08:55:27+00:00,"This is a nice library for SQL
http://www.jdbi.org/


We could make a camel-jdbi component that uses this library. It can be similar to camel-sql.",
0,CAMEL-8202,Improvement,Minor,2.13.2,2.15.0,"

Logging
SSH

",Resolved,Fixed,2.15.0,Claus Ibsen,Richard O'Sullivan,0,4,2014-12-31 17:11:50+00:00,2016-05-25 08:14:13+00:00,"A previous issue, CAMEL-5242, ""Add support for pki based auth in camel-jsch"" defined the default location of the SSH known_hosts file to be...



DEFAULT_KNOWN_HOSTS = ""META-INF/.ssh/known_hosts"". 




But this causes excessive logging with the misleading message:



JSCH -> Permanently added 'X' (RSA) to the list of known hosts.




It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.


Although it is possible to configure the SFTP endpoint to specify the location of the common known_hosts file location, this must be added to every SFTP endpoint deployed to a Camel engine. For example, in a Spring XML/DSL the additional option is:



knownHostsFile={{user.home}}/.ssh/known_hosts




FIX: Change the default to be the "".ssh/known_hosts"" file in the user's home path. In ScpOperations.java, the declaration becomes...



private static final String DEFAULT_KNOWN_HOSTS;
static { DEFAULT_KNOWN_HOSTS = System.getProperty(""user.home"") + ""/.ssh/known_hosts""; }","davsclaus:1420582770:2015-01-07T06:19:30.255+0000:1420582770:2015-01-07T06:19:30.255+0000:A proper patch is welcome
raboof:1421393511:2015-01-16T15:31:51.407+0000:1421393511:2015-01-16T15:31:51.407+0000:Is the proposed solution the correct one, though? 

I'm not entirely sure I'd expect a Camel application to take into account ~/.ssh/known_hosts (unless I ask it to...)
davsclaus:1421464050:2015-01-17T11:07:30.769+0000:1421464050:2015-01-17T11:07:30.769+0000:Arnout, yeah I think it should be a new option you turn on, but being easier to enable as its just someName=true. Figuring out a good option name is harder though ;)
richaosu:1421483582:2015-01-17T16:33:02.868+0000:1421483582:2015-01-17T16:33:02.868+0000:Are you proposing something like this?

```
IF someName=true THEN
    DEFAULT_KNOWN_HOSTS = System.getProperty(""user.home"") + ""/.ssh/known_hosts"";
ELSE
    DEFAULT_KNOWN_HOSTS = ""META-INF/.ssh/known_hosts""
```

My interpretaion of the current default location is to write to a relative file system location in a folder named META-INF. Normally, META-INF is a read-only, classpath location (not a writable file system location, at runtime). In the proposal, would the current default be ELSE option? If so, the relative location would be the current working directory when the JVM started, right? That seems a bit arbitrary.

davsclaus:1423199925:2015-02-06T13:18:45.046+0000:1423199925:2015-02-06T13:18:45.046+0000:Yeah META-INF is not a good default. I would rather change this from Camel 2.15 onwards to use the user home as default, and people can change it using the knownHostFile option.

You are welcome to work on a patch
githubbot:1463938921:2016-05-23T01:42:01.062+0000:1463938921:2016-05-23T01:42:01.062+0000:GitHub user justinwrobel opened a pull request:

    https://github.com/apache/camel/pull/993

    camel-sftp: Permanently added 'X' (RSA) to the list of known hosts.

    This fixes the ""Permanently added 'X' (RSA) to the list of known hosts.""
    warning message by using the users home.
    
    This was fixed for ssh but not for sftp in CAMEL-8202
    
     * Updated sftp to use user's home .ssh/known_hosts file by default
     * 'Implemented' updateFileHeaders as log messages

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/justinwrobel/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/993.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #993
    
----
commit a11fc53c54e584e352c0d1d1c4c59e2a75260168
Author: Justin Wrobel <justin.wrobel@laureate.net>
Date:   2016-05-23T01:35:02Z

    camel-sftp: Permanently added 'X' (RSA) to the list of known hosts.
    
    This fixes the ""Permanently added 'X' (RSA) to the list of known hosts.""
    warning message by using the users home.
    
    This was fixed for ssh but not for sftp in CAMEL-8202
    
     * Updated sftp to use user's home .ssh/known_hosts file by default
     * 'Implemented' updateFileHeaders as log messages

----

githubbot:1464135253:2016-05-25T08:14:13.848+0000:1464135253:2016-05-25T08:14:13.848+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/993
"
0,CAMEL-8201,Bug,Major,"2.12.5, 2.13.3, 2.14.1",2.15.0,"
None
",Resolved,Fixed,2.15.0,Christian Müller,Christian Müller,0,2,2014-12-31 11:00:32+00:00,2015-02-28 11:31:42+00:00,"See http://camel.465427.n5.nabble.com/NPE-with-language-ruby-and-concurrentConsumers-td5759703.html for details.


By running git bisect, it reports the first bad commit was:


f66375e91e2755e956c1527752c255aa2d0f8c42 is the first bad commit
commit f66375e91e2755e956c1527752c255aa2d0f8c42
Author: Willem Jiang <ningjiang@apache.org>
Date:   Fri Jul 26 16:46:50 2013 +0800


 CAMEL-6559 fixed the script builder synchronized the operation of evaluateScript issue


:040000 040000 148db9cc9e521c7951be27c1416c7218880d10cf 5f55cbb6798f9a0f8477348708360a7a09a98f5e M	components","muellerc:1419994950:2014-12-31T11:02:30.001+0000:1419994950:2014-12-31T11:02:30.001+0000:The unit test I was using during the git bisect test.
muellerc:1420002712:2014-12-31T13:11:52.726+0000:1420002712:2014-12-31T13:11:52.726+0000:By updating the route as following:

{noformat}
        return new RouteBuilder() {
            public void configure() throws Exception {
                getContext().getProperties().put(Exchange.REUSE_SCRIPT_ENGINE, ""true"");
                getContext().getProperties().put(Exchange.COMPILE_SCRIPT, ""true"");

                from(""seda:jruby?concurrentConsumers=5"")
                    .to(""language:ruby:puts $request.body;result = $request.body?cacheScript=true"")
                    .to(resultEndpoint);
            }
        };
{noformat}

I could run the test without any errors with the same performance (1500ms). May this is the solution you are looking for.

However, I will have a look and check why it's not working if we don't cache the script...
njiang:1420007894:2014-12-31T14:38:14.642+0000:1420007894:2014-12-31T14:38:14.642+0000:Hi Christian,

If the cacheScript option is false (default setting), camel language just create a new scriptbuilder per exchange due to CAMEL-7143, as the scriptbuilder create a new script factory that could introduce the performance and concurrency issues. 

The patch of CAMEL-8188 addressed the issue of CAMEL-8201.

Regards,
Willem

muellerc:1420008330:2014-12-31T14:45:30.213+0000:1420008330:2014-12-31T14:45:30.213+0000:If we don't use ""cacheScript=true"", for each Exchange a new ""org.apache.camel.builder.script.ScriptBuilder"" with a new ""javax.script.ScriptEngine"" is created, even if we are using ""context.getProperties().put(Exchange.REUSE_SCRIPT_ENGINE, ""true"");""
This is very inefficient.
muellerc:1420009686:2014-12-31T15:08:06.817+0000:1420009686:2014-12-31T15:08:06.817+0000:And if we don't use ""getContext().getProperties().put(Exchange.REUSE_SCRIPT_ENGINE, ""true"")"" in the route mentioned before, we see exceptions like:
{noformat}
NoMethodError: undefined method `body' for nil:NilClass
  (root) at <script>:1
{noformat}

By using multiple JRuby ScriptEngines in a single JVM, we have to set the system property ""org.jruby.embed.localcontext.scope"" to ""threadsafe"" as mentioned here: https://kenai.com/projects/jruby-embed/pages/Home"
0,CAMEL-8200,Bug,Major,2.14.0,"2.13.4, 2.14.2, 2.15.0","

race-condition

",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Krzysztof Mackowiak,0,2,2014-12-30 13:58:45+00:00,2015-01-04 07:07:22+00:00,"In my team we have noticed that there is a race condition problem in JmsProducer class for request/response messaging. It causes that sometimes (nondeterministically) body of a response message is changed to null. It can happen when JMS response is received very fast (we use in-memory ActiveMQ with VM transport and no persistence) under heavy load.


It looks that there is a problem in JmsProducer class in processInOut(exchange, callback) method.



    protected boolean processInOut(final Exchange exchange, final AsyncCallback callback) {
        …
        doSend(true, destinationName, destination, messageCreator, messageSentCallback);
        // after sending then set the OUT message id to the JMSMessageID so its identical
        setMessageId(exchange);
        // continue routing asynchronously (reply will be processed async when its received)
        return false;
    }

...
    protected void setMessageId(Exchange exchange) {
        if (exchange.hasOut()) {
            JmsMessage out = exchange.getOut(JmsMessage.class);
            try {
                if (out != null && out.getJmsMessage() != null) {
                    out.setMessageId(out.getJmsMessage().getJMSMessageID());
                }
            } catch (JMSException e) {
                LOG.warn(""Unable to retrieve JMSMessageID from outgoing JMS Message and set it into Camel's MessageId"", e);
            }
        }
    }




The problem is caused by invoking setMessageId(...) method after doSend(...). Method doSend(...) is sending JMS request message and causes that another thread is used to handle JMS reply message. This leads to a situation that 2 different threads can operate on the same exchange (which is not synchronized at all) at the same time:
1) original thread in which processInOut(...) method was called,
2) separate thread from JMS component for handling JMS response.


In our case there it was happening sometimes that setMessageId(...) was invoked at the same time as PipelineHelper.createNextMessage(exchange) method:



    public static Exchange createNextExchange(Exchange previousExchange) {
        Exchange answer = previousExchange;
        // now lets set the input of the next exchange to the output of the
        // previous message if it is not null
        if (answer.hasOut()) {
            answer.setIn(answer.getOut());
            answer.setOut(null);
        }
        return answer;
    }




It caused that body of response message was lost (set to null).


It looks for me that calling setMessageId(...) at the end of processInOut(...) method is redundant and this logic should be executed when JMS reply message is handled.


I've attached a patch where invokation of setMessageId(...) is removed.
I've checked that it doesn't break any test for camel-jms component.","kmackowiak:1419919185:2014-12-30T13:59:45.836+0000:1419919185:2014-12-30T13:59:45.836+0000:Patch
njiang:1420313664:2015-01-04T03:34:24.799+0000:1420313664:2015-01-04T03:34:24.799+0000:Hi Krzysztof,

I just checked the code history, the code that you removed was introduced since CAMEL-1689, and I found the out message message id is set in the ReplyManagerSupport.processReply() method which relates to CAMEL-6218.

It should be safe to remove the code to avoid the race condition (if the response message comes later, the removed the code does nothing as the out message is not set yet.)


njiang:1420326442:2015-01-04T07:07:22.135+0000:1420326442:2015-01-04T07:07:22.135+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Krzystof."
0,CAMEL-8199,Bug,Major,2.14.0,,"
None
",Resolved,Duplicate,None,Unassigned,Krzysztof Mackowiak,0,2,2014-12-30 13:58:00+00:00,2014-12-31 07:15:26+00:00,"In my team we have noticed that there is a race condition problem in JmsProducer class for request/response messaging. It causes that sometimes (nondeterministically) body of a response message is changed to null. It can happen when JMS response is received very fast (we use in-memory ActiveMQ with VM transport and no persistence) under heavy load.


It looks that there is a problem in JmsProducer class in processInOut(exchange, callback) method.



    protected boolean processInOut(final Exchange exchange, final AsyncCallback callback) {
        …
        doSend(true, destinationName, destination, messageCreator, messageSentCallback);
        // after sending then set the OUT message id to the JMSMessageID so its identical
        setMessageId(exchange);
        // continue routing asynchronously (reply will be processed async when its received)
        return false;
    }

...
    protected void setMessageId(Exchange exchange) {
        if (exchange.hasOut()) {
            JmsMessage out = exchange.getOut(JmsMessage.class);
            try {
                if (out != null && out.getJmsMessage() != null) {
                    out.setMessageId(out.getJmsMessage().getJMSMessageID());
                }
            } catch (JMSException e) {
                LOG.warn(""Unable to retrieve JMSMessageID from outgoing JMS Message and set it into Camel's MessageId"", e);
            }
        }
    }




The problem is caused by invoking setMessageId(...) method after doSend(...). Method doSend(...) is sending JMS request message and causes that another thread is used to handle JMS reply message. This leads to a situation that 2 different threads can operate on the same exchange (which is not synchronized at all) at the same time:
1) original thread in which processInOut(...) method was called,
2) separate thread from JMS component for handling JMS response.


In our case there it was happening sometimes that setMessageId(...) was invoked at the same time as PipelineHelper.createNextMessage(exchange) method:



    public static Exchange createNextExchange(Exchange previousExchange) {
        Exchange answer = previousExchange;
        // now lets set the input of the next exchange to the output of the
        // previous message if it is not null
        if (answer.hasOut()) {
            answer.setIn(answer.getOut());
            answer.setOut(null);
        }
        return answer;
    }




It caused that body of response message was lost (set to null).


It looks for me that calling setMessageId(...) at the end of processInOut(...) method is redundant and this logic should be executed when JMS reply message is handled.


I've attached a patch where invokation of setMessageId(...) is removed.
I've checked that it doesn't break any test for camel-jms component.",davsclaus:1419981326:2014-12-31T07:15:26.036+0000:1419981326:2014-12-31T07:15:26.036+0000:Duplicate of CAMEL-8200
0,CAMEL-8198,Task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,3,2014-12-30 11:11:22+00:00,2016-03-08 12:16:52+00:00,"JAXB 2.2.7 has 2 additional JARS which was not needed such as the fastinfoset and whatnot.


We should upgrade to 2.2.11 which now is also osgi bundles out of the box. So we should upgrade in the karaf features xml file also.","davsclaus:1419911573:2014-12-30T11:52:53.353+0000:1419911573:2014-12-30T11:52:53.353+0000:Upgraded non OSGi at first.
davsclaus:1420582856:2015-01-07T06:20:56.681+0000:1420582856:2015-01-07T06:20:56.681+0000:Also upgraded osgi
njiang:1426447053:2015-03-16T03:17:33.699+0000:1426447053:2015-03-16T03:17:33.699+0000:jaxb-core and jaxb-impl exports the same packages which can cause some trouble if the user wants to install this two bundle at the same time.

Now I need to revert the change to fix the issue[1] that user complains.

[1]http://camel.465427.n5.nabble.com/camel-jaxb-2-15-0-and-Karaf-3-0-3-tp5764150.html 
ggrzybek:1457410612:2016-03-08T12:16:52.723+0000:1457410612:2016-03-08T12:16:52.723+0000:We could possibly upgrade to 2.2.11, but still use SMX version {{mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-xjc/2.2.11_1}}"
0,CAMEL-8197,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,4,2014-12-30 10:19:44+00:00,2015-02-11 07:55:44+00:00,"So we can include documentation out of the box in the XSD schema files, which allows end users to better work with Camel, as their IDE editors can show the documentation in the IDE.


To do this we need to


1)
Create a new Maven plugin at
https://github.com/apache/camel/tree/master/tooling/maven


which can be inspired by
https://github.com/apache/camel/tree/master/tooling/maven/camel-package-maven-plugin


2)
Run this plugin in camel-spring and camel-blueprint, so it can read the camel-spring.xsd, camel-blueprint.xsd file, and inject documentation.


3)
Parse the XSD maybe using SAX, and inject the documentation.


For each xs:element in the top of the schema file
http://camel.apache.org/schema/spring/camel-spring.xsd


Then use the name, eg (name=split)



<xs:element name=""split"" type=""tns:splitDefinition""/>




To find the split.json file in camel-core. Then the json file has the documentation for that type (including inherited types).


So for the split definition



<xs:complexType name=""splitDefinition"">
<xs:complexContent>
<xs:extension base=""tns:expressionNode"">
<xs:sequence/>
<xs:attribute name=""parallelProcessing"" type=""xs:boolean""/>
<xs:attribute name=""strategyRef"" type=""xs:string""/>
<xs:attribute name=""strategyMethodName"" type=""xs:string""/>
<xs:attribute name=""strategyMethodAllowNull"" type=""xs:boolean""/>
<xs:attribute name=""executorServiceRef"" type=""xs:string""/>
<xs:attribute name=""streaming"" type=""xs:boolean""/>
<xs:attribute name=""stopOnException"" type=""xs:boolean""/>
<xs:attribute name=""timeout"" type=""xs:long""/>
<xs:attribute name=""onPrepareRef"" type=""xs:string""/>
<xs:attribute name=""shareUnitOfWork"" type=""xs:boolean""/>
<xs:anyAttribute namespace=""##other"" processContents=""skip""/>
</xs:extension>
</xs:complexContent>
</xs:complexType>




We can find the description of these attributes, and elements from the json file.


For example for the streaming attribute we have



 ""streaming"": { ""kind"": ""attribute"": ""required"": ""false"", ""type"": ""boolean"", ""javaType"": ""java.lang.Boolean"", ""description"": ""The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property""




Then add the needed xs:annotation to document it. 
http://www.w3schools.com/schema/el_annotation.asp


Which should be



<xs:annotation>
  <xs:documentation xml:lang=""en"">
The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property  
  </xs:documentation>
</xs:annotation>




Notice that the xsd will become bigger due the verbosity of how to annotate xsd fields. 


Mind that sometimes there is not yet documentation, so check for not empty value.


To parse the json file, then use this class from camel-core



List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(""properties"", json, true);




Then you have a map with key/value for all those values.","nkukhar:1422833566:2015-02-02T07:32:46.089+0000:1422833566:2015-02-02T07:32:46.089+0000:Do you accept contribution on this task? It looks quite interesting, I can work on it.
njiang:1422835315:2015-02-02T08:01:55.482+0000:1422835315:2015-02-02T08:01:55.482+0000:Hi Nazarii,

I didn't have chance to start the work yet, if you can finish the work this week, I'm glade to merge the patch :)

Regards,

Willem
nkukhar:1422836882:2015-02-02T08:28:02.922+0000:1422837078:2015-02-02T08:31:18.377+0000:Cool, then I'll start working on it. I might not finish till end of this week, but in any case I'll share my progress with you.  
davsclaus:1422870598:2015-02-02T17:49:58.192+0000:1422870598:2015-02-02T17:49:58.192+0000:Sounds great with help here, as this one would be great to get done for Apache Camel. 

Having documentation directly in the XSD makes it easier for people to develop Camel apps.
davsclaus:1423009354:2015-02-04T08:22:34.630+0000:1423009354:2015-02-04T08:22:34.630+0000:To load the json schema files from camel-core, you can use url classloader, which we use in hawtio, see
https://github.com/hawtio/hawtio/blob/master/hawtio-json-schema-generator/hawtio-json-schema-generator-plugin/src/main/java/io/hawt/jsonschema/maven/plugin/CamelModelGeneratorMojo.java#L58

Though we use the camel-catalog JAR which is built at the end, but you need to use camel-core as camel-catalog isnt built until the end.

But as some the json schema files are in sub packages, you will need to try to find it similar to the following code
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L1325

eg using those sub packages if the input stream is null. Then you will eventually find the file.
davsclaus:1423009663:2015-02-04T08:27:43.288+0000:1423009663:2015-02-04T08:27:43.288+0000:An alternative to the above, is to do what this camel archetype does, it points to camel-core using relative directory.
https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java#L103

And then we just do a file scan for .json files in the model directories
https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java#L142

That should work as well. 

nkukhar:1423413791:2015-02-09T00:43:11.146+0000:1423413791:2015-02-09T00:43:11.146+0000:I almost finish this task, will prepare a patch today/tomorrow evening PST.
njiang:1423424322:2015-02-09T03:38:42.813+0000:1423424322:2015-02-09T03:38:42.813+0000:Cool, you can send pull request even you still want to polish the code :)
githubbot:1423439097:2015-02-09T07:44:57.284+0000:1423439097:2015-02-09T07:44:57.284+0000:GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/387

    [CAMEL-8197] Create Maven plugin to inject EIP documentation into the spring and blueprint XML DSL.

    This is the firs version of documentation enricher plugin. Currently it works preaty well and injects documentation to majority of XSD schema, but it still has room for improvements:
    1) It doesn't enrich documentation to base types. (i.e. if <xs:complexType> has some extension <xs:extension base=""tns:dataFormat""> then documentation for <> <xs:complexType name='dataFormat'> wont be added).
    2) It has no unit tests.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-8197

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/387.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #387
    
----
commit 8a11d3dbfe59068e65751de7fee0c0b1eac88d5f
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-02-09T07:19:06Z

    CAMEL-8197 Added maven plagin to inject EIP documentation into the spring and blueprint XML DSL.

commit 9632d88b5a1f9706febd31d3127604a43e55c1f0
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-02-09T07:20:51Z

    Minor refactoring

commit b5eb8c8caf94ce07120f82a53c54736ea0cd959b
Author: nkukhar <kukhar.n@gmail.com>
Date:   2015-02-09T07:21:45Z

    added missing files

----

davsclaus:1423526020:2015-02-10T07:53:40.806+0000:1423526020:2015-02-10T07:53:40.806+0000:[~nkukhar] this is great work.

Is there more work needed, or is it complete?
nkukhar:1423528666:2015-02-10T08:37:46.619+0000:1423528666:2015-02-10T08:37:46.619+0000:Hi Claus,
I would mark it as finished. Here is a result xsd by this plugin https://github.com/nkukhar/misk/blob/master/camel-blueprint.xsd.
There is one (which I can think of) corner case that it doesn't populate documentation for base types. But I would create a separate bug/feature ticket for this.
davsclaus:1423529523:2015-02-10T08:52:03.549+0000:1423529523:2015-02-10T08:52:03.549+0000:Yay that is great work.

I am working on merging your chances to the code.
You are welcome to log that separate ticket. 
davsclaus:1423533617:2015-02-10T10:00:17.285+0000:1423542883:2015-02-10T12:34:43.454+0000:There are two things left to do

- include doc for abstract/base types (such as SendDefinition) which are used by <to>
- the schema file in the JAR is the old schema, we should include the schema with the documentation *DONE*
githubbot:1423607947:2015-02-11T06:39:07.003+0000:1423607947:2015-02-11T06:39:07.003+0000:Github user nkukhar closed the pull request at:

    https://github.com/apache/camel/pull/387

nkukhar:1423610911:2015-02-11T07:28:31.315+0000:1423611403:2015-02-11T07:36:43.407+0000:I've logged followup ticket CAMEL-8334.
Also I just realized that I used different tab size, sorry for that, I will adjust my settings next time.
davsclaus:1423612544:2015-02-11T07:55:44.151+0000:1423612544:2015-02-11T07:55:44.151+0000:Thanks

Great you want to help with the last pieces."
0,CAMEL-8196,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,2,2014-12-30 10:06:34+00:00,2015-01-16 12:24:32+00:00,"Just like components we can now categorize all the EIPs (eg the model classes). 


You can see which eips have no labels, from


cd platform/catalog
mvn clean install","njiang:1421370471:2015-01-16T09:07:51.879+0000:1421370471:2015-01-16T09:07:51.879+0000:Applied the patch into master branch.
davsclaus:1421377069:2015-01-16T10:57:49.165+0000:1421377069:2015-01-16T10:57:49.165+0000:Thanks Willem, do you mind making EIP in lower-case, eg all labels are lower-case only.
njiang:1421382272:2015-01-16T12:24:32.413+0000:1421382272:2015-01-16T12:24:32.413+0000:OK, I will updated the label shortly."
0,CAMEL-8195,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-12-30 10:04:09+00:00,2015-01-21 11:03:55+00:00,No Desc,"davsclaus:1421386995:2015-01-16T13:43:15.364+0000:1421386995:2015-01-16T13:43:15.364+0000:If you run mvn clean install in platform/catalog, a report is generated that lists a WARN for each model classes that has missing javadoc.
davsclaus:1421643579:2015-01-19T12:59:39.458+0000:1421643579:2015-01-19T12:59:39.458+0000:TODO: allow to define javadoc for the eips that extends ExpressionNode as they include an expression for something, such as a delayer has an expression for  the delay time, and so on."
0,CAMEL-8194,Bug,Major,2.14.1,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Derek Abdine,0,4,2014-12-30 06:29:49+00:00,2015-05-29 03:14:00+00:00,"2014-12-29 22:25:12,667 | ERROR | FelixStartLevel  | BlueprintCamelContext            | 8 - org.apache.camel.camel-blueprint - 2.14.0 | Error occurred during starting Camel: CamelContext(elasticSearchProducerCamelContext) due Failed to create route log-event-sink-elasticsearch at: >>> Aggregate[true -> [To[log:xxx?level=INFO&groupInterval=2000], To[elasticsearch://elasticsearch?ip=127.0.0.1&port=9300]]] <<< in route: Route(log-event-sink-elasticsearch)[[From[vm:log-event-elast... because of Failed to resolve endpoint: elasticsearch://elasticsearch?ip=127.0.0.1&port=9300 due to: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
org.apache.camel.FailedToCreateRouteException: Failed to create route log-event-sink-elasticsearch at: >>> Aggregate[true -> [To[log:xxx?level=INFO&groupInterval=2000], To[elasticsearch://elasticsearch?ip=127.0.0.1&port=9300]]] <<< in route: Route(log-event-sink-elasticsearch)[[From[vm:log-event-elast... because of Failed to resolve endpoint: elasticsearch://elasticsearch?ip=127.0.0.1&port=9300 due to: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
   at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:945)
   at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:187)
...
Caused by: org.elasticsearch.env.FailedToResolveConfigException: Failed to resolve config path [names.txt], tried file path [names.txt], path file [xxx/config/names.txt], and classpath
   at org.elasticsearch.env.Environment.resolveConfig(Environment.java:213)
   at org.elasticsearch.node.internal.InternalSettingsPreparer.prepareSettings(InternalSettingsPreparer.java:119)
...




This can be fixed by adding a one-liner to explicitly set the classloader on the elasticsearch Settings class to the classloader of Settings.class:



            Settings settings = ImmutableSettings.settingsBuilder()
                ...
                .classLoader(Settings.class.getClassLoader());
                ...","davsclaus:1419981588:2014-12-31T07:19:48.086+0000:1419981588:2014-12-31T07:19:48.086+0000:Thanks for reporting. You are welcome to work on a patch.
githubbot:1420194343:2015-01-02T18:25:43.973+0000:1420194343:2015-01-02T18:25:43.973+0000:GitHub user dabdine-r7 opened a pull request:

    https://github.com/apache/camel/pull/365

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.15.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dabdine-r7/camel camel-8194-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/365.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #365
    
----
commit d38d76d7d91e68c73678f88c353ee65a43095361
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2015-01-02T18:01:11Z

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.15.x

----

githubbot:1420194483:2015-01-02T18:28:03.891+0000:1420194483:2015-01-02T18:28:03.891+0000:GitHub user dabdine-r7 opened a pull request:

    https://github.com/apache/camel/pull/366

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - backport to 2.14.x

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dabdine-r7/camel camel-8194-2.14.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/366.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #366
    
----
commit 543c7ee58e558ecf1e2d7f3fc82e8d5d7e11802e
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2015-01-02T18:26:11Z

    CAMEL-8194: Allow camel-elasticsearch to work in an OSGi environment - port to 2.14.x

----

slush:1420194645:2015-01-02T18:30:45.847+0000:1420194645:2015-01-02T18:30:45.847+0000:I've submitted two patches via github: one for 2.15.x (master) and one for 2.14.x. Thank you!
njiang:1420326289:2015-01-04T07:04:49.933+0000:1420326289:2015-01-04T07:04:49.933+0000:Merged the patch into master, camel-2.14.x and camel-2.13.x branches with thanks to Derek.
githubbot:1420885193:2015-01-10T18:19:53.764+0000:1420885193:2015-01-10T18:19:53.764+0000:Github user dabdine-r7 closed the pull request at:

    https://github.com/apache/camel/pull/365

githubbot:1420885419:2015-01-10T18:23:39.527+0000:1420885419:2015-01-10T18:23:39.527+0000:Github user dabdine-r7 closed the pull request at:

    https://github.com/apache/camel/pull/366
"
0,CAMEL-8163,Bug,Minor,2.14.0,"2.15.6, 2.16.3, 2.17.0","
None
",Resolved,Fixed,"2.15.6, 2.16.3, 2.17.0",Luca Burgazzoli,Christoph Läubrich,0,3,2014-12-18 12:46:27+00:00,2016-02-25 07:13:06+00:00,"When using STARTTLS with custom sslContextParameters it fails since the factory setup is only done for smtps/imaps/pops, same problem applies to the ""dummyTrustManager.","davsclaus:1423961245:2015-02-15T08:47:25.785+0000:1423961245:2015-02-15T08:47:25.785+0000:People is welcome to work on a patch
githubbot:1456287368:2016-02-24T12:16:08.706+0000:1456287368:2016-02-24T12:16:08.706+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/863

    CAMEL-8163 - socketFactory must also be set in MailConfiguration when STARTTLS is used

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-8163

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/863.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #863
    
----
commit fc0c886d6ca02274870538d53be9266bd4b94852
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-02-24T12:15:35Z

    CAMEL-8163 - socketFactory must also be set in MailConfiguration when STARTTLS is used

----

laeubi:1456292193:2016-02-24T13:36:33.009+0000:1456292193:2016-02-24T13:36:33.009+0000:Great to see progress on this issue keep up the good work (y)
githubbot:1456293019:2016-02-24T13:50:19.185+0000:1456293019:2016-02-24T13:50:19.185+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/863
"
0,CAMEL-8162,Improvement,Minor,2.14.0,Future,"
None
",Resolved,Resolved,Future,Onder Sezgin,Jimmy Selgen Nielsen,0,4,2014-12-18 11:46:02+00:00,2017-02-21 11:05:22+00:00,"When using camel-spring-ws with WS-Security and Wss4jSecurityInterceptor, camel-spring-ws removes the list of WSHandlerResult when it creates the exchange from the messageContext.


I'm trying to extract an X.509 certificate from the Soap header. Wss4jSecurityInterceptor removes the Security header when it successfully validates a message, and stores the information within the MessageContext in a List<WSHandlerResult>.


I currently get around this by overriding Wss4jSecurityInterceptor so that it no longer deletes the Security header, but the information is essentially lost when Camel takes over, and it should be corrected.","davsclaus:1419120188:2014-12-21T08:03:08.933+0000:1419120188:2014-12-21T08:03:08.933+0000:You are welcome to work on a patch for this
onders:1487139048:2017-02-15T14:10:48.079+0000:1487139048:2017-02-15T14:10:48.079+0000:this is not camel-spring-ws component issue. This is how you should implement using wss4j via webServiceTemplate(org.springframework.ws.client.core.WebServiceTemplate)
normally wss4j removes security headers when returning to client unless removeSecurityHeader is specified as false in the interceptor.
this should not be issue. i am going to set this issue as invalid after providing some unit tests. 
githubbot:1487568399:2017-02-20T13:26:39.358+0000:1487568399:2017-02-20T13:26:39.358+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1478

    CAMEL-8162 - UTs to invalidate the issue

    I used test server implementation as
    
    https://github.com/lukas-krecan/spring-ws-security-samples/tree/master/simple-server-test
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1478.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1478
    
----
commit 86cafbe067ff96889b77e7d13e9590d722efab9c
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-20T11:21:15Z

    test certificates created with the help of keytool

commit 35994f5bb6c6e7c7fb155faf359403eb1f1e2792
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-20T12:28:45Z

    CAMEL-8162- UT to invalidate the issue.

commit dbd916cfd23b62fab88d81d4f604969595f4f7bd
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-20T13:19:07Z

    CAMEL-8162 - UTs to invalidate the issue with cs fixes

commit 183cdf9d96e12d6971109924a9b9021cd9a62fb3
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-20T13:24:46Z

    CAMEL-8162 - UTs to invalidate the issue with cs fixes

----

githubbot:1487636921:2017-02-21T08:28:41.134+0000:1487636921:2017-02-21T08:28:41.134+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1478

onders:1487646322:2017-02-21T11:05:22.947+0000:1487646322:2017-02-21T11:05:22.947+0000:set to resolved as UT provided.
should be considered as invalid ticket."
0,CAMEL-8161,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-12-18 06:20:37+00:00,2014-12-23 14:22:43+00:00,"Currently there is only spring support out of the box
https://github.com/apache/camel/blob/master/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/spring/SpringRestSwaggerApiDeclarationServlet.scala


Though we could likely use jmx to lookup the Camel's and then grab the rest definition as xml, and marshal back to objects, which the scala swagger reader needs. Then it would work in any kind of environment.",
0,CAMEL-8160,Bug,Major,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Babak Vahdat,Andrew Celerity,0,1,2014-12-17 16:49:53+00:00,2014-12-21 13:10:26+00:00,"In Java 8 annotations are duplicated to generics' bridge methods.  Camel, rightly, does not support bridge methods as endpoints.  However, because of this change in the language annotations such as @Consume will end up on them after compilation leaving Camel in an invalid state.


I will attach a sample project.


This ticket is from this discussion thread: http://camel.465427.n5.nabble.com/Changes-in-Java-8-generics-breaking-Camel-td5760638.html","andrewcelerity:1418806446:2014-12-17T16:54:06.688+0000:1418806446:2014-12-17T16:54:06.688+0000:Sample maven project with spring boot, camel 2.14.0.  Executes successfully with JDK 7.  Fails on JDK 8.  Using maven to set the source/target version to 1.7 while using the 1.8 compiler also fails.

This was built on Mac OS Yosemite with JDK 1.8.0_25 from Oracle."
0,CAMEL-8159,Improvement,Minor,2.14.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-12-17 15:17:43+00:00,2014-12-17 16:43:18+00:00,When using some minor EIPs such as setHeader / setProperty then they are not enlisted as JMX MBeans which means we do not capture full details when they are part of routes.,davsclaus:1418802659:2014-12-17T15:50:59.539+0000:1418802659:2014-12-17T15:50:59.539+0000:There is a few others like removeHeader / and also for exchange properties. We should also get those enlisted in JMX so they all are.
0,CAMEL-8158,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.14.2, 2.15.0",Jonathan Anstey,Jonathan Anstey,0,1,2014-12-16 20:03:19+00:00,2014-12-16 20:06:32+00:00,No Desc,janstey:1418731592:2014-12-16T20:06:32.608+0000:1418731592:2014-12-16T20:06:32.608+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/52b7b945
0,CAMEL-8157,Bug,Major,None,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Claus Ibsen,0,2,2014-12-16 15:15:04+00:00,2014-12-18 07:21:14+00:00,"I suspect its due a recent bugfix for something about deleting temp files.


To reproduce then set <camelContext streamCache=""true""> in the camel-example-servlet-tomcat, and deploy the WAR to Tomcat and run it.


You get a NPE then



java.lang.NullPointerException
	at org.apache.camel.component.http.HttpMessage.getEndpoint(HttpMessage.java:73)
	at org.apache.camel.component.http.HttpMessage.createBody(HttpMessage.java:66)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:758)
	at org.apache.camel.processor.CamelInternalProcessor$StreamCachingAdvice.after(CamelInternalProcessor.java:728)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:240)
	at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:888)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:364)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.http.CamelServlet.service(CamelServlet.java:144)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:503)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:136)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:526)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1078)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:655)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:744)","njiang:1418855236:2014-12-18T06:27:16.306+0000:1418855236:2014-12-18T06:27:16.306+0000:It was caused by the recent fix of CAMEL-8086, i just updated the CamelInternalProcessor to reset the out message body if the exchange has the out message.
njiang:1418858474:2014-12-18T07:21:14.410+0000:1418858474:2014-12-18T07:21:14.410+0000:Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8156,Bug,Major,"2.13.3, 2.14.1","2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-12-16 13:02:17+00:00,2015-10-20 13:42:42+00:00,"When using camel-aws-sns endpoint, it always create the topic on the default endpoint.


Here is the mailing thread about it","njiang:1418763725:2014-12-17T05:02:05.305+0000:1418763725:2014-12-17T05:02:05.305+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8155,Improvement,Major,2.14.1,"2.14.2, 2.15.0","
None
",Resolved,Not A Problem,"2.14.2, 2.15.0",Claus Ibsen,Claus Ibsen,1,1,2014-12-16 06:02:47+00:00,2014-12-21 15:17:04+00:00,"See nabble
http://camel.465427.n5.nabble.com/REST-DSL-Exception-Handling-tp5760600.html


We should add support for this option, so people can use Camel routes to deal with invalid input data.","davsclaus:1419145894:2014-12-21T15:11:34.826+0000:1419145894:2014-12-21T15:11:34.826+0000:I added an unit test to show how to catch the parser exception and return a custom message
https://github.com/apache/camel/commit/4dfdc84147da4c78e65e8b5a0f58117b26e9e782"
0,CAMEL-8154,Improvement,Major,2.14.0,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Mark Ford,1,3,2014-12-15 17:51:08+00:00,2014-12-17 06:22:33+00:00,"There is a hard coded timeout of 5 minutes for suspended exchanges. This is reasonable for most cases but what if a user needs more time? I could imagine it being really annoying if my IDE resumed my Java breakpoints after 5 minutes automatically.


A simple getter/setter on the fallbackTimeout value would be nice.","njiang:1418764403:2014-12-17T05:13:23.106+0000:1418764403:2014-12-17T05:13:23.106+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
davsclaus:1418768553:2014-12-17T06:22:33.764+0000:1418768553:2014-12-17T06:22:33.764+0000:The option also needs to be exposed as an read/write attribute on the mbean."
0,CAMEL-8153,Bug,Minor,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Konstantin V. Salikhov,0,1,2014-12-15 10:34:12+00:00,2014-12-17 07:06:12+00:00,"When using camel-jdbc component with newly introduced StreamList mode I've faced a 100% reproducible connection leak issue.


My investigation leads me to Tomcat connection pool implementation - it has problem with returing current connection from Statement object - instead of returning pool specific proxy it returns actual JDBC connection.


There is `statement.getConnection()` line in `org.apache.camel.component.jdbc.ResultSetIterator` so in my particular scenario things work like this:
1) Camel borrows connection from Tomcat pool
2) Camel leaves JDBC connection and ResultSet intact as we use StreamList mode of camel-jdbc component
3) Route processes resultset in streaming mode and completes successfully
4) Camel tries to close connection, but due to connection pool implementation issue it closes actual JDBC connection instead of returing it to the pool
5) Actual JDBC connection is closed an connection pool is unaware of this fact thinking it's still open and in use by application


It would be more error prone to pass proper connection object to ResultSetIterator along with result set and not rely on statement.getConnection() call.","k.salikhov:1418610883:2014-12-15T10:34:43.142+0000:1418610883:2014-12-15T10:34:43.142+0000:Possible fix patch
davsclaus:1418771172:2014-12-17T07:06:12.251+0000:1418771172:2014-12-17T07:06:12.251+0000:Thanks for the detailed report and the patch."
0,CAMEL-8152,Improvement,Major,2.14.0,None,"

camel-salesforce

",Closed,Fixed,"2.13.4, 2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-12-13 18:18:02+00:00,2014-12-14 00:05:21+00:00,Salesforce has added a new enumeration value EXTENDED to NotifyOperationsEnum for Push topics.,"dhirajsb:1418466973:2014-12-13T18:36:13.256+0000:1418466973:2014-12-13T18:36:13.256+0000:Changes pushed to master, camel-2.14.x and camel-2.13.x"
0,CAMEL-8151,Improvement,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Derek Abdine,1,4,2014-12-12 19:01:58+00:00,2019-07-28 08:41:23+00:00,"The camel-elasticsearch client does not support a customizable TransportClient. It currently configures the client with hard-coded values when the endpoint is created.


This is problematic when fine-grain control over client creation is required. Also, this causes issues for the health of the camel build, as the current unit tests use a local client as a result which will spin up a full elasticsearch server during the build instead of relying on a mock object for the tests.","batwad:1420517418:2015-01-06T12:10:18.424+0000:1420517418:2015-01-06T12:10:18.424+0000:I agree; the client configuration options are very limited.  Another problem I have run in to with the TransportClient is that you can only specify one IP address, so there is no resiliency when that node goes down.  I'd like to be able to configure a list of hosts, or use the sniffing feature of the client so that it can discover the rest of the cluster automatically.
davsclaus:1564274483:2019-07-28T08:41:23.154+0000:1564274483:2019-07-28T08:41:23.154+0000:This old component is removed in favour of a rest based ES component"
0,CAMEL-8150,Task,Major,2.14.0,"2.14.2, 2.15.0","
None
",Closed,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Josef Ludvíček,0,2,2014-12-12 15:08:33+00:00,2014-12-17 16:45:20+00:00,"When hdfs consumer picks orinary file, it sends message per data chunk. 
Not message per file as one could expect.
In the docs it is mentioned only in option description, which can be overlooked very easily.
It should be explicitly written in the beginning of the component doc page .


Option description from docs





chunkSize 
 4096 
 When reading a normal file, this is split into chunks producing a message per chunk. 





Sample camel route (workaround could be to add ?fileExist=Append to file component)



 <camel:route id=""toFile"">
            <from uri=""hdfs2:localhost:8020/tmp/camel-test/""/>
            <log message=""picked up file from hdfs with name $simple{header.CamelFileName}""/>
            <to uri=""file:test-dest""/>
            <log message=""file downloaded from hadoop""/>
</camel:route>","ludvicekj:1418368463:2014-12-12T15:14:23.947+0000:1418368463:2014-12-12T15:14:23.947+0000:Based on comments in CAMEL-8040.
davsclaus:1418771435:2014-12-17T07:10:35.750+0000:1418771435:2014-12-17T07:10:35.750+0000:I added a note to the documentation about this."
0,CAMEL-8149,Improvement,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Derek Abdine,0,3,2014-12-12 02:04:12+00:00,2014-12-23 16:52:44+00:00,"Elasticsearch (via the elasticsearch-java transport client) provides two categories of APIs to write and read data: Individual requests (index, get, delete) and bulk requests.


When performing bulk updates one creates individual index requests and adds them to the bulk request. When creating an index request one can set the source document, id, etc. 


The current design of the camel-elasticsearch component controls the transformation and assembly of an input body (json string, byte[], xcontentfactory, map) to an index request. Thus, it is impossible to set the id on the index request that goes into a bulk action. The end result is that the id is set by the default behavior of the underlying elasticsearch-java client which generates a random identifier.  This is problematic in situations where control is needed over the id, e.g. for de-duplication purposes.


My proposal is to improve the design of the producer to allow for elasticsearch-java ActionRequest sub-classes in the message body so that upstream message processors can control the creation of those requests.


I've attached a patch and sent a pull request on github.


Thank you!
Derek Abdine","githubbot:1418321764:2014-12-12T02:16:04.544+0000:1418321764:2014-12-12T02:16:04.544+0000:GitHub user dabdine-r7 opened a pull request:

    https://github.com/apache/camel/pull/356

    CAMEL-8149: Better support for application-generated identifiers in bulk requests

    https://issues.apache.org/jira/browse/CAMEL-8149
    
    This design change allows upstream message processors to provide elasticsearch-java ActionRequest subclasses in the message body for more fine-grain control over the data that is sent to the es endpoint.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dabdine-r7/camel camel-2.15.0-elasticsearch-bulk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/356.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #356
    
----
commit c6eb87c30a875d96330330d8894b2a686128bf73
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2014-12-12T01:12:03Z

    Enhance elasticsearch producer to support elasticsearch-java ActionRequest object type bodies

commit 46a9fa4ee22cfe6e4d7d922ee69b98e8ca4c7b64
Author: Derek Abdine <dabdine@rapid7.com>
Date:   2014-12-12T01:38:50Z

    Add unit tests

----

davsclaus:1419300479:2014-12-23T10:07:59.300+0000:1419300479:2014-12-23T10:07:59.300+0000:Thanks for the PR.
githubbot:1419324764:2014-12-23T16:52:44.530+0000:1419324764:2014-12-23T16:52:44.530+0000:Github user dabdine-r7 closed the pull request at:

    https://github.com/apache/camel/pull/356
"
0,CAMEL-8148,Bug,Minor,"2.14.0, 2.15.0",None,"

camel-box
oauth2

",Resolved,Fixed,"2.14.2, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-12-11 23:42:07+00:00,2014-12-12 00:09:53+00:00,There is a possible NPE that can happen on exceptions during the initial OAuth flow in Camel Box component. This is due to a listener attribute in LoginAuthFlowUI which is never set by Box.com SDK.,"dhirajsb:1418313618:2014-12-12T00:00:18.968+0000:1418313618:2014-12-12T00:00:18.968+0000:Also, box java SDK version can now be upgraded to 3.1.7, which fixes a previous issue with updating collaborations. 
dhirajsb:1418314193:2014-12-12T00:09:53.548+0000:1418314193:2014-12-12T00:09:53.548+0000:Fixed with commit https://github.com/apache/camel/commit/646e7106ee24b511b48b9d7258c30b99f5d7b7fc on branches camel-2.14.x and master"
0,CAMEL-8147,Improvement,Minor,2.14.0,2.16.0,"
None
",Resolved,Duplicate,2.16.0,Claus Ibsen,Aaron Whiteside,0,2,2014-12-11 19:52:26+00:00,2015-08-11 10:54:36+00:00,"Using @ManagedResource on an Endpoint removes all the default JMX properties. 


For example:
Camel: camelContext
Camel management name: camelContext
Endpoint uri: xxxxxxxxxxxx
Object Name: xxxxxxxxxx
Singleton: true
State: Started


Are present by default for all endpoints, as soon as you have a custom endpoint annotated with @ManagedResource these defaults are no longer present.",davsclaus:1439261653:2015-08-11T10:54:13.527+0000:1439261653:2015-08-11T10:54:13.527+0000:Duplicate of CAMEL-8147
0,CAMEL-8146,Bug,Minor,2.14.0,"2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Bjørn Ellingsen,0,2,2014-12-11 13:14:54+00:00,2014-12-18 12:21:48+00:00,"Seems to be identical consequence as with previous issue CAMEL-5677, but perhaps due to a different cause.


Having a file or SFTP based route, trying something like:



for (int i = 0; i < 50; i++) {
    camelContext.startRoute(routeId);
    camelContext.stopRoute(routeId);
}




results in 50 orphan threads of this type:



""Camel (camel) thread #231 - sftp://user@host/path"" #10170 daemon prio=5 os_prio=0 tid=0x00007fa4b46a5800 nid=0x10fc waiting on condition [0x00007fa452934000]
   java.lang.Thread.State: TIMED_WAITING (parking)
      at sun.misc.Unsafe.park(Native Method)
      - parking to wait for  <0x00000000b83dc900> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
      at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
      at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
      at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
      at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
      at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
      at java.lang.Thread.run(Thread.java:745)




Switching to suspend/resume solves the problem, however I guess the start/stop issue should be addressed.",davsclaus:1418876508:2014-12-18T12:21:48.872+0000:1418876508:2014-12-18T12:21:48.872+0000:Thanks for reporting.
0,CAMEL-8145,Improvement,Major,None,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-12-11 12:27:45+00:00,2014-12-17 07:11:57+00:00,Mina should send the message back if the user just set the in message body.,
0,CAMEL-8144,Task,Major,"2.14.0, 2.14.1","2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.14.2, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-11 11:17:24+00:00,2014-12-11 11:19:00+00:00,"See
http://camel.465427.n5.nabble.com/Delayed-request-processing-with-Camel-Restlet-2-14-0-tp5759915.html


And github ticket
https://github.com/restlet/restlet-framework-java/issues/996


Adding support for using synchronous=true to use the sync client handler of theirs which worked with better performance in Camel 2.13.x or older.",davsclaus:1418267940:2014-12-11T11:19:00.167+0000:1418267940:2014-12-11T11:19:00.167+0000:Okay added synchronous=true as a workaround. 
0,CAMEL-8143,Improvement,Minor,2.14.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Aaron Whiteside,0,1,2014-12-11 02:33:01+00:00,2019-07-31 08:55:40+00:00,"MulticastProcessorDefinition should allow one to specify the default aggregation strategy (or behavior) of AggregationStrategies.useOriginal() without having to create a bean instance of it and reference it using strategyRef="""".


The wiki page could also be updated to clarify that it does indeed modify the original exchange (request message), in the way of returning the result of the last processor inside the multicast block.. as opposed to passing a copy of the original to each processor in the multicast block.


From the WIKI page:



The Multicast allows to route the same message to a number of endpoints and process them in a different way. The main difference between the Multicast and Splitter is that Splitter will split the message into several pieces but the Multicast will not modify the request message.",
0,CAMEL-8142,New Feature,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Daniel Pocock,0,3,2014-12-10 15:21:27+00:00,2015-01-07 02:48:11+00:00,"The SQL component stores query results in the message body, clobbering the existing body.  It would be nice to store the results of some queries in a header.


This would be particularly useful when combined with outputType=SelectOne to store a value such as a primary key / object ID into a header.","githubbot:1418196301:2014-12-10T15:25:01.120+0000:1418196301:2014-12-10T15:25:01.120+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/355

    camel-sql: add outputHeader parameter (CAMEL-8142)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-sql-outputheader

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/355.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #355
    
----
commit 68b31e2116f27a40c7e96b4e11164a79ba9055df
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-12-10T15:24:15Z

    camel-sql: add outputHeader parameter (CAMEL-8142)

----

davsclaus:1418682995:2014-12-16T06:36:35.448+0000:1418682995:2014-12-16T06:36:35.448+0000:In EIP terms then you would use the content enricher, to enrich the result into a header.

Though I guess this requires more configuration in Camel. Though maybe we could have an out of the box shorthand syntax for this?

But lets add this patch as its more common to do some SQL and store the result in a header.
davsclaus:1418683323:2014-12-16T06:42:03.565+0000:1418683323:2014-12-16T06:42:03.565+0000:Thanks for the PR
daniel.pocock:1418683612:2014-12-16T06:46:52.074+0000:1418683612:2014-12-16T06:46:52.074+0000:When you mention the enricher pattern, do you mean writing a Processor class to run an SQL query and the result in a header?

What I was really aiming for with this parameter was a way to get things like querying the next value of a sequence or looking up a primary/foreign key ID with just one line in the route.

githubbot:1418687213:2014-12-16T07:46:53.970+0000:1418687213:2014-12-16T07:46:53.970+0000:Github user dpocock closed the pull request at:

    https://github.com/apache/camel/pull/355

davsclaus:1418689794:2014-12-16T08:29:54.495+0000:1418689794:2014-12-16T08:29:54.495+0000:enricher eip is a general solution that works with all components. But as you say it would require a bit more configuration and currently need to setup an aggregation strategty to only merge the result to a header.

Though in a future Camel release we could look into making that use-case easier."
0,CAMEL-8141,Improvement,Major,2.14.0,Future,"
None
",Resolved,Fixed,Future,Claus Ibsen,Roger Nordquist,2,2,2014-12-10 15:00:38+00:00,2015-07-09 11:16:55+00:00,"Camel-Aws uses deprecated classes for DynamoDb integration which makes it impossible to update Aws-SDK to 1.9x
This is a change that probably affects the backwards compatibility but at the same time very important for users of camel and aws to adopt new features from Amazon since the pace they arrive in is very fast.","davsclaus:1419148097:2014-12-21T15:48:17.825+0000:1419148097:2014-12-21T15:48:17.825+0000:Yeah unfortunately that is a bit of work to migrate all this, and make sure the api changes for keys which has changed fairly much.

Any takers want to help who have a aws setup and uses dynamoDB so you can test the changes and provide a patch to upgrade.
davsclaus:1436411815:2015-07-09T11:16:55.689+0000:1436411815:2015-07-09T11:16:55.689+0000:We have upgraded"
0,CAMEL-8140,Sub-task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-12-10 13:17:14+00:00,2014-12-10 13:33:14+00:00,"They are not very useable from a cli, and they are currently too tied to a local jvm.",
0,CAMEL-8139,Improvement,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-09 19:24:06+00:00,2014-12-10 07:13:26+00:00,"We should allow prefixing the keys with



xml.in.
xml.out.
json.in.
json.out.



To denote that the configuration is only for that case. A key without any of these prefixes is a common key.",
0,CAMEL-8138,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-09 18:33:45+00:00,2014-12-09 18:40:06+00:00,"For example if the content is already in XML and you use jaxb then it fails, as it requires the message body is a JAXBElement class (eg has those annotations etc.).


We should add option so you can relax this and marshal the content as-is, such as if its already in XML from a String etc.",
0,CAMEL-8137,Bug,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,John Mark,0,2,2014-12-09 17:30:54+00:00,2015-03-16 09:24:44+00:00,"I am having an issue with the Simple language. I have a property named myFile with a value of a java.nio.file.Path object. When I try to use the following expression 



 ${property.file.getFileName} 



 in order to invoke the getFileName() method I get an exception saying:



Ambiguous method invocations possible: [public sun.nio.fs.UnixPath.getFileName(), public abstract java.nio.file.Path java.nio.file.Path.getFileName()]




I am able to use SpEL if I do



#{properties[myFile].getFileName()}




It would be nice if Simple supported this as well so I wouldn't have to go through hoops in order to use SpEL since I can't use SpEL to specify parameters in a uri.","davsclaus:1418172310:2014-12-10T08:45:10.819+0000:1418172310:2014-12-10T08:45:10.819+0000:Yeah the override method check was too stringent, checking that the types must be same. But we should relax that and check for type isAssignableFrom which is the situation with the java nio Path, where as getFileName is from the interface using the Path api, and the impl class uses the unix class types.
davsclaus:1418184286:2014-12-10T12:04:46.772+0000:1418184286:2014-12-10T12:04:46.772+0000:This fix needs a bit more changes to BeanInfo in camel-core that I would like to introduce in a patch fix, so moving this to 2.15 release. "
0,CAMEL-8136,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-09 16:05:02+00:00,2014-12-09 19:20:14+00:00,"You may want to marshal to a type as IN, but for OUT you want to use the message body as-is, as its already in XML format, eg a String or something.


Currently because JAXB was used for IN, rest-dsl wants to use JAXB for OUT as well.


See nabble
http://camel.465427.n5.nabble.com/Rest-DSL-IN-OUT-types-tp5760404.html","davsclaus:1418121631:2014-12-09T18:40:31.829+0000:1418121631:2014-12-09T18:40:31.829+0000:This requires CAMEL-8138 which allows the jaxb marshaller to be relaxed
davsclaus:1418123229:2014-12-09T19:07:09.573+0000:1418123229:2014-12-09T19:07:09.573+0000:To support this, then set the data format property mustBeJAXBElement to false"
0,CAMEL-8135,Bug,Major,2.13.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,metatech,0,2,2014-12-09 09:01:18+00:00,2014-12-09 10:22:32+00:00,"When a route is defined with both a ""errorHandlerRef"" and a failover load balancer, the DeadLetterChannel considers the message as failed and moves it to the Dead Letter Queue, before the failover load balancer could try the second node.
In attachment, there is a a test driver that reproduces the problem. Two HTTP backends are created : the first is down and the second is up.
A ""timer"" route calls :
1. a route with load balancing and without DLQ : this works fine.  An HTTP request is sent to the first node (which is down). Afterwards another HTTP request is sent to the second node (which is up).
2. a route with load balancing and with DLQ : this does not work.  An HTTP request is sent to the first node (which is down). Afterwards, the request is moved to the DLQ, without attempting the second node.
I suspect that the problem occurs because the error persists in the ""UnitOfWork"".
The problem is reproduceable both in Camel 2.10.7 and 2.13.2.","metatech:1418086937:2014-12-09T09:02:17.151+0000:1418086937:2014-12-09T09:02:17.151+0000:myservice.xml is a test driver that reproduces the problem.
When you have time, can you please have a look ?
Thanks.
davsclaus:1418087318:2014-12-09T09:08:38.760+0000:1418087318:2014-12-09T09:08:38.760+0000:Use the mailing list to get help first next time, instead of creating a JIRA ticket please. Eg as we say on
http://camel.apache.org/support

And a DL error handler is designed to move to DLQ when it exhausts.
And the LB has a option inheritErrorHandler you can set to false to not use the DL error handler.
metatech:1418090645:2014-12-09T10:04:05.548+0000:1418090645:2014-12-09T10:04:05.548+0000:Hi Claus, thanks for the quick reply.  For the next support request, I will use the mailing list first.
I tried the ""inheritErrorHandler=false"".  It works fine when 1 of the 2 back-ends is down.
But when the 2 back-ends are down, the message is *not* moved to the DLQ.  
Can you suggest an appropriate configuration ?
Thanks.
metatech:1418091752:2014-12-09T10:22:32.164+0000:1418091752:2014-12-09T10:22:32.164+0000:Also, my understanding from CAMEL-1479 is that this attribute will be removed from Camel 3.0 ? Is it still applicable ?"
0,CAMEL-8134,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-12-09 07:22:38+00:00,2014-12-09 19:25:41+00:00,"CachedOutputStream adds synchronization into exchange even the closedOnCompletion option is false, it could cause OOM error with the HttpProducer endpoint does ""unlimited/limited"" redelivery. 


Here is the discussion about this issue.",
0,CAMEL-8133,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-08 15:48:46+00:00,2014-12-08 17:36:45+00:00,"Rest services may need to support CORS to make using them easier for end users and tooling or whatnot.


We should add an option to turn this on|off, so we add the needed HTTP headers out of the box for CORS. And provide a default set of CORS headers.",
0,CAMEL-8132,Task,Minor,None,2.15.0,"

components
versions

",Resolved,Fixed,2.15.0,Willem Jiang,Andrea Cosentino,0,3,2014-12-08 14:20:20+00:00,2014-12-09 09:30:20+00:00,"There are new version of mongodb java driver and flapdoodle for mongodb unit testing. We need to update:



mongodb java driver from 2.12.0 to 2.12.4
flapdoodle from 1.46.1 to 1.46.4","githubbot:1418019689:2014-12-08T14:21:29.785+0000:1418019689:2014-12-08T14:21:29.785+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/353

    CAMEL-8132 Update mongodb-java-driver and de.flapdoodle.embed.mongo version

    Hi,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-8132
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel new-mongodb-java-driver-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/353.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #353
    
----
commit e75e71d0c3b41dda4b49922238d86f4dc6ab7c40
Author: ancosen <ancosen@gmail.com>
Date:   2014-12-08T14:07:27Z

    Update mongodb-java-driver and de.flapdoodle.embed.mongo version

----

githubbot:1418019707:2014-12-08T14:21:47.410+0000:1418019707:2014-12-08T14:21:47.410+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/353

githubbot:1418019783:2014-12-08T14:23:03.447+0000:1418019783:2014-12-08T14:23:03.447+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/354

    CAMEL-8132 Update mongodb-java-driver and flapdoodle for mongodb unit testing version

    Hi,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-8132
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel new-mongodb-java-driver-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/354.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #354
    
----
commit e75e71d0c3b41dda4b49922238d86f4dc6ab7c40
Author: ancosen <ancosen@gmail.com>
Date:   2014-12-08T14:07:27Z

    Update mongodb-java-driver and de.flapdoodle.embed.mongo version

----

davsclaus:1418088410:2014-12-09T09:26:50.792+0000:1418088410:2014-12-09T09:26:50.792+0000:Thanks for the PR
githubbot:1418088620:2014-12-09T09:30:20.455+0000:1418088620:2014-12-09T09:30:20.455+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/354
"
0,CAMEL-8131,Improvement,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-08 13:49:07+00:00,2014-12-08 13:51:27+00:00,So you would know which Camel route the rest service is using.,
0,CAMEL-8130,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-08 13:03:52+00:00,2014-12-08 13:51:46+00:00,selectOne can map to a class object. But selectList cannot,
0,CAMEL-8129,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Franz Forsthofer,0,2,2014-12-08 09:11:11+00:00,2015-01-07 07:37:14+00:00,"XAdES is a standard from the European Telecomunications Standars Institute (ETSI). This standard is based on XML Signature and defines enhancements which are placed into the 'SignatureProperties' element of the XML Signature. You can find the latest version of the standard in  http://www.etsi.org/deliver/etsi_ts%5C101900_101999%5C101903%5C01.04.02_60%5Cts_101903v010402p.pdf.


The attached patch implements the form Basic Electronic Signature (XAdES-BES) and the form Explicit Policy based Electronic Signature  (XAdES-EPES) for the XML Signature signer endpoint. It supports all current versions of XAdES (1.4.2, 1.4.1, 1.3.2., 1.2.2, 1.1.1).


The implementation has the following limitations:



No support for 'QualifyingPropertiesReference' (see section 6.3.2 of spec).
No support for Transforms element contained in SignaturePolicyId element contained in SignaturePolicyIdentifier
No support of CounterSignature element
AllDataObjectsTimeStamp element is not supported
IndividualDataObjectsTimeStamp element is not supported



It is possible to overcome the limitations in a later improvement.


I can do the wiki-update.


Regards Franz Forsthofer
---------------------------------
SAP SE
e-mail: franz.forsthofer@sap.com","davsclaus:1418771966:2014-12-17T07:19:26.821+0000:1418771966:2014-12-17T07:19:26.821+0000:Thanks a lot Franz. I have merged the code to master branch. You are very welcome to update the documentation.
forsthofer:1418946324:2014-12-19T07:45:24.883+0000:1418946324:2014-12-19T07:45:24.883+0000:Hi Claus,

I updated the wiki. See https://cwiki.apache.org/confluence/display/CAMEL/XML+Security+component.

Further, I detected I minor bug in an exception text. Therefore I attached a further patch.

Thanks for merging and Regards Franz
davsclaus:1418946932:2014-12-19T07:55:32.274+0000:1418946932:2014-12-19T07:55:32.274+0000:Thanks I just applied the correction patch.
davsclaus:1418946955:2014-12-19T07:55:55.610+0000:1418946955:2014-12-19T07:55:55.610+0000:You are welcome to add a note about this new functionality to the release notes at
http://camel.apache.org/camel-2150-release.html
forsthofer:1420587434:2015-01-07T07:37:14.613+0000:1420587434:2015-01-07T07:37:14.613+0000:I added the line
""XML Security component﻿ supports now  XAdES-BES/EPES in the signer endpoint."" in the release notes."
0,CAMEL-8128,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2014-12-08 03:49:57+00:00,2015-01-14 10:51:24+00:00,Current example doesn't show how to setup the registry which is import part of camel context setup. We need to polish the example for that.,njiang:1421203884:2015-01-14T10:51:24.778+0000:1421203884:2015-01-14T10:51:24.778+0000:Applied the patch into camel master branch.
0,CAMEL-8127,Task,Minor,None,None,"

component

",Resolved,Fixed,2.15.0,Willem Jiang,Andrea Cosentino,0,3,2014-12-07 10:46:03+00:00,2014-12-08 08:21:54+00:00,There is a new version of chunk-templates library used by camel-chunk component. We need to update from 2.5 to 2.6.,"githubbot:1417920450:2014-12-07T10:47:30.722+0000:1417920450:2014-12-07T10:47:30.722+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/351

    Update chunk template version to 2.6

    Hi all,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-8127
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel new-chunk-template-java-version-2.6

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/351.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #351
    
----
commit 3335c0e65b7d8ba9cae8c0a1096a5813f33fc591
Author: ancosen <ancosen@gmail.com>
Date:   2014-12-07T10:42:01Z

    Update chunk template version to 2.6

----

githubbot:1417920488:2014-12-07T10:48:08.115+0000:1417920488:2014-12-07T10:48:08.115+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/351

githubbot:1417920553:2014-12-07T10:49:13.902+0000:1417920553:2014-12-07T10:49:13.902+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/352

    CAMEL-8127 Update chunk template version to 2.6

    Hi all,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-8127
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel new-chunk-template-java-version-2.6

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/352.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #352
    
----
commit 3335c0e65b7d8ba9cae8c0a1096a5813f33fc591
Author: ancosen <ancosen@gmail.com>
Date:   2014-12-07T10:42:01Z

    Update chunk template version to 2.6

----

njiang:1417984722:2014-12-08T04:38:42.023+0000:1417984722:2014-12-08T04:38:42.023+0000:Applied the patch with thanks to Andrea.
githubbot:1417998114:2014-12-08T08:21:54.466+0000:1417998114:2014-12-08T08:21:54.466+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/352
"
0,CAMEL-8126,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Daniel Pocock,0,2,2014-12-05 12:44:06+00:00,2014-12-08 11:19:22+00:00,"Using the annotation @PropertyInject on a setter method of the RouteBuilder class doesn't appear to set the value.


public class RouteBuilder extends SpringRouteBuilder {


        private String fooBar;	


	@PropertyInject(""foo.bar"")
        private void setFooBar(String fooBar) 

{
               this.fooBar = fooBar;
        }


        @Override
        public void configure() throws Exception {


		logger.info(""foo.bar = {}"", fooBar);
        }
        ...
}


The log output says ""fooBar = null""


Using the {{ }} notation in endpoint URIs is working though.","daniel.pocock:1417757910:2014-12-05T13:38:30.240+0000:1417757910:2014-12-05T13:38:30.240+0000:I tried putting a breakpoint in the setter method.  The method is never called (as opposed to the possibility that it was being invoked with a null argument)

davsclaus:1417999917:2014-12-08T08:51:57.781+0000:1417999917:2014-12-08T08:51:57.781+0000:Can you provide more details how you run this application? Maybe a sample project / unit test.

Also how do you create that class RouteBuilder? eg it must be created by Spring to trigger the dependency injection. If you use new RouteBuilder() then it wont trigger.
daniel.pocock:1418002681:2014-12-08T09:38:01.373+0000:1418002681:2014-12-08T09:38:01.373+0000:I run the application by using the main class org.apache.camel.spring.Main

In camelContext.xml I have:

        <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
                <!-- Load our routes defined in the Java DSL -->
                <camel:package>org.example.myapp</camel:package>
        </camel:camelContext>

and the RouteBuilder class is in package org.example.myapp

Is using org.apache.camel.spring.Main sufficient for property injection to work?


davsclaus:1418008762:2014-12-08T11:19:22.108+0000:1418008762:2014-12-08T11:19:22.108+0000:This ticket is because of the NPE from CAMEL-8125 that the code doesnt call the setter."
0,CAMEL-8125,Bug,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Daniel Pocock,0,2,2014-12-05 12:43:23+00:00,2015-02-09 15:05:30+00:00,"Using the annotation @PropertyInject on a field of the RouteBuilder class gives a NullPointerException


public class RouteBuilder extends SpringRouteBuilder {


	@PropertyInject(""foo.bar"")
	private String fooBar;
        ...
}


Using the {{ }} notation in endpoint URIs is working though.","davsclaus:1417999941:2014-12-08T08:52:21.454+0000:1417999941:2014-12-08T08:52:21.454+0000:Please paste the stacktrace when you report a NPE exception.
daniel.pocock:1418002808:2014-12-08T09:40:08.548+0000:1418002808:2014-12-08T09:40:08.548+0000:I had posted the stack on the mailing list:

http://mail-archives.apache.org/mod_mbox/camel-users/201412.mbox/%3C5481A68F.9090709%40pocock.pro%3E

Here it is in full:


Exception in thread ""main"" org.apache.camel.RuntimeCamelException:
org.springframework.beans.factory.BeanCreationException: Error creating
bean with name 'org.example.RouteBuilder': Initialization of bean
failed; nested exception is
org.apache.camel.spring.GenericBeansException: Error post processing
bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1364)
    at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:323)
    at
org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)
    at
org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
    at
org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:950)
    at
org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)
    at
org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
    at
org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
    at
org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:217)
    at org.apache.camel.spring.Main.doStart(Main.java:157)
    at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
    at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
    at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
    at org.apache.camel.spring.Main.main(Main.java:90)
Caused by: org.springframework.beans.factory.BeanCreationException:
Error creating bean with name 'org.example.RouteBuilder': Initialization
of bean failed; nested exception is
org.apache.camel.spring.GenericBeansException: Error post processing
bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:336)
    at
org.apache.camel.spring.spi.SpringInjector.newInstance(SpringInjector.java:39)
    at
org.apache.camel.spring.PackageScanRouteBuilderFinder.instantiateBuilder(PackageScanRouteBuilderFinder.java:113)
    at
org.apache.camel.spring.PackageScanRouteBuilderFinder.appendBuilders(PackageScanRouteBuilderFinder.java:76)
    at
org.apache.camel.spring.CamelContextFactoryBean.findRouteBuildersByPackageScan(CamelContextFactoryBean.java:224)
    at
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.findRouteBuilders(AbstractCamelContextFactoryBean.java:847)
    at
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.setupRoutes(AbstractCamelContextFactoryBean.java:329)
    at
org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:321)
    ... 12 more
Caused by: org.apache.camel.spring.GenericBeansException: Error post
processing bean: org.example.RouteBuilder; nested exception is
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
    at
org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:396)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1507)
    at
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
    ... 21 more
Caused by: org.apache.camel.RuntimeCamelException:
java.lang.NullPointerException
    at
org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1364)
    at
org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:253)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFieldProperty(DefaultCamelBeanPostProcessor.java:206)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor$1.doWith(DefaultCamelBeanPostProcessor.java:172)
    at
org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:73)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:168)
    at
org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:82)
    at
org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
    ... 24 more
Caused by: java.lang.NullPointerException
    at java.lang.String.contains(String.java:2076)
    at
org.apache.camel.impl.CamelPostProcessorHelper.getInjectionPropertyValue(CamelPostProcessorHelper.java:232)
    ... 30 more
12:38:25.268 [Thread-1] INFO 
org.apache.camel.main.MainSupport$HangupInterceptor - Received hang up -
stopping the main instance.

davsclaus:1418005138:2014-12-08T10:18:58.041+0000:1418005138:2014-12-08T10:18:58.041+0000:The workaround is to setup a properties component, eg property placeholder, then you avoid the NPE
http://camel.apache.org/using-propertyplaceholder.html
daniel.pocock:1418005712:2014-12-08T10:28:32.798+0000:1418005712:2014-12-08T10:28:32.798+0000:
I already have that, these are in camelContext.xml too:

        <context:property-placeholder location=""file://${app.home}/config/app.properties"" />

        <bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
                <property name=""location"" value=""file://${app.home}/config/app.properties""/>
        </bean>

The properties are working in the camelContext.xml using ${spring} notation and in the URIs in RouteBuilder.java using {{camel}} notication.

Only the injection is not working.
daniel.pocock:1423465057:2015-02-09T14:57:37.082+0000:1423465530:2015-02-09T15:05:30.016+0000:Just another observation on this for Camel 2.13 users and a workaround:

- if I instantiate the PropertiesComponent as a spring bean like this:

    <bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
        <property name=""location"" 
       value=""file:${project.home}/properties""/>
    </bean>

then I have the NullPointerException problem and can't inject properties into my RouteBuilder.

If I instantiate the PropertiesComponent this way:

    <camelContext id=""camel"" ... >
        <propertyPlaceholder id=""properties"" 
            location=""file:${project.home}/properties""/>
        ....

then I can use the PropertyInject annotation without the NullPointerException.

I tried manually instantiating the RouteBuilder as a Spring bean and then putting a reference to it in my <camelContext/> but that didn't help resolve the issue.  I'm currently using the <package>org.example.project</package> element without <camelContext/> to automatically find and instantiate my RouteBuilder and as long as I set <propertyPlaceholder/> it seems OK.
"
0,CAMEL-8124,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2014-12-05 01:57:49+00:00,2014-12-05 06:26:04+00:00,"Current ConsumerCache just cache the PollingConsumer in the map, it may cause some trouble if the PollingConsumer is not thread safe. 
Using the ServicePool to cache the PollingConsumer could help us with that.


To workaround this issue, we cannot call the ConsumerTemplate in multithread mode.",njiang:1417731964:2014-12-05T06:26:04.250+0000:1417731964:2014-12-05T06:26:04.250+0000:Applied the patch into camel master branch.
0,CAMEL-8123,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Justin Cozzens,1,4,2014-12-04 14:15:08+00:00,2014-12-23 16:56:26+00:00,"The Mina2Consumer and Mina2Producer are configured backwards for SSL handshake initiation. The consumer is trying to initiate the handshake rather than the producer. You can see this by setting up a SSL enabled consuming route and telnet to the port, you will immediately get some data sent from the server to the client rather than the server waiting on the client to initiate the handshake.
The issue is Mina2Consumer:160, it is setting UseClientMode to true, it should be false. Mina2Producer line 313 needs to also change to the following:
            SslFilter filter = new SslFilter(configuration.getSslContextParameters().createSSLContext(), configuration.isAutoStartTls());
filter.setUseClientMode(true);
connector.getFilterChain().addFirst(""sslFilter"", filter);


As far as I can tell this has been a bug since this component was introduced.","githubbot:1417696671:2014-12-04T20:37:51.375+0000:1417696671:2014-12-04T20:37:51.375+0000:GitHub user peterberkman opened a pull request:

    https://github.com/apache/camel/pull/349

    Camel 2.13.x Correct TLS Handshake

    fixes: https://issues.apache.org/jira/browse/CAMEL-8123

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/peterberkman/camel camel-2.13.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/349.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #349
    
----
commit 0fe18488bc237ce1d03b92dc50c0a8e62b6ebdc9
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:29:45Z

    Fixes #CAMEL-8123: Consumer should NOT use ClientMode for TLS

commit e446b90315534ca9a6ed8a6a76e5bd3af748f012
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:33:02Z

    Fixes #CAMEL-8123: Producer SHOULD use ClientMode for TLS

----

githubbot:1417696796:2014-12-04T20:39:56.243+0000:1417696796:2014-12-04T20:39:56.243+0000:GitHub user peterberkman opened a pull request:

    https://github.com/apache/camel/pull/350

    Correctly set client mode for TLS handshakes

    Fixes CAMEL-8123 - https://issues.apache.org/jira/browse/CAMEL-8123

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/peterberkman/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/350.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #350
    
----
commit aaf8b632a7ef0e068ebea8a0e98e947e21f1d57e
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:35:40Z

    Fixes #CAMEL-8123: Producer SHOULD use ClientMode for TLS

commit cf7e22b4592e310901443f5ce9e2cc14a4ebbbcc
Author: peterberkman <peter@berkmans.net>
Date:   2014-12-04T20:36:51Z

    Fixes #CAMEL-8123: Consumer should NOT use ClientMode for TLS

----

pberkman:1417701934:2014-12-04T22:05:34.611+0000:1417701934:2014-12-04T22:05:34.611+0000:there was a copy/paste mistake in the above pull requests.   Please see comment on the pull request...  basically, on the Producer, change ""acceptor"" to ""connector"".
njiang:1417731353:2014-12-05T06:15:53.656+0000:1417731353:2014-12-05T06:15:53.656+0000:Merged the patch into master, camel-2.13.x and camel-2.14.x branches with thanks to Justin.
githubbot:1419324161:2014-12-23T16:42:41.775+0000:1419324161:2014-12-23T16:42:41.775+0000:Github user peterberkman closed the pull request at:

    https://github.com/apache/camel/pull/349

githubbot:1419324986:2014-12-23T16:56:26.868+0000:1419324986:2014-12-23T16:56:26.868+0000:Github user peterberkman closed the pull request at:

    https://github.com/apache/camel/pull/350
"
0,CAMEL-8122,Bug,Major,2.15.0,,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,2,2014-12-04 08:56:54+00:00,2016-05-20 14:35:49+00:00,"When we launch the maven camel:run goal with the camel-example-sql-blueprint, the camel project is not started and this OSGI Service error is reported.


I suspect that some bundles are missing and not loaded by the PoJoSr classloader when the project is started/launched by the camel-maven-plugin 


See line of code 



package org.apache.camel.maven;
...
public class RunMojo extends AbstractExecMojo {
...

        } else if (usingBlueprintMain) {
            mainClass = ""org.apache.camel.test.blueprint.Main"";
            // must include plugin dependencies for blueprint
            extraPluginDependencyArtifactId = ""camel-test-blueprint"";




Error reported on the console




Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)


[INFO] --- camel-maven-plugin:2.15-SNAPSHOT:run (default-cli) @ camel-example-sql-blueprint ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[mel.test.blueprint.Main.main()] MainSupport                    INFO  Apache Camel 2.15-SNAPSHOT starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  No quiesce support is available, so blueprint components will not participate in quiesce operations
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  Test bundle headers: Bundle-ManifestVersion=2, Bundle-Name=System Bundle, Bundle-SymbolicName=de.kalpatec.pojosr.framework, Bundle-Vendor=kalpatec, Bundle-Version=0.2.1
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.camel.camel-blueprint [2], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.proxy.ProxyManager], bundle: org.apache.aries.proxy.impl [19], symbolicName: org.apache.aries.proxy.impl
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationAdmin], bundle: org.apache.felix.configadmin [28], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.felix.cm.PersistenceManager], bundle: org.apache.felix.configadmin [28], symbolicName: org.apache.felix.configadmin
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ManagedServiceFactory], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.cm.ConfigurationListener, org.apache.felix.fileinstall.ArtifactListener, org.apache.felix.fileinstall.ArtifactInstaller], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.url.URLStreamHandlerService], bundle: org.apache.felix.fileinstall [29], symbolicName: org.apache.felix.fileinstall
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.services.ParserService], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.camel.camel-blueprint [2], symbolicName: org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.startlevel.StartLevel], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.ComponentResolver], bundle: org.apache.camel.camel-sql [6], symbolicName: org.apache.camel.camel-sql
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.LanguageResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.aries.blueprint.NamespaceHandler], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.packageadmin.PackageAdmin], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.TypeConverterLoader], bundle: de.kalpatec.pojosr.framework [0], symbolicName: de.kalpatec.pojosr.framework
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.apache.camel.spi.DataFormatResolver], bundle: org.apache.camel.camel-core [3], symbolicName: org.apache.camel.camel-core
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.service.blueprint.container.BlueprintContainer], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           WARN  ServiceReference: [org.osgi.framework.hooks.bundle.EventHook], bundle: org.apache.aries.blueprint [17], symbolicName: org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1417682923424
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:488)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:240)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:202)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:104)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:149)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:353)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)
	... 6 more
[ERROR] *************************************","njiang:1417720679:2014-12-05T03:17:59.159+0000:1417720679:2014-12-05T03:17:59.159+0000:Hi Charles, 

I just run the mvn camel:run inside of camel-example-sql-blueprint, I cannot reproduce the error that you hit.
Can you run  ""mvn clean install -Dtest=false"" to build the Camel-2.15-SNAPSHOT first?

Regards,

Willem
cmoulliard:1417737764:2014-12-05T08:02:44.429+0000:1417737764:2014-12-05T08:02:44.429+0000:Issue not longer there after doing a mvn clean install of camel-2.15-SNAPSHOT project"
0,CAMEL-8121,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-12-04 02:33:44+00:00,2014-12-05 06:14:59+00:00,"If the target 'tmp' directory (specified by java.io.tmpdir) used by Camel, does not have proper privileges, then Camel enters infinite loop. The offending code is found in org.apache.camel.util.FileUtil.createNewTempDir().


We need to check the if the temp file is writable.","njiang:1417731299:2014-12-05T06:14:59.255+0000:1417731299:2014-12-05T06:14:59.255+0000:Applied the patch into camel master ,camel-2.13.x and camel-2.14.x branches."
0,CAMEL-8120,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Mark Mindenhall,0,2,2014-12-03 22:23:37+00:00,2015-01-14 10:45:03+00:00,"The constructor of io.netty.handler.codec.DelimiterBasedFrameDecoder includes a boolean stripDelimiter parameter, which is always set to true by the ChannelHandlerFactories.newDelimiterBasedFrameDecoder method (both directly and within org.apache.camel.component.netty4.codec.DatagramPacketDelimiterDecoder, which delegates to DelimiterBasedFrameDecoder)


This parameter needs to be set to false when the end-of-frame delimiter is part of the message (e.g., the closing tag of an XML document), and therefore must not be discarded.


Suggested fix:



Add a new constructor to DatagramPacketDelimiterDecoder that includes the parameter, which is then passed through to the delegate DelimiterBasedFrameDecoder
Add a new method signature for ChannelHandlerFactories.newDelimiterBasedFrameDecoder that includes the parameter
refactor existing newDelimiterBasedFrameDecoder method to delegate to the new method","mmindenhall:1417616663:2014-12-03T22:24:23.487+0000:1417616663:2014-12-03T22:24:23.487+0000:If my current work load lets up before someone grabs this, I'll submit a patch.
njiang:1421203491:2015-01-14T10:44:51.138+0000:1421203491:2015-01-14T10:44:51.138+0000:Applied the patch into camel master branch."
0,CAMEL-8119,Bug,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Christoph Läubrich,0,1,2014-12-03 19:48:35+00:00,2014-12-17 09:31:01+00:00,"I use the 'recipientList' EIP to create dynmic destination.
All dynamic options values in the URI are encoded (like username=""+encodeURIComponent(username)).


The problem is when the value contains the & sign, camel do some kind of double decoding the URI and then fails with an obscure message.


Example (raw) URI passed to the  recipientList smtps://smtp.googlemail.com?username=myuser&password=%26%3F%23O7fxo
(note: this also happen if the url is a static to=""..."")


Exception:
 Failed to resolve endpoint: smtps://smtp.googlemail.com?%3F%23O7fxo&password=&username=myuser due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{#O7fxo}

]
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:534)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.util.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:88)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.RecipientListProcessor.resolveEndpoint(RecipientListProcessor.java:223)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.RecipientListProcessor.createProcessorExchangePairs(RecipientListProcessor.java:163)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:208)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:167)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.RecipientList.process(RecipientList.java:120)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)[camel-core-2.13.1.jar:2.13.1]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:103)[camel-jms-2.13.1.jar:2.13.1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990)[spring-jms-3.2.8.RELEASE.jar:3.2.8.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]","laeubi:1417608219:2014-12-03T20:03:39.892+0000:1417608219:2014-12-03T20:03:39.892+0000:A workaround is using the RAW(...) keyword, but this is a bit messy if one provides a properly encoded URL and it fails that way.
laeubi:1418779861:2014-12-17T09:31:01.042+0000:1418779861:2014-12-17T09:31:01.042+0000:Can you explain why this is marked as Won't fix? Valid URIs should IMO not lead to such an exception. If this is desired at least an invalidargument exception with a text explaining the cause should be thrown (e.g. ""encoded & can't be used in camel URIs use RAW() statement instead""), it takes me some tiem to realize the cause of this since other encoded special chars work without any problem!"
0,CAMEL-8118,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Tom So,0,1,2014-12-03 13:15:56+00:00,2014-12-04 07:21:35+00:00,"Because of this change request (https://issues.apache.org/jira/browse/CAMEL-7742) was a new feature implemented that allows pattern annotations for BigDecimal fields in CSV model classes for the Camel Bindy component.


The problem with that is, that the usage of this feature overwrites the current Locale setting of the environment. For example, if the current Locale was set to ""German"" and the provided pattern for the BigDecimal field requires ""US"" to unmarshal the numbers in the CSV file, then the method BigDecimalPatternFormat#parse(String) overwrites the Locale, but doesn't restore the former setting. This can cause problems for other software components that depends on the Locale setting.


The cause of the problem can be found here on line 21: Source of BigDecimalPatternFormat


A possible workaround would be storing the current locale temporarily, overwrite that setting, perform the formatting task and then restore the former locale setting.
Like in this code example:



if (getNumberFormat() != null) {
    final Locale currentLocale = Locale.getDefault();
    Locale.setDefault(super.getLocale());
    DecimalFormat df = (DecimalFormat)getNumberFormat();
    df.setParseBigDecimal(true);
    BigDecimal bd = (BigDecimal)df.parse(string.trim());
    if(super.getPrecision() != -1) {
        bd = bd.setScale(super.getPrecision(), RoundingMode.valueOf(super.getRounding()));
    }
    Locale.getDefault(); // what is the purpose of this line?
    Locale.setDefault(currentLocale); // restore the Locale setting
    return bd;
}",
0,CAMEL-8117,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Daniel Pocock,0,2,2014-12-03 10:17:49+00:00,2014-12-04 08:55:23+00:00,"There is an endpoint property for setting the encoding.


It would be useful to set this on a per-message basis with a header too.","davsclaus:1417654523:2014-12-04T08:55:23.426+0000:1417654523:2014-12-04T08:55:23.426+0000:Daniel, you are welcome to help update the documentation at
http://camel.apache.org/smpp"
0,CAMEL-8116,Improvement,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Daniel Pocock,0,2,2014-12-03 09:29:38+00:00,2015-01-09 08:14:42+00:00,"Currently, camel-smpp splits a long message into 140 byte SMS messages to go over the network.  This is done automatically for any long message.


Not all networks support these split messages.  Some networks drop the subsequent frames after the first, some don't delivery anything.


It would be useful to give users of the component the ability to set a message splitting policy, e.g. to refuse to split messages and throw an exception if a long message is encountered.  This will reduce load on the SMPP provider and may also avoid costs associated with messages that are never delivered.","daniel.pocock:1417592024:2014-12-03T15:33:44.445+0000:1417592024:2014-12-03T15:33:44.445+0000:I just added the requested unit tests and found a bug in the truncation logic, this is fixed in the same pull request.
davsclaus:1417603308:2014-12-03T18:41:48.038+0000:1417603308:2014-12-03T18:41:48.038+0000:Thanks the PR has been merged to master branch.

Do you mind helping with updating the documentation with this new option?
http://camel.apache.org/smpp
davsclaus:1420762164:2015-01-09T08:09:24.107+0000:1420762164:2015-01-09T08:09:24.107+0000:Daniel did we get the documentation updated?
daniel.pocock:1420762397:2015-01-09T08:13:17.744+0000:1420762397:2015-01-09T08:13:17.744+0000:
Yes, please search for splitting in this page:

http://camel.apache.org/smpp.html
davsclaus:1420762464:2015-01-09T08:14:24.815+0000:1420762464:2015-01-09T08:14:24.815+0000:Perfect"
0,CAMEL-8115,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-12-03 08:48:07+00:00,2014-12-03 10:37:10+00:00,"To make it easy to lookup property placeholders from the environment variables or JVM system properties etc.


We should add property placeholder function to do that, so you can do


env:FOO


to lookup the FOO env variable.",
0,CAMEL-8114,New Feature,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Duplicate,"2.14.1, 2.15.0",Claus Ibsen,Charlee Chitsuk,0,2,2014-12-03 07:42:58+00:00,2014-12-03 08:37:51+00:00,Regarding to the issue at Camel User Forum as http://camel.465427.n5.nabble.com/camel-jcr-The-trouble-about-the-JCR-multi-valued-property-when-using-JCR-GET-BY-ID-td5757029.html,"davsclaus:1417566519:2014-12-03T08:28:39.395+0000:1417566519:2014-12-03T08:28:39.395+0000:Duplicate of CAMEL-7931
davsclaus:1417566539:2014-12-03T08:28:59.684+0000:1417566539:2014-12-03T08:28:59.684+0000:Charlee the PR has been merged. Do you mind closing the PR on the github?
charlee.ch:1417567071:2014-12-03T08:37:51.200+0000:1417567071:2014-12-03T08:37:51.200+0000:Closed as your request."
0,CAMEL-8083,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,2,2014-11-27 07:37:35+00:00,2014-12-03 07:40:41+00:00,"While connecting to a jetty endpoint from a development web server running on a different port, AJAX calls, fail due to CORS restrictions.
It could be more easy for people to use just by set an boolean option from the endpoint.


Here is a PR for it.","davsclaus:1417561444:2014-12-03T07:04:04.076+0000:1417561444:2014-12-03T07:04:04.076+0000:We need to update the documentation with the new option
http://camel.apache.org/jetty
njiang:1417563641:2014-12-03T07:40:41.769+0000:1417563641:2014-12-03T07:40:41.769+0000:Updated the wiki page for the new added option."
0,CAMEL-8082,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-11-27 04:00:45+00:00,2014-12-03 19:14:03+00:00,"When using cxfRs to send a rest message in InOnly mode, Camel do not close
the javax.ws.rs.core.Response object. As we are InOnly, the reponse object is not passed through the exchange, so the caller can not close it either.


Here is the mail thread which talks about it.",
0,CAMEL-8081,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,3,2014-11-27 03:54:02+00:00,2014-12-03 19:05:13+00:00,"It makes sense the multicast aggregator keep processing the exchange even some exchange are timeout. 
Here is a thread in the camel user mailing list talks about it.",
0,CAMEL-8080,New Feature,Major,2.10.7,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,metatech,0,3,2014-11-26 10:15:07+00:00,2014-12-18 14:03:20+00:00,"By default, Camel-CXF depends on Camel-Spring, which prevents a ServiceMix installation using only Blueprint bundles from uninstalling Camel-Spring altogether.
Here is a patch that makes Spring optional in Camel CXF dependencies, both in OSGi imports and within the Karaf feature.","njiang:1417143152:2014-11-28T10:52:32.997+0000:1417143152:2014-11-28T10:52:32.997+0000:The original patch is not quick right, I did some change to make the spring package and camel-spring package to be optional. 
metatech:1417150205:2014-11-28T12:50:05.610+0000:1417150205:2014-11-28T12:50:05.610+0000:Hi Willem, I see that you went one step further and removed not only the required dependency on Camel-Spring, but also on Spring Framework. 
Thanks !
metatech:1418882600:2014-12-18T14:03:20.062+0000:1418882600:2014-12-18T14:03:20.062+0000:Please note, however, Camel-JMS uses Spring Framework JMS support, even in a Blueprint bundle.  This means that any bundle using queues transitively uses Spring, and that Spring cannot be uninstalled from the container."
0,CAMEL-8079,New Feature,Major,None,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Christian Ohr,0,3,2014-11-25 16:17:27+00:00,2014-12-08 09:13:17+00:00,"The HL7Codec directly creates a String from the message, using the charset hardcoded in its HL7MLLPConfig. This is too static. 



The field MSH-18 of the message may contain the charset in which the message is encoded (much like encoding=... in the XML header) and which shall be used for decoding.
Other information nested the exchange may also be usable to derive the appropriate charset if MSH-18 is empty.



The attached patch improves the behavior in a backwards-compatible way.



HL7MLLPCodec has a new property named ""produceString"" (default true). If set to false, the codec sends a byte array into the route instead of a string. In this case, no charset is evaluated yet.
the HL7DataFormat checks the field MSH-18 for the charset to be used for marshalling and unmarshalling. If MSH-18 is empty,  it uses the standard Camel charset properties/headers by default. If MSH-18 was populated, the value is copied to a new message header ""CamelHL7Charset""
the HL7DataFormat also offers an extension point in order to ""guess"" the charset from the byte array content (e.g. using ICU4J's CharsetDetector).","davsclaus:1417605130:2014-12-03T19:12:10.510+0000:1417605130:2014-12-03T19:12:10.510+0000:Thanks the patch is now applied on master and 2.14.x branch.

Do you mind updating the documentation with this new functionality at
http://camel.apache.org/hl7
christian.ohr:1418000390:2014-12-08T08:59:50.233+0000:1418000390:2014-12-08T08:59:50.233+0000:Done. I edited some older parts as well where I found wrong Camel syntax, misleading samples and some dubious English... ;-)
davsclaus:1418001190:2014-12-08T09:13:10.102+0000:1418001190:2014-12-08T09:13:10.102+0000:Thanks for the help. Keep it up."
0,CAMEL-8078,Improvement,Major,None,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-11-25 03:45:57+00:00,2015-07-08 07:53:03+00:00,"Current camel-restlet producer doesn't support to decode the GZIP response out of box.
You can find more information from this thread of camel user mailing list",
0,CAMEL-8077,Bug,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Camel Guy,0,3,2014-11-24 02:58:41+00:00,2014-12-01 21:20:08+00:00,"Not sure if this occurs in 2.14.0. Does not occur in 2.13.3.


I am extending CamelSpringTestSupport with:


@Override
public boolean isUseAdviceWith() {
    return true;
}


In a @Before method I call context.getRouteDefintion(""some.id"")


It throws a NullPointerException:


org.apache.camel.impl.DefaultCamelContext.getRouteDefinition(DefaultCamelContext.java:1464)


If I put context.start() at the top of the @Before method, it works.","njiang:1416770358:2014-11-24T03:19:18.072+0000:1416770358:2014-11-24T03:19:18.072+0000:Are you using Camel 2.14.1-SNAPSHOT?
Can you show us the whole test case?
camelguy:1416825020:2014-11-24T18:30:20.593+0000:1416828794:2014-11-24T19:33:14.425+0000:Yes, I am using 2.14.1-SNAPSHOT.

route.getId() returns null when the context has not started.

{noformat}
public synchronized RouteDefinition getRouteDefinition(String id) {
    for (RouteDefinition route : routeDefinitions) {
        if (route.getId().equals(id)) {
            return route;
        }
    }
    return null;
}
{noformat}

There was a time when I could get one route via getRouteDefinition by id successfully but not another. getRouteDefinition(A) = successful but getRouteDefinition(B) = exception. The difference is that route B is declared in camel-context.xml after route A.

However, after adding <import> and <routeContextRef>, getRouteDefinition(A) failed too. The route I'm trying to grab is in the main context file, not in the imported one.

It appears that camel-context.xml is loaded in a background thread and has a race condition with my methods. I have the same problem with @Test methods. I tried sleeping for, say, a minute in @Begin but that doesn't fix the problem. I also moved the @Begin code to the @Test method and put a sleep there. That doesn't work either. The only fix is to call context.start().

In camel-context.xml most routes do not specify an id attribute.

Here's my test.java

{noformat}
package my.test;

import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.model.ModelCamelContext;
import org.apache.camel.model.RouteDefinition;
import org.apache.camel.test.spring.CamelSpringTestSupport;
import org.springframework.context.support.AbstractXmlApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.junit.Before;
import org.junit.Test;

public final class OneJDBCErrorTest extends CamelSpringTestSupport {
	protected AbstractXmlApplicationContext createApplicationContext() {
		return new ClassPathXmlApplicationContext(""META-INF/spring/camel-context.xml"");
	}

	@EndpointInject(uri=""direct:Start"")
	private ProducerTemplate start;

	@EndpointInject(uri=""mock:Test:JDBC:TotalExceptions"")
	private MockEndpoint mockTotalExceptions;

	@EndpointInject(uri=""mock:Test:JDBC:Failed"")
	private MockEndpoint mockJdbcFailed;

	@Override
	public boolean isUseAdviceWith() {
	    return true;
	}

	@Before
	final public void jdbcError() throws Exception {
		context.start(); // bug in 2.14 - this is needed
		
		ModelCamelContext model = (ModelCamelContext) context;

		RouteDefinition jdbc = model.getRouteDefinition(""SQL:JDBC"");
		
		jdbc.adviceWith(context, new AdviceWithRouteBuilder() {
	        @Override
	        public void configure() throws Exception {
	        	weaveById(""test:SQL:JDBC:NextError"").before().to(""mock:Test:JDBC:TotalExceptions"");
	        }
	    }
		);
	}
	
	@Test
	final public void oneFailure() throws Exception {
		mockTotalExceptions.expectedMessageCount(4);
		mockJdbcFailed.expectedMessageCount(0);
		
		context.start();
		start.sendBody("""");

		mockTotalExceptions.assertIsSatisfied();
		mockJdbcFailed.assertIsSatisfied();

		context.stop();
	}
}
{noformat}

davsclaus:1417331884:2014-11-30T15:18:04.700+0000:1417331884:2014-11-30T15:18:04.700+0000:You need to set the id of the route
camelguy:1417333867:2014-11-30T15:51:07.269+0000:1417334403:2014-11-30T16:00:03.477+0000:For all routes? This exception doesn't occur in 2.13. The route with the id it's looking for exists. Code works as-is if I call context.start() (or downgrade to 2.13 but I need the CamelFreemarkerDataModel feature).
davsclaus:1417406297:2014-12-01T11:58:17.572+0000:1417406297:2014-12-01T11:58:17.572+0000:Yeah for all routes needed until the NPE is gone, or use the other api on CamelContext that returns a List and find the route yourself.
camelguy:1417439951:2014-12-01T21:19:11.832+0000:1417440008:2014-12-01T21:20:08.360+0000:You or someone else fixed the problem on 2.14.1-SNAPSHOT, which I confirmed. Thank you!"
0,CAMEL-8076,Improvement,Major,None,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,2,2014-11-23 03:41:18+00:00,2016-06-28 07:18:52+00:00,"Here is a stackoverflow question which shows when the clustered quartz wants to recovery the job, camel throw the java.lang.IllegalArgumentException:



Java.lang.IllegalArgumentException: Trigger key cluster.quartz is already in used by Endpoint[quartz2://cluster/quartz?cron=0+0%2F2+++*+%3F&durableJob=true&recoverableJob=true&stateful=true] at org.apache.camel.component.quartz2.QuartzEndpoint.ensureNoDupTriggerKey(QuartzEndpoint.java:272)




We should avoid the checking of ensureNoDupTriggerKey, if the recoverableJob is true.","njiang:1416769868:2014-11-24T03:11:08.979+0000:1416769868:2014-11-24T03:11:08.979+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
rselva:1467069532:2016-06-28T07:18:52.440+0000:1467069532:2016-06-28T07:18:52.440+0000:Thanks, It worked."
0,CAMEL-8075,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.14.3, 2.15.2, 2.16.0",Willem Jiang,Willem Jiang,0,1,2014-11-23 01:56:27+00:00,2015-04-23 07:53:58+00:00,"Here is a question in the stackoverflow. 


I just checked the code of camel-ftp, it has the code to check the connection, but it's hard to know if the connection is still opened if we don't send some bytes to server socket.


The solution could be force the ftp client send some ping or list message to check if the connection is still open.","njiang:1429746838:2015-04-23T07:53:58.691+0000:1429746838:2015-04-23T07:53:58.691+0000:Applied the patch into camel master, camel-2.15.x and camel-2.14.x branches."
0,CAMEL-8074,Wish,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Marc Carter,0,2,2014-11-21 19:09:17+00:00,2015-02-02 18:49:35+00:00,"The following Java EIP looks textbook but the post-aggregation route is not transacted as it runs on a different thread. The (transaction) policy meant to wrap the route doesn't get re-applied to the output.



from(""direct:in"")
 .transacted(""requiresTransaction"")
 .aggregate(simple(""${header.symbol}""), new UseLatestAggregationStrategy())
    .completionInterval(1000)
  .bean(persistInDb)
  .to(""jms:output"");




Since one cannot re-specify the transacted policy on the same route, the only workaround is to break it in two.



from(""direct:in"")
 .transacted(""requiresTransaction"")
 .aggregate(simple(""${header.symbol}""), new UseLatestAggregationStrategy())
    .completionInterval(1000)
  .to(""direct:x"");
from(""direct:x"")
  .transacted(""requiresTransaction"")
  .bean(persistInDb)
  .to(""jms:output"");




Proposal is to ensure the route's transaction Policies is re-applied inside of the AggregateProcessor#onSubmitCompletion runnable if (and only if!) the current thread is not the one which started the route (which may be better inferred through exchange.getUnitOfWork - just a guess).",davsclaus:1422874175:2015-02-02T18:49:35.351+0000:1422874175:2015-02-02T18:49:35.351+0000:Do as your 2nd example if you want TX
0,CAMEL-8073,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-11-21 14:59:58+00:00,2014-11-21 15:03:33+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-cleans-attachments-if-error-is-thrown-during-routing-tp5759410.html",
0,CAMEL-8072,Improvement,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,2,2014-11-21 14:59:02+00:00,2016-08-27 14:33:52+00:00,It's a common practice that http server close the connection once it send the error message to the client.,"njiang:1416678767:2014-11-23T01:52:47.975+0000:1416678767:2014-11-23T01:52:47.975+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
githubbot:1471998755:2016-08-24T08:32:35.754+0000:1471998755:2016-08-24T08:32:35.754+0000:GitHub user YoshikiHigo opened a pull request:

    https://github.com/apache/camel/pull/1136

    Followup to CAMEL-8072

    This is a small followup to CAMEL-8072, which was fixed in e9dded769bff8e060c64e62c962cd552d24d4c70.
    
    Yoshiki, Shinpei, Hideaki, and Mei

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/YoshikiHigo/camel fix04

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1136.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1136
    
----
commit f2011248028f6b2250686a6123b1f7f5f31d8d40
Author: Yoshiki Higo <yoshiki.higo@gmail.com>
Date:   2016-08-24T08:15:59Z

    Followup to CAMEL-8072

----

githubbot:1472279632:2016-08-27T14:33:52.747+0000:1472279632:2016-08-27T14:33:52.747+0000:Github user YoshikiHigo closed the pull request at:

    https://github.com/apache/camel/pull/1136
"
0,CAMEL-8071,Wish,Minor,"2.13.2, 2.13.3",,"
None
",Resolved,Not A Problem,None,Unassigned,Michael Feichtegger,0,2,2014-11-21 13:25:23+00:00,2015-07-09 11:22:28+00:00,"We are creating a WebApplication which also provides camel endpoints.
One of the endpoints triggers a bindy action to read records from a fixed-length-record input file. For this purpose we are using camel bindy.


I this conjuction we discovered that there is an issue when trying to locate those classes which are annotated with @FixedLengthRecord since the are located in a JAR-File.


The project structure looks like this:



project-ear
	
project-war
		
WEB-INF/lib/project-jar







If we locate the classes directly at WEB-INF/classes/my/package camel is able to discover the annotated classes.


After some debugging we have found out, that DefaultPackageScanClassResolver is trying to open an InputStream like this:


/opt/jboss-eap/current/standalone/deployments/bindy-ear.ear/bindy-ws-0.0.1-SNAPSHOT.war/WEB-INF/lib/bindy-core-0.0.1-SNAPSHOT.jar/my/package/


which of of course does not exist.
If you remove in those cases ""/my/package"" from the File the resolver works perfectly well since loadImplementationsInJar will be called correctly.","davsclaus:1416549118:2014-11-21T13:51:58.651+0000:1416549118:2014-11-21T13:51:58.651+0000:You need a special camel-jboss resolver, see
http://camel.apache.org/camel-jboss.html
m.feichtegger:1416549716:2014-11-21T14:01:56.127+0000:1416549716:2014-11-21T14:01:56.127+0000:Since we are using 2.13.3 we've thought that it camel-jboss is obsolete.

""From Camel 2.8 onwards there is no longer the need for using this camel-jboss component as Camel is now capable of loading type converters without package scanning. This requires though that all 3rd party components with type converter must define the name of the converter classes as FQN in the META-INF/org/apache/camel/TypeConverter file. See more details at Type Converter.
One exception is if you are using Bindy component as it still needs this JBoss resolver.""

davsclaus:1416550523:2014-11-21T14:15:23.920+0000:1416550523:2014-11-21T14:15:23.920+0000:Yes when using bindy its needed.

Though there is a wildfly-camel project so maybe in the future JBoss EAP can ship this resolver out of the box?
https://github.com/wildflyext/wildfly-camel
davsclaus:1416550748:2014-11-21T14:19:08.864+0000:1416550748:2014-11-21T14:19:08.864+0000:On your system is there a file path for this
{code}
/opt/jboss-eap/current/standalone/deployments/bindy-ear.ear/bindy-ws-0.0.1-SNAPSHOT.war/WEB-INF/lib/
{code}

And in that lib directory there is the JAR files (but they are not expanded) ?

If so the trick would be to know this from the url above which is just a string. And then add some logic that tries to list the dir for .jar files and then use a jar url loader to scan inside those JARs. All extra work needed to do so, which with some hard-work may be possible to add in camel-core.

You can welcome to experiment with this as you got an EAP app server on your system and use bindy.
"
0,CAMEL-8070,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2014-11-21 12:23:36+00:00,2014-11-24 13:27:28+00:00,"camel-websocket currently does not handle byte[] messages. 


http://camel.465427.n5.nabble.com/AHS-WS-problem-td5759334.html",
0,CAMEL-8069,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Christoph Läubrich,0,2,2014-11-21 10:22:44+00:00,2014-11-21 11:19:15+00:00,"Currently you can only add attachments from java or scripting code.
It would be nice to have something like addAttachment (like addHeader) for the XML, so you can define (and add) attachments by:



supply name + file by header values (->FileDataSource)
supply URL by header values (->URLDataSource)
use the body of the input message (Inputstream, byte[])



This would allow for easier and uniform handling of attachments e.g. in the mail component.","davsclaus:1416537334:2014-11-21T10:35:34.787+0000:1416537334:2014-11-21T10:35:34.787+0000:Attachments is rarely used and only supported by a few components. 

We do not want to add more into the DSL that will never/very rarely be used.
laeubi:1416539955:2014-11-21T11:19:15.588+0000:1416539955:2014-11-21T11:19:15.588+0000:well it might be rarely used because its atm alittle bit hard to use. IMO it would also be okay to have a processor that could be used as a bean instead of a ""special"" tag or something. Beside thus, doing this via script languages is not very compfortable.

Having such a thing prebuild into camel would make things like, reading from a file or report generator and send this to one or more mail accounts attaching it to mail (e.g. billing to customer) much more easy and understandable instead of forching one to write custom code.

And such a use case is I think more likeley than ""rare""...
"
0,CAMEL-8068,Improvement,Minor,2.14.0,"2.14.1, 2.15.0","

patch

",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Christoph Läubrich,0,2,2014-11-21 10:01:45+00:00,2014-11-21 16:01:04+00:00,"The https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/main/java/org/apache/camel/component/mail/SplitAttachmentsExpression.java currently splits the attachments by each ID but do not provide the ID as an additional header.
It would be usefull for the processing code to know the ID so they simply get them e.g. by getAttachment(header[CamelSplitAttachmentName]) instead of looking in the map for names etc. or iterate over it.","davsclaus:1416537471:2014-11-21T10:37:51.891+0000:1416537471:2014-11-21T10:37:51.891+0000:Good idea, a PR is welcome
http://camel.apache.org/contributing.html
laeubi:1416546684:2014-11-21T13:11:24.900+0000:1416546815:2014-11-21T13:13:35.545+0000:Attached a patch that set header ""CamelSplitAttachmentId"" with the attachment ID on the copy message.
davsclaus:1416552494:2014-11-21T14:48:14.714+0000:1416552494:2014-11-21T14:48:14.714+0000:Thanks for the patch.

We do like when there is an unit test with code changes so we can verify this.

laeubi:1416556864:2014-11-21T16:01:04.220+0000:1416556864:2014-11-21T16:01:04.220+0000:Currently I'm not able to build the test, they complain about missing documentation... Also compilation fails on my pc becuase MailSorter uses Java 7 style and the compile level seems java 1.6 ...
So I'm currently try to sort out how to build camel at all from the git checkout :-("
0,CAMEL-8067,Improvement,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Christoph Läubrich,0,2,2014-11-21 09:37:52+00:00,2014-11-21 16:32:34+00:00,"It would be nice if the file component would be able to save attachments to files (e.g. from the mail component).
Currently I invoke a script that first fetch the attachment, get the input stream and then set it to the body. It would be nice if the file-component can do this directly.","laeubi:1416540146:2014-11-21T11:22:26.210+0000:1416540146:2014-11-21T11:22:26.210+0000:Why is this marked as resolved? Currently it is not possible to write data from an attachment to a file (e.g. reading from a mailbox storing all attachments to an output directory for further processing) without having some extra code. So I think this is a valid enhancement-request.
davsclaus:1416552612:2014-11-21T14:50:12.203+0000:1416552612:2014-11-21T14:50:12.203+0000:You should use the mail attachments splitter so its

from mail
   split mail attachments
   to file

What can be enhanced is the mail attachments splitter to let it store the attachment as the message body and set the name as a Exchange.FILE_NAME. So I suggest you can take a look at extending this code to introduce an option to configure enable this.
laeubi:1416557595:2014-11-21T16:13:15.375+0000:1416557686:2014-11-21T16:14:46.408+0000:Yes thats what I try, the problem is that as you said the splitter simply splits the attachments, so the file task fails (since it tries to write the body = Mail message). Maybe the MailSplitter is a better place to support this. But I still think it is worth to make the file task support attachments, so you are able to read/write attachments from files.
laeubi:1416558754:2014-11-21T16:32:34.899+0000:1416558754:2014-11-21T16:32:34.899+0000:Maybe it would be an option to create a new camel-attachment component for all tasks around adding/splitting/moving attachment, this could also be an option for CAMEL-8069 wdyt?"
0,CAMEL-8066,Improvement,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Moulliard Charles,Moulliard Charles,0,3,2014-11-21 09:02:01+00:00,2014-11-24 17:55:26+00:00,"The example ""camel-example-servlet-rest-tomcat"" uses the camel swagger component to register the swagger servlet able to discover and generates json files for the REST service.


The goal of this improvement is to add the swagger-ui resources (html, css, js, ...) to allow the user to discover the operations of the REST services and play with them.","davsclaus:1416552732:2014-11-21T14:52:12.084+0000:1416552732:2014-11-21T14:52:12.084+0000:Charles, is all that javascript code you added, are you sure they are in compliance with ASF licesning?

I am not really fond of copying a bunch of javascript code we do not maintain into an example. Instead people should run swagger ui external, and connect to the example as that is what it can do. 

I am in fact favor of removing the code you added and point people into that other direction.

Though anyone have any other thoughts or comments?
preben:1416568718:2014-11-21T19:18:38.384+0000:1416568718:2014-11-21T19:18:38.384+0000:Or maybe use swagger-ui as a web-jar http://mvnrepository.com/artifact/org.webjars/swagger-ui/2.0.12. 
that is Apache Licensed https://github.com/swagger-api/swagger-ui/blob/master/LICENSE. But still the js etc in the jar has a mix. of different licenses.
davsclaus:1416621530:2014-11-22T09:58:50.480+0000:1416621530:2014-11-22T09:58:50.480+0000:Yeah the web JAR can be a good idea then its part of the build and not a bunch of js files. And therefore a better practice and much less for us to maintain.
cmoulliard:1416621838:2014-11-22T10:03:58.471+0000:1416621838:2014-11-22T10:03:58.471+0000:I will have a look monday to include the JAR generated from swagger-ui github repository. This could be achieved with 2 maven plugin and some ant tasks to unzip the content into the webapp directory
cmoulliard:1416822926:2014-11-24T17:55:26.008+0000:1416822926:2014-11-24T17:55:26.008+0000:Project has been updated to avoid to include into the src/main/webapp all the swagger-ui resources.
3 plugins have been added to the project :
- Step 1. - Download Swagger UI project from GitHub
- Step 2. - Decompress content and move it to target/swagger-ui folder
- Step 3. - Copy Web Resources to target/classes but also to target/swagger-ui
- Step 4.  Add Swagger-ui Resources to the WAR"
0,CAMEL-8065,Bug,Major,2.15.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Paul McCulloch,0,3,2014-11-20 13:42:35+00:00,2014-11-20 16:27:26+00:00,"Building camel fails on windows with the error: 


Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.15-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-box: Error generating source for com.box.boxjavalibv2.resourcemanagers.IBoxCollaborationsManager: String index out of range: 1


This is due to the plugin not escaping the windows file separator before using it in a regex. 


Patch/pull request to follow","githubbot:1416462742:2014-11-20T13:52:22.018+0000:1416462742:2014-11-20T13:52:22.018+0000:GitHub user paul-mcculloch opened a pull request:

    https://github.com/apache/camel/pull/337

    Fix CAMEL-8065

    Fix building on Windows (with backslash file seperator) by following the advice in https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#replaceAll(java.lang.String,%20java.lang.String)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paul-mcculloch/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #337
    
----
commit d0917f2399c20464f6140582fdea49dfa827833f
Author: Paul McCulloch <paul.mcculloch@axiossystems.com>
Date:   2014-11-20T13:43:52Z

    Fix CAMEL-8065

----

davsclaus:1416471591:2014-11-20T16:19:51.301+0000:1416471591:2014-11-20T16:19:51.301+0000:Thanks for the PR. Do you mind closing it?
githubbot:1416472046:2014-11-20T16:27:26.556+0000:1416472046:2014-11-20T16:27:26.556+0000:Github user paul-mcculloch closed the pull request at:

    https://github.com/apache/camel/pull/337
"
0,CAMEL-8064,Improvement,Minor,2.13.2,None,"
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Gareth Western,0,2,2014-11-20 12:40:01+00:00,2014-11-24 08:54:33+00:00,"We are using property placeholders in our route configuration in order to switch components in our unit tests. For example:



        from(MyRouteBuilder.ENTRY_ENDPOINT)
            .routeId(""some.route"")
            .process(doSomething())
            .to(MyRouteBuilder.EXIT_ENDPOINT);




Where ENTRY_ENDPOINT = ""entry.endpoint.uri""
and EXIT_ENDPOINT = ""exit.endpoint.uri""


Then, in production, the Camel context is initialized with a properties file where the URIs use the ""jms"" component, while in our unit tests we initialise the context with a 'test' properties file where the URIs use the ""direct"" component. For example:



# test.properties
entry.endpoint.uri = direct:myRouteBuilder.entry
exit.endpoint.uri = direct:myRouteBuilder.exit




A typical RouteBuilder unit test looks something like this:



@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        classes = { MyRouteBuilderTest.TestConfig.class },
        loader = CamelSpringDelegatingTestContextLoader.class
)
@MockEndpointsAndSkip(value =  ""direct:myRouteBuilder.exit"")
public class MyRouteBuilderTest {

    @Produce(uri = MyRouteBuilder.ENTRY_ENDPOINT)
    private ProducerTemplate myRouteBuilderProducer;

    @EndpointInject(uri = ""mock:"" + MyRouteBuilder.EXIT_ENDPOINT)
    private MockEndpoint mockOutputServiceEndpoint;

    @Autowired
    private CamelContext camelContext;

    @Test
    public void testSomething() {
        ....
    }

    @Configuration
    public static class TestConfig extends SingleRouteCamelConfiguration {
        @Override
        protected void setupCamelContext(CamelContext camelContext) throws Exception {
            super.setupCamelContext(camelContext);
            PropertiesComponent prop = camelContext.getComponent(""properties"", PropertiesComponent.class);
            prop.setLocation(""myRouteBuilder.test.properties"");
        }

        @Override
        public RouteBuilder route() {
            return new MyRouteBuilder();
        }
    }




The issue we're having is that the @MockEndpointsAndSkip annotation on the test class does not resolve property placeholders, therefore we have to write the resolved value instead of the property placeholder value (which is a public static variable in the RouteBuilder implementation) I.e. we want to use MyRouteBuilder.EXIT_ENDPOINT instead of ""direct:myRouteBuilder.exit"".


It would be nicer to avoid having duplicate extra hard-coded Strings if possible, so that if the endpoint uri value is updated in the property file then all the tests don't also have to be updated.","njiang:1416769217:2014-11-24T03:00:17.797+0000:1416769217:2014-11-24T03:00:17.797+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches.
westerg:1416790473:2014-11-24T08:54:33.648+0000:1416790473:2014-11-24T08:54:33.648+0000:Looks like a straightforward change (reviewed in Fisheye). Thanks for the rapid fix!"
0,CAMEL-8063,Bug,Minor,2.13.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Jörg Peschke,0,3,2014-11-19 12:28:20+00:00,2017-10-13 12:24:32+00:00,"There is a bug the method ""initialize"" in ""MongoDbTailTrackingManager.java"": 


...
 if (trackingObj == null) 

{
            dbCol.insert(filter, WriteConcern.SAFE);
            trackingObj = dbCol.findOne();
 }

...


If no tail tracking object exists in the database, a new one will be inserted (that's okay), but the query ""dbCol.findOne()"" fetches ANY tail tracking object from the database (and not the one we've just inserted). 


In my oppinition, this is a bug and should be corrected like this: 
...
DBObject filter = new BasicDBObject(""persistentId"", config.persistentId);
trackingObj = dbCol.findOne(filter);
 if (trackingObj == null) 

{
            dbCol.insert(filter, WriteConcern.SAFE);
            trackingObj = dbCol.findOne(filter);
 }


(not tested).


A workaround can be implemented by putting each persistent tail tracker in it's own collection, so I marked this issue as ""minor"".


More details: http://camel.465427.n5.nabble.com/MongoDB-Persistent-tail-tracking-with-concurrent-tailable-consumers-td5759131.html


Best regards,
Joerg Peschke","njiang:1416445507:2014-11-20T09:05:07.058+0000:1416445507:2014-11-20T09:05:07.058+0000:Applied the patch into camel master branch.
Igorko:1507868613:2017-10-13T12:23:33.053+0000:1507868672:2017-10-13T12:24:32.437+0000:Hello. This was fixed in initialize() but still present in persistToStore() function

        Bson updateObj = Updates.set(config.field, lastVal);
        dbCol.updateOne(trackingObj, updateObj);
        trackingObj = dbCol.find().first();

If more then one tracker is present in one collection, after storing lastVal, each trackingObj will replaced by first one from collection. Should be

        trackingObj = dbCol.find(filter).first();

Issue present in version 2.20 in both mongodb and mongodb3 component."
0,CAMEL-8062,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-11-19 07:01:29+00:00,2014-11-19 07:03:46+00:00,When rx is done with the subscription it does not trigger the unsubscribe callback so we can stop the consumer.,
0,CAMEL-8061,Task,Major,None,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-11-18 13:18:40+00:00,2014-11-18 14:54:16+00:00,"See pojosr bug #13
https://code.google.com/p/pojosr/issues/detail?id=13


We need to workaround this by using a lower version of felix fileinstall when testing.


Otherwise we get endless NPE error in fileinstall that spikes the CPU",
0,CAMEL-8060,New Feature,Major,2.14.0,None,"

dataformat

",Resolved,Fixed,2.15.0,Willem Jiang,Antoine DESSAIGNE,0,4,2014-11-18 12:36:53+00:00,2015-03-05 10:31:33+00:00,"There's a library called uniVocity-parsers that provides implementations for reading and writing CSV files, fixed-width files and TSV files.


It's quite fast according to this benchmark. Obviously it may be biased since they're doing the benchmark, but they're also open enough to provide the source code of the benchmark so anyone can reproduce it.


So it would be nice to have data formats that uses those parsers.","githubbot:1416285616:2014-11-18T12:40:16.292+0000:1416285616:2014-11-18T12:40:16.292+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/335

    CAMEL-8060 Add data formats based on uniVocity-parsers

    There's a library called [uniVocity-parsers](https://github.com/uniVocity/univocity-parsers) that provides implementations for reading and writing CSV files, fixed-width files and TSV files.
    
    It's quite fast according to [this benchmark](https://github.com/uniVocity/csv-parsers-comparison). Obviously it may be biased since they're doing the benchmark, but they're also open enough to provide the source code of the benchmark so anyone can reproduce it.
    
    So it would be nice to have data formats that uses those parsers.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-8060

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/335.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #335
    
----
commit d375e7893c8ff76a56417e10f495fa524068d56d
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2014-11-18T12:38:13Z

    CAMEL-8060 Add data formats based on uniVocity-parsers

----

njiang:1416353715:2014-11-19T07:35:15.270+0000:1416353715:2014-11-19T07:35:15.270+0000:Merged the PR into Camel master branch with thanks to Antoine. Now it's time to update the document.
[~antoine.dessaigne] Do you mind add few pages for this new added data format?

antoine.dessaigne:1416355875:2014-11-19T08:11:15.188+0000:1416355875:2014-11-19T08:11:15.188+0000:Thanks a lot for merging the PR.

I will create few pages on confluence explaining how to use it.
githubbot:1416983052:2014-11-26T14:24:12.760+0000:1416983052:2014-11-26T14:24:12.760+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/335

njiang:1417142455:2014-11-28T10:40:55.298+0000:1417142455:2014-11-28T10:40:55.298+0000:Thanks for the document that Antoine added to camel.apache.org site.
davsclaus:1425520129:2015-03-05T09:48:49.094+0000:1425520129:2015-03-05T09:48:49.094+0000:[~antoine.dessaigne] this component fails on windows testing.

Do you mind taking a look and fix this? I am logging a ticket about this
antoine.dessaigne:1425522693:2015-03-05T10:31:33.606+0000:1425522693:2015-03-05T10:31:33.606+0000:Sure"
0,CAMEL-8059,Task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Thomas Diesler,0,3,2014-11-18 11:56:29+00:00,2014-11-18 15:52:30+00:00,"There are a number of issues with the Container API that make it unusable in WildFly



Concept of unsynchronised singleton
Call to 3rd party code with partially constructed objects
Unsynchronised access to a shared resource



Currently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel. I suspect that the Container API cannot be fixed in a compatible way.","githubbot:1416283154:2014-11-18T11:59:14.478+0000:1416283154:2014-11-18T11:59:14.478+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/334

    [CAMEL-8059] Add CamelContext creation hook

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-8059

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/334.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #334
    
----
commit 69a9f60b77418499007bed2c34190dd012300672
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2014-11-18T11:57:09Z

    [CAMEL-8059] Add CamelContext creation hook

----

davsclaus:1416293695:2014-11-18T14:54:55.215+0000:1416293695:2014-11-18T14:54:55.215+0000:Thanks for the PR
githubbot:1416297150:2014-11-18T15:52:30.054+0000:1416297150:2014-11-18T15:52:30.054+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/334
"
0,CAMEL-8058,Improvement,Minor,2.15.0,,"
None
",Resolved,Implemented,None,Unassigned,Claus Ibsen,0,4,2014-11-18 11:36:10+00:00,2015-07-09 11:22:54+00:00,"We have some custom code that figures out the line terminator.


But since Java 1.7 we can use
System.getProperty(""line.separator"")


There may be a few other spots with some code that can be replaced with apis from java7 onwards.","davidkarlsen@gmail.com:1416283699:2014-11-18T12:08:19.182+0000:1416283699:2014-11-18T12:08:19.182+0000:AFAIK the system property has been there for some time (e.g. pre 1.7).
But the method lineSeparator(): https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#lineSeparator-- is 1.7"
0,CAMEL-8057,Task,Major,None,2.15.0,"
None
",Resolved,Not A Problem,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-11-18 08:02:36+00:00,2015-02-12 07:47:51+00:00,"See
http://www.oracle.com/technetwork/java/javase/documentation/cve-2014-3566-2342133.html


In the
http://camel.apache.org/camel-configuration-utilities.html


We should disable SSLv3 (poddle) in the list of enabled protocols. There is code samples on the oracle link how to disable ssl v3 in the dynamic list of enabled protocols.",davsclaus:1423698471:2015-02-12T07:47:51.025+0000:1423698471:2015-02-12T07:47:51.025+0000:Ah Oracle has them disabled out of the box in JDK release onwards.
0,CAMEL-8056,Bug,Minor,None,None,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Peter Tulala,0,2,2014-11-17 16:07:51+00:00,2014-11-17 16:10:10+00:00,"Method URISupport#parseParameters translates %2B character sequence in URI into '+' character. Therefore all plus characters are interpreted as spaces.


Example: 


from(""webdirectory://example.com/?fileRegex=%5E%5B%5E%5C%3F%5D%2Bcmecat%5C.txt%24"").to(...)


Expected value of fileRegex parameter:


^\d+cmecat\.txt$


Actual value of fileRegex returned by DefaultComponent#getAndRemoveParameter:


^\d cmecat\.txt$",davsclaus:1416211810:2014-11-17T16:10:10.641+0000:1416211810:2014-11-17T16:10:10.641+0000:Make you component use the raw parameter to get the uri as-is
0,CAMEL-8055,New Feature,Minor,None,2.15.0,"

atmos
camel

",Resolved,Fixed,2.15.0,Willem Jiang,Alessio C,0,3,2014-11-17 14:10:04+00:00,2015-03-01 09:57:35+00:00,Create a camel component (producers and consumers ) for atmos integration.,"calessio:1416216204:2014-11-17T17:23:24.277+0000:1416216204:2014-11-17T17:23:24.277+0000:i'm working on it (branch CAMEL-8055 on my fork https://github.com/calessio/camel)
calessio:1416307306:2014-11-18T18:41:46.417+0000:1416307306:2014-11-18T18:41:46.417+0000:the first implementation is ready, i used the dropbox component as reference but using the Atmos SDK to access the storage.
https://github.com/apache/camel/pull/336
njiang:1416356125:2014-11-19T08:15:25.249+0000:1416356125:2014-11-19T08:15:25.249+0000:Hi Alessio,

Thanks for you contribution. I just merged your PR into camel-atmos branch and made some changes there.
I think we can keep polish it by getting the unit test and integration tests passed.

Regards,

Willem
davsclaus:1417561792:2014-12-03T07:09:52.129+0000:1417561792:2014-12-03T07:09:52.129+0000:Alessio do you continue to work on this, as we would need the component to be complete before we can include it out of the box.
calessio:1417570128:2014-12-03T09:28:48.257+0000:1417570128:2014-12-03T09:28:48.257+0000:The component is already complete, the included integrations test runs fine on private Atmos installation.
Additional features may be added in the feature, of course, but I consider it complete.
njiang:1422566578:2015-01-30T05:22:58.719+0000:1422566578:2015-01-30T05:22:58.719+0000:Merged the patch into camel master branch, it's time to add some document about this new added component.
davsclaus:1422835210:2015-02-02T08:00:10.591+0000:1422835210:2015-02-02T08:00:10.591+0000:Thanks we would need documentation for this. Is this something you can help with?

We need to add a child page here
http://camel.apache.org/components.html

And add a link to it from here
http://camel.apache.org/component-list
davsclaus:1424570549:2015-02-22T10:02:29.779+0000:1424570549:2015-02-22T10:02:29.779+0000:We still need documentation for this. So please help with this.
calessio:1424655076:2015-02-23T09:31:16.923+0000:1424655076:2015-02-23T09:31:16.923+0000:Sorry for the delay, i'll add the docs ASAP (i need a few weeks)
davsclaus:1425175049:2015-03-01T09:57:29.215+0000:1425175049:2015-03-01T09:57:29.215+0000:Alessio I logged a new ticket about the documentation so we can close this ticket."
0,CAMEL-8054,New Feature,Major,2.13.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Chris Watts,0,3,2014-11-16 11:14:50+00:00,2015-04-14 20:24:41+00:00,"When using JpaTransactionManager it ""Binds a JPA EntityManager from the specified factory to the thread"". Meaning that on top of the EntityManager created for each JpaConsumer, each time it creates a new EntityManager.


New property:
sharedEntityManager - whether to use spring's SharedEntityManager for the consumer/producer. Sets joinTransaction=false


Also added as a property to the JpaComponent.","davsclaus:1416197196:2014-11-17T12:06:36.693+0000:1416197196:2014-11-17T12:06:36.693+0000:I think we have improved/refactored camel-jpa for camel 2.14 or 2.15 to fix this.

From the git log its CAMEL-7364
wattsc3:1417908698:2014-12-07T07:31:38.630+0000:1417908698:2014-12-07T07:31:38.630+0000:The improvements made in CAMEL-7364 are more around reusing a passed in EntityManager for JpaMessageIdRepository / JpaProducer - that refactoring didn't really affect the consumer.

This change is really focused around the use case of a jpa consumer and the JpaTransactionManager (if using a JtaTransactionManager it may have an affect, depending on whether it's using CMP or not.

The first patch I submitted had a few bugs, attached (CAMEL-8054-sharedEntityManager-2.13.patch) is the complete patch for 2.13, including a unit test.
I'll do another patch for 2.14.
wattsc3:1418545443:2014-12-14T16:24:03.009+0000:1418545443:2014-12-14T16:24:03.009+0000:patch for 2.14
githubbot:1425322889:2015-03-03T03:01:29.848+0000:1425322889:2015-03-03T03:01:29.848+0000:GitHub user devgrok opened a pull request:

    https://github.com/apache/camel/pull/417

    CAMEL-8054: jpa shared entity manager

    When using JpaTransactionManager it ""Binds a JPA EntityManager from the specified factory to the thread"". Meaning that on top of the EntityManager created for each JpaConsumer, each time it creates a new EntityManager.
    
    New property:
    sharedEntityManager - whether to use spring's SharedEntityManager for the consumer/producer. Sets joinTransaction=false
    
    Also added as a property to the JpaComponent.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/devgrok/camel feat/jpa-sharedEntityManager

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/417.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #417
    
----
commit 37871e49bb4ab8f9514330def612c93dbf8e0488
Author: Chris Watts <wattsc3@anz.com>
Date:   2014-12-14T15:52:48Z

    CAMEL-8054: sharedEntityManager for 2.14

commit 010b19ded6a64136970cd9cc71f6c7291e71eeaf
Author: Chris Watts <wattsc3@anz.com>
Date:   2014-12-14T16:48:27Z

    merging auto-close entitymanager bugs

----

davsclaus:1428995615:2015-04-14T15:13:35.155+0000:1428995615:2015-04-14T15:13:35.155+0000:Thanks for the patch. 
githubbot:1429014281:2015-04-14T20:24:41.001+0000:1429014281:2015-04-14T20:24:41.001+0000:Github user devgrok closed the pull request at:

    https://github.com/apache/camel/pull/417
"
0,CAMEL-8053,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Benjamin Graf,0,2,2014-11-15 09:01:49+00:00,2014-11-21 02:05:02+00:00,"Dynamically adding/removing routes to camel causes registrations in org.apache.camel.builder.ErrorHandlerBuilderRef.handlers (Map<RouteContext, ErrorHandlerBuilder>) for RouteContext instances. Those never get removed and can cause leaks if memory consuming objects are attached in the RouteContext for example constant definitions.","njiang:1416179258:2014-11-17T07:07:38.378+0000:1416179258:2014-11-17T07:07:38.378+0000:I just have a quick look at the ErrorHandlerBuilderRef.addErrorHandlers() call reference, as the ErrorhandlerBuilderRef is referenced by RouteDefintion, if the reference to RouteDefintion is not used by other object, the ErrorHanlderBuilderRef will be collected.
Do you have other evidence to show the leak? 
graben:1416183250:2014-11-17T08:14:10.528+0000:1416183250:2014-11-17T08:14:10.528+0000:As far as I can remember there was a reference up to the BlueprintCamelContext in the heapDump. I can look back into it after I returned from holidays.
graben:1416301249:2014-11-18T17:00:49.445+0000:1416301249:2014-11-18T17:00:49.445+0000:Testcase to reproduce leaking error
njiang:1416506702:2014-11-21T02:05:02.539+0000:1416506702:2014-11-21T02:05:02.539+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8052,New Feature,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Camel Guy,0,4,2014-11-15 00:07:41+00:00,2014-11-19 16:41:25+00:00,"<removeProperties> would have the same attributes and behavior of <removeHeaders>, except it works on properties instead of headers.","acosentino:1416028987:2014-11-15T13:23:07.024+0000:1416028987:2014-11-15T13:23:07.024+0000:I think you are referring to camel-core component and not to camel-spring component.
acosentino:1416034808:2014-11-15T15:00:08.870+0000:1416034808:2014-11-15T15:00:08.870+0000:I'm working on this.
githubbot:1416039958:2014-11-15T16:25:58.538+0000:1416039958:2014-11-15T16:25:58.538+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/332

    Camel-8052 New Feature RemoveProperties on Exchange

    Hi all,
    
    This PR is related to:
    https://issues.apache.org/jira/browse/CAMEL-8052
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel feature-camel-8052

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/332.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #332
    
----
commit 2345ca4b950d5d764736171ee0d403f291d66198
Author: ancosen <ancosen@gmail.com>
Date:   2014-11-15T15:20:04Z

    New Feature Camel-8052 added

commit 77083593793634e5b18ddc8c008830c7948967c2
Author: ancosen <ancosen@gmail.com>
Date:   2014-11-15T16:15:22Z

    Improve comments and javadoc related to RemoveProperties

commit 149df99b672a4bee744a2cfb12f96f93021607ce
Author: ancosen <ancosen@gmail.com>
Date:   2014-11-15T16:21:45Z

    Camel-8052 fixed checkstyle

----

acosentino:1416039999:2014-11-15T16:26:39.058+0000:1416039999:2014-11-15T16:26:39.058+0000:PR submitted:
https://github.com/apache/camel/pull/332

Bye,
Andrea
njiang:1416179346:2014-11-17T07:09:06.193+0000:1416179346:2014-11-17T07:09:06.193+0000:Merged the patch into camel master branch with thanks to Andrea.
githubbot:1416180391:2014-11-17T07:26:31.489+0000:1416180391:2014-11-17T07:26:31.489+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/332

acosentino:1416184643:2014-11-17T08:37:23.494+0000:1416184643:2014-11-17T08:37:23.494+0000:Thank you Willem.
camelguy:1416386485:2014-11-19T16:41:25.402+0000:1416386485:2014-11-19T16:41:25.402+0000:Awesome! Thanks!"
0,CAMEL-8051,Bug,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Christian Schneider,Christian Schneider,0,1,2014-11-14 16:11:59+00:00,2014-11-14 16:15:48+00:00,"feature:repo-add camel 2.15-SNAPSHOT
feature:install -v camel-core


Karaf then tries to install the karaf shell console from karaf 2.4.0 which of course fails.


I first removed the reference to the karaf spring feature repo which transitively imported the karaf standard feature.


After that change it could not resolve the package:
(org.apache.felix.service.command)(version>=0.14.0)(!(version>=1.0.0)


The problem here was that we forgot status=provisional in the import.",
0,CAMEL-8050,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Jonathan Anstey,Jonathan Anstey,0,1,2014-11-14 14:28:22+00:00,2014-12-03 19:13:36+00:00,Looking at creating a component for accessing Google's calendar API https://developers.google.com/google-apps/calendar/v3/reference/,"janstey:1417524105:2014-12-02T20:41:45.180+0000:1417524105:2014-12-02T20:41:45.180+0000:Committed here: http://git-wip-us.apache.org/repos/asf/camel/commit/d3589e83

Still need to do up some docs."
0,CAMEL-8049,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Bojan Tomic,0,2,2014-11-14 12:34:28+00:00,2014-11-19 07:36:13+00:00,"Multi-valued HTTP request parameters are a common practice yet, with the provided binding, Camel Restlet component can not deal with them.
In DefaultRestletBinding, we can see the following problematic code:



public void populateRestletRequestFromExchange(Request request, Exchange exchange) {
...
     form.add(key, value.toString());
...
}




where the value is always treated as a String, even though it can be a Collection.


And similarly:



public void populateExchangeFromRestletRequest(Request request, Response response, Exchange exchange) throws Exception {
...
     for (Map.Entry<String, String> entry : form.getValuesMap().entrySet()) {
          ...
     }
...
}




where getValuesMap() effectively disregards all duplicate key names.","kaqqao:1415940056:2014-11-14T12:40:56.242+0000:1415940056:2014-11-14T12:40:56.242+0000:Supplying a naive patch
njiang:1416353773:2014-11-19T07:36:13.558+0000:1416353773:2014-11-19T07:36:13.558+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8048,Improvement,Major,2.13.3,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Alexey Markevich,0,2,2014-11-14 08:11:47+00:00,2014-11-20 11:24:33+00:00,org.apache.camel.main.Main with custom context overrides registry in case bind used,"njiang:1416453739:2014-11-20T11:22:19.972+0000:1416453739:2014-11-20T11:22:19.972+0000:Applied the patch into camel master branch with thanks to Alexey, I also change the order of registry to make sure the main registry is used first."
0,CAMEL-8047,Improvement,Minor,2.14.0,Future,"
None
",Resolved,Won't Fix,Future,Jean-Baptiste Onofré,Christian Schneider,0,3,2014-11-13 15:42:16+00:00,2019-07-31 08:55:13+00:00,"I found we have the class BundleDelegatingClassLoader in camel-core-osgi. I wonder if the same could be achieved by bundle.adapt(BundleWiring.class).getClassLoder ?


As we use the OSGi spec 4.3.1 now I think we can replace this.","davsclaus:1423193924:2015-02-06T11:38:44.781+0000:1423193924:2015-02-06T11:38:44.781+0000:Not sure if its a good idea to change this. But did you have a chance to try it out? If not then we can move this to the next release.
davsclaus:1441592798:2015-09-07T10:26:38.157+0000:1441592798:2015-09-07T10:26:38.157+0000:Christian are you working on this?
jbonofre:1558652384:2019-05-24T06:59:44.738+0000:1558652384:2019-05-24T06:59:44.738+0000:Resuming to see if this Jira still makes sense."
0,CAMEL-8046,New Feature,Major,2.14.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Christian Schneider,0,1,2014-11-13 15:00:45+00:00,2019-07-31 08:55:04+00:00,"Currently bundles using camel detect components at runtime. 


If a component is missing then there are two cases:



blueprint : The user bundle goes into graceperiod status and waits for the component to come up. In case the component is still missing there is a failure.
In other cases: Camel will simply display and error about the missing component.



The proper OSGi way to handle camel components would be to use capabilities and requirements. 
See
http://wiki.osgi.org/wiki/Provide-Capability
http://wiki.osgi.org/wiki/Require-Capability


So a bundle offering a component should have a capability to express that as well as the user bundle should have a requirement for the capability.


This will even allow a suitable OSGi resolver to auto install bundles that match the required capabilties. In any case it will make sure the required components are installed before the user bundle starts. 


So to support this the first decision is how to name the capability.
I propose: ""org.apache.camel.component"".


Then we have to decide how we name the components. I propose we use the component prefix. E.g ""file"" for the file component.


The next thing is to add the Provide-Capability headers to the components. This has to be done before the users start creating Require-Capability headers. 


To automate this step I propose to create a maven plugin that scans for META-INF/services/org/apache/camel/component/* files and creates suitable headers.",
0,CAMEL-8045,Bug,Minor,None,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2014-11-13 11:15:35+00:00,2014-11-13 11:28:14+00:00,"It's not possible to retrieve a certificate/public-key for encryption in the camel-xmlsecurity component, if the certificate in question is stored in a PrivateKeyEntry in the keystore. This is because the truststore password is incorrectly used (instead of the keyPassword) to retrieve the key.",
0,CAMEL-8044,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2014-11-13 10:41:19+00:00,2014-12-12 11:13:07+00:00,"The org.apache.camel.commands.CamelController which is used by the Camel commands to get the data, are currently tied to a local JVM only. We should make this support remoting so the commands can be used to control any JVMs with Camel whether that is local or remote.",
0,CAMEL-8043,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2014-11-12 19:30:01+00:00,2014-11-30 13:48:52+00:00,Same as the other tickets similar to this topic,
0,CAMEL-8042,Bug,Major,"2.11.2, 2.14.0",,"
None
",Resolved,Later,None,Willem Jiang,John McKeogh,0,4,2014-11-12 17:01:23+00:00,2017-03-13 11:32:16+00:00,"Hi,


Since Camel 2.11.2, The cxfClientCallBack doesn't seem to be honouring the exception that it is passed in.


Here is a copy of the HandleException funciton before and after 11.2
		2.11.1
		 public void handleException(Map<String, Object> ctx, Throwable ex) {
        try 

{
            super.handleException(ctx, ex);
            camelExchange.setException(ex); 
        }

 finally {
            // copy 


2.11.2
  public void handleException(Map<String, Object> ctx, Throwable ex) {
        try {
            super.handleException(ctx, ex);
            // need to call the conduitSelector complete method to enable the fail over feature
            ConduitSelector conduitSelector = cxfExchange.get(ConduitSelector.class);
            if (conduitSelector != null) {
                conduitSelector.complete(cxfExchange);
                ex = cxfExchange.getOutMessage().getContent(Exception.class);
                if (ex == null && cxfExchange.getInMessage() != null) 

{
                    ex = cxfExchange.getInMessage().getContent(Exception.class);
                }

                if (ex != null) 

{
                    camelExchange.setException(ex);
                }

            } else 

{
                camelExchange.setException(ex);
            }

        } finally {


So for our testcase where we have a cxf client calling through camel to a Corba web service, the exception that the webservice is passing back to camel is no longer honoured.


I believe this change was introduced by the following jira:
https://issues.apache.org/jira/browse/CAMEL-6609


I have attached the wsdl of the corba web-service.
In the service we are calling PingMe expecting to get back a PingMeFault_Exception. The exception is set in the cxf corba binding and reached the exception handler in camel. But the exception is no longer being sent back to the client. Instead a generic SoapFaultException is reaching the client.


Cheers,
John.","njiang:1416247380:2014-11-18T02:03:00.884+0000:1416247380:2014-11-18T02:03:00.884+0000:I use CXF 2.7.11 wsdl2java to generate the artifacts from the attached WSDL, I cannot find any PingMeFault_Exception class.
Which version of CXF are you using? Did your have some error handler for the camel route?
johnmckeogh:1416276976:2014-11-18T10:16:16.858+0000:1416276976:2014-11-18T10:16:16.858+0000:I was using cxf 2.7.12 but the one you are using should be fine.
wsdl2java.bat -p com.iona.cxf.router -verbose greeter-corba.wsdl should generate the PingMeFault_Exception class.
johnmckeogh:1416277069:2014-11-18T10:17:49.484+0000:1416277069:2014-11-18T10:17:49.484+0000:Also there was no error handler for the camel route.
davsclaus:1417605206:2014-12-03T19:13:26.937+0000:1417605206:2014-12-03T19:13:26.937+0000:What is the status of this ticket?
johnmckeogh:1417655137:2014-12-04T09:05:37.620+0000:1417655137:2014-12-04T09:05:37.620+0000:This is still an issue for us.
njiang:1417720865:2014-12-05T03:21:05.173+0000:1417720865:2014-12-05T03:21:05.173+0000:Hi John,
Could you submit a simple test case for it?
It could save us some time to reproduce the error.


khalligan:1418191462:2014-12-10T14:04:22.280+0000:1418191462:2014-12-10T14:04:22.280+0000:Here's the testcase (maven based) that's using the Sun CORBA ORB backend with a soap client talking to the corba server via camel.

Prior to 2.11.1 the User exception thrown in the PingMe() method, was being propagated back into the client side, since then that exception type gets lost and the generic SOAPFault is seen instead.

Here's a patch that's the starting of a fix for things here, it's just a workaround for the CORBA things for now.
{code}
diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xml
index 3cc32a8..f144448 100644
--- a/components/camel-cxf/pom.xml
+++ b/components/camel-cxf/pom.xml
@@ -208,6 +208,12 @@
     </dependency>

     <dependency>
+      <groupId>org.apache.cxf</groupId>
+      <artifactId>cxf-rt-bindings-corba</artifactId>
+      <version>${cxf-version}</version>
+    </dependency>
+
+    <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-jetty</artifactId>
       <scope>test</scope>
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java b/components/camel
-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java
index bcef9cf..3519d26 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfClientCallback.java
@@ -20,6 +20,7 @@ import java.util.Map;

 import org.apache.camel.AsyncCallback;
 import org.apache.camel.Exchange;
+import org.apache.cxf.binding.corba.CorbaConduit;
 import org.apache.cxf.endpoint.ClientCallback;
 import org.apache.cxf.endpoint.ConduitSelector;
 import org.apache.cxf.service.model.BindingOperationInfo;
@@ -71,7 +72,8 @@ public class CxfClientCallback extends ClientCallback {
             super.handleException(ctx, ex);
             // need to call the conduitSelector complete method to enable the fail over feature
             ConduitSelector conduitSelector = cxfExchange.get(ConduitSelector.class);
-            if (conduitSelector != null) {
+            if (conduitSelector != null &&
+                ! (conduitSelector.selectConduit(cxfExchange.getOutMessage()) instanceof CorbaConduit)) {
                 conduitSelector.complete(cxfExchange);
                 ex = cxfExchange.getOutMessage().getContent(Exception.class);
                 if (ex == null && cxfExchange.getInMessage() != null) {
{code}
davsclaus:1427099952:2015-03-23T16:39:12.566+0000:1427099952:2015-03-23T16:39:12.566+0000:We should not have dependency on corba in camel-cxf
davsclaus:1489112811:2017-03-10T10:26:51.176+0000:1489112811:2017-03-10T10:26:51.176+0000:Closing inactive tickets
johnmckeogh:1489375935:2017-03-13T11:32:15.651+0000:1489375935:2017-03-13T11:32:15.651+0000:Thank you for your Email. I am currently out of the office. I will be returning on Monday 13th March.
"
0,CAMEL-8041,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2014-11-12 15:42:48+00:00,2014-12-18 12:22:48+00:00,"The current Camel commands are Karaf implemented only. But we can make that pluggable so we have a core command module with the generic implementation, and then a plugin for when running in karaf.


We can then provider other plugins for other environments, such as a jolokia based that works with JVMs that has jolokia agent installed.",
0,CAMEL-8040,Bug,Major,"2.13.0, 2.14.0",,"
None
",Closed,Not A Problem,None,Willem Jiang,Josef Ludvíček,0,2,2014-11-12 12:41:05+00:00,2014-12-12 15:14:00+00:00,"camel-hdfs2 consumer overwriting data instead of appending them


There is probably bug in camel hdfs2 consumer.


In this project are two camel routes, one taking files from `test-source` and uploading them to hadoop hdfs,
another route watching folder in hadoop hdfs and downloading them to `test-dest` folder in this project.


It seems, that when downloading file from hdfs to local filesystem, it keeps writing chunks of data to begining of target file in test-source, instead of simply appending chunks, as I would expect.
From camel log i suppose, that each chunk of data from hadoop file is treated it was whole file.


Ruby script `generate_textfile.rb` can generate file `test.txt` with content 



0 - line
1 - line
2 - line
3 - line
4 - line
5 - line
...
...
99999 - line




Scenario



expecting running hadoop instance on localhost:8020
run mvn camel:run
copy test.txt into test-source
see log and file test.txt in test-dest
rest.txt in test-dest folder should contain only last x lines of original one.



Camel log 



[localhost:8020/tmp/camel-test/] toFile                     INFO  picked up file from hdfs with name test.txt
[localhost:8020/tmp/camel-test/] toFile                     INFO  file downloaded from hadoop
[localhost:8020/tmp/camel-test/] toFile                     INFO  picked up file from hdfs with name test.txt
[localhost:8020/tmp/camel-test/] toFile                     INFO  file downloaded from hadoop
[localhost:8020/tmp/camel-test/] toFile                     INFO  picked up file from hdfs with name test.txt
[localhost:8020/tmp/camel-test/] toFile                     INFO  file downloaded from hadoop
[localhost:8020/tmp/camel-test/] toFile                     INFO  picked up file from hdfs with name test.txt
[localhost:8020/tmp/camel-test/] toFile                     INFO  file downloaded from hadoop




Envoriment



camel 2.14 and 2.13
hadoop VirtualBox VM
* downloaded from http://www.cloudera.com/content/cloudera/en/downloads/quickstart_vms/cdh-5-2-x.html
* tested with version 2.3.0-cdh5.1.0, r8e266e052e423af592871e2dfe09d54c03f6a0e8 which I couldn't find on download page
hadoop docker image
* https://github.com/sequenceiq/hadoop-docker
* results were the same as with virtualbox vm



In case ov VirtualBox VM, by default it binds hdfs to `hdfs://quickstart.cloudera:8020` and it needs to be changed in `/etc/hadoop/conf/core-site.xml`. It should work when `fs.defaultFS` is set to `hdfs://0.0.0.0:8020`.


In case of docker hadoop image, first start docker container, figure out its ip address, and use it for camel hdfs component.
Here camel uri would be `hdfs:172.17.0.2:9000/tmp/camel-test`.



 
docker run -i -t sequenceiq/hadoop-docker:2.5.1 /etc/bootstrap.sh -bash

Starting sshd:                                             [  OK  ]
Starting namenodes on [966476255fc2]
966476255fc2: starting namenode, logging to /usr/local/hadoop/logs/hadoop-root-namenode-966476255fc2.out
localhost: starting datanode, logging to /usr/local/hadoop/logs/hadoop-root-datanode-966476255fc2.out
Starting secondary namenodes [0.0.0.0]
0.0.0.0: starting secondarynamenode, logging to /usr/local/hadoop/logs/hadoop-root-secondarynamenode-966476255fc2.out
starting yarn daemons
starting resourcemanager, logging to /usr/local/hadoop/logs/yarn--resourcemanager-966476255fc2.out
localhost: starting nodemanager, logging to /usr/local/hadoop/logs/yarn-root-nodemanager-966476255fc2.out




see to which IP hdfs filesystem api is bound to inside docker container



bash-4.1# netstat -tulnp 
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   
...
tcp        0      0 172.17.0.2:9000             0.0.0.0:*                   LISTEN      -                   
...




There might be Exception because of hdfs permissions. It could be solved by setting hdfs filesystem permissions.



bash-4.1# /usr/local/hadoop/bin/hdfs dfs -chmod 777 /","njiang:1418275696:2014-12-11T13:28:16.644+0000:1418275696:2014-12-11T13:28:16.644+0000:Hi Josef,

I just checked your camel route,  your file endpoint is using the default setting of fileExist which is override the file. That could explain why camel keeps write new chunck to the same file. 
You can get it work by changing the route just like this:
{code}
       <camel:route id=""toFile"" autoStartup=""true"">
            <from uri=""hdfs2:localhost:8020/tmp/camel-test/""/>
            <log message=""picked up file from hdfs with name $simple{header.CamelFileName}""/>
            <to uri=""file:test-dest?fileExist=Append""/>
            <log message=""file downloaded from hadoop""/>
        </camel:route>
{code}

Please check out this [page|https://camel.apache.org/file2] for more information.
ludvicekj:1418277972:2014-12-11T14:06:12.357+0000:1418278185:2014-12-11T14:09:45.620+0000:Hi Williem, 

yeah, but the docs says that ""Override, which is the default, replaces the existing *file*.""
But from what I see, it is replacing *chunks of that file* so in the end, I don't even have valid file, just last data chunk of original file from hadoop.
If it was picture, it would be corrupted.

It looks like camel handles data chunk (with size of bufferSize - default 4096) as it was the whole file.

njiang:1418363831:2014-12-12T13:57:11.776+0000:1418363831:2014-12-12T13:57:11.776+0000:Hi Josef,

I double check the camel route that you have, you are using the default setting of hdfs and file endpoints. Unfortunately, the default setting of file endpoint is not work as you expected.
 
If you take a look at the [HDFS2|https://camel.apache.org/hdfs2], you can find the chunkSize option is for ""When reading a normal file, this is split into chunks producing a message per chunk."" As the file endpoint is in Override mode, it just treat the new trunk block in the message body as a new file body, so it keep override it. If you want to get the whole file, you need to setup the file endpoint fileExist option to Append.


ludvicekj:1418368210:2014-12-12T15:10:10.397+0000:1418368210:2014-12-12T15:10:10.397+0000:I totally missed option {{chunkSize}}. Thanks for explaining it.
Created improvement docs issue CAMEL-8150."
0,CAMEL-8039,Improvement,Trivial,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Matteo Pavesi,0,2,2014-11-12 11:01:29+00:00,2014-11-13 13:48:41+00:00,"The CircuitBreaker EIP described in ReleaseIt! has an halfOpen state. It means that after the halfOpen time timeout, the circuitBreaker is accepting one more exchange and it close the circuit only if the processor succeeds.


This is not implemented in Camel, I would like to propose the attached patch with code and test for implementing the HalfOpen state.","Matteo Pavesi:1415761367:2014-11-12T11:02:47.247+0000:1415761367:2014-11-12T11:02:47.247+0000:Improvement for the camel CircuitBreaker EIP implementation
Matteo Pavesi:1415764830:2014-11-12T12:00:30.267+0000:1415764830:2014-11-12T12:00:30.267+0000:The proposed implementation and testing
njiang:1415857721:2014-11-13T13:48:41.779+0000:1415857721:2014-11-13T13:48:41.779+0000:Applied the patch into camel master branch with thanks to Matteo."
0,CAMEL-8038,Sub-task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-11-12 09:43:02+00:00,2014-12-02 08:01:54+00:00,"The components that are uri annotation documented need to define one @UriPath to map to the uri context path.


This is now mistakenly mapped to a @UriParam.",
0,CAMEL-8037,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2014-11-12 07:19:14+00:00,2014-11-12 08:54:54+00:00,"for example then people can configure the enums more safely without the hazzle of case,


exchangePattern=inout


output=dom


Where the enum is named DOM etc",
0,CAMEL-8036,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-11-12 04:33:00+00:00,2015-10-20 13:43:23+00:00,"As we create multiple consumer for the rest component, it could introduce an issue that camel could add security handler more than once if user setup the security handler on the rest endpoint.","njiang:1416446084:2014-11-20T09:14:44.302+0000:1416446084:2014-11-20T09:14:44.302+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8035,Bug,Major,2.10.7,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Peter Easton,0,2,2014-11-11 17:05:52+00:00,2014-11-13 01:21:29+00:00,This is the JAXRS counterpart to https://issues.apache.org/jira/browse/CAMEL-6188,"njiang:1415812889:2014-11-13T01:21:29.849+0000:1415812889:2014-11-13T01:21:29.849+0000:Applied patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-8034,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2014-11-11 14:41:05+00:00,2014-11-12 08:54:46+00:00,"It does not provide all its configuration options in the endpoint, but ""cheat"" by doing its own parsing in the component class.",
0,CAMEL-8003,Task,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Babak Vahdat,Babak Vahdat,0,1,2014-11-06 18:32:25+00:00,2014-11-06 19:19:12+00:00,"This is currently what you end up with:



~/dev/workspace/camel/examples/camel-example-etl>mvn camel:run
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: ETL 2.15-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> camel-maven-plugin:2.15-SNAPSHOT:run (default-cli) > test-compile @ camel-example-etl >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-etl ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ camel-example-etl ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-example-etl ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 7 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default) @ camel-example-etl ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 7 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-etl ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- openjpa-maven-plugin:2.3.0:enhance (enhancer) @ camel-example-etl ---
34  camel  INFO   [main] openjpa.Tool - Enhancer running on type ""class org.apache.camel.example.etl.CustomerEntity"".
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-example-etl ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-etl ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-maven-plugin:2.15-SNAPSHOT:run (default-cli) < test-compile @ camel-example-etl <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.15-SNAPSHOT:run (default-cli) @ camel-example-etl ---
[INFO] Using org.apache.camel.spring.Main to initiate a CamelContext
[INFO] Starting Camel ...
2014-11-06 19:26:34,698 [ing.Main.main()] INFO  MainSupport                    - Apache Camel 2.15-SNAPSHOT starting
2014-11-06 19:26:34,780 [ing.Main.main()] INFO  ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4e01255e: startup date [Thu Nov 06 19:26:34 CET 2014]; root of context hierarchy
2014-11-06 19:26:34,816 [ing.Main.main()] INFO  XmlBeanDefinitionReader        - Loading XML bean definitions from file [/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/target/classes/META-INF/spring/camel-context.xml]
2014-11-06 19:26:36,154 [ing.Main.main()] INFO  LocalEntityManagerFactoryBean  - Building JPA EntityManagerFactory for persistence unit 'camel'
2014-11-06 19:26:36,642 [ing.Main.main()] INFO  SpringCamelContext             - Apache Camel 2.15-SNAPSHOT (CamelContext: camel) is starting
2014-11-06 19:26:36,643 [ing.Main.main()] INFO  SpringCamelContext             - Tracing is enabled on CamelContext: camel
2014-11-06 19:26:36,644 [ing.Main.main()] INFO  ManagedManagementStrategy      - JMX is enabled
2014-11-06 19:26:36,833 [ing.Main.main()] INFO  DefaultTypeConverter           - Loaded 181 type converters
2014-11-06 19:26:36,916 [ing.Main.main()] INFO  JpaComponent                   - Using EntityManagerFactory configured: org.springframework.orm.jpa.LocalEntityManagerFactoryBean@7e28ed26
2014-11-06 19:26:36,916 [ing.Main.main()] INFO  JpaComponent                   - Using TransactionManager configured on this component: org.springframework.orm.jpa.JpaTransactionManager@30e99a7f
2014-11-06 19:26:36,927 [ing.Main.main()] INFO  SpringCamelContext             - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2014-11-06 19:26:36,927 [ing.Main.main()] INFO  SpringCamelContext             - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2014-11-06 19:26:36,930 [ing.Main.main()] INFO  FileEndpoint                   - Endpoint is configured with noop=true so forcing endpoint to be idempotent as well
2014-11-06 19:26:36,930 [ing.Main.main()] INFO  FileEndpoint                   - Using default memory based idempotent repository with cache max size: 1000
2014-11-06 19:26:36,977 [ing.Main.main()] INFO  SpringCamelContext             - Route: route1 started and consuming from: Endpoint[file://src/data?noop=true]
583  camel  INFO   [org.apache.camel.spring.Main.main()] openjpa.Runtime - Starting OpenJPA 2.3.0
694  camel  INFO   [org.apache.camel.spring.Main.main()] openjpa.jdbc.JDBC - Using dictionary class ""org.apache.openjpa.jdbc.sql.DerbyDictionary"".
1172  camel  INFO   [org.apache.camel.spring.Main.main()] openjpa.jdbc.JDBC - Connected to Apache Derby version 10.10 using JDBC driver Apache Derby Embedded JDBC Driver version 10.10.2.0 - (1582446). 
2014-11-06 19:26:37,939 [ing.Main.main()] INFO  SpringCamelContext             - Route: route2 started and consuming from: Endpoint[jpa://org.apache.camel.example.etl.CustomerEntity?consumeDelete=false&consumeLockEntity=false&delay=3000]
2014-11-06 19:26:37,939 [ing.Main.main()] INFO  SpringCamelContext             - Total 2 routes, of which 2 is started.
2014-11-06 19:26:37,940 [ing.Main.main()] INFO  SpringCamelContext             - Apache Camel 2.15-SNAPSHOT (CamelContext: camel) started in 1.297 seconds
2014-11-06 19:26:37,994 [file://src/data] INFO  Tracer                         - ID-cbox-local-49360-1415298395855-0-2 >>> (route1) from(file://src/data?noop=true) --> convertBodyTo[org.apache.camel.example.etl.PersonDocument] <<< Pattern:InOnly, Headers:{CamelFileAbsolute=false, breadcrumbId=ID-cbox-local-49360-1415298395855-0-1, CamelFilePath=src/data/row1.xml, CamelFileNameOnly=row1.xml, CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row1.xml, CamelFileNameConsumed=row1.xml, CamelFileParent=src/data, CamelFileLastModified=1411328048000, CamelFileName=row1.xml, CamelFileRelativePath=row1.xml, CamelFileLength=155}, BodyType:org.apache.camel.component.file.GenericFile, Body:[Body is file based: GenericFile[row1.xml]]
2014-11-06 19:26:38,011 [file://src/data] INFO  StaxConverter                  - Created XMLInputFactory: com.sun.xml.internal.stream.XMLInputFactoryImpl@1f3b070c. DOMSource/DOMResult may have issues with com.sun.xml.internal.stream.XMLInputFactoryImpl@1f3b070c. We suggest using Woodstox.
2014-11-06 19:26:38,036 [file://src/data] INFO  Tracer                         - ID-cbox-local-49360-1415298395855-0-2 >>> (route1) convertBodyTo[org.apache.camel.example.etl.PersonDocument] --> jpa://org.apache.camel.example.etl.CustomerEntity <<< Pattern:InOnly, Headers:{CamelFileRelativePath=row1.xml, CamelFileLength=155, CamelFileParent=src/data, CamelFilePath=src/data/row1.xml, CamelFileName=row1.xml, CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row1.xml, CamelFileAbsolute=false, breadcrumbId=ID-cbox-local-49360-1415298395855-0-1, CamelFileLastModified=1411328048000, CamelFileNameConsumed=row1.xml, CamelFileNameOnly=row1.xml}, BodyType:org.apache.camel.example.etl.PersonDocument, Body:<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>

2014-11-06 19:26:38,061 [file://src/data] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-cbox-local-49360-1415298395855-0-1 on ExchangeId: ID-cbox-local-49360-1415298395855-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.InvalidPayloadRuntimeException: No body available of type: org.apache.camel.example.etl.CustomerEntity but has value: Person[user: james] of type: org.apache.camel.example.etl.PersonDocument on: Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
 due java.lang.NullPointerException on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [file://src/data?noop=true                                                     ] [        71]
[route1            ] [convertBodyTo1    ] [convertBodyTo[org.apache.camel.example.etl.PersonDocument]                    ] [        30]
[route1            ] [to1               ] [jpa:org.apache.camel.example.etl.CustomerEntity                               ] [        38]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-cbox-local-49360-1415298395855-0-2
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-cbox-local-49360-1415298395855-0-1, CamelFileAbsolute=false, CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row1.xml, CamelFileLastModified=1411328048000, CamelFileLength=155, CamelFileName=row1.xml, CamelFileNameConsumed=row1.xml, CamelFileNameOnly=row1.xml, CamelFileParent=src/data, CamelFilePath=src/data/row1.xml, CamelFileRelativePath=row1.xml, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            org.apache.camel.example.etl.PersonDocument
	Body                <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><person user=""james"">    <firstName>James</firstName>    <lastName>Strachan</lastName>    <city>London</city></person>
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.InvalidPayloadRuntimeException: No body available of type: org.apache.camel.example.etl.CustomerEntity but has value: Person[user: james] of type: org.apache.camel.example.etl.PersonDocument on: Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
 due java.lang.NullPointerException on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
]
	at org.apache.camel.component.jpa.JpaEndpoint$1.evaluate(JpaEndpoint.java:313)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:57)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:152)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:304)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:147)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:425)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""james"">
    <firstName>James</firstName>
    <lastName>Strachan</lastName>
    <city>London</city>
</person>
 due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:567)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:174)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)
	at org.apache.camel.component.jpa.JpaEndpoint$1.evaluate(JpaEndpoint.java:310)
	... 25 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1367)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1004)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:165)
	... 27 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.example.etl.CustomerTransformer$1.doInTransaction(CustomerTransformer.java:76)
	at org.apache.camel.example.etl.CustomerTransformer$1.doInTransaction(CustomerTransformer.java:74)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)
	at org.apache.camel.example.etl.CustomerTransformer.findCustomerByName(CustomerTransformer.java:74)
	at org.apache.camel.example.etl.CustomerTransformer.toCustomer(CustomerTransformer.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1000)
	... 30 more
2014-11-06 19:26:38,065 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@43d027d5 for file: GenericFile[row1.xml]
2014-11-06 19:26:38,066 [file://src/data] INFO  Tracer                         - ID-cbox-local-49360-1415298395855-0-4 >>> (route1) from(file://src/data?noop=true) --> convertBodyTo[org.apache.camel.example.etl.PersonDocument] <<< Pattern:InOnly, Headers:{CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row2.xml, CamelFilePath=src/data/row2.xml, CamelFileNameOnly=row2.xml, CamelFileLastModified=1411328048000, CamelFileNameConsumed=row2.xml, breadcrumbId=ID-cbox-local-49360-1415298395855-0-3, CamelFileAbsolute=false, CamelFileName=row2.xml, CamelFileParent=src/data, CamelFileRelativePath=row2.xml, CamelFileLength=153}, BodyType:org.apache.camel.component.file.GenericFile, Body:[Body is file based: GenericFile[row2.xml]]
2014-11-06 19:26:38,068 [file://src/data] INFO  Tracer                         - ID-cbox-local-49360-1415298395855-0-4 >>> (route1) convertBodyTo[org.apache.camel.example.etl.PersonDocument] --> jpa://org.apache.camel.example.etl.CustomerEntity <<< Pattern:InOnly, Headers:{CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row2.xml, breadcrumbId=ID-cbox-local-49360-1415298395855-0-3, CamelFileParent=src/data, CamelFileNameConsumed=row2.xml, CamelFileRelativePath=row2.xml, CamelFilePath=src/data/row2.xml, CamelFileAbsolute=false, CamelFileName=row2.xml, CamelFileNameOnly=row2.xml, CamelFileLength=153, CamelFileLastModified=1411328048000}, BodyType:org.apache.camel.example.etl.PersonDocument, Body:<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>

2014-11-06 19:26:38,073 [file://src/data] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-cbox-local-49360-1415298395855-0-3 on ExchangeId: ID-cbox-local-49360-1415298395855-0-4). Exhausted after delivery attempt: 1 caught: org.apache.camel.InvalidPayloadRuntimeException: No body available of type: org.apache.camel.example.etl.CustomerEntity but has value: Person[user: hiram] of type: org.apache.camel.example.etl.PersonDocument on: Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
 due java.lang.NullPointerException on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
]

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [file://src/data?noop=true                                                     ] [         6]
[route1            ] [convertBodyTo1    ] [convertBodyTo[org.apache.camel.example.etl.PersonDocument]                    ] [         1]
[route1            ] [to1               ] [jpa:org.apache.camel.example.etl.CustomerEntity                               ] [         5]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-cbox-local-49360-1415298395855-0-4
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-cbox-local-49360-1415298395855-0-3, CamelFileAbsolute=false, CamelFileAbsolutePath=/Users/bvahdat/dev/workspace/camel/examples/camel-example-etl/src/data/row2.xml, CamelFileLastModified=1411328048000, CamelFileLength=153, CamelFileName=row2.xml, CamelFileNameConsumed=row2.xml, CamelFileNameOnly=row2.xml, CamelFileParent=src/data, CamelFilePath=src/data/row2.xml, CamelFileRelativePath=row2.xml, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            org.apache.camel.example.etl.PersonDocument
	Body                <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><person user=""hiram"">    <firstName>Hiram</firstName>    <lastName>Chirino</lastName>    <city>Tampa</city></person>
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.InvalidPayloadRuntimeException: No body available of type: org.apache.camel.example.etl.CustomerEntity but has value: Person[user: hiram] of type: org.apache.camel.example.etl.PersonDocument on: Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
. Caused by: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
 due java.lang.NullPointerException on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
]
	at org.apache.camel.component.jpa.JpaEndpoint$1.evaluate(JpaEndpoint.java:313)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:57)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:152)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:304)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:147)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:425)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:433)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:211)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.camel.example.etl.CustomerEntity with value <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<person user=""hiram"">
    <firstName>Hiram</firstName>
    <lastName>Chirino</lastName>
    <city>Tampa</city>
</person>
 due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:567)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:174)
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99)
	at org.apache.camel.component.jpa.JpaEndpoint$1.evaluate(JpaEndpoint.java:310)
	... 25 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1367)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1004)
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:165)
	... 27 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.example.etl.CustomerTransformer$1.doInTransaction(CustomerTransformer.java:76)
	at org.apache.camel.example.etl.CustomerTransformer$1.doInTransaction(CustomerTransformer.java:74)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)
	at org.apache.camel.example.etl.CustomerTransformer.findCustomerByName(CustomerTransformer.java:74)
	at org.apache.camel.example.etl.CustomerTransformer.toCustomer(CustomerTransformer.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1000)
	... 30 more
2014-11-06 19:26:38,074 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@43d027d5 for file: GenericFile[row2.xml]
1897  camel  TRACE  [Camel (camel) thread #1 - jpa://org.apache.camel.example.etl.CustomerEntity] openjpa.jdbc.SQL - <t 552944470, conn 1175966721> executing prepstmnt 2111506687 
SELECT t0.id, t0.city, t0.firstName, t0.phone, t0.street, t0.surname, 
        t0.userName, t0.zip 
    FROM customer t0 

1898  camel  TRACE  [Camel (camel) thread #1 - jpa://org.apache.camel.example.etl.CustomerEntity] openjpa.jdbc.SQL - <t 552944470, conn 1175966721> [1 ms] spent
^C2014-11-06 19:26:38,555 [Thread-1       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2014-11-06 19:26:38,555 [Thread-1       ] INFO  MainSupport                    - Apache Camel 2.15-SNAPSHOT stopping
2014-11-06 19:26:38,555 [Thread-1       ] INFO  ClassPathXmlApplicationContext - Closing org.springframework.context.support.ClassPathXmlApplicationContext@4e01255e: startup date [Thu Nov 06 19:26:34 CET 2014]; root of context hierarchy
2014-11-06 19:26:38,556 [Thread-1       ] INFO  SpringCamelContext             - Apache Camel 2.15-SNAPSHOT (CamelContext: camel) is shutting down
2014-11-06 19:26:38,556 [Thread-1       ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 2 routes (timeout 300 seconds)
2014-11-06 19:26:38,559 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[jpa://org.apache.camel.example.etl.CustomerEntity?consumeDelete=false&consumeLockEntity=false&delay=3000]
2014-11-06 19:26:38,559 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete, was consuming from: Endpoint[file://src/data?noop=true]
2014-11-06 19:26:38,559 [Thread-1       ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 2 routes completed in 0 seconds
2014-11-06 19:26:38,575 [Thread-1       ] INFO  SpringCamelContext             - Apache Camel 2.15-SNAPSHOT (CamelContext: camel) uptime 1.933 seconds
2014-11-06 19:26:38,575 [Thread-1       ] INFO  SpringCamelContext             - Apache Camel 2.15-SNAPSHOT (CamelContext: camel) is shutdown in 0.019 seconds
2014-11-06 19:26:38,577 [Thread-1       ] INFO  LocalEntityManagerFactoryBean  - Closing JPA EntityManagerFactory for persistence unit 'camel'",
0,CAMEL-8002,Improvement,Minor,2.12.2,,"
None
",Resolved,Abandoned,None,Unassigned,Daniel Pocock,0,3,2014-11-06 15:12:22+00:00,2022-09-02 08:54:19+00:00,"SmppSmCommand.determineAlphabet(Message) tries to work out which SMPP alphabet code is suitable for encoding the message text.


It checks if GSM 3.38 can represent all the characters in the message and if not it just uses UCS2 (UTF-16).


This is less than optimal.  Many messages using European languages can not be encoded in GSM 3.38 but they can be coded in Latin1, which is also supported by SMPP (data_coding / alphabet numeric code for Latin1 is 3)


The jSMPP library (Alphabet.java) does not currently know about the alphabet code 3.


I proposed a patch for jSMPP and if it is accepted then camel-smpp should be updated to use it.  I already started writing a patch against camel-smpp.  Here is the jSMPP patch:


https://github.com/uudashr/jsmpp/pull/39","githubbot:1415260374:2014-11-06T15:52:54.838+0000:1415260374:2014-11-06T15:52:54.838+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/317

    (work in progress) fix for CAMEL-8002, support for Latin1 coded SMS over SMPP

    
    Please discuss through the Jira issue: https://issues.apache.org/jira/browse/CAMEL-8002

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-smpp

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/317.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #317
    
----
commit 1c4e4e9aa0f59af6136b1cd7fa4eee7da38eacdc
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-05T15:49:58Z

    Use UCS2 encoding if UCS2 alphabet specified

commit be729adb020ff9bc2c660ea6a916a68cd503a7b9
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-05T16:56:35Z

    SmppUtils.isGsm0338Encodeable() expects Latin1 input, only use it if encoding is Latin1 or ASCII

commit b0fa26afe21718a39c759ba13b0309da9034e3c6
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-06T15:50:12Z

    Begin fixing CAMEL-8002, depends on pull req. 39 in jsmpp

----

davsclaus:1423970211:2015-02-15T11:16:51.203+0000:1423970211:2015-02-15T11:16:51.203+0000:Can we get a status of all those smpp tickets and PR and patches?
daniel.pocock:1423988406:2015-02-15T16:20:06.085+0000:1423988406:2015-02-15T16:20:06.085+0000:As noted earlier, this is still work-in-progress. I just had a quick look over the code and it appears valid but may need further testing.  Some of my other un-merged changes depend on updating the jSMPP 2.2.x (CAMEL-8219) but that is not a blocker for this issue.

A resolution of this issue will make it easier for people to use SMPP without having to think about encoding issues.  At present, people have to think about encoding issues before giving their message to camel-smpp.
daniel.pocock:1423989629:2015-02-15T16:40:29.759+0000:1423989629:2015-02-15T16:40:29.759+0000:Actually, part of the branch / pull request for this work does depend on the changes to Alphabet.java in jSMPP 2.2.x
githubbot:1437369831:2015-07-20T13:23:51.189+0000:1437369831:2015-07-20T13:23:51.189+0000:Github user dpocock closed the pull request at:

    https://github.com/apache/camel/pull/317

davsclaus:1464415279:2016-05-28T14:01:19.689+0000:1464415279:2016-05-28T14:01:19.689+0000:We have just upgraded to jsmpp 2.2.x. Wonder if you have time to look at this again?"
0,CAMEL-8001,Bug,Major,2.12.2,"2.13.4, 2.14.1, 2.15.0","

patch

",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Daniel Pocock,0,4,2014-11-06 15:01:12+00:00,2014-12-05 03:28:01+00:00,"The method SmppUtils.isGsm0338Encodeable(byte[]) expects the input data to be Latin1 encoded (or a subset of Latin1, such as ASCII)


The method SmppSmCommand.determineAlphabet(Message) prepares an argument by calling String.getBytes(charset) without checking the charset is Latin1 or compatible.","daniel.pocock:1415257460:2014-11-06T15:04:20.366+0000:1415257460:2014-11-06T15:04:20.366+0000:This patch checks the charset is Latin1 (or compatible) and if not does not try to check the text is GSM 3.38 suitable.
muellerc:1415625937:2014-11-10T21:25:37.379+0000:1415625937:2014-11-10T21:25:37.379+0000:This patch cannot be merged into the Camel master branch.
Daniel, could you please check and reattach the corrected patch!?
githubbot:1416824048:2014-11-24T18:14:08.603+0000:1416824048:2014-11-24T18:14:08.603+0000:GitHub user dpocock opened a pull request:

    https://github.com/apache/camel/pull/339

    Dpocock bug 8001

    See https://issues.apache.org/jira/browse/CAMEL-8001

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dpocock/camel dpocock-bug-8001

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/339.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #339
    
----
commit c72c327cad45e79416ef5f524eba0bb4c95f07f2
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-24T18:11:31Z

    CAMEL-8001: Add javadoc comments about the expectation that the argument is ISO-8859-1 encoded

commit 1945bde0e522b50da626bf9d1650bedee074f1d9
Author: Daniel Pocock <daniel@pocock.pro>
Date:   2014-11-24T18:12:34Z

    CAMEL-8001: only try to use SmppUtils.isGsm0338Encodeable for content that can already be ISO-8859-1 encoded

----

daniel.pocock:1416824069:2014-11-24T18:14:29.670+0000:1416824069:2014-11-24T18:14:29.670+0000:I've submitted as a pull request

https://github.com/apache/camel/pull/339
njiang:1417721281:2014-12-05T03:28:01.320+0000:1417721281:2014-12-05T03:28:01.320+0000:Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Daniel."
0,CAMEL-8000,Improvement,Major,2.14.0,None,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Thomas Diesler,0,3,2014-11-06 13:51:16+00:00,2014-11-26 09:17:54+00:00,"There are a number of issues with the Container API that make it unusable in WildFly



Concept of unsynchronised singleton
Call to 3rd party code with partially constructed objects
Unsynchronised access to a shared resource



Currently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel.


I suspect that the Container API cannot be fixed in a compatible way. 
Instead the notion of a CamelContextRegistry that fixes the issues with Container may need to get added.","githubbot:1415324980:2014-11-07T09:49:40.624+0000:1415324980:2014-11-07T09:49:40.624+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/322

    [CAMEL-8000] Add global notion of CamelContextRegistry

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel bug8000

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/322.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #322
    
----
commit 6f428a8390910786de64abd4771604a213171842
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2014-11-07T09:48:15Z

    [CAMEL-8000] Add global notion of CamelContextRegistry

----

tdiesler:1415360768:2014-11-07T19:46:08.176+0000:1415360768:2014-11-07T19:46:08.176+0000:merci
tdiesler:1415598973:2014-11-10T13:56:13.767+0000:1415599956:2014-11-10T14:12:36.418+0000:Reopened. The DefaultCamelContextRegistry contract has been weakened by [this|https://github.com/apache/camel/commit/cdee7809bf801faf504d06047d5763d57bc4067f] commit.

The DefaultCamelContextRegistry implementation gives package protected access to add/remove camel contexts to the camel runtime. Clients are not expected to manage the set of registered contexts.

Registered listeners are owned by the client which registered the listener.
Neither the camel runtime nor non-owning clients can control the set of registered listeners. 

Adding a public DefaultCamelContextRegistry.clear() method would break this contract.
tdiesler:1415599887:2014-11-10T14:11:27.698+0000:1415599887:2014-11-10T14:11:27.698+0000:Pull request sent: https://github.com/apache/camel/pull/322
davsclaus:1415953100:2014-11-14T16:18:20.502+0000:1415953100:2014-11-14T16:18:20.502+0000:The clear is needed as the registry is pre filled

Results :

Failed tests:
  CamelContextRegistryTest.testContainerSet:57 expected:<2> but was:<107>

Though that smells the registry leaks during testing, and its likely better to turn the registry off by default, and if ppl want to use it they need to enable it explict.

I fear that it can lead to class loader leaks and whatnot for people in environments where they depeploy apps and whatnot.
tdiesler:1416204720:2014-11-17T14:12:00.547+0000:1416204785:2014-11-17T14:13:05.968+0000:The clear() shadows an issue with insufficiently defined context lifecycle. 

AFAICS, a CamelContext is owned by the client that creates it. The client therefore also controls the (softly defined) identity and the sharing. The context ends life when the client does no longer hold a reference to it. A call to CamelContext.stop() is optional.

We are now trying to introduce an entity that has a lifecycle that outlives individual contexts and (although it does not own them) holds references to them. To model this properly, we would probably want to have something like a CamelRuntime - similar to Framework and Bundle in OSGi. The runtime is the owner of all contexts, it provides a view of all registered contexts, it can be queried and possibly own other constructs that are applicable to multiple contexts (i.e. defaults for newly created contexts). This would be a larger change to camel and probably requires a lot more thought.

CamelContextRegistry.clear() is still wrong, but it is also wrong to assume that a context gets an non-optional call to CamelContext.stop() which ends its life. 

The registry probably needs to hold weak references, to avoid hogging of stale contexts.
tdiesler:1416282854:2014-11-18T11:54:14.660+0000:1416282854:2014-11-18T11:54:14.660+0000:Closing as won't fix and removing what has been done already. 

If there is no defined create/destroy lifecycle for the CamelContext the system cannot reliably maintain the set of contexts.

As mentioned before, it is incorrect to call into 3rd party code with a partially constructed object. There is also no defined integration point to remove a context from a potential registry.

If a higher level API needs a context registry it should maintain it itself. The camel core layer should only need to provide an integration hook but no registry itself.

The existing Container API (among other flaws) also has a memory leak. Contexts that are created but never stopped will not get removed from the internal set when no Container is registered.
githubbot:1416964674:2014-11-26T09:17:54.359+0000:1416964674:2014-11-26T09:17:54.359+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/322
"
0,CAMEL-7999,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,4,2014-11-06 13:40:37+00:00,2015-03-01 07:44:11+00:00,"A Camel release contains many components, and we have the ability to let components document which options they offer.


Though there is currently a few shortcomings that can be improved



the component json schema is currently runtime generated, which requires to load the component and create an instance of it. Instead we should build-time generate it, which we do today with the camel apt compiler plugin. DONE




we should include documentation about the option from the javadoc, that allows end users to fully document a component using plain java getter/settr with javadocs, and add those @UriParam annotations for the apt compiler to detect and leverage DONE




add a module that embeds all these json schema files in a single module, and also other information, such as the xml schemas, and what else can be handy. Then there is a single module as a one stop shop for tooling and whatnot to gather information about a Camel release. There is a new camel-catalog module that contains this now. DONE




allow at runtime to explain an endpoint uri what the options in use are, eg as we got the json schema, we can add mbeans that can explain those options, than we can use in tooling, JMX, karaf commands etc. And also IDE editors etc DONE




add JMX/Java API to explain a EIP and also get a tabular data with a list of all EIPs and their data. DONE




enrich the dsl xml to inject javadoc for the eips into the xml schema, so we have documented in the xsd directly that any tooling can use. We have a old ticket about this. But the apt compiler plugin can detect the @JAXB annotations in the model and extract the javadoc, and generate a json schema with, and then we can load those and enrich into the generated xsd, or enrich into the jaxb model generator, or something.




migrate more Camel components to include javadoc as documentation for their options DONE for all camel-core. Other components will be migrated over time.




figure out how to specify a default value in the json schema. Unfortunately the apt plugin cannot grab that from the source code. So the only solution I can think of now is to add an attribute to the @UriParam where you can specify that, eg this is also what I have seen others do. There is now a defaultValue attribute on UriParam to be used. DONE




add component summary to component json file so we have a description of what the component does DONE




add attribute to @UriEndpoint to link it to the component class, so we can include the class name of the component in the json schema, which allows Camel to link from component class -> schema. eg the point is that if people define a component as ""activemq"" we do not know its the jms schema that has its documentation. Though we can infer this by the component class name. And alternative is for a component to have an api to return its original schema name etc. So activemq can say ""jms"" etc. We can resolve this by iterating the component data, and find the FQN of the components. DONE




add @UriComponent annotation to component class which allows end users to provide meta-data about the component. Currently we grab a summary of what the component does from the maven pom.xml. Though this annotation prepares us for being able to scan the component class as well for which option it provides, so we can have out of the box documentation for that also. We detect getter/setter pairs as component options, and the apt plugin generates those in the schema. Use @Metadata to configure the options. DONE




add JMX/Java API to explain a component and also get a tabular data with a list of all components and that data. DONE




improve karaf commands to use the component information to show that also DONE




add name of karaf feature of the component, eg its 99% came-xxx, but there may be some exceptions. We can likely add a property to the maven plugin that generates component.properties to include the karaf feature name as the artifactId by default. But allow to set a property in the pom.xml in case there is another name, or no karaf feature




add support for @UriPath in apt plugin DONE




javadoc documentation is not acessible from components which extend other components (eg javadoc from source code of parent components). For example camel-ftp extending file in camel-core etc. Added description to @UriParam to be used for this purpose. DONE




add support for associating label(s) to a endpoint so we can group the various Camel components. A bit like this page: http://camel.apache.org/component-list-grouped.html DONE




rename @Label to something more generic like @Metadata or something, so we can introduce new attributes for new stuff. For example a link which refers to the project website, or an icon to refer to an icon that symbol the component, etc. DONE




we now support components + eip with json schema and documentation and jmx + commands out of the box. We should look into adding the same for languages and data formats. Then we have all of them covered.DONE","davsclaus:1415767120:2014-11-12T12:38:40.383+0000:1415767120:2014-11-12T12:38:40.383+0000:The @UriPath is now included in the list of options. There is a kind attribute as discriminator that is ""path"" or ""parameter"" depending on if its to be used as part of  the uri path, or as a query parameter.
davsclaus:1422497786:2015-01-29T10:16:26.731+0000:1422497786:2015-01-29T10:16:26.731+0000:The choice schema does not include the list of when expressions, there is only the otherwise.
davsclaus:1423612591:2015-02-11T07:56:31.603+0000:1423612591:2015-02-11T07:56:31.603+0000:We have ticket CAMEL-8334 where the last pieces for the EIP in the XSD is missing."
0,CAMEL-7998,New Feature,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Thomas Termin,0,3,2014-11-06 11:49:31+00:00,2014-12-16 06:48:40+00:00,An config parameter should be added to support connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port. That might on some circumstances not what is expected e.g. sending a lot of data.,"tterm001:1415245817:2014-11-06T11:50:17.311+0000:1415245817:2014-11-06T11:50:17.311+0000:I will provide that feature.
githubbot:1415275000:2014-11-06T19:56:40.357+0000:1415275000:2014-11-06T19:56:40.357+0000:GitHub user tterm opened a pull request:

    https://github.com/apache/camel/pull/318

    CAMEL-7998 Support connection less udp sending

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tterm/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/318.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #318
    
----
commit bd37b6398d9d183937f40a2f32856473960d1763
Author: tterm <tterm@strace.org>
Date:   2014-11-06T19:21:33Z

    CAMEL-7998 Support connection less udp sending

----

githubbot:1415275505:2014-11-06T20:05:05.488+0000:1415275505:2014-11-06T20:05:05.488+0000:GitHub user tterm opened a pull request:

    https://github.com/apache/camel/pull/319

    CAMEL-7998 Support connection less udp sending

    The same fix for the camel-2.14.x branch to have this in the next camel-2.14.1 release if possible

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tterm/camel camel-2.14.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/319.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #319
    
----
commit a983e22c7da4e8397b1e05ab7528491b9eb169e3
Author: tterm <tterm@strace.org>
Date:   2014-11-06T19:52:53Z

    CAMEL-7998 Support connection less udp sending

----

tterm001:1415581131:2014-11-10T08:58:51.740+0000:1415581131:2014-11-10T08:58:51.740+0000:We should also do not call the bind if it is a connected udp. Should I close the pull request and open a new one? Because if we call bind and then connect we have to channels where the first one is created but never used which might results in problems.
njiang:1415581634:2014-11-10T09:07:14.650+0000:1415581634:2014-11-10T09:07:14.650+0000:Hi Thomas,

You can submit another pull request for the binding issue.
I'm in the middle of merge the patch to camel-netty, I will take a look the issue once I finished the merge.

Regards,

Willem
tterm001:1415595625:2014-11-10T13:00:25.694+0000:1415595625:2014-11-10T13:00:25.694+0000:Done.
tterm001:1415601435:2014-11-10T14:37:15.766+0000:1415601435:2014-11-10T14:37:15.766+0000:Hello Willem,

The second commit is in the same pull request. Is that right or wrong? Github did this automatically. Or should i wait for integration and after that reopen a complete new pull request? Sorry for asking again and again. It is the first time for me working this way.
njiang:1415602442:2014-11-10T14:54:02.496+0000:1415602442:2014-11-10T14:54:02.496+0000:Hi Thomas,
Don't worry, I can see the new commit from the github web site. I will merge it tomorrow.
BTW, I already merge the first commit into master branch.
Regards,
Willem
tterm001:1415834988:2014-11-13T07:29:48.881+0000:1415834988:2014-11-13T07:29:48.881+0000:Hi Willem,

I realized that you integrated all changes. Many thanks. Will you backport the changes to camel-2.14.x also? Can I close the pull request now?

Regards,
Thomas
githubbot:1415848321:2014-11-13T11:12:01.033+0000:1415848321:2014-11-13T11:12:01.033+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/318

njiang:1415858454:2014-11-13T14:00:54.954+0000:1415858454:2014-11-13T14:00:54.954+0000:update the wiki page for the new added option.
githubbot:1418683720:2014-12-16T06:48:40.174+0000:1418683720:2014-12-16T06:48:40.174+0000:Github user tterm closed the pull request at:

    https://github.com/apache/camel/pull/319
"
0,CAMEL-7997,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Unassigned,Jyrki Ruuskanen,0,5,2014-11-06 08:32:27+00:00,2015-03-01 08:27:29+00:00,Support module and archetype for running Camel in Service Component Runtime (OSGi Declarative Services) bundles.,"githubbot:1415236727:2014-11-06T09:18:47.216+0000:1415236727:2014-11-06T09:18:47.216+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/316

    CAMEL-7997 New modules: camel-scr, camel-archetype-scr

    Support module and archetype for running Camel in Service Component Runtime (OSGi Declarative Services) bundles.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/316.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #316
    
----
commit 1ba89bc56e0f2a79f4c23df3f36606aa3176bd1c
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-11-05T19:49:17Z

    Initial commit for camel-scr

commit 65e440e7ce3c936012d974d40d4274fcaf3119b2
Author: yuruki <yuruki@kotikone.fi>
Date:   2014-11-06T08:03:06Z

    Added license information, readme files

----

davsclaus:1415490520:2014-11-09T07:48:40.336+0000:1415490520:2014-11-09T07:48:40.336+0000:Thanks - looking at the PR now.

You may want to sign the ICLA so you can help with the documentation.
http://camel.apache.org/how-do-i-edit-the-website.html

We likely need some new doc linked from
http://camel.apache.org/user-guide.html

maybe titled

Working with Camel and Karaf using SCR


davsclaus:1415493538:2014-11-09T08:38:58.219+0000:1415493538:2014-11-09T08:38:58.219+0000:Thanks I have pushed the work so far.

There is a few things to work on

- archetype should use vanilla Apache Camel / Karaf (eg remove jboss fuse)
- the sample route should likely be simpler, to have a basic project setup
- camel-scr should be and osgi bundle, and not embedded from end user applications - I partly fixed that
- there is a camel-scr feature to install this, which you would need to do
- would be nice with an example in examples/camel-example-scr that is easily to install and try for end users
- review of the code in camel-scr. I suspect there is something to improve
- documentation
githubbot:1415684632:2014-11-11T13:43:52.477+0000:1415684632:2014-11-11T13:43:52.477+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/329

    CAMEL-7997 working on camel-scr todos

    * Removed JBoss Fuse references.
    * Projects generated by camel-archetype-scr now run in vanilla Karaf (2.4.0).
    * Got rid of public fields in AbstractCamelRunner.
    * Simplified the example route.
    * Added some documentation

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-todos

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/329.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #329
    
----
commit cdc7afc157f1c565ef9491a92b7f23d5c1f8d8eb
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-11-10T18:52:06Z

    First crack at todos in CAMEL-7997

commit ea5265d7079adbb85196290af6b221ed065c69a0
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-11-10T20:07:48Z

    Use Karaf pom versions

commit c82e74397f4df3c0544fd94f3286501afdbb5dcf
Author: yuruki <yuruki@kotikone.fi>
Date:   2014-11-11T13:20:16Z

    Added readme for camel-archetype-scr, improved generated project readme

----

githubbot:1415684756:2014-11-11T13:45:56.289+0000:1415684756:2014-11-11T13:45:56.289+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/316

yuruki:1416094014:2014-11-16T07:26:54.782+0000:1416094038:2014-11-16T07:27:18.775+0000:The pull request (https://github.com/apache/camel/pull/329) has been updated.
githubbot:1416211548:2014-11-17T16:05:48.103+0000:1416211548:2014-11-17T16:05:48.103+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/329

yuruki:1417064938:2014-11-27T13:08:58.377+0000:1417064938:2014-11-27T13:08:58.377+0000:Initial version of the user guide published at https://camel.apache.org/camel-and-scr.html.
githubbot:1417084600:2014-11-27T18:36:40.534+0000:1417084600:2014-11-27T18:36:40.534+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/343

    CAMEL-7997 Working on camel-scr

    Working on camel-scr and camel-archetype-scr.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-scr-work

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/343.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #343
    
----
commit 7c52e7e2fccd3d3da172448ef1d0813a2a6b8612
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-11-27T18:30:13Z

    Align code with the wiki

----

davsclaus:1423192871:2015-02-06T11:21:11.240+0000:1423192871:2015-02-06T11:21:11.240+0000:We would also need to add some documentation about this new camel-scr component.
githubbot:1424475507:2015-02-21T07:38:27.860+0000:1424475507:2015-02-21T07:38:27.860+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/343
"
0,CAMEL-7996,Bug,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Henryk Konsek,Henryk Konsek,0,1,2014-11-05 12:00:47+00:00,2014-11-05 12:04:12+00:00,"After new DbObject is persisted, the user can't retrieve the OID of the stored record. We should store the OID in the header so this construct should be possible:



from(""direct:..."").
  to(""mongodb:...operation=insert"").setBody().header(MongoDbConstants.OID);",hekonsek:1415160252:2014-11-05T12:04:12.648+0000:1415160252:2014-11-05T12:04:12.648+0000:Resolved in 1a6f5c394830a713dfe65221a39a57beb60f9504.
0,CAMEL-7995,Improvement,Major,None,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Claus Ibsen,Claus Ibsen,0,2,2014-11-04 08:45:28+00:00,2014-11-05 18:35:28+00:00,"When you define routes using {{ }} placeholders, they get resolved when Camel builds the runtime route. And the route model gets updated with the resolved values, eg so {{ }} gets replaced with the value.


So when you dump the route model as xml (eg as source) then you loose the {{ }} placeholders and see the actual values.


We should allow to keep the {{ }} so the route model is 100% as designed, but we should also store the resolved values that the runtime route is using, so you can see those values as well.","davsclaus:1415062028:2014-11-04T08:47:08.247+0000:1415062028:2014-11-04T08:47:08.247+0000:For example you may develop this route
{code}
<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">		  
 <route>			
    <from uri=""timer:{{fromTimer}}""/> 
	<setBody>
          <method ref=""helloBean"" method=""hello"" />
	</setBody>
    <log message=""The message contains ${body}"" />
    <to uri=""mock:{{destination}}""/>
  </route>
</camelContext>
{code}

Which at runtime becomes dumped as source as
{code}
<route xmlns=""http://camel.apache.org/schema/spring"" id=""route1"">
 <from uri=""timer:foo""/>
  <setBody>
   <method ref=""helloBean"" method=""hello""/>
  </setBody>
 <log message=""The message contains ${body}""/>
 <to uri=""mock:end""/>
</route>
{code}

So what we want is being able to dump the route as source using the original {{ }} placeholders. That would require an option / new API operation to specify with or without the {{ }}.
ggrzybek:1415103258:2014-11-04T20:14:18.212+0000:1415103342:2014-11-04T20:15:42.543+0000:Because Camel model (JAXB-based) elements (e.g. processor definitions) can have many String properties which can be defined using placeholders (_templates_), to support marshalling to XML (via JAXB) in two modes (with placeholders and with replaced values) we should actually keep two {{*Definition}} objects because (for example) template values in {{ProcessorDefinition}} are replaced with actual values when {{Processor}} instances are created.
Maybe processor definition could keep a copy if itself from the moment it was created (something like instance→template relationship)?

Also there's inconsistency: {{ProcessorDefinition}} instances have their placeholder values replaced with actual values when the {{Processor}} is created. But this is not the case for {{FromDefinition}} which only provides it's (probably parameterized with placeholder) value of {{uri}} in {{org.apache.camel.model.FromDefinition#resolveEndpoint()}}."
0,CAMEL-7994,Bug,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Aaron Whiteside,0,2,2014-11-03 21:32:05+00:00,2014-11-04 03:06:23+00:00,"SJMSComponent effectively ignores setConnectionCount()


This is because the JmsProducer, by default, pre-populates sessions+producers on Producer.doStart(), which is called by the CamelContext in a single thread and the way the ConnectionFactoryResource is configured, it returns the most recently idle connection (So really it always returns the first connection opened). So all sessions being pre-populated by all SJMS endpoints always use the same single connection.


This patch attached makes the ConnectionFactoryResource effectively return connections in a round-robbin manor. Unit test is included.


This is important because TCP has a certain overhead per socket which makes it impossible to achieve much more than 6k~ messages a second, regardless of the CPU and IO resources available to a broker. To fully utilize a broker multiple connections must be opened.


This is also important if your ConnectionFactory represent a cluster (Like in the case of HornetQ), where subsequent connections from the factory are balanced across nodes in the cluster.",njiang:1415041583:2014-11-04T03:06:23.491+0000:1415041583:2014-11-04T03:06:23.491+0000:Applied the patch into camel master branch with thanks to Aaron.
0,CAMEL-7993,Task,Trivial,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-11-03 14:06:42+00:00,2014-11-07 10:01:02+00:00,"SftpOperations.java contains this log statement:


LOG.trace(""Setting chmod: {} on file: "", mode, targetName);


It needs another set of brackets after file, otherwise it does not report the file name.","githubbot:1414995277:2014-11-03T14:14:37.468+0000:1414995277:2014-11-03T14:14:37.468+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/314

    CAMEL-7993 Add brackets to log statement

    Otherwise the file name will not be printed.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7993

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/314.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #314
    
----
commit c5c8de82b09a794bf3afe4e600932bbb3b667b4e
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-11-03T14:13:20Z

    CAMEL-7993 Add brackets to log statement

----

davsclaus:1415183978:2014-11-05T18:39:38.927+0000:1415183978:2014-11-05T18:39:38.927+0000:Thanks for the PR
githubbot:1415325662:2014-11-07T10:01:02.498+0000:1415325662:2014-11-07T10:01:02.498+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/314
"
0,CAMEL-7992,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Thomas Diesler,0,2,2014-11-03 13:43:16+00:00,2014-11-05 12:16:24+00:00,"camel-cdi does no longer work on wildfly-9.0



org.jboss.weld.exceptions.IllegalStateException: WELD-000143: Container lifecycle event method invoked outside of extension observer method invocation.
	at org.jboss.weld.bootstrap.events.ContainerEvent.checkWithinObserverNotification(ContainerEvent.java:61)
	at org.jboss.weld.bootstrap.events.ProcessAnnotatedTypeImpl.getAnnotatedType(ProcessAnnotatedTypeImpl.java:56)
	at org.apache.camel.cdi.internal.CamelContextConfig.configure(CamelContextConfig.java:47)
	at org.apache.camel.cdi.internal.CamelContextBean.configureCamelContext(CamelContextBean.java:131)
	at org.apache.camel.cdi.internal.CamelExtension.startConsumeBeans(CamelExtension.java:231)




To reproduce, build: https://github.com/tdiesler/wildfly-camel/tree/2.0


Cross Issue: https://issues.jboss.org/browse/WFLY-4046","njiang:1415160968:2014-11-05T12:16:08.139+0000:1415160968:2014-11-05T12:16:08.139+0000:Applied the patch into camel master ,camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7991,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Andreas C. Osowski,0,3,2014-11-02 15:27:49+00:00,2014-11-06 02:32:24+00:00,"The current S3 Producer implementation does not use S3's MultiPartUpload functionality. Therefore, the whole data blob needs to be buffered in memory before it can be uploaded to S3.


Using MultiPartUpload, the blob can be uploaded in chunks thereby drastically reducing the required memory.","aosowski:1414927295:2014-11-02T19:21:35.397+0000:1414927295:2014-11-02T19:21:35.397+0000:Previous patch did not include file deletion after a successful upload.
davsclaus:1415184120:2014-11-05T18:42:00.243+0000:1415184120:2014-11-05T18:42:00.243+0000:Thanks for the patch.

We need the new options documented at
http://camel.apache.org/aws
njiang:1415212344:2014-11-06T02:32:24.308+0000:1415212344:2014-11-06T02:32:24.308+0000:Updated the wiki page for the new added option."
0,CAMEL-7990,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-11-01 14:27:44+00:00,2014-11-01 14:56:54+00:00,"See SO
http://stackoverflow.com/questions/26453348/camel-onexception-doesnt-catch-nomessageidexception-of-idempotentconsumer


The idempotent consumer should set the exchange on the exchange and invoke the callback, that is an internal routing engine bug in the implementation of that eip.",
0,CAMEL-7989,Bug,Minor,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-11-01 08:06:34+00:00,2014-11-01 10:19:13+00:00,"See nabble
http://camel.465427.n5.nabble.com/Problems-configuring-FileIdempotentRepository-tp5758212.html


The file store should be created on startup so the file store is always available.",
0,CAMEL-7988,Bug,Major,"2.13.3, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,2,2014-11-01 08:02:50+00:00,2014-11-01 10:19:23+00:00,"See nabble
http://camel.465427.n5.nabble.com/Possible-issue-with-FileLockExclusiveReadLockStrategy-leaves-orphaned-camelLock-file-tp5758142.html


This could cause a .camelLock orphaned file to be there causing the file to not be eligible for consuming on next poll.",
0,CAMEL-7987,Task,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,1,2014-10-31 14:53:21+00:00,2014-11-05 18:40:49+00:00,For example camel-core -javadoc JAR has a stylesheet.css file embedded that is a bit wrong as the Apache header in the top seems to have cut off some of the css file.,"davsclaus:1414738490:2014-10-31T14:54:50.185+0000:1414738490:2014-10-31T14:54:50.185+0000:See issue reported here
https://github.com/hawtio/hawtio/issues/1637"
0,CAMEL-7986,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Peter Keller,0,1,2014-10-31 14:26:28+00:00,2014-11-01 14:57:12+00:00,"With below route configuration with routeId defined as route1, route2 and intentionally omitted routeId for the 3rd route, Camel will auto-generate a routeId with format as route + count for you if you didn't define it. This seems to cause some routes to be missed.


Route definitions:



 from(""direct:start1"")
     .routeId(""route1"")
     .log(""route1: ${body}"");

 from(""direct:start2"")
      .routeId(""route2"")
      .log(""route2: ${body}"");

 from(""direct:start3"") // no route id!
      .log(""route3: ${body}"");




Testing:



 ProducerTemplate template = context.createProducerTemplate();
 template.sendBody(""direct:start1"", ""World!"");
 template.sendBody(""direct:start2"", ""World!"");




This leads to following exception:



    Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: Endpoint[direct://start1]


If the direct:start3 route is deleted or the ID ""route1"" is renamed, then everything works as expected. 


See http://stackoverflow.com/questions/26646881/route-is-not-detected-when-route-id-is-not-assigned-does-camelcontext-loses-the/26673144#26673144",
0,CAMEL-7985,Improvement,Minor,2.14.0,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Grzegorz Grzybek,Claus Ibsen,0,4,2014-10-30 10:35:13+00:00,2019-12-19 17:36:48+00:00,"We get a bunch of these errors during testing with osgi blueprint



In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)
In main loop, we have serious trouble: java.lang.NullPointerException
java.lang.NullPointerException
	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:303)




Run tests here



camel/tests/camel-blueprint-cxf-test (master)/$ mvn clean install




And upgrade Felix in parent/pom.xml



-    <felix-configadmin-version>1.4.0</felix-configadmin-version>
-    <felix-fileinstall-version>3.2.6</felix-fileinstall-version>
-    <felix-framework-version>3.2.2</felix-framework-version>
+    <felix-configadmin-version>1.8.0</felix-configadmin-version>
+    <felix-fileinstall-version>3.4.2</felix-fileinstall-version>
+    <felix-framework-version>3.4.2</felix-framework-version>




And you get these NPEs.


Maybe something needs to be fixed in camel-test-blueprint with that pojosr library, so bundle 0 is that system bundle, as the NPE is at:
https://github.com/apache/felix/blame/trunk/fileinstall/src/main/java/org/apache/felix/fileinstall/internal/DirectoryWatcher.java#L303","davsclaus:1414636825:2014-10-30T10:40:25.085+0000:1414636825:2014-10-30T10:40:25.085+0000:The same NPE bugs is when you run mvn clean install in camel-test-blueprint.
davsclaus:1414637129:2014-10-30T10:45:29.453+0000:1414637129:2014-10-30T10:45:29.453+0000:The issue is that pojosr inserts itself as bundle 0, so osgi becomes bundle 1. And felix assume bundle 0 is osgi

davsclaus:1414637596:2014-10-30T10:53:16.951+0000:1414637596:2014-10-30T10:53:16.951+0000:Logged ticket with the bug at pojosr
https://code.google.com/p/pojosr/issues/detail?id=13&thanks=13&ts=1414666384
davsclaus:1414639405:2014-10-30T11:23:25.604+0000:1414639405:2014-10-30T11:23:25.604+0000:This requires a fix in pojosr or in felix to handle that bundle 0 is not osgi-core
davsclaus:1415184269:2014-11-05T18:44:29.506+0000:1576748208:2019-12-19T17:36:48.659+0000:[~gnodet] wonder if you can do pojosr releases? Or can reach out to that community to get a new pojosr release with this fix. Another way is to add a workaroud in felix fileinstall to avoid that repearted logging, which does CPU spike. eg when there is an exception the loop does not sleep for 1 sec which it otherwise does by default, causing CPU spikes. 

ggrzybek:1433469679:2015-06-05T10:01:19.793+0000:1433469713:2015-06-05T10:01:53.611+0000:Looks fine with felix-connect 0.1.0 and upgrade of flieinstall/felix-framework:
{noformat}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.183 sec - in org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test
Running org.apache.camel.test.cxf.blueprint.CxfConsumerWSRMTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.078 sec - in org.apache.camel.test.cxf.blueprint.CxfConsumerWSRMTest
Running org.apache.camel.test.cxf.blueprint.CxfEndpointBeansTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.858 sec - in org.apache.camel.test.cxf.blueprint.CxfEndpointBeansTest
Running org.apache.camel.test.cxf.blueprint.CxfPayloadProviderRouterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.194 sec - in org.apache.camel.test.cxf.blueprint.CxfPayloadProviderRouterTest
Running org.apache.camel.test.cxf.blueprint.CxfRsEndpointBeansTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.163 sec - in org.apache.camel.test.cxf.blueprint.CxfRsEndpointBeansTest
Running org.apache.camel.test.cxf.blueprint.CxfTransportBlueprintTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.147 sec - in org.apache.camel.test.cxf.blueprint.CxfTransportBlueprintTest

Results :

Tests run: 13, Failures: 0, Errors: 0, Skipped: 0
{noformat}

Change:
{noformat}
+    <felix-connect-version>0.1.0</felix-connect-version>
     <!-- need to keep using the older 3.2.8 that do not cause NPE issues when using pojosr - see pojosr bug #13 -->
-    <felix-fileinstall-pojosr-version>3.2.8</felix-fileinstall-pojosr-version>
-    <felix-framework-version>3.2.2</felix-framework-version>
+    <felix-fileinstall-pojosr-version>3.4.2</felix-fileinstall-pojosr-version>
+    <felix-framework-version>3.4.2</felix-framework-version>
{noformat}
ggrzybek:1433470082:2015-06-05T10:08:02.196+0000:1433470082:2015-06-05T10:08:02.196+0000:Works even with latest flieinstall 3.5.0. felix-framework isn't actually used in the tests.
ggrzybek:1433472742:2015-06-05T10:52:22.206+0000:1433472742:2015-06-05T10:52:22.206+0000:Fixed by replacing PojoSR with felix-connect
githubbot:1438184337:2015-07-29T23:38:57.166+0000:1438184337:2015-07-29T23:38:57.166+0000:GitHub user luigidemasi opened a pull request:

    https://github.com/apache/camel/pull/578

    Backport of the fix for CAMEL-7985 from trunk that makes camel-test-blueprint  usable again.

    Backport  CAMEL-7985  fix from trunk that makes camel-test-blueprint in 1.15  branch usable again.
    fixed also a duplicate dependency declaration of  org.apache.aries.proxy.api
    --
    Luigi De Masi <ldemasi@redhat.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/luigidemasi/camel camel-2.15.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/578.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #578
    
----
commit fb87cb12f9bfa0923a360f04be492a6c2eb42e60
Author: Luigi De Masi <ldemasi@redhat.com>
Date:   2015-07-29T23:06:54Z

    Backport of the fix for CAMEL-7985 from trunk that makes camel-test-blueprint  usable again.
    
    fixed also a duplicate dependency declaration of  org.apache.aries.proxy.api

commit e6ac3dcbfcc000b904b40f4ef52f6175f9f6384b
Author: Luigi De Masi <luigi.demasi@extrasys.it>
Date:   2015-07-29T23:29:40Z

    Backport of the fix for CAMEL-7985 from trunk that makes camel-test-blueprint  usable again.
    fixed also a duplicate dependency declaration of  org.apache.aries.proxy.api
    --
    Luigi De Masi <ldemasi@redhat.com>

----

githubbot:1438342417:2015-07-31T19:33:37.365+0000:1438342417:2015-07-31T19:33:37.365+0000:Github user luigidemasi closed the pull request at:

    https://github.com/apache/camel/pull/578
"
0,CAMEL-7984,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Claus Ibsen,0,2,2014-10-30 07:21:29+00:00,2014-11-20 11:25:32+00:00,"See CAMEL-7975 which hardcoded to use the default strategy. But we should allow end users to configure and use their own, and also use the passthrough. 


Eg see the jmsKeyFormatStrategy option at http://camel.apache.org/jms and implement it at camel-sjms.",njiang:1416453932:2014-11-20T11:25:32.506+0000:1416453932:2014-11-20T11:25:32.506+0000:Applied the patch into camel master branch.
0,CAMEL-7983,Bug,Minor,2.14.0,2.15.0,"
None
",Resolved,Cannot Reproduce,2.15.0,Claus Ibsen,Josef Awad,0,2,2014-10-29 13:13:02+00:00,2014-11-02 08:31:20+00:00,"Reference: http://camel.465427.n5.nabble.com/Using-named-query-parameters-td5758002.html


Excerpt:


Under http://camel.apache.org/sql-example.html  at the very bottom it says:


Notice in the SQL queries below we use named parameters which must start with prefix ':#' and then the name, eg :#amount. Then Camel will bind that parameter with the given name, from the
message body (if its a java.util.Map) or from a message header with the name. If none parameter could be found, Camel throws an exception.


If I set a wrong parameter in the sql.properties I don't get any exception:


sql.insertPosition=insert into mydb.test (col1) values (':#DoesNotExist')","davsclaus:1414888280:2014-11-02T08:31:20.267+0000:1414888280:2014-11-02T08:31:20.267+0000:Works fine. I cannot reproduce the issue, I get an error if I set an invalid named parameter, such as 'foo'

{code}
[mel-1) thread #1 - timer://foo] TimerConsumer                  WARN  Error processing exchange. Exchange[Message: {amount=3, id=0, description=ActiveMQ in Action, item=222}]. Caused by: [org.apache.camel.RuntimeExchangeException - Cannot find key [foo] in message body or headers to use when setting named parameter in query [insert into orders (id, item, amount, description, processed) values (:?id, :?foo, :?amount, :?description, false)] on the exchange: Exchange[Message: {amount=3, id=0, description=ActiveMQ in Action, item=222}]]
{code}"
0,CAMEL-7982,New Feature,Major,None,None,"
None
",Resolved,Fixed,None,Andrea Cosentino,Claus Ibsen,0,1,2014-10-29 08:19:48+00:00,2015-07-18 09:14:40+00:00,"I would also like to see a generic camel-git component that works with any git repository, (not only github) - for that there is jgit library
http://www.eclipse.org/jgit/


We use it in fabric8 for git, so its doable.",
0,CAMEL-7981,Bug,Major,"2.13.2, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-10-29 06:51:17+00:00,2014-10-29 08:14:23+00:00,"See nabble
http://camel.465427.n5.nabble.com/Not-all-processors-are-listed-in-JMX-preventing-detailed-route-statistics-profiling-tp5757634p5758257.html


Routes with < transacted > does not enlist mbeans under processor, but you have mbeans in routes / consumers etc.",
0,CAMEL-7980,Improvement,Major,"2.13.2, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-29 04:22:26+00:00,2014-10-30 02:42:28+00:00,"If using the ognl to call the static method of class from blueprint, it always complains about the ClassNotFoundException.","njiang:1414608148:2014-10-30T02:42:28.689+0000:1414608148:2014-10-30T02:42:28.689+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7979,Bug,Major,2.13.3,2.13.4,"
None
",Closed,Not A Problem,2.13.4,Christian Müller,Christian Müller,0,1,2014-10-28 20:22:58+00:00,2014-10-28 21:57:34+00:00,"Christians-MBP:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.7)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.13.3
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.13.3/xml/features
karaf@root> features:install camel-optaplanner
Error executing command: Could not start bundle mvn:org.optaplanner/optaplanner-core/6.0.1.Final in feature(s) camel-optaplanner-2.13.3: Unresolved constraint in bundle org.optaplanner.core [99]: Unable to resolve 99.0: missing requirement [99.0] osgi.wiring.package; (osgi.wiring.package=org.drools.core.common) [caused by: Unable to resolve 102.0: missing requirement [102.0] osgi.wiring.package; (osgi.wiring.package=com.sun.tools.xjc)]",
0,CAMEL-7978,Bug,Major,"2.13.2, 2.14.0",2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,1,4,2014-10-28 08:24:04+00:00,2015-04-22 14:18:39+00:00,"It could cause some trouble when camel-quartz endpoints is  share different camel context name.


We can add an option in the QuartzEndpoint to use CamelContext Name instead of management name.","lakshmi.prashant:1415577468:2014-11-10T07:57:48.557+0000:1416269974:2014-11-18T08:19:34.970+0000:Hi,

  Can you also fix another issue with clustered quartz - when the quartz2 endpoints from 2 nodes try to create the job detail in DB, an ObjectAlreadyExists exception is thrown - leading to misfires. Can we handle the above exception as below:
{code}
private void addJobInScheduler() throws Exception {
        // Add or use existing trigger to/from scheduler
        Scheduler scheduler = getComponent().getScheduler();
        JobDetail jobDetail;
        Trigger trigger = scheduler.getTrigger(triggerKey);
        if (trigger == null) {
            jobDetail = createJobDetail();
            trigger = createTrigger(jobDetail);

            updateJobDataMap(jobDetail);

            // Schedule it now. Remember that scheduler might not be started it, but we can schedule now.
            try{
	            Date nextFireDate = scheduler.scheduleJob(jobDetail, trigger);
	            if (LOG.isInfoEnabled()) {
	                LOG.info(""Job {} (triggerType={}, jobClass={}) is scheduled. Next fire date is {}"",
	                         new Object[] {trigger.getKey(), trigger.getClass().getSimpleName(),
	                                       jobDetail.getJobClass().getSimpleName(), nextFireDate});
	            }
            }
            catch(ObjectAlreadyExistsException e){
            	//some other VM might may have stored the job & trigger in DB in clustered mode, in the mean time
            	if(!(getComponent().isClustered())){            		
            		throw e;
            	}
             }
        } else {
            ensureNoDupTriggerKey();
        }

        // Increase camel job count for this endpoint
        AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);
        if (number != null) {
            number.incrementAndGet();
        }

        jobAdded.set(true);
    }

{code}

Thanks,
Lakshmi"
0,CAMEL-7977,Bug,Major,"2.13.2, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-28 07:41:49+00:00,2014-10-31 09:28:28+00:00,"The setting of sftp compression should skip the space, according to the user report.



session.setConfig(""compression.s2c"", ""zlib@openssh.com, zlib, none"");
session.setConfig(""compression.c2s"", ""zlib@openssh.com, zlib, none"");","njiang:1414718908:2014-10-31T09:28:28.541+0000:1414718908:2014-10-31T09:28:28.541+0000:Applied the patch into camel master, camel-2.13.x and camel-2.14.x branches."
0,CAMEL-7976,Task,Major,2.13.3,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Christian Müller,Christian Müller,0,1,2014-10-28 05:37:04+00:00,2014-10-28 07:10:41+00:00,"[INFO]     OK: imports resolved for camel-sql
[WARNING] Failed to validate feature camel-ssh
[WARNING] No export found to match org.bouncycastle.asn1;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.x500;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.util;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.io;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.tsp;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jcajce.provider.symmetric.util;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.dvcs;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.kisa;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.signers;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jcajce.util;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jcajce.io;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.encodings;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.crmf;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.x509;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.misc;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.x509;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.iana;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jce.spec;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.pkcs;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jcajce.spec;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.nist;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.ess;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.util;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.x9;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.cmp;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.math.ec;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.eac;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.cms.ecc;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.macs;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.modes;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.util.io.pem;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.util.io;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.oiw;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.teletrust;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.params;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.digests;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.sec;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.util.encoders;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.bc;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.generators;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.jce;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.engines;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.ntt;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.crypto.paddings;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.ocsp;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.mozilla;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.bsi;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.cryptopro;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[WARNING] No export found to match org.bouncycastle.asn1.cms;version=1.51 (imported by mvn:org.bouncycastle/bcpkix-jdk15on/1.51)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------",
0,CAMEL-7975,Improvement,Minor,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Aaron Whiteside,0,2,2014-10-27 17:09:58+00:00,2014-10-30 07:21:51+00:00,"SJMS Endpoint does not reverse header encoding, when it replaces . with _DOT_ and - with _HYPHEN_ it does not replace them with the original values.


So this breaks compatibility with the camel-jms component.


Quote taken from: http://camel.apache.org/jms.html



The current header name strategy for accepting header names in Camel is as follows:
Dots are replaced by _DOT_ and the replacement is reversed when Camel consume the message
Hyphen is replaced by _HYPHEN_ and the replacement is reversed when Camel consumes the message","aaronjwhiteside:1414408650:2014-10-27T19:17:30.098+0000:1414408650:2014-10-27T19:17:30.098+0000:Patch attached
njiang:1414608092:2014-10-30T02:41:32.258+0000:1414608092:2014-10-30T02:41:32.258+0000:Applied patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Aaron."
0,CAMEL-7974,Improvement,Minor,2.14.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Yves De Moor,0,2,2014-10-27 15:10:25+00:00,2015-08-07 15:13:27+00:00,"To be more flexible, the idea is to create some exchange properties


Put circuit state in an exchange property (2 status : Open / closed, as halfOpen do the same as closed in term of business)
use a Content Based Router to perform something like


from(""direct:a"")
    .loadBalance()//
    .circuitBreaker(3, 3000L, MyCustomException.class)
    .choice()
        .when(property(Exchange.CircuitBreaker_state).isEqualTo(""closed""))
            .to(""direct:normalMode"")
        .when(property(Exchange.CircuitBreaker_state).isEqualTo(""opened""))
            .to(""direct:degradedMode"")
    .end()",davsclaus:1438931607:2015-08-07T15:13:27.041+0000:1438931607:2015-08-07T15:13:27.041+0000:The state is now stored as exchange property
0,CAMEL-7973,Bug,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Matteo Pavesi,0,3,2014-10-27 15:02:10+00:00,2014-10-30 10:52:06+00:00,"The CircuitBreakerLoadBalancer works fine on direct synchronous processor, but it seems to not behave as expected in case of async processor.


To reproduce the error, it's enough to add a .threads(1) before the mock processor in the CircuitBreakerLoadBalancerTest routeBuilder configuration.


This misbehaviour seems to be related to the use of the AsyncProcessorConverterHelper to force any processor to behave like asynchronous. 


I'm going to propose a patch with the failing test and a proposal of solution.


EDIT:


the patch contains the fix also to other unexpected behaviour of the CircuitBreaker.


The second problem addressed is that, after the opening of the circuit, the RejectedExecutionException raised by the circuit breaker is set in the Exchange, but it doesn't return. This cause the processor will receive the Exchange even if the circuit is open. In this case also, if the CircuitBreaker is instructed to react only to specific Exception, it will close the circuit after the following request, because the raised exception would be a RejectedExecutionException instead of the one specified in the configuration.","Matteo Pavesi:1414397436:2014-10-27T16:10:36.536+0000:1414397450:2014-10-27T16:10:50.533+0000:Added patches (based on branch 2.14.x) containing failing test and proposed solution.
davsclaus:1414625058:2014-10-30T07:24:18.849+0000:1414625058:2014-10-30T07:24:18.849+0000:Willem the patch is partly correct, eg the stuff about the exception etc. But calling the processor should be the async with the callback, eg the last part of the patch is not correct. That may need a bit more logic to implement correctly, as you may need to add logic in the callback to do after work in the circuit breaker. I have not yet taken a closer look, but just beware more work is likely needed to fix this properly.
njiang:1414628139:2014-10-30T08:15:39.052+0000:1414628910:2014-10-30T08:28:30.531+0000:Hi,Claus.  
Yes, we cannot just call the process method there. I'm working on it to add the async processing code :)

njiang:1414631375:2014-10-30T09:09:35.825+0000:1414631375:2014-10-30T09:09:35.825+0000:Applied the patch into camel master ,camel 2.14.x with thanks to Matteo. I also changed the patch by adding callback to check the failed exchange.
Matteo Pavesi:1414637526:2014-10-30T10:52:06.170+0000:1414637526:2014-10-30T10:52:06.170+0000:Thanks for the interest in this issue and for the quick change. I've also learned something from the fix to my patch :)
"
0,CAMEL-7972,Improvement,Major,2.14.0,2.19.0,"
None
",Resolved,Won't Fix,2.19.0,Willem Jiang,Yves De Moor,1,3,2014-10-27 15:01:40+00:00,2017-02-27 10:17:36+00:00,"when halfOpen is reached, (System.currentTimeMillis() - lastFailure < halfOpenAfter) there is no restriction on the number of calls (threads) that will perform a retry.


When retry timeout is reached, we should let only 1 thread go in ""halfOpen"" mode, all other should be kept in ""open"" state until an halfOpen succeed.","davsclaus:1438931663:2015-08-07T15:14:23.817+0000:1438931663:2015-08-07T15:14:23.817+0000:Yeah I guess its a good idea to back pressure this in half mode
davsclaus:1488068713:2017-02-26T08:25:13.985+0000:1488068713:2017-02-26T08:25:13.985+0000:Favor using camel-hystrix instead
davsclaus:1488161856:2017-02-27T10:17:36.520+0000:1488161856:2017-02-27T10:17:36.520+0000:Use Hystrix EIP instead.

We have deprecated the CB from camel-core"
0,CAMEL-7971,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Ralf Steppacher,0,2,2014-10-27 13:19:17+00:00,2014-10-28 04:35:20+00:00,"I am trying to set a custom HTTP binding on the netty4-http endpoint created for the REST-DSL routes. The '#' in the bean ref, URL encoded as %23, makes the endpoint generation fail because it is interpreted by the string formatter.



<restConfiguration component=""netty4-http"" scheme=""http"" host=""{{rest.host}}"" port=""{{rest.port}}"" bindingMode=""json"">
	<endpointProperty key=""nettyHttpBinding"" value=""#noStackTraceHTTPBinding""/>
</restConfiguration>

<rest path=""/base"" produces=""application/json"">
	<get uri=""/path"">
		<to uri=""direct:myroute"" />
	</get>
</rest>




This configuration results in the following template string (NettyHttpComponent.java line 279):


netty4-http:%s://%s:%s/%s?httpMethodRestrict=%s?nettyHttpBinding=%23noStackTraceHTTPBinding


The main problem is the hash mark encoded as ""%23"" and interpreted by the string formatter. Also, the second '?' in the URL probably should be a '&'.


Full stacktrace:



java.util.IllegalFormatWidthException: 23
	at java.util.Formatter$FormatSpecifier.checkText(Formatter.java:2996)[:1.7.0_60]
	at java.util.Formatter$FormatSpecifier.<init>(Formatter.java:2688)[:1.7.0_60]
	at java.util.Formatter.parse(Formatter.java:2528)[:1.7.0_60]
	at java.util.Formatter.format(Formatter.java:2469)[:1.7.0_60]
	at java.util.Formatter.format(Formatter.java:2423)[:1.7.0_60]
	at java.lang.String.format(String.java:2790)[:1.7.0_60]
	at org.apache.camel.component.netty4.http.NettyHttpComponent.createConsumer(NettyHttpComponent.java:279)
	at org.apache.camel.component.rest.RestEndpoint.createConsumer(RestEndpoint.java:167)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:134)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2379)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2309)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:2091)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1951)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1777)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1745)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:209)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:147)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:932)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:793)
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:543)
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4419)
	at org.apache.felix.framework.Felix.registerService(Felix.java:3423)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:346)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:452)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:387)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276)
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:245)
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:235)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:955)
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:942)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:477)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:435)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:375)
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeature(FeaturesServiceImpl.java:364)
	at Proxy486edb88_52c2_40bf_8539_fb7a444aafe1.installFeature(Unknown Source)
	at org.apache.karaf.features.command.InstallFeatureCommand.doExecute(InstallFeatureCommand.java:67)
	at org.apache.karaf.features.command.FeaturesCommandSupport.doExecute(FeaturesCommandSupport.java:38)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:33)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:39)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:33)[25:org.apache.karaf.shell.console:3.0.2]
	at Proxy4496acc0_5450_4cc1_881a_14668e65e5a7.execute(Unknown Source)[:]
	at Proxy4496acc0_5450_4cc1_881a_14668e65e5a7.execute(Unknown Source)[:]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:477)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:403)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[25:org.apache.karaf.shell.console:3.0.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:92)
	at org.apache.karaf.shell.console.impl.jline.ConsoleImpl.run(ConsoleImpl.java:203)
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1$1.run(LocalConsoleManager.java:115)
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_60]
	at org.apache.karaf.jaas.modules.JaasHelper.doAs(JaasHelper.java:57)[26:org.apache.karaf.jaas.modules:3.0.2]
	at org.apache.karaf.shell.console.impl.jline.LocalConsoleManager$2$1.run(LocalConsoleManager.java:108)[25:org.apache.karaf.shell.console:3.0.2]","njiang:1414442120:2014-10-28T04:35:20.741+0000:1414442120:2014-10-28T04:35:20.741+0000:Applied the patch into camel master, camel-2.14.x branches."
0,CAMEL-7970,Improvement,Major,2.14.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Thomas Diesler,0,2,2014-10-27 12:05:14+00:00,2019-08-06 05:21:02+00:00,"Clients of the Container SPI see contexts being added but not removed. In wildfly we expose every context as an msc service to allow for service dependencies on it. When a context gets unregistered we must also unregister the msc service.


unmanage(CamelContext) should probably be exposed in the same way as manage(CamelContext)","davsclaus:1414888935:2014-11-02T08:42:15.602+0000:1414888935:2014-11-02T08:42:15.602+0000:Yeah unfortunately that breaks the API. You can use EventNotifer to register a callback to get notified when the context is stopping/stopped.
davsclaus:1414888976:2014-11-02T08:42:56.370+0000:1414888976:2014-11-02T08:42:56.370+0000:We can add a unmanage method to org.apache.camel.spi.Container in Camel 3.0.
tdiesler:1456804921:2016-03-01T12:02:01.493+0000:1456804921:2016-03-01T12:02:01.493+0000:Conceptually, integration code needs a way to hook into the CamelContext before start() is getting called
davsclaus:1565040062:2019-08-06T05:21:02.332+0000:1565040062:2019-08-06T05:21:02.332+0000:There is a destroy method on camel context tracker now"
0,CAMEL-7969,Bug,Major,2.14.0,None,"
None
",Resolved,Won't Fix,2.15.0,Claus Ibsen,Thomas Diesler,0,1,2014-10-27 11:57:18+00:00,2014-11-06 13:53:13+00:00,"In the case of SpringCamelContext we have this code



    protected SpringCamelContext createContext() {
        SpringCamelContext ctx = newCamelContext();        
        ctx.setName(getId());        
        return ctx;
    }




The Container singleton is however called from the DefaultCamelContext ctor (i.e. before the name is initialised properly)


CrossRef: https://github.com/tdiesler/wildfly-camel/issues/16","tdiesler:1414383521:2014-10-27T12:18:41.830+0000:1414383521:2014-10-27T12:18:41.830+0000:It is generally wrong to call an SPI extension point from a constructor when the class is not final. For example, a SpringCamelContext would not be fully initialised/constructed when the call to Container.manage(CamelContext) happens.
tdiesler:1414972082:2014-11-03T07:48:02.202+0000:1414972082:2014-11-03T07:48:02.202+0000:How can this be resolved as won't fix? Again, 3rd party code is called with a partially constructed object. Because the CamelContext instance is only partially constructed it is totally undefined what can be done with it.

I suggest to revisit the Container SPI (starting from requirements) and possibly replace it with something that works."
0,CAMEL-7968,Bug,Major,2.14.0,None,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Thomas Diesler,0,2,2014-10-27 10:38:41+00:00,2014-11-06 13:53:14+00:00,"The implementation of Container.Instance is not ThreadSafe. It is also not defined what happens when multiple Containers race on the singleton.


Instead of using a Container singleton approach. It might be better to have a singleton ContainerRegistry that can handle concurrent/multiple Containers","davsclaus:1414888892:2014-11-02T08:41:32.110+0000:1414888892:2014-11-02T08:41:32.110+0000:Added more details in the javadoc that Container is not thread-safe, which has never been the intention either.
tdiesler:1414971660:2014-11-03T07:41:00.227+0000:1414971660:2014-11-03T07:41:00.227+0000:Documenting that a shared resource is not thread safe is just as wrong as not taking greater care about possible concurrent access in the first place. A client cannot possibly synchronise concurrent access because it may not even be aware of other clients."
0,CAMEL-7967,Bug,Major,2.14.0,,"
None
",Resolved,Fixed,None,Willem Jiang,Marco Crivellaro,0,2,2014-10-27 09:03:33+00:00,2014-10-30 02:25:37+00:00,"Connecting to RabbitMQ using camel-rabbitmq I've noticed that no ERROR is logged if the component cannot connect, the exceptions are handled and logged as DEBUG. 
This is a bit inconvenient as logging all DEBUG messages for the component fills up our logs, in production we usually set INFO as threshold.",njiang:1414607137:2014-10-30T02:25:37.388+0000:1414607137:2014-10-30T02:25:37.388+0000:Applied the patch into master and camel-2.14.x branches.
0,CAMEL-7966,Bug,Major,"2.13.2, 2.14.0","2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-27 09:02:40+00:00,2014-10-27 09:11:01+00:00,"Here is the user complain in the mailing list.



I recently had a production issue where there was an exception thrown when 
the CC or the BCC headers were set to """": 

com.sun.mail.smtp.SMTPAddressFailedException: 554 5.1.1 Invalid recipient address","njiang:1414372261:2014-10-27T09:11:01.151+0000:1414372261:2014-10-27T09:11:01.151+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x."
0,CAMEL-7965,Improvement,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,3,2014-10-27 08:10:31+00:00,2015-01-18 11:08:07+00:00,"See
http://camel.465427.n5.nabble.com/camelContext-hasEndpoint-returns-null-when-endpoint-apparently-exists-tp5757907.html


The endpoint cache is a LRU based. But endpoints created from the routes may not be looked up in the cache for a while, and could potential be evicted from the cache.


We should keep those endpoints from the routes in the cache at all times.","de_tom:1421104128:2015-01-13T07:08:48.196+0000:1421104128:2015-01-13T07:08:48.196+0000:It seems that we're also hitting this issue? Can you recommend a workaround until the problem is fixed?
davsclaus:1421470257:2015-01-17T12:50:57.731+0000:1421470257:2015-01-17T12:50:57.731+0000:A workaround is to set a higher cache size

From Camel 2.15 onwards the endpoint cache has a static and dynamic part, so we always keep the route endpoints in the static part, and leave the dynamic cache for ad-hoc endpoints.
davsclaus:1421537841:2015-01-18T07:37:21.213+0000:1421537841:2015-01-18T07:37:21.213+0000:This also requires us to find a solution to the issue when people remove routes, which has endpoints that before would not be removed either from the cache.

We should try to figure out if an endpoint is only in use by the route, and thus safe to be removed. "
0,CAMEL-7964,Bug,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2014-10-27 03:33:26+00:00,2014-10-27 08:12:40+00:00,"The HTTP 303 response in response to a POST indicates that the POST was successful. Currently, Camel Jetty will throw an exception by default for a 303. There is a work around for this, but it involves setting throwExceptionOnFailure=true, which then ignores legitimate errors. For reference on how 303 responses should work, please see the following: http://en.wikipedia.org/wiki/Post/Redirect/Get


For camel-jetty, we can add CamelRedirectListener to do this kind of thing.","njiang:1414352564:2014-10-27T03:42:44.331+0000:1414352619:2014-10-27T03:43:39.918+0000:I just ran some tests, camel-http4 support this pattern out of box, camel-http doesn't support it as HttpClient 3 wants user handler the redirection from application level[1].
For camel-netty-http, camel-netty4-http, we don't support auto redirect yet.

[1] http://hc.apache.org/httpclient-3.x/redirects.html
njiang:1414368760:2014-10-27T08:12:40.378+0000:1414368760:2014-10-27T08:12:40.378+0000:Applied patch into camel master branch."
0,CAMEL-7963,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Henryk Konsek,Henryk Konsek,0,2,2014-10-26 21:11:25+00:00,2015-01-20 11:32:03+00:00,"We need Spring Boot autoconfiguration for Camel. I created one under Fabric8 umbrella (1), but I don't believe that is the proper place to keep and develop Camel integration, as this is pure Camel stuff. We can just use Camel stuff in the Fabric8 instead.


I will continue to develop Camel Spring Boot integration under Camel umbrella.


(1) https://github.com/fabric8io/fabric8/tree/master/process/process-spring-boot/process-spring-boot-starter-camel","hekonsek:1414330923:2014-10-26T21:42:03.131+0000:1414330923:2014-10-26T21:42:03.131+0000:Base version committed in a7363540011693adc8873edf5ab140c62f89cc0d.
hekonsek:1414412282:2014-10-27T20:18:02.680+0000:1414412282:2014-10-27T20:18:02.680+0000:Done. I'm gonna improve some docs bits, add tests helpers API, but usable base is ready.
chrislovecnm:1420888398:2015-01-10T19:13:18.664+0000:1420888432:2015-01-10T19:13:52.862+0000:I am having some issues with using @EndpointInject in unit tests.  Can you add an example of this?  I working on an example this weekend and I may be able to get it to you.  I am uncertain if I can get a 'working' sample to you :)

Not sure what combination of these I should be using:

{code:title=FooTest.java|borderStyle=solid}
@EnableAutoConfiguration
@SpringApplicationConfiguration(classes = {FooTest.class,Application.class})
@RunWith(CamelSpringJUnit4ClassRunner.class)  // this creates a second camel context
@BootstrapWith(CamelTestContextBootstrapper.class)
@MockEndpoints(""activemq:*"") // this is not firing
@IntegrationTest
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
public class CrawlSiteMapTest extends Assert {
    
    // This works
    @Autowired
    CamelContext camelContext;

    // This is not autowiring / injecting properly
    @EndpointInject(uri = ""activemq:queue-myqueue"")
    protected MockEndpoint myQueue;

     // This is null
     @Produce(uri = ""direct://myproducer"", context=""camelContext2"")
     protected ProducerTemplate template;

///....
}

{code}

hekonsek:1420895613:2015-01-10T21:13:33.897+0000:1420895644:2015-01-10T21:14:04.018+0000:Hi Chris,

Currently Spring Boot Camel doesn't support Camel annotations like {{@EndpointInject}} or {{@MockEndpoints}}. I decided not to add them in the first version of the camel-spring-boot because Spring Boot test support is flexible enough to handle the majority of the test cases. For example you can define your route using Spring property:

{code}
@Value(""${from:jms:queue}"")
String from;

from(""{{from}}"").to(...);
{code}

And then override it in the Spring Boot test:

{code}
@IntegrationTest(""from=mock:test"")
{code}

Actually this approach is ever better because you can override part of the routes using system/environment properties, which is extremely useful when working with the Dockerized Camel applications for example.

However I agree that supporting Camel annotations is still a good idea. I will add this soon.

Cheers.
chrislovecnm:1420896058:2015-01-10T21:20:58.113+0000:1420896058:2015-01-10T21:20:58.113+0000:Very cool, can we get documentation that  those annotations are not supported?
hekonsek:1420896286:2015-01-10T21:24:46.342+0000:1420896286:2015-01-10T21:24:46.342+0000:Well, actually I think that I could add support for them even this week, so there is not point for documenting that we don't support them yet :) .
chrislovecnm:1420896527:2015-01-10T21:28:47.392+0000:1420896527:2015-01-10T21:28:47.392+0000:That would make it easier for legacy migration. We have a bunch of unit tests that would need to be re-written.
hekonsek:1421724723:2015-01-20T11:32:03.721+0000:1421724723:2015-01-20T11:32:03.721+0000:Hi Chris,

I've just added support for Camel core annotations. For example:

{code}
@RunWith(SpringJUnit4ClassRunner.class)
@EnableAutoConfiguration
@SpringApplicationConfiguration(classes = {CamelAnnotationsTest.class, CamelAnnotationsTestConfig.class})
@IntegrationTest
public class CamelAnnotationsTest extends Assert {

    @Autowired
    ProducerTemplate producerTemplate;

    @EndpointInject(uri = ""mock:test"")
    MockEndpoint mockEndpoint;

    @Test
    public void shouldInjectEndpoint() throws InterruptedException {
        mockEndpoint.setExpectedMessageCount(1);
        producerTemplate.sendBody(""direct:test"", ""msg"");
        mockEndpoint.assertIsSatisfied();
    }

}
{code}

I still need to add support for Spring test annotations like {{@MockEndpoints}}. Stay tuned :) ."
0,CAMEL-7962,Improvement,Trivial,2.14.0,2.15.0,"
None
",Closed,Fixed,2.15.0,Claus Ibsen,Yaron A,0,2,2014-10-26 08:39:11+00:00,2014-11-02 09:20:52+00:00,"As ServerPipelineFactory & ClientPipelineFactory classes are now named as ServerInitializerFactory & ClientInitializerFactory, I thought that it will make sense to call the matching netty4 component parameter names as serverInitializerFactory & clientInitializerFactory (and also to fix the relevant documentations)","davsclaus:1414890691:2014-11-02T09:11:31.096+0000:1414890691:2014-11-02T09:11:31.096+0000:Yeah good idea. I have deprecated the old option names, and introduce the ne netty4 names, and fixed the netty4 docs also."
0,CAMEL-7961,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Edin Hodzic,0,3,2014-10-26 00:47:12+00:00,2014-10-27 01:25:02+00:00,"The autoStartup method is missing from the Scala DSL.


MyRoute.scala
import org.apache.camel.scala.dsl.builder.RouteBuilder

class MyRoute extends RouteBuilder {
  ""direct:start"" ==> {
    autoStartup(false) // this is not available
    autoStartup(""{{some.route.auto.startup}}"") // this is not available
    noAutoStartup() // this is not available
    to(""mock:end"")
  }
}




This should be added to the Scala DSL.","edinhodzic:1414255890:2014-10-26T00:51:30.844+0000:1414255890:2014-10-26T00:51:30.844+0000:Attached patch for this feature.
njiang:1414284772:2014-10-26T08:52:52.897+0000:1414284772:2014-10-26T08:52:52.897+0000:Applied the patch into Camel master branch with thanks to Edin.
hekonsek:1414324959:2014-10-26T20:02:39.173+0000:1414324959:2014-10-26T20:02:39.173+0000:From the mailing list:

==== Claus: ====

-1

This is not as correct as autoStartup is already defined in the Java
DSL at route definition. We should not add it to processor defintion
as then its too verbose in the DSL, as it becomes visible where it
makes no sense, eg from X to Y to Z ... autoStartup...

So remove it from processor definition and find another way to add it
to the Scala DSL.

And btw this is also wrong

   public Type autoStartup(String autoStartup) {
+        return autoStartup(Boolean.valueOf(autoStartup));
+    }

That should use Camels property placeholder as the string is intended
as a placeholder key etc.
njiang:1414344291:2014-10-27T01:24:51.945+0000:1414344291:2014-10-27T01:24:51.945+0000:I just commit a quick fix for it, now we can just call the autoStartup after from()."
0,CAMEL-7960,Improvement,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Benjamin Graf,0,1,2014-10-25 19:28:02+00:00,2015-07-09 18:49:02+00:00,Dependencies from camel-jpa feature should be minimized by openjpa feature from karaf.,graben:1436438942:2015-07-09T18:49:02.571+0000:1436438942:2015-07-09T18:49:02.571+0000:Any comment why this won't be fixed?
0,CAMEL-7959,Improvement,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,2,2,2014-10-25 11:17:44+00:00,2014-11-30 09:21:38+00:00,"It seems that onException, interceptor etc. is not in use when using embedded routes with the rest dsl. There has been some reports of this on the user forum.",
0,CAMEL-7958,Improvement,Major,2.14.0,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-10-25 10:59:27+00:00,2014-10-25 12:00:06+00:00,"See dev
http://camel.465427.n5.nabble.com/Why-this-syntax-is-not-accepted-doTry-doCatch-choiceWhen-tp5757614.html",
0,CAMEL-7957,Improvement,Major,"2.13.2, 2.14.0",None,"

ssl3
sslContext
sslContextParameters

",Open,Unresolved,Future,Unassigned,Dhiraj Sureshkumar Bokde,0,1,2014-10-24 20:45:39+00:00,2019-07-31 08:54:46+00:00,"Some Camel components create HTTP connections using default SSLContext settings. Components should standardize on using SSLContextParameters, especially for CAMEL-7940.",
0,CAMEL-7956,Sub-task,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Dhiraj Sureshkumar Bokde,0,1,2014-10-24 20:19:09+00:00,2019-08-06 05:14:50+00:00,Currently camel-olingo2 uses SSLContext directly to create connections; it should use SSLContextParameters.,"dhirajsb:1414158413:2014-10-24T21:46:53.832+0000:1414158413:2014-10-24T21:46:53.832+0000:Component updated, need to update documentation"
0,CAMEL-7955,Sub-task,Major,None,None,"
None
",Resolved,Fixed,None,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-10-24 20:18:49+00:00,2014-10-24 21:46:32+00:00,Currently camel-olingo2 uses SSLContext directly to create connections; it should use SSLContextParameters.,"dhirajsb:1414158392:2014-10-24T21:46:32.255+0000:1414158392:2014-10-24T21:46:32.255+0000:Component updated, no documentation update needed"
0,CAMEL-7954,Sub-task,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Dhiraj Sureshkumar Bokde,0,1,2014-10-24 20:18:18+00:00,2019-08-06 05:14:42+00:00,Currently camel-olingo2 uses SSLContext directly to create connections; it should use SSLContextParameters.,"dhirajsb:1414158371:2014-10-24T21:46:11.739+0000:1414158371:2014-10-24T21:46:11.739+0000:Component updated, need to update documentation"
0,CAMEL-7923,Bug,Major,2.12.4,2.12.5,"
None
",Closed,Cannot Reproduce,2.12.5,Christian Müller,Christian Müller,0,2,2014-10-17 05:30:28+00:00,2014-10-18 17:30:55+00:00,"christians-mbp:camel-xmpp cmueller$ mvn test -Dtest=XmppMultiUserChatTest
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: XMPP 2.12.5
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-xmpp ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-xmpp ---
[INFO]
[INFO] >>> camel-package-maven-plugin:2.12.5:generate-components-list (default) @ camel-xmpp >>>
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-xmpp ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-xmpp ---
[INFO]
[INFO] <<< camel-package-maven-plugin:2.12.5:generate-components-list (default) @ camel-xmpp <<<
[INFO]
[INFO] --- camel-package-maven-plugin:2.12.5:generate-components-list (default) @ camel-xmpp ---
[INFO] Generated /Users/cmueller/workspaceCamel/camel/components/camel-xmpp/target/generated/camel/components/META-INF/services/org/apache/camel/component.properties containing the Camel component xmpp
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-xmpp ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-xmpp ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-xmpp ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] Copying 3 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-xmpp ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.15:test (default-test) @ camel-xmpp ---
[INFO] Surefire report directory: /Users/cmueller/workspaceCamel/camel/components/camel-xmpp/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.xmpp.XmppMultiUserChatTest
stream:error (text)
	at org.jivesoftware.smack.PacketReader.parsePackets(PacketReader.java:260)
	at org.jivesoftware.smack.PacketReader.access$000(PacketReader.java:43)
	at org.jivesoftware.smack.PacketReader$1.run(PacketReader.java:70)
org.xmlpull.v1.XmlPullParserException: processing instruction can not have PITarget with reserveld xml name (position: END_TAG seen ...</bind></iq><?xml ... @1:190)
	at org.xmlpull.mxp1.MXParser.parsePI(MXParser.java:2453)
	at org.xmlpull.mxp1.MXParser.parseEpilog(MXParser.java:1566)
	at org.xmlpull.mxp1.MXParser.nextImpl(MXParser.java:1393)
	at org.xmlpull.mxp1.MXParser.next(MXParser.java:1093)
	at org.jivesoftware.smack.PacketReader.parsePackets(PacketReader.java:325)
	at org.jivesoftware.smack.PacketReader.access$000(PacketReader.java:43)
	at org.jivesoftware.smack.PacketReader$1.run(PacketReader.java:70)
No response from the server.:
	at org.jivesoftware.smack.SASLAuthentication.bindResourceAndEstablishSession(SASLAuthentication.java:469)
	at org.jivesoftware.smack.SASLAuthentication.authenticate(SASLAuthentication.java:348)
	at org.jivesoftware.smack.XMPPConnection.login(XMPPConnection.java:203)
	at org.jivesoftware.smack.XMPPConnection.connect(XMPPConnection.java:964)
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.reconnect(XmppGroupChatProducer.java:92)
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.process(XmppGroupChatProducer.java:72)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at org.apache.camel.component.xmpp.XmppMultiUserChatTest.testXmppChat(XmppMultiUserChatTest.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 7.089 sec <<< FAILURE! - in org.apache.camel.component.xmpp.XmppMultiUserChatTest
testXmppChat(org.apache.camel.component.xmpp.XmppMultiUserChatTest)  Time elapsed: 6.974 sec  <<< ERROR!
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: the first message]
	at org.jivesoftware.smack.XMPPConnection.sendPacket(XMPPConnection.java:445)
	at org.jivesoftware.smackx.muc.MultiUserChat.sendMessage(MultiUserChat.java:1858)
	at org.apache.camel.component.xmpp.XmppGroupChatProducer.process(XmppGroupChatProducer.java:78)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at org.apache.camel.component.xmpp.XmppMultiUserChatTest.testXmppChat(XmppMultiUserChatTest.java:40)


Results :

Tests in error:
  XmppMultiUserChatTest.testXmppChat:40 � CamelExecution Exception occurred duri...

Tests run: 1, Failures: 0, Errors: 1, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13.049s
[INFO] Finished at: Fri Oct 17 07:27:40 CEST 2014
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------","njiang:1413525171:2014-10-17T13:52:51.991+0000:1413525171:2014-10-17T13:52:51.991+0000:Hi Christian

I ran the test in my box, the test isn't failed. Can you check your fire wall setting?
I checked the [apache CI|https://builds.apache.org/job/Camel.2.12.x.fulltest/] I didn't find the failed test of XmppMultiUserChatTest.

Regards,

Willem
muellerc:1413623543:2014-10-18T17:12:23.015+0000:1413623543:2014-10-18T17:12:23.015+0000:It doesn't fail each time. It's only failing a few times.
But by having too many ""fragile"" test, it's annoying to do a build because of the many many attempts you need."
0,CAMEL-7922,Bug,Major,2.14.0,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Davy De Waele,0,2,2014-10-16 20:37:17+00:00,2014-11-20 09:11:42+00:00,"When the MQTT Endpoint is started the MQTT connection is immediately established, causing an immediate influx of persisted messages (put on the topic when the client was not available). 


Issue is that at this point, most likely no consumers are available yet to process these messages.


Receiving a PUBLISH message


Publish message are received without any consumers. Result : msg with QoS > 0 that were put on the topic while the client was not connected are never processed.



Daemon Thread [hawtdispatch-DEFAULT-3] (Suspended (breakpoint at line 815 in CallbackConnection))	
	CallbackConnection.toReceiver(PUBLISH) line: 815	
	CallbackConnection.processFrame(MQTTFrame) line: 732	
	CallbackConnection.access$1500(CallbackConnection, MQTTFrame) line: 51	
	CallbackConnection$6.onTransportCommand(Object) line: 392	
	TcpTransport.drainInbound() line: 709	
	TcpTransport$6.run() line: 588	
	NioDispatchSource$3.run() line: 209	
	SerialDispatchQueue.run() line: 100	
	SimpleThread.run() line: 77	




No consumers registered yet


Only when this finishes will Camel be able to process the messages.



Daemon Thread [localhost-startStop-1] (Suspended (breakpoint at line 164 in MQTTEndpoint))	
	owns: SpringCamelContext  (id=92)	
	owns: Object  (id=143)	
	owns: StandardContext  (id=144)	
	MQTTEndpoint.addConsumer(MQTTConsumer) line: 164	
	MQTTConsumer.doStart() line: 35	
	MQTTConsumer(ServiceSupport).start() line: 61	
	SpringCamelContext(DefaultCamelContext).startService(Service) line: 2158	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRouteConsumers(Map<Integer,DefaultRouteStartupOrder>, boolean, boolean) line: 2452	
	SpringCamelContext(DefaultCamelContext).doStartRouteConsumers(Map<Integer,DefaultRouteStartupOrder>, boolean) line: 2388	
	SpringCamelContext(DefaultCamelContext).safelyStartRouteServices(boolean, boolean, boolean, boolean, Collection<RouteService>) line: 2318	
	SpringCamelContext(DefaultCamelContext).doStartOrResumeRoutes(Map<String,RouteService>, boolean, boolean, boolean, boolean) line: 2091	
	SpringCamelContext(DefaultCamelContext).doStartCamel() line: 1951	
	SpringCamelContext(DefaultCamelContext).doStart() line: 1777	




These messages will never be picked up.


Perhaps it's more the responsibility of the consumer / producer to start a connection when they get attached to the endpoint ?","njiang:1416445902:2014-11-20T09:11:42.289+0000:1416445902:2014-11-20T09:11:42.289+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7921,Bug,Major,"2.12.3, 2.12.4, 2.13.2, 2.14.0","2.16.0, 2.14.4, 2.15.4","
None
",Resolved,Fixed,"2.16.0, 2.14.4, 2.15.4",Freeman Yue Fang,Ton Swieb,0,5,2014-10-16 11:30:49+00:00,2015-09-09 14:33:37+00:00,"The soapAction HTTP header is not correctly set when running the CXF client in POJO mode using Camel.


The root cause seems to be that the service name from the generated service class differs from the service name in the WSDL.


For me it is unclear if this should be an issue with the cxf-codegen-plugin or with the Camel CXF component. When running the CXF client without Camel then the soapAction HTTP header is correctly set and the issue does not occur. So that's why I first report the bug with Camel.


Possible workarounds I found are:
1) Explicitly specifying the correct serviceName as CXF endpoint attribute.
2) Explicitly setting the soapAction header in the Camel route prior to calling the CXF endpoint.


Both workarounds are not desirable, because they are easily forgotten and CXF does not throw an exception when you do. According to the basic profile v1.0 the soapAction HTTP header must match the value in the WSDL and receiving SOAP servers may throw a SOAP Fault if it doesn't. Some SOAP servers do throw an exception when the soapAction HTTP header is invalid. Resulting in communication failures between some SOAP client/server combinations.


I created a test project to verify the above behaviour with the following tests:
1) CXF in PAYLOAD with Camel. => OK
2) CXF in POJO mode without Camel => OK
3) CXF in POJO mode with Camel => NOT OK
4) CXF in POJO mode with service name set => OK
5) CXF in POJO mode with soapAction set => OK


I run the test project with multiple combinations of Camel and CXF. The following combinations I have tried:
1) Camel 2.12.3 and CXF 2.7.10 (Apache Servicemix 5.0.0 setup)
2) Camel 2.12.4 and CXF 2.7.11 (Apache Servicemix 5.0.5 setup)
3) Camel 2.13.2 and CXF 2.7.11 (Apache Servicemix 5.1.3 and 5.3.0 setup)
4) Camel 2.14.0 and CXF 3.0.1


In the example project the mismatch occurs between an annotation in the generated service class:



@WebService(targetNamespace = ""http://finalist.nl/ai/"", name = ""ICamelCxfTestService"")




and the definition of the service name in the WSDL:



<wsdl:service name=""CamelCxfTestService"">","tonswieb:1413461317:2014-10-16T20:08:37.906+0000:1413461317:2014-10-16T20:08:37.906+0000:It looks like the parameter wsdlURL is causing the problem.

When using the parameter wsdlURL in the CXF endpoint URI the soapAction is not set:
cxf:http://localhost:8080?&serviceClass=nl.finalist.ai.ICamelCxfTestService&wsdlURL=CamelCxfTestService.wsdl

When leaving it out the soapAction is correctly set:
cxf:http://localhost:8080?&serviceClass=nl.finalist.ai.ICamelCxfTestService
davsclaus:1436482820:2015-07-10T07:00:20.781+0000:1436482820:2015-07-10T07:00:20.781+0000:I wonder if its when using wsdlURL the SoapAction is inside that wsdl file and that would require logic to parse it and find it to set it.

And any chance to try with latest code, its been a long time since this was reported?
tonswieb:1439875216:2015-08-18T13:20:16.696+0000:1439875216:2015-08-18T13:20:16.696+0000:I tried with latest code (Camel 2.15.2 and CXF 3.0.4) and bug still exists.
Can be easily reproduced by changing the Camel en CXF version in the POM of the attached ZIP and run it. One test case will fail.
ay:1439961213:2015-08-19T13:13:33.201+0000:1439961213:2015-08-19T13:13:33.201+0000:This has likely nothing to do with the mode itself (i.e. PAYLOAD or POJO) but rather has something do with the way in which the endpoint is configured. Somehow, when the endpoint is configured over its URL with both WSDL and SEI set as in your POJO case, the action value is not correctly extracted. So, you will get the same problem when you add WSDL in your PAYLOAD case and you won't get the problem when you remove either WSDL or SEI from your POJO case.

Does someone have a quick idea?

ffang:1441509206:2015-09-06T11:13:26.410+0000:1441509206:2015-09-06T11:13:26.410+0000:The code in the generated SEI 
{code}
@WebService(targetNamespace = ""http://finalist.nl/ai/"", name = ""ICamelCxfTestService"")
{code}
is expected behavior, the @WebService annotation has another attribute serviceName which should be equal with wsdl:service@name, the attribute serviceName normally should be in the impl class.

However for the cxf:producer endpoint the serviceClass specified must be an interface so that there's no serviceName attribute in the @WebService annotation at all.  And the current logic is that if can't find the serviceName, use the convention that the SEI classname + ""Service"", as the SEI classname is same as the wsdl:portType@name from the wsdl, so in your wsdl the wsdl:service name should be wsdl:portType name + ""Service"". Otherwise you really need specify the serviceName in the cxf:producer endpoint URI.


tonswieb:1441684286:2015-09-08T11:51:26.303+0000:1441684286:2015-09-08T11:51:26.303+0000:Hi [~ffang],

Thanks for looking into this.

Beside from any WSDL conventions I believe the WSDL is valid and is WS-I compliant. When using a valid WSDL I would expect one of the following:
* A valid SOAP implementation is generated.
* An excpetion is thrown stating that a SOAP implementation cannot be generated due to missing properties.

Generating a SOAP implementation which is relying on naming conventions in the WSDL does not sounds like a very good plan to me. It would require me to either always set the servicename attribute explicitly to be on the safe side or modify the WSDL to adhere to the naming convention. In case of a missing servicename I think it would be better for the Camel Producer to fail fast instead of trying to make the best of it.
ffang:1441747094:2015-09-09T05:18:14.562+0000:1441747094:2015-09-09T05:18:14.562+0000:if not specify the service name and if the wsdlUrl is available, we can parse the wsdl to see if there is only one service in it, if so we can set the only service to avoid such ambiguity

ffang:1441747609:2015-09-09T05:26:49.919+0000:1441747609:2015-09-09T05:26:49.919+0000:commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/843ef83f for camel-2.14.x branch
http://git-wip-us.apache.org/repos/asf/camel/commit/63234bd1 for camel-2.15.x branch
http://git-wip-us.apache.org/repos/asf/camel/commit/8c36915e for master
tonswieb:1441780417:2015-09-09T14:33:37.753+0000:1441780417:2015-09-09T14:33:37.753+0000:Hi [~ffang],

Thanks for fixing this."
0,CAMEL-7920,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Joe Luo,0,2,2014-10-16 09:17:51+00:00,2014-10-17 12:09:19+00:00,"I have a simple test case to demonstrate this issue. Here is the camel route:



<camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
  <route id=""testServiceRoute"">
      <from uri=""cxf:bean:testServiceEndpoint""/>
      <log message=""Incoming Body:  ${body}""/>
      <to uri=""language:constant:classpath:OKResponse.xml""/>
      <log message=""Response Body before convert:  ${body}""/>
      <convertBodyTo type=""com.test.testservice.TestMessageResponse""/>
      <log message=""Response Body after convert:  ${body}""/>
  </route>
</camelContext>




And the camel-cxf consumer endpoint:



<cxf:cxfEndpoint id=""testServiceEndpoint""
                 address=""/TestService/v1""
                 wsdlURL=""wsdl/TestService.wsdl""
                 serviceName=""s:TestServiceInterface""
                 endpointName=""s:TestServicePort""
                 xmlns:s=""http://test.com/TestService"">
        <cxf:properties>
          <entry key=""dataFormat"" value=""PAYLOAD""/>
        </cxf:properties>
</cxf:cxfEndpoint>




I have explicitly set ""dataFormat"" to default PAYLOAD just for clarity purpose.


In this simple camel route, I try to change the entire body to a String XML message. As a result, the client will get an empty response back (I mean an empty soap envelope). The reason is due to following method:
org.apache.camel.component.cxf.DefaultCxfBinding.getBodyFromCamel:



public static Object getBodyFromCamel(org.apache.camel.Message out,
            DataFormat dataFormat) {
        Object answer = null;
        
        if (dataFormat == DataFormat.POJO) {
            answer = out.getBody();
        } else if (dataFormat == DataFormat.PAYLOAD) {
            answer = out.getBody(CxfPayload.class);
        } else if (dataFormat.dealias() == DataFormat.RAW) {
            answer = out.getBody(InputStream.class);
        } else if (dataFormat.dealias() == DataFormat.CXF_MESSAGE) {
            answer = out.getBody();
        }
        return answer;
    }




Obviously it will return a null object back because it tries to get a body of CxfPayload type. And I also know that above camel route will work fine if I use MESSAGE dataFormat instead.


However, the strange behaviour aries if I refresh camel-jaxb bundle in Karaf container. The client will get a non-empty response from OKResponse.xml file and everything works fine now. It looks like that when I refreshed camel-jaxb bundle, camel-core's FallbackConverter kicked in and it helped CXF consumer to convert the payload object into POJO.


If I refreshed camel-core bundle, then above test case would stop working and client would get an empty response (empty soap envelope) back, again. So it looks like that when camel-core bundle's was refreshed, it's new activator was not able to load converters from camel-jaxb bundle since the bundle was already there. So only refreshing of the camel-jaxb bundle would enable camel-core to load the FallbackConverter again, thus helps the test route to work. 


I also tried to change ""start-level"" of the camel-jaxb bundle to a value much higher than '50', say '80', then it would work the most times.","joeluo:1413422416:2014-10-16T09:20:16.905+0000:1413422416:2014-10-16T09:20:16.905+0000:The test case can be downloaded from this JIRA:
https://issues.jboss.org/browse/ENTESB-2094
njiang:1413438152:2014-10-16T13:42:32.650+0000:1413438152:2014-10-16T13:42:32.650+0000:It's caused by the JAXB FallbackTypeConverter need to be the first fallbackTypeConverter, but as camel loading the fallbackTypeConverter from a kind of OSGi Servers which is returned in different order. 
Now I'm thinking to introduce a ordered list which can help us to decide which fallbackTypeConverter need to the first one the list.

njiang:1413518959:2014-10-17T12:09:19.112+0000:1413518959:2014-10-17T12:09:19.112+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x."
0,CAMEL-7919,Bug,Minor,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Kevin Anthony Earls,0,3,2014-10-16 08:34:36+00:00,2015-01-14 18:22:58+00:00,The new camel-jira component needs tests,"githubbot:1414024891:2014-10-23T08:41:31.691+0000:1414024891:2014-10-23T08:41:31.691+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/310

    CAMEL-7919 New tests for the camel-jira component

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7919A

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/310.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #310
    
----
commit 9906985763e32a01f0b2dd1caa3d3f727e55660d
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-10-23T08:40:03Z

    CAMEL-7919 New tests for the camel-jira component

----

njiang:1414368814:2014-10-27T08:13:34.368+0000:1414368814:2014-10-27T08:13:34.368+0000:Applied patch into master branch with thanks to Kevin.
githubbot:1421230978:2015-01-14T18:22:58.197+0000:1421230978:2015-01-14T18:22:58.197+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/310
"
0,CAMEL-7918,Improvement,Major,2.12.4,2.12.5,"
None
",Closed,Fixed,2.12.5,Christian Müller,Christian Müller,0,1,2014-10-16 06:48:05+00:00,2014-10-16 11:54:19+00:00,"From time to time, we have the following test failed in camel-spring-ws:



christians-mbp:camel-spring-ws cmueller$ mvn test -Dtest=ConsumerMarshallingRouteTest
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring Web Services 2.12.5-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-spring-ws ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-spring-ws ---
[INFO]
[INFO] >>> camel-package-maven-plugin:2.12.5-SNAPSHOT:generate-components-list (default) @ camel-spring-ws >>>
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-spring-ws ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-spring-ws ---
[INFO]
[INFO] <<< camel-package-maven-plugin:2.12.5-SNAPSHOT:generate-components-list (default) @ camel-spring-ws <<<
[INFO]
[INFO] --- camel-package-maven-plugin:2.12.5-SNAPSHOT:generate-components-list (default) @ camel-spring-ws ---
[INFO] Generated /Users/cmueller/workspaceCamel/camel/components/camel-spring-ws/target/generated/camel/components/META-INF/services/org/apache/camel/component.properties containing the Camel component spring-ws
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-spring-ws ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-spring-ws ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-spring-ws ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 24 resources
[INFO] Copying 3 resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-spring-ws ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.15:test (default-test) @ camel-spring-ws ---
[INFO] Surefire report directory: /Users/cmueller/workspaceCamel/camel/components/camel-spring-ws/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest
ERROR:  'NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.'
ERROR:  'NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.'
Tests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 1.11 sec <<< FAILURE! - in org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest
consumeWebserviceWithPojoRequest(org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest)  Time elapsed: 0.892 sec  <<< ERROR!
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><GetQuote xmlns=""http://www.stockquotes.edu/""><symbol>GOOG</symbol></GetQuote>]
	at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.setName(AttrNSImpl.java:105)
	at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.<init>(AttrNSImpl.java:74)
	at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.createAttributeNS(CoreDocumentImpl.java:2138)
	at com.sun.xml.internal.messaging.saaj.soap.SOAPDocumentImpl.createAttributeNS(SOAPDocumentImpl.java:172)
	at com.sun.org.apache.xerces.internal.dom.ElementImpl.setAttributeNS(ElementImpl.java:656)
	at com.sun.xml.internal.messaging.saaj.soap.impl.ElementImpl.setAttributeNS(ElementImpl.java:1250)
	at com.sun.org.apache.xalan.internal.xsltc.trax.SAX2DOM.startElement(SAX2DOM.java:199)
	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.closeStartTag(ToXMLSAXHandler.java:204)
	at com.sun.org.apache.xml.internal.serializer.ToSAXHandler.flushPending(ToSAXHandler.java:277)
	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.startElement(ToXMLSAXHandler.java:646)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:504)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1370)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2763)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:513)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:815)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:744)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:128)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1208)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:543)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transformIdentity(TransformerImpl.java:663)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:732)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:345)
	at org.springframework.ws.client.core.WebServiceTemplate$5.doWithMessage(WebServiceTemplate.java:494)
	at org.springframework.ws.client.core.WebServiceTemplate.doSendAndReceive(WebServiceTemplate.java:571)
	at org.springframework.ws.client.core.WebServiceTemplate.sendAndReceive(WebServiceTemplate.java:537)
	at org.springframework.ws.client.core.WebServiceTemplate.doSendAndReceive(WebServiceTemplate.java:492)
	at org.springframework.ws.client.core.WebServiceTemplate.sendSourceAndReceive(WebServiceTemplate.java:479)
	at org.springframework.ws.client.core.WebServiceTemplate.sendSourceAndReceive(WebServiceTemplate.java:470)
	at org.apache.camel.component.spring.ws.SpringWebserviceProducer.process(SpringWebserviceProducer.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:201)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:297)
	at org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest.consumeWebserviceWithPojoRequest(ConsumerMarshallingRouteTest.java:62)

consumeWebserviceWithPojoRequestAndPojoResponse(org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest)  Time elapsed: 0.057 sec  <<< ERROR!
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: <?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><GetQuote xmlns=""http://www.stockquotes.edu/""><symbol>GOOG</symbol></GetQuote>]
	at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.setName(AttrNSImpl.java:105)
	at com.sun.org.apache.xerces.internal.dom.AttrNSImpl.<init>(AttrNSImpl.java:74)
	at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.createAttributeNS(CoreDocumentImpl.java:2138)
	at com.sun.xml.internal.messaging.saaj.soap.SOAPDocumentImpl.createAttributeNS(SOAPDocumentImpl.java:172)
	at com.sun.org.apache.xerces.internal.dom.ElementImpl.setAttributeNS(ElementImpl.java:656)
	at com.sun.xml.internal.messaging.saaj.soap.impl.ElementImpl.setAttributeNS(ElementImpl.java:1250)
	at com.sun.org.apache.xalan.internal.xsltc.trax.SAX2DOM.startElement(SAX2DOM.java:199)
	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.closeStartTag(ToXMLSAXHandler.java:204)
	at com.sun.org.apache.xml.internal.serializer.ToSAXHandler.flushPending(ToSAXHandler.java:277)
	at com.sun.org.apache.xml.internal.serializer.ToXMLSAXHandler.startElement(ToXMLSAXHandler.java:646)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:504)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1370)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2763)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:513)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:815)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:744)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:128)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1208)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:543)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transformIdentity(TransformerImpl.java:663)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:732)
	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl.transform(TransformerImpl.java:345)
	at org.springframework.ws.client.core.WebServiceTemplate$5.doWithMessage(WebServiceTemplate.java:494)
	at org.springframework.ws.client.core.WebServiceTemplate.doSendAndReceive(WebServiceTemplate.java:571)
	at org.springframework.ws.client.core.WebServiceTemplate.sendAndReceive(WebServiceTemplate.java:537)
	at org.springframework.ws.client.core.WebServiceTemplate.doSendAndReceive(WebServiceTemplate.java:492)
	at org.springframework.ws.client.core.WebServiceTemplate.sendSourceAndReceive(WebServiceTemplate.java:479)
	at org.springframework.ws.client.core.WebServiceTemplate.sendSourceAndReceive(WebServiceTemplate.java:470)
	at org.apache.camel.component.spring.ws.SpringWebserviceProducer.process(SpringWebserviceProducer.java:89)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:201)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:128)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:132)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:149)
	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:297)
	at org.apache.camel.component.spring.ws.ConsumerMarshallingRouteTest.consumeWebserviceWithPojoRequestAndPojoResponse(ConsumerMarshallingRouteTest.java:75)


Results :

Tests in error:
  ConsumerMarshallingRouteTest.consumeWebserviceWithPojoRequest:62 � CamelExecution
  ConsumerMarshallingRouteTest.consumeWebserviceWithPojoRequestAndPojoResponse:75 � CamelExecution

Tests run: 2, Failures: 0, Errors: 2, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.887s
[INFO] Finished at: Thu Oct 16 08:44:32 CEST 2014
[INFO] Final Memory: 14M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.15:test (default-test) on project camel-spring-ws: There are test failures.
[ERROR]
[ERROR] Please refer to /Users/cmueller/workspaceCamel/camel/components/camel-spring-ws/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException




It's a known issue and can be solved by using Xalan 2.7.0+:
http://docs.spring.io/spring-ws/site/faq.html#namespace_err",muellerc:1413431653:2014-10-16T11:54:13.160+0000:1413431653:2014-10-16T11:54:13.160+0000:I couldn't reproduce the issue in newer versions of Camel.
0,CAMEL-7917,Bug,Major,2.12.4,2.12.5,"
None
",Closed,Fixed,2.12.5,Christian Müller,Christian Müller,0,1,2014-10-15 17:49:34+00:00,2014-10-15 20:36:05+00:00,"A known issue in jsch 0.1.50:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Bye World]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:622)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:463)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:165)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:159)
	at org.apache.camel.component.jsch.ScpSimpleProduceTest.testScpSimpleSubPathProduce(ScpSimpleProduceTest.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at com.jcraft.jsch.Session.checkHost(Session.java:802)
	at com.jcraft.jsch.Session.connect(Session.java:342)
	at org.apache.camel.component.jsch.ScpOperations.createSession(ScpOperations.java:249)
	at org.apache.camel.component.jsch.ScpOperations.connect(ScpOperations.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.connectIfNecessary(RemoteFileProducer.java:189)
	at org.apache.camel.component.file.remote.RemoteFileProducer.recoverableConnectIfNecessary(RemoteFileProducer.java:181)
	at org.apache.camel.component.file.remote.RemoteFileProducer.preWriteCheck(RemoteFileProducer.java:113)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:114)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:163)
	... 31 more",
0,CAMEL-7916,Bug,Major,2.14.0,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Benjamin Graf,0,3,2014-10-15 11:19:43+00:00,2014-10-24 14:40:48+00:00,"Several components does search the registry by calling findByTypeWithName. This method needs in OsgiServiceRegistry that every service has a name property which is not forced by spec and therefor optional. Maybe add a different ""name"" in those cases.","njiang:1413497187:2014-10-17T06:06:27.227+0000:1413497187:2014-10-17T06:06:27.227+0000:I got your point, the name is used as index key, we can generate a unique name for it.
njiang:1413519171:2014-10-17T12:12:51.779+0000:1413519171:2014-10-17T12:12:51.779+0000:Applied the patch camel master, camel-2.14.x and camel-2.13.x branch.
antoine.dessaigne:1413679127:2014-10-19T08:38:47.614+0000:1413679127:2014-10-19T08:38:47.614+0000:I was wondering, should the name be resilient among the calls of findByTypeWithName ? If you add or remove something that implements what you looking for then the names will change. Thus maybe you can use System.identityHashCode for the suffix of the service.
njiang:1414131180:2014-10-24T14:13:00.330+0000:1414131180:2014-10-24T14:13:00.330+0000:I don't think we need to use System.identityHashCode for it as the map is created per invocation. 
antoine.dessaigne:1414132848:2014-10-24T14:40:48.023+0000:1414132848:2014-10-24T14:40:48.023+0000:The issue is not with the map but rather whether or not a service should always have the same name no matter how many times you're calling the method. If the name should always be the same then the counter approach won't work. (or there's something I didn't saw)"
0,CAMEL-7915,Improvement,Major,"2.13.2, 2.14.0","2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-15 00:56:51+00:00,2014-10-17 12:57:39+00:00,"HashedWheelTimer is should not create per producer, we need to share it across the Camel NettyComponent","njiang:1413521859:2014-10-17T12:57:39.913+0000:1413521859:2014-10-17T12:57:39.913+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7914,Bug,Major,2.14.0,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Davy De Waele,0,2,2014-10-14 18:53:33+00:00,2015-02-15 10:33:40+00:00,"When an error occurs in the Camel MQTT endpoint, the CallbackConnection onFailure callback simply disconnects the connection.


At that point there doesn't seem to be any mechanism to reconnect to the broker.



            public void onFailure(Throwable value) {
                connection.disconnect(new Callback<Void>() {
                    public void onSuccess(Void value) {
                    }

                    public void onFailure(Throwable e) {
                        LOG.debug(""Failed to disconnect from "" + configuration.getHost() + "". This exception is ignored."", e);
                    }
                });
            }","davydewaele:1413345425:2014-10-15T11:57:05.895+0000:1413345425:2014-10-15T11:57:05.895+0000:See discussion here : http://camel.465427.n5.nabble.com/Camel-MQTT-Endpoint-reconnect-on-transport-failure-td5757564.html

""The camel mqtt component does not implement the ""ReconnectAttempts"" 
parameters of the mqtt-client ( 
https://github.com/fusesource/mqtt-client#controlling-connection-reconnects). ""


davsclaus:1417327946:2014-11-30T14:12:26.299+0000:1417327946:2014-11-30T14:12:26.299+0000:You can configure the max reconnect attempts on the configuration / endpoint. Have you tried that?
davsclaus:1423967620:2015-02-15T10:33:40.270+0000:1423967620:2015-02-15T10:33:40.270+0000:Thanks for reporting. 
"
0,CAMEL-7913,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Aaron Whiteside,0,2,2014-10-14 18:16:11+00:00,2014-11-04 02:13:04+00:00,ObjectConverter does not support String to java.lang.Character conversion (only char primitive),"aaronjwhiteside:1413282978:2014-10-14T18:36:18.503+0000:1413282978:2014-10-14T18:36:18.503+0000:Patch attached.
njiang:1415038384:2014-11-04T02:13:04.278+0000:1415038384:2014-11-04T02:13:04.278+0000:Applied the patch into master branch with thanks to Aaron."
0,CAMEL-7912,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Aaron Whiteside,0,2,2014-10-14 17:29:15+00:00,2014-11-04 02:16:31+00:00,"Add Character support to ObjectHelper::loadSimpleType()


Currently all primitives are supported except java.lang.Character..","aaronjwhiteside:1413282689:2014-10-14T18:31:29.019+0000:1413282689:2014-10-14T18:31:29.019+0000:Patch attached.
njiang:1415038591:2014-11-04T02:16:31.360+0000:1415038591:2014-11-04T02:16:31.360+0000:Applied the patch into master branch with thanks to Aaron."
0,CAMEL-7911,New Feature,Major,2.14.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Daniel Lindberg,0,3,2014-10-14 10:43:01+00:00,2017-09-14 10:50:25+00:00,"Support for createSharedDurableConsumer should be implemented according to the JMS 2.0 specification to allow load balancing for e.g. durable topic subscribers. 


Although Virtual Topics are preferred, there are situations where this is not feasible to use, e.g. when we need to connected to a topic which is part of a product, or for some other reason is not in our control.",davsclaus:1505357400:2017-09-14T10:50:00.572+0000:1505357425:2017-09-14T10:50:25.769+0000:CAMEL-11147
0,CAMEL-7910,Bug,Major,"2.12.4, 2.13.2, 2.14.0","2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-14 02:19:49+00:00,2014-11-02 11:43:54+00:00,"If add other handler interesting about close and open event and they are set behind the netty  

{Client|Server}ChannelHandler, they cannot not get the event as current netty  {Client|Server}

ChannelHandler  doesn't pass these event around.","njiang:1413742536:2014-10-20T02:15:36.881+0000:1413742536:2014-10-20T02:15:36.881+0000:Applied the patch into camel master, camel-2.14.x, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7909,Bug,Major,"2.13.2, 2.14.0","2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-14 01:43:01+00:00,2015-01-04 01:37:08+00:00,"Current Netty Http Consumer decided if it need to close connection by checking the request connection header. But if the response connection header is 'close',  the netty http consumer need to close the connection at the same time.","njiang:1413742487:2014-10-20T02:14:47.913+0000:1413742487:2014-10-20T02:14:47.913+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7908,Improvement,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Aaron Whiteside,0,3,2014-10-14 00:26:51+00:00,2014-11-07 07:02:15+00:00,"Add a DestinationCreationStrategy to the SJMS component


JMS implementations like HornetQ do not allow dynamic queue/topic creation via the pure JMS API's. Extending SJMS with a DestinationCreationStrategy would allow one to replace the DefaultDestinationCreationStrategy with a provider specific one that in the case of HornetQ dynamically creates the queue/topic using the correct management API.


Implementation note:


JmsObjectFactory::createMessageProducer would be modified to supply a DestinationCreateionStrategy, it would then use this to obtain Destination's.","aaronjwhiteside:1413285438:2014-10-14T19:17:18.225+0000:1413285478:2014-10-14T19:17:58.639+0000:I'm readying a patch for this, but at the same time I'm finding a few things that could do with cleaning up (Namely creation of DefaultTransactionCommitStrategy spread across multiple classes), I'm tempted to include these cleanups in my patch, would that be acceptable or would you want a separate patch/issue?
aaronjwhiteside:1413288628:2014-10-14T20:10:28.894+0000:1413288662:2014-10-14T20:11:02.614+0000:Patch attached, all tests pass.

Decided to leave DefaultTransactionCommitStrategy alone in this patch.
davsclaus:1414821270:2014-11-01T13:54:30.508+0000:1414821270:2014-11-01T13:54:30.508+0000:The patch does remove a bunch of api and code, and thus really only applicable for master branch.  And therefore you would need to wait for Camel 2.15 release.

Maybe you can create a patch that changes less and be better suitable for patching 2.14.x etc. 
davsclaus:1414821326:2014-11-01T13:55:26.733+0000:1414821326:2014-11-01T13:55:26.733+0000:We also appreciate if there is unit tests that covers the new functionality, such as using a custom strategy. So please add an unit test that does that.
aaronjwhiteside:1415204162:2014-11-06T00:16:02.386+0000:1415204211:2014-11-06T00:16:51.742+0000:Attached new patch, rebased from latest changes. Now with unit tests! ;)

I've also broken down the major changes in this patch with comments for better understanding, I'm hoping you'll see my point of view about why these changes were needed and accept this patch into the 2.14.X branch.. 

{quote}
Changes to JmsObjectFactory

Methods that were deleted, because they were directly replaced by DestinationCreationStrategy
- createDestination()
- createQueue()
- createTemporaryDestination()
- createTopic()

Methods that were deleted, because they took a Session to create a Destination and then went on to call createMessageConsumer() with said Destination. Since DestinationCreationStrategy replaces all creation of Destinations these methods were no longer needed.
- createQueueConsumer()
- createTopicConsumer()
- createTemporaryMessageConsumer()

Methods that were not used anywhere in the code base. I could put these back if really needed, but since no one was using them I figured it's cleaner to not have them, after all they are there in the version control history.
- createQueueProducer()
- createTopicProducer()

Methods changed to accept a Destination instead of a String destination, and the logic of Destination creation was moved out into DestinationCreationStrategy.
- createMessageConsumer()
- createMessageProducer()


Changes to InOnlyProducer.doCreateProducerModel()
- Corrected usage of try {} finally {} block. Also simplies the code, no need for null check anymore.
- replaced 'if (isEndpointTransacted())' and 'if (getCommitStrategy() != null)' with ternary operators, to provide cleaner code.
- Added call to DestinationCreationStrategy to create the Destination before calling JmsObjectFactory.createMessageProducer.
- Better to fail hard, don't return a null resource, error out instead. Exception will propagate back up to SjmsProducer.doStart().


Changes to InOutProducer

Changes to doCreateProducerModel()
- Corrected usage of try {} finally {} block. Also simplies the code, no need for null check anymore.
- replaced 'if (isEndpointTransacted())' with ternary operator, for cleaner code.
- Added call to DestinationCreationStrategy to create the Destination before calling JmsObjectFactory.createMessageProducer.
- removed null checks, because 1) JMS specification says that connection.createSession() will return a non null value or throw an exception. 2) provide consistency with InOnlyProducer.
- Better to fail hard, don't return a null resource, error out instead. Exception will propagate back up to SjmsProducer.doStart().

Changes to sendMessage()
- Corrected usage of try {} finally {} block and Lock, reference http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html

Changes to MessageConsumerResourcesFactory.makeObject()
- Corrected usage of try {} finally {} block with borrowConnection().
- No default NULL value for the 'answer' variable, as the method should either throw an exception or return non-null.

Removed inner class InternalTempDestinationListener
- Not used anywhere. Cleaner code, history will be in version control..
{quote}
aaronjwhiteside:1415205312:2014-11-06T00:35:12.230+0000:1415267979:2014-11-06T17:59:39.964+0000:Updated patch with the following additional changes:

{quote}
Changes to SjmsConsumer.createConsumer()
- Corrected usage of try {} finally {} block. Also simplies the code, no need for null check anymore.
- Added call to DestinationCreationStrategy to create the Destination before calling JmsObjectFactory.createMessageProducer.
- replaced 'if (isTransacted())' with ternary operator, for cleaner code.
- Better to fail hard, don't return a null resource, error out instead. Exception will propagate back up to SjmsConsumer.doStart().
- removed null checks, because 1) JMS specification says that connection.createSession() will return a non null value or throw an exception. 2) JMS specification says that session.createConsumer() will return a non null value or throw an exception, and we called messageConsumer.setMessageListener() before we check if messageConsumer is null - so that's redundant.
{quote}
njiang:1415314927:2014-11-07T07:02:07.047+0000:1415314927:2014-11-07T07:02:07.047+0000:Hi Aaron,
Thanks for the comments, it's very helpful when I went through the patch. 
As you introduced a new DestinationCreationStrategy and did lots of clean up work (removing the unused code), I'm afraid I cannot merge the patch into camel-2.14.x branch.

BTW, I just updated the sjms wiki page with this new Option of DestinationCreateionStrategy. Please double check the page in case I missed something.
"
0,CAMEL-7907,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Benjamin Graf,0,2,2014-10-13 18:35:48+00:00,2015-07-10 06:58:20+00:00,Camel actually does not support JMSCorrelationIDAsBytes.,"graben:1417244695:2014-11-29T15:04:55.075+0000:1417244695:2014-11-29T15:04:55.075+0000:Patch Suggestion
davsclaus:1436482700:2015-07-10T06:58:20.896+0000:1436482700:2015-07-10T06:58:20.896+0000:Thanks for the patch."
0,CAMEL-7906,Bug,Minor,None,,"
None
",Resolved,Abandoned,None,Unassigned,Sergey Semka,0,2,2014-10-13 13:24:28+00:00,2019-07-31 08:54:16+00:00,"Description of bug #1:
We had to receive error: ""405 Method Not Allowed""
because the invoked restlet (route) does not have the requested POST method.
(it has restletMethods=GET).
But we do not get such an error. We get response status = 200.
Because we get into the rout of another restlet (which ends in a template).
We request the following URL:
http://localhost:1101/users/

{id}/test/search       ,restletMethods=GET


But we get to URL:



http://localhost:1101/users/
{id}

/test/

{username}

    ,restletMethods=PUT,POST


Description of bug #2:
There is restlet (route): http://localhost:1101/users/

{id}

/test/search, which supports restletMethods GET but when we request it, we get the following error: ""405 Method Not Allowed""


tests for confirmation of existence of two bugs in camel-restlet:


Link for file in Google Drive:
https://drive.google.com/file/d/0B0DfsrbRTR2tamJXNTEyVXJPVHc/view?usp=sharing","Sergey.Semka:1413178689:2014-10-13T13:38:09.817+0000:1413178689:2014-10-13T13:38:09.817+0000:tests for confirmation of existence of two bugs in camel-restlet
davsclaus:1414903347:2014-11-02T12:42:27.479+0000:1414903347:2014-11-02T12:42:27.479+0000:Its a bug in restlet that in {{org.restlet.util.RouteList#getBest}} that doesnt find the best. There uri that has 100% match isn't picked over the uri that is 99% matched. They both get a score of 1.0, and restlet picks the 1st one.
davsclaus:1415184505:2014-11-05T18:48:25.812+0000:1415184505:2014-11-05T18:48:25.812+0000:I think the logic in restlet is the correct place to improve so its getBest deals with this. Its a non trivial problem how to match those template patterns - when they clash with a /search and a {username} in the same position. In that case /search should be picked over as you would not search for a person with a username search. Also getBest does only template mating on the uri, and do not take HTTP Method into consideration. 

davsclaus:1415184532:2014-11-05T18:48:52.453+0000:1415184532:2014-11-05T18:48:52.453+0000:In your use-case you can swap the 2 routes, then the /search will be picked by restlet."
0,CAMEL-7905,Improvement,Minor,None,2.16.0,"
None
",Closed,Fixed,2.16.0,Benjamin P. O'Day,Daniel (Inactive),0,3,2014-10-13 07:27:57+00:00,2017-08-04 02:15:54+00:00,"Currently a DirectConsumerNotAvailableException or DirectVmConsumerNotAvailableException is thrown when a message is send via a direct endoint and no consumer has been set up for this endpoint.


In a current scenario I want to use camel to loosely couple two components using direct endpoints that might be consumed by some bean. Especially there should be no dependency from the producing component to the consuming component. However, if there is a consumer, messages send from the producer must be consumed synchronously in the same thread to preserve the transaction context of the producer. That why I chose direct for the producer's endpoint.


What is meant by ""the messages might be consumed"" is that the consuming component might not be deployed, when the consumer produces the first messages, or perhaps will never be deployed. I know there is the block option for the direct component but I don't want the producer to wait for the consumer as it might take some time (possibly forever) for the consumer to be available.


I think this is a very common scenario for a messaging system and I was surprised not to find an easy out-of-the-box way to handle this with camel. That's why I think an additional option failIfNoConsumers (similar to the option for the seda component) for the direct and direct-vm component would be very handy.","boday:1417123866:2014-11-28T05:31:06.212+0000:1417210477:2014-11-29T05:34:37.808+0000:[~dpr] - what should happen to the message that was sent...just throw it away?  a seda producer can create a blocking queue on demand to hold the message until a consumer comes along.  this doesn't work for direct however given the need to make a synchronous call...hence the block option, etc.



daniel@peger.de:1417135329:2014-11-28T08:42:09.521+0000:1501784154:2017-08-04T02:15:54.687+0000:[~boday] - Even if it sounds wrong in the first place, I actually would discard the messages.

In the scenario described above, it is a valid situation that there is no consumer for a direct endpoint. And what else would you want to do, if no one is interested in the messages an endpoint produces, but to discard the messages. You can't wait as you don't know, if there will ever be a consumer for the message and you probably would not want an Exception to be thrown as Exceptions are a very costly way for flow-control, if they occur on a regular basis in a ""normal"" application state. That is discarding the message is the best option you have. As this is may lead to message loss where endpoints without consumers are not a valid application state, this definitively should be an opt-in option!
boday:1417251917:2014-11-29T17:05:17.818+0000:1417251917:2014-11-29T17:05:17.818+0000:you can always catch the DirectConsumerNotAvailableException in the producer and just log/ignore it...otherwise, I agree that it would be easier/cleaner if a simple option existed to ignore these errors for certain routes, etc...

unless there are any objections, I'll look into adding this option...
davsclaus:1426892318:2015-03-21T06:58:38.821+0000:1426892318:2015-03-21T06:58:38.821+0000:Ok so if we add `failIfNoConsumers` and set it to default `true` then its like today.

And if users set the option to false, then the producer will just skip processing from the consumer, as if it was a no-op call.
boday:1427053292:2015-03-23T03:41:32.873+0000:1427053292:2015-03-23T03:41:32.873+0000:yep, that was my take as well...I'll dust off this code and try to get it in for 2.16.0
boday:1427889439:2015-04-01T19:57:19.649+0000:1427889439:2015-04-01T19:57:19.649+0000:added option to both direct/direct-vm components...they default to 'true' to maintain current functionality"
0,CAMEL-7904,New Feature,Major,2.13.0,,"
None
",Resolved,Later,None,Unassigned,Camel Guy,0,1,2014-10-13 06:03:43+00:00,2015-08-07 15:16:32+00:00,"For PostgreSQL it is common to run two commands in a single transaction in order to set the schema search path:


set search_path to foo, public;
select 5;


Due to connection pooling it is desirable to combine both statements in a single operation.


These types of queries don't work with the JDBC and SQL components because they return the result set for the first command (set search_path), which is always empty.


The easiest solution would be an option to skip the first N result sets. However, if any of those result sets reported an error, an exception should be thrown.","camelguy:1413188396:2014-10-13T16:19:56.239+0000:1413188396:2014-10-13T16:19:56.239+0000:See related http://stackoverflow.com/questions/11187834/accessing-stored-procedures-multiple-result-sets-in-apache-camel
camelguy:1413192839:2014-10-13T17:33:59.527+0000:1416386986:2014-11-19T16:49:46.242+0000:I went through the Statement JDBC interface and it appears that there is no way to know how many ResultSets will be returned. You have to process each ResultSet until there are no more. So the JDBC component can not simply return the ""last"" ResultSet. Instead, it needs to be told how many result sets to ignore.
camelguy:1416386714:2014-11-19T16:45:14.147+0000:1416391139:2014-11-19T17:58:59.578+0000:The main problem is that PostgreSQL doesn't let you specify the schema on the connection properties.

Please see:

http://postgresql.nabble.com/Search-path-in-connection-string-td5718440.html

Even the beta 9.4 JDBC driver will not have this capability. Therefore, I think using Postgres with a connection pool is just a headache, especially since my app determines the database name, schema, etc. at run time. I use recipientList and dynamically generate the ""to"" jdbc: url. 

I guess for now, I'd better turn off connection pooling."
0,CAMEL-7903,Improvement,Major,2.14.0,2.15.0,"

xmpp

",Resolved,Fixed,2.15.0,Willem Jiang,Florian Schmaus,0,3,2014-10-12 15:53:55+00:00,2015-03-21 11:48:51+00:00,"The currently used Smack version of component/camel-xmpp, 3.2.1 is very old and contains security vulnerabilities. Update to the latest stable Smack version, which is currently Smack 4.0.4.","githubbot:1413100598:2014-10-12T15:56:38.585+0000:1413100598:2014-10-12T15:56:38.585+0000:GitHub user Flowdalic opened a pull request:

    https://github.com/apache/camel/pull/299

    Update to Smack 4.0.4

    Remove Presence Packet listener in XmppConsumer. It never worked, since
    the processPacket() method does check if the given Packet is instanceof
    Message, so the filtered Presence Packets never got processed.
    
    XMPPError.getCode() is no more. Integer error codes have been deprecated
    from XMPP for a while. Use getType() instead.
    
    Use the connection packet reply timeout, instead of the global one in
    SmackConfiguration (where the method name was changed to
    SmackConfiguration.getDefaultPacketReplyTimeout()).
    
    Use JivePropertiesManager for Packet properties.
    
    Fixes CAMEL-7903

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Flowdalic/camel smack40

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/299.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #299
    
----
commit 220a61392062654b1c559afc46f4af9fc8c996fd
Author: Florian Schmaus <flo@geekplace.eu>
Date:   2014-10-12T14:24:04Z

    Update to Smack 4.0.4
    
    Remove Presence Packet listener in XmppConsumer. It never worked, since
    the processPacket() method does check if the given Packet is instanceof
    Message, so the filtered Presence Packets never got processed.
    
    XMPPError.getCode() is no more. Integer error codes have been deprecated
    from XMPP for a while. Use getType() instead.
    
    Use the connection packet reply timeout, instead of the global one in
    SmackConfiguration (where the method name was changed to
    SmackConfiguration.getDefaultPacketReplyTimeout()).
    
    Use JivePropertiesManager for Packet properties.
    
    Fixes CAMEL-7903

----

davsclaus:1426903110:2015-03-21T09:58:30.743+0000:1426903110:2015-03-21T09:58:30.743+0000:Camel 2.15.x is using 4.x
githubbot:1426909731:2015-03-21T11:48:51.192+0000:1426909731:2015-03-21T11:48:51.192+0000:Github user Flowdalic closed the pull request at:

    https://github.com/apache/camel/pull/299
"
0,CAMEL-7902,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Kevin Anthony Earls,0,3,2014-10-10 12:35:20+00:00,2014-10-14 01:31:36+00:00,The new camel-github component (See CAMEL-7777) needs integration tests.,"njiang:1412925149:2014-10-10T15:12:29.129+0000:1412925149:2014-10-10T15:12:29.129+0000:Merged the pull request into camel master branch.
njiang:1412925778:2014-10-10T15:22:58.511+0000:1412925778:2014-10-10T15:22:58.511+0000:Hi Kevin,
I just noticed there are some updated on the camel-github, do you mind to add another unit test for it?

kearls:1412925895:2014-10-10T15:24:55.803+0000:1412925895:2014-10-10T15:24:55.803+0000:Sure, I can look at it next week.

githubbot:1413167295:2014-10-13T10:28:15.350+0000:1413167295:2014-10-13T10:28:15.350+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/300

    CAMEL-7902 Added test for new ClosePullRequestProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7902A

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/300.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #300
    
----
commit a58a4fa43d64f20e9c1a84aebe5f7ad651127472
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-10-13T10:27:05Z

    CAME-7902 Added test for new ClosePullRequestProducer

----

githubbot:1413221496:2014-10-14T01:31:36.216+0000:1413221496:2014-10-14T01:31:36.216+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/300
"
0,CAMEL-7901,Bug,Major,2.13.0,,"

patch

",Resolved,Not A Problem,None,Willem Jiang,Robert Courtney,0,3,2014-10-10 05:48:42+00:00,2014-10-10 09:12:03+00:00,"A small scala + akka + camel test seems to show that the MockEndpoint.expectedBodiesReceived(final List<?> bodies) method is not working as expected.


the following scala code excerpt:


      val mep = camelContext.getEndpoint(""mock:file"").asInstanceOf[MockEndpoint]
      camel.template.sendBody(mep, ""test body"")
      println(""all exchanges:"")
      val exchanges = mep.getReceivedExchanges
      println(exchanges)
//      mep.expectedMessageCount(1) // WORKS
      mep.expectedBodiesReceived(""test body"") // FAILS
      mep.assertIsSatisfied


fails with this output:


2014-10-10 16:41:58,692 DEBUG o.a.c.component.mock.MockEndpoint  - mock://file >>>> 0 : Exchange[Message: test body] with body: test body and headers:

{breadcrumbId=ID-nbns-MacBook-Pro-local-59447-1412919718220-0-1}

all exchanges:
[Exchange[Message: test body]]
2014-10-10 16:41:58,693 INFO  o.a.c.component.mock.MockEndpoint  - Asserting: Endpoint[mock://file] is satisfied
2014-10-10 16:41:58,694 DEBUG o.a.c.component.mock.MockEndpoint  - mock://file failed and received[1]: Exchange[Message: test body]


mock://file Body of message: 0. Expected: <test body> but was: <null>
java.lang.AssertionError: mock://file Body of message: 0. Expected: <test body> but was: <null>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:628)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:394)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)


It looks like the problem is in MockEndpoint.java (line 613), where the actualBodyValues variable is initialised to an empty ArrayList on each invocation of expectedBodiesReceived(...), wiping out any values which were added to this List at line 1220 in performAssertions()


I've looked through the same code in camel-core 2.13.x and 2.14 and the same code exists there.","davidkarlsen@gmail.com:1412901424:2014-10-10T08:37:04.202+0000:1412901424:2014-10-10T08:37:04.202+0000:Move mep.expectedBodiesReceived(""test body"") before sendBody and it should work.
njiang:1412903236:2014-10-10T09:07:16.609+0000:1412903236:2014-10-10T09:07:16.609+0000:The MockEndpoint is just like other mock API, you need to setup the expect states before sending the message.
But if you want to access the exchange which is received by mock endpoint after sending the message.
njiang:1412903523:2014-10-10T09:12:03.156+0000:1412903523:2014-10-10T09:12:03.156+0000:It works as expect."
0,CAMEL-7900,Bug,Minor,2.14.0,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Paolo Antinori,0,2,2014-10-09 09:46:27+00:00,2014-10-11 06:21:28+00:00,"camel-hdfs2 component exposes chunkSize param, but that value is not correctly used in 


https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsFileType.java#L79


and the constant value:



public static final int DEFAULT_BUFFERSIZE = 4096;




always overrides it.","njiang:1412903668:2014-10-10T09:14:28.978+0000:1412903668:2014-10-10T09:14:28.978+0000:I just checked the code camel-hdfs, it has the same issue.
njiang:1412979688:2014-10-11T06:21:28.770+0000:1412979688:2014-10-11T06:21:28.770+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7899,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-09 01:50:19+00:00,2014-10-24 07:18:26+00:00,"Camel complains Failed to start route route3 because of Multiple consumers for the same endpoint is not allowed, when define the rest service on the same path.



 restConfiguration()
                .component(""jetty"")
                .host(""localhost"").port(8080)
                .contextPath(""rest"")
                .bindingMode(RestBindingMode.auto)
                .dataFormatProperty(""prettyPrint"", ""true"");
        rest(""/say"")
                .get(""/hello"").to(""direct:hello"")
                .get(""/bye"").consumes(""application/json"").to(""direct:bye"")
                .post(""/bye"").to(""direct:bye"");

        from(""direct:hello"")
                .transform().constant(""Hello World"");
        from(""direct:bye"")
                .transform().constant(""Bye World"");




Here is the discussion in the nabble.","njiang:1412811284:2014-10-09T07:34:44.429+0000:1412811284:2014-10-09T07:34:44.429+0000:camel-servlet has the same issue as camel-jetty.
camel-netty-http and camel-netty4-http doesn't throw the exception, but the get dsl doesn't work out of box.
njiang:1412813940:2014-10-09T08:19:00.577+0000:1412813940:2014-10-09T08:19:00.577+0000:Applied the patch into camel master and camel-2.14.x branches."
0,CAMEL-7898,New Feature,Minor,2.13.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Edward Ost,2,6,2014-10-08 22:49:36+00:00,2016-11-22 19:17:21+00:00,"CamelBlueprintTestSupport is great, but it only supports one context.  This limits it usefulness in an enterprise SOA environment where test fixtures are themselves implemented as test routes.  This is documented correctly at http://camel.apache.org/blueprint-testing.html .  But because of this bug you cannot use blueprint since the camel contexts for the new routes are not picked up.  For test fixtures this could possibly be worked around by perhaps adding the test routes directly with Camel Context components.  But even then we cannot compose multiple production camel contexts for extended integration testing.  Fixing this one small limitation would remove a lot of obstacles and complexity and promote more use of blueprint with Camel in an enterprise context.","hadrian:1412780151:2014-10-08T22:55:51.656+0000:1412780151:2014-10-08T22:55:51.656+0000:Looks like this mostly works on Linux but it fails consistently on Windows. I don't have a Windows system, could somebody with access to a win os confirm this?
edwardost:1415346794:2014-11-07T15:53:14.311+0000:1415346815:2014-11-07T15:53:35.915+0000:I have windows EC2 instance that I would be happy to provide access to for anyone who wants to work on the issue.  There is already an installed example that (sometimes) replicates the problem.
ggrzybek:1450232579:2015-12-16T10:22:59.721+0000:1450232579:2015-12-16T10:22:59.721+0000:What do you mean by _mostly works_? We've recently fixed intermittent failures in camel-test-blueprint. I don't think there are any camel-test-blueprint tests for multiple camel contexts (multiple blueprint descriptors should work).
Do you have any test cases that should work but fail? (on Windows?)
ggrzybek:1450232613:2015-12-16T10:23:33.598+0000:1450232613:2015-12-16T10:23:33.598+0000:Can you try with Camel 2.15.4/2.16.1? Is this issue still valid?
davsclaus:1479813440:2016-11-22T19:17:20.962+0000:1479813440:2016-11-22T19:17:20.962+0000:There is a camel-test-karaf you can use for karaf container testing"
0,CAMEL-7897,Bug,Major,2.14.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Robert Elliot,0,2,2014-10-08 17:07:48+00:00,2015-02-15 16:35:26+00:00,"When used with a PooledConnectionFactory, a Camel Route that consumes via JMS from an ActiveMQ endpoint will read one extra message and simply discard it after it has completed suspension, if that message is sent within a second of suspension being completed.


See attached test case.


As far as I can tell this is because nothing interrupts the taskExecutor on DefaultMessageListenerContainer when a route is suspended.


Expected behaviour - once a route is suspended, any messages sent to the queue from which it consumes should remain on that queue.","mahoney:1412759346:2014-10-08T17:09:06.046+0000:1412759346:2014-10-08T17:09:06.046+0000:See attached JUnit test and pom specifying its dependencies.
mahoney:1412759393:2014-10-08T17:09:53.981+0000:1412759393:2014-10-08T17:09:53.981+0000:If you use the ActiveMQConnectionFactory directly, without the wrapping PooledConnectionFactory, the test will pass.
davsclaus:1423988506:2015-02-15T16:21:46.786+0000:1423988506:2015-02-15T16:21:46.786+0000:See the note about pooled consumers and prefect
http://activemq.apache.org/what-is-the-prefetch-limit-for.html
davsclaus:1423989326:2015-02-15T16:35:26.723+0000:1423989326:2015-02-15T16:35:26.723+0000:There is always a window of opportunity that the jms consumer pickup new messages while suspending.

You can set acceptMessagesWhileStopping=true and process the messages instead of rejecting them.

Then when the suspending is complete new messages stats on the queue."
0,CAMEL-7896,Bug,Major,"2.13.2, 2.14.0","2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-10-08 13:31:03+00:00,2014-10-09 02:35:59+00:00,"If the http request connection header is ""keep alive"", camel http producer will not close the channel. It can cause some trouble if the response connection header is ""close"".  We need to close the channel if the response connection header is ""close"".","njiang:1412793359:2014-10-09T02:35:59.711+0000:1412793359:2014-10-09T02:35:59.711+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7895,Improvement,Minor,None,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Christian Müller,Colm O hEigeartaigh,0,3,2014-10-08 09:50:52+00:00,2014-10-22 10:36:17+00:00,"This task is to upgrade BouncyCastle + XML Security to pick up the latest releases. The former can be applied to all branches, the latter should only be applied to 2.15 + 2.14. A patch will be attached with a test fix caused by the XML Security upgrade.","njiang:1412900856:2014-10-10T08:27:36.577+0000:1412900856:2014-10-10T08:27:36.577+0000:Hi Colm,

I can only find one patch file. I'd be happy to apply the patch if you attach test fix patch  :)

Regards,

Willem
coheigea:1412901906:2014-10-10T08:45:06.075+0000:1412901906:2014-10-10T08:45:06.075+0000:Hi Willem,

Sorry, my comment wasn't very clear - the test fix is included in the patch I submitted. It's just a one-line fix for a regression in Santuario, that I've since fixed but not yet released.

Colm.
coheigea:1413874101:2014-10-21T14:48:21.033+0000:1413874101:2014-10-21T14:48:21.033+0000:Hi Willem,

Can the patch be applied please?

Colm.
muellerc:1413892701:2014-10-21T19:58:21.698+0000:1413892701:2014-10-21T19:58:21.698+0000:Thanks for the patch Colm!
I applied the patch to Camel 2.15.0 and only the BouncyCastle upgrade to camel-2.14.x and camel-2.13.x as we only include micro/patch upgrades in our maintenance branches.
coheigea:1413945377:2014-10-22T10:36:17.091+0000:1413945377:2014-10-22T10:36:17.091+0000:Thanks Christian!

Colm."
0,CAMEL-7894,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Elyran Kogan,0,2,2014-10-08 04:39:28+00:00,2014-10-09 02:38:04+00:00,"when sending a request with a null body ( it was GET request in my case)
I got the following exception.


after investigating the issue I found that because the body is null - the request is created with type DefaultHttpRequest and not DefaultFullHttpRequest which is created when there is a body


this causes the HttpObjectEncoder to stay in a wrong state after the request is sent, because of this code:


 if (msg instanceof LastHttpContent) {
      state = ST_INIT;
}


so the next request will fail with the exception.
the workaround is simple - use an empty string as body


also - this did not happen in camel-netty-http


the exception:
Caused by: io.netty.handler.codec.EncoderException: java.lang.IllegalStateException: unexpected message type: DefaultFullHttpRequest at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:107) at io.netty.channel.CombinedChannelDuplexHandler.write(CombinedChannelDuplexHandler.java:192) at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:658) at io.netty.channel.AbstractChannelHandlerContext.access$2000(AbstractChannelHandlerContext.java:32) at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.write(AbstractChannelHandlerContext.java:939) at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:991) at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:924) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:380) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:357) at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116) at java.lang.Thread.run(Thread.java:745) Caused by: java.lang.IllegalStateException: unexpected message type: DefaultFullHttpRequest at io.netty.handler.codec.http.HttpObjectEncoder.encode(HttpObjectEncoder.java:63) at io.netty.handler.codec.http.HttpClientCodec$Encoder.encode(HttpClientCodec.java:106) at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:89) ... 10 more","njiang:1412793484:2014-10-09T02:38:04.970+0000:1412793484:2014-10-09T02:38:04.970+0000:Applied the patch into camel master, camel-2.14.x branches."
0,CAMEL-7893,Bug,Minor,2.14.0,None,"
None
",Closed,Invalid,None,Unassigned,Daniel Lindberg,0,1,2014-10-07 15:21:45+00:00,2014-10-08 07:19:17+00:00,"I have a scenario where I need to use CamelJmsDestinationName to perform dynamic routing in cases where a specific input parameter has a value, but in cases where it doesn't exist, I fall back to a when() / otherwise() logic based xpaths on the body of the message. 


Pseudocode:



.choice()
    .when(header(""endpoint"").isNotNull())
    //Set to dummy, actual queue name will be set by processor 
    .to(""activemq:queue:dummy"")

    .when().xpath(""starts-with(/Messages/message/type/text(),'ItemLocation')"")
                        .to(""message.export.itemlocation"")




Let's say that my CamelJmsDestinationName has a value of message.export.custom. The actual routing does indeed work as expected, however when looking at the log, it states that the message was to the route as stated by the second when clause, message.export.itemlocation rather than
message.export.custom



INFO |  >>> (ExportMessageFromJmsRoute) choice --> 
activemq://queue:message.export.itemlocation <<< 




This can be VERY confusing when debugging your routes.","daniel.lindberg1@gmail.com:1412723957:2014-10-08T07:19:17.736+0000:1412723957:2014-10-08T07:19:17.736+0000:Sorry, there is nothing wrong here."
0,CAMEL-7892,Bug,Major,"2.12.4, 2.13.2, 2.14.0","2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Aldo Bongio,0,2,2014-10-07 14:59:36+00:00,2014-10-09 02:40:32+00:00,"The Restlet class
org.restlet.ext.httpclient.internal.HttpMethodCall.java
logs a warning in case a DELETE method call is performed with an entity, indicating that ""The current DELETE request provides an entity that may be not supported by the Apache HTTP Client library. If you face such issues, you can still move to another HTTP client connector.""


Unfortunately it seems impossible to force the Camel Restlet module to prepare a DELETE Restlet Request with no entity. In fact the class
org.apache.camel.component.restlet.DefaultRestletBinding in its method populateRestletRequestFromExchange always creates an entity. Instead it should set a null entity in case exchange.getIn().getBody() is null.","njiang:1412793632:2014-10-09T02:40:32.873+0000:1412793632:2014-10-09T02:40:32.873+0000:Applied the patch into camel master, camel-2.14.x, camel-2.13.x  and camel-2.12.x branches."
0,CAMEL-7891,Improvement,Major,2.14.0,2.18.0,"
None
",Closed,Fixed,2.18.0,Luca Burgazzoli,Mateusz Nowakowski,2,7,2014-10-06 15:49:12+00:00,2016-09-19 12:18:01+00:00,"Saxon 9.6 introduces a couple of non-backward compatible changes:



template.newTransformer() does not return net.sf.saxon.Controller anymore
so setting setMessageEmmiter won't work on the latest Saxon.




DOMResult provided to transform method  cannot have null node field
(current DomResultHandler won't work) that's backward compatibility change will be fixed : https://saxonica.plan.io/issues/2164","njiang:1412927573:2014-10-10T15:52:53.312+0000:1412927573:2014-10-10T15:52:53.312+0000:I got below compile error when update saxon to 9.6.0-1.
{code}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:compile (default-compile) on project camel-saxon: Compilation failure: Compilation failure:
[ERROR] /Users/jiangning/work/camel/git/camel/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java:[607,27] error: method setParameter in class DynamicQueryContext cannot be applied to given types;
[ERROR] required: StructuredQName,Sequence
[ERROR] found: String,Object
[ERROR] reason: actual argument String cannot be converted to StructuredQName by method invocation conversion
[ERROR] /Users/jiangning/work/camel/git/camel/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java:[610,27] error: method setParameter in class DynamicQueryContext cannot be applied to given types;
[ERROR] required: StructuredQName,Sequence
[ERROR] found: String,Exchange
[ERROR] reason: actual argument String cannot be converted to StructuredQName by method invocation conversion
[ERROR] /Users/jiangning/work/camel/git/camel/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java:[612,31] error: method setParameter in class DynamicQueryContext cannot be applied to given types;
[ERROR] required: StructuredQName,Sequence
[ERROR] found: String,Object
[ERROR] reason: actual argument String cannot be converted to StructuredQName by method invocation conversion
[ERROR] /Users/jiangning/work/camel/git/camel/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java:[624,31] error: method setParameter in class DynamicQueryContext cannot be applied to given types;
[ERROR] required: StructuredQName,Sequence
[ERROR] found: String,Object
[ERROR] reason: actual argument String cannot be converted to StructuredQName by method invocation conversion
[ERROR] /Users/jiangning/work/camel/git/camel/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java:[641,29] error: cannot find symbol
{code}
lb:1474251329:2016-09-19T10:15:29.339+0000:1474251329:2016-09-19T10:15:29.339+0000:[~davsclaus] do you know if this issue is still relevant ? I have not found references of setMessageEmmiter or error because of DomResultHandler so far
davsclaus:1474258083:2016-09-19T12:08:03.717+0000:1474258083:2016-09-19T12:08:03.717+0000:Luca, no I dont, maybe they changed APIs again in 9.7 etc.

This ticket was just a reminder that Saxon upgrade is not easy.
lb:1474258606:2016-09-19T12:16:46.785+0000:1474258606:2016-09-19T12:16:46.785+0000:So I'll close it, hoping no-one will reopen it again ;)"
0,CAMEL-7890,Bug,Major,2.14.0,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Mateusz Nowakowski,0,2,2014-10-06 14:32:28+00:00,2014-10-11 05:59:15+00:00,"XmlConverter.toSAXSourceFromStream does not set



sfactory.setNamespaceAware(true);","njiang:1412978355:2014-10-11T05:59:15.715+0000:1412978355:2014-10-11T05:59:15.715+0000:Enable the setting in camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7889,New Feature,Minor,2.13.2,,"
None
",Resolved,Duplicate,None,Willem Jiang,Nathan Wray,0,2,2014-10-06 12:56:42+00:00,2015-02-06 10:42:21+00:00,"Adds support for retrieving generated keys when also using prepared statements (""useHeadersAsParameters"").  This combination was not previously supported.","nathanwray:1412571480:2014-10-06T12:58:00.918+0000:1412571480:2014-10-06T12:58:00.918+0000:Patch
njiang:1412981327:2014-10-11T06:48:47.761+0000:1412981327:2014-10-11T06:48:47.761+0000:Hi Nathan,

CAMEL-7382 addressed the issue in Camel 2.14.0,  as it's a new feature of camel-jdbc, we don't back port to camel-2.13.x branch.
"
0,CAMEL-7888,Bug,Major,"2.12.0, 2.13.0, 2.14.0","2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,christian ohr,0,2,2014-10-06 10:59:40+00:00,2014-12-10 13:06:36+00:00,"Under constant load (i.e. Mina session never idles out), the HL7Decoder leaks memory. In fact, all received messages are appended to Mina's IOBuffer, which leads to OOME after some time.","christian.ohr:1412571497:2014-10-06T12:58:17.249+0000:1412571497:2014-10-06T12:58:17.249+0000:Attached Patch. 
A new test verifies that the MINA buffer does not grow out of bounds.

Two more changes:
* I updated MINA to 2.0.8.
* The HL7MLLPEncoder now also accepts plain byte arrays (without re-converting them into a String and back into a byte array). This works better with marshal(hl7), which emits a byte array anyway.

The patch should work for both trunk and 2.14 branch.



njiang:1412982504:2014-10-11T07:08:24.960+0000:1412982504:2014-10-11T07:08:24.960+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks Christian."
0,CAMEL-7887,Task,Major,2.15.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Christian Müller,0,3,2014-10-05 15:38:44+00:00,2016-03-23 09:02:07+00:00,"Executing of 'mvn clean install -Pvalidate' in camel/platforms/karaf/features is failing:



$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.15-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ apache-camel ---
[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO]
[INFO] >>> features-maven-plugin:2.4.0:validate (validate) @ apache-camel >>>
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO]
[INFO] <<< features-maven-plugin:2.4.0:validate (validate) @ apache-camel <<<
[INFO]
[INFO] --- features-maven-plugin:2.4.0:validate (validate) @ apache-camel ---
[INFO] == Preparing for validation ==
[INFO]  - getting list of system bundle exports
[INFO]  - getting list of provided bundle exports
[INFO]     scanning org.apache.camel.karaf:apache-camel:pom:2.15-SNAPSHOT for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-api:jar:1.7.1:provided for exports
[INFO]     scanning org.ops4j.pax.logging:pax-logging-service:jar:1.7.1:provided for exports
[INFO]     scanning log4j:log4j:jar:1.2.17:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.framework:jar:3.2.2:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.configadmin:jar:1.4.0:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:1.1.0:provided for exports
[INFO]     scanning org.apache.karaf.shell:org.apache.karaf.shell.console:jar:2.4.0:provided for exports
[INFO]     scanning jline:jline:jar:2.12:provided for exports
[INFO]     scanning org.fusesource.jansi:jansi:jar:1.11:provided for exports
[INFO]     scanning org.jledit:core:jar:0.2.1:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.modules:jar:2.4.0:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.config:jar:2.4.0:provided for exports
[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.fileinstall:jar:3.4.2:provided for exports
[INFO]     scanning org.apache.karaf:org.apache.karaf.util:jar:2.4.0:provided for exports
[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.core:jar:1.1.0:provided for exports
[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.api:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.aries.quiesce:org.apache.aries.quiesce.api:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.aries.proxy:org.apache.aries.proxy.api:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports
[INFO]     scanning org.apache.felix:org.apache.felix.gogo.runtime:jar:0.12.1:provided for exports
[INFO]     scanning org.apache.sshd:sshd-core:jar:0.12.0:provided for exports
[INFO]     scanning org.apache.mina:mina-core:jar:1.1.7:provided for exports
[INFO]     scanning org.slf4j:slf4j-api:jar:1.6.6:provided for exports
[INFO]     scanning com.sun.xml.bind:jaxb-impl:jar:2.2.7:compile for exports
[INFO]     scanning com.sun.xml.bind:jaxb-core:jar:2.2.7:compile for exports
[INFO]     scanning javax.xml.bind:jaxb-api:jar:2.2.7:compile for exports
[INFO]     scanning com.sun.istack:istack-commons-runtime:jar:2.16:compile for exports
[INFO]     scanning com.sun.xml.fastinfoset:FastInfoset:jar:1.2.12:compile for exports
[INFO]     scanning javax.xml.bind:jsr173_api:jar:1.0:compile for exports
[INFO]  - populating repositories with Karaf core features descriptors
[INFO]  - validation of file:/Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO] == Analyzing feature descriptor ==
[INFO]  - read /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features
[INFO]     scanning feature service-security for exports
[INFO]     OK: imports resolved for aries-proxy
[INFO]     scanning feature karaf-framework for exports
[INFO]     scanning feature aries-proxy for exports
[INFO]     scanning feature aries-blueprint for exports
[INFO]     scanning feature features for exports
[INFO]     scanning feature admin for exports
[INFO]     OK: imports resolved for shell
[INFO]     scanning feature diagnostic for exports
[INFO]     scanning feature shell for exports
[INFO]     OK: imports resolved for jaas
[INFO]     scanning feature deployer for exports
[INFO]     scanning feature wrapper for exports
[INFO]     scanning feature service-wrapper for exports
[INFO]     scanning feature obr for exports
[INFO]     scanning feature config for exports
[INFO]     scanning feature jetty for exports
[INFO]     OK: imports resolved for pax-jetty
[INFO]     scanning feature http for exports
[INFO]     OK: imports resolved for pax-http
[INFO]     scanning feature http-whiteboard for exports
[INFO]     OK: imports resolved for pax-http-whiteboard
[INFO]     scanning feature war for exports
[INFO]     OK: imports resolved for pax-war
[INFO]     scanning feature kar for exports
[INFO]     scanning feature webconsole for exports
[INFO]     scanning feature jaas for exports
[INFO]     scanning feature ssh for exports
[INFO]     scanning feature management for exports
[INFO]     scanning feature eventadmin for exports
[INFO]     scanning feature jasypt-encryption for exports
[INFO]     scanning feature blueprint-web for exports
[INFO]     scanning feature scr for exports
[INFO]     scanning feature wrap for exports
[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features
[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.365s
[INFO] Finished at: Sun Oct 05 17:35:17 CEST 2014
[INFO] Final Memory: 16M/244M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate (validate) on project apache-camel: Execution validate of goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate failed: An API incompatibility was encountered while executing org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate: java.lang.NoSuchMethodError: aQute.lib.io.IO.drain(Ljava/io/InputStream;)J
[ERROR] -----------------------------------------------------
[ERROR] realm =    plugin>org.apache.karaf.tooling:features-maven-plugin:2.4.0
[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy
[ERROR] urls[0] = file:/Users/cmueller/.m2/repository/org/apache/karaf/tooling/features-maven-plugin/2.4.0/features-maven-plugin-2.4.0.jar
[ERROR] urls[1] = file:/Users/cmueller/.m2/repository/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar
[ERROR] urls[2] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-jdk14/1.7.7/slf4j-jdk14-1.7.7.jar
[ERROR] urls[3] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar
[ERROR] urls[4] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
[ERROR] urls[5] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-inject-bean/2.3.0/sisu-inject-bean-2.3.0.jar
[ERROR] urls[6] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guice/3.1.0/sisu-guice-3.1.0-no_aop.jar
[ERROR] urls[7] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guava/0.9.9/sisu-guava-0.9.9.jar
[ERROR] urls[8] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.1/plexus-interpolation-1.1.jar
[ERROR] urls[9] = file:/Users/cmueller/.m2/repository/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar
[ERROR] urls[10] = file:/Users/cmueller/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar
[ERROR] urls[11] = file:/Users/cmueller/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar
[ERROR] urls[12] = file:/Users/cmueller/.m2/repository/com/google/code/google-collections/google-collect/snapshot-20080530/google-collect-snapshot-20080530.jar
[ERROR] urls[13] = file:/Users/cmueller/.m2/repository/junit/junit/3.8.2/junit-3.8.2.jar
[ERROR] urls[14] = file:/Users/cmueller/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.6/wstx-asl-3.2.6.jar
[ERROR] urls[15] = file:/Users/cmueller/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar
[ERROR] urls[16] = file:/Users/cmueller/.m2/repository/org/sonatype/spice/model-builder/1.3/model-builder-1.3.jar
[ERROR] urls[17] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-project-builder/3.0-alpha-2/maven-project-builder-3.0-alpha-2.jar
[ERROR] urls[18] = file:/Users/cmueller/.m2/repository/org/apache/felix/maven-bundle-plugin/2.5.0/maven-bundle-plugin-2.5.0.jar
[ERROR] urls[19] = file:/Users/cmueller/.m2/repository/biz/aQute/bnd/bndlib/2.3.0/bndlib-2.3.0.jar
[ERROR] urls[20] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.core/5.0.0/org.osgi.core-5.0.0.jar
[ERROR] urls[21] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.bundlerepository/2.0.2/org.apache.felix.bundlerepository-2.0.2.jar
[ERROR] urls[22] = file:/Users/cmueller/.m2/repository/org/easymock/easymock/3.2/easymock-3.2.jar
[ERROR] urls[23] = file:/Users/cmueller/.m2/repository/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar
[ERROR] urls[24] = file:/Users/cmueller/.m2/repository/org/objenesis/objenesis/1.3/objenesis-1.3.jar
[ERROR] urls[25] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.utils/1.6.0/org.apache.felix.utils-1.6.0.jar
[ERROR] urls[26] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.compendium/5.0.0/org.osgi.compendium-5.0.0.jar
[ERROR] urls[27] = file:/Users/cmueller/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.7/maven-reporting-api-2.0.7.jar
[ERROR] urls[28] = file:/Users/cmueller/.m2/repository/commons-cli/commons-cli/1.0/commons-cli-1.0.jar
[ERROR] urls[29] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar
[ERROR] urls[30] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar
[ERROR] urls[31] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar
[ERROR] urls[32] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar
[ERROR] urls[33] = file:/Users/cmueller/.m2/repository/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar
[ERROR] urls[34] = file:/Users/cmueller/.m2/repository/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar
[ERROR] urls[35] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar
[ERROR] urls[36] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar
[ERROR] urls[37] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar
[ERROR] urls[38] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar
[ERROR] urls[39] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar
[ERROR] urls[40] = file:/Users/cmueller/.m2/repository/org/apache/velocity/velocity/1.5/velocity-1.5.jar
[ERROR] urls[41] = file:/Users/cmueller/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar
[ERROR] urls[42] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar
[ERROR] urls[43] = file:/Users/cmueller/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar
[ERROR] urls[44] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar
[ERROR] urls[45] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar
[ERROR] urls[46] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar
[ERROR] urls[47] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar
[ERROR] urls[48] = file:/Users/cmueller/.m2/repository/org/apache/karaf/features/org.apache.karaf.features.core/2.4.0/org.apache.karaf.features.core-2.4.0.jar
[ERROR] urls[49] = file:/Users/cmueller/.m2/repository/org/apache/karaf/shell/org.apache.karaf.shell.obr/2.4.0/org.apache.karaf.shell.obr-2.4.0.jar
[ERROR] urls[50] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-wrap/2.1.0/pax-url-wrap-2.1.0.jar
[ERROR] urls[51] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-net/1.4.0/ops4j-base-net-1.4.0.jar
[ERROR] urls[52] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-lang/1.4.0/ops4j-base-lang-1.4.0.jar
[ERROR] urls[53] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-monitors/1.4.0/ops4j-base-monitors-1.4.0.jar
[ERROR] urls[54] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-bnd/1.7.1/pax-swissbox-bnd-1.7.1.jar
[ERROR] urls[55] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-commons/2.1.0/pax-url-commons-2.1.0.jar
[ERROR] urls[56] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-property/1.7.1/pax-swissbox-property-1.7.1.jar
[ERROR] urls[57] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-util-property/1.4.0/ops4j-base-util-property-1.4.0.jar
[ERROR] urls[58] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-aether/2.1.0/pax-url-aether-2.1.0.jar
[ERROR] urls[59] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.spring/2.4.0/org.apache.karaf.deployer.spring-2.4.0.jar
[ERROR] urls[60] = file:/Users/cmueller/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.4.0/org.apache.karaf.util-2.4.0.jar
[ERROR] urls[61] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.blueprint/2.4.0/org.apache.karaf.deployer.blueprint-2.4.0.jar
[ERROR] urls[62] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.features/2.4.0/org.apache.karaf.deployer.features-2.4.0.jar
[ERROR] urls[63] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.kar/2.4.0/org.apache.karaf.deployer.kar-2.4.0.jar
[ERROR] urls[64] = file:/Users/cmueller/.m2/repository/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ant/1.8.4_1/org.apache.servicemix.bundles.ant-1.8.4_1.jar
[ERROR] urls[65] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar
[ERROR] urls[66] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/2.6/wagon-http-lightweight-2.6.jar
[ERROR] urls[67] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-shared/2.6/wagon-http-shared-2.6.jar
[ERROR] urls[68] = file:/Users/cmueller/.m2/repository/org/jsoup/jsoup/1.7.2/jsoup-1.7.2.jar
[ERROR] urls[69] = file:/Users/cmueller/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar
[ERROR] urls[70] = file:/Users/cmueller/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar
[ERROR] Number of foreign imports: 1
[ERROR] import: Entry[import  from realm ClassRealm[project>org.apache.camel.karaf:apache-camel:2.15-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]]
[ERROR]
[ERROR] -----------------------------------------------------
[ERROR] -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException","muellerc:1414665959:2014-10-30T18:45:59.638+0000:1414665994:2014-10-30T18:46:34.006+0000:I made a little progress here. Now the validation is failing because some org.eclipse.jetty.server.* packages are missing although we require the ""jetty"" feature and it's provided in the right version range:
{noformat}
  <feature name='camel-cometd' version='${project.version}' resolver='(obr)' start-level='50'>
    <feature>jetty</feature>
    <feature version='${project.version}'>camel-core</feature>
    <bundle dependency='true'>mvn:org.apache.geronimo.specs/geronimo-servlet_3.0_spec/${geronimo-servlet-spec-version}</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.cometd-java-server/${cometd-java-server-bundle-version}</bundle>
    <bundle>mvn:org.apache.camel/camel-cometd/${project.version}</bundle>
  </feature>
{noformat}
 Error:
{noformat}
[INFO]     OK: imports resolved for camel-box
[INFO]     OK: imports resolved for camel-cache
[INFO]     OK: imports resolved for camel-castor
[INFO]     OK: imports resolved for camel-cmis
[WARNING] Failed to validate feature camel-cometd
[WARNING] No export found to match org.eclipse.jetty.server.ssl;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.server;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.servlets;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.server.handler;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.util.resource;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.server.nio;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.server.session;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
[WARNING] No export found to match org.eclipse.jetty.servlet;version=""[7.5,10)"" (imported by mvn:org.apache.camel/camel-cometd/2.15-SNAPSHOT)
{noformat}

[~jbonofre]: Could you please have a look what the reason could be?
jbonofre:1414667687:2014-10-30T19:14:47.284+0000:1414667687:2014-10-30T19:14:47.284+0000:OK let me take a look.
muellerc:1415627590:2014-11-10T21:53:10.153+0000:1415627590:2014-11-10T21:53:10.153+0000:Some news here?
muellerc:1425185391:2015-03-01T12:49:51.115+0000:1425185391:2015-03-01T12:49:51.115+0000:[~jbonofre]: Did you got the time to look into it?
davsclaus:1458694926:2016-03-23T09:02:06.947+0000:1458694926:2016-03-23T09:02:06.947+0000:Works now with karaf4 profile"
0,CAMEL-7886,Bug,Critical,"2.12.4, 2.13.2, 2.14.0","2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Benjamin Habegger,0,2,2014-10-02 08:25:32+00:00,2014-10-09 08:16:46+00:00,"When a ""Content-Type"" header is explicitely set with charset attached before invoking the camel http4 component, the charset is not taken into account.


This is because ContentType.create is invoked with the complete Content-Type when in fact it expects a mediaType.


(see lines 414-416: camel-http4 version 2.14.0)
   if (contentTypeString != null) 

{
      contentType = ContentType.create(contentTypeString);
   }


For example, if header is set to ""application/json; charset=UTF-8"" the contentType returned by ContentType.create(contentTypeString) is null.


And therefore, further down (line 444)  charset is not extracted even though it has been specified.","njiang:1412813806:2014-10-09T08:16:46.605+0000:1412813806:2014-10-09T08:16:46.605+0000:Applied the patch into master, camel-2.14.x , camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7885,Bug,Major,"2.12.4, 2.13.2, 2.14.0","2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-10-01 07:40:08+00:00,2014-10-01 09:19:07+00:00,"If you stop a timer route, and that route has an inflight exchange causing the stop route to force stop due timeout. Then that timer task is still running in the background.


And if you restart the timer route, then it will reuse the old timer instance, which may be still running, and therefore the first trigger time may not happen at the time you would expect.


For example from timer:foo?period=2s to trigger every 2s.",
0,CAMEL-7884,Bug,Major,2.14.0,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Yaron A,1,5,2014-10-01 06:29:14+00:00,2016-05-03 12:29:17+00:00,"I tried to add the camel-netty4-http component to a proper working project that uses camel-netty-http.
HTTP GET requests are working properly but POST requests are not working.
It might be an issue in Netty but I could not find a solution to get it to work.
Here is the exception I see:
2014-10-01 09:12:18,012 DEBUG [042ase_1412143933559.data] [n.s.ehcache.store.disk.Segment]     fault removed 0 from heap
2014-10-01 09:12:18,012 DEBUG [042ase_1412143933559.data] [n.s.ehcache.store.disk.Segment]     fault added 0 on disk
2014-10-01 09:12:18,012 TRACE [pool-1-thread-1          ] [o.a.c.i.c.DefaultTypeConverter]     Converting io.netty.util.IllegalReferenceCountException -> java.lang.Throwable with value: {}
io.netty.util.IllegalReferenceCountException: refCnt: 0
	at io.netty.buffer.AbstractByteBuf.ensureAccessible(AbstractByteBuf.java:1187) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.AbstractByteBuf.checkReadableBytes(AbstractByteBuf.java:1170) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:676) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:1461) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at io.netty.buffer.CompositeByteBuf.readBytes(CompositeByteBuf.java:40) ~[netty-buffer-4.0.23.Final.jar:4.0.23.Final]
	at org.apache.camel.component.netty4.http.NettyChannelBufferStreamCache.read(NettyChannelBufferStreamCache.java:69) ~[camel-netty4-http-2.14.0.jar:2.14.0]
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284) ~[na:1.8.0]
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326) ~[na:1.8.0]
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178) ~[na:1.8.0]
	at java.io.InputStreamReader.read(InputStreamReader.java:184) ~[na:1.8.0]
	at java.io.BufferedReader.fill(BufferedReader.java:161) ~[na:1.8.0]
	at java.io.BufferedReader.read1(BufferedReader.java:212) ~[na:1.8.0]
	at java.io.BufferedReader.read(BufferedReader.java:286) ~[na:1.8.0]
	at java.io.Reader.read(Reader.java:140) ~[na:1.8.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:304) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:290) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:351) ~[camel-core-2.14.0.jar:2.14.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0]
	at java.lang.reflect.Method.invoke(Method.java:483) ~[na:1.8.0]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1002) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:165) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:99) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.builder.ExpressionBuilder$41.evaluate(ExpressionBuilder.java:1011) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterBinding(MethodInfo.java:595) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:485) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:240) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:280) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:149) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398) ~[camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:251) [camel-core-2.14.0.jar:2.14.0]
	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:410) [camel-core-2.14.0.jar:2.14.0]","davsclaus:1412116811:2014-10-01T06:40:11.738+0000:1412116811:2014-10-01T06:40:11.738+0000:Can you tell more about your HTTP POST. Maybe you can provide the details how that request ""looks like"" eg its HTTP headers and body etc. We do have unit tests that works with HTTP POST so it works in general.
yaronab:1412118856:2014-10-01T07:14:16.951+0000:1412118856:2014-10-01T07:14:16.951+0000:I got this exception on every POST request I issued using several HTTP clients (browser, Spring's RestTemplate) and also Camel's ProducerTemplate.
I'm using netty-http both as the HTTP server and also as a HTTP client (my app is a proxy service) and the exception is being thrown after the HTTP client response is received.
Please guide me if the original POST request is what you need or the request that camel-netty4-http issues?

thx
yaronab:1412121194:2014-10-01T07:53:14.925+0000:1412121194:2014-10-01T07:53:14.925+0000:After further digging on the issue, I've now realized that it happens only when I use RoutingSlip.
I've just tried to change my route to use ""to()"" instead of ""routingSlip()"" and everything is properly working.
I updated the title of the bug to be more specific with these findings.
yaronab:1412229164:2014-10-02T13:52:44.564+0000:1412229164:2014-10-02T13:52:44.564+0000:My latest finding is that the issue is not related to the RoutingSlip either but to the use of AsyncProcessor in my route.
I still could not figure how it is related but the same code worked properly with camel-netty-http.
Once I changed my code to be sync with a regular processor, everything got back to work.
davsclaus:1412231261:2014-10-02T14:27:41.033+0000:1412231261:2014-10-02T14:27:41.033+0000:If you are able to zip together a small application or unit test that reproduces your bug, then you are welcome to attach that to this JIRA so we can use that to track down the bug.
amitr:1416305630:2014-11-18T18:13:50.125+0000:1416305630:2014-11-18T18:13:50.125+0000:Hi Claus - 
I'm Yarons coworker, we've created a small app with a unit test that reproduces this issue, 
attached to this comment.

Thx,
Amit.
njiang:1416341340:2014-11-19T04:09:00.352+0000:1416341849:2014-11-19T04:17:29.675+0000:I just ran the tests with camel-2.14.1-SNAPSHOT and camel-2.15-SNAPSHOT, all the tests are passed. After checking the change log, I think it may relate to the Fix of CAMEL-7894.
amitr:1416366907:2014-11-19T11:15:07.366+0000:1416367068:2014-11-19T11:17:48.470+0000:Hi,
I've rerun the UT with the latest 2.14.1-SNAPSHOT version and it's not passing - issue persists...
I'm running with the following snapshots:
camel-netty4-2.14.1-20141119.032555-64
camel-netty4-http-2.14.1-20141119.032558-64

Thx,
Amit.

yaronab:1416366971:2014-11-19T11:16:11.146+0000:1416366971:2014-11-19T11:16:11.146+0000:see Amit last comment
njiang:1416368227:2014-11-19T11:37:07.426+0000:1416368227:2014-11-19T11:37:07.426+0000:It looks like a spring version miss match.
When I changed the spring version to 4.0.7.release, the unit test passed even with Camel Netty 2.14.0.
amitr:1416373746:2014-11-19T13:09:06.890+0000:1416373746:2014-11-19T13:09:06.890+0000:Yes, the problem was with spring version - once changed to 4.0.7-Release - the issue seems to be resolved.
Thx!
yaronab:1417496039:2014-12-02T12:53:59.846+0000:1417496039:2014-12-02T12:53:59.846+0000:please see the following Amit's comment
amitr:1417496262:2014-12-02T12:57:42.121+0000:1417496262:2014-12-02T12:57:42.121+0000:Hi, 
As previously reported - the problem was indeed resolved when running the unit test with spring 4.0.7-RELEASE - but unfortunately when trying to run it ""live"" with tomcat server I still got the same exception.

I'm attaching a zip (""Reproduce2.zip"") that includes a jar that can be executed from command-line, and contains another zip with the sources.
When running the jar it will load the camel route using spring boot.
in order to simulate the issue you need to send any POST message to http://localhost:8080 on your machine after executing command line.

Thx,
Amit.
amitr:1419989961:2014-12-31T09:39:21.732+0000:1419989961:2014-12-31T09:39:21.732+0000:MIght be related to issue Camel-8187: 
https://issues.apache.org/jira/browse/CAMEL-8187
davsclaus:1462248805:2016-05-03T12:13:25.626+0000:1462248805:2016-05-03T12:13:25.626+0000:Okay so the issue is that when you use async processor then netty will complete the http server request and deallocate its buffer, which you cannot read from afterwards when your thread wake up.

So either you need to convert the content to byte[] / string etc to not use netty's buffer anymore. Or we have to add some logic in NettyChannelBufferStreamCache to detect hand over the lifecycle of the buffer, or do a copy of the buffer (a copy will cause 2x memory usage)
davsclaus:1462249757:2016-05-03T12:29:17.511+0000:1462249757:2016-05-03T12:29:17.511+0000:Thanks for the test case. It works now with latest code."
0,CAMEL-7883,Bug,Major,"2.13.2, 2.14.0","2.13.3, 2.14.1, 2.15.0","
None
",Closed,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Benjamin BONNET,0,3,2014-09-30 22:34:40+00:00,2014-10-21 08:40:03+00:00,"Validator component does not take imported XSD encoding into account when validating XML. That may lead to validation errors if an imported XSD is ISO-8859-1 encoded and containing non ASCII caracters, even though that XSD declares its encoding correctly in its XML prolog.","githubbot:1412088460:2014-09-30T22:47:40.665+0000:1412088460:2014-09-30T22:47:40.665+0000:GitHub user bonnetb opened a pull request:

    https://github.com/apache/camel/pull/291

    CAMEL-7883 : Validator XSD decoding issue with non UTF-8 imported XSD

    Let SAX do a good guess for XSD encoding (it uses XSD prolog) instead of using a converter that may not fit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bonnetb/camel xsdBadDecoding

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/291.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #291
    
----
commit cd5ae15b21762513f8242429f734113c301b08f8
Author: Benjamin BONNET <benjamin.bonnet@m4x.org>
Date:   2014-09-30T22:36:43Z

    fix for CAMEL-7883

----

bbonnet:1412088914:2014-09-30T22:55:14.210+0000:1412088914:2014-09-30T22:55:14.210+0000:Hi,
when an imported XSD is decoded, Camel uses a converter defined in context. That converter involves a reader that will not take into account the XSD XML prolog. If that reader does not use the same encoding as one of the imported XSD, you may get into trouble while validating XML files.
Instead of providing the content of XSD as char stream, I think it is more appropriate to provide it as a binary stream and let Sax make a good guess about the XSD encoding.
I made a pull request on github with a unit test and a fix : see https://github.com/apache/camel/pull/291
Regards
njiang:1413744308:2014-10-20T02:45:08.774+0000:1413744308:2014-10-20T02:45:08.774+0000:Applied the patch into camel master, camel-2.14.x and camel-2.13.x branches with thanks to Benjamin.
githubbot:1413851898:2014-10-21T08:38:18.462+0000:1413851898:2014-10-21T08:38:18.462+0000:Github user bonnetb closed the pull request at:

    https://github.com/apache/camel/pull/291

bbonnet:1413852003:2014-10-21T08:40:03.059+0000:1413852003:2014-10-21T08:40:03.059+0000:Thank you Willem"
0,CAMEL-7882,Bug,Minor,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Jan-Helge Bergesen,0,2,2014-09-30 11:16:04+00:00,2014-11-30 15:30:32+00:00,"This is mostly to help others facing the same issue, as we just spent 4x3 hours figuring this out.


An app, that consumes syslog entries and forwards JMS (over OpenMQ), was upgraded from camel 2.13.0 to 2.14.0.
Afterwards many things broke upstream, which was masked by poor logging in some Glassfish servers (truncating stacktraces).


Turns out that the CamelSyslogTimestamp header was silently discarded, being a java.util.GregorianCalendar instance.
Forcing it into a java.util.Date before routing to the JMS endpoint restored service throughout the valuechain.


As I wrote; this is mostly a FYI to others .
But perhaps the documentation might reflect the lack of guaranteed conversion?","davsclaus:1417332632:2014-11-30T15:30:32.029+0000:1417332632:2014-11-30T15:30:32.029+0000:Ah yeah lets keep it as before, I changed it back to a java.util.Date"
0,CAMEL-7881,Bug,Major,"2.12.4, 2.13.2, 2.14.0",None,"
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1",Willem Jiang,Willem Jiang,0,3,2014-09-30 02:22:33+00:00,2020-06-02 07:23:15+00:00,"2014-09-29 16:26:41,670 | INFO  | FelixStartLevel  | restlet                          | org.restlet.engine.Engine         900 | 75 - org.restlet - 2.2.1.v20140506-1533 | Unable to register the helper org.restlet.ext.httpclient.HttpClientHelper
java.lang.NoClassDefFoundError: org/apache/http/params/HttpParams
	at java.lang.Class.getDeclaredConstructors0(Native Method)[:1.7.0_45]
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2493)[:1.7.0_45]
	at java.lang.Class.getConstructor0(Class.java:2803)[:1.7.0_45]
	at java.lang.Class.getConstructor(Class.java:1718)[:1.7.0_45]
	at org.restlet.engine.Engine.registerHelper(Engine.java:896)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.Engine.registerHelpers(Engine.java:928)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelper(Activator.java:96)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelper(Activator.java:78)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.registerHelpers(Activator.java:117)[75:org.restlet:2.2.1.v20140506-1533]
	at org.restlet.engine.internal.Activator.start(Activator.java:143)[75:org.restlet:2.2.1.v20140506-1533]
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:1977)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1895)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1191)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:295)[org.apache.felix.framework-4.0.3.jar:]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]
Caused by: java.lang.ClassNotFoundException: org.apache.http.params.HttpParams not found by org.restlet.ext.httpclient [76]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1460)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:72)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:1843)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)[:1.7.0_45]
	... 16 more","njiang:1412015881:2014-09-30T02:38:01.176+0000:1412015881:2014-09-30T02:38:01.176+0000:Applied the patch into camel master,camel-2.14.x, camel-2.13.x and camel-2.12.x branches.
lucamaf:1591051387:2020-06-02T06:43:07.343+0000:1591051387:2020-06-02T06:43:07.343+0000:I still see this issue:
{code:java}
19:29:52.001 [main] INFO org.restlet - Unable to register the helper org.restlet.ext.httpclient.HttpClientHelper
java.lang.NoClassDefFoundError: org/apache/http/conn/ClientConnectionManager{code}
when using camel-restlet with version 2.21.0.fuse-760027-redhat-00001
acosentino:1591053795:2020-06-02T07:23:15.805+0000:1591053795:2020-06-02T07:23:15.805+0000:The error you posted is from a fuse build. Report to Red Hat. We don't release 2.21 anymore"
0,CAMEL-7880,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Sohrab Hosseini,0,3,2014-09-29 20:30:22+00:00,2015-02-22 07:22:55+00:00,"See: http://camel.465427.n5.nabble.com/RestBindingProcessor-JSON-Data-Format-Config-td5757103.html


When using custom JSON data format in REST DSL, the service incorrectly rejects messages with request structure and accepts messages with response structure.


This is due to org.apache.camel.model.rest.RestBindingDefinition.createProcessor(RouteContext) looking up and configuring the same DataFormat object twice:



DataFormat json = context.resolveDataFormat(name); 
DataFormat outJson = context.resolveDataFormat(name);","sohrab:1411993967:2014-09-29T20:32:47.036+0000:1411993967:2014-09-29T20:32:47.036+0000:Attached an integration test demonstrating the issue.
davsclaus:1417608095:2014-12-03T20:01:35.918+0000:1417608095:2014-12-03T20:01:35.918+0000:Okay got a fix which is a little hack. I think we may need to introduce custom data formats must be configured in pairs, one for input and another for output.

But with the hack it works
>>> Status: HTTP/1.1 200 OK
>>> Body: [output:something]
davsclaus:1417651704:2014-12-04T08:08:24.752+0000:1417651704:2014-12-04T08:08:24.752+0000:Okay so the intention is that setting a custom data format refers only to its name, not to a pre configured instance from the registry. So I am adding that as a validation to fail if so.
sohrab:1418208413:2014-12-10T18:46:53.638+0000:1418208413:2014-12-10T18:46:53.638+0000:Thanks for the fix, Claus.

http://camel.apache.org/custom-dataformat.html only mentions how to use custom data formats as a bean in the registry. I myself am not sure how this is going to work now that this validation has been added but is it worth adding the approach to documentation?
jjathman:1424276670:2015-02-19T00:24:30.677+0000:1424276670:2015-02-19T00:24:30.677+0000:[~davsclaus] I'm still a little confused as to how to use a custom data format. Is it not possible to create a Spring bean customized data format and have that be used? Could you point me to any examples or documentation about how this works with the REST DSL? Thank you.
davsclaus:1424315513:2015-02-19T11:11:53.359+0000:1424315513:2015-02-19T11:11:53.359+0000:You can configure data formats, using the dataFormatProperty in XML also

For example
{code}
  <restConfiguration component=""servlet"" bindingMode=""json"" contextPath=""/camel-example-servlet-rest-blueprint/rest""
                       port=""8181"">
      <dataFormatProperty key=""prettyPrint"" value=""true""/>
    </restConfiguration>
{code}

You can have as many dataFormatProperty you want. And you can prefix with json.in xml.in etc, as in the documentation to have different config.

The rest-dsl requires to instantiate and handle the lifecycle of the used data format, hence not intended to use an existing instance.
jjathman:1424330599:2015-02-19T15:23:19.550+0000:1424330599:2015-02-19T15:23:19.550+0000:Thank you that is helpful. I'm trying to set the {{FAIL_ON_UNKNOWN_PROPERTIES}} of the ObjectMapper instance contained within the JacksonDataFormat. I'm not quite sure how to use the dataFormatProperty, could you point me to how this could be done? In code I would do something like this:

{code:java}
JacksonDataFormat dataFormat = new JacksonDataFormat();
dataFormat.getObjectMapper().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
{code}

Would I do something like {{json.in.objectMapper.deserializationFeature}} ?
davsclaus:1424560949:2015-02-22T07:22:29.877+0000:1424560949:2015-02-22T07:22:29.877+0000:Logged CAMEL-8389 to make this easier to configure, which would make it possible for rest-dsl as well.
davsclaus:1424560975:2015-02-22T07:22:55.025+0000:1424560975:2015-02-22T07:22:55.025+0000:Yeah Joseph, we should make this better. I have logged that ticket."
0,CAMEL-7879,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Litom Segal,4,2,2014-09-29 07:47:54+00:00,2014-11-30 14:08:29+00:00,"I'm using rest dsl definition with netty-http component.
I defined interceptFrom with/without url, and the code doesn't seems to run at all.
The same interceptFrom  works just fine with ""from"" rout definition.",
0,CAMEL-7878,Improvement,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Matt Raible,0,2,2014-09-28 16:38:46+00:00,2014-12-24 12:49:19+00:00,"The ""base.path"" has to be configured or calling the methods by clicking on buttons in Swagger UI doesn't work. With Spring Boot, I'm able to configure Swagger with the following: 



@Configuration 
@EnableSwagger 
public class SwaggerConfig implements EnvironmentAware { 
        public static final String DEFAULT_INCLUDE_PATTERN = ""/api/.*""; 

        private RelaxedPropertyResolver propertyResolver; 

        @Override 
        public void setEnvironment(Environment environment) { 
                this.propertyResolver = new RelaxedPropertyResolver(environment, ""swagger.""); 
        } 

        /** 
         * Swagger Spring MVC configuration 
         */ 
        @Bean 
        public SwaggerSpringMvcPlugin swaggerSpringMvcPlugin(SpringSwaggerConfig springSwaggerConfig) { 
                return new SwaggerSpringMvcPlugin(springSwaggerConfig) 
                                .apiInfo(apiInfo()) 
                                .genericModelSubstitutes(ResponseEntity.class) 
                                .includePatterns(DEFAULT_INCLUDE_PATTERN); 
        } 

        /** 
         * API Info as it appears on the swagger-ui page 
         */ 
        private ApiInfo apiInfo() { 
                return new ApiInfo( 
                                propertyResolver.getProperty(""title""), 
                                propertyResolver.getProperty(""description""), 
                                propertyResolver.getProperty(""termsOfServiceUrl""), 
                                propertyResolver.getProperty(""contact""), 
                                propertyResolver.getProperty(""license""), 
                                propertyResolver.getProperty(""licenseUrl"")); 
        } 
} 




With Camel, it's a bit less code, but if I don't override the ""base.path"", it defaults to localhost:8080. The Spring MVC Swagger implementation figures out the correct base path on its own. 



        /** 
         * Swagger Camel Configuration 
         */ 
        @Bean 
        public ServletRegistrationBean swaggerServlet() { 
                ServletRegistrationBean swagger = new ServletRegistrationBean(new SpringRestSwaggerApiDeclarationServlet(), ""/swagger/*""); 
                Map<String, String> params = new HashMap<>(); 
                params.put(""base.path"", ""https://localhost:8443/rest""); 
                params.put(""api.title"", propertyResolver.getProperty(""title"")); 
                params.put(""api.description"", propertyResolver.getProperty(""description"")); 
                params.put(""api.termsOfServiceUrl"", propertyResolver.getProperty(""termsOfServiceUrl"")); 
                params.put(""api.version"", propertyResolver.getProperty(""version"")); 
                params.put(""api.license"", propertyResolver.getProperty(""license"")); 
                params.put(""api.licenseUrl"", propertyResolver.getProperty(""licenseUrl"")); 
                swagger.setInitParameters(params); 
                return swagger; 
        } 




Is it possible to improve the SpringRestSwaggerApiDeclarationServlet so it gets the path from CamelServlet and it doesn't have to be hardcoded? 


Mailing list thread: 
http://camel.465427.n5.nabble.com/Camel-s-Swagger-vs-Spring-MVC-Swagger-td5757023.html",davsclaus:1419396559:2014-12-24T12:49:19.947+0000:1419396559:2014-12-24T12:49:19.947+0000:You can now use relative paths when configuring this.
0,CAMEL-7877,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.16.0,Babak Vahdat,Babak Vahdat,0,2,2014-09-27 20:32:08+00:00,2015-04-02 18:09:37+00:00,"See:


http://camel.465427.n5.nabble.com/Problems-prettyPrinting-JSON-after-camel-2-14-0-upgrade-td5756738.html


It would be nice to have support for the prettyPrint option no matter if the XStream, Jackson or GSon library is in use.",
0,CAMEL-7876,Bug,Minor,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Tom Ellis,0,3,2014-09-27 16:24:35+00:00,2014-09-28 09:08:02+00:00,"Line 141 of GroupIterator calls toString on it's ByteArrayOutputStream, thereby utilising the default encoding set for the JVM.


This can cause issues when say splitting an exchange's body using token/groups with a different encoding from that of the JVM's default.","githubbot:1411806894:2014-09-27T16:34:54.723+0000:1411806894:2014-09-27T16:34:54.723+0000:GitHub user tellisnz opened a pull request:

    https://github.com/apache/camel/pull/286

    CAMEL-7876 ensure GroupIterator uses the exchange's CHARSET_NAME property

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tellisnz/camel CAMEL-7876

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/286.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #286
    
----
commit 0986833fa6966c2e85b25be80aa3097409e18dfa
Author: Tom Ellis <tellisnz@gmail.com>
Date:   2014-09-27T16:27:33Z

    CAMEL-7876 ensure GroupIterator uses the exchange's CHARSET_NAME property

----

njiang:1411846337:2014-09-28T03:32:17.798+0000:1411846337:2014-09-28T03:32:17.798+0000:Merged the patch into camel master branch, I also add the old construction method back for backward compatibility. 
githubbot:1411866482:2014-09-28T09:08:02.446+0000:1411866482:2014-09-28T09:08:02.446+0000:Github user tellisnz closed the pull request at:

    https://github.com/apache/camel/pull/286
"
0,CAMEL-7875,Improvement,Minor,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Jyrki Ruuskanen,0,6,2014-09-27 15:44:58+00:00,2019-03-01 13:37:01+00:00,"I haven't found a nice way to add beans to Camel context registry through Camel context reference in plain Java. Some beans are only needed by a certain endpoint and it would make sense to set the bean up with the endpoint in routebuilder configure method.


If we added a reference to self in SimpleRegistry we could setup the Camel context by DefaultCamelContext(new SimpleRegistry()) or OsgiDefaultCamelContext(bundleContext, new SimpleRegistry()) and easily access the registry from the routebuilder with SimpleRegistry registry = (SimpleRegistry) getContext().lookupByName(SimpleRegistry.NAME);.


Then we can set up beans in routebuilder configure and simply add them with registry.put. And the same routebuilder could be used in plain Java, in OSGi or elsewhere.


All that is needed is this change in SimpleRegistry:



public static final String NAME;
static {
   NAME = java.util.UUID.randomUUID().tostring();
}

public SimpleRegistry() {
   put.(NAME, this);
}","yuruki:1411855343:2014-09-28T06:02:23.552+0000:1411868896:2014-09-28T09:48:16.980+0000:Ideally, from a user's perspective, I would expect CamelContext to allow a direct put into its registry. Something like: getContext().getRegistry().add(""thisand"", ""that"");. But given the number of different registry combinations that is probably not very easy to implement in a clean fashion.

Of course there is the usual way of passing the registry reference to the routebuilders, but that is not very straightforward when working with org.apache.camel.main.Main.
yuruki:1411947886:2014-09-29T07:44:46.451+0000:1411947886:2014-09-29T07:44:46.451+0000:Adding beans to registry seems to be hard also when unit testing with CamelTestSupport where CamelContext creation is locked inside the longish doSetUp() method.

How about just biting the bullet and adding a bind(String name, Object bean) method to the Registry interface and every implementation? Then the user wouldn't have to care which registry flavor CamelContext is using behind the scenes.
yuruki:1411952423:2014-09-29T09:00:23.853+0000:1411952423:2014-09-29T09:00:23.853+0000:Ended up creating a helper method as a temporary workaround:

{code}
    public static <T extends Registry> void addToRegistry(final T registry, final String name, final Object bean) {
        Registry reg = registry;

        // Unwrap PropertyPlaceholderDelegateRegistry
        if (registry instanceof PropertyPlaceholderDelegateRegistry) {
            reg = ((PropertyPlaceholderDelegateRegistry) reg).getRegistry();
        }

        if (reg instanceof CompositeRegistry) {
            // getRegistryList() not available in Camel 2.12
            SimpleRegistry r = new SimpleRegistry();
            r.put(name, bean);
            ((CompositeRegistry) reg).addRegistry(r);
        } else if (reg instanceof JndiRegistry) {
            ((JndiRegistry) reg).bind(name, bean);
        } else if (reg instanceof SimpleRegistry) {
            ((SimpleRegistry) reg).put(name, bean);
        } else {
            throw new IllegalArgumentException(""Couldn't add bean. Unknown registry type: "" + reg.getClass());
        }

        if (registry.lookupByName(name) != bean) {
            throw new IllegalArgumentException(""Couldn't add bean. Bean not found from the registry."");
        }
    }
{code}
antoine.dessaigne:1412151829:2014-10-01T16:23:49.115+0000:1412151829:2014-10-01T16:23:49.115+0000:I'm not sure to understand what you want to do.

From a user standpoint if you want to put values into your registry you can use a {{SimpleRegistry}} and keep a reference on it. If you can't keep a reference you can add it into your registry
{code}
SimpleRegistry registry = new SimpleRegistry();
registry.put(""itself"", registry)

// Later on you can do
getContext().getRegistry().lookupByNameAndType(""itself"", SimpleRegistry.class).put(theKey, theValue)
{code}
yuruki:1412155200:2014-10-01T17:20:00.344+0000:1412155200:2014-10-01T17:20:00.344+0000:I've been just thinking about the possible ways to make it easier to add objects into CamelContext's registry from routebuilder's configure method. At the same time I'm trying to keep my routebuilders portable so that they would run the same in org.apache.camel.main.Main and Karaf SCR bundle.

Your approach works fine in both as long as the CamelContext is created with a SimpleRegistry and the routebuilder knows the registry key (""itself"").

The change to SimpleRegistry up there in the original post is of course not possible because it would make the registry non-empty when it's instanciated, and that would be odd to many (including me). But the point was to guarantee that if routebuilder knows SimpleRegistry it would also know its key.

The best solution would be to have a method for adding stuff in the Registry interface. Is there a reason why Registry should be read-only?
githubbot:1412584399:2014-10-06T16:33:19.622+0000:1412584399:2014-10-06T16:33:19.622+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/296

    CAMEL-7875 Method for adding objects to Registry

    Having a write method in Registry interface simplifies configuring Camel routes in CamelTestSupport unit tests where a registry reference is not available and when you would like to configure beans required by the components inside route builder's configure method.
    
    This change eliminates the need to pass registry references around. If your code can see its CamelContext you'll have uniform write access to its registry.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel registryWrite

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/296.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #296
    
----
commit 74526552c9f51f8fdb5386b6456791ec1e57ac3c
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2014-10-06T16:19:38Z

    Added add(String name, Object object) method to Registry

----

yuruki:1412584522:2014-10-06T16:35:22.777+0000:1412584522:2014-10-06T16:35:22.777+0000:Created a pull request here:
https://github.com/apache/camel/pull/296/files
njiang:1412980342:2014-10-11T06:32:22.035+0000:1412980342:2014-10-11T06:32:22.035+0000:I don't think it's good idea to let the user change the registry once the registry is created.
For the ApplicationContextRegistry, BlueprintContainerRegistry, OSgiServiceRegistry and CdiBeanRegistry, we are not supposed to change them.

I think we can live with CompositeRegistry to add object and don't change the other Registry.

yuruki:1412991795:2014-10-11T09:43:15.103+0000:1412991795:2014-10-11T09:43:15.103+0000:Fair enough. If there are that many read-only Registry implementations we obviously can't add a write method to Registry interface.

The thought of easier write access to CamelContext's registry came to me when a component in a route required a bean in the registry (jetty securityHandler, restlet restletRealm and others). The go-to object in Camel is CamelContext and I was surprised to learn there is no method for adding beans there.

OK, I thought, I'll just create the CamelContext with a SimpleRegistry and pass it to the RouteBuilders. This worked fine until I noticed that CamelTestSupport doesn't offer a way to create the context with a SimpleRegistry. Well, I dropped CamelTestSupport and nowadays create the tests as plain JUnit4 tests.

Still, instead of making every framework around CamelContext (such as CamelTestSupport) flexible enough to suit everyone CamelContext could host its own SimpleRegistry by default which would offer write access and which would be included in the lookups (not unlike CompositeRegistry). Its usage could be something like:

{code}
context.getEmbeddedRegistry().put(""name"", bean);
{code}

What do you think?
githubbot:1413584434:2014-10-18T06:20:34.843+0000:1413584434:2014-10-18T06:20:34.843+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/296

davsclaus:1414211059:2014-10-25T12:24:19.680+0000:1414211059:2014-10-25T12:24:19.680+0000:We have to be careful about this. As Camel does not hosts its own bean registry but integrates with spring / jndi / cdi / osgi etc. And those have various features to pre/post process the beans and whatnot. 

A Camel registry will thus not offer that functionality, and make it inconsistent behavior when a bean is found from Camel vs the others.

Also if a bean by type / name is in both which one to choose, and return? (eg how to handle duplicates) etc.

If the use-case is to make it easier to register beans manually to override existing beans for unit testing, then its better to improve camel-test. And leave current as-is.
yuruki:1414223259:2014-10-25T15:47:39.536+0000:1414223259:2014-10-25T15:47:39.536+0000:If the embedded registry is empty by default and used in the lookups first it won't cause any surprises or unwanted side-effects. If the user doesn't use the embedded registry, everything works exactly as before.

If the user decided to put beans in the embedded registry they should know that the bean initializations are up to them, as it is for Simple and Jndi registries now. These beans will stay in their CamelContext's scope and won't cause problems elsewhere.

Pretty much the only visible change required for all of this is to provide access to a SimpleRegistry inside CamelContext with public getEmbeddedRegistry() method. Most of the remaining functionality already exists in [Osgi]DefaultCamelContext(new SimpleRegistry()) code path."
0,CAMEL-7874,Bug,Minor,2.14.0,"2.14.1, 2.15.0","

jackson
json
prettyprint

",Resolved,Fixed,"2.14.1, 2.15.0",Babak Vahdat,David J. M. Karlsen,0,2,2014-09-27 15:38:23+00:00,2014-09-27 20:32:43+00:00,See http://camel.465427.n5.nabble.com/Problems-prettyPrinting-JSON-after-camel-2-14-0-upgrade-td5756738.html#a5757104 for a background.,bvahdat:1411820439:2014-09-27T20:20:39.435+0000:1411820439:2014-09-27T20:20:39.435+0000:Thanks for reporting.
